

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 15 02:03:42 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     _INTCONbits	set	4082
    40  0000                     _PIE3bits	set	4003
    41  0000                     _PIR1bits	set	3998
    42  0000                     _PIR3bits	set	4004
    43  0000                     _PORTAbits	set	3968
    44  0000                     _PORTCbits	set	3970
    45  0000                     _SSP1BUF	set	4041
    46  0000                     _SSP1CON1	set	4038
    47  0000                     _SSP1CON1bits	set	4038
    48  0000                     _SSP1STAT	set	4039
    49  0000                     _SSP1STATbits	set	4039
    50  0000                     _SSP2BUF	set	3942
    51  0000                     _SSP2CON1	set	3939
    52  0000                     _SSP2CON1bits	set	3939
    53  0000                     _SSP2STAT	set	3940
    54  0000                     _SSP2STATbits	set	3940
    55  0000                     _TRISAbits	set	3986
    56  0000                     _TRISCbits	set	3988
    57  0000                     _TRISDbits	set	3989
    58  0000                     _TRISFbits	set	3991
    59                           
    60                           	psect	smallconst
    61  001000                     __psmallconst:
    62                           	opt stack 0
    63  001000  00                 	db	0
    64  001001  38                 	db	56	;'8'
    65  001002  36                 	db	54	;'6'
    66  001003  38                 	db	56	;'8'
    67  001004  30                 	db	48	;'0'
    68  001005  3A                 	db	58	;':'
    69  001006  20                 	db	32
    70  001007  00                 	db	0
    71  001008  38                 	db	56	;'8'
    72  001009  37                 	db	55	;'7'
    73  00100A  32                 	db	50	;'2'
    74  00100B  32                 	db	50	;'2'
    75  00100C  3A                 	db	58	;':'
    76  00100D  20                 	db	32
    77  00100E  00                 	db	0
    78                           
    79                           ; #config settings
    80  00100F  00                 	db	0	; dummy byte at the end
    81  0000                     
    82                           	psect	cinit
    83  0019F8                     __pcinit:
    84                           	opt stack 0
    85  0019F8                     start_initialization:
    86                           	opt stack 0
    87  0019F8                     __initialization:
    88                           	opt stack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (28 bytes)
    91  0019F8  EE00  F035         	lfsr	0,__pbssCOMRAM
    92  0019FC  0E1C               	movlw	28
    93  0019FE                     clear_0:
    94  0019FE  6AEE               	clrf	postinc0,c
    95  001A00  06E8               	decf	wreg,f,c
    96  001A02  E1FD               	bnz	clear_0
    97  001A04                     end_of_initialization:
    98                           	opt stack 0
    99  001A04                     __end_of__initialization:
   100                           	opt stack 0
   101  001A04  0100               	movlb	0
   102  001A06  EF08  F008         	goto	_main	;jump to C main() function
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssCOMRAM
   107  000035                     __pbssCOMRAM:
   108                           	opt stack 0
   109  000035                     _DoubleSPIS:
   110                           	opt stack 0
   111  000035                     	ds	4
   112  000039                     _CurrentAngle:
   113                           	opt stack 0
   114  000039                     	ds	3
   115  00003C                     _CurrentVelocity:
   116                           	opt stack 0
   117  00003C                     	ds	3
   118  00003F                     _Kd:
   119                           	opt stack 0
   120  00003F                     	ds	3
   121  000042                     _Ki:
   122                           	opt stack 0
   123  000042                     	ds	3
   124  000045                     _Kp:
   125                           	opt stack 0
   126  000045                     	ds	3
   127  000048                     _SetAngle:
   128                           	opt stack 0
   129  000048                     	ds	3
   130  00004B                     _DoublePtr:
   131                           	opt stack 0
   132  00004B                     	ds	2
   133  00004D                     _Command:
   134                           	opt stack 0
   135  00004D                     	ds	1
   136  00004E                     _PIDEnableFlag:
   137                           	opt stack 0
   138  00004E                     	ds	1
   139  00004F                     _SPIflag:
   140                           	opt stack 0
   141  00004F                     	ds	1
   142  000050                     _dummy_byte:
   143                           	opt stack 0
   144  000050                     	ds	1
   145                           postinc0	equ	0xFEE
   146                           wreg	equ	0xFE8
   147                           
   148                           	psect	cstackBANK0
   149  000060                     __pcstackBANK0:
   150                           	opt stack 0
   151  000060                     LCDbreakDouble@dubs:
   152                           	opt stack 0
   153                           
   154                           ; 3 bytes @ 0x0
   155  000060                     	ds	3
   156  000063                     LCDbreakDouble@tempDub:
   157                           	opt stack 0
   158                           
   159                           ; 2 bytes @ 0x3
   160  000063                     	ds	2
   161  000065                     LCDbreakDouble@temp1:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x5
   165  000065                     	ds	2
   166  000067                     LCDbreakDouble@temp2:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0x7
   170  000067                     	ds	2
   171  000069                     main@temporary:
   172                           	opt stack 0
   173                           
   174                           ; 1 bytes @ 0x9
   175  000069                     	ds	1
   176  00006A                     main@x:
   177                           	opt stack 0
   178                           
   179                           ; 1 bytes @ 0xA
   180  00006A                     	ds	1
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt stack 0
   187  000001                     ??_ISR:
   188  000001                     
   189                           ; 1 bytes @ 0x0
   190  000001                     	ds	14
   191  00000F                     ?___lwdiv:
   192                           	opt stack 0
   193  00000F                     ?___lwmod:
   194                           	opt stack 0
   195  00000F                     ?_SPIReassembleDouble:
   196                           	opt stack 0
   197  00000F                     ?___ftpack:
   198                           	opt stack 0
   199  00000F                     SendSPI1@temp:
   200                           	opt stack 0
   201  00000F                     GenerateChecksum@sum:
   202                           	opt stack 0
   203  00000F                     OpenSPI1@bus_mode:
   204                           	opt stack 0
   205  00000F                     WriteSPI1@TempVar:
   206                           	opt stack 0
   207  00000F                     OpenSPI2@bus_mode:
   208                           	opt stack 0
   209  00000F                     Delay10TCYx@unit:
   210                           	opt stack 0
   211  00000F                     ___lwdiv@dividend:
   212                           	opt stack 0
   213  00000F                     ___lwmod@dividend:
   214                           	opt stack 0
   215  00000F                     ___ftpack@arg:
   216                           	opt stack 0
   217                           
   218                           ; 3 bytes @ 0xE
   219  00000F                     	ds	1
   220  000010                     SendSPI1@data:
   221                           	opt stack 0
   222  000010                     GenerateChecksum@y:
   223                           	opt stack 0
   224  000010                     OpenSPI1@smp_phase:
   225                           	opt stack 0
   226  000010                     WriteSPI1@data_out:
   227                           	opt stack 0
   228  000010                     OpenSPI2@smp_phase:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0xF
   232  000010                     	ds	1
   233  000011                     setGPIO@value:
   234                           	opt stack 0
   235  000011                     setIODIR@dir:
   236                           	opt stack 0
   237  000011                     OpenSPI1@sync_mode:
   238                           	opt stack 0
   239  000011                     OpenSPI2@sync_mode:
   240                           	opt stack 0
   241  000011                     ___lwdiv@divisor:
   242                           	opt stack 0
   243  000011                     ___lwmod@divisor:
   244                           	opt stack 0
   245  000011                     SPIDisassembleDouble@dub:
   246                           	opt stack 0
   247                           
   248                           ; 3 bytes @ 0x10
   249  000011                     	ds	1
   250  000012                     setGPIO@address:
   251                           	opt stack 0
   252  000012                     setIODIR@address:
   253                           	opt stack 0
   254  000012                     ___ftpack@exp:
   255                           	opt stack 0
   256  000012                     SPIReassembleDouble@dub:
   257                           	opt stack 0
   258                           
   259                           ; 3 bytes @ 0x11
   260  000012                     	ds	1
   261  000013                     lcdCommand@command:
   262                           	opt stack 0
   263  000013                     lcdChar@letter:
   264                           	opt stack 0
   265  000013                     ___ftpack@sign:
   266                           	opt stack 0
   267  000013                     ___lwdiv@counter:
   268                           	opt stack 0
   269  000013                     ___lwmod@counter:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x12
   273  000013                     	ds	1
   274  000014                     ??___ftpack:
   275  000014                     lcdGoTo@pos:
   276                           	opt stack 0
   277  000014                     ___lwdiv@quotient:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x13
   281  000014                     	ds	3
   282  000017                     ?___ftmul:
   283                           	opt stack 0
   284  000017                     ___ftmul@f1:
   285                           	opt stack 0
   286                           
   287                           ; 3 bytes @ 0x16
   288  000017                     	ds	3
   289  00001A                     ___ftmul@f2:
   290                           	opt stack 0
   291                           
   292                           ; 3 bytes @ 0x19
   293  00001A                     	ds	3
   294  00001D                     ??___ftmul:
   295                           
   296                           ; 0 bytes @ 0x1C
   297  00001D                     	ds	3
   298  000020                     ___ftmul@exp:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x1F
   302  000020                     	ds	1
   303  000021                     ___ftmul@f3_as_product:
   304                           	opt stack 0
   305                           
   306                           ; 3 bytes @ 0x20
   307  000021                     	ds	3
   308  000024                     ___ftmul@cntr:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x23
   312  000024                     	ds	1
   313  000025                     ___ftmul@sign:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x24
   317  000025                     	ds	1
   318  000026                     ?___fttol:
   319                           	opt stack 0
   320  000026                     ___fttol@f1:
   321                           	opt stack 0
   322                           
   323                           ; 3 bytes @ 0x25
   324  000026                     	ds	4
   325  00002A                     ??___fttol:
   326                           
   327                           ; 0 bytes @ 0x29
   328  00002A                     	ds	5
   329  00002F                     ___fttol@sign1:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0x2E
   333  00002F                     	ds	1
   334  000030                     ___fttol@lval:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x2F
   338  000030                     	ds	4
   339  000034                     ___fttol@exp1:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x33
   343  000034                     	ds	1
   344  000035                     postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           ; 0 bytes @ 0x34
   348 ;;
   349 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   350 ;;
   351 ;; *************** function _main *****************
   352 ;; Defined at:
   353 ;;		line 15 in file "SPItestSLAVE.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  x               1   10[BANK0 ] unsigned char 
   358 ;;  temporary       1    9[BANK0 ] unsigned char 
   359 ;; Return value:  Size  Location     Type
   360 ;;		None               void
   361 ;; Registers used:
   362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   363 ;; Tracked objects:
   364 ;;		On entry : 0/0
   365 ;;		On exit  : 0/0
   366 ;;		Unchanged: 0/0
   367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   369 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;Total ram usage:        2 bytes
   373 ;; Hardware stack levels required when called:    7
   374 ;; This function calls:
   375 ;;		_LCDbreakDouble
   376 ;;		_ReceiveSPI1
   377 ;;		_SPIDisassembleDouble
   378 ;;		_SPIReassembleDouble
   379 ;;		_SendSPI1
   380 ;;		_initialize
   381 ;; This function is called by:
   382 ;;		Startup code after reset
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           	psect	text0
   387  001010                     __ptext0:
   388                           	opt stack 0
   389  001010                     _main:
   390                           	opt stack 24
   391                           
   392                           ;SPItestSLAVE.c: 17: unsigned char temporary, x;
   393                           ;SPItestSLAVE.c: 18: initialize();
   394                           
   395                           ;incstack = 0
   396  001010  EC1E  F00D         	call	_initialize	;wreg free
   397                           
   398                           ;SPItestSLAVE.c: 19: SPIDisassembleDouble(355.89);
   399  001014  0EF2               	movlw	242
   400  001016  6E11               	movwf	SPIDisassembleDouble@dub,c
   401  001018  0EB1               	movlw	177
   402  00101A  6E12               	movwf	SPIDisassembleDouble@dub+1,c
   403  00101C  0E43               	movlw	67
   404  00101E  6E13               	movwf	SPIDisassembleDouble@dub+2,c
   405  001020  EC84  F00C         	call	_SPIDisassembleDouble	;wreg free
   406                           
   407                           ;SPItestSLAVE.c: 21: PORTCbits.RC6 = 0;
   408  001024  9C82               	bcf	3970,6,c	;volatile
   409                           
   410                           ;SPItestSLAVE.c: 22: SSP2BUF = dummy_byte;
   411  001026  C050  FF66         	movff	_dummy_byte,3942	;volatile
   412  00102A  D000               	goto	l2245
   413  00102C                     l2245:
   414                           
   415                           ;SPItestSLAVE.c: 25: {
   416                           ;SPItestSLAVE.c: 26: if (SPIflag == 1)
   417  00102C  044F               	decf	_SPIflag,w,c
   418  00102E  A4D8               	btfss	status,2,c
   419  001030  D7FD               	goto	l2245
   420                           
   421                           ;SPItestSLAVE.c: 27: {
   422                           ;SPItestSLAVE.c: 28: SPIflag = 0;
   423  001032  0E00               	movlw	0
   424  001034  6E4F               	movwf	_SPIflag,c
   425                           
   426                           ;SPItestSLAVE.c: 29: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || 
      +                          (Command == 0x06) || (Command == 0x08))
   427  001036  0E02               	movlw	2
   428  001038  184D               	xorwf	_Command,w,c
   429  00103A  B4D8               	btfsc	status,2,c
   430  00103C  D010               	goto	l2259
   431  00103E  0E03               	movlw	3
   432  001040  184D               	xorwf	_Command,w,c
   433  001042  B4D8               	btfsc	status,2,c
   434  001044  D00C               	goto	l2259
   435  001046  0E04               	movlw	4
   436  001048  184D               	xorwf	_Command,w,c
   437  00104A  B4D8               	btfsc	status,2,c
   438  00104C  D008               	goto	l2259
   439  00104E  0E06               	movlw	6
   440  001050  184D               	xorwf	_Command,w,c
   441  001052  B4D8               	btfsc	status,2,c
   442  001054  D004               	goto	l2259
   443  001056  0E08               	movlw	8
   444  001058  184D               	xorwf	_Command,w,c
   445  00105A  A4D8               	btfss	status,2,c
   446  00105C  D05A               	goto	l2293
   447  00105E                     l2259:
   448                           
   449                           ;SPItestSLAVE.c: 30: {
   450                           ;SPItestSLAVE.c: 31: if (Command == 0x02)
   451  00105E  0E02               	movlw	2
   452  001060  184D               	xorwf	_Command,w,c
   453  001062  A4D8               	btfss	status,2,c
   454  001064  D009               	goto	l2263
   455                           
   456                           ;SPItestSLAVE.c: 32: SPIDisassembleDouble(CurrentAngle);
   457  001066  C039  F011         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   458  00106A  C03A  F012         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   459  00106E  C03B  F013         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   460  001072  EC84  F00C         	call	_SPIDisassembleDouble	;wreg free
   461  001076  D034               	goto	l2279
   462  001078                     l2263:
   463                           
   464                           ;SPItestSLAVE.c: 33: else if (Command == 0x03)
   465  001078  0E03               	movlw	3
   466  00107A  184D               	xorwf	_Command,w,c
   467  00107C  A4D8               	btfss	status,2,c
   468  00107E  D009               	goto	l2267
   469                           
   470                           ;SPItestSLAVE.c: 34: SPIDisassembleDouble(CurrentVelocity);
   471  001080  C03C  F011         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   472  001084  C03D  F012         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   473  001088  C03E  F013         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   474  00108C  EC84  F00C         	call	_SPIDisassembleDouble	;wreg free
   475  001090  D027               	goto	l2279
   476  001092                     l2267:
   477                           
   478                           ;SPItestSLAVE.c: 35: else if (Command == 0x04)
   479  001092  0E04               	movlw	4
   480  001094  184D               	xorwf	_Command,w,c
   481  001096  A4D8               	btfss	status,2,c
   482  001098  D009               	goto	l2271
   483                           
   484                           ;SPItestSLAVE.c: 36: SPIDisassembleDouble(Kp);
   485  00109A  C045  F011         	movff	_Kp,SPIDisassembleDouble@dub
   486  00109E  C046  F012         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   487  0010A2  C047  F013         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   488  0010A6  EC84  F00C         	call	_SPIDisassembleDouble	;wreg free
   489  0010AA  D01A               	goto	l2279
   490  0010AC                     l2271:
   491                           
   492                           ;SPItestSLAVE.c: 37: else if (Command == 0x06)
   493  0010AC  0E06               	movlw	6
   494  0010AE  184D               	xorwf	_Command,w,c
   495  0010B0  A4D8               	btfss	status,2,c
   496  0010B2  D009               	goto	l2275
   497                           
   498                           ;SPItestSLAVE.c: 38: SPIDisassembleDouble(Ki);
   499  0010B4  C042  F011         	movff	_Ki,SPIDisassembleDouble@dub
   500  0010B8  C043  F012         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   501  0010BC  C044  F013         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   502  0010C0  EC84  F00C         	call	_SPIDisassembleDouble	;wreg free
   503  0010C4  D00D               	goto	l2279
   504  0010C6                     l2275:
   505                           
   506                           ;SPItestSLAVE.c: 39: else if (Command == 0x08)
   507  0010C6  0E08               	movlw	8
   508  0010C8  184D               	xorwf	_Command,w,c
   509  0010CA  A4D8               	btfss	status,2,c
   510  0010CC  D009               	goto	l2279
   511                           
   512                           ;SPItestSLAVE.c: 40: SPIDisassembleDouble(Kd);
   513  0010CE  C03F  F011         	movff	_Kd,SPIDisassembleDouble@dub
   514  0010D2  C040  F012         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   515  0010D6  C041  F013         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   516  0010DA  EC84  F00C         	call	_SPIDisassembleDouble	;wreg free
   517  0010DE  D000               	goto	l2279
   518  0010E0                     l2279:
   519                           
   520                           ;SPItestSLAVE.c: 41: PORTCbits.RC6 = 0;
   521  0010E0  9C82               	bcf	3970,6,c	;volatile
   522                           
   523                           ;SPItestSLAVE.c: 42: for (x = 0; x < 4; x++)
   524  0010E2  0E00               	movlw	0
   525  0010E4  0100               	movlb	0	; () banked
   526  0010E6  6F6A               	movwf	main@x& (0+255),b
   527  0010E8  D00F               	goto	l2291
   528                           
   529                           ; BSR set to: 0
   530                           
   531                           ; BSR set to: 0
   532  0010EA  D091               	goto	l2339
   533  0010EC                     l2287:
   534                           
   535                           ; BSR set to: 0
   536                           ;SPItestSLAVE.c: 43: SendSPI1(DoubleSPIS[x]);
   537  0010EC  0100               	movlb	0	; () banked
   538  0010EE  516A               	movf	main@x& (0+255),w,b
   539  0010F0  0D01               	mullw	1
   540  0010F2  0E35               	movlw	low _DoubleSPIS
   541  0010F4  24F3               	addwf	prodl,w,c
   542  0010F6  6ED9               	movwf	fsr2l,c
   543  0010F8  0E00               	movlw	high _DoubleSPIS
   544  0010FA  20F4               	addwfc	prodh,w,c
   545  0010FC  6EDA               	movwf	fsr2h,c
   546  0010FE  50DF               	movf	indf2,w,c
   547  001100  ECE6  F00C         	call	_SendSPI1
   548  001104  0100               	movlb	0	; () banked
   549  001106  2B6A               	incf	main@x& (0+255),f,b
   550  001108                     l2291:
   551                           
   552                           ; BSR set to: 0
   553  001108  0E03               	movlw	3
   554  00110A  0100               	movlb	0	; () banked
   555  00110C  656A               	cpfsgt	main@x& (0+255),b
   556  00110E  D7EE               	goto	l2287
   557  001110  D07E               	goto	l2339
   558  001112                     l2293:
   559                           
   560                           ;SPItestSLAVE.c: 46: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07
      +                          ) || (Command == 0x09))
   561  001112  044D               	decf	_Command,w,c
   562  001114  B4D8               	btfsc	status,2,c
   563  001116  D00C               	goto	l107
   564  001118  0E05               	movlw	5
   565  00111A  184D               	xorwf	_Command,w,c
   566  00111C  B4D8               	btfsc	status,2,c
   567  00111E  D008               	goto	l107
   568  001120  0E07               	movlw	7
   569  001122  184D               	xorwf	_Command,w,c
   570  001124  B4D8               	btfsc	status,2,c
   571  001126  D004               	goto	l107
   572  001128  0E09               	movlw	9
   573  00112A  184D               	xorwf	_Command,w,c
   574  00112C  A4D8               	btfss	status,2,c
   575  00112E  D072               	goto	l2341
   576  001130                     l107:
   577                           
   578                           ;SPItestSLAVE.c: 47: {
   579                           ;SPItestSLAVE.c: 48: PORTCbits.RC6 = 0;
   580  001130  9C82               	bcf	3970,6,c	;volatile
   581                           
   582                           ;SPItestSLAVE.c: 49: for (x = 0; x != 4; x++)
   583  001132  0E00               	movlw	0
   584  001134  0100               	movlb	0	; () banked
   585  001136  6F6A               	movwf	main@x& (0+255),b
   586  001138                     l2303:
   587                           
   588                           ; BSR set to: 0
   589  001138  0E04               	movlw	4
   590  00113A  0100               	movlb	0	; () banked
   591  00113C  196A               	xorwf	main@x& (0+255),w,b
   592  00113E  B4D8               	btfsc	status,2,c
   593  001140  D011               	goto	l2313
   594  001142  D001               	goto	l2307
   595                           
   596                           ; BSR set to: 0
   597  001144  D00F               	goto	l2313
   598  001146                     l2307:
   599                           
   600                           ; BSR set to: 0
   601                           ;SPItestSLAVE.c: 50: DoubleSPIS[x] = ReceiveSPI1();
   602  001146  0100               	movlb	0	; () banked
   603  001148  516A               	movf	main@x& (0+255),w,b
   604  00114A  0D01               	mullw	1
   605  00114C  0E35               	movlw	low _DoubleSPIS
   606  00114E  24F3               	addwf	prodl,w,c
   607  001150  6ED9               	movwf	fsr2l,c
   608  001152  0E00               	movlw	high _DoubleSPIS
   609  001154  20F4               	addwfc	prodh,w,c
   610  001156  6EDA               	movwf	fsr2h,c
   611  001158  EC0E  F00D         	call	_ReceiveSPI1	;wreg free
   612  00115C  6EDF               	movwf	indf2,c
   613  00115E  0100               	movlb	0	; () banked
   614  001160  2B6A               	incf	main@x& (0+255),f,b
   615  001162  D7EA               	goto	l2303
   616  001164                     l2313:
   617                           
   618                           ; BSR set to: 0
   619                           ;SPItestSLAVE.c: 51: if (Command == 0x01)
   620  001164  044D               	decf	_Command,w,c
   621  001166  A4D8               	btfss	status,2,c
   622  001168  D013               	goto	l2321
   623                           
   624                           ; BSR set to: 0
   625                           ;SPItestSLAVE.c: 52: {
   626                           ;SPItestSLAVE.c: 53: SetAngle = SPIReassembleDouble();
   627  00116A  EC21  F00C         	call	_SPIReassembleDouble	;wreg free
   628  00116E  C00F  F048         	movff	?_SPIReassembleDouble,_SetAngle
   629  001172  C010  F049         	movff	?_SPIReassembleDouble+1,_SetAngle+1
   630  001176  C011  F04A         	movff	?_SPIReassembleDouble+2,_SetAngle+2
   631                           
   632                           ;SPItestSLAVE.c: 54: PIDEnableFlag = 0x03;
   633  00117A  0E03               	movlw	3
   634  00117C  6E4E               	movwf	_PIDEnableFlag,c
   635                           
   636                           ;SPItestSLAVE.c: 55: LCDbreakDouble(SetAngle);
   637  00117E  C048  F060         	movff	_SetAngle,LCDbreakDouble@dubs
   638  001182  C049  F061         	movff	_SetAngle+1,LCDbreakDouble@dubs+1
   639  001186  C04A  F062         	movff	_SetAngle+2,LCDbreakDouble@dubs+2
   640  00118A  EC0E  F009         	call	_LCDbreakDouble	;wreg free
   641                           
   642                           ;SPItestSLAVE.c: 56: }
   643  00118E  D03F               	goto	l2339
   644  001190                     l2321:
   645                           
   646                           ;SPItestSLAVE.c: 57: else if (Command == 0x05)
   647  001190  0E05               	movlw	5
   648  001192  184D               	xorwf	_Command,w,c
   649  001194  A4D8               	btfss	status,2,c
   650  001196  D011               	goto	l2327
   651                           
   652                           ;SPItestSLAVE.c: 58: {
   653                           ;SPItestSLAVE.c: 59: Kp = SPIReassembleDouble();
   654  001198  EC21  F00C         	call	_SPIReassembleDouble	;wreg free
   655  00119C  C00F  F045         	movff	?_SPIReassembleDouble,_Kp
   656  0011A0  C010  F046         	movff	?_SPIReassembleDouble+1,_Kp+1
   657  0011A4  C011  F047         	movff	?_SPIReassembleDouble+2,_Kp+2
   658                           
   659                           ;SPItestSLAVE.c: 60: LCDbreakDouble(Kp);
   660  0011A8  C045  F060         	movff	_Kp,LCDbreakDouble@dubs
   661  0011AC  C046  F061         	movff	_Kp+1,LCDbreakDouble@dubs+1
   662  0011B0  C047  F062         	movff	_Kp+2,LCDbreakDouble@dubs+2
   663  0011B4  EC0E  F009         	call	_LCDbreakDouble	;wreg free
   664                           
   665                           ;SPItestSLAVE.c: 61: }
   666  0011B8  D02A               	goto	l2339
   667  0011BA                     l2327:
   668                           
   669                           ;SPItestSLAVE.c: 62: else if (Command == 0x07)
   670  0011BA  0E07               	movlw	7
   671  0011BC  184D               	xorwf	_Command,w,c
   672  0011BE  A4D8               	btfss	status,2,c
   673  0011C0  D011               	goto	l2333
   674                           
   675                           ;SPItestSLAVE.c: 63: {
   676                           ;SPItestSLAVE.c: 64: Ki = SPIReassembleDouble();
   677  0011C2  EC21  F00C         	call	_SPIReassembleDouble	;wreg free
   678  0011C6  C00F  F042         	movff	?_SPIReassembleDouble,_Ki
   679  0011CA  C010  F043         	movff	?_SPIReassembleDouble+1,_Ki+1
   680  0011CE  C011  F044         	movff	?_SPIReassembleDouble+2,_Ki+2
   681                           
   682                           ;SPItestSLAVE.c: 65: LCDbreakDouble(Ki);
   683  0011D2  C042  F060         	movff	_Ki,LCDbreakDouble@dubs
   684  0011D6  C043  F061         	movff	_Ki+1,LCDbreakDouble@dubs+1
   685  0011DA  C044  F062         	movff	_Ki+2,LCDbreakDouble@dubs+2
   686  0011DE  EC0E  F009         	call	_LCDbreakDouble	;wreg free
   687                           
   688                           ;SPItestSLAVE.c: 66: }
   689  0011E2  D015               	goto	l2339
   690  0011E4                     l2333:
   691                           
   692                           ;SPItestSLAVE.c: 67: else if (Command == 0x09)
   693  0011E4  0E09               	movlw	9
   694  0011E6  184D               	xorwf	_Command,w,c
   695  0011E8  A4D8               	btfss	status,2,c
   696  0011EA  D011               	goto	l2339
   697                           
   698                           ;SPItestSLAVE.c: 68: {
   699                           ;SPItestSLAVE.c: 69: Kd = SPIReassembleDouble();
   700  0011EC  EC21  F00C         	call	_SPIReassembleDouble	;wreg free
   701  0011F0  C00F  F03F         	movff	?_SPIReassembleDouble,_Kd
   702  0011F4  C010  F040         	movff	?_SPIReassembleDouble+1,_Kd+1
   703  0011F8  C011  F041         	movff	?_SPIReassembleDouble+2,_Kd+2
   704                           
   705                           ;SPItestSLAVE.c: 70: LCDbreakDouble(Kd);
   706  0011FC  C03F  F060         	movff	_Kd,LCDbreakDouble@dubs
   707  001200  C040  F061         	movff	_Kd+1,LCDbreakDouble@dubs+1
   708  001204  C041  F062         	movff	_Kd+2,LCDbreakDouble@dubs+2
   709  001208  EC0E  F009         	call	_LCDbreakDouble	;wreg free
   710  00120C  D000               	goto	l2339
   711  00120E                     l2339:
   712                           
   713                           ;SPItestSLAVE.c: 71: }
   714                           ;SPItestSLAVE.c: 72: temporary = SSP2BUF;
   715  00120E  CF66 F069          	movff	3942,main@temporary	;volatile
   716  001212  D000               	goto	l2341
   717  001214                     l2341:
   718                           
   719                           ;SPItestSLAVE.c: 73: }
   720                           ;SPItestSLAVE.c: 74: PIE3bits.SSP2IE = 1;
   721  001214  8EA3               	bsf	4003,7,c	;volatile
   722  001216  D70A               	goto	l2245
   723  001218  EF0C  F000         	goto	start
   724  00121C                     __end_of_main:
   725                           	opt stack 0
   726                           prodh	equ	0xFF4
   727                           prodl	equ	0xFF3
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           indf2	equ	0xFDF
   731                           fsr2h	equ	0xFDA
   732                           fsr2l	equ	0xFD9
   733                           status	equ	0xFD8
   734                           
   735 ;; *************** function _initialize *****************
   736 ;; Defined at:
   737 ;;		line 79 in file "SPItestSLAVE.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;		None
   742 ;; Return value:  Size  Location     Type
   743 ;;		None               void
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;Total ram usage:        0 bytes
   756 ;; Hardware stack levels used:    1
   757 ;; Hardware stack levels required when called:    6
   758 ;; This function calls:
   759 ;;		_SPIInit
   760 ;;		_lcdInit
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text1
   767  001A3C                     __ptext1:
   768                           	opt stack 0
   769  001A3C                     _initialize:
   770                           	opt stack 24
   771                           
   772                           ;SPItestSLAVE.c: 81: lcdInit();
   773                           
   774                           ;incstack = 0
   775  001A3C  ECFC  F00B         	call	_lcdInit	;wreg free
   776                           
   777                           ;SPItestSLAVE.c: 82: SPIInit();
   778  001A40  ECF2  F00C         	call	_SPIInit	;wreg free
   779                           
   780                           ;SPItestSLAVE.c: 83: INTCONbits.GIE = 1;
   781  001A44  8EF2               	bsf	intcon,7,c	;volatile
   782                           
   783                           ;SPItestSLAVE.c: 84: INTCONbits.PEIE = 1;
   784  001A46  8CF2               	bsf	intcon,6,c	;volatile
   785  001A48  0012               	return		;funcret
   786  001A4A                     __end_of_initialize:
   787                           	opt stack 0
   788                           prodh	equ	0xFF4
   789                           prodl	equ	0xFF3
   790                           intcon	equ	0xFF2
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           indf2	equ	0xFDF
   794                           fsr2h	equ	0xFDA
   795                           fsr2l	equ	0xFD9
   796                           status	equ	0xFD8
   797                           
   798 ;; *************** function _lcdInit *****************
   799 ;; Defined at:
   800 ;;		line 110 in file "LCD.h"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;		None
   805 ;; Return value:  Size  Location     Type
   806 ;;		None               void
   807 ;; Registers used:
   808 ;;		wreg, status,2, status,0, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;Total ram usage:        0 bytes
   819 ;; Hardware stack levels used:    1
   820 ;; Hardware stack levels required when called:    5
   821 ;; This function calls:
   822 ;;		_OpenSPI1
   823 ;;		_lcdCommand
   824 ;;		_setGPIO
   825 ;;		_setIODIR
   826 ;; This function is called by:
   827 ;;		_initialize
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text2
   832  0017F8                     __ptext2:
   833                           	opt stack 0
   834  0017F8                     _lcdInit:
   835                           	opt stack 24
   836                           
   837                           ;LCD.h: 112: TRISAbits.RA2=0;
   838                           
   839                           ;incstack = 0
   840  0017F8  9492               	bcf	3986,2,c	;volatile
   841                           
   842                           ;LCD.h: 113: PORTAbits.RA2=1;
   843  0017FA  8480               	bsf	3968,2,c	;volatile
   844                           
   845                           ;LCD.h: 115: OpenSPI1(0b00000010, 0b00000010, 0b10000000);
   846  0017FC  0E02               	movlw	2
   847  0017FE  6E0F               	movwf	OpenSPI1@bus_mode,c
   848  001800  0E80               	movlw	128
   849  001802  6E10               	movwf	OpenSPI1@smp_phase,c
   850  001804  0E02               	movlw	2
   851  001806  EC80  F00B         	call	_OpenSPI1
   852                           
   853                           ;LCD.h: 117: setIODIR(0x01,0x00);
   854  00180A  0E00               	movlw	0
   855  00180C  6E11               	movwf	setIODIR@dir,c
   856  00180E  0E01               	movlw	1
   857  001810  ECCC  F00C         	call	_setIODIR
   858                           
   859                           ;LCD.h: 119: setIODIR(0x00,0x00);
   860  001814  0E00               	movlw	0
   861  001816  6E11               	movwf	setIODIR@dir,c
   862  001818  0E00               	movlw	0
   863  00181A  ECCC  F00C         	call	_setIODIR
   864                           
   865                           ;LCD.h: 121: setGPIO(0x00,0x00);
   866  00181E  0E00               	movlw	0
   867  001820  6E11               	movwf	setGPIO@value,c
   868  001822  0E00               	movlw	0
   869  001824  ECD9  F00C         	call	_setGPIO
   870                           
   871                           ;LCD.h: 123: lcdCommand(0b00111111);
   872  001828  0E3F               	movlw	63
   873  00182A  EC43  F00C         	call	_lcdCommand
   874                           
   875                           ;LCD.h: 125: lcdCommand(0b00001111);
   876  00182E  0E0F               	movlw	15
   877  001830  EC43  F00C         	call	_lcdCommand
   878                           
   879                           ;LCD.h: 127: lcdCommand(0b00000001);
   880  001834  0E01               	movlw	1
   881  001836  EC43  F00C         	call	_lcdCommand
   882                           
   883                           ;LCD.h: 129: lcdCommand(0b00000110);
   884  00183A  0E06               	movlw	6
   885  00183C  EC43  F00C         	call	_lcdCommand
   886  001840  0012               	return		;funcret
   887  001842                     __end_of_lcdInit:
   888                           	opt stack 0
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           intcon	equ	0xFF2
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           indf2	equ	0xFDF
   895                           fsr2h	equ	0xFDA
   896                           fsr2l	equ	0xFD9
   897                           status	equ	0xFD8
   898                           
   899 ;; *************** function _setIODIR *****************
   900 ;; Defined at:
   901 ;;		line 43 in file "LCD.h"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  address         1    wreg     unsigned char 
   904 ;;  dir             1   16[COMRAM] unsigned char 
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  address         1   17[COMRAM] unsigned char 
   907 ;; Return value:  Size  Location     Type
   908 ;;		None               void
   909 ;; Registers used:
   910 ;;		wreg, status,2, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   916 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;Total ram usage:        2 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    3
   923 ;; This function calls:
   924 ;;		_WriteSPI1
   925 ;; This function is called by:
   926 ;;		_lcdInit
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text3
   931  001998                     __ptext3:
   932                           	opt stack 0
   933  001998                     _setIODIR:
   934                           	opt stack 25
   935                           
   936                           ;incstack = 0
   937                           ;setIODIR@address stored from wreg
   938  001998  6E12               	movwf	setIODIR@address,c
   939                           
   940                           ;LCD.h: 45: PORTAbits.RA2=0;
   941  00199A  9480               	bcf	3968,2,c	;volatile
   942                           
   943                           ;LCD.h: 46: WriteSPI1(0x40);
   944  00199C  0E40               	movlw	64
   945  00199E  ECBB  F00C         	call	_WriteSPI1
   946                           
   947                           ;LCD.h: 47: WriteSPI1(address);
   948  0019A2  5012               	movf	setIODIR@address,w,c
   949  0019A4  ECBB  F00C         	call	_WriteSPI1
   950                           
   951                           ;LCD.h: 48: WriteSPI1(dir);
   952  0019A8  5011               	movf	setIODIR@dir,w,c
   953  0019AA  ECBB  F00C         	call	_WriteSPI1
   954                           
   955                           ;LCD.h: 49: PORTAbits.RA2=1;
   956  0019AE  8480               	bsf	3968,2,c	;volatile
   957  0019B0  0012               	return		;funcret
   958  0019B2                     __end_of_setIODIR:
   959                           	opt stack 0
   960                           prodh	equ	0xFF4
   961                           prodl	equ	0xFF3
   962                           intcon	equ	0xFF2
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           indf2	equ	0xFDF
   966                           fsr2h	equ	0xFDA
   967                           fsr2l	equ	0xFD9
   968                           status	equ	0xFD8
   969                           
   970 ;; *************** function _OpenSPI1 *****************
   971 ;; Defined at:
   972 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  sync_mode       1    wreg     unsigned char 
   975 ;;  bus_mode        1   14[COMRAM] unsigned char 
   976 ;;  smp_phase       1   15[COMRAM] unsigned char 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  sync_mode       1   16[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;		None               void
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;Total ram usage:        3 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    2
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_lcdInit
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text4
  1003  001700                     __ptext4:
  1004                           	opt stack 0
  1005  001700                     _OpenSPI1:
  1006                           	opt stack 26
  1007                           
  1008                           ;incstack = 0
  1009                           ;OpenSPI1@sync_mode stored from wreg
  1010  001700  6E11               	movwf	OpenSPI1@sync_mode,c
  1011  001702  0E3F               	movlw	63
  1012  001704  16C7               	andwf	4039,f,c	;volatile
  1013  001706  0E00               	movlw	0
  1014  001708  6EC6               	movwf	4038,c	;volatile
  1015  00170A  5011               	movf	OpenSPI1@sync_mode,w,c
  1016  00170C  12C6               	iorwf	4038,f,c	;volatile
  1017  00170E  5010               	movf	OpenSPI1@smp_phase,w,c
  1018  001710  12C7               	iorwf	4039,f,c	;volatile
  1019  001712  D005               	goto	l1895
  1020  001714                     l218:
  1021  001714  8CC7               	bsf	4039,6,c	;volatile
  1022  001716  D013               	goto	l1899
  1023  001718                     l220:
  1024  001718  8CC7               	bsf	4039,6,c	;volatile
  1025  00171A                     l221:
  1026  00171A  88C6               	bsf	4038,4,c	;volatile
  1027  00171C  D010               	goto	l1899
  1028  00171E                     l1895:
  1029  00171E  500F               	movf	OpenSPI1@bus_mode,w,c
  1030                           
  1031                           ; Switch size 1, requested type "space"
  1032                           ; Number of cases is 3, Range of values is 0 to 3
  1033                           ; switch strategies available:
  1034                           ; Name         Instructions Cycles
  1035                           ; simple_byte           10     6 (average)
  1036                           ;	Chosen strategy is simple_byte
  1037  001720  0A00               	xorlw	0	; case 0
  1038  001722  B4D8               	btfsc	status,2,c
  1039  001724  D7F7               	goto	l218
  1040  001726  0A02               	xorlw	2	; case 2
  1041  001728  B4D8               	btfsc	status,2,c
  1042  00172A  D7F6               	goto	l220
  1043  00172C  0A01               	xorlw	1	; case 3
  1044  00172E  B4D8               	btfsc	status,2,c
  1045  001730  D7F4               	goto	l221
  1046  001732  D005               	goto	l1899
  1047  001734                     l224:
  1048  001734  8E97               	bsf	3991,7,c	;volatile
  1049  001736                     l226:
  1050  001736  8694               	bsf	3988,3,c	;volatile
  1051  001738  D00A               	goto	l225
  1052  00173A                     l227:
  1053  00173A  9694               	bcf	3988,3,c	;volatile
  1054  00173C  D008               	goto	l225
  1055  00173E                     l1899:
  1056  00173E  5011               	movf	OpenSPI1@sync_mode,w,c
  1057                           
  1058                           ; Switch size 1, requested type "space"
  1059                           ; Number of cases is 2, Range of values is 4 to 5
  1060                           ; switch strategies available:
  1061                           ; Name         Instructions Cycles
  1062                           ; simple_byte            7     4 (average)
  1063                           ;	Chosen strategy is simple_byte
  1064  001740  0A04               	xorlw	4	; case 4
  1065  001742  B4D8               	btfsc	status,2,c
  1066  001744  D7F7               	goto	l224
  1067  001746  0A01               	xorlw	1	; case 5
  1068  001748  B4D8               	btfsc	status,2,c
  1069  00174A  D7F5               	goto	l226
  1070  00174C  D7F6               	goto	l227
  1071  00174E                     l225:
  1072  00174E  8894               	bsf	3988,4,c	;volatile
  1073  001750  9A94               	bcf	3988,5,c	;volatile
  1074  001752  8AC6               	bsf	4038,5,c	;volatile
  1075  001754  0012               	return		;funcret
  1076  001756                     __end_of_OpenSPI1:
  1077                           	opt stack 0
  1078                           prodh	equ	0xFF4
  1079                           prodl	equ	0xFF3
  1080                           intcon	equ	0xFF2
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           indf2	equ	0xFDF
  1084                           fsr2h	equ	0xFDA
  1085                           fsr2l	equ	0xFD9
  1086                           status	equ	0xFD8
  1087                           
  1088 ;; *************** function _SPIInit *****************
  1089 ;; Defined at:
  1090 ;;		line 16 in file "SPISlave.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;		None
  1095 ;; Return value:  Size  Location     Type
  1096 ;;		None               void
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, status,0, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;Total ram usage:        0 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    3
  1111 ;; This function calls:
  1112 ;;		_OpenSPI2
  1113 ;; This function is called by:
  1114 ;;		_initialize
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text5
  1119  0019E4                     __ptext5:
  1120                           	opt stack 0
  1121  0019E4                     _SPIInit:
  1122                           	opt stack 26
  1123                           
  1124                           ;SPISlave.c: 18: OpenSPI2(0b00000100, 0b00000000, 0b00000000);
  1125                           
  1126                           ;incstack = 0
  1127  0019E4  0E00               	movlw	0
  1128  0019E6  6E0F               	movwf	OpenSPI2@bus_mode,c
  1129  0019E8  0E00               	movlw	0
  1130  0019EA  6E10               	movwf	OpenSPI2@smp_phase,c
  1131  0019EC  0E04               	movlw	4
  1132  0019EE  ECAB  F00B         	call	_OpenSPI2
  1133                           
  1134                           ;SPISlave.c: 19: TRISCbits.RC6 = 0;
  1135  0019F2  9C94               	bcf	3988,6,c	;volatile
  1136                           
  1137                           ;SPISlave.c: 20: PIE3bits.SSP2IE = 1;
  1138  0019F4  8EA3               	bsf	4003,7,c	;volatile
  1139  0019F6  0012               	return		;funcret
  1140  0019F8                     __end_of_SPIInit:
  1141                           	opt stack 0
  1142                           prodh	equ	0xFF4
  1143                           prodl	equ	0xFF3
  1144                           intcon	equ	0xFF2
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           indf2	equ	0xFDF
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _OpenSPI2 *****************
  1153 ;; Defined at:
  1154 ;;		line 14 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi2open.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  sync_mode       1    wreg     unsigned char 
  1157 ;;  bus_mode        1   14[COMRAM] unsigned char 
  1158 ;;  smp_phase       1   15[COMRAM] unsigned char 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  sync_mode       1   16[COMRAM] unsigned char 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;		None               void
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;Total ram usage:        3 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    2
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_SPIInit
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text6
  1185  001756                     __ptext6:
  1186                           	opt stack 0
  1187  001756                     _OpenSPI2:
  1188                           	opt stack 26
  1189                           
  1190                           ;incstack = 0
  1191                           ;OpenSPI2@sync_mode stored from wreg
  1192  001756  6E11               	movwf	OpenSPI2@sync_mode,c
  1193  001758  0E3F               	movlw	63
  1194  00175A  1664               	andwf	3940,f,c	;volatile
  1195  00175C  0E00               	movlw	0
  1196  00175E  6E63               	movwf	3939,c	;volatile
  1197  001760  5011               	movf	OpenSPI2@sync_mode,w,c
  1198  001762  1263               	iorwf	3939,f,c	;volatile
  1199  001764  5010               	movf	OpenSPI2@smp_phase,w,c
  1200  001766  1264               	iorwf	3940,f,c	;volatile
  1201  001768  D005               	goto	l1913
  1202  00176A                     l258:
  1203  00176A  8C64               	bsf	3940,6,c	;volatile
  1204  00176C  D013               	goto	l1917
  1205  00176E                     l260:
  1206  00176E  8C64               	bsf	3940,6,c	;volatile
  1207  001770                     l261:
  1208  001770  8863               	bsf	3939,4,c	;volatile
  1209  001772  D010               	goto	l1917
  1210  001774                     l1913:
  1211  001774  500F               	movf	OpenSPI2@bus_mode,w,c
  1212                           
  1213                           ; Switch size 1, requested type "space"
  1214                           ; Number of cases is 3, Range of values is 0 to 3
  1215                           ; switch strategies available:
  1216                           ; Name         Instructions Cycles
  1217                           ; simple_byte           10     6 (average)
  1218                           ;	Chosen strategy is simple_byte
  1219  001776  0A00               	xorlw	0	; case 0
  1220  001778  B4D8               	btfsc	status,2,c
  1221  00177A  D7F7               	goto	l258
  1222  00177C  0A02               	xorlw	2	; case 2
  1223  00177E  B4D8               	btfsc	status,2,c
  1224  001780  D7F6               	goto	l260
  1225  001782  0A01               	xorlw	1	; case 3
  1226  001784  B4D8               	btfsc	status,2,c
  1227  001786  D7F4               	goto	l261
  1228  001788  D005               	goto	l1917
  1229  00178A                     l264:
  1230  00178A  8E95               	bsf	3989,7,c	;volatile
  1231  00178C                     l266:
  1232  00178C  8C95               	bsf	3989,6,c	;volatile
  1233  00178E  D00A               	goto	l265
  1234  001790                     l267:
  1235  001790  9C95               	bcf	3989,6,c	;volatile
  1236  001792  D008               	goto	l265
  1237  001794                     l1917:
  1238  001794  5011               	movf	OpenSPI2@sync_mode,w,c
  1239                           
  1240                           ; Switch size 1, requested type "space"
  1241                           ; Number of cases is 2, Range of values is 4 to 5
  1242                           ; switch strategies available:
  1243                           ; Name         Instructions Cycles
  1244                           ; simple_byte            7     4 (average)
  1245                           ;	Chosen strategy is simple_byte
  1246  001796  0A04               	xorlw	4	; case 4
  1247  001798  B4D8               	btfsc	status,2,c
  1248  00179A  D7F7               	goto	l264
  1249  00179C  0A01               	xorlw	1	; case 5
  1250  00179E  B4D8               	btfsc	status,2,c
  1251  0017A0  D7F5               	goto	l266
  1252  0017A2  D7F6               	goto	l267
  1253  0017A4                     l265:
  1254  0017A4  8A95               	bsf	3989,5,c	;volatile
  1255  0017A6  9895               	bcf	3989,4,c	;volatile
  1256  0017A8  8A63               	bsf	3939,5,c	;volatile
  1257  0017AA  0012               	return		;funcret
  1258  0017AC                     __end_of_OpenSPI2:
  1259                           	opt stack 0
  1260                           prodh	equ	0xFF4
  1261                           prodl	equ	0xFF3
  1262                           intcon	equ	0xFF2
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           indf2	equ	0xFDF
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           status	equ	0xFD8
  1269                           
  1270 ;; *************** function _SendSPI1 *****************
  1271 ;; Defined at:
  1272 ;;		line 32 in file "SPISlave.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  data            1    wreg     unsigned char 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  data            1   15[COMRAM] unsigned char 
  1277 ;;  temp            1   14[COMRAM] unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;		None               void
  1280 ;; Registers used:
  1281 ;;		wreg
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;Total ram usage:        2 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    2
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text7
  1302  0019CC                     __ptext7:
  1303                           	opt stack 0
  1304  0019CC                     _SendSPI1:
  1305                           	opt stack 28
  1306                           
  1307                           ;incstack = 0
  1308                           ;SendSPI1@data stored from wreg
  1309  0019CC  6E10               	movwf	SendSPI1@data,c
  1310                           
  1311                           ;SPISlave.c: 34: SSP2BUF = data;
  1312  0019CE  C010  FF66         	movff	SendSPI1@data,3942	;volatile
  1313                           
  1314                           ;SPISlave.c: 35: unsigned char temp;
  1315                           ;SPISlave.c: 36: PIR3bits.SSP2IF = 0;
  1316  0019D2  9EA4               	bcf	4004,7,c	;volatile
  1317                           
  1318                           ;SPISlave.c: 37: temp = SSP2BUF;
  1319  0019D4  CF66 F00F          	movff	3942,SendSPI1@temp	;volatile
  1320                           
  1321                           ;SPISlave.c: 38: while (!PIR3bits.SSP2IF);
  1322  0019D8  D000               	goto	l182
  1323  0019DA                     l182:
  1324  0019DA  AEA4               	btfss	4004,7,c	;volatile
  1325  0019DC  D7FE               	goto	l182
  1326                           
  1327                           ;SPISlave.c: 39: SSP2CON1bits.SSPOV2 = 0;
  1328  0019DE  9C63               	bcf	3939,6,c	;volatile
  1329                           
  1330                           ;SPISlave.c: 40: PIR3bits.SSP2IF = 0;
  1331  0019E0  9EA4               	bcf	4004,7,c	;volatile
  1332  0019E2  0012               	return		;funcret
  1333  0019E4                     __end_of_SendSPI1:
  1334                           	opt stack 0
  1335                           prodh	equ	0xFF4
  1336                           prodl	equ	0xFF3
  1337                           intcon	equ	0xFF2
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           indf2	equ	0xFDF
  1341                           fsr2h	equ	0xFDA
  1342                           fsr2l	equ	0xFD9
  1343                           status	equ	0xFD8
  1344                           
  1345 ;; *************** function _SPIReassembleDouble *****************
  1346 ;; Defined at:
  1347 ;;		line 67 in file "SPISlave.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  dub             3   17[COMRAM] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  3   14[COMRAM] unsigned char 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1361 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;Total ram usage:        6 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    2
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text8
  1376  001842                     __ptext8:
  1377                           	opt stack 0
  1378  001842                     _SPIReassembleDouble:
  1379                           	opt stack 28
  1380                           
  1381                           ;SPISlave.c: 69: double dub;
  1382                           ;SPISlave.c: 70: DoublePtr = (unsigned char*) &dub;
  1383                           
  1384                           ;incstack = 0
  1385  001842  0E12               	movlw	low SPIReassembleDouble@dub
  1386  001844  6E4B               	movwf	_DoublePtr,c
  1387  001846  0E00               	movlw	high SPIReassembleDouble@dub
  1388  001848  6E4C               	movwf	_DoublePtr+1,c
  1389                           
  1390                           ;SPISlave.c: 71: DoublePtr[0] = DoubleSPIS[0];
  1391  00184A  C04B  FFD9         	movff	_DoublePtr,fsr2l
  1392  00184E  C04C  FFDA         	movff	_DoublePtr+1,fsr2h
  1393  001852  C035  FFDF         	movff	_DoubleSPIS,indf2
  1394                           
  1395                           ;SPISlave.c: 72: DoublePtr[1] = DoubleSPIS[1];
  1396  001856  EE20 F001          	lfsr	2,1
  1397  00185A  504B               	movf	_DoublePtr,w,c
  1398  00185C  26D9               	addwf	fsr2l,f,c
  1399  00185E  504C               	movf	_DoublePtr+1,w,c
  1400  001860  22DA               	addwfc	fsr2h,f,c
  1401  001862  C036  FFDF         	movff	_DoubleSPIS+1,indf2
  1402                           
  1403                           ;SPISlave.c: 73: DoublePtr[2] = DoubleSPIS[2];
  1404  001866  EE20 F002          	lfsr	2,2
  1405  00186A  504B               	movf	_DoublePtr,w,c
  1406  00186C  26D9               	addwf	fsr2l,f,c
  1407  00186E  504C               	movf	_DoublePtr+1,w,c
  1408  001870  22DA               	addwfc	fsr2h,f,c
  1409  001872  C037  FFDF         	movff	_DoubleSPIS+2,indf2
  1410                           
  1411                           ;SPISlave.c: 75: return dub;
  1412  001876  C012  F00F         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  1413  00187A  C013  F010         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  1414  00187E  C014  F011         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  1415  001882  D000               	goto	l202
  1416  001884                     l202:
  1417  001884  0012               	return		;funcret
  1418  001886                     __end_of_SPIReassembleDouble:
  1419                           	opt stack 0
  1420                           prodh	equ	0xFF4
  1421                           prodl	equ	0xFF3
  1422                           intcon	equ	0xFF2
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           indf2	equ	0xFDF
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function _SPIDisassembleDouble *****************
  1431 ;; Defined at:
  1432 ;;		line 50 in file "SPISlave.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  dub             3   16[COMRAM] unsigned char 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;		None               void
  1439 ;; Registers used:
  1440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1446 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;Total ram usage:        3 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    3
  1453 ;; This function calls:
  1454 ;;		_GenerateChecksum
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text9
  1461  001908                     __ptext9:
  1462                           	opt stack 0
  1463  001908                     _SPIDisassembleDouble:
  1464                           	opt stack 27
  1465                           
  1466                           ;SPISlave.c: 52: DoublePtr = (unsigned char*) &dub;
  1467                           
  1468                           ;incstack = 0
  1469  001908  0E11               	movlw	low SPIDisassembleDouble@dub
  1470  00190A  6E4B               	movwf	_DoublePtr,c
  1471  00190C  0E00               	movlw	high SPIDisassembleDouble@dub
  1472  00190E  6E4C               	movwf	_DoublePtr+1,c
  1473                           
  1474                           ;SPISlave.c: 53: DoubleSPIS[0] = DoublePtr[0];
  1475  001910  C04B  FFD9         	movff	_DoublePtr,fsr2l
  1476  001914  C04C  FFDA         	movff	_DoublePtr+1,fsr2h
  1477  001918  50DF               	movf	indf2,w,c
  1478  00191A  6E35               	movwf	_DoubleSPIS,c
  1479                           
  1480                           ;SPISlave.c: 54: DoubleSPIS[1] = DoublePtr[1];
  1481  00191C  EE20 F001          	lfsr	2,1
  1482  001920  504B               	movf	_DoublePtr,w,c
  1483  001922  26D9               	addwf	fsr2l,f,c
  1484  001924  504C               	movf	_DoublePtr+1,w,c
  1485  001926  22DA               	addwfc	fsr2h,f,c
  1486  001928  50DF               	movf	indf2,w,c
  1487  00192A  6E36               	movwf	_DoubleSPIS+1,c
  1488                           
  1489                           ;SPISlave.c: 55: DoubleSPIS[2] = DoublePtr[2];
  1490  00192C  EE20 F002          	lfsr	2,2
  1491  001930  504B               	movf	_DoublePtr,w,c
  1492  001932  26D9               	addwf	fsr2l,f,c
  1493  001934  504C               	movf	_DoublePtr+1,w,c
  1494  001936  22DA               	addwfc	fsr2h,f,c
  1495  001938  50DF               	movf	indf2,w,c
  1496  00193A  6E37               	movwf	_DoubleSPIS+2,c
  1497                           
  1498                           ;SPISlave.c: 56: DoubleSPIS[3] = GenerateChecksum();
  1499  00193C  ECA2  F00C         	call	_GenerateChecksum	;wreg free
  1500  001940  6E38               	movwf	_DoubleSPIS+3,c
  1501  001942  0012               	return		;funcret
  1502  001944                     __end_of_SPIDisassembleDouble:
  1503                           	opt stack 0
  1504                           prodh	equ	0xFF4
  1505                           prodl	equ	0xFF3
  1506                           intcon	equ	0xFF2
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           indf2	equ	0xFDF
  1510                           fsr2h	equ	0xFDA
  1511                           fsr2l	equ	0xFD9
  1512                           status	equ	0xFD8
  1513                           
  1514 ;; *************** function _GenerateChecksum *****************
  1515 ;; Defined at:
  1516 ;;		line 59 in file "SPISlave.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  y               1   15[COMRAM] unsigned char 
  1521 ;;  sum             1   14[COMRAM] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      unsigned char 
  1524 ;; Registers used:
  1525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;Total ram usage:        2 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    2
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_SPIDisassembleDouble
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text10
  1546  001944                     __ptext10:
  1547                           	opt stack 0
  1548  001944                     _GenerateChecksum:
  1549                           	opt stack 27
  1550                           
  1551                           ;SPISlave.c: 61: unsigned char y, sum = 0;
  1552                           
  1553                           ;incstack = 0
  1554  001944  0E00               	movlw	0
  1555  001946  6E0F               	movwf	GenerateChecksum@sum,c
  1556                           
  1557                           ;SPISlave.c: 62: for (y = 0; y != 3; y++)
  1558  001948  0E00               	movlw	0
  1559  00194A  6E10               	movwf	GenerateChecksum@y,c
  1560  00194C                     l1997:
  1561  00194C  0E03               	movlw	3
  1562  00194E  1810               	xorwf	GenerateChecksum@y,w,c
  1563  001950  B4D8               	btfsc	status,2,c
  1564  001952  D00E               	goto	l2007
  1565  001954  D001               	goto	l2001
  1566  001956  D00C               	goto	l2007
  1567  001958                     l2001:
  1568                           
  1569                           ;SPISlave.c: 63: sum += DoubleSPIS[y];
  1570  001958  5010               	movf	GenerateChecksum@y,w,c
  1571  00195A  0D01               	mullw	1
  1572  00195C  0E35               	movlw	low _DoubleSPIS
  1573  00195E  24F3               	addwf	prodl,w,c
  1574  001960  6ED9               	movwf	fsr2l,c
  1575  001962  0E00               	movlw	high _DoubleSPIS
  1576  001964  20F4               	addwfc	prodh,w,c
  1577  001966  6EDA               	movwf	fsr2h,c
  1578  001968  50DF               	movf	indf2,w,c
  1579  00196A  260F               	addwf	GenerateChecksum@sum,f,c
  1580  00196C  2A10               	incf	GenerateChecksum@y,f,c
  1581  00196E  D7EE               	goto	l1997
  1582  001970                     l2007:
  1583                           
  1584                           ;SPISlave.c: 64: return sum;
  1585  001970  500F               	movf	GenerateChecksum@sum,w,c
  1586  001972  D000               	goto	l199
  1587  001974                     l199:
  1588  001974  0012               	return		;funcret
  1589  001976                     __end_of_GenerateChecksum:
  1590                           	opt stack 0
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           indf2	equ	0xFDF
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _ReceiveSPI1 *****************
  1602 ;; Defined at:
  1603 ;;		line 43 in file "SPISlave.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      unsigned char 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    2
  1624 ;; This function calls:
  1625 ;;		Nothing
  1626 ;; This function is called by:
  1627 ;;		_main
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text11
  1632  001A1C                     __ptext11:
  1633                           	opt stack 0
  1634  001A1C                     _ReceiveSPI1:
  1635                           	opt stack 28
  1636                           
  1637                           ;SPISlave.c: 45: SSP2BUF = 0x00;
  1638                           
  1639                           ;incstack = 0
  1640  001A1C  0E00               	movlw	0
  1641  001A1E  6E66               	movwf	3942,c	;volatile
  1642                           
  1643                           ;SPISlave.c: 46: while (SSP2STATbits.BF == 0);
  1644  001A20  D000               	goto	l188
  1645  001A22                     l188:
  1646  001A22  A064               	btfss	3940,0,c	;volatile
  1647  001A24  D7FE               	goto	l188
  1648                           
  1649                           ;SPISlave.c: 47: return SSP2BUF;
  1650  001A26  5066               	movf	3942,w,c	;volatile
  1651  001A28  D000               	goto	l191
  1652  001A2A                     l191:
  1653  001A2A  0012               	return		;funcret
  1654  001A2C                     __end_of_ReceiveSPI1:
  1655                           	opt stack 0
  1656                           prodh	equ	0xFF4
  1657                           prodl	equ	0xFF3
  1658                           intcon	equ	0xFF2
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           indf2	equ	0xFDF
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _LCDbreakDouble *****************
  1667 ;; Defined at:
  1668 ;;		line 95 in file "SPItestSLAVE.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  dubs            3    0[BANK0 ] unsigned char 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  temp2           2    7[BANK0 ] unsigned int 
  1673 ;;  temp1           2    5[BANK0 ] unsigned int 
  1674 ;;  tempDub         2    3[BANK0 ] unsigned int 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;		None               void
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1684 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;Total ram usage:        9 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    6
  1691 ;; This function calls:
  1692 ;;		___ftmul
  1693 ;;		___fttol
  1694 ;;		___lwdiv
  1695 ;;		___lwmod
  1696 ;;		_lcdChar
  1697 ;;		_lcdCommand
  1698 ;;		_lcdGoTo
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text12
  1705  00121C                     __ptext12:
  1706                           	opt stack 0
  1707  00121C                     _LCDbreakDouble:
  1708                           	opt stack 24
  1709                           
  1710                           ;SPItestSLAVE.c: 97: unsigned int temp1, temp2;
  1711                           ;SPItestSLAVE.c: 98: unsigned int tempDub;
  1712                           ;SPItestSLAVE.c: 100: lcdCommand(0x01);
  1713                           
  1714                           ;incstack = 0
  1715  00121C  0E01               	movlw	1
  1716  00121E  EC43  F00C         	call	_lcdCommand
  1717                           
  1718                           ;SPItestSLAVE.c: 101: lcdGoTo(0x40);
  1719  001222  0E40               	movlw	64
  1720  001224  EC25  F00D         	call	_lcdGoTo
  1721                           
  1722                           ;SPItestSLAVE.c: 102: tempDub = dubs * 100;
  1723  001228  0E00               	movlw	0
  1724  00122A  6E1A               	movwf	___ftmul@f2,c
  1725  00122C  0EC8               	movlw	200
  1726  00122E  6E1B               	movwf	___ftmul@f2+1,c
  1727  001230  0E42               	movlw	66
  1728  001232  6E1C               	movwf	___ftmul@f2+2,c
  1729  001234  C060  F017         	movff	LCDbreakDouble@dubs,___ftmul@f1
  1730  001238  C061  F018         	movff	LCDbreakDouble@dubs+1,___ftmul@f1+1
  1731  00123C  C062  F019         	movff	LCDbreakDouble@dubs+2,___ftmul@f1+2
  1732  001240  ECC7  F009         	call	___ftmul	;wreg free
  1733  001244  C017  F026         	movff	?___ftmul,___fttol@f1
  1734  001248  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
  1735  00124C  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
  1736  001250  EC43  F00A         	call	___fttol	;wreg free
  1737  001254  C026  F063         	movff	?___fttol,LCDbreakDouble@tempDub
  1738  001258  C027  F064         	movff	?___fttol+1,LCDbreakDouble@tempDub+1
  1739                           
  1740                           ;SPItestSLAVE.c: 103: temp1 = tempDub / 10000;
  1741  00125C  C063  F00F         	movff	LCDbreakDouble@tempDub,___lwdiv@dividend
  1742  001260  C064  F010         	movff	LCDbreakDouble@tempDub+1,___lwdiv@dividend+1
  1743  001264  0E27               	movlw	39
  1744  001266  6E12               	movwf	___lwdiv@divisor+1,c
  1745  001268  0E10               	movlw	16
  1746  00126A  6E11               	movwf	___lwdiv@divisor,c
  1747  00126C  EC52  F00B         	call	___lwdiv	;wreg free
  1748  001270  C00F  F065         	movff	?___lwdiv,LCDbreakDouble@temp1
  1749  001274  C010  F066         	movff	?___lwdiv+1,LCDbreakDouble@temp1+1
  1750                           
  1751                           ;SPItestSLAVE.c: 104: temp2 = tempDub % 10000;
  1752  001278  C063  F00F         	movff	LCDbreakDouble@tempDub,___lwmod@dividend
  1753  00127C  C064  F010         	movff	LCDbreakDouble@tempDub+1,___lwmod@dividend+1
  1754  001280  0E27               	movlw	39
  1755  001282  6E12               	movwf	___lwmod@divisor+1,c
  1756  001284  0E10               	movlw	16
  1757  001286  6E11               	movwf	___lwmod@divisor,c
  1758  001288  ECD6  F00B         	call	___lwmod	;wreg free
  1759  00128C  C00F  F067         	movff	?___lwmod,LCDbreakDouble@temp2
  1760  001290  C010  F068         	movff	?___lwmod+1,LCDbreakDouble@temp2+1
  1761                           
  1762                           ;SPItestSLAVE.c: 105: if (temp1 != 0)
  1763  001294  0100               	movlb	0	; () banked
  1764  001296  5165               	movf	LCDbreakDouble@temp1& (0+255),w,b
  1765  001298  0100               	movlb	0	; () banked
  1766  00129A  1166               	iorwf	(LCDbreakDouble@temp1+1)& (0+255),w,b
  1767  00129C  B4D8               	btfsc	status,2,c
  1768  00129E  D005               	goto	l129
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;SPItestSLAVE.c: 106: lcdChar(temp1 + 0x30);
  1772  0012A0  0100               	movlb	0	; () banked
  1773  0012A2  5165               	movf	LCDbreakDouble@temp1& (0+255),w,b
  1774  0012A4  0F30               	addlw	48
  1775  0012A6  EC65  F00C         	call	_lcdChar
  1776  0012AA                     l129:
  1777                           
  1778                           ;SPItestSLAVE.c: 107: temp1 = temp2 / 1000;
  1779  0012AA  C067  F00F         	movff	LCDbreakDouble@temp2,___lwdiv@dividend
  1780  0012AE  C068  F010         	movff	LCDbreakDouble@temp2+1,___lwdiv@dividend+1
  1781  0012B2  0E03               	movlw	3
  1782  0012B4  6E12               	movwf	___lwdiv@divisor+1,c
  1783  0012B6  0EE8               	movlw	232
  1784  0012B8  6E11               	movwf	___lwdiv@divisor,c
  1785  0012BA  EC52  F00B         	call	___lwdiv	;wreg free
  1786  0012BE  C00F  F065         	movff	?___lwdiv,LCDbreakDouble@temp1
  1787  0012C2  C010  F066         	movff	?___lwdiv+1,LCDbreakDouble@temp1+1
  1788                           
  1789                           ;SPItestSLAVE.c: 108: temp2 = temp2 % 1000;
  1790  0012C6  C067  F00F         	movff	LCDbreakDouble@temp2,___lwmod@dividend
  1791  0012CA  C068  F010         	movff	LCDbreakDouble@temp2+1,___lwmod@dividend+1
  1792  0012CE  0E03               	movlw	3
  1793  0012D0  6E12               	movwf	___lwmod@divisor+1,c
  1794  0012D2  0EE8               	movlw	232
  1795  0012D4  6E11               	movwf	___lwmod@divisor,c
  1796  0012D6  ECD6  F00B         	call	___lwmod	;wreg free
  1797  0012DA  C00F  F067         	movff	?___lwmod,LCDbreakDouble@temp2
  1798  0012DE  C010  F068         	movff	?___lwmod+1,LCDbreakDouble@temp2+1
  1799                           
  1800                           ;SPItestSLAVE.c: 109: if (temp1 != 0)
  1801  0012E2  0100               	movlb	0	; () banked
  1802  0012E4  5165               	movf	LCDbreakDouble@temp1& (0+255),w,b
  1803  0012E6  0100               	movlb	0	; () banked
  1804  0012E8  1166               	iorwf	(LCDbreakDouble@temp1+1)& (0+255),w,b
  1805  0012EA  B4D8               	btfsc	status,2,c
  1806  0012EC  D005               	goto	l130
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;SPItestSLAVE.c: 110: lcdChar(temp1 + 0x30);
  1810  0012EE  0100               	movlb	0	; () banked
  1811  0012F0  5165               	movf	LCDbreakDouble@temp1& (0+255),w,b
  1812  0012F2  0F30               	addlw	48
  1813  0012F4  EC65  F00C         	call	_lcdChar
  1814  0012F8                     l130:
  1815                           
  1816                           ;SPItestSLAVE.c: 111: temp1 = temp2 / 100;
  1817  0012F8  C067  F00F         	movff	LCDbreakDouble@temp2,___lwdiv@dividend
  1818  0012FC  C068  F010         	movff	LCDbreakDouble@temp2+1,___lwdiv@dividend+1
  1819  001300  0E00               	movlw	0
  1820  001302  6E12               	movwf	___lwdiv@divisor+1,c
  1821  001304  0E64               	movlw	100
  1822  001306  6E11               	movwf	___lwdiv@divisor,c
  1823  001308  EC52  F00B         	call	___lwdiv	;wreg free
  1824  00130C  C00F  F065         	movff	?___lwdiv,LCDbreakDouble@temp1
  1825  001310  C010  F066         	movff	?___lwdiv+1,LCDbreakDouble@temp1+1
  1826                           
  1827                           ;SPItestSLAVE.c: 112: temp2 = temp2 % 100;
  1828  001314  C067  F00F         	movff	LCDbreakDouble@temp2,___lwmod@dividend
  1829  001318  C068  F010         	movff	LCDbreakDouble@temp2+1,___lwmod@dividend+1
  1830  00131C  0E00               	movlw	0
  1831  00131E  6E12               	movwf	___lwmod@divisor+1,c
  1832  001320  0E64               	movlw	100
  1833  001322  6E11               	movwf	___lwmod@divisor,c
  1834  001324  ECD6  F00B         	call	___lwmod	;wreg free
  1835  001328  C00F  F067         	movff	?___lwmod,LCDbreakDouble@temp2
  1836  00132C  C010  F068         	movff	?___lwmod+1,LCDbreakDouble@temp2+1
  1837                           
  1838                           ;SPItestSLAVE.c: 113: lcdChar(temp1 + 0x30);
  1839  001330  0100               	movlb	0	; () banked
  1840  001332  5165               	movf	LCDbreakDouble@temp1& (0+255),w,b
  1841  001334  0F30               	addlw	48
  1842  001336  EC65  F00C         	call	_lcdChar
  1843                           
  1844                           ;SPItestSLAVE.c: 114: lcdChar('.');
  1845  00133A  0E2E               	movlw	46
  1846  00133C  EC65  F00C         	call	_lcdChar
  1847                           
  1848                           ;SPItestSLAVE.c: 115: temp1 = temp2 / 10;
  1849  001340  C067  F00F         	movff	LCDbreakDouble@temp2,___lwdiv@dividend
  1850  001344  C068  F010         	movff	LCDbreakDouble@temp2+1,___lwdiv@dividend+1
  1851  001348  0E00               	movlw	0
  1852  00134A  6E12               	movwf	___lwdiv@divisor+1,c
  1853  00134C  0E0A               	movlw	10
  1854  00134E  6E11               	movwf	___lwdiv@divisor,c
  1855  001350  EC52  F00B         	call	___lwdiv	;wreg free
  1856  001354  C00F  F065         	movff	?___lwdiv,LCDbreakDouble@temp1
  1857  001358  C010  F066         	movff	?___lwdiv+1,LCDbreakDouble@temp1+1
  1858                           
  1859                           ;SPItestSLAVE.c: 116: temp2 = temp2 % 10;
  1860  00135C  C067  F00F         	movff	LCDbreakDouble@temp2,___lwmod@dividend
  1861  001360  C068  F010         	movff	LCDbreakDouble@temp2+1,___lwmod@dividend+1
  1862  001364  0E00               	movlw	0
  1863  001366  6E12               	movwf	___lwmod@divisor+1,c
  1864  001368  0E0A               	movlw	10
  1865  00136A  6E11               	movwf	___lwmod@divisor,c
  1866  00136C  ECD6  F00B         	call	___lwmod	;wreg free
  1867  001370  C00F  F067         	movff	?___lwmod,LCDbreakDouble@temp2
  1868  001374  C010  F068         	movff	?___lwmod+1,LCDbreakDouble@temp2+1
  1869                           
  1870                           ;SPItestSLAVE.c: 117: lcdChar(temp1 + 0x30);
  1871  001378  0100               	movlb	0	; () banked
  1872  00137A  5165               	movf	LCDbreakDouble@temp1& (0+255),w,b
  1873  00137C  0F30               	addlw	48
  1874  00137E  EC65  F00C         	call	_lcdChar
  1875                           
  1876                           ;SPItestSLAVE.c: 118: lcdChar(temp2 + 0x30);
  1877  001382  0100               	movlb	0	; () banked
  1878  001384  5167               	movf	LCDbreakDouble@temp2& (0+255),w,b
  1879  001386  0F30               	addlw	48
  1880  001388  EC65  F00C         	call	_lcdChar
  1881  00138C  0012               	return		;funcret
  1882  00138E                     __end_of_LCDbreakDouble:
  1883                           	opt stack 0
  1884                           prodh	equ	0xFF4
  1885                           prodl	equ	0xFF3
  1886                           intcon	equ	0xFF2
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           indf2	equ	0xFDF
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _lcdGoTo *****************
  1895 ;; Defined at:
  1896 ;;		line 76 in file "LCD.h"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  pos             1    wreg     unsigned char 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  pos             1   19[COMRAM] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;		None               void
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        1 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    5
  1917 ;; This function calls:
  1918 ;;		_lcdCommand
  1919 ;; This function is called by:
  1920 ;;		_LCDbreakDouble
  1921 ;;		_lcdPrint
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text13
  1926  001A4A                     __ptext13:
  1927                           	opt stack 0
  1928  001A4A                     _lcdGoTo:
  1929                           	opt stack 24
  1930                           
  1931                           ;incstack = 0
  1932                           ;lcdGoTo@pos stored from wreg
  1933  001A4A  6E14               	movwf	lcdGoTo@pos,c
  1934                           
  1935                           ;LCD.h: 79: lcdCommand(0x80+pos);
  1936  001A4C  5014               	movf	lcdGoTo@pos,w,c
  1937  001A4E  0F80               	addlw	128
  1938  001A50  EC43  F00C         	call	_lcdCommand
  1939  001A54  0012               	return		;funcret
  1940  001A56                     __end_of_lcdGoTo:
  1941                           	opt stack 0
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf2	equ	0xFDF
  1948                           fsr2h	equ	0xFDA
  1949                           fsr2l	equ	0xFD9
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _lcdCommand *****************
  1953 ;; Defined at:
  1954 ;;		line 52 in file "LCD.h"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  command         1    wreg     unsigned char 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  command         1   18[COMRAM] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;		None               void
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;Total ram usage:        1 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    4
  1975 ;; This function calls:
  1976 ;;		_Delay10TCYx
  1977 ;;		_setGPIO
  1978 ;; This function is called by:
  1979 ;;		_lcdGoTo
  1980 ;;		_lcdInit
  1981 ;;		_LCDbreakDouble
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text14
  1986  001886                     __ptext14:
  1987                           	opt stack 0
  1988  001886                     _lcdCommand:
  1989                           	opt stack 24
  1990                           
  1991                           ;incstack = 0
  1992                           ;lcdCommand@command stored from wreg
  1993  001886  6E13               	movwf	lcdCommand@command,c
  1994                           
  1995                           ;LCD.h: 54: setGPIO(0x12,0x00);
  1996  001888  0E00               	movlw	0
  1997  00188A  6E11               	movwf	setGPIO@value,c
  1998  00188C  0E12               	movlw	18
  1999  00188E  ECD9  F00C         	call	_setGPIO
  2000                           
  2001                           ;LCD.h: 55: Delay10TCYx(0);
  2002  001892  0E00               	movlw	0
  2003  001894  EC05  F00D         	call	_Delay10TCYx
  2004                           
  2005                           ;LCD.h: 56: setGPIO(0x13, command);
  2006  001898  C013  F011         	movff	lcdCommand@command,setGPIO@value
  2007  00189C  0E13               	movlw	19
  2008  00189E  ECD9  F00C         	call	_setGPIO
  2009                           
  2010                           ;LCD.h: 57: Delay10TCYx(0);
  2011  0018A2  0E00               	movlw	0
  2012  0018A4  EC05  F00D         	call	_Delay10TCYx
  2013                           
  2014                           ;LCD.h: 58: setGPIO(0x12,0x40);
  2015  0018A8  0E40               	movlw	64
  2016  0018AA  6E11               	movwf	setGPIO@value,c
  2017  0018AC  0E12               	movlw	18
  2018  0018AE  ECD9  F00C         	call	_setGPIO
  2019                           
  2020                           ;LCD.h: 59: Delay10TCYx(0);
  2021  0018B2  0E00               	movlw	0
  2022  0018B4  EC05  F00D         	call	_Delay10TCYx
  2023                           
  2024                           ;LCD.h: 60: setGPIO(0x12,0x00);
  2025  0018B8  0E00               	movlw	0
  2026  0018BA  6E11               	movwf	setGPIO@value,c
  2027  0018BC  0E12               	movlw	18
  2028  0018BE  ECD9  F00C         	call	_setGPIO
  2029                           
  2030                           ;LCD.h: 61: Delay10TCYx(0);
  2031  0018C2  0E00               	movlw	0
  2032  0018C4  EC05  F00D         	call	_Delay10TCYx
  2033  0018C8  0012               	return		;funcret
  2034  0018CA                     __end_of_lcdCommand:
  2035                           	opt stack 0
  2036                           prodh	equ	0xFF4
  2037                           prodl	equ	0xFF3
  2038                           intcon	equ	0xFF2
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           indf2	equ	0xFDF
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _lcdChar *****************
  2047 ;; Defined at:
  2048 ;;		line 64 in file "LCD.h"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  letter          1    wreg     unsigned char 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  letter          1   18[COMRAM] unsigned char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;		None               void
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;Total ram usage:        1 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    4
  2069 ;; This function calls:
  2070 ;;		_Delay10TCYx
  2071 ;;		_setGPIO
  2072 ;; This function is called by:
  2073 ;;		_LCDbreakDouble
  2074 ;;		_lcdWriteString
  2075 ;;		_lcdPrint
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text15
  2080  0018CA                     __ptext15:
  2081                           	opt stack 0
  2082  0018CA                     _lcdChar:
  2083                           	opt stack 25
  2084                           
  2085                           ;incstack = 0
  2086                           ;lcdChar@letter stored from wreg
  2087  0018CA  6E13               	movwf	lcdChar@letter,c
  2088                           
  2089                           ;LCD.h: 66: setGPIO(0x12,0x80);
  2090  0018CC  0E80               	movlw	128
  2091  0018CE  6E11               	movwf	setGPIO@value,c
  2092  0018D0  0E12               	movlw	18
  2093  0018D2  ECD9  F00C         	call	_setGPIO
  2094                           
  2095                           ;LCD.h: 67: Delay10TCYx(0);
  2096  0018D6  0E00               	movlw	0
  2097  0018D8  EC05  F00D         	call	_Delay10TCYx
  2098                           
  2099                           ;LCD.h: 68: setGPIO(0x13,letter);
  2100  0018DC  C013  F011         	movff	lcdChar@letter,setGPIO@value
  2101  0018E0  0E13               	movlw	19
  2102  0018E2  ECD9  F00C         	call	_setGPIO
  2103                           
  2104                           ;LCD.h: 70: setGPIO(0x12, 0xc0);
  2105  0018E6  0EC0               	movlw	192
  2106  0018E8  6E11               	movwf	setGPIO@value,c
  2107  0018EA  0E12               	movlw	18
  2108  0018EC  ECD9  F00C         	call	_setGPIO
  2109                           
  2110                           ;LCD.h: 71: Delay10TCYx(0);
  2111  0018F0  0E00               	movlw	0
  2112  0018F2  EC05  F00D         	call	_Delay10TCYx
  2113                           
  2114                           ;LCD.h: 72: setGPIO(0x12,0x00);
  2115  0018F6  0E00               	movlw	0
  2116  0018F8  6E11               	movwf	setGPIO@value,c
  2117  0018FA  0E12               	movlw	18
  2118  0018FC  ECD9  F00C         	call	_setGPIO
  2119                           
  2120                           ;LCD.h: 73: Delay10TCYx(0);
  2121  001900  0E00               	movlw	0
  2122  001902  EC05  F00D         	call	_Delay10TCYx
  2123  001906  0012               	return		;funcret
  2124  001908                     __end_of_lcdChar:
  2125                           	opt stack 0
  2126                           prodh	equ	0xFF4
  2127                           prodl	equ	0xFF3
  2128                           intcon	equ	0xFF2
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           indf2	equ	0xFDF
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136 ;; *************** function _setGPIO *****************
  2137 ;; Defined at:
  2138 ;;		line 32 in file "LCD.h"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  address         1    wreg     unsigned char 
  2141 ;;  value           1   16[COMRAM] unsigned char 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  address         1   17[COMRAM] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;		None               void
  2146 ;; Registers used:
  2147 ;;		wreg, status,2, cstack
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2153 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;Total ram usage:        2 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    3
  2160 ;; This function calls:
  2161 ;;		_WriteSPI1
  2162 ;; This function is called by:
  2163 ;;		_lcdCommand
  2164 ;;		_lcdChar
  2165 ;;		_lcdInit
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text16
  2170  0019B2                     __ptext16:
  2171                           	opt stack 0
  2172  0019B2                     _setGPIO:
  2173                           	opt stack 25
  2174                           
  2175                           ;incstack = 0
  2176                           ;setGPIO@address stored from wreg
  2177  0019B2  6E12               	movwf	setGPIO@address,c
  2178                           
  2179                           ;LCD.h: 34: PORTAbits.RA2=0;
  2180  0019B4  9480               	bcf	3968,2,c	;volatile
  2181                           
  2182                           ;LCD.h: 37: WriteSPI1(0x40);
  2183  0019B6  0E40               	movlw	64
  2184  0019B8  ECBB  F00C         	call	_WriteSPI1
  2185                           
  2186                           ;LCD.h: 38: WriteSPI1(address);
  2187  0019BC  5012               	movf	setGPIO@address,w,c
  2188  0019BE  ECBB  F00C         	call	_WriteSPI1
  2189                           
  2190                           ;LCD.h: 39: WriteSPI1(value);
  2191  0019C2  5011               	movf	setGPIO@value,w,c
  2192  0019C4  ECBB  F00C         	call	_WriteSPI1
  2193                           
  2194                           ;LCD.h: 40: PORTAbits.RA2=1;
  2195  0019C8  8480               	bsf	3968,2,c	;volatile
  2196  0019CA  0012               	return		;funcret
  2197  0019CC                     __end_of_setGPIO:
  2198                           	opt stack 0
  2199                           prodh	equ	0xFF4
  2200                           prodl	equ	0xFF3
  2201                           intcon	equ	0xFF2
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           indf2	equ	0xFDF
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _WriteSPI1 *****************
  2210 ;; Defined at:
  2211 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1writ.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  data_out        1    wreg     unsigned char 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  data_out        1   15[COMRAM] unsigned char 
  2216 ;;  TempVar         1   14[COMRAM] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      char 
  2219 ;; Registers used:
  2220 ;;		wreg
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;Total ram usage:        2 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    2
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_setGPIO
  2237 ;;		_setIODIR
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text17
  2242  001976                     __ptext17:
  2243                           	opt stack 0
  2244  001976                     _WriteSPI1:
  2245                           	opt stack 25
  2246                           
  2247                           ;incstack = 0
  2248                           ;WriteSPI1@data_out stored from wreg
  2249  001976  6E10               	movwf	WriteSPI1@data_out,c
  2250  001978  CFC9 F00F          	movff	4041,WriteSPI1@TempVar	;volatile
  2251  00197C  969E               	bcf	3998,3,c	;volatile
  2252  00197E  9EC6               	bcf	4038,7,c	;volatile
  2253  001980  C010  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  2254  001984  BEC6               	btfsc	4038,7,c	;volatile
  2255  001986  D007               	goto	l240
  2256  001988  D002               	goto	l242
  2257                           
  2258                           ;	Return value of _WriteSPI1 is never used
  2259  00198A  D005               	goto	l240
  2260  00198C  D000               	goto	l242
  2261  00198E                     l242:
  2262  00198E  B69E               	btfsc	3998,3,c	;volatile
  2263  001990  D002               	goto	l240
  2264  001992  D7FD               	goto	l242
  2265  001994  D000               	goto	l240
  2266  001996                     l240:
  2267  001996  0012               	return		;funcret
  2268  001998                     __end_of_WriteSPI1:
  2269                           	opt stack 0
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           indf2	equ	0xFDF
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _Delay10TCYx *****************
  2281 ;; Defined at:
  2282 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  unit            1    wreg     unsigned char 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  unit            1   14[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;Total ram usage:        1 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_lcdCommand
  2307 ;;		_lcdChar
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text18
  2312  001A0A                     __ptext18:
  2313                           	opt stack 0
  2314  001A0A                     _Delay10TCYx:
  2315                           	opt stack 25
  2316                           
  2317                           ;incstack = 0
  2318                           ;Delay10TCYx@unit stored from wreg
  2319  001A0A  6E0F               	movwf	Delay10TCYx@unit,c
  2320  001A0C  0E03               	movlw	3
  2321  001A0E                     u1767:
  2322  001A0E  2EE8               	decfsz	wreg,f,c
  2323  001A10  D7FE               	goto	u1767
  2324  001A12  F000               	nop	
  2325  001A14  2E0F               	decfsz	Delay10TCYx@unit,f,c
  2326  001A16  D7FA               	goto	l1859
  2327  001A18  D000               	goto	l496
  2328  001A1A                     l496:
  2329  001A1A  0012               	return		;funcret
  2330  001A1C                     __end_of_Delay10TCYx:
  2331                           	opt stack 0
  2332                           prodh	equ	0xFF4
  2333                           prodl	equ	0xFF3
  2334                           intcon	equ	0xFF2
  2335                           postinc0	equ	0xFEE
  2336                           wreg	equ	0xFE8
  2337                           indf2	equ	0xFDF
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function ___lwmod *****************
  2343 ;; Defined at:
  2344 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  dividend        2   14[COMRAM] unsigned int 
  2347 ;;  divisor         2   16[COMRAM] unsigned int 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  counter         1   18[COMRAM] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  2   14[COMRAM] unsigned int 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;Total ram usage:        5 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    2
  2366 ;; This function calls:
  2367 ;;		Nothing
  2368 ;; This function is called by:
  2369 ;;		_LCDbreakDouble
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           	psect	text19
  2374  0017AC                     __ptext19:
  2375                           	opt stack 0
  2376  0017AC                     ___lwmod:
  2377                           	opt stack 27
  2378                           
  2379                           ;incstack = 0
  2380  0017AC  5011               	movf	___lwmod@divisor,w,c
  2381  0017AE  1012               	iorwf	___lwmod@divisor+1,w,c
  2382  0017B0  B4D8               	btfsc	status,2,c
  2383  0017B2  D01D               	goto	l806
  2384  0017B4  0E01               	movlw	1
  2385  0017B6  6E13               	movwf	___lwmod@counter,c
  2386  0017B8  D005               	goto	l2133
  2387  0017BA                     l2131:
  2388  0017BA  90D8               	bcf	status,0,c
  2389  0017BC  3611               	rlcf	___lwmod@divisor,f,c
  2390  0017BE  3612               	rlcf	___lwmod@divisor+1,f,c
  2391  0017C0  2A13               	incf	___lwmod@counter,f,c
  2392  0017C2  D000               	goto	l2133
  2393  0017C4                     l2133:
  2394  0017C4  BE12               	btfsc	___lwmod@divisor+1,7,c
  2395  0017C6  D002               	goto	l2135
  2396  0017C8  D7F8               	goto	l2131
  2397  0017CA  D000               	goto	l2135
  2398  0017CC                     l2135:
  2399  0017CC  5011               	movf	___lwmod@divisor,w,c
  2400  0017CE  5C0F               	subwf	___lwmod@dividend,w,c
  2401  0017D0  5012               	movf	___lwmod@divisor+1,w,c
  2402  0017D2  5810               	subwfb	___lwmod@dividend+1,w,c
  2403  0017D4  A0D8               	btfss	status,0,c
  2404  0017D6  D005               	goto	l2139
  2405  0017D8  5011               	movf	___lwmod@divisor,w,c
  2406  0017DA  5E0F               	subwf	___lwmod@dividend,f,c
  2407  0017DC  5012               	movf	___lwmod@divisor+1,w,c
  2408  0017DE  5A10               	subwfb	___lwmod@dividend+1,f,c
  2409  0017E0  D000               	goto	l2139
  2410  0017E2                     l2139:
  2411  0017E2  90D8               	bcf	status,0,c
  2412  0017E4  3212               	rrcf	___lwmod@divisor+1,f,c
  2413  0017E6  3211               	rrcf	___lwmod@divisor,f,c
  2414  0017E8  2E13               	decfsz	___lwmod@counter,f,c
  2415  0017EA  D7F0               	goto	l2135
  2416  0017EC  D000               	goto	l806
  2417  0017EE                     l806:
  2418  0017EE  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  2419  0017F2  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  2420  0017F6  0012               	return		;funcret
  2421  0017F8                     __end_of___lwmod:
  2422                           	opt stack 0
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           intcon	equ	0xFF2
  2426                           postinc0	equ	0xFEE
  2427                           wreg	equ	0xFE8
  2428                           indf2	equ	0xFDF
  2429                           fsr2h	equ	0xFDA
  2430                           fsr2l	equ	0xFD9
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function ___lwdiv *****************
  2434 ;; Defined at:
  2435 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  dividend        2   14[COMRAM] unsigned int 
  2438 ;;  divisor         2   16[COMRAM] unsigned int 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  quotient        2   19[COMRAM] unsigned int 
  2441 ;;  counter         1   18[COMRAM] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  2   14[COMRAM] unsigned int 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;Total ram usage:        7 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    2
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_LCDbreakDouble
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text20
  2466  0016A4                     __ptext20:
  2467                           	opt stack 0
  2468  0016A4                     ___lwdiv:
  2469                           	opt stack 27
  2470                           
  2471                           ;incstack = 0
  2472  0016A4  0E00               	movlw	0
  2473  0016A6  6E15               	movwf	___lwdiv@quotient+1,c
  2474  0016A8  0E00               	movlw	0
  2475  0016AA  6E14               	movwf	___lwdiv@quotient,c
  2476  0016AC  5011               	movf	___lwdiv@divisor,w,c
  2477  0016AE  1012               	iorwf	___lwdiv@divisor+1,w,c
  2478  0016B0  B4D8               	btfsc	status,2,c
  2479  0016B2  D021               	goto	l796
  2480  0016B4  0E01               	movlw	1
  2481  0016B6  6E13               	movwf	___lwdiv@counter,c
  2482  0016B8  D005               	goto	l2113
  2483  0016BA                     l2111:
  2484  0016BA  90D8               	bcf	status,0,c
  2485  0016BC  3611               	rlcf	___lwdiv@divisor,f,c
  2486  0016BE  3612               	rlcf	___lwdiv@divisor+1,f,c
  2487  0016C0  2A13               	incf	___lwdiv@counter,f,c
  2488  0016C2  D000               	goto	l2113
  2489  0016C4                     l2113:
  2490  0016C4  BE12               	btfsc	___lwdiv@divisor+1,7,c
  2491  0016C6  D002               	goto	l2115
  2492  0016C8  D7F8               	goto	l2111
  2493  0016CA  D000               	goto	l2115
  2494  0016CC                     l2115:
  2495  0016CC  90D8               	bcf	status,0,c
  2496  0016CE  3614               	rlcf	___lwdiv@quotient,f,c
  2497  0016D0  3615               	rlcf	___lwdiv@quotient+1,f,c
  2498  0016D2  5011               	movf	___lwdiv@divisor,w,c
  2499  0016D4  5C0F               	subwf	___lwdiv@dividend,w,c
  2500  0016D6  5012               	movf	___lwdiv@divisor+1,w,c
  2501  0016D8  5810               	subwfb	___lwdiv@dividend+1,w,c
  2502  0016DA  A0D8               	btfss	status,0,c
  2503  0016DC  D006               	goto	l2123
  2504  0016DE  5011               	movf	___lwdiv@divisor,w,c
  2505  0016E0  5E0F               	subwf	___lwdiv@dividend,f,c
  2506  0016E2  5012               	movf	___lwdiv@divisor+1,w,c
  2507  0016E4  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2508  0016E6  8014               	bsf	___lwdiv@quotient,0,c
  2509  0016E8  D000               	goto	l2123
  2510  0016EA                     l2123:
  2511  0016EA  90D8               	bcf	status,0,c
  2512  0016EC  3212               	rrcf	___lwdiv@divisor+1,f,c
  2513  0016EE  3211               	rrcf	___lwdiv@divisor,f,c
  2514  0016F0  2E13               	decfsz	___lwdiv@counter,f,c
  2515  0016F2  D7EC               	goto	l2115
  2516  0016F4  D000               	goto	l796
  2517  0016F6                     l796:
  2518  0016F6  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2519  0016FA  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2520  0016FE  0012               	return		;funcret
  2521  001700                     __end_of___lwdiv:
  2522                           	opt stack 0
  2523                           prodh	equ	0xFF4
  2524                           prodl	equ	0xFF3
  2525                           intcon	equ	0xFF2
  2526                           postinc0	equ	0xFEE
  2527                           wreg	equ	0xFE8
  2528                           indf2	equ	0xFDF
  2529                           fsr2h	equ	0xFDA
  2530                           fsr2l	equ	0xFD9
  2531                           status	equ	0xFD8
  2532                           
  2533 ;; *************** function ___fttol *****************
  2534 ;; Defined at:
  2535 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  f1              3   37[COMRAM] float 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  lval            4   47[COMRAM] unsigned long 
  2540 ;;  exp1            1   51[COMRAM] unsigned char 
  2541 ;;  sign1           1   46[COMRAM] unsigned char 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  4   37[COMRAM] long 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;Total ram usage:       15 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    2
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_LCDbreakDouble
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text21
  2566  001486                     __ptext21:
  2567                           	opt stack 0
  2568  001486                     ___fttol:
  2569                           	opt stack 27
  2570                           
  2571                           ;incstack = 0
  2572  001486  C028  F02A         	movff	___fttol@f1+2,??___fttol
  2573  00148A  6A2B               	clrf	(??___fttol+1)& (0+255),c
  2574  00148C  6A2C               	clrf	(??___fttol+2)& (0+255),c
  2575  00148E  3427               	rlcf	___fttol@f1+1,w,c
  2576  001490  362A               	rlcf	??___fttol& (0+255),f,c
  2577  001492  E301               	bnc	u1341
  2578  001494  802B               	bsf	(??___fttol+1)& (0+255),0,c
  2579  001496                     u1341:
  2580  001496  502A               	movf	??___fttol,w,c
  2581  001498  6E34               	movwf	___fttol@exp1,c
  2582  00149A  5034               	movf	___fttol@exp1,w,c
  2583  00149C  A4D8               	btfss	status,2,c
  2584  00149E  D002               	goto	l2065
  2585  0014A0  D039               	goto	l2089
  2586  0014A2  D063               	goto	l694
  2587  0014A4                     l2065:
  2588  0014A4  0E17               	movlw	23
  2589  0014A6  6E2A               	movwf	??___fttol& (0+255),c
  2590  0014A8  C026  F02B         	movff	___fttol@f1,??___fttol+1
  2591  0014AC  C027  F02C         	movff	___fttol@f1+1,??___fttol+2
  2592  0014B0  C028  F02D         	movff	___fttol@f1+2,??___fttol+3
  2593  0014B4  282A               	incf	??___fttol,w,c
  2594  0014B6  6E2E               	movwf	(??___fttol+4)& (0+255),c
  2595  0014B8  D004               	goto	u1360
  2596  0014BA                     u1365:
  2597  0014BA  90D8               	bcf	status,0,c
  2598  0014BC  322D               	rrcf	??___fttol+3,f,c
  2599  0014BE  322C               	rrcf	??___fttol+2,f,c
  2600  0014C0  322B               	rrcf	??___fttol+1,f,c
  2601  0014C2                     u1360:
  2602  0014C2  2E2E               	decfsz	(??___fttol+4)& (0+255),f,c
  2603  0014C4  D7FA               	goto	u1365
  2604  0014C6  502B               	movf	??___fttol+1,w,c
  2605  0014C8  6E2F               	movwf	___fttol@sign1,c
  2606  0014CA  8E27               	bsf	___fttol@f1+1,7,c
  2607  0014CC  0EFF               	movlw	255
  2608  0014CE  1626               	andwf	___fttol@f1,f,c
  2609  0014D0  0EFF               	movlw	255
  2610  0014D2  1627               	andwf	___fttol@f1+1,f,c
  2611  0014D4  0E00               	movlw	0
  2612  0014D6  1628               	andwf	___fttol@f1+2,f,c
  2613  0014D8  5026               	movf	___fttol@f1,w,c
  2614  0014DA  6E30               	movwf	___fttol@lval,c
  2615  0014DC  5027               	movf	___fttol@f1+1,w,c
  2616  0014DE  6E31               	movwf	___fttol@lval+1,c
  2617  0014E0  5028               	movf	___fttol@f1+2,w,c
  2618  0014E2  6E32               	movwf	___fttol@lval+2,c
  2619  0014E4  6A33               	clrf	___fttol@lval+3,c
  2620  0014E6  0E8E               	movlw	142
  2621  0014E8  5E34               	subwf	___fttol@exp1,f,c
  2622  0014EA  AE34               	btfss	___fttol@exp1,7,c
  2623  0014EC  D010               	goto	l2087
  2624  0014EE  5034               	movf	___fttol@exp1,w,c
  2625  0014F0  0A80               	xorlw	128
  2626  0014F2  0F8F               	addlw	143
  2627  0014F4  B0D8               	btfsc	status,0,c
  2628  0014F6  D003               	goto	l2083
  2629  0014F8  D00D               	goto	l2089
  2630  0014FA  D037               	goto	l694
  2631  0014FC  D000               	goto	l2083
  2632  0014FE                     l2083:
  2633  0014FE  90D8               	bcf	status,0,c
  2634  001500  3233               	rrcf	___fttol@lval+3,f,c
  2635  001502  3232               	rrcf	___fttol@lval+2,f,c
  2636  001504  3231               	rrcf	___fttol@lval+1,f,c
  2637  001506  3230               	rrcf	___fttol@lval,f,c
  2638  001508  3E34               	incfsz	___fttol@exp1,f,c
  2639  00150A  D7F9               	goto	l2083
  2640  00150C  D019               	goto	l2097
  2641  00150E                     l2087:
  2642  00150E  0E17               	movlw	23
  2643  001510  6434               	cpfsgt	___fttol@exp1,c
  2644  001512  D011               	goto	l2095
  2645  001514                     l2089:
  2646  001514  0E00               	movlw	0
  2647  001516  6E26               	movwf	?___fttol,c
  2648  001518  0E00               	movlw	0
  2649  00151A  6E27               	movwf	?___fttol+1,c
  2650  00151C  0E00               	movlw	0
  2651  00151E  6E28               	movwf	?___fttol+2,c
  2652  001520  0E00               	movlw	0
  2653  001522  6E29               	movwf	?___fttol+3,c
  2654  001524  D022               	goto	l694
  2655  001526  D007               	goto	l2095
  2656  001528                     l2093:
  2657  001528  90D8               	bcf	status,0,c
  2658  00152A  3630               	rlcf	___fttol@lval,f,c
  2659  00152C  3631               	rlcf	___fttol@lval+1,f,c
  2660  00152E  3632               	rlcf	___fttol@lval+2,f,c
  2661  001530  3633               	rlcf	___fttol@lval+3,f,c
  2662  001532  0634               	decf	___fttol@exp1,f,c
  2663  001534  D000               	goto	l2095
  2664  001536                     l2095:
  2665  001536  5034               	movf	___fttol@exp1,w,c
  2666  001538  B4D8               	btfsc	status,2,c
  2667  00153A  D002               	goto	l2097
  2668  00153C  D7F5               	goto	l2093
  2669  00153E  D000               	goto	l2097
  2670  001540                     l2097:
  2671  001540  502F               	movf	___fttol@sign1,w,c
  2672  001542  B4D8               	btfsc	status,2,c
  2673  001544  D009               	goto	l2101
  2674  001546  1E33               	comf	___fttol@lval+3,f,c
  2675  001548  1E32               	comf	___fttol@lval+2,f,c
  2676  00154A  1E31               	comf	___fttol@lval+1,f,c
  2677  00154C  6C30               	negf	___fttol@lval,c
  2678  00154E  0E00               	movlw	0
  2679  001550  2231               	addwfc	___fttol@lval+1,f,c
  2680  001552  2232               	addwfc	___fttol@lval+2,f,c
  2681  001554  2233               	addwfc	___fttol@lval+3,f,c
  2682  001556  D000               	goto	l2101
  2683  001558                     l2101:
  2684  001558  C030  F026         	movff	___fttol@lval,?___fttol
  2685  00155C  C031  F027         	movff	___fttol@lval+1,?___fttol+1
  2686  001560  C032  F028         	movff	___fttol@lval+2,?___fttol+2
  2687  001564  C033  F029         	movff	___fttol@lval+3,?___fttol+3
  2688  001568  D000               	goto	l694
  2689  00156A                     l694:
  2690  00156A  0012               	return		;funcret
  2691  00156C                     __end_of___fttol:
  2692                           	opt stack 0
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           indf2	equ	0xFDF
  2699                           fsr2h	equ	0xFDA
  2700                           fsr2l	equ	0xFD9
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function ___ftmul *****************
  2704 ;; Defined at:
  2705 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  f1              3   22[COMRAM] float 
  2708 ;;  f2              3   25[COMRAM] float 
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  f3_as_produc    3   32[COMRAM] unsigned um
  2711 ;;  sign            1   36[COMRAM] unsigned char 
  2712 ;;  cntr            1   35[COMRAM] unsigned char 
  2713 ;;  exp             1   31[COMRAM] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  3   22[COMRAM] float 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2723 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;Total ram usage:       15 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    3
  2730 ;; This function calls:
  2731 ;;		___ftpack
  2732 ;; This function is called by:
  2733 ;;		_LCDbreakDouble
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text22
  2738  00138E                     __ptext22:
  2739                           	opt stack 0
  2740  00138E                     ___ftmul:
  2741                           	opt stack 26
  2742                           
  2743                           ;incstack = 0
  2744  00138E  C019  F01D         	movff	___ftmul@f1+2,??___ftmul
  2745  001392  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  2746  001394  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  2747  001396  3418               	rlcf	___ftmul@f1+1,w,c
  2748  001398  361D               	rlcf	??___ftmul& (0+255),f,c
  2749  00139A  E301               	bnc	u1281
  2750  00139C  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  2751  00139E                     u1281:
  2752  00139E  501D               	movf	??___ftmul,w,c
  2753  0013A0  6E20               	movwf	___ftmul@exp,c
  2754  0013A2  5020               	movf	___ftmul@exp,w,c
  2755  0013A4  A4D8               	btfss	status,2,c
  2756  0013A6  D002               	goto	l2017
  2757  0013A8  D00E               	goto	l2019
  2758  0013AA  D06C               	goto	l673
  2759  0013AC                     l2017:
  2760  0013AC  C01C  F01D         	movff	___ftmul@f2+2,??___ftmul
  2761  0013B0  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  2762  0013B2  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  2763  0013B4  341B               	rlcf	___ftmul@f2+1,w,c
  2764  0013B6  361D               	rlcf	??___ftmul& (0+255),f,c
  2765  0013B8  E301               	bnc	u1301
  2766  0013BA  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  2767  0013BC                     u1301:
  2768  0013BC  501D               	movf	??___ftmul,w,c
  2769  0013BE  6E25               	movwf	___ftmul@sign,c
  2770  0013C0  5025               	movf	___ftmul@sign,w,c
  2771  0013C2  A4D8               	btfss	status,2,c
  2772  0013C4  D007               	goto	l2023
  2773  0013C6                     l2019:
  2774  0013C6  0E00               	movlw	0
  2775  0013C8  6E17               	movwf	?___ftmul,c
  2776  0013CA  0E00               	movlw	0
  2777  0013CC  6E18               	movwf	?___ftmul+1,c
  2778  0013CE  0E00               	movlw	0
  2779  0013D0  6E19               	movwf	?___ftmul+2,c
  2780  0013D2  D058               	goto	l673
  2781  0013D4                     l2023:
  2782  0013D4  5025               	movf	___ftmul@sign,w,c
  2783  0013D6  0F7B               	addlw	123
  2784  0013D8  2620               	addwf	___ftmul@exp,f,c
  2785  0013DA  C019  F025         	movff	___ftmul@f1+2,___ftmul@sign
  2786  0013DE  501C               	movf	___ftmul@f2+2,w,c
  2787  0013E0  1A25               	xorwf	___ftmul@sign,f,c
  2788  0013E2  0E80               	movlw	128
  2789  0013E4  1625               	andwf	___ftmul@sign,f,c
  2790  0013E6  8E18               	bsf	___ftmul@f1+1,7,c
  2791  0013E8  8E1B               	bsf	___ftmul@f2+1,7,c
  2792  0013EA  0EFF               	movlw	255
  2793  0013EC  161A               	andwf	___ftmul@f2,f,c
  2794  0013EE  0EFF               	movlw	255
  2795  0013F0  161B               	andwf	___ftmul@f2+1,f,c
  2796  0013F2  0E00               	movlw	0
  2797  0013F4  161C               	andwf	___ftmul@f2+2,f,c
  2798  0013F6  0E00               	movlw	0
  2799  0013F8  6E21               	movwf	___ftmul@f3_as_product,c
  2800  0013FA  0E00               	movlw	0
  2801  0013FC  6E22               	movwf	___ftmul@f3_as_product+1,c
  2802  0013FE  0E00               	movlw	0
  2803  001400  6E23               	movwf	___ftmul@f3_as_product+2,c
  2804  001402  0E07               	movlw	7
  2805  001404  6E24               	movwf	___ftmul@cntr,c
  2806  001406  D000               	goto	l2037
  2807  001408                     l2037:
  2808  001408  A017               	btfss	___ftmul@f1,0,c
  2809  00140A  D007               	goto	l2041
  2810  00140C  501A               	movf	___ftmul@f2,w,c
  2811  00140E  2621               	addwf	___ftmul@f3_as_product,f,c
  2812  001410  501B               	movf	___ftmul@f2+1,w,c
  2813  001412  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  2814  001414  501C               	movf	___ftmul@f2+2,w,c
  2815  001416  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  2816  001418  D000               	goto	l2041
  2817  00141A                     l2041:
  2818  00141A  90D8               	bcf	status,0,c
  2819  00141C  3219               	rrcf	___ftmul@f1+2,f,c
  2820  00141E  3218               	rrcf	___ftmul@f1+1,f,c
  2821  001420  3217               	rrcf	___ftmul@f1,f,c
  2822  001422  90D8               	bcf	status,0,c
  2823  001424  361A               	rlcf	___ftmul@f2,f,c
  2824  001426  361B               	rlcf	___ftmul@f2+1,f,c
  2825  001428  361C               	rlcf	___ftmul@f2+2,f,c
  2826  00142A  2E24               	decfsz	___ftmul@cntr,f,c
  2827  00142C  D7ED               	goto	l2037
  2828  00142E  D000               	goto	l2045
  2829  001430                     l2045:
  2830  001430  0E09               	movlw	9
  2831  001432  6E24               	movwf	___ftmul@cntr,c
  2832  001434  D000               	goto	l2047
  2833  001436                     l2047:
  2834  001436  A017               	btfss	___ftmul@f1,0,c
  2835  001438  D007               	goto	l2051
  2836  00143A  501A               	movf	___ftmul@f2,w,c
  2837  00143C  2621               	addwf	___ftmul@f3_as_product,f,c
  2838  00143E  501B               	movf	___ftmul@f2+1,w,c
  2839  001440  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  2840  001442  501C               	movf	___ftmul@f2+2,w,c
  2841  001444  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  2842  001446  D000               	goto	l2051
  2843  001448                     l2051:
  2844  001448  90D8               	bcf	status,0,c
  2845  00144A  3219               	rrcf	___ftmul@f1+2,f,c
  2846  00144C  3218               	rrcf	___ftmul@f1+1,f,c
  2847  00144E  3217               	rrcf	___ftmul@f1,f,c
  2848  001450  90D8               	bcf	status,0,c
  2849  001452  3223               	rrcf	___ftmul@f3_as_product+2,f,c
  2850  001454  3222               	rrcf	___ftmul@f3_as_product+1,f,c
  2851  001456  3221               	rrcf	___ftmul@f3_as_product,f,c
  2852  001458  2E24               	decfsz	___ftmul@cntr,f,c
  2853  00145A  D7ED               	goto	l2047
  2854  00145C  D000               	goto	l2055
  2855  00145E                     l2055:
  2856  00145E  C021  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  2857  001462  C022  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2858  001466  C023  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2859  00146A  C020  F012         	movff	___ftmul@exp,___ftpack@exp
  2860  00146E  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  2861  001472  ECB6  F00A         	call	___ftpack	;wreg free
  2862  001476  C00F  F017         	movff	?___ftpack,?___ftmul
  2863  00147A  C010  F018         	movff	?___ftpack+1,?___ftmul+1
  2864  00147E  C011  F019         	movff	?___ftpack+2,?___ftmul+2
  2865  001482  D000               	goto	l673
  2866  001484                     l673:
  2867  001484  0012               	return		;funcret
  2868  001486                     __end_of___ftmul:
  2869                           	opt stack 0
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           indf2	equ	0xFDF
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function ___ftpack *****************
  2881 ;; Defined at:
  2882 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  arg             3   14[COMRAM] unsigned um
  2885 ;;  exp             1   17[COMRAM] unsigned char 
  2886 ;;  sign            1   18[COMRAM] unsigned char 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;		None
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  3   14[COMRAM] float 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2, status,0
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2898 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;Total ram usage:        8 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    2
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		___ftmul
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text23
  2913  00156C                     __ptext23:
  2914                           	opt stack 0
  2915  00156C                     ___ftpack:
  2916                           	opt stack 26
  2917                           
  2918                           ;incstack = 0
  2919  00156C  5012               	movf	___ftpack@exp,w,c
  2920  00156E  B4D8               	btfsc	status,2,c
  2921  001570  D005               	goto	l1925
  2922  001572  500F               	movf	___ftpack@arg,w,c
  2923  001574  1010               	iorwf	___ftpack@arg+1,w,c
  2924  001576  1011               	iorwf	___ftpack@arg+2,w,c
  2925  001578  A4D8               	btfss	status,2,c
  2926  00157A  D00E               	goto	l1931
  2927  00157C                     l1925:
  2928  00157C  0E00               	movlw	0
  2929  00157E  6E0F               	movwf	?___ftpack,c
  2930  001580  0E00               	movlw	0
  2931  001582  6E10               	movwf	?___ftpack+1,c
  2932  001584  0E00               	movlw	0
  2933  001586  6E11               	movwf	?___ftpack+2,c
  2934  001588  D053               	goto	l586
  2935  00158A  D006               	goto	l1931
  2936  00158C                     l1929:
  2937  00158C  2A12               	incf	___ftpack@exp,f,c
  2938  00158E  90D8               	bcf	status,0,c
  2939  001590  3211               	rrcf	___ftpack@arg+2,f,c
  2940  001592  3210               	rrcf	___ftpack@arg+1,f,c
  2941  001594  320F               	rrcf	___ftpack@arg,f,c
  2942  001596  D000               	goto	l1931
  2943  001598                     l1931:
  2944  001598  0E00               	movlw	0
  2945  00159A  140F               	andwf	___ftpack@arg,w,c
  2946  00159C  6E14               	movwf	??___ftpack& (0+255),c
  2947  00159E  0E00               	movlw	0
  2948  0015A0  1410               	andwf	___ftpack@arg+1,w,c
  2949  0015A2  6E15               	movwf	(??___ftpack+1)& (0+255),c
  2950  0015A4  0EFE               	movlw	254
  2951  0015A6  1411               	andwf	___ftpack@arg+2,w,c
  2952  0015A8  6E16               	movwf	(??___ftpack+2)& (0+255),c
  2953  0015AA  5014               	movf	??___ftpack,w,c
  2954  0015AC  1015               	iorwf	??___ftpack+1,w,c
  2955  0015AE  1016               	iorwf	??___ftpack+2,w,c
  2956  0015B0  B4D8               	btfsc	status,2,c
  2957  0015B2  D00E               	goto	l1937
  2958  0015B4  D7EB               	goto	l1929
  2959  0015B6  D00C               	goto	l1937
  2960  0015B8                     l1933:
  2961  0015B8  2A12               	incf	___ftpack@exp,f,c
  2962  0015BA  0E01               	movlw	1
  2963  0015BC  260F               	addwf	___ftpack@arg,f,c
  2964  0015BE  0E00               	movlw	0
  2965  0015C0  2210               	addwfc	___ftpack@arg+1,f,c
  2966  0015C2  0E00               	movlw	0
  2967  0015C4  2211               	addwfc	___ftpack@arg+2,f,c
  2968  0015C6  90D8               	bcf	status,0,c
  2969  0015C8  3211               	rrcf	___ftpack@arg+2,f,c
  2970  0015CA  3210               	rrcf	___ftpack@arg+1,f,c
  2971  0015CC  320F               	rrcf	___ftpack@arg,f,c
  2972  0015CE  D000               	goto	l1937
  2973  0015D0                     l1937:
  2974  0015D0  0E00               	movlw	0
  2975  0015D2  140F               	andwf	___ftpack@arg,w,c
  2976  0015D4  6E14               	movwf	??___ftpack& (0+255),c
  2977  0015D6  0E00               	movlw	0
  2978  0015D8  1410               	andwf	___ftpack@arg+1,w,c
  2979  0015DA  6E15               	movwf	(??___ftpack+1)& (0+255),c
  2980  0015DC  0EFF               	movlw	255
  2981  0015DE  1411               	andwf	___ftpack@arg+2,w,c
  2982  0015E0  6E16               	movwf	(??___ftpack+2)& (0+255),c
  2983  0015E2  5014               	movf	??___ftpack,w,c
  2984  0015E4  1015               	iorwf	??___ftpack+1,w,c
  2985  0015E6  1016               	iorwf	??___ftpack+2,w,c
  2986  0015E8  B4D8               	btfsc	status,2,c
  2987  0015EA  D008               	goto	l1941
  2988  0015EC  D7E5               	goto	l1933
  2989  0015EE  D006               	goto	l1941
  2990  0015F0                     l1939:
  2991  0015F0  0612               	decf	___ftpack@exp,f,c
  2992  0015F2  90D8               	bcf	status,0,c
  2993  0015F4  360F               	rlcf	___ftpack@arg,f,c
  2994  0015F6  3610               	rlcf	___ftpack@arg+1,f,c
  2995  0015F8  3611               	rlcf	___ftpack@arg+2,f,c
  2996  0015FA  D000               	goto	l1941
  2997  0015FC                     l1941:
  2998  0015FC  BE10               	btfsc	___ftpack@arg+1,7,c
  2999  0015FE  D004               	goto	l597
  3000  001600  0E02               	movlw	2
  3001  001602  6012               	cpfslt	___ftpack@exp,c
  3002  001604  D7F5               	goto	l1939
  3003  001606  D000               	goto	l597
  3004  001608                     l597:
  3005  001608  B012               	btfsc	___ftpack@exp,0,c
  3006  00160A  D002               	goto	l1947
  3007  00160C  9E10               	bcf	___ftpack@arg+1,7,c
  3008  00160E  D000               	goto	l1947
  3009  001610                     l1947:
  3010  001610  90D8               	bcf	status,0,c
  3011  001612  3212               	rrcf	___ftpack@exp,f,c
  3012  001614  5012               	movf	___ftpack@exp,w,c
  3013  001616  1211               	iorwf	___ftpack@arg+2,f,c
  3014  001618  5013               	movf	___ftpack@sign,w,c
  3015  00161A  B4D8               	btfsc	status,2,c
  3016  00161C  D002               	goto	l1953
  3017  00161E  8E11               	bsf	___ftpack@arg+2,7,c
  3018  001620  D000               	goto	l1953
  3019  001622                     l1953:
  3020  001622  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  3021  001626  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  3022  00162A  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  3023  00162E  D000               	goto	l586
  3024  001630                     l586:
  3025  001630  0012               	return		;funcret
  3026  001632                     __end_of___ftpack:
  3027                           	opt stack 0
  3028                           prodh	equ	0xFF4
  3029                           prodl	equ	0xFF3
  3030                           intcon	equ	0xFF2
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           indf2	equ	0xFDF
  3034                           fsr2h	equ	0xFDA
  3035                           fsr2l	equ	0xFD9
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function _ISR *****************
  3039 ;; Defined at:
  3040 ;;		line 87 in file "SPItestSLAVE.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;		None               void
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;Total ram usage:       14 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    1
  3061 ;; This function calls:
  3062 ;;		_SPIInt
  3063 ;; This function is called by:
  3064 ;;		Interrupt level 2
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	intcode
  3069  000008                     __pintcode:
  3070                           	opt stack 0
  3071  000008                     _ISR:
  3072                           	opt stack 24
  3073                           
  3074                           ;incstack = 0
  3075  000008  CFFA F001          	movff	pclath,??_ISR
  3076  00000C  CFFB F002          	movff	pclatu,??_ISR+1
  3077  000010  CFE9 F003          	movff	fsr0l,??_ISR+2
  3078  000014  ED19  F00B         	call	int_func,f	;refresh shadow registers
  3079                           pclatu	equ	0xFFB
  3080                           pclath	equ	0xFFA
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           intcon	equ	0xFF2
  3084                           postinc0	equ	0xFEE
  3085                           fsr0l	equ	0xFE9
  3086                           wreg	equ	0xFE8
  3087                           indf2	equ	0xFDF
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092                           	psect	intcode_body
  3093  001632                     __pintcode_body:
  3094                           	opt stack 24
  3095  001632                     int_func:
  3096                           	opt stack 24
  3097  001632  0006               	pop		; remove dummy address from shadow register refresh
  3098  001634  CFEA F004          	movff	fsr0h,??_ISR+3
  3099  001638  CFE1 F005          	movff	fsr1l,??_ISR+4
  3100  00163C  CFE2 F006          	movff	fsr1h,??_ISR+5
  3101  001640  CFD9 F007          	movff	fsr2l,??_ISR+6
  3102  001644  CFDA F008          	movff	fsr2h,??_ISR+7
  3103  001648  CFF3 F009          	movff	prodl,??_ISR+8
  3104  00164C  CFF4 F00A          	movff	prodh,??_ISR+9
  3105  001650  CFF6 F00B          	movff	tblptrl,??_ISR+10
  3106  001654  CFF7 F00C          	movff	tblptrh,??_ISR+11
  3107  001658  CFF8 F00D          	movff	tblptru,??_ISR+12
  3108  00165C  CFF5 F00E          	movff	tablat,??_ISR+13
  3109                           
  3110                           ;SPItestSLAVE.c: 89: if (PIR3bits.SSP2IF == 1)
  3111  001660  AEA4               	btfss	4004,7,c	;volatile
  3112  001662  D003               	goto	i2l126
  3113                           
  3114                           ;SPItestSLAVE.c: 90: {
  3115                           ;SPItestSLAVE.c: 91: SPIInt();
  3116  001664  EC16  F00D         	call	_SPIInt	;wreg free
  3117  001668  D000               	goto	i2l126
  3118  00166A                     i2l126:
  3119  00166A  C00E  FFF5         	movff	??_ISR+13,tablat
  3120  00166E  C00D  FFF8         	movff	??_ISR+12,tblptru
  3121  001672  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3122  001676  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3123  00167A  C00A  FFF4         	movff	??_ISR+9,prodh
  3124  00167E  C009  FFF3         	movff	??_ISR+8,prodl
  3125  001682  C008  FFDA         	movff	??_ISR+7,fsr2h
  3126  001686  C007  FFD9         	movff	??_ISR+6,fsr2l
  3127  00168A  C006  FFE2         	movff	??_ISR+5,fsr1h
  3128  00168E  C005  FFE1         	movff	??_ISR+4,fsr1l
  3129  001692  C004  FFEA         	movff	??_ISR+3,fsr0h
  3130  001696  C003  FFE9         	movff	??_ISR+2,fsr0l
  3131  00169A  C002  FFFB         	movff	??_ISR+1,pclatu
  3132  00169E  C001  FFFA         	movff	??_ISR,pclath
  3133  0016A2  0011               	retfie		f
  3134  0016A4                     __end_of_ISR:
  3135                           	opt stack 0
  3136                           pclatu	equ	0xFFB
  3137                           pclath	equ	0xFFA
  3138                           tblptru	equ	0xFF8
  3139                           tblptrh	equ	0xFF7
  3140                           tblptrl	equ	0xFF6
  3141                           tablat	equ	0xFF5
  3142                           prodh	equ	0xFF4
  3143                           prodl	equ	0xFF3
  3144                           intcon	equ	0xFF2
  3145                           postinc0	equ	0xFEE
  3146                           fsr0h	equ	0xFEA
  3147                           fsr0l	equ	0xFE9
  3148                           wreg	equ	0xFE8
  3149                           fsr1h	equ	0xFE2
  3150                           fsr1l	equ	0xFE1
  3151                           indf2	equ	0xFDF
  3152                           fsr2h	equ	0xFDA
  3153                           fsr2l	equ	0xFD9
  3154                           status	equ	0xFD8
  3155                           
  3156 ;; *************** function _SPIInt *****************
  3157 ;; Defined at:
  3158 ;;		line 23 in file "SPISlave.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;		None
  3163 ;; Return value:  Size  Location     Type
  3164 ;;		None               void
  3165 ;; Registers used:
  3166 ;;		wreg, status,2
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;Total ram usage:        0 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_ISR
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text25
  3186  001A2C                     __ptext25:
  3187                           	opt stack 0
  3188  001A2C                     _SPIInt:
  3189                           	opt stack 24
  3190                           
  3191                           ;SPISlave.c: 25: Command = SSP2BUF;
  3192                           
  3193                           ;incstack = 0
  3194  001A2C  CF66 F04D          	movff	3942,_Command	;volatile
  3195                           
  3196                           ;SPISlave.c: 26: PORTCbits.RC6 = 0;
  3197  001A30  9C82               	bcf	3970,6,c	;volatile
  3198                           
  3199                           ;SPISlave.c: 27: PIR3bits.SSP2IF = 0;
  3200  001A32  9EA4               	bcf	4004,7,c	;volatile
  3201                           
  3202                           ;SPISlave.c: 28: PIE3bits.SSP2IE = 0;
  3203  001A34  9EA3               	bcf	4003,7,c	;volatile
  3204                           
  3205                           ;SPISlave.c: 29: SPIflag = 1;
  3206  001A36  0E01               	movlw	1
  3207  001A38  6E4F               	movwf	_SPIflag,c
  3208  001A3A  0012               	return		;funcret
  3209  001A3C                     __end_of_SPIInt:
  3210                           	opt stack 0
  3211                           pclatu	equ	0xFFB
  3212                           pclath	equ	0xFFA
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           intcon	equ	0xFF2
  3220                           postinc0	equ	0xFEE
  3221                           fsr0h	equ	0xFEA
  3222                           fsr0l	equ	0xFE9
  3223                           wreg	equ	0xFE8
  3224                           fsr1h	equ	0xFE2
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           pclatu	equ	0xFFB
  3231                           pclath	equ	0xFFA
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           intcon	equ	0xFF2
  3239                           postinc0	equ	0xFEE
  3240                           fsr0h	equ	0xFEA
  3241                           fsr0l	equ	0xFE9
  3242                           wreg	equ	0xFE8
  3243                           fsr1h	equ	0xFE2
  3244                           fsr1l	equ	0xFE1
  3245                           indf2	equ	0xFDF
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           
  3250                           	psect	rparam
  3251  0000                     pclatu	equ	0xFFB
  3252                           pclath	equ	0xFFA
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           intcon	equ	0xFF2
  3260                           postinc0	equ	0xFEE
  3261                           fsr0h	equ	0xFEA
  3262                           fsr0l	equ	0xFE9
  3263                           wreg	equ	0xFE8
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      80
    BANK0           160     11      11
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), SPIReassembleDouble@dub(COMRAM[3]), SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _lcdInit->_lcdCommand
    _setIODIR->_WriteSPI1
    _SPIInit->_OpenSPI2
    _SPIDisassembleDouble->_GenerateChecksum
    _LCDbreakDouble->___fttol
    _lcdGoTo->_lcdCommand
    _lcdCommand->_setGPIO
    _lcdChar->_setGPIO
    _setGPIO->_WriteSPI1
    ___fttol->___ftmul
    ___ftmul->___ftpack

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCDbreakDouble

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10500
                                              9 BANK0      2     2      0
                     _LCDbreakDouble
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    2116
                            _SPIInit
                            _lcdInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                              0     0      0    1862
                           _OpenSPI1
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     215
                                             16 COMRAM     2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     254
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     254
                           _OpenSPI2
 ---------------------------------------------------------------------------------
 (3) _OpenSPI2                                             3     1      2     254
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      23
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      89
                                             14 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     540
                                             16 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDbreakDouble                                       9     6      3    7528
                                              0 BANK0      9     6      3
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
                            _lcdChar
                         _lcdCommand
                            _lcdGoTo
 ---------------------------------------------------------------------------------
 (2) _lcdGoTo                                              1     1      0     754
                                             19 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     723
                                             18 COMRAM     1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (2) _lcdChar                                              1     1      0     723
                                             18 COMRAM     1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _setGPIO                                              2     1      1     670
                                             16 COMRAM     2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (4) _WriteSPI1                                            2     2      0      23
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     752
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     761
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             37 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2596
                                             22 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1888
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
                             _SPIInt
 ---------------------------------------------------------------------------------
 (7) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDbreakDouble
     ___ftmul
       ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
     ___lwdiv
     ___lwmod
     _lcdChar
       _Delay10TCYx
       _setGPIO
         _WriteSPI1
     _lcdCommand
       _Delay10TCYx
       _setGPIO
         _WriteSPI1
     _lcdGoTo
       _lcdCommand
         _Delay10TCYx
         _setGPIO
           _WriteSPI1
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _initialize
     _SPIInit
       _OpenSPI2
     _lcdInit
       _OpenSPI1
       _lcdCommand
         _Delay10TCYx
         _setGPIO
           _WriteSPI1
       _setGPIO
         _WriteSPI1
       _setIODIR
         _WriteSPI1

 _ISR (ROOT)
   _SPIInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      B       B       5        6.9%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      50       1       84.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B      32        0.0%
DATA                 0      0      5B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 15 02:03:42 2015

                           _Kd 003F                             _Ki 0042                             _Kp 0045  
           LCDbreakDouble@dubs 0060                            l130 12F8                            l202 1884  
                          l107 1130                            l220 1718                            l221 171A  
                          l240 1996                            l224 1734                            l129 12AA  
                          l225 174E                            l242 198E                            l226 1736  
                          l218 1714                            l227 173A                            l260 176E  
                          l261 1770                            l182 19DA                            l191 1A2A  
                          l264 178A                            l265 17A4                            l266 178C  
                          l258 176A                            l267 1790                            l188 1A22  
                          l199 1974                            l806 17EE                            l496 1A1A  
                          l673 1484                            l586 1630                            l597 1608  
                          l694 156A                            l796 16F6                            _ISR 0008  
            lcdCommand@command 0013                            prod 000FF3                            wreg 000FE8  
          LCDbreakDouble@temp1 0065            LCDbreakDouble@temp2 0067                           ?_ISR 0001  
                 __CFG_WDT$OFF 000000                           l2001 1958                           l2101 1558  
                         l2023 13D4                           l2111 16BA                           l2007 1970  
                         l2041 141A                           l2017 13AC                           l2113 16C4  
                         l2051 1448                           l2019 13C6                           l2123 16EA  
                         l2115 16CC                           l2131 17BA                           l2045 1430  
                         l2037 1408                           l2133 17C4                           l2055 145E  
                         l2047 1436                           l2135 17CC                           l2303 1138  
                         l2065 14A4                           l2321 1190                           l2313 1164  
                         l2083 14FE                           l2139 17E2                           l2307 1146  
                         l2093 1528                           l2333 11E4                           l2341 1214  
                         l2245 102C                           l2095 1536                           l2087 150E  
                         l2327 11BA                           l2271 10AC                           l2263 1078  
                         l2089 1514                           l2097 1540                           l2339 120E  
                         l2291 1108                           l2275 10C6                           l2267 1092  
                         l2259 105E                           l2293 1112                           l2287 10EC  
                         l2279 10E0                           l1913 1774                           l1931 1598  
                         l1941 15FC                           l1933 15B8                           l1925 157C  
                         l1917 1794                           l1953 1622                           l1937 15D0  
                         l1929 158C                           l1947 1610                           l1939 15F0  
                         l1859 1A0C                           l1895 171E                           l1899 173E  
                         l1997 194C                           STR_1 1008                           STR_2 1001  
                         u1301 13BC                           u1341 1496                           u1360 14C2  
                         u1281 139E                           u1365 14BA                           u1767 1A0E  
                         _main 1010                   ___ftpack@arg 000F                   ___ftpack@exp 0012  
              __end_of_SPIInit 19F8                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 0018  
                 ___ftmul@cntr 0024                   ___param_bank 000010                   ___ftmul@sign 0025  
                        ??_ISR 0001                    _Delay10TCYx 1A0A                   ___fttol@exp1 0034  
                 ___fttol@lval 0030                          ?_main 0001                __end_of___ftmul 1486  
              __end_of___fttol 156C                __end_of___lwdiv 1700                __end_of___lwmod 17F8  
                        i2l126 166A         ??_SPIDisassembleDouble 0014                __end_of_lcdChar 1908  
              __end_of_lcdGoTo 1A56                __end_of_lcdInit 1842                 __CFG_FCMEN$OFF 000000  
              __end_of_setGPIO 19CC                  ___ftpack@sign 0013                     _DoubleSPIS 0035  
                        main@x 006A                  ??_ReceiveSPI1 000F                          tablat 000FF5  
                        status 000FD8            GenerateChecksum@sum 000F        __size_of_LCDbreakDouble 0172  
              __initialization 19F8                   __end_of_main 121C          LCDbreakDouble@tempDub 0063  
               __CFG_OSC$HSPLL 000000               __end_of_SendSPI1 19E4               __end_of_OpenSPI1 1756  
             __end_of_OpenSPI2 17AC                         ??_main 0035                  ___fttol@sign1 002F  
                __activetblptr 000003                      ??_SPIInit 0012               __end_of___ftpack 1632  
                       _SPIInt 1A2C            __end_of_ReceiveSPI1 1A2C               OpenSPI1@bus_mode 000F  
                    ??___ftmul 001D                      ??___fttol 002A               OpenSPI2@bus_mode 000F  
                    ??___lwdiv 0013                      ??___lwmod 0013               __end_of_setIODIR 19B2  
                       clear_0 19FE                    setIODIR@dir 0011                      ??_lcdChar 0013  
                    ??_lcdGoTo 0014                      ??_lcdInit 0014          ___ftmul@f3_as_product 0021  
                main@temporary 0069                      ??_setGPIO 0012                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
            ?_GenerateChecksum 0001                     __accesstop 0060        __end_of__initialization 1A04  
           ??_GenerateChecksum 000F             __size_of_WriteSPI1 0022                  ___rparam_used 000001  
                   ___ftmul@f1 0017                     ___ftmul@f2 001A                     ___fttol@f1 0026  
               __pcstackCOMRAM 0001              GenerateChecksum@y 0010   __size_of_SPIReassembleDouble 0044  
                  _ReceiveSPI1 1A1C               WriteSPI1@TempVar 000F                        ?_SPIInt 0001  
                    ?_SendSPI1 0001                 _LCDbreakDouble 121C                      ?_OpenSPI1 000F  
                    ?_OpenSPI2 000F                   ?_Delay10TCYx 0001                     _lcdCommand 1886  
                    ?___ftpack 000F              __end_of_WriteSPI1 1998                  _PIDEnableFlag 004E  
                      _SSP1BUF 000FC9                        _SSP2BUF 000F66                        _SPIInit 19E4  
                      _SPIflag 004F         __end_of_LCDbreakDouble 138E                      ?_setIODIR 0011  
                      _Command 004D                __size_of_SPIInt 0010                     ??_SendSPI1 000F  
                   ??_OpenSPI1 0011                     ??_OpenSPI2 0011                        __Hparam 0000  
                      __Lparam 0000                        ___ftmul 138E                        ___fttol 1486  
                      ___lwdiv 16A4                        ___lwmod 17AC                   __psmallconst 1000  
                   _dummy_byte 0050                   SendSPI1@data 0010                        __pcinit 19F8  
                   ??___ftpack 0014                Delay10TCYx@unit 000F                        _lcdChar 18CA  
                      __ramtop 1000                     _initialize 1A3C                        _lcdGoTo 1A4A  
                 SendSPI1@temp 000F                        _lcdInit 17F8                        __ptext0 1010  
                      __ptext1 1A3C                        __ptext2 17F8                        __ptext3 1998  
                      __ptext4 1700                        __ptext5 19E4                        __ptext6 1756  
                      __ptext7 19CC                        __ptext8 1842                        __ptext9 1908  
                 __size_of_ISR 169C                        _setGPIO 19B2  __size_of_SPIDisassembleDouble 003C  
              setIODIR@address 0012                   setGPIO@value 0011                 __pintcode_body 1632  
         end_of_initialization 1A04                ?_LCDbreakDouble 0060                     ??_setIODIR 0012  
                      int_func 1632              OpenSPI1@smp_phase 0010                     lcdGoTo@pos 0014  
            OpenSPI2@smp_phase 0010                    ?_lcdCommand 0001                        postinc0 000FEE  
            OpenSPI1@sync_mode 0011                      _PORTAbits 000F80                      _PORTCbits 000F82  
            OpenSPI2@sync_mode 0011                      _TRISAbits 000F92                      _TRISCbits 000F94  
                    _TRISDbits 000F95                      _TRISFbits 000F97            _SPIReassembleDouble 1842  
               __end_of_SPIInt 1A3C                    ___ftmul@exp 0020      __size_of_GenerateChecksum 0032  
         __size_of_Delay10TCYx 0012                    ?_initialize 0001           ?_SPIReassembleDouble 000F  
                    _DoublePtr 004B                  lcdChar@letter 0013            start_initialization 19F8  
              _CurrentVelocity 003C                   _CurrentAngle 0039                    __end_of_ISR 16A4  
          __size_of_lcdCommand 0044                   ?_ReceiveSPI1 0001                       ??_SPIInt 0001  
            __size_of_SendSPI1 0018              __size_of_OpenSPI1 0056              __size_of_OpenSPI2 0056  
        ??_SPIReassembleDouble 0012              __size_of___ftpack 00C6                    __pbssCOMRAM 0035  
                __pcstackBANK0 0060                      _WriteSPI1 1976                       ?_SPIInit 0001  
          __size_of_initialize 000E              WriteSPI1@data_out 0010         SPIReassembleDouble@dub 0012  
            __size_of_setIODIR 001A               ___lwdiv@dividend 000F                      __pintcode 0008  
                     ?___ftmul 0017                       ?___fttol 0026                       ?___lwdiv 000F  
                     ?___lwmod 000F                       ?_lcdChar 0001                       ?_lcdGoTo 0001  
                     ?_lcdInit 0001                    __smallconst 1000                       ?_setGPIO 0011  
                   ?_WriteSPI1 0001               ??_LCDbreakDouble 0035               ___lwdiv@quotient 0014  
                     _PIE3bits 000FA3   __end_of_SPIDisassembleDouble 1944                       _PIR1bits 000F9E  
                     _PIR3bits 000FA4                 setGPIO@address 0012                   ??_lcdCommand 0013  
                     _SSP1CON1 000FC6                       _SSP2CON1 000F63               _GenerateChecksum 1944  
                     _SSP1STAT 000FC7                       _SSP2STAT 000F64               __size_of_SPIInit 0014  
           __end_of_lcdCommand 18CA           __size_of_ReceiveSPI1 0010                       _SendSPI1 19CC  
                     _SetAngle 0048                       _OpenSPI1 1700                       _OpenSPI2 1756  
                     __Hrparam 0000                       __Lrparam 0000               __size_of___ftmul 00F8  
             __size_of___fttol 00E6               __size_of___lwdiv 005C               __size_of___lwmod 004C  
                 ??_initialize 0014                       ___ftpack 156C               __size_of_lcdChar 003E  
             __size_of_lcdGoTo 000C               __size_of_lcdInit 004A               __size_of_setGPIO 001A  
                  ??_WriteSPI1 000F                ___lwdiv@divisor 0011                ___lwdiv@counter 0013  
                     __ptext10 1944                       __ptext11 1A1C                       __ptext20 16A4  
                     __ptext12 121C                       __ptext21 1486                       __ptext13 1A4A  
                     __ptext22 138E                       __ptext14 1886                       __ptext23 156C  
                     __ptext15 18CA                       __ptext16 19B2                       __ptext25 1A2C  
                     __ptext17 1976                       __ptext18 1A0A                       __ptext19 17AC  
                 _SSP1CON1bits 000FC6                   _SSP2CON1bits 000F63                       _setIODIR 1998  
                __size_of_main 020C             __end_of_initialize 1A4A                  ??_Delay10TCYx 000F  
                 _SSP1STATbits 000FC7                   _SSP2STATbits 000F64                     _INTCONbits 000FF2  
         _SPIDisassembleDouble 1908                       intlevel2 0000               ___lwmod@dividend 000F  
  __end_of_SPIReassembleDouble 1886            __end_of_Delay10TCYx 1A1C                ___lwmod@divisor 0011  
              ___lwmod@counter 0013          ?_SPIDisassembleDouble 0011       __end_of_GenerateChecksum 1976  
      SPIDisassembleDouble@dub 0011  
