/* 
 * File:   SPIMaster.h
 * Author: raidenv
 *
 * Created on October 11, 2015, 7:28 PM
 */

#ifndef SPIMASTER_H
#define	SPIMASTER_H

#ifdef	__cplusplus
extern "C" {
#endif

#include <xc.h>
#include <spi.h>
#include <stdlib.h>
#include "KeyValue.h"
#include "SerComm.h"
#include <delays.h>

#define SlaveReady1 PORTBbits.RB1
#define SlaveReady2 PORTBbits.RB2
#define SlaveSelect1 PORTBbits.RB3
#define SlaveSelect2 PORTBbits.RB4

    extern double Kp;
    extern double Ki;
    extern double Kd;
    extern double CurrentAngle;
    extern double CurrentVelocity;
    extern double AZlast;
    extern double ELlast;
    extern unsigned char RCFlag;
    extern unsigned char ReceivedChar;
    extern unsigned char* DoublePtr; //Used to access a double at a particular memory address;
    extern unsigned char DoubleSPIM[4]; //A global array which holds all outgoing and incoming doubles before/after conversion into/from individual bytes;
    extern const unsigned int ReceiveLodeSize;
    extern const unsigned int DataLodeSize;
    extern unsigned char ReceiveLode[1809];
    extern double DataLode[603];

    /*
     * void SPIInitM(void):
     * Initializes the SPI module and it's required ports; 
     */
    void SPIInitM(void);

    /*
     * unsigned char MReceiveSPI(unsigned char):
     * Takes the Slave number (either 1 or 2) and returns a single character
     * received via SPI;
     */
    unsigned char MReceiveSPI(unsigned char);

    /*
     * void MReceiveStrSPI(unsigned char):
     * Takes the Slave number (which is then passed to the MReceiveSPI function
     * and receives the characteristic 4 byte double/checksum code from the
     * Slave via SPI;
     */
    void MReceiveStrSPI(unsigned char);

    /*
     * void MSendSPI(unsigned char, unsigned char):
     * Takes the character to send and the Slave number and transmits them via
     * SPI;
     */
    void MSendSPI(unsigned char, unsigned char);

    /*
     * double SPIReassembleDouble(void):
     * SPI communication is performed byte-wise.  This function reassembles the
     * double sent by the Slave into a readable double.  The double is returned;
     */
    double SPIReassembleDouble(void);

    /*
     * void SPIDisassembleDouble(double):
     * Takes a single double and converts it into three bytes;
     */
    void SPIDisassembleDouble(double);
    
    /*
     * void SPIReassembleLode(void):
     * Reassembles the entirety of the data sent from the Slave during a record
     * routine.  This simply encapsulates several hundred applications of the
     * SPIReassembleDouble function;  places the results in a global variable
     * to be utilized elsewhere;
     */
    void SPIReassembleLode(void);
    
    /*
     * void MReceiveLodeSPI(unsigned char):
     * Takes the Slave number and, much as the SPIReassembleLode, is simply 
     * a repeated application of the MReceiveSPI function; places the results
     * in a global variable to be utilized elsewhere;
     */
    void MReceiveLodeSPI(unsigned char);

    /*
     * void MSPIRoutine(unsigned char, unsigned char, double):
     * Takes the Slave number, the Key (a.k.a. the command issued by the Laptop),
     * and the Value (double) which is to be transmitted, and enters a decision
     * structure which dictates what to send to the slave;
     */
    void MSPIRoutine(unsigned char, unsigned char, double);
  
    /*
     * void MSPIRecRoutine(unsigned char, unsigned char):
     * Takes the Slave number, and the Key (which is a command generated by
     * receiving the string "rec" or "REC" from the laptop) and begins the
     * data recording routine on the slave;
     */
    void MSPIRecRoutine(unsigned char, unsigned char);

    
    /*
     * void RestartSPI(void):
     * 
     */
    void RestartSPI(void);
    void SelectSlaveStart(unsigned char);
    void SelectSlaveEnd(unsigned char);
    unsigned char SlaveQuery(unsigned char);

    unsigned char checksum(void);
    unsigned char MGenerateChecksum(void);


#ifdef	__cplusplus
}
#endif

#endif	/* SPIMASTER_H */

