

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 22 03:20:25 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  003245                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _AZEL
    75  003245  01                 	db	1
    76                           
    77                           	psect	idataBANK0
    78  003242                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _loopTime
    82                           ;PID.c: 6: unsigned char PIDEnableFlag;
    83                           ;PID.c: 7: double Ki;
    84                           ;PID.c: 8: double Kp;
    85                           ;PID.c: 9: double Kd;
    86                           ;PID.c: 10: double SetAngle;
    87                           ;PID.c: 11: double CurrentAngle;
    88                           ;PID.c: 12: double err;
    89                           ;PID.c: 13: double prevErr;
    90                           ;PID.c: 14: double intErr;
    91                           ;PID.c: 15: double StartAngle;
    92                           ;PID.c: 16: int motorInput;
    93  003242  C3                 	db	195
    94  003243  F5                 	db	245
    95  003244  3C                 	db	60
    96  0000                     _BAUDCON	set	3966
    97  0000                     _CCP3CON	set	4023
    98  0000                     _CCP3CONbits	set	4023
    99  0000                     _CCPR3L	set	4024
   100  0000                     _INTCONbits	set	4082
   101  0000                     _IPR1bits	set	3999
   102  0000                     _PIE1bits	set	3997
   103  0000                     _PIR1bits	set	3998
   104  0000                     _PORTAbits	set	3968
   105  0000                     _PORTD	set	3971
   106  0000                     _PORTEbits	set	3972
   107  0000                     _PORTH	set	3975
   108  0000                     _PORTJbits	set	3976
   109  0000                     _PR2	set	4043
   110  0000                     _RCONbits	set	4048
   111  0000                     _RCREG	set	4014
   112  0000                     _RCREG1	set	4014
   113  0000                     _RCSTA1	set	4011
   114  0000                     _SPBRG	set	4015
   115  0000                     _SSP1BUF	set	4041
   116  0000                     _SSP1CON1	set	4038
   117  0000                     _SSP1CON1bits	set	4038
   118  0000                     _SSP1STAT	set	4039
   119  0000                     _SSP1STATbits	set	4039
   120  0000                     _T0CON	set	4053
   121  0000                     _T0CONbits	set	4053
   122  0000                     _T2CON	set	4042
   123  0000                     _T3CON	set	4017
   124  0000                     _TMR0H	set	4055
   125  0000                     _TMR0L	set	4054
   126  0000                     _TRISAbits	set	3986
   127  0000                     _TRISBbits	set	3987
   128  0000                     _TRISCbits	set	3988
   129  0000                     _TRISD	set	3989
   130  0000                     _TRISEbits	set	3990
   131  0000                     _TRISFbits	set	3991
   132  0000                     _TRISGbits	set	3992
   133  0000                     _TRISH	set	3993
   134  0000                     _TRISJbits	set	3994
   135  0000                     _TXREG1	set	4013
   136  0000                     _TXSTA1	set	4012
   137                           
   138                           	psect	smallconst
   139  001000                     __psmallconst:
   140                           	opt stack 0
   141  001000  00                 	db	0
   142  001001                     STR_30:
   143  001001  57                 	db	87	;'W'
   144  001002  65                 	db	101	;'e'
   145  001003  6C                 	db	108	;'l'
   146  001004  63                 	db	99	;'c'
   147  001005  6F                 	db	111	;'o'
   148  001006  6D                 	db	109	;'m'
   149  001007  65                 	db	101	;'e'
   150  001008  20                 	db	32
   151  001009  74                 	db	116	;'t'
   152  00100A  6F                 	db	111	;'o'
   153  00100B  20                 	db	32
   154  00100C  74                 	db	116	;'t'
   155  00100D  68                 	db	104	;'h'
   156  00100E  65                 	db	101	;'e'
   157  00100F  20                 	db	32
   158  001010  77                 	db	119	;'w'
   159  001011  6F                 	db	111	;'o'
   160  001012  72                 	db	114	;'r'
   161  001013  6C                 	db	108	;'l'
   162  001014  64                 	db	100	;'d'
   163  001015  20                 	db	32
   164  001016  6F                 	db	111	;'o'
   165  001017  66                 	db	102	;'f'
   166  001018  20                 	db	32
   167  001019  74                 	db	116	;'t'
   168  00101A  6F                 	db	111	;'o'
   169  00101B  6D                 	db	109	;'m'
   170  00101C  6F                 	db	111	;'o'
   171  00101D  72                 	db	114	;'r'
   172  00101E  72                 	db	114	;'r'
   173  00101F  6F                 	db	111	;'o'
   174  001020  77                 	db	119	;'w'
   175  001021  21                 	db	33
   176  001022  21                 	db	33
   177  001023  21                 	db	33
   178  001024  00                 	db	0
   179  001025                     STR_4:
   180  001025  20                 	db	32
   181  001026  20                 	db	32
   182  001027  20                 	db	32
   183  001028  56                 	db	86	;'V'
   184  001029  61                 	db	97	;'a'
   185  00102A  6C                 	db	108	;'l'
   186  00102B  75                 	db	117	;'u'
   187  00102C  65                 	db	101	;'e'
   188  00102D  3A                 	db	58	;':'
   189  00102E  20                 	db	32
   190  00102F  00                 	db	0
   191  001030  38                 	db	56	;'8'
   192  001031  36                 	db	54	;'6'
   193  001032  38                 	db	56	;'8'
   194  001033  30                 	db	48	;'0'
   195  001034  3A                 	db	58	;':'
   196  001035  20                 	db	32
   197  001036  00                 	db	0
   198  001037  38                 	db	56	;'8'
   199  001038  37                 	db	55	;'7'
   200  001039  32                 	db	50	;'2'
   201  00103A  32                 	db	50	;'2'
   202  00103B  3A                 	db	58	;':'
   203  00103C  20                 	db	32
   204  00103D  00                 	db	0
   205  00103E                     STR_3:
   206  00103E  4B                 	db	75	;'K'
   207  00103F  65                 	db	101	;'e'
   208  001040  79                 	db	121	;'y'
   209  001041  3A                 	db	58	;':'
   210  001042  20                 	db	32
   211  001043  00                 	db	0
   212  001044                     STR_13:
   213  001044  3F                 	db	63	;'?'
   214  001045  3F                 	db	63	;'?'
   215  001046  3F                 	db	63	;'?'
   216  001047  00                 	db	0
   217  001048                     STR_21:
   218  001048  56                 	db	86	;'V'
   219  001049  45                 	db	69	;'E'
   220  00104A  4C                 	db	76	;'L'
   221  00104B  00                 	db	0
   222  00104C                     STR_5:
   223  00104C  50                 	db	80	;'P'
   224  00104D  4F                 	db	79	;'O'
   225  00104E  53                 	db	83	;'S'
   226  00104F  00                 	db	0
   227  001050                     STR_22:
   228  001050  76                 	db	118	;'v'
   229  001051  65                 	db	101	;'e'
   230  001052  6C                 	db	108	;'l'
   231  001053  00                 	db	0
   232  001054                     STR_6:
   233  001054  70                 	db	112	;'p'
   234  001055  6F                 	db	111	;'o'
   235  001056  73                 	db	115	;'s'
   236  001057  00                 	db	0
   237  001058                     STR_11:
   238  001058  4B                 	db	75	;'K'
   239  001059  44                 	db	68	;'D'
   240  00105A  00                 	db	0
   241  00105B                     STR_9:
   242  00105B  4B                 	db	75	;'K'
   243  00105C  49                 	db	73	;'I'
   244  00105D  00                 	db	0
   245  00105E                     STR_7:
   246  00105E  4B                 	db	75	;'K'
   247  00105F  50                 	db	80	;'P'
   248  001060  00                 	db	0
   249  001061                     STR_15:
   250  001061  41                 	db	65	;'A'
   251  001062  5A                 	db	90	;'Z'
   252  001063  00                 	db	0
   253  001064                     STR_12:
   254  001064  6B                 	db	107	;'k'
   255  001065  64                 	db	100	;'d'
   256  001066  00                 	db	0
   257  001067                     STR_10:
   258  001067  6B                 	db	107	;'k'
   259  001068  69                 	db	105	;'i'
   260  001069  00                 	db	0
   261  00106A                     STR_8:
   262  00106A  6B                 	db	107	;'k'
   263  00106B  70                 	db	112	;'p'
   264  00106C  00                 	db	0
   265  00106D                     STR_16:
   266  00106D  61                 	db	97	;'a'
   267  00106E  7A                 	db	122	;'z'
   268  00106F  00                 	db	0
   269  0000                     
   270                           ; #config settings
   271  001070  00                 	db	0	; dummy byte at the end
   272  0000                     
   273                           	psect	cinit
   274  002DDE                     __pcinit:
   275                           	opt stack 0
   276  002DDE                     start_initialization:
   277                           	opt stack 0
   278  002DDE                     __initialization:
   279                           	opt stack 0
   280                           
   281                           ; Clear objects allocated to BANK0 (75 bytes)
   282  002DDE  EE00  F060         	lfsr	0,__pbssBANK0
   283  002DE2  0E4B               	movlw	75
   284  002DE4                     clear_0:
   285  002DE4  6AEE               	clrf	postinc0,c
   286  002DE6  06E8               	decf	wreg,f,c
   287  002DE8  E1FD               	bnz	clear_0
   288                           
   289                           ; Clear objects allocated to COMRAM (8 bytes)
   290  002DEA  EE00  F057         	lfsr	0,__pbssCOMRAM
   291  002DEE  0E08               	movlw	8
   292  002DF0                     clear_1:
   293  002DF0  6AEE               	clrf	postinc0,c
   294  002DF2  06E8               	decf	wreg,f,c
   295  002DF4  E1FD               	bnz	clear_1
   296                           
   297                           ; Initialize objects allocated to BANK0 (3 bytes)
   298                           ; load TBLPTR registers with __pidataBANK0
   299  002DF6  0E42               	movlw	low __pidataBANK0
   300  002DF8  6EF6               	movwf	tblptrl,c
   301  002DFA  0E32               	movlw	high __pidataBANK0
   302  002DFC  6EF7               	movwf	tblptrh,c
   303  002DFE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   304  002E00  6EF8               	movwf	tblptru,c
   305  002E02  0009               	tblrd		*+	;fetch initializer
   306  002E04  CFF5 F0BE          	movff	tablat,__pdataBANK0
   307  002E08  0009               	tblrd		*+	;fetch initializer
   308  002E0A  CFF5 F0BF          	movff	tablat,__pdataBANK0+1
   309  002E0E  0009               	tblrd		*+	;fetch initializer
   310  002E10  CFF5 F0C0          	movff	tablat,__pdataBANK0+2
   311                           
   312                           ; Initialize objects allocated to COMRAM (1 bytes)
   313                           ; load TBLPTR registers with __pidataCOMRAM
   314  002E14  0E45               	movlw	low __pidataCOMRAM
   315  002E16  6EF6               	movwf	tblptrl,c
   316  002E18  0E32               	movlw	high __pidataCOMRAM
   317  002E1A  6EF7               	movwf	tblptrh,c
   318  002E1C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   319  002E1E  6EF8               	movwf	tblptru,c
   320  002E20  0009               	tblrd		*+	;fetch initializer
   321  002E22  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   322  002E26                     end_of_initialization:
   323                           	opt stack 0
   324  002E26                     __end_of__initialization:
   325                           	opt stack 0
   326  002E26  0100               	movlb	0
   327  002E28  EF8D  F018         	goto	_main	;jump to C main() function
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	bssCOMRAM
   336  000057                     __pbssCOMRAM:
   337                           	opt stack 0
   338  000057                     _StartAngle:
   339                           	opt stack 0
   340  000057                     	ds	3
   341  00005A                     _err:
   342                           	opt stack 0
   343  00005A                     	ds	3
   344  00005D                     _PIDEnableFlag:
   345                           	opt stack 0
   346  00005D                     	ds	1
   347  00005E                     _StrippedKey:
   348                           	opt stack 0
   349  00005E                     	ds	1
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	dataCOMRAM
   358  00005F                     __pdataCOMRAM:
   359                           	opt stack 0
   360  00005F                     _AZEL:
   361                           	opt stack 0
   362  00005F                     	ds	1
   363                           tblptru	equ	0xFF8
   364                           tblptrh	equ	0xFF7
   365                           tblptrl	equ	0xFF6
   366                           tablat	equ	0xFF5
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           
   370                           	psect	bssBANK0
   371  000060                     __pbssBANK0:
   372                           	opt stack 0
   373  000060                     _CurrentAngle:
   374                           	opt stack 0
   375  000060                     	ds	3
   376  000063                     _CurrentVelocity:
   377                           	opt stack 0
   378  000063                     	ds	3
   379  000066                     _Kd:
   380                           	opt stack 0
   381  000066                     	ds	3
   382  000069                     _Ki:
   383                           	opt stack 0
   384  000069                     	ds	3
   385  00006C                     _Kp:
   386                           	opt stack 0
   387  00006C                     	ds	3
   388  00006F                     _SetAngle:
   389                           	opt stack 0
   390  00006F                     	ds	3
   391  000072                     _StrippedValue:
   392                           	opt stack 0
   393  000072                     	ds	3
   394  000075                     _intErr:
   395                           	opt stack 0
   396  000075                     	ds	3
   397  000078                     _prevErr:
   398                           	opt stack 0
   399  000078                     	ds	3
   400  00007B                     _motorInput:
   401                           	opt stack 0
   402  00007B                     	ds	2
   403  00007D                     _RCflag:
   404                           	opt stack 0
   405  00007D                     	ds	1
   406  00007E                     _received:
   407                           	opt stack 0
   408  00007E                     	ds	30
   409  00009C                     _value:
   410                           	opt stack 0
   411  00009C                     	ds	10
   412  0000A6                     _key:
   413                           	opt stack 0
   414  0000A6                     	ds	5
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           
   422                           	psect	dataBANK0
   423  0000BE                     __pdataBANK0:
   424                           	opt stack 0
   425  0000BE                     _loopTime:
   426                           	opt stack 0
   427  0000BE                     	ds	3
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           
   435                           	psect	cstackBANK0
   436  0000AB                     __pcstackBANK0:
   437                           	opt stack 0
   438  0000AB                     ??_ISR:
   439                           
   440                           ; 0 bytes @ 0x0
   441  0000AB                     	ds	14
   442  0000B9                     SerTx@c:
   443                           	opt stack 0
   444  0000B9                     OpenSPI1@bus_mode:
   445                           	opt stack 0
   446  0000B9                     WriteSPI1@TempVar:
   447                           	opt stack 0
   448  0000B9                     Delay10TCYx@unit:
   449                           	opt stack 0
   450  0000B9                     Delay1KTCYx@unit:
   451                           	opt stack 0
   452  0000B9                     Delay1TCYx@unit:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xE
   456  0000B9                     	ds	1
   457  0000BA                     OpenSPI1@smp_phase:
   458                           	opt stack 0
   459  0000BA                     WriteSPI1@data_out:
   460                           	opt stack 0
   461  0000BA                     SerTxStr@string:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0xF
   465  0000BA                     	ds	1
   466  0000BB                     setGPIO@value:
   467                           	opt stack 0
   468  0000BB                     setIODIR@dir:
   469                           	opt stack 0
   470  0000BB                     OpenSPI1@sync_mode:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x10
   474  0000BB                     	ds	1
   475  0000BC                     setGPIO@address:
   476                           	opt stack 0
   477  0000BC                     setIODIR@address:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x11
   481  0000BC                     	ds	1
   482  0000BD                     lcdCommand@command:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x12
   486  0000BD                     	ds	1
   487  0000BE                     tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           
   494                           ; 0 bytes @ 0x13
   495                           
   496                           	psect	cstackCOMRAM
   497  000001                     __pcstackCOMRAM:
   498                           	opt stack 0
   499  000001                     ??_isspace:
   500  000001                     ??_isdigit:
   501  000001                     ?_abs:
   502                           	opt stack 0
   503  000001                     ?_strcmp:
   504                           	opt stack 0
   505  000001                     ?___lwdiv:
   506                           	opt stack 0
   507  000001                     ?___lwmod:
   508                           	opt stack 0
   509  000001                     ?___ftpack:
   510                           	opt stack 0
   511  000001                     ?___ftneg:
   512                           	opt stack 0
   513  000001                     ?___lmul:
   514                           	opt stack 0
   515  000001                     i2SerTx@c:
   516                           	opt stack 0
   517  000001                     i2WriteSPI1@TempVar:
   518                           	opt stack 0
   519  000001                     i2Delay10TCYx@unit:
   520                           	opt stack 0
   521  000001                     abs@a:
   522                           	opt stack 0
   523  000001                     ___lwdiv@dividend:
   524                           	opt stack 0
   525  000001                     ___lwmod@dividend:
   526                           	opt stack 0
   527  000001                     strcmp@s1:
   528                           	opt stack 0
   529  000001                     ___ftpack@arg:
   530                           	opt stack 0
   531  000001                     ___ftneg@f1:
   532                           	opt stack 0
   533  000001                     ___lmul@multiplier:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x0
   537  000001                     	ds	1
   538  000002                     ?_ReadRTDpos:
   539                           	opt stack 0
   540  000002                     _isdigit$2268:
   541                           	opt stack 0
   542  000002                     _isspace$2271:
   543                           	opt stack 0
   544  000002                     i2WriteSPI1@data_out:
   545                           	opt stack 0
   546  000002                     i2SerTxStr@string:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x1
   550  000002                     	ds	1
   551  000003                     ??_abs:
   552  000003                     isdigit@c:
   553                           	opt stack 0
   554  000003                     isspace@c:
   555                           	opt stack 0
   556  000003                     i2setGPIO@value:
   557                           	opt stack 0
   558  000003                     ___lwdiv@divisor:
   559                           	opt stack 0
   560  000003                     ___lwmod@divisor:
   561                           	opt stack 0
   562  000003                     strcmp@s2:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x2
   566  000003                     	ds	1
   567  000004                     ??_ReadRTDpos:
   568  000004                     ___ftpack@exp:
   569                           	opt stack 0
   570  000004                     i2setGPIO@address:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x3
   574  000004                     	ds	1
   575  000005                     ??_strcmp:
   576  000005                     lcdChar@letter:
   577                           	opt stack 0
   578  000005                     ___ftpack@sign:
   579                           	opt stack 0
   580  000005                     ___lwmod@counter:
   581                           	opt stack 0
   582  000005                     i2lcdCommand@command:
   583                           	opt stack 0
   584  000005                     ImplementPIDMotion@PIDValue:
   585                           	opt stack 0
   586  000005                     ___lwdiv@quotient:
   587                           	opt stack 0
   588  000005                     ___lmul@multiplicand:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0x4
   592  000005                     	ds	1
   593  000006                     ??___ftpack:
   594  000006                     lcdGoTo@pos:
   595                           	opt stack 0
   596  000006                     strcmp@r:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x5
   600  000006                     	ds	1
   601  000007                     ??_ImplementPIDMotion:
   602  000007                     ReadRTDpos@HighPosition:
   603                           	opt stack 0
   604  000007                     ___lwdiv@counter:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x6
   608  000007                     	ds	1
   609  000008                     ReadRTDpos@LowPosition:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x7
   613  000008                     	ds	1
   614  000009                     ?___ftdiv:
   615                           	opt stack 0
   616  000009                     ?___altoft:
   617                           	opt stack 0
   618  000009                     ?___lwtoft:
   619                           	opt stack 0
   620  000009                     ReadRTDpos@FullPosition:
   621                           	opt stack 0
   622  000009                     ___lwtoft@c:
   623                           	opt stack 0
   624  000009                     ___ftdiv@f1:
   625                           	opt stack 0
   626  000009                     ___lmul@product:
   627                           	opt stack 0
   628  000009                     ___altoft@c:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x8
   632  000009                     	ds	2
   633  00000B                     ReadRTDpos@x:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0xA
   637  00000B                     	ds	1
   638  00000C                     ___ftdiv@f2:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0xB
   642  00000C                     	ds	1
   643  00000D                     ??___altoft:
   644                           
   645                           ; 0 bytes @ 0xC
   646  00000D                     	ds	2
   647  00000F                     ??___ftdiv:
   648                           
   649                           ; 0 bytes @ 0xE
   650  00000F                     	ds	2
   651  000011                     ___altoft@exp:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x10
   655  000011                     	ds	1
   656  000012                     ___altoft@sign:
   657                           	opt stack 0
   658  000012                     ___ftdiv@cntr:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x11
   662  000012                     	ds	1
   663  000013                     ___ftdiv@f3:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x12
   667  000013                     	ds	3
   668  000016                     ___ftdiv@exp:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x15
   672  000016                     	ds	1
   673  000017                     ___ftdiv@sign:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x16
   677  000017                     	ds	1
   678  000018                     ?___ftmul:
   679                           	opt stack 0
   680  000018                     ___ftmul@f1:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x17
   684  000018                     	ds	3
   685  00001B                     ___ftmul@f2:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x1A
   689  00001B                     	ds	3
   690  00001E                     ??___ftmul:
   691                           
   692                           ; 0 bytes @ 0x1D
   693  00001E                     	ds	3
   694  000021                     ___ftmul@exp:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x20
   698  000021                     	ds	1
   699  000022                     ___ftmul@f3_as_product:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0x21
   703  000022                     	ds	3
   704  000025                     ___ftmul@cntr:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x24
   708  000025                     	ds	1
   709  000026                     ___ftmul@sign:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x25
   713  000026                     	ds	1
   714  000027                     ?_RTD2Angle:
   715                           	opt stack 0
   716  000027                     ?___ftadd:
   717                           	opt stack 0
   718  000027                     RTD2Angle@RTDAngle:
   719                           	opt stack 0
   720  000027                     ___ftadd@f1:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x26
   724  000027                     	ds	3
   725  00002A                     ___ftadd@f2:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x29
   729  00002A                     	ds	3
   730  00002D                     ??___ftadd:
   731                           
   732                           ; 0 bytes @ 0x2C
   733  00002D                     	ds	3
   734  000030                     ___ftadd@sign:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x2F
   738  000030                     	ds	1
   739  000031                     ___ftadd@exp2:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x30
   743  000031                     	ds	1
   744  000032                     ___ftadd@exp1:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x31
   748  000032                     	ds	1
   749  000033                     ?___fttol:
   750                           	opt stack 0
   751  000033                     ___ftge@ff1:
   752                           	opt stack 0
   753  000033                     ___fttol@f1:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x32
   757  000033                     	ds	3
   758  000036                     ___ftge@ff2:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x35
   762  000036                     	ds	1
   763  000037                     ??___fttol:
   764                           
   765                           ; 0 bytes @ 0x36
   766  000037                     	ds	2
   767  000039                     ??___ftge:
   768                           
   769                           ; 0 bytes @ 0x38
   770  000039                     	ds	3
   771  00003C                     ?_strtod:
   772                           	opt stack 0
   773  00003C                     ___fttol@sign1:
   774                           	opt stack 0
   775  00003C                     strtod@s:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x3B
   779  00003C                     	ds	1
   780  00003D                     ___fttol@lval:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x3C
   784  00003D                     	ds	1
   785  00003E                     strtod@res:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x3D
   789  00003E                     	ds	2
   790  000040                     ??_strtod:
   791                           
   792                           ; 0 bytes @ 0x3F
   793  000040                     	ds	1
   794  000041                     strtod@eexp:
   795                           	opt stack 0
   796  000041                     ___fttol@exp1:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x40
   800  000041                     	ds	1
   801  000042                     strtod@flags:
   802                           	opt stack 0
   803  000042                     LCDBreakDouble@dubs:
   804                           	opt stack 0
   805  000042                     calculatePID@angle:
   806                           	opt stack 0
   807                           
   808                           ; 3 bytes @ 0x41
   809  000042                     	ds	1
   810  000043                     strtod@expon:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x42
   814  000043                     	ds	1
   815  000044                     strtod@_u:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x43
   819  000044                     	ds	1
   820  000045                     LCDBreakDouble@tempDub:
   821                           	opt stack 0
   822  000045                     calculatePID@setpoint:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x44
   826  000045                     	ds	2
   827  000047                     LCDBreakDouble@temp1:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x46
   831  000047                     	ds	1
   832  000048                     keyValue@str:
   833                           	opt stack 0
   834  000048                     calculatePID@derErr:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0x47
   838  000048                     	ds	1
   839  000049                     LCDBreakDouble@temp2:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x48
   843  000049                     	ds	1
   844  00004A                     keyValue@length:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x49
   848  00004A                     	ds	1
   849  00004B                     _calculatePID$2554:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x4A
   853  00004B                     	ds	1
   854  00004C                     ??_keyValue:
   855                           
   856                           ; 0 bytes @ 0x4B
   857  00004C                     	ds	2
   858  00004E                     keyValue@str_end:
   859                           	opt stack 0
   860  00004E                     _calculatePID$2555:
   861                           	opt stack 0
   862                           
   863                           ; 3 bytes @ 0x4D
   864  00004E                     	ds	2
   865  000050                     keyValue@flag:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x4F
   869  000050                     	ds	1
   870  000051                     keyValue@y:
   871                           	opt stack 0
   872  000051                     _calculatePID$2553:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x50
   876  000051                     	ds	1
   877  000052                     keyValue@x:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x51
   881  000052                     	ds	1
   882  000053                     
   883                           ; 0 bytes @ 0x52
   884  000053                     	ds	1
   885  000054                     RCInt@counter:
   886                           	opt stack 0
   887  000054                     TMR0Int@currentAngle:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x53
   891  000054                     	ds	3
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           
   899 ;;
   900 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   901 ;;
   902 ;; *************** function _main *****************
   903 ;; Defined at:
   904 ;;		line 15 in file "PIDLoop.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;		None               void
   911 ;; Registers used:
   912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels required when called:   12
   924 ;; This function calls:
   925 ;;		_initialize
   926 ;; This function is called by:
   927 ;;		Startup code after reset
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text0
   932  00311A                     __ptext0:
   933                           	opt stack 0
   934  00311A                     _main:
   935                           	opt stack 19
   936                           
   937                           ;PIDLoop.c: 17: initialize();
   938                           
   939                           ;incstack = 0
   940  00311A  ECCB  F018         	call	_initialize	;wreg free
   941  00311E  D000               	goto	l3706
   942  003120                     l3706:
   943                           
   944                           ;PIDLoop.c: 20: {
   945                           ;PIDLoop.c: 21: if (PIDEnableFlag == 3)
   946  003120  0E03               	movlw	3
   947  003122  185D               	xorwf	_PIDEnableFlag,w,c
   948  003124  A4D8               	btfss	status,2,c
   949  003126  D7FC               	goto	l3706
   950                           
   951                           ;PIDLoop.c: 22: {
   952                           ;PIDLoop.c: 23: TMR0H = 0xDB;
   953  003128  0EDB               	movlw	219
   954  00312A  6ED7               	movwf	4055,c	;volatile
   955                           
   956                           ;PIDLoop.c: 24: TMR0L = 0x60;
   957  00312C  0E60               	movlw	96
   958  00312E  6ED6               	movwf	4054,c	;volatile
   959                           
   960                           ;PIDLoop.c: 25: INTCONbits.TMR0IE = 1;
   961  003130  8AF2               	bsf	intcon,5,c	;volatile
   962                           
   963                           ;PIDLoop.c: 26: T0CONbits.TMR0ON = 1;
   964  003132  8ED5               	bsf	4053,7,c	;volatile
   965  003134  D7F5               	goto	l3706
   966  003136  EF0C  F000         	goto	start
   967  00313A                     __end_of_main:
   968                           	opt stack 0
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           intcon	equ	0xFF2
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _initialize *****************
   979 ;; Defined at:
   980 ;;		line 33 in file "PIDLoop.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;		None               void
   987 ;; Registers used:
   988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:   11
  1001 ;; This function calls:
  1002 ;;		_MotorDriverInit
  1003 ;;		_PIDInit
  1004 ;;		_RTDInit
  1005 ;;		_SerInit
  1006 ;;		_lcdInit
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text1
  1013  003196                     __ptext1:
  1014                           	opt stack 0
  1015  003196                     _initialize:
  1016                           	opt stack 19
  1017                           
  1018                           ;PIDLoop.c: 35: RTDInit();
  1019                           
  1020                           ;incstack = 0
  1021  003196  ECDE  F017         	call	_RTDInit	;wreg free
  1022                           
  1023                           ;PIDLoop.c: 36: PIDInit();
  1024  00319A  EC84  F017         	call	_PIDInit	;wreg free
  1025                           
  1026                           ;PIDLoop.c: 37: MotorDriverInit();
  1027  00319E  ECBD  F018         	call	_MotorDriverInit	;wreg free
  1028                           
  1029                           ;PIDLoop.c: 38: SerInit();
  1030  0031A2  EC0C  F018         	call	_SerInit	;wreg free
  1031                           
  1032                           ;PIDLoop.c: 39: lcdInit();
  1033  0031A6  EC9B  F016         	call	_lcdInit	;wreg free
  1034                           
  1035                           ;PIDLoop.c: 41: INTCONbits.GIE = 1;
  1036  0031AA  8EF2               	bsf	intcon,7,c	;volatile
  1037                           
  1038                           ;PIDLoop.c: 42: INTCONbits.PEIE = 1;
  1039  0031AC  8CF2               	bsf	intcon,6,c	;volatile
  1040  0031AE  0012               	return		;funcret
  1041  0031B0                     __end_of_initialize:
  1042                           	opt stack 0
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           intcon	equ	0xFF2
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _lcdInit *****************
  1053 ;; Defined at:
  1054 ;;		line 112 in file "LCD.h"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;		None               void
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:   10
  1075 ;; This function calls:
  1076 ;;		_OpenSPI1
  1077 ;;		_lcdCommand
  1078 ;;		_setGPIO
  1079 ;;		_setIODIR
  1080 ;; This function is called by:
  1081 ;;		_initialize
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text2
  1086  002D36                     __ptext2:
  1087                           	opt stack 0
  1088  002D36                     _lcdInit:
  1089                           	opt stack 19
  1090                           
  1091                           ;LCD.h: 114: TRISAbits.RA2=0;
  1092                           
  1093                           ;incstack = 0
  1094  002D36  9492               	bcf	3986,2,c	;volatile
  1095                           
  1096                           ;LCD.h: 115: PORTAbits.RA2=1;
  1097  002D38  8480               	bsf	3968,2,c	;volatile
  1098                           
  1099                           ;LCD.h: 117: OpenSPI1(0b00000010, 0b00000010, 0b10000000);
  1100  002D3A  0E02               	movlw	2
  1101  002D3C  0100               	movlb	0	; () banked
  1102  002D3E  6FB9               	movwf	OpenSPI1@bus_mode& (0+255),b
  1103  002D40  0E80               	movlw	128
  1104  002D42  0100               	movlb	0	; () banked
  1105  002D44  6FBA               	movwf	OpenSPI1@smp_phase& (0+255),b
  1106  002D46  0E02               	movlw	2
  1107  002D48  EC2D  F015         	call	_OpenSPI1
  1108                           
  1109                           ;LCD.h: 119: setIODIR(0x01,0x00);
  1110  002D4C  0E00               	movlw	0
  1111  002D4E  0100               	movlb	0	; () banked
  1112  002D50  6FBB               	movwf	setIODIR@dir& (0+255),b
  1113  002D52  0E01               	movlw	1
  1114  002D54  EC9D  F018         	call	_setIODIR
  1115                           
  1116                           ;LCD.h: 121: setIODIR(0x00,0x00);
  1117  002D58  0E00               	movlw	0
  1118  002D5A  0100               	movlb	0	; () banked
  1119  002D5C  6FBB               	movwf	setIODIR@dir& (0+255),b
  1120  002D5E  0E00               	movlw	0
  1121  002D60  EC9D  F018         	call	_setIODIR
  1122                           
  1123                           ;LCD.h: 123: setGPIO(0x00,0x00);
  1124  002D64  0E00               	movlw	0
  1125  002D66  0100               	movlb	0	; () banked
  1126  002D68  6FBB               	movwf	setGPIO@value& (0+255),b
  1127  002D6A  0E00               	movlw	0
  1128  002D6C  ECAD  F018         	call	_setGPIO
  1129                           
  1130                           ;LCD.h: 125: lcdCommand(0b00111111);
  1131  002D70  0E3F               	movlw	63
  1132  002D72  EC16  F017         	call	_lcdCommand
  1133                           
  1134                           ;LCD.h: 127: lcdCommand(0b00001111);
  1135  002D76  0E0F               	movlw	15
  1136  002D78  EC16  F017         	call	_lcdCommand
  1137                           
  1138                           ;LCD.h: 129: lcdCommand(0b00000001);
  1139  002D7C  0E01               	movlw	1
  1140  002D7E  EC16  F017         	call	_lcdCommand
  1141                           
  1142                           ;LCD.h: 131: lcdCommand(0b00000110);
  1143  002D82  0E06               	movlw	6
  1144  002D84  EC16  F017         	call	_lcdCommand
  1145  002D88  0012               	return		;funcret
  1146  002D8A                     __end_of_lcdInit:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           intcon	equ	0xFF2
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           status	equ	0xFD8
  1156                           
  1157 ;; *************** function _setIODIR *****************
  1158 ;; Defined at:
  1159 ;;		line 45 in file "LCD.h"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  address         1    wreg     unsigned char 
  1162 ;;  dir             1   16[BANK0 ] unsigned char 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  address         1   17[BANK0 ] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;		None               void
  1167 ;; Registers used:
  1168 ;;		wreg, status,2, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1174 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;Total ram usage:        2 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    8
  1181 ;; This function calls:
  1182 ;;		_WriteSPI1
  1183 ;; This function is called by:
  1184 ;;		_lcdInit
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text3
  1189  00313A                     __ptext3:
  1190                           	opt stack 0
  1191  00313A                     _setIODIR:
  1192                           	opt stack 20
  1193                           
  1194                           ;incstack = 0
  1195                           ;setIODIR@address stored from wreg
  1196  00313A  0100               	movlb	0	; () banked
  1197  00313C  6FBC               	movwf	setIODIR@address& (0+255),b
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;LCD.h: 47: PORTAbits.RA2=0;
  1201  00313E  9480               	bcf	3968,2,c	;volatile
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;LCD.h: 48: WriteSPI1(0x40);
  1205  003140  0E40               	movlw	64
  1206  003142  EC47  F018         	call	_WriteSPI1
  1207                           
  1208                           ;LCD.h: 49: WriteSPI1(address);
  1209  003146  0100               	movlb	0	; () banked
  1210  003148  51BC               	movf	setIODIR@address& (0+255),w,b
  1211  00314A  EC47  F018         	call	_WriteSPI1
  1212                           
  1213                           ;LCD.h: 50: WriteSPI1(dir);
  1214  00314E  0100               	movlb	0	; () banked
  1215  003150  51BB               	movf	setIODIR@dir& (0+255),w,b
  1216  003152  EC47  F018         	call	_WriteSPI1
  1217                           
  1218                           ;LCD.h: 51: PORTAbits.RA2=1;
  1219  003156  8480               	bsf	3968,2,c	;volatile
  1220  003158  0012               	return		;funcret
  1221  00315A                     __end_of_setIODIR:
  1222                           	opt stack 0
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           intcon	equ	0xFF2
  1228                           postinc0	equ	0xFEE
  1229                           wreg	equ	0xFE8
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function _lcdCommand *****************
  1233 ;; Defined at:
  1234 ;;		line 54 in file "LCD.h"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  command         1    wreg     unsigned char 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  command         1   18[BANK0 ] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;		None               void
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    9
  1255 ;; This function calls:
  1256 ;;		_Delay10TCYx
  1257 ;;		_setGPIO
  1258 ;; This function is called by:
  1259 ;;		_lcdInit
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text4
  1264  002E2C                     __ptext4:
  1265                           	opt stack 0
  1266  002E2C                     _lcdCommand:
  1267                           	opt stack 19
  1268                           
  1269                           ;incstack = 0
  1270                           ;lcdCommand@command stored from wreg
  1271  002E2C  0100               	movlb	0	; () banked
  1272  002E2E  6FBD               	movwf	lcdCommand@command& (0+255),b
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;LCD.h: 56: setGPIO(0x12,0x00);
  1276  002E30  0E00               	movlw	0
  1277  002E32  0100               	movlb	0	; () banked
  1278  002E34  6FBB               	movwf	setGPIO@value& (0+255),b
  1279  002E36  0E12               	movlw	18
  1280  002E38  ECAD  F018         	call	_setGPIO
  1281                           
  1282                           ;LCD.h: 57: Delay10TCYx(0);
  1283  002E3C  0E00               	movlw	0
  1284  002E3E  ECF0  F018         	call	_Delay10TCYx
  1285                           
  1286                           ;LCD.h: 58: setGPIO(0x13, command);
  1287  002E42  C0BD  F0BB         	movff	lcdCommand@command,setGPIO@value
  1288  002E46  0E13               	movlw	19
  1289  002E48  ECAD  F018         	call	_setGPIO
  1290                           
  1291                           ;LCD.h: 59: Delay10TCYx(0);
  1292  002E4C  0E00               	movlw	0
  1293  002E4E  ECF0  F018         	call	_Delay10TCYx
  1294                           
  1295                           ;LCD.h: 60: setGPIO(0x12,0x40);
  1296  002E52  0E40               	movlw	64
  1297  002E54  0100               	movlb	0	; () banked
  1298  002E56  6FBB               	movwf	setGPIO@value& (0+255),b
  1299  002E58  0E12               	movlw	18
  1300  002E5A  ECAD  F018         	call	_setGPIO
  1301                           
  1302                           ;LCD.h: 61: Delay10TCYx(0);
  1303  002E5E  0E00               	movlw	0
  1304  002E60  ECF0  F018         	call	_Delay10TCYx
  1305                           
  1306                           ;LCD.h: 62: setGPIO(0x12,0x00);
  1307  002E64  0E00               	movlw	0
  1308  002E66  0100               	movlb	0	; () banked
  1309  002E68  6FBB               	movwf	setGPIO@value& (0+255),b
  1310  002E6A  0E12               	movlw	18
  1311  002E6C  ECAD  F018         	call	_setGPIO
  1312                           
  1313                           ;LCD.h: 63: Delay10TCYx(0);
  1314  002E70  0E00               	movlw	0
  1315  002E72  ECF0  F018         	call	_Delay10TCYx
  1316  002E76  0012               	return		;funcret
  1317  002E78                     __end_of_lcdCommand:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           intcon	equ	0xFF2
  1324                           postinc0	equ	0xFEE
  1325                           wreg	equ	0xFE8
  1326                           status	equ	0xFD8
  1327                           
  1328 ;; *************** function _setGPIO *****************
  1329 ;; Defined at:
  1330 ;;		line 34 in file "LCD.h"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  address         1    wreg     unsigned char 
  1333 ;;  value           1   16[BANK0 ] unsigned char 
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  address         1   17[BANK0 ] unsigned char 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;		None               void
  1338 ;; Registers used:
  1339 ;;		wreg, status,2, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1345 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;Total ram usage:        2 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    8
  1352 ;; This function calls:
  1353 ;;		_WriteSPI1
  1354 ;; This function is called by:
  1355 ;;		_lcdCommand
  1356 ;;		_lcdInit
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text5
  1361  00315A                     __ptext5:
  1362                           	opt stack 0
  1363  00315A                     _setGPIO:
  1364                           	opt stack 20
  1365                           
  1366                           ;incstack = 0
  1367                           ;setGPIO@address stored from wreg
  1368  00315A  0100               	movlb	0	; () banked
  1369  00315C  6FBC               	movwf	setGPIO@address& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;LCD.h: 36: PORTAbits.RA2=0;
  1373  00315E  9480               	bcf	3968,2,c	;volatile
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;LCD.h: 39: WriteSPI1(0x40);
  1377  003160  0E40               	movlw	64
  1378  003162  EC47  F018         	call	_WriteSPI1
  1379                           
  1380                           ;LCD.h: 40: WriteSPI1(address);
  1381  003166  0100               	movlb	0	; () banked
  1382  003168  51BC               	movf	setGPIO@address& (0+255),w,b
  1383  00316A  EC47  F018         	call	_WriteSPI1
  1384                           
  1385                           ;LCD.h: 41: WriteSPI1(value);
  1386  00316E  0100               	movlb	0	; () banked
  1387  003170  51BB               	movf	setGPIO@value& (0+255),w,b
  1388  003172  EC47  F018         	call	_WriteSPI1
  1389                           
  1390                           ;LCD.h: 42: PORTAbits.RA2=1;
  1391  003176  8480               	bsf	3968,2,c	;volatile
  1392  003178  0012               	return		;funcret
  1393  00317A                     __end_of_setGPIO:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           intcon	equ	0xFF2
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _WriteSPI1 *****************
  1405 ;; Defined at:
  1406 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1writ.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  data_out        1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  data_out        1   15[BANK0 ] unsigned char 
  1411 ;;  TempVar         1   14[BANK0 ] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      char 
  1414 ;; Registers used:
  1415 ;;		wreg
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;Total ram usage:        2 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    7
  1428 ;; This function calls:
  1429 ;;		Nothing
  1430 ;; This function is called by:
  1431 ;;		_setGPIO
  1432 ;;		_setIODIR
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text6
  1437  00308E                     __ptext6:
  1438                           	opt stack 0
  1439  00308E                     _WriteSPI1:
  1440                           	opt stack 20
  1441                           
  1442                           ;incstack = 0
  1443                           ;WriteSPI1@data_out stored from wreg
  1444  00308E  0100               	movlb	0	; () banked
  1445  003090  6FBA               	movwf	WriteSPI1@data_out& (0+255),b
  1446                           
  1447                           ; BSR set to: 0
  1448  003092  CFC9 F0B9          	movff	4041,WriteSPI1@TempVar	;volatile
  1449  003096  969E               	bcf	3998,3,c	;volatile
  1450  003098  9EC6               	bcf	4038,7,c	;volatile
  1451                           
  1452                           ; BSR set to: 0
  1453  00309A  C0BA  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  1454                           
  1455                           ; BSR set to: 0
  1456  00309E  BEC6               	btfsc	4038,7,c	;volatile
  1457  0030A0  D007               	goto	l476
  1458  0030A2  D002               	goto	l478
  1459                           
  1460                           ; BSR set to: 0
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;	Return value of _WriteSPI1 is never used
  1464  0030A4  D005               	goto	l476
  1465                           
  1466                           ; BSR set to: 0
  1467  0030A6  D000               	goto	l478
  1468  0030A8                     l478:
  1469  0030A8  B69E               	btfsc	3998,3,c	;volatile
  1470  0030AA  D002               	goto	l476
  1471  0030AC  D7FD               	goto	l478
  1472  0030AE  D000               	goto	l476
  1473  0030B0                     l476:
  1474  0030B0  0012               	return		;funcret
  1475  0030B2                     __end_of_WriteSPI1:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           intcon	equ	0xFF2
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           status	equ	0xFD8
  1485                           
  1486 ;; *************** function _OpenSPI1 *****************
  1487 ;; Defined at:
  1488 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  sync_mode       1    wreg     unsigned char 
  1491 ;;  bus_mode        1   14[BANK0 ] unsigned char 
  1492 ;;  smp_phase       1   15[BANK0 ] unsigned char 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  sync_mode       1   16[BANK0 ] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        3 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    7
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		_lcdInit
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text7
  1519  002A5A                     __ptext7:
  1520                           	opt stack 0
  1521  002A5A                     _OpenSPI1:
  1522                           	opt stack 21
  1523                           
  1524                           ;incstack = 0
  1525                           ;OpenSPI1@sync_mode stored from wreg
  1526  002A5A  0100               	movlb	0	; () banked
  1527  002A5C  6FBB               	movwf	OpenSPI1@sync_mode& (0+255),b
  1528                           
  1529                           ; BSR set to: 0
  1530  002A5E  0E3F               	movlw	63
  1531  002A60  16C7               	andwf	4039,f,c	;volatile
  1532                           
  1533                           ; BSR set to: 0
  1534  002A62  0E00               	movlw	0
  1535  002A64  6EC6               	movwf	4038,c	;volatile
  1536                           
  1537                           ; BSR set to: 0
  1538  002A66  0100               	movlb	0	; () banked
  1539  002A68  51BB               	movf	OpenSPI1@sync_mode& (0+255),w,b
  1540  002A6A  12C6               	iorwf	4038,f,c	;volatile
  1541                           
  1542                           ; BSR set to: 0
  1543  002A6C  0100               	movlb	0	; () banked
  1544  002A6E  51BA               	movf	OpenSPI1@smp_phase& (0+255),w,b
  1545  002A70  12C7               	iorwf	4039,f,c	;volatile
  1546  002A72  D005               	goto	l2806
  1547  002A74                     l454:
  1548                           
  1549                           ; BSR set to: 0
  1550  002A74  8CC7               	bsf	4039,6,c	;volatile
  1551  002A76  D014               	goto	l2810
  1552  002A78                     l456:
  1553                           
  1554                           ; BSR set to: 0
  1555  002A78  8CC7               	bsf	4039,6,c	;volatile
  1556  002A7A                     l457:
  1557                           
  1558                           ; BSR set to: 0
  1559  002A7A  88C6               	bsf	4038,4,c	;volatile
  1560                           
  1561                           ; BSR set to: 0
  1562                           
  1563                           ; BSR set to: 0
  1564  002A7C  D011               	goto	l2810
  1565  002A7E                     l2806:
  1566                           
  1567                           ; BSR set to: 0
  1568  002A7E  0100               	movlb	0	; () banked
  1569  002A80  51B9               	movf	OpenSPI1@bus_mode& (0+255),w,b
  1570                           
  1571                           ; Switch size 1, requested type "space"
  1572                           ; Number of cases is 3, Range of values is 0 to 3
  1573                           ; switch strategies available:
  1574                           ; Name         Instructions Cycles
  1575                           ; simple_byte           10     6 (average)
  1576                           ;	Chosen strategy is simple_byte
  1577  002A82  0A00               	xorlw	0	; case 0
  1578  002A84  B4D8               	btfsc	status,2,c
  1579  002A86  D7F6               	goto	l454
  1580  002A88  0A02               	xorlw	2	; case 2
  1581  002A8A  B4D8               	btfsc	status,2,c
  1582  002A8C  D7F5               	goto	l456
  1583  002A8E  0A01               	xorlw	1	; case 3
  1584  002A90  B4D8               	btfsc	status,2,c
  1585  002A92  D7F3               	goto	l457
  1586                           
  1587                           ; BSR set to: 0
  1588  002A94  D005               	goto	l2810
  1589  002A96                     l460:
  1590                           
  1591                           ; BSR set to: 0
  1592  002A96  8E97               	bsf	3991,7,c	;volatile
  1593  002A98                     l462:
  1594                           
  1595                           ; BSR set to: 0
  1596  002A98  8694               	bsf	3988,3,c	;volatile
  1597  002A9A  D00B               	goto	l461
  1598  002A9C                     l463:
  1599                           
  1600                           ; BSR set to: 0
  1601  002A9C  9694               	bcf	3988,3,c	;volatile
  1602                           
  1603                           ; BSR set to: 0
  1604  002A9E  D009               	goto	l461
  1605  002AA0                     l2810:
  1606                           
  1607                           ; BSR set to: 0
  1608  002AA0  0100               	movlb	0	; () banked
  1609  002AA2  51BB               	movf	OpenSPI1@sync_mode& (0+255),w,b
  1610                           
  1611                           ; Switch size 1, requested type "space"
  1612                           ; Number of cases is 2, Range of values is 4 to 5
  1613                           ; switch strategies available:
  1614                           ; Name         Instructions Cycles
  1615                           ; simple_byte            7     4 (average)
  1616                           ;	Chosen strategy is simple_byte
  1617  002AA4  0A04               	xorlw	4	; case 4
  1618  002AA6  B4D8               	btfsc	status,2,c
  1619  002AA8  D7F6               	goto	l460
  1620  002AAA  0A01               	xorlw	1	; case 5
  1621  002AAC  B4D8               	btfsc	status,2,c
  1622  002AAE  D7F4               	goto	l462
  1623  002AB0  D7F5               	goto	l463
  1624  002AB2                     l461:
  1625                           
  1626                           ; BSR set to: 0
  1627  002AB2  8894               	bsf	3988,4,c	;volatile
  1628  002AB4  9A94               	bcf	3988,5,c	;volatile
  1629                           
  1630                           ; BSR set to: 0
  1631  002AB6  8AC6               	bsf	4038,5,c	;volatile
  1632                           
  1633                           ; BSR set to: 0
  1634  002AB8  0012               	return		;funcret
  1635  002ABA                     __end_of_OpenSPI1:
  1636                           	opt stack 0
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           intcon	equ	0xFF2
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _SerInit *****************
  1647 ;; Defined at:
  1648 ;;		line 19 in file "SerComm.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;		None               void
  1655 ;; Registers used:
  1656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    9
  1669 ;; This function calls:
  1670 ;;		_SerTxStr
  1671 ;; This function is called by:
  1672 ;;		_initialize
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text8
  1677  003018                     __ptext8:
  1678                           	opt stack 0
  1679  003018                     _SerInit:
  1680                           	opt stack 20
  1681                           
  1682                           ;SerComm.c: 26: TXSTA1 = 0x24;
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;incstack = 0
  1686  003018  0E24               	movlw	36
  1687  00301A  6EAC               	movwf	4012,c	;volatile
  1688                           
  1689                           ;SerComm.c: 27: RCSTA1 = 0x90;
  1690  00301C  0E90               	movlw	144
  1691  00301E  6EAB               	movwf	4011,c	;volatile
  1692                           
  1693                           ;SerComm.c: 28: BAUDCON = 0x00;
  1694  003020  0E00               	movlw	0
  1695  003022  6E7E               	movwf	3966,c	;volatile
  1696                           
  1697                           ;SerComm.c: 29: SPBRG = 21;
  1698  003024  0E15               	movlw	21
  1699  003026  6EAF               	movwf	4015,c	;volatile
  1700                           
  1701                           ;SerComm.c: 31: RCONbits.IPEN = 1;
  1702  003028  8ED0               	bsf	4048,7,c	;volatile
  1703                           
  1704                           ;SerComm.c: 32: IPR1bits.RCIP = 1;
  1705  00302A  8A9F               	bsf	3999,5,c	;volatile
  1706                           
  1707                           ;SerComm.c: 33: PIE1bits.RC1IE = 1;
  1708  00302C  8A9D               	bsf	3997,5,c	;volatile
  1709                           
  1710                           ;SerComm.c: 35: SerTxStr("Welcome to the world of tomorrow!!!");
  1711  00302E  0E01               	movlw	low STR_30
  1712  003030  0100               	movlb	0	; () banked
  1713  003032  6FBA               	movwf	SerTxStr@string& (0+255),b
  1714  003034  0E10               	movlw	high STR_30
  1715  003036  0100               	movlb	0	; () banked
  1716  003038  6FBB               	movwf	(SerTxStr@string+1)& (0+255),b
  1717  00303A  ECE9  F015         	call	_SerTxStr	;wreg free
  1718  00303E  0012               	return		;funcret
  1719  003040                     __end_of_SerInit:
  1720                           	opt stack 0
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           intcon	equ	0xFF2
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _SerTxStr *****************
  1731 ;; Defined at:
  1732 ;;		line 50 in file "SerComm.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  string          2   15[BANK0 ] PTR unsigned char 
  1735 ;;		 -> STR_30(36), STR_29(4), STR_14(6), STR_13(4), 
  1736 ;;		 -> STR_4(11), value(10), STR_3(6), key(5), 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;		None
  1739 ;; Return value:  Size  Location     Type
  1740 ;;		None               void
  1741 ;; Registers used:
  1742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:        2 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    8
  1755 ;; This function calls:
  1756 ;;		_SerTx
  1757 ;; This function is called by:
  1758 ;;		_SerInit
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text9
  1763  002BD2                     __ptext9:
  1764                           	opt stack 0
  1765  002BD2                     _SerTxStr:
  1766                           	opt stack 20
  1767                           
  1768                           ;SerComm.c: 52: while (*string)
  1769                           
  1770                           ;incstack = 0
  1771  002BD2  D017               	goto	l2824
  1772  002BD4                     l2820:
  1773                           
  1774                           ;SerComm.c: 53: SerTx(*string++);
  1775  002BD4  C0BA  FFF6         	movff	SerTxStr@string,tblptrl
  1776  002BD8  C0BB  FFF7         	movff	SerTxStr@string+1,tblptrh
  1777  002BDC  0E00               	movlw	low (__smallconst shr (0+16))
  1778  002BDE  6EF8               	movwf	tblptru,c
  1779  002BE0  0E0F               	movlw	(high __ramtop+-1)
  1780  002BE2  64F7               	cpfsgt	tblptrh,c
  1781  002BE4  D003               	bra	u2457
  1782  002BE6  0008               	tblrd		*
  1783  002BE8  50F5               	movf	tablat,w,c
  1784  002BEA  D005               	bra	u2450
  1785  002BEC                     u2457:
  1786  002BEC  CFF6 FFE9          	movff	tblptrl,fsr0l
  1787  002BF0  CFF7 FFEA          	movff	tblptrh,fsr0h
  1788  002BF4  50EF               	movf	indf0,w,c
  1789  002BF6                     u2450:
  1790  002BF6  EC04  F019         	call	_SerTx
  1791  002BFA  0100               	movlb	0	; () banked
  1792  002BFC  4BBA               	infsnz	SerTxStr@string& (0+255),f,b
  1793  002BFE  2BBB               	incf	(SerTxStr@string+1)& (0+255),f,b
  1794  002C00  D000               	goto	l2824
  1795  002C02                     l2824:
  1796  002C02  C0BA  FFF6         	movff	SerTxStr@string,tblptrl
  1797  002C06  C0BB  FFF7         	movff	SerTxStr@string+1,tblptrh
  1798  002C0A  0E00               	movlw	low (__smallconst shr (0+16))
  1799  002C0C  6EF8               	movwf	tblptru,c
  1800  002C0E  0E0F               	movlw	(high __ramtop+-1)
  1801  002C10  64F7               	cpfsgt	tblptrh,c
  1802  002C12  D003               	bra	u2467
  1803  002C14  0008               	tblrd		*
  1804  002C16  50F5               	movf	tablat,w,c
  1805  002C18  D005               	bra	u2460
  1806  002C1A                     u2467:
  1807  002C1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1808  002C1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1809  002C22  50EF               	movf	indf0,w,c
  1810  002C24                     u2460:
  1811  002C24  0900               	iorlw	0
  1812  002C26  A4D8               	btfss	status,2,c
  1813  002C28  D7D5               	goto	l2820
  1814  002C2A  0012               	return		;funcret
  1815  002C2C                     __end_of_SerTxStr:
  1816                           	opt stack 0
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           intcon	equ	0xFF2
  1822                           indf0	equ	0xFEF
  1823                           postinc0	equ	0xFEE
  1824                           fsr0h	equ	0xFEA
  1825                           fsr0l	equ	0xFE9
  1826                           wreg	equ	0xFE8
  1827                           status	equ	0xFD8
  1828                           
  1829 ;; *************** function _SerTx *****************
  1830 ;; Defined at:
  1831 ;;		line 41 in file "SerComm.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;  c               1    wreg     unsigned char 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  c               1   14[BANK0 ] unsigned char 
  1836 ;; Return value:  Size  Location     Type
  1837 ;;		None               void
  1838 ;; Registers used:
  1839 ;;		wreg
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;Total ram usage:        1 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    7
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_SerTxStr
  1856 ;;		_breakDouble
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text10
  1861  003208                     __ptext10:
  1862                           	opt stack 0
  1863  003208                     _SerTx:
  1864                           	opt stack 20
  1865                           
  1866                           ;incstack = 0
  1867                           ;SerTx@c stored from wreg
  1868  003208  0100               	movlb	0	; () banked
  1869  00320A  6FB9               	movwf	SerTx@c& (0+255),b
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;SerComm.c: 43: TXREG1 = c;
  1873  00320C  C0B9  FFAD         	movff	SerTx@c,4013	;volatile
  1874                           
  1875                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  1876  003210  D000               	goto	l326
  1877  003212                     l326:
  1878  003212  A89E               	btfss	3998,4,c	;volatile
  1879  003214  D7FE               	goto	l326
  1880  003216  0012               	return		;funcret
  1881  003218                     __end_of_SerTx:
  1882                           	opt stack 0
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           intcon	equ	0xFF2
  1888                           indf0	equ	0xFEF
  1889                           postinc0	equ	0xFEE
  1890                           fsr0h	equ	0xFEA
  1891                           fsr0l	equ	0xFE9
  1892                           wreg	equ	0xFE8
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _RTDInit *****************
  1896 ;; Defined at:
  1897 ;;		line 3 in file "ResolverToDigital.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;		None               void
  1904 ;; Registers used:
  1905 ;;		wreg, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    8
  1918 ;; This function calls:
  1919 ;;		_Delay10TCYx
  1920 ;;		_Delay1KTCYx
  1921 ;;		_Delay1TCYx
  1922 ;; This function is called by:
  1923 ;;		_initialize
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text11
  1928  002FBC                     __ptext11:
  1929                           	opt stack 0
  1930  002FBC                     _RTDInit:
  1931                           	opt stack 21
  1932                           
  1933                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1934                           
  1935                           ;incstack = 0
  1936  002FBC  6895               	setf	3989,c	;volatile
  1937                           
  1938                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1939  002FBE  6899               	setf	3993,c	;volatile
  1940                           
  1941                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1942  002FC0  9096               	bcf	3990,0,c	;volatile
  1943                           
  1944                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1945  002FC2  9296               	bcf	3990,1,c	;volatile
  1946                           
  1947                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1948  002FC4  9496               	bcf	3990,2,c	;volatile
  1949                           
  1950                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1951  002FC6  909A               	bcf	3994,0,c	;volatile
  1952                           
  1953                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1954  002FC8  8A96               	bsf	3990,5,c	;volatile
  1955                           
  1956                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1957  002FCA  8C96               	bsf	3990,6,c	;volatile
  1958                           
  1959                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1960  002FCC  8E96               	bsf	3990,7,c	;volatile
  1961                           
  1962                           ;ResolverToDigital.c: 17: PORTJbits.RJ0 = 0;
  1963  002FCE  9088               	bcf	3976,0,c	;volatile
  1964                           
  1965                           ;ResolverToDigital.c: 18: Delay10TCYx(10);
  1966  002FD0  0E0A               	movlw	10
  1967  002FD2  ECF0  F018         	call	_Delay10TCYx
  1968                           
  1969                           ;ResolverToDigital.c: 19: PORTJbits.RJ0 = 1;
  1970  002FD6  8088               	bsf	3976,0,c	;volatile
  1971                           
  1972                           ;ResolverToDigital.c: 20: Delay1KTCYx(20);
  1973  002FD8  0E14               	movlw	20
  1974  002FDA  ECE5  F018         	call	_Delay1KTCYx
  1975                           
  1976                           ;ResolverToDigital.c: 21: PORTEbits.RE0 = 0;
  1977  002FDE  9084               	bcf	3972,0,c	;volatile
  1978                           
  1979                           ;ResolverToDigital.c: 22: Delay1TCYx(1);
  1980  002FE0  0E01               	movlw	1
  1981  002FE2  EC0C  F019         	call	_Delay1TCYx
  1982                           
  1983                           ;ResolverToDigital.c: 23: PORTEbits.RE0 = 1;
  1984  002FE6  8084               	bsf	3972,0,c	;volatile
  1985                           
  1986                           ;ResolverToDigital.c: 25: PORTEbits.RE2 = 0;
  1987  002FE8  9484               	bcf	3972,2,c	;volatile
  1988  002FEA  0012               	return		;funcret
  1989  002FEC                     __end_of_RTDInit:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           intcon	equ	0xFF2
  1996                           indf0	equ	0xFEF
  1997                           postinc0	equ	0xFEE
  1998                           fsr0h	equ	0xFEA
  1999                           fsr0l	equ	0xFE9
  2000                           wreg	equ	0xFE8
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _Delay1TCYx *****************
  2004 ;; Defined at:
  2005 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  unit            1    wreg     unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  unit            1   14[BANK0 ] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;		None               void
  2012 ;; Registers used:
  2013 ;;		wreg
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    7
  2026 ;; This function calls:
  2027 ;;		Nothing
  2028 ;; This function is called by:
  2029 ;;		_RTDInit
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text12
  2034  003218                     __ptext12:
  2035                           	opt stack 0
  2036  003218                     _Delay1TCYx:
  2037                           	opt stack 21
  2038                           
  2039                           ;incstack = 0
  2040                           ;Delay1TCYx@unit stored from wreg
  2041  003218  0100               	movlb	0	; () banked
  2042  00321A  6FB9               	movwf	Delay1TCYx@unit& (0+255),b
  2043  00321C                     l785:
  2044                           
  2045                           ; BSR set to: 0
  2046  00321C  F000               	nop	
  2047  00321E  0100               	movlb	0	; () banked
  2048  003220  2FB9               	decfsz	Delay1TCYx@unit& (0+255),f,b
  2049  003222  D7FC               	goto	l785
  2050  003224  D000               	goto	l787
  2051  003226                     l787:
  2052                           
  2053                           ; BSR set to: 0
  2054  003226  0012               	return		;funcret
  2055  003228                     __end_of_Delay1TCYx:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           intcon	equ	0xFF2
  2062                           indf0	equ	0xFEF
  2063                           postinc0	equ	0xFEE
  2064                           fsr0h	equ	0xFEA
  2065                           fsr0l	equ	0xFE9
  2066                           wreg	equ	0xFE8
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _Delay1KTCYx *****************
  2070 ;; Defined at:
  2071 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  unit            1    wreg     unsigned char 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  unit            1   14[BANK0 ] unsigned char 
  2076 ;; Return value:  Size  Location     Type
  2077 ;;		None               void
  2078 ;; Registers used:
  2079 ;;		wreg
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;Total ram usage:        1 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    7
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_RTDInit
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text13
  2100  0031CA                     __ptext13:
  2101                           	opt stack 0
  2102  0031CA                     _Delay1KTCYx:
  2103                           	opt stack 21
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;incstack = 0
  2107                           ;Delay1KTCYx@unit stored from wreg
  2108  0031CA  0100               	movlb	0	; () banked
  2109  0031CC  6FB9               	movwf	Delay1KTCYx@unit& (0+255),b
  2110  0031CE                     
  2111                           ; BSR set to: 0
  2112  0031CE  0EFA               	movlw	250
  2113  0031D0                     u4057:
  2114  0031D0  F000               	nop	
  2115  0031D2  2EE8               	decfsz	wreg,f,c
  2116  0031D4  D7FD               	goto	u4057
  2117  0031D6  0100               	movlb	0	; () banked
  2118  0031D8  2FB9               	decfsz	Delay1KTCYx@unit& (0+255),f,b
  2119  0031DA  D7F9               	goto	l3004
  2120  0031DC  D000               	goto	l780
  2121  0031DE                     l780:
  2122                           
  2123                           ; BSR set to: 0
  2124  0031DE  0012               	return		;funcret
  2125  0031E0                     __end_of_Delay1KTCYx:
  2126                           	opt stack 0
  2127                           tblptru	equ	0xFF8
  2128                           tblptrh	equ	0xFF7
  2129                           tblptrl	equ	0xFF6
  2130                           tablat	equ	0xFF5
  2131                           intcon	equ	0xFF2
  2132                           indf0	equ	0xFEF
  2133                           postinc0	equ	0xFEE
  2134                           fsr0h	equ	0xFEA
  2135                           fsr0l	equ	0xFE9
  2136                           wreg	equ	0xFE8
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _Delay10TCYx *****************
  2140 ;; Defined at:
  2141 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  unit            1    wreg     unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  unit            1   14[BANK0 ] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;		None               void
  2148 ;; Registers used:
  2149 ;;		wreg
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        1 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    7
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_lcdCommand
  2166 ;;		_RTDInit
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text14
  2171  0031E0                     __ptext14:
  2172                           	opt stack 0
  2173  0031E0                     _Delay10TCYx:
  2174                           	opt stack 20
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;incstack = 0
  2178                           ;Delay10TCYx@unit stored from wreg
  2179  0031E0  0100               	movlb	0	; () banked
  2180  0031E2  6FB9               	movwf	Delay10TCYx@unit& (0+255),b
  2181  0031E4                     
  2182                           ; BSR set to: 0
  2183  0031E4  0E03               	movlw	3
  2184  0031E6                     u4067:
  2185  0031E6  2EE8               	decfsz	wreg,f,c
  2186  0031E8  D7FE               	goto	u4067
  2187  0031EA  F000               	nop	
  2188  0031EC  0100               	movlb	0	; () banked
  2189  0031EE  2FB9               	decfsz	Delay10TCYx@unit& (0+255),f,b
  2190  0031F0  D7F9               	goto	l2572
  2191  0031F2  D000               	goto	l773
  2192  0031F4                     l773:
  2193                           
  2194                           ; BSR set to: 0
  2195  0031F4  0012               	return		;funcret
  2196  0031F6                     __end_of_Delay10TCYx:
  2197                           	opt stack 0
  2198                           tblptru	equ	0xFF8
  2199                           tblptrh	equ	0xFF7
  2200                           tblptrl	equ	0xFF6
  2201                           tablat	equ	0xFF5
  2202                           intcon	equ	0xFF2
  2203                           indf0	equ	0xFEF
  2204                           postinc0	equ	0xFEE
  2205                           fsr0h	equ	0xFEA
  2206                           fsr0l	equ	0xFE9
  2207                           wreg	equ	0xFE8
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _PIDInit *****************
  2211 ;; Defined at:
  2212 ;;		line 19 in file "PID.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;		None               void
  2219 ;; Registers used:
  2220 ;;		wreg, status,2
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;Total ram usage:        0 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    7
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_initialize
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text15
  2241  002F08                     __ptext15:
  2242                           	opt stack 0
  2243  002F08                     _PIDInit:
  2244                           	opt stack 22
  2245                           
  2246                           ;PID.c: 22: err = 0;
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;incstack = 0
  2250  002F08  0E00               	movlw	0
  2251  002F0A  6E5A               	movwf	_err,c
  2252  002F0C  0E00               	movlw	0
  2253  002F0E  6E5B               	movwf	_err+1,c
  2254  002F10  0E00               	movlw	0
  2255  002F12  6E5C               	movwf	_err+2,c
  2256                           
  2257                           ;PID.c: 23: prevErr = 0;
  2258  002F14  0E00               	movlw	0
  2259  002F16  0100               	movlb	0	; () banked
  2260  002F18  6F78               	movwf	_prevErr& (0+255),b
  2261  002F1A  0E00               	movlw	0
  2262  002F1C  0100               	movlb	0	; () banked
  2263  002F1E  6F79               	movwf	(_prevErr+1)& (0+255),b
  2264  002F20  0E00               	movlw	0
  2265  002F22  0100               	movlb	0	; () banked
  2266  002F24  6F7A               	movwf	(_prevErr+2)& (0+255),b
  2267                           
  2268                           ;PID.c: 24: intErr = 0;
  2269  002F26  0E00               	movlw	0
  2270  002F28  0100               	movlb	0	; () banked
  2271  002F2A  6F75               	movwf	_intErr& (0+255),b
  2272  002F2C  0E00               	movlw	0
  2273  002F2E  0100               	movlb	0	; () banked
  2274  002F30  6F76               	movwf	(_intErr+1)& (0+255),b
  2275  002F32  0E00               	movlw	0
  2276  002F34  0100               	movlb	0	; () banked
  2277  002F36  6F77               	movwf	(_intErr+2)& (0+255),b
  2278                           
  2279                           ;PID.c: 28: T0CON = 0x04;
  2280  002F38  0E04               	movlw	4
  2281  002F3A  6ED5               	movwf	4053,c	;volatile
  2282                           
  2283                           ;PID.c: 29: TMR0H = 0xDB;
  2284  002F3C  0EDB               	movlw	219
  2285  002F3E  6ED7               	movwf	4055,c	;volatile
  2286                           
  2287                           ;PID.c: 30: TMR0L = 0x60;
  2288  002F40  0E60               	movlw	96
  2289  002F42  6ED6               	movwf	4054,c	;volatile
  2290                           
  2291                           ; BSR set to: 0
  2292  002F44  0012               	return		;funcret
  2293  002F46                     __end_of_PIDInit:
  2294                           	opt stack 0
  2295                           tblptru	equ	0xFF8
  2296                           tblptrh	equ	0xFF7
  2297                           tblptrl	equ	0xFF6
  2298                           tablat	equ	0xFF5
  2299                           intcon	equ	0xFF2
  2300                           indf0	equ	0xFEF
  2301                           postinc0	equ	0xFEE
  2302                           fsr0h	equ	0xFEA
  2303                           fsr0l	equ	0xFE9
  2304                           wreg	equ	0xFE8
  2305                           status	equ	0xFD8
  2306                           
  2307 ;; *************** function _MotorDriverInit *****************
  2308 ;; Defined at:
  2309 ;;		line 5 in file "MotorControl.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;		None               void
  2316 ;; Registers used:
  2317 ;;		wreg, status,2
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;Total ram usage:        0 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    7
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_initialize
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text16
  2338  00317A                     __ptext16:
  2339                           	opt stack 0
  2340  00317A                     _MotorDriverInit:
  2341                           	opt stack 22
  2342                           
  2343                           ;MotorControl.c: 7: TRISGbits.RG0 = 0;
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;incstack = 0
  2347  00317A  9098               	bcf	3992,0,c	;volatile
  2348                           
  2349                           ;MotorControl.c: 8: TRISEbits.RE4 = 0;
  2350  00317C  9896               	bcf	3990,4,c	;volatile
  2351                           
  2352                           ;MotorControl.c: 9: TRISEbits.RE3 = 0;
  2353  00317E  9696               	bcf	3990,3,c	;volatile
  2354                           
  2355                           ;MotorControl.c: 10: TRISGbits.RG3 = 0;
  2356  003180  9698               	bcf	3992,3,c	;volatile
  2357                           
  2358                           ;MotorControl.c: 12: TRISBbits.RB0 = 1;
  2359  003182  8093               	bsf	3987,0,c	;volatile
  2360                           
  2361                           ;MotorControl.c: 14: TRISAbits.RA4 = 0;
  2362  003184  9892               	bcf	3986,4,c	;volatile
  2363                           
  2364                           ;MotorControl.c: 16: CCP3CON = 0x4C;
  2365  003186  0E4C               	movlw	76
  2366  003188  6EB7               	movwf	4023,c	;volatile
  2367                           
  2368                           ;MotorControl.c: 17: PR2 = 0xFF;
  2369  00318A  68CB               	setf	4043,c	;volatile
  2370                           
  2371                           ;MotorControl.c: 18: T3CON = 0x00;
  2372  00318C  0E00               	movlw	0
  2373  00318E  6EB1               	movwf	4017,c	;volatile
  2374                           
  2375                           ;MotorControl.c: 19: T2CON = 0x04;
  2376  003190  0E04               	movlw	4
  2377  003192  6ECA               	movwf	4042,c	;volatile
  2378  003194  0012               	return		;funcret
  2379  003196                     __end_of_MotorDriverInit:
  2380                           	opt stack 0
  2381                           tblptru	equ	0xFF8
  2382                           tblptrh	equ	0xFF7
  2383                           tblptrl	equ	0xFF6
  2384                           tablat	equ	0xFF5
  2385                           intcon	equ	0xFF2
  2386                           indf0	equ	0xFEF
  2387                           postinc0	equ	0xFEE
  2388                           fsr0h	equ	0xFEA
  2389                           fsr0l	equ	0xFE9
  2390                           wreg	equ	0xFE8
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _ISR *****************
  2394 ;; Defined at:
  2395 ;;		line 46 in file "PIDLoop.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;Total ram usage:       14 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    6
  2416 ;; This function calls:
  2417 ;;		_RCInt
  2418 ;;		_TMR0Int
  2419 ;; This function is called by:
  2420 ;;		Interrupt level 2
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	intcode
  2425  000008                     __pintcode:
  2426                           	opt stack 0
  2427  000008                     _ISR:
  2428                           	opt stack 19
  2429                           
  2430                           ;incstack = 0
  2431  000008  CFFA F0AB          	movff	pclath,??_ISR
  2432  00000C  CFFB F0AC          	movff	pclatu,??_ISR+1
  2433  000010  CFE9 F0AD          	movff	fsr0l,??_ISR+2
  2434  000014  EDB0  F014         	call	int_func,f	;refresh shadow registers
  2435                           pclatu	equ	0xFFB
  2436                           pclath	equ	0xFFA
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           tblptrl	equ	0xFF6
  2440                           tablat	equ	0xFF5
  2441                           intcon	equ	0xFF2
  2442                           indf0	equ	0xFEF
  2443                           postinc0	equ	0xFEE
  2444                           fsr0h	equ	0xFEA
  2445                           fsr0l	equ	0xFE9
  2446                           wreg	equ	0xFE8
  2447                           status	equ	0xFD8
  2448                           
  2449                           	psect	intcode_body
  2450  002960                     __pintcode_body:
  2451                           	opt stack 19
  2452  002960                     int_func:
  2453                           	opt stack 19
  2454  002960  0006               	pop		; remove dummy address from shadow register refresh
  2455  002962  CFEA F0AE          	movff	fsr0h,??_ISR+3
  2456  002966  CFE1 F0AF          	movff	fsr1l,??_ISR+4
  2457  00296A  CFE2 F0B0          	movff	fsr1h,??_ISR+5
  2458  00296E  CFD9 F0B1          	movff	fsr2l,??_ISR+6
  2459  002972  CFDA F0B2          	movff	fsr2h,??_ISR+7
  2460  002976  CFF3 F0B3          	movff	prodl,??_ISR+8
  2461  00297A  CFF4 F0B4          	movff	prodh,??_ISR+9
  2462  00297E  CFF6 F0B5          	movff	tblptrl,??_ISR+10
  2463  002982  CFF7 F0B6          	movff	tblptrh,??_ISR+11
  2464  002986  CFF8 F0B7          	movff	tblptru,??_ISR+12
  2465  00298A  CFF5 F0B8          	movff	tablat,??_ISR+13
  2466                           
  2467                           ;PIDLoop.c: 48: if (PIR1bits.RC1IF == 1)
  2468  00298E  AA9E               	btfss	3998,5,c	;volatile
  2469  002990  D003               	goto	i2l435
  2470                           
  2471                           ;PIDLoop.c: 49: RCInt();
  2472  002992  EC05  F012         	call	_RCInt	;wreg free
  2473  002996  D006               	goto	i2l438
  2474  002998                     i2l435:
  2475                           
  2476                           ;PIDLoop.c: 50: else if ((INTCONbits.TMR0IF == 1) && (INTCONbits.TMR0IE == 1))
  2477  002998  B4F2               	btfsc	intcon,2,c	;volatile
  2478  00299A  AAF2               	btfss	intcon,5,c	;volatile
  2479  00299C  D003               	goto	i2l438
  2480                           
  2481                           ;PIDLoop.c: 51: TMR0Int();
  2482  00299E  EC5D  F015         	call	_TMR0Int	;wreg free
  2483  0029A2  D000               	goto	i2l438
  2484  0029A4                     i2l438:
  2485  0029A4  C0B8  FFF5         	movff	??_ISR+13,tablat
  2486  0029A8  C0B7  FFF8         	movff	??_ISR+12,tblptru
  2487  0029AC  C0B6  FFF7         	movff	??_ISR+11,tblptrh
  2488  0029B0  C0B5  FFF6         	movff	??_ISR+10,tblptrl
  2489  0029B4  C0B4  FFF4         	movff	??_ISR+9,prodh
  2490  0029B8  C0B3  FFF3         	movff	??_ISR+8,prodl
  2491  0029BC  C0B2  FFDA         	movff	??_ISR+7,fsr2h
  2492  0029C0  C0B1  FFD9         	movff	??_ISR+6,fsr2l
  2493  0029C4  C0B0  FFE2         	movff	??_ISR+5,fsr1h
  2494  0029C8  C0AF  FFE1         	movff	??_ISR+4,fsr1l
  2495  0029CC  C0AE  FFEA         	movff	??_ISR+3,fsr0h
  2496  0029D0  C0AD  FFE9         	movff	??_ISR+2,fsr0l
  2497  0029D4  C0AC  FFFB         	movff	??_ISR+1,pclatu
  2498  0029D8  C0AB  FFFA         	movff	??_ISR,pclath
  2499  0029DC  0011               	retfie		f
  2500  0029DE                     __end_of_ISR:
  2501                           	opt stack 0
  2502                           pclatu	equ	0xFFB
  2503                           pclath	equ	0xFFA
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           indf0	equ	0xFEF
  2512                           postinc0	equ	0xFEE
  2513                           fsr0h	equ	0xFEA
  2514                           fsr0l	equ	0xFE9
  2515                           wreg	equ	0xFE8
  2516                           fsr1h	equ	0xFE2
  2517                           fsr1l	equ	0xFE1
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function _TMR0Int *****************
  2523 ;; Defined at:
  2524 ;;		line 93 in file "PID.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  currentAngle    3   83[COMRAM] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;		None               void
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;Total ram usage:        3 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    5
  2545 ;; This function calls:
  2546 ;;		_ImplementPIDMotion
  2547 ;;		_LCDBreakDouble
  2548 ;;		_RTD2Angle
  2549 ;;		_ReadRTDpos
  2550 ;;		_calculatePID
  2551 ;; This function is called by:
  2552 ;;		_ISR
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text18
  2557  002ABA                     __ptext18:
  2558                           	opt stack 0
  2559  002ABA                     _TMR0Int:
  2560                           	opt stack 19
  2561                           
  2562                           ;PID.c: 95: double currentAngle;
  2563                           ;PID.c: 96: currentAngle = RTD2Angle(ReadRTDpos());
  2564                           
  2565                           ;incstack = 0
  2566  002ABA  EC43  F016         	call	_ReadRTDpos	;wreg free
  2567  002ABE  C002  F027         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  2568  002AC2  C003  F028         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  2569  002AC6  ECC2  F017         	call	_RTD2Angle	;wreg free
  2570  002ACA  C027  F054         	movff	?_RTD2Angle,TMR0Int@currentAngle
  2571  002ACE  C028  F055         	movff	?_RTD2Angle+1,TMR0Int@currentAngle+1
  2572  002AD2  C029  F056         	movff	?_RTD2Angle+2,TMR0Int@currentAngle+2
  2573                           
  2574                           ;PID.c: 97: calculatePID(currentAngle, SetAngle);
  2575  002AD6  C054  F042         	movff	TMR0Int@currentAngle,calculatePID@angle
  2576  002ADA  C055  F043         	movff	TMR0Int@currentAngle+1,calculatePID@angle+1
  2577  002ADE  C056  F044         	movff	TMR0Int@currentAngle+2,calculatePID@angle+2
  2578  002AE2  C06F  F045         	movff	_SetAngle,calculatePID@setpoint
  2579  002AE6  C070  F046         	movff	_SetAngle+1,calculatePID@setpoint+1
  2580  002AEA  C071  F047         	movff	_SetAngle+2,calculatePID@setpoint+2
  2581  002AEE  EC39  F008         	call	_calculatePID	;wreg free
  2582                           
  2583                           ;PID.c: 98: ImplementPIDMotion(motorInput);
  2584  002AF2  C07B  F005         	movff	_motorInput,ImplementPIDMotion@PIDValue
  2585  002AF6  C07C  F006         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  2586  002AFA  ECBB  F015         	call	_ImplementPIDMotion	;wreg free
  2587                           
  2588                           ;PID.c: 99: TMR0H = 0xDB;
  2589  002AFE  0EDB               	movlw	219
  2590  002B00  6ED7               	movwf	4055,c	;volatile
  2591                           
  2592                           ;PID.c: 100: TMR0L = 0x60;
  2593  002B02  0E60               	movlw	96
  2594  002B04  6ED6               	movwf	4054,c	;volatile
  2595                           
  2596                           ;PID.c: 101: LCDBreakDouble(currentAngle);
  2597  002B06  C054  F042         	movff	TMR0Int@currentAngle,LCDBreakDouble@dubs
  2598  002B0A  C055  F043         	movff	TMR0Int@currentAngle+1,LCDBreakDouble@dubs+1
  2599  002B0E  C056  F044         	movff	TMR0Int@currentAngle+2,LCDBreakDouble@dubs+2
  2600  002B12  EC55  F011         	call	_LCDBreakDouble	;wreg free
  2601                           
  2602                           ;PID.c: 103: INTCONbits.TMR0IF = 0;
  2603  002B16  94F2               	bcf	intcon,2,c	;volatile
  2604  002B18  0012               	return		;funcret
  2605  002B1A                     __end_of_TMR0Int:
  2606                           	opt stack 0
  2607                           pclatu	equ	0xFFB
  2608                           pclath	equ	0xFFA
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           intcon	equ	0xFF2
  2616                           indf0	equ	0xFEF
  2617                           postinc0	equ	0xFEE
  2618                           fsr0h	equ	0xFEA
  2619                           fsr0l	equ	0xFE9
  2620                           wreg	equ	0xFE8
  2621                           fsr1h	equ	0xFE2
  2622                           fsr1l	equ	0xFE1
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _calculatePID *****************
  2628 ;; Defined at:
  2629 ;;		line 33 in file "PID.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  angle           3   65[COMRAM] unsigned char 
  2632 ;;  setpoint        3   68[COMRAM] unsigned char 
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;  derErr          3   71[COMRAM] unsigned char 
  2635 ;; Return value:  Size  Location     Type
  2636 ;;		None               void
  2637 ;; Registers used:
  2638 ;;		wreg, status,2, status,0, cstack
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2644 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;Total ram usage:       18 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:    2
  2651 ;; This function calls:
  2652 ;;		___ftadd
  2653 ;;		___ftdiv
  2654 ;;		___ftge
  2655 ;;		___ftmul
  2656 ;;		___ftneg
  2657 ;;		___fttol
  2658 ;; This function is called by:
  2659 ;;		_TMR0Int
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text19
  2664  001072                     __ptext19:
  2665                           	opt stack 0
  2666  001072                     _calculatePID:
  2667                           	opt stack 21
  2668                           
  2669                           ;PID.c: 35: double derErr;
  2670                           ;PID.c: 36: if(PIDEnableFlag == 3)
  2671                           
  2672                           ;incstack = 0
  2673  001072  0E03               	movlw	3
  2674  001074  185D               	xorwf	_PIDEnableFlag,w,c
  2675  001076  A4D8               	btfss	status,2,c
  2676  001078  D021               	goto	i2l3230
  2677                           
  2678                           ;PID.c: 37: {
  2679                           ;PID.c: 38: StartAngle = angle;
  2680  00107A  C042  F057         	movff	calculatePID@angle,_StartAngle
  2681  00107E  C043  F058         	movff	calculatePID@angle+1,_StartAngle+1
  2682  001082  C044  F059         	movff	calculatePID@angle+2,_StartAngle+2
  2683                           
  2684                           ;PID.c: 39: err = 0;
  2685  001086  0E00               	movlw	0
  2686  001088  6E5A               	movwf	_err,c
  2687  00108A  0E00               	movlw	0
  2688  00108C  6E5B               	movwf	_err+1,c
  2689  00108E  0E00               	movlw	0
  2690  001090  6E5C               	movwf	_err+2,c
  2691                           
  2692                           ;PID.c: 40: prevErr = 0;
  2693  001092  0E00               	movlw	0
  2694  001094  0100               	movlb	0	; () banked
  2695  001096  6F78               	movwf	_prevErr& (0+255),b
  2696  001098  0E00               	movlw	0
  2697  00109A  0100               	movlb	0	; () banked
  2698  00109C  6F79               	movwf	(_prevErr+1)& (0+255),b
  2699  00109E  0E00               	movlw	0
  2700  0010A0  0100               	movlb	0	; () banked
  2701  0010A2  6F7A               	movwf	(_prevErr+2)& (0+255),b
  2702                           
  2703                           ;PID.c: 41: intErr = 0;
  2704  0010A4  0E00               	movlw	0
  2705  0010A6  0100               	movlb	0	; () banked
  2706  0010A8  6F75               	movwf	_intErr& (0+255),b
  2707  0010AA  0E00               	movlw	0
  2708  0010AC  0100               	movlb	0	; () banked
  2709  0010AE  6F76               	movwf	(_intErr+1)& (0+255),b
  2710  0010B0  0E00               	movlw	0
  2711  0010B2  0100               	movlb	0	; () banked
  2712  0010B4  6F77               	movwf	(_intErr+2)& (0+255),b
  2713                           
  2714                           ;PID.c: 42: PIDEnableFlag = 1;
  2715  0010B6  0E01               	movlw	1
  2716  0010B8  6E5D               	movwf	_PIDEnableFlag,c
  2717  0010BA  D000               	goto	i2l3230
  2718  0010BC                     i2l3230:
  2719                           
  2720                           ;PID.c: 43: }
  2721                           ;PID.c: 45: if(((StartAngle - setpoint) > 180) || ((StartAngle - setpoint) < -180))
  2722  0010BC  0E00               	movlw	0
  2723  0010BE  6E33               	movwf	___ftge@ff1,c
  2724  0010C0  0E34               	movlw	52
  2725  0010C2  6E34               	movwf	___ftge@ff1+1,c
  2726  0010C4  0E43               	movlw	67
  2727  0010C6  6E35               	movwf	___ftge@ff1+2,c
  2728  0010C8  C057  F02A         	movff	_StartAngle,___ftadd@f2
  2729  0010CC  C058  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2730  0010D0  C059  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2731  0010D4  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2732  0010D8  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2733  0010DC  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2734  0010E0  EC59  F018         	call	___ftneg	;wreg free
  2735  0010E4  C001  F027         	movff	?___ftneg,___ftadd@f1
  2736  0010E8  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2737  0010EC  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2738  0010F0  EC73  F010         	call	___ftadd	;wreg free
  2739  0010F4  C027  F036         	movff	?___ftadd,___ftge@ff2
  2740  0010F8  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2741  0010FC  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2742  001100  EC65  F014         	call	___ftge	;wreg free
  2743  001104  A0D8               	btfss	status,0,c
  2744  001106  D026               	goto	i2l3234
  2745  001108  C057  F02A         	movff	_StartAngle,___ftadd@f2
  2746  00110C  C058  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2747  001110  C059  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2748  001114  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2749  001118  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2750  00111C  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2751  001120  EC59  F018         	call	___ftneg	;wreg free
  2752  001124  C001  F027         	movff	?___ftneg,___ftadd@f1
  2753  001128  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2754  00112C  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2755  001130  EC73  F010         	call	___ftadd	;wreg free
  2756  001134  C027  F033         	movff	?___ftadd,___ftge@ff1
  2757  001138  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  2758  00113C  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  2759  001140  0E00               	movlw	0
  2760  001142  6E36               	movwf	___ftge@ff2,c
  2761  001144  0E34               	movlw	52
  2762  001146  6E37               	movwf	___ftge@ff2+1,c
  2763  001148  0EC3               	movlw	195
  2764  00114A  6E38               	movwf	___ftge@ff2+2,c
  2765  00114C  EC65  F014         	call	___ftge	;wreg free
  2766  001150  B0D8               	btfsc	status,0,c
  2767  001152  D0F2               	goto	i2l3250
  2768  001154                     i2l3234:
  2769                           
  2770                           ;PID.c: 46: {
  2771                           ;PID.c: 47: if((StartAngle - setpoint) > 180)
  2772  001154  0E00               	movlw	0
  2773  001156  6E33               	movwf	___ftge@ff1,c
  2774  001158  0E34               	movlw	52
  2775  00115A  6E34               	movwf	___ftge@ff1+1,c
  2776  00115C  0E43               	movlw	67
  2777  00115E  6E35               	movwf	___ftge@ff1+2,c
  2778  001160  C057  F02A         	movff	_StartAngle,___ftadd@f2
  2779  001164  C058  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2780  001168  C059  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2781  00116C  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2782  001170  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2783  001174  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2784  001178  EC59  F018         	call	___ftneg	;wreg free
  2785  00117C  C001  F027         	movff	?___ftneg,___ftadd@f1
  2786  001180  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2787  001184  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2788  001188  EC73  F010         	call	___ftadd	;wreg free
  2789  00118C  C027  F036         	movff	?___ftadd,___ftge@ff2
  2790  001190  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2791  001194  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2792  001198  EC65  F014         	call	___ftge	;wreg free
  2793  00119C  B0D8               	btfsc	status,0,c
  2794  00119E  D053               	goto	i2l3242
  2795                           
  2796                           ;PID.c: 48: {
  2797                           ;PID.c: 49: if(angle > StartAngle)
  2798  0011A0  C057  F033         	movff	_StartAngle,___ftge@ff1
  2799  0011A4  C058  F034         	movff	_StartAngle+1,___ftge@ff1+1
  2800  0011A8  C059  F035         	movff	_StartAngle+2,___ftge@ff1+2
  2801  0011AC  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  2802  0011B0  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  2803  0011B4  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  2804  0011B8  EC65  F014         	call	___ftge	;wreg free
  2805  0011BC  B0D8               	btfsc	status,0,c
  2806  0011BE  D02B               	goto	i2l3240
  2807                           
  2808                           ;PID.c: 50: err = 360 - angle + setpoint;
  2809  0011C0  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2810  0011C4  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2811  0011C8  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2812  0011CC  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2813  0011D0  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2814  0011D4  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2815  0011D8  EC59  F018         	call	___ftneg	;wreg free
  2816  0011DC  C001  F027         	movff	?___ftneg,___ftadd@f1
  2817  0011E0  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2818  0011E4  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2819  0011E8  EC73  F010         	call	___ftadd	;wreg free
  2820  0011EC  C027  F051         	movff	?___ftadd,_calculatePID$2553
  2821  0011F0  C028  F052         	movff	?___ftadd+1,_calculatePID$2553+1
  2822  0011F4  C029  F053         	movff	?___ftadd+2,_calculatePID$2553+2
  2823                           
  2824                           ;PID.c: 50: err = 360 - angle + setpoint;
  2825  0011F8  C051  F027         	movff	_calculatePID$2553,___ftadd@f1
  2826  0011FC  C052  F028         	movff	_calculatePID$2553+1,___ftadd@f1+1
  2827  001200  C053  F029         	movff	_calculatePID$2553+2,___ftadd@f1+2
  2828  001204  0E00               	movlw	0
  2829  001206  6E2A               	movwf	___ftadd@f2,c
  2830  001208  0EB4               	movlw	180
  2831  00120A  6E2B               	movwf	___ftadd@f2+1,c
  2832  00120C  0E43               	movlw	67
  2833  00120E  6E2C               	movwf	___ftadd@f2+2,c
  2834  001210  EC73  F010         	call	___ftadd	;wreg free
  2835  001214  D1FD               	goto	L7
  2836  001216                     i2l3240:
  2837                           
  2838                           ;PID.c: 51: else
  2839                           ;PID.c: 52: err = setpoint - angle;
  2840  001216  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2841  00121A  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2842  00121E  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2843  001222  EC59  F018         	call	___ftneg	;wreg free
  2844  001226  C001  F027         	movff	?___ftneg,___ftadd@f1
  2845  00122A  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2846  00122E  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2847  001232  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2848  001236  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2849  00123A  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2850  00123E  EC73  F010         	call	___ftadd	;wreg free
  2851  001242  D1E6               	goto	L7
  2852                           
  2853                           ;PID.c: 53: }
  2854  001244  D1EC               	goto	i2l97
  2855  001246                     i2l3242:
  2856                           
  2857                           ;PID.c: 54: else if((StartAngle - setpoint) < -180)
  2858  001246  C057  F02A         	movff	_StartAngle,___ftadd@f2
  2859  00124A  C058  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2860  00124E  C059  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2861  001252  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2862  001256  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2863  00125A  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2864  00125E  EC59  F018         	call	___ftneg	;wreg free
  2865  001262  C001  F027         	movff	?___ftneg,___ftadd@f1
  2866  001266  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2867  00126A  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2868  00126E  EC73  F010         	call	___ftadd	;wreg free
  2869  001272  C027  F033         	movff	?___ftadd,___ftge@ff1
  2870  001276  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  2871  00127A  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  2872  00127E  0E00               	movlw	0
  2873  001280  6E36               	movwf	___ftge@ff2,c
  2874  001282  0E34               	movlw	52
  2875  001284  6E37               	movwf	___ftge@ff2+1,c
  2876  001286  0EC3               	movlw	195
  2877  001288  6E38               	movwf	___ftge@ff2+2,c
  2878  00128A  EC65  F014         	call	___ftge	;wreg free
  2879  00128E  B0D8               	btfsc	status,0,c
  2880  001290  D1C6               	goto	i2l97
  2881                           
  2882                           ;PID.c: 55: {
  2883                           ;PID.c: 56: if(angle < StartAngle)
  2884  001292  C042  F033         	movff	calculatePID@angle,___ftge@ff1
  2885  001296  C043  F034         	movff	calculatePID@angle+1,___ftge@ff1+1
  2886  00129A  C044  F035         	movff	calculatePID@angle+2,___ftge@ff1+2
  2887  00129E  C057  F036         	movff	_StartAngle,___ftge@ff2
  2888  0012A2  C058  F037         	movff	_StartAngle+1,___ftge@ff2+1
  2889  0012A6  C059  F038         	movff	_StartAngle+2,___ftge@ff2+2
  2890  0012AA  EC65  F014         	call	___ftge	;wreg free
  2891  0012AE  B0D8               	btfsc	status,0,c
  2892  0012B0  D02B               	goto	i2l3248
  2893                           
  2894                           ;PID.c: 57: err = setpoint - 360 - angle;
  2895  0012B2  0E00               	movlw	0
  2896  0012B4  6E2A               	movwf	___ftadd@f2,c
  2897  0012B6  0EB4               	movlw	180
  2898  0012B8  6E2B               	movwf	___ftadd@f2+1,c
  2899  0012BA  0E43               	movlw	67
  2900  0012BC  6E2C               	movwf	___ftadd@f2+2,c
  2901  0012BE  C042  F027         	movff	calculatePID@angle,___ftadd@f1
  2902  0012C2  C043  F028         	movff	calculatePID@angle+1,___ftadd@f1+1
  2903  0012C6  C044  F029         	movff	calculatePID@angle+2,___ftadd@f1+2
  2904  0012CA  EC73  F010         	call	___ftadd	;wreg free
  2905  0012CE  C027  F001         	movff	?___ftadd,___ftneg@f1
  2906  0012D2  C028  F002         	movff	?___ftadd+1,___ftneg@f1+1
  2907  0012D6  C029  F003         	movff	?___ftadd+2,___ftneg@f1+2
  2908  0012DA  EC59  F018         	call	___ftneg	;wreg free
  2909  0012DE  C001  F051         	movff	?___ftneg,_calculatePID$2553
  2910  0012E2  C002  F052         	movff	?___ftneg+1,_calculatePID$2553+1
  2911  0012E6  C003  F053         	movff	?___ftneg+2,_calculatePID$2553+2
  2912                           
  2913                           ;PID.c: 57: err = setpoint - 360 - angle;
  2914  0012EA  C051  F027         	movff	_calculatePID$2553,___ftadd@f1
  2915  0012EE  C052  F028         	movff	_calculatePID$2553+1,___ftadd@f1+1
  2916  0012F2  C053  F029         	movff	_calculatePID$2553+2,___ftadd@f1+2
  2917  0012F6  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2918  0012FA  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2919  0012FE  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2920  001302  EC73  F010         	call	___ftadd	;wreg free
  2921  001306  D184               	goto	L7
  2922  001308                     i2l3248:
  2923                           
  2924                           ;PID.c: 58: else
  2925                           ;PID.c: 59: err = setpoint - angle;
  2926  001308  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2927  00130C  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2928  001310  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2929  001314  EC59  F018         	call	___ftneg	;wreg free
  2930  001318  C001  F027         	movff	?___ftneg,___ftadd@f1
  2931  00131C  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2932  001320  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2933  001324  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2934  001328  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2935  00132C  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2936  001330  EC73  F010         	call	___ftadd	;wreg free
  2937  001334  D16D               	goto	L7
  2938                           
  2939                           ;PID.c: 60: }
  2940                           ;PID.c: 61: }
  2941  001336  D173               	goto	i2l97
  2942  001338                     i2l3250:
  2943                           
  2944                           ;PID.c: 62: else if(((StartAngle - setpoint) <= 180) && ((StartAngle - setpoint) > -180)
      +                          )
  2945  001338  0E00               	movlw	0
  2946  00133A  6E33               	movwf	___ftge@ff1,c
  2947  00133C  0E34               	movlw	52
  2948  00133E  6E34               	movwf	___ftge@ff1+1,c
  2949  001340  0E43               	movlw	67
  2950  001342  6E35               	movwf	___ftge@ff1+2,c
  2951  001344  C057  F02A         	movff	_StartAngle,___ftadd@f2
  2952  001348  C058  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2953  00134C  C059  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2954  001350  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2955  001354  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2956  001358  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2957  00135C  EC59  F018         	call	___ftneg	;wreg free
  2958  001360  C001  F027         	movff	?___ftneg,___ftadd@f1
  2959  001364  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2960  001368  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2961  00136C  EC73  F010         	call	___ftadd	;wreg free
  2962  001370  C027  F036         	movff	?___ftadd,___ftge@ff2
  2963  001374  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2964  001378  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2965  00137C  EC65  F014         	call	___ftge	;wreg free
  2966  001380  A0D8               	btfss	status,0,c
  2967  001382  D14D               	goto	i2l97
  2968  001384  0E00               	movlw	0
  2969  001386  6E33               	movwf	___ftge@ff1,c
  2970  001388  0E34               	movlw	52
  2971  00138A  6E34               	movwf	___ftge@ff1+1,c
  2972  00138C  0EC3               	movlw	195
  2973  00138E  6E35               	movwf	___ftge@ff1+2,c
  2974  001390  C057  F02A         	movff	_StartAngle,___ftadd@f2
  2975  001394  C058  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2976  001398  C059  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2977  00139C  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2978  0013A0  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2979  0013A4  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2980  0013A8  EC59  F018         	call	___ftneg	;wreg free
  2981  0013AC  C001  F027         	movff	?___ftneg,___ftadd@f1
  2982  0013B0  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2983  0013B4  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2984  0013B8  EC73  F010         	call	___ftadd	;wreg free
  2985  0013BC  C027  F036         	movff	?___ftadd,___ftge@ff2
  2986  0013C0  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2987  0013C4  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2988  0013C8  EC65  F014         	call	___ftge	;wreg free
  2989  0013CC  B0D8               	btfsc	status,0,c
  2990  0013CE  D127               	goto	i2l97
  2991                           
  2992                           ;PID.c: 63: {
  2993                           ;PID.c: 64: if(((setpoint - StartAngle) > -180) && (setpoint - StartAngle < 0))
  2994  0013D0  0E00               	movlw	0
  2995  0013D2  6E33               	movwf	___ftge@ff1,c
  2996  0013D4  0E34               	movlw	52
  2997  0013D6  6E34               	movwf	___ftge@ff1+1,c
  2998  0013D8  0EC3               	movlw	195
  2999  0013DA  6E35               	movwf	___ftge@ff1+2,c
  3000  0013DC  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3001  0013E0  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3002  0013E4  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3003  0013E8  C057  F001         	movff	_StartAngle,___ftneg@f1
  3004  0013EC  C058  F002         	movff	_StartAngle+1,___ftneg@f1+1
  3005  0013F0  C059  F003         	movff	_StartAngle+2,___ftneg@f1+2
  3006  0013F4  EC59  F018         	call	___ftneg	;wreg free
  3007  0013F8  C001  F027         	movff	?___ftneg,___ftadd@f1
  3008  0013FC  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3009  001400  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3010  001404  EC73  F010         	call	___ftadd	;wreg free
  3011  001408  C027  F036         	movff	?___ftadd,___ftge@ff2
  3012  00140C  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  3013  001410  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  3014  001414  EC65  F014         	call	___ftge	;wreg free
  3015  001418  B0D8               	btfsc	status,0,c
  3016  00141A  D06B               	goto	i2l3264
  3017  00141C  C057  F001         	movff	_StartAngle,___ftneg@f1
  3018  001420  C058  F002         	movff	_StartAngle+1,___ftneg@f1+1
  3019  001424  C059  F003         	movff	_StartAngle+2,___ftneg@f1+2
  3020  001428  EC59  F018         	call	___ftneg	;wreg free
  3021  00142C  C001  F027         	movff	?___ftneg,___ftadd@f1
  3022  001430  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3023  001434  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3024  001438  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3025  00143C  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3026  001440  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3027  001444  EC73  F010         	call	___ftadd	;wreg free
  3028  001448  AE29               	btfss	?___ftadd+2,7,c
  3029  00144A  D053               	goto	i2l3264
  3030                           
  3031                           ;PID.c: 65: {
  3032                           ;PID.c: 66: if(angle <= StartAngle)
  3033  00144C  C057  F033         	movff	_StartAngle,___ftge@ff1
  3034  001450  C058  F034         	movff	_StartAngle+1,___ftge@ff1+1
  3035  001454  C059  F035         	movff	_StartAngle+2,___ftge@ff1+2
  3036  001458  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  3037  00145C  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  3038  001460  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  3039  001464  EC65  F014         	call	___ftge	;wreg free
  3040  001468  A0D8               	btfss	status,0,c
  3041  00146A  D017               	goto	i2l3262
  3042                           
  3043                           ;PID.c: 67: err = setpoint - angle;
  3044  00146C  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  3045  001470  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  3046  001474  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  3047  001478  EC59  F018         	call	___ftneg	;wreg free
  3048  00147C  C001  F027         	movff	?___ftneg,___ftadd@f1
  3049  001480  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3050  001484  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3051  001488  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3052  00148C  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3053  001490  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3054  001494  EC73  F010         	call	___ftadd	;wreg free
  3055  001498  D0BB               	goto	L7
  3056  00149A                     i2l3262:
  3057                           
  3058                           ;PID.c: 68: else
  3059                           ;PID.c: 69: err = setpoint + 360 - angle;
  3060  00149A  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3061  00149E  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3062  0014A2  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3063  0014A6  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  3064  0014AA  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  3065  0014AE  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  3066  0014B2  EC59  F018         	call	___ftneg	;wreg free
  3067  0014B6  C001  F027         	movff	?___ftneg,___ftadd@f1
  3068  0014BA  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3069  0014BE  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3070  0014C2  EC73  F010         	call	___ftadd	;wreg free
  3071  0014C6  C027  F051         	movff	?___ftadd,_calculatePID$2553
  3072  0014CA  C028  F052         	movff	?___ftadd+1,_calculatePID$2553+1
  3073  0014CE  C029  F053         	movff	?___ftadd+2,_calculatePID$2553+2
  3074                           
  3075                           ;PID.c: 68: else
  3076                           ;PID.c: 69: err = setpoint + 360 - angle;
  3077  0014D2  C051  F027         	movff	_calculatePID$2553,___ftadd@f1
  3078  0014D6  C052  F028         	movff	_calculatePID$2553+1,___ftadd@f1+1
  3079  0014DA  C053  F029         	movff	_calculatePID$2553+2,___ftadd@f1+2
  3080  0014DE  0E00               	movlw	0
  3081  0014E0  6E2A               	movwf	___ftadd@f2,c
  3082  0014E2  0EB4               	movlw	180
  3083  0014E4  6E2B               	movwf	___ftadd@f2+1,c
  3084  0014E6  0E43               	movlw	67
  3085  0014E8  6E2C               	movwf	___ftadd@f2+2,c
  3086  0014EA  EC73  F010         	call	___ftadd	;wreg free
  3087  0014EE  D090               	goto	L7
  3088                           
  3089                           ;PID.c: 70: }
  3090  0014F0  D096               	goto	i2l97
  3091  0014F2                     i2l3264:
  3092                           
  3093                           ;PID.c: 71: else if(((setpoint - StartAngle) < 180) && (setpoint - StartAngle >= 0))
  3094  0014F2  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3095  0014F6  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3096  0014FA  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3097  0014FE  C057  F001         	movff	_StartAngle,___ftneg@f1
  3098  001502  C058  F002         	movff	_StartAngle+1,___ftneg@f1+1
  3099  001506  C059  F003         	movff	_StartAngle+2,___ftneg@f1+2
  3100  00150A  EC59  F018         	call	___ftneg	;wreg free
  3101  00150E  C001  F027         	movff	?___ftneg,___ftadd@f1
  3102  001512  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3103  001516  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3104  00151A  EC73  F010         	call	___ftadd	;wreg free
  3105  00151E  C027  F033         	movff	?___ftadd,___ftge@ff1
  3106  001522  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  3107  001526  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  3108  00152A  0E00               	movlw	0
  3109  00152C  6E36               	movwf	___ftge@ff2,c
  3110  00152E  0E34               	movlw	52
  3111  001530  6E37               	movwf	___ftge@ff2+1,c
  3112  001532  0E43               	movlw	67
  3113  001534  6E38               	movwf	___ftge@ff2+2,c
  3114  001536  EC65  F014         	call	___ftge	;wreg free
  3115  00153A  B0D8               	btfsc	status,0,c
  3116  00153C  D070               	goto	i2l97
  3117  00153E  C057  F001         	movff	_StartAngle,___ftneg@f1
  3118  001542  C058  F002         	movff	_StartAngle+1,___ftneg@f1+1
  3119  001546  C059  F003         	movff	_StartAngle+2,___ftneg@f1+2
  3120  00154A  EC59  F018         	call	___ftneg	;wreg free
  3121  00154E  C001  F027         	movff	?___ftneg,___ftadd@f1
  3122  001552  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3123  001556  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3124  00155A  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3125  00155E  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3126  001562  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3127  001566  EC73  F010         	call	___ftadd	;wreg free
  3128  00156A  BE29               	btfsc	?___ftadd+2,7,c
  3129  00156C  D058               	goto	i2l97
  3130                           
  3131                           ;PID.c: 72: {
  3132                           ;PID.c: 73: if(angle <= StartAngle)
  3133  00156E  C057  F033         	movff	_StartAngle,___ftge@ff1
  3134  001572  C058  F034         	movff	_StartAngle+1,___ftge@ff1+1
  3135  001576  C059  F035         	movff	_StartAngle+2,___ftge@ff1+2
  3136  00157A  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  3137  00157E  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  3138  001582  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  3139  001586  EC65  F014         	call	___ftge	;wreg free
  3140  00158A  A0D8               	btfss	status,0,c
  3141  00158C  D017               	goto	i2l3272
  3142                           
  3143                           ;PID.c: 74: err = setpoint - angle;
  3144  00158E  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  3145  001592  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  3146  001596  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  3147  00159A  EC59  F018         	call	___ftneg	;wreg free
  3148  00159E  C001  F027         	movff	?___ftneg,___ftadd@f1
  3149  0015A2  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3150  0015A6  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3151  0015AA  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3152  0015AE  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3153  0015B2  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3154  0015B6  EC73  F010         	call	___ftadd	;wreg free
  3155  0015BA  D02A               	goto	L7
  3156  0015BC                     i2l3272:
  3157                           
  3158                           ;PID.c: 75: else
  3159                           ;PID.c: 76: err = setpoint - 360 - angle;
  3160  0015BC  0E00               	movlw	0
  3161  0015BE  6E2A               	movwf	___ftadd@f2,c
  3162  0015C0  0EB4               	movlw	180
  3163  0015C2  6E2B               	movwf	___ftadd@f2+1,c
  3164  0015C4  0E43               	movlw	67
  3165  0015C6  6E2C               	movwf	___ftadd@f2+2,c
  3166  0015C8  C042  F027         	movff	calculatePID@angle,___ftadd@f1
  3167  0015CC  C043  F028         	movff	calculatePID@angle+1,___ftadd@f1+1
  3168  0015D0  C044  F029         	movff	calculatePID@angle+2,___ftadd@f1+2
  3169  0015D4  EC73  F010         	call	___ftadd	;wreg free
  3170  0015D8  C027  F001         	movff	?___ftadd,___ftneg@f1
  3171  0015DC  C028  F002         	movff	?___ftadd+1,___ftneg@f1+1
  3172  0015E0  C029  F003         	movff	?___ftadd+2,___ftneg@f1+2
  3173  0015E4  EC59  F018         	call	___ftneg	;wreg free
  3174  0015E8  C001  F051         	movff	?___ftneg,_calculatePID$2553
  3175  0015EC  C002  F052         	movff	?___ftneg+1,_calculatePID$2553+1
  3176  0015F0  C003  F053         	movff	?___ftneg+2,_calculatePID$2553+2
  3177                           
  3178                           ;PID.c: 75: else
  3179                           ;PID.c: 76: err = setpoint - 360 - angle;
  3180  0015F4  C051  F027         	movff	_calculatePID$2553,___ftadd@f1
  3181  0015F8  C052  F028         	movff	_calculatePID$2553+1,___ftadd@f1+1
  3182  0015FC  C053  F029         	movff	_calculatePID$2553+2,___ftadd@f1+2
  3183  001600  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3184  001604  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3185  001608  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3186  00160C  EC73  F010         	call	___ftadd	;wreg free
  3187  001610                     L7:
  3188  001610  C027  F05A         	movff	?___ftadd,_err
  3189  001614  C028  F05B         	movff	?___ftadd+1,_err+1
  3190  001618  C029  F05C         	movff	?___ftadd+2,_err+2
  3191  00161C  D000               	goto	i2l97
  3192  00161E                     i2l97:
  3193                           
  3194                           ;PID.c: 77: }
  3195                           ;PID.c: 78: }
  3196                           ;PID.c: 80: intErr += err;
  3197  00161E  C075  F027         	movff	_intErr,___ftadd@f1
  3198  001622  C076  F028         	movff	_intErr+1,___ftadd@f1+1
  3199  001626  C077  F029         	movff	_intErr+2,___ftadd@f1+2
  3200  00162A  C05A  F02A         	movff	_err,___ftadd@f2
  3201  00162E  C05B  F02B         	movff	_err+1,___ftadd@f2+1
  3202  001632  C05C  F02C         	movff	_err+2,___ftadd@f2+2
  3203  001636  EC73  F010         	call	___ftadd	;wreg free
  3204  00163A  C027  F075         	movff	?___ftadd,_intErr
  3205  00163E  C028  F076         	movff	?___ftadd+1,_intErr+1
  3206  001642  C029  F077         	movff	?___ftadd+2,_intErr+2
  3207                           
  3208                           ;PID.c: 81: derErr = err - prevErr;
  3209  001646  C078  F001         	movff	_prevErr,___ftneg@f1
  3210  00164A  C079  F002         	movff	_prevErr+1,___ftneg@f1+1
  3211  00164E  C07A  F003         	movff	_prevErr+2,___ftneg@f1+2
  3212  001652  EC59  F018         	call	___ftneg	;wreg free
  3213  001656  C001  F027         	movff	?___ftneg,___ftadd@f1
  3214  00165A  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3215  00165E  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3216  001662  C05A  F02A         	movff	_err,___ftadd@f2
  3217  001666  C05B  F02B         	movff	_err+1,___ftadd@f2+1
  3218  00166A  C05C  F02C         	movff	_err+2,___ftadd@f2+2
  3219  00166E  EC73  F010         	call	___ftadd	;wreg free
  3220  001672  C027  F048         	movff	?___ftadd,calculatePID@derErr
  3221  001676  C028  F049         	movff	?___ftadd+1,calculatePID@derErr+1
  3222  00167A  C029  F04A         	movff	?___ftadd+2,calculatePID@derErr+2
  3223                           
  3224                           ;PID.c: 83: motorInput = Kp * err + (Ki * intErr * loopTime) + (Kd * (derErr/loopTime));
  3225  00167E  C075  F01B         	movff	_intErr,___ftmul@f2
  3226  001682  C076  F01C         	movff	_intErr+1,___ftmul@f2+1
  3227  001686  C077  F01D         	movff	_intErr+2,___ftmul@f2+2
  3228  00168A  C069  F018         	movff	_Ki,___ftmul@f1
  3229  00168E  C06A  F019         	movff	_Ki+1,___ftmul@f1+1
  3230  001692  C06B  F01A         	movff	_Ki+2,___ftmul@f1+2
  3231  001696  ECA2  F012         	call	___ftmul	;wreg free
  3232  00169A  C018  F04B         	movff	?___ftmul,_calculatePID$2554
  3233  00169E  C019  F04C         	movff	?___ftmul+1,_calculatePID$2554+1
  3234  0016A2  C01A  F04D         	movff	?___ftmul+2,_calculatePID$2554+2
  3235                           
  3236                           ;PID.c: 83: motorInput = Kp * err + (Ki * intErr * loopTime) + (Kd * (derErr/loopTime));
  3237  0016A6  C0BE  F01B         	movff	_loopTime,___ftmul@f2
  3238  0016AA  C0BF  F01C         	movff	_loopTime+1,___ftmul@f2+1
  3239  0016AE  C0C0  F01D         	movff	_loopTime+2,___ftmul@f2+2
  3240  0016B2  C04B  F018         	movff	_calculatePID$2554,___ftmul@f1
  3241  0016B6  C04C  F019         	movff	_calculatePID$2554+1,___ftmul@f1+1
  3242  0016BA  C04D  F01A         	movff	_calculatePID$2554+2,___ftmul@f1+2
  3243  0016BE  ECA2  F012         	call	___ftmul	;wreg free
  3244  0016C2  C018  F02A         	movff	?___ftmul,___ftadd@f2
  3245  0016C6  C019  F02B         	movff	?___ftmul+1,___ftadd@f2+1
  3246  0016CA  C01A  F02C         	movff	?___ftmul+2,___ftadd@f2+2
  3247  0016CE  C05A  F01B         	movff	_err,___ftmul@f2
  3248  0016D2  C05B  F01C         	movff	_err+1,___ftmul@f2+1
  3249  0016D6  C05C  F01D         	movff	_err+2,___ftmul@f2+2
  3250  0016DA  C06C  F018         	movff	_Kp,___ftmul@f1
  3251  0016DE  C06D  F019         	movff	_Kp+1,___ftmul@f1+1
  3252  0016E2  C06E  F01A         	movff	_Kp+2,___ftmul@f1+2
  3253  0016E6  ECA2  F012         	call	___ftmul	;wreg free
  3254  0016EA  C018  F027         	movff	?___ftmul,___ftadd@f1
  3255  0016EE  C019  F028         	movff	?___ftmul+1,___ftadd@f1+1
  3256  0016F2  C01A  F029         	movff	?___ftmul+2,___ftadd@f1+2
  3257  0016F6  EC73  F010         	call	___ftadd	;wreg free
  3258  0016FA  C027  F04E         	movff	?___ftadd,_calculatePID$2555
  3259  0016FE  C028  F04F         	movff	?___ftadd+1,_calculatePID$2555+1
  3260  001702  C029  F050         	movff	?___ftadd+2,_calculatePID$2555+2
  3261                           
  3262                           ;PID.c: 83: motorInput = Kp * err + (Ki * intErr * loopTime) + (Kd * (derErr/loopTime));
  3263  001706  C066  F01B         	movff	_Kd,___ftmul@f2
  3264  00170A  C067  F01C         	movff	_Kd+1,___ftmul@f2+1
  3265  00170E  C068  F01D         	movff	_Kd+2,___ftmul@f2+2
  3266  001712  C0BE  F00C         	movff	_loopTime,___ftdiv@f2
  3267  001716  C0BF  F00D         	movff	_loopTime+1,___ftdiv@f2+1
  3268  00171A  C0C0  F00E         	movff	_loopTime+2,___ftdiv@f2+2
  3269  00171E  C048  F009         	movff	calculatePID@derErr,___ftdiv@f1
  3270  001722  C049  F00A         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  3271  001726  C04A  F00B         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  3272  00172A  EC91  F013         	call	___ftdiv	;wreg free
  3273  00172E  C009  F018         	movff	?___ftdiv,___ftmul@f1
  3274  001732  C00A  F019         	movff	?___ftdiv+1,___ftmul@f1+1
  3275  001736  C00B  F01A         	movff	?___ftdiv+2,___ftmul@f1+2
  3276  00173A  ECA2  F012         	call	___ftmul	;wreg free
  3277  00173E  C018  F02A         	movff	?___ftmul,___ftadd@f2
  3278  001742  C019  F02B         	movff	?___ftmul+1,___ftadd@f2+1
  3279  001746  C01A  F02C         	movff	?___ftmul+2,___ftadd@f2+2
  3280  00174A  C04E  F027         	movff	_calculatePID$2555,___ftadd@f1
  3281  00174E  C04F  F028         	movff	_calculatePID$2555+1,___ftadd@f1+1
  3282  001752  C050  F029         	movff	_calculatePID$2555+2,___ftadd@f1+2
  3283  001756  EC73  F010         	call	___ftadd	;wreg free
  3284  00175A  C027  F033         	movff	?___ftadd,___fttol@f1
  3285  00175E  C028  F034         	movff	?___ftadd+1,___fttol@f1+1
  3286  001762  C029  F035         	movff	?___ftadd+2,___fttol@f1+2
  3287  001766  EC1E  F013         	call	___fttol	;wreg free
  3288  00176A  C033  F07B         	movff	?___fttol,_motorInput
  3289  00176E  C034  F07C         	movff	?___fttol+1,_motorInput+1
  3290                           
  3291                           ;PID.c: 85: if(motorInput > 255)
  3292  001772  0100               	movlb	0	; () banked
  3293  001774  BF7C               	btfsc	(_motorInput+1)& (0+255),7,b
  3294  001776  D009               	goto	i2l3278
  3295  001778  0100               	movlb	0	; () banked
  3296  00177A  057C               	decf	(_motorInput+1)& (0+255),w,b
  3297  00177C  A0D8               	btfss	status,0,c
  3298  00177E  D005               	goto	i2l3278
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;PID.c: 86: motorInput = 255;
  3302  001780  0E00               	movlw	0
  3303  001782  0100               	movlb	0	; () banked
  3304  001784  6F7C               	movwf	(_motorInput+1)& (0+255),b
  3305  001786  697B               	setf	_motorInput& (0+255),b
  3306  001788  D010               	goto	i2l3282
  3307  00178A                     i2l3278:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;PID.c: 87: else if (motorInput < -255)
  3311  00178A  0100               	movlb	0	; () banked
  3312  00178C  AF7C               	btfss	(_motorInput+1)& (0+255),7,b
  3313  00178E  D00D               	goto	i2l3282
  3314  001790  0100               	movlb	0	; () banked
  3315  001792  057B               	decf	_motorInput& (0+255),w,b
  3316  001794  0EFF               	movlw	255
  3317  001796  0100               	movlb	0	; () banked
  3318  001798  597C               	subwfb	(_motorInput+1)& (0+255),w,b
  3319  00179A  B0D8               	btfsc	status,0,c
  3320  00179C  D006               	goto	i2l3282
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;PID.c: 88: motorInput = -255;
  3324  00179E  0EFF               	movlw	255
  3325  0017A0  0100               	movlb	0	; () banked
  3326  0017A2  6F7C               	movwf	(_motorInput+1)& (0+255),b
  3327  0017A4  0E01               	movlw	1
  3328  0017A6  6F7B               	movwf	_motorInput& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331  0017A8  D000               	goto	i2l3282
  3332  0017AA                     i2l3282:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;PID.c: 90: prevErr = err;
  3336  0017AA  C05A  F078         	movff	_err,_prevErr
  3337  0017AE  C05B  F079         	movff	_err+1,_prevErr+1
  3338  0017B2  C05C  F07A         	movff	_err+2,_prevErr+2
  3339                           
  3340                           ; BSR set to: 0
  3341  0017B6  0012               	return		;funcret
  3342  0017B8                     __end_of_calculatePID:
  3343                           	opt stack 0
  3344                           pclatu	equ	0xFFB
  3345                           pclath	equ	0xFFA
  3346                           tblptru	equ	0xFF8
  3347                           tblptrh	equ	0xFF7
  3348                           tblptrl	equ	0xFF6
  3349                           tablat	equ	0xFF5
  3350                           prodh	equ	0xFF4
  3351                           prodl	equ	0xFF3
  3352                           intcon	equ	0xFF2
  3353                           indf0	equ	0xFEF
  3354                           postinc0	equ	0xFEE
  3355                           fsr0h	equ	0xFEA
  3356                           fsr0l	equ	0xFE9
  3357                           wreg	equ	0xFE8
  3358                           fsr1h	equ	0xFE2
  3359                           fsr1l	equ	0xFE1
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function ___ftadd *****************
  3365 ;; Defined at:
  3366 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  f1              3   38[COMRAM] float 
  3369 ;;  f2              3   41[COMRAM] float 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  exp1            1   49[COMRAM] unsigned char 
  3372 ;;  exp2            1   48[COMRAM] unsigned char 
  3373 ;;  sign            1   47[COMRAM] unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  3   38[COMRAM] float 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3383 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;Total ram usage:       12 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    1
  3390 ;; This function calls:
  3391 ;;		___ftpack
  3392 ;; This function is called by:
  3393 ;;		_calculatePID
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text20
  3398  0020E6                     __ptext20:
  3399                           	opt stack 0
  3400  0020E6                     ___ftadd:
  3401                           	opt stack 21
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;incstack = 0
  3405  0020E6  C029  F02D         	movff	___ftadd@f1+2,??___ftadd
  3406  0020EA  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  3407  0020EC  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  3408  0020EE  3428               	rlcf	___ftadd@f1+1,w,c
  3409  0020F0  362D               	rlcf	??___ftadd& (0+255),f,c
  3410  0020F2  E301               	bnc	u283_41
  3411  0020F4  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  3412  0020F6                     u283_41:
  3413  0020F6  502D               	movf	??___ftadd,w,c
  3414  0020F8  6E32               	movwf	___ftadd@exp1,c
  3415  0020FA  C02C  F02D         	movff	___ftadd@f2+2,??___ftadd
  3416  0020FE  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  3417  002100  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  3418  002102  342B               	rlcf	___ftadd@f2+1,w,c
  3419  002104  362D               	rlcf	??___ftadd& (0+255),f,c
  3420  002106  E301               	bnc	u284_41
  3421  002108  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  3422  00210A                     u284_41:
  3423  00210A  502D               	movf	??___ftadd,w,c
  3424  00210C  6E31               	movwf	___ftadd@exp2,c
  3425  00210E  5032               	movf	___ftadd@exp1,w,c
  3426  002110  B4D8               	btfsc	status,2,c
  3427  002112  D00B               	goto	i2l917
  3428  002114  5031               	movf	___ftadd@exp2,w,c
  3429  002116  5C32               	subwf	___ftadd@exp1,w,c
  3430  002118  B0D8               	btfsc	status,0,c
  3431  00211A  D00E               	goto	i2l3018
  3432  00211C  5032               	movf	___ftadd@exp1,w,c
  3433  00211E  0800               	sublw	0
  3434  002120  2431               	addwf	___ftadd@exp2,w,c
  3435  002122  6E2D               	movwf	??___ftadd& (0+255),c
  3436  002124  0E18               	movlw	24
  3437  002126  642D               	cpfsgt	??___ftadd,c
  3438  002128  D007               	goto	i2l3018
  3439  00212A                     i2l917:
  3440  00212A  C02A  F027         	movff	___ftadd@f2,?___ftadd
  3441  00212E  C02B  F028         	movff	___ftadd@f2+1,?___ftadd+1
  3442  002132  C02C  F029         	movff	___ftadd@f2+2,?___ftadd+2
  3443  002136  D0B8               	goto	i2l918
  3444  002138                     i2l3018:
  3445  002138  5031               	movf	___ftadd@exp2,w,c
  3446  00213A  B4D8               	btfsc	status,2,c
  3447  00213C  D00B               	goto	i2l921
  3448  00213E  5032               	movf	___ftadd@exp1,w,c
  3449  002140  5C31               	subwf	___ftadd@exp2,w,c
  3450  002142  B0D8               	btfsc	status,0,c
  3451  002144  D00E               	goto	i2l3024
  3452  002146  5031               	movf	___ftadd@exp2,w,c
  3453  002148  0800               	sublw	0
  3454  00214A  2432               	addwf	___ftadd@exp1,w,c
  3455  00214C  6E2D               	movwf	??___ftadd& (0+255),c
  3456  00214E  0E18               	movlw	24
  3457  002150  642D               	cpfsgt	??___ftadd,c
  3458  002152  D007               	goto	i2l3024
  3459  002154                     i2l921:
  3460  002154  C027  F027         	movff	___ftadd@f1,?___ftadd
  3461  002158  C028  F028         	movff	___ftadd@f1+1,?___ftadd+1
  3462  00215C  C029  F029         	movff	___ftadd@f1+2,?___ftadd+2
  3463  002160  D0A3               	goto	i2l918
  3464  002162                     i2l3024:
  3465  002162  0E06               	movlw	6
  3466  002164  6E30               	movwf	___ftadd@sign,c
  3467  002166  AE29               	btfss	___ftadd@f1+2,7,c
  3468  002168  D002               	goto	i2l3030
  3469  00216A  8E30               	bsf	___ftadd@sign,7,c
  3470  00216C  D000               	goto	i2l3030
  3471  00216E                     i2l3030:
  3472  00216E  BE2C               	btfsc	___ftadd@f2+2,7,c
  3473  002170  8C30               	bsf	___ftadd@sign,6,c
  3474  002172  8E28               	bsf	___ftadd@f1+1,7,c
  3475  002174  0EFF               	movlw	255
  3476  002176  1627               	andwf	___ftadd@f1,f,c
  3477  002178  0EFF               	movlw	255
  3478  00217A  1628               	andwf	___ftadd@f1+1,f,c
  3479  00217C  0E00               	movlw	0
  3480  00217E  1629               	andwf	___ftadd@f1+2,f,c
  3481  002180  8E2B               	bsf	___ftadd@f2+1,7,c
  3482  002182  0EFF               	movlw	255
  3483  002184  162A               	andwf	___ftadd@f2,f,c
  3484  002186  0EFF               	movlw	255
  3485  002188  162B               	andwf	___ftadd@f2+1,f,c
  3486  00218A  0E00               	movlw	0
  3487  00218C  162C               	andwf	___ftadd@f2+2,f,c
  3488  00218E  5031               	movf	___ftadd@exp2,w,c
  3489  002190  5C32               	subwf	___ftadd@exp1,w,c
  3490  002192  B0D8               	btfsc	status,0,c
  3491  002194  D01E               	goto	i2l3050
  3492  002196                     i2l3040:
  3493  002196  90D8               	bcf	status,0,c
  3494  002198  362A               	rlcf	___ftadd@f2,f,c
  3495  00219A  362B               	rlcf	___ftadd@f2+1,f,c
  3496  00219C  362C               	rlcf	___ftadd@f2+2,f,c
  3497  00219E  0631               	decf	___ftadd@exp2,f,c
  3498  0021A0  5032               	movf	___ftadd@exp1,w,c
  3499  0021A2  1831               	xorwf	___ftadd@exp2,w,c
  3500  0021A4  B4D8               	btfsc	status,2,c
  3501  0021A6  D00F               	goto	i2l3048
  3502  0021A8  0630               	decf	___ftadd@sign,f,c
  3503  0021AA  C030  F02D         	movff	___ftadd@sign,??___ftadd
  3504  0021AE  0E07               	movlw	7
  3505  0021B0  162D               	andwf	??___ftadd,f,c
  3506  0021B2  B4D8               	btfsc	status,2,c
  3507  0021B4  D008               	goto	i2l3048
  3508  0021B6  D7EF               	goto	i2l3040
  3509  0021B8  D006               	goto	i2l3048
  3510  0021BA                     i2l3046:
  3511  0021BA  90D8               	bcf	status,0,c
  3512  0021BC  3229               	rrcf	___ftadd@f1+2,f,c
  3513  0021BE  3228               	rrcf	___ftadd@f1+1,f,c
  3514  0021C0  3227               	rrcf	___ftadd@f1,f,c
  3515  0021C2  2A32               	incf	___ftadd@exp1,f,c
  3516  0021C4  D000               	goto	i2l3048
  3517  0021C6                     i2l3048:
  3518  0021C6  5031               	movf	___ftadd@exp2,w,c
  3519  0021C8  1832               	xorwf	___ftadd@exp1,w,c
  3520  0021CA  B4D8               	btfsc	status,2,c
  3521  0021CC  D024               	goto	i2l932
  3522  0021CE  D7F5               	goto	i2l3046
  3523  0021D0  D022               	goto	i2l932
  3524  0021D2                     i2l3050:
  3525  0021D2  5032               	movf	___ftadd@exp1,w,c
  3526  0021D4  5C31               	subwf	___ftadd@exp2,w,c
  3527  0021D6  B0D8               	btfsc	status,0,c
  3528  0021D8  D01E               	goto	i2l932
  3529  0021DA                     i2l3052:
  3530  0021DA  90D8               	bcf	status,0,c
  3531  0021DC  3627               	rlcf	___ftadd@f1,f,c
  3532  0021DE  3628               	rlcf	___ftadd@f1+1,f,c
  3533  0021E0  3629               	rlcf	___ftadd@f1+2,f,c
  3534  0021E2  0632               	decf	___ftadd@exp1,f,c
  3535  0021E4  5032               	movf	___ftadd@exp1,w,c
  3536  0021E6  1831               	xorwf	___ftadd@exp2,w,c
  3537  0021E8  B4D8               	btfsc	status,2,c
  3538  0021EA  D00F               	goto	i2l3060
  3539  0021EC  0630               	decf	___ftadd@sign,f,c
  3540  0021EE  C030  F02D         	movff	___ftadd@sign,??___ftadd
  3541  0021F2  0E07               	movlw	7
  3542  0021F4  162D               	andwf	??___ftadd,f,c
  3543  0021F6  B4D8               	btfsc	status,2,c
  3544  0021F8  D008               	goto	i2l3060
  3545  0021FA  D7EF               	goto	i2l3052
  3546  0021FC  D006               	goto	i2l3060
  3547  0021FE                     i2l3058:
  3548  0021FE  90D8               	bcf	status,0,c
  3549  002200  322C               	rrcf	___ftadd@f2+2,f,c
  3550  002202  322B               	rrcf	___ftadd@f2+1,f,c
  3551  002204  322A               	rrcf	___ftadd@f2,f,c
  3552  002206  2A31               	incf	___ftadd@exp2,f,c
  3553  002208  D000               	goto	i2l3060
  3554  00220A                     i2l3060:
  3555  00220A  5031               	movf	___ftadd@exp2,w,c
  3556  00220C  1832               	xorwf	___ftadd@exp1,w,c
  3557  00220E  B4D8               	btfsc	status,2,c
  3558  002210  D002               	goto	i2l932
  3559  002212  D7F5               	goto	i2l3058
  3560  002214  D000               	goto	i2l932
  3561  002216                     i2l932:
  3562  002216  AE30               	btfss	___ftadd@sign,7,c
  3563  002218  D00C               	goto	i2l941
  3564  00221A  0EFF               	movlw	255
  3565  00221C  1A27               	xorwf	___ftadd@f1,f,c
  3566  00221E  0EFF               	movlw	255
  3567  002220  1A28               	xorwf	___ftadd@f1+1,f,c
  3568  002222  0EFF               	movlw	255
  3569  002224  1A29               	xorwf	___ftadd@f1+2,f,c
  3570  002226  0E01               	movlw	1
  3571  002228  2627               	addwf	___ftadd@f1,f,c
  3572  00222A  0E00               	movlw	0
  3573  00222C  2228               	addwfc	___ftadd@f1+1,f,c
  3574  00222E  0E00               	movlw	0
  3575  002230  2229               	addwfc	___ftadd@f1+2,f,c
  3576  002232                     i2l941:
  3577  002232  AC30               	btfss	___ftadd@sign,6,c
  3578  002234  D00D               	goto	i2l3066
  3579  002236  0EFF               	movlw	255
  3580  002238  1A2A               	xorwf	___ftadd@f2,f,c
  3581  00223A  0EFF               	movlw	255
  3582  00223C  1A2B               	xorwf	___ftadd@f2+1,f,c
  3583  00223E  0EFF               	movlw	255
  3584  002240  1A2C               	xorwf	___ftadd@f2+2,f,c
  3585  002242  0E01               	movlw	1
  3586  002244  262A               	addwf	___ftadd@f2,f,c
  3587  002246  0E00               	movlw	0
  3588  002248  222B               	addwfc	___ftadd@f2+1,f,c
  3589  00224A  0E00               	movlw	0
  3590  00224C  222C               	addwfc	___ftadd@f2+2,f,c
  3591  00224E  D000               	goto	i2l3066
  3592  002250                     i2l3066:
  3593  002250  0E00               	movlw	0
  3594  002252  6E30               	movwf	___ftadd@sign,c
  3595  002254  5027               	movf	___ftadd@f1,w,c
  3596  002256  262A               	addwf	___ftadd@f2,f,c
  3597  002258  5028               	movf	___ftadd@f1+1,w,c
  3598  00225A  222B               	addwfc	___ftadd@f2+1,f,c
  3599  00225C  5029               	movf	___ftadd@f1+2,w,c
  3600  00225E  222C               	addwfc	___ftadd@f2+2,f,c
  3601  002260  AE2C               	btfss	___ftadd@f2+2,7,c
  3602  002262  D00F               	goto	i2l3076
  3603  002264  0EFF               	movlw	255
  3604  002266  1A2A               	xorwf	___ftadd@f2,f,c
  3605  002268  0EFF               	movlw	255
  3606  00226A  1A2B               	xorwf	___ftadd@f2+1,f,c
  3607  00226C  0EFF               	movlw	255
  3608  00226E  1A2C               	xorwf	___ftadd@f2+2,f,c
  3609  002270  0E01               	movlw	1
  3610  002272  262A               	addwf	___ftadd@f2,f,c
  3611  002274  0E00               	movlw	0
  3612  002276  222B               	addwfc	___ftadd@f2+1,f,c
  3613  002278  0E00               	movlw	0
  3614  00227A  222C               	addwfc	___ftadd@f2+2,f,c
  3615  00227C  0E01               	movlw	1
  3616  00227E  6E30               	movwf	___ftadd@sign,c
  3617  002280  D000               	goto	i2l3076
  3618  002282                     i2l3076:
  3619  002282  C02A  F001         	movff	___ftadd@f2,___ftpack@arg
  3620  002286  C02B  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3621  00228A  C02C  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3622  00228E  C032  F004         	movff	___ftadd@exp1,___ftpack@exp
  3623  002292  C030  F005         	movff	___ftadd@sign,___ftpack@sign
  3624  002296  EC02  F014         	call	___ftpack	;wreg free
  3625  00229A  C001  F027         	movff	?___ftpack,?___ftadd
  3626  00229E  C002  F028         	movff	?___ftpack+1,?___ftadd+1
  3627  0022A2  C003  F029         	movff	?___ftpack+2,?___ftadd+2
  3628  0022A6  D000               	goto	i2l918
  3629  0022A8                     i2l918:
  3630  0022A8  0012               	return		;funcret
  3631  0022AA                     __end_of___ftadd:
  3632                           	opt stack 0
  3633                           pclatu	equ	0xFFB
  3634                           pclath	equ	0xFFA
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           indf0	equ	0xFEF
  3643                           postinc0	equ	0xFEE
  3644                           fsr0h	equ	0xFEA
  3645                           fsr0l	equ	0xFE9
  3646                           wreg	equ	0xFE8
  3647                           fsr1h	equ	0xFE2
  3648                           fsr1l	equ	0xFE1
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _ReadRTDpos *****************
  3654 ;; Defined at:
  3655 ;;		line 35 in file "ResolverToDigital.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  FullPosition    2    8[COMRAM] unsigned int 
  3660 ;;  helloworld      2    0        unsigned int 
  3661 ;;  x               1   10[COMRAM] unsigned char 
  3662 ;;  LowPosition     1    7[COMRAM] unsigned char 
  3663 ;;  HighPosition    1    6[COMRAM] unsigned char 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  2    1[COMRAM] unsigned int 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3673 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;Total ram usage:       10 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    1
  3680 ;; This function calls:
  3681 ;;		i2_Delay10TCYx
  3682 ;; This function is called by:
  3683 ;;		_TMR0Int
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text21
  3688  002C86                     __ptext21:
  3689                           	opt stack 0
  3690  002C86                     _ReadRTDpos:
  3691                           	opt stack 22
  3692                           
  3693                           ;ResolverToDigital.c: 37: unsigned char x;
  3694                           ;ResolverToDigital.c: 38: unsigned int FullPosition, helloworld;
  3695                           ;ResolverToDigital.c: 39: unsigned char HighPosition, LowPosition;
  3696                           ;ResolverToDigital.c: 41: PORTEbits.RE1 = 1;
  3697                           
  3698                           ;incstack = 0
  3699  002C86  8284               	bsf	3972,1,c	;volatile
  3700                           
  3701                           ;ResolverToDigital.c: 42: PORTEbits.RE0 = 0;
  3702  002C88  9084               	bcf	3972,0,c	;volatile
  3703                           
  3704                           ;ResolverToDigital.c: 43: for(x = 0; x < 8; x++)
  3705  002C8A  0E00               	movlw	0
  3706  002C8C  6E0B               	movwf	ReadRTDpos@x,c
  3707  002C8E  D003               	goto	i2l3294
  3708  002C90  D005               	goto	i2l380
  3709  002C92                     i2l379:
  3710                           
  3711                           ;ResolverToDigital.c: 44: __nop();
  3712  002C92  F000               	nop	
  3713  002C94  2A0B               	incf	ReadRTDpos@x,f,c
  3714  002C96                     i2l3294:
  3715  002C96  0E07               	movlw	7
  3716  002C98  640B               	cpfsgt	ReadRTDpos@x,c
  3717  002C9A  D7FB               	goto	i2l379
  3718  002C9C                     i2l380:
  3719                           
  3720                           ;ResolverToDigital.c: 45: PORTEbits.RE2 = 1;
  3721  002C9C  8484               	bsf	3972,2,c	;volatile
  3722                           
  3723                           ;ResolverToDigital.c: 46: PORTEbits.RE2 = 0;
  3724  002C9E  9484               	bcf	3972,2,c	;volatile
  3725                           
  3726                           ;ResolverToDigital.c: 47: Delay10TCYx(1);
  3727  002CA0  0E01               	movlw	1
  3728  002CA2  ECFB  F018         	call	i2_Delay10TCYx
  3729                           
  3730                           ;ResolverToDigital.c: 48: HighPosition = PORTH;
  3731  002CA6  CF87 F007          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3732                           
  3733                           ;ResolverToDigital.c: 49: LowPosition = PORTD;
  3734  002CAA  CF83 F008          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3735                           
  3736                           ;ResolverToDigital.c: 50: PORTEbits.RE2 = 1;
  3737  002CAE  8484               	bsf	3972,2,c	;volatile
  3738                           
  3739                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 1;
  3740  002CB0  8084               	bsf	3972,0,c	;volatile
  3741                           
  3742                           ;ResolverToDigital.c: 52: FullPosition = LowPosition;
  3743  002CB2  C008  F009         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3744  002CB6  6A0A               	clrf	ReadRTDpos@FullPosition+1,c
  3745                           
  3746                           ;ResolverToDigital.c: 53: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3747  002CB8  C007  F004         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3748  002CBC  0E0F               	movlw	15
  3749  002CBE  1604               	andwf	??_ReadRTDpos,f,c
  3750  002CC0  5004               	movf	??_ReadRTDpos,w,c
  3751  002CC2  6E06               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3752  002CC4  6A05               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3753  002CC6  5009               	movf	ReadRTDpos@FullPosition,w,c
  3754  002CC8  1005               	iorwf	??_ReadRTDpos+1,w,c
  3755  002CCA  6E09               	movwf	ReadRTDpos@FullPosition,c
  3756  002CCC  500A               	movf	ReadRTDpos@FullPosition+1,w,c
  3757  002CCE  1006               	iorwf	??_ReadRTDpos+2,w,c
  3758  002CD0  6E0A               	movwf	ReadRTDpos@FullPosition+1,c
  3759                           
  3760                           ;ResolverToDigital.c: 54: return FullPosition;
  3761  002CD2  C009  F002         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3762  002CD6  C00A  F003         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3763  002CDA  D000               	goto	i2l381
  3764  002CDC                     i2l381:
  3765  002CDC  0012               	return		;funcret
  3766  002CDE                     __end_of_ReadRTDpos:
  3767                           	opt stack 0
  3768                           pclatu	equ	0xFFB
  3769                           pclath	equ	0xFFA
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           intcon	equ	0xFF2
  3777                           indf0	equ	0xFEF
  3778                           postinc0	equ	0xFEE
  3779                           fsr0h	equ	0xFEA
  3780                           fsr0l	equ	0xFE9
  3781                           wreg	equ	0xFE8
  3782                           fsr1h	equ	0xFE2
  3783                           fsr1l	equ	0xFE1
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _RTD2Angle *****************
  3789 ;; Defined at:
  3790 ;;		line 88 in file "ResolverToDigital.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  RTDAngle        2   38[COMRAM] unsigned int 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  3   38[COMRAM] unsigned int 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        3 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    2
  3811 ;; This function calls:
  3812 ;;		___ftmul
  3813 ;;		___lwtoft
  3814 ;; This function is called by:
  3815 ;;		_TMR0Int
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text22
  3820  002F84                     __ptext22:
  3821                           	opt stack 0
  3822  002F84                     _RTD2Angle:
  3823                           	opt stack 21
  3824                           
  3825                           ;ResolverToDigital.c: 90: return 0.087890625 * RTDAngle;
  3826                           
  3827                           ;incstack = 0
  3828  002F84  C027  F009         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3829  002F88  C028  F00A         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3830  002F8C  EC34  F018         	call	___lwtoft	;wreg free
  3831  002F90  C009  F018         	movff	?___lwtoft,___ftmul@f1
  3832  002F94  C00A  F019         	movff	?___lwtoft+1,___ftmul@f1+1
  3833  002F98  C00B  F01A         	movff	?___lwtoft+2,___ftmul@f1+2
  3834  002F9C  0E00               	movlw	0
  3835  002F9E  6E1B               	movwf	___ftmul@f2,c
  3836  002FA0  0EB4               	movlw	180
  3837  002FA2  6E1C               	movwf	___ftmul@f2+1,c
  3838  002FA4  0E3D               	movlw	61
  3839  002FA6  6E1D               	movwf	___ftmul@f2+2,c
  3840  002FA8  ECA2  F012         	call	___ftmul	;wreg free
  3841  002FAC  C018  F027         	movff	?___ftmul,?_RTD2Angle
  3842  002FB0  C019  F028         	movff	?___ftmul+1,?_RTD2Angle+1
  3843  002FB4  C01A  F029         	movff	?___ftmul+2,?_RTD2Angle+2
  3844  002FB8  D000               	goto	i2l391
  3845  002FBA                     i2l391:
  3846  002FBA  0012               	return		;funcret
  3847  002FBC                     __end_of_RTD2Angle:
  3848                           	opt stack 0
  3849                           pclatu	equ	0xFFB
  3850                           pclath	equ	0xFFA
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           prodh	equ	0xFF4
  3856                           prodl	equ	0xFF3
  3857                           intcon	equ	0xFF2
  3858                           indf0	equ	0xFEF
  3859                           postinc0	equ	0xFEE
  3860                           fsr0h	equ	0xFEA
  3861                           fsr0l	equ	0xFE9
  3862                           wreg	equ	0xFE8
  3863                           fsr1h	equ	0xFE2
  3864                           fsr1l	equ	0xFE1
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function ___lwtoft *****************
  3870 ;; Defined at:
  3871 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  c               2    8[COMRAM] unsigned int 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;		None
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  3    8[COMRAM] float 
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3885 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;Total ram usage:        3 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    1
  3892 ;; This function calls:
  3893 ;;		___ftpack
  3894 ;; This function is called by:
  3895 ;;		_RTD2Angle
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text23
  3900  003068                     __ptext23:
  3901                           	opt stack 0
  3902  003068                     ___lwtoft:
  3903                           	opt stack 21
  3904                           
  3905                           ;incstack = 0
  3906  003068  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3907  00306C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3908  003070  6A03               	clrf	___ftpack@arg+2,c
  3909  003072  0E8E               	movlw	142
  3910  003074  6E04               	movwf	___ftpack@exp,c
  3911  003076  0E00               	movlw	0
  3912  003078  6E05               	movwf	___ftpack@sign,c
  3913  00307A  EC02  F014         	call	___ftpack	;wreg free
  3914  00307E  C001  F009         	movff	?___ftpack,?___lwtoft
  3915  003082  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3916  003086  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3917  00308A  D000               	goto	i2l1124
  3918  00308C                     i2l1124:
  3919  00308C  0012               	return		;funcret
  3920  00308E                     __end_of___lwtoft:
  3921                           	opt stack 0
  3922                           pclatu	equ	0xFFB
  3923                           pclath	equ	0xFFA
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           indf0	equ	0xFEF
  3932                           postinc0	equ	0xFEE
  3933                           fsr0h	equ	0xFEA
  3934                           fsr0l	equ	0xFE9
  3935                           wreg	equ	0xFE8
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942 ;; *************** function _LCDBreakDouble *****************
  3943 ;; Defined at:
  3944 ;;		line 134 in file "LCD.h"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  dubs            3   65[COMRAM] float 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  temp2           2   72[COMRAM] unsigned int 
  3949 ;;  temp1           2   70[COMRAM] unsigned int 
  3950 ;;  tempDub         2   68[COMRAM] unsigned int 
  3951 ;; Return value:  Size  Location     Type
  3952 ;;		None               void
  3953 ;; Registers used:
  3954 ;;		wreg, status,2, status,0, cstack
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3960 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;Total ram usage:        9 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; Hardware stack levels required when called:    4
  3967 ;; This function calls:
  3968 ;;		___ftmul
  3969 ;;		___fttol
  3970 ;;		___lwdiv
  3971 ;;		___lwmod
  3972 ;;		_lcdChar
  3973 ;;		_lcdGoTo
  3974 ;;		i2_lcdCommand
  3975 ;; This function is called by:
  3976 ;;		_TMR0Int
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text24
  3981  0022AA                     __ptext24:
  3982                           	opt stack 0
  3983  0022AA                     _LCDBreakDouble:
  3984                           	opt stack 19
  3985                           
  3986                           ;LCD.h: 136: unsigned int temp1, temp2;
  3987                           ;LCD.h: 137: unsigned int tempDub;
  3988                           ;LCD.h: 139: lcdCommand(0x01);
  3989                           
  3990                           ;incstack = 0
  3991  0022AA  0E01               	movlw	1
  3992  0022AC  EC62  F017         	call	i2_lcdCommand
  3993                           
  3994                           ;LCD.h: 140: lcdGoTo(0x40);
  3995  0022B0  0E40               	movlw	64
  3996  0022B2  EC1B  F019         	call	_lcdGoTo
  3997                           
  3998                           ;LCD.h: 141: tempDub = dubs * 100;
  3999  0022B6  0E00               	movlw	0
  4000  0022B8  6E1B               	movwf	___ftmul@f2,c
  4001  0022BA  0EC8               	movlw	200
  4002  0022BC  6E1C               	movwf	___ftmul@f2+1,c
  4003  0022BE  0E42               	movlw	66
  4004  0022C0  6E1D               	movwf	___ftmul@f2+2,c
  4005  0022C2  C042  F018         	movff	LCDBreakDouble@dubs,___ftmul@f1
  4006  0022C6  C043  F019         	movff	LCDBreakDouble@dubs+1,___ftmul@f1+1
  4007  0022CA  C044  F01A         	movff	LCDBreakDouble@dubs+2,___ftmul@f1+2
  4008  0022CE  ECA2  F012         	call	___ftmul	;wreg free
  4009  0022D2  C018  F033         	movff	?___ftmul,___fttol@f1
  4010  0022D6  C019  F034         	movff	?___ftmul+1,___fttol@f1+1
  4011  0022DA  C01A  F035         	movff	?___ftmul+2,___fttol@f1+2
  4012  0022DE  EC1E  F013         	call	___fttol	;wreg free
  4013  0022E2  C033  F045         	movff	?___fttol,LCDBreakDouble@tempDub
  4014  0022E6  C034  F046         	movff	?___fttol+1,LCDBreakDouble@tempDub+1
  4015                           
  4016                           ;LCD.h: 142: temp1 = tempDub / 10000;
  4017  0022EA  C045  F001         	movff	LCDBreakDouble@tempDub,___lwdiv@dividend
  4018  0022EE  C046  F002         	movff	LCDBreakDouble@tempDub+1,___lwdiv@dividend+1
  4019  0022F2  0E27               	movlw	39
  4020  0022F4  6E04               	movwf	___lwdiv@divisor+1,c
  4021  0022F6  0E10               	movlw	16
  4022  0022F8  6E03               	movwf	___lwdiv@divisor,c
  4023  0022FA  EC8D  F015         	call	___lwdiv	;wreg free
  4024  0022FE  C001  F047         	movff	?___lwdiv,LCDBreakDouble@temp1
  4025  002302  C002  F048         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  4026                           
  4027                           ;LCD.h: 143: temp2 = tempDub % 10000;
  4028  002306  C045  F001         	movff	LCDBreakDouble@tempDub,___lwmod@dividend
  4029  00230A  C046  F002         	movff	LCDBreakDouble@tempDub+1,___lwmod@dividend+1
  4030  00230E  0E27               	movlw	39
  4031  002310  6E04               	movwf	___lwmod@divisor+1,c
  4032  002312  0E10               	movlw	16
  4033  002314  6E03               	movwf	___lwmod@divisor,c
  4034  002316  EC3C  F017         	call	___lwmod	;wreg free
  4035  00231A  C001  F049         	movff	?___lwmod,LCDBreakDouble@temp2
  4036  00231E  C002  F04A         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  4037                           
  4038                           ;LCD.h: 144: if (temp1 != 0)
  4039  002322  5047               	movf	LCDBreakDouble@temp1,w,c
  4040  002324  1048               	iorwf	LCDBreakDouble@temp1+1,w,c
  4041  002326  B4D8               	btfsc	status,2,c
  4042  002328  D004               	goto	i2l54
  4043                           
  4044                           ;LCD.h: 145: lcdChar(temp1 + 0x30);
  4045  00232A  5047               	movf	LCDBreakDouble@temp1,w,c
  4046  00232C  0F30               	addlw	48
  4047  00232E  ECA3  F017         	call	_lcdChar
  4048  002332                     i2l54:
  4049                           
  4050                           ;LCD.h: 146: temp1 = temp2 / 1000;
  4051  002332  C049  F001         	movff	LCDBreakDouble@temp2,___lwdiv@dividend
  4052  002336  C04A  F002         	movff	LCDBreakDouble@temp2+1,___lwdiv@dividend+1
  4053  00233A  0E03               	movlw	3
  4054  00233C  6E04               	movwf	___lwdiv@divisor+1,c
  4055  00233E  0EE8               	movlw	232
  4056  002340  6E03               	movwf	___lwdiv@divisor,c
  4057  002342  EC8D  F015         	call	___lwdiv	;wreg free
  4058  002346  C001  F047         	movff	?___lwdiv,LCDBreakDouble@temp1
  4059  00234A  C002  F048         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  4060                           
  4061                           ;LCD.h: 147: temp2 = temp2 % 1000;
  4062  00234E  C049  F001         	movff	LCDBreakDouble@temp2,___lwmod@dividend
  4063  002352  C04A  F002         	movff	LCDBreakDouble@temp2+1,___lwmod@dividend+1
  4064  002356  0E03               	movlw	3
  4065  002358  6E04               	movwf	___lwmod@divisor+1,c
  4066  00235A  0EE8               	movlw	232
  4067  00235C  6E03               	movwf	___lwmod@divisor,c
  4068  00235E  EC3C  F017         	call	___lwmod	;wreg free
  4069  002362  C001  F049         	movff	?___lwmod,LCDBreakDouble@temp2
  4070  002366  C002  F04A         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  4071                           
  4072                           ;LCD.h: 148: if (temp1 != 0)
  4073  00236A  5047               	movf	LCDBreakDouble@temp1,w,c
  4074  00236C  1048               	iorwf	LCDBreakDouble@temp1+1,w,c
  4075  00236E  B4D8               	btfsc	status,2,c
  4076  002370  D004               	goto	i2l55
  4077                           
  4078                           ;LCD.h: 149: lcdChar(temp1 + 0x30);
  4079  002372  5047               	movf	LCDBreakDouble@temp1,w,c
  4080  002374  0F30               	addlw	48
  4081  002376  ECA3  F017         	call	_lcdChar
  4082  00237A                     i2l55:
  4083                           
  4084                           ;LCD.h: 150: temp1 = temp2 / 100;
  4085  00237A  C049  F001         	movff	LCDBreakDouble@temp2,___lwdiv@dividend
  4086  00237E  C04A  F002         	movff	LCDBreakDouble@temp2+1,___lwdiv@dividend+1
  4087  002382  0E00               	movlw	0
  4088  002384  6E04               	movwf	___lwdiv@divisor+1,c
  4089  002386  0E64               	movlw	100
  4090  002388  6E03               	movwf	___lwdiv@divisor,c
  4091  00238A  EC8D  F015         	call	___lwdiv	;wreg free
  4092  00238E  C001  F047         	movff	?___lwdiv,LCDBreakDouble@temp1
  4093  002392  C002  F048         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  4094                           
  4095                           ;LCD.h: 151: temp2 = temp2 % 100;
  4096  002396  C049  F001         	movff	LCDBreakDouble@temp2,___lwmod@dividend
  4097  00239A  C04A  F002         	movff	LCDBreakDouble@temp2+1,___lwmod@dividend+1
  4098  00239E  0E00               	movlw	0
  4099  0023A0  6E04               	movwf	___lwmod@divisor+1,c
  4100  0023A2  0E64               	movlw	100
  4101  0023A4  6E03               	movwf	___lwmod@divisor,c
  4102  0023A6  EC3C  F017         	call	___lwmod	;wreg free
  4103  0023AA  C001  F049         	movff	?___lwmod,LCDBreakDouble@temp2
  4104  0023AE  C002  F04A         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  4105                           
  4106                           ;LCD.h: 152: lcdChar(temp1 + 0x30);
  4107  0023B2  5047               	movf	LCDBreakDouble@temp1,w,c
  4108  0023B4  0F30               	addlw	48
  4109  0023B6  ECA3  F017         	call	_lcdChar
  4110                           
  4111                           ;LCD.h: 153: lcdChar('.');
  4112  0023BA  0E2E               	movlw	46
  4113  0023BC  ECA3  F017         	call	_lcdChar
  4114                           
  4115                           ;LCD.h: 154: temp1 = temp2 / 10;
  4116  0023C0  C049  F001         	movff	LCDBreakDouble@temp2,___lwdiv@dividend
  4117  0023C4  C04A  F002         	movff	LCDBreakDouble@temp2+1,___lwdiv@dividend+1
  4118  0023C8  0E00               	movlw	0
  4119  0023CA  6E04               	movwf	___lwdiv@divisor+1,c
  4120  0023CC  0E0A               	movlw	10
  4121  0023CE  6E03               	movwf	___lwdiv@divisor,c
  4122  0023D0  EC8D  F015         	call	___lwdiv	;wreg free
  4123  0023D4  C001  F047         	movff	?___lwdiv,LCDBreakDouble@temp1
  4124  0023D8  C002  F048         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  4125                           
  4126                           ;LCD.h: 155: temp2 = temp2 % 10;
  4127  0023DC  C049  F001         	movff	LCDBreakDouble@temp2,___lwmod@dividend
  4128  0023E0  C04A  F002         	movff	LCDBreakDouble@temp2+1,___lwmod@dividend+1
  4129  0023E4  0E00               	movlw	0
  4130  0023E6  6E04               	movwf	___lwmod@divisor+1,c
  4131  0023E8  0E0A               	movlw	10
  4132  0023EA  6E03               	movwf	___lwmod@divisor,c
  4133  0023EC  EC3C  F017         	call	___lwmod	;wreg free
  4134  0023F0  C001  F049         	movff	?___lwmod,LCDBreakDouble@temp2
  4135  0023F4  C002  F04A         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  4136                           
  4137                           ;LCD.h: 156: lcdChar(temp1 + 0x30);
  4138  0023F8  5047               	movf	LCDBreakDouble@temp1,w,c
  4139  0023FA  0F30               	addlw	48
  4140  0023FC  ECA3  F017         	call	_lcdChar
  4141                           
  4142                           ;LCD.h: 157: lcdChar(temp2 + 0x30);
  4143  002400  5049               	movf	LCDBreakDouble@temp2,w,c
  4144  002402  0F30               	addlw	48
  4145  002404  ECA3  F017         	call	_lcdChar
  4146  002408  0012               	return		;funcret
  4147  00240A                     __end_of_LCDBreakDouble:
  4148                           	opt stack 0
  4149                           pclatu	equ	0xFFB
  4150                           pclath	equ	0xFFA
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           intcon	equ	0xFF2
  4158                           indf0	equ	0xFEF
  4159                           postinc0	equ	0xFEE
  4160                           fsr0h	equ	0xFEA
  4161                           fsr0l	equ	0xFE9
  4162                           wreg	equ	0xFE8
  4163                           fsr1h	equ	0xFE2
  4164                           fsr1l	equ	0xFE1
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _lcdGoTo *****************
  4170 ;; Defined at:
  4171 ;;		line 78 in file "LCD.h"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  pos             1    wreg     unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  pos             1    5[COMRAM] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;		None               void
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;Total ram usage:        1 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    3
  4192 ;; This function calls:
  4193 ;;		i2_lcdCommand
  4194 ;; This function is called by:
  4195 ;;		_LCDBreakDouble
  4196 ;;		_lcdPrint
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text25
  4201  003236                     __ptext25:
  4202                           	opt stack 0
  4203  003236                     _lcdGoTo:
  4204                           	opt stack 19
  4205                           
  4206                           ;incstack = 0
  4207                           ;lcdGoTo@pos stored from wreg
  4208  003236  6E06               	movwf	lcdGoTo@pos,c
  4209                           
  4210                           ;LCD.h: 81: lcdCommand(0x80+pos);
  4211  003238  5006               	movf	lcdGoTo@pos,w,c
  4212  00323A  0F80               	addlw	128
  4213  00323C  EC62  F017         	call	i2_lcdCommand
  4214  003240  0012               	return		;funcret
  4215  003242                     __end_of_lcdGoTo:
  4216                           	opt stack 0
  4217                           pclatu	equ	0xFFB
  4218                           pclath	equ	0xFFA
  4219                           tblptru	equ	0xFF8
  4220                           tblptrh	equ	0xFF7
  4221                           tblptrl	equ	0xFF6
  4222                           tablat	equ	0xFF5
  4223                           prodh	equ	0xFF4
  4224                           prodl	equ	0xFF3
  4225                           intcon	equ	0xFF2
  4226                           indf0	equ	0xFEF
  4227                           postinc0	equ	0xFEE
  4228                           fsr0h	equ	0xFEA
  4229                           fsr0l	equ	0xFE9
  4230                           wreg	equ	0xFE8
  4231                           fsr1h	equ	0xFE2
  4232                           fsr1l	equ	0xFE1
  4233                           fsr2h	equ	0xFDA
  4234                           fsr2l	equ	0xFD9
  4235                           status	equ	0xFD8
  4236                           
  4237 ;; *************** function i2_lcdCommand *****************
  4238 ;; Defined at:
  4239 ;;		line 54 in file "LCD.h"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  command         1    wreg     unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  command         1    4[COMRAM] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;		None               void
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;Total ram usage:        1 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    2
  4260 ;; This function calls:
  4261 ;;		i2_Delay10TCYx
  4262 ;;		i2_setGPIO
  4263 ;; This function is called by:
  4264 ;;		_lcdGoTo
  4265 ;;		_LCDBreakDouble
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text26
  4270  002EC4                     __ptext26:
  4271                           	opt stack 0
  4272  002EC4                     i2_lcdCommand:
  4273                           	opt stack 20
  4274                           
  4275                           ;incstack = 0
  4276                           ;i2lcdCommand@command stored from wreg
  4277  002EC4  6E05               	movwf	i2lcdCommand@command,c
  4278                           
  4279                           ;LCD.h: 56: setGPIO(0x12,0x00);
  4280  002EC6  0E00               	movlw	0
  4281  002EC8  6E03               	movwf	i2setGPIO@value,c
  4282  002ECA  0E12               	movlw	18
  4283  002ECC  ECD8  F018         	call	i2_setGPIO
  4284                           
  4285                           ;LCD.h: 57: Delay10TCYx(0);
  4286  002ED0  0E00               	movlw	0
  4287  002ED2  ECFB  F018         	call	i2_Delay10TCYx
  4288                           
  4289                           ;LCD.h: 58: setGPIO(0x13, command);
  4290  002ED6  C005  F003         	movff	i2lcdCommand@command,i2setGPIO@value
  4291  002EDA  0E13               	movlw	19
  4292  002EDC  ECD8  F018         	call	i2_setGPIO
  4293                           
  4294                           ;LCD.h: 59: Delay10TCYx(0);
  4295  002EE0  0E00               	movlw	0
  4296  002EE2  ECFB  F018         	call	i2_Delay10TCYx
  4297                           
  4298                           ;LCD.h: 60: setGPIO(0x12,0x40);
  4299  002EE6  0E40               	movlw	64
  4300  002EE8  6E03               	movwf	i2setGPIO@value,c
  4301  002EEA  0E12               	movlw	18
  4302  002EEC  ECD8  F018         	call	i2_setGPIO
  4303                           
  4304                           ;LCD.h: 61: Delay10TCYx(0);
  4305  002EF0  0E00               	movlw	0
  4306  002EF2  ECFB  F018         	call	i2_Delay10TCYx
  4307                           
  4308                           ;LCD.h: 62: setGPIO(0x12,0x00);
  4309  002EF6  0E00               	movlw	0
  4310  002EF8  6E03               	movwf	i2setGPIO@value,c
  4311  002EFA  0E12               	movlw	18
  4312  002EFC  ECD8  F018         	call	i2_setGPIO
  4313                           
  4314                           ;LCD.h: 63: Delay10TCYx(0);
  4315  002F00  0E00               	movlw	0
  4316  002F02  ECFB  F018         	call	i2_Delay10TCYx
  4317  002F06  0012               	return		;funcret
  4318  002F08                     __end_ofi2_lcdCommand:
  4319                           	opt stack 0
  4320                           pclatu	equ	0xFFB
  4321                           pclath	equ	0xFFA
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           indf0	equ	0xFEF
  4330                           postinc0	equ	0xFEE
  4331                           fsr0h	equ	0xFEA
  4332                           fsr0l	equ	0xFE9
  4333                           wreg	equ	0xFE8
  4334                           fsr1h	equ	0xFE2
  4335                           fsr1l	equ	0xFE1
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function _lcdChar *****************
  4341 ;; Defined at:
  4342 ;;		line 66 in file "LCD.h"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  letter          1    wreg     unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  letter          1    4[COMRAM] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;		None               void
  4349 ;; Registers used:
  4350 ;;		wreg, status,2, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;Total ram usage:        1 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    2
  4363 ;; This function calls:
  4364 ;;		i2_Delay10TCYx
  4365 ;;		i2_setGPIO
  4366 ;; This function is called by:
  4367 ;;		_LCDBreakDouble
  4368 ;;		_lcdWriteString
  4369 ;;		_lcdPrint
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text27
  4374  002F46                     __ptext27:
  4375                           	opt stack 0
  4376  002F46                     _lcdChar:
  4377                           	opt stack 20
  4378                           
  4379                           ;incstack = 0
  4380                           ;lcdChar@letter stored from wreg
  4381  002F46  6E05               	movwf	lcdChar@letter,c
  4382                           
  4383                           ;LCD.h: 68: setGPIO(0x12,0x80);
  4384  002F48  0E80               	movlw	128
  4385  002F4A  6E03               	movwf	i2setGPIO@value,c
  4386  002F4C  0E12               	movlw	18
  4387  002F4E  ECD8  F018         	call	i2_setGPIO
  4388                           
  4389                           ;LCD.h: 69: Delay10TCYx(0);
  4390  002F52  0E00               	movlw	0
  4391  002F54  ECFB  F018         	call	i2_Delay10TCYx
  4392                           
  4393                           ;LCD.h: 70: setGPIO(0x13,letter);
  4394  002F58  C005  F003         	movff	lcdChar@letter,i2setGPIO@value
  4395  002F5C  0E13               	movlw	19
  4396  002F5E  ECD8  F018         	call	i2_setGPIO
  4397                           
  4398                           ;LCD.h: 72: setGPIO(0x12, 0xc0);
  4399  002F62  0EC0               	movlw	192
  4400  002F64  6E03               	movwf	i2setGPIO@value,c
  4401  002F66  0E12               	movlw	18
  4402  002F68  ECD8  F018         	call	i2_setGPIO
  4403                           
  4404                           ;LCD.h: 73: Delay10TCYx(0);
  4405  002F6C  0E00               	movlw	0
  4406  002F6E  ECFB  F018         	call	i2_Delay10TCYx
  4407                           
  4408                           ;LCD.h: 74: setGPIO(0x12,0x00);
  4409  002F72  0E00               	movlw	0
  4410  002F74  6E03               	movwf	i2setGPIO@value,c
  4411  002F76  0E12               	movlw	18
  4412  002F78  ECD8  F018         	call	i2_setGPIO
  4413                           
  4414                           ;LCD.h: 75: Delay10TCYx(0);
  4415  002F7C  0E00               	movlw	0
  4416  002F7E  ECFB  F018         	call	i2_Delay10TCYx
  4417  002F82  0012               	return		;funcret
  4418  002F84                     __end_of_lcdChar:
  4419                           	opt stack 0
  4420                           pclatu	equ	0xFFB
  4421                           pclath	equ	0xFFA
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           indf0	equ	0xFEF
  4430                           postinc0	equ	0xFEE
  4431                           fsr0h	equ	0xFEA
  4432                           fsr0l	equ	0xFE9
  4433                           wreg	equ	0xFE8
  4434                           fsr1h	equ	0xFE2
  4435                           fsr1l	equ	0xFE1
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function i2_setGPIO *****************
  4441 ;; Defined at:
  4442 ;;		line 34 in file "LCD.h"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  address         1    wreg     unsigned char 
  4445 ;;  value           1    2[COMRAM] unsigned char 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  address         1    3[COMRAM] unsigned char 
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		wreg, status,2, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4457 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;Total ram usage:        2 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    1
  4464 ;; This function calls:
  4465 ;;		i2_WriteSPI1
  4466 ;; This function is called by:
  4467 ;;		_lcdChar
  4468 ;;		i2_lcdCommand
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text28
  4473  0031B0                     __ptext28:
  4474                           	opt stack 0
  4475  0031B0                     i2_setGPIO:
  4476                           	opt stack 20
  4477                           
  4478                           ;incstack = 0
  4479                           ;i2setGPIO@address stored from wreg
  4480  0031B0  6E04               	movwf	i2setGPIO@address,c
  4481                           
  4482                           ;LCD.h: 36: PORTAbits.RA2=0;
  4483  0031B2  9480               	bcf	3968,2,c	;volatile
  4484                           
  4485                           ;LCD.h: 39: WriteSPI1(0x40);
  4486  0031B4  0E40               	movlw	64
  4487  0031B6  EC6B  F018         	call	i2_WriteSPI1
  4488                           
  4489                           ;LCD.h: 40: WriteSPI1(address);
  4490  0031BA  5004               	movf	i2setGPIO@address,w,c
  4491  0031BC  EC6B  F018         	call	i2_WriteSPI1
  4492                           
  4493                           ;LCD.h: 41: WriteSPI1(value);
  4494  0031C0  5003               	movf	i2setGPIO@value,w,c
  4495  0031C2  EC6B  F018         	call	i2_WriteSPI1
  4496                           
  4497                           ;LCD.h: 42: PORTAbits.RA2=1;
  4498  0031C6  8480               	bsf	3968,2,c	;volatile
  4499  0031C8  0012               	return		;funcret
  4500  0031CA                     __end_ofi2_setGPIO:
  4501                           	opt stack 0
  4502                           pclatu	equ	0xFFB
  4503                           pclath	equ	0xFFA
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           indf0	equ	0xFEF
  4512                           postinc0	equ	0xFEE
  4513                           fsr0h	equ	0xFEA
  4514                           fsr0l	equ	0xFE9
  4515                           wreg	equ	0xFE8
  4516                           fsr1h	equ	0xFE2
  4517                           fsr1l	equ	0xFE1
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function i2_WriteSPI1 *****************
  4523 ;; Defined at:
  4524 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1writ.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  data_out        1    wreg     unsigned char 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  data_out        1    1[COMRAM] unsigned char 
  4529 ;;  WriteSPI1       1    0[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      char 
  4532 ;; Registers used:
  4533 ;;		wreg
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;Total ram usage:        2 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		i2_setGPIO
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text29
  4553  0030D6                     __ptext29:
  4554                           	opt stack 0
  4555  0030D6                     i2_WriteSPI1:
  4556                           	opt stack 20
  4557                           
  4558                           ;incstack = 0
  4559                           ;i2WriteSPI1@data_out stored from wreg
  4560  0030D6  6E02               	movwf	i2WriteSPI1@data_out,c
  4561  0030D8  CFC9 F001          	movff	4041,i2WriteSPI1@TempVar	;volatile
  4562  0030DC  969E               	bcf	3998,3,c	;volatile
  4563  0030DE  9EC6               	bcf	4038,7,c	;volatile
  4564  0030E0  C002  FFC9         	movff	i2WriteSPI1@data_out,4041	;volatile
  4565  0030E4  BEC6               	btfsc	4038,7,c	;volatile
  4566  0030E6  D007               	goto	i2l476
  4567  0030E8  D002               	goto	i2l478
  4568                           
  4569                           ;	Return value of i2_WriteSPI1 is never used
  4570  0030EA  D005               	goto	i2l476
  4571  0030EC  D000               	goto	i2l478
  4572  0030EE                     i2l478:
  4573  0030EE  B69E               	btfsc	3998,3,c	;volatile
  4574  0030F0  D002               	goto	i2l476
  4575  0030F2  D7FD               	goto	i2l478
  4576  0030F4  D000               	goto	i2l476
  4577  0030F6                     i2l476:
  4578  0030F6  0012               	return		;funcret
  4579  0030F8                     __end_ofi2_WriteSPI1:
  4580                           	opt stack 0
  4581                           pclatu	equ	0xFFB
  4582                           pclath	equ	0xFFA
  4583                           tblptru	equ	0xFF8
  4584                           tblptrh	equ	0xFF7
  4585                           tblptrl	equ	0xFF6
  4586                           tablat	equ	0xFF5
  4587                           prodh	equ	0xFF4
  4588                           prodl	equ	0xFF3
  4589                           intcon	equ	0xFF2
  4590                           indf0	equ	0xFEF
  4591                           postinc0	equ	0xFEE
  4592                           fsr0h	equ	0xFEA
  4593                           fsr0l	equ	0xFE9
  4594                           wreg	equ	0xFE8
  4595                           fsr1h	equ	0xFE2
  4596                           fsr1l	equ	0xFE1
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function i2_Delay10TCYx *****************
  4602 ;; Defined at:
  4603 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  unit            1    wreg     unsigned char 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  unit            1    0[COMRAM] unsigned char 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;		None               void
  4610 ;; Registers used:
  4611 ;;		wreg
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;Total ram usage:        1 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_lcdChar
  4627 ;;		_ReadRTDpos
  4628 ;;		i2_lcdCommand
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text30
  4633  0031F6                     __ptext30:
  4634                           	opt stack 0
  4635  0031F6                     i2_Delay10TCYx:
  4636                           	opt stack 22
  4637                           
  4638                           ;incstack = 0
  4639                           ;i2Delay10TCYx@unit stored from wreg
  4640  0031F6  6E01               	movwf	i2Delay10TCYx@unit,c
  4641  0031F8  0E03               	movlw	3
  4642  0031FA                     i2u407_47:
  4643  0031FA  2EE8               	decfsz	wreg,f,c
  4644  0031FC  D7FE               	goto	i2u407_47
  4645  0031FE  F000               	nop	
  4646  003200  2E01               	decfsz	i2Delay10TCYx@unit,f,c
  4647  003202  D7FA               	goto	i2l2558
  4648  003204  D000               	goto	i2l773
  4649  003206                     i2l773:
  4650  003206  0012               	return		;funcret
  4651  003208                     __end_ofi2_Delay10TCYx:
  4652                           	opt stack 0
  4653                           pclatu	equ	0xFFB
  4654                           pclath	equ	0xFFA
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           indf0	equ	0xFEF
  4663                           postinc0	equ	0xFEE
  4664                           fsr0h	equ	0xFEA
  4665                           fsr0l	equ	0xFE9
  4666                           wreg	equ	0xFE8
  4667                           fsr1h	equ	0xFE2
  4668                           fsr1l	equ	0xFE1
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function ___lwmod *****************
  4674 ;; Defined at:
  4675 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  dividend        2    0[COMRAM] unsigned int 
  4678 ;;  divisor         2    2[COMRAM] unsigned int 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  counter         1    4[COMRAM] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  2    0[COMRAM] unsigned int 
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;Total ram usage:        5 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_LCDBreakDouble
  4700 ;;		_breakDouble
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text31
  4705  002E78                     __ptext31:
  4706                           	opt stack 0
  4707  002E78                     ___lwmod:
  4708                           	opt stack 22
  4709                           
  4710                           ;incstack = 0
  4711  002E78  5003               	movf	___lwmod@divisor,w,c
  4712  002E7A  1004               	iorwf	___lwmod@divisor+1,w,c
  4713  002E7C  B4D8               	btfsc	status,2,c
  4714  002E7E  D01D               	goto	i2l1107
  4715  002E80  0E01               	movlw	1
  4716  002E82  6E05               	movwf	___lwmod@counter,c
  4717  002E84  D005               	goto	i2l3154
  4718  002E86                     i2l3152:
  4719  002E86  90D8               	bcf	status,0,c
  4720  002E88  3603               	rlcf	___lwmod@divisor,f,c
  4721  002E8A  3604               	rlcf	___lwmod@divisor+1,f,c
  4722  002E8C  2A05               	incf	___lwmod@counter,f,c
  4723  002E8E  D000               	goto	i2l3154
  4724  002E90                     i2l3154:
  4725  002E90  BE04               	btfsc	___lwmod@divisor+1,7,c
  4726  002E92  D002               	goto	i2l3156
  4727  002E94  D7F8               	goto	i2l3152
  4728  002E96  D000               	goto	i2l3156
  4729  002E98                     i2l3156:
  4730  002E98  5003               	movf	___lwmod@divisor,w,c
  4731  002E9A  5C01               	subwf	___lwmod@dividend,w,c
  4732  002E9C  5004               	movf	___lwmod@divisor+1,w,c
  4733  002E9E  5802               	subwfb	___lwmod@dividend+1,w,c
  4734  002EA0  A0D8               	btfss	status,0,c
  4735  002EA2  D005               	goto	i2l3160
  4736  002EA4  5003               	movf	___lwmod@divisor,w,c
  4737  002EA6  5E01               	subwf	___lwmod@dividend,f,c
  4738  002EA8  5004               	movf	___lwmod@divisor+1,w,c
  4739  002EAA  5A02               	subwfb	___lwmod@dividend+1,f,c
  4740  002EAC  D000               	goto	i2l3160
  4741  002EAE                     i2l3160:
  4742  002EAE  90D8               	bcf	status,0,c
  4743  002EB0  3204               	rrcf	___lwmod@divisor+1,f,c
  4744  002EB2  3203               	rrcf	___lwmod@divisor,f,c
  4745  002EB4  2E05               	decfsz	___lwmod@counter,f,c
  4746  002EB6  D7F0               	goto	i2l3156
  4747  002EB8  D000               	goto	i2l1107
  4748  002EBA                     i2l1107:
  4749  002EBA  C001  F001         	movff	___lwmod@dividend,?___lwmod
  4750  002EBE  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  4751  002EC2  0012               	return		;funcret
  4752  002EC4                     __end_of___lwmod:
  4753                           	opt stack 0
  4754                           pclatu	equ	0xFFB
  4755                           pclath	equ	0xFFA
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           intcon	equ	0xFF2
  4763                           indf0	equ	0xFEF
  4764                           postinc0	equ	0xFEE
  4765                           fsr0h	equ	0xFEA
  4766                           fsr0l	equ	0xFE9
  4767                           wreg	equ	0xFE8
  4768                           fsr1h	equ	0xFE2
  4769                           fsr1l	equ	0xFE1
  4770                           fsr2h	equ	0xFDA
  4771                           fsr2l	equ	0xFD9
  4772                           status	equ	0xFD8
  4773                           
  4774 ;; *************** function ___lwdiv *****************
  4775 ;; Defined at:
  4776 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  dividend        2    0[COMRAM] unsigned int 
  4779 ;;  divisor         2    2[COMRAM] unsigned int 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  quotient        2    4[COMRAM] unsigned int 
  4782 ;;  counter         1    6[COMRAM] unsigned char 
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  2    0[COMRAM] unsigned int 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;Total ram usage:        7 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_LCDBreakDouble
  4802 ;;		_breakDouble
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text32
  4807  002B1A                     __ptext32:
  4808                           	opt stack 0
  4809  002B1A                     ___lwdiv:
  4810                           	opt stack 22
  4811                           
  4812                           ;incstack = 0
  4813  002B1A  0E00               	movlw	0
  4814  002B1C  6E06               	movwf	___lwdiv@quotient+1,c
  4815  002B1E  0E00               	movlw	0
  4816  002B20  6E05               	movwf	___lwdiv@quotient,c
  4817  002B22  5003               	movf	___lwdiv@divisor,w,c
  4818  002B24  1004               	iorwf	___lwdiv@divisor+1,w,c
  4819  002B26  B4D8               	btfsc	status,2,c
  4820  002B28  D021               	goto	i2l1097
  4821  002B2A  0E01               	movlw	1
  4822  002B2C  6E07               	movwf	___lwdiv@counter,c
  4823  002B2E  D005               	goto	i2l3134
  4824  002B30                     i2l3132:
  4825  002B30  90D8               	bcf	status,0,c
  4826  002B32  3603               	rlcf	___lwdiv@divisor,f,c
  4827  002B34  3604               	rlcf	___lwdiv@divisor+1,f,c
  4828  002B36  2A07               	incf	___lwdiv@counter,f,c
  4829  002B38  D000               	goto	i2l3134
  4830  002B3A                     i2l3134:
  4831  002B3A  BE04               	btfsc	___lwdiv@divisor+1,7,c
  4832  002B3C  D002               	goto	i2l3136
  4833  002B3E  D7F8               	goto	i2l3132
  4834  002B40  D000               	goto	i2l3136
  4835  002B42                     i2l3136:
  4836  002B42  90D8               	bcf	status,0,c
  4837  002B44  3605               	rlcf	___lwdiv@quotient,f,c
  4838  002B46  3606               	rlcf	___lwdiv@quotient+1,f,c
  4839  002B48  5003               	movf	___lwdiv@divisor,w,c
  4840  002B4A  5C01               	subwf	___lwdiv@dividend,w,c
  4841  002B4C  5004               	movf	___lwdiv@divisor+1,w,c
  4842  002B4E  5802               	subwfb	___lwdiv@dividend+1,w,c
  4843  002B50  A0D8               	btfss	status,0,c
  4844  002B52  D006               	goto	i2l3144
  4845  002B54  5003               	movf	___lwdiv@divisor,w,c
  4846  002B56  5E01               	subwf	___lwdiv@dividend,f,c
  4847  002B58  5004               	movf	___lwdiv@divisor+1,w,c
  4848  002B5A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4849  002B5C  8005               	bsf	___lwdiv@quotient,0,c
  4850  002B5E  D000               	goto	i2l3144
  4851  002B60                     i2l3144:
  4852  002B60  90D8               	bcf	status,0,c
  4853  002B62  3204               	rrcf	___lwdiv@divisor+1,f,c
  4854  002B64  3203               	rrcf	___lwdiv@divisor,f,c
  4855  002B66  2E07               	decfsz	___lwdiv@counter,f,c
  4856  002B68  D7EC               	goto	i2l3136
  4857  002B6A  D000               	goto	i2l1097
  4858  002B6C                     i2l1097:
  4859  002B6C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4860  002B70  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4861  002B74  0012               	return		;funcret
  4862  002B76                     __end_of___lwdiv:
  4863                           	opt stack 0
  4864                           pclatu	equ	0xFFB
  4865                           pclath	equ	0xFFA
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           intcon	equ	0xFF2
  4873                           indf0	equ	0xFEF
  4874                           postinc0	equ	0xFEE
  4875                           fsr0h	equ	0xFEA
  4876                           fsr0l	equ	0xFE9
  4877                           wreg	equ	0xFE8
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           
  4884 ;; *************** function ___fttol *****************
  4885 ;; Defined at:
  4886 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  f1              3   50[COMRAM] float 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  lval            4   60[COMRAM] unsigned long 
  4891 ;;  exp1            1   64[COMRAM] unsigned char 
  4892 ;;  sign1           1   59[COMRAM] unsigned char 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  4   50[COMRAM] long 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;Total ram usage:       15 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_LCDBreakDouble
  4912 ;;		_calculatePID
  4913 ;;		_breakDouble
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text33
  4918  00263C                     __ptext33:
  4919                           	opt stack 0
  4920  00263C                     ___fttol:
  4921                           	opt stack 22
  4922                           
  4923                           ;incstack = 0
  4924  00263C  C035  F037         	movff	___fttol@f1+2,??___fttol
  4925  002640  6A38               	clrf	(??___fttol+1)& (0+255),c
  4926  002642  6A39               	clrf	(??___fttol+2)& (0+255),c
  4927  002644  3434               	rlcf	___fttol@f1+1,w,c
  4928  002646  3637               	rlcf	??___fttol& (0+255),f,c
  4929  002648  E301               	bnc	u304_41
  4930  00264A  8038               	bsf	(??___fttol+1)& (0+255),0,c
  4931  00264C                     u304_41:
  4932  00264C  5037               	movf	??___fttol,w,c
  4933  00264E  6E41               	movwf	___fttol@exp1,c
  4934  002650  5041               	movf	___fttol@exp1,w,c
  4935  002652  A4D8               	btfss	status,2,c
  4936  002654  D002               	goto	i2l3086
  4937  002656  D039               	goto	i2l3110
  4938  002658  D063               	goto	i2l985
  4939  00265A                     i2l3086:
  4940  00265A  0E17               	movlw	23
  4941  00265C  6E37               	movwf	??___fttol& (0+255),c
  4942  00265E  C033  F038         	movff	___fttol@f1,??___fttol+1
  4943  002662  C034  F039         	movff	___fttol@f1+1,??___fttol+2
  4944  002666  C035  F03A         	movff	___fttol@f1+2,??___fttol+3
  4945  00266A  2837               	incf	??___fttol,w,c
  4946  00266C  6E3B               	movwf	(??___fttol+4)& (0+255),c
  4947  00266E  D004               	goto	i2u306_40
  4948  002670                     i2u306_45:
  4949  002670  90D8               	bcf	status,0,c
  4950  002672  323A               	rrcf	??___fttol+3,f,c
  4951  002674  3239               	rrcf	??___fttol+2,f,c
  4952  002676  3238               	rrcf	??___fttol+1,f,c
  4953  002678                     i2u306_40:
  4954  002678  2E3B               	decfsz	(??___fttol+4)& (0+255),f,c
  4955  00267A  D7FA               	goto	i2u306_45
  4956  00267C  5038               	movf	??___fttol+1,w,c
  4957  00267E  6E3C               	movwf	___fttol@sign1,c
  4958  002680  8E34               	bsf	___fttol@f1+1,7,c
  4959  002682  0EFF               	movlw	255
  4960  002684  1633               	andwf	___fttol@f1,f,c
  4961  002686  0EFF               	movlw	255
  4962  002688  1634               	andwf	___fttol@f1+1,f,c
  4963  00268A  0E00               	movlw	0
  4964  00268C  1635               	andwf	___fttol@f1+2,f,c
  4965  00268E  5033               	movf	___fttol@f1,w,c
  4966  002690  6E3D               	movwf	___fttol@lval,c
  4967  002692  5034               	movf	___fttol@f1+1,w,c
  4968  002694  6E3E               	movwf	___fttol@lval+1,c
  4969  002696  5035               	movf	___fttol@f1+2,w,c
  4970  002698  6E3F               	movwf	___fttol@lval+2,c
  4971  00269A  6A40               	clrf	___fttol@lval+3,c
  4972  00269C  0E8E               	movlw	142
  4973  00269E  5E41               	subwf	___fttol@exp1,f,c
  4974  0026A0  AE41               	btfss	___fttol@exp1,7,c
  4975  0026A2  D010               	goto	i2l3108
  4976  0026A4  5041               	movf	___fttol@exp1,w,c
  4977  0026A6  0A80               	xorlw	128
  4978  0026A8  0F8F               	addlw	143
  4979  0026AA  B0D8               	btfsc	status,0,c
  4980  0026AC  D003               	goto	i2l3104
  4981  0026AE  D00D               	goto	i2l3110
  4982  0026B0  D037               	goto	i2l985
  4983  0026B2  D000               	goto	i2l3104
  4984  0026B4                     i2l3104:
  4985  0026B4  90D8               	bcf	status,0,c
  4986  0026B6  3240               	rrcf	___fttol@lval+3,f,c
  4987  0026B8  323F               	rrcf	___fttol@lval+2,f,c
  4988  0026BA  323E               	rrcf	___fttol@lval+1,f,c
  4989  0026BC  323D               	rrcf	___fttol@lval,f,c
  4990  0026BE  3E41               	incfsz	___fttol@exp1,f,c
  4991  0026C0  D7F9               	goto	i2l3104
  4992  0026C2  D019               	goto	i2l3118
  4993  0026C4                     i2l3108:
  4994  0026C4  0E17               	movlw	23
  4995  0026C6  6441               	cpfsgt	___fttol@exp1,c
  4996  0026C8  D011               	goto	i2l3116
  4997  0026CA                     i2l3110:
  4998  0026CA  0E00               	movlw	0
  4999  0026CC  6E33               	movwf	?___fttol,c
  5000  0026CE  0E00               	movlw	0
  5001  0026D0  6E34               	movwf	?___fttol+1,c
  5002  0026D2  0E00               	movlw	0
  5003  0026D4  6E35               	movwf	?___fttol+2,c
  5004  0026D6  0E00               	movlw	0
  5005  0026D8  6E36               	movwf	?___fttol+3,c
  5006  0026DA  D022               	goto	i2l985
  5007  0026DC  D007               	goto	i2l3116
  5008  0026DE                     i2l3114:
  5009  0026DE  90D8               	bcf	status,0,c
  5010  0026E0  363D               	rlcf	___fttol@lval,f,c
  5011  0026E2  363E               	rlcf	___fttol@lval+1,f,c
  5012  0026E4  363F               	rlcf	___fttol@lval+2,f,c
  5013  0026E6  3640               	rlcf	___fttol@lval+3,f,c
  5014  0026E8  0641               	decf	___fttol@exp1,f,c
  5015  0026EA  D000               	goto	i2l3116
  5016  0026EC                     i2l3116:
  5017  0026EC  5041               	movf	___fttol@exp1,w,c
  5018  0026EE  B4D8               	btfsc	status,2,c
  5019  0026F0  D002               	goto	i2l3118
  5020  0026F2  D7F5               	goto	i2l3114
  5021  0026F4  D000               	goto	i2l3118
  5022  0026F6                     i2l3118:
  5023  0026F6  503C               	movf	___fttol@sign1,w,c
  5024  0026F8  B4D8               	btfsc	status,2,c
  5025  0026FA  D009               	goto	i2l3122
  5026  0026FC  1E40               	comf	___fttol@lval+3,f,c
  5027  0026FE  1E3F               	comf	___fttol@lval+2,f,c
  5028  002700  1E3E               	comf	___fttol@lval+1,f,c
  5029  002702  6C3D               	negf	___fttol@lval,c
  5030  002704  0E00               	movlw	0
  5031  002706  223E               	addwfc	___fttol@lval+1,f,c
  5032  002708  223F               	addwfc	___fttol@lval+2,f,c
  5033  00270A  2240               	addwfc	___fttol@lval+3,f,c
  5034  00270C  D000               	goto	i2l3122
  5035  00270E                     i2l3122:
  5036  00270E  C03D  F033         	movff	___fttol@lval,?___fttol
  5037  002712  C03E  F034         	movff	___fttol@lval+1,?___fttol+1
  5038  002716  C03F  F035         	movff	___fttol@lval+2,?___fttol+2
  5039  00271A  C040  F036         	movff	___fttol@lval+3,?___fttol+3
  5040  00271E  D000               	goto	i2l985
  5041  002720                     i2l985:
  5042  002720  0012               	return		;funcret
  5043  002722                     __end_of___fttol:
  5044                           	opt stack 0
  5045                           pclatu	equ	0xFFB
  5046                           pclath	equ	0xFFA
  5047                           tblptru	equ	0xFF8
  5048                           tblptrh	equ	0xFF7
  5049                           tblptrl	equ	0xFF6
  5050                           tablat	equ	0xFF5
  5051                           prodh	equ	0xFF4
  5052                           prodl	equ	0xFF3
  5053                           intcon	equ	0xFF2
  5054                           indf0	equ	0xFEF
  5055                           postinc0	equ	0xFEE
  5056                           fsr0h	equ	0xFEA
  5057                           fsr0l	equ	0xFE9
  5058                           wreg	equ	0xFE8
  5059                           fsr1h	equ	0xFE2
  5060                           fsr1l	equ	0xFE1
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _ImplementPIDMotion *****************
  5066 ;; Defined at:
  5067 ;;		line 29 in file "MotorControl.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  PIDValue        2    4[COMRAM] int 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;		None               void
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5081 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;Total ram usage:        4 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    1
  5088 ;; This function calls:
  5089 ;;		_abs
  5090 ;; This function is called by:
  5091 ;;		_TMR0Int
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text34
  5096  002B76                     __ptext34:
  5097                           	opt stack 0
  5098  002B76                     _ImplementPIDMotion:
  5099                           	opt stack 22
  5100                           
  5101                           ;MotorControl.c: 31: if (PIDValue < 0)
  5102                           
  5103                           ;incstack = 0
  5104  002B76  AE06               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  5105  002B78  D002               	goto	i2l3322
  5106                           
  5107                           ;MotorControl.c: 32: CCP3CONbits.P3M1 = 1;
  5108  002B7A  8EB7               	bsf	4023,7,c	;volatile
  5109  002B7C  D009               	goto	i2l3326
  5110  002B7E                     i2l3322:
  5111                           
  5112                           ;MotorControl.c: 33: else if (PIDValue > 0)
  5113  002B7E  BE06               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  5114  002B80  D007               	goto	i2l3326
  5115  002B82  5006               	movf	ImplementPIDMotion@PIDValue+1,w,c
  5116  002B84  E103               	bnz	i2u343_40
  5117  002B86  0405               	decf	ImplementPIDMotion@PIDValue,w,c
  5118  002B88  A0D8               	btfss	status,0,c
  5119  002B8A  D002               	goto	i2l3326
  5120  002B8C                     i2u343_40:
  5121                           
  5122                           ;MotorControl.c: 34: CCP3CONbits.P3M1 = 0;
  5123  002B8C  9EB7               	bcf	4023,7,c	;volatile
  5124  002B8E  D000               	goto	i2l3326
  5125  002B90                     i2l3326:
  5126                           
  5127                           ;MotorControl.c: 36: PIDValue = abs(PIDValue);
  5128  002B90  C005  F001         	movff	ImplementPIDMotion@PIDValue,abs@a
  5129  002B94  C006  F002         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  5130  002B98  EC20  F018         	call	_abs	;wreg free
  5131  002B9C  C001  F005         	movff	?_abs,ImplementPIDMotion@PIDValue
  5132  002BA0  C002  F006         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  5133                           
  5134                           ;MotorControl.c: 37: CCPR3L = (PIDValue >> 2) & 0xFF;
  5135  002BA4  C005  F007         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5136  002BA8  C006  F008         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  5137  002BAC  3408               	rlcf	??_ImplementPIDMotion+1,w,c
  5138  002BAE  3208               	rrcf	??_ImplementPIDMotion+1,f,c
  5139  002BB0  3207               	rrcf	??_ImplementPIDMotion,f,c
  5140  002BB2  3408               	rlcf	??_ImplementPIDMotion+1,w,c
  5141  002BB4  3208               	rrcf	??_ImplementPIDMotion+1,f,c
  5142  002BB6  3207               	rrcf	??_ImplementPIDMotion,f,c
  5143  002BB8  5007               	movf	??_ImplementPIDMotion,w,c
  5144  002BBA  6EB8               	movwf	4024,c	;volatile
  5145                           
  5146                           ;MotorControl.c: 38: CCP3CONbits.DC3B = (PIDValue & 0x03);
  5147  002BBC  C005  F007         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5148  002BC0  0E03               	movlw	3
  5149  002BC2  1607               	andwf	??_ImplementPIDMotion,f,c
  5150  002BC4  3A07               	swapf	??_ImplementPIDMotion,f,c
  5151  002BC6  50B7               	movf	4023,w,c	;volatile
  5152  002BC8  1807               	xorwf	??_ImplementPIDMotion,w,c
  5153  002BCA  0BCF               	andlw	-49
  5154  002BCC  1807               	xorwf	??_ImplementPIDMotion,w,c
  5155  002BCE  6EB7               	movwf	4023,c	;volatile
  5156  002BD0  0012               	return		;funcret
  5157  002BD2                     __end_of_ImplementPIDMotion:
  5158                           	opt stack 0
  5159                           pclatu	equ	0xFFB
  5160                           pclath	equ	0xFFA
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           indf0	equ	0xFEF
  5169                           postinc0	equ	0xFEE
  5170                           fsr0h	equ	0xFEA
  5171                           fsr0l	equ	0xFE9
  5172                           wreg	equ	0xFE8
  5173                           fsr1h	equ	0xFE2
  5174                           fsr1l	equ	0xFE1
  5175                           fsr2h	equ	0xFDA
  5176                           fsr2l	equ	0xFD9
  5177                           status	equ	0xFD8
  5178                           
  5179 ;; *************** function _abs *****************
  5180 ;; Defined at:
  5181 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  a               2    0[COMRAM] int 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;		None
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  2    0[COMRAM] int 
  5188 ;; Registers used:
  5189 ;;		wreg, status,2, status,0
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;Total ram usage:        4 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_ImplementPIDMotion
  5205 ;;		_ImplementJSMotion
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text35
  5210  003040                     __ptext35:
  5211                           	opt stack 0
  5212  003040                     _abs:
  5213                           	opt stack 22
  5214                           
  5215                           ;incstack = 0
  5216  003040  AE02               	btfss	abs@a+1,7,c
  5217  003042  D00D               	goto	i2l530
  5218  003044  C001  F003         	movff	abs@a,??_abs
  5219  003048  C002  F004         	movff	abs@a+1,??_abs+1
  5220  00304C  1E03               	comf	??_abs,f,c
  5221  00304E  1E04               	comf	??_abs+1,f,c
  5222  003050  4A03               	infsnz	??_abs,f,c
  5223  003052  2A04               	incf	??_abs+1,f,c
  5224  003054  C003  F001         	movff	??_abs,?_abs
  5225  003058  C004  F002         	movff	??_abs+1,?_abs+1
  5226  00305C  D004               	goto	i2l531
  5227  00305E                     i2l530:
  5228  00305E  C001  F001         	movff	abs@a,?_abs
  5229  003062  C002  F002         	movff	abs@a+1,?_abs+1
  5230  003066                     i2l531:
  5231  003066  0012               	return		;funcret
  5232  003068                     __end_of_abs:
  5233                           	opt stack 0
  5234                           pclatu	equ	0xFFB
  5235                           pclath	equ	0xFFA
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           indf0	equ	0xFEF
  5244                           postinc0	equ	0xFEE
  5245                           fsr0h	equ	0xFEA
  5246                           fsr0l	equ	0xFE9
  5247                           wreg	equ	0xFE8
  5248                           fsr1h	equ	0xFE2
  5249                           fsr1l	equ	0xFE1
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _RCInt *****************
  5255 ;; Defined at:
  5256 ;;		line 19 in file "KeyValue.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  counter         1   83[COMRAM] unsigned char 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;		None               void
  5263 ;; Registers used:
  5264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;Total ram usage:        2 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    4
  5277 ;; This function calls:
  5278 ;;		_keyValue
  5279 ;;		i2_SerTx
  5280 ;; This function is called by:
  5281 ;;		_ISR
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text36
  5286  00240A                     __ptext36:
  5287                           	opt stack 0
  5288  00240A                     _RCInt:
  5289                           	opt stack 20
  5290                           
  5291                           ;KeyValue.c: 21: unsigned char counter = 0;
  5292                           
  5293                           ;incstack = 0
  5294  00240A  0E00               	movlw	0
  5295  00240C  6E54               	movwf	RCInt@counter,c
  5296                           
  5297                           ;KeyValue.c: 23: {
  5298                           ;KeyValue.c: 24: while (PIR1bits.RCIF == 0);
  5299                           
  5300                           ;KeyValue.c: 22: do
  5301  00240E  D000               	goto	i2l206
  5302  002410                     i2l206:
  5303  002410  AA9E               	btfss	3998,5,c	;volatile
  5304  002412  D7FE               	goto	i2l206
  5305                           
  5306                           ;KeyValue.c: 25: received[counter] = RCREG;
  5307  002414  5054               	movf	RCInt@counter,w,c
  5308  002416  0D01               	mullw	1
  5309  002418  0E7E               	movlw	low _received
  5310  00241A  24F3               	addwf	prodl,w,c
  5311  00241C  6ED9               	movwf	fsr2l,c
  5312  00241E  0E00               	movlw	high _received
  5313  002420  20F4               	addwfc	prodh,w,c
  5314  002422  6EDA               	movwf	fsr2h,c
  5315  002424  CFAE FFDF          	movff	4014,indf2	;volatile
  5316                           
  5317                           ;KeyValue.c: 26: SerTx(RCREG);
  5318  002428  50AE               	movf	4014,w,c	;volatile
  5319  00242A  EC14  F019         	call	i2_SerTx
  5320                           
  5321                           ;KeyValue.c: 27: if ((received[counter] == 0x08) || received[counter] == 0x7F)
  5322  00242E  5054               	movf	RCInt@counter,w,c
  5323  002430  0D01               	mullw	1
  5324  002432  0E7E               	movlw	low _received
  5325  002434  24F3               	addwf	prodl,w,c
  5326  002436  6ED9               	movwf	fsr2l,c
  5327  002438  0E00               	movlw	high _received
  5328  00243A  20F4               	addwfc	prodh,w,c
  5329  00243C  6EDA               	movwf	fsr2h,c
  5330  00243E  0E08               	movlw	8
  5331  002440  18DE               	xorwf	postinc2,w,c
  5332  002442  B4D8               	btfsc	status,2,c
  5333  002444  D00C               	goto	i2l3578
  5334  002446  5054               	movf	RCInt@counter,w,c
  5335  002448  0D01               	mullw	1
  5336  00244A  0E7E               	movlw	low _received
  5337  00244C  24F3               	addwf	prodl,w,c
  5338  00244E  6ED9               	movwf	fsr2l,c
  5339  002450  0E00               	movlw	high _received
  5340  002452  20F4               	addwfc	prodh,w,c
  5341  002454  6EDA               	movwf	fsr2h,c
  5342  002456  0E7F               	movlw	127
  5343  002458  18DE               	xorwf	postinc2,w,c
  5344  00245A  A4D8               	btfss	status,2,c
  5345  00245C  D010               	goto	i2l3584
  5346  00245E                     i2l3578:
  5347                           
  5348                           ;KeyValue.c: 28: {
  5349                           ;KeyValue.c: 29: if (counter != 0)
  5350  00245E  5054               	movf	RCInt@counter,w,c
  5351  002460  B4D8               	btfsc	status,2,c
  5352  002462  D002               	goto	i2l3582
  5353                           
  5354                           ;KeyValue.c: 30: counter--;
  5355  002464  0654               	decf	RCInt@counter,f,c
  5356  002466  D000               	goto	i2l3582
  5357  002468                     i2l3582:
  5358                           
  5359                           ;KeyValue.c: 31: received[counter] = '\0';
  5360  002468  5054               	movf	RCInt@counter,w,c
  5361  00246A  0D01               	mullw	1
  5362  00246C  0E7E               	movlw	low _received
  5363  00246E  24F3               	addwf	prodl,w,c
  5364  002470  6ED9               	movwf	fsr2l,c
  5365  002472  0E00               	movlw	high _received
  5366  002474  20F4               	addwfc	prodh,w,c
  5367  002476  6EDA               	movwf	fsr2h,c
  5368  002478  0E00               	movlw	0
  5369  00247A  6EDF               	movwf	indf2,c
  5370                           
  5371                           ;KeyValue.c: 32: }
  5372  00247C  D01A               	goto	i2l3590
  5373  00247E                     i2l3584:
  5374                           
  5375                           ;KeyValue.c: 33: else if ((received[counter] != 0x08) && (received[counter] != 0x0D))
  5376  00247E  5054               	movf	RCInt@counter,w,c
  5377  002480  0D01               	mullw	1
  5378  002482  0E7E               	movlw	low _received
  5379  002484  24F3               	addwf	prodl,w,c
  5380  002486  6ED9               	movwf	fsr2l,c
  5381  002488  0E00               	movlw	high _received
  5382  00248A  20F4               	addwfc	prodh,w,c
  5383  00248C  6EDA               	movwf	fsr2h,c
  5384  00248E  0E08               	movlw	8
  5385  002490  18DE               	xorwf	postinc2,w,c
  5386  002492  B4D8               	btfsc	status,2,c
  5387  002494  D00E               	goto	i2l3590
  5388  002496  5054               	movf	RCInt@counter,w,c
  5389  002498  0D01               	mullw	1
  5390  00249A  0E7E               	movlw	low _received
  5391  00249C  24F3               	addwf	prodl,w,c
  5392  00249E  6ED9               	movwf	fsr2l,c
  5393  0024A0  0E00               	movlw	high _received
  5394  0024A2  20F4               	addwfc	prodh,w,c
  5395  0024A4  6EDA               	movwf	fsr2h,c
  5396  0024A6  0E0D               	movlw	13
  5397  0024A8  18DE               	xorwf	postinc2,w,c
  5398  0024AA  B4D8               	btfsc	status,2,c
  5399  0024AC  D002               	goto	i2l3590
  5400                           
  5401                           ;KeyValue.c: 34: counter++;
  5402  0024AE  2A54               	incf	RCInt@counter,f,c
  5403  0024B0  D000               	goto	i2l3590
  5404  0024B2                     i2l3590:
  5405                           
  5406                           ;KeyValue.c: 35: }
  5407                           ;KeyValue.c: 36: while (RCREG != 0x0D);
  5408  0024B2  0E0D               	movlw	13
  5409  0024B4  18AE               	xorwf	4014,w,c	;volatile
  5410  0024B6  A4D8               	btfss	status,2,c
  5411  0024B8  D7AB               	goto	i2l206
  5412                           
  5413                           ;KeyValue.c: 38: SerTx(0x0A);
  5414  0024BA  0E0A               	movlw	10
  5415  0024BC  EC14  F019         	call	i2_SerTx
  5416                           
  5417                           ;KeyValue.c: 39: SerTx(0x0D);
  5418  0024C0  0E0D               	movlw	13
  5419  0024C2  EC14  F019         	call	i2_SerTx
  5420                           
  5421                           ;KeyValue.c: 40: keyValue(received, 30);
  5422  0024C6  0E7E               	movlw	low _received
  5423  0024C8  6E48               	movwf	keyValue@str,c
  5424  0024CA  0E00               	movlw	high _received
  5425  0024CC  6E49               	movwf	keyValue@str+1,c
  5426  0024CE  0E00               	movlw	0
  5427  0024D0  6E4B               	movwf	keyValue@length+1,c
  5428  0024D2  0E1E               	movlw	30
  5429  0024D4  6E4A               	movwf	keyValue@length,c
  5430  0024D6  ECDC  F00B         	call	_keyValue	;wreg free
  5431                           
  5432                           ;KeyValue.c: 41: SerTx(0x0A);
  5433  0024DA  0E0A               	movlw	10
  5434  0024DC  EC14  F019         	call	i2_SerTx
  5435                           
  5436                           ;KeyValue.c: 42: SerTx(0x0D);
  5437  0024E0  0E0D               	movlw	13
  5438  0024E2  EC14  F019         	call	i2_SerTx
  5439                           
  5440                           ;KeyValue.c: 43: PIR1bits.RCIF = 0;
  5441  0024E6  9A9E               	bcf	3998,5,c	;volatile
  5442                           
  5443                           ;KeyValue.c: 45: if (StrippedKey == 0x01)
  5444  0024E8  045E               	decf	_StrippedKey,w,c
  5445  0024EA  A4D8               	btfss	status,2,c
  5446  0024EC  D009               	goto	i2l3608
  5447                           
  5448                           ;KeyValue.c: 46: {
  5449                           ;KeyValue.c: 47: SetAngle = StrippedValue;
  5450  0024EE  C072  F06F         	movff	_StrippedValue,_SetAngle
  5451  0024F2  C073  F070         	movff	_StrippedValue+1,_SetAngle+1
  5452  0024F6  C074  F071         	movff	_StrippedValue+2,_SetAngle+2
  5453                           
  5454                           ;KeyValue.c: 48: PIDEnableFlag = 3;
  5455  0024FA  0E03               	movlw	3
  5456  0024FC  6E5D               	movwf	_PIDEnableFlag,c
  5457                           
  5458                           ;KeyValue.c: 49: }
  5459  0024FE  D021               	goto	i2l223
  5460  002500                     i2l3608:
  5461                           
  5462                           ;KeyValue.c: 51: else if (StrippedKey == 0x05)
  5463  002500  0E05               	movlw	5
  5464  002502  185E               	xorwf	_StrippedKey,w,c
  5465  002504  A4D8               	btfss	status,2,c
  5466  002506  D007               	goto	i2l3612
  5467                           
  5468                           ;KeyValue.c: 52: {
  5469                           ;KeyValue.c: 53: Kp = StrippedValue;
  5470  002508  C072  F06C         	movff	_StrippedValue,_Kp
  5471  00250C  C073  F06D         	movff	_StrippedValue+1,_Kp+1
  5472  002510  C074  F06E         	movff	_StrippedValue+2,_Kp+2
  5473                           
  5474                           ;KeyValue.c: 54: }
  5475  002514  D016               	goto	i2l223
  5476  002516                     i2l3612:
  5477                           
  5478                           ;KeyValue.c: 56: else if (StrippedKey == 0x07)
  5479  002516  0E07               	movlw	7
  5480  002518  185E               	xorwf	_StrippedKey,w,c
  5481  00251A  A4D8               	btfss	status,2,c
  5482  00251C  D007               	goto	i2l3616
  5483                           
  5484                           ;KeyValue.c: 57: {
  5485                           ;KeyValue.c: 58: Ki = StrippedValue;
  5486  00251E  C072  F069         	movff	_StrippedValue,_Ki
  5487  002522  C073  F06A         	movff	_StrippedValue+1,_Ki+1
  5488  002526  C074  F06B         	movff	_StrippedValue+2,_Ki+2
  5489                           
  5490                           ;KeyValue.c: 59: }
  5491  00252A  D00B               	goto	i2l223
  5492  00252C                     i2l3616:
  5493                           
  5494                           ;KeyValue.c: 61: else if (StrippedKey == 0x09)
  5495  00252C  0E09               	movlw	9
  5496  00252E  185E               	xorwf	_StrippedKey,w,c
  5497  002530  A4D8               	btfss	status,2,c
  5498  002532  D007               	goto	i2l223
  5499                           
  5500                           ;KeyValue.c: 62: {
  5501                           ;KeyValue.c: 63: Kd = StrippedValue;
  5502  002534  C072  F066         	movff	_StrippedValue,_Kd
  5503  002538  C073  F067         	movff	_StrippedValue+1,_Kd+1
  5504  00253C  C074  F068         	movff	_StrippedValue+2,_Kd+2
  5505  002540  D000               	goto	i2l223
  5506  002542                     i2l223:
  5507  002542  0012               	return		;funcret
  5508  002544                     __end_of_RCInt:
  5509                           	opt stack 0
  5510                           pclatu	equ	0xFFB
  5511                           pclath	equ	0xFFA
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           indf0	equ	0xFEF
  5520                           postinc0	equ	0xFEE
  5521                           fsr0h	equ	0xFEA
  5522                           fsr0l	equ	0xFE9
  5523                           wreg	equ	0xFE8
  5524                           fsr1h	equ	0xFE2
  5525                           fsr1l	equ	0xFE1
  5526                           indf2	equ	0xFDF
  5527                           postinc2	equ	0xFDE
  5528                           fsr2h	equ	0xFDA
  5529                           fsr2l	equ	0xFD9
  5530                           status	equ	0xFD8
  5531                           
  5532 ;; *************** function _keyValue *****************
  5533 ;; Defined at:
  5534 ;;		line 67 in file "KeyValue.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  str             2   71[COMRAM] PTR unsigned char 
  5537 ;;		 -> received(30), 
  5538 ;;  length          2   73[COMRAM] unsigned short 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  str_end         2   77[COMRAM] PTR unsigned char 
  5541 ;;		 -> value(10), 
  5542 ;;  x               1   81[COMRAM] unsigned char 
  5543 ;;  y               1   80[COMRAM] unsigned char 
  5544 ;;  flag            1   79[COMRAM] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;		None               void
  5547 ;; Registers used:
  5548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5554 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;Total ram usage:       11 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    3
  5561 ;; This function calls:
  5562 ;;		_isspace
  5563 ;;		_strcmp
  5564 ;;		_strtod
  5565 ;;		i2_SerTx
  5566 ;;		i2_SerTxStr
  5567 ;; This function is called by:
  5568 ;;		_RCInt
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text37
  5573  0017B8                     __ptext37:
  5574                           	opt stack 0
  5575  0017B8                     _keyValue:
  5576                           	opt stack 20
  5577                           
  5578                           ;KeyValue.c: 69: unsigned char x = 0;
  5579                           
  5580                           ;incstack = 0
  5581  0017B8  0E00               	movlw	0
  5582  0017BA  6E52               	movwf	keyValue@x,c
  5583                           
  5584                           ;KeyValue.c: 70: unsigned char y = 0;
  5585  0017BC  0E00               	movlw	0
  5586  0017BE  6E51               	movwf	keyValue@y,c
  5587  0017C0  D00F               	goto	i2l3346
  5588  0017C2                     i2l3340:
  5589                           
  5590                           ;KeyValue.c: 75: {
  5591                           ;KeyValue.c: 76: x++;
  5592  0017C2  2A52               	incf	keyValue@x,f,c
  5593                           
  5594                           ;KeyValue.c: 77: if (str[x] == '=')
  5595  0017C4  5052               	movf	keyValue@x,w,c
  5596  0017C6  0D01               	mullw	1
  5597  0017C8  50F3               	movf	prodl,w,c
  5598  0017CA  2448               	addwf	keyValue@str,w,c
  5599  0017CC  6ED9               	movwf	fsr2l,c
  5600  0017CE  50F4               	movf	prodh,w,c
  5601  0017D0  2049               	addwfc	keyValue@str+1,w,c
  5602  0017D2  6EDA               	movwf	fsr2h,c
  5603  0017D4  0E3D               	movlw	61
  5604  0017D6  18DE               	xorwf	postinc2,w,c
  5605  0017D8  A4D8               	btfss	status,2,c
  5606  0017DA  D002               	goto	i2l3346
  5607                           
  5608                           ;KeyValue.c: 78: {
  5609                           ;KeyValue.c: 79: flag = 1;
  5610  0017DC  0E01               	movlw	1
  5611  0017DE  D001               	goto	L9
  5612  0017E0                     i2l3346:
  5613                           
  5614                           ;KeyValue.c: 81: else
  5615                           ;KeyValue.c: 82: flag = 0;
  5616  0017E0  0E00               	movlw	0
  5617  0017E2                     L9:
  5618  0017E2  6E50               	movwf	keyValue@flag,c
  5619  0017E4  D000               	goto	i2l3348
  5620  0017E6                     i2l3348:
  5621  0017E6  5052               	movf	keyValue@x,w,c
  5622  0017E8  0D01               	mullw	1
  5623  0017EA  50F3               	movf	prodl,w,c
  5624  0017EC  2448               	addwf	keyValue@str,w,c
  5625  0017EE  6ED9               	movwf	fsr2l,c
  5626  0017F0  50F4               	movf	prodh,w,c
  5627  0017F2  2049               	addwfc	keyValue@str+1,w,c
  5628  0017F4  6EDA               	movwf	fsr2h,c
  5629  0017F6  0E3D               	movlw	61
  5630  0017F8  18DE               	xorwf	postinc2,w,c
  5631  0017FA  B4D8               	btfsc	status,2,c
  5632  0017FC  D00B               	goto	i2l3352
  5633  0017FE  5052               	movf	keyValue@x,w,c
  5634  001800  6E4C               	movwf	??_keyValue& (0+255),c
  5635  001802  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  5636  001804  504A               	movf	keyValue@length,w,c
  5637  001806  5C4C               	subwf	??_keyValue,w,c
  5638  001808  504B               	movf	keyValue@length+1,w,c
  5639  00180A  584D               	subwfb	??_keyValue+1,w,c
  5640  00180C  B0D8               	btfsc	status,0,c
  5641  00180E  D002               	goto	i2l3352
  5642  001810  D7D8               	goto	i2l3340
  5643  001812  D000               	goto	i2l3352
  5644  001814                     i2l3352:
  5645                           
  5646                           ;KeyValue.c: 83: }
  5647                           ;KeyValue.c: 84: if ((x < length) && flag)
  5648  001814  5052               	movf	keyValue@x,w,c
  5649  001816  6E4C               	movwf	??_keyValue& (0+255),c
  5650  001818  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  5651  00181A  504A               	movf	keyValue@length,w,c
  5652  00181C  5C4C               	subwf	??_keyValue,w,c
  5653  00181E  504B               	movf	keyValue@length+1,w,c
  5654  001820  584D               	subwfb	??_keyValue+1,w,c
  5655  001822  B0D8               	btfsc	status,0,c
  5656  001824  D100               	goto	i2l3418
  5657  001826  5050               	movf	keyValue@flag,w,c
  5658  001828  B4D8               	btfsc	status,2,c
  5659  00182A  D0FD               	goto	i2l3418
  5660                           
  5661                           ;KeyValue.c: 85: {
  5662                           ;KeyValue.c: 86: for (y = 0; y < x && y < 5; y++)
  5663  00182C  0E00               	movlw	0
  5664  00182E  6E51               	movwf	keyValue@y,c
  5665  001830  D022               	goto	i2l3364
  5666  001832                     i2l3358:
  5667                           
  5668                           ;KeyValue.c: 87: {
  5669                           ;KeyValue.c: 88: if (isspace(str[y]) == 0)
  5670  001832  5051               	movf	keyValue@y,w,c
  5671  001834  0D01               	mullw	1
  5672  001836  50F3               	movf	prodl,w,c
  5673  001838  2448               	addwf	keyValue@str,w,c
  5674  00183A  6ED9               	movwf	fsr2l,c
  5675  00183C  50F4               	movf	prodh,w,c
  5676  00183E  2049               	addwfc	keyValue@str+1,w,c
  5677  001840  6EDA               	movwf	fsr2h,c
  5678  001842  50DF               	movf	indf2,w,c
  5679  001844  ECF6  F017         	call	_isspace
  5680  001848  B0D8               	btfsc	status,0,c
  5681  00184A  D013               	goto	i2l3362
  5682                           
  5683                           ;KeyValue.c: 89: key[y] = str[y];
  5684  00184C  5051               	movf	keyValue@y,w,c
  5685  00184E  0D01               	mullw	1
  5686  001850  50F3               	movf	prodl,w,c
  5687  001852  2448               	addwf	keyValue@str,w,c
  5688  001854  6ED9               	movwf	fsr2l,c
  5689  001856  50F4               	movf	prodh,w,c
  5690  001858  2049               	addwfc	keyValue@str+1,w,c
  5691  00185A  6EDA               	movwf	fsr2h,c
  5692  00185C  5051               	movf	keyValue@y,w,c
  5693  00185E  0D01               	mullw	1
  5694  001860  0EA6               	movlw	low _key
  5695  001862  24F3               	addwf	prodl,w,c
  5696  001864  6EE1               	movwf	fsr1l,c
  5697  001866  0E00               	movlw	high _key
  5698  001868  20F4               	addwfc	prodh,w,c
  5699  00186A  6EE2               	movwf	fsr1h,c
  5700  00186C  CFDF FFE7          	movff	indf2,indf1
  5701  001870  D000               	goto	i2l3362
  5702  001872                     i2l3362:
  5703  001872  2A51               	incf	keyValue@y,f,c
  5704  001874  D000               	goto	i2l3364
  5705  001876                     i2l3364:
  5706  001876  5052               	movf	keyValue@x,w,c
  5707  001878  5C51               	subwf	keyValue@y,w,c
  5708  00187A  B0D8               	btfsc	status,0,c
  5709  00187C  D004               	goto	i2l3368
  5710  00187E  0E04               	movlw	4
  5711  001880  6451               	cpfsgt	keyValue@y,c
  5712  001882  D7D7               	goto	i2l3358
  5713  001884  D000               	goto	i2l3368
  5714  001886                     i2l3368:
  5715                           
  5716                           ;KeyValue.c: 90: }
  5717                           ;KeyValue.c: 92: SerTxStr("Key: ");
  5718  001886  0E3E               	movlw	low STR_3
  5719  001888  6E02               	movwf	i2SerTxStr@string,c
  5720  00188A  0E10               	movlw	high STR_3
  5721  00188C  6E03               	movwf	i2SerTxStr@string+1,c
  5722  00188E  EC6F  F016         	call	i2_SerTxStr	;wreg free
  5723                           
  5724                           ;KeyValue.c: 93: SerTxStr(key);
  5725  001892  0EA6               	movlw	low _key
  5726  001894  6E02               	movwf	i2SerTxStr@string,c
  5727  001896  0E00               	movlw	high _key
  5728  001898  6E03               	movwf	i2SerTxStr@string+1,c
  5729  00189A  EC6F  F016         	call	i2_SerTxStr	;wreg free
  5730                           
  5731                           ;KeyValue.c: 95: for (y = 0; str[x + 1] != (0); y++)
  5732  00189E  0E00               	movlw	0
  5733  0018A0  6E51               	movwf	keyValue@y,c
  5734  0018A2  D015               	goto	i2l3378
  5735  0018A4                     i2l3372:
  5736                           
  5737                           ;KeyValue.c: 96: {
  5738                           ;KeyValue.c: 97: x++;
  5739  0018A4  2A52               	incf	keyValue@x,f,c
  5740                           
  5741                           ;KeyValue.c: 99: value[y] = str[x];
  5742  0018A6  5052               	movf	keyValue@x,w,c
  5743  0018A8  0D01               	mullw	1
  5744  0018AA  50F3               	movf	prodl,w,c
  5745  0018AC  2448               	addwf	keyValue@str,w,c
  5746  0018AE  6ED9               	movwf	fsr2l,c
  5747  0018B0  50F4               	movf	prodh,w,c
  5748  0018B2  2049               	addwfc	keyValue@str+1,w,c
  5749  0018B4  6EDA               	movwf	fsr2h,c
  5750  0018B6  5051               	movf	keyValue@y,w,c
  5751  0018B8  0D01               	mullw	1
  5752  0018BA  0E9C               	movlw	low _value
  5753  0018BC  24F3               	addwf	prodl,w,c
  5754  0018BE  6EE1               	movwf	fsr1l,c
  5755  0018C0  0E00               	movlw	high _value
  5756  0018C2  20F4               	addwfc	prodh,w,c
  5757  0018C4  6EE2               	movwf	fsr1h,c
  5758  0018C6  CFDF FFE7          	movff	indf2,indf1
  5759  0018CA  2A51               	incf	keyValue@y,f,c
  5760  0018CC  D000               	goto	i2l3378
  5761  0018CE                     i2l3378:
  5762  0018CE  5052               	movf	keyValue@x,w,c
  5763  0018D0  6E4C               	movwf	??_keyValue& (0+255),c
  5764  0018D2  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  5765  0018D4  0E01               	movlw	1
  5766  0018D6  264C               	addwf	??_keyValue,f,c
  5767  0018D8  0E00               	movlw	0
  5768  0018DA  224D               	addwfc	??_keyValue+1,f,c
  5769  0018DC  504C               	movf	??_keyValue,w,c
  5770  0018DE  2448               	addwf	keyValue@str,w,c
  5771  0018E0  6ED9               	movwf	fsr2l,c
  5772  0018E2  504D               	movf	??_keyValue+1,w,c
  5773  0018E4  2049               	addwfc	keyValue@str+1,w,c
  5774  0018E6  6EDA               	movwf	fsr2h,c
  5775  0018E8  50DF               	movf	indf2,w,c
  5776  0018EA  A4D8               	btfss	status,2,c
  5777  0018EC  D7DB               	goto	i2l3372
  5778                           
  5779                           ;KeyValue.c: 100: }
  5780                           ;KeyValue.c: 101: SerTxStr("   Value: ");
  5781  0018EE  0E25               	movlw	low STR_4
  5782  0018F0  6E02               	movwf	i2SerTxStr@string,c
  5783  0018F2  0E10               	movlw	high STR_4
  5784  0018F4  6E03               	movwf	i2SerTxStr@string+1,c
  5785  0018F6  EC6F  F016         	call	i2_SerTxStr	;wreg free
  5786                           
  5787                           ;KeyValue.c: 102: SerTxStr(value);
  5788  0018FA  0E9C               	movlw	low _value
  5789  0018FC  6E02               	movwf	i2SerTxStr@string,c
  5790  0018FE  0E00               	movlw	high _value
  5791  001900  6E03               	movwf	i2SerTxStr@string+1,c
  5792  001902  EC6F  F016         	call	i2_SerTxStr	;wreg free
  5793                           
  5794                           ;KeyValue.c: 104: if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  5795  001906  0EA6               	movlw	low _key
  5796  001908  6E01               	movwf	strcmp@s1,c
  5797  00190A  0E00               	movlw	high _key
  5798  00190C  6E02               	movwf	strcmp@s1+1,c
  5799  00190E  0E4C               	movlw	low STR_5
  5800  001910  6E03               	movwf	strcmp@s2,c
  5801  001912  0E10               	movlw	high STR_5
  5802  001914  6E04               	movwf	strcmp@s2+1,c
  5803  001916  ECC5  F016         	call	_strcmp	;wreg free
  5804  00191A  5001               	movf	?_strcmp,w,c
  5805  00191C  1002               	iorwf	?_strcmp+1,w,c
  5806  00191E  B4D8               	btfsc	status,2,c
  5807  001920  D00E               	goto	i2l3386
  5808  001922  0EA6               	movlw	low _key
  5809  001924  6E01               	movwf	strcmp@s1,c
  5810  001926  0E00               	movlw	high _key
  5811  001928  6E02               	movwf	strcmp@s1+1,c
  5812  00192A  0E54               	movlw	low STR_6
  5813  00192C  6E03               	movwf	strcmp@s2,c
  5814  00192E  0E10               	movlw	high STR_6
  5815  001930  6E04               	movwf	strcmp@s2+1,c
  5816  001932  ECC5  F016         	call	_strcmp	;wreg free
  5817  001936  5001               	movf	?_strcmp,w,c
  5818  001938  1002               	iorwf	?_strcmp+1,w,c
  5819  00193A  A4D8               	btfss	status,2,c
  5820  00193C  D006               	goto	i2l3390
  5821  00193E                     i2l3386:
  5822                           
  5823                           ;KeyValue.c: 105: {
  5824                           ;KeyValue.c: 106: StrippedKey = 0x01;
  5825  00193E  0E01               	movlw	1
  5826  001940  6E5E               	movwf	_StrippedKey,c
  5827                           
  5828                           ;KeyValue.c: 107: SerTx(';');
  5829  001942  0E3B               	movlw	59
  5830  001944  EC14  F019         	call	i2_SerTx
  5831                           
  5832                           ;KeyValue.c: 108: }
  5833  001948  D197               	goto	i2l3490
  5834  00194A                     i2l3390:
  5835                           
  5836                           ;KeyValue.c: 110: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  5837  00194A  0EA6               	movlw	low _key
  5838  00194C  6E01               	movwf	strcmp@s1,c
  5839  00194E  0E00               	movlw	high _key
  5840  001950  6E02               	movwf	strcmp@s1+1,c
  5841  001952  0E5E               	movlw	low STR_7
  5842  001954  6E03               	movwf	strcmp@s2,c
  5843  001956  0E10               	movlw	high STR_7
  5844  001958  6E04               	movwf	strcmp@s2+1,c
  5845  00195A  ECC5  F016         	call	_strcmp	;wreg free
  5846  00195E  5001               	movf	?_strcmp,w,c
  5847  001960  1002               	iorwf	?_strcmp+1,w,c
  5848  001962  B4D8               	btfsc	status,2,c
  5849  001964  D00E               	goto	i2l3394
  5850  001966  0EA6               	movlw	low _key
  5851  001968  6E01               	movwf	strcmp@s1,c
  5852  00196A  0E00               	movlw	high _key
  5853  00196C  6E02               	movwf	strcmp@s1+1,c
  5854  00196E  0E6A               	movlw	low STR_8
  5855  001970  6E03               	movwf	strcmp@s2,c
  5856  001972  0E10               	movlw	high STR_8
  5857  001974  6E04               	movwf	strcmp@s2+1,c
  5858  001976  ECC5  F016         	call	_strcmp	;wreg free
  5859  00197A  5001               	movf	?_strcmp,w,c
  5860  00197C  1002               	iorwf	?_strcmp+1,w,c
  5861  00197E  A4D8               	btfss	status,2,c
  5862  001980  D006               	goto	i2l3398
  5863  001982                     i2l3394:
  5864                           
  5865                           ;KeyValue.c: 111: {
  5866                           ;KeyValue.c: 112: StrippedKey = 0x05;
  5867  001982  0E05               	movlw	5
  5868  001984  6E5E               	movwf	_StrippedKey,c
  5869                           
  5870                           ;KeyValue.c: 113: SerTx(';');
  5871  001986  0E3B               	movlw	59
  5872  001988  EC14  F019         	call	i2_SerTx
  5873                           
  5874                           ;KeyValue.c: 114: }
  5875  00198C  D175               	goto	i2l3490
  5876  00198E                     i2l3398:
  5877                           
  5878                           ;KeyValue.c: 116: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  5879  00198E  0EA6               	movlw	low _key
  5880  001990  6E01               	movwf	strcmp@s1,c
  5881  001992  0E00               	movlw	high _key
  5882  001994  6E02               	movwf	strcmp@s1+1,c
  5883  001996  0E5B               	movlw	low STR_9
  5884  001998  6E03               	movwf	strcmp@s2,c
  5885  00199A  0E10               	movlw	high STR_9
  5886  00199C  6E04               	movwf	strcmp@s2+1,c
  5887  00199E  ECC5  F016         	call	_strcmp	;wreg free
  5888  0019A2  5001               	movf	?_strcmp,w,c
  5889  0019A4  1002               	iorwf	?_strcmp+1,w,c
  5890  0019A6  B4D8               	btfsc	status,2,c
  5891  0019A8  D00E               	goto	i2l3402
  5892  0019AA  0EA6               	movlw	low _key
  5893  0019AC  6E01               	movwf	strcmp@s1,c
  5894  0019AE  0E00               	movlw	high _key
  5895  0019B0  6E02               	movwf	strcmp@s1+1,c
  5896  0019B2  0E67               	movlw	low STR_10
  5897  0019B4  6E03               	movwf	strcmp@s2,c
  5898  0019B6  0E10               	movlw	high STR_10
  5899  0019B8  6E04               	movwf	strcmp@s2+1,c
  5900  0019BA  ECC5  F016         	call	_strcmp	;wreg free
  5901  0019BE  5001               	movf	?_strcmp,w,c
  5902  0019C0  1002               	iorwf	?_strcmp+1,w,c
  5903  0019C2  A4D8               	btfss	status,2,c
  5904  0019C4  D006               	goto	i2l3406
  5905  0019C6                     i2l3402:
  5906                           
  5907                           ;KeyValue.c: 117: {
  5908                           ;KeyValue.c: 118: StrippedKey = 0x07;
  5909  0019C6  0E07               	movlw	7
  5910  0019C8  6E5E               	movwf	_StrippedKey,c
  5911                           
  5912                           ;KeyValue.c: 119: SerTx(';');
  5913  0019CA  0E3B               	movlw	59
  5914  0019CC  EC14  F019         	call	i2_SerTx
  5915                           
  5916                           ;KeyValue.c: 120: }
  5917  0019D0  D153               	goto	i2l3490
  5918  0019D2                     i2l3406:
  5919                           
  5920                           ;KeyValue.c: 122: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  5921  0019D2  0EA6               	movlw	low _key
  5922  0019D4  6E01               	movwf	strcmp@s1,c
  5923  0019D6  0E00               	movlw	high _key
  5924  0019D8  6E02               	movwf	strcmp@s1+1,c
  5925  0019DA  0E58               	movlw	low STR_11
  5926  0019DC  6E03               	movwf	strcmp@s2,c
  5927  0019DE  0E10               	movlw	high STR_11
  5928  0019E0  6E04               	movwf	strcmp@s2+1,c
  5929  0019E2  ECC5  F016         	call	_strcmp	;wreg free
  5930  0019E6  5001               	movf	?_strcmp,w,c
  5931  0019E8  1002               	iorwf	?_strcmp+1,w,c
  5932  0019EA  B4D8               	btfsc	status,2,c
  5933  0019EC  D00E               	goto	i2l3410
  5934  0019EE  0EA6               	movlw	low _key
  5935  0019F0  6E01               	movwf	strcmp@s1,c
  5936  0019F2  0E00               	movlw	high _key
  5937  0019F4  6E02               	movwf	strcmp@s1+1,c
  5938  0019F6  0E64               	movlw	low STR_12
  5939  0019F8  6E03               	movwf	strcmp@s2,c
  5940  0019FA  0E10               	movlw	high STR_12
  5941  0019FC  6E04               	movwf	strcmp@s2+1,c
  5942  0019FE  ECC5  F016         	call	_strcmp	;wreg free
  5943  001A02  5001               	movf	?_strcmp,w,c
  5944  001A04  1002               	iorwf	?_strcmp+1,w,c
  5945  001A06  A4D8               	btfss	status,2,c
  5946  001A08  D006               	goto	i2l3414
  5947  001A0A                     i2l3410:
  5948                           
  5949                           ;KeyValue.c: 123: {
  5950                           ;KeyValue.c: 124: StrippedKey = 0x09;
  5951  001A0A  0E09               	movlw	9
  5952  001A0C  6E5E               	movwf	_StrippedKey,c
  5953                           
  5954                           ;KeyValue.c: 125: SerTx(';');
  5955  001A0E  0E3B               	movlw	59
  5956  001A10  EC14  F019         	call	i2_SerTx
  5957                           
  5958                           ;KeyValue.c: 126: }
  5959  001A14  D131               	goto	i2l3490
  5960  001A16                     i2l3414:
  5961                           
  5962                           ;KeyValue.c: 128: else
  5963                           ;KeyValue.c: 129: {
  5964                           ;KeyValue.c: 130: SerTxStr("???");
  5965  001A16  0E44               	movlw	low STR_13
  5966  001A18  6E02               	movwf	i2SerTxStr@string,c
  5967  001A1A  0E10               	movlw	high STR_13
  5968  001A1C  6E03               	movwf	i2SerTxStr@string+1,c
  5969  001A1E  EC6F  F016         	call	i2_SerTxStr	;wreg free
  5970  001A22  D127               	goto	i2l3488
  5971                           
  5972                           ;KeyValue.c: 132: }
  5973                           ;KeyValue.c: 133: }
  5974                           
  5975                           ;KeyValue.c: 131: StrippedKey = 0;
  5976  001A24  D129               	goto	i2l3490
  5977  001A26                     i2l3418:
  5978                           
  5979                           ;KeyValue.c: 135: else if (flag == 0)
  5980  001A26  5050               	movf	keyValue@flag,w,c
  5981  001A28  A4D8               	btfss	status,2,c
  5982  001A2A  D126               	goto	i2l3490
  5983                           
  5984                           ;KeyValue.c: 136: {
  5985                           ;KeyValue.c: 137: y = 0;
  5986  001A2C  0E00               	movlw	0
  5987  001A2E  6E51               	movwf	keyValue@y,c
  5988                           
  5989                           ;KeyValue.c: 138: while (str[y] != 0x0D)
  5990  001A30  D014               	goto	i2l3426
  5991  001A32                     i2l3422:
  5992                           
  5993                           ;KeyValue.c: 139: {
  5994                           ;KeyValue.c: 141: key[y] = str[y];
  5995  001A32  5051               	movf	keyValue@y,w,c
  5996  001A34  0D01               	mullw	1
  5997  001A36  50F3               	movf	prodl,w,c
  5998  001A38  2448               	addwf	keyValue@str,w,c
  5999  001A3A  6ED9               	movwf	fsr2l,c
  6000  001A3C  50F4               	movf	prodh,w,c
  6001  001A3E  2049               	addwfc	keyValue@str+1,w,c
  6002  001A40  6EDA               	movwf	fsr2h,c
  6003  001A42  5051               	movf	keyValue@y,w,c
  6004  001A44  0D01               	mullw	1
  6005  001A46  0EA6               	movlw	low _key
  6006  001A48  24F3               	addwf	prodl,w,c
  6007  001A4A  6EE1               	movwf	fsr1l,c
  6008  001A4C  0E00               	movlw	high _key
  6009  001A4E  20F4               	addwfc	prodh,w,c
  6010  001A50  6EE2               	movwf	fsr1h,c
  6011  001A52  CFDF FFE7          	movff	indf2,indf1
  6012                           
  6013                           ;KeyValue.c: 142: y++;
  6014  001A56  2A51               	incf	keyValue@y,f,c
  6015  001A58  D000               	goto	i2l3426
  6016  001A5A                     i2l3426:
  6017  001A5A  5051               	movf	keyValue@y,w,c
  6018  001A5C  0D01               	mullw	1
  6019  001A5E  50F3               	movf	prodl,w,c
  6020  001A60  2448               	addwf	keyValue@str,w,c
  6021  001A62  6ED9               	movwf	fsr2l,c
  6022  001A64  50F4               	movf	prodh,w,c
  6023  001A66  2049               	addwfc	keyValue@str+1,w,c
  6024  001A68  6EDA               	movwf	fsr2h,c
  6025  001A6A  0E0D               	movlw	13
  6026  001A6C  18DE               	xorwf	postinc2,w,c
  6027  001A6E  A4D8               	btfss	status,2,c
  6028  001A70  D7E0               	goto	i2l3422
  6029                           
  6030                           ;KeyValue.c: 143: }
  6031                           ;KeyValue.c: 145: SerTxStr("Key: ");
  6032  001A72  0E3E               	movlw	low STR_3
  6033  001A74  6E02               	movwf	i2SerTxStr@string,c
  6034  001A76  0E10               	movlw	high STR_3
  6035  001A78  6E03               	movwf	i2SerTxStr@string+1,c
  6036  001A7A  EC6F  F016         	call	i2_SerTxStr	;wreg free
  6037                           
  6038                           ;KeyValue.c: 146: SerTxStr(key);
  6039  001A7E  0EA6               	movlw	low _key
  6040  001A80  6E02               	movwf	i2SerTxStr@string,c
  6041  001A82  0E00               	movlw	high _key
  6042  001A84  6E03               	movwf	i2SerTxStr@string+1,c
  6043  001A86  EC6F  F016         	call	i2_SerTxStr	;wreg free
  6044                           
  6045                           ;KeyValue.c: 148: if ((strcmp(key, "AZ") == 0) || (strcmp(key, "az") == 0))
  6046  001A8A  0EA6               	movlw	low _key
  6047  001A8C  6E01               	movwf	strcmp@s1,c
  6048  001A8E  0E00               	movlw	high _key
  6049  001A90  6E02               	movwf	strcmp@s1+1,c
  6050  001A92  0E61               	movlw	low STR_15
  6051  001A94  6E03               	movwf	strcmp@s2,c
  6052  001A96  0E10               	movlw	high STR_15
  6053  001A98  6E04               	movwf	strcmp@s2+1,c
  6054  001A9A  ECC5  F016         	call	_strcmp	;wreg free
  6055  001A9E  5001               	movf	?_strcmp,w,c
  6056  001AA0  1002               	iorwf	?_strcmp+1,w,c
  6057  001AA2  B4D8               	btfsc	status,2,c
  6058  001AA4  D00E               	goto	i2l3434
  6059  001AA6  0EA6               	movlw	low _key
  6060  001AA8  6E01               	movwf	strcmp@s1,c
  6061  001AAA  0E00               	movlw	high _key
  6062  001AAC  6E02               	movwf	strcmp@s1+1,c
  6063  001AAE  0E6D               	movlw	low STR_16
  6064  001AB0  6E03               	movwf	strcmp@s2,c
  6065  001AB2  0E10               	movlw	high STR_16
  6066  001AB4  6E04               	movwf	strcmp@s2+1,c
  6067  001AB6  ECC5  F016         	call	_strcmp	;wreg free
  6068  001ABA  5001               	movf	?_strcmp,w,c
  6069  001ABC  1002               	iorwf	?_strcmp+1,w,c
  6070  001ABE  A4D8               	btfss	status,2,c
  6071  001AC0  D006               	goto	i2l3438
  6072  001AC2                     i2l3434:
  6073                           
  6074                           ;KeyValue.c: 149: {
  6075                           ;KeyValue.c: 150: AZEL = 1;
  6076  001AC2  0E01               	movlw	1
  6077  001AC4  6E5F               	movwf	_AZEL,c
  6078                           
  6079                           ;KeyValue.c: 151: SerTx(';');
  6080  001AC6  0E3B               	movlw	59
  6081  001AC8  EC14  F019         	call	i2_SerTx
  6082                           
  6083                           ;KeyValue.c: 152: }
  6084  001ACC  D0D5               	goto	i2l3490
  6085  001ACE                     i2l3438:
  6086                           
  6087                           ;KeyValue.c: 154: else if ((strcmp(key, "EL") == 0) || (strcmp(key, "el") == 0))
  6088  001ACE  0EA6               	movlw	low _key
  6089  001AD0  6E01               	movwf	strcmp@s1,c
  6090  001AD2  0E00               	movlw	high _key
  6091  001AD4  6E02               	movwf	strcmp@s1+1,c
  6092  001AD6  0E49               	movlw	low (STR_21+1)
  6093  001AD8  6E03               	movwf	strcmp@s2,c
  6094  001ADA  0E10               	movlw	high (STR_21+1)
  6095  001ADC  6E04               	movwf	strcmp@s2+1,c
  6096  001ADE  ECC5  F016         	call	_strcmp	;wreg free
  6097  001AE2  5001               	movf	?_strcmp,w,c
  6098  001AE4  1002               	iorwf	?_strcmp+1,w,c
  6099  001AE6  B4D8               	btfsc	status,2,c
  6100  001AE8  D00E               	goto	i2l3442
  6101  001AEA  0EA6               	movlw	low _key
  6102  001AEC  6E01               	movwf	strcmp@s1,c
  6103  001AEE  0E00               	movlw	high _key
  6104  001AF0  6E02               	movwf	strcmp@s1+1,c
  6105  001AF2  0E51               	movlw	low (STR_22+1)
  6106  001AF4  6E03               	movwf	strcmp@s2,c
  6107  001AF6  0E10               	movlw	high (STR_22+1)
  6108  001AF8  6E04               	movwf	strcmp@s2+1,c
  6109  001AFA  ECC5  F016         	call	_strcmp	;wreg free
  6110  001AFE  5001               	movf	?_strcmp,w,c
  6111  001B00  1002               	iorwf	?_strcmp+1,w,c
  6112  001B02  A4D8               	btfss	status,2,c
  6113  001B04  D006               	goto	i2l3446
  6114  001B06                     i2l3442:
  6115                           
  6116                           ;KeyValue.c: 155: {
  6117                           ;KeyValue.c: 156: AZEL = 2;
  6118  001B06  0E02               	movlw	2
  6119  001B08  6E5F               	movwf	_AZEL,c
  6120                           
  6121                           ;KeyValue.c: 157: SerTx(';');
  6122  001B0A  0E3B               	movlw	59
  6123  001B0C  EC14  F019         	call	i2_SerTx
  6124                           
  6125                           ;KeyValue.c: 158: }
  6126  001B10  D0B3               	goto	i2l3490
  6127  001B12                     i2l3446:
  6128                           
  6129                           ;KeyValue.c: 160: else if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  6130  001B12  0EA6               	movlw	low _key
  6131  001B14  6E01               	movwf	strcmp@s1,c
  6132  001B16  0E00               	movlw	high _key
  6133  001B18  6E02               	movwf	strcmp@s1+1,c
  6134  001B1A  0E4C               	movlw	low STR_5
  6135  001B1C  6E03               	movwf	strcmp@s2,c
  6136  001B1E  0E10               	movlw	high STR_5
  6137  001B20  6E04               	movwf	strcmp@s2+1,c
  6138  001B22  ECC5  F016         	call	_strcmp	;wreg free
  6139  001B26  5001               	movf	?_strcmp,w,c
  6140  001B28  1002               	iorwf	?_strcmp+1,w,c
  6141  001B2A  B4D8               	btfsc	status,2,c
  6142  001B2C  D00E               	goto	i2l3450
  6143  001B2E  0EA6               	movlw	low _key
  6144  001B30  6E01               	movwf	strcmp@s1,c
  6145  001B32  0E00               	movlw	high _key
  6146  001B34  6E02               	movwf	strcmp@s1+1,c
  6147  001B36  0E54               	movlw	low STR_6
  6148  001B38  6E03               	movwf	strcmp@s2,c
  6149  001B3A  0E10               	movlw	high STR_6
  6150  001B3C  6E04               	movwf	strcmp@s2+1,c
  6151  001B3E  ECC5  F016         	call	_strcmp	;wreg free
  6152  001B42  5001               	movf	?_strcmp,w,c
  6153  001B44  1002               	iorwf	?_strcmp+1,w,c
  6154  001B46  A4D8               	btfss	status,2,c
  6155  001B48  D006               	goto	i2l3454
  6156  001B4A                     i2l3450:
  6157                           
  6158                           ;KeyValue.c: 161: {
  6159                           ;KeyValue.c: 162: StrippedKey = 0x02;
  6160  001B4A  0E02               	movlw	2
  6161  001B4C  6E5E               	movwf	_StrippedKey,c
  6162                           
  6163                           ;KeyValue.c: 163: SerTx(';');
  6164  001B4E  0E3B               	movlw	59
  6165  001B50  EC14  F019         	call	i2_SerTx
  6166                           
  6167                           ;KeyValue.c: 164: }
  6168  001B54  D091               	goto	i2l3490
  6169  001B56                     i2l3454:
  6170                           
  6171                           ;KeyValue.c: 166: else if ((strcmp(key, "VEL") == 0) || (strcmp(key, "vel") == 0))
  6172  001B56  0EA6               	movlw	low _key
  6173  001B58  6E01               	movwf	strcmp@s1,c
  6174  001B5A  0E00               	movlw	high _key
  6175  001B5C  6E02               	movwf	strcmp@s1+1,c
  6176  001B5E  0E48               	movlw	low STR_21
  6177  001B60  6E03               	movwf	strcmp@s2,c
  6178  001B62  0E10               	movlw	high STR_21
  6179  001B64  6E04               	movwf	strcmp@s2+1,c
  6180  001B66  ECC5  F016         	call	_strcmp	;wreg free
  6181  001B6A  5001               	movf	?_strcmp,w,c
  6182  001B6C  1002               	iorwf	?_strcmp+1,w,c
  6183  001B6E  B4D8               	btfsc	status,2,c
  6184  001B70  D00E               	goto	i2l3458
  6185  001B72  0EA6               	movlw	low _key
  6186  001B74  6E01               	movwf	strcmp@s1,c
  6187  001B76  0E00               	movlw	high _key
  6188  001B78  6E02               	movwf	strcmp@s1+1,c
  6189  001B7A  0E50               	movlw	low STR_22
  6190  001B7C  6E03               	movwf	strcmp@s2,c
  6191  001B7E  0E10               	movlw	high STR_22
  6192  001B80  6E04               	movwf	strcmp@s2+1,c
  6193  001B82  ECC5  F016         	call	_strcmp	;wreg free
  6194  001B86  5001               	movf	?_strcmp,w,c
  6195  001B88  1002               	iorwf	?_strcmp+1,w,c
  6196  001B8A  A4D8               	btfss	status,2,c
  6197  001B8C  D006               	goto	i2l3462
  6198  001B8E                     i2l3458:
  6199                           
  6200                           ;KeyValue.c: 167: {
  6201                           ;KeyValue.c: 168: StrippedKey = 0x03;
  6202  001B8E  0E03               	movlw	3
  6203  001B90  6E5E               	movwf	_StrippedKey,c
  6204                           
  6205                           ;KeyValue.c: 169: SerTx(';');
  6206  001B92  0E3B               	movlw	59
  6207  001B94  EC14  F019         	call	i2_SerTx
  6208                           
  6209                           ;KeyValue.c: 170: }
  6210  001B98  D06F               	goto	i2l3490
  6211  001B9A                     i2l3462:
  6212                           
  6213                           ;KeyValue.c: 172: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  6214  001B9A  0EA6               	movlw	low _key
  6215  001B9C  6E01               	movwf	strcmp@s1,c
  6216  001B9E  0E00               	movlw	high _key
  6217  001BA0  6E02               	movwf	strcmp@s1+1,c
  6218  001BA2  0E5E               	movlw	low STR_7
  6219  001BA4  6E03               	movwf	strcmp@s2,c
  6220  001BA6  0E10               	movlw	high STR_7
  6221  001BA8  6E04               	movwf	strcmp@s2+1,c
  6222  001BAA  ECC5  F016         	call	_strcmp	;wreg free
  6223  001BAE  5001               	movf	?_strcmp,w,c
  6224  001BB0  1002               	iorwf	?_strcmp+1,w,c
  6225  001BB2  B4D8               	btfsc	status,2,c
  6226  001BB4  D00E               	goto	i2l3466
  6227  001BB6  0EA6               	movlw	low _key
  6228  001BB8  6E01               	movwf	strcmp@s1,c
  6229  001BBA  0E00               	movlw	high _key
  6230  001BBC  6E02               	movwf	strcmp@s1+1,c
  6231  001BBE  0E6A               	movlw	low STR_8
  6232  001BC0  6E03               	movwf	strcmp@s2,c
  6233  001BC2  0E10               	movlw	high STR_8
  6234  001BC4  6E04               	movwf	strcmp@s2+1,c
  6235  001BC6  ECC5  F016         	call	_strcmp	;wreg free
  6236  001BCA  5001               	movf	?_strcmp,w,c
  6237  001BCC  1002               	iorwf	?_strcmp+1,w,c
  6238  001BCE  A4D8               	btfss	status,2,c
  6239  001BD0  D006               	goto	i2l3470
  6240  001BD2                     i2l3466:
  6241                           
  6242                           ;KeyValue.c: 173: {
  6243                           ;KeyValue.c: 174: StrippedKey = 0x04;
  6244  001BD2  0E04               	movlw	4
  6245  001BD4  6E5E               	movwf	_StrippedKey,c
  6246                           
  6247                           ;KeyValue.c: 175: SerTx(';');
  6248  001BD6  0E3B               	movlw	59
  6249  001BD8  EC14  F019         	call	i2_SerTx
  6250                           
  6251                           ;KeyValue.c: 176: }
  6252  001BDC  D04D               	goto	i2l3490
  6253  001BDE                     i2l3470:
  6254                           
  6255                           ;KeyValue.c: 178: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  6256  001BDE  0EA6               	movlw	low _key
  6257  001BE0  6E01               	movwf	strcmp@s1,c
  6258  001BE2  0E00               	movlw	high _key
  6259  001BE4  6E02               	movwf	strcmp@s1+1,c
  6260  001BE6  0E5B               	movlw	low STR_9
  6261  001BE8  6E03               	movwf	strcmp@s2,c
  6262  001BEA  0E10               	movlw	high STR_9
  6263  001BEC  6E04               	movwf	strcmp@s2+1,c
  6264  001BEE  ECC5  F016         	call	_strcmp	;wreg free
  6265  001BF2  5001               	movf	?_strcmp,w,c
  6266  001BF4  1002               	iorwf	?_strcmp+1,w,c
  6267  001BF6  B4D8               	btfsc	status,2,c
  6268  001BF8  D00E               	goto	i2l3474
  6269  001BFA  0EA6               	movlw	low _key
  6270  001BFC  6E01               	movwf	strcmp@s1,c
  6271  001BFE  0E00               	movlw	high _key
  6272  001C00  6E02               	movwf	strcmp@s1+1,c
  6273  001C02  0E67               	movlw	low STR_10
  6274  001C04  6E03               	movwf	strcmp@s2,c
  6275  001C06  0E10               	movlw	high STR_10
  6276  001C08  6E04               	movwf	strcmp@s2+1,c
  6277  001C0A  ECC5  F016         	call	_strcmp	;wreg free
  6278  001C0E  5001               	movf	?_strcmp,w,c
  6279  001C10  1002               	iorwf	?_strcmp+1,w,c
  6280  001C12  A4D8               	btfss	status,2,c
  6281  001C14  D006               	goto	i2l3478
  6282  001C16                     i2l3474:
  6283                           
  6284                           ;KeyValue.c: 179: {
  6285                           ;KeyValue.c: 180: StrippedKey = 0x06;
  6286  001C16  0E06               	movlw	6
  6287  001C18  6E5E               	movwf	_StrippedKey,c
  6288                           
  6289                           ;KeyValue.c: 181: SerTx(';');
  6290  001C1A  0E3B               	movlw	59
  6291  001C1C  EC14  F019         	call	i2_SerTx
  6292                           
  6293                           ;KeyValue.c: 182: }
  6294  001C20  D02B               	goto	i2l3490
  6295  001C22                     i2l3478:
  6296                           
  6297                           ;KeyValue.c: 184: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  6298  001C22  0EA6               	movlw	low _key
  6299  001C24  6E01               	movwf	strcmp@s1,c
  6300  001C26  0E00               	movlw	high _key
  6301  001C28  6E02               	movwf	strcmp@s1+1,c
  6302  001C2A  0E58               	movlw	low STR_11
  6303  001C2C  6E03               	movwf	strcmp@s2,c
  6304  001C2E  0E10               	movlw	high STR_11
  6305  001C30  6E04               	movwf	strcmp@s2+1,c
  6306  001C32  ECC5  F016         	call	_strcmp	;wreg free
  6307  001C36  5001               	movf	?_strcmp,w,c
  6308  001C38  1002               	iorwf	?_strcmp+1,w,c
  6309  001C3A  B4D8               	btfsc	status,2,c
  6310  001C3C  D00E               	goto	i2l3482
  6311  001C3E  0EA6               	movlw	low _key
  6312  001C40  6E01               	movwf	strcmp@s1,c
  6313  001C42  0E00               	movlw	high _key
  6314  001C44  6E02               	movwf	strcmp@s1+1,c
  6315  001C46  0E64               	movlw	low STR_12
  6316  001C48  6E03               	movwf	strcmp@s2,c
  6317  001C4A  0E10               	movlw	high STR_12
  6318  001C4C  6E04               	movwf	strcmp@s2+1,c
  6319  001C4E  ECC5  F016         	call	_strcmp	;wreg free
  6320  001C52  5001               	movf	?_strcmp,w,c
  6321  001C54  1002               	iorwf	?_strcmp+1,w,c
  6322  001C56  A4D8               	btfss	status,2,c
  6323  001C58  D006               	goto	i2l3486
  6324  001C5A                     i2l3482:
  6325                           
  6326                           ;KeyValue.c: 185: {
  6327                           ;KeyValue.c: 186: StrippedKey = 0x08;
  6328  001C5A  0E08               	movlw	8
  6329  001C5C  6E5E               	movwf	_StrippedKey,c
  6330                           
  6331                           ;KeyValue.c: 187: SerTx(';');
  6332  001C5E  0E3B               	movlw	59
  6333  001C60  EC14  F019         	call	i2_SerTx
  6334                           
  6335                           ;KeyValue.c: 188: }
  6336  001C64  D009               	goto	i2l3490
  6337  001C66                     i2l3486:
  6338                           
  6339                           ;KeyValue.c: 190: else
  6340                           ;KeyValue.c: 191: {
  6341                           ;KeyValue.c: 192: SerTxStr("???");
  6342  001C66  0E44               	movlw	low STR_13
  6343  001C68  6E02               	movwf	i2SerTxStr@string,c
  6344  001C6A  0E10               	movlw	high STR_13
  6345  001C6C  6E03               	movwf	i2SerTxStr@string+1,c
  6346  001C6E  EC6F  F016         	call	i2_SerTxStr	;wreg free
  6347  001C72                     i2l3488:
  6348                           
  6349                           ;KeyValue.c: 193: StrippedKey = 0;
  6350  001C72  0E00               	movlw	0
  6351  001C74  6E5E               	movwf	_StrippedKey,c
  6352  001C76  D000               	goto	i2l3490
  6353  001C78                     i2l3490:
  6354                           
  6355                           ;KeyValue.c: 194: }
  6356                           ;KeyValue.c: 195: }
  6357                           ;KeyValue.c: 197: StrippedValue = strtod(value, &str_end);
  6358  001C78  0E9C               	movlw	low _value
  6359  001C7A  6E3C               	movwf	strtod@s,c
  6360  001C7C  0E00               	movlw	high _value
  6361  001C7E  6E3D               	movwf	strtod@s+1,c
  6362  001C80  0E4E               	movlw	low keyValue@str_end
  6363  001C82  6E3E               	movwf	strtod@res,c
  6364  001C84  0E00               	movlw	high keyValue@str_end
  6365  001C86  6E3F               	movwf	strtod@res+1,c
  6366  001C88  EC88  F00E         	call	_strtod	;wreg free
  6367  001C8C  C03C  F072         	movff	?_strtod,_StrippedValue
  6368  001C90  C03D  F073         	movff	?_strtod+1,_StrippedValue+1
  6369  001C94  C03E  F074         	movff	?_strtod+2,_StrippedValue+2
  6370                           
  6371                           ;KeyValue.c: 201: for (x = 0; x < 5; x++)
  6372  001C98  0E00               	movlw	0
  6373  001C9A  6E52               	movwf	keyValue@x,c
  6374  001C9C                     i2l3494:
  6375  001C9C  0E04               	movlw	4
  6376  001C9E  6452               	cpfsgt	keyValue@x,c
  6377  001CA0  D001               	goto	i2l3498
  6378  001CA2  D00C               	goto	i2l3504
  6379  001CA4                     i2l3498:
  6380                           
  6381                           ;KeyValue.c: 202: {
  6382                           ;KeyValue.c: 203: key[x] = (0);
  6383  001CA4  5052               	movf	keyValue@x,w,c
  6384  001CA6  0D01               	mullw	1
  6385  001CA8  0EA6               	movlw	low _key
  6386  001CAA  24F3               	addwf	prodl,w,c
  6387  001CAC  6ED9               	movwf	fsr2l,c
  6388  001CAE  0E00               	movlw	high _key
  6389  001CB0  20F4               	addwfc	prodh,w,c
  6390  001CB2  6EDA               	movwf	fsr2h,c
  6391  001CB4  0E00               	movlw	0
  6392  001CB6  6EDF               	movwf	indf2,c
  6393  001CB8  2A52               	incf	keyValue@x,f,c
  6394  001CBA  D7F0               	goto	i2l3494
  6395  001CBC                     i2l3504:
  6396                           
  6397                           ;KeyValue.c: 204: }
  6398                           ;KeyValue.c: 206: for (x = 0; x < 10; x++)
  6399  001CBC  0E00               	movlw	0
  6400  001CBE  6E52               	movwf	keyValue@x,c
  6401  001CC0                     i2l3506:
  6402  001CC0  0E09               	movlw	9
  6403  001CC2  6452               	cpfsgt	keyValue@x,c
  6404  001CC4  D001               	goto	i2l3510
  6405  001CC6  D00C               	goto	i2l3516
  6406  001CC8                     i2l3510:
  6407                           
  6408                           ;KeyValue.c: 207: {
  6409                           ;KeyValue.c: 208: value[x] = (0);
  6410  001CC8  5052               	movf	keyValue@x,w,c
  6411  001CCA  0D01               	mullw	1
  6412  001CCC  0E9C               	movlw	low _value
  6413  001CCE  24F3               	addwf	prodl,w,c
  6414  001CD0  6ED9               	movwf	fsr2l,c
  6415  001CD2  0E00               	movlw	high _value
  6416  001CD4  20F4               	addwfc	prodh,w,c
  6417  001CD6  6EDA               	movwf	fsr2h,c
  6418  001CD8  0E00               	movlw	0
  6419  001CDA  6EDF               	movwf	indf2,c
  6420  001CDC  2A52               	incf	keyValue@x,f,c
  6421  001CDE  D7F0               	goto	i2l3506
  6422  001CE0                     i2l3516:
  6423                           
  6424                           ;KeyValue.c: 209: }
  6425                           ;KeyValue.c: 211: for (x = 0; x < 30; x++)
  6426  001CE0  0E00               	movlw	0
  6427  001CE2  6E52               	movwf	keyValue@x,c
  6428  001CE4                     i2l3518:
  6429  001CE4  0E1D               	movlw	29
  6430  001CE6  6452               	cpfsgt	keyValue@x,c
  6431  001CE8  D001               	goto	i2l3522
  6432  001CEA  D00C               	goto	i2l3528
  6433  001CEC                     i2l3522:
  6434                           
  6435                           ;KeyValue.c: 212: {
  6436                           ;KeyValue.c: 213: received[x] = (0);
  6437  001CEC  5052               	movf	keyValue@x,w,c
  6438  001CEE  0D01               	mullw	1
  6439  001CF0  0E7E               	movlw	low _received
  6440  001CF2  24F3               	addwf	prodl,w,c
  6441  001CF4  6ED9               	movwf	fsr2l,c
  6442  001CF6  0E00               	movlw	high _received
  6443  001CF8  20F4               	addwfc	prodh,w,c
  6444  001CFA  6EDA               	movwf	fsr2h,c
  6445  001CFC  0E00               	movlw	0
  6446  001CFE  6EDF               	movwf	indf2,c
  6447  001D00  2A52               	incf	keyValue@x,f,c
  6448  001D02  D7F0               	goto	i2l3518
  6449  001D04                     i2l3528:
  6450                           
  6451                           ;KeyValue.c: 214: }
  6452                           ;KeyValue.c: 215: flag = 0;
  6453  001D04  0E00               	movlw	0
  6454  001D06  6E50               	movwf	keyValue@flag,c
  6455                           
  6456                           ;KeyValue.c: 216: RCflag = 1;
  6457  001D08  0E01               	movlw	1
  6458  001D0A  0100               	movlb	0	; () banked
  6459  001D0C  6F7D               	movwf	_RCflag& (0+255),b
  6460                           
  6461                           ; BSR set to: 0
  6462  001D0E  0012               	return		;funcret
  6463  001D10                     __end_of_keyValue:
  6464                           	opt stack 0
  6465                           pclatu	equ	0xFFB
  6466                           pclath	equ	0xFFA
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           indf0	equ	0xFEF
  6475                           postinc0	equ	0xFEE
  6476                           fsr0h	equ	0xFEA
  6477                           fsr0l	equ	0xFE9
  6478                           wreg	equ	0xFE8
  6479                           indf1	equ	0xFE7
  6480                           fsr1h	equ	0xFE2
  6481                           fsr1l	equ	0xFE1
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function i2_SerTxStr *****************
  6489 ;; Defined at:
  6490 ;;		line 50 in file "SerComm.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  string          2    1[COMRAM] PTR unsigned char 
  6493 ;;		 -> STR_30(36), STR_29(4), STR_14(6), STR_13(4), 
  6494 ;;		 -> STR_4(11), value(10), STR_3(6), key(5), 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;Total ram usage:        2 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    1
  6513 ;; This function calls:
  6514 ;;		i2_SerTx
  6515 ;; This function is called by:
  6516 ;;		_keyValue
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text38
  6521  002CDE                     __ptext38:
  6522                           	opt stack 0
  6523  002CDE                     i2_SerTxStr:
  6524                           	opt stack 21
  6525                           
  6526                           ;SerComm.c: 52: while (*string)
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;incstack = 0
  6530  002CDE  D016               	goto	i2l3174
  6531  002CE0                     i2l3170:
  6532                           
  6533                           ;SerComm.c: 53: SerTx(*string++);
  6534  002CE0  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  6535  002CE4  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  6536  002CE8  0E00               	movlw	low (__smallconst shr (0+16))
  6537  002CEA  6EF8               	movwf	tblptru,c
  6538  002CEC  0E0F               	movlw	(high __ramtop+-1)
  6539  002CEE  64F7               	cpfsgt	tblptrh,c
  6540  002CF0  D003               	bra	i2u318_47
  6541  002CF2  0008               	tblrd		*
  6542  002CF4  50F5               	movf	tablat,w,c
  6543  002CF6  D005               	bra	i2u318_40
  6544  002CF8                     i2u318_47:
  6545  002CF8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6546  002CFC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6547  002D00  50EF               	movf	indf0,w,c
  6548  002D02                     i2u318_40:
  6549  002D02  EC14  F019         	call	i2_SerTx
  6550  002D06  4A02               	infsnz	i2SerTxStr@string,f,c
  6551  002D08  2A03               	incf	i2SerTxStr@string+1,f,c
  6552  002D0A  D000               	goto	i2l3174
  6553  002D0C                     i2l3174:
  6554  002D0C  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  6555  002D10  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  6556  002D14  0E00               	movlw	low (__smallconst shr (0+16))
  6557  002D16  6EF8               	movwf	tblptru,c
  6558  002D18  0E0F               	movlw	(high __ramtop+-1)
  6559  002D1A  64F7               	cpfsgt	tblptrh,c
  6560  002D1C  D003               	bra	i2u319_47
  6561  002D1E  0008               	tblrd		*
  6562  002D20  50F5               	movf	tablat,w,c
  6563  002D22  D005               	bra	i2u319_40
  6564  002D24                     i2u319_47:
  6565  002D24  CFF6 FFE9          	movff	tblptrl,fsr0l
  6566  002D28  CFF7 FFEA          	movff	tblptrh,fsr0h
  6567  002D2C  50EF               	movf	indf0,w,c
  6568  002D2E                     i2u319_40:
  6569  002D2E  0900               	iorlw	0
  6570  002D30  A4D8               	btfss	status,2,c
  6571  002D32  D7D6               	goto	i2l3170
  6572  002D34  0012               	return		;funcret
  6573  002D36                     __end_ofi2_SerTxStr:
  6574                           	opt stack 0
  6575                           pclatu	equ	0xFFB
  6576                           pclath	equ	0xFFA
  6577                           tblptru	equ	0xFF8
  6578                           tblptrh	equ	0xFF7
  6579                           tblptrl	equ	0xFF6
  6580                           tablat	equ	0xFF5
  6581                           prodh	equ	0xFF4
  6582                           prodl	equ	0xFF3
  6583                           intcon	equ	0xFF2
  6584                           indf0	equ	0xFEF
  6585                           postinc0	equ	0xFEE
  6586                           fsr0h	equ	0xFEA
  6587                           fsr0l	equ	0xFE9
  6588                           wreg	equ	0xFE8
  6589                           indf1	equ	0xFE7
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           fsr2h	equ	0xFDA
  6595                           fsr2l	equ	0xFD9
  6596                           status	equ	0xFD8
  6597                           
  6598 ;; *************** function i2_SerTx *****************
  6599 ;; Defined at:
  6600 ;;		line 41 in file "SerComm.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  c               1    wreg     unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  c               1    0[COMRAM] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;Total ram usage:        1 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_RCInt
  6624 ;;		_keyValue
  6625 ;;		i2_SerTxStr
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text39
  6630  003228                     __ptext39:
  6631                           	opt stack 0
  6632  003228                     i2_SerTx:
  6633                           	opt stack 23
  6634                           
  6635                           ;incstack = 0
  6636                           ;i2SerTx@c stored from wreg
  6637  003228  6E01               	movwf	i2SerTx@c,c
  6638                           
  6639                           ;SerComm.c: 43: TXREG1 = c;
  6640  00322A  C001  FFAD         	movff	i2SerTx@c,4013	;volatile
  6641                           
  6642                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  6643  00322E  D000               	goto	i2l326
  6644  003230                     i2l326:
  6645  003230  A89E               	btfss	3998,4,c	;volatile
  6646  003232  D7FE               	goto	i2l326
  6647  003234  0012               	return		;funcret
  6648  003236                     __end_ofi2_SerTx:
  6649                           	opt stack 0
  6650                           pclatu	equ	0xFFB
  6651                           pclath	equ	0xFFA
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           indf0	equ	0xFEF
  6660                           postinc0	equ	0xFEE
  6661                           fsr0h	equ	0xFEA
  6662                           fsr0l	equ	0xFE9
  6663                           wreg	equ	0xFE8
  6664                           indf1	equ	0xFE7
  6665                           fsr1h	equ	0xFE2
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _strtod *****************
  6674 ;; Defined at:
  6675 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/atof.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  s               2   59[COMRAM] PTR const unsigned char 
  6678 ;;		 -> value(10), 
  6679 ;;  res             2   61[COMRAM] PTR PTR const unsigned c
  6680 ;;		 -> NULL(0), keyValue@str_end(2), 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  _u              4   67[COMRAM] struct .
  6683 ;;  expon           1   66[COMRAM] char 
  6684 ;;  flags           1   65[COMRAM] unsigned char 
  6685 ;;  eexp            1   64[COMRAM] char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  3   59[COMRAM] char 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:       12 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    2
  6702 ;; This function calls:
  6703 ;;		___altoft
  6704 ;;		___ftdiv
  6705 ;;		___ftge
  6706 ;;		___ftmul
  6707 ;;		___ftneg
  6708 ;;		___lmul
  6709 ;;		_isdigit
  6710 ;;		_isspace
  6711 ;; This function is called by:
  6712 ;;		_keyValue
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text40
  6717  001D10                     __ptext40:
  6718                           	opt stack 0
  6719  001D10                     _strtod:
  6720                           	opt stack 20
  6721                           
  6722                           ;incstack = 0
  6723  001D10  503E               	movf	strtod@res,w,c
  6724  001D12  103F               	iorwf	strtod@res+1,w,c
  6725  001D14  B4D8               	btfsc	status,2,c
  6726  001D16  D00C               	goto	i2l2844
  6727  001D18  C03E  FFD9         	movff	strtod@res,fsr2l
  6728  001D1C  C03F  FFDA         	movff	strtod@res+1,fsr2h
  6729  001D20  C03C  FFDE         	movff	strtod@s,postinc2
  6730  001D24  C03D  FFDD         	movff	strtod@s+1,postdec2
  6731  001D28  D003               	goto	i2l2844
  6732  001D2A                     i2l2842:
  6733  001D2A  4A3C               	infsnz	strtod@s,f,c
  6734  001D2C  2A3D               	incf	strtod@s+1,f,c
  6735  001D2E  D000               	goto	i2l2844
  6736  001D30                     i2l2844:
  6737  001D30  C03C  FFD9         	movff	strtod@s,fsr2l
  6738  001D34  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6739  001D38  50DF               	movf	indf2,w,c
  6740  001D3A  6E41               	movwf	strtod@eexp,c
  6741  001D3C  5041               	movf	strtod@eexp,w,c
  6742  001D3E  ECF6  F017         	call	_isspace
  6743  001D42  B0D8               	btfsc	status,0,c
  6744  001D44  D7F2               	goto	i2l2842
  6745  001D46  0E00               	movlw	0
  6746  001D48  6E42               	movwf	strtod@flags,c
  6747  001D4A  0E2D               	movlw	45
  6748  001D4C  1841               	xorwf	strtod@eexp,w,c
  6749  001D4E  A4D8               	btfss	status,2,c
  6750  001D50  D003               	goto	i2l2854
  6751  001D52  0E01               	movlw	1
  6752  001D54  6E42               	movwf	strtod@flags,c
  6753  001D56  D004               	goto	i2l2856
  6754  001D58                     i2l2854:
  6755  001D58  0E2B               	movlw	43
  6756  001D5A  1841               	xorwf	strtod@eexp,w,c
  6757  001D5C  A4D8               	btfss	status,2,c
  6758  001D5E  D003               	goto	i2l2858
  6759  001D60                     i2l2856:
  6760  001D60  4A3C               	infsnz	strtod@s,f,c
  6761  001D62  2A3D               	incf	strtod@s+1,f,c
  6762  001D64  D000               	goto	i2l2858
  6763  001D66                     i2l2858:
  6764  001D66  0E00               	movlw	0
  6765  001D68  6E41               	movwf	strtod@eexp,c
  6766  001D6A  0E00               	movlw	0
  6767  001D6C  6E44               	movwf	strtod@_u,c
  6768  001D6E  0E00               	movlw	0
  6769  001D70  6E45               	movwf	strtod@_u+1,c
  6770  001D72  0E00               	movlw	0
  6771  001D74  6E46               	movwf	strtod@_u+2,c
  6772  001D76  0E00               	movlw	0
  6773  001D78  6E47               	movwf	strtod@_u+3,c
  6774  001D7A  0E00               	movlw	0
  6775  001D7C  6E43               	movwf	strtod@expon,c
  6776  001D7E  D000               	goto	i2l2864
  6777  001D80                     i2l2864:
  6778  001D80  B842               	btfsc	strtod@flags,4,c
  6779  001D82  D00A               	goto	i2l2870
  6780  001D84  C03C  FFD9         	movff	strtod@s,fsr2l
  6781  001D88  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6782  001D8C  0E2E               	movlw	46
  6783  001D8E  18DE               	xorwf	postinc2,w,c
  6784  001D90  A4D8               	btfss	status,2,c
  6785  001D92  D002               	goto	i2l2870
  6786  001D94  8842               	bsf	strtod@flags,4,c
  6787  001D96  D040               	goto	i2l676
  6788  001D98                     i2l2870:
  6789  001D98  C03C  FFD9         	movff	strtod@s,fsr2l
  6790  001D9C  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6791  001DA0  50DF               	movf	indf2,w,c
  6792  001DA2  EC7C  F018         	call	_isdigit
  6793  001DA6  A0D8               	btfss	status,0,c
  6794  001DA8  D03A               	goto	i2l2888
  6795  001DAA  D001               	goto	i2l2874
  6796  001DAC  D038               	goto	i2l2888
  6797  001DAE                     i2l2874:
  6798  001DAE  8242               	bsf	strtod@flags,1,c
  6799  001DB0  0E08               	movlw	8
  6800  001DB2  1841               	xorwf	strtod@eexp,w,c
  6801  001DB4  B4D8               	btfsc	status,2,c
  6802  001DB6  D02C               	goto	i2l674
  6803  001DB8  B842               	btfsc	strtod@flags,4,c
  6804  001DBA  0643               	decf	strtod@expon,f,c
  6805  001DBC  2A41               	incf	strtod@eexp,f,c
  6806  001DBE  C044  F001         	movff	strtod@_u,___lmul@multiplier
  6807  001DC2  C045  F002         	movff	strtod@_u+1,___lmul@multiplier+1
  6808  001DC6  C046  F003         	movff	strtod@_u+2,___lmul@multiplier+2
  6809  001DCA  C047  F004         	movff	strtod@_u+3,___lmul@multiplier+3
  6810  001DCE  0E0A               	movlw	10
  6811  001DD0  6E05               	movwf	___lmul@multiplicand,c
  6812  001DD2  0E00               	movlw	0
  6813  001DD4  6E06               	movwf	___lmul@multiplicand+1,c
  6814  001DD6  0E00               	movlw	0
  6815  001DD8  6E07               	movwf	___lmul@multiplicand+2,c
  6816  001DDA  0E00               	movlw	0
  6817  001DDC  6E08               	movwf	___lmul@multiplicand+3,c
  6818  001DDE  EC16  F016         	call	___lmul	;wreg free
  6819  001DE2  C001  F044         	movff	?___lmul,strtod@_u
  6820  001DE6  C002  F045         	movff	?___lmul+1,strtod@_u+1
  6821  001DEA  C003  F046         	movff	?___lmul+2,strtod@_u+2
  6822  001DEE  C004  F047         	movff	?___lmul+3,strtod@_u+3
  6823  001DF2  C03C  FFD9         	movff	strtod@s,fsr2l
  6824  001DF6  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6825  001DFA  50DF               	movf	indf2,w,c
  6826  001DFC  6E40               	movwf	??_strtod& (0+255),c
  6827  001DFE  0ED0               	movlw	208
  6828  001E00  2640               	addwf	??_strtod,f,c
  6829  001E02  5040               	movf	??_strtod,w,c
  6830  001E04  2644               	addwf	strtod@_u,f,c
  6831  001E06  0E00               	movlw	0
  6832  001E08  2245               	addwfc	strtod@_u+1,f,c
  6833  001E0A  2246               	addwfc	strtod@_u+2,f,c
  6834  001E0C  2247               	addwfc	strtod@_u+3,f,c
  6835  001E0E  D004               	goto	i2l676
  6836  001E10                     i2l674:
  6837  001E10  B842               	btfsc	strtod@flags,4,c
  6838  001E12  D002               	goto	i2l676
  6839  001E14  2A43               	incf	strtod@expon,f,c
  6840  001E16  D000               	goto	i2l676
  6841  001E18                     i2l676:
  6842  001E18  4A3C               	infsnz	strtod@s,f,c
  6843  001E1A  2A3D               	incf	strtod@s+1,f,c
  6844  001E1C  D7B1               	goto	i2l2864
  6845  001E1E                     i2l2888:
  6846  001E1E  0E00               	movlw	0
  6847  001E20  6E41               	movwf	strtod@eexp,c
  6848  001E22  C03C  FFD9         	movff	strtod@s,fsr2l
  6849  001E26  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6850  001E2A  0E65               	movlw	101
  6851  001E2C  18DE               	xorwf	postinc2,w,c
  6852  001E2E  B4D8               	btfsc	status,2,c
  6853  001E30  D008               	goto	i2l2894
  6854  001E32  C03C  FFD9         	movff	strtod@s,fsr2l
  6855  001E36  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6856  001E3A  0E45               	movlw	69
  6857  001E3C  18DE               	xorwf	postinc2,w,c
  6858  001E3E  A4D8               	btfss	status,2,c
  6859  001E40  D065               	goto	i2l2926
  6860  001E42                     i2l2894:
  6861  001E42  4A3C               	infsnz	strtod@s,f,c
  6862  001E44  2A3D               	incf	strtod@s+1,f,c
  6863  001E46  C03C  FFD9         	movff	strtod@s,fsr2l
  6864  001E4A  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6865  001E4E  0E2D               	movlw	45
  6866  001E50  18DE               	xorwf	postinc2,w,c
  6867  001E52  A4D8               	btfss	status,2,c
  6868  001E54  D002               	goto	i2l2898
  6869  001E56  8642               	bsf	strtod@flags,3,c
  6870  001E58  D008               	goto	i2l2900
  6871  001E5A                     i2l2898:
  6872  001E5A  C03C  FFD9         	movff	strtod@s,fsr2l
  6873  001E5E  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6874  001E62  0E2B               	movlw	43
  6875  001E64  18DE               	xorwf	postinc2,w,c
  6876  001E66  A4D8               	btfss	status,2,c
  6877  001E68  D006               	goto	i2l2904
  6878  001E6A                     i2l2900:
  6879  001E6A  4A3C               	infsnz	strtod@s,f,c
  6880  001E6C  2A3D               	incf	strtod@s+1,f,c
  6881  001E6E  D003               	goto	i2l2904
  6882  001E70                     i2l2902:
  6883  001E70  4A3C               	infsnz	strtod@s,f,c
  6884  001E72  2A3D               	incf	strtod@s+1,f,c
  6885  001E74  D000               	goto	i2l2904
  6886  001E76                     i2l2904:
  6887  001E76  C03C  FFD9         	movff	strtod@s,fsr2l
  6888  001E7A  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6889  001E7E  0E30               	movlw	48
  6890  001E80  18DE               	xorwf	postinc2,w,c
  6891  001E82  B4D8               	btfsc	status,2,c
  6892  001E84  D7F5               	goto	i2l2902
  6893  001E86  C03C  FFD9         	movff	strtod@s,fsr2l
  6894  001E8A  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6895  001E8E  50DF               	movf	indf2,w,c
  6896  001E90  EC7C  F018         	call	_isdigit
  6897  001E94  A0D8               	btfss	status,0,c
  6898  001E96  D036               	goto	i2l2922
  6899  001E98  C03C  FFD9         	movff	strtod@s,fsr2l
  6900  001E9C  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6901  001EA0  50DF               	movf	indf2,w,c
  6902  001EA2  0FD0               	addlw	208
  6903  001EA4  6E41               	movwf	strtod@eexp,c
  6904  001EA6  4A3C               	infsnz	strtod@s,f,c
  6905  001EA8  2A3D               	incf	strtod@s+1,f,c
  6906  001EAA  C03C  FFD9         	movff	strtod@s,fsr2l
  6907  001EAE  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6908  001EB2  50DF               	movf	indf2,w,c
  6909  001EB4  EC7C  F018         	call	_isdigit
  6910  001EB8  A0D8               	btfss	status,0,c
  6911  001EBA  D024               	goto	i2l2922
  6912  001EBC  C03C  FFD9         	movff	strtod@s,fsr2l
  6913  001EC0  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6914  001EC4  50DF               	movf	indf2,w,c
  6915  001EC6  6E40               	movwf	??_strtod& (0+255),c
  6916  001EC8  5041               	movf	strtod@eexp,w,c
  6917  001ECA  0D0A               	mullw	10
  6918  001ECC  50F3               	movf	prodl,w,c
  6919  001ECE  2440               	addwf	??_strtod,w,c
  6920  001ED0  0FD0               	addlw	208
  6921  001ED2  6E41               	movwf	strtod@eexp,c
  6922  001ED4  4A3C               	infsnz	strtod@s,f,c
  6923  001ED6  2A3D               	incf	strtod@s+1,f,c
  6924  001ED8  C03C  FFD9         	movff	strtod@s,fsr2l
  6925  001EDC  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6926  001EE0  50DF               	movf	indf2,w,c
  6927  001EE2  EC7C  F018         	call	_isdigit
  6928  001EE6  A0D8               	btfss	status,0,c
  6929  001EE8  D00D               	goto	i2l2922
  6930  001EEA  C03C  FFD9         	movff	strtod@s,fsr2l
  6931  001EEE  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6932  001EF2  50DF               	movf	indf2,w,c
  6933  001EF4  6E40               	movwf	??_strtod& (0+255),c
  6934  001EF6  5041               	movf	strtod@eexp,w,c
  6935  001EF8  0D0A               	mullw	10
  6936  001EFA  50F3               	movf	prodl,w,c
  6937  001EFC  2440               	addwf	??_strtod,w,c
  6938  001EFE  0FD0               	addlw	208
  6939  001F00  6E41               	movwf	strtod@eexp,c
  6940  001F02  D000               	goto	i2l2922
  6941  001F04                     i2l2922:
  6942  001F04  A642               	btfss	strtod@flags,3,c
  6943  001F06  D002               	goto	i2l2926
  6944  001F08  6C41               	negf	strtod@eexp,c
  6945  001F0A  D000               	goto	i2l2926
  6946  001F0C                     i2l2926:
  6947  001F0C  5041               	movf	strtod@eexp,w,c
  6948  001F0E  2643               	addwf	strtod@expon,f,c
  6949  001F10  503E               	movf	strtod@res,w,c
  6950  001F12  103F               	iorwf	strtod@res+1,w,c
  6951  001F14  A4D8               	btfss	status,2,c
  6952  001F16  A242               	btfss	strtod@flags,1,c
  6953  001F18  D009               	goto	i2l2934
  6954  001F1A  C03E  FFD9         	movff	strtod@res,fsr2l
  6955  001F1E  C03F  FFDA         	movff	strtod@res+1,fsr2h
  6956  001F22  C03C  FFDE         	movff	strtod@s,postinc2
  6957  001F26  C03D  FFDD         	movff	strtod@s+1,postdec2
  6958  001F2A  D000               	goto	i2l2934
  6959  001F2C                     i2l2934:
  6960  001F2C  C044  F009         	movff	strtod@_u,___altoft@c
  6961  001F30  C045  F00A         	movff	strtod@_u+1,___altoft@c+1
  6962  001F34  C046  F00B         	movff	strtod@_u+2,___altoft@c+2
  6963  001F38  C047  F00C         	movff	strtod@_u+3,___altoft@c+3
  6964  001F3C  ECEF  F014         	call	___altoft	;wreg free
  6965  001F40  C009  F044         	movff	?___altoft,strtod@_u
  6966  001F44  C00A  F045         	movff	?___altoft+1,strtod@_u+1
  6967  001F48  C00B  F046         	movff	?___altoft+2,strtod@_u+2
  6968  001F4C  5044               	movf	strtod@_u,w,c
  6969  001F4E  1045               	iorwf	strtod@_u+1,w,c
  6970  001F50  1046               	iorwf	strtod@_u+2,w,c
  6971  001F52  A4D8               	btfss	status,2,c
  6972  001F54  D005               	goto	i2l2942
  6973  001F56  0E00               	movlw	0
  6974  001F58  6E3C               	movwf	?_strtod,c
  6975  001F5A  0E00               	movlw	0
  6976  001F5C  D0A6               	goto	L16
  6977  001F5E  D0C2               	goto	i2l693
  6978  001F60                     i2l2942:
  6979  001F60  AE43               	btfss	strtod@expon,7,c
  6980  001F62  D04C               	goto	i2l2970
  6981  001F64  6C43               	negf	strtod@expon,c
  6982  001F66  D017               	goto	i2l2950
  6983  001F68                     i2l2946:
  6984  001F68  C044  F009         	movff	strtod@_u,___ftdiv@f1
  6985  001F6C  C045  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  6986  001F70  C046  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  6987  001F74  0E03               	movlw	3
  6988  001F76  6E0C               	movwf	___ftdiv@f2,c
  6989  001F78  0E15               	movlw	21
  6990  001F7A  6E0D               	movwf	___ftdiv@f2+1,c
  6991  001F7C  0E50               	movlw	80
  6992  001F7E  6E0E               	movwf	___ftdiv@f2+2,c
  6993  001F80  EC91  F013         	call	___ftdiv	;wreg free
  6994  001F84  C009  F044         	movff	?___ftdiv,strtod@_u
  6995  001F88  C00A  F045         	movff	?___ftdiv+1,strtod@_u+1
  6996  001F8C  C00B  F046         	movff	?___ftdiv+2,strtod@_u+2
  6997  001F90  0EF6               	movlw	246
  6998  001F92  2643               	addwf	strtod@expon,f,c
  6999  001F94  D000               	goto	i2l2950
  7000  001F96                     i2l2950:
  7001  001F96  5043               	movf	strtod@expon,w,c
  7002  001F98  0A80               	xorlw	128
  7003  001F9A  0F76               	addlw	-138
  7004  001F9C  A0D8               	btfss	status,0,c
  7005  001F9E  D018               	goto	i2l2956
  7006  001FA0  D7E3               	goto	i2l2946
  7007  001FA2  D016               	goto	i2l2956
  7008  001FA4                     i2l2952:
  7009  001FA4  C044  F009         	movff	strtod@_u,___ftdiv@f1
  7010  001FA8  C045  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  7011  001FAC  C046  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  7012  001FB0  0E00               	movlw	0
  7013  001FB2  6E0C               	movwf	___ftdiv@f2,c
  7014  001FB4  0E20               	movlw	32
  7015  001FB6  6E0D               	movwf	___ftdiv@f2+1,c
  7016  001FB8  0E41               	movlw	65
  7017  001FBA  6E0E               	movwf	___ftdiv@f2+2,c
  7018  001FBC  EC91  F013         	call	___ftdiv	;wreg free
  7019  001FC0  C009  F044         	movff	?___ftdiv,strtod@_u
  7020  001FC4  C00A  F045         	movff	?___ftdiv+1,strtod@_u+1
  7021  001FC8  C00B  F046         	movff	?___ftdiv+2,strtod@_u+2
  7022  001FCC  0643               	decf	strtod@expon,f,c
  7023  001FCE  D000               	goto	i2l2956
  7024  001FD0                     i2l2956:
  7025  001FD0  5043               	movf	strtod@expon,w,c
  7026  001FD2  A4D8               	btfss	status,2,c
  7027  001FD4  D7E7               	goto	i2l2952
  7028  001FD6  C044  F033         	movff	strtod@_u,___ftge@ff1
  7029  001FDA  C045  F034         	movff	strtod@_u+1,___ftge@ff1+1
  7030  001FDE  C046  F035         	movff	strtod@_u+2,___ftge@ff1+2
  7031  001FE2  0E00               	movlw	0
  7032  001FE4  6E36               	movwf	___ftge@ff2,c
  7033  001FE6  0E80               	movlw	128
  7034  001FE8  6E37               	movwf	___ftge@ff2+1,c
  7035  001FEA  0E00               	movlw	0
  7036  001FEC  6E38               	movwf	___ftge@ff2+2,c
  7037  001FEE  EC65  F014         	call	___ftge	;wreg free
  7038  001FF2  D04D               	goto	L17
  7039  001FF4  D077               	goto	i2l693
  7040  001FF6  D056               	goto	i2l2994
  7041  001FF8  D075               	goto	i2l693
  7042  001FFA  D05C               	goto	i2l703
  7043  001FFC                     i2l2970:
  7044  001FFC  5043               	movf	strtod@expon,w,c
  7045  001FFE  0A80               	xorlw	128
  7046  002000  0F7F               	addlw	-129
  7047  002002  B0D8               	btfsc	status,0,c
  7048  002004  D019               	goto	i2l2978
  7049  002006  D056               	goto	i2l703
  7050  002008  D017               	goto	i2l2978
  7051  00200A                     i2l2974:
  7052  00200A  C044  F018         	movff	strtod@_u,___ftmul@f1
  7053  00200E  C045  F019         	movff	strtod@_u+1,___ftmul@f1+1
  7054  002012  C046  F01A         	movff	strtod@_u+2,___ftmul@f1+2
  7055  002016  0E03               	movlw	3
  7056  002018  6E1B               	movwf	___ftmul@f2,c
  7057  00201A  0E15               	movlw	21
  7058  00201C  6E1C               	movwf	___ftmul@f2+1,c
  7059  00201E  0E50               	movlw	80
  7060  002020  6E1D               	movwf	___ftmul@f2+2,c
  7061  002022  ECA2  F012         	call	___ftmul	;wreg free
  7062  002026  C018  F044         	movff	?___ftmul,strtod@_u
  7063  00202A  C019  F045         	movff	?___ftmul+1,strtod@_u+1
  7064  00202E  C01A  F046         	movff	?___ftmul+2,strtod@_u+2
  7065  002032  0EF6               	movlw	246
  7066  002034  2643               	addwf	strtod@expon,f,c
  7067  002036  D000               	goto	i2l2978
  7068  002038                     i2l2978:
  7069  002038  0E0A               	movlw	10
  7070  00203A  6043               	cpfslt	strtod@expon,c
  7071  00203C  D7E6               	goto	i2l2974
  7072  00203E  D016               	goto	i2l2984
  7073  002040                     i2l2980:
  7074  002040  C044  F018         	movff	strtod@_u,___ftmul@f1
  7075  002044  C045  F019         	movff	strtod@_u+1,___ftmul@f1+1
  7076  002048  C046  F01A         	movff	strtod@_u+2,___ftmul@f1+2
  7077  00204C  0E00               	movlw	0
  7078  00204E  6E1B               	movwf	___ftmul@f2,c
  7079  002050  0E20               	movlw	32
  7080  002052  6E1C               	movwf	___ftmul@f2+1,c
  7081  002054  0E41               	movlw	65
  7082  002056  6E1D               	movwf	___ftmul@f2+2,c
  7083  002058  ECA2  F012         	call	___ftmul	;wreg free
  7084  00205C  C018  F044         	movff	?___ftmul,strtod@_u
  7085  002060  C019  F045         	movff	?___ftmul+1,strtod@_u+1
  7086  002064  C01A  F046         	movff	?___ftmul+2,strtod@_u+2
  7087  002068  0643               	decf	strtod@expon,f,c
  7088  00206A  D000               	goto	i2l2984
  7089  00206C                     i2l2984:
  7090  00206C  5043               	movf	strtod@expon,w,c
  7091  00206E  A4D8               	btfss	status,2,c
  7092  002070  D7E7               	goto	i2l2980
  7093  002072  0EFF               	movlw	255
  7094  002074  6E33               	movwf	___ftge@ff1,c
  7095  002076  0E7F               	movlw	127
  7096  002078  6E34               	movwf	___ftge@ff1+1,c
  7097  00207A  0E7F               	movlw	127
  7098  00207C  6E35               	movwf	___ftge@ff1+2,c
  7099  00207E  C044  F036         	movff	strtod@_u,___ftge@ff2
  7100  002082  C045  F037         	movff	strtod@_u+1,___ftge@ff2+1
  7101  002086  C046  F038         	movff	strtod@_u+2,___ftge@ff2+2
  7102  00208A  EC65  F014         	call	___ftge	;wreg free
  7103  00208E                     L17:
  7104  00208E  B0D8               	btfsc	status,0,c
  7105  002090  D011               	goto	i2l703
  7106  002092  A042               	btfss	strtod@flags,0,c
  7107  002094  D007               	goto	i2l2994
  7108  002096  0E00               	movlw	0
  7109  002098  6E3C               	movwf	?_strtod,c
  7110  00209A  0E80               	movlw	128
  7111  00209C  6E3D               	movwf	?_strtod+1,c
  7112  00209E  0E80               	movlw	128
  7113  0020A0  D006               	goto	L13
  7114  0020A2  D020               	goto	i2l693
  7115  0020A4                     i2l2994:
  7116  0020A4  0E00               	movlw	0
  7117  0020A6  6E3C               	movwf	?_strtod,c
  7118  0020A8  0E80               	movlw	128
  7119  0020AA                     L16:
  7120  0020AA  6E3D               	movwf	?_strtod+1,c
  7121  0020AC  0E00               	movlw	0
  7122  0020AE                     L13:
  7123  0020AE  6E3E               	movwf	?_strtod+2,c
  7124  0020B0  D019               	goto	i2l693
  7125  0020B2  D000               	goto	i2l703
  7126  0020B4                     i2l703:
  7127  0020B4  A042               	btfss	strtod@flags,0,c
  7128  0020B6  D00F               	goto	i2l3000
  7129  0020B8  C044  F001         	movff	strtod@_u,___ftneg@f1
  7130  0020BC  C045  F002         	movff	strtod@_u+1,___ftneg@f1+1
  7131  0020C0  C046  F003         	movff	strtod@_u+2,___ftneg@f1+2
  7132  0020C4  EC59  F018         	call	___ftneg	;wreg free
  7133  0020C8  C001  F044         	movff	?___ftneg,strtod@_u
  7134  0020CC  C002  F045         	movff	?___ftneg+1,strtod@_u+1
  7135  0020D0  C003  F046         	movff	?___ftneg+2,strtod@_u+2
  7136  0020D4  D000               	goto	i2l3000
  7137  0020D6                     i2l3000:
  7138  0020D6  C044  F03C         	movff	strtod@_u,?_strtod
  7139  0020DA  C045  F03D         	movff	strtod@_u+1,?_strtod+1
  7140  0020DE  C046  F03E         	movff	strtod@_u+2,?_strtod+2
  7141  0020E2  D000               	goto	i2l693
  7142  0020E4                     i2l693:
  7143  0020E4  0012               	return		;funcret
  7144  0020E6                     __end_of_strtod:
  7145                           	opt stack 0
  7146                           pclatu	equ	0xFFB
  7147                           pclath	equ	0xFFA
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           intcon	equ	0xFF2
  7155                           indf0	equ	0xFEF
  7156                           postinc0	equ	0xFEE
  7157                           fsr0h	equ	0xFEA
  7158                           fsr0l	equ	0xFE9
  7159                           wreg	equ	0xFE8
  7160                           indf1	equ	0xFE7
  7161                           fsr1h	equ	0xFE2
  7162                           fsr1l	equ	0xFE1
  7163                           indf2	equ	0xFDF
  7164                           postinc2	equ	0xFDE
  7165                           postdec2	equ	0xFDD
  7166                           fsr2h	equ	0xFDA
  7167                           fsr2l	equ	0xFD9
  7168                           status	equ	0xFD8
  7169                           
  7170 ;; *************** function _isspace *****************
  7171 ;; Defined at:
  7172 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isspace.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;  c               1    wreg     unsigned char 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  c               1    2[COMRAM] unsigned char 
  7177 ;; Return value:  Size  Location     Type
  7178 ;;		None               void
  7179 ;; Registers used:
  7180 ;;		wreg, status,2, status,0
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;Total ram usage:        3 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; This function calls:
  7193 ;;		Nothing
  7194 ;; This function is called by:
  7195 ;;		_keyValue
  7196 ;;		_strtod
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text41
  7201  002FEC                     __ptext41:
  7202                           	opt stack 0
  7203  002FEC                     _isspace:
  7204                           	opt stack 21
  7205                           
  7206                           ;incstack = 0
  7207                           ;isspace@c stored from wreg
  7208  002FEC  6E03               	movwf	isspace@c,c
  7209  002FEE  0E01               	movlw	1
  7210  002FF0  6E02               	movwf	_isspace$2271,c
  7211  002FF2  0E20               	movlw	32
  7212  002FF4  1803               	xorwf	isspace@c,w,c
  7213  002FF6  B4D8               	btfsc	status,2,c
  7214  002FF8  D00A               	goto	i2l2588
  7215  002FFA  0E0E               	movlw	14
  7216  002FFC  6003               	cpfslt	isspace@c,c
  7217  002FFE  D004               	goto	i2l2586
  7218  003000  0E09               	movlw	9
  7219  003002  6003               	cpfslt	isspace@c,c
  7220  003004  D004               	goto	i2l2588
  7221  003006  D000               	goto	i2l2586
  7222  003008                     i2l2586:
  7223  003008  0E00               	movlw	0
  7224  00300A  6E02               	movwf	_isspace$2271,c
  7225  00300C  D000               	goto	i2l2588
  7226  00300E                     i2l2588:
  7227  00300E  C002  F001         	movff	_isspace$2271,??_isspace
  7228  003012  3001               	rrcf	??_isspace,w,c
  7229  003014  D000               	goto	i2l1005
  7230  003016                     i2l1005:
  7231  003016  0012               	return		;funcret
  7232  003018                     __end_of_isspace:
  7233                           	opt stack 0
  7234                           pclatu	equ	0xFFB
  7235                           pclath	equ	0xFFA
  7236                           tblptru	equ	0xFF8
  7237                           tblptrh	equ	0xFF7
  7238                           tblptrl	equ	0xFF6
  7239                           tablat	equ	0xFF5
  7240                           prodh	equ	0xFF4
  7241                           prodl	equ	0xFF3
  7242                           intcon	equ	0xFF2
  7243                           indf0	equ	0xFEF
  7244                           postinc0	equ	0xFEE
  7245                           fsr0h	equ	0xFEA
  7246                           fsr0l	equ	0xFE9
  7247                           wreg	equ	0xFE8
  7248                           indf1	equ	0xFE7
  7249                           fsr1h	equ	0xFE2
  7250                           fsr1l	equ	0xFE1
  7251                           indf2	equ	0xFDF
  7252                           postinc2	equ	0xFDE
  7253                           postdec2	equ	0xFDD
  7254                           fsr2h	equ	0xFDA
  7255                           fsr2l	equ	0xFD9
  7256                           status	equ	0xFD8
  7257                           
  7258 ;; *************** function _isdigit *****************
  7259 ;; Defined at:
  7260 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  c               1    wreg     unsigned char 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  c               1    2[COMRAM] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;		None               void
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7278 ;;Total ram usage:        3 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_strtod
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text42
  7288  0030F8                     __ptext42:
  7289                           	opt stack 0
  7290  0030F8                     _isdigit:
  7291                           	opt stack 21
  7292                           
  7293                           ;incstack = 0
  7294                           ;isdigit@c stored from wreg
  7295  0030F8  6E03               	movwf	isdigit@c,c
  7296  0030FA  0E00               	movlw	0
  7297  0030FC  6E02               	movwf	_isdigit$2268,c
  7298  0030FE  0E3A               	movlw	58
  7299  003100  6003               	cpfslt	isdigit@c,c
  7300  003102  D006               	goto	i2l2720
  7301  003104  0E2F               	movlw	47
  7302  003106  6403               	cpfsgt	isdigit@c,c
  7303  003108  D003               	goto	i2l2720
  7304  00310A  0E01               	movlw	1
  7305  00310C  6E02               	movwf	_isdigit$2268,c
  7306  00310E  D000               	goto	i2l2720
  7307  003110                     i2l2720:
  7308  003110  C002  F001         	movff	_isdigit$2268,??_isdigit
  7309  003114  3001               	rrcf	??_isdigit,w,c
  7310  003116  D000               	goto	i2l1000
  7311  003118                     i2l1000:
  7312  003118  0012               	return		;funcret
  7313  00311A                     __end_of_isdigit:
  7314                           	opt stack 0
  7315                           pclatu	equ	0xFFB
  7316                           pclath	equ	0xFFA
  7317                           tblptru	equ	0xFF8
  7318                           tblptrh	equ	0xFF7
  7319                           tblptrl	equ	0xFF6
  7320                           tablat	equ	0xFF5
  7321                           prodh	equ	0xFF4
  7322                           prodl	equ	0xFF3
  7323                           intcon	equ	0xFF2
  7324                           indf0	equ	0xFEF
  7325                           postinc0	equ	0xFEE
  7326                           fsr0h	equ	0xFEA
  7327                           fsr0l	equ	0xFE9
  7328                           wreg	equ	0xFE8
  7329                           indf1	equ	0xFE7
  7330                           fsr1h	equ	0xFE2
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           fsr2h	equ	0xFDA
  7336                           fsr2l	equ	0xFD9
  7337                           status	equ	0xFD8
  7338                           
  7339 ;; *************** function ___lmul *****************
  7340 ;; Defined at:
  7341 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  multiplier      4    0[COMRAM] unsigned long 
  7344 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  product         4    8[COMRAM] unsigned long 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  4    0[COMRAM] unsigned long 
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7356 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;Total ram usage:       12 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_strtod
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text43
  7370  002C2C                     __ptext43:
  7371                           	opt stack 0
  7372  002C2C                     ___lmul:
  7373                           	opt stack 21
  7374                           
  7375                           ;incstack = 0
  7376  002C2C  0E00               	movlw	0
  7377  002C2E  6E09               	movwf	___lmul@product,c
  7378  002C30  0E00               	movlw	0
  7379  002C32  6E0A               	movwf	___lmul@product+1,c
  7380  002C34  0E00               	movlw	0
  7381  002C36  6E0B               	movwf	___lmul@product+2,c
  7382  002C38  0E00               	movlw	0
  7383  002C3A  6E0C               	movwf	___lmul@product+3,c
  7384  002C3C  D000               	goto	i2l2594
  7385  002C3E                     i2l2594:
  7386  002C3E  A001               	btfss	___lmul@multiplier,0,c
  7387  002C40  D009               	goto	i2l2598
  7388  002C42  5005               	movf	___lmul@multiplicand,w,c
  7389  002C44  2609               	addwf	___lmul@product,f,c
  7390  002C46  5006               	movf	___lmul@multiplicand+1,w,c
  7391  002C48  220A               	addwfc	___lmul@product+1,f,c
  7392  002C4A  5007               	movf	___lmul@multiplicand+2,w,c
  7393  002C4C  220B               	addwfc	___lmul@product+2,f,c
  7394  002C4E  5008               	movf	___lmul@multiplicand+3,w,c
  7395  002C50  220C               	addwfc	___lmul@product+3,f,c
  7396  002C52  D000               	goto	i2l2598
  7397  002C54                     i2l2598:
  7398  002C54  90D8               	bcf	status,0,c
  7399  002C56  3605               	rlcf	___lmul@multiplicand,f,c
  7400  002C58  3606               	rlcf	___lmul@multiplicand+1,f,c
  7401  002C5A  3607               	rlcf	___lmul@multiplicand+2,f,c
  7402  002C5C  3608               	rlcf	___lmul@multiplicand+3,f,c
  7403  002C5E  90D8               	bcf	status,0,c
  7404  002C60  3204               	rrcf	___lmul@multiplier+3,f,c
  7405  002C62  3203               	rrcf	___lmul@multiplier+2,f,c
  7406  002C64  3202               	rrcf	___lmul@multiplier+1,f,c
  7407  002C66  3201               	rrcf	___lmul@multiplier,f,c
  7408  002C68  5001               	movf	___lmul@multiplier,w,c
  7409  002C6A  1002               	iorwf	___lmul@multiplier+1,w,c
  7410  002C6C  1003               	iorwf	___lmul@multiplier+2,w,c
  7411  002C6E  1004               	iorwf	___lmul@multiplier+3,w,c
  7412  002C70  A4D8               	btfss	status,2,c
  7413  002C72  D7E5               	goto	i2l2594
  7414  002C74  C009  F001         	movff	___lmul@product,?___lmul
  7415  002C78  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7416  002C7C  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7417  002C80  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7418  002C84  0012               	return		;funcret
  7419  002C86                     __end_of___lmul:
  7420                           	opt stack 0
  7421                           pclatu	equ	0xFFB
  7422                           pclath	equ	0xFFA
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           indf0	equ	0xFEF
  7431                           postinc0	equ	0xFEE
  7432                           fsr0h	equ	0xFEA
  7433                           fsr0l	equ	0xFE9
  7434                           wreg	equ	0xFE8
  7435                           indf1	equ	0xFE7
  7436                           fsr1h	equ	0xFE2
  7437                           fsr1l	equ	0xFE1
  7438                           indf2	equ	0xFDF
  7439                           postinc2	equ	0xFDE
  7440                           postdec2	equ	0xFDD
  7441                           fsr2h	equ	0xFDA
  7442                           fsr2l	equ	0xFD9
  7443                           status	equ	0xFD8
  7444                           
  7445 ;; *************** function ___ftneg *****************
  7446 ;; Defined at:
  7447 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;  f1              3    0[COMRAM] float 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;		None
  7452 ;; Return value:  Size  Location     Type
  7453 ;;                  3    0[COMRAM] float 
  7454 ;; Registers used:
  7455 ;;		wreg, status,2, status,0
  7456 ;; Tracked objects:
  7457 ;;		On entry : 0/0
  7458 ;;		On exit  : 0/0
  7459 ;;		Unchanged: 0/0
  7460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7461 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;Total ram usage:        3 bytes
  7466 ;; Hardware stack levels used:    1
  7467 ;; This function calls:
  7468 ;;		Nothing
  7469 ;; This function is called by:
  7470 ;;		_calculatePID
  7471 ;;		_strtod
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text44
  7476  0030B2                     __ptext44:
  7477                           	opt stack 0
  7478  0030B2                     ___ftneg:
  7479                           	opt stack 22
  7480                           
  7481                           ;incstack = 0
  7482  0030B2  5001               	movf	___ftneg@f1,w,c
  7483  0030B4  1002               	iorwf	___ftneg@f1+1,w,c
  7484  0030B6  1003               	iorwf	___ftneg@f1+2,w,c
  7485  0030B8  B4D8               	btfsc	status,2,c
  7486  0030BA  D006               	goto	i2l974
  7487  0030BC  0E00               	movlw	0
  7488  0030BE  1A01               	xorwf	___ftneg@f1,f,c
  7489  0030C0  0E00               	movlw	0
  7490  0030C2  1A02               	xorwf	___ftneg@f1+1,f,c
  7491  0030C4  0E80               	movlw	128
  7492  0030C6  1A03               	xorwf	___ftneg@f1+2,f,c
  7493  0030C8                     i2l974:
  7494  0030C8  C001  F001         	movff	___ftneg@f1,?___ftneg
  7495  0030CC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7496  0030D0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7497  0030D4  0012               	return		;funcret
  7498  0030D6                     __end_of___ftneg:
  7499                           	opt stack 0
  7500                           pclatu	equ	0xFFB
  7501                           pclath	equ	0xFFA
  7502                           tblptru	equ	0xFF8
  7503                           tblptrh	equ	0xFF7
  7504                           tblptrl	equ	0xFF6
  7505                           tablat	equ	0xFF5
  7506                           prodh	equ	0xFF4
  7507                           prodl	equ	0xFF3
  7508                           intcon	equ	0xFF2
  7509                           indf0	equ	0xFEF
  7510                           postinc0	equ	0xFEE
  7511                           fsr0h	equ	0xFEA
  7512                           fsr0l	equ	0xFE9
  7513                           wreg	equ	0xFE8
  7514                           indf1	equ	0xFE7
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function ___ftmul *****************
  7525 ;; Defined at:
  7526 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  f1              3   23[COMRAM] float 
  7529 ;;  f2              3   26[COMRAM] float 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  f3_as_produc    3   33[COMRAM] unsigned um
  7532 ;;  sign            1   37[COMRAM] unsigned char 
  7533 ;;  cntr            1   36[COMRAM] unsigned char 
  7534 ;;  exp             1   32[COMRAM] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  3   23[COMRAM] float 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7544 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;Total ram usage:       15 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    1
  7551 ;; This function calls:
  7552 ;;		___ftpack
  7553 ;; This function is called by:
  7554 ;;		_LCDBreakDouble
  7555 ;;		_calculatePID
  7556 ;;		_RTD2Angle
  7557 ;;		_strtod
  7558 ;;		_breakDouble
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text45
  7563  002544                     __ptext45:
  7564                           	opt stack 0
  7565  002544                     ___ftmul:
  7566                           	opt stack 21
  7567                           
  7568                           ;incstack = 0
  7569  002544  C01A  F01E         	movff	___ftmul@f1+2,??___ftmul
  7570  002548  6A1F               	clrf	(??___ftmul+1)& (0+255),c
  7571  00254A  6A20               	clrf	(??___ftmul+2)& (0+255),c
  7572  00254C  3419               	rlcf	___ftmul@f1+1,w,c
  7573  00254E  361E               	rlcf	??___ftmul& (0+255),f,c
  7574  002550  E301               	bnc	u231_41
  7575  002552  801F               	bsf	(??___ftmul+1)& (0+255),0,c
  7576  002554                     u231_41:
  7577  002554  501E               	movf	??___ftmul,w,c
  7578  002556  6E21               	movwf	___ftmul@exp,c
  7579  002558  5021               	movf	___ftmul@exp,w,c
  7580  00255A  A4D8               	btfss	status,2,c
  7581  00255C  D002               	goto	i2l2670
  7582  00255E  D00E               	goto	i2l2672
  7583  002560  D06C               	goto	i2l964
  7584  002562                     i2l2670:
  7585  002562  C01D  F01E         	movff	___ftmul@f2+2,??___ftmul
  7586  002566  6A1F               	clrf	(??___ftmul+1)& (0+255),c
  7587  002568  6A20               	clrf	(??___ftmul+2)& (0+255),c
  7588  00256A  341C               	rlcf	___ftmul@f2+1,w,c
  7589  00256C  361E               	rlcf	??___ftmul& (0+255),f,c
  7590  00256E  E301               	bnc	u233_41
  7591  002570  801F               	bsf	(??___ftmul+1)& (0+255),0,c
  7592  002572                     u233_41:
  7593  002572  501E               	movf	??___ftmul,w,c
  7594  002574  6E26               	movwf	___ftmul@sign,c
  7595  002576  5026               	movf	___ftmul@sign,w,c
  7596  002578  A4D8               	btfss	status,2,c
  7597  00257A  D007               	goto	i2l2676
  7598  00257C                     i2l2672:
  7599  00257C  0E00               	movlw	0
  7600  00257E  6E18               	movwf	?___ftmul,c
  7601  002580  0E00               	movlw	0
  7602  002582  6E19               	movwf	?___ftmul+1,c
  7603  002584  0E00               	movlw	0
  7604  002586  6E1A               	movwf	?___ftmul+2,c
  7605  002588  D058               	goto	i2l964
  7606  00258A                     i2l2676:
  7607  00258A  5026               	movf	___ftmul@sign,w,c
  7608  00258C  0F7B               	addlw	123
  7609  00258E  2621               	addwf	___ftmul@exp,f,c
  7610  002590  C01A  F026         	movff	___ftmul@f1+2,___ftmul@sign
  7611  002594  501D               	movf	___ftmul@f2+2,w,c
  7612  002596  1A26               	xorwf	___ftmul@sign,f,c
  7613  002598  0E80               	movlw	128
  7614  00259A  1626               	andwf	___ftmul@sign,f,c
  7615  00259C  8E19               	bsf	___ftmul@f1+1,7,c
  7616  00259E  8E1C               	bsf	___ftmul@f2+1,7,c
  7617  0025A0  0EFF               	movlw	255
  7618  0025A2  161B               	andwf	___ftmul@f2,f,c
  7619  0025A4  0EFF               	movlw	255
  7620  0025A6  161C               	andwf	___ftmul@f2+1,f,c
  7621  0025A8  0E00               	movlw	0
  7622  0025AA  161D               	andwf	___ftmul@f2+2,f,c
  7623  0025AC  0E00               	movlw	0
  7624  0025AE  6E22               	movwf	___ftmul@f3_as_product,c
  7625  0025B0  0E00               	movlw	0
  7626  0025B2  6E23               	movwf	___ftmul@f3_as_product+1,c
  7627  0025B4  0E00               	movlw	0
  7628  0025B6  6E24               	movwf	___ftmul@f3_as_product+2,c
  7629  0025B8  0E07               	movlw	7
  7630  0025BA  6E25               	movwf	___ftmul@cntr,c
  7631  0025BC  D000               	goto	i2l2690
  7632  0025BE                     i2l2690:
  7633  0025BE  A018               	btfss	___ftmul@f1,0,c
  7634  0025C0  D007               	goto	i2l2694
  7635  0025C2  501B               	movf	___ftmul@f2,w,c
  7636  0025C4  2622               	addwf	___ftmul@f3_as_product,f,c
  7637  0025C6  501C               	movf	___ftmul@f2+1,w,c
  7638  0025C8  2223               	addwfc	___ftmul@f3_as_product+1,f,c
  7639  0025CA  501D               	movf	___ftmul@f2+2,w,c
  7640  0025CC  2224               	addwfc	___ftmul@f3_as_product+2,f,c
  7641  0025CE  D000               	goto	i2l2694
  7642  0025D0                     i2l2694:
  7643  0025D0  90D8               	bcf	status,0,c
  7644  0025D2  321A               	rrcf	___ftmul@f1+2,f,c
  7645  0025D4  3219               	rrcf	___ftmul@f1+1,f,c
  7646  0025D6  3218               	rrcf	___ftmul@f1,f,c
  7647  0025D8  90D8               	bcf	status,0,c
  7648  0025DA  361B               	rlcf	___ftmul@f2,f,c
  7649  0025DC  361C               	rlcf	___ftmul@f2+1,f,c
  7650  0025DE  361D               	rlcf	___ftmul@f2+2,f,c
  7651  0025E0  2E25               	decfsz	___ftmul@cntr,f,c
  7652  0025E2  D7ED               	goto	i2l2690
  7653  0025E4  D000               	goto	i2l2698
  7654  0025E6                     i2l2698:
  7655  0025E6  0E09               	movlw	9
  7656  0025E8  6E25               	movwf	___ftmul@cntr,c
  7657  0025EA  D000               	goto	i2l2700
  7658  0025EC                     i2l2700:
  7659  0025EC  A018               	btfss	___ftmul@f1,0,c
  7660  0025EE  D007               	goto	i2l2704
  7661  0025F0  501B               	movf	___ftmul@f2,w,c
  7662  0025F2  2622               	addwf	___ftmul@f3_as_product,f,c
  7663  0025F4  501C               	movf	___ftmul@f2+1,w,c
  7664  0025F6  2223               	addwfc	___ftmul@f3_as_product+1,f,c
  7665  0025F8  501D               	movf	___ftmul@f2+2,w,c
  7666  0025FA  2224               	addwfc	___ftmul@f3_as_product+2,f,c
  7667  0025FC  D000               	goto	i2l2704
  7668  0025FE                     i2l2704:
  7669  0025FE  90D8               	bcf	status,0,c
  7670  002600  321A               	rrcf	___ftmul@f1+2,f,c
  7671  002602  3219               	rrcf	___ftmul@f1+1,f,c
  7672  002604  3218               	rrcf	___ftmul@f1,f,c
  7673  002606  90D8               	bcf	status,0,c
  7674  002608  3224               	rrcf	___ftmul@f3_as_product+2,f,c
  7675  00260A  3223               	rrcf	___ftmul@f3_as_product+1,f,c
  7676  00260C  3222               	rrcf	___ftmul@f3_as_product,f,c
  7677  00260E  2E25               	decfsz	___ftmul@cntr,f,c
  7678  002610  D7ED               	goto	i2l2700
  7679  002612  D000               	goto	i2l2708
  7680  002614                     i2l2708:
  7681  002614  C022  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7682  002618  C023  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7683  00261C  C024  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7684  002620  C021  F004         	movff	___ftmul@exp,___ftpack@exp
  7685  002624  C026  F005         	movff	___ftmul@sign,___ftpack@sign
  7686  002628  EC02  F014         	call	___ftpack	;wreg free
  7687  00262C  C001  F018         	movff	?___ftpack,?___ftmul
  7688  002630  C002  F019         	movff	?___ftpack+1,?___ftmul+1
  7689  002634  C003  F01A         	movff	?___ftpack+2,?___ftmul+2
  7690  002638  D000               	goto	i2l964
  7691  00263A                     i2l964:
  7692  00263A  0012               	return		;funcret
  7693  00263C                     __end_of___ftmul:
  7694                           	opt stack 0
  7695                           pclatu	equ	0xFFB
  7696                           pclath	equ	0xFFA
  7697                           tblptru	equ	0xFF8
  7698                           tblptrh	equ	0xFF7
  7699                           tblptrl	equ	0xFF6
  7700                           tablat	equ	0xFF5
  7701                           prodh	equ	0xFF4
  7702                           prodl	equ	0xFF3
  7703                           intcon	equ	0xFF2
  7704                           indf0	equ	0xFEF
  7705                           postinc0	equ	0xFEE
  7706                           fsr0h	equ	0xFEA
  7707                           fsr0l	equ	0xFE9
  7708                           wreg	equ	0xFE8
  7709                           indf1	equ	0xFE7
  7710                           fsr1h	equ	0xFE2
  7711                           fsr1l	equ	0xFE1
  7712                           indf2	equ	0xFDF
  7713                           postinc2	equ	0xFDE
  7714                           postdec2	equ	0xFDD
  7715                           fsr2h	equ	0xFDA
  7716                           fsr2l	equ	0xFD9
  7717                           status	equ	0xFD8
  7718                           
  7719 ;; *************** function ___ftge *****************
  7720 ;; Defined at:
  7721 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  ff1             3   50[COMRAM] float 
  7724 ;;  ff2             3   53[COMRAM] float 
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;		None
  7727 ;; Return value:  Size  Location     Type
  7728 ;;		None               void
  7729 ;; Registers used:
  7730 ;;		wreg, status,2, status,0
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7736 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7739 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;Total ram usage:        9 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; This function calls:
  7743 ;;		Nothing
  7744 ;; This function is called by:
  7745 ;;		_calculatePID
  7746 ;;		_strtod
  7747 ;; This function uses a non-reentrant model
  7748 ;;
  7749                           
  7750                           	psect	text46
  7751  0028CA                     __ptext46:
  7752                           	opt stack 0
  7753  0028CA                     ___ftge:
  7754                           	opt stack 22
  7755                           
  7756                           ;incstack = 0
  7757  0028CA  AE35               	btfss	___ftge@ff1+2,7,c
  7758  0028CC  D017               	goto	i2l2728
  7759  0028CE  C033  F039         	movff	___ftge@ff1,??___ftge
  7760  0028D2  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  7761  0028D6  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  7762  0028DA  1E39               	comf	??___ftge,f,c
  7763  0028DC  1E3A               	comf	??___ftge+1,f,c
  7764  0028DE  1E3B               	comf	??___ftge+2,f,c
  7765  0028E0  2A39               	incf	??___ftge,f,c
  7766  0028E2  0E00               	movlw	0
  7767  0028E4  223A               	addwfc	??___ftge+1,f,c
  7768  0028E6  223B               	addwfc	??___ftge+2,f,c
  7769  0028E8  0E00               	movlw	0
  7770  0028EA  2439               	addwf	??___ftge,w,c
  7771  0028EC  6E33               	movwf	___ftge@ff1,c
  7772  0028EE  0E00               	movlw	0
  7773  0028F0  203A               	addwfc	??___ftge+1,w,c
  7774  0028F2  6E34               	movwf	___ftge@ff1+1,c
  7775  0028F4  0E80               	movlw	128
  7776  0028F6  203B               	addwfc	??___ftge+2,w,c
  7777  0028F8  6E35               	movwf	___ftge@ff1+2,c
  7778  0028FA  D000               	goto	i2l2728
  7779  0028FC                     i2l2728:
  7780  0028FC  AE38               	btfss	___ftge@ff2+2,7,c
  7781  0028FE  D017               	goto	i2l2732
  7782  002900  C036  F039         	movff	___ftge@ff2,??___ftge
  7783  002904  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  7784  002908  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  7785  00290C  1E39               	comf	??___ftge,f,c
  7786  00290E  1E3A               	comf	??___ftge+1,f,c
  7787  002910  1E3B               	comf	??___ftge+2,f,c
  7788  002912  2A39               	incf	??___ftge,f,c
  7789  002914  0E00               	movlw	0
  7790  002916  223A               	addwfc	??___ftge+1,f,c
  7791  002918  223B               	addwfc	??___ftge+2,f,c
  7792  00291A  0E00               	movlw	0
  7793  00291C  2439               	addwf	??___ftge,w,c
  7794  00291E  6E36               	movwf	___ftge@ff2,c
  7795  002920  0E00               	movlw	0
  7796  002922  203A               	addwfc	??___ftge+1,w,c
  7797  002924  6E37               	movwf	___ftge@ff2+1,c
  7798  002926  0E80               	movlw	128
  7799  002928  203B               	addwfc	??___ftge+2,w,c
  7800  00292A  6E38               	movwf	___ftge@ff2+2,c
  7801  00292C  D000               	goto	i2l2732
  7802  00292E                     i2l2732:
  7803  00292E  0E00               	movlw	0
  7804  002930  1A33               	xorwf	___ftge@ff1,f,c
  7805  002932  0E00               	movlw	0
  7806  002934  1A34               	xorwf	___ftge@ff1+1,f,c
  7807  002936  0E80               	movlw	128
  7808  002938  1A35               	xorwf	___ftge@ff1+2,f,c
  7809  00293A  0E00               	movlw	0
  7810  00293C  1A36               	xorwf	___ftge@ff2,f,c
  7811  00293E  0E00               	movlw	0
  7812  002940  1A37               	xorwf	___ftge@ff2+1,f,c
  7813  002942  0E80               	movlw	128
  7814  002944  1A38               	xorwf	___ftge@ff2+2,f,c
  7815  002946  5036               	movf	___ftge@ff2,w,c
  7816  002948  5C33               	subwf	___ftge@ff1,w,c
  7817  00294A  5037               	movf	___ftge@ff2+1,w,c
  7818  00294C  5834               	subwfb	___ftge@ff1+1,w,c
  7819  00294E  5038               	movf	___ftge@ff2+2,w,c
  7820  002950  5835               	subwfb	___ftge@ff1+2,w,c
  7821  002952  B0D8               	btfsc	status,0,c
  7822  002954  D002               	goto	i2l2738
  7823  002956  90D8               	bcf	status,0,c
  7824  002958  D002               	goto	i2l958
  7825  00295A                     i2l2738:
  7826  00295A  80D8               	bsf	status,0,c
  7827  00295C  D000               	goto	i2l958
  7828  00295E                     i2l958:
  7829  00295E  0012               	return		;funcret
  7830  002960                     __end_of___ftge:
  7831                           	opt stack 0
  7832                           pclatu	equ	0xFFB
  7833                           pclath	equ	0xFFA
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           indf0	equ	0xFEF
  7842                           postinc0	equ	0xFEE
  7843                           fsr0h	equ	0xFEA
  7844                           fsr0l	equ	0xFE9
  7845                           wreg	equ	0xFE8
  7846                           indf1	equ	0xFE7
  7847                           fsr1h	equ	0xFE2
  7848                           fsr1l	equ	0xFE1
  7849                           indf2	equ	0xFDF
  7850                           postinc2	equ	0xFDE
  7851                           postdec2	equ	0xFDD
  7852                           fsr2h	equ	0xFDA
  7853                           fsr2l	equ	0xFD9
  7854                           status	equ	0xFD8
  7855                           
  7856 ;; *************** function ___ftdiv *****************
  7857 ;; Defined at:
  7858 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  f1              3    8[COMRAM] float 
  7861 ;;  f2              3   11[COMRAM] float 
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;  f3              3   18[COMRAM] float 
  7864 ;;  sign            1   22[COMRAM] unsigned char 
  7865 ;;  exp             1   21[COMRAM] unsigned char 
  7866 ;;  cntr            1   17[COMRAM] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  3    8[COMRAM] float 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7876 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;Total ram usage:       15 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    1
  7883 ;; This function calls:
  7884 ;;		___ftpack
  7885 ;; This function is called by:
  7886 ;;		_calculatePID
  7887 ;;		_strtod
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text47
  7892  002722                     __ptext47:
  7893                           	opt stack 0
  7894  002722                     ___ftdiv:
  7895                           	opt stack 21
  7896                           
  7897                           ;incstack = 0
  7898  002722  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  7899  002726  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7900  002728  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7901  00272A  340A               	rlcf	___ftdiv@f1+1,w,c
  7902  00272C  360F               	rlcf	??___ftdiv& (0+255),f,c
  7903  00272E  E301               	bnc	u226_41
  7904  002730  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7905  002732                     u226_41:
  7906  002732  500F               	movf	??___ftdiv,w,c
  7907  002734  6E16               	movwf	___ftdiv@exp,c
  7908  002736  5016               	movf	___ftdiv@exp,w,c
  7909  002738  A4D8               	btfss	status,2,c
  7910  00273A  D002               	goto	i2l2624
  7911  00273C  D00E               	goto	i2l2626
  7912  00273E  D061               	goto	i2l949
  7913  002740                     i2l2624:
  7914  002740  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  7915  002744  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7916  002746  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7917  002748  340D               	rlcf	___ftdiv@f2+1,w,c
  7918  00274A  360F               	rlcf	??___ftdiv& (0+255),f,c
  7919  00274C  E301               	bnc	u228_41
  7920  00274E  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7921  002750                     u228_41:
  7922  002750  500F               	movf	??___ftdiv,w,c
  7923  002752  6E17               	movwf	___ftdiv@sign,c
  7924  002754  5017               	movf	___ftdiv@sign,w,c
  7925  002756  A4D8               	btfss	status,2,c
  7926  002758  D007               	goto	i2l2630
  7927  00275A                     i2l2626:
  7928  00275A  0E00               	movlw	0
  7929  00275C  6E09               	movwf	?___ftdiv,c
  7930  00275E  0E00               	movlw	0
  7931  002760  6E0A               	movwf	?___ftdiv+1,c
  7932  002762  0E00               	movlw	0
  7933  002764  6E0B               	movwf	?___ftdiv+2,c
  7934  002766  D04D               	goto	i2l949
  7935  002768                     i2l2630:
  7936  002768  0E00               	movlw	0
  7937  00276A  6E13               	movwf	___ftdiv@f3,c
  7938  00276C  0E00               	movlw	0
  7939  00276E  6E14               	movwf	___ftdiv@f3+1,c
  7940  002770  0E00               	movlw	0
  7941  002772  6E15               	movwf	___ftdiv@f3+2,c
  7942  002774  5017               	movf	___ftdiv@sign,w,c
  7943  002776  0F89               	addlw	137
  7944  002778  5E16               	subwf	___ftdiv@exp,f,c
  7945  00277A  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  7946  00277E  500E               	movf	___ftdiv@f2+2,w,c
  7947  002780  1A17               	xorwf	___ftdiv@sign,f,c
  7948  002782  0E80               	movlw	128
  7949  002784  1617               	andwf	___ftdiv@sign,f,c
  7950  002786  8E0A               	bsf	___ftdiv@f1+1,7,c
  7951  002788  0EFF               	movlw	255
  7952  00278A  1609               	andwf	___ftdiv@f1,f,c
  7953  00278C  0EFF               	movlw	255
  7954  00278E  160A               	andwf	___ftdiv@f1+1,f,c
  7955  002790  0E00               	movlw	0
  7956  002792  160B               	andwf	___ftdiv@f1+2,f,c
  7957  002794  8E0D               	bsf	___ftdiv@f2+1,7,c
  7958  002796  0EFF               	movlw	255
  7959  002798  160C               	andwf	___ftdiv@f2,f,c
  7960  00279A  0EFF               	movlw	255
  7961  00279C  160D               	andwf	___ftdiv@f2+1,f,c
  7962  00279E  0E00               	movlw	0
  7963  0027A0  160E               	andwf	___ftdiv@f2+2,f,c
  7964  0027A2  0E18               	movlw	24
  7965  0027A4  6E12               	movwf	___ftdiv@cntr,c
  7966  0027A6  D000               	goto	i2l2650
  7967  0027A8                     i2l2650:
  7968  0027A8  90D8               	bcf	status,0,c
  7969  0027AA  3613               	rlcf	___ftdiv@f3,f,c
  7970  0027AC  3614               	rlcf	___ftdiv@f3+1,f,c
  7971  0027AE  3615               	rlcf	___ftdiv@f3+2,f,c
  7972  0027B0  500C               	movf	___ftdiv@f2,w,c
  7973  0027B2  5C09               	subwf	___ftdiv@f1,w,c
  7974  0027B4  500D               	movf	___ftdiv@f2+1,w,c
  7975  0027B6  580A               	subwfb	___ftdiv@f1+1,w,c
  7976  0027B8  500E               	movf	___ftdiv@f2+2,w,c
  7977  0027BA  580B               	subwfb	___ftdiv@f1+2,w,c
  7978  0027BC  A0D8               	btfss	status,0,c
  7979  0027BE  D007               	goto	i2l952
  7980  0027C0  500C               	movf	___ftdiv@f2,w,c
  7981  0027C2  5E09               	subwf	___ftdiv@f1,f,c
  7982  0027C4  500D               	movf	___ftdiv@f2+1,w,c
  7983  0027C6  5A0A               	subwfb	___ftdiv@f1+1,f,c
  7984  0027C8  500E               	movf	___ftdiv@f2+2,w,c
  7985  0027CA  5A0B               	subwfb	___ftdiv@f1+2,f,c
  7986  0027CC  8013               	bsf	___ftdiv@f3,0,c
  7987  0027CE                     i2l952:
  7988  0027CE  90D8               	bcf	status,0,c
  7989  0027D0  3609               	rlcf	___ftdiv@f1,f,c
  7990  0027D2  360A               	rlcf	___ftdiv@f1+1,f,c
  7991  0027D4  360B               	rlcf	___ftdiv@f1+2,f,c
  7992  0027D6  2E12               	decfsz	___ftdiv@cntr,f,c
  7993  0027D8  D7E7               	goto	i2l2650
  7994  0027DA  D000               	goto	i2l2660
  7995  0027DC                     i2l2660:
  7996  0027DC  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  7997  0027E0  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7998  0027E4  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7999  0027E8  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  8000  0027EC  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  8001  0027F0  EC02  F014         	call	___ftpack	;wreg free
  8002  0027F4  C001  F009         	movff	?___ftpack,?___ftdiv
  8003  0027F8  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  8004  0027FC  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  8005  002800  D000               	goto	i2l949
  8006  002802                     i2l949:
  8007  002802  0012               	return		;funcret
  8008  002804                     __end_of___ftdiv:
  8009                           	opt stack 0
  8010                           pclatu	equ	0xFFB
  8011                           pclath	equ	0xFFA
  8012                           tblptru	equ	0xFF8
  8013                           tblptrh	equ	0xFF7
  8014                           tblptrl	equ	0xFF6
  8015                           tablat	equ	0xFF5
  8016                           prodh	equ	0xFF4
  8017                           prodl	equ	0xFF3
  8018                           intcon	equ	0xFF2
  8019                           indf0	equ	0xFEF
  8020                           postinc0	equ	0xFEE
  8021                           fsr0h	equ	0xFEA
  8022                           fsr0l	equ	0xFE9
  8023                           wreg	equ	0xFE8
  8024                           indf1	equ	0xFE7
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           fsr2h	equ	0xFDA
  8031                           fsr2l	equ	0xFD9
  8032                           status	equ	0xFD8
  8033                           
  8034 ;; *************** function ___altoft *****************
  8035 ;; Defined at:
  8036 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  c               4    8[COMRAM] long 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  sign            1   17[COMRAM] unsigned char 
  8041 ;;  exp             1   16[COMRAM] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  3    8[COMRAM] float 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0, cstack
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:       10 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    1
  8058 ;; This function calls:
  8059 ;;		___ftpack
  8060 ;; This function is called by:
  8061 ;;		_strtod
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text48
  8066  0029DE                     __ptext48:
  8067                           	opt stack 0
  8068  0029DE                     ___altoft:
  8069                           	opt stack 20
  8070                           
  8071                           ;incstack = 0
  8072  0029DE  0E00               	movlw	0
  8073  0029E0  6E12               	movwf	___altoft@sign,c
  8074  0029E2  0E8E               	movlw	142
  8075  0029E4  6E11               	movwf	___altoft@exp,c
  8076  0029E6  AE0C               	btfss	___altoft@c+3,7,c
  8077  0029E8  D012               	goto	i2l2612
  8078  0029EA  1E0C               	comf	___altoft@c+3,f,c
  8079  0029EC  1E0B               	comf	___altoft@c+2,f,c
  8080  0029EE  1E0A               	comf	___altoft@c+1,f,c
  8081  0029F0  6C09               	negf	___altoft@c,c
  8082  0029F2  0E00               	movlw	0
  8083  0029F4  220A               	addwfc	___altoft@c+1,f,c
  8084  0029F6  220B               	addwfc	___altoft@c+2,f,c
  8085  0029F8  220C               	addwfc	___altoft@c+3,f,c
  8086  0029FA  0E01               	movlw	1
  8087  0029FC  6E12               	movwf	___altoft@sign,c
  8088  0029FE  D007               	goto	i2l2612
  8089  002A00                     i2l2610:
  8090  002A00  90D8               	bcf	status,0,c
  8091  002A02  320C               	rrcf	___altoft@c+3,f,c
  8092  002A04  320B               	rrcf	___altoft@c+2,f,c
  8093  002A06  320A               	rrcf	___altoft@c+1,f,c
  8094  002A08  3209               	rrcf	___altoft@c,f,c
  8095  002A0A  2A11               	incf	___altoft@exp,f,c
  8096  002A0C  D000               	goto	i2l2612
  8097  002A0E                     i2l2612:
  8098  002A0E  0E00               	movlw	0
  8099  002A10  1409               	andwf	___altoft@c,w,c
  8100  002A12  6E0D               	movwf	??___altoft& (0+255),c
  8101  002A14  0E00               	movlw	0
  8102  002A16  140A               	andwf	___altoft@c+1,w,c
  8103  002A18  6E0E               	movwf	(??___altoft+1)& (0+255),c
  8104  002A1A  0E00               	movlw	0
  8105  002A1C  140B               	andwf	___altoft@c+2,w,c
  8106  002A1E  6E0F               	movwf	(??___altoft+2)& (0+255),c
  8107  002A20  0EFF               	movlw	255
  8108  002A22  140C               	andwf	___altoft@c+3,w,c
  8109  002A24  6E10               	movwf	(??___altoft+3)& (0+255),c
  8110  002A26  500D               	movf	??___altoft,w,c
  8111  002A28  100E               	iorwf	??___altoft+1,w,c
  8112  002A2A  100F               	iorwf	??___altoft+2,w,c
  8113  002A2C  1010               	iorwf	??___altoft+3,w,c
  8114  002A2E  A4D8               	btfss	status,2,c
  8115  002A30  D7E7               	goto	i2l2610
  8116  002A32  C009  F001         	movff	___altoft@c,___ftpack@arg
  8117  002A36  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  8118  002A3A  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  8119  002A3E  C011  F004         	movff	___altoft@exp,___ftpack@exp
  8120  002A42  C012  F005         	movff	___altoft@sign,___ftpack@sign
  8121  002A46  EC02  F014         	call	___ftpack	;wreg free
  8122  002A4A  C001  F009         	movff	?___ftpack,?___altoft
  8123  002A4E  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  8124  002A52  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  8125  002A56  D000               	goto	i2l584
  8126  002A58                     i2l584:
  8127  002A58  0012               	return		;funcret
  8128  002A5A                     __end_of___altoft:
  8129                           	opt stack 0
  8130                           pclatu	equ	0xFFB
  8131                           pclath	equ	0xFFA
  8132                           tblptru	equ	0xFF8
  8133                           tblptrh	equ	0xFF7
  8134                           tblptrl	equ	0xFF6
  8135                           tablat	equ	0xFF5
  8136                           prodh	equ	0xFF4
  8137                           prodl	equ	0xFF3
  8138                           intcon	equ	0xFF2
  8139                           indf0	equ	0xFEF
  8140                           postinc0	equ	0xFEE
  8141                           fsr0h	equ	0xFEA
  8142                           fsr0l	equ	0xFE9
  8143                           wreg	equ	0xFE8
  8144                           indf1	equ	0xFE7
  8145                           fsr1h	equ	0xFE2
  8146                           fsr1l	equ	0xFE1
  8147                           indf2	equ	0xFDF
  8148                           postinc2	equ	0xFDE
  8149                           postdec2	equ	0xFDD
  8150                           fsr2h	equ	0xFDA
  8151                           fsr2l	equ	0xFD9
  8152                           status	equ	0xFD8
  8153                           
  8154 ;; *************** function ___ftpack *****************
  8155 ;; Defined at:
  8156 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  arg             3    0[COMRAM] unsigned um
  8159 ;;  exp             1    3[COMRAM] unsigned char 
  8160 ;;  sign            1    4[COMRAM] unsigned char 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  3    0[COMRAM] float 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        8 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; This function calls:
  8179 ;;		Nothing
  8180 ;; This function is called by:
  8181 ;;		___altoft
  8182 ;;		___ftadd
  8183 ;;		___ftdiv
  8184 ;;		___ftmul
  8185 ;;		___lwtoft
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text49
  8190  002804                     __ptext49:
  8191                           	opt stack 0
  8192  002804                     ___ftpack:
  8193                           	opt stack 21
  8194                           
  8195                           ;incstack = 0
  8196  002804  5004               	movf	___ftpack@exp,w,c
  8197  002806  B4D8               	btfsc	status,2,c
  8198  002808  D005               	goto	i2l2516
  8199  00280A  5001               	movf	___ftpack@arg,w,c
  8200  00280C  1002               	iorwf	___ftpack@arg+1,w,c
  8201  00280E  1003               	iorwf	___ftpack@arg+2,w,c
  8202  002810  A4D8               	btfss	status,2,c
  8203  002812  D00E               	goto	i2l2522
  8204  002814                     i2l2516:
  8205  002814  0E00               	movlw	0
  8206  002816  6E01               	movwf	?___ftpack,c
  8207  002818  0E00               	movlw	0
  8208  00281A  6E02               	movwf	?___ftpack+1,c
  8209  00281C  0E00               	movlw	0
  8210  00281E  6E03               	movwf	?___ftpack+2,c
  8211  002820  D053               	goto	i2l877
  8212  002822  D006               	goto	i2l2522
  8213  002824                     i2l2520:
  8214  002824  2A04               	incf	___ftpack@exp,f,c
  8215  002826  90D8               	bcf	status,0,c
  8216  002828  3203               	rrcf	___ftpack@arg+2,f,c
  8217  00282A  3202               	rrcf	___ftpack@arg+1,f,c
  8218  00282C  3201               	rrcf	___ftpack@arg,f,c
  8219  00282E  D000               	goto	i2l2522
  8220  002830                     i2l2522:
  8221  002830  0E00               	movlw	0
  8222  002832  1401               	andwf	___ftpack@arg,w,c
  8223  002834  6E06               	movwf	??___ftpack& (0+255),c
  8224  002836  0E00               	movlw	0
  8225  002838  1402               	andwf	___ftpack@arg+1,w,c
  8226  00283A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8227  00283C  0EFE               	movlw	254
  8228  00283E  1403               	andwf	___ftpack@arg+2,w,c
  8229  002840  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8230  002842  5006               	movf	??___ftpack,w,c
  8231  002844  1007               	iorwf	??___ftpack+1,w,c
  8232  002846  1008               	iorwf	??___ftpack+2,w,c
  8233  002848  B4D8               	btfsc	status,2,c
  8234  00284A  D00E               	goto	i2l2528
  8235  00284C  D7EB               	goto	i2l2520
  8236  00284E  D00C               	goto	i2l2528
  8237  002850                     i2l2524:
  8238  002850  2A04               	incf	___ftpack@exp,f,c
  8239  002852  0E01               	movlw	1
  8240  002854  2601               	addwf	___ftpack@arg,f,c
  8241  002856  0E00               	movlw	0
  8242  002858  2202               	addwfc	___ftpack@arg+1,f,c
  8243  00285A  0E00               	movlw	0
  8244  00285C  2203               	addwfc	___ftpack@arg+2,f,c
  8245  00285E  90D8               	bcf	status,0,c
  8246  002860  3203               	rrcf	___ftpack@arg+2,f,c
  8247  002862  3202               	rrcf	___ftpack@arg+1,f,c
  8248  002864  3201               	rrcf	___ftpack@arg,f,c
  8249  002866  D000               	goto	i2l2528
  8250  002868                     i2l2528:
  8251  002868  0E00               	movlw	0
  8252  00286A  1401               	andwf	___ftpack@arg,w,c
  8253  00286C  6E06               	movwf	??___ftpack& (0+255),c
  8254  00286E  0E00               	movlw	0
  8255  002870  1402               	andwf	___ftpack@arg+1,w,c
  8256  002872  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8257  002874  0EFF               	movlw	255
  8258  002876  1403               	andwf	___ftpack@arg+2,w,c
  8259  002878  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8260  00287A  5006               	movf	??___ftpack,w,c
  8261  00287C  1007               	iorwf	??___ftpack+1,w,c
  8262  00287E  1008               	iorwf	??___ftpack+2,w,c
  8263  002880  B4D8               	btfsc	status,2,c
  8264  002882  D008               	goto	i2l2532
  8265  002884  D7E5               	goto	i2l2524
  8266  002886  D006               	goto	i2l2532
  8267  002888                     i2l2530:
  8268  002888  0604               	decf	___ftpack@exp,f,c
  8269  00288A  90D8               	bcf	status,0,c
  8270  00288C  3601               	rlcf	___ftpack@arg,f,c
  8271  00288E  3602               	rlcf	___ftpack@arg+1,f,c
  8272  002890  3603               	rlcf	___ftpack@arg+2,f,c
  8273  002892  D000               	goto	i2l2532
  8274  002894                     i2l2532:
  8275  002894  BE02               	btfsc	___ftpack@arg+1,7,c
  8276  002896  D004               	goto	i2l888
  8277  002898  0E02               	movlw	2
  8278  00289A  6004               	cpfslt	___ftpack@exp,c
  8279  00289C  D7F5               	goto	i2l2530
  8280  00289E  D000               	goto	i2l888
  8281  0028A0                     i2l888:
  8282  0028A0  B004               	btfsc	___ftpack@exp,0,c
  8283  0028A2  D002               	goto	i2l2538
  8284  0028A4  9E02               	bcf	___ftpack@arg+1,7,c
  8285  0028A6  D000               	goto	i2l2538
  8286  0028A8                     i2l2538:
  8287  0028A8  90D8               	bcf	status,0,c
  8288  0028AA  3204               	rrcf	___ftpack@exp,f,c
  8289  0028AC  5004               	movf	___ftpack@exp,w,c
  8290  0028AE  1203               	iorwf	___ftpack@arg+2,f,c
  8291  0028B0  5005               	movf	___ftpack@sign,w,c
  8292  0028B2  B4D8               	btfsc	status,2,c
  8293  0028B4  D002               	goto	i2l2544
  8294  0028B6  8E03               	bsf	___ftpack@arg+2,7,c
  8295  0028B8  D000               	goto	i2l2544
  8296  0028BA                     i2l2544:
  8297  0028BA  C001  F001         	movff	___ftpack@arg,?___ftpack
  8298  0028BE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8299  0028C2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8300  0028C6  D000               	goto	i2l877
  8301  0028C8                     i2l877:
  8302  0028C8  0012               	return		;funcret
  8303  0028CA                     __end_of___ftpack:
  8304                           	opt stack 0
  8305                           pclatu	equ	0xFFB
  8306                           pclath	equ	0xFFA
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           prodh	equ	0xFF4
  8312                           prodl	equ	0xFF3
  8313                           intcon	equ	0xFF2
  8314                           indf0	equ	0xFEF
  8315                           postinc0	equ	0xFEE
  8316                           fsr0h	equ	0xFEA
  8317                           fsr0l	equ	0xFE9
  8318                           wreg	equ	0xFE8
  8319                           indf1	equ	0xFE7
  8320                           fsr1h	equ	0xFE2
  8321                           fsr1l	equ	0xFE1
  8322                           indf2	equ	0xFDF
  8323                           postinc2	equ	0xFDE
  8324                           postdec2	equ	0xFDD
  8325                           fsr2h	equ	0xFDA
  8326                           fsr2l	equ	0xFD9
  8327                           status	equ	0xFD8
  8328                           
  8329 ;; *************** function _strcmp *****************
  8330 ;; Defined at:
  8331 ;;		line 33 in file "/opt/microchip/xc8/v1.34/sources/common/strcmp.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  8334 ;;		 -> key(5), 
  8335 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  8336 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_25(3), 
  8337 ;;		 -> STR_24(3), STR_23(3), STR_22(4), STR_21(4), 
  8338 ;;		 -> STR_20(4), STR_19(4), STR_18(3), STR_17(3), 
  8339 ;;		 -> STR_16(3), STR_15(3), STR_12(3), STR_11(3), 
  8340 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  8341 ;;		 -> STR_6(4), STR_5(4), 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  r               1    5[COMRAM] char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  2    0[COMRAM] int 
  8346 ;; Registers used:
  8347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;Total ram usage:        6 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; This function calls:
  8360 ;;		Nothing
  8361 ;; This function is called by:
  8362 ;;		_keyValue
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text50
  8367  002D8A                     __ptext50:
  8368                           	opt stack 0
  8369  002D8A                     _strcmp:
  8370                           	opt stack 22
  8371                           
  8372                           ;incstack = 0
  8373  002D8A  D005               	goto	i2l2830
  8374  002D8C                     i2l2828:
  8375  002D8C  4A01               	infsnz	strcmp@s1,f,c
  8376  002D8E  2A02               	incf	strcmp@s1+1,f,c
  8377  002D90  4A03               	infsnz	strcmp@s2,f,c
  8378  002D92  2A04               	incf	strcmp@s2+1,f,c
  8379  002D94  D000               	goto	i2l2830
  8380  002D96                     i2l2830:
  8381  002D96  C001  FFD9         	movff	strcmp@s1,fsr2l
  8382  002D9A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  8383  002D9E  50DF               	movf	indf2,w,c
  8384  002DA0  6E05               	movwf	??_strcmp& (0+255),c
  8385  002DA2  C003  FFF6         	movff	strcmp@s2,tblptrl
  8386  002DA6  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  8387  002DAA                     	if	0	;tblptru may be non-zero
  8388  002DAA                     	endif
  8389  002DAA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8390  002DAA  0E00               	movlw	low (__mediumconst shr (0+16))
  8391  002DAC  6EF8               	movwf	tblptru,c
  8392  002DAE                     	endif
  8393  002DAE  0008               	tblrd		*
  8394  002DB0  50F5               	movf	tablat,w,c
  8395  002DB2  0800               	sublw	0
  8396  002DB4  2405               	addwf	??_strcmp,w,c
  8397  002DB6  6E06               	movwf	strcmp@r,c
  8398  002DB8  5006               	movf	strcmp@r,w,c
  8399  002DBA  A4D8               	btfss	status,2,c
  8400  002DBC  D009               	goto	i2l2834
  8401  002DBE  C001  FFD9         	movff	strcmp@s1,fsr2l
  8402  002DC2  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  8403  002DC6  50DF               	movf	indf2,w,c
  8404  002DC8  B4D8               	btfsc	status,2,c
  8405  002DCA  D002               	goto	i2l2834
  8406  002DCC  D7DF               	goto	i2l2828
  8407  002DCE  D000               	goto	i2l2834
  8408  002DD0                     i2l2834:
  8409  002DD0  5006               	movf	strcmp@r,w,c
  8410  002DD2  6E01               	movwf	?_strcmp,c
  8411  002DD4  6A02               	clrf	?_strcmp+1,c
  8412  002DD6  BE01               	btfsc	?_strcmp,7,c
  8413  002DD8  0602               	decf	?_strcmp+1,f,c
  8414  002DDA  D000               	goto	i2l1132
  8415  002DDC                     i2l1132:
  8416  002DDC  0012               	return		;funcret
  8417  002DDE                     __end_of_strcmp:
  8418                           	opt stack 0
  8419                           pclatu	equ	0xFFB
  8420                           pclath	equ	0xFFA
  8421                           tblptru	equ	0xFF8
  8422                           tblptrh	equ	0xFF7
  8423                           tblptrl	equ	0xFF6
  8424                           tablat	equ	0xFF5
  8425                           prodh	equ	0xFF4
  8426                           prodl	equ	0xFF3
  8427                           intcon	equ	0xFF2
  8428                           indf0	equ	0xFEF
  8429                           postinc0	equ	0xFEE
  8430                           fsr0h	equ	0xFEA
  8431                           fsr0l	equ	0xFE9
  8432                           wreg	equ	0xFE8
  8433                           indf1	equ	0xFE7
  8434                           fsr1h	equ	0xFE2
  8435                           fsr1l	equ	0xFE1
  8436                           indf2	equ	0xFDF
  8437                           postinc2	equ	0xFDE
  8438                           postdec2	equ	0xFDD
  8439                           fsr2h	equ	0xFDA
  8440                           fsr2l	equ	0xFD9
  8441                           status	equ	0xFD8
  8442                           pclatu	equ	0xFFB
  8443                           pclath	equ	0xFFA
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodh	equ	0xFF4
  8449                           prodl	equ	0xFF3
  8450                           intcon	equ	0xFF2
  8451                           indf0	equ	0xFEF
  8452                           postinc0	equ	0xFEE
  8453                           fsr0h	equ	0xFEA
  8454                           fsr0l	equ	0xFE9
  8455                           wreg	equ	0xFE8
  8456                           indf1	equ	0xFE7
  8457                           fsr1h	equ	0xFE2
  8458                           fsr1l	equ	0xFE1
  8459                           indf2	equ	0xFDF
  8460                           postinc2	equ	0xFDE
  8461                           postdec2	equ	0xFDD
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8
  8465                           
  8466                           	psect	rparam
  8467  0000                     pclatu	equ	0xFFB
  8468                           pclath	equ	0xFFA
  8469                           tblptru	equ	0xFF8
  8470                           tblptrh	equ	0xFF7
  8471                           tblptrl	equ	0xFF6
  8472                           tablat	equ	0xFF5
  8473                           prodh	equ	0xFF4
  8474                           prodl	equ	0xFF3
  8475                           intcon	equ	0xFF2
  8476                           indf0	equ	0xFEF
  8477                           postinc0	equ	0xFEE
  8478                           fsr0h	equ	0xFEA
  8479                           fsr0l	equ	0xFE9
  8480                           wreg	equ	0xFE8
  8481                           indf1	equ	0xFE7
  8482                           fsr1h	equ	0xFE2
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8


Data Sizes:
    Strings     111
    Constant    0
    Data        4
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     86      95
    BANK0           160     19      97
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[4]), STR_21(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> key(BANK0[5]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 10
		 -> value(BANK0[10]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), keyValue@str_end(COMRAM[2]), 

    SerTxStr@string	PTR unsigned char  size(2) Largest target is 36
		 -> STR_30(CODE[36]), STR_29(CODE[4]), STR_14(CODE[6]), STR_13(CODE[4]), 
		 -> STR_4(CODE[11]), value(BANK0[10]), STR_3(CODE[6]), key(BANK0[5]), 

    keyValue@str_end	PTR unsigned char  size(2) Largest target is 10
		 -> value(BANK0[10]), 

    keyValue@str	PTR unsigned char  size(2) Largest target is 30
		 -> received(BANK0[30]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_TMR0Int
    _TMR0Int->_calculatePID
    _calculatePID->___fttol
    ___ftadd->___ftmul
    _ReadRTDpos->i2_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    _LCDBreakDouble->___fttol
    _lcdGoTo->i2_lcdCommand
    i2_lcdCommand->i2_setGPIO
    _lcdChar->i2_setGPIO
    i2_setGPIO->i2_WriteSPI1
    ___fttol->___ftadd
    _ImplementPIDMotion->_abs
    _RCInt->_keyValue
    _keyValue->_strtod
    i2_SerTxStr->i2_SerTx
    _strtod->___ftge
    ___ftmul->___ftdiv
    ___ftge->___ftadd
    ___ftdiv->___ftpack
    ___altoft->___ftpack

Critical Paths under _main in BANK0

    _lcdInit->_lcdCommand
    _setIODIR->_WriteSPI1
    _lcdCommand->_setGPIO
    _setGPIO->_WriteSPI1
    _SerInit->_SerTxStr
    _SerTxStr->_SerTx
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2034
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    2034
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SerInit
                            _lcdInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                              0     0      0    1533
                           _OpenSPI1
                         _lcdCommand
                            _setGPIO
                           _setIODIR
 ---------------------------------------------------------------------------------
 (3) _setIODIR                                             2     1      1     195
                                             16 BANK0      2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     583
                                             18 BANK0      1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (3) _setGPIO                                              2     1      1     539
                                             16 BANK0      2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (4) _WriteSPI1                                            2     2      0      23
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             14 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _SerInit                                              0     0      0     435
                           _SerTxStr
 ---------------------------------------------------------------------------------
 (3) _SerTxStr                                             2     0      2     435
                                             15 BANK0      2     0      2
                              _SerTx
 ---------------------------------------------------------------------------------
 (4) _SerTx                                                1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0   50967
                                              0 BANK0     14    14      0
                              _RCInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (7) _TMR0Int                                              3     3      0   32439
                                             83 COMRAM     3     3      0
                 _ImplementPIDMotion
                     _LCDBreakDouble
                          _RTD2Angle
                         _ReadRTDpos
                       _calculatePID
 ---------------------------------------------------------------------------------
 (8) _calculatePID                                        27    21      6   17989
                                             65 COMRAM    18    12      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    6481
                                             38 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) _ReadRTDpos                                          12    10      2     160
                                              1 COMRAM    10     8      2
                      i2_Delay10TCYx
 ---------------------------------------------------------------------------------
 (8) _RTD2Angle                                            3     0      3    5970
                                             38 COMRAM     3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (9) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) _LCDBreakDouble                                       9     6      3    7906
                                             65 COMRAM     9     6      3
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
                            _lcdChar
                            _lcdGoTo
                       i2_lcdCommand
 ---------------------------------------------------------------------------------
 (9) _lcdGoTo                                              1     1      0     341
                                              5 COMRAM     1     1      0
                       i2_lcdCommand
 ---------------------------------------------------------------------------------
 (9) i2_lcdCommand                                         1     1      0     319
                                              4 COMRAM     1     1      0
                      i2_Delay10TCYx
                          i2_setGPIO
 ---------------------------------------------------------------------------------
 (9) _lcdChar                                              1     1      0     319
                                              4 COMRAM     1     1      0
                      i2_Delay10TCYx
                          i2_setGPIO
 ---------------------------------------------------------------------------------
 (10) i2_setGPIO                                           2     1      1     275
                                              2 COMRAM     2     1      1
                        i2_WriteSPI1
 ---------------------------------------------------------------------------------
 (11) i2_WriteSPI1                                         2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_Delay10TCYx                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4    1183
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) ___lwdiv                                              7     3      4    1186
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     444
                                             50 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _ImplementPIDMotion                                   4     2      2     369
                                              4 COMRAM     4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (9) _abs                                                  4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _RCInt                                                2     2      0   18528
                                             82 COMRAM     2     2      0
                           _keyValue
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (8) _keyValue                                            11     7      4   18349
                                             71 COMRAM    11     7      4
                            _isspace
                             _strcmp
                             _strtod
                            i2_SerTx
                         i2_SerTxStr
 ---------------------------------------------------------------------------------
 (9) i2_SerTxStr                                           2     0      2     275
                                              1 COMRAM     2     0      2
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (8) i2_SerTx                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _strtod                                              12     8      4   14067
                                             59 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (10) _isspace                                             3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) ___lmul                                             12     4      8     322
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3    1325
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    3689
                                             23 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6    1928
                                             50 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2875
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2311
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               6     2      4    2907
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SerInit
       _SerTxStr
         _SerTx
     _lcdInit
       _OpenSPI1
       _lcdCommand
         _Delay10TCYx
         _setGPIO
           _WriteSPI1
       _setGPIO
         _WriteSPI1
       _setIODIR
         _WriteSPI1

 _ISR (ROOT)
   _RCInt
     _keyValue
       _isspace
       _strcmp
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___lmul
         _isdigit
         _isspace
       i2_SerTx
       i2_SerTxStr
         i2_SerTx
     i2_SerTx
   _TMR0Int
     _ImplementPIDMotion
       _abs
     _LCDBreakDouble
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___lwdiv
       ___lwmod
       _lcdChar
         i2_Delay10TCYx
         i2_setGPIO
           i2_WriteSPI1
       _lcdGoTo
         i2_lcdCommand
           i2_Delay10TCYx
           i2_setGPIO
             i2_WriteSPI1
       i2_lcdCommand
         i2_Delay10TCYx
         i2_setGPIO
           i2_WriteSPI1
     _RTD2Angle
       _ReadRTDpos (ARG)
         i2_Delay10TCYx
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _ReadRTDpos
       i2_Delay10TCYx
     _calculatePID
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      61       5       60.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     56      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0      32        0.0%
DATA                 0      0      C0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 22 03:20:25 2015

               ___altoft@exp 0011     __size_of_MotorDriverInit 001C                ___altoft@sign 0012  
                         _Kd 0066                           _Ki 0069                           _Kp 006C  
               ___ftadd@exp1 0032                 ___ftadd@exp2 0031                 ___ftadd@sign 0030  
                        l326 3212                          l460 2A96                          l461 2AB2  
                        l462 2A98                          l454 2A74                          l463 2A9C  
                        l456 2A78                          l457 2A7A                          l476 30B0  
                        l478 30A8                          l780 31DE                          l773 31F4  
                        l785 321C                          l787 3226                          _PR2 000FCB  
                        _ISR 0008                          _abs 3040                          _err 005A  
                        _key 00A6            lcdCommand@command 00BD                          prod 000FF3  
                        wreg 000FE8                  i2_WriteSPI1 30D6                         ?_ISR 0001  
               ___ftdiv@cntr 0012                   _Delay1TCYx 3218                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         ?_abs 0001                         l3004 31CE  
                       l2810 2AA0                         l2572 31E4                         l2820 2BD4  
                       l2806 2A7E                         l2824 2C02                         l3706 3120  
                       STR_1 1037                         STR_2 1030                         STR_3 103E  
                       STR_4 1025                         STR_5 104C                         STR_6 1054  
                       STR_7 105E                         STR_8 106A                         STR_9 105B  
                       _AZEL 005F                         u2450 2BF6                         u2460 2C24  
                       u4057 31D0                         u2457 2BEC                         u4067 31E6  
                       u2467 2C1A                         i2l54 2332                         i2l55 237A  
                       i2l97 161E              __end_of_PIDInit 2F46              __end_of_TMR0Int 2B1A  
                       abs@a 0001                         _main 311A                 ___ftpack@arg 0001  
               ___ftpack@exp 0004              __end_of_RTDInit 2FEC                         fsr0h 000FEA  
                       fsr1h 000FE2              __end_ofi2_SerTx 3236                         indf0 000FEF  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       pclat 000FFA                         prodh 000FF4                         prodl 000FF3  
                       start 0018                 ___ftmul@cntr 0025                 ___param_bank 000010  
               ___ftmul@sign 0026                        ??_ISR 00AB                  _Delay10TCYx 31E0  
               ___fttol@exp1 0041                        ??_abs 0003              __end_of_SerInit 3040  
               ___fttol@lval 003D                  _Delay1KTCYx 31CA                  ReadRTDpos@x 000B  
          RTD2Angle@RTDAngle 0027                        ?_main 0001              __end_of___ftadd 22AA  
                      STR_10 1067                        STR_11 1058                        STR_20 1054  
                      STR_12 1064                        STR_21 1048                        STR_13 1044  
                      STR_14 103E                        STR_22 1050                        STR_30 1001  
                      STR_23 105E                        STR_15 1061                        STR_24 106A  
                      STR_16 106D                        STR_25 105B                        STR_17 1049  
                      STR_26 1067                        STR_18 1051                        STR_27 1058  
                      STR_19 104C                        STR_28 1064                        STR_29 1044  
            __end_of___ftdiv 2804              __end_of___ftneg 30D6              __end_of___ftmul 263C  
                      _T0CON 000FD5              __end_of___fttol 2722                        _T2CON 000FCA  
                      _T3CON 000FB1              __end_of___lwdiv 2B76              __end_of___lwmod 2EC4  
                      i2l206 2410                        i2l223 2542                        i2l326 3230  
                      i2l530 305E                        i2l531 3066                        i2l435 2998  
                      i2l380 2C9C                        i2l381 2CDC                        i2l438 29A4  
                      i2l703 20B4                        i2l391 2FBA                        i2l379 2C92  
                      i2l476 30F6                        i2l478 30EE                        i2l584 2A58  
                      i2l921 2154                        i2l674 1E10                        i2l676 1E18  
                      i2l932 2216                        i2l693 20E4                        i2l773 3206  
                      i2l941 2232                        i2l917 212A                        i2l918 22A8  
                      i2l952 27CE                        i2l964 263A                        i2l877 28C8  
                      i2l949 2802                        i2l958 295E                        i2l974 30C8  
                      i2l888 28A0                        i2l985 2720                        _RCREG 000FAE  
          i2Delay10TCYx@unit 0001           __size_of_RTD2Angle 0038        __size_ofi2_lcdCommand 0044  
                      _TMR0H 000FD7                        _TMR0L 000FD6                        _SPBRG 000FAF  
                      _PORTD 000F83                        _RCInt 240A                        _PORTH 000F87  
                      _TRISD 000F95                        _TRISH 000F99              __end_of_lcdChar 2F84  
            __end_of_lcdGoTo 3242          ___lmul@multiplicand 0005              __end_of_lcdInit 2D8A  
             __CFG_FCMEN$OFF 000000                        _SerTx 3208              __end_of_setGPIO 317A  
            __end_of_isdigit 311A                ___ftpack@sign 0005                        _value 009C  
            __end_of_isspace 3018                        tablat 000FF5                        status 000FD8  
                ?i2_SerTxStr 0002                   _ReadRTDpos 2C86              __initialization 2DDE  
               __end_of_main 313A                 i2_lcdCommand 2EC4           __size_ofi2_setGPIO 001A  
             __CFG_OSC$HSPLL 000000                _StrippedValue 0072             __end_of_OpenSPI1 2ABA  
                keyValue@str 0048                       ??_main 00BE                ___fttol@sign1 003C  
           __end_of_SerTxStr 2C2C                __activetblptr 000003            ??_MotorDriverInit 00B9  
                     ?_RCInt 0001             ??_LCDBreakDouble 0045                    ??_PIDInit 00B9  
                     ?_SerTx 0001                    ??_TMR0Int 0054             __end_of___altoft 2A5A  
                  ??_RTDInit 00BA                  ?_Delay1TCYx 0001                       _CCPR3L 000FB8  
                  ??i2_SerTx 0001             __end_of___ftpack 28CA        __size_of_calculatePID 0746  
                     i2l1000 3118                       i2l1005 3016                       i2l1107 2EBA  
                     i2l1132 2DDC                       i2l1124 308C                       i2l3000 20D6  
                     i2l3110 26CA                       i2l3030 216E                       i2l3104 26B4  
                     i2l3040 2196                       i2l3024 2162                       i2l1097 2B6C  
                     i2l3122 270E                       i2l3114 26DE                       i2l3050 21D2  
                     i2l3018 2138                       i2l3116 26EC                       i2l3108 26C4  
                     i2l3132 2B30                       i2l3060 220A                       i2l3052 21DA  
                     i2l3118 26F6                       i2l3134 2B3A                       i2l3046 21BA  
                     i2l3230 10BC                       i2l2520 2824                       i2l3144 2B60  
                     i2l3136 2B42                       i2l3160 2EAE                       i2l3152 2E86  
                     i2l3048 21C6                       i2l3240 1216                       i2l2530 2888  
                     i2l2522 2830                       i2l2610 2A00                       i2l3170 2CE0  
                     i2l3410 1A0A                       i2l3402 19C6                       i2l3322 2B7E  
                     i2l3154 2E90                       i2l3066 2250                       i2l3058 21FE  
                     i2l3242 1246                       i2l3250 1338                       i2l3234 1154  
                     i2l2532 2894                       i2l2524 2850                       i2l2516 2814  
                     i2l2612 2A0E                       i2l2700 25EC                       i2l3340 17C2  
                     i2l3156 2E98                       i2l3076 2282                       i2l2630 2768  
                     i2l3174 2D0C                       i2l3510 1CC8                       i2l3422 1A32  
                     i2l3414 1A16                       i2l3406 19D2                       i2l3326 2B90  
                     i2l3086 265A                       i2l3262 149A                       i2l2544 28BA  
                     i2l2528 2868                       i2l2624 2740                       i2l2704 25FE  
                     i2l2720 3110                       i2l3504 1CBC                       i2l3352 1814  
                     i2l3272 15BC                       i2l3264 14F2                       i2l3248 1308  
                     i2l2538 28A8                       i2l2650 27A8                       i2l2626 275A  
                     i2l3522 1CEC                       i2l3506 1CC0                       i2l3450 1B4A  
                     i2l3442 1B06                       i2l3434 1AC2                       i2l3426 1A5A  
                     i2l3362 1872                       i2l3418 1A26                       i2l3346 17E0  
                     i2l3282 17AA                       i2l2660 27DC                       i2l2732 292E  
                     i2l2708 2614                       i2l2900 1E6A                       i2l3516 1CE0  
                     i2l3372 18A4                       i2l3364 1876                       i2l3348 17E6  
                     i2l3612 2516                       i2l2830 2D96                       i2l2670 2562  
                     i2l2902 1E70                       i2l3518 1CE4                       i2l3470 1BDE  
                     i2l3462 1B9A                       i2l3454 1B56                       i2l3446 1B12  
                     i2l3438 1ACE                       i2l3390 194A                       i2l3358 1832  
                     i2l2558 31F8                       i2l3294 2C96                       i2l3278 178A  
                     i2l2728 28FC                       i2l2672 257C                       i2l2904 1E76  
                     i2l3528 1D04                       i2l3368 1886                       i2l3616 252C  
                     i2l3608 2500                       i2l2834 2DD0                       i2l2738 295A  
                     i2l2690 25BE                       i2l2594 2C3E                       i2l2586 3008  
                     i2l2922 1F04                       i2l2842 1D2A                       i2l3482 1C5A  
                     i2l3474 1C16                       i2l3466 1BD2                       i2l3458 1B8E  
                     i2l3394 1982                       i2l3490 1C78                       i2l3386 193E  
                     i2l3378 18CE                       i2l2828 2D8C                       i2l2676 258A  
                     i2l2588 300E                       i2l2844 1D30                       u231_41 2554  
                     i2l2694 25D0                       i2l2598 2C54                       i2l2950 1F96  
                     i2l2942 1F60                       i2l2934 1F2C                       i2l2926 1F0C  
                     i2l2870 1D98                       i2l2854 1D58                       i2l3494 1C9C  
                     i2l3486 1C66                       i2l3478 1C22                       i2l3398 198E  
                     i2l3590 24B2                       i2l3582 2468                       i2l2952 1FA4  
                     i2l2864 1D80                       i2l2856 1D60                       i2l3488 1C72  
                     i2l3584 247E                       i2l2698 25E6                       i2l2946 1F68  
                     i2l2970 1FFC                       i2l2874 1DAE                       i2l2858 1D66  
                     i2l3498 1CA4                       i2l3578 245E                       i2l2980 2040  
                     i2l2956 1FD0                       u304_41 264C                       i2l2974 200A  
                     i2l2894 1E42                       i2l2984 206C                       i2l2888 1E1E  
                     i2l2994 20A4                       i2l2978 2038                       i2l2898 1E5A  
                     u233_41 2572                       u226_41 2732                       u228_41 2750  
                     _RCREG1 000FAE             __end_of___lwtoft 308E                       u283_41 20F6  
                     u284_41 210A                       _RCSTA1 000FAB                       _TXREG1 000FAD  
                     _RCflag 007D                       _TXSTA1 000FAC            __end_of_RTD2Angle 2FBC  
                     SerTx@c 00B9                    ??_SerInit 00BC             OpenSPI1@bus_mode 00B9  
                     ___ftge 28CA                       ___lmul 2C2C                    ??___ftadd 002D  
             keyValue@length 004A        __end_ofi2_Delay10TCYx 3208                    ??___ftdiv 000F  
                  ??___ftneg 0004                    ??___ftmul 001E                    ??___fttol 0037  
           __end_of_keyValue 1D10                    ??___lwdiv 0005                    ??___lwmod 0005  
           i2SerTxStr@string 0002                       _intErr 0075             __end_of_setIODIR 315A  
                     clear_0 2DE4                       clear_1 2DF0                  setIODIR@dir 00BB  
                  ??_lcdChar 0005                    ??_lcdGoTo 0006                    ??_lcdInit 00BE  
                     _strcmp 2D8A                       _strtod 1D10        ___ftmul@f3_as_product 0022  
__size_of_ImplementPIDMotion 005C                 __pdataCOMRAM 005F                    ??_setGPIO 00BC  
               _calculatePID 1072                    ??_isdigit 0001            _calculatePID$2553 0051  
          _calculatePID$2554 004B            _calculatePID$2555 004E                 __mediumconst 0000  
                  ??_isspace 0001                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8          __size_ofi2_SerTxStr 0058                   _StartAngle 0057  
          __end_ofi2_setGPIO 31CA                   __accesstop 0060      __end_of__initialization 2E26  
                 ___altoft@c 0009           __size_of_WriteSPI1 0024                   ___ftadd@f1 0027  
                 ___ftadd@f2 002A                   ___ftge@ff1 0033                   ___ftge@ff2 0036  
              ___rparam_used 000001                   ___ftdiv@f1 0009                   ___ftdiv@f2 000C  
                 ___ftdiv@f3 0013                   ___ftneg@f1 0001                  ?_ReadRTDpos 0002  
              __end_of_RCInt 2544                   ___ftmul@f1 0018                   ___ftmul@f2 001B  
                 ___fttol@f1 0033               __pcstackCOMRAM 0001                __end_of_SerTx 3218  
               __pidataBANK0 3242          __size_of_Delay1TCYx 0010                   ___lwtoft@c 0009  
                    ??_RCInt 0053                      ??_SerTx 00B9                 ?i2_WriteSPI1 0001  
               keyValue@flag 0050                   __pbssBANK0 0060             WriteSPI1@TempVar 00B9  
                  ?_OpenSPI1 00B9                    ?_SerTxStr 00BA                      ?___ftge 0033  
                    ?___lmul 0001                 ?_Delay10TCYx 0001                   _lcdCommand 2E2C  
                    _CCP3CON 000FB7                 ?_Delay1KTCYx 0001                    ?___altoft 0009  
                    _BAUDCON 000F7E               ___lmul@product 0009                    ?___ftpack 0001  
                    ?_strcmp 0001            __end_of_WriteSPI1 30B2                    ?___lwtoft 0009  
                    ?_strtod 003C          i2WriteSPI1@data_out 0002                      _PIDInit 2F08  
        __size_of_ReadRTDpos 0058          LCDBreakDouble@temp1 0047          LCDBreakDouble@temp2 0049  
              _PIDEnableFlag 005D                      _SSP1BUF 000FC9                      _TMR0Int 2ABA  
 ImplementPIDMotion@PIDValue 0005                      _RTDInit 2FBC               SerTxStr@string 00BA  
                    i2_SerTx 3228                    ?_keyValue 0048                    ?_setIODIR 00BB  
                 ??_OpenSPI1 00BB                 ??i2_SerTxStr 0004                   ??_SerTxStr 00BC  
                    __Hparam 0000                      _SerInit 3018                      __Lparam 0000  
            _MotorDriverInit 317A              __size_of___ftge 0096              __size_of___lmul 005A  
                    ___ftadd 20E6                      ___ftdiv 2722                      ___ftneg 30B2  
                    ___ftmul 2544                      ___fttol 263C                      ___lwdiv 2B1A  
                    ___lwmod 2E78                 __psmallconst 1000                   ??___altoft 000D  
                    __pcinit 2DDE                   ??___ftpack 0006              Delay10TCYx@unit 00B9  
                    _lcdChar 2F46                      __ramtop 1000                   _initialize 3196  
                    _lcdGoTo 3236                      _lcdInit 2D36                      __ptext0 311A  
                    __ptext1 3196                      __ptext2 2D36                      __ptext3 313A  
                    __ptext4 2E2C                      __ptext5 315A                      __ptext6 308E  
                    __ptext7 2A5A                      __ptext8 3018                      __ptext9 2BD2  
                 ??___lwtoft 000C                    _T0CONbits 000FD5              __size_of_strcmp 0054  
               __size_of_ISR 29D6              __size_of_strtod 03D6                 __size_of_abs 0028  
                    _setGPIO 315A                      _isdigit 30F8              keyValue@str_end 004E  
                    _isspace 2FEC                      _prevErr 0078              setIODIR@address 00BC  
         __end_ofi2_SerTxStr 2D36                 setGPIO@value 00BB                 ??_Delay1TCYx 00B9  
             __pintcode_body 2960         end_of_initialization 2E26                   ??_keyValue 004C  
                 ??_setIODIR 00BC                      int_func 2960            OpenSPI1@smp_phase 00BA  
                 lcdGoTo@pos 0006        ReadRTDpos@LowPosition 0008                      postdec2 000FDD  
                ?_lcdCommand 0001                   _motorInput 007B                    _RTD2Angle 2F84  
                    postinc0 000FEE                      postinc2 000FDE        LCDBreakDouble@tempDub 0045  
          OpenSPI1@sync_mode 00BB                      strcmp@r 0006           __end_of_Delay1TCYx 3228  
                    strtod@s 003C                    _PORTAbits 000F80                    _PORTEbits 000F84  
                  _PORTJbits 000F88                    _TRISAbits 000F92                    _TRISBbits 000F93  
                  _TRISCbits 000F94                    _TRISEbits 000F96                    _TRISFbits 000F97  
                  _TRISGbits 000F98                    _TRISJbits 000F9A         __size_ofi2_WriteSPI1 0022  
    __end_of_MotorDriverInit 3196                  ___ftdiv@exp 0016                  _CCP3CONbits 000FB7  
                  i2_setGPIO 31B0                 ??_ReadRTDpos 0004                  ___ftmul@exp 0021  
                _StrippedKey 005E                   ?_RTD2Angle 0027               __end_of___ftge 2960  
             __end_of___lmul 2C86         __size_of_Delay10TCYx 0016                __pidataCOMRAM 3245  
 __end_of_ImplementPIDMotion 2BD2                  ?_initialize 0001         __size_of_Delay1KTCYx 0016  
             __end_of_strcmp 2DDE                lcdChar@letter 0005               __end_of_strtod 20E6  
        start_initialization 2DDE              _CurrentVelocity 0063                 _CurrentAngle 0060  
                __end_of_ISR 29DE                  __end_of_abs 3068           __end_of_ReadRTDpos 2CDE  
           i2setGPIO@address 0004          __size_of_lcdCommand 004C       __size_ofi2_Delay10TCYx 0012  
    __size_of_LCDBreakDouble 0160                   ?i2_setGPIO 0003         calculatePID@setpoint 0045  
     ReadRTDpos@HighPosition 0007            __size_of_OpenSPI1 0060                     ??___ftge 0039  
                   ??___lmul 0009            __size_of_SerTxStr 005A                  __pdataBANK0 00BE  
                   ??_strcmp 0005                     ??_strtod 0040            __size_of___altoft 007C  
          __size_of___ftpack 00C6                  __pbssCOMRAM 0057            __size_of___lwtoft 0026  
              __pcstackBANK0 00AB                     ?_PIDInit 0001                    _WriteSPI1 308E  
                   ?_TMR0Int 0001           calculatePID@derErr 0048                 _isdigit$2268 0002  
                   ?_RTDInit 0001                     ?i2_SerTx 0001              Delay1KTCYx@unit 00B9  
             i2setGPIO@value 0003             ?_MotorDriverInit 0001          __size_of_initialize 001A  
          __size_of_keyValue 0558            WriteSPI1@data_out 00BA            __size_of_setIODIR 0020  
                   ?_SerInit 0001           i2WriteSPI1@TempVar 0001             ___lwdiv@dividend 0001  
                  __pintcode 0008                  ??_RTD2Angle 002A                ?i2_lcdCommand 0001  
                   ?___ftadd 0027                     ?___ftdiv 0009                     ?___ftneg 0001  
                   ?___ftmul 0018                     ?___fttol 0033                     ?___lwdiv 0001  
                   ?___lwmod 0001                i2_Delay10TCYx 31F6           LCDBreakDouble@dubs 0042  
                   ?_lcdChar 0001                     ?_lcdGoTo 0001                     ?_lcdInit 0001  
                __smallconst 1000                     ?_setGPIO 00BB                     ?_isdigit 0001  
             __size_of_RCInt 013A                     ?_isspace 0001                   ?_WriteSPI1 0001  
             __size_of_SerTx 0010             ___lwdiv@quotient 0005                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D                  ??i2_setGPIO 0004          i2lcdCommand@command 0005  
                   i2u306_40 2678                     i2u306_45 2670                     i2u318_40 2D02  
                   i2u318_47 2CF8                     i2u319_40 2D2E                     i2u343_40 2B8C  
                   i2u319_47 2D24                     i2u407_47 31FA                     _PIR1bits 000F9E  
             setGPIO@address 00BC               ??i2_lcdCommand 0005                     _RCONbits 000FD0  
               ??_lcdCommand 00BD                     _SSP1CON1 000FC6               ?i2_Delay10TCYx 0001  
                strtod@flags 0042                     _SSP1STAT 000FC7                  strtod@expon 0043  
                   i2SerTx@c 0001                ?_calculatePID 0042                 _isspace$2271 0002  
           __size_of_PIDInit 003E            ___lmul@multiplier 0001             __size_of_TMR0Int 0060  
           __size_of_RTDInit 0030             __size_ofi2_SerTx 000E           __end_of_lcdCommand 2E78  
             _LCDBreakDouble 22AA                    keyValue@x 0052                    keyValue@y 0051  
                   _SetAngle 006F                     _OpenSPI1 2A5A       ReadRTDpos@FullPosition 0009  
                   _SerTxStr 2BD2                     __Hrparam 0000                     __Lrparam 0000  
           __size_of_SerInit 0028             __size_of___ftadd 01C4             __size_of___ftdiv 00E2  
           __size_of___ftneg 0024                     ___altoft 29DE             __size_of___ftmul 00F8  
           __size_of___fttol 00E6             __size_of___lwdiv 005C             __size_of___lwmod 004C  
               ??_initialize 00BE                     ___ftpack 2804            calculatePID@angle 0042  
           __size_of_lcdChar 003E               ??_calculatePID 0048                     ___lwtoft 3068  
           __size_of_lcdGoTo 000C             __size_of_lcdInit 0054             __size_of_setGPIO 0020  
           __size_of_isdigit 0022                ??i2_WriteSPI1 0001                  ??_WriteSPI1 00B9  
            ___lwdiv@divisor 0003             __size_of_isspace 002C              ___lwdiv@counter 0007  
               RCInt@counter 0054                     __ptext10 3208                     __ptext11 2FBC  
                   __ptext20 20E6                     __ptext12 3218                     __ptext21 2C86  
                   __ptext13 31CA                     __ptext30 31F6                     __ptext22 2F84  
                   __ptext14 31E0                     __ptext31 2E78                     __ptext23 3068  
                   __ptext15 2F08                     __ptext40 1D10                     __ptext32 2B1A  
                   __ptext24 22AA                     __ptext16 317A                     __ptext41 2FEC  
                   __ptext33 263C                     __ptext25 3236                     __ptext50 2D8A  
                   __ptext42 30F8                     __ptext34 2B76                     __ptext26 2EC4  
                   __ptext18 2ABA                     __ptext43 2C2C                     __ptext35 3040  
                   __ptext27 2F46                     __ptext19 1072                     __ptext44 30B2  
                   __ptext36 240A                     __ptext28 31B0                     __ptext45 2544  
                   __ptext37 17B8                     __ptext29 30D6                     __ptext46 28CA  
                   __ptext38 2CDE                     __ptext47 2722                     __ptext39 3228  
                   __ptext48 29DE                     __ptext49 2804                 _SSP1CON1bits 000FC6  
     __end_of_LCDBreakDouble 240A           _ImplementPIDMotion 2B76                     _keyValue 17B8  
                   _setIODIR 313A                __size_of_main 0020               Delay1TCYx@unit 00B9  
                   _received 007E          ?_ImplementPIDMotion 0005           __end_of_initialize 31B0  
                   _loopTime 00BE              ??i2_Delay10TCYx 0001                ??_Delay10TCYx 00B9  
                 strtod@eexp 0041                ??_Delay1KTCYx 00B9                 _SSP1STATbits 000FC7  
       ??_ImplementPIDMotion 0007                   _INTCONbits 000FF2                     isdigit@c 0003  
       __end_ofi2_lcdCommand 2F08              ?_LCDBreakDouble 0042                     intlevel2 0000  
        __end_ofi2_WriteSPI1 30F8             ___lwmod@dividend 0001                     isspace@c 0003  
                  strtod@res 003E          __end_of_Delay10TCYx 31F6                     strcmp@s1 0001  
                   strcmp@s2 0003              ___lwmod@divisor 0003          __end_of_Delay1KTCYx 31E0  
            ___lwmod@counter 0005          TMR0Int@currentAngle 0054                     strtod@_u 0044  
       __end_of_calculatePID 17B8                   i2_SerTxStr 2CDE  
