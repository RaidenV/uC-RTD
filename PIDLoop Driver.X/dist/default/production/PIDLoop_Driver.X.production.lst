

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 14 02:47:55 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    63  0000                     
    64 ;; Function _ReadRTDpos is unused but had its address taken
    65  0000                     
    66                           	psect	idataCOMRAM
    67  003498                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _AZEL
    71  003498  01                 	db	1
    72                           
    73                           	psect	nvBANK0
    74  0000DD                     __pnvBANK0:
    75                           	opt stack 0
    76  0000DD                     _err:
    77                           	opt stack 0
    78  0000DD                     	ds	3
    79  0000E0                     _intErr:
    80                           	opt stack 0
    81  0000E0                     	ds	3
    82  0000E3                     _prevErr:
    83                           	opt stack 0
    84  0000E3                     	ds	3
    85  0000                     _BAUDCON	set	3966
    86  0000                     _CCP3CON	set	4023
    87  0000                     _CCP3CONbits	set	4023
    88  0000                     _CCPR3L	set	4024
    89  0000                     _INTCON2bits	set	4081
    90  0000                     _INTCONbits	set	4082
    91  0000                     _IPR1bits	set	3999
    92  0000                     _PIE1bits	set	3997
    93  0000                     _PIR1bits	set	3998
    94  0000                     _PORTAbits	set	3968
    95  0000                     _PORTD	set	3971
    96  0000                     _PORTEbits	set	3972
    97  0000                     _PORTH	set	3975
    98  0000                     _PORTJbits	set	3976
    99  0000                     _PR2	set	4043
   100  0000                     _RCONbits	set	4048
   101  0000                     _RCREG	set	4014
   102  0000                     _RCREG1	set	4014
   103  0000                     _RCSTA1	set	4011
   104  0000                     _SPBRG	set	4015
   105  0000                     _SSP1BUF	set	4041
   106  0000                     _SSP1CON1	set	4038
   107  0000                     _SSP1CON1bits	set	4038
   108  0000                     _T0CON	set	4053
   109  0000                     _T2CON	set	4042
   110  0000                     _T3CON	set	4017
   111  0000                     _TMR0H	set	4055
   112  0000                     _TMR0L	set	4054
   113  0000                     _TRISAbits	set	3986
   114  0000                     _TRISBbits	set	3987
   115  0000                     _TRISD	set	3989
   116  0000                     _TRISEbits	set	3990
   117  0000                     _TRISGbits	set	3992
   118  0000                     _TRISH	set	3993
   119  0000                     _TRISJbits	set	3994
   120  0000                     _TXREG1	set	4013
   121  0000                     _TXSTA1	set	4012
   122                           
   123                           	psect	smallconst
   124  001000                     __psmallconst:
   125                           	opt stack 0
   126  001000  00                 	db	0
   127  001001                     STR_30:
   128  001001  57                 	db	87	;'W'
   129  001002  65                 	db	101	;'e'
   130  001003  6C                 	db	108	;'l'
   131  001004  63                 	db	99	;'c'
   132  001005  6F                 	db	111	;'o'
   133  001006  6D                 	db	109	;'m'
   134  001007  65                 	db	101	;'e'
   135  001008  20                 	db	32
   136  001009  74                 	db	116	;'t'
   137  00100A  6F                 	db	111	;'o'
   138  00100B  20                 	db	32
   139  00100C  74                 	db	116	;'t'
   140  00100D  68                 	db	104	;'h'
   141  00100E  65                 	db	101	;'e'
   142  00100F  20                 	db	32
   143  001010  77                 	db	119	;'w'
   144  001011  6F                 	db	111	;'o'
   145  001012  72                 	db	114	;'r'
   146  001013  6C                 	db	108	;'l'
   147  001014  64                 	db	100	;'d'
   148  001015  20                 	db	32
   149  001016  6F                 	db	111	;'o'
   150  001017  66                 	db	102	;'f'
   151  001018  20                 	db	32
   152  001019  74                 	db	116	;'t'
   153  00101A  6F                 	db	111	;'o'
   154  00101B  6D                 	db	109	;'m'
   155  00101C  6F                 	db	111	;'o'
   156  00101D  72                 	db	114	;'r'
   157  00101E  72                 	db	114	;'r'
   158  00101F  6F                 	db	111	;'o'
   159  001020  77                 	db	119	;'w'
   160  001021  21                 	db	33
   161  001022  21                 	db	33
   162  001023  21                 	db	33
   163  001024  00                 	db	0
   164  001025                     STR_4:
   165  001025  20                 	db	32
   166  001026  20                 	db	32
   167  001027  20                 	db	32
   168  001028  56                 	db	86	;'V'
   169  001029  61                 	db	97	;'a'
   170  00102A  6C                 	db	108	;'l'
   171  00102B  75                 	db	117	;'u'
   172  00102C  65                 	db	101	;'e'
   173  00102D  3A                 	db	58	;':'
   174  00102E  20                 	db	32
   175  00102F  00                 	db	0
   176  001030  38                 	db	56	;'8'
   177  001031  36                 	db	54	;'6'
   178  001032  38                 	db	56	;'8'
   179  001033  30                 	db	48	;'0'
   180  001034  3A                 	db	58	;':'
   181  001035  20                 	db	32
   182  001036  00                 	db	0
   183  001037  38                 	db	56	;'8'
   184  001038  37                 	db	55	;'7'
   185  001039  32                 	db	50	;'2'
   186  00103A  32                 	db	50	;'2'
   187  00103B  3A                 	db	58	;':'
   188  00103C  20                 	db	32
   189  00103D  00                 	db	0
   190  00103E                     STR_3:
   191  00103E  4B                 	db	75	;'K'
   192  00103F  65                 	db	101	;'e'
   193  001040  79                 	db	121	;'y'
   194  001041  3A                 	db	58	;':'
   195  001042  20                 	db	32
   196  001043  00                 	db	0
   197  001044                     STR_13:
   198  001044  3F                 	db	63	;'?'
   199  001045  3F                 	db	63	;'?'
   200  001046  3F                 	db	63	;'?'
   201  001047  00                 	db	0
   202  001048                     STR_21:
   203  001048  56                 	db	86	;'V'
   204  001049  45                 	db	69	;'E'
   205  00104A  4C                 	db	76	;'L'
   206  00104B  00                 	db	0
   207  00104C                     STR_5:
   208  00104C  50                 	db	80	;'P'
   209  00104D  4F                 	db	79	;'O'
   210  00104E  53                 	db	83	;'S'
   211  00104F  00                 	db	0
   212  001050                     STR_22:
   213  001050  76                 	db	118	;'v'
   214  001051  65                 	db	101	;'e'
   215  001052  6C                 	db	108	;'l'
   216  001053  00                 	db	0
   217  001054                     STR_6:
   218  001054  70                 	db	112	;'p'
   219  001055  6F                 	db	111	;'o'
   220  001056  73                 	db	115	;'s'
   221  001057  00                 	db	0
   222  001058                     STR_11:
   223  001058  4B                 	db	75	;'K'
   224  001059  44                 	db	68	;'D'
   225  00105A  00                 	db	0
   226  00105B                     STR_9:
   227  00105B  4B                 	db	75	;'K'
   228  00105C  49                 	db	73	;'I'
   229  00105D  00                 	db	0
   230  00105E                     STR_7:
   231  00105E  4B                 	db	75	;'K'
   232  00105F  50                 	db	80	;'P'
   233  001060  00                 	db	0
   234  001061                     STR_15:
   235  001061  41                 	db	65	;'A'
   236  001062  5A                 	db	90	;'Z'
   237  001063  00                 	db	0
   238  001064                     STR_12:
   239  001064  6B                 	db	107	;'k'
   240  001065  64                 	db	100	;'d'
   241  001066  00                 	db	0
   242  001067                     STR_10:
   243  001067  6B                 	db	107	;'k'
   244  001068  69                 	db	105	;'i'
   245  001069  00                 	db	0
   246  00106A                     STR_8:
   247  00106A  6B                 	db	107	;'k'
   248  00106B  70                 	db	112	;'p'
   249  00106C  00                 	db	0
   250  00106D                     STR_16:
   251  00106D  61                 	db	97	;'a'
   252  00106E  7A                 	db	122	;'z'
   253  00106F  00                 	db	0
   254  0000                     
   255                           ; #config settings
   256  001070  00                 	db	0	; dummy byte at the end
   257  0000                     
   258                           	psect	cinit
   259  00326A                     __pcinit:
   260                           	opt stack 0
   261  00326A                     start_initialization:
   262                           	opt stack 0
   263  00326A                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Clear objects allocated to BANK0 (64 bytes)
   267  00326A  EE00  F060         	lfsr	0,__pbssBANK0
   268  00326E  0E40               	movlw	64
   269  003270                     clear_0:
   270  003270  6AEE               	clrf	postinc0,c
   271  003272  06E8               	decf	wreg,f,c
   272  003274  E1FD               	bnz	clear_0
   273                           
   274                           ; Clear objects allocated to COMRAM (10 bytes)
   275  003276  EE00  F055         	lfsr	0,__pbssCOMRAM
   276  00327A  0E0A               	movlw	10
   277  00327C                     clear_1:
   278  00327C  6AEE               	clrf	postinc0,c
   279  00327E  06E8               	decf	wreg,f,c
   280  003280  E1FD               	bnz	clear_1
   281                           
   282                           ; Initialize objects allocated to COMRAM (1 bytes)
   283                           ; load TBLPTR registers with __pidataCOMRAM
   284  003282  0E98               	movlw	low __pidataCOMRAM
   285  003284  6EF6               	movwf	tblptrl,c
   286  003286  0E34               	movlw	high __pidataCOMRAM
   287  003288  6EF7               	movwf	tblptrh,c
   288  00328A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   289  00328C  6EF8               	movwf	tblptru,c
   290  00328E  0009               	tblrd		*+	;fetch initializer
   291  003290  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   292  003294                     end_of_initialization:
   293                           	opt stack 0
   294  003294                     __end_of__initialization:
   295                           	opt stack 0
   296  003294  0E00               	movlw	low (__Lmediumconst shr (0+16))
   297  003296  6EF8               	movwf	tblptru,c
   298  003298  0100               	movlb	0
   299  00329A  EFFD  F018         	goto	_main	;jump to C main() function
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           
   307                           	psect	bssCOMRAM
   308  000055                     __pbssCOMRAM:
   309                           	opt stack 0
   310  000055                     _StartAngle:
   311                           	opt stack 0
   312  000055                     	ds	3
   313  000058                     _PIDEnableFlag:
   314                           	opt stack 0
   315  000058                     	ds	1
   316  000059                     _StrippedKey:
   317                           	opt stack 0
   318  000059                     	ds	1
   319  00005A                     _key:
   320                           	opt stack 0
   321  00005A                     	ds	5
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	dataCOMRAM
   330  00005F                     __pdataCOMRAM:
   331                           	opt stack 0
   332  00005F                     _AZEL:
   333                           	opt stack 0
   334  00005F                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	bssBANK0
   343  000060                     __pbssBANK0:
   344                           	opt stack 0
   345  000060                     _CurrentAngle:
   346                           	opt stack 0
   347  000060                     	ds	3
   348  000063                     _CurrentVelocity:
   349                           	opt stack 0
   350  000063                     	ds	3
   351  000066                     _Kd:
   352                           	opt stack 0
   353  000066                     	ds	3
   354  000069                     _Ki:
   355                           	opt stack 0
   356  000069                     	ds	3
   357  00006C                     _Kp:
   358                           	opt stack 0
   359  00006C                     	ds	3
   360  00006F                     _SetAngle:
   361                           	opt stack 0
   362  00006F                     	ds	3
   363  000072                     _StrippedValue:
   364                           	opt stack 0
   365  000072                     	ds	3
   366  000075                     _motorInput:
   367                           	opt stack 0
   368  000075                     	ds	2
   369  000077                     _RCflag:
   370                           	opt stack 0
   371  000077                     	ds	1
   372  000078                     _received:
   373                           	opt stack 0
   374  000078                     	ds	30
   375  000096                     _value:
   376                           	opt stack 0
   377  000096                     	ds	10
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           postinc0	equ	0xFEE
   383                           wreg	equ	0xFE8
   384                           
   385                           	psect	cstackBANK0
   386  0000A0                     __pcstackBANK0:
   387                           	opt stack 0
   388  0000A0                     ??_ISR:
   389                           
   390                           ; 0 bytes @ 0x0
   391  0000A0                     	ds	14
   392  0000AE                     ?___lwdiv:
   393                           	opt stack 0
   394  0000AE                     ?___lwmod:
   395                           	opt stack 0
   396  0000AE                     ?___ftpack:
   397                           	opt stack 0
   398  0000AE                     SerTx@c:
   399                           	opt stack 0
   400  0000AE                     WriteSPI1@TempVar:
   401                           	opt stack 0
   402  0000AE                     Delay10TCYx@unit:
   403                           	opt stack 0
   404  0000AE                     Delay1KTCYx@unit:
   405                           	opt stack 0
   406  0000AE                     Delay1TCYx@unit:
   407                           	opt stack 0
   408  0000AE                     ___lwdiv@dividend:
   409                           	opt stack 0
   410  0000AE                     ___lwmod@dividend:
   411                           	opt stack 0
   412  0000AE                     ___ftpack@arg:
   413                           	opt stack 0
   414                           
   415                           ; 3 bytes @ 0xE
   416  0000AE                     	ds	1
   417  0000AF                     WriteSPI1@data_out:
   418                           	opt stack 0
   419  0000AF                     SerTxStr@string:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0xF
   423  0000AF                     	ds	1
   424  0000B0                     setGPIO@value:
   425                           	opt stack 0
   426  0000B0                     ___lwdiv@divisor:
   427                           	opt stack 0
   428  0000B0                     ___lwmod@divisor:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x10
   432  0000B0                     	ds	1
   433  0000B1                     setGPIO@address:
   434                           	opt stack 0
   435  0000B1                     ___ftpack@exp:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x11
   439  0000B1                     	ds	1
   440  0000B2                     lcdCommand@command:
   441                           	opt stack 0
   442  0000B2                     lcdChar@letter:
   443                           	opt stack 0
   444  0000B2                     ___ftpack@sign:
   445                           	opt stack 0
   446  0000B2                     ___lwmod@counter:
   447                           	opt stack 0
   448  0000B2                     ___lwdiv@quotient:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x12
   452  0000B2                     	ds	1
   453  0000B3                     ??___ftpack:
   454  0000B3                     lcdGoTo@pos:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x13
   458  0000B3                     	ds	1
   459  0000B4                     ___lwdiv@counter:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x14
   463  0000B4                     	ds	2
   464  0000B6                     ?___ftmul:
   465                           	opt stack 0
   466  0000B6                     ___ftmul@f1:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x16
   470  0000B6                     	ds	3
   471  0000B9                     ___ftmul@f2:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x19
   475  0000B9                     	ds	3
   476  0000BC                     ??___ftmul:
   477                           
   478                           ; 0 bytes @ 0x1C
   479  0000BC                     	ds	3
   480  0000BF                     ___ftmul@exp:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x1F
   484  0000BF                     	ds	1
   485  0000C0                     ___ftmul@f3_as_product:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x20
   489  0000C0                     	ds	3
   490  0000C3                     ___ftmul@cntr:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x23
   494  0000C3                     	ds	1
   495  0000C4                     ___ftmul@sign:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x24
   499  0000C4                     	ds	1
   500  0000C5                     ?___fttol:
   501                           	opt stack 0
   502  0000C5                     ___fttol@f1:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0x25
   506  0000C5                     	ds	4
   507  0000C9                     ??___fttol:
   508                           
   509                           ; 0 bytes @ 0x29
   510  0000C9                     	ds	5
   511  0000CE                     ___fttol@sign1:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x2E
   515  0000CE                     	ds	1
   516  0000CF                     ___fttol@lval:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x2F
   520  0000CF                     	ds	4
   521  0000D3                     ___fttol@exp1:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x33
   525  0000D3                     	ds	1
   526  0000D4                     LCDBreakDouble@dubs:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x34
   530  0000D4                     	ds	3
   531  0000D7                     LCDBreakDouble@tempDub:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x37
   535  0000D7                     	ds	2
   536  0000D9                     LCDBreakDouble@temp1:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x39
   540  0000D9                     	ds	2
   541  0000DB                     LCDBreakDouble@temp2:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x3B
   545  0000DB                     	ds	2
   546  0000DD                     tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           
   553                           ; 0 bytes @ 0x3D
   554                           
   555                           	psect	cstackCOMRAM
   556  000001                     __pcstackCOMRAM:
   557                           	opt stack 0
   558  000001                     ??_isspace:
   559  000001                     ??_isdigit:
   560  000001                     ?_abs:
   561                           	opt stack 0
   562  000001                     ?_strcmp:
   563                           	opt stack 0
   564  000001                     ?___ftneg:
   565                           	opt stack 0
   566  000001                     ?i2___ftpack:
   567                           	opt stack 0
   568  000001                     ?___lmul:
   569                           	opt stack 0
   570  000001                     i2SerTx@c:
   571                           	opt stack 0
   572  000001                     abs@a:
   573                           	opt stack 0
   574  000001                     strcmp@s1:
   575                           	opt stack 0
   576  000001                     ___ftneg@f1:
   577                           	opt stack 0
   578  000001                     i2___ftpack@arg:
   579                           	opt stack 0
   580  000001                     ___lmul@multiplier:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x0
   584  000001                     	ds	1
   585  000002                     _isdigit$2323:
   586                           	opt stack 0
   587  000002                     _isspace$2326:
   588                           	opt stack 0
   589  000002                     i2SerTxStr@string:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x1
   593  000002                     	ds	1
   594  000003                     ??_abs:
   595  000003                     isdigit@c:
   596                           	opt stack 0
   597  000003                     isspace@c:
   598                           	opt stack 0
   599  000003                     strcmp@s2:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x2
   603  000003                     	ds	1
   604  000004                     i2___ftpack@exp:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x3
   608  000004                     	ds	1
   609  000005                     ??_strcmp:
   610  000005                     i2___ftpack@sign:
   611                           	opt stack 0
   612  000005                     ImplementPIDMotion@PIDValue:
   613                           	opt stack 0
   614  000005                     ___lmul@multiplicand:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x4
   618  000005                     	ds	1
   619  000006                     ??i2___ftpack:
   620  000006                     strcmp@r:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x5
   624  000006                     	ds	1
   625  000007                     ??_ImplementPIDMotion:
   626                           
   627                           ; 0 bytes @ 0x6
   628  000007                     	ds	2
   629  000009                     ?___ftdiv:
   630                           	opt stack 0
   631  000009                     ?___altoft:
   632                           	opt stack 0
   633  000009                     ?___lwtoft:
   634                           	opt stack 0
   635  000009                     ___lwtoft@c:
   636                           	opt stack 0
   637  000009                     ___ftdiv@f1:
   638                           	opt stack 0
   639  000009                     ___lmul@product:
   640                           	opt stack 0
   641  000009                     ___altoft@c:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x8
   645  000009                     	ds	3
   646  00000C                     ___ftdiv@f2:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0xB
   650  00000C                     	ds	1
   651  00000D                     ??___altoft:
   652                           
   653                           ; 0 bytes @ 0xC
   654  00000D                     	ds	2
   655  00000F                     ??___ftdiv:
   656                           
   657                           ; 0 bytes @ 0xE
   658  00000F                     	ds	2
   659  000011                     ___altoft@exp:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x10
   663  000011                     	ds	1
   664  000012                     ___altoft@sign:
   665                           	opt stack 0
   666  000012                     ___ftdiv@cntr:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x11
   670  000012                     	ds	1
   671  000013                     ___ftdiv@f3:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x12
   675  000013                     	ds	3
   676  000016                     ___ftdiv@exp:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x15
   680  000016                     	ds	1
   681  000017                     ___ftdiv@sign:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x16
   685  000017                     	ds	1
   686  000018                     ?i2___ftmul:
   687                           	opt stack 0
   688  000018                     i2___ftmul@f1:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x17
   692  000018                     	ds	3
   693  00001B                     i2___ftmul@f2:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x1A
   697  00001B                     	ds	3
   698  00001E                     ??i2___ftmul:
   699                           
   700                           ; 0 bytes @ 0x1D
   701  00001E                     	ds	3
   702  000021                     i2___ftmul@exp:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x20
   706  000021                     	ds	1
   707  000022                     i2___ftmul@f3_as_product:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x21
   711  000022                     	ds	3
   712  000025                     i2___ftmul@cntr:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x24
   716  000025                     	ds	1
   717  000026                     i2___ftmul@sign:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x25
   721  000026                     	ds	1
   722  000027                     ?_RTD2Angle:
   723                           	opt stack 0
   724  000027                     ?___ftadd:
   725                           	opt stack 0
   726  000027                     RTD2Angle@RTDAngle:
   727                           	opt stack 0
   728  000027                     ___ftadd@f1:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x26
   732  000027                     	ds	3
   733  00002A                     ___ftadd@f2:
   734                           	opt stack 0
   735                           
   736                           ; 3 bytes @ 0x29
   737  00002A                     	ds	3
   738  00002D                     ??___ftadd:
   739                           
   740                           ; 0 bytes @ 0x2C
   741  00002D                     	ds	3
   742  000030                     ___ftadd@sign:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x2F
   746  000030                     	ds	1
   747  000031                     ___ftadd@exp2:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x30
   751  000031                     	ds	1
   752  000032                     ___ftadd@exp1:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x31
   756  000032                     	ds	1
   757  000033                     ?i2___fttol:
   758                           	opt stack 0
   759  000033                     ___ftge@ff1:
   760                           	opt stack 0
   761  000033                     i2___fttol@f1:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x32
   765  000033                     	ds	3
   766  000036                     ___ftge@ff2:
   767                           	opt stack 0
   768                           
   769                           ; 3 bytes @ 0x35
   770  000036                     	ds	1
   771  000037                     ??i2___fttol:
   772                           
   773                           ; 0 bytes @ 0x36
   774  000037                     	ds	2
   775  000039                     ??___ftge:
   776                           
   777                           ; 0 bytes @ 0x38
   778  000039                     	ds	3
   779  00003C                     ?_strtod:
   780                           	opt stack 0
   781  00003C                     i2___fttol@sign1:
   782                           	opt stack 0
   783  00003C                     strtod@s:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x3B
   787  00003C                     	ds	1
   788  00003D                     i2___fttol@lval:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x3C
   792  00003D                     	ds	1
   793  00003E                     strtod@res:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x3D
   797  00003E                     	ds	2
   798  000040                     ??_strtod:
   799                           
   800                           ; 0 bytes @ 0x3F
   801  000040                     	ds	1
   802  000041                     strtod@eexp:
   803                           	opt stack 0
   804  000041                     i2___fttol@exp1:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x40
   808  000041                     	ds	1
   809  000042                     strtod@flags:
   810                           	opt stack 0
   811  000042                     calculatePID@angle:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x41
   815  000042                     	ds	1
   816  000043                     strtod@expon:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x42
   820  000043                     	ds	1
   821  000044                     strtod@_u:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x43
   825  000044                     	ds	1
   826  000045                     calculatePID@setpoint:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x44
   830  000045                     	ds	3
   831  000048                     keyValue@str:
   832                           	opt stack 0
   833  000048                     calculatePID@derErr:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x47
   837  000048                     	ds	2
   838  00004A                     keyValue@length:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x49
   842  00004A                     	ds	1
   843  00004B                     _calculatePID$2605:
   844                           	opt stack 0
   845                           
   846                           ; 3 bytes @ 0x4A
   847  00004B                     	ds	1
   848  00004C                     ??_keyValue:
   849                           
   850                           ; 0 bytes @ 0x4B
   851  00004C                     	ds	2
   852  00004E                     keyValue@str_end:
   853                           	opt stack 0
   854  00004E                     _calculatePID$2641:
   855                           	opt stack 0
   856                           
   857                           ; 3 bytes @ 0x4D
   858  00004E                     	ds	2
   859  000050                     keyValue@flag:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x4F
   863  000050                     	ds	1
   864  000051                     keyValue@y:
   865                           	opt stack 0
   866  000051                     _calculatePID$2603:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x50
   870  000051                     	ds	1
   871  000052                     keyValue@x:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x51
   875  000052                     	ds	1
   876  000053                     
   877                           ; 0 bytes @ 0x52
   878  000053                     	ds	1
   879  000054                     RCInt@counter:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x53
   883  000054                     	ds	1
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           postinc0	equ	0xFEE
   889                           wreg	equ	0xFE8
   890                           
   891 ;;
   892 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   893 ;;
   894 ;; *************** function _main *****************
   895 ;; Defined at:
   896 ;;		line 16 in file "PIDLoop.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;		None               void
   903 ;; Registers used:
   904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels required when called:   11
   916 ;; This function calls:
   917 ;;		_LCDBreakDouble
   918 ;;		_initialize
   919 ;; This function is called by:
   920 ;;		Startup code after reset
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text0
   925  0031FA                     __ptext0:
   926                           	opt stack 0
   927  0031FA                     _main:
   928                           	opt stack 20
   929                           
   930                           ;PIDLoop.c: 18: initialize();
   931                           
   932                           ;incstack = 0
   933  0031FA  EC0B  F01A         	call	_initialize	;wreg free
   934  0031FE  D000               	goto	l3803
   935  003200                     l3803:
   936                           
   937                           ;PIDLoop.c: 21: {
   938                           ;PIDLoop.c: 22: if ((PIDEnableFlag & 0x02) == 0x02)
   939  003200  A258               	btfss	_PIDEnableFlag,1,c
   940  003202  D005               	goto	l190
   941                           
   942                           ;PIDLoop.c: 23: {
   943                           ;PIDLoop.c: 24: TMR0H = 0xDB;
   944  003204  0EDB               	movlw	219
   945  003206  6ED7               	movwf	4055,c	;volatile
   946                           
   947                           ;PIDLoop.c: 25: TMR0L = 0x60;
   948  003208  0E60               	movlw	96
   949  00320A  6ED6               	movwf	4054,c	;volatile
   950  00320C  D002               	goto	l3809
   951  00320E                     l190:
   952                           
   953                           ;PIDLoop.c: 28: else if((PIDEnableFlag & 0x01) == 0x01)
   954  00320E  A058               	btfss	_PIDEnableFlag,0,c
   955  003210  D002               	goto	l3811
   956  003212                     l3809:
   957                           
   958                           ;PIDLoop.c: 29: INTCONbits.TMR0IE = 1;
   959  003212  8AF2               	bsf	intcon,5,c	;volatile
   960  003214  D003               	goto	l3813
   961  003216                     l3811:
   962                           
   963                           ;PIDLoop.c: 30: else
   964                           ;PIDLoop.c: 31: PIDEnableFlag = 0;
   965  003216  0E00               	movlw	0
   966  003218  6E58               	movwf	_PIDEnableFlag,c
   967  00321A  D000               	goto	l3813
   968  00321C                     l3813:
   969                           
   970                           ;PIDLoop.c: 33: LCDBreakDouble(CurrentAngle);
   971  00321C  C060  F0D4         	movff	_CurrentAngle,LCDBreakDouble@dubs
   972  003220  C061  F0D5         	movff	_CurrentAngle+1,LCDBreakDouble@dubs+1
   973  003224  C062  F0D6         	movff	_CurrentAngle+2,LCDBreakDouble@dubs+2
   974  003228  EC57  F011         	call	_LCDBreakDouble	;wreg free
   975  00322C  D7E9               	goto	l3803
   976  00322E  EF0C  F000         	goto	start
   977  003232                     __end_of_main:
   978                           	opt stack 0
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           intcon	equ	0xFF2
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           
   987 ;; *************** function _initialize *****************
   988 ;; Defined at:
   989 ;;		line 37 in file "PIDLoop.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;		None               void
   996 ;; Registers used:
   997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1007 ;;Total ram usage:        0 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    9
  1010 ;; This function calls:
  1011 ;;		_MotorDriverInit
  1012 ;;		_PIDInit
  1013 ;;		_RTDInit
  1014 ;;		_SerInit
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text1
  1021  003416                     __ptext1:
  1022                           	opt stack 0
  1023  003416                     _initialize:
  1024                           	opt stack 21
  1025                           
  1026                           ;PIDLoop.c: 39: PIDInit();
  1027                           
  1028                           ;incstack = 0
  1029  003416  ECB7  F018         	call	_PIDInit	;wreg free
  1030                           
  1031                           ;PIDLoop.c: 40: MotorDriverInit();
  1032  00341A  ECFD  F019         	call	_MotorDriverInit	;wreg free
  1033                           
  1034                           ;PIDLoop.c: 41: RTDInit();
  1035  00341E  EC4F  F019         	call	_RTDInit	;wreg free
  1036                           
  1037                           ;PIDLoop.c: 42: SerInit();
  1038  003422  EC7D  F019         	call	_SerInit	;wreg free
  1039                           
  1040                           ;PIDLoop.c: 44: INTCONbits.GIE = 1;
  1041  003426  8EF2               	bsf	intcon,7,c	;volatile
  1042                           
  1043                           ;PIDLoop.c: 45: INTCONbits.PEIE = 1;
  1044  003428  8CF2               	bsf	intcon,6,c	;volatile
  1045                           
  1046                           ;PIDLoop.c: 46: RCONbits.IPEN = 1;
  1047  00342A  8ED0               	bsf	4048,7,c	;volatile
  1048  00342C  0012               	return		;funcret
  1049  00342E                     __end_of_initialize:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           intcon	equ	0xFF2
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           
  1059 ;; *************** function _SerInit *****************
  1060 ;; Defined at:
  1061 ;;		line 19 in file "SerComm.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;		None               void
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; Hardware stack levels required when called:    8
  1082 ;; This function calls:
  1083 ;;		_SerTxStr
  1084 ;; This function is called by:
  1085 ;;		_initialize
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text2
  1090  0032FA                     __ptext2:
  1091                           	opt stack 0
  1092  0032FA                     _SerInit:
  1093                           	opt stack 21
  1094                           
  1095                           ;SerComm.c: 26: TXSTA1 = 0x24;
  1096                           
  1097                           ;incstack = 0
  1098  0032FA  0E24               	movlw	36
  1099  0032FC  6EAC               	movwf	4012,c	;volatile
  1100                           
  1101                           ;SerComm.c: 27: RCSTA1 = 0x90;
  1102  0032FE  0E90               	movlw	144
  1103  003300  6EAB               	movwf	4011,c	;volatile
  1104                           
  1105                           ;SerComm.c: 28: BAUDCON = 0x00;
  1106  003302  0E00               	movlw	0
  1107  003304  6E7E               	movwf	3966,c	;volatile
  1108                           
  1109                           ;SerComm.c: 29: SPBRG = 21;
  1110  003306  0E15               	movlw	21
  1111  003308  6EAF               	movwf	4015,c	;volatile
  1112                           
  1113                           ;SerComm.c: 31: RCONbits.IPEN = 1;
  1114  00330A  8ED0               	bsf	4048,7,c	;volatile
  1115                           
  1116                           ;SerComm.c: 32: IPR1bits.RCIP = 0;
  1117  00330C  9A9F               	bcf	3999,5,c	;volatile
  1118                           
  1119                           ;SerComm.c: 33: PIE1bits.RC1IE = 1;
  1120  00330E  8A9D               	bsf	3997,5,c	;volatile
  1121                           
  1122                           ;SerComm.c: 35: SerTxStr("Welcome to the world of tomorrow!!!");
  1123  003310  0E01               	movlw	low STR_30
  1124  003312  0100               	movlb	0	; () banked
  1125  003314  6FAF               	movwf	SerTxStr@string& (0+255),b
  1126  003316  0E10               	movlw	high STR_30
  1127  003318  0100               	movlb	0	; () banked
  1128  00331A  6FB0               	movwf	(SerTxStr@string+1)& (0+255),b
  1129  00331C  ECBD  F017         	call	_SerTxStr	;wreg free
  1130  003320  0012               	return		;funcret
  1131  003322                     __end_of_SerInit:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           intcon	equ	0xFF2
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           
  1141 ;; *************** function _SerTxStr *****************
  1142 ;; Defined at:
  1143 ;;		line 50 in file "SerComm.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  string          2   15[BANK0 ] PTR unsigned char 
  1146 ;;		 -> STR_30(36), STR_29(4), STR_14(6), STR_13(4), 
  1147 ;;		 -> STR_4(11), value(10), STR_3(6), key(5), 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;		None
  1150 ;; Return value:  Size  Location     Type
  1151 ;;		None               void
  1152 ;; Registers used:
  1153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1159 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;Total ram usage:        2 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    7
  1166 ;; This function calls:
  1167 ;;		_SerTx
  1168 ;; This function is called by:
  1169 ;;		_SerInit
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text3
  1174  002F7A                     __ptext3:
  1175                           	opt stack 0
  1176  002F7A                     _SerTxStr:
  1177                           	opt stack 21
  1178                           
  1179                           ;SerComm.c: 52: while (*string)
  1180                           
  1181                           ;incstack = 0
  1182  002F7A  D017               	goto	l2823
  1183  002F7C                     l2819:
  1184                           
  1185                           ;SerComm.c: 53: SerTx(*string++);
  1186  002F7C  C0AF  FFF6         	movff	SerTxStr@string,tblptrl
  1187  002F80  C0B0  FFF7         	movff	SerTxStr@string+1,tblptrh
  1188  002F84  0E00               	movlw	low (__smallconst shr (0+16))
  1189  002F86  6EF8               	movwf	tblptru,c
  1190  002F88  0E0F               	movlw	(high __ramtop+-1)
  1191  002F8A  64F7               	cpfsgt	tblptrh,c
  1192  002F8C  D003               	bra	u2647
  1193  002F8E  0008               	tblrd		*
  1194  002F90  50F5               	movf	tablat,w,c
  1195  002F92  D005               	bra	u2640
  1196  002F94                     u2647:
  1197  002F94  CFF6 FFE9          	movff	tblptrl,fsr0l
  1198  002F98  CFF7 FFEA          	movff	tblptrh,fsr0h
  1199  002F9C  50EF               	movf	indf0,w,c
  1200  002F9E                     u2640:
  1201  002F9E  EC2D  F01A         	call	_SerTx
  1202  002FA2  0100               	movlb	0	; () banked
  1203  002FA4  4BAF               	infsnz	SerTxStr@string& (0+255),f,b
  1204  002FA6  2BB0               	incf	(SerTxStr@string+1)& (0+255),f,b
  1205  002FA8  D000               	goto	l2823
  1206  002FAA                     l2823:
  1207  002FAA  C0AF  FFF6         	movff	SerTxStr@string,tblptrl
  1208  002FAE  C0B0  FFF7         	movff	SerTxStr@string+1,tblptrh
  1209  002FB2  0E00               	movlw	low (__smallconst shr (0+16))
  1210  002FB4  6EF8               	movwf	tblptru,c
  1211  002FB6  0E0F               	movlw	(high __ramtop+-1)
  1212  002FB8  64F7               	cpfsgt	tblptrh,c
  1213  002FBA  D003               	bra	u2657
  1214  002FBC  0008               	tblrd		*
  1215  002FBE  50F5               	movf	tablat,w,c
  1216  002FC0  D005               	bra	u2650
  1217  002FC2                     u2657:
  1218  002FC2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1219  002FC6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1220  002FCA  50EF               	movf	indf0,w,c
  1221  002FCC                     u2650:
  1222  002FCC  0900               	iorlw	0
  1223  002FCE  A4D8               	btfss	status,2,c
  1224  002FD0  D7D5               	goto	l2819
  1225  002FD2  0012               	return		;funcret
  1226  002FD4                     __end_of_SerTxStr:
  1227                           	opt stack 0
  1228                           tblptru	equ	0xFF8
  1229                           tblptrh	equ	0xFF7
  1230                           tblptrl	equ	0xFF6
  1231                           tablat	equ	0xFF5
  1232                           intcon	equ	0xFF2
  1233                           indf0	equ	0xFEF
  1234                           postinc0	equ	0xFEE
  1235                           fsr0h	equ	0xFEA
  1236                           fsr0l	equ	0xFE9
  1237                           wreg	equ	0xFE8
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _SerTx *****************
  1241 ;; Defined at:
  1242 ;;		line 41 in file "SerComm.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  c               1    wreg     unsigned char 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  c               1   14[BANK0 ] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;		None               void
  1249 ;; Registers used:
  1250 ;;		wreg
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;Total ram usage:        1 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    6
  1263 ;; This function calls:
  1264 ;;		Nothing
  1265 ;; This function is called by:
  1266 ;;		_SerTxStr
  1267 ;;		_breakDouble
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text4
  1272  00345A                     __ptext4:
  1273                           	opt stack 0
  1274  00345A                     _SerTx:
  1275                           	opt stack 21
  1276                           
  1277                           ;incstack = 0
  1278                           ;SerTx@c stored from wreg
  1279  00345A  0100               	movlb	0	; () banked
  1280  00345C  6FAE               	movwf	SerTx@c& (0+255),b
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;SerComm.c: 43: TXREG1 = c;
  1284  00345E  C0AE  FFAD         	movff	SerTx@c,4013	;volatile
  1285                           
  1286                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  1287  003462  D000               	goto	l371
  1288  003464                     l371:
  1289  003464  A89E               	btfss	3998,4,c	;volatile
  1290  003466  D7FE               	goto	l371
  1291  003468  0012               	return		;funcret
  1292  00346A                     __end_of_SerTx:
  1293                           	opt stack 0
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           intcon	equ	0xFF2
  1299                           indf0	equ	0xFEF
  1300                           postinc0	equ	0xFEE
  1301                           fsr0h	equ	0xFEA
  1302                           fsr0l	equ	0xFE9
  1303                           wreg	equ	0xFE8
  1304                           status	equ	0xFD8
  1305                           
  1306 ;; *************** function _RTDInit *****************
  1307 ;; Defined at:
  1308 ;;		line 3 in file "ResolverToDigital.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;		None               void
  1315 ;; Registers used:
  1316 ;;		wreg, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    7
  1329 ;; This function calls:
  1330 ;;		_Delay10TCYx
  1331 ;;		_Delay1KTCYx
  1332 ;;		_Delay1TCYx
  1333 ;; This function is called by:
  1334 ;;		_initialize
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text5
  1339  00329E                     __ptext5:
  1340                           	opt stack 0
  1341  00329E                     _RTDInit:
  1342                           	opt stack 22
  1343                           
  1344                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1345                           
  1346                           ;incstack = 0
  1347  00329E  6895               	setf	3989,c	;volatile
  1348                           
  1349                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1350  0032A0  6899               	setf	3993,c	;volatile
  1351                           
  1352                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1353  0032A2  9096               	bcf	3990,0,c	;volatile
  1354                           
  1355                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1356  0032A4  9296               	bcf	3990,1,c	;volatile
  1357                           
  1358                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1359  0032A6  9496               	bcf	3990,2,c	;volatile
  1360                           
  1361                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1362  0032A8  909A               	bcf	3994,0,c	;volatile
  1363                           
  1364                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1365  0032AA  8A96               	bsf	3990,5,c	;volatile
  1366                           
  1367                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1368  0032AC  8C96               	bsf	3990,6,c	;volatile
  1369                           
  1370                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1371  0032AE  8E96               	bsf	3990,7,c	;volatile
  1372                           
  1373                           ;ResolverToDigital.c: 17: PORTJbits.RJ0 = 0;
  1374  0032B0  9088               	bcf	3976,0,c	;volatile
  1375                           
  1376                           ;ResolverToDigital.c: 18: Delay10TCYx(10);
  1377  0032B2  0E0A               	movlw	10
  1378  0032B4  EC22  F01A         	call	_Delay10TCYx
  1379                           
  1380                           ;ResolverToDigital.c: 19: PORTJbits.RJ0 = 1;
  1381  0032B8  8088               	bsf	3976,0,c	;volatile
  1382                           
  1383                           ;ResolverToDigital.c: 20: Delay1KTCYx(20);
  1384  0032BA  0E14               	movlw	20
  1385  0032BC  EC17  F01A         	call	_Delay1KTCYx
  1386                           
  1387                           ;ResolverToDigital.c: 21: PORTEbits.RE0 = 0;
  1388  0032C0  9084               	bcf	3972,0,c	;volatile
  1389                           
  1390                           ;ResolverToDigital.c: 22: Delay1TCYx(1);
  1391  0032C2  0E01               	movlw	1
  1392  0032C4  EC35  F01A         	call	_Delay1TCYx
  1393                           
  1394                           ;ResolverToDigital.c: 23: PORTEbits.RE0 = 1;
  1395  0032C8  8084               	bsf	3972,0,c	;volatile
  1396                           
  1397                           ;ResolverToDigital.c: 25: PORTEbits.RE2 = 0;
  1398  0032CA  9484               	bcf	3972,2,c	;volatile
  1399  0032CC  0012               	return		;funcret
  1400  0032CE                     __end_of_RTDInit:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           intcon	equ	0xFF2
  1407                           indf0	equ	0xFEF
  1408                           postinc0	equ	0xFEE
  1409                           fsr0h	equ	0xFEA
  1410                           fsr0l	equ	0xFE9
  1411                           wreg	equ	0xFE8
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _Delay1TCYx *****************
  1415 ;; Defined at:
  1416 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  unit            1    wreg     unsigned char 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  unit            1   14[BANK0 ] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;		None               void
  1423 ;; Registers used:
  1424 ;;		wreg
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;Total ram usage:        1 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    6
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_RTDInit
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text6
  1445  00346A                     __ptext6:
  1446                           	opt stack 0
  1447  00346A                     _Delay1TCYx:
  1448                           	opt stack 22
  1449                           
  1450                           ;incstack = 0
  1451                           ;Delay1TCYx@unit stored from wreg
  1452  00346A  0100               	movlb	0	; () banked
  1453  00346C  6FAE               	movwf	Delay1TCYx@unit& (0+255),b
  1454  00346E                     l786:
  1455                           
  1456                           ; BSR set to: 0
  1457  00346E  F000               	nop	
  1458  003470  0100               	movlb	0	; () banked
  1459  003472  2FAE               	decfsz	Delay1TCYx@unit& (0+255),f,b
  1460  003474  D7FC               	goto	l786
  1461  003476  D000               	goto	l788
  1462  003478                     l788:
  1463                           
  1464                           ; BSR set to: 0
  1465  003478  0012               	return		;funcret
  1466  00347A                     __end_of_Delay1TCYx:
  1467                           	opt stack 0
  1468                           tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           intcon	equ	0xFF2
  1473                           indf0	equ	0xFEF
  1474                           postinc0	equ	0xFEE
  1475                           fsr0h	equ	0xFEA
  1476                           fsr0l	equ	0xFE9
  1477                           wreg	equ	0xFE8
  1478                           status	equ	0xFD8
  1479                           
  1480 ;; *************** function _Delay1KTCYx *****************
  1481 ;; Defined at:
  1482 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  unit            1    wreg     unsigned char 
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  unit            1   14[BANK0 ] unsigned char 
  1487 ;; Return value:  Size  Location     Type
  1488 ;;		None               void
  1489 ;; Registers used:
  1490 ;;		wreg
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1500 ;;Total ram usage:        1 bytes
  1501 ;; Hardware stack levels used:    1
  1502 ;; Hardware stack levels required when called:    6
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_RTDInit
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text7
  1511  00342E                     __ptext7:
  1512                           	opt stack 0
  1513  00342E                     _Delay1KTCYx:
  1514                           	opt stack 22
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;incstack = 0
  1518                           ;Delay1KTCYx@unit stored from wreg
  1519  00342E  0100               	movlb	0	; () banked
  1520  003430  6FAE               	movwf	Delay1KTCYx@unit& (0+255),b
  1521  003432                     
  1522                           ; BSR set to: 0
  1523  003432  0EFA               	movlw	250
  1524  003434                     u4477:
  1525  003434  F000               	nop	
  1526  003436  2EE8               	decfsz	wreg,f,c
  1527  003438  D7FD               	goto	u4477
  1528  00343A  0100               	movlb	0	; () banked
  1529  00343C  2FAE               	decfsz	Delay1KTCYx@unit& (0+255),f,b
  1530  00343E  D7F9               	goto	l3003
  1531  003440  D000               	goto	l781
  1532  003442                     l781:
  1533                           
  1534                           ; BSR set to: 0
  1535  003442  0012               	return		;funcret
  1536  003444                     __end_of_Delay1KTCYx:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           intcon	equ	0xFF2
  1543                           indf0	equ	0xFEF
  1544                           postinc0	equ	0xFEE
  1545                           fsr0h	equ	0xFEA
  1546                           fsr0l	equ	0xFE9
  1547                           wreg	equ	0xFE8
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _PIDInit *****************
  1551 ;; Defined at:
  1552 ;;		line 15 in file "PID.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;		None               void
  1559 ;; Registers used:
  1560 ;;		wreg, status,2
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    6
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_initialize
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text8
  1581  00316E                     __ptext8:
  1582                           	opt stack 0
  1583  00316E                     _PIDInit:
  1584                           	opt stack 23
  1585                           
  1586                           ;PID.c: 18: err = 0;
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;incstack = 0
  1590  00316E  0E00               	movlw	0
  1591  003170  0100               	movlb	0	; () banked
  1592  003172  6FDD               	movwf	_err& (0+255),b
  1593  003174  0E00               	movlw	0
  1594  003176  0100               	movlb	0	; () banked
  1595  003178  6FDE               	movwf	(_err+1)& (0+255),b
  1596  00317A  0E00               	movlw	0
  1597  00317C  0100               	movlb	0	; () banked
  1598  00317E  6FDF               	movwf	(_err+2)& (0+255),b
  1599                           
  1600                           ;PID.c: 19: prevErr = 0;
  1601  003180  0E00               	movlw	0
  1602  003182  0100               	movlb	0	; () banked
  1603  003184  6FE3               	movwf	_prevErr& (0+255),b
  1604  003186  0E00               	movlw	0
  1605  003188  0100               	movlb	0	; () banked
  1606  00318A  6FE4               	movwf	(_prevErr+1)& (0+255),b
  1607  00318C  0E00               	movlw	0
  1608  00318E  0100               	movlb	0	; () banked
  1609  003190  6FE5               	movwf	(_prevErr+2)& (0+255),b
  1610                           
  1611                           ;PID.c: 20: intErr = 0;
  1612  003192  0E00               	movlw	0
  1613  003194  0100               	movlb	0	; () banked
  1614  003196  6FE0               	movwf	_intErr& (0+255),b
  1615  003198  0E00               	movlw	0
  1616  00319A  0100               	movlb	0	; () banked
  1617  00319C  6FE1               	movwf	(_intErr+1)& (0+255),b
  1618  00319E  0E00               	movlw	0
  1619  0031A0  0100               	movlb	0	; () banked
  1620  0031A2  6FE2               	movwf	(_intErr+2)& (0+255),b
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;PID.c: 23: INTCON2bits.TMR0IP = 1;
  1624  0031A4  84F1               	bsf	intcon2,2,c	;volatile
  1625                           
  1626                           ;PID.c: 24: T0CON = 0x84;
  1627  0031A6  0E84               	movlw	132
  1628  0031A8  6ED5               	movwf	4053,c	;volatile
  1629                           
  1630                           ;PID.c: 25: TMR0H = 0xDB;
  1631  0031AA  0EDB               	movlw	219
  1632  0031AC  6ED7               	movwf	4055,c	;volatile
  1633                           
  1634                           ;PID.c: 26: TMR0L = 0x60;
  1635  0031AE  0E60               	movlw	96
  1636  0031B0  6ED6               	movwf	4054,c	;volatile
  1637                           
  1638                           ; BSR set to: 0
  1639  0031B2  0012               	return		;funcret
  1640  0031B4                     __end_of_PIDInit:
  1641                           	opt stack 0
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           intcon	equ	0xFF2
  1647                           intcon2	equ	0xFF1
  1648                           indf0	equ	0xFEF
  1649                           postinc0	equ	0xFEE
  1650                           fsr0h	equ	0xFEA
  1651                           fsr0l	equ	0xFE9
  1652                           wreg	equ	0xFE8
  1653                           status	equ	0xFD8
  1654                           
  1655 ;; *************** function _MotorDriverInit *****************
  1656 ;; Defined at:
  1657 ;;		line 5 in file "MotorControl.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;		None
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;		None
  1662 ;; Return value:  Size  Location     Type
  1663 ;;		None               void
  1664 ;; Registers used:
  1665 ;;		wreg, status,2
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;Total ram usage:        0 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    6
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_initialize
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text9
  1686  0033FA                     __ptext9:
  1687                           	opt stack 0
  1688  0033FA                     _MotorDriverInit:
  1689                           	opt stack 23
  1690                           
  1691                           ;MotorControl.c: 7: TRISGbits.RG0 = 0;
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;incstack = 0
  1695  0033FA  9098               	bcf	3992,0,c	;volatile
  1696                           
  1697                           ;MotorControl.c: 8: TRISGbits.RG3 = 0;
  1698  0033FC  9698               	bcf	3992,3,c	;volatile
  1699                           
  1700                           ;MotorControl.c: 9: TRISEbits.RE3 = 0;
  1701  0033FE  9696               	bcf	3990,3,c	;volatile
  1702                           
  1703                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  1704  003400  9896               	bcf	3990,4,c	;volatile
  1705                           
  1706                           ;MotorControl.c: 11: TRISBbits.RB0 = 1;
  1707  003402  8093               	bsf	3987,0,c	;volatile
  1708                           
  1709                           ;MotorControl.c: 13: TRISAbits.RA4 = 0;
  1710  003404  9892               	bcf	3986,4,c	;volatile
  1711                           
  1712                           ;MotorControl.c: 15: CCP3CON = 0x4C;
  1713  003406  0E4C               	movlw	76
  1714  003408  6EB7               	movwf	4023,c	;volatile
  1715                           
  1716                           ;MotorControl.c: 16: PR2 = 0xFF;
  1717  00340A  68CB               	setf	4043,c	;volatile
  1718                           
  1719                           ;MotorControl.c: 17: T3CON = 0x00;
  1720  00340C  0E00               	movlw	0
  1721  00340E  6EB1               	movwf	4017,c	;volatile
  1722                           
  1723                           ;MotorControl.c: 18: T2CON = 0x04;
  1724  003410  0E04               	movlw	4
  1725  003412  6ECA               	movwf	4042,c	;volatile
  1726  003414  0012               	return		;funcret
  1727  003416                     __end_of_MotorDriverInit:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           intcon	equ	0xFF2
  1734                           intcon2	equ	0xFF1
  1735                           indf0	equ	0xFEF
  1736                           postinc0	equ	0xFEE
  1737                           fsr0h	equ	0xFEA
  1738                           fsr0l	equ	0xFE9
  1739                           wreg	equ	0xFE8
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _LCDBreakDouble *****************
  1743 ;; Defined at:
  1744 ;;		line 134 in file "LCD.h"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  dubs            3   52[BANK0 ] unsigned char 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  temp2           2   59[BANK0 ] unsigned int 
  1749 ;;  temp1           2   57[BANK0 ] unsigned int 
  1750 ;;  tempDub         2   55[BANK0 ] unsigned int 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;		None               void
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1760 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;Total ram usage:        9 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:   10
  1767 ;; This function calls:
  1768 ;;		___ftmul
  1769 ;;		___fttol
  1770 ;;		___lwdiv
  1771 ;;		___lwmod
  1772 ;;		_lcdChar
  1773 ;;		_lcdCommand
  1774 ;;		_lcdGoTo
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text10
  1781  0022AE                     __ptext10:
  1782                           	opt stack 0
  1783  0022AE                     _LCDBreakDouble:
  1784                           	opt stack 20
  1785                           
  1786                           ;LCD.h: 136: unsigned int temp1, temp2;
  1787                           ;LCD.h: 137: unsigned int tempDub;
  1788                           ;LCD.h: 139: lcdCommand(0x01);
  1789                           
  1790                           ;incstack = 0
  1791  0022AE  0E01               	movlw	1
  1792  0022B0  EC6B  F018         	call	_lcdCommand
  1793                           
  1794                           ;LCD.h: 140: lcdGoTo(0x40);
  1795  0022B4  0E40               	movlw	64
  1796  0022B6  EC3D  F01A         	call	_lcdGoTo
  1797                           
  1798                           ;LCD.h: 141: tempDub = dubs * 100;
  1799  0022BA  0E00               	movlw	0
  1800  0022BC  0100               	movlb	0	; () banked
  1801  0022BE  6FB9               	movwf	___ftmul@f2& (0+255),b
  1802  0022C0  0EC8               	movlw	200
  1803  0022C2  0100               	movlb	0	; () banked
  1804  0022C4  6FBA               	movwf	(___ftmul@f2+1)& (0+255),b
  1805  0022C6  0E42               	movlw	66
  1806  0022C8  0100               	movlb	0	; () banked
  1807  0022CA  6FBB               	movwf	(___ftmul@f2+2)& (0+255),b
  1808  0022CC  C0D4  F0B6         	movff	LCDBreakDouble@dubs,___ftmul@f1
  1809  0022D0  C0D5  F0B7         	movff	LCDBreakDouble@dubs+1,___ftmul@f1+1
  1810  0022D4  C0D6  F0B8         	movff	LCDBreakDouble@dubs+2,___ftmul@f1+2
  1811  0022D8  EC1B  F012         	call	___ftmul	;wreg free
  1812  0022DC  C0B6  F0C5         	movff	?___ftmul,___fttol@f1
  1813  0022E0  C0B7  F0C6         	movff	?___ftmul+1,___fttol@f1+1
  1814  0022E4  C0B8  F0C7         	movff	?___ftmul+2,___fttol@f1+2
  1815  0022E8  EC64  F013         	call	___fttol	;wreg free
  1816  0022EC  C0C5  F0D7         	movff	?___fttol,LCDBreakDouble@tempDub
  1817  0022F0  C0C6  F0D8         	movff	?___fttol+1,LCDBreakDouble@tempDub+1
  1818                           
  1819                           ;LCD.h: 142: temp1 = tempDub / 10000;
  1820  0022F4  C0D7  F0AE         	movff	LCDBreakDouble@tempDub,___lwdiv@dividend
  1821  0022F8  C0D8  F0AF         	movff	LCDBreakDouble@tempDub+1,___lwdiv@dividend+1
  1822  0022FC  0E27               	movlw	39
  1823  0022FE  0100               	movlb	0	; () banked
  1824  002300  6FB1               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1825  002302  0E10               	movlw	16
  1826  002304  6FB0               	movwf	___lwdiv@divisor& (0+255),b
  1827  002306  EC9B  F016         	call	___lwdiv	;wreg free
  1828  00230A  C0AE  F0D9         	movff	?___lwdiv,LCDBreakDouble@temp1
  1829  00230E  C0AF  F0DA         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  1830                           
  1831                           ;LCD.h: 143: temp2 = tempDub % 10000;
  1832  002312  C0D7  F0AE         	movff	LCDBreakDouble@tempDub,___lwmod@dividend
  1833  002316  C0D8  F0AF         	movff	LCDBreakDouble@tempDub+1,___lwmod@dividend+1
  1834  00231A  0E27               	movlw	39
  1835  00231C  0100               	movlb	0	; () banked
  1836  00231E  6FB1               	movwf	(___lwmod@divisor+1)& (0+255),b
  1837  002320  0E10               	movlw	16
  1838  002322  6FB0               	movwf	___lwmod@divisor& (0+255),b
  1839  002324  EC59  F017         	call	___lwmod	;wreg free
  1840  002328  C0AE  F0DB         	movff	?___lwmod,LCDBreakDouble@temp2
  1841  00232C  C0AF  F0DC         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  1842                           
  1843                           ;LCD.h: 144: if (temp1 != 0)
  1844  002330  0100               	movlb	0	; () banked
  1845  002332  51D9               	movf	LCDBreakDouble@temp1& (0+255),w,b
  1846  002334  0100               	movlb	0	; () banked
  1847  002336  11DA               	iorwf	(LCDBreakDouble@temp1+1)& (0+255),w,b
  1848  002338  B4D8               	btfsc	status,2,c
  1849  00233A  D005               	goto	l184
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;LCD.h: 145: lcdChar(temp1 + 0x30);
  1853  00233C  0100               	movlb	0	; () banked
  1854  00233E  51D9               	movf	LCDBreakDouble@temp1& (0+255),w,b
  1855  002340  0F30               	addlw	48
  1856  002342  ECDA  F018         	call	_lcdChar
  1857  002346                     l184:
  1858                           
  1859                           ;LCD.h: 146: temp1 = temp2 / 1000;
  1860  002346  C0DB  F0AE         	movff	LCDBreakDouble@temp2,___lwdiv@dividend
  1861  00234A  C0DC  F0AF         	movff	LCDBreakDouble@temp2+1,___lwdiv@dividend+1
  1862  00234E  0E03               	movlw	3
  1863  002350  0100               	movlb	0	; () banked
  1864  002352  6FB1               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1865  002354  0EE8               	movlw	232
  1866  002356  6FB0               	movwf	___lwdiv@divisor& (0+255),b
  1867  002358  EC9B  F016         	call	___lwdiv	;wreg free
  1868  00235C  C0AE  F0D9         	movff	?___lwdiv,LCDBreakDouble@temp1
  1869  002360  C0AF  F0DA         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  1870                           
  1871                           ;LCD.h: 147: temp2 = temp2 % 1000;
  1872  002364  C0DB  F0AE         	movff	LCDBreakDouble@temp2,___lwmod@dividend
  1873  002368  C0DC  F0AF         	movff	LCDBreakDouble@temp2+1,___lwmod@dividend+1
  1874  00236C  0E03               	movlw	3
  1875  00236E  0100               	movlb	0	; () banked
  1876  002370  6FB1               	movwf	(___lwmod@divisor+1)& (0+255),b
  1877  002372  0EE8               	movlw	232
  1878  002374  6FB0               	movwf	___lwmod@divisor& (0+255),b
  1879  002376  EC59  F017         	call	___lwmod	;wreg free
  1880  00237A  C0AE  F0DB         	movff	?___lwmod,LCDBreakDouble@temp2
  1881  00237E  C0AF  F0DC         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  1882                           
  1883                           ;LCD.h: 148: if (temp1 != 0)
  1884  002382  0100               	movlb	0	; () banked
  1885  002384  51D9               	movf	LCDBreakDouble@temp1& (0+255),w,b
  1886  002386  0100               	movlb	0	; () banked
  1887  002388  11DA               	iorwf	(LCDBreakDouble@temp1+1)& (0+255),w,b
  1888  00238A  B4D8               	btfsc	status,2,c
  1889  00238C  D005               	goto	l185
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;LCD.h: 149: lcdChar(temp1 + 0x30);
  1893  00238E  0100               	movlb	0	; () banked
  1894  002390  51D9               	movf	LCDBreakDouble@temp1& (0+255),w,b
  1895  002392  0F30               	addlw	48
  1896  002394  ECDA  F018         	call	_lcdChar
  1897  002398                     l185:
  1898                           
  1899                           ;LCD.h: 150: temp1 = temp2 / 100;
  1900  002398  C0DB  F0AE         	movff	LCDBreakDouble@temp2,___lwdiv@dividend
  1901  00239C  C0DC  F0AF         	movff	LCDBreakDouble@temp2+1,___lwdiv@dividend+1
  1902  0023A0  0E00               	movlw	0
  1903  0023A2  0100               	movlb	0	; () banked
  1904  0023A4  6FB1               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1905  0023A6  0E64               	movlw	100
  1906  0023A8  6FB0               	movwf	___lwdiv@divisor& (0+255),b
  1907  0023AA  EC9B  F016         	call	___lwdiv	;wreg free
  1908  0023AE  C0AE  F0D9         	movff	?___lwdiv,LCDBreakDouble@temp1
  1909  0023B2  C0AF  F0DA         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  1910                           
  1911                           ;LCD.h: 151: temp2 = temp2 % 100;
  1912  0023B6  C0DB  F0AE         	movff	LCDBreakDouble@temp2,___lwmod@dividend
  1913  0023BA  C0DC  F0AF         	movff	LCDBreakDouble@temp2+1,___lwmod@dividend+1
  1914  0023BE  0E00               	movlw	0
  1915  0023C0  0100               	movlb	0	; () banked
  1916  0023C2  6FB1               	movwf	(___lwmod@divisor+1)& (0+255),b
  1917  0023C4  0E64               	movlw	100
  1918  0023C6  6FB0               	movwf	___lwmod@divisor& (0+255),b
  1919  0023C8  EC59  F017         	call	___lwmod	;wreg free
  1920  0023CC  C0AE  F0DB         	movff	?___lwmod,LCDBreakDouble@temp2
  1921  0023D0  C0AF  F0DC         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  1922                           
  1923                           ;LCD.h: 152: lcdChar(temp1 + 0x30);
  1924  0023D4  0100               	movlb	0	; () banked
  1925  0023D6  51D9               	movf	LCDBreakDouble@temp1& (0+255),w,b
  1926  0023D8  0F30               	addlw	48
  1927  0023DA  ECDA  F018         	call	_lcdChar
  1928                           
  1929                           ;LCD.h: 153: lcdChar('.');
  1930  0023DE  0E2E               	movlw	46
  1931  0023E0  ECDA  F018         	call	_lcdChar
  1932                           
  1933                           ;LCD.h: 154: temp1 = temp2 / 10;
  1934  0023E4  C0DB  F0AE         	movff	LCDBreakDouble@temp2,___lwdiv@dividend
  1935  0023E8  C0DC  F0AF         	movff	LCDBreakDouble@temp2+1,___lwdiv@dividend+1
  1936  0023EC  0E00               	movlw	0
  1937  0023EE  0100               	movlb	0	; () banked
  1938  0023F0  6FB1               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1939  0023F2  0E0A               	movlw	10
  1940  0023F4  6FB0               	movwf	___lwdiv@divisor& (0+255),b
  1941  0023F6  EC9B  F016         	call	___lwdiv	;wreg free
  1942  0023FA  C0AE  F0D9         	movff	?___lwdiv,LCDBreakDouble@temp1
  1943  0023FE  C0AF  F0DA         	movff	?___lwdiv+1,LCDBreakDouble@temp1+1
  1944                           
  1945                           ;LCD.h: 155: temp2 = temp2 % 10;
  1946  002402  C0DB  F0AE         	movff	LCDBreakDouble@temp2,___lwmod@dividend
  1947  002406  C0DC  F0AF         	movff	LCDBreakDouble@temp2+1,___lwmod@dividend+1
  1948  00240A  0E00               	movlw	0
  1949  00240C  0100               	movlb	0	; () banked
  1950  00240E  6FB1               	movwf	(___lwmod@divisor+1)& (0+255),b
  1951  002410  0E0A               	movlw	10
  1952  002412  6FB0               	movwf	___lwmod@divisor& (0+255),b
  1953  002414  EC59  F017         	call	___lwmod	;wreg free
  1954  002418  C0AE  F0DB         	movff	?___lwmod,LCDBreakDouble@temp2
  1955  00241C  C0AF  F0DC         	movff	?___lwmod+1,LCDBreakDouble@temp2+1
  1956                           
  1957                           ;LCD.h: 156: lcdChar(temp1 + 0x30);
  1958  002420  0100               	movlb	0	; () banked
  1959  002422  51D9               	movf	LCDBreakDouble@temp1& (0+255),w,b
  1960  002424  0F30               	addlw	48
  1961  002426  ECDA  F018         	call	_lcdChar
  1962                           
  1963                           ;LCD.h: 157: lcdChar(temp2 + 0x30);
  1964  00242A  0100               	movlb	0	; () banked
  1965  00242C  51DB               	movf	LCDBreakDouble@temp2& (0+255),w,b
  1966  00242E  0F30               	addlw	48
  1967  002430  ECDA  F018         	call	_lcdChar
  1968  002434  0012               	return		;funcret
  1969  002436                     __end_of_LCDBreakDouble:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           intcon	equ	0xFF2
  1976                           intcon2	equ	0xFF1
  1977                           indf0	equ	0xFEF
  1978                           postinc0	equ	0xFEE
  1979                           fsr0h	equ	0xFEA
  1980                           fsr0l	equ	0xFE9
  1981                           wreg	equ	0xFE8
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _lcdGoTo *****************
  1985 ;; Defined at:
  1986 ;;		line 78 in file "LCD.h"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  pos             1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  pos             1   19[BANK0 ] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;		None               void
  1993 ;; Registers used:
  1994 ;;		wreg, status,2, status,0, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;Total ram usage:        1 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    9
  2007 ;; This function calls:
  2008 ;;		_lcdCommand
  2009 ;; This function is called by:
  2010 ;;		_LCDBreakDouble
  2011 ;;		_lcdPrint
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text11
  2016  00347A                     __ptext11:
  2017                           	opt stack 0
  2018  00347A                     _lcdGoTo:
  2019                           	opt stack 20
  2020                           
  2021                           ;incstack = 0
  2022                           ;lcdGoTo@pos stored from wreg
  2023  00347A  0100               	movlb	0	; () banked
  2024  00347C  6FB3               	movwf	lcdGoTo@pos& (0+255),b
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;LCD.h: 81: lcdCommand(0x80+pos);
  2028  00347E  0100               	movlb	0	; () banked
  2029  003480  51B3               	movf	lcdGoTo@pos& (0+255),w,b
  2030  003482  0F80               	addlw	128
  2031  003484  EC6B  F018         	call	_lcdCommand
  2032  003488  0012               	return		;funcret
  2033  00348A                     __end_of_lcdGoTo:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           intcon	equ	0xFF2
  2040                           intcon2	equ	0xFF1
  2041                           indf0	equ	0xFEF
  2042                           postinc0	equ	0xFEE
  2043                           fsr0h	equ	0xFEA
  2044                           fsr0l	equ	0xFE9
  2045                           wreg	equ	0xFE8
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _lcdCommand *****************
  2049 ;; Defined at:
  2050 ;;		line 54 in file "LCD.h"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  command         1    wreg     unsigned char 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  command         1   18[BANK0 ] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;		None               void
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;Total ram usage:        1 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    8
  2071 ;; This function calls:
  2072 ;;		_Delay10TCYx
  2073 ;;		_setGPIO
  2074 ;; This function is called by:
  2075 ;;		_lcdGoTo
  2076 ;;		_LCDBreakDouble
  2077 ;;		_lcdInit
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text12
  2082  0030D6                     __ptext12:
  2083                           	opt stack 0
  2084  0030D6                     _lcdCommand:
  2085                           	opt stack 20
  2086                           
  2087                           ;incstack = 0
  2088                           ;lcdCommand@command stored from wreg
  2089  0030D6  0100               	movlb	0	; () banked
  2090  0030D8  6FB2               	movwf	lcdCommand@command& (0+255),b
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;LCD.h: 56: setGPIO(0x12,0x00);
  2094  0030DA  0E00               	movlw	0
  2095  0030DC  0100               	movlb	0	; () banked
  2096  0030DE  6FB0               	movwf	setGPIO@value& (0+255),b
  2097  0030E0  0E12               	movlw	18
  2098  0030E2  ECED  F019         	call	_setGPIO
  2099                           
  2100                           ;LCD.h: 57: Delay10TCYx(0);
  2101  0030E6  0E00               	movlw	0
  2102  0030E8  EC22  F01A         	call	_Delay10TCYx
  2103                           
  2104                           ;LCD.h: 58: setGPIO(0x13, command);
  2105  0030EC  C0B2  F0B0         	movff	lcdCommand@command,setGPIO@value
  2106  0030F0  0E13               	movlw	19
  2107  0030F2  ECED  F019         	call	_setGPIO
  2108                           
  2109                           ;LCD.h: 59: Delay10TCYx(0);
  2110  0030F6  0E00               	movlw	0
  2111  0030F8  EC22  F01A         	call	_Delay10TCYx
  2112                           
  2113                           ;LCD.h: 60: setGPIO(0x12,0x40);
  2114  0030FC  0E40               	movlw	64
  2115  0030FE  0100               	movlb	0	; () banked
  2116  003100  6FB0               	movwf	setGPIO@value& (0+255),b
  2117  003102  0E12               	movlw	18
  2118  003104  ECED  F019         	call	_setGPIO
  2119                           
  2120                           ;LCD.h: 61: Delay10TCYx(0);
  2121  003108  0E00               	movlw	0
  2122  00310A  EC22  F01A         	call	_Delay10TCYx
  2123                           
  2124                           ;LCD.h: 62: setGPIO(0x12,0x00);
  2125  00310E  0E00               	movlw	0
  2126  003110  0100               	movlb	0	; () banked
  2127  003112  6FB0               	movwf	setGPIO@value& (0+255),b
  2128  003114  0E12               	movlw	18
  2129  003116  ECED  F019         	call	_setGPIO
  2130                           
  2131                           ;LCD.h: 63: Delay10TCYx(0);
  2132  00311A  0E00               	movlw	0
  2133  00311C  EC22  F01A         	call	_Delay10TCYx
  2134  003120  0012               	return		;funcret
  2135  003122                     __end_of_lcdCommand:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           tblptrh	equ	0xFF7
  2139                           tblptrl	equ	0xFF6
  2140                           tablat	equ	0xFF5
  2141                           intcon	equ	0xFF2
  2142                           intcon2	equ	0xFF1
  2143                           indf0	equ	0xFEF
  2144                           postinc0	equ	0xFEE
  2145                           fsr0h	equ	0xFEA
  2146                           fsr0l	equ	0xFE9
  2147                           wreg	equ	0xFE8
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _lcdChar *****************
  2151 ;; Defined at:
  2152 ;;		line 66 in file "LCD.h"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  letter          1    wreg     unsigned char 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  letter          1   18[BANK0 ] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;		None               void
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;Total ram usage:        1 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    8
  2173 ;; This function calls:
  2174 ;;		_Delay10TCYx
  2175 ;;		_setGPIO
  2176 ;; This function is called by:
  2177 ;;		_LCDBreakDouble
  2178 ;;		_lcdWriteString
  2179 ;;		_lcdPrint
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text13
  2184  0031B4                     __ptext13:
  2185                           	opt stack 0
  2186  0031B4                     _lcdChar:
  2187                           	opt stack 21
  2188                           
  2189                           ;incstack = 0
  2190                           ;lcdChar@letter stored from wreg
  2191  0031B4  0100               	movlb	0	; () banked
  2192  0031B6  6FB2               	movwf	lcdChar@letter& (0+255),b
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;LCD.h: 68: setGPIO(0x12,0x80);
  2196  0031B8  0E80               	movlw	128
  2197  0031BA  0100               	movlb	0	; () banked
  2198  0031BC  6FB0               	movwf	setGPIO@value& (0+255),b
  2199  0031BE  0E12               	movlw	18
  2200  0031C0  ECED  F019         	call	_setGPIO
  2201                           
  2202                           ;LCD.h: 69: Delay10TCYx(0);
  2203  0031C4  0E00               	movlw	0
  2204  0031C6  EC22  F01A         	call	_Delay10TCYx
  2205                           
  2206                           ;LCD.h: 70: setGPIO(0x13,letter);
  2207  0031CA  C0B2  F0B0         	movff	lcdChar@letter,setGPIO@value
  2208  0031CE  0E13               	movlw	19
  2209  0031D0  ECED  F019         	call	_setGPIO
  2210                           
  2211                           ;LCD.h: 72: setGPIO(0x12, 0xc0);
  2212  0031D4  0EC0               	movlw	192
  2213  0031D6  0100               	movlb	0	; () banked
  2214  0031D8  6FB0               	movwf	setGPIO@value& (0+255),b
  2215  0031DA  0E12               	movlw	18
  2216  0031DC  ECED  F019         	call	_setGPIO
  2217                           
  2218                           ;LCD.h: 73: Delay10TCYx(0);
  2219  0031E0  0E00               	movlw	0
  2220  0031E2  EC22  F01A         	call	_Delay10TCYx
  2221                           
  2222                           ;LCD.h: 74: setGPIO(0x12,0x00);
  2223  0031E6  0E00               	movlw	0
  2224  0031E8  0100               	movlb	0	; () banked
  2225  0031EA  6FB0               	movwf	setGPIO@value& (0+255),b
  2226  0031EC  0E12               	movlw	18
  2227  0031EE  ECED  F019         	call	_setGPIO
  2228                           
  2229                           ;LCD.h: 75: Delay10TCYx(0);
  2230  0031F2  0E00               	movlw	0
  2231  0031F4  EC22  F01A         	call	_Delay10TCYx
  2232  0031F8  0012               	return		;funcret
  2233  0031FA                     __end_of_lcdChar:
  2234                           	opt stack 0
  2235                           tblptru	equ	0xFF8
  2236                           tblptrh	equ	0xFF7
  2237                           tblptrl	equ	0xFF6
  2238                           tablat	equ	0xFF5
  2239                           intcon	equ	0xFF2
  2240                           intcon2	equ	0xFF1
  2241                           indf0	equ	0xFEF
  2242                           postinc0	equ	0xFEE
  2243                           fsr0h	equ	0xFEA
  2244                           fsr0l	equ	0xFE9
  2245                           wreg	equ	0xFE8
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _setGPIO *****************
  2249 ;; Defined at:
  2250 ;;		line 34 in file "LCD.h"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  address         1    wreg     unsigned char 
  2253 ;;  value           1   16[BANK0 ] unsigned char 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  address         1   17[BANK0 ] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;		None               void
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2265 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;Total ram usage:        2 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    7
  2272 ;; This function calls:
  2273 ;;		_WriteSPI1
  2274 ;; This function is called by:
  2275 ;;		_lcdCommand
  2276 ;;		_lcdChar
  2277 ;;		_lcdInit
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text14
  2282  0033DA                     __ptext14:
  2283                           	opt stack 0
  2284  0033DA                     _setGPIO:
  2285                           	opt stack 20
  2286                           
  2287                           ;incstack = 0
  2288                           ;setGPIO@address stored from wreg
  2289  0033DA  0100               	movlb	0	; () banked
  2290  0033DC  6FB1               	movwf	setGPIO@address& (0+255),b
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;LCD.h: 36: PORTAbits.RA2=0;
  2294  0033DE  9480               	bcf	3968,2,c	;volatile
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;LCD.h: 39: WriteSPI1(0x40);
  2298  0033E0  0E40               	movlw	64
  2299  0033E2  ECB8  F019         	call	_WriteSPI1
  2300                           
  2301                           ;LCD.h: 40: WriteSPI1(address);
  2302  0033E6  0100               	movlb	0	; () banked
  2303  0033E8  51B1               	movf	setGPIO@address& (0+255),w,b
  2304  0033EA  ECB8  F019         	call	_WriteSPI1
  2305                           
  2306                           ;LCD.h: 41: WriteSPI1(value);
  2307  0033EE  0100               	movlb	0	; () banked
  2308  0033F0  51B0               	movf	setGPIO@value& (0+255),w,b
  2309  0033F2  ECB8  F019         	call	_WriteSPI1
  2310                           
  2311                           ;LCD.h: 42: PORTAbits.RA2=1;
  2312  0033F6  8480               	bsf	3968,2,c	;volatile
  2313  0033F8  0012               	return		;funcret
  2314  0033FA                     __end_of_setGPIO:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           tblptrh	equ	0xFF7
  2318                           tblptrl	equ	0xFF6
  2319                           tablat	equ	0xFF5
  2320                           intcon	equ	0xFF2
  2321                           intcon2	equ	0xFF1
  2322                           indf0	equ	0xFEF
  2323                           postinc0	equ	0xFEE
  2324                           fsr0h	equ	0xFEA
  2325                           fsr0l	equ	0xFE9
  2326                           wreg	equ	0xFE8
  2327                           status	equ	0xFD8
  2328                           
  2329 ;; *************** function _WriteSPI1 *****************
  2330 ;; Defined at:
  2331 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1writ.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  data_out        1    wreg     unsigned char 
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;  data_out        1   15[BANK0 ] unsigned char 
  2336 ;;  TempVar         1   14[BANK0 ] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      char 
  2339 ;; Registers used:
  2340 ;;		wreg
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;Total ram usage:        2 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    6
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_setGPIO
  2357 ;;		_setIODIR
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text15
  2362  003370                     __ptext15:
  2363                           	opt stack 0
  2364  003370                     _WriteSPI1:
  2365                           	opt stack 20
  2366                           
  2367                           ;incstack = 0
  2368                           ;WriteSPI1@data_out stored from wreg
  2369  003370  0100               	movlb	0	; () banked
  2370  003372  6FAF               	movwf	WriteSPI1@data_out& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373  003374  CFC9 F0AE          	movff	4041,WriteSPI1@TempVar	;volatile
  2374  003378  969E               	bcf	3998,3,c	;volatile
  2375  00337A  9EC6               	bcf	4038,7,c	;volatile
  2376                           
  2377                           ; BSR set to: 0
  2378  00337C  C0AF  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381  003380  BEC6               	btfsc	4038,7,c	;volatile
  2382  003382  D007               	goto	l477
  2383  003384  D002               	goto	l479
  2384                           
  2385                           ; BSR set to: 0
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;	Return value of _WriteSPI1 is never used
  2389  003386  D005               	goto	l477
  2390                           
  2391                           ; BSR set to: 0
  2392  003388  D000               	goto	l479
  2393  00338A                     l479:
  2394  00338A  B69E               	btfsc	3998,3,c	;volatile
  2395  00338C  D002               	goto	l477
  2396  00338E  D7FD               	goto	l479
  2397  003390  D000               	goto	l477
  2398  003392                     l477:
  2399  003392  0012               	return		;funcret
  2400  003394                     __end_of_WriteSPI1:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           intcon	equ	0xFF2
  2407                           intcon2	equ	0xFF1
  2408                           indf0	equ	0xFEF
  2409                           postinc0	equ	0xFEE
  2410                           fsr0h	equ	0xFEA
  2411                           fsr0l	equ	0xFE9
  2412                           wreg	equ	0xFE8
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _Delay10TCYx *****************
  2416 ;; Defined at:
  2417 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  unit            1    wreg     unsigned char 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  unit            1   14[BANK0 ] unsigned char 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;		None               void
  2424 ;; Registers used:
  2425 ;;		wreg
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;Total ram usage:        1 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    6
  2438 ;; This function calls:
  2439 ;;		Nothing
  2440 ;; This function is called by:
  2441 ;;		_lcdCommand
  2442 ;;		_lcdChar
  2443 ;;		_RTDInit
  2444 ;;		_ReadRTDpos
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text16
  2449  003444                     __ptext16:
  2450                           	opt stack 0
  2451  003444                     _Delay10TCYx:
  2452                           	opt stack 22
  2453                           
  2454                           ;incstack = 0
  2455                           ;Delay10TCYx@unit stored from wreg
  2456  003444  0100               	movlb	0	; () banked
  2457  003446  6FAE               	movwf	Delay10TCYx@unit& (0+255),b
  2458  003448                     
  2459                           ; BSR set to: 0
  2460  003448  0E03               	movlw	3
  2461  00344A                     u4487:
  2462  00344A  2EE8               	decfsz	wreg,f,c
  2463  00344C  D7FE               	goto	u4487
  2464  00344E  F000               	nop	
  2465  003450  0100               	movlb	0	; () banked
  2466  003452  2FAE               	decfsz	Delay10TCYx@unit& (0+255),f,b
  2467  003454  D7F9               	goto	l2625
  2468  003456  D000               	goto	l774
  2469  003458                     l774:
  2470                           
  2471                           ; BSR set to: 0
  2472  003458  0012               	return		;funcret
  2473  00345A                     __end_of_Delay10TCYx:
  2474                           	opt stack 0
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           intcon	equ	0xFF2
  2480                           intcon2	equ	0xFF1
  2481                           indf0	equ	0xFEF
  2482                           postinc0	equ	0xFEE
  2483                           fsr0h	equ	0xFEA
  2484                           fsr0l	equ	0xFE9
  2485                           wreg	equ	0xFE8
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function ___lwmod *****************
  2489 ;; Defined at:
  2490 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  dividend        2   14[BANK0 ] unsigned int 
  2493 ;;  divisor         2   16[BANK0 ] unsigned int 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  counter         1   18[BANK0 ] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  2   14[BANK0 ] unsigned int 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;Total ram usage:        5 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    6
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_LCDBreakDouble
  2516 ;;		_breakDouble
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text17
  2521  002EB2                     __ptext17:
  2522                           	opt stack 0
  2523  002EB2                     ___lwmod:
  2524                           	opt stack 23
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;incstack = 0
  2528  002EB2  0100               	movlb	0	; () banked
  2529  002EB4  51B0               	movf	___lwmod@divisor& (0+255),w,b
  2530  002EB6  0100               	movlb	0	; () banked
  2531  002EB8  11B1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2532  002EBA  B4D8               	btfsc	status,2,c
  2533  002EBC  D02B               	goto	l1108
  2534                           
  2535                           ; BSR set to: 0
  2536  002EBE  0E01               	movlw	1
  2537  002EC0  0100               	movlb	0	; () banked
  2538  002EC2  6FB2               	movwf	___lwmod@counter& (0+255),b
  2539  002EC4  D007               	goto	l3613
  2540  002EC6                     l3611:
  2541                           
  2542                           ; BSR set to: 0
  2543  002EC6  0100               	movlb	0	; () banked
  2544  002EC8  90D8               	bcf	status,0,c
  2545  002ECA  37B0               	rlcf	___lwmod@divisor& (0+255),f,b
  2546  002ECC  37B1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2547  002ECE  0100               	movlb	0	; () banked
  2548  002ED0  2BB2               	incf	___lwmod@counter& (0+255),f,b
  2549  002ED2  D000               	goto	l3613
  2550  002ED4                     l3613:
  2551                           
  2552                           ; BSR set to: 0
  2553  002ED4  0100               	movlb	0	; () banked
  2554  002ED6  BFB1               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
  2555  002ED8  D002               	goto	l3615
  2556  002EDA  D7F5               	goto	l3611
  2557                           
  2558                           ; BSR set to: 0
  2559  002EDC  D000               	goto	l3615
  2560  002EDE                     l3615:
  2561                           
  2562                           ; BSR set to: 0
  2563  002EDE  0100               	movlb	0	; () banked
  2564  002EE0  51B0               	movf	___lwmod@divisor& (0+255),w,b
  2565  002EE2  0100               	movlb	0	; () banked
  2566  002EE4  5DAE               	subwf	___lwmod@dividend& (0+255),w,b
  2567  002EE6  0100               	movlb	0	; () banked
  2568  002EE8  51B1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2569  002EEA  0100               	movlb	0	; () banked
  2570  002EEC  59AF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2571  002EEE  A0D8               	btfss	status,0,c
  2572  002EF0  D009               	goto	l3619
  2573                           
  2574                           ; BSR set to: 0
  2575  002EF2  0100               	movlb	0	; () banked
  2576  002EF4  51B0               	movf	___lwmod@divisor& (0+255),w,b
  2577  002EF6  0100               	movlb	0	; () banked
  2578  002EF8  5FAE               	subwf	___lwmod@dividend& (0+255),f,b
  2579  002EFA  0100               	movlb	0	; () banked
  2580  002EFC  51B1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2581  002EFE  0100               	movlb	0	; () banked
  2582  002F00  5BAF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2583  002F02  D000               	goto	l3619
  2584  002F04                     l3619:
  2585                           
  2586                           ; BSR set to: 0
  2587  002F04  0100               	movlb	0	; () banked
  2588  002F06  90D8               	bcf	status,0,c
  2589  002F08  33B1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2590  002F0A  33B0               	rrcf	___lwmod@divisor& (0+255),f,b
  2591                           
  2592                           ; BSR set to: 0
  2593  002F0C  0100               	movlb	0	; () banked
  2594  002F0E  2FB2               	decfsz	___lwmod@counter& (0+255),f,b
  2595  002F10  D7E6               	goto	l3615
  2596  002F12  D000               	goto	l1108
  2597  002F14                     l1108:
  2598                           
  2599                           ; BSR set to: 0
  2600  002F14  C0AE  F0AE         	movff	___lwmod@dividend,?___lwmod
  2601  002F18  C0AF  F0AF         	movff	___lwmod@dividend+1,?___lwmod+1
  2602                           
  2603                           ; BSR set to: 0
  2604  002F1C  0012               	return		;funcret
  2605  002F1E                     __end_of___lwmod:
  2606                           	opt stack 0
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           intcon	equ	0xFF2
  2612                           intcon2	equ	0xFF1
  2613                           indf0	equ	0xFEF
  2614                           postinc0	equ	0xFEE
  2615                           fsr0h	equ	0xFEA
  2616                           fsr0l	equ	0xFE9
  2617                           wreg	equ	0xFE8
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function ___lwdiv *****************
  2621 ;; Defined at:
  2622 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  dividend        2   14[BANK0 ] unsigned int 
  2625 ;;  divisor         2   16[BANK0 ] unsigned int 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  quotient        2   18[BANK0 ] unsigned int 
  2628 ;;  counter         1   20[BANK0 ] unsigned char 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  2   14[BANK0 ] unsigned int 
  2631 ;; Registers used:
  2632 ;;		wreg, status,2, status,0
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2638 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;Total ram usage:        7 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    6
  2645 ;; This function calls:
  2646 ;;		Nothing
  2647 ;; This function is called by:
  2648 ;;		_LCDBreakDouble
  2649 ;;		_breakDouble
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text18
  2654  002D36                     __ptext18:
  2655                           	opt stack 0
  2656  002D36                     ___lwdiv:
  2657                           	opt stack 23
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;incstack = 0
  2661  002D36  0E00               	movlw	0
  2662  002D38  0100               	movlb	0	; () banked
  2663  002D3A  6FB3               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2664  002D3C  0E00               	movlw	0
  2665  002D3E  6FB2               	movwf	___lwdiv@quotient& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668  002D40  0100               	movlb	0	; () banked
  2669  002D42  51B0               	movf	___lwdiv@divisor& (0+255),w,b
  2670  002D44  0100               	movlb	0	; () banked
  2671  002D46  11B1               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2672  002D48  B4D8               	btfsc	status,2,c
  2673  002D4A  D031               	goto	l1098
  2674                           
  2675                           ; BSR set to: 0
  2676  002D4C  0E01               	movlw	1
  2677  002D4E  0100               	movlb	0	; () banked
  2678  002D50  6FB4               	movwf	___lwdiv@counter& (0+255),b
  2679  002D52  D007               	goto	l3593
  2680  002D54                     l3591:
  2681                           
  2682                           ; BSR set to: 0
  2683  002D54  0100               	movlb	0	; () banked
  2684  002D56  90D8               	bcf	status,0,c
  2685  002D58  37B0               	rlcf	___lwdiv@divisor& (0+255),f,b
  2686  002D5A  37B1               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2687  002D5C  0100               	movlb	0	; () banked
  2688  002D5E  2BB4               	incf	___lwdiv@counter& (0+255),f,b
  2689  002D60  D000               	goto	l3593
  2690  002D62                     l3593:
  2691                           
  2692                           ; BSR set to: 0
  2693  002D62  0100               	movlb	0	; () banked
  2694  002D64  BFB1               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
  2695  002D66  D002               	goto	l3595
  2696  002D68  D7F5               	goto	l3591
  2697                           
  2698                           ; BSR set to: 0
  2699  002D6A  D000               	goto	l3595
  2700  002D6C                     l3595:
  2701                           
  2702                           ; BSR set to: 0
  2703  002D6C  0100               	movlb	0	; () banked
  2704  002D6E  90D8               	bcf	status,0,c
  2705  002D70  37B2               	rlcf	___lwdiv@quotient& (0+255),f,b
  2706  002D72  37B3               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2707                           
  2708                           ; BSR set to: 0
  2709  002D74  0100               	movlb	0	; () banked
  2710  002D76  51B0               	movf	___lwdiv@divisor& (0+255),w,b
  2711  002D78  0100               	movlb	0	; () banked
  2712  002D7A  5DAE               	subwf	___lwdiv@dividend& (0+255),w,b
  2713  002D7C  0100               	movlb	0	; () banked
  2714  002D7E  51B1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2715  002D80  0100               	movlb	0	; () banked
  2716  002D82  59AF               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2717  002D84  A0D8               	btfss	status,0,c
  2718  002D86  D00B               	goto	l3603
  2719                           
  2720                           ; BSR set to: 0
  2721  002D88  0100               	movlb	0	; () banked
  2722  002D8A  51B0               	movf	___lwdiv@divisor& (0+255),w,b
  2723  002D8C  0100               	movlb	0	; () banked
  2724  002D8E  5FAE               	subwf	___lwdiv@dividend& (0+255),f,b
  2725  002D90  0100               	movlb	0	; () banked
  2726  002D92  51B1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2727  002D94  0100               	movlb	0	; () banked
  2728  002D96  5BAF               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2729                           
  2730                           ; BSR set to: 0
  2731  002D98  0100               	movlb	0	; () banked
  2732  002D9A  81B2               	bsf	___lwdiv@quotient& (0+255),0,b
  2733  002D9C  D000               	goto	l3603
  2734  002D9E                     l3603:
  2735                           
  2736                           ; BSR set to: 0
  2737  002D9E  0100               	movlb	0	; () banked
  2738  002DA0  90D8               	bcf	status,0,c
  2739  002DA2  33B1               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2740  002DA4  33B0               	rrcf	___lwdiv@divisor& (0+255),f,b
  2741                           
  2742                           ; BSR set to: 0
  2743  002DA6  0100               	movlb	0	; () banked
  2744  002DA8  2FB4               	decfsz	___lwdiv@counter& (0+255),f,b
  2745  002DAA  D7E0               	goto	l3595
  2746  002DAC  D000               	goto	l1098
  2747  002DAE                     l1098:
  2748                           
  2749                           ; BSR set to: 0
  2750  002DAE  C0B2  F0AE         	movff	___lwdiv@quotient,?___lwdiv
  2751  002DB2  C0B3  F0AF         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2752                           
  2753                           ; BSR set to: 0
  2754  002DB6  0012               	return		;funcret
  2755  002DB8                     __end_of___lwdiv:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           intcon	equ	0xFF2
  2762                           intcon2	equ	0xFF1
  2763                           indf0	equ	0xFEF
  2764                           postinc0	equ	0xFEE
  2765                           fsr0h	equ	0xFEA
  2766                           fsr0l	equ	0xFE9
  2767                           wreg	equ	0xFE8
  2768                           status	equ	0xFD8
  2769                           
  2770 ;; *************** function ___fttol *****************
  2771 ;; Defined at:
  2772 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  f1              3   37[BANK0 ] float 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  lval            4   47[BANK0 ] unsigned long 
  2777 ;;  exp1            1   51[BANK0 ] unsigned char 
  2778 ;;  sign1           1   46[BANK0 ] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  4   37[BANK0 ] long 
  2781 ;; Registers used:
  2782 ;;		wreg, status,2, status,0
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;Total ram usage:       15 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    6
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_LCDBreakDouble
  2799 ;;		_breakDouble
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text19
  2804  0026C8                     __ptext19:
  2805                           	opt stack 0
  2806  0026C8                     ___fttol:
  2807                           	opt stack 23
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;incstack = 0
  2811  0026C8  C0C7  F0C9         	movff	___fttol@f1+2,??___fttol
  2812  0026CC  0100               	movlb	0	; () banked
  2813  0026CE  6BCA               	clrf	(??___fttol+1)& (0+255),b
  2814  0026D0  6BCB               	clrf	(??___fttol+2)& (0+255),b
  2815  0026D2  0100               	movlb	0	; () banked
  2816  0026D4  35C6               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2817  0026D6  0100               	movlb	0	; () banked
  2818  0026D8  37C9               	rlcf	??___fttol& (0+255),f,b
  2819  0026DA  E301               	bnc	u4061
  2820  0026DC  81CA               	bsf	(??___fttol+1)& (0+255),0,b
  2821  0026DE                     u4061:
  2822  0026DE  0100               	movlb	0	; () banked
  2823  0026E0  51C9               	movf	??___fttol& (0+255),w,b
  2824  0026E2  0100               	movlb	0	; () banked
  2825  0026E4  6FD3               	movwf	___fttol@exp1& (0+255),b
  2826  0026E6  0100               	movlb	0	; () banked
  2827  0026E8  51D3               	movf	___fttol@exp1& (0+255),w,b
  2828  0026EA  A4D8               	btfss	status,2,c
  2829  0026EC  D002               	goto	l3545
  2830  0026EE  D051               	goto	l3569
  2831                           
  2832                           ; BSR set to: 0
  2833                           
  2834                           ; BSR set to: 0
  2835  0026F0  D083               	goto	l986
  2836  0026F2                     l3545:
  2837                           
  2838                           ; BSR set to: 0
  2839  0026F2  0E17               	movlw	23
  2840  0026F4  0100               	movlb	0	; () banked
  2841  0026F6  6FC9               	movwf	??___fttol& (0+255),b
  2842  0026F8  C0C5  F0CA         	movff	___fttol@f1,??___fttol+1
  2843  0026FC  C0C6  F0CB         	movff	___fttol@f1+1,??___fttol+2
  2844  002700  C0C7  F0CC         	movff	___fttol@f1+2,??___fttol+3
  2845  002704  0100               	movlb	0	; () banked
  2846  002706  29C9               	incf	??___fttol& (0+255),w,b
  2847  002708  0100               	movlb	0	; () banked
  2848  00270A  6FCD               	movwf	(??___fttol+4)& (0+255),b
  2849  00270C  D005               	goto	u4080
  2850  00270E                     u4085:
  2851  00270E  0100               	movlb	0	; () banked
  2852  002710  90D8               	bcf	status,0,c
  2853  002712  33CC               	rrcf	(??___fttol+3)& (0+255),f,b
  2854  002714  33CB               	rrcf	(??___fttol+2)& (0+255),f,b
  2855  002716  33CA               	rrcf	(??___fttol+1)& (0+255),f,b
  2856  002718                     u4080:
  2857  002718  0100               	movlb	0	; () banked
  2858  00271A  2FCD               	decfsz	(??___fttol+4)& (0+255),f,b
  2859  00271C  D7F8               	goto	u4085
  2860  00271E  0100               	movlb	0	; () banked
  2861  002720  51CA               	movf	(??___fttol+1)& (0+255),w,b
  2862  002722  0100               	movlb	0	; () banked
  2863  002724  6FCE               	movwf	___fttol@sign1& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866  002726  0100               	movlb	0	; () banked
  2867  002728  8FC6               	bsf	(___fttol@f1+1)& (0+255),7,b
  2868                           
  2869                           ; BSR set to: 0
  2870  00272A  0EFF               	movlw	255
  2871  00272C  0100               	movlb	0	; () banked
  2872  00272E  17C5               	andwf	___fttol@f1& (0+255),f,b
  2873  002730  0EFF               	movlw	255
  2874  002732  0100               	movlb	0	; () banked
  2875  002734  17C6               	andwf	(___fttol@f1+1)& (0+255),f,b
  2876  002736  0E00               	movlw	0
  2877  002738  0100               	movlb	0	; () banked
  2878  00273A  17C7               	andwf	(___fttol@f1+2)& (0+255),f,b
  2879                           
  2880                           ; BSR set to: 0
  2881  00273C  0100               	movlb	0	; () banked
  2882  00273E  51C5               	movf	___fttol@f1& (0+255),w,b
  2883  002740  0100               	movlb	0	; () banked
  2884  002742  6FCF               	movwf	___fttol@lval& (0+255),b
  2885  002744  0100               	movlb	0	; () banked
  2886  002746  51C6               	movf	(___fttol@f1+1)& (0+255),w,b
  2887  002748  0100               	movlb	0	; () banked
  2888  00274A  6FD0               	movwf	(___fttol@lval+1)& (0+255),b
  2889  00274C  0100               	movlb	0	; () banked
  2890  00274E  51C7               	movf	(___fttol@f1+2)& (0+255),w,b
  2891  002750  0100               	movlb	0	; () banked
  2892  002752  6FD1               	movwf	(___fttol@lval+2)& (0+255),b
  2893  002754  0100               	movlb	0	; () banked
  2894  002756  6BD2               	clrf	(___fttol@lval+3)& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897  002758  0E8E               	movlw	142
  2898  00275A  0100               	movlb	0	; () banked
  2899  00275C  5FD3               	subwf	___fttol@exp1& (0+255),f,b
  2900                           
  2901                           ; BSR set to: 0
  2902  00275E  0100               	movlb	0	; () banked
  2903  002760  AFD3               	btfss	___fttol@exp1& (0+255),7,b
  2904  002762  D013               	goto	l3567
  2905                           
  2906                           ; BSR set to: 0
  2907  002764  0100               	movlb	0	; () banked
  2908  002766  51D3               	movf	___fttol@exp1& (0+255),w,b
  2909  002768  0A80               	xorlw	128
  2910  00276A  0F8F               	addlw	143
  2911  00276C  B0D8               	btfsc	status,0,c
  2912  00276E  D003               	goto	l3563
  2913  002770  D010               	goto	l3569
  2914                           
  2915                           ; BSR set to: 0
  2916                           
  2917                           ; BSR set to: 0
  2918  002772  D042               	goto	l986
  2919                           
  2920                           ; BSR set to: 0
  2921  002774  D000               	goto	l3563
  2922  002776                     l3563:
  2923                           
  2924                           ; BSR set to: 0
  2925  002776  0100               	movlb	0	; () banked
  2926  002778  90D8               	bcf	status,0,c
  2927  00277A  33D2               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2928  00277C  33D1               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2929  00277E  33D0               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2930  002780  33CF               	rrcf	___fttol@lval& (0+255),f,b
  2931                           
  2932                           ; BSR set to: 0
  2933  002782  0100               	movlb	0	; () banked
  2934  002784  3FD3               	incfsz	___fttol@exp1& (0+255),f,b
  2935  002786  D7F7               	goto	l3563
  2936                           
  2937                           ; BSR set to: 0
  2938  002788  D01F               	goto	l3577
  2939  00278A                     l3567:
  2940                           
  2941                           ; BSR set to: 0
  2942  00278A  0E17               	movlw	23
  2943  00278C  0100               	movlb	0	; () banked
  2944  00278E  65D3               	cpfsgt	___fttol@exp1& (0+255),b
  2945  002790  D014               	goto	l3575
  2946  002792                     l3569:
  2947                           
  2948                           ; BSR set to: 0
  2949  002792  0E00               	movlw	0
  2950  002794  0100               	movlb	0	; () banked
  2951  002796  6FC5               	movwf	?___fttol& (0+255),b
  2952  002798  0E00               	movlw	0
  2953  00279A  6FC6               	movwf	(?___fttol+1)& (0+255),b
  2954  00279C  0E00               	movlw	0
  2955  00279E  6FC7               	movwf	(?___fttol+2)& (0+255),b
  2956  0027A0  0E00               	movlw	0
  2957  0027A2  6FC8               	movwf	(?___fttol+3)& (0+255),b
  2958                           
  2959                           ; BSR set to: 0
  2960  0027A4  D029               	goto	l986
  2961                           
  2962                           ; BSR set to: 0
  2963  0027A6  D009               	goto	l3575
  2964  0027A8                     l3573:
  2965                           
  2966                           ; BSR set to: 0
  2967  0027A8  0100               	movlb	0	; () banked
  2968  0027AA  90D8               	bcf	status,0,c
  2969  0027AC  37CF               	rlcf	___fttol@lval& (0+255),f,b
  2970  0027AE  37D0               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2971  0027B0  37D1               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2972  0027B2  37D2               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2973  0027B4  0100               	movlb	0	; () banked
  2974  0027B6  07D3               	decf	___fttol@exp1& (0+255),f,b
  2975  0027B8  D000               	goto	l3575
  2976  0027BA                     l3575:
  2977                           
  2978                           ; BSR set to: 0
  2979  0027BA  0100               	movlb	0	; () banked
  2980  0027BC  51D3               	movf	___fttol@exp1& (0+255),w,b
  2981  0027BE  0100               	movlb	0	; () banked
  2982  0027C0  B4D8               	btfsc	status,2,c
  2983  0027C2  D002               	goto	l3577
  2984  0027C4  D7F1               	goto	l3573
  2985                           
  2986                           ; BSR set to: 0
  2987  0027C6  D000               	goto	l3577
  2988  0027C8                     l3577:
  2989                           
  2990                           ; BSR set to: 0
  2991  0027C8  0100               	movlb	0	; () banked
  2992  0027CA  51CE               	movf	___fttol@sign1& (0+255),w,b
  2993  0027CC  0100               	movlb	0	; () banked
  2994  0027CE  B4D8               	btfsc	status,2,c
  2995  0027D0  D00A               	goto	l3581
  2996                           
  2997                           ; BSR set to: 0
  2998  0027D2  0100               	movlb	0	; () banked
  2999  0027D4  1FD2               	comf	(___fttol@lval+3)& (0+255),f,b
  3000  0027D6  1FD1               	comf	(___fttol@lval+2)& (0+255),f,b
  3001  0027D8  1FD0               	comf	(___fttol@lval+1)& (0+255),f,b
  3002  0027DA  6DCF               	negf	___fttol@lval& (0+255),b
  3003  0027DC  0E00               	movlw	0
  3004  0027DE  23D0               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3005  0027E0  23D1               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3006  0027E2  23D2               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3007  0027E4  D000               	goto	l3581
  3008  0027E6                     l3581:
  3009                           
  3010                           ; BSR set to: 0
  3011  0027E6  C0CF  F0C5         	movff	___fttol@lval,?___fttol
  3012  0027EA  C0D0  F0C6         	movff	___fttol@lval+1,?___fttol+1
  3013  0027EE  C0D1  F0C7         	movff	___fttol@lval+2,?___fttol+2
  3014  0027F2  C0D2  F0C8         	movff	___fttol@lval+3,?___fttol+3
  3015  0027F6  D000               	goto	l986
  3016  0027F8                     l986:
  3017                           
  3018                           ; BSR set to: 0
  3019  0027F8  0012               	return		;funcret
  3020  0027FA                     __end_of___fttol:
  3021                           	opt stack 0
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           intcon	equ	0xFF2
  3027                           intcon2	equ	0xFF1
  3028                           indf0	equ	0xFEF
  3029                           postinc0	equ	0xFEE
  3030                           fsr0h	equ	0xFEA
  3031                           fsr0l	equ	0xFE9
  3032                           wreg	equ	0xFE8
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function ___ftmul *****************
  3036 ;; Defined at:
  3037 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  f1              3   22[BANK0 ] float 
  3040 ;;  f2              3   25[BANK0 ] float 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
  3043 ;;  sign            1   36[BANK0 ] unsigned char 
  3044 ;;  cntr            1   35[BANK0 ] unsigned char 
  3045 ;;  exp             1   31[BANK0 ] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  3   22[BANK0 ] float 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:       15 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    7
  3062 ;; This function calls:
  3063 ;;		___ftpack
  3064 ;; This function is called by:
  3065 ;;		_LCDBreakDouble
  3066 ;;		_breakDouble
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text20
  3071  002436                     __ptext20:
  3072                           	opt stack 0
  3073  002436                     ___ftmul:
  3074                           	opt stack 22
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;incstack = 0
  3078  002436  C0B8  F0BC         	movff	___ftmul@f1+2,??___ftmul
  3079  00243A  0100               	movlb	0	; () banked
  3080  00243C  6BBD               	clrf	(??___ftmul+1)& (0+255),b
  3081  00243E  6BBE               	clrf	(??___ftmul+2)& (0+255),b
  3082  002440  0100               	movlb	0	; () banked
  3083  002442  35B7               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3084  002444  0100               	movlb	0	; () banked
  3085  002446  37BC               	rlcf	??___ftmul& (0+255),f,b
  3086  002448  E301               	bnc	u4001
  3087  00244A  81BD               	bsf	(??___ftmul+1)& (0+255),0,b
  3088  00244C                     u4001:
  3089  00244C  0100               	movlb	0	; () banked
  3090  00244E  51BC               	movf	??___ftmul& (0+255),w,b
  3091  002450  0100               	movlb	0	; () banked
  3092  002452  6FBF               	movwf	___ftmul@exp& (0+255),b
  3093  002454  0100               	movlb	0	; () banked
  3094  002456  51BF               	movf	___ftmul@exp& (0+255),w,b
  3095  002458  A4D8               	btfss	status,2,c
  3096  00245A  D002               	goto	l3497
  3097  00245C  D014               	goto	l3499
  3098                           
  3099                           ; BSR set to: 0
  3100                           
  3101                           ; BSR set to: 0
  3102  00245E  D098               	goto	l965
  3103  002460                     l3497:
  3104                           
  3105                           ; BSR set to: 0
  3106  002460  C0BB  F0BC         	movff	___ftmul@f2+2,??___ftmul
  3107  002464  0100               	movlb	0	; () banked
  3108  002466  6BBD               	clrf	(??___ftmul+1)& (0+255),b
  3109  002468  6BBE               	clrf	(??___ftmul+2)& (0+255),b
  3110  00246A  0100               	movlb	0	; () banked
  3111  00246C  35BA               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3112  00246E  0100               	movlb	0	; () banked
  3113  002470  37BC               	rlcf	??___ftmul& (0+255),f,b
  3114  002472  E301               	bnc	u4021
  3115  002474  81BD               	bsf	(??___ftmul+1)& (0+255),0,b
  3116  002476                     u4021:
  3117  002476  0100               	movlb	0	; () banked
  3118  002478  51BC               	movf	??___ftmul& (0+255),w,b
  3119  00247A  0100               	movlb	0	; () banked
  3120  00247C  6FC4               	movwf	___ftmul@sign& (0+255),b
  3121  00247E  0100               	movlb	0	; () banked
  3122  002480  51C4               	movf	___ftmul@sign& (0+255),w,b
  3123  002482  A4D8               	btfss	status,2,c
  3124  002484  D00A               	goto	l3503
  3125  002486                     l3499:
  3126                           
  3127                           ; BSR set to: 0
  3128  002486  0E00               	movlw	0
  3129  002488  0100               	movlb	0	; () banked
  3130  00248A  6FB6               	movwf	?___ftmul& (0+255),b
  3131  00248C  0E00               	movlw	0
  3132  00248E  0100               	movlb	0	; () banked
  3133  002490  6FB7               	movwf	(?___ftmul+1)& (0+255),b
  3134  002492  0E00               	movlw	0
  3135  002494  0100               	movlb	0	; () banked
  3136  002496  6FB8               	movwf	(?___ftmul+2)& (0+255),b
  3137                           
  3138                           ; BSR set to: 0
  3139  002498  D07B               	goto	l965
  3140  00249A                     l3503:
  3141                           
  3142                           ; BSR set to: 0
  3143  00249A  0100               	movlb	0	; () banked
  3144  00249C  51C4               	movf	___ftmul@sign& (0+255),w,b
  3145  00249E  0F7B               	addlw	123
  3146  0024A0  0100               	movlb	0	; () banked
  3147  0024A2  27BF               	addwf	___ftmul@exp& (0+255),f,b
  3148                           
  3149                           ; BSR set to: 0
  3150  0024A4  C0B8  F0C4         	movff	___ftmul@f1+2,___ftmul@sign
  3151  0024A8  0100               	movlb	0	; () banked
  3152  0024AA  51BB               	movf	(___ftmul@f2+2)& (0+255),w,b
  3153  0024AC  0100               	movlb	0	; () banked
  3154  0024AE  1BC4               	xorwf	___ftmul@sign& (0+255),f,b
  3155  0024B0  0E80               	movlw	128
  3156  0024B2  0100               	movlb	0	; () banked
  3157  0024B4  17C4               	andwf	___ftmul@sign& (0+255),f,b
  3158                           
  3159                           ; BSR set to: 0
  3160  0024B6  0100               	movlb	0	; () banked
  3161  0024B8  8FB7               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3162                           
  3163                           ; BSR set to: 0
  3164  0024BA  0100               	movlb	0	; () banked
  3165  0024BC  8FBA               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3166                           
  3167                           ; BSR set to: 0
  3168  0024BE  0EFF               	movlw	255
  3169  0024C0  0100               	movlb	0	; () banked
  3170  0024C2  17B9               	andwf	___ftmul@f2& (0+255),f,b
  3171  0024C4  0EFF               	movlw	255
  3172  0024C6  0100               	movlb	0	; () banked
  3173  0024C8  17BA               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3174  0024CA  0E00               	movlw	0
  3175  0024CC  0100               	movlb	0	; () banked
  3176  0024CE  17BB               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3177                           
  3178                           ; BSR set to: 0
  3179  0024D0  0E00               	movlw	0
  3180  0024D2  0100               	movlb	0	; () banked
  3181  0024D4  6FC0               	movwf	___ftmul@f3_as_product& (0+255),b
  3182  0024D6  0E00               	movlw	0
  3183  0024D8  0100               	movlb	0	; () banked
  3184  0024DA  6FC1               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3185  0024DC  0E00               	movlw	0
  3186  0024DE  0100               	movlb	0	; () banked
  3187  0024E0  6FC2               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3188                           
  3189                           ; BSR set to: 0
  3190  0024E2  0E07               	movlw	7
  3191  0024E4  0100               	movlb	0	; () banked
  3192  0024E6  6FC3               	movwf	___ftmul@cntr& (0+255),b
  3193  0024E8  D000               	goto	l3517
  3194  0024EA                     l3517:
  3195                           
  3196                           ; BSR set to: 0
  3197  0024EA  0100               	movlb	0	; () banked
  3198  0024EC  A1B6               	btfss	___ftmul@f1& (0+255),0,b
  3199  0024EE  D00D               	goto	l3521
  3200                           
  3201                           ; BSR set to: 0
  3202  0024F0  0100               	movlb	0	; () banked
  3203  0024F2  51B9               	movf	___ftmul@f2& (0+255),w,b
  3204  0024F4  0100               	movlb	0	; () banked
  3205  0024F6  27C0               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3206  0024F8  0100               	movlb	0	; () banked
  3207  0024FA  51BA               	movf	(___ftmul@f2+1)& (0+255),w,b
  3208  0024FC  0100               	movlb	0	; () banked
  3209  0024FE  23C1               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3210  002500  0100               	movlb	0	; () banked
  3211  002502  51BB               	movf	(___ftmul@f2+2)& (0+255),w,b
  3212  002504  0100               	movlb	0	; () banked
  3213  002506  23C2               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3214  002508  D000               	goto	l3521
  3215  00250A                     l3521:
  3216                           
  3217                           ; BSR set to: 0
  3218  00250A  0100               	movlb	0	; () banked
  3219  00250C  90D8               	bcf	status,0,c
  3220  00250E  33B8               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3221  002510  33B7               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3222  002512  33B6               	rrcf	___ftmul@f1& (0+255),f,b
  3223  002514  0100               	movlb	0	; () banked
  3224  002516  90D8               	bcf	status,0,c
  3225  002518  37B9               	rlcf	___ftmul@f2& (0+255),f,b
  3226  00251A  37BA               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3227  00251C  37BB               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3228                           
  3229                           ; BSR set to: 0
  3230  00251E  0100               	movlb	0	; () banked
  3231  002520  2FC3               	decfsz	___ftmul@cntr& (0+255),f,b
  3232  002522  D7E3               	goto	l3517
  3233  002524  D000               	goto	l3525
  3234  002526                     l3525:
  3235                           
  3236                           ; BSR set to: 0
  3237  002526  0E09               	movlw	9
  3238  002528  0100               	movlb	0	; () banked
  3239  00252A  6FC3               	movwf	___ftmul@cntr& (0+255),b
  3240  00252C  D000               	goto	l3527
  3241  00252E                     l3527:
  3242                           
  3243                           ; BSR set to: 0
  3244  00252E  0100               	movlb	0	; () banked
  3245  002530  A1B6               	btfss	___ftmul@f1& (0+255),0,b
  3246  002532  D00D               	goto	l3531
  3247                           
  3248                           ; BSR set to: 0
  3249  002534  0100               	movlb	0	; () banked
  3250  002536  51B9               	movf	___ftmul@f2& (0+255),w,b
  3251  002538  0100               	movlb	0	; () banked
  3252  00253A  27C0               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3253  00253C  0100               	movlb	0	; () banked
  3254  00253E  51BA               	movf	(___ftmul@f2+1)& (0+255),w,b
  3255  002540  0100               	movlb	0	; () banked
  3256  002542  23C1               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3257  002544  0100               	movlb	0	; () banked
  3258  002546  51BB               	movf	(___ftmul@f2+2)& (0+255),w,b
  3259  002548  0100               	movlb	0	; () banked
  3260  00254A  23C2               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3261  00254C  D000               	goto	l3531
  3262  00254E                     l3531:
  3263                           
  3264                           ; BSR set to: 0
  3265  00254E  0100               	movlb	0	; () banked
  3266  002550  90D8               	bcf	status,0,c
  3267  002552  33B8               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3268  002554  33B7               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3269  002556  33B6               	rrcf	___ftmul@f1& (0+255),f,b
  3270  002558  0100               	movlb	0	; () banked
  3271  00255A  90D8               	bcf	status,0,c
  3272  00255C  33C2               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3273  00255E  33C1               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3274  002560  33C0               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3275                           
  3276                           ; BSR set to: 0
  3277  002562  0100               	movlb	0	; () banked
  3278  002564  2FC3               	decfsz	___ftmul@cntr& (0+255),f,b
  3279  002566  D7E3               	goto	l3527
  3280  002568  D000               	goto	l3535
  3281  00256A                     l3535:
  3282                           
  3283                           ; BSR set to: 0
  3284  00256A  C0C0  F0AE         	movff	___ftmul@f3_as_product,___ftpack@arg
  3285  00256E  C0C1  F0AF         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3286  002572  C0C2  F0B0         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3287  002576  C0BF  F0B1         	movff	___ftmul@exp,___ftpack@exp
  3288  00257A  C0C4  F0B2         	movff	___ftmul@sign,___ftpack@sign
  3289  00257E  ECFD  F013         	call	___ftpack	;wreg free
  3290  002582  C0AE  F0B6         	movff	?___ftpack,?___ftmul
  3291  002586  C0AF  F0B7         	movff	?___ftpack+1,?___ftmul+1
  3292  00258A  C0B0  F0B8         	movff	?___ftpack+2,?___ftmul+2
  3293  00258E  D000               	goto	l965
  3294  002590                     l965:
  3295  002590  0012               	return		;funcret
  3296  002592                     __end_of___ftmul:
  3297                           	opt stack 0
  3298                           tblptru	equ	0xFF8
  3299                           tblptrh	equ	0xFF7
  3300                           tblptrl	equ	0xFF6
  3301                           tablat	equ	0xFF5
  3302                           intcon	equ	0xFF2
  3303                           intcon2	equ	0xFF1
  3304                           indf0	equ	0xFEF
  3305                           postinc0	equ	0xFEE
  3306                           fsr0h	equ	0xFEA
  3307                           fsr0l	equ	0xFE9
  3308                           wreg	equ	0xFE8
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function ___ftpack *****************
  3312 ;; Defined at:
  3313 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  arg             3   14[BANK0 ] unsigned um
  3316 ;;  exp             1   17[BANK0 ] unsigned char 
  3317 ;;  sign            1   18[BANK0 ] unsigned char 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  3   14[BANK0 ] float 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3329 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;Total ram usage:        8 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    6
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		___ftmul
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text21
  3344  0027FA                     __ptext21:
  3345                           	opt stack 0
  3346  0027FA                     ___ftpack:
  3347                           	opt stack 22
  3348                           
  3349                           ;incstack = 0
  3350  0027FA  0100               	movlb	0	; () banked
  3351  0027FC  51B1               	movf	___ftpack@exp& (0+255),w,b
  3352  0027FE  0100               	movlb	0	; () banked
  3353  002800  B4D8               	btfsc	status,2,c
  3354  002802  D008               	goto	l3013
  3355                           
  3356                           ; BSR set to: 0
  3357  002804  0100               	movlb	0	; () banked
  3358  002806  51AE               	movf	___ftpack@arg& (0+255),w,b
  3359  002808  0100               	movlb	0	; () banked
  3360  00280A  11AF               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3361  00280C  0100               	movlb	0	; () banked
  3362  00280E  11B0               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3363  002810  A4D8               	btfss	status,2,c
  3364  002812  D013               	goto	l3019
  3365  002814                     l3013:
  3366                           
  3367                           ; BSR set to: 0
  3368  002814  0E00               	movlw	0
  3369  002816  0100               	movlb	0	; () banked
  3370  002818  6FAE               	movwf	?___ftpack& (0+255),b
  3371  00281A  0E00               	movlw	0
  3372  00281C  0100               	movlb	0	; () banked
  3373  00281E  6FAF               	movwf	(?___ftpack+1)& (0+255),b
  3374  002820  0E00               	movlw	0
  3375  002822  0100               	movlb	0	; () banked
  3376  002824  6FB0               	movwf	(?___ftpack+2)& (0+255),b
  3377                           
  3378                           ; BSR set to: 0
  3379  002826  D078               	goto	l878
  3380                           
  3381                           ; BSR set to: 0
  3382  002828  D008               	goto	l3019
  3383  00282A                     l3017:
  3384                           
  3385                           ; BSR set to: 0
  3386  00282A  0100               	movlb	0	; () banked
  3387  00282C  2BB1               	incf	___ftpack@exp& (0+255),f,b
  3388  00282E  0100               	movlb	0	; () banked
  3389  002830  90D8               	bcf	status,0,c
  3390  002832  33B0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3391  002834  33AF               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3392  002836  33AE               	rrcf	___ftpack@arg& (0+255),f,b
  3393  002838  D000               	goto	l3019
  3394  00283A                     l3019:
  3395                           
  3396                           ; BSR set to: 0
  3397  00283A  0E00               	movlw	0
  3398  00283C  0100               	movlb	0	; () banked
  3399  00283E  15AE               	andwf	___ftpack@arg& (0+255),w,b
  3400  002840  0100               	movlb	0	; () banked
  3401  002842  6FB3               	movwf	??___ftpack& (0+255),b
  3402  002844  0E00               	movlw	0
  3403  002846  0100               	movlb	0	; () banked
  3404  002848  15AF               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3405  00284A  0100               	movlb	0	; () banked
  3406  00284C  6FB4               	movwf	(??___ftpack+1)& (0+255),b
  3407  00284E  0EFE               	movlw	254
  3408  002850  0100               	movlb	0	; () banked
  3409  002852  15B0               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3410  002854  0100               	movlb	0	; () banked
  3411  002856  6FB5               	movwf	(??___ftpack+2)& (0+255),b
  3412  002858  0100               	movlb	0	; () banked
  3413  00285A  51B3               	movf	??___ftpack& (0+255),w,b
  3414  00285C  0100               	movlb	0	; () banked
  3415  00285E  11B4               	iorwf	(??___ftpack+1)& (0+255),w,b
  3416  002860  0100               	movlb	0	; () banked
  3417  002862  11B5               	iorwf	(??___ftpack+2)& (0+255),w,b
  3418  002864  B4D8               	btfsc	status,2,c
  3419  002866  D013               	goto	l3025
  3420  002868  D7E0               	goto	l3017
  3421                           
  3422                           ; BSR set to: 0
  3423  00286A  D011               	goto	l3025
  3424  00286C                     l3021:
  3425                           
  3426                           ; BSR set to: 0
  3427  00286C  0100               	movlb	0	; () banked
  3428  00286E  2BB1               	incf	___ftpack@exp& (0+255),f,b
  3429                           
  3430                           ; BSR set to: 0
  3431  002870  0E01               	movlw	1
  3432  002872  0100               	movlb	0	; () banked
  3433  002874  27AE               	addwf	___ftpack@arg& (0+255),f,b
  3434  002876  0E00               	movlw	0
  3435  002878  0100               	movlb	0	; () banked
  3436  00287A  23AF               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3437  00287C  0E00               	movlw	0
  3438  00287E  0100               	movlb	0	; () banked
  3439  002880  23B0               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3440  002882  0100               	movlb	0	; () banked
  3441  002884  90D8               	bcf	status,0,c
  3442  002886  33B0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3443  002888  33AF               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3444  00288A  33AE               	rrcf	___ftpack@arg& (0+255),f,b
  3445  00288C  D000               	goto	l3025
  3446  00288E                     l3025:
  3447                           
  3448                           ; BSR set to: 0
  3449  00288E  0E00               	movlw	0
  3450  002890  0100               	movlb	0	; () banked
  3451  002892  15AE               	andwf	___ftpack@arg& (0+255),w,b
  3452  002894  0100               	movlb	0	; () banked
  3453  002896  6FB3               	movwf	??___ftpack& (0+255),b
  3454  002898  0E00               	movlw	0
  3455  00289A  0100               	movlb	0	; () banked
  3456  00289C  15AF               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3457  00289E  0100               	movlb	0	; () banked
  3458  0028A0  6FB4               	movwf	(??___ftpack+1)& (0+255),b
  3459  0028A2  0EFF               	movlw	255
  3460  0028A4  0100               	movlb	0	; () banked
  3461  0028A6  15B0               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3462  0028A8  0100               	movlb	0	; () banked
  3463  0028AA  6FB5               	movwf	(??___ftpack+2)& (0+255),b
  3464  0028AC  0100               	movlb	0	; () banked
  3465  0028AE  51B3               	movf	??___ftpack& (0+255),w,b
  3466  0028B0  0100               	movlb	0	; () banked
  3467  0028B2  11B4               	iorwf	(??___ftpack+1)& (0+255),w,b
  3468  0028B4  0100               	movlb	0	; () banked
  3469  0028B6  11B5               	iorwf	(??___ftpack+2)& (0+255),w,b
  3470  0028B8  B4D8               	btfsc	status,2,c
  3471  0028BA  D00A               	goto	l3029
  3472  0028BC  D7D7               	goto	l3021
  3473                           
  3474                           ; BSR set to: 0
  3475  0028BE  D008               	goto	l3029
  3476  0028C0                     l3027:
  3477                           
  3478                           ; BSR set to: 0
  3479  0028C0  0100               	movlb	0	; () banked
  3480  0028C2  07B1               	decf	___ftpack@exp& (0+255),f,b
  3481  0028C4  0100               	movlb	0	; () banked
  3482  0028C6  90D8               	bcf	status,0,c
  3483  0028C8  37AE               	rlcf	___ftpack@arg& (0+255),f,b
  3484  0028CA  37AF               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3485  0028CC  37B0               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3486  0028CE  D000               	goto	l3029
  3487  0028D0                     l3029:
  3488                           
  3489                           ; BSR set to: 0
  3490  0028D0  0100               	movlb	0	; () banked
  3491  0028D2  BFAF               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3492  0028D4  D005               	goto	l889
  3493                           
  3494                           ; BSR set to: 0
  3495  0028D6  0E02               	movlw	2
  3496  0028D8  0100               	movlb	0	; () banked
  3497  0028DA  61B1               	cpfslt	___ftpack@exp& (0+255),b
  3498  0028DC  D7F1               	goto	l3027
  3499  0028DE  D000               	goto	l889
  3500  0028E0                     l889:
  3501                           
  3502                           ; BSR set to: 0
  3503  0028E0  0100               	movlb	0	; () banked
  3504  0028E2  B1B1               	btfsc	___ftpack@exp& (0+255),0,b
  3505  0028E4  D003               	goto	l3035
  3506                           
  3507                           ; BSR set to: 0
  3508  0028E6  0100               	movlb	0	; () banked
  3509  0028E8  9FAF               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3510  0028EA  D000               	goto	l3035
  3511  0028EC                     l3035:
  3512                           
  3513                           ; BSR set to: 0
  3514  0028EC  0100               	movlb	0	; () banked
  3515  0028EE  90D8               	bcf	status,0,c
  3516  0028F0  33B1               	rrcf	___ftpack@exp& (0+255),f,b
  3517  0028F2  0100               	movlb	0	; () banked
  3518  0028F4  51B1               	movf	___ftpack@exp& (0+255),w,b
  3519  0028F6  0100               	movlb	0	; () banked
  3520  0028F8  13B0               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3521                           
  3522                           ; BSR set to: 0
  3523  0028FA  0100               	movlb	0	; () banked
  3524  0028FC  51B2               	movf	___ftpack@sign& (0+255),w,b
  3525  0028FE  0100               	movlb	0	; () banked
  3526  002900  B4D8               	btfsc	status,2,c
  3527  002902  D003               	goto	l3041
  3528                           
  3529                           ; BSR set to: 0
  3530  002904  0100               	movlb	0	; () banked
  3531  002906  8FB0               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3532  002908  D000               	goto	l3041
  3533  00290A                     l3041:
  3534                           
  3535                           ; BSR set to: 0
  3536  00290A  C0AE  F0AE         	movff	___ftpack@arg,?___ftpack
  3537  00290E  C0AF  F0AF         	movff	___ftpack@arg+1,?___ftpack+1
  3538  002912  C0B0  F0B0         	movff	___ftpack@arg+2,?___ftpack+2
  3539  002916  D000               	goto	l878
  3540  002918                     l878:
  3541                           
  3542                           ; BSR set to: 0
  3543  002918  0012               	return		;funcret
  3544  00291A                     __end_of___ftpack:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           intcon	equ	0xFF2
  3551                           intcon2	equ	0xFF1
  3552                           indf0	equ	0xFEF
  3553                           postinc0	equ	0xFEE
  3554                           fsr0h	equ	0xFEA
  3555                           fsr0l	equ	0xFE9
  3556                           wreg	equ	0xFE8
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _ISR *****************
  3560 ;; Defined at:
  3561 ;;		line 49 in file "PIDLoop.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;		None               void
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:       14 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    5
  3582 ;; This function calls:
  3583 ;;		_RCInt
  3584 ;;		_TMR0Int
  3585 ;; This function is called by:
  3586 ;;		Interrupt level 2
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	intcode
  3591  000008                     __pintcode:
  3592                           	opt stack 0
  3593  000008                     _ISR:
  3594                           	opt stack 20
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;incstack = 0
  3598  000008  CFFA F0A0          	movff	pclath,??_ISR
  3599  00000C  CFFB F0A1          	movff	pclatu,??_ISR+1
  3600  000010  CFE9 F0A2          	movff	fsr0l,??_ISR+2
  3601  000014  EDDC  F016         	call	int_func,f	;refresh shadow registers
  3602                           pclatu	equ	0xFFB
  3603                           pclath	equ	0xFFA
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           intcon	equ	0xFF2
  3609                           intcon2	equ	0xFF1
  3610                           indf0	equ	0xFEF
  3611                           postinc0	equ	0xFEE
  3612                           fsr0h	equ	0xFEA
  3613                           fsr0l	equ	0xFE9
  3614                           wreg	equ	0xFE8
  3615                           status	equ	0xFD8
  3616                           
  3617                           	psect	intcode_body
  3618  002DB8                     __pintcode_body:
  3619                           	opt stack 20
  3620  002DB8                     int_func:
  3621                           	opt stack 20
  3622  002DB8  0006               	pop		; remove dummy address from shadow register refresh
  3623  002DBA  CFEA F0A3          	movff	fsr0h,??_ISR+3
  3624  002DBE  CFE1 F0A4          	movff	fsr1l,??_ISR+4
  3625  002DC2  CFE2 F0A5          	movff	fsr1h,??_ISR+5
  3626  002DC6  CFD9 F0A6          	movff	fsr2l,??_ISR+6
  3627  002DCA  CFDA F0A7          	movff	fsr2h,??_ISR+7
  3628  002DCE  CFF3 F0A8          	movff	prodl,??_ISR+8
  3629  002DD2  CFF4 F0A9          	movff	prodh,??_ISR+9
  3630  002DD6  CFF6 F0AA          	movff	tblptrl,??_ISR+10
  3631  002DDA  CFF7 F0AB          	movff	tblptrh,??_ISR+11
  3632  002DDE  CFF8 F0AC          	movff	tblptru,??_ISR+12
  3633  002DE2  CFF5 F0AD          	movff	tablat,??_ISR+13
  3634                           
  3635                           ;PIDLoop.c: 51: if (PIR1bits.RC1IF == 1)
  3636  002DE6  AA9E               	btfss	3998,5,c	;volatile
  3637  002DE8  D003               	goto	i2l202
  3638                           
  3639                           ;PIDLoop.c: 52: RCInt();
  3640  002DEA  ECC9  F012         	call	_RCInt	;wreg free
  3641  002DEE  D006               	goto	i2l205
  3642  002DF0                     i2l202:
  3643                           
  3644                           ;PIDLoop.c: 53: else if ((INTCONbits.TMR0IF == 1) && (INTCONbits.TMR0IE == 1))
  3645  002DF0  B4F2               	btfsc	intcon,2,c	;volatile
  3646  002DF2  AAF2               	btfss	intcon,5,c	;volatile
  3647  002DF4  D003               	goto	i2l205
  3648                           
  3649                           ;PIDLoop.c: 54: TMR0Int();
  3650  002DF6  EC91  F018         	call	_TMR0Int	;wreg free
  3651  002DFA  D000               	goto	i2l205
  3652  002DFC                     i2l205:
  3653  002DFC  C0AD  FFF5         	movff	??_ISR+13,tablat
  3654  002E00  C0AC  FFF8         	movff	??_ISR+12,tblptru
  3655  002E04  C0AB  FFF7         	movff	??_ISR+11,tblptrh
  3656  002E08  C0AA  FFF6         	movff	??_ISR+10,tblptrl
  3657  002E0C  C0A9  FFF4         	movff	??_ISR+9,prodh
  3658  002E10  C0A8  FFF3         	movff	??_ISR+8,prodl
  3659  002E14  C0A7  FFDA         	movff	??_ISR+7,fsr2h
  3660  002E18  C0A6  FFD9         	movff	??_ISR+6,fsr2l
  3661  002E1C  C0A5  FFE2         	movff	??_ISR+5,fsr1h
  3662  002E20  C0A4  FFE1         	movff	??_ISR+4,fsr1l
  3663  002E24  C0A3  FFEA         	movff	??_ISR+3,fsr0h
  3664  002E28  C0A2  FFE9         	movff	??_ISR+2,fsr0l
  3665  002E2C  C0A1  FFFB         	movff	??_ISR+1,pclatu
  3666  002E30  C0A0  FFFA         	movff	??_ISR,pclath
  3667  002E34  0011               	retfie		f
  3668  002E36                     __end_of_ISR:
  3669                           	opt stack 0
  3670                           pclatu	equ	0xFFB
  3671                           pclath	equ	0xFFA
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           intcon	equ	0xFF2
  3679                           intcon2	equ	0xFF1
  3680                           indf0	equ	0xFEF
  3681                           postinc0	equ	0xFEE
  3682                           fsr0h	equ	0xFEA
  3683                           fsr0l	equ	0xFE9
  3684                           wreg	equ	0xFE8
  3685                           fsr1h	equ	0xFE2
  3686                           fsr1l	equ	0xFE1
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _TMR0Int *****************
  3692 ;; Defined at:
  3693 ;;		line 89 in file "PID.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;		None
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;		None
  3698 ;; Return value:  Size  Location     Type
  3699 ;;		None               void
  3700 ;; Registers used:
  3701 ;;		wreg, status,2, status,0, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;Total ram usage:        0 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    3
  3714 ;; This function calls:
  3715 ;;		_ImplementPIDMotion
  3716 ;;		_RTD2Angle
  3717 ;;		_calculatePID
  3718 ;; This function is called by:
  3719 ;;		_ISR
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text23
  3724  003122                     __ptext23:
  3725                           	opt stack 0
  3726  003122                     _TMR0Int:
  3727                           	opt stack 21
  3728                           
  3729                           ;PID.c: 91: CurrentAngle = RTD2Angle(ReadRTDpos);
  3730                           
  3731                           ;incstack = 0
  3732  003122  0E00               	movlw	0
  3733  003124  6E28               	movwf	RTD2Angle@RTDAngle+1,c
  3734  003126  0E00               	movlw	0
  3735  003128  6E27               	movwf	RTD2Angle@RTDAngle,c
  3736  00312A  EC19  F019         	call	_RTD2Angle	;wreg free
  3737  00312E  C027  F060         	movff	?_RTD2Angle,_CurrentAngle
  3738  003132  C028  F061         	movff	?_RTD2Angle+1,_CurrentAngle+1
  3739  003136  C029  F062         	movff	?_RTD2Angle+2,_CurrentAngle+2
  3740                           
  3741                           ;PID.c: 92: calculatePID(CurrentAngle, SetAngle);
  3742  00313A  C060  F042         	movff	_CurrentAngle,calculatePID@angle
  3743  00313E  C061  F043         	movff	_CurrentAngle+1,calculatePID@angle+1
  3744  003142  C062  F044         	movff	_CurrentAngle+2,calculatePID@angle+2
  3745  003146  C06F  F045         	movff	_SetAngle,calculatePID@setpoint
  3746  00314A  C070  F046         	movff	_SetAngle+1,calculatePID@setpoint+1
  3747  00314E  C071  F047         	movff	_SetAngle+2,calculatePID@setpoint+2
  3748  003152  EC39  F008         	call	_calculatePID	;wreg free
  3749                           
  3750                           ;PID.c: 93: ImplementPIDMotion(motorInput);
  3751  003156  C075  F005         	movff	_motorInput,ImplementPIDMotion@PIDValue
  3752  00315A  C076  F006         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  3753  00315E  EC8F  F017         	call	_ImplementPIDMotion	;wreg free
  3754                           
  3755                           ;PID.c: 94: TMR0H = 0xDB;
  3756  003162  0EDB               	movlw	219
  3757  003164  6ED7               	movwf	4055,c	;volatile
  3758                           
  3759                           ;PID.c: 95: TMR0L = 0x60;
  3760  003166  0E60               	movlw	96
  3761  003168  6ED6               	movwf	4054,c	;volatile
  3762                           
  3763                           ;PID.c: 97: INTCONbits.TMR0IF = 0;
  3764  00316A  94F2               	bcf	intcon,2,c	;volatile
  3765  00316C  0012               	return		;funcret
  3766  00316E                     __end_of_TMR0Int:
  3767                           	opt stack 0
  3768                           pclatu	equ	0xFFB
  3769                           pclath	equ	0xFFA
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           intcon	equ	0xFF2
  3777                           intcon2	equ	0xFF1
  3778                           indf0	equ	0xFEF
  3779                           postinc0	equ	0xFEE
  3780                           fsr0h	equ	0xFEA
  3781                           fsr0l	equ	0xFE9
  3782                           wreg	equ	0xFE8
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _calculatePID *****************
  3790 ;; Defined at:
  3791 ;;		line 29 in file "PID.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  angle           3   65[COMRAM] float 
  3794 ;;  setpoint        3   68[COMRAM] float 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  derErr          3   71[COMRAM] float 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;		None               void
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3806 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;Total ram usage:       18 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    2
  3813 ;; This function calls:
  3814 ;;		___ftadd
  3815 ;;		___ftdiv
  3816 ;;		___ftge
  3817 ;;		___ftneg
  3818 ;;		i2___ftmul
  3819 ;;		i2___fttol
  3820 ;; This function is called by:
  3821 ;;		_TMR0Int
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text24
  3826  001072                     __ptext24:
  3827                           	opt stack 0
  3828  001072                     _calculatePID:
  3829                           	opt stack 21
  3830                           
  3831                           ;PID.c: 31: double derErr;
  3832                           ;PID.c: 32: if((PIDEnableFlag & 0x02) == 0x02)
  3833                           
  3834                           ;incstack = 0
  3835  001072  A258               	btfss	_PIDEnableFlag,1,c
  3836  001074  D025               	goto	i2l3185
  3837                           
  3838                           ;PID.c: 33: {
  3839                           ;PID.c: 34: StartAngle = angle;
  3840  001076  C042  F055         	movff	calculatePID@angle,_StartAngle
  3841  00107A  C043  F056         	movff	calculatePID@angle+1,_StartAngle+1
  3842  00107E  C044  F057         	movff	calculatePID@angle+2,_StartAngle+2
  3843                           
  3844                           ;PID.c: 35: err = 0;
  3845  001082  0E00               	movlw	0
  3846  001084  0100               	movlb	0	; () banked
  3847  001086  6FDD               	movwf	_err& (0+255),b
  3848  001088  0E00               	movlw	0
  3849  00108A  0100               	movlb	0	; () banked
  3850  00108C  6FDE               	movwf	(_err+1)& (0+255),b
  3851  00108E  0E00               	movlw	0
  3852  001090  0100               	movlb	0	; () banked
  3853  001092  6FDF               	movwf	(_err+2)& (0+255),b
  3854                           
  3855                           ;PID.c: 36: prevErr = 0;
  3856  001094  0E00               	movlw	0
  3857  001096  0100               	movlb	0	; () banked
  3858  001098  6FE3               	movwf	_prevErr& (0+255),b
  3859  00109A  0E00               	movlw	0
  3860  00109C  0100               	movlb	0	; () banked
  3861  00109E  6FE4               	movwf	(_prevErr+1)& (0+255),b
  3862  0010A0  0E00               	movlw	0
  3863  0010A2  0100               	movlb	0	; () banked
  3864  0010A4  6FE5               	movwf	(_prevErr+2)& (0+255),b
  3865                           
  3866                           ;PID.c: 37: intErr = 0;
  3867  0010A6  0E00               	movlw	0
  3868  0010A8  0100               	movlb	0	; () banked
  3869  0010AA  6FE0               	movwf	_intErr& (0+255),b
  3870  0010AC  0E00               	movlw	0
  3871  0010AE  0100               	movlb	0	; () banked
  3872  0010B0  6FE1               	movwf	(_intErr+1)& (0+255),b
  3873  0010B2  0E00               	movlw	0
  3874  0010B4  0100               	movlb	0	; () banked
  3875  0010B6  6FE2               	movwf	(_intErr+2)& (0+255),b
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;PID.c: 38: PIDEnableFlag = PIDEnableFlag & 0x01;
  3879  0010B8  5058               	movf	_PIDEnableFlag,w,c
  3880  0010BA  0B01               	andlw	1
  3881  0010BC  6E58               	movwf	_PIDEnableFlag,c
  3882  0010BE  D000               	goto	i2l3185
  3883  0010C0                     i2l3185:
  3884                           
  3885                           ;PID.c: 39: }
  3886                           ;PID.c: 41: if(((StartAngle - setpoint) > 180) || ((StartAngle - setpoint) < -180))
  3887  0010C0  0E00               	movlw	0
  3888  0010C2  6E33               	movwf	___ftge@ff1,c
  3889  0010C4  0E34               	movlw	52
  3890  0010C6  6E34               	movwf	___ftge@ff1+1,c
  3891  0010C8  0E43               	movlw	67
  3892  0010CA  6E35               	movwf	___ftge@ff1+2,c
  3893  0010CC  C055  F02A         	movff	_StartAngle,___ftadd@f2
  3894  0010D0  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  3895  0010D4  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  3896  0010D8  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  3897  0010DC  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  3898  0010E0  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  3899  0010E4  ECCA  F019         	call	___ftneg	;wreg free
  3900  0010E8  C001  F027         	movff	?___ftneg,___ftadd@f1
  3901  0010EC  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3902  0010F0  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3903  0010F4  EC75  F010         	call	___ftadd	;wreg free
  3904  0010F8  C027  F036         	movff	?___ftadd,___ftge@ff2
  3905  0010FC  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  3906  001100  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  3907  001104  EC50  F016         	call	___ftge	;wreg free
  3908  001108  A0D8               	btfss	status,0,c
  3909  00110A  D026               	goto	i2l3189
  3910  00110C  C055  F02A         	movff	_StartAngle,___ftadd@f2
  3911  001110  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  3912  001114  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  3913  001118  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  3914  00111C  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  3915  001120  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  3916  001124  ECCA  F019         	call	___ftneg	;wreg free
  3917  001128  C001  F027         	movff	?___ftneg,___ftadd@f1
  3918  00112C  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3919  001130  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3920  001134  EC75  F010         	call	___ftadd	;wreg free
  3921  001138  C027  F033         	movff	?___ftadd,___ftge@ff1
  3922  00113C  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  3923  001140  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  3924  001144  0E00               	movlw	0
  3925  001146  6E36               	movwf	___ftge@ff2,c
  3926  001148  0E34               	movlw	52
  3927  00114A  6E37               	movwf	___ftge@ff2+1,c
  3928  00114C  0EC3               	movlw	195
  3929  00114E  6E38               	movwf	___ftge@ff2+2,c
  3930  001150  EC50  F016         	call	___ftge	;wreg free
  3931  001154  B0D8               	btfsc	status,0,c
  3932  001156  D0F2               	goto	i2l3205
  3933  001158                     i2l3189:
  3934                           
  3935                           ;PID.c: 42: {
  3936                           ;PID.c: 43: if((StartAngle - setpoint) > 180)
  3937  001158  0E00               	movlw	0
  3938  00115A  6E33               	movwf	___ftge@ff1,c
  3939  00115C  0E34               	movlw	52
  3940  00115E  6E34               	movwf	___ftge@ff1+1,c
  3941  001160  0E43               	movlw	67
  3942  001162  6E35               	movwf	___ftge@ff1+2,c
  3943  001164  C055  F02A         	movff	_StartAngle,___ftadd@f2
  3944  001168  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  3945  00116C  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  3946  001170  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  3947  001174  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  3948  001178  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  3949  00117C  ECCA  F019         	call	___ftneg	;wreg free
  3950  001180  C001  F027         	movff	?___ftneg,___ftadd@f1
  3951  001184  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3952  001188  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3953  00118C  EC75  F010         	call	___ftadd	;wreg free
  3954  001190  C027  F036         	movff	?___ftadd,___ftge@ff2
  3955  001194  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  3956  001198  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  3957  00119C  EC50  F016         	call	___ftge	;wreg free
  3958  0011A0  B0D8               	btfsc	status,0,c
  3959  0011A2  D053               	goto	i2l3197
  3960                           
  3961                           ;PID.c: 44: {
  3962                           ;PID.c: 45: if(angle > StartAngle)
  3963  0011A4  C055  F033         	movff	_StartAngle,___ftge@ff1
  3964  0011A8  C056  F034         	movff	_StartAngle+1,___ftge@ff1+1
  3965  0011AC  C057  F035         	movff	_StartAngle+2,___ftge@ff1+2
  3966  0011B0  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  3967  0011B4  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  3968  0011B8  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  3969  0011BC  EC50  F016         	call	___ftge	;wreg free
  3970  0011C0  B0D8               	btfsc	status,0,c
  3971  0011C2  D02B               	goto	i2l3195
  3972                           
  3973                           ;PID.c: 46: err = 360 - angle + setpoint;
  3974  0011C4  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  3975  0011C8  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3976  0011CC  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3977  0011D0  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  3978  0011D4  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  3979  0011D8  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  3980  0011DC  ECCA  F019         	call	___ftneg	;wreg free
  3981  0011E0  C001  F027         	movff	?___ftneg,___ftadd@f1
  3982  0011E4  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  3983  0011E8  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  3984  0011EC  EC75  F010         	call	___ftadd	;wreg free
  3985  0011F0  C027  F051         	movff	?___ftadd,_calculatePID$2603
  3986  0011F4  C028  F052         	movff	?___ftadd+1,_calculatePID$2603+1
  3987  0011F8  C029  F053         	movff	?___ftadd+2,_calculatePID$2603+2
  3988                           
  3989                           ;PID.c: 46: err = 360 - angle + setpoint;
  3990  0011FC  C051  F027         	movff	_calculatePID$2603,___ftadd@f1
  3991  001200  C052  F028         	movff	_calculatePID$2603+1,___ftadd@f1+1
  3992  001204  C053  F029         	movff	_calculatePID$2603+2,___ftadd@f1+2
  3993  001208  0E00               	movlw	0
  3994  00120A  6E2A               	movwf	___ftadd@f2,c
  3995  00120C  0EB4               	movlw	180
  3996  00120E  6E2B               	movwf	___ftadd@f2+1,c
  3997  001210  0E43               	movlw	67
  3998  001212  6E2C               	movwf	___ftadd@f2+2,c
  3999  001214  EC75  F010         	call	___ftadd	;wreg free
  4000  001218  D1FD               	goto	L7
  4001  00121A                     i2l3195:
  4002                           
  4003                           ;PID.c: 47: else
  4004                           ;PID.c: 48: err = setpoint - angle;
  4005  00121A  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  4006  00121E  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  4007  001222  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  4008  001226  ECCA  F019         	call	___ftneg	;wreg free
  4009  00122A  C001  F027         	movff	?___ftneg,___ftadd@f1
  4010  00122E  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4011  001232  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4012  001236  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4013  00123A  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4014  00123E  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4015  001242  EC75  F010         	call	___ftadd	;wreg free
  4016  001246  D1E6               	goto	L7
  4017                           
  4018                           ;PID.c: 49: }
  4019  001248  D1EC               	goto	i2l55
  4020  00124A                     i2l3197:
  4021                           
  4022                           ;PID.c: 50: else if((StartAngle - setpoint) < -180)
  4023  00124A  C055  F02A         	movff	_StartAngle,___ftadd@f2
  4024  00124E  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  4025  001252  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  4026  001256  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  4027  00125A  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4028  00125E  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4029  001262  ECCA  F019         	call	___ftneg	;wreg free
  4030  001266  C001  F027         	movff	?___ftneg,___ftadd@f1
  4031  00126A  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4032  00126E  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4033  001272  EC75  F010         	call	___ftadd	;wreg free
  4034  001276  C027  F033         	movff	?___ftadd,___ftge@ff1
  4035  00127A  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  4036  00127E  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  4037  001282  0E00               	movlw	0
  4038  001284  6E36               	movwf	___ftge@ff2,c
  4039  001286  0E34               	movlw	52
  4040  001288  6E37               	movwf	___ftge@ff2+1,c
  4041  00128A  0EC3               	movlw	195
  4042  00128C  6E38               	movwf	___ftge@ff2+2,c
  4043  00128E  EC50  F016         	call	___ftge	;wreg free
  4044  001292  B0D8               	btfsc	status,0,c
  4045  001294  D1C6               	goto	i2l55
  4046                           
  4047                           ;PID.c: 51: {
  4048                           ;PID.c: 52: if(angle < StartAngle)
  4049  001296  C042  F033         	movff	calculatePID@angle,___ftge@ff1
  4050  00129A  C043  F034         	movff	calculatePID@angle+1,___ftge@ff1+1
  4051  00129E  C044  F035         	movff	calculatePID@angle+2,___ftge@ff1+2
  4052  0012A2  C055  F036         	movff	_StartAngle,___ftge@ff2
  4053  0012A6  C056  F037         	movff	_StartAngle+1,___ftge@ff2+1
  4054  0012AA  C057  F038         	movff	_StartAngle+2,___ftge@ff2+2
  4055  0012AE  EC50  F016         	call	___ftge	;wreg free
  4056  0012B2  B0D8               	btfsc	status,0,c
  4057  0012B4  D02B               	goto	i2l3203
  4058                           
  4059                           ;PID.c: 53: err = setpoint - 360 - angle;
  4060  0012B6  0E00               	movlw	0
  4061  0012B8  6E2A               	movwf	___ftadd@f2,c
  4062  0012BA  0EB4               	movlw	180
  4063  0012BC  6E2B               	movwf	___ftadd@f2+1,c
  4064  0012BE  0E43               	movlw	67
  4065  0012C0  6E2C               	movwf	___ftadd@f2+2,c
  4066  0012C2  C042  F027         	movff	calculatePID@angle,___ftadd@f1
  4067  0012C6  C043  F028         	movff	calculatePID@angle+1,___ftadd@f1+1
  4068  0012CA  C044  F029         	movff	calculatePID@angle+2,___ftadd@f1+2
  4069  0012CE  EC75  F010         	call	___ftadd	;wreg free
  4070  0012D2  C027  F001         	movff	?___ftadd,___ftneg@f1
  4071  0012D6  C028  F002         	movff	?___ftadd+1,___ftneg@f1+1
  4072  0012DA  C029  F003         	movff	?___ftadd+2,___ftneg@f1+2
  4073  0012DE  ECCA  F019         	call	___ftneg	;wreg free
  4074  0012E2  C001  F051         	movff	?___ftneg,_calculatePID$2603
  4075  0012E6  C002  F052         	movff	?___ftneg+1,_calculatePID$2603+1
  4076  0012EA  C003  F053         	movff	?___ftneg+2,_calculatePID$2603+2
  4077                           
  4078                           ;PID.c: 53: err = setpoint - 360 - angle;
  4079  0012EE  C051  F027         	movff	_calculatePID$2603,___ftadd@f1
  4080  0012F2  C052  F028         	movff	_calculatePID$2603+1,___ftadd@f1+1
  4081  0012F6  C053  F029         	movff	_calculatePID$2603+2,___ftadd@f1+2
  4082  0012FA  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4083  0012FE  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4084  001302  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4085  001306  EC75  F010         	call	___ftadd	;wreg free
  4086  00130A  D184               	goto	L7
  4087  00130C                     i2l3203:
  4088                           
  4089                           ;PID.c: 54: else
  4090                           ;PID.c: 55: err = setpoint - angle;
  4091  00130C  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  4092  001310  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  4093  001314  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  4094  001318  ECCA  F019         	call	___ftneg	;wreg free
  4095  00131C  C001  F027         	movff	?___ftneg,___ftadd@f1
  4096  001320  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4097  001324  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4098  001328  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4099  00132C  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4100  001330  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4101  001334  EC75  F010         	call	___ftadd	;wreg free
  4102  001338  D16D               	goto	L7
  4103                           
  4104                           ;PID.c: 56: }
  4105                           ;PID.c: 57: }
  4106  00133A  D173               	goto	i2l55
  4107  00133C                     i2l3205:
  4108                           
  4109                           ;PID.c: 58: else if(((StartAngle - setpoint) <= 180) && ((StartAngle - setpoint) > -180)
      +                          )
  4110  00133C  0E00               	movlw	0
  4111  00133E  6E33               	movwf	___ftge@ff1,c
  4112  001340  0E34               	movlw	52
  4113  001342  6E34               	movwf	___ftge@ff1+1,c
  4114  001344  0E43               	movlw	67
  4115  001346  6E35               	movwf	___ftge@ff1+2,c
  4116  001348  C055  F02A         	movff	_StartAngle,___ftadd@f2
  4117  00134C  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  4118  001350  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  4119  001354  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  4120  001358  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4121  00135C  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4122  001360  ECCA  F019         	call	___ftneg	;wreg free
  4123  001364  C001  F027         	movff	?___ftneg,___ftadd@f1
  4124  001368  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4125  00136C  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4126  001370  EC75  F010         	call	___ftadd	;wreg free
  4127  001374  C027  F036         	movff	?___ftadd,___ftge@ff2
  4128  001378  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  4129  00137C  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  4130  001380  EC50  F016         	call	___ftge	;wreg free
  4131  001384  A0D8               	btfss	status,0,c
  4132  001386  D14D               	goto	i2l55
  4133  001388  0E00               	movlw	0
  4134  00138A  6E33               	movwf	___ftge@ff1,c
  4135  00138C  0E34               	movlw	52
  4136  00138E  6E34               	movwf	___ftge@ff1+1,c
  4137  001390  0EC3               	movlw	195
  4138  001392  6E35               	movwf	___ftge@ff1+2,c
  4139  001394  C055  F02A         	movff	_StartAngle,___ftadd@f2
  4140  001398  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  4141  00139C  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  4142  0013A0  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  4143  0013A4  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4144  0013A8  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4145  0013AC  ECCA  F019         	call	___ftneg	;wreg free
  4146  0013B0  C001  F027         	movff	?___ftneg,___ftadd@f1
  4147  0013B4  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4148  0013B8  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4149  0013BC  EC75  F010         	call	___ftadd	;wreg free
  4150  0013C0  C027  F036         	movff	?___ftadd,___ftge@ff2
  4151  0013C4  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  4152  0013C8  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  4153  0013CC  EC50  F016         	call	___ftge	;wreg free
  4154  0013D0  B0D8               	btfsc	status,0,c
  4155  0013D2  D127               	goto	i2l55
  4156                           
  4157                           ;PID.c: 59: {
  4158                           ;PID.c: 60: if(((setpoint - StartAngle) > -180) && (setpoint - StartAngle < 0))
  4159  0013D4  0E00               	movlw	0
  4160  0013D6  6E33               	movwf	___ftge@ff1,c
  4161  0013D8  0E34               	movlw	52
  4162  0013DA  6E34               	movwf	___ftge@ff1+1,c
  4163  0013DC  0EC3               	movlw	195
  4164  0013DE  6E35               	movwf	___ftge@ff1+2,c
  4165  0013E0  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4166  0013E4  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4167  0013E8  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4168  0013EC  C055  F001         	movff	_StartAngle,___ftneg@f1
  4169  0013F0  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  4170  0013F4  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  4171  0013F8  ECCA  F019         	call	___ftneg	;wreg free
  4172  0013FC  C001  F027         	movff	?___ftneg,___ftadd@f1
  4173  001400  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4174  001404  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4175  001408  EC75  F010         	call	___ftadd	;wreg free
  4176  00140C  C027  F036         	movff	?___ftadd,___ftge@ff2
  4177  001410  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  4178  001414  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  4179  001418  EC50  F016         	call	___ftge	;wreg free
  4180  00141C  B0D8               	btfsc	status,0,c
  4181  00141E  D06B               	goto	i2l3219
  4182  001420  C055  F001         	movff	_StartAngle,___ftneg@f1
  4183  001424  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  4184  001428  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  4185  00142C  ECCA  F019         	call	___ftneg	;wreg free
  4186  001430  C001  F027         	movff	?___ftneg,___ftadd@f1
  4187  001434  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4188  001438  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4189  00143C  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4190  001440  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4191  001444  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4192  001448  EC75  F010         	call	___ftadd	;wreg free
  4193  00144C  AE29               	btfss	?___ftadd+2,7,c
  4194  00144E  D053               	goto	i2l3219
  4195                           
  4196                           ;PID.c: 61: {
  4197                           ;PID.c: 62: if(angle <= StartAngle)
  4198  001450  C055  F033         	movff	_StartAngle,___ftge@ff1
  4199  001454  C056  F034         	movff	_StartAngle+1,___ftge@ff1+1
  4200  001458  C057  F035         	movff	_StartAngle+2,___ftge@ff1+2
  4201  00145C  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  4202  001460  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  4203  001464  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  4204  001468  EC50  F016         	call	___ftge	;wreg free
  4205  00146C  A0D8               	btfss	status,0,c
  4206  00146E  D017               	goto	i2l3217
  4207                           
  4208                           ;PID.c: 63: err = setpoint - angle;
  4209  001470  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  4210  001474  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  4211  001478  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  4212  00147C  ECCA  F019         	call	___ftneg	;wreg free
  4213  001480  C001  F027         	movff	?___ftneg,___ftadd@f1
  4214  001484  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4215  001488  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4216  00148C  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4217  001490  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4218  001494  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4219  001498  EC75  F010         	call	___ftadd	;wreg free
  4220  00149C  D0BB               	goto	L7
  4221  00149E                     i2l3217:
  4222                           
  4223                           ;PID.c: 64: else
  4224                           ;PID.c: 65: err = setpoint + 360 - angle;
  4225  00149E  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4226  0014A2  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4227  0014A6  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4228  0014AA  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  4229  0014AE  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  4230  0014B2  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  4231  0014B6  ECCA  F019         	call	___ftneg	;wreg free
  4232  0014BA  C001  F027         	movff	?___ftneg,___ftadd@f1
  4233  0014BE  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4234  0014C2  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4235  0014C6  EC75  F010         	call	___ftadd	;wreg free
  4236  0014CA  C027  F051         	movff	?___ftadd,_calculatePID$2603
  4237  0014CE  C028  F052         	movff	?___ftadd+1,_calculatePID$2603+1
  4238  0014D2  C029  F053         	movff	?___ftadd+2,_calculatePID$2603+2
  4239                           
  4240                           ;PID.c: 64: else
  4241                           ;PID.c: 65: err = setpoint + 360 - angle;
  4242  0014D6  C051  F027         	movff	_calculatePID$2603,___ftadd@f1
  4243  0014DA  C052  F028         	movff	_calculatePID$2603+1,___ftadd@f1+1
  4244  0014DE  C053  F029         	movff	_calculatePID$2603+2,___ftadd@f1+2
  4245  0014E2  0E00               	movlw	0
  4246  0014E4  6E2A               	movwf	___ftadd@f2,c
  4247  0014E6  0EB4               	movlw	180
  4248  0014E8  6E2B               	movwf	___ftadd@f2+1,c
  4249  0014EA  0E43               	movlw	67
  4250  0014EC  6E2C               	movwf	___ftadd@f2+2,c
  4251  0014EE  EC75  F010         	call	___ftadd	;wreg free
  4252  0014F2  D090               	goto	L7
  4253                           
  4254                           ;PID.c: 66: }
  4255  0014F4  D096               	goto	i2l55
  4256  0014F6                     i2l3219:
  4257                           
  4258                           ;PID.c: 67: else if(((setpoint - StartAngle) < 180) && (setpoint - StartAngle >= 0))
  4259  0014F6  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4260  0014FA  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4261  0014FE  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4262  001502  C055  F001         	movff	_StartAngle,___ftneg@f1
  4263  001506  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  4264  00150A  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  4265  00150E  ECCA  F019         	call	___ftneg	;wreg free
  4266  001512  C001  F027         	movff	?___ftneg,___ftadd@f1
  4267  001516  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4268  00151A  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4269  00151E  EC75  F010         	call	___ftadd	;wreg free
  4270  001522  C027  F033         	movff	?___ftadd,___ftge@ff1
  4271  001526  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  4272  00152A  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  4273  00152E  0E00               	movlw	0
  4274  001530  6E36               	movwf	___ftge@ff2,c
  4275  001532  0E34               	movlw	52
  4276  001534  6E37               	movwf	___ftge@ff2+1,c
  4277  001536  0E43               	movlw	67
  4278  001538  6E38               	movwf	___ftge@ff2+2,c
  4279  00153A  EC50  F016         	call	___ftge	;wreg free
  4280  00153E  B0D8               	btfsc	status,0,c
  4281  001540  D070               	goto	i2l55
  4282  001542  C055  F001         	movff	_StartAngle,___ftneg@f1
  4283  001546  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  4284  00154A  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  4285  00154E  ECCA  F019         	call	___ftneg	;wreg free
  4286  001552  C001  F027         	movff	?___ftneg,___ftadd@f1
  4287  001556  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4288  00155A  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4289  00155E  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4290  001562  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4291  001566  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4292  00156A  EC75  F010         	call	___ftadd	;wreg free
  4293  00156E  BE29               	btfsc	?___ftadd+2,7,c
  4294  001570  D058               	goto	i2l55
  4295                           
  4296                           ;PID.c: 68: {
  4297                           ;PID.c: 69: if(angle <= StartAngle)
  4298  001572  C055  F033         	movff	_StartAngle,___ftge@ff1
  4299  001576  C056  F034         	movff	_StartAngle+1,___ftge@ff1+1
  4300  00157A  C057  F035         	movff	_StartAngle+2,___ftge@ff1+2
  4301  00157E  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  4302  001582  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  4303  001586  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  4304  00158A  EC50  F016         	call	___ftge	;wreg free
  4305  00158E  A0D8               	btfss	status,0,c
  4306  001590  D017               	goto	i2l3227
  4307                           
  4308                           ;PID.c: 70: err = setpoint - angle;
  4309  001592  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  4310  001596  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  4311  00159A  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  4312  00159E  ECCA  F019         	call	___ftneg	;wreg free
  4313  0015A2  C001  F027         	movff	?___ftneg,___ftadd@f1
  4314  0015A6  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4315  0015AA  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4316  0015AE  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4317  0015B2  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4318  0015B6  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4319  0015BA  EC75  F010         	call	___ftadd	;wreg free
  4320  0015BE  D02A               	goto	L7
  4321  0015C0                     i2l3227:
  4322                           
  4323                           ;PID.c: 71: else
  4324                           ;PID.c: 72: err = setpoint - 360 - angle;
  4325  0015C0  0E00               	movlw	0
  4326  0015C2  6E2A               	movwf	___ftadd@f2,c
  4327  0015C4  0EB4               	movlw	180
  4328  0015C6  6E2B               	movwf	___ftadd@f2+1,c
  4329  0015C8  0E43               	movlw	67
  4330  0015CA  6E2C               	movwf	___ftadd@f2+2,c
  4331  0015CC  C042  F027         	movff	calculatePID@angle,___ftadd@f1
  4332  0015D0  C043  F028         	movff	calculatePID@angle+1,___ftadd@f1+1
  4333  0015D4  C044  F029         	movff	calculatePID@angle+2,___ftadd@f1+2
  4334  0015D8  EC75  F010         	call	___ftadd	;wreg free
  4335  0015DC  C027  F001         	movff	?___ftadd,___ftneg@f1
  4336  0015E0  C028  F002         	movff	?___ftadd+1,___ftneg@f1+1
  4337  0015E4  C029  F003         	movff	?___ftadd+2,___ftneg@f1+2
  4338  0015E8  ECCA  F019         	call	___ftneg	;wreg free
  4339  0015EC  C001  F051         	movff	?___ftneg,_calculatePID$2603
  4340  0015F0  C002  F052         	movff	?___ftneg+1,_calculatePID$2603+1
  4341  0015F4  C003  F053         	movff	?___ftneg+2,_calculatePID$2603+2
  4342                           
  4343                           ;PID.c: 71: else
  4344                           ;PID.c: 72: err = setpoint - 360 - angle;
  4345  0015F8  C051  F027         	movff	_calculatePID$2603,___ftadd@f1
  4346  0015FC  C052  F028         	movff	_calculatePID$2603+1,___ftadd@f1+1
  4347  001600  C053  F029         	movff	_calculatePID$2603+2,___ftadd@f1+2
  4348  001604  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  4349  001608  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4350  00160C  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4351  001610  EC75  F010         	call	___ftadd	;wreg free
  4352  001614                     L7:
  4353  001614  C027  F0DD         	movff	?___ftadd,_err
  4354  001618  C028  F0DE         	movff	?___ftadd+1,_err+1
  4355  00161C  C029  F0DF         	movff	?___ftadd+2,_err+2
  4356  001620  D000               	goto	i2l55
  4357  001622                     i2l55:
  4358                           
  4359                           ;PID.c: 73: }
  4360                           ;PID.c: 74: }
  4361                           ;PID.c: 76: intErr = err + prevErr;
  4362  001622  C0DD  F027         	movff	_err,___ftadd@f1
  4363  001626  C0DE  F028         	movff	_err+1,___ftadd@f1+1
  4364  00162A  C0DF  F029         	movff	_err+2,___ftadd@f1+2
  4365  00162E  C0E3  F02A         	movff	_prevErr,___ftadd@f2
  4366  001632  C0E4  F02B         	movff	_prevErr+1,___ftadd@f2+1
  4367  001636  C0E5  F02C         	movff	_prevErr+2,___ftadd@f2+2
  4368  00163A  EC75  F010         	call	___ftadd	;wreg free
  4369  00163E  C027  F0E0         	movff	?___ftadd,_intErr
  4370  001642  C028  F0E1         	movff	?___ftadd+1,_intErr+1
  4371  001646  C029  F0E2         	movff	?___ftadd+2,_intErr+2
  4372                           
  4373                           ;PID.c: 77: derErr = err - prevErr;
  4374  00164A  C0E3  F001         	movff	_prevErr,___ftneg@f1
  4375  00164E  C0E4  F002         	movff	_prevErr+1,___ftneg@f1+1
  4376  001652  C0E5  F003         	movff	_prevErr+2,___ftneg@f1+2
  4377  001656  ECCA  F019         	call	___ftneg	;wreg free
  4378  00165A  C001  F027         	movff	?___ftneg,___ftadd@f1
  4379  00165E  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  4380  001662  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  4381  001666  C0DD  F02A         	movff	_err,___ftadd@f2
  4382  00166A  C0DE  F02B         	movff	_err+1,___ftadd@f2+1
  4383  00166E  C0DF  F02C         	movff	_err+2,___ftadd@f2+2
  4384  001672  EC75  F010         	call	___ftadd	;wreg free
  4385  001676  C027  F048         	movff	?___ftadd,calculatePID@derErr
  4386  00167A  C028  F049         	movff	?___ftadd+1,calculatePID@derErr+1
  4387  00167E  C029  F04A         	movff	?___ftadd+2,calculatePID@derErr+2
  4388                           
  4389                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  4390  001682  C0E0  F01B         	movff	_intErr,i2___ftmul@f2
  4391  001686  C0E1  F01C         	movff	_intErr+1,i2___ftmul@f2+1
  4392  00168A  C0E2  F01D         	movff	_intErr+2,i2___ftmul@f2+2
  4393  00168E  C069  F018         	movff	_Ki,i2___ftmul@f1
  4394  001692  C06A  F019         	movff	_Ki+1,i2___ftmul@f1+1
  4395  001696  C06B  F01A         	movff	_Ki+2,i2___ftmul@f1+2
  4396  00169A  EC8D  F014         	call	i2___ftmul	;wreg free
  4397  00169E  C018  F04E         	movff	?i2___ftmul,_calculatePID$2641
  4398  0016A2  C019  F04F         	movff	?i2___ftmul+1,_calculatePID$2641+1
  4399  0016A6  C01A  F050         	movff	?i2___ftmul+2,_calculatePID$2641+2
  4400                           
  4401                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  4402  0016AA  0EC3               	movlw	195
  4403  0016AC  6E1B               	movwf	i2___ftmul@f2,c
  4404  0016AE  0EF5               	movlw	245
  4405  0016B0  6E1C               	movwf	i2___ftmul@f2+1,c
  4406  0016B2  0E3C               	movlw	60
  4407  0016B4  6E1D               	movwf	i2___ftmul@f2+2,c
  4408  0016B6  C04E  F018         	movff	_calculatePID$2641,i2___ftmul@f1
  4409  0016BA  C04F  F019         	movff	_calculatePID$2641+1,i2___ftmul@f1+1
  4410  0016BE  C050  F01A         	movff	_calculatePID$2641+2,i2___ftmul@f1+2
  4411  0016C2  EC8D  F014         	call	i2___ftmul	;wreg free
  4412  0016C6  C018  F02A         	movff	?i2___ftmul,___ftadd@f2
  4413  0016CA  C019  F02B         	movff	?i2___ftmul+1,___ftadd@f2+1
  4414  0016CE  C01A  F02C         	movff	?i2___ftmul+2,___ftadd@f2+2
  4415  0016D2  C0DD  F01B         	movff	_err,i2___ftmul@f2
  4416  0016D6  C0DE  F01C         	movff	_err+1,i2___ftmul@f2+1
  4417  0016DA  C0DF  F01D         	movff	_err+2,i2___ftmul@f2+2
  4418  0016DE  C06C  F018         	movff	_Kp,i2___ftmul@f1
  4419  0016E2  C06D  F019         	movff	_Kp+1,i2___ftmul@f1+1
  4420  0016E6  C06E  F01A         	movff	_Kp+2,i2___ftmul@f1+2
  4421  0016EA  EC8D  F014         	call	i2___ftmul	;wreg free
  4422  0016EE  C018  F027         	movff	?i2___ftmul,___ftadd@f1
  4423  0016F2  C019  F028         	movff	?i2___ftmul+1,___ftadd@f1+1
  4424  0016F6  C01A  F029         	movff	?i2___ftmul+2,___ftadd@f1+2
  4425  0016FA  EC75  F010         	call	___ftadd	;wreg free
  4426  0016FE  C027  F04B         	movff	?___ftadd,_calculatePID$2605
  4427  001702  C028  F04C         	movff	?___ftadd+1,_calculatePID$2605+1
  4428  001706  C029  F04D         	movff	?___ftadd+2,_calculatePID$2605+2
  4429                           
  4430                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  4431  00170A  C066  F01B         	movff	_Kd,i2___ftmul@f2
  4432  00170E  C067  F01C         	movff	_Kd+1,i2___ftmul@f2+1
  4433  001712  C068  F01D         	movff	_Kd+2,i2___ftmul@f2+2
  4434  001716  0EC3               	movlw	195
  4435  001718  6E0C               	movwf	___ftdiv@f2,c
  4436  00171A  0EF5               	movlw	245
  4437  00171C  6E0D               	movwf	___ftdiv@f2+1,c
  4438  00171E  0E3C               	movlw	60
  4439  001720  6E0E               	movwf	___ftdiv@f2+2,c
  4440  001722  C048  F009         	movff	calculatePID@derErr,___ftdiv@f1
  4441  001726  C049  F00A         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  4442  00172A  C04A  F00B         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  4443  00172E  EC7C  F015         	call	___ftdiv	;wreg free
  4444  001732  C009  F018         	movff	?___ftdiv,i2___ftmul@f1
  4445  001736  C00A  F019         	movff	?___ftdiv+1,i2___ftmul@f1+1
  4446  00173A  C00B  F01A         	movff	?___ftdiv+2,i2___ftmul@f1+2
  4447  00173E  EC8D  F014         	call	i2___ftmul	;wreg free
  4448  001742  C018  F02A         	movff	?i2___ftmul,___ftadd@f2
  4449  001746  C019  F02B         	movff	?i2___ftmul+1,___ftadd@f2+1
  4450  00174A  C01A  F02C         	movff	?i2___ftmul+2,___ftadd@f2+2
  4451  00174E  C04B  F027         	movff	_calculatePID$2605,___ftadd@f1
  4452  001752  C04C  F028         	movff	_calculatePID$2605+1,___ftadd@f1+1
  4453  001756  C04D  F029         	movff	_calculatePID$2605+2,___ftadd@f1+2
  4454  00175A  EC75  F010         	call	___ftadd	;wreg free
  4455  00175E  C027  F033         	movff	?___ftadd,i2___fttol@f1
  4456  001762  C028  F034         	movff	?___ftadd+1,i2___fttol@f1+1
  4457  001766  C029  F035         	movff	?___ftadd+2,i2___fttol@f1+2
  4458  00176A  EC09  F015         	call	i2___fttol	;wreg free
  4459  00176E  C033  F075         	movff	?i2___fttol,_motorInput
  4460  001772  C034  F076         	movff	?i2___fttol+1,_motorInput+1
  4461                           
  4462                           ;PID.c: 81: if(motorInput > 255)
  4463  001776  0100               	movlb	0	; () banked
  4464  001778  BF76               	btfsc	(_motorInput+1)& (0+255),7,b
  4465  00177A  D009               	goto	i2l3233
  4466  00177C  0100               	movlb	0	; () banked
  4467  00177E  0576               	decf	(_motorInput+1)& (0+255),w,b
  4468  001780  A0D8               	btfss	status,0,c
  4469  001782  D005               	goto	i2l3233
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;PID.c: 82: motorInput = 255;
  4473  001784  0E00               	movlw	0
  4474  001786  0100               	movlb	0	; () banked
  4475  001788  6F76               	movwf	(_motorInput+1)& (0+255),b
  4476  00178A  6975               	setf	_motorInput& (0+255),b
  4477  00178C  D010               	goto	i2l3237
  4478  00178E                     i2l3233:
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;PID.c: 83: else if (motorInput < -255)
  4482  00178E  0100               	movlb	0	; () banked
  4483  001790  AF76               	btfss	(_motorInput+1)& (0+255),7,b
  4484  001792  D00D               	goto	i2l3237
  4485  001794  0100               	movlb	0	; () banked
  4486  001796  0575               	decf	_motorInput& (0+255),w,b
  4487  001798  0EFF               	movlw	255
  4488  00179A  0100               	movlb	0	; () banked
  4489  00179C  5976               	subwfb	(_motorInput+1)& (0+255),w,b
  4490  00179E  B0D8               	btfsc	status,0,c
  4491  0017A0  D006               	goto	i2l3237
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;PID.c: 84: motorInput = -255;
  4495  0017A2  0EFF               	movlw	255
  4496  0017A4  0100               	movlb	0	; () banked
  4497  0017A6  6F76               	movwf	(_motorInput+1)& (0+255),b
  4498  0017A8  0E01               	movlw	1
  4499  0017AA  6F75               	movwf	_motorInput& (0+255),b
  4500                           
  4501                           ; BSR set to: 0
  4502  0017AC  D000               	goto	i2l3237
  4503  0017AE                     i2l3237:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;PID.c: 86: prevErr = err;
  4507  0017AE  C0DD  F0E3         	movff	_err,_prevErr
  4508  0017B2  C0DE  F0E4         	movff	_err+1,_prevErr+1
  4509  0017B6  C0DF  F0E5         	movff	_err+2,_prevErr+2
  4510                           
  4511                           ; BSR set to: 0
  4512  0017BA  0012               	return		;funcret
  4513  0017BC                     __end_of_calculatePID:
  4514                           	opt stack 0
  4515                           pclatu	equ	0xFFB
  4516                           pclath	equ	0xFFA
  4517                           tblptru	equ	0xFF8
  4518                           tblptrh	equ	0xFF7
  4519                           tblptrl	equ	0xFF6
  4520                           tablat	equ	0xFF5
  4521                           prodh	equ	0xFF4
  4522                           prodl	equ	0xFF3
  4523                           intcon	equ	0xFF2
  4524                           intcon2	equ	0xFF1
  4525                           indf0	equ	0xFEF
  4526                           postinc0	equ	0xFEE
  4527                           fsr0h	equ	0xFEA
  4528                           fsr0l	equ	0xFE9
  4529                           wreg	equ	0xFE8
  4530                           fsr1h	equ	0xFE2
  4531                           fsr1l	equ	0xFE1
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function i2___fttol *****************
  4537 ;; Defined at:
  4538 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  f1              3   50[COMRAM] float 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  __fttol         4   60[COMRAM] unsigned long 
  4543 ;;  __fttol         1   64[COMRAM] unsigned char 
  4544 ;;  __fttol         1   59[COMRAM] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  4   50[COMRAM] long 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4554 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;Total ram usage:       15 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_calculatePID
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text25
  4568  002A12                     __ptext25:
  4569                           	opt stack 0
  4570  002A12                     i2___fttol:
  4571                           	opt stack 22
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;incstack = 0
  4575  002A12  C035  F037         	movff	i2___fttol@f1+2,??i2___fttol
  4576  002A16  6A38               	clrf	(??i2___fttol+1)& (0+255),c
  4577  002A18  6A39               	clrf	(??i2___fttol+2)& (0+255),c
  4578  002A1A  3434               	rlcf	i2___fttol@f1+1,w,c
  4579  002A1C  3637               	rlcf	??i2___fttol& (0+255),f,c
  4580  002A1E  E301               	bnc	u334_41
  4581  002A20  8038               	bsf	(??i2___fttol+1)& (0+255),0,c
  4582  002A22                     u334_41:
  4583  002A22  5037               	movf	??i2___fttol,w,c
  4584  002A24  6E41               	movwf	i2___fttol@exp1,c
  4585  002A26  5041               	movf	i2___fttol@exp1,w,c
  4586  002A28  A4D8               	btfss	status,2,c
  4587  002A2A  D002               	goto	i2l3133
  4588  002A2C  D039               	goto	i2l3157
  4589  002A2E  D063               	goto	i2l986
  4590  002A30                     i2l3133:
  4591  002A30  0E17               	movlw	23
  4592  002A32  6E37               	movwf	??i2___fttol& (0+255),c
  4593  002A34  C033  F038         	movff	i2___fttol@f1,??i2___fttol+1
  4594  002A38  C034  F039         	movff	i2___fttol@f1+1,??i2___fttol+2
  4595  002A3C  C035  F03A         	movff	i2___fttol@f1+2,??i2___fttol+3
  4596  002A40  2837               	incf	??i2___fttol,w,c
  4597  002A42  6E3B               	movwf	(??i2___fttol+4)& (0+255),c
  4598  002A44  D004               	goto	i2u336_40
  4599  002A46                     i2u336_45:
  4600  002A46  90D8               	bcf	status,0,c
  4601  002A48  323A               	rrcf	??i2___fttol+3,f,c
  4602  002A4A  3239               	rrcf	??i2___fttol+2,f,c
  4603  002A4C  3238               	rrcf	??i2___fttol+1,f,c
  4604  002A4E                     i2u336_40:
  4605  002A4E  2E3B               	decfsz	(??i2___fttol+4)& (0+255),f,c
  4606  002A50  D7FA               	goto	i2u336_45
  4607  002A52  5038               	movf	??i2___fttol+1,w,c
  4608  002A54  6E3C               	movwf	i2___fttol@sign1,c
  4609  002A56  8E34               	bsf	i2___fttol@f1+1,7,c
  4610  002A58  0EFF               	movlw	255
  4611  002A5A  1633               	andwf	i2___fttol@f1,f,c
  4612  002A5C  0EFF               	movlw	255
  4613  002A5E  1634               	andwf	i2___fttol@f1+1,f,c
  4614  002A60  0E00               	movlw	0
  4615  002A62  1635               	andwf	i2___fttol@f1+2,f,c
  4616  002A64  5033               	movf	i2___fttol@f1,w,c
  4617  002A66  6E3D               	movwf	i2___fttol@lval,c
  4618  002A68  5034               	movf	i2___fttol@f1+1,w,c
  4619  002A6A  6E3E               	movwf	i2___fttol@lval+1,c
  4620  002A6C  5035               	movf	i2___fttol@f1+2,w,c
  4621  002A6E  6E3F               	movwf	i2___fttol@lval+2,c
  4622  002A70  6A40               	clrf	i2___fttol@lval+3,c
  4623  002A72  0E8E               	movlw	142
  4624  002A74  5E41               	subwf	i2___fttol@exp1,f,c
  4625  002A76  AE41               	btfss	i2___fttol@exp1,7,c
  4626  002A78  D010               	goto	i2l3155
  4627  002A7A  5041               	movf	i2___fttol@exp1,w,c
  4628  002A7C  0A80               	xorlw	128
  4629  002A7E  0F8F               	addlw	143
  4630  002A80  B0D8               	btfsc	status,0,c
  4631  002A82  D003               	goto	i2l3151
  4632  002A84  D00D               	goto	i2l3157
  4633  002A86  D037               	goto	i2l986
  4634  002A88  D000               	goto	i2l3151
  4635  002A8A                     i2l3151:
  4636  002A8A  90D8               	bcf	status,0,c
  4637  002A8C  3240               	rrcf	i2___fttol@lval+3,f,c
  4638  002A8E  323F               	rrcf	i2___fttol@lval+2,f,c
  4639  002A90  323E               	rrcf	i2___fttol@lval+1,f,c
  4640  002A92  323D               	rrcf	i2___fttol@lval,f,c
  4641  002A94  3E41               	incfsz	i2___fttol@exp1,f,c
  4642  002A96  D7F9               	goto	i2l3151
  4643  002A98  D019               	goto	i2l3165
  4644  002A9A                     i2l3155:
  4645  002A9A  0E17               	movlw	23
  4646  002A9C  6441               	cpfsgt	i2___fttol@exp1,c
  4647  002A9E  D011               	goto	i2l3163
  4648  002AA0                     i2l3157:
  4649  002AA0  0E00               	movlw	0
  4650  002AA2  6E33               	movwf	?i2___fttol,c
  4651  002AA4  0E00               	movlw	0
  4652  002AA6  6E34               	movwf	?i2___fttol+1,c
  4653  002AA8  0E00               	movlw	0
  4654  002AAA  6E35               	movwf	?i2___fttol+2,c
  4655  002AAC  0E00               	movlw	0
  4656  002AAE  6E36               	movwf	?i2___fttol+3,c
  4657  002AB0  D022               	goto	i2l986
  4658  002AB2  D007               	goto	i2l3163
  4659  002AB4                     i2l3161:
  4660  002AB4  90D8               	bcf	status,0,c
  4661  002AB6  363D               	rlcf	i2___fttol@lval,f,c
  4662  002AB8  363E               	rlcf	i2___fttol@lval+1,f,c
  4663  002ABA  363F               	rlcf	i2___fttol@lval+2,f,c
  4664  002ABC  3640               	rlcf	i2___fttol@lval+3,f,c
  4665  002ABE  0641               	decf	i2___fttol@exp1,f,c
  4666  002AC0  D000               	goto	i2l3163
  4667  002AC2                     i2l3163:
  4668  002AC2  5041               	movf	i2___fttol@exp1,w,c
  4669  002AC4  B4D8               	btfsc	status,2,c
  4670  002AC6  D002               	goto	i2l3165
  4671  002AC8  D7F5               	goto	i2l3161
  4672  002ACA  D000               	goto	i2l3165
  4673  002ACC                     i2l3165:
  4674  002ACC  503C               	movf	i2___fttol@sign1,w,c
  4675  002ACE  B4D8               	btfsc	status,2,c
  4676  002AD0  D009               	goto	i2l3169
  4677  002AD2  1E40               	comf	i2___fttol@lval+3,f,c
  4678  002AD4  1E3F               	comf	i2___fttol@lval+2,f,c
  4679  002AD6  1E3E               	comf	i2___fttol@lval+1,f,c
  4680  002AD8  6C3D               	negf	i2___fttol@lval,c
  4681  002ADA  0E00               	movlw	0
  4682  002ADC  223E               	addwfc	i2___fttol@lval+1,f,c
  4683  002ADE  223F               	addwfc	i2___fttol@lval+2,f,c
  4684  002AE0  2240               	addwfc	i2___fttol@lval+3,f,c
  4685  002AE2  D000               	goto	i2l3169
  4686  002AE4                     i2l3169:
  4687  002AE4  C03D  F033         	movff	i2___fttol@lval,?i2___fttol
  4688  002AE8  C03E  F034         	movff	i2___fttol@lval+1,?i2___fttol+1
  4689  002AEC  C03F  F035         	movff	i2___fttol@lval+2,?i2___fttol+2
  4690  002AF0  C040  F036         	movff	i2___fttol@lval+3,?i2___fttol+3
  4691  002AF4  D000               	goto	i2l986
  4692  002AF6                     i2l986:
  4693  002AF6  0012               	return		;funcret
  4694  002AF8                     __end_ofi2___fttol:
  4695                           	opt stack 0
  4696                           pclatu	equ	0xFFB
  4697                           pclath	equ	0xFFA
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           indf0	equ	0xFEF
  4707                           postinc0	equ	0xFEE
  4708                           fsr0h	equ	0xFEA
  4709                           fsr0l	equ	0xFE9
  4710                           wreg	equ	0xFE8
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function ___ftadd *****************
  4718 ;; Defined at:
  4719 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  f1              3   38[COMRAM] float 
  4722 ;;  f2              3   41[COMRAM] float 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  exp1            1   49[COMRAM] unsigned char 
  4725 ;;  exp2            1   48[COMRAM] unsigned char 
  4726 ;;  sign            1   47[COMRAM] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  3   38[COMRAM] float 
  4729 ;; Registers used:
  4730 ;;		wreg, status,2, status,0, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4736 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;Total ram usage:       12 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    1
  4743 ;; This function calls:
  4744 ;;		i2___ftpack
  4745 ;; This function is called by:
  4746 ;;		_calculatePID
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text26
  4751  0020EA                     __ptext26:
  4752                           	opt stack 0
  4753  0020EA                     ___ftadd:
  4754                           	opt stack 21
  4755                           
  4756                           ;incstack = 0
  4757  0020EA  C029  F02D         	movff	___ftadd@f1+2,??___ftadd
  4758  0020EE  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  4759  0020F0  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  4760  0020F2  3428               	rlcf	___ftadd@f1+1,w,c
  4761  0020F4  362D               	rlcf	??___ftadd& (0+255),f,c
  4762  0020F6  E301               	bnc	u310_41
  4763  0020F8  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  4764  0020FA                     u310_41:
  4765  0020FA  502D               	movf	??___ftadd,w,c
  4766  0020FC  6E32               	movwf	___ftadd@exp1,c
  4767  0020FE  C02C  F02D         	movff	___ftadd@f2+2,??___ftadd
  4768  002102  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  4769  002104  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  4770  002106  342B               	rlcf	___ftadd@f2+1,w,c
  4771  002108  362D               	rlcf	??___ftadd& (0+255),f,c
  4772  00210A  E301               	bnc	u311_41
  4773  00210C  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  4774  00210E                     u311_41:
  4775  00210E  502D               	movf	??___ftadd,w,c
  4776  002110  6E31               	movwf	___ftadd@exp2,c
  4777  002112  5032               	movf	___ftadd@exp1,w,c
  4778  002114  B4D8               	btfsc	status,2,c
  4779  002116  D00B               	goto	i2l918
  4780  002118  5031               	movf	___ftadd@exp2,w,c
  4781  00211A  5C32               	subwf	___ftadd@exp1,w,c
  4782  00211C  B0D8               	btfsc	status,0,c
  4783  00211E  D00E               	goto	i2l3053
  4784  002120  5032               	movf	___ftadd@exp1,w,c
  4785  002122  0800               	sublw	0
  4786  002124  2431               	addwf	___ftadd@exp2,w,c
  4787  002126  6E2D               	movwf	??___ftadd& (0+255),c
  4788  002128  0E18               	movlw	24
  4789  00212A  642D               	cpfsgt	??___ftadd,c
  4790  00212C  D007               	goto	i2l3053
  4791  00212E                     i2l918:
  4792  00212E  C02A  F027         	movff	___ftadd@f2,?___ftadd
  4793  002132  C02B  F028         	movff	___ftadd@f2+1,?___ftadd+1
  4794  002136  C02C  F029         	movff	___ftadd@f2+2,?___ftadd+2
  4795  00213A  D0B8               	goto	i2l919
  4796  00213C                     i2l3053:
  4797  00213C  5031               	movf	___ftadd@exp2,w,c
  4798  00213E  B4D8               	btfsc	status,2,c
  4799  002140  D00B               	goto	i2l922
  4800  002142  5032               	movf	___ftadd@exp1,w,c
  4801  002144  5C31               	subwf	___ftadd@exp2,w,c
  4802  002146  B0D8               	btfsc	status,0,c
  4803  002148  D00E               	goto	i2l3059
  4804  00214A  5031               	movf	___ftadd@exp2,w,c
  4805  00214C  0800               	sublw	0
  4806  00214E  2432               	addwf	___ftadd@exp1,w,c
  4807  002150  6E2D               	movwf	??___ftadd& (0+255),c
  4808  002152  0E18               	movlw	24
  4809  002154  642D               	cpfsgt	??___ftadd,c
  4810  002156  D007               	goto	i2l3059
  4811  002158                     i2l922:
  4812  002158  C027  F027         	movff	___ftadd@f1,?___ftadd
  4813  00215C  C028  F028         	movff	___ftadd@f1+1,?___ftadd+1
  4814  002160  C029  F029         	movff	___ftadd@f1+2,?___ftadd+2
  4815  002164  D0A3               	goto	i2l919
  4816  002166                     i2l3059:
  4817  002166  0E06               	movlw	6
  4818  002168  6E30               	movwf	___ftadd@sign,c
  4819  00216A  AE29               	btfss	___ftadd@f1+2,7,c
  4820  00216C  D002               	goto	i2l3065
  4821  00216E  8E30               	bsf	___ftadd@sign,7,c
  4822  002170  D000               	goto	i2l3065
  4823  002172                     i2l3065:
  4824  002172  BE2C               	btfsc	___ftadd@f2+2,7,c
  4825  002174  8C30               	bsf	___ftadd@sign,6,c
  4826  002176  8E28               	bsf	___ftadd@f1+1,7,c
  4827  002178  0EFF               	movlw	255
  4828  00217A  1627               	andwf	___ftadd@f1,f,c
  4829  00217C  0EFF               	movlw	255
  4830  00217E  1628               	andwf	___ftadd@f1+1,f,c
  4831  002180  0E00               	movlw	0
  4832  002182  1629               	andwf	___ftadd@f1+2,f,c
  4833  002184  8E2B               	bsf	___ftadd@f2+1,7,c
  4834  002186  0EFF               	movlw	255
  4835  002188  162A               	andwf	___ftadd@f2,f,c
  4836  00218A  0EFF               	movlw	255
  4837  00218C  162B               	andwf	___ftadd@f2+1,f,c
  4838  00218E  0E00               	movlw	0
  4839  002190  162C               	andwf	___ftadd@f2+2,f,c
  4840  002192  5031               	movf	___ftadd@exp2,w,c
  4841  002194  5C32               	subwf	___ftadd@exp1,w,c
  4842  002196  B0D8               	btfsc	status,0,c
  4843  002198  D01E               	goto	i2l3085
  4844  00219A                     i2l3075:
  4845  00219A  90D8               	bcf	status,0,c
  4846  00219C  362A               	rlcf	___ftadd@f2,f,c
  4847  00219E  362B               	rlcf	___ftadd@f2+1,f,c
  4848  0021A0  362C               	rlcf	___ftadd@f2+2,f,c
  4849  0021A2  0631               	decf	___ftadd@exp2,f,c
  4850  0021A4  5032               	movf	___ftadd@exp1,w,c
  4851  0021A6  1831               	xorwf	___ftadd@exp2,w,c
  4852  0021A8  B4D8               	btfsc	status,2,c
  4853  0021AA  D00F               	goto	i2l3083
  4854  0021AC  0630               	decf	___ftadd@sign,f,c
  4855  0021AE  C030  F02D         	movff	___ftadd@sign,??___ftadd
  4856  0021B2  0E07               	movlw	7
  4857  0021B4  162D               	andwf	??___ftadd,f,c
  4858  0021B6  B4D8               	btfsc	status,2,c
  4859  0021B8  D008               	goto	i2l3083
  4860  0021BA  D7EF               	goto	i2l3075
  4861  0021BC  D006               	goto	i2l3083
  4862  0021BE                     i2l3081:
  4863  0021BE  90D8               	bcf	status,0,c
  4864  0021C0  3229               	rrcf	___ftadd@f1+2,f,c
  4865  0021C2  3228               	rrcf	___ftadd@f1+1,f,c
  4866  0021C4  3227               	rrcf	___ftadd@f1,f,c
  4867  0021C6  2A32               	incf	___ftadd@exp1,f,c
  4868  0021C8  D000               	goto	i2l3083
  4869  0021CA                     i2l3083:
  4870  0021CA  5031               	movf	___ftadd@exp2,w,c
  4871  0021CC  1832               	xorwf	___ftadd@exp1,w,c
  4872  0021CE  B4D8               	btfsc	status,2,c
  4873  0021D0  D024               	goto	i2l933
  4874  0021D2  D7F5               	goto	i2l3081
  4875  0021D4  D022               	goto	i2l933
  4876  0021D6                     i2l3085:
  4877  0021D6  5032               	movf	___ftadd@exp1,w,c
  4878  0021D8  5C31               	subwf	___ftadd@exp2,w,c
  4879  0021DA  B0D8               	btfsc	status,0,c
  4880  0021DC  D01E               	goto	i2l933
  4881  0021DE                     i2l3087:
  4882  0021DE  90D8               	bcf	status,0,c
  4883  0021E0  3627               	rlcf	___ftadd@f1,f,c
  4884  0021E2  3628               	rlcf	___ftadd@f1+1,f,c
  4885  0021E4  3629               	rlcf	___ftadd@f1+2,f,c
  4886  0021E6  0632               	decf	___ftadd@exp1,f,c
  4887  0021E8  5032               	movf	___ftadd@exp1,w,c
  4888  0021EA  1831               	xorwf	___ftadd@exp2,w,c
  4889  0021EC  B4D8               	btfsc	status,2,c
  4890  0021EE  D00F               	goto	i2l3095
  4891  0021F0  0630               	decf	___ftadd@sign,f,c
  4892  0021F2  C030  F02D         	movff	___ftadd@sign,??___ftadd
  4893  0021F6  0E07               	movlw	7
  4894  0021F8  162D               	andwf	??___ftadd,f,c
  4895  0021FA  B4D8               	btfsc	status,2,c
  4896  0021FC  D008               	goto	i2l3095
  4897  0021FE  D7EF               	goto	i2l3087
  4898  002200  D006               	goto	i2l3095
  4899  002202                     i2l3093:
  4900  002202  90D8               	bcf	status,0,c
  4901  002204  322C               	rrcf	___ftadd@f2+2,f,c
  4902  002206  322B               	rrcf	___ftadd@f2+1,f,c
  4903  002208  322A               	rrcf	___ftadd@f2,f,c
  4904  00220A  2A31               	incf	___ftadd@exp2,f,c
  4905  00220C  D000               	goto	i2l3095
  4906  00220E                     i2l3095:
  4907  00220E  5031               	movf	___ftadd@exp2,w,c
  4908  002210  1832               	xorwf	___ftadd@exp1,w,c
  4909  002212  B4D8               	btfsc	status,2,c
  4910  002214  D002               	goto	i2l933
  4911  002216  D7F5               	goto	i2l3093
  4912  002218  D000               	goto	i2l933
  4913  00221A                     i2l933:
  4914  00221A  AE30               	btfss	___ftadd@sign,7,c
  4915  00221C  D00C               	goto	i2l942
  4916  00221E  0EFF               	movlw	255
  4917  002220  1A27               	xorwf	___ftadd@f1,f,c
  4918  002222  0EFF               	movlw	255
  4919  002224  1A28               	xorwf	___ftadd@f1+1,f,c
  4920  002226  0EFF               	movlw	255
  4921  002228  1A29               	xorwf	___ftadd@f1+2,f,c
  4922  00222A  0E01               	movlw	1
  4923  00222C  2627               	addwf	___ftadd@f1,f,c
  4924  00222E  0E00               	movlw	0
  4925  002230  2228               	addwfc	___ftadd@f1+1,f,c
  4926  002232  0E00               	movlw	0
  4927  002234  2229               	addwfc	___ftadd@f1+2,f,c
  4928  002236                     i2l942:
  4929  002236  AC30               	btfss	___ftadd@sign,6,c
  4930  002238  D00D               	goto	i2l3101
  4931  00223A  0EFF               	movlw	255
  4932  00223C  1A2A               	xorwf	___ftadd@f2,f,c
  4933  00223E  0EFF               	movlw	255
  4934  002240  1A2B               	xorwf	___ftadd@f2+1,f,c
  4935  002242  0EFF               	movlw	255
  4936  002244  1A2C               	xorwf	___ftadd@f2+2,f,c
  4937  002246  0E01               	movlw	1
  4938  002248  262A               	addwf	___ftadd@f2,f,c
  4939  00224A  0E00               	movlw	0
  4940  00224C  222B               	addwfc	___ftadd@f2+1,f,c
  4941  00224E  0E00               	movlw	0
  4942  002250  222C               	addwfc	___ftadd@f2+2,f,c
  4943  002252  D000               	goto	i2l3101
  4944  002254                     i2l3101:
  4945  002254  0E00               	movlw	0
  4946  002256  6E30               	movwf	___ftadd@sign,c
  4947  002258  5027               	movf	___ftadd@f1,w,c
  4948  00225A  262A               	addwf	___ftadd@f2,f,c
  4949  00225C  5028               	movf	___ftadd@f1+1,w,c
  4950  00225E  222B               	addwfc	___ftadd@f2+1,f,c
  4951  002260  5029               	movf	___ftadd@f1+2,w,c
  4952  002262  222C               	addwfc	___ftadd@f2+2,f,c
  4953  002264  AE2C               	btfss	___ftadd@f2+2,7,c
  4954  002266  D00F               	goto	i2l3111
  4955  002268  0EFF               	movlw	255
  4956  00226A  1A2A               	xorwf	___ftadd@f2,f,c
  4957  00226C  0EFF               	movlw	255
  4958  00226E  1A2B               	xorwf	___ftadd@f2+1,f,c
  4959  002270  0EFF               	movlw	255
  4960  002272  1A2C               	xorwf	___ftadd@f2+2,f,c
  4961  002274  0E01               	movlw	1
  4962  002276  262A               	addwf	___ftadd@f2,f,c
  4963  002278  0E00               	movlw	0
  4964  00227A  222B               	addwfc	___ftadd@f2+1,f,c
  4965  00227C  0E00               	movlw	0
  4966  00227E  222C               	addwfc	___ftadd@f2+2,f,c
  4967  002280  0E01               	movlw	1
  4968  002282  6E30               	movwf	___ftadd@sign,c
  4969  002284  D000               	goto	i2l3111
  4970  002286                     i2l3111:
  4971  002286  C02A  F001         	movff	___ftadd@f2,i2___ftpack@arg
  4972  00228A  C02B  F002         	movff	___ftadd@f2+1,i2___ftpack@arg+1
  4973  00228E  C02C  F003         	movff	___ftadd@f2+2,i2___ftpack@arg+2
  4974  002292  C032  F004         	movff	___ftadd@exp1,i2___ftpack@exp
  4975  002296  C030  F005         	movff	___ftadd@sign,i2___ftpack@sign
  4976  00229A  ECED  F015         	call	i2___ftpack	;wreg free
  4977  00229E  C001  F027         	movff	?i2___ftpack,?___ftadd
  4978  0022A2  C002  F028         	movff	?i2___ftpack+1,?___ftadd+1
  4979  0022A6  C003  F029         	movff	?i2___ftpack+2,?___ftadd+2
  4980  0022AA  D000               	goto	i2l919
  4981  0022AC                     i2l919:
  4982  0022AC  0012               	return		;funcret
  4983  0022AE                     __end_of___ftadd:
  4984                           	opt stack 0
  4985                           pclatu	equ	0xFFB
  4986                           pclath	equ	0xFFA
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           prodh	equ	0xFF4
  4992                           prodl	equ	0xFF3
  4993                           intcon	equ	0xFF2
  4994                           intcon2	equ	0xFF1
  4995                           indf0	equ	0xFEF
  4996                           postinc0	equ	0xFEE
  4997                           fsr0h	equ	0xFEA
  4998                           fsr0l	equ	0xFE9
  4999                           wreg	equ	0xFE8
  5000                           fsr1h	equ	0xFE2
  5001                           fsr1l	equ	0xFE1
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function _RTD2Angle *****************
  5007 ;; Defined at:
  5008 ;;		line 90 in file "ResolverToDigital.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  RTDAngle        2   38[COMRAM] unsigned int 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  3   38[COMRAM] unsigned int 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5022 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;Total ram usage:        3 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    2
  5029 ;; This function calls:
  5030 ;;		___lwtoft
  5031 ;;		i2___ftmul
  5032 ;; This function is called by:
  5033 ;;		_TMR0Int
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text27
  5038  003232                     __ptext27:
  5039                           	opt stack 0
  5040  003232                     _RTD2Angle:
  5041                           	opt stack 21
  5042                           
  5043                           ;ResolverToDigital.c: 92: return 0.087890625 * RTDAngle;
  5044                           
  5045                           ;incstack = 0
  5046  003232  C027  F009         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  5047  003236  C028  F00A         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  5048  00323A  ECA5  F019         	call	___lwtoft	;wreg free
  5049  00323E  C009  F018         	movff	?___lwtoft,i2___ftmul@f1
  5050  003242  C00A  F019         	movff	?___lwtoft+1,i2___ftmul@f1+1
  5051  003246  C00B  F01A         	movff	?___lwtoft+2,i2___ftmul@f1+2
  5052  00324A  0E00               	movlw	0
  5053  00324C  6E1B               	movwf	i2___ftmul@f2,c
  5054  00324E  0EB4               	movlw	180
  5055  003250  6E1C               	movwf	i2___ftmul@f2+1,c
  5056  003252  0E3D               	movlw	61
  5057  003254  6E1D               	movwf	i2___ftmul@f2+2,c
  5058  003256  EC8D  F014         	call	i2___ftmul	;wreg free
  5059  00325A  C018  F027         	movff	?i2___ftmul,?_RTD2Angle
  5060  00325E  C019  F028         	movff	?i2___ftmul+1,?_RTD2Angle+1
  5061  003262  C01A  F029         	movff	?i2___ftmul+2,?_RTD2Angle+2
  5062  003266  D000               	goto	i2l436
  5063  003268                     i2l436:
  5064  003268  0012               	return		;funcret
  5065  00326A                     __end_of_RTD2Angle:
  5066                           	opt stack 0
  5067                           pclatu	equ	0xFFB
  5068                           pclath	equ	0xFFA
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           intcon2	equ	0xFF1
  5077                           indf0	equ	0xFEF
  5078                           postinc0	equ	0xFEE
  5079                           fsr0h	equ	0xFEA
  5080                           fsr0l	equ	0xFE9
  5081                           wreg	equ	0xFE8
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function ___lwtoft *****************
  5089 ;; Defined at:
  5090 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  c               2    8[COMRAM] unsigned int 
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  3    8[COMRAM] float 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:        3 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    1
  5111 ;; This function calls:
  5112 ;;		i2___ftpack
  5113 ;; This function is called by:
  5114 ;;		_RTD2Angle
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text28
  5119  00334A                     __ptext28:
  5120                           	opt stack 0
  5121  00334A                     ___lwtoft:
  5122                           	opt stack 21
  5123                           
  5124                           ;incstack = 0
  5125  00334A  C009  F001         	movff	___lwtoft@c,i2___ftpack@arg
  5126  00334E  C00A  F002         	movff	___lwtoft@c+1,i2___ftpack@arg+1
  5127  003352  6A03               	clrf	i2___ftpack@arg+2,c
  5128  003354  0E8E               	movlw	142
  5129  003356  6E04               	movwf	i2___ftpack@exp,c
  5130  003358  0E00               	movlw	0
  5131  00335A  6E05               	movwf	i2___ftpack@sign,c
  5132  00335C  ECED  F015         	call	i2___ftpack	;wreg free
  5133  003360  C001  F009         	movff	?i2___ftpack,?___lwtoft
  5134  003364  C002  F00A         	movff	?i2___ftpack+1,?___lwtoft+1
  5135  003368  C003  F00B         	movff	?i2___ftpack+2,?___lwtoft+2
  5136  00336C  D000               	goto	i2l1125
  5137  00336E                     i2l1125:
  5138  00336E  0012               	return		;funcret
  5139  003370                     __end_of___lwtoft:
  5140                           	opt stack 0
  5141                           pclatu	equ	0xFFB
  5142                           pclath	equ	0xFFA
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           intcon	equ	0xFF2
  5150                           intcon2	equ	0xFF1
  5151                           indf0	equ	0xFEF
  5152                           postinc0	equ	0xFEE
  5153                           fsr0h	equ	0xFEA
  5154                           fsr0l	equ	0xFE9
  5155                           wreg	equ	0xFE8
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           fsr2h	equ	0xFDA
  5159                           fsr2l	equ	0xFD9
  5160                           status	equ	0xFD8
  5161                           
  5162 ;; *************** function _ImplementPIDMotion *****************
  5163 ;; Defined at:
  5164 ;;		line 28 in file "MotorControl.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;  PIDValue        2    4[COMRAM] int 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;		None               void
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;Total ram usage:        4 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    1
  5185 ;; This function calls:
  5186 ;;		_abs
  5187 ;; This function is called by:
  5188 ;;		_TMR0Int
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text29
  5193  002F1E                     __ptext29:
  5194                           	opt stack 0
  5195  002F1E                     _ImplementPIDMotion:
  5196                           	opt stack 22
  5197                           
  5198                           ;MotorControl.c: 30: if (PIDValue < 0)
  5199                           
  5200                           ;incstack = 0
  5201  002F1E  AE06               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  5202  002F20  D002               	goto	i2l3247
  5203                           
  5204                           ;MotorControl.c: 31: CCP3CONbits.P3M1 = 1;
  5205  002F22  8EB7               	bsf	4023,7,c	;volatile
  5206  002F24  D009               	goto	i2l3251
  5207  002F26                     i2l3247:
  5208                           
  5209                           ;MotorControl.c: 32: else if (PIDValue > 0)
  5210  002F26  BE06               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  5211  002F28  D007               	goto	i2l3251
  5212  002F2A  5006               	movf	ImplementPIDMotion@PIDValue+1,w,c
  5213  002F2C  E103               	bnz	i2u360_40
  5214  002F2E  0405               	decf	ImplementPIDMotion@PIDValue,w,c
  5215  002F30  A0D8               	btfss	status,0,c
  5216  002F32  D002               	goto	i2l3251
  5217  002F34                     i2u360_40:
  5218                           
  5219                           ;MotorControl.c: 33: CCP3CONbits.P3M1 = 0;
  5220  002F34  9EB7               	bcf	4023,7,c	;volatile
  5221  002F36  D000               	goto	i2l3251
  5222  002F38                     i2l3251:
  5223                           
  5224                           ;MotorControl.c: 35: PIDValue = abs(PIDValue);
  5225  002F38  C005  F001         	movff	ImplementPIDMotion@PIDValue,abs@a
  5226  002F3C  C006  F002         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  5227  002F40  EC91  F019         	call	_abs	;wreg free
  5228  002F44  C001  F005         	movff	?_abs,ImplementPIDMotion@PIDValue
  5229  002F48  C002  F006         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  5230                           
  5231                           ;MotorControl.c: 36: CCPR3L = (PIDValue >> 2) & 0xFF;
  5232  002F4C  C005  F007         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5233  002F50  C006  F008         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  5234  002F54  3408               	rlcf	??_ImplementPIDMotion+1,w,c
  5235  002F56  3208               	rrcf	??_ImplementPIDMotion+1,f,c
  5236  002F58  3207               	rrcf	??_ImplementPIDMotion,f,c
  5237  002F5A  3408               	rlcf	??_ImplementPIDMotion+1,w,c
  5238  002F5C  3208               	rrcf	??_ImplementPIDMotion+1,f,c
  5239  002F5E  3207               	rrcf	??_ImplementPIDMotion,f,c
  5240  002F60  5007               	movf	??_ImplementPIDMotion,w,c
  5241  002F62  6EB8               	movwf	4024,c	;volatile
  5242                           
  5243                           ;MotorControl.c: 37: CCP3CONbits.DC3B = (PIDValue & 0x03);
  5244  002F64  C005  F007         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5245  002F68  0E03               	movlw	3
  5246  002F6A  1607               	andwf	??_ImplementPIDMotion,f,c
  5247  002F6C  3A07               	swapf	??_ImplementPIDMotion,f,c
  5248  002F6E  50B7               	movf	4023,w,c	;volatile
  5249  002F70  1807               	xorwf	??_ImplementPIDMotion,w,c
  5250  002F72  0BCF               	andlw	-49
  5251  002F74  1807               	xorwf	??_ImplementPIDMotion,w,c
  5252  002F76  6EB7               	movwf	4023,c	;volatile
  5253  002F78  0012               	return		;funcret
  5254  002F7A                     __end_of_ImplementPIDMotion:
  5255                           	opt stack 0
  5256                           pclatu	equ	0xFFB
  5257                           pclath	equ	0xFFA
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           intcon	equ	0xFF2
  5265                           intcon2	equ	0xFF1
  5266                           indf0	equ	0xFEF
  5267                           postinc0	equ	0xFEE
  5268                           fsr0h	equ	0xFEA
  5269                           fsr0l	equ	0xFE9
  5270                           wreg	equ	0xFE8
  5271                           fsr1h	equ	0xFE2
  5272                           fsr1l	equ	0xFE1
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _abs *****************
  5278 ;; Defined at:
  5279 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  a               2    0[COMRAM] int 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  2    0[COMRAM] int 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5293 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;Total ram usage:        4 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; This function calls:
  5300 ;;		Nothing
  5301 ;; This function is called by:
  5302 ;;		_ImplementPIDMotion
  5303 ;;		_ImplementJSMotion
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text30
  5308  003322                     __ptext30:
  5309                           	opt stack 0
  5310  003322                     _abs:
  5311                           	opt stack 22
  5312                           
  5313                           ;incstack = 0
  5314  003322  AE02               	btfss	abs@a+1,7,c
  5315  003324  D00D               	goto	i2l531
  5316  003326  C001  F003         	movff	abs@a,??_abs
  5317  00332A  C002  F004         	movff	abs@a+1,??_abs+1
  5318  00332E  1E03               	comf	??_abs,f,c
  5319  003330  1E04               	comf	??_abs+1,f,c
  5320  003332  4A03               	infsnz	??_abs,f,c
  5321  003334  2A04               	incf	??_abs+1,f,c
  5322  003336  C003  F001         	movff	??_abs,?_abs
  5323  00333A  C004  F002         	movff	??_abs+1,?_abs+1
  5324  00333E  D004               	goto	i2l532
  5325  003340                     i2l531:
  5326  003340  C001  F001         	movff	abs@a,?_abs
  5327  003344  C002  F002         	movff	abs@a+1,?_abs+1
  5328  003348                     i2l532:
  5329  003348  0012               	return		;funcret
  5330  00334A                     __end_of_abs:
  5331                           	opt stack 0
  5332                           pclatu	equ	0xFFB
  5333                           pclath	equ	0xFFA
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           intcon2	equ	0xFF1
  5342                           indf0	equ	0xFEF
  5343                           postinc0	equ	0xFEE
  5344                           fsr0h	equ	0xFEA
  5345                           fsr0l	equ	0xFE9
  5346                           wreg	equ	0xFE8
  5347                           fsr1h	equ	0xFE2
  5348                           fsr1l	equ	0xFE1
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353 ;; *************** function _RCInt *****************
  5354 ;; Defined at:
  5355 ;;		line 19 in file "KeyValue.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  counter         1   83[COMRAM] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;Total ram usage:        2 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    4
  5376 ;; This function calls:
  5377 ;;		_keyValue
  5378 ;;		i2_SerTx
  5379 ;; This function is called by:
  5380 ;;		_ISR
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text31
  5385  002592                     __ptext31:
  5386                           	opt stack 0
  5387  002592                     _RCInt:
  5388                           	opt stack 20
  5389                           
  5390                           ;KeyValue.c: 21: unsigned char counter = 0;
  5391                           
  5392                           ;incstack = 0
  5393  002592  0E00               	movlw	0
  5394  002594  6E54               	movwf	RCInt@counter,c
  5395                           
  5396                           ;KeyValue.c: 23: {
  5397                           ;KeyValue.c: 24: while (PIR1bits.RCIF == 0);
  5398                           
  5399                           ;KeyValue.c: 22: do
  5400  002596  D000               	goto	i2l251
  5401  002598                     i2l251:
  5402  002598  AA9E               	btfss	3998,5,c	;volatile
  5403  00259A  D7FE               	goto	i2l251
  5404                           
  5405                           ;KeyValue.c: 25: received[counter] = RCREG;
  5406  00259C  5054               	movf	RCInt@counter,w,c
  5407  00259E  0D01               	mullw	1
  5408  0025A0  0E78               	movlw	low _received
  5409  0025A2  24F3               	addwf	prodl,w,c
  5410  0025A4  6ED9               	movwf	fsr2l,c
  5411  0025A6  0E00               	movlw	high _received
  5412  0025A8  20F4               	addwfc	prodh,w,c
  5413  0025AA  6EDA               	movwf	fsr2h,c
  5414  0025AC  CFAE FFDF          	movff	4014,indf2	;volatile
  5415                           
  5416                           ;KeyValue.c: 26: SerTx(RCREG);
  5417  0025B0  50AE               	movf	4014,w,c	;volatile
  5418  0025B2  EC45  F01A         	call	i2_SerTx
  5419                           
  5420                           ;KeyValue.c: 27: if ((received[counter] == 0x08) || received[counter] == 0x7F)
  5421  0025B6  5054               	movf	RCInt@counter,w,c
  5422  0025B8  0D01               	mullw	1
  5423  0025BA  0E78               	movlw	low _received
  5424  0025BC  24F3               	addwf	prodl,w,c
  5425  0025BE  6ED9               	movwf	fsr2l,c
  5426  0025C0  0E00               	movlw	high _received
  5427  0025C2  20F4               	addwfc	prodh,w,c
  5428  0025C4  6EDA               	movwf	fsr2h,c
  5429  0025C6  0E08               	movlw	8
  5430  0025C8  18DE               	xorwf	postinc2,w,c
  5431  0025CA  B4D8               	btfsc	status,2,c
  5432  0025CC  D00C               	goto	i2l3699
  5433  0025CE  5054               	movf	RCInt@counter,w,c
  5434  0025D0  0D01               	mullw	1
  5435  0025D2  0E78               	movlw	low _received
  5436  0025D4  24F3               	addwf	prodl,w,c
  5437  0025D6  6ED9               	movwf	fsr2l,c
  5438  0025D8  0E00               	movlw	high _received
  5439  0025DA  20F4               	addwfc	prodh,w,c
  5440  0025DC  6EDA               	movwf	fsr2h,c
  5441  0025DE  0E7F               	movlw	127
  5442  0025E0  18DE               	xorwf	postinc2,w,c
  5443  0025E2  A4D8               	btfss	status,2,c
  5444  0025E4  D010               	goto	i2l3705
  5445  0025E6                     i2l3699:
  5446                           
  5447                           ;KeyValue.c: 28: {
  5448                           ;KeyValue.c: 29: if (counter != 0)
  5449  0025E6  5054               	movf	RCInt@counter,w,c
  5450  0025E8  B4D8               	btfsc	status,2,c
  5451  0025EA  D002               	goto	i2l3703
  5452                           
  5453                           ;KeyValue.c: 30: counter--;
  5454  0025EC  0654               	decf	RCInt@counter,f,c
  5455  0025EE  D000               	goto	i2l3703
  5456  0025F0                     i2l3703:
  5457                           
  5458                           ;KeyValue.c: 31: received[counter] = '\0';
  5459  0025F0  5054               	movf	RCInt@counter,w,c
  5460  0025F2  0D01               	mullw	1
  5461  0025F4  0E78               	movlw	low _received
  5462  0025F6  24F3               	addwf	prodl,w,c
  5463  0025F8  6ED9               	movwf	fsr2l,c
  5464  0025FA  0E00               	movlw	high _received
  5465  0025FC  20F4               	addwfc	prodh,w,c
  5466  0025FE  6EDA               	movwf	fsr2h,c
  5467  002600  0E00               	movlw	0
  5468  002602  6EDF               	movwf	indf2,c
  5469                           
  5470                           ;KeyValue.c: 32: }
  5471  002604  D01A               	goto	i2l3711
  5472  002606                     i2l3705:
  5473                           
  5474                           ;KeyValue.c: 33: else if ((received[counter] != 0x08) && (received[counter] != 0x0D))
  5475  002606  5054               	movf	RCInt@counter,w,c
  5476  002608  0D01               	mullw	1
  5477  00260A  0E78               	movlw	low _received
  5478  00260C  24F3               	addwf	prodl,w,c
  5479  00260E  6ED9               	movwf	fsr2l,c
  5480  002610  0E00               	movlw	high _received
  5481  002612  20F4               	addwfc	prodh,w,c
  5482  002614  6EDA               	movwf	fsr2h,c
  5483  002616  0E08               	movlw	8
  5484  002618  18DE               	xorwf	postinc2,w,c
  5485  00261A  B4D8               	btfsc	status,2,c
  5486  00261C  D00E               	goto	i2l3711
  5487  00261E  5054               	movf	RCInt@counter,w,c
  5488  002620  0D01               	mullw	1
  5489  002622  0E78               	movlw	low _received
  5490  002624  24F3               	addwf	prodl,w,c
  5491  002626  6ED9               	movwf	fsr2l,c
  5492  002628  0E00               	movlw	high _received
  5493  00262A  20F4               	addwfc	prodh,w,c
  5494  00262C  6EDA               	movwf	fsr2h,c
  5495  00262E  0E0D               	movlw	13
  5496  002630  18DE               	xorwf	postinc2,w,c
  5497  002632  B4D8               	btfsc	status,2,c
  5498  002634  D002               	goto	i2l3711
  5499                           
  5500                           ;KeyValue.c: 34: counter++;
  5501  002636  2A54               	incf	RCInt@counter,f,c
  5502  002638  D000               	goto	i2l3711
  5503  00263A                     i2l3711:
  5504                           
  5505                           ;KeyValue.c: 35: }
  5506                           ;KeyValue.c: 36: while (RCREG != 0x0D);
  5507  00263A  0E0D               	movlw	13
  5508  00263C  18AE               	xorwf	4014,w,c	;volatile
  5509  00263E  A4D8               	btfss	status,2,c
  5510  002640  D7AB               	goto	i2l251
  5511                           
  5512                           ;KeyValue.c: 38: SerTx(0x0A);
  5513  002642  0E0A               	movlw	10
  5514  002644  EC45  F01A         	call	i2_SerTx
  5515                           
  5516                           ;KeyValue.c: 39: SerTx(0x0D);
  5517  002648  0E0D               	movlw	13
  5518  00264A  EC45  F01A         	call	i2_SerTx
  5519                           
  5520                           ;KeyValue.c: 40: keyValue(received, 30);
  5521  00264E  0E78               	movlw	low _received
  5522  002650  6E48               	movwf	keyValue@str,c
  5523  002652  0E00               	movlw	high _received
  5524  002654  6E49               	movwf	keyValue@str+1,c
  5525  002656  0E00               	movlw	0
  5526  002658  6E4B               	movwf	keyValue@length+1,c
  5527  00265A  0E1E               	movlw	30
  5528  00265C  6E4A               	movwf	keyValue@length,c
  5529  00265E  ECDE  F00B         	call	_keyValue	;wreg free
  5530                           
  5531                           ;KeyValue.c: 41: SerTx(0x0A);
  5532  002662  0E0A               	movlw	10
  5533  002664  EC45  F01A         	call	i2_SerTx
  5534                           
  5535                           ;KeyValue.c: 42: SerTx(0x0D);
  5536  002668  0E0D               	movlw	13
  5537  00266A  EC45  F01A         	call	i2_SerTx
  5538                           
  5539                           ;KeyValue.c: 44: if (StrippedKey == 0x01)
  5540  00266E  0459               	decf	_StrippedKey,w,c
  5541  002670  A4D8               	btfss	status,2,c
  5542  002672  D007               	goto	i2l3725
  5543                           
  5544                           ;KeyValue.c: 45: {
  5545                           ;KeyValue.c: 46: SetAngle = StrippedValue;
  5546  002674  C072  F06F         	movff	_StrippedValue,_SetAngle
  5547  002678  C073  F070         	movff	_StrippedValue+1,_SetAngle+1
  5548  00267C  C074  F071         	movff	_StrippedValue+2,_SetAngle+2
  5549                           
  5550                           ;KeyValue.c: 47: }
  5551  002680  D021               	goto	i2l262
  5552  002682                     i2l3725:
  5553                           
  5554                           ;KeyValue.c: 49: else if (StrippedKey == 0x05)
  5555  002682  0E05               	movlw	5
  5556  002684  1859               	xorwf	_StrippedKey,w,c
  5557  002686  A4D8               	btfss	status,2,c
  5558  002688  D007               	goto	i2l3729
  5559                           
  5560                           ;KeyValue.c: 50: {
  5561                           ;KeyValue.c: 51: Kp = StrippedValue;
  5562  00268A  C072  F06C         	movff	_StrippedValue,_Kp
  5563  00268E  C073  F06D         	movff	_StrippedValue+1,_Kp+1
  5564  002692  C074  F06E         	movff	_StrippedValue+2,_Kp+2
  5565                           
  5566                           ;KeyValue.c: 52: }
  5567  002696  D016               	goto	i2l262
  5568  002698                     i2l3729:
  5569                           
  5570                           ;KeyValue.c: 54: else if (StrippedKey == 0x07)
  5571  002698  0E07               	movlw	7
  5572  00269A  1859               	xorwf	_StrippedKey,w,c
  5573  00269C  A4D8               	btfss	status,2,c
  5574  00269E  D007               	goto	i2l3733
  5575                           
  5576                           ;KeyValue.c: 55: {
  5577                           ;KeyValue.c: 56: Ki = StrippedValue;
  5578  0026A0  C072  F069         	movff	_StrippedValue,_Ki
  5579  0026A4  C073  F06A         	movff	_StrippedValue+1,_Ki+1
  5580  0026A8  C074  F06B         	movff	_StrippedValue+2,_Ki+2
  5581                           
  5582                           ;KeyValue.c: 57: }
  5583  0026AC  D00B               	goto	i2l262
  5584  0026AE                     i2l3733:
  5585                           
  5586                           ;KeyValue.c: 59: else if (StrippedKey == 0x09)
  5587  0026AE  0E09               	movlw	9
  5588  0026B0  1859               	xorwf	_StrippedKey,w,c
  5589  0026B2  A4D8               	btfss	status,2,c
  5590  0026B4  D007               	goto	i2l262
  5591                           
  5592                           ;KeyValue.c: 60: {
  5593                           ;KeyValue.c: 61: Kd = StrippedValue;
  5594  0026B6  C072  F066         	movff	_StrippedValue,_Kd
  5595  0026BA  C073  F067         	movff	_StrippedValue+1,_Kd+1
  5596  0026BE  C074  F068         	movff	_StrippedValue+2,_Kd+2
  5597  0026C2  D000               	goto	i2l262
  5598  0026C4                     i2l262:
  5599                           
  5600                           ;KeyValue.c: 62: }
  5601                           ;KeyValue.c: 64: PIR1bits.RCIF = 0;
  5602  0026C4  9A9E               	bcf	3998,5,c	;volatile
  5603  0026C6  0012               	return		;funcret
  5604  0026C8                     __end_of_RCInt:
  5605                           	opt stack 0
  5606                           pclatu	equ	0xFFB
  5607                           pclath	equ	0xFFA
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           intcon	equ	0xFF2
  5615                           intcon2	equ	0xFF1
  5616                           indf0	equ	0xFEF
  5617                           postinc0	equ	0xFEE
  5618                           fsr0h	equ	0xFEA
  5619                           fsr0l	equ	0xFE9
  5620                           wreg	equ	0xFE8
  5621                           fsr1h	equ	0xFE2
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _keyValue *****************
  5630 ;; Defined at:
  5631 ;;		line 67 in file "KeyValue.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  str             2   71[COMRAM] PTR unsigned char 
  5634 ;;		 -> received(30), 
  5635 ;;  length          2   73[COMRAM] unsigned short 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  str_end         2   77[COMRAM] PTR unsigned char 
  5638 ;;		 -> value(10), 
  5639 ;;  x               1   81[COMRAM] unsigned char 
  5640 ;;  y               1   80[COMRAM] unsigned char 
  5641 ;;  flag            1   79[COMRAM] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;		None               void
  5644 ;; Registers used:
  5645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;Total ram usage:       11 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    3
  5658 ;; This function calls:
  5659 ;;		_isspace
  5660 ;;		_strcmp
  5661 ;;		_strtod
  5662 ;;		i2_SerTx
  5663 ;;		i2_SerTxStr
  5664 ;; This function is called by:
  5665 ;;		_RCInt
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text32
  5670  0017BC                     __ptext32:
  5671                           	opt stack 0
  5672  0017BC                     _keyValue:
  5673                           	opt stack 20
  5674                           
  5675                           ;KeyValue.c: 69: unsigned char x = 0;
  5676                           
  5677                           ;incstack = 0
  5678  0017BC  0E00               	movlw	0
  5679  0017BE  6E52               	movwf	keyValue@x,c
  5680                           
  5681                           ;KeyValue.c: 70: unsigned char y = 0;
  5682  0017C0  0E00               	movlw	0
  5683  0017C2  6E51               	movwf	keyValue@y,c
  5684  0017C4  D00F               	goto	i2l3307
  5685  0017C6                     i2l3301:
  5686                           
  5687                           ;KeyValue.c: 75: {
  5688                           ;KeyValue.c: 76: x++;
  5689  0017C6  2A52               	incf	keyValue@x,f,c
  5690                           
  5691                           ;KeyValue.c: 77: if (str[x] == '=')
  5692  0017C8  5052               	movf	keyValue@x,w,c
  5693  0017CA  0D01               	mullw	1
  5694  0017CC  50F3               	movf	prodl,w,c
  5695  0017CE  2448               	addwf	keyValue@str,w,c
  5696  0017D0  6ED9               	movwf	fsr2l,c
  5697  0017D2  50F4               	movf	prodh,w,c
  5698  0017D4  2049               	addwfc	keyValue@str+1,w,c
  5699  0017D6  6EDA               	movwf	fsr2h,c
  5700  0017D8  0E3D               	movlw	61
  5701  0017DA  18DE               	xorwf	postinc2,w,c
  5702  0017DC  A4D8               	btfss	status,2,c
  5703  0017DE  D002               	goto	i2l3307
  5704                           
  5705                           ;KeyValue.c: 78: {
  5706                           ;KeyValue.c: 79: flag = 1;
  5707  0017E0  0E01               	movlw	1
  5708  0017E2  D001               	goto	L9
  5709  0017E4                     i2l3307:
  5710                           
  5711                           ;KeyValue.c: 81: else
  5712                           ;KeyValue.c: 82: flag = 0;
  5713  0017E4  0E00               	movlw	0
  5714  0017E6                     L9:
  5715  0017E6  6E50               	movwf	keyValue@flag,c
  5716  0017E8  D000               	goto	i2l3309
  5717  0017EA                     i2l3309:
  5718  0017EA  5052               	movf	keyValue@x,w,c
  5719  0017EC  0D01               	mullw	1
  5720  0017EE  50F3               	movf	prodl,w,c
  5721  0017F0  2448               	addwf	keyValue@str,w,c
  5722  0017F2  6ED9               	movwf	fsr2l,c
  5723  0017F4  50F4               	movf	prodh,w,c
  5724  0017F6  2049               	addwfc	keyValue@str+1,w,c
  5725  0017F8  6EDA               	movwf	fsr2h,c
  5726  0017FA  0E3D               	movlw	61
  5727  0017FC  18DE               	xorwf	postinc2,w,c
  5728  0017FE  B4D8               	btfsc	status,2,c
  5729  001800  D00B               	goto	i2l3313
  5730  001802  5052               	movf	keyValue@x,w,c
  5731  001804  6E4C               	movwf	??_keyValue& (0+255),c
  5732  001806  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  5733  001808  504A               	movf	keyValue@length,w,c
  5734  00180A  5C4C               	subwf	??_keyValue,w,c
  5735  00180C  504B               	movf	keyValue@length+1,w,c
  5736  00180E  584D               	subwfb	??_keyValue+1,w,c
  5737  001810  B0D8               	btfsc	status,0,c
  5738  001812  D002               	goto	i2l3313
  5739  001814  D7D8               	goto	i2l3301
  5740  001816  D000               	goto	i2l3313
  5741  001818                     i2l3313:
  5742                           
  5743                           ;KeyValue.c: 83: }
  5744                           ;KeyValue.c: 84: if ((x < length) && flag)
  5745  001818  5052               	movf	keyValue@x,w,c
  5746  00181A  6E4C               	movwf	??_keyValue& (0+255),c
  5747  00181C  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  5748  00181E  504A               	movf	keyValue@length,w,c
  5749  001820  5C4C               	subwf	??_keyValue,w,c
  5750  001822  504B               	movf	keyValue@length+1,w,c
  5751  001824  584D               	subwfb	??_keyValue+1,w,c
  5752  001826  B0D8               	btfsc	status,0,c
  5753  001828  D100               	goto	i2l3379
  5754  00182A  5050               	movf	keyValue@flag,w,c
  5755  00182C  B4D8               	btfsc	status,2,c
  5756  00182E  D0FD               	goto	i2l3379
  5757                           
  5758                           ;KeyValue.c: 85: {
  5759                           ;KeyValue.c: 86: for (y = 0; y < x && y < 5; y++)
  5760  001830  0E00               	movlw	0
  5761  001832  6E51               	movwf	keyValue@y,c
  5762  001834  D022               	goto	i2l3325
  5763  001836                     i2l3319:
  5764                           
  5765                           ;KeyValue.c: 87: {
  5766                           ;KeyValue.c: 88: if (isspace(str[y]) == 0)
  5767  001836  5051               	movf	keyValue@y,w,c
  5768  001838  0D01               	mullw	1
  5769  00183A  50F3               	movf	prodl,w,c
  5770  00183C  2448               	addwf	keyValue@str,w,c
  5771  00183E  6ED9               	movwf	fsr2l,c
  5772  001840  50F4               	movf	prodh,w,c
  5773  001842  2049               	addwfc	keyValue@str+1,w,c
  5774  001844  6EDA               	movwf	fsr2h,c
  5775  001846  50DF               	movf	indf2,w,c
  5776  001848  EC67  F019         	call	_isspace
  5777  00184C  B0D8               	btfsc	status,0,c
  5778  00184E  D013               	goto	i2l3323
  5779                           
  5780                           ;KeyValue.c: 89: key[y] = str[y];
  5781  001850  5051               	movf	keyValue@y,w,c
  5782  001852  0D01               	mullw	1
  5783  001854  50F3               	movf	prodl,w,c
  5784  001856  2448               	addwf	keyValue@str,w,c
  5785  001858  6ED9               	movwf	fsr2l,c
  5786  00185A  50F4               	movf	prodh,w,c
  5787  00185C  2049               	addwfc	keyValue@str+1,w,c
  5788  00185E  6EDA               	movwf	fsr2h,c
  5789  001860  5051               	movf	keyValue@y,w,c
  5790  001862  0D01               	mullw	1
  5791  001864  0E5A               	movlw	low _key
  5792  001866  24F3               	addwf	prodl,w,c
  5793  001868  6EE1               	movwf	fsr1l,c
  5794  00186A  0E00               	movlw	high _key
  5795  00186C  20F4               	addwfc	prodh,w,c
  5796  00186E  6EE2               	movwf	fsr1h,c
  5797  001870  CFDF FFE7          	movff	indf2,indf1
  5798  001874  D000               	goto	i2l3323
  5799  001876                     i2l3323:
  5800  001876  2A51               	incf	keyValue@y,f,c
  5801  001878  D000               	goto	i2l3325
  5802  00187A                     i2l3325:
  5803  00187A  5052               	movf	keyValue@x,w,c
  5804  00187C  5C51               	subwf	keyValue@y,w,c
  5805  00187E  B0D8               	btfsc	status,0,c
  5806  001880  D004               	goto	i2l3329
  5807  001882  0E04               	movlw	4
  5808  001884  6451               	cpfsgt	keyValue@y,c
  5809  001886  D7D7               	goto	i2l3319
  5810  001888  D000               	goto	i2l3329
  5811  00188A                     i2l3329:
  5812                           
  5813                           ;KeyValue.c: 90: }
  5814                           ;KeyValue.c: 92: SerTxStr("Key: ");
  5815  00188A  0E3E               	movlw	low STR_3
  5816  00188C  6E02               	movwf	i2SerTxStr@string,c
  5817  00188E  0E10               	movlw	high STR_3
  5818  001890  6E03               	movwf	i2SerTxStr@string+1,c
  5819  001892  EC17  F018         	call	i2_SerTxStr	;wreg free
  5820                           
  5821                           ;KeyValue.c: 93: SerTxStr(key);
  5822  001896  0E5A               	movlw	low _key
  5823  001898  6E02               	movwf	i2SerTxStr@string,c
  5824  00189A  0E00               	movlw	high _key
  5825  00189C  6E03               	movwf	i2SerTxStr@string+1,c
  5826  00189E  EC17  F018         	call	i2_SerTxStr	;wreg free
  5827                           
  5828                           ;KeyValue.c: 95: for (y = 0; str[x + 1] != (0); y++)
  5829  0018A2  0E00               	movlw	0
  5830  0018A4  6E51               	movwf	keyValue@y,c
  5831  0018A6  D015               	goto	i2l3339
  5832  0018A8                     i2l3333:
  5833                           
  5834                           ;KeyValue.c: 96: {
  5835                           ;KeyValue.c: 97: x++;
  5836  0018A8  2A52               	incf	keyValue@x,f,c
  5837                           
  5838                           ;KeyValue.c: 99: value[y] = str[x];
  5839  0018AA  5052               	movf	keyValue@x,w,c
  5840  0018AC  0D01               	mullw	1
  5841  0018AE  50F3               	movf	prodl,w,c
  5842  0018B0  2448               	addwf	keyValue@str,w,c
  5843  0018B2  6ED9               	movwf	fsr2l,c
  5844  0018B4  50F4               	movf	prodh,w,c
  5845  0018B6  2049               	addwfc	keyValue@str+1,w,c
  5846  0018B8  6EDA               	movwf	fsr2h,c
  5847  0018BA  5051               	movf	keyValue@y,w,c
  5848  0018BC  0D01               	mullw	1
  5849  0018BE  0E96               	movlw	low _value
  5850  0018C0  24F3               	addwf	prodl,w,c
  5851  0018C2  6EE1               	movwf	fsr1l,c
  5852  0018C4  0E00               	movlw	high _value
  5853  0018C6  20F4               	addwfc	prodh,w,c
  5854  0018C8  6EE2               	movwf	fsr1h,c
  5855  0018CA  CFDF FFE7          	movff	indf2,indf1
  5856  0018CE  2A51               	incf	keyValue@y,f,c
  5857  0018D0  D000               	goto	i2l3339
  5858  0018D2                     i2l3339:
  5859  0018D2  5052               	movf	keyValue@x,w,c
  5860  0018D4  6E4C               	movwf	??_keyValue& (0+255),c
  5861  0018D6  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  5862  0018D8  0E01               	movlw	1
  5863  0018DA  264C               	addwf	??_keyValue,f,c
  5864  0018DC  0E00               	movlw	0
  5865  0018DE  224D               	addwfc	??_keyValue+1,f,c
  5866  0018E0  504C               	movf	??_keyValue,w,c
  5867  0018E2  2448               	addwf	keyValue@str,w,c
  5868  0018E4  6ED9               	movwf	fsr2l,c
  5869  0018E6  504D               	movf	??_keyValue+1,w,c
  5870  0018E8  2049               	addwfc	keyValue@str+1,w,c
  5871  0018EA  6EDA               	movwf	fsr2h,c
  5872  0018EC  50DF               	movf	indf2,w,c
  5873  0018EE  A4D8               	btfss	status,2,c
  5874  0018F0  D7DB               	goto	i2l3333
  5875                           
  5876                           ;KeyValue.c: 100: }
  5877                           ;KeyValue.c: 101: SerTxStr("   Value: ");
  5878  0018F2  0E25               	movlw	low STR_4
  5879  0018F4  6E02               	movwf	i2SerTxStr@string,c
  5880  0018F6  0E10               	movlw	high STR_4
  5881  0018F8  6E03               	movwf	i2SerTxStr@string+1,c
  5882  0018FA  EC17  F018         	call	i2_SerTxStr	;wreg free
  5883                           
  5884                           ;KeyValue.c: 102: SerTxStr(value);
  5885  0018FE  0E96               	movlw	low _value
  5886  001900  6E02               	movwf	i2SerTxStr@string,c
  5887  001902  0E00               	movlw	high _value
  5888  001904  6E03               	movwf	i2SerTxStr@string+1,c
  5889  001906  EC17  F018         	call	i2_SerTxStr	;wreg free
  5890                           
  5891                           ;KeyValue.c: 104: if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  5892  00190A  0E5A               	movlw	low _key
  5893  00190C  6E01               	movwf	strcmp@s1,c
  5894  00190E  0E00               	movlw	high _key
  5895  001910  6E02               	movwf	strcmp@s1+1,c
  5896  001912  0E4C               	movlw	low STR_5
  5897  001914  6E03               	movwf	strcmp@s2,c
  5898  001916  0E10               	movlw	high STR_5
  5899  001918  6E04               	movwf	strcmp@s2+1,c
  5900  00191A  EC43  F018         	call	_strcmp	;wreg free
  5901  00191E  5001               	movf	?_strcmp,w,c
  5902  001920  1002               	iorwf	?_strcmp+1,w,c
  5903  001922  B4D8               	btfsc	status,2,c
  5904  001924  D00E               	goto	i2l3347
  5905  001926  0E5A               	movlw	low _key
  5906  001928  6E01               	movwf	strcmp@s1,c
  5907  00192A  0E00               	movlw	high _key
  5908  00192C  6E02               	movwf	strcmp@s1+1,c
  5909  00192E  0E54               	movlw	low STR_6
  5910  001930  6E03               	movwf	strcmp@s2,c
  5911  001932  0E10               	movlw	high STR_6
  5912  001934  6E04               	movwf	strcmp@s2+1,c
  5913  001936  EC43  F018         	call	_strcmp	;wreg free
  5914  00193A  5001               	movf	?_strcmp,w,c
  5915  00193C  1002               	iorwf	?_strcmp+1,w,c
  5916  00193E  A4D8               	btfss	status,2,c
  5917  001940  D006               	goto	i2l3351
  5918  001942                     i2l3347:
  5919                           
  5920                           ;KeyValue.c: 105: {
  5921                           ;KeyValue.c: 106: StrippedKey = 0x01;
  5922  001942  0E01               	movlw	1
  5923  001944  6E59               	movwf	_StrippedKey,c
  5924                           
  5925                           ;KeyValue.c: 107: SerTx(';');
  5926  001946  0E3B               	movlw	59
  5927  001948  EC45  F01A         	call	i2_SerTx
  5928                           
  5929                           ;KeyValue.c: 108: }
  5930  00194C  D197               	goto	i2l3451
  5931  00194E                     i2l3351:
  5932                           
  5933                           ;KeyValue.c: 110: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  5934  00194E  0E5A               	movlw	low _key
  5935  001950  6E01               	movwf	strcmp@s1,c
  5936  001952  0E00               	movlw	high _key
  5937  001954  6E02               	movwf	strcmp@s1+1,c
  5938  001956  0E5E               	movlw	low STR_7
  5939  001958  6E03               	movwf	strcmp@s2,c
  5940  00195A  0E10               	movlw	high STR_7
  5941  00195C  6E04               	movwf	strcmp@s2+1,c
  5942  00195E  EC43  F018         	call	_strcmp	;wreg free
  5943  001962  5001               	movf	?_strcmp,w,c
  5944  001964  1002               	iorwf	?_strcmp+1,w,c
  5945  001966  B4D8               	btfsc	status,2,c
  5946  001968  D00E               	goto	i2l3355
  5947  00196A  0E5A               	movlw	low _key
  5948  00196C  6E01               	movwf	strcmp@s1,c
  5949  00196E  0E00               	movlw	high _key
  5950  001970  6E02               	movwf	strcmp@s1+1,c
  5951  001972  0E6A               	movlw	low STR_8
  5952  001974  6E03               	movwf	strcmp@s2,c
  5953  001976  0E10               	movlw	high STR_8
  5954  001978  6E04               	movwf	strcmp@s2+1,c
  5955  00197A  EC43  F018         	call	_strcmp	;wreg free
  5956  00197E  5001               	movf	?_strcmp,w,c
  5957  001980  1002               	iorwf	?_strcmp+1,w,c
  5958  001982  A4D8               	btfss	status,2,c
  5959  001984  D006               	goto	i2l3359
  5960  001986                     i2l3355:
  5961                           
  5962                           ;KeyValue.c: 111: {
  5963                           ;KeyValue.c: 112: StrippedKey = 0x05;
  5964  001986  0E05               	movlw	5
  5965  001988  6E59               	movwf	_StrippedKey,c
  5966                           
  5967                           ;KeyValue.c: 113: SerTx(';');
  5968  00198A  0E3B               	movlw	59
  5969  00198C  EC45  F01A         	call	i2_SerTx
  5970                           
  5971                           ;KeyValue.c: 114: }
  5972  001990  D175               	goto	i2l3451
  5973  001992                     i2l3359:
  5974                           
  5975                           ;KeyValue.c: 116: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  5976  001992  0E5A               	movlw	low _key
  5977  001994  6E01               	movwf	strcmp@s1,c
  5978  001996  0E00               	movlw	high _key
  5979  001998  6E02               	movwf	strcmp@s1+1,c
  5980  00199A  0E5B               	movlw	low STR_9
  5981  00199C  6E03               	movwf	strcmp@s2,c
  5982  00199E  0E10               	movlw	high STR_9
  5983  0019A0  6E04               	movwf	strcmp@s2+1,c
  5984  0019A2  EC43  F018         	call	_strcmp	;wreg free
  5985  0019A6  5001               	movf	?_strcmp,w,c
  5986  0019A8  1002               	iorwf	?_strcmp+1,w,c
  5987  0019AA  B4D8               	btfsc	status,2,c
  5988  0019AC  D00E               	goto	i2l3363
  5989  0019AE  0E5A               	movlw	low _key
  5990  0019B0  6E01               	movwf	strcmp@s1,c
  5991  0019B2  0E00               	movlw	high _key
  5992  0019B4  6E02               	movwf	strcmp@s1+1,c
  5993  0019B6  0E67               	movlw	low STR_10
  5994  0019B8  6E03               	movwf	strcmp@s2,c
  5995  0019BA  0E10               	movlw	high STR_10
  5996  0019BC  6E04               	movwf	strcmp@s2+1,c
  5997  0019BE  EC43  F018         	call	_strcmp	;wreg free
  5998  0019C2  5001               	movf	?_strcmp,w,c
  5999  0019C4  1002               	iorwf	?_strcmp+1,w,c
  6000  0019C6  A4D8               	btfss	status,2,c
  6001  0019C8  D006               	goto	i2l3367
  6002  0019CA                     i2l3363:
  6003                           
  6004                           ;KeyValue.c: 117: {
  6005                           ;KeyValue.c: 118: StrippedKey = 0x07;
  6006  0019CA  0E07               	movlw	7
  6007  0019CC  6E59               	movwf	_StrippedKey,c
  6008                           
  6009                           ;KeyValue.c: 119: SerTx(';');
  6010  0019CE  0E3B               	movlw	59
  6011  0019D0  EC45  F01A         	call	i2_SerTx
  6012                           
  6013                           ;KeyValue.c: 120: }
  6014  0019D4  D153               	goto	i2l3451
  6015  0019D6                     i2l3367:
  6016                           
  6017                           ;KeyValue.c: 122: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  6018  0019D6  0E5A               	movlw	low _key
  6019  0019D8  6E01               	movwf	strcmp@s1,c
  6020  0019DA  0E00               	movlw	high _key
  6021  0019DC  6E02               	movwf	strcmp@s1+1,c
  6022  0019DE  0E58               	movlw	low STR_11
  6023  0019E0  6E03               	movwf	strcmp@s2,c
  6024  0019E2  0E10               	movlw	high STR_11
  6025  0019E4  6E04               	movwf	strcmp@s2+1,c
  6026  0019E6  EC43  F018         	call	_strcmp	;wreg free
  6027  0019EA  5001               	movf	?_strcmp,w,c
  6028  0019EC  1002               	iorwf	?_strcmp+1,w,c
  6029  0019EE  B4D8               	btfsc	status,2,c
  6030  0019F0  D00E               	goto	i2l3371
  6031  0019F2  0E5A               	movlw	low _key
  6032  0019F4  6E01               	movwf	strcmp@s1,c
  6033  0019F6  0E00               	movlw	high _key
  6034  0019F8  6E02               	movwf	strcmp@s1+1,c
  6035  0019FA  0E64               	movlw	low STR_12
  6036  0019FC  6E03               	movwf	strcmp@s2,c
  6037  0019FE  0E10               	movlw	high STR_12
  6038  001A00  6E04               	movwf	strcmp@s2+1,c
  6039  001A02  EC43  F018         	call	_strcmp	;wreg free
  6040  001A06  5001               	movf	?_strcmp,w,c
  6041  001A08  1002               	iorwf	?_strcmp+1,w,c
  6042  001A0A  A4D8               	btfss	status,2,c
  6043  001A0C  D006               	goto	i2l3375
  6044  001A0E                     i2l3371:
  6045                           
  6046                           ;KeyValue.c: 123: {
  6047                           ;KeyValue.c: 124: StrippedKey = 0x09;
  6048  001A0E  0E09               	movlw	9
  6049  001A10  6E59               	movwf	_StrippedKey,c
  6050                           
  6051                           ;KeyValue.c: 125: SerTx(';');
  6052  001A12  0E3B               	movlw	59
  6053  001A14  EC45  F01A         	call	i2_SerTx
  6054                           
  6055                           ;KeyValue.c: 126: }
  6056  001A18  D131               	goto	i2l3451
  6057  001A1A                     i2l3375:
  6058                           
  6059                           ;KeyValue.c: 128: else
  6060                           ;KeyValue.c: 129: {
  6061                           ;KeyValue.c: 130: SerTxStr("???");
  6062  001A1A  0E44               	movlw	low STR_13
  6063  001A1C  6E02               	movwf	i2SerTxStr@string,c
  6064  001A1E  0E10               	movlw	high STR_13
  6065  001A20  6E03               	movwf	i2SerTxStr@string+1,c
  6066  001A22  EC17  F018         	call	i2_SerTxStr	;wreg free
  6067  001A26  D127               	goto	i2l3449
  6068                           
  6069                           ;KeyValue.c: 132: }
  6070                           ;KeyValue.c: 133: }
  6071                           
  6072                           ;KeyValue.c: 131: StrippedKey = 0;
  6073  001A28  D129               	goto	i2l3451
  6074  001A2A                     i2l3379:
  6075                           
  6076                           ;KeyValue.c: 135: else if (flag == 0)
  6077  001A2A  5050               	movf	keyValue@flag,w,c
  6078  001A2C  A4D8               	btfss	status,2,c
  6079  001A2E  D126               	goto	i2l3451
  6080                           
  6081                           ;KeyValue.c: 136: {
  6082                           ;KeyValue.c: 137: y = 0;
  6083  001A30  0E00               	movlw	0
  6084  001A32  6E51               	movwf	keyValue@y,c
  6085                           
  6086                           ;KeyValue.c: 138: while (str[y] != 0x0D)
  6087  001A34  D014               	goto	i2l3387
  6088  001A36                     i2l3383:
  6089                           
  6090                           ;KeyValue.c: 139: {
  6091                           ;KeyValue.c: 141: key[y] = str[y];
  6092  001A36  5051               	movf	keyValue@y,w,c
  6093  001A38  0D01               	mullw	1
  6094  001A3A  50F3               	movf	prodl,w,c
  6095  001A3C  2448               	addwf	keyValue@str,w,c
  6096  001A3E  6ED9               	movwf	fsr2l,c
  6097  001A40  50F4               	movf	prodh,w,c
  6098  001A42  2049               	addwfc	keyValue@str+1,w,c
  6099  001A44  6EDA               	movwf	fsr2h,c
  6100  001A46  5051               	movf	keyValue@y,w,c
  6101  001A48  0D01               	mullw	1
  6102  001A4A  0E5A               	movlw	low _key
  6103  001A4C  24F3               	addwf	prodl,w,c
  6104  001A4E  6EE1               	movwf	fsr1l,c
  6105  001A50  0E00               	movlw	high _key
  6106  001A52  20F4               	addwfc	prodh,w,c
  6107  001A54  6EE2               	movwf	fsr1h,c
  6108  001A56  CFDF FFE7          	movff	indf2,indf1
  6109                           
  6110                           ;KeyValue.c: 142: y++;
  6111  001A5A  2A51               	incf	keyValue@y,f,c
  6112  001A5C  D000               	goto	i2l3387
  6113  001A5E                     i2l3387:
  6114  001A5E  5051               	movf	keyValue@y,w,c
  6115  001A60  0D01               	mullw	1
  6116  001A62  50F3               	movf	prodl,w,c
  6117  001A64  2448               	addwf	keyValue@str,w,c
  6118  001A66  6ED9               	movwf	fsr2l,c
  6119  001A68  50F4               	movf	prodh,w,c
  6120  001A6A  2049               	addwfc	keyValue@str+1,w,c
  6121  001A6C  6EDA               	movwf	fsr2h,c
  6122  001A6E  0E0D               	movlw	13
  6123  001A70  18DE               	xorwf	postinc2,w,c
  6124  001A72  A4D8               	btfss	status,2,c
  6125  001A74  D7E0               	goto	i2l3383
  6126                           
  6127                           ;KeyValue.c: 143: }
  6128                           ;KeyValue.c: 145: SerTxStr("Key: ");
  6129  001A76  0E3E               	movlw	low STR_3
  6130  001A78  6E02               	movwf	i2SerTxStr@string,c
  6131  001A7A  0E10               	movlw	high STR_3
  6132  001A7C  6E03               	movwf	i2SerTxStr@string+1,c
  6133  001A7E  EC17  F018         	call	i2_SerTxStr	;wreg free
  6134                           
  6135                           ;KeyValue.c: 146: SerTxStr(key);
  6136  001A82  0E5A               	movlw	low _key
  6137  001A84  6E02               	movwf	i2SerTxStr@string,c
  6138  001A86  0E00               	movlw	high _key
  6139  001A88  6E03               	movwf	i2SerTxStr@string+1,c
  6140  001A8A  EC17  F018         	call	i2_SerTxStr	;wreg free
  6141                           
  6142                           ;KeyValue.c: 148: if ((strcmp(key, "AZ") == 0) || (strcmp(key, "az") == 0))
  6143  001A8E  0E5A               	movlw	low _key
  6144  001A90  6E01               	movwf	strcmp@s1,c
  6145  001A92  0E00               	movlw	high _key
  6146  001A94  6E02               	movwf	strcmp@s1+1,c
  6147  001A96  0E61               	movlw	low STR_15
  6148  001A98  6E03               	movwf	strcmp@s2,c
  6149  001A9A  0E10               	movlw	high STR_15
  6150  001A9C  6E04               	movwf	strcmp@s2+1,c
  6151  001A9E  EC43  F018         	call	_strcmp	;wreg free
  6152  001AA2  5001               	movf	?_strcmp,w,c
  6153  001AA4  1002               	iorwf	?_strcmp+1,w,c
  6154  001AA6  B4D8               	btfsc	status,2,c
  6155  001AA8  D00E               	goto	i2l3395
  6156  001AAA  0E5A               	movlw	low _key
  6157  001AAC  6E01               	movwf	strcmp@s1,c
  6158  001AAE  0E00               	movlw	high _key
  6159  001AB0  6E02               	movwf	strcmp@s1+1,c
  6160  001AB2  0E6D               	movlw	low STR_16
  6161  001AB4  6E03               	movwf	strcmp@s2,c
  6162  001AB6  0E10               	movlw	high STR_16
  6163  001AB8  6E04               	movwf	strcmp@s2+1,c
  6164  001ABA  EC43  F018         	call	_strcmp	;wreg free
  6165  001ABE  5001               	movf	?_strcmp,w,c
  6166  001AC0  1002               	iorwf	?_strcmp+1,w,c
  6167  001AC2  A4D8               	btfss	status,2,c
  6168  001AC4  D006               	goto	i2l3399
  6169  001AC6                     i2l3395:
  6170                           
  6171                           ;KeyValue.c: 149: {
  6172                           ;KeyValue.c: 150: AZEL = 1;
  6173  001AC6  0E01               	movlw	1
  6174  001AC8  6E5F               	movwf	_AZEL,c
  6175                           
  6176                           ;KeyValue.c: 151: SerTx(';');
  6177  001ACA  0E3B               	movlw	59
  6178  001ACC  EC45  F01A         	call	i2_SerTx
  6179                           
  6180                           ;KeyValue.c: 152: }
  6181  001AD0  D0D5               	goto	i2l3451
  6182  001AD2                     i2l3399:
  6183                           
  6184                           ;KeyValue.c: 154: else if ((strcmp(key, "EL") == 0) || (strcmp(key, "el") == 0))
  6185  001AD2  0E5A               	movlw	low _key
  6186  001AD4  6E01               	movwf	strcmp@s1,c
  6187  001AD6  0E00               	movlw	high _key
  6188  001AD8  6E02               	movwf	strcmp@s1+1,c
  6189  001ADA  0E49               	movlw	low (STR_21+1)
  6190  001ADC  6E03               	movwf	strcmp@s2,c
  6191  001ADE  0E10               	movlw	high (STR_21+1)
  6192  001AE0  6E04               	movwf	strcmp@s2+1,c
  6193  001AE2  EC43  F018         	call	_strcmp	;wreg free
  6194  001AE6  5001               	movf	?_strcmp,w,c
  6195  001AE8  1002               	iorwf	?_strcmp+1,w,c
  6196  001AEA  B4D8               	btfsc	status,2,c
  6197  001AEC  D00E               	goto	i2l3403
  6198  001AEE  0E5A               	movlw	low _key
  6199  001AF0  6E01               	movwf	strcmp@s1,c
  6200  001AF2  0E00               	movlw	high _key
  6201  001AF4  6E02               	movwf	strcmp@s1+1,c
  6202  001AF6  0E51               	movlw	low (STR_22+1)
  6203  001AF8  6E03               	movwf	strcmp@s2,c
  6204  001AFA  0E10               	movlw	high (STR_22+1)
  6205  001AFC  6E04               	movwf	strcmp@s2+1,c
  6206  001AFE  EC43  F018         	call	_strcmp	;wreg free
  6207  001B02  5001               	movf	?_strcmp,w,c
  6208  001B04  1002               	iorwf	?_strcmp+1,w,c
  6209  001B06  A4D8               	btfss	status,2,c
  6210  001B08  D006               	goto	i2l3407
  6211  001B0A                     i2l3403:
  6212                           
  6213                           ;KeyValue.c: 155: {
  6214                           ;KeyValue.c: 156: AZEL = 2;
  6215  001B0A  0E02               	movlw	2
  6216  001B0C  6E5F               	movwf	_AZEL,c
  6217                           
  6218                           ;KeyValue.c: 157: SerTx(';');
  6219  001B0E  0E3B               	movlw	59
  6220  001B10  EC45  F01A         	call	i2_SerTx
  6221                           
  6222                           ;KeyValue.c: 158: }
  6223  001B14  D0B3               	goto	i2l3451
  6224  001B16                     i2l3407:
  6225                           
  6226                           ;KeyValue.c: 160: else if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  6227  001B16  0E5A               	movlw	low _key
  6228  001B18  6E01               	movwf	strcmp@s1,c
  6229  001B1A  0E00               	movlw	high _key
  6230  001B1C  6E02               	movwf	strcmp@s1+1,c
  6231  001B1E  0E4C               	movlw	low STR_5
  6232  001B20  6E03               	movwf	strcmp@s2,c
  6233  001B22  0E10               	movlw	high STR_5
  6234  001B24  6E04               	movwf	strcmp@s2+1,c
  6235  001B26  EC43  F018         	call	_strcmp	;wreg free
  6236  001B2A  5001               	movf	?_strcmp,w,c
  6237  001B2C  1002               	iorwf	?_strcmp+1,w,c
  6238  001B2E  B4D8               	btfsc	status,2,c
  6239  001B30  D00E               	goto	i2l3411
  6240  001B32  0E5A               	movlw	low _key
  6241  001B34  6E01               	movwf	strcmp@s1,c
  6242  001B36  0E00               	movlw	high _key
  6243  001B38  6E02               	movwf	strcmp@s1+1,c
  6244  001B3A  0E54               	movlw	low STR_6
  6245  001B3C  6E03               	movwf	strcmp@s2,c
  6246  001B3E  0E10               	movlw	high STR_6
  6247  001B40  6E04               	movwf	strcmp@s2+1,c
  6248  001B42  EC43  F018         	call	_strcmp	;wreg free
  6249  001B46  5001               	movf	?_strcmp,w,c
  6250  001B48  1002               	iorwf	?_strcmp+1,w,c
  6251  001B4A  A4D8               	btfss	status,2,c
  6252  001B4C  D006               	goto	i2l3415
  6253  001B4E                     i2l3411:
  6254                           
  6255                           ;KeyValue.c: 161: {
  6256                           ;KeyValue.c: 162: StrippedKey = 0x02;
  6257  001B4E  0E02               	movlw	2
  6258  001B50  6E59               	movwf	_StrippedKey,c
  6259                           
  6260                           ;KeyValue.c: 163: SerTx(';');
  6261  001B52  0E3B               	movlw	59
  6262  001B54  EC45  F01A         	call	i2_SerTx
  6263                           
  6264                           ;KeyValue.c: 164: }
  6265  001B58  D091               	goto	i2l3451
  6266  001B5A                     i2l3415:
  6267                           
  6268                           ;KeyValue.c: 166: else if ((strcmp(key, "VEL") == 0) || (strcmp(key, "vel") == 0))
  6269  001B5A  0E5A               	movlw	low _key
  6270  001B5C  6E01               	movwf	strcmp@s1,c
  6271  001B5E  0E00               	movlw	high _key
  6272  001B60  6E02               	movwf	strcmp@s1+1,c
  6273  001B62  0E48               	movlw	low STR_21
  6274  001B64  6E03               	movwf	strcmp@s2,c
  6275  001B66  0E10               	movlw	high STR_21
  6276  001B68  6E04               	movwf	strcmp@s2+1,c
  6277  001B6A  EC43  F018         	call	_strcmp	;wreg free
  6278  001B6E  5001               	movf	?_strcmp,w,c
  6279  001B70  1002               	iorwf	?_strcmp+1,w,c
  6280  001B72  B4D8               	btfsc	status,2,c
  6281  001B74  D00E               	goto	i2l3419
  6282  001B76  0E5A               	movlw	low _key
  6283  001B78  6E01               	movwf	strcmp@s1,c
  6284  001B7A  0E00               	movlw	high _key
  6285  001B7C  6E02               	movwf	strcmp@s1+1,c
  6286  001B7E  0E50               	movlw	low STR_22
  6287  001B80  6E03               	movwf	strcmp@s2,c
  6288  001B82  0E10               	movlw	high STR_22
  6289  001B84  6E04               	movwf	strcmp@s2+1,c
  6290  001B86  EC43  F018         	call	_strcmp	;wreg free
  6291  001B8A  5001               	movf	?_strcmp,w,c
  6292  001B8C  1002               	iorwf	?_strcmp+1,w,c
  6293  001B8E  A4D8               	btfss	status,2,c
  6294  001B90  D006               	goto	i2l3423
  6295  001B92                     i2l3419:
  6296                           
  6297                           ;KeyValue.c: 167: {
  6298                           ;KeyValue.c: 168: StrippedKey = 0x03;
  6299  001B92  0E03               	movlw	3
  6300  001B94  6E59               	movwf	_StrippedKey,c
  6301                           
  6302                           ;KeyValue.c: 169: SerTx(';');
  6303  001B96  0E3B               	movlw	59
  6304  001B98  EC45  F01A         	call	i2_SerTx
  6305                           
  6306                           ;KeyValue.c: 170: }
  6307  001B9C  D06F               	goto	i2l3451
  6308  001B9E                     i2l3423:
  6309                           
  6310                           ;KeyValue.c: 172: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  6311  001B9E  0E5A               	movlw	low _key
  6312  001BA0  6E01               	movwf	strcmp@s1,c
  6313  001BA2  0E00               	movlw	high _key
  6314  001BA4  6E02               	movwf	strcmp@s1+1,c
  6315  001BA6  0E5E               	movlw	low STR_7
  6316  001BA8  6E03               	movwf	strcmp@s2,c
  6317  001BAA  0E10               	movlw	high STR_7
  6318  001BAC  6E04               	movwf	strcmp@s2+1,c
  6319  001BAE  EC43  F018         	call	_strcmp	;wreg free
  6320  001BB2  5001               	movf	?_strcmp,w,c
  6321  001BB4  1002               	iorwf	?_strcmp+1,w,c
  6322  001BB6  B4D8               	btfsc	status,2,c
  6323  001BB8  D00E               	goto	i2l3427
  6324  001BBA  0E5A               	movlw	low _key
  6325  001BBC  6E01               	movwf	strcmp@s1,c
  6326  001BBE  0E00               	movlw	high _key
  6327  001BC0  6E02               	movwf	strcmp@s1+1,c
  6328  001BC2  0E6A               	movlw	low STR_8
  6329  001BC4  6E03               	movwf	strcmp@s2,c
  6330  001BC6  0E10               	movlw	high STR_8
  6331  001BC8  6E04               	movwf	strcmp@s2+1,c
  6332  001BCA  EC43  F018         	call	_strcmp	;wreg free
  6333  001BCE  5001               	movf	?_strcmp,w,c
  6334  001BD0  1002               	iorwf	?_strcmp+1,w,c
  6335  001BD2  A4D8               	btfss	status,2,c
  6336  001BD4  D006               	goto	i2l3431
  6337  001BD6                     i2l3427:
  6338                           
  6339                           ;KeyValue.c: 173: {
  6340                           ;KeyValue.c: 174: StrippedKey = 0x04;
  6341  001BD6  0E04               	movlw	4
  6342  001BD8  6E59               	movwf	_StrippedKey,c
  6343                           
  6344                           ;KeyValue.c: 175: SerTx(';');
  6345  001BDA  0E3B               	movlw	59
  6346  001BDC  EC45  F01A         	call	i2_SerTx
  6347                           
  6348                           ;KeyValue.c: 176: }
  6349  001BE0  D04D               	goto	i2l3451
  6350  001BE2                     i2l3431:
  6351                           
  6352                           ;KeyValue.c: 178: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  6353  001BE2  0E5A               	movlw	low _key
  6354  001BE4  6E01               	movwf	strcmp@s1,c
  6355  001BE6  0E00               	movlw	high _key
  6356  001BE8  6E02               	movwf	strcmp@s1+1,c
  6357  001BEA  0E5B               	movlw	low STR_9
  6358  001BEC  6E03               	movwf	strcmp@s2,c
  6359  001BEE  0E10               	movlw	high STR_9
  6360  001BF0  6E04               	movwf	strcmp@s2+1,c
  6361  001BF2  EC43  F018         	call	_strcmp	;wreg free
  6362  001BF6  5001               	movf	?_strcmp,w,c
  6363  001BF8  1002               	iorwf	?_strcmp+1,w,c
  6364  001BFA  B4D8               	btfsc	status,2,c
  6365  001BFC  D00E               	goto	i2l3435
  6366  001BFE  0E5A               	movlw	low _key
  6367  001C00  6E01               	movwf	strcmp@s1,c
  6368  001C02  0E00               	movlw	high _key
  6369  001C04  6E02               	movwf	strcmp@s1+1,c
  6370  001C06  0E67               	movlw	low STR_10
  6371  001C08  6E03               	movwf	strcmp@s2,c
  6372  001C0A  0E10               	movlw	high STR_10
  6373  001C0C  6E04               	movwf	strcmp@s2+1,c
  6374  001C0E  EC43  F018         	call	_strcmp	;wreg free
  6375  001C12  5001               	movf	?_strcmp,w,c
  6376  001C14  1002               	iorwf	?_strcmp+1,w,c
  6377  001C16  A4D8               	btfss	status,2,c
  6378  001C18  D006               	goto	i2l3439
  6379  001C1A                     i2l3435:
  6380                           
  6381                           ;KeyValue.c: 179: {
  6382                           ;KeyValue.c: 180: StrippedKey = 0x06;
  6383  001C1A  0E06               	movlw	6
  6384  001C1C  6E59               	movwf	_StrippedKey,c
  6385                           
  6386                           ;KeyValue.c: 181: SerTx(';');
  6387  001C1E  0E3B               	movlw	59
  6388  001C20  EC45  F01A         	call	i2_SerTx
  6389                           
  6390                           ;KeyValue.c: 182: }
  6391  001C24  D02B               	goto	i2l3451
  6392  001C26                     i2l3439:
  6393                           
  6394                           ;KeyValue.c: 184: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  6395  001C26  0E5A               	movlw	low _key
  6396  001C28  6E01               	movwf	strcmp@s1,c
  6397  001C2A  0E00               	movlw	high _key
  6398  001C2C  6E02               	movwf	strcmp@s1+1,c
  6399  001C2E  0E58               	movlw	low STR_11
  6400  001C30  6E03               	movwf	strcmp@s2,c
  6401  001C32  0E10               	movlw	high STR_11
  6402  001C34  6E04               	movwf	strcmp@s2+1,c
  6403  001C36  EC43  F018         	call	_strcmp	;wreg free
  6404  001C3A  5001               	movf	?_strcmp,w,c
  6405  001C3C  1002               	iorwf	?_strcmp+1,w,c
  6406  001C3E  B4D8               	btfsc	status,2,c
  6407  001C40  D00E               	goto	i2l3443
  6408  001C42  0E5A               	movlw	low _key
  6409  001C44  6E01               	movwf	strcmp@s1,c
  6410  001C46  0E00               	movlw	high _key
  6411  001C48  6E02               	movwf	strcmp@s1+1,c
  6412  001C4A  0E64               	movlw	low STR_12
  6413  001C4C  6E03               	movwf	strcmp@s2,c
  6414  001C4E  0E10               	movlw	high STR_12
  6415  001C50  6E04               	movwf	strcmp@s2+1,c
  6416  001C52  EC43  F018         	call	_strcmp	;wreg free
  6417  001C56  5001               	movf	?_strcmp,w,c
  6418  001C58  1002               	iorwf	?_strcmp+1,w,c
  6419  001C5A  A4D8               	btfss	status,2,c
  6420  001C5C  D006               	goto	i2l3447
  6421  001C5E                     i2l3443:
  6422                           
  6423                           ;KeyValue.c: 185: {
  6424                           ;KeyValue.c: 186: StrippedKey = 0x08;
  6425  001C5E  0E08               	movlw	8
  6426  001C60  6E59               	movwf	_StrippedKey,c
  6427                           
  6428                           ;KeyValue.c: 187: SerTx(';');
  6429  001C62  0E3B               	movlw	59
  6430  001C64  EC45  F01A         	call	i2_SerTx
  6431                           
  6432                           ;KeyValue.c: 188: }
  6433  001C68  D009               	goto	i2l3451
  6434  001C6A                     i2l3447:
  6435                           
  6436                           ;KeyValue.c: 190: else
  6437                           ;KeyValue.c: 191: {
  6438                           ;KeyValue.c: 192: SerTxStr("???");
  6439  001C6A  0E44               	movlw	low STR_13
  6440  001C6C  6E02               	movwf	i2SerTxStr@string,c
  6441  001C6E  0E10               	movlw	high STR_13
  6442  001C70  6E03               	movwf	i2SerTxStr@string+1,c
  6443  001C72  EC17  F018         	call	i2_SerTxStr	;wreg free
  6444  001C76                     i2l3449:
  6445                           
  6446                           ;KeyValue.c: 193: StrippedKey = 0;
  6447  001C76  0E00               	movlw	0
  6448  001C78  6E59               	movwf	_StrippedKey,c
  6449  001C7A  D000               	goto	i2l3451
  6450  001C7C                     i2l3451:
  6451                           
  6452                           ;KeyValue.c: 194: }
  6453                           ;KeyValue.c: 195: }
  6454                           ;KeyValue.c: 197: StrippedValue = strtod(value, &str_end);
  6455  001C7C  0E96               	movlw	low _value
  6456  001C7E  6E3C               	movwf	strtod@s,c
  6457  001C80  0E00               	movlw	high _value
  6458  001C82  6E3D               	movwf	strtod@s+1,c
  6459  001C84  0E4E               	movlw	low keyValue@str_end
  6460  001C86  6E3E               	movwf	strtod@res,c
  6461  001C88  0E00               	movlw	high keyValue@str_end
  6462  001C8A  6E3F               	movwf	strtod@res+1,c
  6463  001C8C  EC8A  F00E         	call	_strtod	;wreg free
  6464  001C90  C03C  F072         	movff	?_strtod,_StrippedValue
  6465  001C94  C03D  F073         	movff	?_strtod+1,_StrippedValue+1
  6466  001C98  C03E  F074         	movff	?_strtod+2,_StrippedValue+2
  6467                           
  6468                           ;KeyValue.c: 201: for (x = 0; x < 5; x++)
  6469  001C9C  0E00               	movlw	0
  6470  001C9E  6E52               	movwf	keyValue@x,c
  6471  001CA0                     i2l3455:
  6472  001CA0  0E04               	movlw	4
  6473  001CA2  6452               	cpfsgt	keyValue@x,c
  6474  001CA4  D001               	goto	i2l3459
  6475  001CA6  D00C               	goto	i2l3465
  6476  001CA8                     i2l3459:
  6477                           
  6478                           ;KeyValue.c: 202: {
  6479                           ;KeyValue.c: 203: key[x] = (0);
  6480  001CA8  5052               	movf	keyValue@x,w,c
  6481  001CAA  0D01               	mullw	1
  6482  001CAC  0E5A               	movlw	low _key
  6483  001CAE  24F3               	addwf	prodl,w,c
  6484  001CB0  6ED9               	movwf	fsr2l,c
  6485  001CB2  0E00               	movlw	high _key
  6486  001CB4  20F4               	addwfc	prodh,w,c
  6487  001CB6  6EDA               	movwf	fsr2h,c
  6488  001CB8  0E00               	movlw	0
  6489  001CBA  6EDF               	movwf	indf2,c
  6490  001CBC  2A52               	incf	keyValue@x,f,c
  6491  001CBE  D7F0               	goto	i2l3455
  6492  001CC0                     i2l3465:
  6493                           
  6494                           ;KeyValue.c: 204: }
  6495                           ;KeyValue.c: 206: for (x = 0; x < 10; x++)
  6496  001CC0  0E00               	movlw	0
  6497  001CC2  6E52               	movwf	keyValue@x,c
  6498  001CC4                     i2l3467:
  6499  001CC4  0E09               	movlw	9
  6500  001CC6  6452               	cpfsgt	keyValue@x,c
  6501  001CC8  D001               	goto	i2l3471
  6502  001CCA  D00C               	goto	i2l3477
  6503  001CCC                     i2l3471:
  6504                           
  6505                           ;KeyValue.c: 207: {
  6506                           ;KeyValue.c: 208: value[x] = (0);
  6507  001CCC  5052               	movf	keyValue@x,w,c
  6508  001CCE  0D01               	mullw	1
  6509  001CD0  0E96               	movlw	low _value
  6510  001CD2  24F3               	addwf	prodl,w,c
  6511  001CD4  6ED9               	movwf	fsr2l,c
  6512  001CD6  0E00               	movlw	high _value
  6513  001CD8  20F4               	addwfc	prodh,w,c
  6514  001CDA  6EDA               	movwf	fsr2h,c
  6515  001CDC  0E00               	movlw	0
  6516  001CDE  6EDF               	movwf	indf2,c
  6517  001CE0  2A52               	incf	keyValue@x,f,c
  6518  001CE2  D7F0               	goto	i2l3467
  6519  001CE4                     i2l3477:
  6520                           
  6521                           ;KeyValue.c: 209: }
  6522                           ;KeyValue.c: 211: for (x = 0; x < 30; x++)
  6523  001CE4  0E00               	movlw	0
  6524  001CE6  6E52               	movwf	keyValue@x,c
  6525  001CE8                     i2l3479:
  6526  001CE8  0E1D               	movlw	29
  6527  001CEA  6452               	cpfsgt	keyValue@x,c
  6528  001CEC  D001               	goto	i2l3483
  6529  001CEE  D00C               	goto	i2l3489
  6530  001CF0                     i2l3483:
  6531                           
  6532                           ;KeyValue.c: 212: {
  6533                           ;KeyValue.c: 213: received[x] = (0);
  6534  001CF0  5052               	movf	keyValue@x,w,c
  6535  001CF2  0D01               	mullw	1
  6536  001CF4  0E78               	movlw	low _received
  6537  001CF6  24F3               	addwf	prodl,w,c
  6538  001CF8  6ED9               	movwf	fsr2l,c
  6539  001CFA  0E00               	movlw	high _received
  6540  001CFC  20F4               	addwfc	prodh,w,c
  6541  001CFE  6EDA               	movwf	fsr2h,c
  6542  001D00  0E00               	movlw	0
  6543  001D02  6EDF               	movwf	indf2,c
  6544  001D04  2A52               	incf	keyValue@x,f,c
  6545  001D06  D7F0               	goto	i2l3479
  6546  001D08                     i2l3489:
  6547                           
  6548                           ;KeyValue.c: 214: }
  6549                           ;KeyValue.c: 215: flag = 0;
  6550  001D08  0E00               	movlw	0
  6551  001D0A  6E50               	movwf	keyValue@flag,c
  6552                           
  6553                           ;KeyValue.c: 216: RCflag = 1;
  6554  001D0C  0E01               	movlw	1
  6555  001D0E  0100               	movlb	0	; () banked
  6556  001D10  6F77               	movwf	_RCflag& (0+255),b
  6557                           
  6558                           ; BSR set to: 0
  6559  001D12  0012               	return		;funcret
  6560  001D14                     __end_of_keyValue:
  6561                           	opt stack 0
  6562                           pclatu	equ	0xFFB
  6563                           pclath	equ	0xFFA
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon2	equ	0xFF1
  6572                           indf0	equ	0xFEF
  6573                           postinc0	equ	0xFEE
  6574                           fsr0h	equ	0xFEA
  6575                           fsr0l	equ	0xFE9
  6576                           wreg	equ	0xFE8
  6577                           indf1	equ	0xFE7
  6578                           fsr1h	equ	0xFE2
  6579                           fsr1l	equ	0xFE1
  6580                           indf2	equ	0xFDF
  6581                           postinc2	equ	0xFDE
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function i2_SerTxStr *****************
  6587 ;; Defined at:
  6588 ;;		line 50 in file "SerComm.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  string          2    1[COMRAM] PTR unsigned char 
  6591 ;;		 -> STR_30(36), STR_29(4), STR_14(6), STR_13(4), 
  6592 ;;		 -> STR_4(11), value(10), STR_3(6), key(5), 
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;		None               void
  6597 ;; Registers used:
  6598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;Total ram usage:        2 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    1
  6611 ;; This function calls:
  6612 ;;		i2_SerTx
  6613 ;; This function is called by:
  6614 ;;		_keyValue
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text33
  6619  00302E                     __ptext33:
  6620                           	opt stack 0
  6621  00302E                     i2_SerTxStr:
  6622                           	opt stack 21
  6623                           
  6624                           ;SerComm.c: 52: while (*string)
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;incstack = 0
  6628  00302E  D016               	goto	i2l3125
  6629  003030                     i2l3121:
  6630                           
  6631                           ;SerComm.c: 53: SerTx(*string++);
  6632  003030  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  6633  003034  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  6634  003038  0E00               	movlw	low (__smallconst shr (0+16))
  6635  00303A  6EF8               	movwf	tblptru,c
  6636  00303C  0E0F               	movlw	(high __ramtop+-1)
  6637  00303E  64F7               	cpfsgt	tblptrh,c
  6638  003040  D003               	bra	i2u331_47
  6639  003042  0008               	tblrd		*
  6640  003044  50F5               	movf	tablat,w,c
  6641  003046  D005               	bra	i2u331_40
  6642  003048                     i2u331_47:
  6643  003048  CFF6 FFE9          	movff	tblptrl,fsr0l
  6644  00304C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6645  003050  50EF               	movf	indf0,w,c
  6646  003052                     i2u331_40:
  6647  003052  EC45  F01A         	call	i2_SerTx
  6648  003056  4A02               	infsnz	i2SerTxStr@string,f,c
  6649  003058  2A03               	incf	i2SerTxStr@string+1,f,c
  6650  00305A  D000               	goto	i2l3125
  6651  00305C                     i2l3125:
  6652  00305C  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  6653  003060  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  6654  003064  0E00               	movlw	low (__smallconst shr (0+16))
  6655  003066  6EF8               	movwf	tblptru,c
  6656  003068  0E0F               	movlw	(high __ramtop+-1)
  6657  00306A  64F7               	cpfsgt	tblptrh,c
  6658  00306C  D003               	bra	i2u332_47
  6659  00306E  0008               	tblrd		*
  6660  003070  50F5               	movf	tablat,w,c
  6661  003072  D005               	bra	i2u332_40
  6662  003074                     i2u332_47:
  6663  003074  CFF6 FFE9          	movff	tblptrl,fsr0l
  6664  003078  CFF7 FFEA          	movff	tblptrh,fsr0h
  6665  00307C  50EF               	movf	indf0,w,c
  6666  00307E                     i2u332_40:
  6667  00307E  0900               	iorlw	0
  6668  003080  A4D8               	btfss	status,2,c
  6669  003082  D7D6               	goto	i2l3121
  6670  003084  0012               	return		;funcret
  6671  003086                     __end_ofi2_SerTxStr:
  6672                           	opt stack 0
  6673                           pclatu	equ	0xFFB
  6674                           pclath	equ	0xFFA
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           intcon	equ	0xFF2
  6682                           intcon2	equ	0xFF1
  6683                           indf0	equ	0xFEF
  6684                           postinc0	equ	0xFEE
  6685                           fsr0h	equ	0xFEA
  6686                           fsr0l	equ	0xFE9
  6687                           wreg	equ	0xFE8
  6688                           indf1	equ	0xFE7
  6689                           fsr1h	equ	0xFE2
  6690                           fsr1l	equ	0xFE1
  6691                           indf2	equ	0xFDF
  6692                           postinc2	equ	0xFDE
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697 ;; *************** function i2_SerTx *****************
  6698 ;; Defined at:
  6699 ;;		line 41 in file "SerComm.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;  c               1    wreg     unsigned char 
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;  c               1    0[COMRAM] unsigned char 
  6704 ;; Return value:  Size  Location     Type
  6705 ;;		None               void
  6706 ;; Registers used:
  6707 ;;		wreg
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;Total ram usage:        1 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; This function calls:
  6720 ;;		Nothing
  6721 ;; This function is called by:
  6722 ;;		_RCInt
  6723 ;;		_keyValue
  6724 ;;		i2_SerTxStr
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text34
  6729  00348A                     __ptext34:
  6730                           	opt stack 0
  6731  00348A                     i2_SerTx:
  6732                           	opt stack 23
  6733                           
  6734                           ;incstack = 0
  6735                           ;i2SerTx@c stored from wreg
  6736  00348A  6E01               	movwf	i2SerTx@c,c
  6737                           
  6738                           ;SerComm.c: 43: TXREG1 = c;
  6739  00348C  C001  FFAD         	movff	i2SerTx@c,4013	;volatile
  6740                           
  6741                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  6742  003490  D000               	goto	i2l371
  6743  003492                     i2l371:
  6744  003492  A89E               	btfss	3998,4,c	;volatile
  6745  003494  D7FE               	goto	i2l371
  6746  003496  0012               	return		;funcret
  6747  003498                     __end_ofi2_SerTx:
  6748                           	opt stack 0
  6749                           pclatu	equ	0xFFB
  6750                           pclath	equ	0xFFA
  6751                           tblptru	equ	0xFF8
  6752                           tblptrh	equ	0xFF7
  6753                           tblptrl	equ	0xFF6
  6754                           tablat	equ	0xFF5
  6755                           prodh	equ	0xFF4
  6756                           prodl	equ	0xFF3
  6757                           intcon	equ	0xFF2
  6758                           intcon2	equ	0xFF1
  6759                           indf0	equ	0xFEF
  6760                           postinc0	equ	0xFEE
  6761                           fsr0h	equ	0xFEA
  6762                           fsr0l	equ	0xFE9
  6763                           wreg	equ	0xFE8
  6764                           indf1	equ	0xFE7
  6765                           fsr1h	equ	0xFE2
  6766                           fsr1l	equ	0xFE1
  6767                           indf2	equ	0xFDF
  6768                           postinc2	equ	0xFDE
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773 ;; *************** function _strtod *****************
  6774 ;; Defined at:
  6775 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/atof.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  s               2   59[COMRAM] PTR const unsigned char 
  6778 ;;		 -> value(10), 
  6779 ;;  res             2   61[COMRAM] PTR PTR const unsigned c
  6780 ;;		 -> NULL(0), keyValue@str_end(2), 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  _u              4   67[COMRAM] struct .
  6783 ;;  expon           1   66[COMRAM] char 
  6784 ;;  flags           1   65[COMRAM] unsigned char 
  6785 ;;  eexp            1   64[COMRAM] char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  3   59[COMRAM] char 
  6788 ;; Registers used:
  6789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6795 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;Total ram usage:       12 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    2
  6802 ;; This function calls:
  6803 ;;		___altoft
  6804 ;;		___ftdiv
  6805 ;;		___ftge
  6806 ;;		___ftneg
  6807 ;;		___lmul
  6808 ;;		_isdigit
  6809 ;;		_isspace
  6810 ;;		i2___ftmul
  6811 ;; This function is called by:
  6812 ;;		_keyValue
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text35
  6817  001D14                     __ptext35:
  6818                           	opt stack 0
  6819  001D14                     _strtod:
  6820                           	opt stack 20
  6821                           
  6822                           ;incstack = 0
  6823  001D14  503E               	movf	strtod@res,w,c
  6824  001D16  103F               	iorwf	strtod@res+1,w,c
  6825  001D18  B4D8               	btfsc	status,2,c
  6826  001D1A  D00C               	goto	i2l2843
  6827  001D1C  C03E  FFD9         	movff	strtod@res,fsr2l
  6828  001D20  C03F  FFDA         	movff	strtod@res+1,fsr2h
  6829  001D24  C03C  FFDE         	movff	strtod@s,postinc2
  6830  001D28  C03D  FFDD         	movff	strtod@s+1,postdec2
  6831  001D2C  D003               	goto	i2l2843
  6832  001D2E                     i2l2841:
  6833  001D2E  4A3C               	infsnz	strtod@s,f,c
  6834  001D30  2A3D               	incf	strtod@s+1,f,c
  6835  001D32  D000               	goto	i2l2843
  6836  001D34                     i2l2843:
  6837  001D34  C03C  FFD9         	movff	strtod@s,fsr2l
  6838  001D38  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6839  001D3C  50DF               	movf	indf2,w,c
  6840  001D3E  6E41               	movwf	strtod@eexp,c
  6841  001D40  5041               	movf	strtod@eexp,w,c
  6842  001D42  EC67  F019         	call	_isspace
  6843  001D46  B0D8               	btfsc	status,0,c
  6844  001D48  D7F2               	goto	i2l2841
  6845  001D4A  0E00               	movlw	0
  6846  001D4C  6E42               	movwf	strtod@flags,c
  6847  001D4E  0E2D               	movlw	45
  6848  001D50  1841               	xorwf	strtod@eexp,w,c
  6849  001D52  A4D8               	btfss	status,2,c
  6850  001D54  D003               	goto	i2l2853
  6851  001D56  0E01               	movlw	1
  6852  001D58  6E42               	movwf	strtod@flags,c
  6853  001D5A  D004               	goto	i2l2855
  6854  001D5C                     i2l2853:
  6855  001D5C  0E2B               	movlw	43
  6856  001D5E  1841               	xorwf	strtod@eexp,w,c
  6857  001D60  A4D8               	btfss	status,2,c
  6858  001D62  D003               	goto	i2l2857
  6859  001D64                     i2l2855:
  6860  001D64  4A3C               	infsnz	strtod@s,f,c
  6861  001D66  2A3D               	incf	strtod@s+1,f,c
  6862  001D68  D000               	goto	i2l2857
  6863  001D6A                     i2l2857:
  6864  001D6A  0E00               	movlw	0
  6865  001D6C  6E41               	movwf	strtod@eexp,c
  6866  001D6E  0E00               	movlw	0
  6867  001D70  6E44               	movwf	strtod@_u,c
  6868  001D72  0E00               	movlw	0
  6869  001D74  6E45               	movwf	strtod@_u+1,c
  6870  001D76  0E00               	movlw	0
  6871  001D78  6E46               	movwf	strtod@_u+2,c
  6872  001D7A  0E00               	movlw	0
  6873  001D7C  6E47               	movwf	strtod@_u+3,c
  6874  001D7E  0E00               	movlw	0
  6875  001D80  6E43               	movwf	strtod@expon,c
  6876  001D82  D000               	goto	i2l2863
  6877  001D84                     i2l2863:
  6878  001D84  B842               	btfsc	strtod@flags,4,c
  6879  001D86  D00A               	goto	i2l2869
  6880  001D88  C03C  FFD9         	movff	strtod@s,fsr2l
  6881  001D8C  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6882  001D90  0E2E               	movlw	46
  6883  001D92  18DE               	xorwf	postinc2,w,c
  6884  001D94  A4D8               	btfss	status,2,c
  6885  001D96  D002               	goto	i2l2869
  6886  001D98  8842               	bsf	strtod@flags,4,c
  6887  001D9A  D040               	goto	i2l677
  6888  001D9C                     i2l2869:
  6889  001D9C  C03C  FFD9         	movff	strtod@s,fsr2l
  6890  001DA0  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6891  001DA4  50DF               	movf	indf2,w,c
  6892  001DA6  ECDC  F019         	call	_isdigit
  6893  001DAA  A0D8               	btfss	status,0,c
  6894  001DAC  D03A               	goto	i2l2887
  6895  001DAE  D001               	goto	i2l2873
  6896  001DB0  D038               	goto	i2l2887
  6897  001DB2                     i2l2873:
  6898  001DB2  8242               	bsf	strtod@flags,1,c
  6899  001DB4  0E08               	movlw	8
  6900  001DB6  1841               	xorwf	strtod@eexp,w,c
  6901  001DB8  B4D8               	btfsc	status,2,c
  6902  001DBA  D02C               	goto	i2l675
  6903  001DBC  B842               	btfsc	strtod@flags,4,c
  6904  001DBE  0643               	decf	strtod@expon,f,c
  6905  001DC0  2A41               	incf	strtod@eexp,f,c
  6906  001DC2  C044  F001         	movff	strtod@_u,___lmul@multiplier
  6907  001DC6  C045  F002         	movff	strtod@_u+1,___lmul@multiplier+1
  6908  001DCA  C046  F003         	movff	strtod@_u+2,___lmul@multiplier+2
  6909  001DCE  C047  F004         	movff	strtod@_u+3,___lmul@multiplier+3
  6910  001DD2  0E0A               	movlw	10
  6911  001DD4  6E05               	movwf	___lmul@multiplicand,c
  6912  001DD6  0E00               	movlw	0
  6913  001DD8  6E06               	movwf	___lmul@multiplicand+1,c
  6914  001DDA  0E00               	movlw	0
  6915  001DDC  6E07               	movwf	___lmul@multiplicand+2,c
  6916  001DDE  0E00               	movlw	0
  6917  001DE0  6E08               	movwf	___lmul@multiplicand+3,c
  6918  001DE2  ECEA  F017         	call	___lmul	;wreg free
  6919  001DE6  C001  F044         	movff	?___lmul,strtod@_u
  6920  001DEA  C002  F045         	movff	?___lmul+1,strtod@_u+1
  6921  001DEE  C003  F046         	movff	?___lmul+2,strtod@_u+2
  6922  001DF2  C004  F047         	movff	?___lmul+3,strtod@_u+3
  6923  001DF6  C03C  FFD9         	movff	strtod@s,fsr2l
  6924  001DFA  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6925  001DFE  50DF               	movf	indf2,w,c
  6926  001E00  6E40               	movwf	??_strtod& (0+255),c
  6927  001E02  0ED0               	movlw	208
  6928  001E04  2640               	addwf	??_strtod,f,c
  6929  001E06  5040               	movf	??_strtod,w,c
  6930  001E08  2644               	addwf	strtod@_u,f,c
  6931  001E0A  0E00               	movlw	0
  6932  001E0C  2245               	addwfc	strtod@_u+1,f,c
  6933  001E0E  2246               	addwfc	strtod@_u+2,f,c
  6934  001E10  2247               	addwfc	strtod@_u+3,f,c
  6935  001E12  D004               	goto	i2l677
  6936  001E14                     i2l675:
  6937  001E14  B842               	btfsc	strtod@flags,4,c
  6938  001E16  D002               	goto	i2l677
  6939  001E18  2A43               	incf	strtod@expon,f,c
  6940  001E1A  D000               	goto	i2l677
  6941  001E1C                     i2l677:
  6942  001E1C  4A3C               	infsnz	strtod@s,f,c
  6943  001E1E  2A3D               	incf	strtod@s+1,f,c
  6944  001E20  D7B1               	goto	i2l2863
  6945  001E22                     i2l2887:
  6946  001E22  0E00               	movlw	0
  6947  001E24  6E41               	movwf	strtod@eexp,c
  6948  001E26  C03C  FFD9         	movff	strtod@s,fsr2l
  6949  001E2A  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6950  001E2E  0E65               	movlw	101
  6951  001E30  18DE               	xorwf	postinc2,w,c
  6952  001E32  B4D8               	btfsc	status,2,c
  6953  001E34  D008               	goto	i2l2893
  6954  001E36  C03C  FFD9         	movff	strtod@s,fsr2l
  6955  001E3A  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6956  001E3E  0E45               	movlw	69
  6957  001E40  18DE               	xorwf	postinc2,w,c
  6958  001E42  A4D8               	btfss	status,2,c
  6959  001E44  D065               	goto	i2l2925
  6960  001E46                     i2l2893:
  6961  001E46  4A3C               	infsnz	strtod@s,f,c
  6962  001E48  2A3D               	incf	strtod@s+1,f,c
  6963  001E4A  C03C  FFD9         	movff	strtod@s,fsr2l
  6964  001E4E  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6965  001E52  0E2D               	movlw	45
  6966  001E54  18DE               	xorwf	postinc2,w,c
  6967  001E56  A4D8               	btfss	status,2,c
  6968  001E58  D002               	goto	i2l2897
  6969  001E5A  8642               	bsf	strtod@flags,3,c
  6970  001E5C  D008               	goto	i2l2899
  6971  001E5E                     i2l2897:
  6972  001E5E  C03C  FFD9         	movff	strtod@s,fsr2l
  6973  001E62  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6974  001E66  0E2B               	movlw	43
  6975  001E68  18DE               	xorwf	postinc2,w,c
  6976  001E6A  A4D8               	btfss	status,2,c
  6977  001E6C  D006               	goto	i2l2903
  6978  001E6E                     i2l2899:
  6979  001E6E  4A3C               	infsnz	strtod@s,f,c
  6980  001E70  2A3D               	incf	strtod@s+1,f,c
  6981  001E72  D003               	goto	i2l2903
  6982  001E74                     i2l2901:
  6983  001E74  4A3C               	infsnz	strtod@s,f,c
  6984  001E76  2A3D               	incf	strtod@s+1,f,c
  6985  001E78  D000               	goto	i2l2903
  6986  001E7A                     i2l2903:
  6987  001E7A  C03C  FFD9         	movff	strtod@s,fsr2l
  6988  001E7E  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6989  001E82  0E30               	movlw	48
  6990  001E84  18DE               	xorwf	postinc2,w,c
  6991  001E86  B4D8               	btfsc	status,2,c
  6992  001E88  D7F5               	goto	i2l2901
  6993  001E8A  C03C  FFD9         	movff	strtod@s,fsr2l
  6994  001E8E  C03D  FFDA         	movff	strtod@s+1,fsr2h
  6995  001E92  50DF               	movf	indf2,w,c
  6996  001E94  ECDC  F019         	call	_isdigit
  6997  001E98  A0D8               	btfss	status,0,c
  6998  001E9A  D036               	goto	i2l2921
  6999  001E9C  C03C  FFD9         	movff	strtod@s,fsr2l
  7000  001EA0  C03D  FFDA         	movff	strtod@s+1,fsr2h
  7001  001EA4  50DF               	movf	indf2,w,c
  7002  001EA6  0FD0               	addlw	208
  7003  001EA8  6E41               	movwf	strtod@eexp,c
  7004  001EAA  4A3C               	infsnz	strtod@s,f,c
  7005  001EAC  2A3D               	incf	strtod@s+1,f,c
  7006  001EAE  C03C  FFD9         	movff	strtod@s,fsr2l
  7007  001EB2  C03D  FFDA         	movff	strtod@s+1,fsr2h
  7008  001EB6  50DF               	movf	indf2,w,c
  7009  001EB8  ECDC  F019         	call	_isdigit
  7010  001EBC  A0D8               	btfss	status,0,c
  7011  001EBE  D024               	goto	i2l2921
  7012  001EC0  C03C  FFD9         	movff	strtod@s,fsr2l
  7013  001EC4  C03D  FFDA         	movff	strtod@s+1,fsr2h
  7014  001EC8  50DF               	movf	indf2,w,c
  7015  001ECA  6E40               	movwf	??_strtod& (0+255),c
  7016  001ECC  5041               	movf	strtod@eexp,w,c
  7017  001ECE  0D0A               	mullw	10
  7018  001ED0  50F3               	movf	prodl,w,c
  7019  001ED2  2440               	addwf	??_strtod,w,c
  7020  001ED4  0FD0               	addlw	208
  7021  001ED6  6E41               	movwf	strtod@eexp,c
  7022  001ED8  4A3C               	infsnz	strtod@s,f,c
  7023  001EDA  2A3D               	incf	strtod@s+1,f,c
  7024  001EDC  C03C  FFD9         	movff	strtod@s,fsr2l
  7025  001EE0  C03D  FFDA         	movff	strtod@s+1,fsr2h
  7026  001EE4  50DF               	movf	indf2,w,c
  7027  001EE6  ECDC  F019         	call	_isdigit
  7028  001EEA  A0D8               	btfss	status,0,c
  7029  001EEC  D00D               	goto	i2l2921
  7030  001EEE  C03C  FFD9         	movff	strtod@s,fsr2l
  7031  001EF2  C03D  FFDA         	movff	strtod@s+1,fsr2h
  7032  001EF6  50DF               	movf	indf2,w,c
  7033  001EF8  6E40               	movwf	??_strtod& (0+255),c
  7034  001EFA  5041               	movf	strtod@eexp,w,c
  7035  001EFC  0D0A               	mullw	10
  7036  001EFE  50F3               	movf	prodl,w,c
  7037  001F00  2440               	addwf	??_strtod,w,c
  7038  001F02  0FD0               	addlw	208
  7039  001F04  6E41               	movwf	strtod@eexp,c
  7040  001F06  D000               	goto	i2l2921
  7041  001F08                     i2l2921:
  7042  001F08  A642               	btfss	strtod@flags,3,c
  7043  001F0A  D002               	goto	i2l2925
  7044  001F0C  6C41               	negf	strtod@eexp,c
  7045  001F0E  D000               	goto	i2l2925
  7046  001F10                     i2l2925:
  7047  001F10  5041               	movf	strtod@eexp,w,c
  7048  001F12  2643               	addwf	strtod@expon,f,c
  7049  001F14  503E               	movf	strtod@res,w,c
  7050  001F16  103F               	iorwf	strtod@res+1,w,c
  7051  001F18  A4D8               	btfss	status,2,c
  7052  001F1A  A242               	btfss	strtod@flags,1,c
  7053  001F1C  D009               	goto	i2l2933
  7054  001F1E  C03E  FFD9         	movff	strtod@res,fsr2l
  7055  001F22  C03F  FFDA         	movff	strtod@res+1,fsr2h
  7056  001F26  C03C  FFDE         	movff	strtod@s,postinc2
  7057  001F2A  C03D  FFDD         	movff	strtod@s+1,postdec2
  7058  001F2E  D000               	goto	i2l2933
  7059  001F30                     i2l2933:
  7060  001F30  C044  F009         	movff	strtod@_u,___altoft@c
  7061  001F34  C045  F00A         	movff	strtod@_u+1,___altoft@c+1
  7062  001F38  C046  F00B         	movff	strtod@_u+2,___altoft@c+2
  7063  001F3C  C047  F00C         	movff	strtod@_u+3,___altoft@c+3
  7064  001F40  EC1B  F017         	call	___altoft	;wreg free
  7065  001F44  C009  F044         	movff	?___altoft,strtod@_u
  7066  001F48  C00A  F045         	movff	?___altoft+1,strtod@_u+1
  7067  001F4C  C00B  F046         	movff	?___altoft+2,strtod@_u+2
  7068  001F50  5044               	movf	strtod@_u,w,c
  7069  001F52  1045               	iorwf	strtod@_u+1,w,c
  7070  001F54  1046               	iorwf	strtod@_u+2,w,c
  7071  001F56  A4D8               	btfss	status,2,c
  7072  001F58  D005               	goto	i2l2941
  7073  001F5A  0E00               	movlw	0
  7074  001F5C  6E3C               	movwf	?_strtod,c
  7075  001F5E  0E00               	movlw	0
  7076  001F60  D0A6               	goto	L16
  7077  001F62  D0C2               	goto	i2l694
  7078  001F64                     i2l2941:
  7079  001F64  AE43               	btfss	strtod@expon,7,c
  7080  001F66  D04C               	goto	i2l2969
  7081  001F68  6C43               	negf	strtod@expon,c
  7082  001F6A  D017               	goto	i2l2949
  7083  001F6C                     i2l2945:
  7084  001F6C  C044  F009         	movff	strtod@_u,___ftdiv@f1
  7085  001F70  C045  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  7086  001F74  C046  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  7087  001F78  0E03               	movlw	3
  7088  001F7A  6E0C               	movwf	___ftdiv@f2,c
  7089  001F7C  0E15               	movlw	21
  7090  001F7E  6E0D               	movwf	___ftdiv@f2+1,c
  7091  001F80  0E50               	movlw	80
  7092  001F82  6E0E               	movwf	___ftdiv@f2+2,c
  7093  001F84  EC7C  F015         	call	___ftdiv	;wreg free
  7094  001F88  C009  F044         	movff	?___ftdiv,strtod@_u
  7095  001F8C  C00A  F045         	movff	?___ftdiv+1,strtod@_u+1
  7096  001F90  C00B  F046         	movff	?___ftdiv+2,strtod@_u+2
  7097  001F94  0EF6               	movlw	246
  7098  001F96  2643               	addwf	strtod@expon,f,c
  7099  001F98  D000               	goto	i2l2949
  7100  001F9A                     i2l2949:
  7101  001F9A  5043               	movf	strtod@expon,w,c
  7102  001F9C  0A80               	xorlw	128
  7103  001F9E  0F76               	addlw	-138
  7104  001FA0  A0D8               	btfss	status,0,c
  7105  001FA2  D018               	goto	i2l2955
  7106  001FA4  D7E3               	goto	i2l2945
  7107  001FA6  D016               	goto	i2l2955
  7108  001FA8                     i2l2951:
  7109  001FA8  C044  F009         	movff	strtod@_u,___ftdiv@f1
  7110  001FAC  C045  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  7111  001FB0  C046  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  7112  001FB4  0E00               	movlw	0
  7113  001FB6  6E0C               	movwf	___ftdiv@f2,c
  7114  001FB8  0E20               	movlw	32
  7115  001FBA  6E0D               	movwf	___ftdiv@f2+1,c
  7116  001FBC  0E41               	movlw	65
  7117  001FBE  6E0E               	movwf	___ftdiv@f2+2,c
  7118  001FC0  EC7C  F015         	call	___ftdiv	;wreg free
  7119  001FC4  C009  F044         	movff	?___ftdiv,strtod@_u
  7120  001FC8  C00A  F045         	movff	?___ftdiv+1,strtod@_u+1
  7121  001FCC  C00B  F046         	movff	?___ftdiv+2,strtod@_u+2
  7122  001FD0  0643               	decf	strtod@expon,f,c
  7123  001FD2  D000               	goto	i2l2955
  7124  001FD4                     i2l2955:
  7125  001FD4  5043               	movf	strtod@expon,w,c
  7126  001FD6  A4D8               	btfss	status,2,c
  7127  001FD8  D7E7               	goto	i2l2951
  7128  001FDA  C044  F033         	movff	strtod@_u,___ftge@ff1
  7129  001FDE  C045  F034         	movff	strtod@_u+1,___ftge@ff1+1
  7130  001FE2  C046  F035         	movff	strtod@_u+2,___ftge@ff1+2
  7131  001FE6  0E00               	movlw	0
  7132  001FE8  6E36               	movwf	___ftge@ff2,c
  7133  001FEA  0E80               	movlw	128
  7134  001FEC  6E37               	movwf	___ftge@ff2+1,c
  7135  001FEE  0E00               	movlw	0
  7136  001FF0  6E38               	movwf	___ftge@ff2+2,c
  7137  001FF2  EC50  F016         	call	___ftge	;wreg free
  7138  001FF6  D04D               	goto	L17
  7139  001FF8  D077               	goto	i2l694
  7140  001FFA  D056               	goto	i2l2993
  7141  001FFC  D075               	goto	i2l694
  7142  001FFE  D05C               	goto	i2l704
  7143  002000                     i2l2969:
  7144  002000  5043               	movf	strtod@expon,w,c
  7145  002002  0A80               	xorlw	128
  7146  002004  0F7F               	addlw	-129
  7147  002006  B0D8               	btfsc	status,0,c
  7148  002008  D019               	goto	i2l2977
  7149  00200A  D056               	goto	i2l704
  7150  00200C  D017               	goto	i2l2977
  7151  00200E                     i2l2973:
  7152  00200E  C044  F018         	movff	strtod@_u,i2___ftmul@f1
  7153  002012  C045  F019         	movff	strtod@_u+1,i2___ftmul@f1+1
  7154  002016  C046  F01A         	movff	strtod@_u+2,i2___ftmul@f1+2
  7155  00201A  0E03               	movlw	3
  7156  00201C  6E1B               	movwf	i2___ftmul@f2,c
  7157  00201E  0E15               	movlw	21
  7158  002020  6E1C               	movwf	i2___ftmul@f2+1,c
  7159  002022  0E50               	movlw	80
  7160  002024  6E1D               	movwf	i2___ftmul@f2+2,c
  7161  002026  EC8D  F014         	call	i2___ftmul	;wreg free
  7162  00202A  C018  F044         	movff	?i2___ftmul,strtod@_u
  7163  00202E  C019  F045         	movff	?i2___ftmul+1,strtod@_u+1
  7164  002032  C01A  F046         	movff	?i2___ftmul+2,strtod@_u+2
  7165  002036  0EF6               	movlw	246
  7166  002038  2643               	addwf	strtod@expon,f,c
  7167  00203A  D000               	goto	i2l2977
  7168  00203C                     i2l2977:
  7169  00203C  0E0A               	movlw	10
  7170  00203E  6043               	cpfslt	strtod@expon,c
  7171  002040  D7E6               	goto	i2l2973
  7172  002042  D016               	goto	i2l2983
  7173  002044                     i2l2979:
  7174  002044  C044  F018         	movff	strtod@_u,i2___ftmul@f1
  7175  002048  C045  F019         	movff	strtod@_u+1,i2___ftmul@f1+1
  7176  00204C  C046  F01A         	movff	strtod@_u+2,i2___ftmul@f1+2
  7177  002050  0E00               	movlw	0
  7178  002052  6E1B               	movwf	i2___ftmul@f2,c
  7179  002054  0E20               	movlw	32
  7180  002056  6E1C               	movwf	i2___ftmul@f2+1,c
  7181  002058  0E41               	movlw	65
  7182  00205A  6E1D               	movwf	i2___ftmul@f2+2,c
  7183  00205C  EC8D  F014         	call	i2___ftmul	;wreg free
  7184  002060  C018  F044         	movff	?i2___ftmul,strtod@_u
  7185  002064  C019  F045         	movff	?i2___ftmul+1,strtod@_u+1
  7186  002068  C01A  F046         	movff	?i2___ftmul+2,strtod@_u+2
  7187  00206C  0643               	decf	strtod@expon,f,c
  7188  00206E  D000               	goto	i2l2983
  7189  002070                     i2l2983:
  7190  002070  5043               	movf	strtod@expon,w,c
  7191  002072  A4D8               	btfss	status,2,c
  7192  002074  D7E7               	goto	i2l2979
  7193  002076  0EFF               	movlw	255
  7194  002078  6E33               	movwf	___ftge@ff1,c
  7195  00207A  0E7F               	movlw	127
  7196  00207C  6E34               	movwf	___ftge@ff1+1,c
  7197  00207E  0E7F               	movlw	127
  7198  002080  6E35               	movwf	___ftge@ff1+2,c
  7199  002082  C044  F036         	movff	strtod@_u,___ftge@ff2
  7200  002086  C045  F037         	movff	strtod@_u+1,___ftge@ff2+1
  7201  00208A  C046  F038         	movff	strtod@_u+2,___ftge@ff2+2
  7202  00208E  EC50  F016         	call	___ftge	;wreg free
  7203  002092                     L17:
  7204  002092  B0D8               	btfsc	status,0,c
  7205  002094  D011               	goto	i2l704
  7206  002096  A042               	btfss	strtod@flags,0,c
  7207  002098  D007               	goto	i2l2993
  7208  00209A  0E00               	movlw	0
  7209  00209C  6E3C               	movwf	?_strtod,c
  7210  00209E  0E80               	movlw	128
  7211  0020A0  6E3D               	movwf	?_strtod+1,c
  7212  0020A2  0E80               	movlw	128
  7213  0020A4  D006               	goto	L13
  7214  0020A6  D020               	goto	i2l694
  7215  0020A8                     i2l2993:
  7216  0020A8  0E00               	movlw	0
  7217  0020AA  6E3C               	movwf	?_strtod,c
  7218  0020AC  0E80               	movlw	128
  7219  0020AE                     L16:
  7220  0020AE  6E3D               	movwf	?_strtod+1,c
  7221  0020B0  0E00               	movlw	0
  7222  0020B2                     L13:
  7223  0020B2  6E3E               	movwf	?_strtod+2,c
  7224  0020B4  D019               	goto	i2l694
  7225  0020B6  D000               	goto	i2l704
  7226  0020B8                     i2l704:
  7227  0020B8  A042               	btfss	strtod@flags,0,c
  7228  0020BA  D00F               	goto	i2l2999
  7229  0020BC  C044  F001         	movff	strtod@_u,___ftneg@f1
  7230  0020C0  C045  F002         	movff	strtod@_u+1,___ftneg@f1+1
  7231  0020C4  C046  F003         	movff	strtod@_u+2,___ftneg@f1+2
  7232  0020C8  ECCA  F019         	call	___ftneg	;wreg free
  7233  0020CC  C001  F044         	movff	?___ftneg,strtod@_u
  7234  0020D0  C002  F045         	movff	?___ftneg+1,strtod@_u+1
  7235  0020D4  C003  F046         	movff	?___ftneg+2,strtod@_u+2
  7236  0020D8  D000               	goto	i2l2999
  7237  0020DA                     i2l2999:
  7238  0020DA  C044  F03C         	movff	strtod@_u,?_strtod
  7239  0020DE  C045  F03D         	movff	strtod@_u+1,?_strtod+1
  7240  0020E2  C046  F03E         	movff	strtod@_u+2,?_strtod+2
  7241  0020E6  D000               	goto	i2l694
  7242  0020E8                     i2l694:
  7243  0020E8  0012               	return		;funcret
  7244  0020EA                     __end_of_strtod:
  7245                           	opt stack 0
  7246                           pclatu	equ	0xFFB
  7247                           pclath	equ	0xFFA
  7248                           tblptru	equ	0xFF8
  7249                           tblptrh	equ	0xFF7
  7250                           tblptrl	equ	0xFF6
  7251                           tablat	equ	0xFF5
  7252                           prodh	equ	0xFF4
  7253                           prodl	equ	0xFF3
  7254                           intcon	equ	0xFF2
  7255                           intcon2	equ	0xFF1
  7256                           indf0	equ	0xFEF
  7257                           postinc0	equ	0xFEE
  7258                           fsr0h	equ	0xFEA
  7259                           fsr0l	equ	0xFE9
  7260                           wreg	equ	0xFE8
  7261                           indf1	equ	0xFE7
  7262                           fsr1h	equ	0xFE2
  7263                           fsr1l	equ	0xFE1
  7264                           indf2	equ	0xFDF
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function i2___ftmul *****************
  7272 ;; Defined at:
  7273 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  f1              3   23[COMRAM] float 
  7276 ;;  f2              3   26[COMRAM] float 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  __ftmul         3   33[COMRAM] unsigned um
  7279 ;;  __ftmul         1   37[COMRAM] unsigned char 
  7280 ;;  __ftmul         1   36[COMRAM] unsigned char 
  7281 ;;  __ftmul         1   32[COMRAM] unsigned char 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  3   23[COMRAM] float 
  7284 ;; Registers used:
  7285 ;;		wreg, status,2, status,0, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7291 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;Total ram usage:       15 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    1
  7298 ;; This function calls:
  7299 ;;		i2___ftpack
  7300 ;; This function is called by:
  7301 ;;		_calculatePID
  7302 ;;		_RTD2Angle
  7303 ;;		_strtod
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text36
  7308  00291A                     __ptext36:
  7309                           	opt stack 0
  7310  00291A                     i2___ftmul:
  7311                           	opt stack 21
  7312                           
  7313                           ;incstack = 0
  7314  00291A  C01A  F01E         	movff	i2___ftmul@f1+2,??i2___ftmul
  7315  00291E  6A1F               	clrf	(??i2___ftmul+1)& (0+255),c
  7316  002920  6A20               	clrf	(??i2___ftmul+2)& (0+255),c
  7317  002922  3419               	rlcf	i2___ftmul@f1+1,w,c
  7318  002924  361E               	rlcf	??i2___ftmul& (0+255),f,c
  7319  002926  E301               	bnc	u257_41
  7320  002928  801F               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7321  00292A                     u257_41:
  7322  00292A  501E               	movf	??i2___ftmul,w,c
  7323  00292C  6E21               	movwf	i2___ftmul@exp,c
  7324  00292E  5021               	movf	i2___ftmul@exp,w,c
  7325  002930  A4D8               	btfss	status,2,c
  7326  002932  D002               	goto	i2l2759
  7327  002934  D00E               	goto	i2l2761
  7328  002936  D06C               	goto	i2l965
  7329  002938                     i2l2759:
  7330  002938  C01D  F01E         	movff	i2___ftmul@f2+2,??i2___ftmul
  7331  00293C  6A1F               	clrf	(??i2___ftmul+1)& (0+255),c
  7332  00293E  6A20               	clrf	(??i2___ftmul+2)& (0+255),c
  7333  002940  341C               	rlcf	i2___ftmul@f2+1,w,c
  7334  002942  361E               	rlcf	??i2___ftmul& (0+255),f,c
  7335  002944  E301               	bnc	u259_41
  7336  002946  801F               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7337  002948                     u259_41:
  7338  002948  501E               	movf	??i2___ftmul,w,c
  7339  00294A  6E26               	movwf	i2___ftmul@sign,c
  7340  00294C  5026               	movf	i2___ftmul@sign,w,c
  7341  00294E  A4D8               	btfss	status,2,c
  7342  002950  D007               	goto	i2l2765
  7343  002952                     i2l2761:
  7344  002952  0E00               	movlw	0
  7345  002954  6E18               	movwf	?i2___ftmul,c
  7346  002956  0E00               	movlw	0
  7347  002958  6E19               	movwf	?i2___ftmul+1,c
  7348  00295A  0E00               	movlw	0
  7349  00295C  6E1A               	movwf	?i2___ftmul+2,c
  7350  00295E  D058               	goto	i2l965
  7351  002960                     i2l2765:
  7352  002960  5026               	movf	i2___ftmul@sign,w,c
  7353  002962  0F7B               	addlw	123
  7354  002964  2621               	addwf	i2___ftmul@exp,f,c
  7355  002966  C01A  F026         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  7356  00296A  501D               	movf	i2___ftmul@f2+2,w,c
  7357  00296C  1A26               	xorwf	i2___ftmul@sign,f,c
  7358  00296E  0E80               	movlw	128
  7359  002970  1626               	andwf	i2___ftmul@sign,f,c
  7360  002972  8E19               	bsf	i2___ftmul@f1+1,7,c
  7361  002974  8E1C               	bsf	i2___ftmul@f2+1,7,c
  7362  002976  0EFF               	movlw	255
  7363  002978  161B               	andwf	i2___ftmul@f2,f,c
  7364  00297A  0EFF               	movlw	255
  7365  00297C  161C               	andwf	i2___ftmul@f2+1,f,c
  7366  00297E  0E00               	movlw	0
  7367  002980  161D               	andwf	i2___ftmul@f2+2,f,c
  7368  002982  0E00               	movlw	0
  7369  002984  6E22               	movwf	i2___ftmul@f3_as_product,c
  7370  002986  0E00               	movlw	0
  7371  002988  6E23               	movwf	i2___ftmul@f3_as_product+1,c
  7372  00298A  0E00               	movlw	0
  7373  00298C  6E24               	movwf	i2___ftmul@f3_as_product+2,c
  7374  00298E  0E07               	movlw	7
  7375  002990  6E25               	movwf	i2___ftmul@cntr,c
  7376  002992  D000               	goto	i2l2779
  7377  002994                     i2l2779:
  7378  002994  A018               	btfss	i2___ftmul@f1,0,c
  7379  002996  D007               	goto	i2l2783
  7380  002998  501B               	movf	i2___ftmul@f2,w,c
  7381  00299A  2622               	addwf	i2___ftmul@f3_as_product,f,c
  7382  00299C  501C               	movf	i2___ftmul@f2+1,w,c
  7383  00299E  2223               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7384  0029A0  501D               	movf	i2___ftmul@f2+2,w,c
  7385  0029A2  2224               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7386  0029A4  D000               	goto	i2l2783
  7387  0029A6                     i2l2783:
  7388  0029A6  90D8               	bcf	status,0,c
  7389  0029A8  321A               	rrcf	i2___ftmul@f1+2,f,c
  7390  0029AA  3219               	rrcf	i2___ftmul@f1+1,f,c
  7391  0029AC  3218               	rrcf	i2___ftmul@f1,f,c
  7392  0029AE  90D8               	bcf	status,0,c
  7393  0029B0  361B               	rlcf	i2___ftmul@f2,f,c
  7394  0029B2  361C               	rlcf	i2___ftmul@f2+1,f,c
  7395  0029B4  361D               	rlcf	i2___ftmul@f2+2,f,c
  7396  0029B6  2E25               	decfsz	i2___ftmul@cntr,f,c
  7397  0029B8  D7ED               	goto	i2l2779
  7398  0029BA  D000               	goto	i2l2787
  7399  0029BC                     i2l2787:
  7400  0029BC  0E09               	movlw	9
  7401  0029BE  6E25               	movwf	i2___ftmul@cntr,c
  7402  0029C0  D000               	goto	i2l2789
  7403  0029C2                     i2l2789:
  7404  0029C2  A018               	btfss	i2___ftmul@f1,0,c
  7405  0029C4  D007               	goto	i2l2793
  7406  0029C6  501B               	movf	i2___ftmul@f2,w,c
  7407  0029C8  2622               	addwf	i2___ftmul@f3_as_product,f,c
  7408  0029CA  501C               	movf	i2___ftmul@f2+1,w,c
  7409  0029CC  2223               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7410  0029CE  501D               	movf	i2___ftmul@f2+2,w,c
  7411  0029D0  2224               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7412  0029D2  D000               	goto	i2l2793
  7413  0029D4                     i2l2793:
  7414  0029D4  90D8               	bcf	status,0,c
  7415  0029D6  321A               	rrcf	i2___ftmul@f1+2,f,c
  7416  0029D8  3219               	rrcf	i2___ftmul@f1+1,f,c
  7417  0029DA  3218               	rrcf	i2___ftmul@f1,f,c
  7418  0029DC  90D8               	bcf	status,0,c
  7419  0029DE  3224               	rrcf	i2___ftmul@f3_as_product+2,f,c
  7420  0029E0  3223               	rrcf	i2___ftmul@f3_as_product+1,f,c
  7421  0029E2  3222               	rrcf	i2___ftmul@f3_as_product,f,c
  7422  0029E4  2E25               	decfsz	i2___ftmul@cntr,f,c
  7423  0029E6  D7ED               	goto	i2l2789
  7424  0029E8  D000               	goto	i2l2797
  7425  0029EA                     i2l2797:
  7426  0029EA  C022  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  7427  0029EE  C023  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  7428  0029F2  C024  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  7429  0029F6  C021  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  7430  0029FA  C026  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  7431  0029FE  ECED  F015         	call	i2___ftpack	;wreg free
  7432  002A02  C001  F018         	movff	?i2___ftpack,?i2___ftmul
  7433  002A06  C002  F019         	movff	?i2___ftpack+1,?i2___ftmul+1
  7434  002A0A  C003  F01A         	movff	?i2___ftpack+2,?i2___ftmul+2
  7435  002A0E  D000               	goto	i2l965
  7436  002A10                     i2l965:
  7437  002A10  0012               	return		;funcret
  7438  002A12                     __end_ofi2___ftmul:
  7439                           	opt stack 0
  7440                           pclatu	equ	0xFFB
  7441                           pclath	equ	0xFFA
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon2	equ	0xFF1
  7450                           indf0	equ	0xFEF
  7451                           postinc0	equ	0xFEE
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           indf1	equ	0xFE7
  7456                           fsr1h	equ	0xFE2
  7457                           fsr1l	equ	0xFE1
  7458                           indf2	equ	0xFDF
  7459                           postinc2	equ	0xFDE
  7460                           postdec2	equ	0xFDD
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8
  7464                           
  7465 ;; *************** function _isspace *****************
  7466 ;; Defined at:
  7467 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isspace.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;  c               1    wreg     unsigned char 
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;  c               1    2[COMRAM] unsigned char 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;		None               void
  7474 ;; Registers used:
  7475 ;;		wreg, status,2, status,0
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;Total ram usage:        3 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_keyValue
  7491 ;;		_strtod
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           	psect	text37
  7496  0032CE                     __ptext37:
  7497                           	opt stack 0
  7498  0032CE                     _isspace:
  7499                           	opt stack 21
  7500                           
  7501                           ;incstack = 0
  7502                           ;isspace@c stored from wreg
  7503  0032CE  6E03               	movwf	isspace@c,c
  7504  0032D0  0E01               	movlw	1
  7505  0032D2  6E02               	movwf	_isspace$2326,c
  7506  0032D4  0E20               	movlw	32
  7507  0032D6  1803               	xorwf	isspace@c,w,c
  7508  0032D8  B4D8               	btfsc	status,2,c
  7509  0032DA  D00A               	goto	i2l2641
  7510  0032DC  0E0E               	movlw	14
  7511  0032DE  6003               	cpfslt	isspace@c,c
  7512  0032E0  D004               	goto	i2l2639
  7513  0032E2  0E09               	movlw	9
  7514  0032E4  6003               	cpfslt	isspace@c,c
  7515  0032E6  D004               	goto	i2l2641
  7516  0032E8  D000               	goto	i2l2639
  7517  0032EA                     i2l2639:
  7518  0032EA  0E00               	movlw	0
  7519  0032EC  6E02               	movwf	_isspace$2326,c
  7520  0032EE  D000               	goto	i2l2641
  7521  0032F0                     i2l2641:
  7522  0032F0  C002  F001         	movff	_isspace$2326,??_isspace
  7523  0032F4  3001               	rrcf	??_isspace,w,c
  7524  0032F6  D000               	goto	i2l1006
  7525  0032F8                     i2l1006:
  7526  0032F8  0012               	return		;funcret
  7527  0032FA                     __end_of_isspace:
  7528                           	opt stack 0
  7529                           pclatu	equ	0xFFB
  7530                           pclath	equ	0xFFA
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           intcon	equ	0xFF2
  7538                           intcon2	equ	0xFF1
  7539                           indf0	equ	0xFEF
  7540                           postinc0	equ	0xFEE
  7541                           fsr0h	equ	0xFEA
  7542                           fsr0l	equ	0xFE9
  7543                           wreg	equ	0xFE8
  7544                           indf1	equ	0xFE7
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           fsr2h	equ	0xFDA
  7551                           fsr2l	equ	0xFD9
  7552                           status	equ	0xFD8
  7553                           
  7554 ;; *************** function _isdigit *****************
  7555 ;; Defined at:
  7556 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;  c               1    wreg     unsigned char 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  c               1    2[COMRAM] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;		None               void
  7563 ;; Registers used:
  7564 ;;		wreg, status,2, status,0
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;Total ram usage:        3 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; This function calls:
  7577 ;;		Nothing
  7578 ;; This function is called by:
  7579 ;;		_strtod
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text38
  7584  0033B8                     __ptext38:
  7585                           	opt stack 0
  7586  0033B8                     _isdigit:
  7587                           	opt stack 21
  7588                           
  7589                           ;incstack = 0
  7590                           ;isdigit@c stored from wreg
  7591  0033B8  6E03               	movwf	isdigit@c,c
  7592  0033BA  0E00               	movlw	0
  7593  0033BC  6E02               	movwf	_isdigit$2323,c
  7594  0033BE  0E3A               	movlw	58
  7595  0033C0  6003               	cpfslt	isdigit@c,c
  7596  0033C2  D006               	goto	i2l2725
  7597  0033C4  0E2F               	movlw	47
  7598  0033C6  6403               	cpfsgt	isdigit@c,c
  7599  0033C8  D003               	goto	i2l2725
  7600  0033CA  0E01               	movlw	1
  7601  0033CC  6E02               	movwf	_isdigit$2323,c
  7602  0033CE  D000               	goto	i2l2725
  7603  0033D0                     i2l2725:
  7604  0033D0  C002  F001         	movff	_isdigit$2323,??_isdigit
  7605  0033D4  3001               	rrcf	??_isdigit,w,c
  7606  0033D6  D000               	goto	i2l1001
  7607  0033D8                     i2l1001:
  7608  0033D8  0012               	return		;funcret
  7609  0033DA                     __end_of_isdigit:
  7610                           	opt stack 0
  7611                           pclatu	equ	0xFFB
  7612                           pclath	equ	0xFFA
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           intcon	equ	0xFF2
  7620                           intcon2	equ	0xFF1
  7621                           indf0	equ	0xFEF
  7622                           postinc0	equ	0xFEE
  7623                           fsr0h	equ	0xFEA
  7624                           fsr0l	equ	0xFE9
  7625                           wreg	equ	0xFE8
  7626                           indf1	equ	0xFE7
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function ___lmul *****************
  7637 ;; Defined at:
  7638 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  multiplier      4    0[COMRAM] unsigned long 
  7641 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  product         4    8[COMRAM] unsigned long 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  4    0[COMRAM] unsigned long 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7653 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;Total ram usage:       12 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; This function calls:
  7660 ;;		Nothing
  7661 ;; This function is called by:
  7662 ;;		_strtod
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text39
  7667  002FD4                     __ptext39:
  7668                           	opt stack 0
  7669  002FD4                     ___lmul:
  7670                           	opt stack 21
  7671                           
  7672                           ;incstack = 0
  7673  002FD4  0E00               	movlw	0
  7674  002FD6  6E09               	movwf	___lmul@product,c
  7675  002FD8  0E00               	movlw	0
  7676  002FDA  6E0A               	movwf	___lmul@product+1,c
  7677  002FDC  0E00               	movlw	0
  7678  002FDE  6E0B               	movwf	___lmul@product+2,c
  7679  002FE0  0E00               	movlw	0
  7680  002FE2  6E0C               	movwf	___lmul@product+3,c
  7681  002FE4  D000               	goto	i2l2647
  7682  002FE6                     i2l2647:
  7683  002FE6  A001               	btfss	___lmul@multiplier,0,c
  7684  002FE8  D009               	goto	i2l2651
  7685  002FEA  5005               	movf	___lmul@multiplicand,w,c
  7686  002FEC  2609               	addwf	___lmul@product,f,c
  7687  002FEE  5006               	movf	___lmul@multiplicand+1,w,c
  7688  002FF0  220A               	addwfc	___lmul@product+1,f,c
  7689  002FF2  5007               	movf	___lmul@multiplicand+2,w,c
  7690  002FF4  220B               	addwfc	___lmul@product+2,f,c
  7691  002FF6  5008               	movf	___lmul@multiplicand+3,w,c
  7692  002FF8  220C               	addwfc	___lmul@product+3,f,c
  7693  002FFA  D000               	goto	i2l2651
  7694  002FFC                     i2l2651:
  7695  002FFC  90D8               	bcf	status,0,c
  7696  002FFE  3605               	rlcf	___lmul@multiplicand,f,c
  7697  003000  3606               	rlcf	___lmul@multiplicand+1,f,c
  7698  003002  3607               	rlcf	___lmul@multiplicand+2,f,c
  7699  003004  3608               	rlcf	___lmul@multiplicand+3,f,c
  7700  003006  90D8               	bcf	status,0,c
  7701  003008  3204               	rrcf	___lmul@multiplier+3,f,c
  7702  00300A  3203               	rrcf	___lmul@multiplier+2,f,c
  7703  00300C  3202               	rrcf	___lmul@multiplier+1,f,c
  7704  00300E  3201               	rrcf	___lmul@multiplier,f,c
  7705  003010  5001               	movf	___lmul@multiplier,w,c
  7706  003012  1002               	iorwf	___lmul@multiplier+1,w,c
  7707  003014  1003               	iorwf	___lmul@multiplier+2,w,c
  7708  003016  1004               	iorwf	___lmul@multiplier+3,w,c
  7709  003018  A4D8               	btfss	status,2,c
  7710  00301A  D7E5               	goto	i2l2647
  7711  00301C  C009  F001         	movff	___lmul@product,?___lmul
  7712  003020  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7713  003024  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7714  003028  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7715  00302C  0012               	return		;funcret
  7716  00302E                     __end_of___lmul:
  7717                           	opt stack 0
  7718                           pclatu	equ	0xFFB
  7719                           pclath	equ	0xFFA
  7720                           tblptru	equ	0xFF8
  7721                           tblptrh	equ	0xFF7
  7722                           tblptrl	equ	0xFF6
  7723                           tablat	equ	0xFF5
  7724                           prodh	equ	0xFF4
  7725                           prodl	equ	0xFF3
  7726                           intcon	equ	0xFF2
  7727                           intcon2	equ	0xFF1
  7728                           indf0	equ	0xFEF
  7729                           postinc0	equ	0xFEE
  7730                           fsr0h	equ	0xFEA
  7731                           fsr0l	equ	0xFE9
  7732                           wreg	equ	0xFE8
  7733                           indf1	equ	0xFE7
  7734                           fsr1h	equ	0xFE2
  7735                           fsr1l	equ	0xFE1
  7736                           indf2	equ	0xFDF
  7737                           postinc2	equ	0xFDE
  7738                           postdec2	equ	0xFDD
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function ___ftneg *****************
  7744 ;; Defined at:
  7745 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  f1              3    0[COMRAM] float 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;		None
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  3    0[COMRAM] float 
  7752 ;; Registers used:
  7753 ;;		wreg, status,2, status,0
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7759 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;Total ram usage:        3 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; This function calls:
  7766 ;;		Nothing
  7767 ;; This function is called by:
  7768 ;;		_calculatePID
  7769 ;;		_strtod
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text40
  7774  003394                     __ptext40:
  7775                           	opt stack 0
  7776  003394                     ___ftneg:
  7777                           	opt stack 22
  7778                           
  7779                           ;incstack = 0
  7780  003394  5001               	movf	___ftneg@f1,w,c
  7781  003396  1002               	iorwf	___ftneg@f1+1,w,c
  7782  003398  1003               	iorwf	___ftneg@f1+2,w,c
  7783  00339A  B4D8               	btfsc	status,2,c
  7784  00339C  D006               	goto	i2l975
  7785  00339E  0E00               	movlw	0
  7786  0033A0  1A01               	xorwf	___ftneg@f1,f,c
  7787  0033A2  0E00               	movlw	0
  7788  0033A4  1A02               	xorwf	___ftneg@f1+1,f,c
  7789  0033A6  0E80               	movlw	128
  7790  0033A8  1A03               	xorwf	___ftneg@f1+2,f,c
  7791  0033AA                     i2l975:
  7792  0033AA  C001  F001         	movff	___ftneg@f1,?___ftneg
  7793  0033AE  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7794  0033B2  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7795  0033B6  0012               	return		;funcret
  7796  0033B8                     __end_of___ftneg:
  7797                           	opt stack 0
  7798                           pclatu	equ	0xFFB
  7799                           pclath	equ	0xFFA
  7800                           tblptru	equ	0xFF8
  7801                           tblptrh	equ	0xFF7
  7802                           tblptrl	equ	0xFF6
  7803                           tablat	equ	0xFF5
  7804                           prodh	equ	0xFF4
  7805                           prodl	equ	0xFF3
  7806                           intcon	equ	0xFF2
  7807                           intcon2	equ	0xFF1
  7808                           indf0	equ	0xFEF
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           indf1	equ	0xFE7
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function ___ftge *****************
  7824 ;; Defined at:
  7825 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  ff1             3   50[COMRAM] float 
  7828 ;;  ff2             3   53[COMRAM] float 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;		None               void
  7833 ;; Registers used:
  7834 ;;		wreg, status,2, status,0
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7840 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;Total ram usage:        9 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_calculatePID
  7850 ;;		_strtod
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text41
  7855  002CA0                     __ptext41:
  7856                           	opt stack 0
  7857  002CA0                     ___ftge:
  7858                           	opt stack 22
  7859                           
  7860                           ;incstack = 0
  7861  002CA0  AE35               	btfss	___ftge@ff1+2,7,c
  7862  002CA2  D017               	goto	i2l2733
  7863  002CA4  C033  F039         	movff	___ftge@ff1,??___ftge
  7864  002CA8  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  7865  002CAC  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  7866  002CB0  1E39               	comf	??___ftge,f,c
  7867  002CB2  1E3A               	comf	??___ftge+1,f,c
  7868  002CB4  1E3B               	comf	??___ftge+2,f,c
  7869  002CB6  2A39               	incf	??___ftge,f,c
  7870  002CB8  0E00               	movlw	0
  7871  002CBA  223A               	addwfc	??___ftge+1,f,c
  7872  002CBC  223B               	addwfc	??___ftge+2,f,c
  7873  002CBE  0E00               	movlw	0
  7874  002CC0  2439               	addwf	??___ftge,w,c
  7875  002CC2  6E33               	movwf	___ftge@ff1,c
  7876  002CC4  0E00               	movlw	0
  7877  002CC6  203A               	addwfc	??___ftge+1,w,c
  7878  002CC8  6E34               	movwf	___ftge@ff1+1,c
  7879  002CCA  0E80               	movlw	128
  7880  002CCC  203B               	addwfc	??___ftge+2,w,c
  7881  002CCE  6E35               	movwf	___ftge@ff1+2,c
  7882  002CD0  D000               	goto	i2l2733
  7883  002CD2                     i2l2733:
  7884  002CD2  AE38               	btfss	___ftge@ff2+2,7,c
  7885  002CD4  D017               	goto	i2l2737
  7886  002CD6  C036  F039         	movff	___ftge@ff2,??___ftge
  7887  002CDA  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  7888  002CDE  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  7889  002CE2  1E39               	comf	??___ftge,f,c
  7890  002CE4  1E3A               	comf	??___ftge+1,f,c
  7891  002CE6  1E3B               	comf	??___ftge+2,f,c
  7892  002CE8  2A39               	incf	??___ftge,f,c
  7893  002CEA  0E00               	movlw	0
  7894  002CEC  223A               	addwfc	??___ftge+1,f,c
  7895  002CEE  223B               	addwfc	??___ftge+2,f,c
  7896  002CF0  0E00               	movlw	0
  7897  002CF2  2439               	addwf	??___ftge,w,c
  7898  002CF4  6E36               	movwf	___ftge@ff2,c
  7899  002CF6  0E00               	movlw	0
  7900  002CF8  203A               	addwfc	??___ftge+1,w,c
  7901  002CFA  6E37               	movwf	___ftge@ff2+1,c
  7902  002CFC  0E80               	movlw	128
  7903  002CFE  203B               	addwfc	??___ftge+2,w,c
  7904  002D00  6E38               	movwf	___ftge@ff2+2,c
  7905  002D02  D000               	goto	i2l2737
  7906  002D04                     i2l2737:
  7907  002D04  0E00               	movlw	0
  7908  002D06  1A33               	xorwf	___ftge@ff1,f,c
  7909  002D08  0E00               	movlw	0
  7910  002D0A  1A34               	xorwf	___ftge@ff1+1,f,c
  7911  002D0C  0E80               	movlw	128
  7912  002D0E  1A35               	xorwf	___ftge@ff1+2,f,c
  7913  002D10  0E00               	movlw	0
  7914  002D12  1A36               	xorwf	___ftge@ff2,f,c
  7915  002D14  0E00               	movlw	0
  7916  002D16  1A37               	xorwf	___ftge@ff2+1,f,c
  7917  002D18  0E80               	movlw	128
  7918  002D1A  1A38               	xorwf	___ftge@ff2+2,f,c
  7919  002D1C  5036               	movf	___ftge@ff2,w,c
  7920  002D1E  5C33               	subwf	___ftge@ff1,w,c
  7921  002D20  5037               	movf	___ftge@ff2+1,w,c
  7922  002D22  5834               	subwfb	___ftge@ff1+1,w,c
  7923  002D24  5038               	movf	___ftge@ff2+2,w,c
  7924  002D26  5835               	subwfb	___ftge@ff1+2,w,c
  7925  002D28  B0D8               	btfsc	status,0,c
  7926  002D2A  D002               	goto	i2l2743
  7927  002D2C  90D8               	bcf	status,0,c
  7928  002D2E  D002               	goto	i2l959
  7929  002D30                     i2l2743:
  7930  002D30  80D8               	bsf	status,0,c
  7931  002D32  D000               	goto	i2l959
  7932  002D34                     i2l959:
  7933  002D34  0012               	return		;funcret
  7934  002D36                     __end_of___ftge:
  7935                           	opt stack 0
  7936                           pclatu	equ	0xFFB
  7937                           pclath	equ	0xFFA
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           intcon	equ	0xFF2
  7945                           intcon2	equ	0xFF1
  7946                           indf0	equ	0xFEF
  7947                           postinc0	equ	0xFEE
  7948                           fsr0h	equ	0xFEA
  7949                           fsr0l	equ	0xFE9
  7950                           wreg	equ	0xFE8
  7951                           indf1	equ	0xFE7
  7952                           fsr1h	equ	0xFE2
  7953                           fsr1l	equ	0xFE1
  7954                           indf2	equ	0xFDF
  7955                           postinc2	equ	0xFDE
  7956                           postdec2	equ	0xFDD
  7957                           fsr2h	equ	0xFDA
  7958                           fsr2l	equ	0xFD9
  7959                           status	equ	0xFD8
  7960                           
  7961 ;; *************** function ___ftdiv *****************
  7962 ;; Defined at:
  7963 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  f1              3    8[COMRAM] float 
  7966 ;;  f2              3   11[COMRAM] float 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  f3              3   18[COMRAM] float 
  7969 ;;  sign            1   22[COMRAM] unsigned char 
  7970 ;;  exp             1   21[COMRAM] unsigned char 
  7971 ;;  cntr            1   17[COMRAM] unsigned char 
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  3    8[COMRAM] float 
  7974 ;; Registers used:
  7975 ;;		wreg, status,2, status,0, cstack
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7981 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7983 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7984 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7985 ;;Total ram usage:       15 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    1
  7988 ;; This function calls:
  7989 ;;		i2___ftpack
  7990 ;; This function is called by:
  7991 ;;		_calculatePID
  7992 ;;		_strtod
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           	psect	text42
  7997  002AF8                     __ptext42:
  7998                           	opt stack 0
  7999  002AF8                     ___ftdiv:
  8000                           	opt stack 21
  8001                           
  8002                           ;incstack = 0
  8003  002AF8  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  8004  002AFC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  8005  002AFE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  8006  002B00  340A               	rlcf	___ftdiv@f1+1,w,c
  8007  002B02  360F               	rlcf	??___ftdiv& (0+255),f,c
  8008  002B04  E301               	bnc	u245_41
  8009  002B06  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  8010  002B08                     u245_41:
  8011  002B08  500F               	movf	??___ftdiv,w,c
  8012  002B0A  6E16               	movwf	___ftdiv@exp,c
  8013  002B0C  5016               	movf	___ftdiv@exp,w,c
  8014  002B0E  A4D8               	btfss	status,2,c
  8015  002B10  D002               	goto	i2l2677
  8016  002B12  D00E               	goto	i2l2679
  8017  002B14  D061               	goto	i2l950
  8018  002B16                     i2l2677:
  8019  002B16  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  8020  002B1A  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  8021  002B1C  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  8022  002B1E  340D               	rlcf	___ftdiv@f2+1,w,c
  8023  002B20  360F               	rlcf	??___ftdiv& (0+255),f,c
  8024  002B22  E301               	bnc	u247_41
  8025  002B24  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  8026  002B26                     u247_41:
  8027  002B26  500F               	movf	??___ftdiv,w,c
  8028  002B28  6E17               	movwf	___ftdiv@sign,c
  8029  002B2A  5017               	movf	___ftdiv@sign,w,c
  8030  002B2C  A4D8               	btfss	status,2,c
  8031  002B2E  D007               	goto	i2l2683
  8032  002B30                     i2l2679:
  8033  002B30  0E00               	movlw	0
  8034  002B32  6E09               	movwf	?___ftdiv,c
  8035  002B34  0E00               	movlw	0
  8036  002B36  6E0A               	movwf	?___ftdiv+1,c
  8037  002B38  0E00               	movlw	0
  8038  002B3A  6E0B               	movwf	?___ftdiv+2,c
  8039  002B3C  D04D               	goto	i2l950
  8040  002B3E                     i2l2683:
  8041  002B3E  0E00               	movlw	0
  8042  002B40  6E13               	movwf	___ftdiv@f3,c
  8043  002B42  0E00               	movlw	0
  8044  002B44  6E14               	movwf	___ftdiv@f3+1,c
  8045  002B46  0E00               	movlw	0
  8046  002B48  6E15               	movwf	___ftdiv@f3+2,c
  8047  002B4A  5017               	movf	___ftdiv@sign,w,c
  8048  002B4C  0F89               	addlw	137
  8049  002B4E  5E16               	subwf	___ftdiv@exp,f,c
  8050  002B50  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  8051  002B54  500E               	movf	___ftdiv@f2+2,w,c
  8052  002B56  1A17               	xorwf	___ftdiv@sign,f,c
  8053  002B58  0E80               	movlw	128
  8054  002B5A  1617               	andwf	___ftdiv@sign,f,c
  8055  002B5C  8E0A               	bsf	___ftdiv@f1+1,7,c
  8056  002B5E  0EFF               	movlw	255
  8057  002B60  1609               	andwf	___ftdiv@f1,f,c
  8058  002B62  0EFF               	movlw	255
  8059  002B64  160A               	andwf	___ftdiv@f1+1,f,c
  8060  002B66  0E00               	movlw	0
  8061  002B68  160B               	andwf	___ftdiv@f1+2,f,c
  8062  002B6A  8E0D               	bsf	___ftdiv@f2+1,7,c
  8063  002B6C  0EFF               	movlw	255
  8064  002B6E  160C               	andwf	___ftdiv@f2,f,c
  8065  002B70  0EFF               	movlw	255
  8066  002B72  160D               	andwf	___ftdiv@f2+1,f,c
  8067  002B74  0E00               	movlw	0
  8068  002B76  160E               	andwf	___ftdiv@f2+2,f,c
  8069  002B78  0E18               	movlw	24
  8070  002B7A  6E12               	movwf	___ftdiv@cntr,c
  8071  002B7C  D000               	goto	i2l2703
  8072  002B7E                     i2l2703:
  8073  002B7E  90D8               	bcf	status,0,c
  8074  002B80  3613               	rlcf	___ftdiv@f3,f,c
  8075  002B82  3614               	rlcf	___ftdiv@f3+1,f,c
  8076  002B84  3615               	rlcf	___ftdiv@f3+2,f,c
  8077  002B86  500C               	movf	___ftdiv@f2,w,c
  8078  002B88  5C09               	subwf	___ftdiv@f1,w,c
  8079  002B8A  500D               	movf	___ftdiv@f2+1,w,c
  8080  002B8C  580A               	subwfb	___ftdiv@f1+1,w,c
  8081  002B8E  500E               	movf	___ftdiv@f2+2,w,c
  8082  002B90  580B               	subwfb	___ftdiv@f1+2,w,c
  8083  002B92  A0D8               	btfss	status,0,c
  8084  002B94  D007               	goto	i2l953
  8085  002B96  500C               	movf	___ftdiv@f2,w,c
  8086  002B98  5E09               	subwf	___ftdiv@f1,f,c
  8087  002B9A  500D               	movf	___ftdiv@f2+1,w,c
  8088  002B9C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  8089  002B9E  500E               	movf	___ftdiv@f2+2,w,c
  8090  002BA0  5A0B               	subwfb	___ftdiv@f1+2,f,c
  8091  002BA2  8013               	bsf	___ftdiv@f3,0,c
  8092  002BA4                     i2l953:
  8093  002BA4  90D8               	bcf	status,0,c
  8094  002BA6  3609               	rlcf	___ftdiv@f1,f,c
  8095  002BA8  360A               	rlcf	___ftdiv@f1+1,f,c
  8096  002BAA  360B               	rlcf	___ftdiv@f1+2,f,c
  8097  002BAC  2E12               	decfsz	___ftdiv@cntr,f,c
  8098  002BAE  D7E7               	goto	i2l2703
  8099  002BB0  D000               	goto	i2l2713
  8100  002BB2                     i2l2713:
  8101  002BB2  C013  F001         	movff	___ftdiv@f3,i2___ftpack@arg
  8102  002BB6  C014  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
  8103  002BBA  C015  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
  8104  002BBE  C016  F004         	movff	___ftdiv@exp,i2___ftpack@exp
  8105  002BC2  C017  F005         	movff	___ftdiv@sign,i2___ftpack@sign
  8106  002BC6  ECED  F015         	call	i2___ftpack	;wreg free
  8107  002BCA  C001  F009         	movff	?i2___ftpack,?___ftdiv
  8108  002BCE  C002  F00A         	movff	?i2___ftpack+1,?___ftdiv+1
  8109  002BD2  C003  F00B         	movff	?i2___ftpack+2,?___ftdiv+2
  8110  002BD6  D000               	goto	i2l950
  8111  002BD8                     i2l950:
  8112  002BD8  0012               	return		;funcret
  8113  002BDA                     __end_of___ftdiv:
  8114                           	opt stack 0
  8115                           pclatu	equ	0xFFB
  8116                           pclath	equ	0xFFA
  8117                           tblptru	equ	0xFF8
  8118                           tblptrh	equ	0xFF7
  8119                           tblptrl	equ	0xFF6
  8120                           tablat	equ	0xFF5
  8121                           prodh	equ	0xFF4
  8122                           prodl	equ	0xFF3
  8123                           intcon	equ	0xFF2
  8124                           intcon2	equ	0xFF1
  8125                           indf0	equ	0xFEF
  8126                           postinc0	equ	0xFEE
  8127                           fsr0h	equ	0xFEA
  8128                           fsr0l	equ	0xFE9
  8129                           wreg	equ	0xFE8
  8130                           indf1	equ	0xFE7
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function ___altoft *****************
  8141 ;; Defined at:
  8142 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  c               4    8[COMRAM] long 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  sign            1   17[COMRAM] unsigned char 
  8147 ;;  exp             1   16[COMRAM] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  3    8[COMRAM] float 
  8150 ;; Registers used:
  8151 ;;		wreg, status,2, status,0, cstack
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8157 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;Total ram usage:       10 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    1
  8164 ;; This function calls:
  8165 ;;		i2___ftpack
  8166 ;; This function is called by:
  8167 ;;		_strtod
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           	psect	text43
  8172  002E36                     __ptext43:
  8173                           	opt stack 0
  8174  002E36                     ___altoft:
  8175                           	opt stack 20
  8176                           
  8177                           ;incstack = 0
  8178  002E36  0E00               	movlw	0
  8179  002E38  6E12               	movwf	___altoft@sign,c
  8180  002E3A  0E8E               	movlw	142
  8181  002E3C  6E11               	movwf	___altoft@exp,c
  8182  002E3E  AE0C               	btfss	___altoft@c+3,7,c
  8183  002E40  D012               	goto	i2l2665
  8184  002E42  1E0C               	comf	___altoft@c+3,f,c
  8185  002E44  1E0B               	comf	___altoft@c+2,f,c
  8186  002E46  1E0A               	comf	___altoft@c+1,f,c
  8187  002E48  6C09               	negf	___altoft@c,c
  8188  002E4A  0E00               	movlw	0
  8189  002E4C  220A               	addwfc	___altoft@c+1,f,c
  8190  002E4E  220B               	addwfc	___altoft@c+2,f,c
  8191  002E50  220C               	addwfc	___altoft@c+3,f,c
  8192  002E52  0E01               	movlw	1
  8193  002E54  6E12               	movwf	___altoft@sign,c
  8194  002E56  D007               	goto	i2l2665
  8195  002E58                     i2l2663:
  8196  002E58  90D8               	bcf	status,0,c
  8197  002E5A  320C               	rrcf	___altoft@c+3,f,c
  8198  002E5C  320B               	rrcf	___altoft@c+2,f,c
  8199  002E5E  320A               	rrcf	___altoft@c+1,f,c
  8200  002E60  3209               	rrcf	___altoft@c,f,c
  8201  002E62  2A11               	incf	___altoft@exp,f,c
  8202  002E64  D000               	goto	i2l2665
  8203  002E66                     i2l2665:
  8204  002E66  0E00               	movlw	0
  8205  002E68  1409               	andwf	___altoft@c,w,c
  8206  002E6A  6E0D               	movwf	??___altoft& (0+255),c
  8207  002E6C  0E00               	movlw	0
  8208  002E6E  140A               	andwf	___altoft@c+1,w,c
  8209  002E70  6E0E               	movwf	(??___altoft+1)& (0+255),c
  8210  002E72  0E00               	movlw	0
  8211  002E74  140B               	andwf	___altoft@c+2,w,c
  8212  002E76  6E0F               	movwf	(??___altoft+2)& (0+255),c
  8213  002E78  0EFF               	movlw	255
  8214  002E7A  140C               	andwf	___altoft@c+3,w,c
  8215  002E7C  6E10               	movwf	(??___altoft+3)& (0+255),c
  8216  002E7E  500D               	movf	??___altoft,w,c
  8217  002E80  100E               	iorwf	??___altoft+1,w,c
  8218  002E82  100F               	iorwf	??___altoft+2,w,c
  8219  002E84  1010               	iorwf	??___altoft+3,w,c
  8220  002E86  A4D8               	btfss	status,2,c
  8221  002E88  D7E7               	goto	i2l2663
  8222  002E8A  C009  F001         	movff	___altoft@c,i2___ftpack@arg
  8223  002E8E  C00A  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
  8224  002E92  C00B  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
  8225  002E96  C011  F004         	movff	___altoft@exp,i2___ftpack@exp
  8226  002E9A  C012  F005         	movff	___altoft@sign,i2___ftpack@sign
  8227  002E9E  ECED  F015         	call	i2___ftpack	;wreg free
  8228  002EA2  C001  F009         	movff	?i2___ftpack,?___altoft
  8229  002EA6  C002  F00A         	movff	?i2___ftpack+1,?___altoft+1
  8230  002EAA  C003  F00B         	movff	?i2___ftpack+2,?___altoft+2
  8231  002EAE  D000               	goto	i2l585
  8232  002EB0                     i2l585:
  8233  002EB0  0012               	return		;funcret
  8234  002EB2                     __end_of___altoft:
  8235                           	opt stack 0
  8236                           pclatu	equ	0xFFB
  8237                           pclath	equ	0xFFA
  8238                           tblptru	equ	0xFF8
  8239                           tblptrh	equ	0xFF7
  8240                           tblptrl	equ	0xFF6
  8241                           tablat	equ	0xFF5
  8242                           prodh	equ	0xFF4
  8243                           prodl	equ	0xFF3
  8244                           intcon	equ	0xFF2
  8245                           intcon2	equ	0xFF1
  8246                           indf0	equ	0xFEF
  8247                           postinc0	equ	0xFEE
  8248                           fsr0h	equ	0xFEA
  8249                           fsr0l	equ	0xFE9
  8250                           wreg	equ	0xFE8
  8251                           indf1	equ	0xFE7
  8252                           fsr1h	equ	0xFE2
  8253                           fsr1l	equ	0xFE1
  8254                           indf2	equ	0xFDF
  8255                           postinc2	equ	0xFDE
  8256                           postdec2	equ	0xFDD
  8257                           fsr2h	equ	0xFDA
  8258                           fsr2l	equ	0xFD9
  8259                           status	equ	0xFD8
  8260                           
  8261 ;; *************** function i2___ftpack *****************
  8262 ;; Defined at:
  8263 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;  arg             3    0[COMRAM] unsigned um
  8266 ;;  exp             1    3[COMRAM] unsigned char 
  8267 ;;  sign            1    4[COMRAM] unsigned char 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  3    0[COMRAM] float 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2, status,0
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8279 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;Total ram usage:        8 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		___altoft
  8289 ;;		___ftadd
  8290 ;;		___ftdiv
  8291 ;;		___lwtoft
  8292 ;;		i2___ftmul
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text44
  8297  002BDA                     __ptext44:
  8298                           	opt stack 0
  8299  002BDA                     i2___ftpack:
  8300                           	opt stack 21
  8301                           
  8302                           ;incstack = 0
  8303  002BDA  5004               	movf	i2___ftpack@exp,w,c
  8304  002BDC  B4D8               	btfsc	status,2,c
  8305  002BDE  D005               	goto	i2l2583
  8306  002BE0  5001               	movf	i2___ftpack@arg,w,c
  8307  002BE2  1002               	iorwf	i2___ftpack@arg+1,w,c
  8308  002BE4  1003               	iorwf	i2___ftpack@arg+2,w,c
  8309  002BE6  A4D8               	btfss	status,2,c
  8310  002BE8  D00E               	goto	i2l2589
  8311  002BEA                     i2l2583:
  8312  002BEA  0E00               	movlw	0
  8313  002BEC  6E01               	movwf	?i2___ftpack,c
  8314  002BEE  0E00               	movlw	0
  8315  002BF0  6E02               	movwf	?i2___ftpack+1,c
  8316  002BF2  0E00               	movlw	0
  8317  002BF4  6E03               	movwf	?i2___ftpack+2,c
  8318  002BF6  D053               	goto	i2l878
  8319  002BF8  D006               	goto	i2l2589
  8320  002BFA                     i2l2587:
  8321  002BFA  2A04               	incf	i2___ftpack@exp,f,c
  8322  002BFC  90D8               	bcf	status,0,c
  8323  002BFE  3203               	rrcf	i2___ftpack@arg+2,f,c
  8324  002C00  3202               	rrcf	i2___ftpack@arg+1,f,c
  8325  002C02  3201               	rrcf	i2___ftpack@arg,f,c
  8326  002C04  D000               	goto	i2l2589
  8327  002C06                     i2l2589:
  8328  002C06  0E00               	movlw	0
  8329  002C08  1401               	andwf	i2___ftpack@arg,w,c
  8330  002C0A  6E06               	movwf	??i2___ftpack& (0+255),c
  8331  002C0C  0E00               	movlw	0
  8332  002C0E  1402               	andwf	i2___ftpack@arg+1,w,c
  8333  002C10  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8334  002C12  0EFE               	movlw	254
  8335  002C14  1403               	andwf	i2___ftpack@arg+2,w,c
  8336  002C16  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8337  002C18  5006               	movf	??i2___ftpack,w,c
  8338  002C1A  1007               	iorwf	??i2___ftpack+1,w,c
  8339  002C1C  1008               	iorwf	??i2___ftpack+2,w,c
  8340  002C1E  B4D8               	btfsc	status,2,c
  8341  002C20  D00E               	goto	i2l2595
  8342  002C22  D7EB               	goto	i2l2587
  8343  002C24  D00C               	goto	i2l2595
  8344  002C26                     i2l2591:
  8345  002C26  2A04               	incf	i2___ftpack@exp,f,c
  8346  002C28  0E01               	movlw	1
  8347  002C2A  2601               	addwf	i2___ftpack@arg,f,c
  8348  002C2C  0E00               	movlw	0
  8349  002C2E  2202               	addwfc	i2___ftpack@arg+1,f,c
  8350  002C30  0E00               	movlw	0
  8351  002C32  2203               	addwfc	i2___ftpack@arg+2,f,c
  8352  002C34  90D8               	bcf	status,0,c
  8353  002C36  3203               	rrcf	i2___ftpack@arg+2,f,c
  8354  002C38  3202               	rrcf	i2___ftpack@arg+1,f,c
  8355  002C3A  3201               	rrcf	i2___ftpack@arg,f,c
  8356  002C3C  D000               	goto	i2l2595
  8357  002C3E                     i2l2595:
  8358  002C3E  0E00               	movlw	0
  8359  002C40  1401               	andwf	i2___ftpack@arg,w,c
  8360  002C42  6E06               	movwf	??i2___ftpack& (0+255),c
  8361  002C44  0E00               	movlw	0
  8362  002C46  1402               	andwf	i2___ftpack@arg+1,w,c
  8363  002C48  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8364  002C4A  0EFF               	movlw	255
  8365  002C4C  1403               	andwf	i2___ftpack@arg+2,w,c
  8366  002C4E  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8367  002C50  5006               	movf	??i2___ftpack,w,c
  8368  002C52  1007               	iorwf	??i2___ftpack+1,w,c
  8369  002C54  1008               	iorwf	??i2___ftpack+2,w,c
  8370  002C56  B4D8               	btfsc	status,2,c
  8371  002C58  D008               	goto	i2l2599
  8372  002C5A  D7E5               	goto	i2l2591
  8373  002C5C  D006               	goto	i2l2599
  8374  002C5E                     i2l2597:
  8375  002C5E  0604               	decf	i2___ftpack@exp,f,c
  8376  002C60  90D8               	bcf	status,0,c
  8377  002C62  3601               	rlcf	i2___ftpack@arg,f,c
  8378  002C64  3602               	rlcf	i2___ftpack@arg+1,f,c
  8379  002C66  3603               	rlcf	i2___ftpack@arg+2,f,c
  8380  002C68  D000               	goto	i2l2599
  8381  002C6A                     i2l2599:
  8382  002C6A  BE02               	btfsc	i2___ftpack@arg+1,7,c
  8383  002C6C  D004               	goto	i2l889
  8384  002C6E  0E02               	movlw	2
  8385  002C70  6004               	cpfslt	i2___ftpack@exp,c
  8386  002C72  D7F5               	goto	i2l2597
  8387  002C74  D000               	goto	i2l889
  8388  002C76                     i2l889:
  8389  002C76  B004               	btfsc	i2___ftpack@exp,0,c
  8390  002C78  D002               	goto	i2l2605
  8391  002C7A  9E02               	bcf	i2___ftpack@arg+1,7,c
  8392  002C7C  D000               	goto	i2l2605
  8393  002C7E                     i2l2605:
  8394  002C7E  90D8               	bcf	status,0,c
  8395  002C80  3204               	rrcf	i2___ftpack@exp,f,c
  8396  002C82  5004               	movf	i2___ftpack@exp,w,c
  8397  002C84  1203               	iorwf	i2___ftpack@arg+2,f,c
  8398  002C86  5005               	movf	i2___ftpack@sign,w,c
  8399  002C88  B4D8               	btfsc	status,2,c
  8400  002C8A  D002               	goto	i2l2611
  8401  002C8C  8E03               	bsf	i2___ftpack@arg+2,7,c
  8402  002C8E  D000               	goto	i2l2611
  8403  002C90                     i2l2611:
  8404  002C90  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  8405  002C94  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  8406  002C98  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  8407  002C9C  D000               	goto	i2l878
  8408  002C9E                     i2l878:
  8409  002C9E  0012               	return		;funcret
  8410  002CA0                     __end_ofi2___ftpack:
  8411                           	opt stack 0
  8412                           pclatu	equ	0xFFB
  8413                           pclath	equ	0xFFA
  8414                           tblptru	equ	0xFF8
  8415                           tblptrh	equ	0xFF7
  8416                           tblptrl	equ	0xFF6
  8417                           tablat	equ	0xFF5
  8418                           prodh	equ	0xFF4
  8419                           prodl	equ	0xFF3
  8420                           intcon	equ	0xFF2
  8421                           intcon2	equ	0xFF1
  8422                           indf0	equ	0xFEF
  8423                           postinc0	equ	0xFEE
  8424                           fsr0h	equ	0xFEA
  8425                           fsr0l	equ	0xFE9
  8426                           wreg	equ	0xFE8
  8427                           indf1	equ	0xFE7
  8428                           fsr1h	equ	0xFE2
  8429                           fsr1l	equ	0xFE1
  8430                           indf2	equ	0xFDF
  8431                           postinc2	equ	0xFDE
  8432                           postdec2	equ	0xFDD
  8433                           fsr2h	equ	0xFDA
  8434                           fsr2l	equ	0xFD9
  8435                           status	equ	0xFD8
  8436                           
  8437 ;; *************** function _strcmp *****************
  8438 ;; Defined at:
  8439 ;;		line 33 in file "/opt/microchip/xc8/v1.34/sources/common/strcmp.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  8442 ;;		 -> key(5), 
  8443 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  8444 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_25(3), 
  8445 ;;		 -> STR_24(3), STR_23(3), STR_22(4), STR_21(4), 
  8446 ;;		 -> STR_20(4), STR_19(4), STR_18(3), STR_17(3), 
  8447 ;;		 -> STR_16(3), STR_15(3), STR_12(3), STR_11(3), 
  8448 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  8449 ;;		 -> STR_6(4), STR_5(4), 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;  r               1    5[COMRAM] char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  2    0[COMRAM] int 
  8454 ;; Registers used:
  8455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8461 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;Total ram usage:        6 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; This function calls:
  8468 ;;		Nothing
  8469 ;; This function is called by:
  8470 ;;		_keyValue
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           	psect	text45
  8475  003086                     __ptext45:
  8476                           	opt stack 0
  8477  003086                     _strcmp:
  8478                           	opt stack 22
  8479                           
  8480                           ;incstack = 0
  8481  003086  D005               	goto	i2l2829
  8482  003088                     i2l2827:
  8483  003088  4A01               	infsnz	strcmp@s1,f,c
  8484  00308A  2A02               	incf	strcmp@s1+1,f,c
  8485  00308C  4A03               	infsnz	strcmp@s2,f,c
  8486  00308E  2A04               	incf	strcmp@s2+1,f,c
  8487  003090  D000               	goto	i2l2829
  8488  003092                     i2l2829:
  8489  003092  C001  FFD9         	movff	strcmp@s1,fsr2l
  8490  003096  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  8491  00309A  50DF               	movf	indf2,w,c
  8492  00309C  6E05               	movwf	??_strcmp& (0+255),c
  8493  00309E  C003  FFF6         	movff	strcmp@s2,tblptrl
  8494  0030A2  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  8495  0030A6                     	if	0	;tblptru may be non-zero
  8496  0030A6                     	endif
  8497  0030A6                     	if	0	;tblptru may be non-zero
  8498  0030A6                     	endif
  8499  0030A6  0008               	tblrd		*
  8500  0030A8  50F5               	movf	tablat,w,c
  8501  0030AA  0800               	sublw	0
  8502  0030AC  2405               	addwf	??_strcmp,w,c
  8503  0030AE  6E06               	movwf	strcmp@r,c
  8504  0030B0  5006               	movf	strcmp@r,w,c
  8505  0030B2  A4D8               	btfss	status,2,c
  8506  0030B4  D009               	goto	i2l2833
  8507  0030B6  C001  FFD9         	movff	strcmp@s1,fsr2l
  8508  0030BA  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  8509  0030BE  50DF               	movf	indf2,w,c
  8510  0030C0  B4D8               	btfsc	status,2,c
  8511  0030C2  D002               	goto	i2l2833
  8512  0030C4  D7E1               	goto	i2l2827
  8513  0030C6  D000               	goto	i2l2833
  8514  0030C8                     i2l2833:
  8515  0030C8  5006               	movf	strcmp@r,w,c
  8516  0030CA  6E01               	movwf	?_strcmp,c
  8517  0030CC  6A02               	clrf	?_strcmp+1,c
  8518  0030CE  BE01               	btfsc	?_strcmp,7,c
  8519  0030D0  0602               	decf	?_strcmp+1,f,c
  8520  0030D2  D000               	goto	i2l1133
  8521  0030D4                     i2l1133:
  8522  0030D4  0012               	return		;funcret
  8523  0030D6                     __end_of_strcmp:
  8524                           	opt stack 0
  8525                           pclatu	equ	0xFFB
  8526                           pclath	equ	0xFFA
  8527                           tblptru	equ	0xFF8
  8528                           tblptrh	equ	0xFF7
  8529                           tblptrl	equ	0xFF6
  8530                           tablat	equ	0xFF5
  8531                           prodh	equ	0xFF4
  8532                           prodl	equ	0xFF3
  8533                           intcon	equ	0xFF2
  8534                           intcon2	equ	0xFF1
  8535                           indf0	equ	0xFEF
  8536                           postinc0	equ	0xFEE
  8537                           fsr0h	equ	0xFEA
  8538                           fsr0l	equ	0xFE9
  8539                           wreg	equ	0xFE8
  8540                           indf1	equ	0xFE7
  8541                           fsr1h	equ	0xFE2
  8542                           fsr1l	equ	0xFE1
  8543                           indf2	equ	0xFDF
  8544                           postinc2	equ	0xFDE
  8545                           postdec2	equ	0xFDD
  8546                           fsr2h	equ	0xFDA
  8547                           fsr2l	equ	0xFD9
  8548                           status	equ	0xFD8
  8549                           pclatu	equ	0xFFB
  8550                           pclath	equ	0xFFA
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodh	equ	0xFF4
  8556                           prodl	equ	0xFF3
  8557                           intcon	equ	0xFF2
  8558                           intcon2	equ	0xFF1
  8559                           indf0	equ	0xFEF
  8560                           postinc0	equ	0xFEE
  8561                           fsr0h	equ	0xFEA
  8562                           fsr0l	equ	0xFE9
  8563                           wreg	equ	0xFE8
  8564                           indf1	equ	0xFE7
  8565                           fsr1h	equ	0xFE2
  8566                           fsr1l	equ	0xFE1
  8567                           indf2	equ	0xFDF
  8568                           postinc2	equ	0xFDE
  8569                           postdec2	equ	0xFDD
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574                           	psect	rparam
  8575  0000                     pclatu	equ	0xFFB
  8576                           pclath	equ	0xFFA
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           indf0	equ	0xFEF
  8586                           postinc0	equ	0xFEE
  8587                           fsr0h	equ	0xFEA
  8588                           fsr0l	equ	0xFE9
  8589                           wreg	equ	0xFE8
  8590                           indf1	equ	0xFE7
  8591                           fsr1h	equ	0xFE2
  8592                           fsr1l	equ	0xFE1
  8593                           indf2	equ	0xFDF
  8594                           postinc2	equ	0xFDE
  8595                           postdec2	equ	0xFDD
  8596                           fsr2h	equ	0xFDA
  8597                           fsr2l	equ	0xFD9
  8598                           status	equ	0xFD8


Data Sizes:
    Strings     111
    Constant    0
    Data        1
    BSS         74
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     84      95
    BANK0           160     61     134
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[4]), STR_21(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> key(COMRAM[5]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 10
		 -> value(BANK0[10]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), keyValue@str_end(COMRAM[2]), 

    SerTxStr@string	PTR unsigned char  size(2) Largest target is 36
		 -> STR_30(CODE[36]), STR_29(CODE[4]), STR_14(CODE[6]), STR_13(CODE[4]), 
		 -> STR_4(CODE[11]), value(BANK0[10]), STR_3(CODE[6]), key(COMRAM[5]), 

    keyValue@str_end	PTR unsigned char  size(2) Largest target is 10
		 -> value(BANK0[10]), 

    keyValue@str	PTR unsigned char  size(2) Largest target is 30
		 -> received(BANK0[30]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_RCInt
    _TMR0Int->_calculatePID
    _calculatePID->i2___fttol
    i2___fttol->___ftadd
    ___ftadd->i2___ftmul
    _RTD2Angle->i2___ftmul
    ___lwtoft->i2___ftpack
    _ImplementPIDMotion->_abs
    _RCInt->_keyValue
    _keyValue->_strtod
    i2_SerTxStr->i2_SerTx
    _strtod->___ftge
    i2___ftmul->___ftdiv
    ___ftge->___ftadd
    ___ftdiv->i2___ftpack
    ___altoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_LCDBreakDouble
    _SerInit->_SerTxStr
    _SerTxStr->_SerTx
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _LCDBreakDouble->___fttol
    _lcdGoTo->_lcdCommand
    _lcdCommand->_setGPIO
    _lcdChar->_setGPIO
    _setGPIO->_WriteSPI1
    ___fttol->___ftmul
    ___ftmul->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8809
                     _LCDBreakDouble
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     501
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SerInit
 ---------------------------------------------------------------------------------
 (2) _SerInit                                              0     0      0     435
                           _SerTxStr
 ---------------------------------------------------------------------------------
 (3) _SerTxStr                                             2     0      2     435
                                             15 BANK0      2     0      2
                              _SerTx
 ---------------------------------------------------------------------------------
 (4) _SerTx                                                1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDBreakDouble                                       9     6      3    8308
                                             52 BANK0      9     6      3
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
                            _lcdChar
                         _lcdCommand
                            _lcdGoTo
 ---------------------------------------------------------------------------------
 (2) _lcdGoTo                                              1     1      0     709
                                             19 BANK0      1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     687
                                             18 BANK0      1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (2) _lcdChar                                              1     1      0     687
                                             18 BANK0      1     1      0
                        _Delay10TCYx
                            _setGPIO
 ---------------------------------------------------------------------------------
 (4) _setGPIO                                              2     1      1     643
                                             16 BANK0      2     1      1
                          _WriteSPI1
 ---------------------------------------------------------------------------------
 (5) _WriteSPI1                                            2     2      0      23
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1183
                                             14 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1186
                                             14 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     418
                                             37 BANK0     15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3013
                                             22 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1797
                                             14 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0   28116
                                              0 BANK0     14    14      0
                              _RCInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (7) _TMR0Int                                              0     0      0   14942
                 _ImplementPIDMotion
                          _RTD2Angle
                       _calculatePID
 ---------------------------------------------------------------------------------
 (8) _calculatePID                                        27    21      6   12469
                                             65 COMRAM    18    12      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     278
                                             50 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    4993
                                             38 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) _RTD2Angle                                            3     0      3    2104
                                             38 COMRAM     3     0      3
                           ___lwtoft
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) ___lwtoft                                             3     0      3     707
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) _ImplementPIDMotion                                   4     2      2     369
                                              4 COMRAM     4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (9) _abs                                                  4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _RCInt                                                2     2      0   13174
                                             82 COMRAM     2     2      0
                           _keyValue
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (8) _keyValue                                            11     7      4   12995
                                             71 COMRAM    11     7      4
                            _isspace
                             _strcmp
                             _strtod
                            i2_SerTx
                         i2_SerTxStr
 ---------------------------------------------------------------------------------
 (9) i2_SerTxStr                                           2     0      2     275
                                              1 COMRAM     2     0      2
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (8) i2_SerTx                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _strtod                                              12     8      4    8713
                                             59 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6    1311
                                             23 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) _isspace                                             3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) ___lmul                                             12     4      8     322
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3    1325
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6    1928
                                             50 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1387
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4     823
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               6     2      4    2907
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDBreakDouble
     ___ftmul
       ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
     ___lwdiv
     ___lwmod
     _lcdChar
       _Delay10TCYx
       _setGPIO
         _WriteSPI1
     _lcdCommand
       _Delay10TCYx
       _setGPIO
         _WriteSPI1
     _lcdGoTo
       _lcdCommand
         _Delay10TCYx
         _setGPIO
           _WriteSPI1
   _initialize
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SerInit
       _SerTxStr
         _SerTx

 _ISR (ROOT)
   _RCInt
     _keyValue
       _isspace
       _strcmp
       _strtod
         ___altoft
           i2___ftpack
         ___ftdiv
           i2___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftdiv (ARG)
               i2___ftpack
             ___ftneg (ARG)
             i2___ftmul (ARG)
               ___ftdiv (ARG)
                 i2___ftpack
               ___lwtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
           ___ftneg (ARG)
         ___ftneg
         ___lmul
         _isdigit
         _isspace
         i2___ftmul
           ___ftdiv (ARG)
             i2___ftpack
           ___lwtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       i2_SerTx
       i2_SerTxStr
         i2_SerTx
     i2_SerTx
   _TMR0Int
     _ImplementPIDMotion
       _abs
     _RTD2Angle
       ___lwtoft
         i2___ftpack
       i2___ftmul
         ___ftdiv (ARG)
           i2___ftpack
         ___lwtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     _calculatePID
       ___ftadd
         ___ftdiv (ARG)
           i2___ftpack
         ___ftneg (ARG)
         i2___ftmul (ARG)
           ___ftdiv (ARG)
             i2___ftpack
           ___lwtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       ___ftdiv
         i2___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftdiv (ARG)
             i2___ftpack
           ___ftneg (ARG)
           i2___ftmul (ARG)
             ___ftdiv (ARG)
               i2___ftpack
             ___lwtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         ___ftneg (ARG)
       ___ftneg
       i2___ftmul
         ___ftdiv (ARG)
           i2___ftpack
         ___lwtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             i2___ftpack
           ___ftneg (ARG)
           i2___ftmul (ARG)
             ___ftdiv (ARG)
               i2___ftpack
             ___lwtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
         ___ftdiv (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           ___ftdiv (ARG)
             i2___ftpack
           ___lwtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3D      86       5       83.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     54      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5      32        0.0%
DATA                 0      0      E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 14 02:47:55 2015

               ___altoft@exp 0011     __size_of_MotorDriverInit 001C                ___altoft@sign 0012  
                         _Kd 0066                           _Ki 0069                           _Kp 006C  
                 i2___ftpack 2BDA                 ___ftadd@exp1 0032                 ___ftadd@exp2 0031  
               ___ftadd@sign 0030                          l190 320E                          l184 2346  
                        l185 2398                          l371 3464                          l477 3392  
                        l479 338A                          l781 3442                          l774 3458  
                        l786 346E                          l788 3478                          l965 2590  
                        l878 2918                          l889 28E0                          l986 27F8  
                        _PR2 000FCB                          _ISR 0008                          _abs 3322  
                        _err 00DD                          _key 005A            lcdCommand@command 00B2  
                        prod 000FF3                          wreg 000FE8                         ?_ISR 0001  
               ___ftdiv@cntr 0012                   _Delay1TCYx 346A                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         ?_abs 0001                         l1108 2F14  
                       l3003 3432                         l3021 286C                         l3013 2814  
                       l3041 290A                         l3025 288E                         l3017 282A  
                       l1098 2DAE                         l3035 28EC                         l3027 28C0  
                       l3019 283A                         l3029 28D0                         l3503 249A  
                       l3521 250A                         l2625 3448                         l3531 254E  
                       l3603 2D9E                         l3611 2EC6                         l3525 2526  
                       l3517 24EA                         l3613 2ED4                         l3535 256A  
                       l3527 252E                         l3615 2EDE                         l2823 2FAA  
                       l3545 26F2                         l3563 2776                         l3619 2F04  
                       l2819 2F7C                         l3811 3216                         l3803 3200  
                       l3581 27E6                         l3573 27A8                         l3813 321C  
                       l3575 27BA                         l3567 278A                         l3591 2D54  
                       l3497 2460                         l3569 2792                         l3577 27C8  
                       l3593 2D62                         l3809 3212                         l3499 2486  
                       l3595 2D6C                         STR_1 1037                         STR_2 1030  
                       STR_3 103E                         STR_4 1025                         STR_5 104C  
                       STR_6 1054                         STR_7 105E                         STR_8 106A  
                       STR_9 105B                         _AZEL 005F                         u4001 244C  
                       u4021 2476                         u4061 26DE                         u4080 2718  
                       u2640 2F9E                         u2650 2FCC                         u4085 270E  
                       u2647 2F94                         u2657 2FC2                         u4477 3434  
                       u4487 344A                         i2l55 1622              __end_of_PIDInit 31B4  
            __end_of_TMR0Int 316E                         abs@a 0001                         _main 31FA  
               ___ftpack@arg 00AE                 ___ftpack@exp 00B1              __end_of_RTDInit 32CE  
                       fsr0h 000FEA                         fsr1h 000FE2              __end_ofi2_SerTx 3498  
                       indf0 000FEF                         fsr0l 000FE9                         fsr2h 000FDA  
                       indf1 000FE7                         fsr1l 000FE1                         indf2 000FDF  
                       fsr2l 000FD9                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0018                 ___ftmul@cntr 00C3  
               i2___ftmul@f1 0018                 i2___ftmul@f2 001B                 ___param_bank 000010  
               ___ftmul@sign 00C4                 i2___fttol@f1 0033                        ??_ISR 00A0  
                _Delay10TCYx 3444                 ___fttol@exp1 00D3                        ??_abs 0003  
            __end_of_SerInit 3322                 ___fttol@lval 00CF                  _Delay1KTCYx 342E  
          RTD2Angle@RTDAngle 0027                        ?_main 0001              __end_of___ftadd 22AE  
                      STR_10 1067                        STR_11 1058                        STR_20 1054  
                      STR_12 1064                        STR_21 1048                        STR_13 1044  
                      STR_14 103E                        STR_22 1050                        STR_30 1001  
                      STR_23 105E                        STR_15 1061                        STR_24 106A  
                      STR_16 106D                        STR_25 105B                        STR_17 1049  
                      STR_26 1067                        STR_18 1051                        STR_27 1058  
                      STR_19 104C                        STR_28 1064                        STR_29 1044  
            __end_of___ftdiv 2BDA              __end_of___ftneg 33B8              __end_of___ftmul 2592  
                      _T0CON 000FD5              __end_of___fttol 27FA                        _T2CON 000FCA  
                      _T3CON 000FB1              __end_of___lwdiv 2DB8              __end_of___lwmod 2F1E  
                      i2l202 2DF0                        i2l205 2DFC                        i2l251 2598  
                      i2l262 26C4                        i2l371 3492                        i2l531 3340  
                      i2l532 3348                        i2l436 3268                        i2l704 20B8  
                      i2l585 2EB0                        i2l922 2158                        i2l675 1E14  
                      i2l677 1E1C                        i2l933 221A                        i2l950 2BD8  
                      i2l694 20E8                        i2l942 2236                        i2l918 212E  
                      i2l919 22AC                        i2l953 2BA4                        i2l965 2A10  
                      i2l878 2C9E                        i2l959 2D34                        i2l975 33AA  
                      i2l889 2C76                        i2l986 2AF6                        _RCREG 000FAE  
         __size_of_RTD2Angle 0038                        _TMR0H 000FD7                        _TMR0L 000FD6  
                      _SPBRG 000FAF                        _PORTD 000F83                        _RCInt 2592  
                      _PORTH 000F87                        _TRISD 000F95                        _TRISH 000F99  
            __end_of_lcdChar 31FA              __end_of_lcdGoTo 348A          ___lmul@multiplicand 0005  
             __CFG_FCMEN$OFF 000000                        _SerTx 345A              __end_of_setGPIO 33FA  
            __end_of_isdigit 33DA                ___ftpack@sign 00B2                        _value 0096  
            __end_of_isspace 32FA                        tablat 000FF5                        status 000FD8  
         __size_ofi2___ftmul 00F8           __size_ofi2___fttol 00E6                  ?i2_SerTxStr 0002  
                 _ReadRTDpos 000000              __initialization 326A                 __end_of_main 3232  
              i2___ftmul@exp 0021               __CFG_OSC$HSPLL 000000                  ?i2___ftpack 0001  
              _StrippedValue 0072                  keyValue@str 0048                       ??_main 00DD  
              ___fttol@sign1 00CE             __end_of_SerTxStr 2FD4                __activetblptr 000002  
          ??_MotorDriverInit 00AE                       ?_RCInt 0001             ??_LCDBreakDouble 00D7  
                  ??_PIDInit 00AE                       ?_SerTx 0001                    ??_TMR0Int 0054  
           __end_of___altoft 2EB2                    ??_RTDInit 00AF                  ?_Delay1TCYx 0001  
                     _CCPR3L 000FB8                    ??i2_SerTx 0001             __end_of___ftpack 291A  
      __size_of_calculatePID 074A                       i2l1001 33D8                       i2l1006 32F8  
                     i2l1133 30D4                       i2l1125 336E                       i2l3101 2254  
                     i2l3111 2286                       i2l3121 3030                       i2l3203 130C  
                     i2l3125 305C                       i2l3301 17C6                       i2l3053 213C  
                     i2l3133 2A30                       i2l3205 133C                       i2l3151 2A8A  
                     i2l3313 1818                       i2l3081 21BE                       i2l3065 2172  
                     i2l3161 2AB4                       i2l3233 178E                       i2l3217 149E  
                     i2l2611 2C90                       i2l3411 1B4E                       i2l3403 1B0A  
                     i2l3323 1876                       i2l3307 17E4                       i2l3251 2F38  
                     i2l3083 21CA                       i2l3075 219A                       i2l3059 2166  
                     i2l3163 2AC2                       i2l3155 2A9A                       i2l3227 15C0  
                     i2l3219 14F6                       i2l2605 2C7E                       i2l3333 18A8  
                     i2l3325 187A                       i2l3309 17EA                       i2l3093 2202  
                     i2l3085 21D6                       i2l3157 2AA0                       i2l3165 2ACC  
                     i2l3237 17AE                       i2l2703 2B7E                       i2l3431 1BE2  
                     i2l3423 1B9E                       i2l3415 1B5A                       i2l3407 1B16  
                     i2l3351 194E                       i2l3319 1836                       i2l3247 2F26  
                     i2l3095 220E                       i2l3087 21DE                       i2l2713 2BB2  
                     i2l2641 32F0                       i2l3329 188A                       i2l3169 2AE4  
                     i2l3185 10C0                       i2l2651 2FFC                       i2l3443 1C5E  
                     i2l3435 1C1A                       i2l3427 1BD6                       i2l3419 1B92  
                     i2l3371 1A0E                       i2l3363 19CA                       i2l3355 1986  
                     i2l3451 1C7C                       i2l3347 1942                       i2l3339 18D2  
                     i2l3195 121A                       i2l2733 2CD2                       i2l2725 33D0  
                     i2l2901 1E74                       u310_41 20FA                       i2l3197 124A  
                     i2l3189 1158                       i2l2591 2C26                       i2l2583 2BEA  
                     i2l2663 2E58                       i2l2743 2D30                       i2l2647 2FE6  
                     i2l2639 32EA                       i2l2903 1E7A                       i2l3471 1CCC  
                     i2l3455 1CA0                       i2l3447 1C6A                       i2l3439 1C26  
                     i2l3383 1A36                       i2l3375 1A1A                       i2l3367 19D6  
                     i2l3359 1992                       i2l3711 263A                       i2l3703 25F0  
                     i2l2833 30C8                       i2l2665 2E66                       i2l2737 2D04  
                     i2l2761 2952                       i2l2921 1F08                       i2l2841 1D2E  
                     i2l3465 1CC0                       i2l3449 1C76                       i2l3705 2606  
                     i2l2827 3088                       i2l2595 2C3E                       i2l2587 2BFA  
                     i2l2683 2B3E                       i2l2843 1D34                       i2l3483 1CF0  
                     i2l3467 1CC4                       i2l3459 1CA8                       i2l3395 1AC6  
                     i2l3387 1A5E                       i2l3379 1A2A                       i2l2829 3092  
                     i2l2597 2C5E                       i2l2589 2C06                       i2l2677 2B16  
                     i2l2765 2960                       i2l2941 1F64                       i2l2933 1F30  
                     i2l2925 1F10                       i2l2853 1D5C                       i2l3477 1CE4  
                     i2l3733 26AE                       i2l3725 2682                       u311_41 210E  
                     i2l2599 2C6A                       i2l2679 2B30                       i2l2783 29A6  
                     i2l2759 2938                       i2l2951 1FA8                       i2l2863 1D84  
                     i2l2855 1D64                       i2l3479 1CE8                       i2l3399 1AD2  
                     i2l2793 29D4                       i2l2945 1F6C                       i2l2873 1DB2  
                     i2l2857 1D6A                       i2l3489 1D08                       i2l3729 2698  
                     i2l2787 29BC                       i2l2779 2994                       i2l2955 1FD4  
                     i2l2797 29EA                       i2l2789 29C2                       i2l2973 200E  
                     i2l2949 1F9A                       i2l2893 1E46                       i2l2869 1D9C  
                     i2l2983 2070                       i2l2887 1E22                       i2l2993 20A8  
                     i2l2977 203C                       i2l2969 2000                       i2l2897 1E5E  
                     i2l2979 2044                       i2l2899 1E6E                       i2l3699 25E6  
                     i2l2999 20DA                       u245_41 2B08                       u334_41 2A22  
                     u247_41 2B26                       _RCREG1 000FAE                       u257_41 292A  
           __end_of___lwtoft 3370                       u259_41 2948                       _RCSTA1 000FAB  
                     _TXREG1 000FAD                       _RCflag 0077                       _TXSTA1 000FAC  
          __end_of_RTD2Angle 326A                       SerTx@c 00AE                    ??_SerInit 00B1  
                     ___ftge 2CA0                       ___lmul 2FD4                    ??___ftadd 002D  
             keyValue@length 004A                    ??___ftdiv 000F                    ??___ftneg 0004  
                  ??___ftmul 00BC                    ??___fttol 00C9             __end_of_keyValue 1D14  
                  ??___lwdiv 00B2                    ??___lwmod 00B2             i2SerTxStr@string 0002  
                     _intErr 00E0                       clear_0 3270                       clear_1 327C  
                  ??_lcdChar 00B2                    ??_lcdGoTo 00B3                       _strcmp 3086  
                     _strtod 1D14        ___ftmul@f3_as_product 00C0  __size_of_ImplementPIDMotion 005C  
               __pdataCOMRAM 005F                    ??_setGPIO 00B1                 _calculatePID 1072  
                  ??_isdigit 0001            _calculatePID$2603 0051            _calculatePID$2605 004B  
          _calculatePID$2641 004E            __end_ofi2___ftmul 2A12            __end_ofi2___fttol 2AF8  
               __mediumconst 0000                    ??_isspace 0001                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8          __size_ofi2_SerTxStr 0058  
                 _StartAngle 0055                   __accesstop 0060      __end_of__initialization 3294  
                 ___altoft@c 0009           __size_of_WriteSPI1 0024                   ___ftadd@f1 0027  
                 ___ftadd@f2 002A          __size_ofi2___ftpack 00C6                   ___ftge@ff1 0033  
                 ___ftge@ff2 0036                ___rparam_used 000001                   ___ftdiv@f1 0009  
                 ___ftdiv@f2 000C                   ___ftdiv@f3 0013                   ___ftneg@f1 0001  
             i2___ftpack@arg 0001                __end_of_RCInt 26C8               i2___ftpack@exp 0004  
                 ___ftmul@f1 00B6                   ___ftmul@f2 00B9                   ___fttol@f1 00C5  
             __pcstackCOMRAM 0001                __end_of_SerTx 346A               i2___ftmul@cntr 0025  
             i2___ftmul@sign 0026          __size_of_Delay1TCYx 0010               i2___fttol@exp1 0041  
                 ___lwtoft@c 0009               i2___fttol@lval 003D                      ??_RCInt 0053  
                    ??_SerTx 00AE                 keyValue@flag 0050                   __pbssBANK0 0060  
           WriteSPI1@TempVar 00AE                    ?_SerTxStr 00AF                      ?___ftge 0033  
                    ?___lmul 0001                 ?_Delay10TCYx 0001                   _lcdCommand 30D6  
                    _CCP3CON 000FB7                 ?_Delay1KTCYx 0001                    ?___altoft 0009  
                    _BAUDCON 000F7E               ___lmul@product 0009                    ?___ftpack 00AE  
                    ?_strcmp 0001            __end_of_WriteSPI1 3394                    ?___lwtoft 0009  
                    ?_strtod 003C                      _PIDInit 316E          LCDBreakDouble@temp1 00D9  
        LCDBreakDouble@temp2 00DB                _PIDEnableFlag 0058                      _SSP1BUF 000FC9  
                    _TMR0Int 3122   ImplementPIDMotion@PIDValue 0005                      _RTDInit 329E  
             SerTxStr@string 00AF                      i2_SerTx 348A                    ?_keyValue 0048  
               ??i2_SerTxStr 0004                   ??_SerTxStr 00B1                      __Hparam 0000  
                    _SerInit 32FA                      __Lparam 0000              _MotorDriverInit 33FA  
            __size_of___ftge 0096              __size_of___lmul 005A                      ___ftadd 20EA  
                    ___ftdiv 2AF8                      ___ftneg 3394                      ___ftmul 2436  
                    ___fttol 26C8                      ___lwdiv 2D36                      ___lwmod 2EB2  
               __psmallconst 1000                   ??___altoft 000D                      __pcinit 326A  
               ??i2___ftpack 0006                   ??___ftpack 00B3              Delay10TCYx@unit 00AE  
                    _lcdChar 31B4      i2___ftmul@f3_as_product 0022                      __ramtop 1000  
                 _initialize 3416                      _lcdGoTo 347A                      __ptext0 31FA  
                    __ptext1 3416                      __ptext2 32FA                      __ptext3 2F7A  
                    __ptext4 345A                      __ptext5 329E                      __ptext6 346A  
                    __ptext7 342E                      __ptext8 316E                      __ptext9 33FA  
                 ??___lwtoft 000C              __size_of_strcmp 0050                 __size_of_ISR 2E2E  
            __size_of_strtod 03D6                 __size_of_abs 0028                      _setGPIO 33DA  
                    _isdigit 33B8              keyValue@str_end 004E                      _isspace 32CE  
                    _prevErr 00E3           __end_ofi2_SerTxStr 3086                 setGPIO@value 00B0  
               ??_Delay1TCYx 00AE               __pintcode_body 2DB8         end_of_initialization 3294  
                 ??_keyValue 004C                __Lmediumconst 0000                      int_func 2DB8  
                 lcdGoTo@pos 00B3           __end_ofi2___ftpack 2CA0                      postdec2 000FDD  
                ?_lcdCommand 0001                   _motorInput 0075                    _RTD2Angle 3232  
                    postinc0 000FEE                      postinc2 000FDE        LCDBreakDouble@tempDub 00D7  
                    strcmp@r 0006           __end_of_Delay1TCYx 347A                      strtod@s 003C  
                  _PORTAbits 000F80                    _PORTEbits 000F84                    _PORTJbits 000F88  
                  _TRISAbits 000F92                    _TRISBbits 000F93                    _TRISEbits 000F96  
                  _TRISGbits 000F98                    _TRISJbits 000F9A                    i2___ftmul 291A  
                  i2___fttol 2A12      __end_of_MotorDriverInit 3416                  ___ftdiv@exp 0016  
                _CCP3CONbits 000FB7              i2___ftpack@sign 0005                  ___ftmul@exp 00BF  
                _StrippedKey 0059                   ?_RTD2Angle 0027               __end_of___ftge 2D36  
             __end_of___lmul 302E         __size_of_Delay10TCYx 0016                __pidataCOMRAM 3498  
 __end_of_ImplementPIDMotion 2F7A                  ?_initialize 0001         __size_of_Delay1KTCYx 0016  
             __end_of_strcmp 30D6                lcdChar@letter 00B2               __end_of_strtod 20EA  
        start_initialization 326A              _CurrentVelocity 0063                 _CurrentAngle 0060  
                __end_of_ISR 2E36                  __end_of_abs 334A              i2___fttol@sign1 003C  
                 ?i2___ftmul 0018                   ?i2___fttol 0033          __size_of_lcdCommand 004C  
    __size_of_LCDBreakDouble 0188         calculatePID@setpoint 0045                     ??___ftge 0039  
                   ??___lmul 0009            __size_of_SerTxStr 005A                     ??_strcmp 0005  
                   ??_strtod 0040            __size_of___altoft 007C            __size_of___ftpack 0120  
                __pbssCOMRAM 0055            __size_of___lwtoft 0026                __pcstackBANK0 00A0  
                   ?_PIDInit 0001                    _WriteSPI1 3370                     ?_TMR0Int 0001  
         calculatePID@derErr 0048                 _isdigit$2323 0002                     ?_RTDInit 0001  
                   ?i2_SerTx 0001              Delay1KTCYx@unit 00AE             ?_MotorDriverInit 0001  
        __size_of_initialize 0018                    __pnvBANK0 00DD            __size_of_keyValue 0558  
          WriteSPI1@data_out 00AF                     ?_SerInit 0001             ___lwdiv@dividend 00AE  
                  __pintcode 0008                  ??_RTD2Angle 002A                     ?___ftadd 0027  
                   ?___ftdiv 0009                     ?___ftneg 0001                     ?___ftmul 00B6  
                   ?___fttol 00C5                     ?___lwdiv 00AE                     ?___lwmod 00AE  
         LCDBreakDouble@dubs 00D4                     ?_lcdChar 0001                     ?_lcdGoTo 0001  
                __smallconst 1000                     ?_setGPIO 00B0                     ?_isdigit 0001  
             __size_of_RCInt 0136                     ?_isspace 0001                   ?_WriteSPI1 0001  
             __size_of_SerTx 0010             ___lwdiv@quotient 00B2                  ??i2___ftmul 001E  
                ??i2___fttol 0037                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
                   i2u331_40 3052                     i2u331_47 3048                     i2u332_40 307E  
                   i2u332_47 3074                     i2u360_40 2F34                     i2u336_40 2A4E  
                   i2u336_45 2A46                     _PIR1bits 000F9E               setGPIO@address 00B1  
                   _RCONbits 000FD0                 ??_lcdCommand 00B2                     _SSP1CON1 000FC6  
                strtod@flags 0042                  strtod@expon 0043                     i2SerTx@c 0001  
              ?_calculatePID 0042                 _isspace$2326 0002             __size_of_PIDInit 0046  
          ___lmul@multiplier 0001                  _INTCON2bits 000FF1             __size_of_TMR0Int 004C  
           __size_of_RTDInit 0030             __size_ofi2_SerTx 000E           __end_of_lcdCommand 3122  
             _LCDBreakDouble 22AE                    keyValue@x 0052                    keyValue@y 0051  
                   _SetAngle 006F                     _SerTxStr 2F7A                     __Hrparam 0000  
                   __Lrparam 0000             __size_of_SerInit 0028             __size_of___ftadd 01C4  
           __size_of___ftdiv 00E2             __size_of___ftneg 0024                     ___altoft 2E36  
           __size_of___ftmul 015C             __size_of___fttol 0132             __size_of___lwdiv 0082  
           __size_of___lwmod 006C                 ??_initialize 00B1                     ___ftpack 27FA  
          calculatePID@angle 0042             __size_of_lcdChar 0046               ??_calculatePID 0048  
                   ___lwtoft 334A             __size_of_lcdGoTo 0010             __size_of_setGPIO 0020  
           __size_of_isdigit 0022                  ??_WriteSPI1 00AE              ___lwdiv@divisor 00B0  
           __size_of_isspace 002C              ___lwdiv@counter 00B4                 RCInt@counter 0054  
                   __ptext10 22AE                     __ptext11 347A                     __ptext20 2436  
                   __ptext12 30D6                     __ptext21 27FA                     __ptext13 31B4  
                   __ptext30 3322                     __ptext14 33DA                     __ptext31 2592  
                   __ptext23 3122                     __ptext15 3370                     __ptext40 3394  
                   __ptext32 17BC                     __ptext24 1072                     __ptext16 3444  
                   __ptext41 2CA0                     __ptext33 302E                     __ptext25 2A12  
                   __ptext17 2EB2                     __ptext42 2AF8                     __ptext34 348A  
                   __ptext26 20EA                     __ptext18 2D36                     __ptext43 2E36  
                   __ptext35 1D14                     __ptext27 3232                     __ptext19 26C8  
                   __ptext44 2BDA                     __ptext36 291A                     __ptext28 334A  
                   __ptext45 3086                     __ptext37 32CE                     __ptext29 2F1E  
                   __ptext38 33B8                     __ptext39 2FD4                 _SSP1CON1bits 000FC6  
     __end_of_LCDBreakDouble 2436           _ImplementPIDMotion 2F1E                     _keyValue 17BC  
              __size_of_main 0038               Delay1TCYx@unit 00AE                     _received 0078  
        ?_ImplementPIDMotion 0005           __end_of_initialize 342E                ??_Delay10TCYx 00AE  
                 strtod@eexp 0041                ??_Delay1KTCYx 00AE         ??_ImplementPIDMotion 0007  
                 _INTCONbits 000FF2                     isdigit@c 0003              ?_LCDBreakDouble 00D4  
                   intlevel2 0000             ___lwmod@dividend 00AE                     isspace@c 0003  
                  strtod@res 003E          __end_of_Delay10TCYx 345A                     strcmp@s1 0001  
                   strcmp@s2 0003              ___lwmod@divisor 00B0          __end_of_Delay1KTCYx 3444  
            ___lwmod@counter 00B2                     strtod@_u 0044         __end_of_calculatePID 17BC  
                 i2_SerTxStr 302E  
