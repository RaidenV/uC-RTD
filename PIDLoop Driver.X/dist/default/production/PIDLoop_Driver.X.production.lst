

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 13 03:23:11 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    52  0000                     
    53 ;; Function _ReadRTDpos is unused but had its address taken
    54  0000                     
    55                           	psect	idataCOMRAM
    56  002D6E                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _AZEL
    60  002D6E  01                 	db	1
    61                           
    62                           	psect	nvBANK0
    63  0000B1                     __pnvBANK0:
    64                           	opt stack 0
    65  0000B1                     _err:
    66                           	opt stack 0
    67  0000B1                     	ds	3
    68  0000B4                     _intErr:
    69                           	opt stack 0
    70  0000B4                     	ds	3
    71  0000B7                     _prevErr:
    72                           	opt stack 0
    73  0000B7                     	ds	3
    74  0000                     _BAUDCON	set	3966
    75  0000                     _CCP3CON	set	4023
    76  0000                     _CCP3CONbits	set	4023
    77  0000                     _CCPR3L	set	4024
    78  0000                     _INTCON2bits	set	4081
    79  0000                     _INTCONbits	set	4082
    80  0000                     _IPR1bits	set	3999
    81  0000                     _PIE1bits	set	3997
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PORTAbits	set	3968
    84  0000                     _PORTD	set	3971
    85  0000                     _PORTEbits	set	3972
    86  0000                     _PORTH	set	3975
    87  0000                     _PORTJbits	set	3976
    88  0000                     _PR2	set	4043
    89  0000                     _RCONbits	set	4048
    90  0000                     _RCREG	set	4014
    91  0000                     _RCREG1	set	4014
    92  0000                     _RCSTA1	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _T0CON	set	4053
    95  0000                     _T2CON	set	4042
    96  0000                     _T3CON	set	4017
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISD	set	3989
   102  0000                     _TRISEbits	set	3990
   103  0000                     _TRISGbits	set	3992
   104  0000                     _TRISH	set	3993
   105  0000                     _TRISJbits	set	3994
   106  0000                     _TXREG1	set	4013
   107  0000                     _TXSTA1	set	4012
   108                           
   109                           	psect	smallconst
   110  001000                     __psmallconst:
   111                           	opt stack 0
   112  001000  00                 	db	0
   113  001001                     STR_28:
   114  001001  57                 	db	87	;'W'
   115  001002  65                 	db	101	;'e'
   116  001003  6C                 	db	108	;'l'
   117  001004  63                 	db	99	;'c'
   118  001005  6F                 	db	111	;'o'
   119  001006  6D                 	db	109	;'m'
   120  001007  65                 	db	101	;'e'
   121  001008  20                 	db	32
   122  001009  74                 	db	116	;'t'
   123  00100A  6F                 	db	111	;'o'
   124  00100B  20                 	db	32
   125  00100C  74                 	db	116	;'t'
   126  00100D  68                 	db	104	;'h'
   127  00100E  65                 	db	101	;'e'
   128  00100F  20                 	db	32
   129  001010  77                 	db	119	;'w'
   130  001011  6F                 	db	111	;'o'
   131  001012  72                 	db	114	;'r'
   132  001013  6C                 	db	108	;'l'
   133  001014  64                 	db	100	;'d'
   134  001015  20                 	db	32
   135  001016  6F                 	db	111	;'o'
   136  001017  66                 	db	102	;'f'
   137  001018  20                 	db	32
   138  001019  74                 	db	116	;'t'
   139  00101A  6F                 	db	111	;'o'
   140  00101B  6D                 	db	109	;'m'
   141  00101C  6F                 	db	111	;'o'
   142  00101D  72                 	db	114	;'r'
   143  00101E  72                 	db	114	;'r'
   144  00101F  6F                 	db	111	;'o'
   145  001020  77                 	db	119	;'w'
   146  001021  21                 	db	33
   147  001022  21                 	db	33
   148  001023  21                 	db	33
   149  001024  00                 	db	0
   150  001025                     STR_2:
   151  001025  20                 	db	32
   152  001026  20                 	db	32
   153  001027  20                 	db	32
   154  001028  56                 	db	86	;'V'
   155  001029  61                 	db	97	;'a'
   156  00102A  6C                 	db	108	;'l'
   157  00102B  75                 	db	117	;'u'
   158  00102C  65                 	db	101	;'e'
   159  00102D  3A                 	db	58	;':'
   160  00102E  20                 	db	32
   161  00102F  00                 	db	0
   162  001030                     STR_1:
   163  001030  4B                 	db	75	;'K'
   164  001031  65                 	db	101	;'e'
   165  001032  79                 	db	121	;'y'
   166  001033  3A                 	db	58	;':'
   167  001034  20                 	db	32
   168  001035  00                 	db	0
   169  001036                     STR_11:
   170  001036  3F                 	db	63	;'?'
   171  001037  3F                 	db	63	;'?'
   172  001038  3F                 	db	63	;'?'
   173  001039  00                 	db	0
   174  00103A                     STR_19:
   175  00103A  56                 	db	86	;'V'
   176  00103B  45                 	db	69	;'E'
   177  00103C  4C                 	db	76	;'L'
   178  00103D  00                 	db	0
   179  00103E                     STR_3:
   180  00103E  50                 	db	80	;'P'
   181  00103F  4F                 	db	79	;'O'
   182  001040  53                 	db	83	;'S'
   183  001041  00                 	db	0
   184  001042                     STR_20:
   185  001042  76                 	db	118	;'v'
   186  001043  65                 	db	101	;'e'
   187  001044  6C                 	db	108	;'l'
   188  001045  00                 	db	0
   189  001046                     STR_4:
   190  001046  70                 	db	112	;'p'
   191  001047  6F                 	db	111	;'o'
   192  001048  73                 	db	115	;'s'
   193  001049  00                 	db	0
   194  00104A                     STR_9:
   195  00104A  4B                 	db	75	;'K'
   196  00104B  44                 	db	68	;'D'
   197  00104C  00                 	db	0
   198  00104D                     STR_7:
   199  00104D  4B                 	db	75	;'K'
   200  00104E  49                 	db	73	;'I'
   201  00104F  00                 	db	0
   202  001050                     STR_5:
   203  001050  4B                 	db	75	;'K'
   204  001051  50                 	db	80	;'P'
   205  001052  00                 	db	0
   206  001053                     STR_13:
   207  001053  41                 	db	65	;'A'
   208  001054  5A                 	db	90	;'Z'
   209  001055  00                 	db	0
   210  001056                     STR_10:
   211  001056  6B                 	db	107	;'k'
   212  001057  64                 	db	100	;'d'
   213  001058  00                 	db	0
   214  001059                     STR_8:
   215  001059  6B                 	db	107	;'k'
   216  00105A  69                 	db	105	;'i'
   217  00105B  00                 	db	0
   218  00105C                     STR_6:
   219  00105C  6B                 	db	107	;'k'
   220  00105D  70                 	db	112	;'p'
   221  00105E  00                 	db	0
   222  00105F                     STR_14:
   223  00105F  61                 	db	97	;'a'
   224  001060  7A                 	db	122	;'z'
   225  001061  00                 	db	0
   226  0000                     
   227                           ; #config settings
   228  001062  00                 	db	0	; dummy byte at the end
   229  0000                     
   230                           	psect	cinit
   231  002B6E                     __pcinit:
   232                           	opt stack 0
   233  002B6E                     start_initialization:
   234                           	opt stack 0
   235  002B6E                     __initialization:
   236                           	opt stack 0
   237                           
   238                           ; Clear objects allocated to BANK0 (64 bytes)
   239  002B6E  EE00  F060         	lfsr	0,__pbssBANK0
   240  002B72  0E40               	movlw	64
   241  002B74                     clear_0:
   242  002B74  6AEE               	clrf	postinc0,c
   243  002B76  06E8               	decf	wreg,f,c
   244  002B78  E1FD               	bnz	clear_0
   245                           
   246                           ; Clear objects allocated to COMRAM (10 bytes)
   247  002B7A  EE00  F055         	lfsr	0,__pbssCOMRAM
   248  002B7E  0E0A               	movlw	10
   249  002B80                     clear_1:
   250  002B80  6AEE               	clrf	postinc0,c
   251  002B82  06E8               	decf	wreg,f,c
   252  002B84  E1FD               	bnz	clear_1
   253                           
   254                           ; Initialize objects allocated to COMRAM (1 bytes)
   255                           ; load TBLPTR registers with __pidataCOMRAM
   256  002B86  0E6E               	movlw	low __pidataCOMRAM
   257  002B88  6EF6               	movwf	tblptrl,c
   258  002B8A  0E2D               	movlw	high __pidataCOMRAM
   259  002B8C  6EF7               	movwf	tblptrh,c
   260  002B8E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   261  002B90  6EF8               	movwf	tblptru,c
   262  002B92  0009               	tblrd		*+	;fetch initializer
   263  002B94  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   264  002B98                     end_of_initialization:
   265                           	opt stack 0
   266  002B98                     __end_of__initialization:
   267                           	opt stack 0
   268  002B98  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  002B9A  6EF8               	movwf	tblptru,c
   270  002B9C  0100               	movlb	0
   271  002B9E  EF27  F016         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	bssCOMRAM
   280  000055                     __pbssCOMRAM:
   281                           	opt stack 0
   282  000055                     _StartAngle:
   283                           	opt stack 0
   284  000055                     	ds	3
   285  000058                     _PIDEnableFlag:
   286                           	opt stack 0
   287  000058                     	ds	1
   288  000059                     _StrippedKey:
   289                           	opt stack 0
   290  000059                     	ds	1
   291  00005A                     _key:
   292                           	opt stack 0
   293  00005A                     	ds	5
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           
   301                           	psect	dataCOMRAM
   302  00005F                     __pdataCOMRAM:
   303                           	opt stack 0
   304  00005F                     _AZEL:
   305                           	opt stack 0
   306  00005F                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	bssBANK0
   315  000060                     __pbssBANK0:
   316                           	opt stack 0
   317  000060                     _CurrentAngle:
   318                           	opt stack 0
   319  000060                     	ds	3
   320  000063                     _CurrentVelocity:
   321                           	opt stack 0
   322  000063                     	ds	3
   323  000066                     _Kd:
   324                           	opt stack 0
   325  000066                     	ds	3
   326  000069                     _Ki:
   327                           	opt stack 0
   328  000069                     	ds	3
   329  00006C                     _Kp:
   330                           	opt stack 0
   331  00006C                     	ds	3
   332  00006F                     _SetAngle:
   333                           	opt stack 0
   334  00006F                     	ds	3
   335  000072                     _StrippedValue:
   336                           	opt stack 0
   337  000072                     	ds	3
   338  000075                     _motorInput:
   339                           	opt stack 0
   340  000075                     	ds	2
   341  000077                     _RCflag:
   342                           	opt stack 0
   343  000077                     	ds	1
   344  000078                     _received:
   345                           	opt stack 0
   346  000078                     	ds	30
   347  000096                     _value:
   348                           	opt stack 0
   349  000096                     	ds	10
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000A0                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000A0                     ??_ISR:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000A0                     	ds	14
   364  0000AE                     SerTx@c:
   365                           	opt stack 0
   366  0000AE                     Delay10TCYx@unit:
   367                           	opt stack 0
   368  0000AE                     Delay1KTCYx@unit:
   369                           	opt stack 0
   370  0000AE                     Delay1TCYx@unit:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0xE
   374  0000AE                     	ds	1
   375  0000AF                     SerTxStr@string:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0xF
   379  0000AF                     	ds	2
   380  0000B1                     tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           
   387                           ; 0 bytes @ 0x11
   388                           
   389                           	psect	cstackCOMRAM
   390  000001                     __pcstackCOMRAM:
   391                           	opt stack 0
   392  000001                     ??_isspace:
   393  000001                     ??_isdigit:
   394  000001                     ?_abs:
   395                           	opt stack 0
   396  000001                     ?_strcmp:
   397                           	opt stack 0
   398  000001                     ?___ftpack:
   399                           	opt stack 0
   400  000001                     ?___ftneg:
   401                           	opt stack 0
   402  000001                     ?___lmul:
   403                           	opt stack 0
   404  000001                     i2SerTx@c:
   405                           	opt stack 0
   406  000001                     abs@a:
   407                           	opt stack 0
   408  000001                     strcmp@s1:
   409                           	opt stack 0
   410  000001                     ___ftpack@arg:
   411                           	opt stack 0
   412  000001                     ___ftneg@f1:
   413                           	opt stack 0
   414  000001                     ___lmul@multiplier:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x0
   418  000001                     	ds	1
   419  000002                     _isdigit$1724:
   420                           	opt stack 0
   421  000002                     _isspace$1727:
   422                           	opt stack 0
   423  000002                     i2SerTxStr@string:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x1
   427  000002                     	ds	1
   428  000003                     ??_abs:
   429  000003                     isdigit@c:
   430                           	opt stack 0
   431  000003                     isspace@c:
   432                           	opt stack 0
   433  000003                     strcmp@s2:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437  000003                     	ds	1
   438  000004                     ___ftpack@exp:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x3
   442  000004                     	ds	1
   443  000005                     ??_strcmp:
   444  000005                     ___ftpack@sign:
   445                           	opt stack 0
   446  000005                     ImplementPIDMotion@PIDValue:
   447                           	opt stack 0
   448  000005                     ___lmul@multiplicand:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x4
   452  000005                     	ds	1
   453  000006                     ??___ftpack:
   454  000006                     strcmp@r:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x5
   458  000006                     	ds	1
   459  000007                     ??_ImplementPIDMotion:
   460                           
   461                           ; 0 bytes @ 0x6
   462  000007                     	ds	2
   463  000009                     ?___ftdiv:
   464                           	opt stack 0
   465  000009                     ?___altoft:
   466                           	opt stack 0
   467  000009                     ?___lwtoft:
   468                           	opt stack 0
   469  000009                     ___lwtoft@c:
   470                           	opt stack 0
   471  000009                     ___ftdiv@f1:
   472                           	opt stack 0
   473  000009                     ___lmul@product:
   474                           	opt stack 0
   475  000009                     ___altoft@c:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x8
   479  000009                     	ds	3
   480  00000C                     ___ftdiv@f2:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0xB
   484  00000C                     	ds	1
   485  00000D                     ??___altoft:
   486                           
   487                           ; 0 bytes @ 0xC
   488  00000D                     	ds	2
   489  00000F                     ??___ftdiv:
   490                           
   491                           ; 0 bytes @ 0xE
   492  00000F                     	ds	2
   493  000011                     ___altoft@exp:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x10
   497  000011                     	ds	1
   498  000012                     ___altoft@sign:
   499                           	opt stack 0
   500  000012                     ___ftdiv@cntr:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x11
   504  000012                     	ds	1
   505  000013                     ___ftdiv@f3:
   506                           	opt stack 0
   507                           
   508                           ; 3 bytes @ 0x12
   509  000013                     	ds	3
   510  000016                     ___ftdiv@exp:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x15
   514  000016                     	ds	1
   515  000017                     ___ftdiv@sign:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x16
   519  000017                     	ds	1
   520  000018                     ?___ftmul:
   521                           	opt stack 0
   522  000018                     ___ftmul@f1:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x17
   526  000018                     	ds	3
   527  00001B                     ___ftmul@f2:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x1A
   531  00001B                     	ds	3
   532  00001E                     ??___ftmul:
   533                           
   534                           ; 0 bytes @ 0x1D
   535  00001E                     	ds	3
   536  000021                     ___ftmul@exp:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x20
   540  000021                     	ds	1
   541  000022                     ___ftmul@f3_as_product:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x21
   545  000022                     	ds	3
   546  000025                     ___ftmul@cntr:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x24
   550  000025                     	ds	1
   551  000026                     ___ftmul@sign:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x25
   555  000026                     	ds	1
   556  000027                     ?_RTD2Angle:
   557                           	opt stack 0
   558  000027                     ?___ftadd:
   559                           	opt stack 0
   560  000027                     RTD2Angle@RTDAngle:
   561                           	opt stack 0
   562  000027                     ___ftadd@f1:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x26
   566  000027                     	ds	3
   567  00002A                     ___ftadd@f2:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x29
   571  00002A                     	ds	3
   572  00002D                     ??___ftadd:
   573                           
   574                           ; 0 bytes @ 0x2C
   575  00002D                     	ds	3
   576  000030                     ___ftadd@sign:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x2F
   580  000030                     	ds	1
   581  000031                     ___ftadd@exp2:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x30
   585  000031                     	ds	1
   586  000032                     ___ftadd@exp1:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x31
   590  000032                     	ds	1
   591  000033                     ?___fttol:
   592                           	opt stack 0
   593  000033                     ___ftge@ff1:
   594                           	opt stack 0
   595  000033                     ___fttol@f1:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x32
   599  000033                     	ds	3
   600  000036                     ___ftge@ff2:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x35
   604  000036                     	ds	1
   605  000037                     ??___fttol:
   606                           
   607                           ; 0 bytes @ 0x36
   608  000037                     	ds	2
   609  000039                     ??___ftge:
   610                           
   611                           ; 0 bytes @ 0x38
   612  000039                     	ds	3
   613  00003C                     ?_strtod:
   614                           	opt stack 0
   615  00003C                     ___fttol@sign1:
   616                           	opt stack 0
   617  00003C                     strtod@s:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x3B
   621  00003C                     	ds	1
   622  00003D                     ___fttol@lval:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x3C
   626  00003D                     	ds	1
   627  00003E                     strtod@res:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x3D
   631  00003E                     	ds	2
   632  000040                     ??_strtod:
   633                           
   634                           ; 0 bytes @ 0x3F
   635  000040                     	ds	1
   636  000041                     strtod@eexp:
   637                           	opt stack 0
   638  000041                     ___fttol@exp1:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x40
   642  000041                     	ds	1
   643  000042                     strtod@flags:
   644                           	opt stack 0
   645  000042                     calculatePID@angle:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x41
   649  000042                     	ds	1
   650  000043                     strtod@expon:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x42
   654  000043                     	ds	1
   655  000044                     strtod@_u:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x43
   659  000044                     	ds	1
   660  000045                     calculatePID@setpoint:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x44
   664  000045                     	ds	3
   665  000048                     keyValue@str:
   666                           	opt stack 0
   667  000048                     calculatePID@derErr:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x47
   671  000048                     	ds	2
   672  00004A                     keyValue@length:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x49
   676  00004A                     	ds	1
   677  00004B                     _calculatePID$1985:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x4A
   681  00004B                     	ds	1
   682  00004C                     ??_keyValue:
   683                           
   684                           ; 0 bytes @ 0x4B
   685  00004C                     	ds	2
   686  00004E                     keyValue@str_end:
   687                           	opt stack 0
   688  00004E                     _calculatePID$1986:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x4D
   692  00004E                     	ds	2
   693  000050                     keyValue@flag:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x4F
   697  000050                     	ds	1
   698  000051                     keyValue@y:
   699                           	opt stack 0
   700  000051                     _calculatePID$1984:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x50
   704  000051                     	ds	1
   705  000052                     keyValue@x:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x51
   709  000052                     	ds	1
   710  000053                     
   711                           ; 0 bytes @ 0x52
   712  000053                     	ds	1
   713  000054                     RCInt@counter:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x53
   717  000054                     	ds	1
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           
   725 ;;
   726 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   727 ;;
   728 ;; *************** function _main *****************
   729 ;; Defined at:
   730 ;;		line 15 in file "PIDLoop.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;		None               void
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;Total ram usage:        0 bytes
   749 ;; Hardware stack levels required when called:   10
   750 ;; This function calls:
   751 ;;		_initialize
   752 ;; This function is called by:
   753 ;;		Startup code after reset
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text0
   758  002C4E                     __ptext0:
   759                           	opt stack 0
   760  002C4E                     _main:
   761                           	opt stack 21
   762                           
   763                           ;PIDLoop.c: 17: initialize();
   764                           
   765                           ;incstack = 0
   766  002C4E  EC7E  F016         	call	_initialize	;wreg free
   767  002C52  D000               	goto	l3127
   768  002C54                     l3127:
   769                           
   770                           ;PIDLoop.c: 20: {
   771                           ;PIDLoop.c: 21: if ((PIDEnableFlag & 0x02) == 0x02)
   772  002C54  A258               	btfss	_PIDEnableFlag,1,c
   773  002C56  D005               	goto	l146
   774                           
   775                           ;PIDLoop.c: 22: {
   776                           ;PIDLoop.c: 23: TMR0H = 0xDB;
   777  002C58  0EDB               	movlw	219
   778  002C5A  6ED7               	movwf	4055,c	;volatile
   779                           
   780                           ;PIDLoop.c: 24: TMR0L = 0x60;
   781  002C5C  0E60               	movlw	96
   782  002C5E  6ED6               	movwf	4054,c	;volatile
   783  002C60  D002               	goto	l3133
   784  002C62                     l146:
   785                           
   786                           ;PIDLoop.c: 27: else if((PIDEnableFlag & 0x01) == 0x01)
   787  002C62  A058               	btfss	_PIDEnableFlag,0,c
   788  002C64  D002               	goto	l3135
   789  002C66                     l3133:
   790                           
   791                           ;PIDLoop.c: 28: INTCONbits.TMR0IE = 1;
   792  002C66  8AF2               	bsf	intcon,5,c	;volatile
   793  002C68  D7F5               	goto	l3127
   794  002C6A                     l3135:
   795                           
   796                           ;PIDLoop.c: 29: else
   797                           ;PIDLoop.c: 30: PIDEnableFlag = 0;
   798  002C6A  0E00               	movlw	0
   799  002C6C  6E58               	movwf	_PIDEnableFlag,c
   800  002C6E  D7F2               	goto	l3127
   801  002C70  EF0C  F000         	goto	start
   802  002C74                     __end_of_main:
   803                           	opt stack 0
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           intcon	equ	0xFF2
   809                           postinc0	equ	0xFEE
   810                           wreg	equ	0xFE8
   811                           
   812 ;; *************** function _initialize *****************
   813 ;; Defined at:
   814 ;;		line 34 in file "PIDLoop.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;		None               void
   821 ;; Registers used:
   822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    9
   835 ;; This function calls:
   836 ;;		_MotorDriverInit
   837 ;;		_PIDInit
   838 ;;		_RTDInit
   839 ;;		_SerInit
   840 ;; This function is called by:
   841 ;;		_main
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text1
   846  002CFC                     __ptext1:
   847                           	opt stack 0
   848  002CFC                     _initialize:
   849                           	opt stack 21
   850                           
   851                           ;PIDLoop.c: 36: PIDInit();
   852                           
   853                           ;incstack = 0
   854  002CFC  EC78  F015         	call	_PIDInit	;wreg free
   855                           
   856                           ;PIDLoop.c: 37: MotorDriverInit();
   857  002D00  EC70  F016         	call	_MotorDriverInit	;wreg free
   858                           
   859                           ;PIDLoop.c: 38: RTDInit();
   860  002D04  ECD1  F015         	call	_RTDInit	;wreg free
   861                           
   862                           ;PIDLoop.c: 39: SerInit();
   863  002D08  ECFF  F015         	call	_SerInit	;wreg free
   864                           
   865                           ;PIDLoop.c: 41: INTCONbits.GIE = 1;
   866  002D0C  8EF2               	bsf	intcon,7,c	;volatile
   867                           
   868                           ;PIDLoop.c: 42: INTCONbits.PEIE = 1;
   869  002D0E  8CF2               	bsf	intcon,6,c	;volatile
   870                           
   871                           ;PIDLoop.c: 43: RCONbits.IPEN = 1;
   872  002D10  8ED0               	bsf	4048,7,c	;volatile
   873  002D12  0012               	return		;funcret
   874  002D14                     __end_of_initialize:
   875                           	opt stack 0
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           intcon	equ	0xFF2
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           
   884 ;; *************** function _SerInit *****************
   885 ;; Defined at:
   886 ;;		line 19 in file "SerComm.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;		None               void
   893 ;; Registers used:
   894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;Total ram usage:        0 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; Hardware stack levels required when called:    8
   907 ;; This function calls:
   908 ;;		_SerTxStr
   909 ;; This function is called by:
   910 ;;		_initialize
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text2
   915  002BFE                     __ptext2:
   916                           	opt stack 0
   917  002BFE                     _SerInit:
   918                           	opt stack 21
   919                           
   920                           ;SerComm.c: 26: TXSTA1 = 0x24;
   921                           
   922                           ;incstack = 0
   923  002BFE  0E24               	movlw	36
   924  002C00  6EAC               	movwf	4012,c	;volatile
   925                           
   926                           ;SerComm.c: 27: RCSTA1 = 0x90;
   927  002C02  0E90               	movlw	144
   928  002C04  6EAB               	movwf	4011,c	;volatile
   929                           
   930                           ;SerComm.c: 28: BAUDCON = 0x00;
   931  002C06  0E00               	movlw	0
   932  002C08  6E7E               	movwf	3966,c	;volatile
   933                           
   934                           ;SerComm.c: 29: SPBRG = 21;
   935  002C0A  0E15               	movlw	21
   936  002C0C  6EAF               	movwf	4015,c	;volatile
   937                           
   938                           ;SerComm.c: 31: RCONbits.IPEN = 1;
   939  002C0E  8ED0               	bsf	4048,7,c	;volatile
   940                           
   941                           ;SerComm.c: 32: IPR1bits.RCIP = 0;
   942  002C10  9A9F               	bcf	3999,5,c	;volatile
   943                           
   944                           ;SerComm.c: 33: PIE1bits.RC1IE = 1;
   945  002C12  8A9D               	bsf	3997,5,c	;volatile
   946                           
   947                           ;SerComm.c: 35: SerTxStr("Welcome to the world of tomorrow!!!");
   948  002C14  0E01               	movlw	low STR_28
   949  002C16  0100               	movlb	0	; () banked
   950  002C18  6FAF               	movwf	SerTxStr@string& (0+255),b
   951  002C1A  0E10               	movlw	high STR_28
   952  002C1C  0100               	movlb	0	; () banked
   953  002C1E  6FB0               	movwf	(SerTxStr@string+1)& (0+255),b
   954  002C20  ECA4  F014         	call	_SerTxStr	;wreg free
   955  002C24  0012               	return		;funcret
   956  002C26                     __end_of_SerInit:
   957                           	opt stack 0
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           intcon	equ	0xFF2
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           
   966 ;; *************** function _SerTxStr *****************
   967 ;; Defined at:
   968 ;;		line 50 in file "SerComm.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  string          2   15[BANK0 ] PTR unsigned char 
   971 ;;		 -> STR_28(36), STR_27(4), STR_12(6), STR_11(4), 
   972 ;;		 -> STR_2(11), value(10), STR_1(6), key(5), 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;		None               void
   977 ;; Registers used:
   978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;Total ram usage:        2 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    7
   991 ;; This function calls:
   992 ;;		_SerTx
   993 ;; This function is called by:
   994 ;;		_SerInit
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text3
   999  002948                     __ptext3:
  1000                           	opt stack 0
  1001  002948                     _SerTxStr:
  1002                           	opt stack 21
  1003                           
  1004                           ;SerComm.c: 52: while (*string)
  1005                           
  1006                           ;incstack = 0
  1007  002948  D017               	goto	l2411
  1008  00294A                     l2407:
  1009                           
  1010                           ;SerComm.c: 53: SerTx(*string++);
  1011  00294A  C0AF  FFF6         	movff	SerTxStr@string,tblptrl
  1012  00294E  C0B0  FFF7         	movff	SerTxStr@string+1,tblptrh
  1013  002952  0E00               	movlw	low (__smallconst shr (0+16))
  1014  002954  6EF8               	movwf	tblptru,c
  1015  002956  0E0F               	movlw	(high __ramtop+-1)
  1016  002958  64F7               	cpfsgt	tblptrh,c
  1017  00295A  D003               	bra	u2297
  1018  00295C  0008               	tblrd		*
  1019  00295E  50F5               	movf	tablat,w,c
  1020  002960  D005               	bra	u2290
  1021  002962                     u2297:
  1022  002962  CFF6 FFE9          	movff	tblptrl,fsr0l
  1023  002966  CFF7 FFEA          	movff	tblptrh,fsr0h
  1024  00296A  50EF               	movf	indf0,w,c
  1025  00296C                     u2290:
  1026  00296C  ECA0  F016         	call	_SerTx
  1027  002970  0100               	movlb	0	; () banked
  1028  002972  4BAF               	infsnz	SerTxStr@string& (0+255),f,b
  1029  002974  2BB0               	incf	(SerTxStr@string+1)& (0+255),f,b
  1030  002976  D000               	goto	l2411
  1031  002978                     l2411:
  1032  002978  C0AF  FFF6         	movff	SerTxStr@string,tblptrl
  1033  00297C  C0B0  FFF7         	movff	SerTxStr@string+1,tblptrh
  1034  002980  0E00               	movlw	low (__smallconst shr (0+16))
  1035  002982  6EF8               	movwf	tblptru,c
  1036  002984  0E0F               	movlw	(high __ramtop+-1)
  1037  002986  64F7               	cpfsgt	tblptrh,c
  1038  002988  D003               	bra	u2307
  1039  00298A  0008               	tblrd		*
  1040  00298C  50F5               	movf	tablat,w,c
  1041  00298E  D005               	bra	u2300
  1042  002990                     u2307:
  1043  002990  CFF6 FFE9          	movff	tblptrl,fsr0l
  1044  002994  CFF7 FFEA          	movff	tblptrh,fsr0h
  1045  002998  50EF               	movf	indf0,w,c
  1046  00299A                     u2300:
  1047  00299A  0900               	iorlw	0
  1048  00299C  A4D8               	btfss	status,2,c
  1049  00299E  D7D5               	goto	l2407
  1050  0029A0  0012               	return		;funcret
  1051  0029A2                     __end_of_SerTxStr:
  1052                           	opt stack 0
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           tblptrl	equ	0xFF6
  1056                           tablat	equ	0xFF5
  1057                           intcon	equ	0xFF2
  1058                           indf0	equ	0xFEF
  1059                           postinc0	equ	0xFEE
  1060                           fsr0h	equ	0xFEA
  1061                           fsr0l	equ	0xFE9
  1062                           wreg	equ	0xFE8
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _SerTx *****************
  1066 ;; Defined at:
  1067 ;;		line 41 in file "SerComm.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  c               1    wreg     unsigned char 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  c               1   14[BANK0 ] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;		None               void
  1074 ;; Registers used:
  1075 ;;		wreg
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;Total ram usage:        1 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    6
  1088 ;; This function calls:
  1089 ;;		Nothing
  1090 ;; This function is called by:
  1091 ;;		_SerTxStr
  1092 ;;		_breakDouble
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text4
  1097  002D40                     __ptext4:
  1098                           	opt stack 0
  1099  002D40                     _SerTx:
  1100                           	opt stack 21
  1101                           
  1102                           ;incstack = 0
  1103                           ;SerTx@c stored from wreg
  1104  002D40  0100               	movlb	0	; () banked
  1105  002D42  6FAE               	movwf	SerTx@c& (0+255),b
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;SerComm.c: 43: TXREG1 = c;
  1109  002D44  C0AE  FFAD         	movff	SerTx@c,4013	;volatile
  1110                           
  1111                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  1112  002D48  D000               	goto	l327
  1113  002D4A                     l327:
  1114  002D4A  A89E               	btfss	3998,4,c	;volatile
  1115  002D4C  D7FE               	goto	l327
  1116  002D4E  0012               	return		;funcret
  1117  002D50                     __end_of_SerTx:
  1118                           	opt stack 0
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           intcon	equ	0xFF2
  1124                           indf0	equ	0xFEF
  1125                           postinc0	equ	0xFEE
  1126                           fsr0h	equ	0xFEA
  1127                           fsr0l	equ	0xFE9
  1128                           wreg	equ	0xFE8
  1129                           status	equ	0xFD8
  1130                           
  1131 ;; *************** function _RTDInit *****************
  1132 ;; Defined at:
  1133 ;;		line 3 in file "ResolverToDigital.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;		None               void
  1140 ;; Registers used:
  1141 ;;		wreg, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;Total ram usage:        0 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    7
  1154 ;; This function calls:
  1155 ;;		_Delay10TCYx
  1156 ;;		_Delay1KTCYx
  1157 ;;		_Delay1TCYx
  1158 ;; This function is called by:
  1159 ;;		_initialize
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text5
  1164  002BA2                     __ptext5:
  1165                           	opt stack 0
  1166  002BA2                     _RTDInit:
  1167                           	opt stack 22
  1168                           
  1169                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1170                           
  1171                           ;incstack = 0
  1172  002BA2  6895               	setf	3989,c	;volatile
  1173                           
  1174                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1175  002BA4  6899               	setf	3993,c	;volatile
  1176                           
  1177                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1178  002BA6  9096               	bcf	3990,0,c	;volatile
  1179                           
  1180                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1181  002BA8  9296               	bcf	3990,1,c	;volatile
  1182                           
  1183                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1184  002BAA  9496               	bcf	3990,2,c	;volatile
  1185                           
  1186                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1187  002BAC  909A               	bcf	3994,0,c	;volatile
  1188                           
  1189                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1190  002BAE  8A96               	bsf	3990,5,c	;volatile
  1191                           
  1192                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1193  002BB0  8C96               	bsf	3990,6,c	;volatile
  1194                           
  1195                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1196  002BB2  8E96               	bsf	3990,7,c	;volatile
  1197                           
  1198                           ;ResolverToDigital.c: 17: PORTJbits.RJ0 = 0;
  1199  002BB4  9088               	bcf	3976,0,c	;volatile
  1200                           
  1201                           ;ResolverToDigital.c: 18: Delay10TCYx(10);
  1202  002BB6  0E0A               	movlw	10
  1203  002BB8  EC95  F016         	call	_Delay10TCYx
  1204                           
  1205                           ;ResolverToDigital.c: 19: PORTJbits.RJ0 = 1;
  1206  002BBC  8088               	bsf	3976,0,c	;volatile
  1207                           
  1208                           ;ResolverToDigital.c: 20: Delay1KTCYx(20);
  1209  002BBE  0E14               	movlw	20
  1210  002BC0  EC8A  F016         	call	_Delay1KTCYx
  1211                           
  1212                           ;ResolverToDigital.c: 21: PORTEbits.RE0 = 0;
  1213  002BC4  9084               	bcf	3972,0,c	;volatile
  1214                           
  1215                           ;ResolverToDigital.c: 22: Delay1TCYx(1);
  1216  002BC6  0E01               	movlw	1
  1217  002BC8  ECA8  F016         	call	_Delay1TCYx
  1218                           
  1219                           ;ResolverToDigital.c: 23: PORTEbits.RE0 = 1;
  1220  002BCC  8084               	bsf	3972,0,c	;volatile
  1221                           
  1222                           ;ResolverToDigital.c: 25: PORTEbits.RE2 = 0;
  1223  002BCE  9484               	bcf	3972,2,c	;volatile
  1224  002BD0  0012               	return		;funcret
  1225  002BD2                     __end_of_RTDInit:
  1226                           	opt stack 0
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           intcon	equ	0xFF2
  1232                           indf0	equ	0xFEF
  1233                           postinc0	equ	0xFEE
  1234                           fsr0h	equ	0xFEA
  1235                           fsr0l	equ	0xFE9
  1236                           wreg	equ	0xFE8
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _Delay1TCYx *****************
  1240 ;; Defined at:
  1241 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  unit            1    wreg     unsigned char 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  unit            1   14[BANK0 ] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;		None               void
  1248 ;; Registers used:
  1249 ;;		wreg
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;Total ram usage:        1 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    6
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_RTDInit
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text6
  1270  002D50                     __ptext6:
  1271                           	opt stack 0
  1272  002D50                     _Delay1TCYx:
  1273                           	opt stack 22
  1274                           
  1275                           ;incstack = 0
  1276                           ;Delay1TCYx@unit stored from wreg
  1277  002D50  0100               	movlb	0	; () banked
  1278  002D52  6FAE               	movwf	Delay1TCYx@unit& (0+255),b
  1279  002D54                     l700:
  1280                           
  1281                           ; BSR set to: 0
  1282  002D54  F000               	nop	
  1283  002D56  0100               	movlb	0	; () banked
  1284  002D58  2FAE               	decfsz	Delay1TCYx@unit& (0+255),f,b
  1285  002D5A  D7FC               	goto	l700
  1286  002D5C  D000               	goto	l702
  1287  002D5E                     l702:
  1288                           
  1289                           ; BSR set to: 0
  1290  002D5E  0012               	return		;funcret
  1291  002D60                     __end_of_Delay1TCYx:
  1292                           	opt stack 0
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           intcon	equ	0xFF2
  1298                           indf0	equ	0xFEF
  1299                           postinc0	equ	0xFEE
  1300                           fsr0h	equ	0xFEA
  1301                           fsr0l	equ	0xFE9
  1302                           wreg	equ	0xFE8
  1303                           status	equ	0xFD8
  1304                           
  1305 ;; *************** function _Delay1KTCYx *****************
  1306 ;; Defined at:
  1307 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  unit            1    wreg     unsigned char 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  unit            1   14[BANK0 ] unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;		None               void
  1314 ;; Registers used:
  1315 ;;		wreg
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;Total ram usage:        1 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    6
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_RTDInit
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text7
  1336  002D14                     __ptext7:
  1337                           	opt stack 0
  1338  002D14                     _Delay1KTCYx:
  1339                           	opt stack 22
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;incstack = 0
  1343                           ;Delay1KTCYx@unit stored from wreg
  1344  002D14  0100               	movlb	0	; () banked
  1345  002D16  6FAE               	movwf	Delay1KTCYx@unit& (0+255),b
  1346  002D18                     
  1347                           ; BSR set to: 0
  1348  002D18  0EFA               	movlw	250
  1349  002D1A                     u3817:
  1350  002D1A  F000               	nop	
  1351  002D1C  2EE8               	decfsz	wreg,f,c
  1352  002D1E  D7FD               	goto	u3817
  1353  002D20  0100               	movlb	0	; () banked
  1354  002D22  2FAE               	decfsz	Delay1KTCYx@unit& (0+255),f,b
  1355  002D24  D7F9               	goto	l2595
  1356  002D26  D000               	goto	l695
  1357  002D28                     l695:
  1358                           
  1359                           ; BSR set to: 0
  1360  002D28  0012               	return		;funcret
  1361  002D2A                     __end_of_Delay1KTCYx:
  1362                           	opt stack 0
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           intcon	equ	0xFF2
  1368                           indf0	equ	0xFEF
  1369                           postinc0	equ	0xFEE
  1370                           fsr0h	equ	0xFEA
  1371                           fsr0l	equ	0xFE9
  1372                           wreg	equ	0xFE8
  1373                           status	equ	0xFD8
  1374                           
  1375 ;; *************** function _Delay10TCYx *****************
  1376 ;; Defined at:
  1377 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  unit            1    wreg     unsigned char 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  unit            1   14[BANK0 ] unsigned char 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;		None               void
  1384 ;; Registers used:
  1385 ;;		wreg
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;Total ram usage:        1 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    6
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_RTDInit
  1402 ;;		_ReadRTDpos
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text8
  1407  002D2A                     __ptext8:
  1408                           	opt stack 0
  1409  002D2A                     _Delay10TCYx:
  1410                           	opt stack 22
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;incstack = 0
  1414                           ;Delay10TCYx@unit stored from wreg
  1415  002D2A  0100               	movlb	0	; () banked
  1416  002D2C  6FAE               	movwf	Delay10TCYx@unit& (0+255),b
  1417  002D2E                     
  1418                           ; BSR set to: 0
  1419  002D2E  0E03               	movlw	3
  1420  002D30                     u3827:
  1421  002D30  2EE8               	decfsz	wreg,f,c
  1422  002D32  D7FE               	goto	u3827
  1423  002D34  F000               	nop	
  1424  002D36  0100               	movlb	0	; () banked
  1425  002D38  2FAE               	decfsz	Delay10TCYx@unit& (0+255),f,b
  1426  002D3A  D7F9               	goto	l2591
  1427  002D3C  D000               	goto	l688
  1428  002D3E                     l688:
  1429                           
  1430                           ; BSR set to: 0
  1431  002D3E  0012               	return		;funcret
  1432  002D40                     __end_of_Delay10TCYx:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           intcon	equ	0xFF2
  1439                           indf0	equ	0xFEF
  1440                           postinc0	equ	0xFEE
  1441                           fsr0h	equ	0xFEA
  1442                           fsr0l	equ	0xFE9
  1443                           wreg	equ	0xFE8
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function _PIDInit *****************
  1447 ;; Defined at:
  1448 ;;		line 15 in file "PID.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;		None
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;		None               void
  1455 ;; Registers used:
  1456 ;;		wreg, status,2
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;Total ram usage:        0 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    6
  1469 ;; This function calls:
  1470 ;;		Nothing
  1471 ;; This function is called by:
  1472 ;;		_initialize
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text9
  1477  002AF0                     __ptext9:
  1478                           	opt stack 0
  1479  002AF0                     _PIDInit:
  1480                           	opt stack 23
  1481                           
  1482                           ;PID.c: 18: err = 0;
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;incstack = 0
  1486  002AF0  0E00               	movlw	0
  1487  002AF2  0100               	movlb	0	; () banked
  1488  002AF4  6FB1               	movwf	_err& (0+255),b
  1489  002AF6  0E00               	movlw	0
  1490  002AF8  0100               	movlb	0	; () banked
  1491  002AFA  6FB2               	movwf	(_err+1)& (0+255),b
  1492  002AFC  0E00               	movlw	0
  1493  002AFE  0100               	movlb	0	; () banked
  1494  002B00  6FB3               	movwf	(_err+2)& (0+255),b
  1495                           
  1496                           ;PID.c: 19: prevErr = 0;
  1497  002B02  0E00               	movlw	0
  1498  002B04  0100               	movlb	0	; () banked
  1499  002B06  6FB7               	movwf	_prevErr& (0+255),b
  1500  002B08  0E00               	movlw	0
  1501  002B0A  0100               	movlb	0	; () banked
  1502  002B0C  6FB8               	movwf	(_prevErr+1)& (0+255),b
  1503  002B0E  0E00               	movlw	0
  1504  002B10  0100               	movlb	0	; () banked
  1505  002B12  6FB9               	movwf	(_prevErr+2)& (0+255),b
  1506                           
  1507                           ;PID.c: 20: intErr = 0;
  1508  002B14  0E00               	movlw	0
  1509  002B16  0100               	movlb	0	; () banked
  1510  002B18  6FB4               	movwf	_intErr& (0+255),b
  1511  002B1A  0E00               	movlw	0
  1512  002B1C  0100               	movlb	0	; () banked
  1513  002B1E  6FB5               	movwf	(_intErr+1)& (0+255),b
  1514  002B20  0E00               	movlw	0
  1515  002B22  0100               	movlb	0	; () banked
  1516  002B24  6FB6               	movwf	(_intErr+2)& (0+255),b
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;PID.c: 23: INTCON2bits.TMR0IP = 1;
  1520  002B26  84F1               	bsf	intcon2,2,c	;volatile
  1521                           
  1522                           ;PID.c: 24: T0CON = 0x84;
  1523  002B28  0E84               	movlw	132
  1524  002B2A  6ED5               	movwf	4053,c	;volatile
  1525                           
  1526                           ;PID.c: 25: TMR0H = 0xDB;
  1527  002B2C  0EDB               	movlw	219
  1528  002B2E  6ED7               	movwf	4055,c	;volatile
  1529                           
  1530                           ;PID.c: 26: TMR0L = 0x60;
  1531  002B30  0E60               	movlw	96
  1532  002B32  6ED6               	movwf	4054,c	;volatile
  1533                           
  1534                           ; BSR set to: 0
  1535  002B34  0012               	return		;funcret
  1536  002B36                     __end_of_PIDInit:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           intcon	equ	0xFF2
  1543                           intcon2	equ	0xFF1
  1544                           indf0	equ	0xFEF
  1545                           postinc0	equ	0xFEE
  1546                           fsr0h	equ	0xFEA
  1547                           fsr0l	equ	0xFE9
  1548                           wreg	equ	0xFE8
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _MotorDriverInit *****************
  1552 ;; Defined at:
  1553 ;;		line 5 in file "MotorControl.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;		None               void
  1560 ;; Registers used:
  1561 ;;		wreg, status,2
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;Total ram usage:        0 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    6
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_initialize
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text10
  1582  002CE0                     __ptext10:
  1583                           	opt stack 0
  1584  002CE0                     _MotorDriverInit:
  1585                           	opt stack 23
  1586                           
  1587                           ;MotorControl.c: 7: TRISGbits.RG0 = 0;
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;incstack = 0
  1591  002CE0  9098               	bcf	3992,0,c	;volatile
  1592                           
  1593                           ;MotorControl.c: 8: TRISGbits.RG3 = 0;
  1594  002CE2  9698               	bcf	3992,3,c	;volatile
  1595                           
  1596                           ;MotorControl.c: 9: TRISEbits.RE3 = 0;
  1597  002CE4  9696               	bcf	3990,3,c	;volatile
  1598                           
  1599                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  1600  002CE6  9896               	bcf	3990,4,c	;volatile
  1601                           
  1602                           ;MotorControl.c: 11: TRISBbits.RB0 = 1;
  1603  002CE8  8093               	bsf	3987,0,c	;volatile
  1604                           
  1605                           ;MotorControl.c: 13: TRISAbits.RA4 = 0;
  1606  002CEA  9892               	bcf	3986,4,c	;volatile
  1607                           
  1608                           ;MotorControl.c: 15: CCP3CON = 0x4C;
  1609  002CEC  0E4C               	movlw	76
  1610  002CEE  6EB7               	movwf	4023,c	;volatile
  1611                           
  1612                           ;MotorControl.c: 16: PR2 = 0xFF;
  1613  002CF0  68CB               	setf	4043,c	;volatile
  1614                           
  1615                           ;MotorControl.c: 17: T3CON = 0x00;
  1616  002CF2  0E00               	movlw	0
  1617  002CF4  6EB1               	movwf	4017,c	;volatile
  1618                           
  1619                           ;MotorControl.c: 18: T2CON = 0x04;
  1620  002CF6  0E04               	movlw	4
  1621  002CF8  6ECA               	movwf	4042,c	;volatile
  1622  002CFA  0012               	return		;funcret
  1623  002CFC                     __end_of_MotorDriverInit:
  1624                           	opt stack 0
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           intcon	equ	0xFF2
  1630                           intcon2	equ	0xFF1
  1631                           indf0	equ	0xFEF
  1632                           postinc0	equ	0xFEE
  1633                           fsr0h	equ	0xFEA
  1634                           fsr0l	equ	0xFE9
  1635                           wreg	equ	0xFE8
  1636                           status	equ	0xFD8
  1637                           
  1638 ;; *************** function _ISR *****************
  1639 ;; Defined at:
  1640 ;;		line 46 in file "PIDLoop.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;		None
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;		None               void
  1647 ;; Registers used:
  1648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;Total ram usage:       14 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    5
  1661 ;; This function calls:
  1662 ;;		_RCInt
  1663 ;;		_TMR0Int
  1664 ;; This function is called by:
  1665 ;;		Interrupt level 2
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	intcode
  1670  000008                     __pintcode:
  1671                           	opt stack 0
  1672  000008                     _ISR:
  1673                           	opt stack 21
  1674                           
  1675                           ;incstack = 0
  1676  000008  CFFA F0A0          	movff	pclath,??_ISR
  1677  00000C  CFFB F0A1          	movff	pclatu,??_ISR+1
  1678  000010  CFE9 F0A2          	movff	fsr0l,??_ISR+2
  1679  000014  EDF9  F013         	call	int_func,f	;refresh shadow registers
  1680                           pclatu	equ	0xFFB
  1681                           pclath	equ	0xFFA
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           intcon	equ	0xFF2
  1687                           intcon2	equ	0xFF1
  1688                           indf0	equ	0xFEF
  1689                           postinc0	equ	0xFEE
  1690                           fsr0h	equ	0xFEA
  1691                           fsr0l	equ	0xFE9
  1692                           wreg	equ	0xFE8
  1693                           status	equ	0xFD8
  1694                           
  1695                           	psect	intcode_body
  1696  0027F2                     __pintcode_body:
  1697                           	opt stack 21
  1698  0027F2                     int_func:
  1699                           	opt stack 21
  1700  0027F2  0006               	pop		; remove dummy address from shadow register refresh
  1701  0027F4  CFEA F0A3          	movff	fsr0h,??_ISR+3
  1702  0027F8  CFE1 F0A4          	movff	fsr1l,??_ISR+4
  1703  0027FC  CFE2 F0A5          	movff	fsr1h,??_ISR+5
  1704  002800  CFD9 F0A6          	movff	fsr2l,??_ISR+6
  1705  002804  CFDA F0A7          	movff	fsr2h,??_ISR+7
  1706  002808  CFF3 F0A8          	movff	prodl,??_ISR+8
  1707  00280C  CFF4 F0A9          	movff	prodh,??_ISR+9
  1708  002810  CFF6 F0AA          	movff	tblptrl,??_ISR+10
  1709  002814  CFF7 F0AB          	movff	tblptrh,??_ISR+11
  1710  002818  CFF8 F0AC          	movff	tblptru,??_ISR+12
  1711  00281C  CFF5 F0AD          	movff	tablat,??_ISR+13
  1712                           
  1713                           ;PIDLoop.c: 48: if (PIR1bits.RC1IF == 1)
  1714  002820  AA9E               	btfss	3998,5,c	;volatile
  1715  002822  D003               	goto	i2l158
  1716                           
  1717                           ;PIDLoop.c: 49: RCInt();
  1718  002824  EC50  F011         	call	_RCInt	;wreg free
  1719  002828  D006               	goto	i2l161
  1720  00282A                     i2l158:
  1721                           
  1722                           ;PIDLoop.c: 50: else if ((INTCONbits.TMR0IF == 1) && (INTCONbits.TMR0IE == 1))
  1723  00282A  B4F2               	btfsc	intcon,2,c	;volatile
  1724  00282C  AAF2               	btfss	intcon,5,c	;volatile
  1725  00282E  D003               	goto	i2l161
  1726                           
  1727                           ;PIDLoop.c: 51: TMR0Int();
  1728  002830  EC52  F015         	call	_TMR0Int	;wreg free
  1729  002834  D000               	goto	i2l161
  1730  002836                     i2l161:
  1731  002836  C0AD  FFF5         	movff	??_ISR+13,tablat
  1732  00283A  C0AC  FFF8         	movff	??_ISR+12,tblptru
  1733  00283E  C0AB  FFF7         	movff	??_ISR+11,tblptrh
  1734  002842  C0AA  FFF6         	movff	??_ISR+10,tblptrl
  1735  002846  C0A9  FFF4         	movff	??_ISR+9,prodh
  1736  00284A  C0A8  FFF3         	movff	??_ISR+8,prodl
  1737  00284E  C0A7  FFDA         	movff	??_ISR+7,fsr2h
  1738  002852  C0A6  FFD9         	movff	??_ISR+6,fsr2l
  1739  002856  C0A5  FFE2         	movff	??_ISR+5,fsr1h
  1740  00285A  C0A4  FFE1         	movff	??_ISR+4,fsr1l
  1741  00285E  C0A3  FFEA         	movff	??_ISR+3,fsr0h
  1742  002862  C0A2  FFE9         	movff	??_ISR+2,fsr0l
  1743  002866  C0A1  FFFB         	movff	??_ISR+1,pclatu
  1744  00286A  C0A0  FFFA         	movff	??_ISR,pclath
  1745  00286E  0011               	retfie		f
  1746  002870                     __end_of_ISR:
  1747                           	opt stack 0
  1748                           pclatu	equ	0xFFB
  1749                           pclath	equ	0xFFA
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           prodh	equ	0xFF4
  1755                           prodl	equ	0xFF3
  1756                           intcon	equ	0xFF2
  1757                           intcon2	equ	0xFF1
  1758                           indf0	equ	0xFEF
  1759                           postinc0	equ	0xFEE
  1760                           fsr0h	equ	0xFEA
  1761                           fsr0l	equ	0xFE9
  1762                           wreg	equ	0xFE8
  1763                           fsr1h	equ	0xFE2
  1764                           fsr1l	equ	0xFE1
  1765                           fsr2h	equ	0xFDA
  1766                           fsr2l	equ	0xFD9
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function _TMR0Int *****************
  1770 ;; Defined at:
  1771 ;;		line 89 in file "PID.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;		None
  1776 ;; Return value:  Size  Location     Type
  1777 ;;		None               void
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;Total ram usage:        0 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    3
  1792 ;; This function calls:
  1793 ;;		_ImplementPIDMotion
  1794 ;;		_RTD2Angle
  1795 ;;		_calculatePID
  1796 ;; This function is called by:
  1797 ;;		_ISR
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text12
  1802  002AA4                     __ptext12:
  1803                           	opt stack 0
  1804  002AA4                     _TMR0Int:
  1805                           	opt stack 22
  1806                           
  1807                           ;PID.c: 91: CurrentAngle = RTD2Angle(ReadRTDpos);
  1808                           
  1809                           ;incstack = 0
  1810  002AA4  0E00               	movlw	0
  1811  002AA6  6E28               	movwf	RTD2Angle@RTDAngle+1,c
  1812  002AA8  0E00               	movlw	0
  1813  002AAA  6E27               	movwf	RTD2Angle@RTDAngle,c
  1814  002AAC  EC9B  F015         	call	_RTD2Angle	;wreg free
  1815  002AB0  C027  F060         	movff	?_RTD2Angle,_CurrentAngle
  1816  002AB4  C028  F061         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1817  002AB8  C029  F062         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1818                           
  1819                           ;PID.c: 92: calculatePID(CurrentAngle, SetAngle);
  1820  002ABC  C060  F042         	movff	_CurrentAngle,calculatePID@angle
  1821  002AC0  C061  F043         	movff	_CurrentAngle+1,calculatePID@angle+1
  1822  002AC4  C062  F044         	movff	_CurrentAngle+2,calculatePID@angle+2
  1823  002AC8  C06F  F045         	movff	_SetAngle,calculatePID@setpoint
  1824  002ACC  C070  F046         	movff	_SetAngle+1,calculatePID@setpoint+1
  1825  002AD0  C071  F047         	movff	_SetAngle+2,calculatePID@setpoint+2
  1826  002AD4  EC32  F008         	call	_calculatePID	;wreg free
  1827                           
  1828                           ;PID.c: 93: ImplementPIDMotion(motorInput);
  1829  002AD8  C075  F005         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1830  002ADC  C076  F006         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1831  002AE0  EC76  F014         	call	_ImplementPIDMotion	;wreg free
  1832                           
  1833                           ;PID.c: 94: TMR0H = 0xDB;
  1834  002AE4  0EDB               	movlw	219
  1835  002AE6  6ED7               	movwf	4055,c	;volatile
  1836                           
  1837                           ;PID.c: 95: TMR0L = 0x60;
  1838  002AE8  0E60               	movlw	96
  1839  002AEA  6ED6               	movwf	4054,c	;volatile
  1840                           
  1841                           ;PID.c: 97: INTCONbits.TMR0IF = 0;
  1842  002AEC  94F2               	bcf	intcon,2,c	;volatile
  1843  002AEE  0012               	return		;funcret
  1844  002AF0                     __end_of_TMR0Int:
  1845                           	opt stack 0
  1846                           pclatu	equ	0xFFB
  1847                           pclath	equ	0xFFA
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           prodh	equ	0xFF4
  1853                           prodl	equ	0xFF3
  1854                           intcon	equ	0xFF2
  1855                           intcon2	equ	0xFF1
  1856                           indf0	equ	0xFEF
  1857                           postinc0	equ	0xFEE
  1858                           fsr0h	equ	0xFEA
  1859                           fsr0l	equ	0xFE9
  1860                           wreg	equ	0xFE8
  1861                           fsr1h	equ	0xFE2
  1862                           fsr1l	equ	0xFE1
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _calculatePID *****************
  1868 ;; Defined at:
  1869 ;;		line 29 in file "PID.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  angle           3   65[COMRAM] unsigned char 
  1872 ;;  setpoint        3   68[COMRAM] unsigned char 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  derErr          3   71[COMRAM] unsigned char 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;		None               void
  1877 ;; Registers used:
  1878 ;;		wreg, status,2, status,0, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1884 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;Total ram usage:       18 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    2
  1891 ;; This function calls:
  1892 ;;		___ftadd
  1893 ;;		___ftdiv
  1894 ;;		___ftge
  1895 ;;		___ftmul
  1896 ;;		___ftneg
  1897 ;;		___fttol
  1898 ;; This function is called by:
  1899 ;;		_TMR0Int
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text13
  1904  001064                     __ptext13:
  1905                           	opt stack 0
  1906  001064                     _calculatePID:
  1907                           	opt stack 22
  1908                           
  1909                           ;PID.c: 31: double derErr;
  1910                           ;PID.c: 32: if((PIDEnableFlag & 0x02) == 0x02)
  1911                           
  1912                           ;incstack = 0
  1913  001064  A258               	btfss	_PIDEnableFlag,1,c
  1914  001066  D025               	goto	i2l2741
  1915                           
  1916                           ;PID.c: 33: {
  1917                           ;PID.c: 34: StartAngle = angle;
  1918  001068  C042  F055         	movff	calculatePID@angle,_StartAngle
  1919  00106C  C043  F056         	movff	calculatePID@angle+1,_StartAngle+1
  1920  001070  C044  F057         	movff	calculatePID@angle+2,_StartAngle+2
  1921                           
  1922                           ;PID.c: 35: err = 0;
  1923  001074  0E00               	movlw	0
  1924  001076  0100               	movlb	0	; () banked
  1925  001078  6FB1               	movwf	_err& (0+255),b
  1926  00107A  0E00               	movlw	0
  1927  00107C  0100               	movlb	0	; () banked
  1928  00107E  6FB2               	movwf	(_err+1)& (0+255),b
  1929  001080  0E00               	movlw	0
  1930  001082  0100               	movlb	0	; () banked
  1931  001084  6FB3               	movwf	(_err+2)& (0+255),b
  1932                           
  1933                           ;PID.c: 36: prevErr = 0;
  1934  001086  0E00               	movlw	0
  1935  001088  0100               	movlb	0	; () banked
  1936  00108A  6FB7               	movwf	_prevErr& (0+255),b
  1937  00108C  0E00               	movlw	0
  1938  00108E  0100               	movlb	0	; () banked
  1939  001090  6FB8               	movwf	(_prevErr+1)& (0+255),b
  1940  001092  0E00               	movlw	0
  1941  001094  0100               	movlb	0	; () banked
  1942  001096  6FB9               	movwf	(_prevErr+2)& (0+255),b
  1943                           
  1944                           ;PID.c: 37: intErr = 0;
  1945  001098  0E00               	movlw	0
  1946  00109A  0100               	movlb	0	; () banked
  1947  00109C  6FB4               	movwf	_intErr& (0+255),b
  1948  00109E  0E00               	movlw	0
  1949  0010A0  0100               	movlb	0	; () banked
  1950  0010A2  6FB5               	movwf	(_intErr+1)& (0+255),b
  1951  0010A4  0E00               	movlw	0
  1952  0010A6  0100               	movlb	0	; () banked
  1953  0010A8  6FB6               	movwf	(_intErr+2)& (0+255),b
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;PID.c: 38: PIDEnableFlag = PIDEnableFlag & 0x01;
  1957  0010AA  5058               	movf	_PIDEnableFlag,w,c
  1958  0010AC  0B01               	andlw	1
  1959  0010AE  6E58               	movwf	_PIDEnableFlag,c
  1960  0010B0  D000               	goto	i2l2741
  1961  0010B2                     i2l2741:
  1962                           
  1963                           ;PID.c: 39: }
  1964                           ;PID.c: 41: if(((StartAngle - setpoint) > 180) || ((StartAngle - setpoint) < -180))
  1965  0010B2  0E00               	movlw	0
  1966  0010B4  6E33               	movwf	___ftge@ff1,c
  1967  0010B6  0E34               	movlw	52
  1968  0010B8  6E34               	movwf	___ftge@ff1+1,c
  1969  0010BA  0E43               	movlw	67
  1970  0010BC  6E35               	movwf	___ftge@ff1+2,c
  1971  0010BE  C055  F02A         	movff	_StartAngle,___ftadd@f2
  1972  0010C2  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  1973  0010C6  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  1974  0010CA  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  1975  0010CE  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  1976  0010D2  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  1977  0010D6  EC4D  F016         	call	___ftneg	;wreg free
  1978  0010DA  C001  F027         	movff	?___ftneg,___ftadd@f1
  1979  0010DE  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  1980  0010E2  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  1981  0010E6  EC6E  F010         	call	___ftadd	;wreg free
  1982  0010EA  C027  F036         	movff	?___ftadd,___ftge@ff2
  1983  0010EE  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  1984  0010F2  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  1985  0010F6  ECAE  F013         	call	___ftge	;wreg free
  1986  0010FA  A0D8               	btfss	status,0,c
  1987  0010FC  D026               	goto	i2l2745
  1988  0010FE  C055  F02A         	movff	_StartAngle,___ftadd@f2
  1989  001102  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  1990  001106  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  1991  00110A  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  1992  00110E  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  1993  001112  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  1994  001116  EC4D  F016         	call	___ftneg	;wreg free
  1995  00111A  C001  F027         	movff	?___ftneg,___ftadd@f1
  1996  00111E  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  1997  001122  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  1998  001126  EC6E  F010         	call	___ftadd	;wreg free
  1999  00112A  C027  F033         	movff	?___ftadd,___ftge@ff1
  2000  00112E  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  2001  001132  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  2002  001136  0E00               	movlw	0
  2003  001138  6E36               	movwf	___ftge@ff2,c
  2004  00113A  0E34               	movlw	52
  2005  00113C  6E37               	movwf	___ftge@ff2+1,c
  2006  00113E  0EC3               	movlw	195
  2007  001140  6E38               	movwf	___ftge@ff2+2,c
  2008  001142  ECAE  F013         	call	___ftge	;wreg free
  2009  001146  B0D8               	btfsc	status,0,c
  2010  001148  D0F2               	goto	i2l2761
  2011  00114A                     i2l2745:
  2012                           
  2013                           ;PID.c: 42: {
  2014                           ;PID.c: 43: if((StartAngle - setpoint) > 180)
  2015  00114A  0E00               	movlw	0
  2016  00114C  6E33               	movwf	___ftge@ff1,c
  2017  00114E  0E34               	movlw	52
  2018  001150  6E34               	movwf	___ftge@ff1+1,c
  2019  001152  0E43               	movlw	67
  2020  001154  6E35               	movwf	___ftge@ff1+2,c
  2021  001156  C055  F02A         	movff	_StartAngle,___ftadd@f2
  2022  00115A  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2023  00115E  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2024  001162  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2025  001166  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2026  00116A  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2027  00116E  EC4D  F016         	call	___ftneg	;wreg free
  2028  001172  C001  F027         	movff	?___ftneg,___ftadd@f1
  2029  001176  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2030  00117A  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2031  00117E  EC6E  F010         	call	___ftadd	;wreg free
  2032  001182  C027  F036         	movff	?___ftadd,___ftge@ff2
  2033  001186  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2034  00118A  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2035  00118E  ECAE  F013         	call	___ftge	;wreg free
  2036  001192  B0D8               	btfsc	status,0,c
  2037  001194  D053               	goto	i2l2753
  2038                           
  2039                           ;PID.c: 44: {
  2040                           ;PID.c: 45: if(angle > StartAngle)
  2041  001196  C055  F033         	movff	_StartAngle,___ftge@ff1
  2042  00119A  C056  F034         	movff	_StartAngle+1,___ftge@ff1+1
  2043  00119E  C057  F035         	movff	_StartAngle+2,___ftge@ff1+2
  2044  0011A2  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  2045  0011A6  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  2046  0011AA  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  2047  0011AE  ECAE  F013         	call	___ftge	;wreg free
  2048  0011B2  B0D8               	btfsc	status,0,c
  2049  0011B4  D02B               	goto	i2l2751
  2050                           
  2051                           ;PID.c: 46: err = 360 - angle + setpoint;
  2052  0011B6  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2053  0011BA  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2054  0011BE  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2055  0011C2  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2056  0011C6  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2057  0011CA  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2058  0011CE  EC4D  F016         	call	___ftneg	;wreg free
  2059  0011D2  C001  F027         	movff	?___ftneg,___ftadd@f1
  2060  0011D6  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2061  0011DA  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2062  0011DE  EC6E  F010         	call	___ftadd	;wreg free
  2063  0011E2  C027  F051         	movff	?___ftadd,_calculatePID$1984
  2064  0011E6  C028  F052         	movff	?___ftadd+1,_calculatePID$1984+1
  2065  0011EA  C029  F053         	movff	?___ftadd+2,_calculatePID$1984+2
  2066                           
  2067                           ;PID.c: 46: err = 360 - angle + setpoint;
  2068  0011EE  C051  F027         	movff	_calculatePID$1984,___ftadd@f1
  2069  0011F2  C052  F028         	movff	_calculatePID$1984+1,___ftadd@f1+1
  2070  0011F6  C053  F029         	movff	_calculatePID$1984+2,___ftadd@f1+2
  2071  0011FA  0E00               	movlw	0
  2072  0011FC  6E2A               	movwf	___ftadd@f2,c
  2073  0011FE  0EB4               	movlw	180
  2074  001200  6E2B               	movwf	___ftadd@f2+1,c
  2075  001202  0E43               	movlw	67
  2076  001204  6E2C               	movwf	___ftadd@f2+2,c
  2077  001206  EC6E  F010         	call	___ftadd	;wreg free
  2078  00120A  D1FD               	goto	L7
  2079  00120C                     i2l2751:
  2080                           
  2081                           ;PID.c: 47: else
  2082                           ;PID.c: 48: err = setpoint - angle;
  2083  00120C  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2084  001210  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2085  001214  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2086  001218  EC4D  F016         	call	___ftneg	;wreg free
  2087  00121C  C001  F027         	movff	?___ftneg,___ftadd@f1
  2088  001220  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2089  001224  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2090  001228  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2091  00122C  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2092  001230  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2093  001234  EC6E  F010         	call	___ftadd	;wreg free
  2094  001238  D1E6               	goto	L7
  2095                           
  2096                           ;PID.c: 49: }
  2097  00123A  D1EC               	goto	i2l55
  2098  00123C                     i2l2753:
  2099                           
  2100                           ;PID.c: 50: else if((StartAngle - setpoint) < -180)
  2101  00123C  C055  F02A         	movff	_StartAngle,___ftadd@f2
  2102  001240  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2103  001244  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2104  001248  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2105  00124C  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2106  001250  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2107  001254  EC4D  F016         	call	___ftneg	;wreg free
  2108  001258  C001  F027         	movff	?___ftneg,___ftadd@f1
  2109  00125C  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2110  001260  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2111  001264  EC6E  F010         	call	___ftadd	;wreg free
  2112  001268  C027  F033         	movff	?___ftadd,___ftge@ff1
  2113  00126C  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  2114  001270  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  2115  001274  0E00               	movlw	0
  2116  001276  6E36               	movwf	___ftge@ff2,c
  2117  001278  0E34               	movlw	52
  2118  00127A  6E37               	movwf	___ftge@ff2+1,c
  2119  00127C  0EC3               	movlw	195
  2120  00127E  6E38               	movwf	___ftge@ff2+2,c
  2121  001280  ECAE  F013         	call	___ftge	;wreg free
  2122  001284  B0D8               	btfsc	status,0,c
  2123  001286  D1C6               	goto	i2l55
  2124                           
  2125                           ;PID.c: 51: {
  2126                           ;PID.c: 52: if(angle < StartAngle)
  2127  001288  C042  F033         	movff	calculatePID@angle,___ftge@ff1
  2128  00128C  C043  F034         	movff	calculatePID@angle+1,___ftge@ff1+1
  2129  001290  C044  F035         	movff	calculatePID@angle+2,___ftge@ff1+2
  2130  001294  C055  F036         	movff	_StartAngle,___ftge@ff2
  2131  001298  C056  F037         	movff	_StartAngle+1,___ftge@ff2+1
  2132  00129C  C057  F038         	movff	_StartAngle+2,___ftge@ff2+2
  2133  0012A0  ECAE  F013         	call	___ftge	;wreg free
  2134  0012A4  B0D8               	btfsc	status,0,c
  2135  0012A6  D02B               	goto	i2l2759
  2136                           
  2137                           ;PID.c: 53: err = setpoint - 360 - angle;
  2138  0012A8  0E00               	movlw	0
  2139  0012AA  6E2A               	movwf	___ftadd@f2,c
  2140  0012AC  0EB4               	movlw	180
  2141  0012AE  6E2B               	movwf	___ftadd@f2+1,c
  2142  0012B0  0E43               	movlw	67
  2143  0012B2  6E2C               	movwf	___ftadd@f2+2,c
  2144  0012B4  C042  F027         	movff	calculatePID@angle,___ftadd@f1
  2145  0012B8  C043  F028         	movff	calculatePID@angle+1,___ftadd@f1+1
  2146  0012BC  C044  F029         	movff	calculatePID@angle+2,___ftadd@f1+2
  2147  0012C0  EC6E  F010         	call	___ftadd	;wreg free
  2148  0012C4  C027  F001         	movff	?___ftadd,___ftneg@f1
  2149  0012C8  C028  F002         	movff	?___ftadd+1,___ftneg@f1+1
  2150  0012CC  C029  F003         	movff	?___ftadd+2,___ftneg@f1+2
  2151  0012D0  EC4D  F016         	call	___ftneg	;wreg free
  2152  0012D4  C001  F051         	movff	?___ftneg,_calculatePID$1984
  2153  0012D8  C002  F052         	movff	?___ftneg+1,_calculatePID$1984+1
  2154  0012DC  C003  F053         	movff	?___ftneg+2,_calculatePID$1984+2
  2155                           
  2156                           ;PID.c: 53: err = setpoint - 360 - angle;
  2157  0012E0  C051  F027         	movff	_calculatePID$1984,___ftadd@f1
  2158  0012E4  C052  F028         	movff	_calculatePID$1984+1,___ftadd@f1+1
  2159  0012E8  C053  F029         	movff	_calculatePID$1984+2,___ftadd@f1+2
  2160  0012EC  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2161  0012F0  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2162  0012F4  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2163  0012F8  EC6E  F010         	call	___ftadd	;wreg free
  2164  0012FC  D184               	goto	L7
  2165  0012FE                     i2l2759:
  2166                           
  2167                           ;PID.c: 54: else
  2168                           ;PID.c: 55: err = setpoint - angle;
  2169  0012FE  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2170  001302  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2171  001306  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2172  00130A  EC4D  F016         	call	___ftneg	;wreg free
  2173  00130E  C001  F027         	movff	?___ftneg,___ftadd@f1
  2174  001312  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2175  001316  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2176  00131A  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2177  00131E  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2178  001322  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2179  001326  EC6E  F010         	call	___ftadd	;wreg free
  2180  00132A  D16D               	goto	L7
  2181                           
  2182                           ;PID.c: 56: }
  2183                           ;PID.c: 57: }
  2184  00132C  D173               	goto	i2l55
  2185  00132E                     i2l2761:
  2186                           
  2187                           ;PID.c: 58: else if(((StartAngle - setpoint) <= 180) && ((StartAngle - setpoint) > -180)
      +                          )
  2188  00132E  0E00               	movlw	0
  2189  001330  6E33               	movwf	___ftge@ff1,c
  2190  001332  0E34               	movlw	52
  2191  001334  6E34               	movwf	___ftge@ff1+1,c
  2192  001336  0E43               	movlw	67
  2193  001338  6E35               	movwf	___ftge@ff1+2,c
  2194  00133A  C055  F02A         	movff	_StartAngle,___ftadd@f2
  2195  00133E  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2196  001342  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2197  001346  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2198  00134A  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2199  00134E  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2200  001352  EC4D  F016         	call	___ftneg	;wreg free
  2201  001356  C001  F027         	movff	?___ftneg,___ftadd@f1
  2202  00135A  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2203  00135E  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2204  001362  EC6E  F010         	call	___ftadd	;wreg free
  2205  001366  C027  F036         	movff	?___ftadd,___ftge@ff2
  2206  00136A  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2207  00136E  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2208  001372  ECAE  F013         	call	___ftge	;wreg free
  2209  001376  A0D8               	btfss	status,0,c
  2210  001378  D14D               	goto	i2l55
  2211  00137A  0E00               	movlw	0
  2212  00137C  6E33               	movwf	___ftge@ff1,c
  2213  00137E  0E34               	movlw	52
  2214  001380  6E34               	movwf	___ftge@ff1+1,c
  2215  001382  0EC3               	movlw	195
  2216  001384  6E35               	movwf	___ftge@ff1+2,c
  2217  001386  C055  F02A         	movff	_StartAngle,___ftadd@f2
  2218  00138A  C056  F02B         	movff	_StartAngle+1,___ftadd@f2+1
  2219  00138E  C057  F02C         	movff	_StartAngle+2,___ftadd@f2+2
  2220  001392  C045  F001         	movff	calculatePID@setpoint,___ftneg@f1
  2221  001396  C046  F002         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  2222  00139A  C047  F003         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  2223  00139E  EC4D  F016         	call	___ftneg	;wreg free
  2224  0013A2  C001  F027         	movff	?___ftneg,___ftadd@f1
  2225  0013A6  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2226  0013AA  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2227  0013AE  EC6E  F010         	call	___ftadd	;wreg free
  2228  0013B2  C027  F036         	movff	?___ftadd,___ftge@ff2
  2229  0013B6  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2230  0013BA  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2231  0013BE  ECAE  F013         	call	___ftge	;wreg free
  2232  0013C2  B0D8               	btfsc	status,0,c
  2233  0013C4  D127               	goto	i2l55
  2234                           
  2235                           ;PID.c: 59: {
  2236                           ;PID.c: 60: if(((setpoint - StartAngle) > -180) && (setpoint - StartAngle < 0))
  2237  0013C6  0E00               	movlw	0
  2238  0013C8  6E33               	movwf	___ftge@ff1,c
  2239  0013CA  0E34               	movlw	52
  2240  0013CC  6E34               	movwf	___ftge@ff1+1,c
  2241  0013CE  0EC3               	movlw	195
  2242  0013D0  6E35               	movwf	___ftge@ff1+2,c
  2243  0013D2  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2244  0013D6  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2245  0013DA  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2246  0013DE  C055  F001         	movff	_StartAngle,___ftneg@f1
  2247  0013E2  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  2248  0013E6  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  2249  0013EA  EC4D  F016         	call	___ftneg	;wreg free
  2250  0013EE  C001  F027         	movff	?___ftneg,___ftadd@f1
  2251  0013F2  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2252  0013F6  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2253  0013FA  EC6E  F010         	call	___ftadd	;wreg free
  2254  0013FE  C027  F036         	movff	?___ftadd,___ftge@ff2
  2255  001402  C028  F037         	movff	?___ftadd+1,___ftge@ff2+1
  2256  001406  C029  F038         	movff	?___ftadd+2,___ftge@ff2+2
  2257  00140A  ECAE  F013         	call	___ftge	;wreg free
  2258  00140E  B0D8               	btfsc	status,0,c
  2259  001410  D06B               	goto	i2l2775
  2260  001412  C055  F001         	movff	_StartAngle,___ftneg@f1
  2261  001416  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  2262  00141A  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  2263  00141E  EC4D  F016         	call	___ftneg	;wreg free
  2264  001422  C001  F027         	movff	?___ftneg,___ftadd@f1
  2265  001426  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2266  00142A  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2267  00142E  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2268  001432  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2269  001436  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2270  00143A  EC6E  F010         	call	___ftadd	;wreg free
  2271  00143E  AE29               	btfss	?___ftadd+2,7,c
  2272  001440  D053               	goto	i2l2775
  2273                           
  2274                           ;PID.c: 61: {
  2275                           ;PID.c: 62: if(angle <= StartAngle)
  2276  001442  C055  F033         	movff	_StartAngle,___ftge@ff1
  2277  001446  C056  F034         	movff	_StartAngle+1,___ftge@ff1+1
  2278  00144A  C057  F035         	movff	_StartAngle+2,___ftge@ff1+2
  2279  00144E  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  2280  001452  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  2281  001456  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  2282  00145A  ECAE  F013         	call	___ftge	;wreg free
  2283  00145E  A0D8               	btfss	status,0,c
  2284  001460  D017               	goto	i2l2773
  2285                           
  2286                           ;PID.c: 63: err = setpoint - angle;
  2287  001462  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2288  001466  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2289  00146A  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2290  00146E  EC4D  F016         	call	___ftneg	;wreg free
  2291  001472  C001  F027         	movff	?___ftneg,___ftadd@f1
  2292  001476  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2293  00147A  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2294  00147E  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2295  001482  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2296  001486  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2297  00148A  EC6E  F010         	call	___ftadd	;wreg free
  2298  00148E  D0BB               	goto	L7
  2299  001490                     i2l2773:
  2300                           
  2301                           ;PID.c: 64: else
  2302                           ;PID.c: 65: err = setpoint + 360 - angle;
  2303  001490  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2304  001494  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2305  001498  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2306  00149C  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2307  0014A0  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2308  0014A4  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2309  0014A8  EC4D  F016         	call	___ftneg	;wreg free
  2310  0014AC  C001  F027         	movff	?___ftneg,___ftadd@f1
  2311  0014B0  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2312  0014B4  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2313  0014B8  EC6E  F010         	call	___ftadd	;wreg free
  2314  0014BC  C027  F051         	movff	?___ftadd,_calculatePID$1984
  2315  0014C0  C028  F052         	movff	?___ftadd+1,_calculatePID$1984+1
  2316  0014C4  C029  F053         	movff	?___ftadd+2,_calculatePID$1984+2
  2317                           
  2318                           ;PID.c: 64: else
  2319                           ;PID.c: 65: err = setpoint + 360 - angle;
  2320  0014C8  C051  F027         	movff	_calculatePID$1984,___ftadd@f1
  2321  0014CC  C052  F028         	movff	_calculatePID$1984+1,___ftadd@f1+1
  2322  0014D0  C053  F029         	movff	_calculatePID$1984+2,___ftadd@f1+2
  2323  0014D4  0E00               	movlw	0
  2324  0014D6  6E2A               	movwf	___ftadd@f2,c
  2325  0014D8  0EB4               	movlw	180
  2326  0014DA  6E2B               	movwf	___ftadd@f2+1,c
  2327  0014DC  0E43               	movlw	67
  2328  0014DE  6E2C               	movwf	___ftadd@f2+2,c
  2329  0014E0  EC6E  F010         	call	___ftadd	;wreg free
  2330  0014E4  D090               	goto	L7
  2331                           
  2332                           ;PID.c: 66: }
  2333  0014E6  D096               	goto	i2l55
  2334  0014E8                     i2l2775:
  2335                           
  2336                           ;PID.c: 67: else if(((setpoint - StartAngle) < 180) && (setpoint - StartAngle >= 0))
  2337  0014E8  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2338  0014EC  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2339  0014F0  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2340  0014F4  C055  F001         	movff	_StartAngle,___ftneg@f1
  2341  0014F8  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  2342  0014FC  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  2343  001500  EC4D  F016         	call	___ftneg	;wreg free
  2344  001504  C001  F027         	movff	?___ftneg,___ftadd@f1
  2345  001508  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2346  00150C  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2347  001510  EC6E  F010         	call	___ftadd	;wreg free
  2348  001514  C027  F033         	movff	?___ftadd,___ftge@ff1
  2349  001518  C028  F034         	movff	?___ftadd+1,___ftge@ff1+1
  2350  00151C  C029  F035         	movff	?___ftadd+2,___ftge@ff1+2
  2351  001520  0E00               	movlw	0
  2352  001522  6E36               	movwf	___ftge@ff2,c
  2353  001524  0E34               	movlw	52
  2354  001526  6E37               	movwf	___ftge@ff2+1,c
  2355  001528  0E43               	movlw	67
  2356  00152A  6E38               	movwf	___ftge@ff2+2,c
  2357  00152C  ECAE  F013         	call	___ftge	;wreg free
  2358  001530  B0D8               	btfsc	status,0,c
  2359  001532  D070               	goto	i2l55
  2360  001534  C055  F001         	movff	_StartAngle,___ftneg@f1
  2361  001538  C056  F002         	movff	_StartAngle+1,___ftneg@f1+1
  2362  00153C  C057  F003         	movff	_StartAngle+2,___ftneg@f1+2
  2363  001540  EC4D  F016         	call	___ftneg	;wreg free
  2364  001544  C001  F027         	movff	?___ftneg,___ftadd@f1
  2365  001548  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2366  00154C  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2367  001550  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2368  001554  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2369  001558  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2370  00155C  EC6E  F010         	call	___ftadd	;wreg free
  2371  001560  BE29               	btfsc	?___ftadd+2,7,c
  2372  001562  D058               	goto	i2l55
  2373                           
  2374                           ;PID.c: 68: {
  2375                           ;PID.c: 69: if(angle <= StartAngle)
  2376  001564  C055  F033         	movff	_StartAngle,___ftge@ff1
  2377  001568  C056  F034         	movff	_StartAngle+1,___ftge@ff1+1
  2378  00156C  C057  F035         	movff	_StartAngle+2,___ftge@ff1+2
  2379  001570  C042  F036         	movff	calculatePID@angle,___ftge@ff2
  2380  001574  C043  F037         	movff	calculatePID@angle+1,___ftge@ff2+1
  2381  001578  C044  F038         	movff	calculatePID@angle+2,___ftge@ff2+2
  2382  00157C  ECAE  F013         	call	___ftge	;wreg free
  2383  001580  A0D8               	btfss	status,0,c
  2384  001582  D017               	goto	i2l2783
  2385                           
  2386                           ;PID.c: 70: err = setpoint - angle;
  2387  001584  C042  F001         	movff	calculatePID@angle,___ftneg@f1
  2388  001588  C043  F002         	movff	calculatePID@angle+1,___ftneg@f1+1
  2389  00158C  C044  F003         	movff	calculatePID@angle+2,___ftneg@f1+2
  2390  001590  EC4D  F016         	call	___ftneg	;wreg free
  2391  001594  C001  F027         	movff	?___ftneg,___ftadd@f1
  2392  001598  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2393  00159C  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2394  0015A0  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2395  0015A4  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2396  0015A8  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2397  0015AC  EC6E  F010         	call	___ftadd	;wreg free
  2398  0015B0  D02A               	goto	L7
  2399  0015B2                     i2l2783:
  2400                           
  2401                           ;PID.c: 71: else
  2402                           ;PID.c: 72: err = setpoint - 360 - angle;
  2403  0015B2  0E00               	movlw	0
  2404  0015B4  6E2A               	movwf	___ftadd@f2,c
  2405  0015B6  0EB4               	movlw	180
  2406  0015B8  6E2B               	movwf	___ftadd@f2+1,c
  2407  0015BA  0E43               	movlw	67
  2408  0015BC  6E2C               	movwf	___ftadd@f2+2,c
  2409  0015BE  C042  F027         	movff	calculatePID@angle,___ftadd@f1
  2410  0015C2  C043  F028         	movff	calculatePID@angle+1,___ftadd@f1+1
  2411  0015C6  C044  F029         	movff	calculatePID@angle+2,___ftadd@f1+2
  2412  0015CA  EC6E  F010         	call	___ftadd	;wreg free
  2413  0015CE  C027  F001         	movff	?___ftadd,___ftneg@f1
  2414  0015D2  C028  F002         	movff	?___ftadd+1,___ftneg@f1+1
  2415  0015D6  C029  F003         	movff	?___ftadd+2,___ftneg@f1+2
  2416  0015DA  EC4D  F016         	call	___ftneg	;wreg free
  2417  0015DE  C001  F051         	movff	?___ftneg,_calculatePID$1984
  2418  0015E2  C002  F052         	movff	?___ftneg+1,_calculatePID$1984+1
  2419  0015E6  C003  F053         	movff	?___ftneg+2,_calculatePID$1984+2
  2420                           
  2421                           ;PID.c: 71: else
  2422                           ;PID.c: 72: err = setpoint - 360 - angle;
  2423  0015EA  C051  F027         	movff	_calculatePID$1984,___ftadd@f1
  2424  0015EE  C052  F028         	movff	_calculatePID$1984+1,___ftadd@f1+1
  2425  0015F2  C053  F029         	movff	_calculatePID$1984+2,___ftadd@f1+2
  2426  0015F6  C045  F02A         	movff	calculatePID@setpoint,___ftadd@f2
  2427  0015FA  C046  F02B         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2428  0015FE  C047  F02C         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2429  001602  EC6E  F010         	call	___ftadd	;wreg free
  2430  001606                     L7:
  2431  001606  C027  F0B1         	movff	?___ftadd,_err
  2432  00160A  C028  F0B2         	movff	?___ftadd+1,_err+1
  2433  00160E  C029  F0B3         	movff	?___ftadd+2,_err+2
  2434  001612  D000               	goto	i2l55
  2435  001614                     i2l55:
  2436                           
  2437                           ;PID.c: 73: }
  2438                           ;PID.c: 74: }
  2439                           ;PID.c: 76: intErr = err + prevErr;
  2440  001614  C0B1  F027         	movff	_err,___ftadd@f1
  2441  001618  C0B2  F028         	movff	_err+1,___ftadd@f1+1
  2442  00161C  C0B3  F029         	movff	_err+2,___ftadd@f1+2
  2443  001620  C0B7  F02A         	movff	_prevErr,___ftadd@f2
  2444  001624  C0B8  F02B         	movff	_prevErr+1,___ftadd@f2+1
  2445  001628  C0B9  F02C         	movff	_prevErr+2,___ftadd@f2+2
  2446  00162C  EC6E  F010         	call	___ftadd	;wreg free
  2447  001630  C027  F0B4         	movff	?___ftadd,_intErr
  2448  001634  C028  F0B5         	movff	?___ftadd+1,_intErr+1
  2449  001638  C029  F0B6         	movff	?___ftadd+2,_intErr+2
  2450                           
  2451                           ;PID.c: 77: derErr = err - prevErr;
  2452  00163C  C0B7  F001         	movff	_prevErr,___ftneg@f1
  2453  001640  C0B8  F002         	movff	_prevErr+1,___ftneg@f1+1
  2454  001644  C0B9  F003         	movff	_prevErr+2,___ftneg@f1+2
  2455  001648  EC4D  F016         	call	___ftneg	;wreg free
  2456  00164C  C001  F027         	movff	?___ftneg,___ftadd@f1
  2457  001650  C002  F028         	movff	?___ftneg+1,___ftadd@f1+1
  2458  001654  C003  F029         	movff	?___ftneg+2,___ftadd@f1+2
  2459  001658  C0B1  F02A         	movff	_err,___ftadd@f2
  2460  00165C  C0B2  F02B         	movff	_err+1,___ftadd@f2+1
  2461  001660  C0B3  F02C         	movff	_err+2,___ftadd@f2+2
  2462  001664  EC6E  F010         	call	___ftadd	;wreg free
  2463  001668  C027  F048         	movff	?___ftadd,calculatePID@derErr
  2464  00166C  C028  F049         	movff	?___ftadd+1,calculatePID@derErr+1
  2465  001670  C029  F04A         	movff	?___ftadd+2,calculatePID@derErr+2
  2466                           
  2467                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  2468  001674  C0B4  F01B         	movff	_intErr,___ftmul@f2
  2469  001678  C0B5  F01C         	movff	_intErr+1,___ftmul@f2+1
  2470  00167C  C0B6  F01D         	movff	_intErr+2,___ftmul@f2+2
  2471  001680  C069  F018         	movff	_Ki,___ftmul@f1
  2472  001684  C06A  F019         	movff	_Ki+1,___ftmul@f1+1
  2473  001688  C06B  F01A         	movff	_Ki+2,___ftmul@f1+2
  2474  00168C  ECEB  F011         	call	___ftmul	;wreg free
  2475  001690  C018  F04B         	movff	?___ftmul,_calculatePID$1985
  2476  001694  C019  F04C         	movff	?___ftmul+1,_calculatePID$1985+1
  2477  001698  C01A  F04D         	movff	?___ftmul+2,_calculatePID$1985+2
  2478                           
  2479                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  2480  00169C  0EC3               	movlw	195
  2481  00169E  6E1B               	movwf	___ftmul@f2,c
  2482  0016A0  0EF5               	movlw	245
  2483  0016A2  6E1C               	movwf	___ftmul@f2+1,c
  2484  0016A4  0E3C               	movlw	60
  2485  0016A6  6E1D               	movwf	___ftmul@f2+2,c
  2486  0016A8  C04B  F018         	movff	_calculatePID$1985,___ftmul@f1
  2487  0016AC  C04C  F019         	movff	_calculatePID$1985+1,___ftmul@f1+1
  2488  0016B0  C04D  F01A         	movff	_calculatePID$1985+2,___ftmul@f1+2
  2489  0016B4  ECEB  F011         	call	___ftmul	;wreg free
  2490  0016B8  C018  F02A         	movff	?___ftmul,___ftadd@f2
  2491  0016BC  C019  F02B         	movff	?___ftmul+1,___ftadd@f2+1
  2492  0016C0  C01A  F02C         	movff	?___ftmul+2,___ftadd@f2+2
  2493  0016C4  C0B1  F01B         	movff	_err,___ftmul@f2
  2494  0016C8  C0B2  F01C         	movff	_err+1,___ftmul@f2+1
  2495  0016CC  C0B3  F01D         	movff	_err+2,___ftmul@f2+2
  2496  0016D0  C06C  F018         	movff	_Kp,___ftmul@f1
  2497  0016D4  C06D  F019         	movff	_Kp+1,___ftmul@f1+1
  2498  0016D8  C06E  F01A         	movff	_Kp+2,___ftmul@f1+2
  2499  0016DC  ECEB  F011         	call	___ftmul	;wreg free
  2500  0016E0  C018  F027         	movff	?___ftmul,___ftadd@f1
  2501  0016E4  C019  F028         	movff	?___ftmul+1,___ftadd@f1+1
  2502  0016E8  C01A  F029         	movff	?___ftmul+2,___ftadd@f1+2
  2503  0016EC  EC6E  F010         	call	___ftadd	;wreg free
  2504  0016F0  C027  F04E         	movff	?___ftadd,_calculatePID$1986
  2505  0016F4  C028  F04F         	movff	?___ftadd+1,_calculatePID$1986+1
  2506  0016F8  C029  F050         	movff	?___ftadd+2,_calculatePID$1986+2
  2507                           
  2508                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  2509  0016FC  C066  F01B         	movff	_Kd,___ftmul@f2
  2510  001700  C067  F01C         	movff	_Kd+1,___ftmul@f2+1
  2511  001704  C068  F01D         	movff	_Kd+2,___ftmul@f2+2
  2512  001708  0EC3               	movlw	195
  2513  00170A  6E0C               	movwf	___ftdiv@f2,c
  2514  00170C  0EF5               	movlw	245
  2515  00170E  6E0D               	movwf	___ftdiv@f2+1,c
  2516  001710  0E3C               	movlw	60
  2517  001712  6E0E               	movwf	___ftdiv@f2+2,c
  2518  001714  C048  F009         	movff	calculatePID@derErr,___ftdiv@f1
  2519  001718  C049  F00A         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2520  00171C  C04A  F00B         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2521  001720  ECDA  F012         	call	___ftdiv	;wreg free
  2522  001724  C009  F018         	movff	?___ftdiv,___ftmul@f1
  2523  001728  C00A  F019         	movff	?___ftdiv+1,___ftmul@f1+1
  2524  00172C  C00B  F01A         	movff	?___ftdiv+2,___ftmul@f1+2
  2525  001730  ECEB  F011         	call	___ftmul	;wreg free
  2526  001734  C018  F02A         	movff	?___ftmul,___ftadd@f2
  2527  001738  C019  F02B         	movff	?___ftmul+1,___ftadd@f2+1
  2528  00173C  C01A  F02C         	movff	?___ftmul+2,___ftadd@f2+2
  2529  001740  C04E  F027         	movff	_calculatePID$1986,___ftadd@f1
  2530  001744  C04F  F028         	movff	_calculatePID$1986+1,___ftadd@f1+1
  2531  001748  C050  F029         	movff	_calculatePID$1986+2,___ftadd@f1+2
  2532  00174C  EC6E  F010         	call	___ftadd	;wreg free
  2533  001750  C027  F033         	movff	?___ftadd,___fttol@f1
  2534  001754  C028  F034         	movff	?___ftadd+1,___fttol@f1+1
  2535  001758  C029  F035         	movff	?___ftadd+2,___fttol@f1+2
  2536  00175C  EC67  F012         	call	___fttol	;wreg free
  2537  001760  C033  F075         	movff	?___fttol,_motorInput
  2538  001764  C034  F076         	movff	?___fttol+1,_motorInput+1
  2539                           
  2540                           ;PID.c: 81: if(motorInput > 255)
  2541  001768  0100               	movlb	0	; () banked
  2542  00176A  BF76               	btfsc	(_motorInput+1)& (0+255),7,b
  2543  00176C  D009               	goto	i2l2789
  2544  00176E  0100               	movlb	0	; () banked
  2545  001770  0576               	decf	(_motorInput+1)& (0+255),w,b
  2546  001772  A0D8               	btfss	status,0,c
  2547  001774  D005               	goto	i2l2789
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;PID.c: 82: motorInput = 255;
  2551  001776  0E00               	movlw	0
  2552  001778  0100               	movlb	0	; () banked
  2553  00177A  6F76               	movwf	(_motorInput+1)& (0+255),b
  2554  00177C  6975               	setf	_motorInput& (0+255),b
  2555  00177E  D010               	goto	i2l2793
  2556  001780                     i2l2789:
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;PID.c: 83: else if (motorInput < -255)
  2560  001780  0100               	movlb	0	; () banked
  2561  001782  AF76               	btfss	(_motorInput+1)& (0+255),7,b
  2562  001784  D00D               	goto	i2l2793
  2563  001786  0100               	movlb	0	; () banked
  2564  001788  0575               	decf	_motorInput& (0+255),w,b
  2565  00178A  0EFF               	movlw	255
  2566  00178C  0100               	movlb	0	; () banked
  2567  00178E  5976               	subwfb	(_motorInput+1)& (0+255),w,b
  2568  001790  B0D8               	btfsc	status,0,c
  2569  001792  D006               	goto	i2l2793
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;PID.c: 84: motorInput = -255;
  2573  001794  0EFF               	movlw	255
  2574  001796  0100               	movlb	0	; () banked
  2575  001798  6F76               	movwf	(_motorInput+1)& (0+255),b
  2576  00179A  0E01               	movlw	1
  2577  00179C  6F75               	movwf	_motorInput& (0+255),b
  2578                           
  2579                           ; BSR set to: 0
  2580  00179E  D000               	goto	i2l2793
  2581  0017A0                     i2l2793:
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;PID.c: 86: prevErr = err;
  2585  0017A0  C0B1  F0B7         	movff	_err,_prevErr
  2586  0017A4  C0B2  F0B8         	movff	_err+1,_prevErr+1
  2587  0017A8  C0B3  F0B9         	movff	_err+2,_prevErr+2
  2588                           
  2589                           ; BSR set to: 0
  2590  0017AC  0012               	return		;funcret
  2591  0017AE                     __end_of_calculatePID:
  2592                           	opt stack 0
  2593                           pclatu	equ	0xFFB
  2594                           pclath	equ	0xFFA
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           intcon2	equ	0xFF1
  2603                           indf0	equ	0xFEF
  2604                           postinc0	equ	0xFEE
  2605                           fsr0h	equ	0xFEA
  2606                           fsr0l	equ	0xFE9
  2607                           wreg	equ	0xFE8
  2608                           fsr1h	equ	0xFE2
  2609                           fsr1l	equ	0xFE1
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           status	equ	0xFD8
  2613                           
  2614 ;; *************** function ___fttol *****************
  2615 ;; Defined at:
  2616 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;  f1              3   50[COMRAM] float 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  lval            4   60[COMRAM] unsigned long 
  2621 ;;  exp1            1   64[COMRAM] unsigned char 
  2622 ;;  sign1           1   59[COMRAM] unsigned char 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  4   50[COMRAM] long 
  2625 ;; Registers used:
  2626 ;;		wreg, status,2, status,0
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;Total ram usage:       15 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_calculatePID
  2642 ;;		_breakDouble
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text14
  2647  0024CE                     __ptext14:
  2648                           	opt stack 0
  2649  0024CE                     ___fttol:
  2650                           	opt stack 23
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;incstack = 0
  2654  0024CE  C035  F037         	movff	___fttol@f1+2,??___fttol
  2655  0024D2  6A38               	clrf	(??___fttol+1)& (0+255),c
  2656  0024D4  6A39               	clrf	(??___fttol+2)& (0+255),c
  2657  0024D6  3434               	rlcf	___fttol@f1+1,w,c
  2658  0024D8  3637               	rlcf	??___fttol& (0+255),f,c
  2659  0024DA  E301               	bnc	u288_41
  2660  0024DC  8038               	bsf	(??___fttol+1)& (0+255),0,c
  2661  0024DE                     u288_41:
  2662  0024DE  5037               	movf	??___fttol,w,c
  2663  0024E0  6E41               	movwf	___fttol@exp1,c
  2664  0024E2  5041               	movf	___fttol@exp1,w,c
  2665  0024E4  A4D8               	btfss	status,2,c
  2666  0024E6  D002               	goto	i2l2677
  2667  0024E8  D039               	goto	i2l2701
  2668  0024EA  D063               	goto	i2l900
  2669  0024EC                     i2l2677:
  2670  0024EC  0E17               	movlw	23
  2671  0024EE  6E37               	movwf	??___fttol& (0+255),c
  2672  0024F0  C033  F038         	movff	___fttol@f1,??___fttol+1
  2673  0024F4  C034  F039         	movff	___fttol@f1+1,??___fttol+2
  2674  0024F8  C035  F03A         	movff	___fttol@f1+2,??___fttol+3
  2675  0024FC  2837               	incf	??___fttol,w,c
  2676  0024FE  6E3B               	movwf	(??___fttol+4)& (0+255),c
  2677  002500  D004               	goto	i2u290_40
  2678  002502                     i2u290_45:
  2679  002502  90D8               	bcf	status,0,c
  2680  002504  323A               	rrcf	??___fttol+3,f,c
  2681  002506  3239               	rrcf	??___fttol+2,f,c
  2682  002508  3238               	rrcf	??___fttol+1,f,c
  2683  00250A                     i2u290_40:
  2684  00250A  2E3B               	decfsz	(??___fttol+4)& (0+255),f,c
  2685  00250C  D7FA               	goto	i2u290_45
  2686  00250E  5038               	movf	??___fttol+1,w,c
  2687  002510  6E3C               	movwf	___fttol@sign1,c
  2688  002512  8E34               	bsf	___fttol@f1+1,7,c
  2689  002514  0EFF               	movlw	255
  2690  002516  1633               	andwf	___fttol@f1,f,c
  2691  002518  0EFF               	movlw	255
  2692  00251A  1634               	andwf	___fttol@f1+1,f,c
  2693  00251C  0E00               	movlw	0
  2694  00251E  1635               	andwf	___fttol@f1+2,f,c
  2695  002520  5033               	movf	___fttol@f1,w,c
  2696  002522  6E3D               	movwf	___fttol@lval,c
  2697  002524  5034               	movf	___fttol@f1+1,w,c
  2698  002526  6E3E               	movwf	___fttol@lval+1,c
  2699  002528  5035               	movf	___fttol@f1+2,w,c
  2700  00252A  6E3F               	movwf	___fttol@lval+2,c
  2701  00252C  6A40               	clrf	___fttol@lval+3,c
  2702  00252E  0E8E               	movlw	142
  2703  002530  5E41               	subwf	___fttol@exp1,f,c
  2704  002532  AE41               	btfss	___fttol@exp1,7,c
  2705  002534  D010               	goto	i2l2699
  2706  002536  5041               	movf	___fttol@exp1,w,c
  2707  002538  0A80               	xorlw	128
  2708  00253A  0F8F               	addlw	143
  2709  00253C  B0D8               	btfsc	status,0,c
  2710  00253E  D003               	goto	i2l2695
  2711  002540  D00D               	goto	i2l2701
  2712  002542  D037               	goto	i2l900
  2713  002544  D000               	goto	i2l2695
  2714  002546                     i2l2695:
  2715  002546  90D8               	bcf	status,0,c
  2716  002548  3240               	rrcf	___fttol@lval+3,f,c
  2717  00254A  323F               	rrcf	___fttol@lval+2,f,c
  2718  00254C  323E               	rrcf	___fttol@lval+1,f,c
  2719  00254E  323D               	rrcf	___fttol@lval,f,c
  2720  002550  3E41               	incfsz	___fttol@exp1,f,c
  2721  002552  D7F9               	goto	i2l2695
  2722  002554  D019               	goto	i2l2709
  2723  002556                     i2l2699:
  2724  002556  0E17               	movlw	23
  2725  002558  6441               	cpfsgt	___fttol@exp1,c
  2726  00255A  D011               	goto	i2l2707
  2727  00255C                     i2l2701:
  2728  00255C  0E00               	movlw	0
  2729  00255E  6E33               	movwf	?___fttol,c
  2730  002560  0E00               	movlw	0
  2731  002562  6E34               	movwf	?___fttol+1,c
  2732  002564  0E00               	movlw	0
  2733  002566  6E35               	movwf	?___fttol+2,c
  2734  002568  0E00               	movlw	0
  2735  00256A  6E36               	movwf	?___fttol+3,c
  2736  00256C  D022               	goto	i2l900
  2737  00256E  D007               	goto	i2l2707
  2738  002570                     i2l2705:
  2739  002570  90D8               	bcf	status,0,c
  2740  002572  363D               	rlcf	___fttol@lval,f,c
  2741  002574  363E               	rlcf	___fttol@lval+1,f,c
  2742  002576  363F               	rlcf	___fttol@lval+2,f,c
  2743  002578  3640               	rlcf	___fttol@lval+3,f,c
  2744  00257A  0641               	decf	___fttol@exp1,f,c
  2745  00257C  D000               	goto	i2l2707
  2746  00257E                     i2l2707:
  2747  00257E  5041               	movf	___fttol@exp1,w,c
  2748  002580  B4D8               	btfsc	status,2,c
  2749  002582  D002               	goto	i2l2709
  2750  002584  D7F5               	goto	i2l2705
  2751  002586  D000               	goto	i2l2709
  2752  002588                     i2l2709:
  2753  002588  503C               	movf	___fttol@sign1,w,c
  2754  00258A  B4D8               	btfsc	status,2,c
  2755  00258C  D009               	goto	i2l2713
  2756  00258E  1E40               	comf	___fttol@lval+3,f,c
  2757  002590  1E3F               	comf	___fttol@lval+2,f,c
  2758  002592  1E3E               	comf	___fttol@lval+1,f,c
  2759  002594  6C3D               	negf	___fttol@lval,c
  2760  002596  0E00               	movlw	0
  2761  002598  223E               	addwfc	___fttol@lval+1,f,c
  2762  00259A  223F               	addwfc	___fttol@lval+2,f,c
  2763  00259C  2240               	addwfc	___fttol@lval+3,f,c
  2764  00259E  D000               	goto	i2l2713
  2765  0025A0                     i2l2713:
  2766  0025A0  C03D  F033         	movff	___fttol@lval,?___fttol
  2767  0025A4  C03E  F034         	movff	___fttol@lval+1,?___fttol+1
  2768  0025A8  C03F  F035         	movff	___fttol@lval+2,?___fttol+2
  2769  0025AC  C040  F036         	movff	___fttol@lval+3,?___fttol+3
  2770  0025B0  D000               	goto	i2l900
  2771  0025B2                     i2l900:
  2772  0025B2  0012               	return		;funcret
  2773  0025B4                     __end_of___fttol:
  2774                           	opt stack 0
  2775                           pclatu	equ	0xFFB
  2776                           pclath	equ	0xFFA
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           prodh	equ	0xFF4
  2782                           prodl	equ	0xFF3
  2783                           intcon	equ	0xFF2
  2784                           intcon2	equ	0xFF1
  2785                           indf0	equ	0xFEF
  2786                           postinc0	equ	0xFEE
  2787                           fsr0h	equ	0xFEA
  2788                           fsr0l	equ	0xFE9
  2789                           wreg	equ	0xFE8
  2790                           fsr1h	equ	0xFE2
  2791                           fsr1l	equ	0xFE1
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function ___ftadd *****************
  2797 ;; Defined at:
  2798 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  f1              3   38[COMRAM] float 
  2801 ;;  f2              3   41[COMRAM] float 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  exp1            1   49[COMRAM] unsigned char 
  2804 ;;  exp2            1   48[COMRAM] unsigned char 
  2805 ;;  sign            1   47[COMRAM] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  3   38[COMRAM] float 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2815 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;Total ram usage:       12 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    1
  2822 ;; This function calls:
  2823 ;;		___ftpack
  2824 ;; This function is called by:
  2825 ;;		_calculatePID
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text15
  2830  0020DC                     __ptext15:
  2831                           	opt stack 0
  2832  0020DC                     ___ftadd:
  2833                           	opt stack 22
  2834                           
  2835                           ;incstack = 0
  2836  0020DC  C029  F02D         	movff	___ftadd@f1+2,??___ftadd
  2837  0020E0  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  2838  0020E2  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  2839  0020E4  3428               	rlcf	___ftadd@f1+1,w,c
  2840  0020E6  362D               	rlcf	??___ftadd& (0+255),f,c
  2841  0020E8  E301               	bnc	u267_41
  2842  0020EA  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  2843  0020EC                     u267_41:
  2844  0020EC  502D               	movf	??___ftadd,w,c
  2845  0020EE  6E32               	movwf	___ftadd@exp1,c
  2846  0020F0  C02C  F02D         	movff	___ftadd@f2+2,??___ftadd
  2847  0020F4  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  2848  0020F6  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  2849  0020F8  342B               	rlcf	___ftadd@f2+1,w,c
  2850  0020FA  362D               	rlcf	??___ftadd& (0+255),f,c
  2851  0020FC  E301               	bnc	u268_41
  2852  0020FE  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  2853  002100                     u268_41:
  2854  002100  502D               	movf	??___ftadd,w,c
  2855  002102  6E31               	movwf	___ftadd@exp2,c
  2856  002104  5032               	movf	___ftadd@exp1,w,c
  2857  002106  B4D8               	btfsc	status,2,c
  2858  002108  D00B               	goto	i2l832
  2859  00210A  5031               	movf	___ftadd@exp2,w,c
  2860  00210C  5C32               	subwf	___ftadd@exp1,w,c
  2861  00210E  B0D8               	btfsc	status,0,c
  2862  002110  D00E               	goto	i2l2609
  2863  002112  5032               	movf	___ftadd@exp1,w,c
  2864  002114  0800               	sublw	0
  2865  002116  2431               	addwf	___ftadd@exp2,w,c
  2866  002118  6E2D               	movwf	??___ftadd& (0+255),c
  2867  00211A  0E18               	movlw	24
  2868  00211C  642D               	cpfsgt	??___ftadd,c
  2869  00211E  D007               	goto	i2l2609
  2870  002120                     i2l832:
  2871  002120  C02A  F027         	movff	___ftadd@f2,?___ftadd
  2872  002124  C02B  F028         	movff	___ftadd@f2+1,?___ftadd+1
  2873  002128  C02C  F029         	movff	___ftadd@f2+2,?___ftadd+2
  2874  00212C  D0B8               	goto	i2l833
  2875  00212E                     i2l2609:
  2876  00212E  5031               	movf	___ftadd@exp2,w,c
  2877  002130  B4D8               	btfsc	status,2,c
  2878  002132  D00B               	goto	i2l836
  2879  002134  5032               	movf	___ftadd@exp1,w,c
  2880  002136  5C31               	subwf	___ftadd@exp2,w,c
  2881  002138  B0D8               	btfsc	status,0,c
  2882  00213A  D00E               	goto	i2l2615
  2883  00213C  5031               	movf	___ftadd@exp2,w,c
  2884  00213E  0800               	sublw	0
  2885  002140  2432               	addwf	___ftadd@exp1,w,c
  2886  002142  6E2D               	movwf	??___ftadd& (0+255),c
  2887  002144  0E18               	movlw	24
  2888  002146  642D               	cpfsgt	??___ftadd,c
  2889  002148  D007               	goto	i2l2615
  2890  00214A                     i2l836:
  2891  00214A  C027  F027         	movff	___ftadd@f1,?___ftadd
  2892  00214E  C028  F028         	movff	___ftadd@f1+1,?___ftadd+1
  2893  002152  C029  F029         	movff	___ftadd@f1+2,?___ftadd+2
  2894  002156  D0A3               	goto	i2l833
  2895  002158                     i2l2615:
  2896  002158  0E06               	movlw	6
  2897  00215A  6E30               	movwf	___ftadd@sign,c
  2898  00215C  AE29               	btfss	___ftadd@f1+2,7,c
  2899  00215E  D002               	goto	i2l2621
  2900  002160  8E30               	bsf	___ftadd@sign,7,c
  2901  002162  D000               	goto	i2l2621
  2902  002164                     i2l2621:
  2903  002164  BE2C               	btfsc	___ftadd@f2+2,7,c
  2904  002166  8C30               	bsf	___ftadd@sign,6,c
  2905  002168  8E28               	bsf	___ftadd@f1+1,7,c
  2906  00216A  0EFF               	movlw	255
  2907  00216C  1627               	andwf	___ftadd@f1,f,c
  2908  00216E  0EFF               	movlw	255
  2909  002170  1628               	andwf	___ftadd@f1+1,f,c
  2910  002172  0E00               	movlw	0
  2911  002174  1629               	andwf	___ftadd@f1+2,f,c
  2912  002176  8E2B               	bsf	___ftadd@f2+1,7,c
  2913  002178  0EFF               	movlw	255
  2914  00217A  162A               	andwf	___ftadd@f2,f,c
  2915  00217C  0EFF               	movlw	255
  2916  00217E  162B               	andwf	___ftadd@f2+1,f,c
  2917  002180  0E00               	movlw	0
  2918  002182  162C               	andwf	___ftadd@f2+2,f,c
  2919  002184  5031               	movf	___ftadd@exp2,w,c
  2920  002186  5C32               	subwf	___ftadd@exp1,w,c
  2921  002188  B0D8               	btfsc	status,0,c
  2922  00218A  D01E               	goto	i2l2641
  2923  00218C                     i2l2631:
  2924  00218C  90D8               	bcf	status,0,c
  2925  00218E  362A               	rlcf	___ftadd@f2,f,c
  2926  002190  362B               	rlcf	___ftadd@f2+1,f,c
  2927  002192  362C               	rlcf	___ftadd@f2+2,f,c
  2928  002194  0631               	decf	___ftadd@exp2,f,c
  2929  002196  5032               	movf	___ftadd@exp1,w,c
  2930  002198  1831               	xorwf	___ftadd@exp2,w,c
  2931  00219A  B4D8               	btfsc	status,2,c
  2932  00219C  D00F               	goto	i2l2639
  2933  00219E  0630               	decf	___ftadd@sign,f,c
  2934  0021A0  C030  F02D         	movff	___ftadd@sign,??___ftadd
  2935  0021A4  0E07               	movlw	7
  2936  0021A6  162D               	andwf	??___ftadd,f,c
  2937  0021A8  B4D8               	btfsc	status,2,c
  2938  0021AA  D008               	goto	i2l2639
  2939  0021AC  D7EF               	goto	i2l2631
  2940  0021AE  D006               	goto	i2l2639
  2941  0021B0                     i2l2637:
  2942  0021B0  90D8               	bcf	status,0,c
  2943  0021B2  3229               	rrcf	___ftadd@f1+2,f,c
  2944  0021B4  3228               	rrcf	___ftadd@f1+1,f,c
  2945  0021B6  3227               	rrcf	___ftadd@f1,f,c
  2946  0021B8  2A32               	incf	___ftadd@exp1,f,c
  2947  0021BA  D000               	goto	i2l2639
  2948  0021BC                     i2l2639:
  2949  0021BC  5031               	movf	___ftadd@exp2,w,c
  2950  0021BE  1832               	xorwf	___ftadd@exp1,w,c
  2951  0021C0  B4D8               	btfsc	status,2,c
  2952  0021C2  D024               	goto	i2l847
  2953  0021C4  D7F5               	goto	i2l2637
  2954  0021C6  D022               	goto	i2l847
  2955  0021C8                     i2l2641:
  2956  0021C8  5032               	movf	___ftadd@exp1,w,c
  2957  0021CA  5C31               	subwf	___ftadd@exp2,w,c
  2958  0021CC  B0D8               	btfsc	status,0,c
  2959  0021CE  D01E               	goto	i2l847
  2960  0021D0                     i2l2643:
  2961  0021D0  90D8               	bcf	status,0,c
  2962  0021D2  3627               	rlcf	___ftadd@f1,f,c
  2963  0021D4  3628               	rlcf	___ftadd@f1+1,f,c
  2964  0021D6  3629               	rlcf	___ftadd@f1+2,f,c
  2965  0021D8  0632               	decf	___ftadd@exp1,f,c
  2966  0021DA  5032               	movf	___ftadd@exp1,w,c
  2967  0021DC  1831               	xorwf	___ftadd@exp2,w,c
  2968  0021DE  B4D8               	btfsc	status,2,c
  2969  0021E0  D00F               	goto	i2l2651
  2970  0021E2  0630               	decf	___ftadd@sign,f,c
  2971  0021E4  C030  F02D         	movff	___ftadd@sign,??___ftadd
  2972  0021E8  0E07               	movlw	7
  2973  0021EA  162D               	andwf	??___ftadd,f,c
  2974  0021EC  B4D8               	btfsc	status,2,c
  2975  0021EE  D008               	goto	i2l2651
  2976  0021F0  D7EF               	goto	i2l2643
  2977  0021F2  D006               	goto	i2l2651
  2978  0021F4                     i2l2649:
  2979  0021F4  90D8               	bcf	status,0,c
  2980  0021F6  322C               	rrcf	___ftadd@f2+2,f,c
  2981  0021F8  322B               	rrcf	___ftadd@f2+1,f,c
  2982  0021FA  322A               	rrcf	___ftadd@f2,f,c
  2983  0021FC  2A31               	incf	___ftadd@exp2,f,c
  2984  0021FE  D000               	goto	i2l2651
  2985  002200                     i2l2651:
  2986  002200  5031               	movf	___ftadd@exp2,w,c
  2987  002202  1832               	xorwf	___ftadd@exp1,w,c
  2988  002204  B4D8               	btfsc	status,2,c
  2989  002206  D002               	goto	i2l847
  2990  002208  D7F5               	goto	i2l2649
  2991  00220A  D000               	goto	i2l847
  2992  00220C                     i2l847:
  2993  00220C  AE30               	btfss	___ftadd@sign,7,c
  2994  00220E  D00C               	goto	i2l856
  2995  002210  0EFF               	movlw	255
  2996  002212  1A27               	xorwf	___ftadd@f1,f,c
  2997  002214  0EFF               	movlw	255
  2998  002216  1A28               	xorwf	___ftadd@f1+1,f,c
  2999  002218  0EFF               	movlw	255
  3000  00221A  1A29               	xorwf	___ftadd@f1+2,f,c
  3001  00221C  0E01               	movlw	1
  3002  00221E  2627               	addwf	___ftadd@f1,f,c
  3003  002220  0E00               	movlw	0
  3004  002222  2228               	addwfc	___ftadd@f1+1,f,c
  3005  002224  0E00               	movlw	0
  3006  002226  2229               	addwfc	___ftadd@f1+2,f,c
  3007  002228                     i2l856:
  3008  002228  AC30               	btfss	___ftadd@sign,6,c
  3009  00222A  D00D               	goto	i2l2657
  3010  00222C  0EFF               	movlw	255
  3011  00222E  1A2A               	xorwf	___ftadd@f2,f,c
  3012  002230  0EFF               	movlw	255
  3013  002232  1A2B               	xorwf	___ftadd@f2+1,f,c
  3014  002234  0EFF               	movlw	255
  3015  002236  1A2C               	xorwf	___ftadd@f2+2,f,c
  3016  002238  0E01               	movlw	1
  3017  00223A  262A               	addwf	___ftadd@f2,f,c
  3018  00223C  0E00               	movlw	0
  3019  00223E  222B               	addwfc	___ftadd@f2+1,f,c
  3020  002240  0E00               	movlw	0
  3021  002242  222C               	addwfc	___ftadd@f2+2,f,c
  3022  002244  D000               	goto	i2l2657
  3023  002246                     i2l2657:
  3024  002246  0E00               	movlw	0
  3025  002248  6E30               	movwf	___ftadd@sign,c
  3026  00224A  5027               	movf	___ftadd@f1,w,c
  3027  00224C  262A               	addwf	___ftadd@f2,f,c
  3028  00224E  5028               	movf	___ftadd@f1+1,w,c
  3029  002250  222B               	addwfc	___ftadd@f2+1,f,c
  3030  002252  5029               	movf	___ftadd@f1+2,w,c
  3031  002254  222C               	addwfc	___ftadd@f2+2,f,c
  3032  002256  AE2C               	btfss	___ftadd@f2+2,7,c
  3033  002258  D00F               	goto	i2l2667
  3034  00225A  0EFF               	movlw	255
  3035  00225C  1A2A               	xorwf	___ftadd@f2,f,c
  3036  00225E  0EFF               	movlw	255
  3037  002260  1A2B               	xorwf	___ftadd@f2+1,f,c
  3038  002262  0EFF               	movlw	255
  3039  002264  1A2C               	xorwf	___ftadd@f2+2,f,c
  3040  002266  0E01               	movlw	1
  3041  002268  262A               	addwf	___ftadd@f2,f,c
  3042  00226A  0E00               	movlw	0
  3043  00226C  222B               	addwfc	___ftadd@f2+1,f,c
  3044  00226E  0E00               	movlw	0
  3045  002270  222C               	addwfc	___ftadd@f2+2,f,c
  3046  002272  0E01               	movlw	1
  3047  002274  6E30               	movwf	___ftadd@sign,c
  3048  002276  D000               	goto	i2l2667
  3049  002278                     i2l2667:
  3050  002278  C02A  F001         	movff	___ftadd@f2,___ftpack@arg
  3051  00227C  C02B  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3052  002280  C02C  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3053  002284  C032  F004         	movff	___ftadd@exp1,___ftpack@exp
  3054  002288  C030  F005         	movff	___ftadd@sign,___ftpack@sign
  3055  00228C  EC4B  F013         	call	___ftpack	;wreg free
  3056  002290  C001  F027         	movff	?___ftpack,?___ftadd
  3057  002294  C002  F028         	movff	?___ftpack+1,?___ftadd+1
  3058  002298  C003  F029         	movff	?___ftpack+2,?___ftadd+2
  3059  00229C  D000               	goto	i2l833
  3060  00229E                     i2l833:
  3061  00229E  0012               	return		;funcret
  3062  0022A0                     __end_of___ftadd:
  3063                           	opt stack 0
  3064                           pclatu	equ	0xFFB
  3065                           pclath	equ	0xFFA
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           intcon2	equ	0xFF1
  3074                           indf0	equ	0xFEF
  3075                           postinc0	equ	0xFEE
  3076                           fsr0h	equ	0xFEA
  3077                           fsr0l	equ	0xFE9
  3078                           wreg	equ	0xFE8
  3079                           fsr1h	equ	0xFE2
  3080                           fsr1l	equ	0xFE1
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function _RTD2Angle *****************
  3086 ;; Defined at:
  3087 ;;		line 90 in file "ResolverToDigital.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  RTDAngle        2   38[COMRAM] unsigned int 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;		None
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  3   38[COMRAM] unsigned int 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3101 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    2
  3108 ;; This function calls:
  3109 ;;		___ftmul
  3110 ;;		___lwtoft
  3111 ;; This function is called by:
  3112 ;;		_TMR0Int
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text16
  3117  002B36                     __ptext16:
  3118                           	opt stack 0
  3119  002B36                     _RTD2Angle:
  3120                           	opt stack 22
  3121                           
  3122                           ;ResolverToDigital.c: 92: return 0.087890625 * RTDAngle;
  3123                           
  3124                           ;incstack = 0
  3125  002B36  C027  F009         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3126  002B3A  C028  F00A         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3127  002B3E  EC3A  F016         	call	___lwtoft	;wreg free
  3128  002B42  C009  F018         	movff	?___lwtoft,___ftmul@f1
  3129  002B46  C00A  F019         	movff	?___lwtoft+1,___ftmul@f1+1
  3130  002B4A  C00B  F01A         	movff	?___lwtoft+2,___ftmul@f1+2
  3131  002B4E  0E00               	movlw	0
  3132  002B50  6E1B               	movwf	___ftmul@f2,c
  3133  002B52  0EB4               	movlw	180
  3134  002B54  6E1C               	movwf	___ftmul@f2+1,c
  3135  002B56  0E3D               	movlw	61
  3136  002B58  6E1D               	movwf	___ftmul@f2+2,c
  3137  002B5A  ECEB  F011         	call	___ftmul	;wreg free
  3138  002B5E  C018  F027         	movff	?___ftmul,?_RTD2Angle
  3139  002B62  C019  F028         	movff	?___ftmul+1,?_RTD2Angle+1
  3140  002B66  C01A  F029         	movff	?___ftmul+2,?_RTD2Angle+2
  3141  002B6A  D000               	goto	i2l392
  3142  002B6C                     i2l392:
  3143  002B6C  0012               	return		;funcret
  3144  002B6E                     __end_of_RTD2Angle:
  3145                           	opt stack 0
  3146                           pclatu	equ	0xFFB
  3147                           pclath	equ	0xFFA
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon	equ	0xFF2
  3155                           intcon2	equ	0xFF1
  3156                           indf0	equ	0xFEF
  3157                           postinc0	equ	0xFEE
  3158                           fsr0h	equ	0xFEA
  3159                           fsr0l	equ	0xFE9
  3160                           wreg	equ	0xFE8
  3161                           fsr1h	equ	0xFE2
  3162                           fsr1l	equ	0xFE1
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function ___lwtoft *****************
  3168 ;; Defined at:
  3169 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  c               2    8[COMRAM] unsigned int 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  3    8[COMRAM] float 
  3176 ;; Registers used:
  3177 ;;		wreg, status,2, status,0, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3183 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;Total ram usage:        3 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    1
  3190 ;; This function calls:
  3191 ;;		___ftpack
  3192 ;; This function is called by:
  3193 ;;		_RTD2Angle
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text17
  3198  002C74                     __ptext17:
  3199                           	opt stack 0
  3200  002C74                     ___lwtoft:
  3201                           	opt stack 22
  3202                           
  3203                           ;incstack = 0
  3204  002C74  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3205  002C78  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3206  002C7C  6A03               	clrf	___ftpack@arg+2,c
  3207  002C7E  0E8E               	movlw	142
  3208  002C80  6E04               	movwf	___ftpack@exp,c
  3209  002C82  0E00               	movlw	0
  3210  002C84  6E05               	movwf	___ftpack@sign,c
  3211  002C86  EC4B  F013         	call	___ftpack	;wreg free
  3212  002C8A  C001  F009         	movff	?___ftpack,?___lwtoft
  3213  002C8E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3214  002C92  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3215  002C96  D000               	goto	i2l1039
  3216  002C98                     i2l1039:
  3217  002C98  0012               	return		;funcret
  3218  002C9A                     __end_of___lwtoft:
  3219                           	opt stack 0
  3220                           pclatu	equ	0xFFB
  3221                           pclath	equ	0xFFA
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           intcon	equ	0xFF2
  3229                           intcon2	equ	0xFF1
  3230                           indf0	equ	0xFEF
  3231                           postinc0	equ	0xFEE
  3232                           fsr0h	equ	0xFEA
  3233                           fsr0l	equ	0xFE9
  3234                           wreg	equ	0xFE8
  3235                           fsr1h	equ	0xFE2
  3236                           fsr1l	equ	0xFE1
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function _ImplementPIDMotion *****************
  3242 ;; Defined at:
  3243 ;;		line 28 in file "MotorControl.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  PIDValue        2    4[COMRAM] int 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;		None               void
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:        4 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    1
  3264 ;; This function calls:
  3265 ;;		_abs
  3266 ;; This function is called by:
  3267 ;;		_TMR0Int
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text18
  3272  0028EC                     __ptext18:
  3273                           	opt stack 0
  3274  0028EC                     _ImplementPIDMotion:
  3275                           	opt stack 23
  3276                           
  3277                           ;MotorControl.c: 30: if (PIDValue < 0)
  3278                           
  3279                           ;incstack = 0
  3280  0028EC  AE06               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  3281  0028EE  D002               	goto	i2l2803
  3282                           
  3283                           ;MotorControl.c: 31: CCP3CONbits.P3M1 = 1;
  3284  0028F0  8EB7               	bsf	4023,7,c	;volatile
  3285  0028F2  D009               	goto	i2l2807
  3286  0028F4                     i2l2803:
  3287                           
  3288                           ;MotorControl.c: 32: else if (PIDValue > 0)
  3289  0028F4  BE06               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  3290  0028F6  D007               	goto	i2l2807
  3291  0028F8  5006               	movf	ImplementPIDMotion@PIDValue+1,w,c
  3292  0028FA  E103               	bnz	i2u317_40
  3293  0028FC  0405               	decf	ImplementPIDMotion@PIDValue,w,c
  3294  0028FE  A0D8               	btfss	status,0,c
  3295  002900  D002               	goto	i2l2807
  3296  002902                     i2u317_40:
  3297                           
  3298                           ;MotorControl.c: 33: CCP3CONbits.P3M1 = 0;
  3299  002902  9EB7               	bcf	4023,7,c	;volatile
  3300  002904  D000               	goto	i2l2807
  3301  002906                     i2l2807:
  3302                           
  3303                           ;MotorControl.c: 35: PIDValue = abs(PIDValue);
  3304  002906  C005  F001         	movff	ImplementPIDMotion@PIDValue,abs@a
  3305  00290A  C006  F002         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  3306  00290E  EC13  F016         	call	_abs	;wreg free
  3307  002912  C001  F005         	movff	?_abs,ImplementPIDMotion@PIDValue
  3308  002916  C002  F006         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  3309                           
  3310                           ;MotorControl.c: 36: CCPR3L = (PIDValue >> 2) & 0xFF;
  3311  00291A  C005  F007         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  3312  00291E  C006  F008         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  3313  002922  3408               	rlcf	??_ImplementPIDMotion+1,w,c
  3314  002924  3208               	rrcf	??_ImplementPIDMotion+1,f,c
  3315  002926  3207               	rrcf	??_ImplementPIDMotion,f,c
  3316  002928  3408               	rlcf	??_ImplementPIDMotion+1,w,c
  3317  00292A  3208               	rrcf	??_ImplementPIDMotion+1,f,c
  3318  00292C  3207               	rrcf	??_ImplementPIDMotion,f,c
  3319  00292E  5007               	movf	??_ImplementPIDMotion,w,c
  3320  002930  6EB8               	movwf	4024,c	;volatile
  3321                           
  3322                           ;MotorControl.c: 37: CCP3CONbits.DC3B = (PIDValue & 0x03);
  3323  002932  C005  F007         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  3324  002936  0E03               	movlw	3
  3325  002938  1607               	andwf	??_ImplementPIDMotion,f,c
  3326  00293A  3A07               	swapf	??_ImplementPIDMotion,f,c
  3327  00293C  50B7               	movf	4023,w,c	;volatile
  3328  00293E  1807               	xorwf	??_ImplementPIDMotion,w,c
  3329  002940  0BCF               	andlw	-49
  3330  002942  1807               	xorwf	??_ImplementPIDMotion,w,c
  3331  002944  6EB7               	movwf	4023,c	;volatile
  3332  002946  0012               	return		;funcret
  3333  002948                     __end_of_ImplementPIDMotion:
  3334                           	opt stack 0
  3335                           pclatu	equ	0xFFB
  3336                           pclath	equ	0xFFA
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           intcon2	equ	0xFF1
  3345                           indf0	equ	0xFEF
  3346                           postinc0	equ	0xFEE
  3347                           fsr0h	equ	0xFEA
  3348                           fsr0l	equ	0xFE9
  3349                           wreg	equ	0xFE8
  3350                           fsr1h	equ	0xFE2
  3351                           fsr1l	equ	0xFE1
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _abs *****************
  3357 ;; Defined at:
  3358 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  a               2    0[COMRAM] int 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  2    0[COMRAM] int 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;Total ram usage:        4 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_ImplementPIDMotion
  3382 ;;		_ImplementJSMotion
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text19
  3387  002C26                     __ptext19:
  3388                           	opt stack 0
  3389  002C26                     _abs:
  3390                           	opt stack 23
  3391                           
  3392                           ;incstack = 0
  3393  002C26  AE02               	btfss	abs@a+1,7,c
  3394  002C28  D00D               	goto	i2l445
  3395  002C2A  C001  F003         	movff	abs@a,??_abs
  3396  002C2E  C002  F004         	movff	abs@a+1,??_abs+1
  3397  002C32  1E03               	comf	??_abs,f,c
  3398  002C34  1E04               	comf	??_abs+1,f,c
  3399  002C36  4A03               	infsnz	??_abs,f,c
  3400  002C38  2A04               	incf	??_abs+1,f,c
  3401  002C3A  C003  F001         	movff	??_abs,?_abs
  3402  002C3E  C004  F002         	movff	??_abs+1,?_abs+1
  3403  002C42  D004               	goto	i2l446
  3404  002C44                     i2l445:
  3405  002C44  C001  F001         	movff	abs@a,?_abs
  3406  002C48  C002  F002         	movff	abs@a+1,?_abs+1
  3407  002C4C                     i2l446:
  3408  002C4C  0012               	return		;funcret
  3409  002C4E                     __end_of_abs:
  3410                           	opt stack 0
  3411                           pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           intcon2	equ	0xFF1
  3421                           indf0	equ	0xFEF
  3422                           postinc0	equ	0xFEE
  3423                           fsr0h	equ	0xFEA
  3424                           fsr0l	equ	0xFE9
  3425                           wreg	equ	0xFE8
  3426                           fsr1h	equ	0xFE2
  3427                           fsr1l	equ	0xFE1
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _RCInt *****************
  3433 ;; Defined at:
  3434 ;;		line 19 in file "KeyValue.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  counter         1   83[COMRAM] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;		None               void
  3441 ;; Registers used:
  3442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;Total ram usage:        2 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		_keyValue
  3457 ;;		i2_SerTx
  3458 ;; This function is called by:
  3459 ;;		_ISR
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text20
  3464  0022A0                     __ptext20:
  3465                           	opt stack 0
  3466  0022A0                     _RCInt:
  3467                           	opt stack 21
  3468                           
  3469                           ;KeyValue.c: 21: unsigned char counter = 0;
  3470                           
  3471                           ;incstack = 0
  3472  0022A0  0E00               	movlw	0
  3473  0022A2  6E54               	movwf	RCInt@counter,c
  3474                           
  3475                           ;KeyValue.c: 23: {
  3476                           ;KeyValue.c: 24: while (PIR1bits.RCIF == 0);
  3477                           
  3478                           ;KeyValue.c: 22: do
  3479  0022A4  D000               	goto	i2l207
  3480  0022A6                     i2l207:
  3481  0022A6  AA9E               	btfss	3998,5,c	;volatile
  3482  0022A8  D7FE               	goto	i2l207
  3483                           
  3484                           ;KeyValue.c: 25: received[counter] = RCREG;
  3485  0022AA  5054               	movf	RCInt@counter,w,c
  3486  0022AC  0D01               	mullw	1
  3487  0022AE  0E78               	movlw	low _received
  3488  0022B0  24F3               	addwf	prodl,w,c
  3489  0022B2  6ED9               	movwf	fsr2l,c
  3490  0022B4  0E00               	movlw	high _received
  3491  0022B6  20F4               	addwfc	prodh,w,c
  3492  0022B8  6EDA               	movwf	fsr2h,c
  3493  0022BA  CFAE FFDF          	movff	4014,indf2	;volatile
  3494                           
  3495                           ;KeyValue.c: 26: SerTx(RCREG);
  3496  0022BE  50AE               	movf	4014,w,c	;volatile
  3497  0022C0  ECB0  F016         	call	i2_SerTx
  3498                           
  3499                           ;KeyValue.c: 27: if ((received[counter] == 0x08) || received[counter] == 0x7F)
  3500  0022C4  5054               	movf	RCInt@counter,w,c
  3501  0022C6  0D01               	mullw	1
  3502  0022C8  0E78               	movlw	low _received
  3503  0022CA  24F3               	addwf	prodl,w,c
  3504  0022CC  6ED9               	movwf	fsr2l,c
  3505  0022CE  0E00               	movlw	high _received
  3506  0022D0  20F4               	addwfc	prodh,w,c
  3507  0022D2  6EDA               	movwf	fsr2h,c
  3508  0022D4  0E08               	movlw	8
  3509  0022D6  18DE               	xorwf	postinc2,w,c
  3510  0022D8  B4D8               	btfsc	status,2,c
  3511  0022DA  D00C               	goto	i2l3063
  3512  0022DC  5054               	movf	RCInt@counter,w,c
  3513  0022DE  0D01               	mullw	1
  3514  0022E0  0E78               	movlw	low _received
  3515  0022E2  24F3               	addwf	prodl,w,c
  3516  0022E4  6ED9               	movwf	fsr2l,c
  3517  0022E6  0E00               	movlw	high _received
  3518  0022E8  20F4               	addwfc	prodh,w,c
  3519  0022EA  6EDA               	movwf	fsr2h,c
  3520  0022EC  0E7F               	movlw	127
  3521  0022EE  18DE               	xorwf	postinc2,w,c
  3522  0022F0  A4D8               	btfss	status,2,c
  3523  0022F2  D010               	goto	i2l3069
  3524  0022F4                     i2l3063:
  3525                           
  3526                           ;KeyValue.c: 28: {
  3527                           ;KeyValue.c: 29: if (counter != 0)
  3528  0022F4  5054               	movf	RCInt@counter,w,c
  3529  0022F6  B4D8               	btfsc	status,2,c
  3530  0022F8  D002               	goto	i2l3067
  3531                           
  3532                           ;KeyValue.c: 30: counter--;
  3533  0022FA  0654               	decf	RCInt@counter,f,c
  3534  0022FC  D000               	goto	i2l3067
  3535  0022FE                     i2l3067:
  3536                           
  3537                           ;KeyValue.c: 31: received[counter] = '\0';
  3538  0022FE  5054               	movf	RCInt@counter,w,c
  3539  002300  0D01               	mullw	1
  3540  002302  0E78               	movlw	low _received
  3541  002304  24F3               	addwf	prodl,w,c
  3542  002306  6ED9               	movwf	fsr2l,c
  3543  002308  0E00               	movlw	high _received
  3544  00230A  20F4               	addwfc	prodh,w,c
  3545  00230C  6EDA               	movwf	fsr2h,c
  3546  00230E  0E00               	movlw	0
  3547  002310  6EDF               	movwf	indf2,c
  3548                           
  3549                           ;KeyValue.c: 32: }
  3550  002312  D01A               	goto	i2l3075
  3551  002314                     i2l3069:
  3552                           
  3553                           ;KeyValue.c: 33: else if ((received[counter] != 0x08) && (received[counter] != 0x0D))
  3554  002314  5054               	movf	RCInt@counter,w,c
  3555  002316  0D01               	mullw	1
  3556  002318  0E78               	movlw	low _received
  3557  00231A  24F3               	addwf	prodl,w,c
  3558  00231C  6ED9               	movwf	fsr2l,c
  3559  00231E  0E00               	movlw	high _received
  3560  002320  20F4               	addwfc	prodh,w,c
  3561  002322  6EDA               	movwf	fsr2h,c
  3562  002324  0E08               	movlw	8
  3563  002326  18DE               	xorwf	postinc2,w,c
  3564  002328  B4D8               	btfsc	status,2,c
  3565  00232A  D00E               	goto	i2l3075
  3566  00232C  5054               	movf	RCInt@counter,w,c
  3567  00232E  0D01               	mullw	1
  3568  002330  0E78               	movlw	low _received
  3569  002332  24F3               	addwf	prodl,w,c
  3570  002334  6ED9               	movwf	fsr2l,c
  3571  002336  0E00               	movlw	high _received
  3572  002338  20F4               	addwfc	prodh,w,c
  3573  00233A  6EDA               	movwf	fsr2h,c
  3574  00233C  0E0D               	movlw	13
  3575  00233E  18DE               	xorwf	postinc2,w,c
  3576  002340  B4D8               	btfsc	status,2,c
  3577  002342  D002               	goto	i2l3075
  3578                           
  3579                           ;KeyValue.c: 34: counter++;
  3580  002344  2A54               	incf	RCInt@counter,f,c
  3581  002346  D000               	goto	i2l3075
  3582  002348                     i2l3075:
  3583                           
  3584                           ;KeyValue.c: 35: }
  3585                           ;KeyValue.c: 36: while (RCREG != 0x0D);
  3586  002348  0E0D               	movlw	13
  3587  00234A  18AE               	xorwf	4014,w,c	;volatile
  3588  00234C  A4D8               	btfss	status,2,c
  3589  00234E  D7AB               	goto	i2l207
  3590                           
  3591                           ;KeyValue.c: 38: SerTx(0x0A);
  3592  002350  0E0A               	movlw	10
  3593  002352  ECB0  F016         	call	i2_SerTx
  3594                           
  3595                           ;KeyValue.c: 39: SerTx(0x0D);
  3596  002356  0E0D               	movlw	13
  3597  002358  ECB0  F016         	call	i2_SerTx
  3598                           
  3599                           ;KeyValue.c: 40: keyValue(received, 30);
  3600  00235C  0E78               	movlw	low _received
  3601  00235E  6E48               	movwf	keyValue@str,c
  3602  002360  0E00               	movlw	high _received
  3603  002362  6E49               	movwf	keyValue@str+1,c
  3604  002364  0E00               	movlw	0
  3605  002366  6E4B               	movwf	keyValue@length+1,c
  3606  002368  0E1E               	movlw	30
  3607  00236A  6E4A               	movwf	keyValue@length,c
  3608  00236C  ECD7  F00B         	call	_keyValue	;wreg free
  3609                           
  3610                           ;KeyValue.c: 41: SerTx(0x0A);
  3611  002370  0E0A               	movlw	10
  3612  002372  ECB0  F016         	call	i2_SerTx
  3613                           
  3614                           ;KeyValue.c: 42: SerTx(0x0D);
  3615  002376  0E0D               	movlw	13
  3616  002378  ECB0  F016         	call	i2_SerTx
  3617                           
  3618                           ;KeyValue.c: 44: if (StrippedKey == 0x01)
  3619  00237C  0459               	decf	_StrippedKey,w,c
  3620  00237E  A4D8               	btfss	status,2,c
  3621  002380  D007               	goto	i2l3089
  3622                           
  3623                           ;KeyValue.c: 45: {
  3624                           ;KeyValue.c: 46: SetAngle = StrippedValue;
  3625  002382  C072  F06F         	movff	_StrippedValue,_SetAngle
  3626  002386  C073  F070         	movff	_StrippedValue+1,_SetAngle+1
  3627  00238A  C074  F071         	movff	_StrippedValue+2,_SetAngle+2
  3628                           
  3629                           ;KeyValue.c: 47: }
  3630  00238E  D021               	goto	i2l218
  3631  002390                     i2l3089:
  3632                           
  3633                           ;KeyValue.c: 49: else if (StrippedKey == 0x05)
  3634  002390  0E05               	movlw	5
  3635  002392  1859               	xorwf	_StrippedKey,w,c
  3636  002394  A4D8               	btfss	status,2,c
  3637  002396  D007               	goto	i2l3093
  3638                           
  3639                           ;KeyValue.c: 50: {
  3640                           ;KeyValue.c: 51: Kp = StrippedValue;
  3641  002398  C072  F06C         	movff	_StrippedValue,_Kp
  3642  00239C  C073  F06D         	movff	_StrippedValue+1,_Kp+1
  3643  0023A0  C074  F06E         	movff	_StrippedValue+2,_Kp+2
  3644                           
  3645                           ;KeyValue.c: 52: }
  3646  0023A4  D016               	goto	i2l218
  3647  0023A6                     i2l3093:
  3648                           
  3649                           ;KeyValue.c: 54: else if (StrippedKey == 0x07)
  3650  0023A6  0E07               	movlw	7
  3651  0023A8  1859               	xorwf	_StrippedKey,w,c
  3652  0023AA  A4D8               	btfss	status,2,c
  3653  0023AC  D007               	goto	i2l3097
  3654                           
  3655                           ;KeyValue.c: 55: {
  3656                           ;KeyValue.c: 56: Ki = StrippedValue;
  3657  0023AE  C072  F069         	movff	_StrippedValue,_Ki
  3658  0023B2  C073  F06A         	movff	_StrippedValue+1,_Ki+1
  3659  0023B6  C074  F06B         	movff	_StrippedValue+2,_Ki+2
  3660                           
  3661                           ;KeyValue.c: 57: }
  3662  0023BA  D00B               	goto	i2l218
  3663  0023BC                     i2l3097:
  3664                           
  3665                           ;KeyValue.c: 59: else if (StrippedKey == 0x09)
  3666  0023BC  0E09               	movlw	9
  3667  0023BE  1859               	xorwf	_StrippedKey,w,c
  3668  0023C0  A4D8               	btfss	status,2,c
  3669  0023C2  D007               	goto	i2l218
  3670                           
  3671                           ;KeyValue.c: 60: {
  3672                           ;KeyValue.c: 61: Kd = StrippedValue;
  3673  0023C4  C072  F066         	movff	_StrippedValue,_Kd
  3674  0023C8  C073  F067         	movff	_StrippedValue+1,_Kd+1
  3675  0023CC  C074  F068         	movff	_StrippedValue+2,_Kd+2
  3676  0023D0  D000               	goto	i2l218
  3677  0023D2                     i2l218:
  3678                           
  3679                           ;KeyValue.c: 62: }
  3680                           ;KeyValue.c: 64: PIR1bits.RCIF = 0;
  3681  0023D2  9A9E               	bcf	3998,5,c	;volatile
  3682  0023D4  0012               	return		;funcret
  3683  0023D6                     __end_of_RCInt:
  3684                           	opt stack 0
  3685                           pclatu	equ	0xFFB
  3686                           pclath	equ	0xFFA
  3687                           tblptru	equ	0xFF8
  3688                           tblptrh	equ	0xFF7
  3689                           tblptrl	equ	0xFF6
  3690                           tablat	equ	0xFF5
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           intcon	equ	0xFF2
  3694                           intcon2	equ	0xFF1
  3695                           indf0	equ	0xFEF
  3696                           postinc0	equ	0xFEE
  3697                           fsr0h	equ	0xFEA
  3698                           fsr0l	equ	0xFE9
  3699                           wreg	equ	0xFE8
  3700                           fsr1h	equ	0xFE2
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           postinc2	equ	0xFDE
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _keyValue *****************
  3709 ;; Defined at:
  3710 ;;		line 67 in file "KeyValue.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  str             2   71[COMRAM] PTR unsigned char 
  3713 ;;		 -> received(30), 
  3714 ;;  length          2   73[COMRAM] unsigned short 
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  str_end         2   77[COMRAM] PTR unsigned char 
  3717 ;;		 -> value(10), 
  3718 ;;  x               1   81[COMRAM] unsigned char 
  3719 ;;  y               1   80[COMRAM] unsigned char 
  3720 ;;  flag            1   79[COMRAM] unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;		None               void
  3723 ;; Registers used:
  3724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;Total ram usage:       11 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    3
  3737 ;; This function calls:
  3738 ;;		_isspace
  3739 ;;		_strcmp
  3740 ;;		_strtod
  3741 ;;		i2_SerTx
  3742 ;;		i2_SerTxStr
  3743 ;; This function is called by:
  3744 ;;		_RCInt
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text21
  3749  0017AE                     __ptext21:
  3750                           	opt stack 0
  3751  0017AE                     _keyValue:
  3752                           	opt stack 21
  3753                           
  3754                           ;KeyValue.c: 69: unsigned char x = 0;
  3755                           
  3756                           ;incstack = 0
  3757  0017AE  0E00               	movlw	0
  3758  0017B0  6E52               	movwf	keyValue@x,c
  3759                           
  3760                           ;KeyValue.c: 70: unsigned char y = 0;
  3761  0017B2  0E00               	movlw	0
  3762  0017B4  6E51               	movwf	keyValue@y,c
  3763  0017B6  D00F               	goto	i2l2849
  3764  0017B8                     i2l2843:
  3765                           
  3766                           ;KeyValue.c: 75: {
  3767                           ;KeyValue.c: 76: x++;
  3768  0017B8  2A52               	incf	keyValue@x,f,c
  3769                           
  3770                           ;KeyValue.c: 77: if (str[x] == '=')
  3771  0017BA  5052               	movf	keyValue@x,w,c
  3772  0017BC  0D01               	mullw	1
  3773  0017BE  50F3               	movf	prodl,w,c
  3774  0017C0  2448               	addwf	keyValue@str,w,c
  3775  0017C2  6ED9               	movwf	fsr2l,c
  3776  0017C4  50F4               	movf	prodh,w,c
  3777  0017C6  2049               	addwfc	keyValue@str+1,w,c
  3778  0017C8  6EDA               	movwf	fsr2h,c
  3779  0017CA  0E3D               	movlw	61
  3780  0017CC  18DE               	xorwf	postinc2,w,c
  3781  0017CE  A4D8               	btfss	status,2,c
  3782  0017D0  D002               	goto	i2l2849
  3783                           
  3784                           ;KeyValue.c: 78: {
  3785                           ;KeyValue.c: 79: flag = 1;
  3786  0017D2  0E01               	movlw	1
  3787  0017D4  D001               	goto	L9
  3788  0017D6                     i2l2849:
  3789                           
  3790                           ;KeyValue.c: 81: else
  3791                           ;KeyValue.c: 82: flag = 0;
  3792  0017D6  0E00               	movlw	0
  3793  0017D8                     L9:
  3794  0017D8  6E50               	movwf	keyValue@flag,c
  3795  0017DA  D000               	goto	i2l2851
  3796  0017DC                     i2l2851:
  3797  0017DC  5052               	movf	keyValue@x,w,c
  3798  0017DE  0D01               	mullw	1
  3799  0017E0  50F3               	movf	prodl,w,c
  3800  0017E2  2448               	addwf	keyValue@str,w,c
  3801  0017E4  6ED9               	movwf	fsr2l,c
  3802  0017E6  50F4               	movf	prodh,w,c
  3803  0017E8  2049               	addwfc	keyValue@str+1,w,c
  3804  0017EA  6EDA               	movwf	fsr2h,c
  3805  0017EC  0E3D               	movlw	61
  3806  0017EE  18DE               	xorwf	postinc2,w,c
  3807  0017F0  B4D8               	btfsc	status,2,c
  3808  0017F2  D00B               	goto	i2l2855
  3809  0017F4  5052               	movf	keyValue@x,w,c
  3810  0017F6  6E4C               	movwf	??_keyValue& (0+255),c
  3811  0017F8  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  3812  0017FA  504A               	movf	keyValue@length,w,c
  3813  0017FC  5C4C               	subwf	??_keyValue,w,c
  3814  0017FE  504B               	movf	keyValue@length+1,w,c
  3815  001800  584D               	subwfb	??_keyValue+1,w,c
  3816  001802  B0D8               	btfsc	status,0,c
  3817  001804  D002               	goto	i2l2855
  3818  001806  D7D8               	goto	i2l2843
  3819  001808  D000               	goto	i2l2855
  3820  00180A                     i2l2855:
  3821                           
  3822                           ;KeyValue.c: 83: }
  3823                           ;KeyValue.c: 84: if ((x < length) && flag)
  3824  00180A  5052               	movf	keyValue@x,w,c
  3825  00180C  6E4C               	movwf	??_keyValue& (0+255),c
  3826  00180E  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  3827  001810  504A               	movf	keyValue@length,w,c
  3828  001812  5C4C               	subwf	??_keyValue,w,c
  3829  001814  504B               	movf	keyValue@length+1,w,c
  3830  001816  584D               	subwfb	??_keyValue+1,w,c
  3831  001818  B0D8               	btfsc	status,0,c
  3832  00181A  D100               	goto	i2l2921
  3833  00181C  5050               	movf	keyValue@flag,w,c
  3834  00181E  B4D8               	btfsc	status,2,c
  3835  001820  D0FD               	goto	i2l2921
  3836                           
  3837                           ;KeyValue.c: 85: {
  3838                           ;KeyValue.c: 86: for (y = 0; y < x && y < 5; y++)
  3839  001822  0E00               	movlw	0
  3840  001824  6E51               	movwf	keyValue@y,c
  3841  001826  D022               	goto	i2l2867
  3842  001828                     i2l2861:
  3843                           
  3844                           ;KeyValue.c: 87: {
  3845                           ;KeyValue.c: 88: if (isspace(str[y]) == 0)
  3846  001828  5051               	movf	keyValue@y,w,c
  3847  00182A  0D01               	mullw	1
  3848  00182C  50F3               	movf	prodl,w,c
  3849  00182E  2448               	addwf	keyValue@str,w,c
  3850  001830  6ED9               	movwf	fsr2l,c
  3851  001832  50F4               	movf	prodh,w,c
  3852  001834  2049               	addwfc	keyValue@str+1,w,c
  3853  001836  6EDA               	movwf	fsr2h,c
  3854  001838  50DF               	movf	indf2,w,c
  3855  00183A  ECE9  F015         	call	_isspace
  3856  00183E  B0D8               	btfsc	status,0,c
  3857  001840  D013               	goto	i2l2865
  3858                           
  3859                           ;KeyValue.c: 89: key[y] = str[y];
  3860  001842  5051               	movf	keyValue@y,w,c
  3861  001844  0D01               	mullw	1
  3862  001846  50F3               	movf	prodl,w,c
  3863  001848  2448               	addwf	keyValue@str,w,c
  3864  00184A  6ED9               	movwf	fsr2l,c
  3865  00184C  50F4               	movf	prodh,w,c
  3866  00184E  2049               	addwfc	keyValue@str+1,w,c
  3867  001850  6EDA               	movwf	fsr2h,c
  3868  001852  5051               	movf	keyValue@y,w,c
  3869  001854  0D01               	mullw	1
  3870  001856  0E5A               	movlw	low _key
  3871  001858  24F3               	addwf	prodl,w,c
  3872  00185A  6EE1               	movwf	fsr1l,c
  3873  00185C  0E00               	movlw	high _key
  3874  00185E  20F4               	addwfc	prodh,w,c
  3875  001860  6EE2               	movwf	fsr1h,c
  3876  001862  CFDF FFE7          	movff	indf2,indf1
  3877  001866  D000               	goto	i2l2865
  3878  001868                     i2l2865:
  3879  001868  2A51               	incf	keyValue@y,f,c
  3880  00186A  D000               	goto	i2l2867
  3881  00186C                     i2l2867:
  3882  00186C  5052               	movf	keyValue@x,w,c
  3883  00186E  5C51               	subwf	keyValue@y,w,c
  3884  001870  B0D8               	btfsc	status,0,c
  3885  001872  D004               	goto	i2l2871
  3886  001874  0E04               	movlw	4
  3887  001876  6451               	cpfsgt	keyValue@y,c
  3888  001878  D7D7               	goto	i2l2861
  3889  00187A  D000               	goto	i2l2871
  3890  00187C                     i2l2871:
  3891                           
  3892                           ;KeyValue.c: 90: }
  3893                           ;KeyValue.c: 92: SerTxStr("Key: ");
  3894  00187C  0E30               	movlw	low STR_1
  3895  00187E  6E02               	movwf	i2SerTxStr@string,c
  3896  001880  0E10               	movlw	high STR_1
  3897  001882  6E03               	movwf	i2SerTxStr@string+1,c
  3898  001884  ECFE  F014         	call	i2_SerTxStr	;wreg free
  3899                           
  3900                           ;KeyValue.c: 93: SerTxStr(key);
  3901  001888  0E5A               	movlw	low _key
  3902  00188A  6E02               	movwf	i2SerTxStr@string,c
  3903  00188C  0E00               	movlw	high _key
  3904  00188E  6E03               	movwf	i2SerTxStr@string+1,c
  3905  001890  ECFE  F014         	call	i2_SerTxStr	;wreg free
  3906                           
  3907                           ;KeyValue.c: 95: for (y = 0; str[x + 1] != (0); y++)
  3908  001894  0E00               	movlw	0
  3909  001896  6E51               	movwf	keyValue@y,c
  3910  001898  D015               	goto	i2l2881
  3911  00189A                     i2l2875:
  3912                           
  3913                           ;KeyValue.c: 96: {
  3914                           ;KeyValue.c: 97: x++;
  3915  00189A  2A52               	incf	keyValue@x,f,c
  3916                           
  3917                           ;KeyValue.c: 99: value[y] = str[x];
  3918  00189C  5052               	movf	keyValue@x,w,c
  3919  00189E  0D01               	mullw	1
  3920  0018A0  50F3               	movf	prodl,w,c
  3921  0018A2  2448               	addwf	keyValue@str,w,c
  3922  0018A4  6ED9               	movwf	fsr2l,c
  3923  0018A6  50F4               	movf	prodh,w,c
  3924  0018A8  2049               	addwfc	keyValue@str+1,w,c
  3925  0018AA  6EDA               	movwf	fsr2h,c
  3926  0018AC  5051               	movf	keyValue@y,w,c
  3927  0018AE  0D01               	mullw	1
  3928  0018B0  0E96               	movlw	low _value
  3929  0018B2  24F3               	addwf	prodl,w,c
  3930  0018B4  6EE1               	movwf	fsr1l,c
  3931  0018B6  0E00               	movlw	high _value
  3932  0018B8  20F4               	addwfc	prodh,w,c
  3933  0018BA  6EE2               	movwf	fsr1h,c
  3934  0018BC  CFDF FFE7          	movff	indf2,indf1
  3935  0018C0  2A51               	incf	keyValue@y,f,c
  3936  0018C2  D000               	goto	i2l2881
  3937  0018C4                     i2l2881:
  3938  0018C4  5052               	movf	keyValue@x,w,c
  3939  0018C6  6E4C               	movwf	??_keyValue& (0+255),c
  3940  0018C8  6A4D               	clrf	(??_keyValue+1)& (0+255),c
  3941  0018CA  0E01               	movlw	1
  3942  0018CC  264C               	addwf	??_keyValue,f,c
  3943  0018CE  0E00               	movlw	0
  3944  0018D0  224D               	addwfc	??_keyValue+1,f,c
  3945  0018D2  504C               	movf	??_keyValue,w,c
  3946  0018D4  2448               	addwf	keyValue@str,w,c
  3947  0018D6  6ED9               	movwf	fsr2l,c
  3948  0018D8  504D               	movf	??_keyValue+1,w,c
  3949  0018DA  2049               	addwfc	keyValue@str+1,w,c
  3950  0018DC  6EDA               	movwf	fsr2h,c
  3951  0018DE  50DF               	movf	indf2,w,c
  3952  0018E0  A4D8               	btfss	status,2,c
  3953  0018E2  D7DB               	goto	i2l2875
  3954                           
  3955                           ;KeyValue.c: 100: }
  3956                           ;KeyValue.c: 101: SerTxStr("   Value: ");
  3957  0018E4  0E25               	movlw	low STR_2
  3958  0018E6  6E02               	movwf	i2SerTxStr@string,c
  3959  0018E8  0E10               	movlw	high STR_2
  3960  0018EA  6E03               	movwf	i2SerTxStr@string+1,c
  3961  0018EC  ECFE  F014         	call	i2_SerTxStr	;wreg free
  3962                           
  3963                           ;KeyValue.c: 102: SerTxStr(value);
  3964  0018F0  0E96               	movlw	low _value
  3965  0018F2  6E02               	movwf	i2SerTxStr@string,c
  3966  0018F4  0E00               	movlw	high _value
  3967  0018F6  6E03               	movwf	i2SerTxStr@string+1,c
  3968  0018F8  ECFE  F014         	call	i2_SerTxStr	;wreg free
  3969                           
  3970                           ;KeyValue.c: 104: if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  3971  0018FC  0E5A               	movlw	low _key
  3972  0018FE  6E01               	movwf	strcmp@s1,c
  3973  001900  0E00               	movlw	high _key
  3974  001902  6E02               	movwf	strcmp@s1+1,c
  3975  001904  0E3E               	movlw	low STR_3
  3976  001906  6E03               	movwf	strcmp@s2,c
  3977  001908  0E10               	movlw	high STR_3
  3978  00190A  6E04               	movwf	strcmp@s2+1,c
  3979  00190C  EC2A  F015         	call	_strcmp	;wreg free
  3980  001910  5001               	movf	?_strcmp,w,c
  3981  001912  1002               	iorwf	?_strcmp+1,w,c
  3982  001914  B4D8               	btfsc	status,2,c
  3983  001916  D00E               	goto	i2l2889
  3984  001918  0E5A               	movlw	low _key
  3985  00191A  6E01               	movwf	strcmp@s1,c
  3986  00191C  0E00               	movlw	high _key
  3987  00191E  6E02               	movwf	strcmp@s1+1,c
  3988  001920  0E46               	movlw	low STR_4
  3989  001922  6E03               	movwf	strcmp@s2,c
  3990  001924  0E10               	movlw	high STR_4
  3991  001926  6E04               	movwf	strcmp@s2+1,c
  3992  001928  EC2A  F015         	call	_strcmp	;wreg free
  3993  00192C  5001               	movf	?_strcmp,w,c
  3994  00192E  1002               	iorwf	?_strcmp+1,w,c
  3995  001930  A4D8               	btfss	status,2,c
  3996  001932  D006               	goto	i2l2893
  3997  001934                     i2l2889:
  3998                           
  3999                           ;KeyValue.c: 105: {
  4000                           ;KeyValue.c: 106: StrippedKey = 0x01;
  4001  001934  0E01               	movlw	1
  4002  001936  6E59               	movwf	_StrippedKey,c
  4003                           
  4004                           ;KeyValue.c: 107: SerTx(';');
  4005  001938  0E3B               	movlw	59
  4006  00193A  ECB0  F016         	call	i2_SerTx
  4007                           
  4008                           ;KeyValue.c: 108: }
  4009  00193E  D197               	goto	i2l2993
  4010  001940                     i2l2893:
  4011                           
  4012                           ;KeyValue.c: 110: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  4013  001940  0E5A               	movlw	low _key
  4014  001942  6E01               	movwf	strcmp@s1,c
  4015  001944  0E00               	movlw	high _key
  4016  001946  6E02               	movwf	strcmp@s1+1,c
  4017  001948  0E50               	movlw	low STR_5
  4018  00194A  6E03               	movwf	strcmp@s2,c
  4019  00194C  0E10               	movlw	high STR_5
  4020  00194E  6E04               	movwf	strcmp@s2+1,c
  4021  001950  EC2A  F015         	call	_strcmp	;wreg free
  4022  001954  5001               	movf	?_strcmp,w,c
  4023  001956  1002               	iorwf	?_strcmp+1,w,c
  4024  001958  B4D8               	btfsc	status,2,c
  4025  00195A  D00E               	goto	i2l2897
  4026  00195C  0E5A               	movlw	low _key
  4027  00195E  6E01               	movwf	strcmp@s1,c
  4028  001960  0E00               	movlw	high _key
  4029  001962  6E02               	movwf	strcmp@s1+1,c
  4030  001964  0E5C               	movlw	low STR_6
  4031  001966  6E03               	movwf	strcmp@s2,c
  4032  001968  0E10               	movlw	high STR_6
  4033  00196A  6E04               	movwf	strcmp@s2+1,c
  4034  00196C  EC2A  F015         	call	_strcmp	;wreg free
  4035  001970  5001               	movf	?_strcmp,w,c
  4036  001972  1002               	iorwf	?_strcmp+1,w,c
  4037  001974  A4D8               	btfss	status,2,c
  4038  001976  D006               	goto	i2l2901
  4039  001978                     i2l2897:
  4040                           
  4041                           ;KeyValue.c: 111: {
  4042                           ;KeyValue.c: 112: StrippedKey = 0x05;
  4043  001978  0E05               	movlw	5
  4044  00197A  6E59               	movwf	_StrippedKey,c
  4045                           
  4046                           ;KeyValue.c: 113: SerTx(';');
  4047  00197C  0E3B               	movlw	59
  4048  00197E  ECB0  F016         	call	i2_SerTx
  4049                           
  4050                           ;KeyValue.c: 114: }
  4051  001982  D175               	goto	i2l2993
  4052  001984                     i2l2901:
  4053                           
  4054                           ;KeyValue.c: 116: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  4055  001984  0E5A               	movlw	low _key
  4056  001986  6E01               	movwf	strcmp@s1,c
  4057  001988  0E00               	movlw	high _key
  4058  00198A  6E02               	movwf	strcmp@s1+1,c
  4059  00198C  0E4D               	movlw	low STR_7
  4060  00198E  6E03               	movwf	strcmp@s2,c
  4061  001990  0E10               	movlw	high STR_7
  4062  001992  6E04               	movwf	strcmp@s2+1,c
  4063  001994  EC2A  F015         	call	_strcmp	;wreg free
  4064  001998  5001               	movf	?_strcmp,w,c
  4065  00199A  1002               	iorwf	?_strcmp+1,w,c
  4066  00199C  B4D8               	btfsc	status,2,c
  4067  00199E  D00E               	goto	i2l2905
  4068  0019A0  0E5A               	movlw	low _key
  4069  0019A2  6E01               	movwf	strcmp@s1,c
  4070  0019A4  0E00               	movlw	high _key
  4071  0019A6  6E02               	movwf	strcmp@s1+1,c
  4072  0019A8  0E59               	movlw	low STR_8
  4073  0019AA  6E03               	movwf	strcmp@s2,c
  4074  0019AC  0E10               	movlw	high STR_8
  4075  0019AE  6E04               	movwf	strcmp@s2+1,c
  4076  0019B0  EC2A  F015         	call	_strcmp	;wreg free
  4077  0019B4  5001               	movf	?_strcmp,w,c
  4078  0019B6  1002               	iorwf	?_strcmp+1,w,c
  4079  0019B8  A4D8               	btfss	status,2,c
  4080  0019BA  D006               	goto	i2l2909
  4081  0019BC                     i2l2905:
  4082                           
  4083                           ;KeyValue.c: 117: {
  4084                           ;KeyValue.c: 118: StrippedKey = 0x07;
  4085  0019BC  0E07               	movlw	7
  4086  0019BE  6E59               	movwf	_StrippedKey,c
  4087                           
  4088                           ;KeyValue.c: 119: SerTx(';');
  4089  0019C0  0E3B               	movlw	59
  4090  0019C2  ECB0  F016         	call	i2_SerTx
  4091                           
  4092                           ;KeyValue.c: 120: }
  4093  0019C6  D153               	goto	i2l2993
  4094  0019C8                     i2l2909:
  4095                           
  4096                           ;KeyValue.c: 122: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  4097  0019C8  0E5A               	movlw	low _key
  4098  0019CA  6E01               	movwf	strcmp@s1,c
  4099  0019CC  0E00               	movlw	high _key
  4100  0019CE  6E02               	movwf	strcmp@s1+1,c
  4101  0019D0  0E4A               	movlw	low STR_9
  4102  0019D2  6E03               	movwf	strcmp@s2,c
  4103  0019D4  0E10               	movlw	high STR_9
  4104  0019D6  6E04               	movwf	strcmp@s2+1,c
  4105  0019D8  EC2A  F015         	call	_strcmp	;wreg free
  4106  0019DC  5001               	movf	?_strcmp,w,c
  4107  0019DE  1002               	iorwf	?_strcmp+1,w,c
  4108  0019E0  B4D8               	btfsc	status,2,c
  4109  0019E2  D00E               	goto	i2l2913
  4110  0019E4  0E5A               	movlw	low _key
  4111  0019E6  6E01               	movwf	strcmp@s1,c
  4112  0019E8  0E00               	movlw	high _key
  4113  0019EA  6E02               	movwf	strcmp@s1+1,c
  4114  0019EC  0E56               	movlw	low STR_10
  4115  0019EE  6E03               	movwf	strcmp@s2,c
  4116  0019F0  0E10               	movlw	high STR_10
  4117  0019F2  6E04               	movwf	strcmp@s2+1,c
  4118  0019F4  EC2A  F015         	call	_strcmp	;wreg free
  4119  0019F8  5001               	movf	?_strcmp,w,c
  4120  0019FA  1002               	iorwf	?_strcmp+1,w,c
  4121  0019FC  A4D8               	btfss	status,2,c
  4122  0019FE  D006               	goto	i2l2917
  4123  001A00                     i2l2913:
  4124                           
  4125                           ;KeyValue.c: 123: {
  4126                           ;KeyValue.c: 124: StrippedKey = 0x09;
  4127  001A00  0E09               	movlw	9
  4128  001A02  6E59               	movwf	_StrippedKey,c
  4129                           
  4130                           ;KeyValue.c: 125: SerTx(';');
  4131  001A04  0E3B               	movlw	59
  4132  001A06  ECB0  F016         	call	i2_SerTx
  4133                           
  4134                           ;KeyValue.c: 126: }
  4135  001A0A  D131               	goto	i2l2993
  4136  001A0C                     i2l2917:
  4137                           
  4138                           ;KeyValue.c: 128: else
  4139                           ;KeyValue.c: 129: {
  4140                           ;KeyValue.c: 130: SerTxStr("???");
  4141  001A0C  0E36               	movlw	low STR_11
  4142  001A0E  6E02               	movwf	i2SerTxStr@string,c
  4143  001A10  0E10               	movlw	high STR_11
  4144  001A12  6E03               	movwf	i2SerTxStr@string+1,c
  4145  001A14  ECFE  F014         	call	i2_SerTxStr	;wreg free
  4146  001A18  D127               	goto	i2l2991
  4147                           
  4148                           ;KeyValue.c: 132: }
  4149                           ;KeyValue.c: 133: }
  4150                           
  4151                           ;KeyValue.c: 131: StrippedKey = 0;
  4152  001A1A  D129               	goto	i2l2993
  4153  001A1C                     i2l2921:
  4154                           
  4155                           ;KeyValue.c: 135: else if (flag == 0)
  4156  001A1C  5050               	movf	keyValue@flag,w,c
  4157  001A1E  A4D8               	btfss	status,2,c
  4158  001A20  D126               	goto	i2l2993
  4159                           
  4160                           ;KeyValue.c: 136: {
  4161                           ;KeyValue.c: 137: y = 0;
  4162  001A22  0E00               	movlw	0
  4163  001A24  6E51               	movwf	keyValue@y,c
  4164                           
  4165                           ;KeyValue.c: 138: while (str[y] != 0x0D)
  4166  001A26  D014               	goto	i2l2929
  4167  001A28                     i2l2925:
  4168                           
  4169                           ;KeyValue.c: 139: {
  4170                           ;KeyValue.c: 141: key[y] = str[y];
  4171  001A28  5051               	movf	keyValue@y,w,c
  4172  001A2A  0D01               	mullw	1
  4173  001A2C  50F3               	movf	prodl,w,c
  4174  001A2E  2448               	addwf	keyValue@str,w,c
  4175  001A30  6ED9               	movwf	fsr2l,c
  4176  001A32  50F4               	movf	prodh,w,c
  4177  001A34  2049               	addwfc	keyValue@str+1,w,c
  4178  001A36  6EDA               	movwf	fsr2h,c
  4179  001A38  5051               	movf	keyValue@y,w,c
  4180  001A3A  0D01               	mullw	1
  4181  001A3C  0E5A               	movlw	low _key
  4182  001A3E  24F3               	addwf	prodl,w,c
  4183  001A40  6EE1               	movwf	fsr1l,c
  4184  001A42  0E00               	movlw	high _key
  4185  001A44  20F4               	addwfc	prodh,w,c
  4186  001A46  6EE2               	movwf	fsr1h,c
  4187  001A48  CFDF FFE7          	movff	indf2,indf1
  4188                           
  4189                           ;KeyValue.c: 142: y++;
  4190  001A4C  2A51               	incf	keyValue@y,f,c
  4191  001A4E  D000               	goto	i2l2929
  4192  001A50                     i2l2929:
  4193  001A50  5051               	movf	keyValue@y,w,c
  4194  001A52  0D01               	mullw	1
  4195  001A54  50F3               	movf	prodl,w,c
  4196  001A56  2448               	addwf	keyValue@str,w,c
  4197  001A58  6ED9               	movwf	fsr2l,c
  4198  001A5A  50F4               	movf	prodh,w,c
  4199  001A5C  2049               	addwfc	keyValue@str+1,w,c
  4200  001A5E  6EDA               	movwf	fsr2h,c
  4201  001A60  0E0D               	movlw	13
  4202  001A62  18DE               	xorwf	postinc2,w,c
  4203  001A64  A4D8               	btfss	status,2,c
  4204  001A66  D7E0               	goto	i2l2925
  4205                           
  4206                           ;KeyValue.c: 143: }
  4207                           ;KeyValue.c: 145: SerTxStr("Key: ");
  4208  001A68  0E30               	movlw	low STR_1
  4209  001A6A  6E02               	movwf	i2SerTxStr@string,c
  4210  001A6C  0E10               	movlw	high STR_1
  4211  001A6E  6E03               	movwf	i2SerTxStr@string+1,c
  4212  001A70  ECFE  F014         	call	i2_SerTxStr	;wreg free
  4213                           
  4214                           ;KeyValue.c: 146: SerTxStr(key);
  4215  001A74  0E5A               	movlw	low _key
  4216  001A76  6E02               	movwf	i2SerTxStr@string,c
  4217  001A78  0E00               	movlw	high _key
  4218  001A7A  6E03               	movwf	i2SerTxStr@string+1,c
  4219  001A7C  ECFE  F014         	call	i2_SerTxStr	;wreg free
  4220                           
  4221                           ;KeyValue.c: 148: if ((strcmp(key, "AZ") == 0) || (strcmp(key, "az") == 0))
  4222  001A80  0E5A               	movlw	low _key
  4223  001A82  6E01               	movwf	strcmp@s1,c
  4224  001A84  0E00               	movlw	high _key
  4225  001A86  6E02               	movwf	strcmp@s1+1,c
  4226  001A88  0E53               	movlw	low STR_13
  4227  001A8A  6E03               	movwf	strcmp@s2,c
  4228  001A8C  0E10               	movlw	high STR_13
  4229  001A8E  6E04               	movwf	strcmp@s2+1,c
  4230  001A90  EC2A  F015         	call	_strcmp	;wreg free
  4231  001A94  5001               	movf	?_strcmp,w,c
  4232  001A96  1002               	iorwf	?_strcmp+1,w,c
  4233  001A98  B4D8               	btfsc	status,2,c
  4234  001A9A  D00E               	goto	i2l2937
  4235  001A9C  0E5A               	movlw	low _key
  4236  001A9E  6E01               	movwf	strcmp@s1,c
  4237  001AA0  0E00               	movlw	high _key
  4238  001AA2  6E02               	movwf	strcmp@s1+1,c
  4239  001AA4  0E5F               	movlw	low STR_14
  4240  001AA6  6E03               	movwf	strcmp@s2,c
  4241  001AA8  0E10               	movlw	high STR_14
  4242  001AAA  6E04               	movwf	strcmp@s2+1,c
  4243  001AAC  EC2A  F015         	call	_strcmp	;wreg free
  4244  001AB0  5001               	movf	?_strcmp,w,c
  4245  001AB2  1002               	iorwf	?_strcmp+1,w,c
  4246  001AB4  A4D8               	btfss	status,2,c
  4247  001AB6  D006               	goto	i2l2941
  4248  001AB8                     i2l2937:
  4249                           
  4250                           ;KeyValue.c: 149: {
  4251                           ;KeyValue.c: 150: AZEL = 1;
  4252  001AB8  0E01               	movlw	1
  4253  001ABA  6E5F               	movwf	_AZEL,c
  4254                           
  4255                           ;KeyValue.c: 151: SerTx(';');
  4256  001ABC  0E3B               	movlw	59
  4257  001ABE  ECB0  F016         	call	i2_SerTx
  4258                           
  4259                           ;KeyValue.c: 152: }
  4260  001AC2  D0D5               	goto	i2l2993
  4261  001AC4                     i2l2941:
  4262                           
  4263                           ;KeyValue.c: 154: else if ((strcmp(key, "EL") == 0) || (strcmp(key, "el") == 0))
  4264  001AC4  0E5A               	movlw	low _key
  4265  001AC6  6E01               	movwf	strcmp@s1,c
  4266  001AC8  0E00               	movlw	high _key
  4267  001ACA  6E02               	movwf	strcmp@s1+1,c
  4268  001ACC  0E3B               	movlw	low (STR_19+1)
  4269  001ACE  6E03               	movwf	strcmp@s2,c
  4270  001AD0  0E10               	movlw	high (STR_19+1)
  4271  001AD2  6E04               	movwf	strcmp@s2+1,c
  4272  001AD4  EC2A  F015         	call	_strcmp	;wreg free
  4273  001AD8  5001               	movf	?_strcmp,w,c
  4274  001ADA  1002               	iorwf	?_strcmp+1,w,c
  4275  001ADC  B4D8               	btfsc	status,2,c
  4276  001ADE  D00E               	goto	i2l2945
  4277  001AE0  0E5A               	movlw	low _key
  4278  001AE2  6E01               	movwf	strcmp@s1,c
  4279  001AE4  0E00               	movlw	high _key
  4280  001AE6  6E02               	movwf	strcmp@s1+1,c
  4281  001AE8  0E43               	movlw	low (STR_20+1)
  4282  001AEA  6E03               	movwf	strcmp@s2,c
  4283  001AEC  0E10               	movlw	high (STR_20+1)
  4284  001AEE  6E04               	movwf	strcmp@s2+1,c
  4285  001AF0  EC2A  F015         	call	_strcmp	;wreg free
  4286  001AF4  5001               	movf	?_strcmp,w,c
  4287  001AF6  1002               	iorwf	?_strcmp+1,w,c
  4288  001AF8  A4D8               	btfss	status,2,c
  4289  001AFA  D006               	goto	i2l2949
  4290  001AFC                     i2l2945:
  4291                           
  4292                           ;KeyValue.c: 155: {
  4293                           ;KeyValue.c: 156: AZEL = 2;
  4294  001AFC  0E02               	movlw	2
  4295  001AFE  6E5F               	movwf	_AZEL,c
  4296                           
  4297                           ;KeyValue.c: 157: SerTx(';');
  4298  001B00  0E3B               	movlw	59
  4299  001B02  ECB0  F016         	call	i2_SerTx
  4300                           
  4301                           ;KeyValue.c: 158: }
  4302  001B06  D0B3               	goto	i2l2993
  4303  001B08                     i2l2949:
  4304                           
  4305                           ;KeyValue.c: 160: else if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  4306  001B08  0E5A               	movlw	low _key
  4307  001B0A  6E01               	movwf	strcmp@s1,c
  4308  001B0C  0E00               	movlw	high _key
  4309  001B0E  6E02               	movwf	strcmp@s1+1,c
  4310  001B10  0E3E               	movlw	low STR_3
  4311  001B12  6E03               	movwf	strcmp@s2,c
  4312  001B14  0E10               	movlw	high STR_3
  4313  001B16  6E04               	movwf	strcmp@s2+1,c
  4314  001B18  EC2A  F015         	call	_strcmp	;wreg free
  4315  001B1C  5001               	movf	?_strcmp,w,c
  4316  001B1E  1002               	iorwf	?_strcmp+1,w,c
  4317  001B20  B4D8               	btfsc	status,2,c
  4318  001B22  D00E               	goto	i2l2953
  4319  001B24  0E5A               	movlw	low _key
  4320  001B26  6E01               	movwf	strcmp@s1,c
  4321  001B28  0E00               	movlw	high _key
  4322  001B2A  6E02               	movwf	strcmp@s1+1,c
  4323  001B2C  0E46               	movlw	low STR_4
  4324  001B2E  6E03               	movwf	strcmp@s2,c
  4325  001B30  0E10               	movlw	high STR_4
  4326  001B32  6E04               	movwf	strcmp@s2+1,c
  4327  001B34  EC2A  F015         	call	_strcmp	;wreg free
  4328  001B38  5001               	movf	?_strcmp,w,c
  4329  001B3A  1002               	iorwf	?_strcmp+1,w,c
  4330  001B3C  A4D8               	btfss	status,2,c
  4331  001B3E  D006               	goto	i2l2957
  4332  001B40                     i2l2953:
  4333                           
  4334                           ;KeyValue.c: 161: {
  4335                           ;KeyValue.c: 162: StrippedKey = 0x02;
  4336  001B40  0E02               	movlw	2
  4337  001B42  6E59               	movwf	_StrippedKey,c
  4338                           
  4339                           ;KeyValue.c: 163: SerTx(';');
  4340  001B44  0E3B               	movlw	59
  4341  001B46  ECB0  F016         	call	i2_SerTx
  4342                           
  4343                           ;KeyValue.c: 164: }
  4344  001B4A  D091               	goto	i2l2993
  4345  001B4C                     i2l2957:
  4346                           
  4347                           ;KeyValue.c: 166: else if ((strcmp(key, "VEL") == 0) || (strcmp(key, "vel") == 0))
  4348  001B4C  0E5A               	movlw	low _key
  4349  001B4E  6E01               	movwf	strcmp@s1,c
  4350  001B50  0E00               	movlw	high _key
  4351  001B52  6E02               	movwf	strcmp@s1+1,c
  4352  001B54  0E3A               	movlw	low STR_19
  4353  001B56  6E03               	movwf	strcmp@s2,c
  4354  001B58  0E10               	movlw	high STR_19
  4355  001B5A  6E04               	movwf	strcmp@s2+1,c
  4356  001B5C  EC2A  F015         	call	_strcmp	;wreg free
  4357  001B60  5001               	movf	?_strcmp,w,c
  4358  001B62  1002               	iorwf	?_strcmp+1,w,c
  4359  001B64  B4D8               	btfsc	status,2,c
  4360  001B66  D00E               	goto	i2l2961
  4361  001B68  0E5A               	movlw	low _key
  4362  001B6A  6E01               	movwf	strcmp@s1,c
  4363  001B6C  0E00               	movlw	high _key
  4364  001B6E  6E02               	movwf	strcmp@s1+1,c
  4365  001B70  0E42               	movlw	low STR_20
  4366  001B72  6E03               	movwf	strcmp@s2,c
  4367  001B74  0E10               	movlw	high STR_20
  4368  001B76  6E04               	movwf	strcmp@s2+1,c
  4369  001B78  EC2A  F015         	call	_strcmp	;wreg free
  4370  001B7C  5001               	movf	?_strcmp,w,c
  4371  001B7E  1002               	iorwf	?_strcmp+1,w,c
  4372  001B80  A4D8               	btfss	status,2,c
  4373  001B82  D006               	goto	i2l2965
  4374  001B84                     i2l2961:
  4375                           
  4376                           ;KeyValue.c: 167: {
  4377                           ;KeyValue.c: 168: StrippedKey = 0x03;
  4378  001B84  0E03               	movlw	3
  4379  001B86  6E59               	movwf	_StrippedKey,c
  4380                           
  4381                           ;KeyValue.c: 169: SerTx(';');
  4382  001B88  0E3B               	movlw	59
  4383  001B8A  ECB0  F016         	call	i2_SerTx
  4384                           
  4385                           ;KeyValue.c: 170: }
  4386  001B8E  D06F               	goto	i2l2993
  4387  001B90                     i2l2965:
  4388                           
  4389                           ;KeyValue.c: 172: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  4390  001B90  0E5A               	movlw	low _key
  4391  001B92  6E01               	movwf	strcmp@s1,c
  4392  001B94  0E00               	movlw	high _key
  4393  001B96  6E02               	movwf	strcmp@s1+1,c
  4394  001B98  0E50               	movlw	low STR_5
  4395  001B9A  6E03               	movwf	strcmp@s2,c
  4396  001B9C  0E10               	movlw	high STR_5
  4397  001B9E  6E04               	movwf	strcmp@s2+1,c
  4398  001BA0  EC2A  F015         	call	_strcmp	;wreg free
  4399  001BA4  5001               	movf	?_strcmp,w,c
  4400  001BA6  1002               	iorwf	?_strcmp+1,w,c
  4401  001BA8  B4D8               	btfsc	status,2,c
  4402  001BAA  D00E               	goto	i2l2969
  4403  001BAC  0E5A               	movlw	low _key
  4404  001BAE  6E01               	movwf	strcmp@s1,c
  4405  001BB0  0E00               	movlw	high _key
  4406  001BB2  6E02               	movwf	strcmp@s1+1,c
  4407  001BB4  0E5C               	movlw	low STR_6
  4408  001BB6  6E03               	movwf	strcmp@s2,c
  4409  001BB8  0E10               	movlw	high STR_6
  4410  001BBA  6E04               	movwf	strcmp@s2+1,c
  4411  001BBC  EC2A  F015         	call	_strcmp	;wreg free
  4412  001BC0  5001               	movf	?_strcmp,w,c
  4413  001BC2  1002               	iorwf	?_strcmp+1,w,c
  4414  001BC4  A4D8               	btfss	status,2,c
  4415  001BC6  D006               	goto	i2l2973
  4416  001BC8                     i2l2969:
  4417                           
  4418                           ;KeyValue.c: 173: {
  4419                           ;KeyValue.c: 174: StrippedKey = 0x04;
  4420  001BC8  0E04               	movlw	4
  4421  001BCA  6E59               	movwf	_StrippedKey,c
  4422                           
  4423                           ;KeyValue.c: 175: SerTx(';');
  4424  001BCC  0E3B               	movlw	59
  4425  001BCE  ECB0  F016         	call	i2_SerTx
  4426                           
  4427                           ;KeyValue.c: 176: }
  4428  001BD2  D04D               	goto	i2l2993
  4429  001BD4                     i2l2973:
  4430                           
  4431                           ;KeyValue.c: 178: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  4432  001BD4  0E5A               	movlw	low _key
  4433  001BD6  6E01               	movwf	strcmp@s1,c
  4434  001BD8  0E00               	movlw	high _key
  4435  001BDA  6E02               	movwf	strcmp@s1+1,c
  4436  001BDC  0E4D               	movlw	low STR_7
  4437  001BDE  6E03               	movwf	strcmp@s2,c
  4438  001BE0  0E10               	movlw	high STR_7
  4439  001BE2  6E04               	movwf	strcmp@s2+1,c
  4440  001BE4  EC2A  F015         	call	_strcmp	;wreg free
  4441  001BE8  5001               	movf	?_strcmp,w,c
  4442  001BEA  1002               	iorwf	?_strcmp+1,w,c
  4443  001BEC  B4D8               	btfsc	status,2,c
  4444  001BEE  D00E               	goto	i2l2977
  4445  001BF0  0E5A               	movlw	low _key
  4446  001BF2  6E01               	movwf	strcmp@s1,c
  4447  001BF4  0E00               	movlw	high _key
  4448  001BF6  6E02               	movwf	strcmp@s1+1,c
  4449  001BF8  0E59               	movlw	low STR_8
  4450  001BFA  6E03               	movwf	strcmp@s2,c
  4451  001BFC  0E10               	movlw	high STR_8
  4452  001BFE  6E04               	movwf	strcmp@s2+1,c
  4453  001C00  EC2A  F015         	call	_strcmp	;wreg free
  4454  001C04  5001               	movf	?_strcmp,w,c
  4455  001C06  1002               	iorwf	?_strcmp+1,w,c
  4456  001C08  A4D8               	btfss	status,2,c
  4457  001C0A  D006               	goto	i2l2981
  4458  001C0C                     i2l2977:
  4459                           
  4460                           ;KeyValue.c: 179: {
  4461                           ;KeyValue.c: 180: StrippedKey = 0x06;
  4462  001C0C  0E06               	movlw	6
  4463  001C0E  6E59               	movwf	_StrippedKey,c
  4464                           
  4465                           ;KeyValue.c: 181: SerTx(';');
  4466  001C10  0E3B               	movlw	59
  4467  001C12  ECB0  F016         	call	i2_SerTx
  4468                           
  4469                           ;KeyValue.c: 182: }
  4470  001C16  D02B               	goto	i2l2993
  4471  001C18                     i2l2981:
  4472                           
  4473                           ;KeyValue.c: 184: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  4474  001C18  0E5A               	movlw	low _key
  4475  001C1A  6E01               	movwf	strcmp@s1,c
  4476  001C1C  0E00               	movlw	high _key
  4477  001C1E  6E02               	movwf	strcmp@s1+1,c
  4478  001C20  0E4A               	movlw	low STR_9
  4479  001C22  6E03               	movwf	strcmp@s2,c
  4480  001C24  0E10               	movlw	high STR_9
  4481  001C26  6E04               	movwf	strcmp@s2+1,c
  4482  001C28  EC2A  F015         	call	_strcmp	;wreg free
  4483  001C2C  5001               	movf	?_strcmp,w,c
  4484  001C2E  1002               	iorwf	?_strcmp+1,w,c
  4485  001C30  B4D8               	btfsc	status,2,c
  4486  001C32  D00E               	goto	i2l2985
  4487  001C34  0E5A               	movlw	low _key
  4488  001C36  6E01               	movwf	strcmp@s1,c
  4489  001C38  0E00               	movlw	high _key
  4490  001C3A  6E02               	movwf	strcmp@s1+1,c
  4491  001C3C  0E56               	movlw	low STR_10
  4492  001C3E  6E03               	movwf	strcmp@s2,c
  4493  001C40  0E10               	movlw	high STR_10
  4494  001C42  6E04               	movwf	strcmp@s2+1,c
  4495  001C44  EC2A  F015         	call	_strcmp	;wreg free
  4496  001C48  5001               	movf	?_strcmp,w,c
  4497  001C4A  1002               	iorwf	?_strcmp+1,w,c
  4498  001C4C  A4D8               	btfss	status,2,c
  4499  001C4E  D006               	goto	i2l2989
  4500  001C50                     i2l2985:
  4501                           
  4502                           ;KeyValue.c: 185: {
  4503                           ;KeyValue.c: 186: StrippedKey = 0x08;
  4504  001C50  0E08               	movlw	8
  4505  001C52  6E59               	movwf	_StrippedKey,c
  4506                           
  4507                           ;KeyValue.c: 187: SerTx(';');
  4508  001C54  0E3B               	movlw	59
  4509  001C56  ECB0  F016         	call	i2_SerTx
  4510                           
  4511                           ;KeyValue.c: 188: }
  4512  001C5A  D009               	goto	i2l2993
  4513  001C5C                     i2l2989:
  4514                           
  4515                           ;KeyValue.c: 190: else
  4516                           ;KeyValue.c: 191: {
  4517                           ;KeyValue.c: 192: SerTxStr("???");
  4518  001C5C  0E36               	movlw	low STR_11
  4519  001C5E  6E02               	movwf	i2SerTxStr@string,c
  4520  001C60  0E10               	movlw	high STR_11
  4521  001C62  6E03               	movwf	i2SerTxStr@string+1,c
  4522  001C64  ECFE  F014         	call	i2_SerTxStr	;wreg free
  4523  001C68                     i2l2991:
  4524                           
  4525                           ;KeyValue.c: 193: StrippedKey = 0;
  4526  001C68  0E00               	movlw	0
  4527  001C6A  6E59               	movwf	_StrippedKey,c
  4528  001C6C  D000               	goto	i2l2993
  4529  001C6E                     i2l2993:
  4530                           
  4531                           ;KeyValue.c: 194: }
  4532                           ;KeyValue.c: 195: }
  4533                           ;KeyValue.c: 197: StrippedValue = strtod(value, &str_end);
  4534  001C6E  0E96               	movlw	low _value
  4535  001C70  6E3C               	movwf	strtod@s,c
  4536  001C72  0E00               	movlw	high _value
  4537  001C74  6E3D               	movwf	strtod@s+1,c
  4538  001C76  0E4E               	movlw	low keyValue@str_end
  4539  001C78  6E3E               	movwf	strtod@res,c
  4540  001C7A  0E00               	movlw	high keyValue@str_end
  4541  001C7C  6E3F               	movwf	strtod@res+1,c
  4542  001C7E  EC83  F00E         	call	_strtod	;wreg free
  4543  001C82  C03C  F072         	movff	?_strtod,_StrippedValue
  4544  001C86  C03D  F073         	movff	?_strtod+1,_StrippedValue+1
  4545  001C8A  C03E  F074         	movff	?_strtod+2,_StrippedValue+2
  4546                           
  4547                           ;KeyValue.c: 201: for (x = 0; x < 5; x++)
  4548  001C8E  0E00               	movlw	0
  4549  001C90  6E52               	movwf	keyValue@x,c
  4550  001C92                     i2l2997:
  4551  001C92  0E04               	movlw	4
  4552  001C94  6452               	cpfsgt	keyValue@x,c
  4553  001C96  D001               	goto	i2l3001
  4554  001C98  D00C               	goto	i2l3007
  4555  001C9A                     i2l3001:
  4556                           
  4557                           ;KeyValue.c: 202: {
  4558                           ;KeyValue.c: 203: key[x] = (0);
  4559  001C9A  5052               	movf	keyValue@x,w,c
  4560  001C9C  0D01               	mullw	1
  4561  001C9E  0E5A               	movlw	low _key
  4562  001CA0  24F3               	addwf	prodl,w,c
  4563  001CA2  6ED9               	movwf	fsr2l,c
  4564  001CA4  0E00               	movlw	high _key
  4565  001CA6  20F4               	addwfc	prodh,w,c
  4566  001CA8  6EDA               	movwf	fsr2h,c
  4567  001CAA  0E00               	movlw	0
  4568  001CAC  6EDF               	movwf	indf2,c
  4569  001CAE  2A52               	incf	keyValue@x,f,c
  4570  001CB0  D7F0               	goto	i2l2997
  4571  001CB2                     i2l3007:
  4572                           
  4573                           ;KeyValue.c: 204: }
  4574                           ;KeyValue.c: 206: for (x = 0; x < 10; x++)
  4575  001CB2  0E00               	movlw	0
  4576  001CB4  6E52               	movwf	keyValue@x,c
  4577  001CB6                     i2l3009:
  4578  001CB6  0E09               	movlw	9
  4579  001CB8  6452               	cpfsgt	keyValue@x,c
  4580  001CBA  D001               	goto	i2l3013
  4581  001CBC  D00C               	goto	i2l3019
  4582  001CBE                     i2l3013:
  4583                           
  4584                           ;KeyValue.c: 207: {
  4585                           ;KeyValue.c: 208: value[x] = (0);
  4586  001CBE  5052               	movf	keyValue@x,w,c
  4587  001CC0  0D01               	mullw	1
  4588  001CC2  0E96               	movlw	low _value
  4589  001CC4  24F3               	addwf	prodl,w,c
  4590  001CC6  6ED9               	movwf	fsr2l,c
  4591  001CC8  0E00               	movlw	high _value
  4592  001CCA  20F4               	addwfc	prodh,w,c
  4593  001CCC  6EDA               	movwf	fsr2h,c
  4594  001CCE  0E00               	movlw	0
  4595  001CD0  6EDF               	movwf	indf2,c
  4596  001CD2  2A52               	incf	keyValue@x,f,c
  4597  001CD4  D7F0               	goto	i2l3009
  4598  001CD6                     i2l3019:
  4599                           
  4600                           ;KeyValue.c: 209: }
  4601                           ;KeyValue.c: 211: for (x = 0; x < 30; x++)
  4602  001CD6  0E00               	movlw	0
  4603  001CD8  6E52               	movwf	keyValue@x,c
  4604  001CDA                     i2l3021:
  4605  001CDA  0E1D               	movlw	29
  4606  001CDC  6452               	cpfsgt	keyValue@x,c
  4607  001CDE  D001               	goto	i2l3025
  4608  001CE0  D00C               	goto	i2l3031
  4609  001CE2                     i2l3025:
  4610                           
  4611                           ;KeyValue.c: 212: {
  4612                           ;KeyValue.c: 213: received[x] = (0);
  4613  001CE2  5052               	movf	keyValue@x,w,c
  4614  001CE4  0D01               	mullw	1
  4615  001CE6  0E78               	movlw	low _received
  4616  001CE8  24F3               	addwf	prodl,w,c
  4617  001CEA  6ED9               	movwf	fsr2l,c
  4618  001CEC  0E00               	movlw	high _received
  4619  001CEE  20F4               	addwfc	prodh,w,c
  4620  001CF0  6EDA               	movwf	fsr2h,c
  4621  001CF2  0E00               	movlw	0
  4622  001CF4  6EDF               	movwf	indf2,c
  4623  001CF6  2A52               	incf	keyValue@x,f,c
  4624  001CF8  D7F0               	goto	i2l3021
  4625  001CFA                     i2l3031:
  4626                           
  4627                           ;KeyValue.c: 214: }
  4628                           ;KeyValue.c: 215: flag = 0;
  4629  001CFA  0E00               	movlw	0
  4630  001CFC  6E50               	movwf	keyValue@flag,c
  4631                           
  4632                           ;KeyValue.c: 216: RCflag = 1;
  4633  001CFE  0E01               	movlw	1
  4634  001D00  0100               	movlb	0	; () banked
  4635  001D02  6F77               	movwf	_RCflag& (0+255),b
  4636                           
  4637                           ; BSR set to: 0
  4638  001D04  0012               	return		;funcret
  4639  001D06                     __end_of_keyValue:
  4640                           	opt stack 0
  4641                           pclatu	equ	0xFFB
  4642                           pclath	equ	0xFFA
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           indf0	equ	0xFEF
  4652                           postinc0	equ	0xFEE
  4653                           fsr0h	equ	0xFEA
  4654                           fsr0l	equ	0xFE9
  4655                           wreg	equ	0xFE8
  4656                           indf1	equ	0xFE7
  4657                           fsr1h	equ	0xFE2
  4658                           fsr1l	equ	0xFE1
  4659                           indf2	equ	0xFDF
  4660                           postinc2	equ	0xFDE
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function i2_SerTxStr *****************
  4666 ;; Defined at:
  4667 ;;		line 50 in file "SerComm.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  string          2    1[COMRAM] PTR unsigned char 
  4670 ;;		 -> STR_28(36), STR_27(4), STR_12(6), STR_11(4), 
  4671 ;;		 -> STR_2(11), value(10), STR_1(6), key(5), 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;		None
  4674 ;; Return value:  Size  Location     Type
  4675 ;;		None               void
  4676 ;; Registers used:
  4677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4683 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;Total ram usage:        2 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    1
  4690 ;; This function calls:
  4691 ;;		i2_SerTx
  4692 ;; This function is called by:
  4693 ;;		_keyValue
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           	psect	text22
  4698  0029FC                     __ptext22:
  4699                           	opt stack 0
  4700  0029FC                     i2_SerTxStr:
  4701                           	opt stack 22
  4702                           
  4703                           ;SerComm.c: 52: while (*string)
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;incstack = 0
  4707  0029FC  D016               	goto	i2l2727
  4708  0029FE                     i2l2723:
  4709                           
  4710                           ;SerComm.c: 53: SerTx(*string++);
  4711  0029FE  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  4712  002A02  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  4713  002A06  0E00               	movlw	low (__smallconst shr (0+16))
  4714  002A08  6EF8               	movwf	tblptru,c
  4715  002A0A  0E0F               	movlw	(high __ramtop+-1)
  4716  002A0C  64F7               	cpfsgt	tblptrh,c
  4717  002A0E  D003               	bra	i2u296_47
  4718  002A10  0008               	tblrd		*
  4719  002A12  50F5               	movf	tablat,w,c
  4720  002A14  D005               	bra	i2u296_40
  4721  002A16                     i2u296_47:
  4722  002A16  CFF6 FFE9          	movff	tblptrl,fsr0l
  4723  002A1A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4724  002A1E  50EF               	movf	indf0,w,c
  4725  002A20                     i2u296_40:
  4726  002A20  ECB0  F016         	call	i2_SerTx
  4727  002A24  4A02               	infsnz	i2SerTxStr@string,f,c
  4728  002A26  2A03               	incf	i2SerTxStr@string+1,f,c
  4729  002A28  D000               	goto	i2l2727
  4730  002A2A                     i2l2727:
  4731  002A2A  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  4732  002A2E  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  4733  002A32  0E00               	movlw	low (__smallconst shr (0+16))
  4734  002A34  6EF8               	movwf	tblptru,c
  4735  002A36  0E0F               	movlw	(high __ramtop+-1)
  4736  002A38  64F7               	cpfsgt	tblptrh,c
  4737  002A3A  D003               	bra	i2u297_47
  4738  002A3C  0008               	tblrd		*
  4739  002A3E  50F5               	movf	tablat,w,c
  4740  002A40  D005               	bra	i2u297_40
  4741  002A42                     i2u297_47:
  4742  002A42  CFF6 FFE9          	movff	tblptrl,fsr0l
  4743  002A46  CFF7 FFEA          	movff	tblptrh,fsr0h
  4744  002A4A  50EF               	movf	indf0,w,c
  4745  002A4C                     i2u297_40:
  4746  002A4C  0900               	iorlw	0
  4747  002A4E  A4D8               	btfss	status,2,c
  4748  002A50  D7D6               	goto	i2l2723
  4749  002A52  0012               	return		;funcret
  4750  002A54                     __end_ofi2_SerTxStr:
  4751                           	opt stack 0
  4752                           pclatu	equ	0xFFB
  4753                           pclath	equ	0xFFA
  4754                           tblptru	equ	0xFF8
  4755                           tblptrh	equ	0xFF7
  4756                           tblptrl	equ	0xFF6
  4757                           tablat	equ	0xFF5
  4758                           prodh	equ	0xFF4
  4759                           prodl	equ	0xFF3
  4760                           intcon	equ	0xFF2
  4761                           intcon2	equ	0xFF1
  4762                           indf0	equ	0xFEF
  4763                           postinc0	equ	0xFEE
  4764                           fsr0h	equ	0xFEA
  4765                           fsr0l	equ	0xFE9
  4766                           wreg	equ	0xFE8
  4767                           indf1	equ	0xFE7
  4768                           fsr1h	equ	0xFE2
  4769                           fsr1l	equ	0xFE1
  4770                           indf2	equ	0xFDF
  4771                           postinc2	equ	0xFDE
  4772                           fsr2h	equ	0xFDA
  4773                           fsr2l	equ	0xFD9
  4774                           status	equ	0xFD8
  4775                           
  4776 ;; *************** function i2_SerTx *****************
  4777 ;; Defined at:
  4778 ;;		line 41 in file "SerComm.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  c               1    wreg     unsigned char 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  c               1    0[COMRAM] unsigned char 
  4783 ;; Return value:  Size  Location     Type
  4784 ;;		None               void
  4785 ;; Registers used:
  4786 ;;		wreg
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;Total ram usage:        1 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_RCInt
  4802 ;;		_keyValue
  4803 ;;		i2_SerTxStr
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           	psect	text23
  4808  002D60                     __ptext23:
  4809                           	opt stack 0
  4810  002D60                     i2_SerTx:
  4811                           	opt stack 24
  4812                           
  4813                           ;incstack = 0
  4814                           ;i2SerTx@c stored from wreg
  4815  002D60  6E01               	movwf	i2SerTx@c,c
  4816                           
  4817                           ;SerComm.c: 43: TXREG1 = c;
  4818  002D62  C001  FFAD         	movff	i2SerTx@c,4013	;volatile
  4819                           
  4820                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  4821  002D66  D000               	goto	i2l327
  4822  002D68                     i2l327:
  4823  002D68  A89E               	btfss	3998,4,c	;volatile
  4824  002D6A  D7FE               	goto	i2l327
  4825  002D6C  0012               	return		;funcret
  4826  002D6E                     __end_ofi2_SerTx:
  4827                           	opt stack 0
  4828                           pclatu	equ	0xFFB
  4829                           pclath	equ	0xFFA
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           intcon	equ	0xFF2
  4837                           intcon2	equ	0xFF1
  4838                           indf0	equ	0xFEF
  4839                           postinc0	equ	0xFEE
  4840                           fsr0h	equ	0xFEA
  4841                           fsr0l	equ	0xFE9
  4842                           wreg	equ	0xFE8
  4843                           indf1	equ	0xFE7
  4844                           fsr1h	equ	0xFE2
  4845                           fsr1l	equ	0xFE1
  4846                           indf2	equ	0xFDF
  4847                           postinc2	equ	0xFDE
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function _strtod *****************
  4853 ;; Defined at:
  4854 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/atof.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;  s               2   59[COMRAM] PTR const unsigned char 
  4857 ;;		 -> value(10), 
  4858 ;;  res             2   61[COMRAM] PTR PTR const unsigned c
  4859 ;;		 -> NULL(0), keyValue@str_end(2), 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  _u              4   67[COMRAM] struct .
  4862 ;;  expon           1   66[COMRAM] char 
  4863 ;;  flags           1   65[COMRAM] unsigned char 
  4864 ;;  eexp            1   64[COMRAM] char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  3   59[COMRAM] char 
  4867 ;; Registers used:
  4868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;Total ram usage:       12 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    2
  4881 ;; This function calls:
  4882 ;;		___altoft
  4883 ;;		___ftdiv
  4884 ;;		___ftge
  4885 ;;		___ftmul
  4886 ;;		___ftneg
  4887 ;;		___lmul
  4888 ;;		_isdigit
  4889 ;;		_isspace
  4890 ;; This function is called by:
  4891 ;;		_keyValue
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text24
  4896  001D06                     __ptext24:
  4897                           	opt stack 0
  4898  001D06                     _strtod:
  4899                           	opt stack 21
  4900                           
  4901                           ;incstack = 0
  4902  001D06  503E               	movf	strtod@res,w,c
  4903  001D08  103F               	iorwf	strtod@res+1,w,c
  4904  001D0A  B4D8               	btfsc	status,2,c
  4905  001D0C  D00C               	goto	i2l2431
  4906  001D0E  C03E  FFD9         	movff	strtod@res,fsr2l
  4907  001D12  C03F  FFDA         	movff	strtod@res+1,fsr2h
  4908  001D16  C03C  FFDE         	movff	strtod@s,postinc2
  4909  001D1A  C03D  FFDD         	movff	strtod@s+1,postdec2
  4910  001D1E  D003               	goto	i2l2431
  4911  001D20                     i2l2429:
  4912  001D20  4A3C               	infsnz	strtod@s,f,c
  4913  001D22  2A3D               	incf	strtod@s+1,f,c
  4914  001D24  D000               	goto	i2l2431
  4915  001D26                     i2l2431:
  4916  001D26  C03C  FFD9         	movff	strtod@s,fsr2l
  4917  001D2A  C03D  FFDA         	movff	strtod@s+1,fsr2h
  4918  001D2E  50DF               	movf	indf2,w,c
  4919  001D30  6E41               	movwf	strtod@eexp,c
  4920  001D32  5041               	movf	strtod@eexp,w,c
  4921  001D34  ECE9  F015         	call	_isspace
  4922  001D38  B0D8               	btfsc	status,0,c
  4923  001D3A  D7F2               	goto	i2l2429
  4924  001D3C  0E00               	movlw	0
  4925  001D3E  6E42               	movwf	strtod@flags,c
  4926  001D40  0E2D               	movlw	45
  4927  001D42  1841               	xorwf	strtod@eexp,w,c
  4928  001D44  A4D8               	btfss	status,2,c
  4929  001D46  D003               	goto	i2l2441
  4930  001D48  0E01               	movlw	1
  4931  001D4A  6E42               	movwf	strtod@flags,c
  4932  001D4C  D004               	goto	i2l2443
  4933  001D4E                     i2l2441:
  4934  001D4E  0E2B               	movlw	43
  4935  001D50  1841               	xorwf	strtod@eexp,w,c
  4936  001D52  A4D8               	btfss	status,2,c
  4937  001D54  D003               	goto	i2l2445
  4938  001D56                     i2l2443:
  4939  001D56  4A3C               	infsnz	strtod@s,f,c
  4940  001D58  2A3D               	incf	strtod@s+1,f,c
  4941  001D5A  D000               	goto	i2l2445
  4942  001D5C                     i2l2445:
  4943  001D5C  0E00               	movlw	0
  4944  001D5E  6E41               	movwf	strtod@eexp,c
  4945  001D60  0E00               	movlw	0
  4946  001D62  6E44               	movwf	strtod@_u,c
  4947  001D64  0E00               	movlw	0
  4948  001D66  6E45               	movwf	strtod@_u+1,c
  4949  001D68  0E00               	movlw	0
  4950  001D6A  6E46               	movwf	strtod@_u+2,c
  4951  001D6C  0E00               	movlw	0
  4952  001D6E  6E47               	movwf	strtod@_u+3,c
  4953  001D70  0E00               	movlw	0
  4954  001D72  6E43               	movwf	strtod@expon,c
  4955  001D74  D000               	goto	i2l2451
  4956  001D76                     i2l2451:
  4957  001D76  B842               	btfsc	strtod@flags,4,c
  4958  001D78  D00A               	goto	i2l2457
  4959  001D7A  C03C  FFD9         	movff	strtod@s,fsr2l
  4960  001D7E  C03D  FFDA         	movff	strtod@s+1,fsr2h
  4961  001D82  0E2E               	movlw	46
  4962  001D84  18DE               	xorwf	postinc2,w,c
  4963  001D86  A4D8               	btfss	status,2,c
  4964  001D88  D002               	goto	i2l2457
  4965  001D8A  8842               	bsf	strtod@flags,4,c
  4966  001D8C  D040               	goto	i2l591
  4967  001D8E                     i2l2457:
  4968  001D8E  C03C  FFD9         	movff	strtod@s,fsr2l
  4969  001D92  C03D  FFDA         	movff	strtod@s+1,fsr2h
  4970  001D96  50DF               	movf	indf2,w,c
  4971  001D98  EC5F  F016         	call	_isdigit
  4972  001D9C  A0D8               	btfss	status,0,c
  4973  001D9E  D03A               	goto	i2l2475
  4974  001DA0  D001               	goto	i2l2461
  4975  001DA2  D038               	goto	i2l2475
  4976  001DA4                     i2l2461:
  4977  001DA4  8242               	bsf	strtod@flags,1,c
  4978  001DA6  0E08               	movlw	8
  4979  001DA8  1841               	xorwf	strtod@eexp,w,c
  4980  001DAA  B4D8               	btfsc	status,2,c
  4981  001DAC  D02C               	goto	i2l589
  4982  001DAE  B842               	btfsc	strtod@flags,4,c
  4983  001DB0  0643               	decf	strtod@expon,f,c
  4984  001DB2  2A41               	incf	strtod@eexp,f,c
  4985  001DB4  C044  F001         	movff	strtod@_u,___lmul@multiplier
  4986  001DB8  C045  F002         	movff	strtod@_u+1,___lmul@multiplier+1
  4987  001DBC  C046  F003         	movff	strtod@_u+2,___lmul@multiplier+2
  4988  001DC0  C047  F004         	movff	strtod@_u+3,___lmul@multiplier+3
  4989  001DC4  0E0A               	movlw	10
  4990  001DC6  6E05               	movwf	___lmul@multiplicand,c
  4991  001DC8  0E00               	movlw	0
  4992  001DCA  6E06               	movwf	___lmul@multiplicand+1,c
  4993  001DCC  0E00               	movlw	0
  4994  001DCE  6E07               	movwf	___lmul@multiplicand+2,c
  4995  001DD0  0E00               	movlw	0
  4996  001DD2  6E08               	movwf	___lmul@multiplicand+3,c
  4997  001DD4  ECD1  F014         	call	___lmul	;wreg free
  4998  001DD8  C001  F044         	movff	?___lmul,strtod@_u
  4999  001DDC  C002  F045         	movff	?___lmul+1,strtod@_u+1
  5000  001DE0  C003  F046         	movff	?___lmul+2,strtod@_u+2
  5001  001DE4  C004  F047         	movff	?___lmul+3,strtod@_u+3
  5002  001DE8  C03C  FFD9         	movff	strtod@s,fsr2l
  5003  001DEC  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5004  001DF0  50DF               	movf	indf2,w,c
  5005  001DF2  6E40               	movwf	??_strtod& (0+255),c
  5006  001DF4  0ED0               	movlw	208
  5007  001DF6  2640               	addwf	??_strtod,f,c
  5008  001DF8  5040               	movf	??_strtod,w,c
  5009  001DFA  2644               	addwf	strtod@_u,f,c
  5010  001DFC  0E00               	movlw	0
  5011  001DFE  2245               	addwfc	strtod@_u+1,f,c
  5012  001E00  2246               	addwfc	strtod@_u+2,f,c
  5013  001E02  2247               	addwfc	strtod@_u+3,f,c
  5014  001E04  D004               	goto	i2l591
  5015  001E06                     i2l589:
  5016  001E06  B842               	btfsc	strtod@flags,4,c
  5017  001E08  D002               	goto	i2l591
  5018  001E0A  2A43               	incf	strtod@expon,f,c
  5019  001E0C  D000               	goto	i2l591
  5020  001E0E                     i2l591:
  5021  001E0E  4A3C               	infsnz	strtod@s,f,c
  5022  001E10  2A3D               	incf	strtod@s+1,f,c
  5023  001E12  D7B1               	goto	i2l2451
  5024  001E14                     i2l2475:
  5025  001E14  0E00               	movlw	0
  5026  001E16  6E41               	movwf	strtod@eexp,c
  5027  001E18  C03C  FFD9         	movff	strtod@s,fsr2l
  5028  001E1C  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5029  001E20  0E65               	movlw	101
  5030  001E22  18DE               	xorwf	postinc2,w,c
  5031  001E24  B4D8               	btfsc	status,2,c
  5032  001E26  D008               	goto	i2l2481
  5033  001E28  C03C  FFD9         	movff	strtod@s,fsr2l
  5034  001E2C  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5035  001E30  0E45               	movlw	69
  5036  001E32  18DE               	xorwf	postinc2,w,c
  5037  001E34  A4D8               	btfss	status,2,c
  5038  001E36  D065               	goto	i2l2513
  5039  001E38                     i2l2481:
  5040  001E38  4A3C               	infsnz	strtod@s,f,c
  5041  001E3A  2A3D               	incf	strtod@s+1,f,c
  5042  001E3C  C03C  FFD9         	movff	strtod@s,fsr2l
  5043  001E40  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5044  001E44  0E2D               	movlw	45
  5045  001E46  18DE               	xorwf	postinc2,w,c
  5046  001E48  A4D8               	btfss	status,2,c
  5047  001E4A  D002               	goto	i2l2485
  5048  001E4C  8642               	bsf	strtod@flags,3,c
  5049  001E4E  D008               	goto	i2l2487
  5050  001E50                     i2l2485:
  5051  001E50  C03C  FFD9         	movff	strtod@s,fsr2l
  5052  001E54  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5053  001E58  0E2B               	movlw	43
  5054  001E5A  18DE               	xorwf	postinc2,w,c
  5055  001E5C  A4D8               	btfss	status,2,c
  5056  001E5E  D006               	goto	i2l2491
  5057  001E60                     i2l2487:
  5058  001E60  4A3C               	infsnz	strtod@s,f,c
  5059  001E62  2A3D               	incf	strtod@s+1,f,c
  5060  001E64  D003               	goto	i2l2491
  5061  001E66                     i2l2489:
  5062  001E66  4A3C               	infsnz	strtod@s,f,c
  5063  001E68  2A3D               	incf	strtod@s+1,f,c
  5064  001E6A  D000               	goto	i2l2491
  5065  001E6C                     i2l2491:
  5066  001E6C  C03C  FFD9         	movff	strtod@s,fsr2l
  5067  001E70  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5068  001E74  0E30               	movlw	48
  5069  001E76  18DE               	xorwf	postinc2,w,c
  5070  001E78  B4D8               	btfsc	status,2,c
  5071  001E7A  D7F5               	goto	i2l2489
  5072  001E7C  C03C  FFD9         	movff	strtod@s,fsr2l
  5073  001E80  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5074  001E84  50DF               	movf	indf2,w,c
  5075  001E86  EC5F  F016         	call	_isdigit
  5076  001E8A  A0D8               	btfss	status,0,c
  5077  001E8C  D036               	goto	i2l2509
  5078  001E8E  C03C  FFD9         	movff	strtod@s,fsr2l
  5079  001E92  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5080  001E96  50DF               	movf	indf2,w,c
  5081  001E98  0FD0               	addlw	208
  5082  001E9A  6E41               	movwf	strtod@eexp,c
  5083  001E9C  4A3C               	infsnz	strtod@s,f,c
  5084  001E9E  2A3D               	incf	strtod@s+1,f,c
  5085  001EA0  C03C  FFD9         	movff	strtod@s,fsr2l
  5086  001EA4  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5087  001EA8  50DF               	movf	indf2,w,c
  5088  001EAA  EC5F  F016         	call	_isdigit
  5089  001EAE  A0D8               	btfss	status,0,c
  5090  001EB0  D024               	goto	i2l2509
  5091  001EB2  C03C  FFD9         	movff	strtod@s,fsr2l
  5092  001EB6  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5093  001EBA  50DF               	movf	indf2,w,c
  5094  001EBC  6E40               	movwf	??_strtod& (0+255),c
  5095  001EBE  5041               	movf	strtod@eexp,w,c
  5096  001EC0  0D0A               	mullw	10
  5097  001EC2  50F3               	movf	prodl,w,c
  5098  001EC4  2440               	addwf	??_strtod,w,c
  5099  001EC6  0FD0               	addlw	208
  5100  001EC8  6E41               	movwf	strtod@eexp,c
  5101  001ECA  4A3C               	infsnz	strtod@s,f,c
  5102  001ECC  2A3D               	incf	strtod@s+1,f,c
  5103  001ECE  C03C  FFD9         	movff	strtod@s,fsr2l
  5104  001ED2  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5105  001ED6  50DF               	movf	indf2,w,c
  5106  001ED8  EC5F  F016         	call	_isdigit
  5107  001EDC  A0D8               	btfss	status,0,c
  5108  001EDE  D00D               	goto	i2l2509
  5109  001EE0  C03C  FFD9         	movff	strtod@s,fsr2l
  5110  001EE4  C03D  FFDA         	movff	strtod@s+1,fsr2h
  5111  001EE8  50DF               	movf	indf2,w,c
  5112  001EEA  6E40               	movwf	??_strtod& (0+255),c
  5113  001EEC  5041               	movf	strtod@eexp,w,c
  5114  001EEE  0D0A               	mullw	10
  5115  001EF0  50F3               	movf	prodl,w,c
  5116  001EF2  2440               	addwf	??_strtod,w,c
  5117  001EF4  0FD0               	addlw	208
  5118  001EF6  6E41               	movwf	strtod@eexp,c
  5119  001EF8  D000               	goto	i2l2509
  5120  001EFA                     i2l2509:
  5121  001EFA  A642               	btfss	strtod@flags,3,c
  5122  001EFC  D002               	goto	i2l2513
  5123  001EFE  6C41               	negf	strtod@eexp,c
  5124  001F00  D000               	goto	i2l2513
  5125  001F02                     i2l2513:
  5126  001F02  5041               	movf	strtod@eexp,w,c
  5127  001F04  2643               	addwf	strtod@expon,f,c
  5128  001F06  503E               	movf	strtod@res,w,c
  5129  001F08  103F               	iorwf	strtod@res+1,w,c
  5130  001F0A  A4D8               	btfss	status,2,c
  5131  001F0C  A242               	btfss	strtod@flags,1,c
  5132  001F0E  D009               	goto	i2l2521
  5133  001F10  C03E  FFD9         	movff	strtod@res,fsr2l
  5134  001F14  C03F  FFDA         	movff	strtod@res+1,fsr2h
  5135  001F18  C03C  FFDE         	movff	strtod@s,postinc2
  5136  001F1C  C03D  FFDD         	movff	strtod@s+1,postdec2
  5137  001F20  D000               	goto	i2l2521
  5138  001F22                     i2l2521:
  5139  001F22  C044  F009         	movff	strtod@_u,___altoft@c
  5140  001F26  C045  F00A         	movff	strtod@_u+1,___altoft@c+1
  5141  001F2A  C046  F00B         	movff	strtod@_u+2,___altoft@c+2
  5142  001F2E  C047  F00C         	movff	strtod@_u+3,___altoft@c+3
  5143  001F32  EC38  F014         	call	___altoft	;wreg free
  5144  001F36  C009  F044         	movff	?___altoft,strtod@_u
  5145  001F3A  C00A  F045         	movff	?___altoft+1,strtod@_u+1
  5146  001F3E  C00B  F046         	movff	?___altoft+2,strtod@_u+2
  5147  001F42  5044               	movf	strtod@_u,w,c
  5148  001F44  1045               	iorwf	strtod@_u+1,w,c
  5149  001F46  1046               	iorwf	strtod@_u+2,w,c
  5150  001F48  A4D8               	btfss	status,2,c
  5151  001F4A  D005               	goto	i2l2529
  5152  001F4C  0E00               	movlw	0
  5153  001F4E  6E3C               	movwf	?_strtod,c
  5154  001F50  0E00               	movlw	0
  5155  001F52  D0A6               	goto	L16
  5156  001F54  D0C2               	goto	i2l608
  5157  001F56                     i2l2529:
  5158  001F56  AE43               	btfss	strtod@expon,7,c
  5159  001F58  D04C               	goto	i2l2557
  5160  001F5A  6C43               	negf	strtod@expon,c
  5161  001F5C  D017               	goto	i2l2537
  5162  001F5E                     i2l2533:
  5163  001F5E  C044  F009         	movff	strtod@_u,___ftdiv@f1
  5164  001F62  C045  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  5165  001F66  C046  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  5166  001F6A  0E03               	movlw	3
  5167  001F6C  6E0C               	movwf	___ftdiv@f2,c
  5168  001F6E  0E15               	movlw	21
  5169  001F70  6E0D               	movwf	___ftdiv@f2+1,c
  5170  001F72  0E50               	movlw	80
  5171  001F74  6E0E               	movwf	___ftdiv@f2+2,c
  5172  001F76  ECDA  F012         	call	___ftdiv	;wreg free
  5173  001F7A  C009  F044         	movff	?___ftdiv,strtod@_u
  5174  001F7E  C00A  F045         	movff	?___ftdiv+1,strtod@_u+1
  5175  001F82  C00B  F046         	movff	?___ftdiv+2,strtod@_u+2
  5176  001F86  0EF6               	movlw	246
  5177  001F88  2643               	addwf	strtod@expon,f,c
  5178  001F8A  D000               	goto	i2l2537
  5179  001F8C                     i2l2537:
  5180  001F8C  5043               	movf	strtod@expon,w,c
  5181  001F8E  0A80               	xorlw	128
  5182  001F90  0F76               	addlw	-138
  5183  001F92  A0D8               	btfss	status,0,c
  5184  001F94  D018               	goto	i2l2543
  5185  001F96  D7E3               	goto	i2l2533
  5186  001F98  D016               	goto	i2l2543
  5187  001F9A                     i2l2539:
  5188  001F9A  C044  F009         	movff	strtod@_u,___ftdiv@f1
  5189  001F9E  C045  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  5190  001FA2  C046  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  5191  001FA6  0E00               	movlw	0
  5192  001FA8  6E0C               	movwf	___ftdiv@f2,c
  5193  001FAA  0E20               	movlw	32
  5194  001FAC  6E0D               	movwf	___ftdiv@f2+1,c
  5195  001FAE  0E41               	movlw	65
  5196  001FB0  6E0E               	movwf	___ftdiv@f2+2,c
  5197  001FB2  ECDA  F012         	call	___ftdiv	;wreg free
  5198  001FB6  C009  F044         	movff	?___ftdiv,strtod@_u
  5199  001FBA  C00A  F045         	movff	?___ftdiv+1,strtod@_u+1
  5200  001FBE  C00B  F046         	movff	?___ftdiv+2,strtod@_u+2
  5201  001FC2  0643               	decf	strtod@expon,f,c
  5202  001FC4  D000               	goto	i2l2543
  5203  001FC6                     i2l2543:
  5204  001FC6  5043               	movf	strtod@expon,w,c
  5205  001FC8  A4D8               	btfss	status,2,c
  5206  001FCA  D7E7               	goto	i2l2539
  5207  001FCC  C044  F033         	movff	strtod@_u,___ftge@ff1
  5208  001FD0  C045  F034         	movff	strtod@_u+1,___ftge@ff1+1
  5209  001FD4  C046  F035         	movff	strtod@_u+2,___ftge@ff1+2
  5210  001FD8  0E00               	movlw	0
  5211  001FDA  6E36               	movwf	___ftge@ff2,c
  5212  001FDC  0E80               	movlw	128
  5213  001FDE  6E37               	movwf	___ftge@ff2+1,c
  5214  001FE0  0E00               	movlw	0
  5215  001FE2  6E38               	movwf	___ftge@ff2+2,c
  5216  001FE4  ECAE  F013         	call	___ftge	;wreg free
  5217  001FE8  D04D               	goto	L17
  5218  001FEA  D077               	goto	i2l608
  5219  001FEC  D056               	goto	i2l2581
  5220  001FEE  D075               	goto	i2l608
  5221  001FF0  D05C               	goto	i2l618
  5222  001FF2                     i2l2557:
  5223  001FF2  5043               	movf	strtod@expon,w,c
  5224  001FF4  0A80               	xorlw	128
  5225  001FF6  0F7F               	addlw	-129
  5226  001FF8  B0D8               	btfsc	status,0,c
  5227  001FFA  D019               	goto	i2l2565
  5228  001FFC  D056               	goto	i2l618
  5229  001FFE  D017               	goto	i2l2565
  5230  002000                     i2l2561:
  5231  002000  C044  F018         	movff	strtod@_u,___ftmul@f1
  5232  002004  C045  F019         	movff	strtod@_u+1,___ftmul@f1+1
  5233  002008  C046  F01A         	movff	strtod@_u+2,___ftmul@f1+2
  5234  00200C  0E03               	movlw	3
  5235  00200E  6E1B               	movwf	___ftmul@f2,c
  5236  002010  0E15               	movlw	21
  5237  002012  6E1C               	movwf	___ftmul@f2+1,c
  5238  002014  0E50               	movlw	80
  5239  002016  6E1D               	movwf	___ftmul@f2+2,c
  5240  002018  ECEB  F011         	call	___ftmul	;wreg free
  5241  00201C  C018  F044         	movff	?___ftmul,strtod@_u
  5242  002020  C019  F045         	movff	?___ftmul+1,strtod@_u+1
  5243  002024  C01A  F046         	movff	?___ftmul+2,strtod@_u+2
  5244  002028  0EF6               	movlw	246
  5245  00202A  2643               	addwf	strtod@expon,f,c
  5246  00202C  D000               	goto	i2l2565
  5247  00202E                     i2l2565:
  5248  00202E  0E0A               	movlw	10
  5249  002030  6043               	cpfslt	strtod@expon,c
  5250  002032  D7E6               	goto	i2l2561
  5251  002034  D016               	goto	i2l2571
  5252  002036                     i2l2567:
  5253  002036  C044  F018         	movff	strtod@_u,___ftmul@f1
  5254  00203A  C045  F019         	movff	strtod@_u+1,___ftmul@f1+1
  5255  00203E  C046  F01A         	movff	strtod@_u+2,___ftmul@f1+2
  5256  002042  0E00               	movlw	0
  5257  002044  6E1B               	movwf	___ftmul@f2,c
  5258  002046  0E20               	movlw	32
  5259  002048  6E1C               	movwf	___ftmul@f2+1,c
  5260  00204A  0E41               	movlw	65
  5261  00204C  6E1D               	movwf	___ftmul@f2+2,c
  5262  00204E  ECEB  F011         	call	___ftmul	;wreg free
  5263  002052  C018  F044         	movff	?___ftmul,strtod@_u
  5264  002056  C019  F045         	movff	?___ftmul+1,strtod@_u+1
  5265  00205A  C01A  F046         	movff	?___ftmul+2,strtod@_u+2
  5266  00205E  0643               	decf	strtod@expon,f,c
  5267  002060  D000               	goto	i2l2571
  5268  002062                     i2l2571:
  5269  002062  5043               	movf	strtod@expon,w,c
  5270  002064  A4D8               	btfss	status,2,c
  5271  002066  D7E7               	goto	i2l2567
  5272  002068  0EFF               	movlw	255
  5273  00206A  6E33               	movwf	___ftge@ff1,c
  5274  00206C  0E7F               	movlw	127
  5275  00206E  6E34               	movwf	___ftge@ff1+1,c
  5276  002070  0E7F               	movlw	127
  5277  002072  6E35               	movwf	___ftge@ff1+2,c
  5278  002074  C044  F036         	movff	strtod@_u,___ftge@ff2
  5279  002078  C045  F037         	movff	strtod@_u+1,___ftge@ff2+1
  5280  00207C  C046  F038         	movff	strtod@_u+2,___ftge@ff2+2
  5281  002080  ECAE  F013         	call	___ftge	;wreg free
  5282  002084                     L17:
  5283  002084  B0D8               	btfsc	status,0,c
  5284  002086  D011               	goto	i2l618
  5285  002088  A042               	btfss	strtod@flags,0,c
  5286  00208A  D007               	goto	i2l2581
  5287  00208C  0E00               	movlw	0
  5288  00208E  6E3C               	movwf	?_strtod,c
  5289  002090  0E80               	movlw	128
  5290  002092  6E3D               	movwf	?_strtod+1,c
  5291  002094  0E80               	movlw	128
  5292  002096  D006               	goto	L13
  5293  002098  D020               	goto	i2l608
  5294  00209A                     i2l2581:
  5295  00209A  0E00               	movlw	0
  5296  00209C  6E3C               	movwf	?_strtod,c
  5297  00209E  0E80               	movlw	128
  5298  0020A0                     L16:
  5299  0020A0  6E3D               	movwf	?_strtod+1,c
  5300  0020A2  0E00               	movlw	0
  5301  0020A4                     L13:
  5302  0020A4  6E3E               	movwf	?_strtod+2,c
  5303  0020A6  D019               	goto	i2l608
  5304  0020A8  D000               	goto	i2l618
  5305  0020AA                     i2l618:
  5306  0020AA  A042               	btfss	strtod@flags,0,c
  5307  0020AC  D00F               	goto	i2l2587
  5308  0020AE  C044  F001         	movff	strtod@_u,___ftneg@f1
  5309  0020B2  C045  F002         	movff	strtod@_u+1,___ftneg@f1+1
  5310  0020B6  C046  F003         	movff	strtod@_u+2,___ftneg@f1+2
  5311  0020BA  EC4D  F016         	call	___ftneg	;wreg free
  5312  0020BE  C001  F044         	movff	?___ftneg,strtod@_u
  5313  0020C2  C002  F045         	movff	?___ftneg+1,strtod@_u+1
  5314  0020C6  C003  F046         	movff	?___ftneg+2,strtod@_u+2
  5315  0020CA  D000               	goto	i2l2587
  5316  0020CC                     i2l2587:
  5317  0020CC  C044  F03C         	movff	strtod@_u,?_strtod
  5318  0020D0  C045  F03D         	movff	strtod@_u+1,?_strtod+1
  5319  0020D4  C046  F03E         	movff	strtod@_u+2,?_strtod+2
  5320  0020D8  D000               	goto	i2l608
  5321  0020DA                     i2l608:
  5322  0020DA  0012               	return		;funcret
  5323  0020DC                     __end_of_strtod:
  5324                           	opt stack 0
  5325                           pclatu	equ	0xFFB
  5326                           pclath	equ	0xFFA
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           intcon2	equ	0xFF1
  5335                           indf0	equ	0xFEF
  5336                           postinc0	equ	0xFEE
  5337                           fsr0h	equ	0xFEA
  5338                           fsr0l	equ	0xFE9
  5339                           wreg	equ	0xFE8
  5340                           indf1	equ	0xFE7
  5341                           fsr1h	equ	0xFE2
  5342                           fsr1l	equ	0xFE1
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           fsr2h	equ	0xFDA
  5347                           fsr2l	equ	0xFD9
  5348                           status	equ	0xFD8
  5349                           
  5350 ;; *************** function _isspace *****************
  5351 ;; Defined at:
  5352 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isspace.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  c               1    wreg     unsigned char 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;  c               1    2[COMRAM] unsigned char 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;		None               void
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;Total ram usage:        3 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_keyValue
  5376 ;;		_strtod
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text25
  5381  002BD2                     __ptext25:
  5382                           	opt stack 0
  5383  002BD2                     _isspace:
  5384                           	opt stack 22
  5385                           
  5386                           ;incstack = 0
  5387                           ;isspace@c stored from wreg
  5388  002BD2  6E03               	movwf	isspace@c,c
  5389  002BD4  0E01               	movlw	1
  5390  002BD6  6E02               	movwf	_isspace$1727,c
  5391  002BD8  0E20               	movlw	32
  5392  002BDA  1803               	xorwf	isspace@c,w,c
  5393  002BDC  B4D8               	btfsc	status,2,c
  5394  002BDE  D00A               	goto	i2l2241
  5395  002BE0  0E0E               	movlw	14
  5396  002BE2  6003               	cpfslt	isspace@c,c
  5397  002BE4  D004               	goto	i2l2239
  5398  002BE6  0E09               	movlw	9
  5399  002BE8  6003               	cpfslt	isspace@c,c
  5400  002BEA  D004               	goto	i2l2241
  5401  002BEC  D000               	goto	i2l2239
  5402  002BEE                     i2l2239:
  5403  002BEE  0E00               	movlw	0
  5404  002BF0  6E02               	movwf	_isspace$1727,c
  5405  002BF2  D000               	goto	i2l2241
  5406  002BF4                     i2l2241:
  5407  002BF4  C002  F001         	movff	_isspace$1727,??_isspace
  5408  002BF8  3001               	rrcf	??_isspace,w,c
  5409  002BFA  D000               	goto	i2l920
  5410  002BFC                     i2l920:
  5411  002BFC  0012               	return		;funcret
  5412  002BFE                     __end_of_isspace:
  5413                           	opt stack 0
  5414                           pclatu	equ	0xFFB
  5415                           pclath	equ	0xFFA
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           prodh	equ	0xFF4
  5421                           prodl	equ	0xFF3
  5422                           intcon	equ	0xFF2
  5423                           intcon2	equ	0xFF1
  5424                           indf0	equ	0xFEF
  5425                           postinc0	equ	0xFEE
  5426                           fsr0h	equ	0xFEA
  5427                           fsr0l	equ	0xFE9
  5428                           wreg	equ	0xFE8
  5429                           indf1	equ	0xFE7
  5430                           fsr1h	equ	0xFE2
  5431                           fsr1l	equ	0xFE1
  5432                           indf2	equ	0xFDF
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _isdigit *****************
  5440 ;; Defined at:
  5441 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  c               1    wreg     unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  c               1    2[COMRAM] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;		None               void
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;Total ram usage:        3 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; This function calls:
  5462 ;;		Nothing
  5463 ;; This function is called by:
  5464 ;;		_strtod
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text26
  5469  002CBE                     __ptext26:
  5470                           	opt stack 0
  5471  002CBE                     _isdigit:
  5472                           	opt stack 22
  5473                           
  5474                           ;incstack = 0
  5475                           ;isdigit@c stored from wreg
  5476  002CBE  6E03               	movwf	isdigit@c,c
  5477  002CC0  0E00               	movlw	0
  5478  002CC2  6E02               	movwf	_isdigit$1724,c
  5479  002CC4  0E3A               	movlw	58
  5480  002CC6  6003               	cpfslt	isdigit@c,c
  5481  002CC8  D006               	goto	i2l2373
  5482  002CCA  0E2F               	movlw	47
  5483  002CCC  6403               	cpfsgt	isdigit@c,c
  5484  002CCE  D003               	goto	i2l2373
  5485  002CD0  0E01               	movlw	1
  5486  002CD2  6E02               	movwf	_isdigit$1724,c
  5487  002CD4  D000               	goto	i2l2373
  5488  002CD6                     i2l2373:
  5489  002CD6  C002  F001         	movff	_isdigit$1724,??_isdigit
  5490  002CDA  3001               	rrcf	??_isdigit,w,c
  5491  002CDC  D000               	goto	i2l915
  5492  002CDE                     i2l915:
  5493  002CDE  0012               	return		;funcret
  5494  002CE0                     __end_of_isdigit:
  5495                           	opt stack 0
  5496                           pclatu	equ	0xFFB
  5497                           pclath	equ	0xFFA
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           intcon	equ	0xFF2
  5505                           intcon2	equ	0xFF1
  5506                           indf0	equ	0xFEF
  5507                           postinc0	equ	0xFEE
  5508                           fsr0h	equ	0xFEA
  5509                           fsr0l	equ	0xFE9
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           fsr1h	equ	0xFE2
  5513                           fsr1l	equ	0xFE1
  5514                           indf2	equ	0xFDF
  5515                           postinc2	equ	0xFDE
  5516                           postdec2	equ	0xFDD
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8
  5520                           
  5521 ;; *************** function ___lmul *****************
  5522 ;; Defined at:
  5523 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  multiplier      4    0[COMRAM] unsigned long 
  5526 ;;  multiplicand    4    4[COMRAM] unsigned long 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  product         4    8[COMRAM] unsigned long 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  4    0[COMRAM] unsigned long 
  5531 ;; Registers used:
  5532 ;;		wreg, status,2, status,0
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5538 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;Total ram usage:       12 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; This function calls:
  5545 ;;		Nothing
  5546 ;; This function is called by:
  5547 ;;		_strtod
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           	psect	text27
  5552  0029A2                     __ptext27:
  5553                           	opt stack 0
  5554  0029A2                     ___lmul:
  5555                           	opt stack 22
  5556                           
  5557                           ;incstack = 0
  5558  0029A2  0E00               	movlw	0
  5559  0029A4  6E09               	movwf	___lmul@product,c
  5560  0029A6  0E00               	movlw	0
  5561  0029A8  6E0A               	movwf	___lmul@product+1,c
  5562  0029AA  0E00               	movlw	0
  5563  0029AC  6E0B               	movwf	___lmul@product+2,c
  5564  0029AE  0E00               	movlw	0
  5565  0029B0  6E0C               	movwf	___lmul@product+3,c
  5566  0029B2  D000               	goto	i2l2247
  5567  0029B4                     i2l2247:
  5568  0029B4  A001               	btfss	___lmul@multiplier,0,c
  5569  0029B6  D009               	goto	i2l2251
  5570  0029B8  5005               	movf	___lmul@multiplicand,w,c
  5571  0029BA  2609               	addwf	___lmul@product,f,c
  5572  0029BC  5006               	movf	___lmul@multiplicand+1,w,c
  5573  0029BE  220A               	addwfc	___lmul@product+1,f,c
  5574  0029C0  5007               	movf	___lmul@multiplicand+2,w,c
  5575  0029C2  220B               	addwfc	___lmul@product+2,f,c
  5576  0029C4  5008               	movf	___lmul@multiplicand+3,w,c
  5577  0029C6  220C               	addwfc	___lmul@product+3,f,c
  5578  0029C8  D000               	goto	i2l2251
  5579  0029CA                     i2l2251:
  5580  0029CA  90D8               	bcf	status,0,c
  5581  0029CC  3605               	rlcf	___lmul@multiplicand,f,c
  5582  0029CE  3606               	rlcf	___lmul@multiplicand+1,f,c
  5583  0029D0  3607               	rlcf	___lmul@multiplicand+2,f,c
  5584  0029D2  3608               	rlcf	___lmul@multiplicand+3,f,c
  5585  0029D4  90D8               	bcf	status,0,c
  5586  0029D6  3204               	rrcf	___lmul@multiplier+3,f,c
  5587  0029D8  3203               	rrcf	___lmul@multiplier+2,f,c
  5588  0029DA  3202               	rrcf	___lmul@multiplier+1,f,c
  5589  0029DC  3201               	rrcf	___lmul@multiplier,f,c
  5590  0029DE  5001               	movf	___lmul@multiplier,w,c
  5591  0029E0  1002               	iorwf	___lmul@multiplier+1,w,c
  5592  0029E2  1003               	iorwf	___lmul@multiplier+2,w,c
  5593  0029E4  1004               	iorwf	___lmul@multiplier+3,w,c
  5594  0029E6  A4D8               	btfss	status,2,c
  5595  0029E8  D7E5               	goto	i2l2247
  5596  0029EA  C009  F001         	movff	___lmul@product,?___lmul
  5597  0029EE  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  5598  0029F2  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  5599  0029F6  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  5600  0029FA  0012               	return		;funcret
  5601  0029FC                     __end_of___lmul:
  5602                           	opt stack 0
  5603                           pclatu	equ	0xFFB
  5604                           pclath	equ	0xFFA
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           intcon	equ	0xFF2
  5612                           intcon2	equ	0xFF1
  5613                           indf0	equ	0xFEF
  5614                           postinc0	equ	0xFEE
  5615                           fsr0h	equ	0xFEA
  5616                           fsr0l	equ	0xFE9
  5617                           wreg	equ	0xFE8
  5618                           indf1	equ	0xFE7
  5619                           fsr1h	equ	0xFE2
  5620                           fsr1l	equ	0xFE1
  5621                           indf2	equ	0xFDF
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function ___ftneg *****************
  5629 ;; Defined at:
  5630 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  f1              3    0[COMRAM] float 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  3    0[COMRAM] float 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5644 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;Total ram usage:        3 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; This function calls:
  5651 ;;		Nothing
  5652 ;; This function is called by:
  5653 ;;		_calculatePID
  5654 ;;		_strtod
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text28
  5659  002C9A                     __ptext28:
  5660                           	opt stack 0
  5661  002C9A                     ___ftneg:
  5662                           	opt stack 23
  5663                           
  5664                           ;incstack = 0
  5665  002C9A  5001               	movf	___ftneg@f1,w,c
  5666  002C9C  1002               	iorwf	___ftneg@f1+1,w,c
  5667  002C9E  1003               	iorwf	___ftneg@f1+2,w,c
  5668  002CA0  B4D8               	btfsc	status,2,c
  5669  002CA2  D006               	goto	i2l889
  5670  002CA4  0E00               	movlw	0
  5671  002CA6  1A01               	xorwf	___ftneg@f1,f,c
  5672  002CA8  0E00               	movlw	0
  5673  002CAA  1A02               	xorwf	___ftneg@f1+1,f,c
  5674  002CAC  0E80               	movlw	128
  5675  002CAE  1A03               	xorwf	___ftneg@f1+2,f,c
  5676  002CB0                     i2l889:
  5677  002CB0  C001  F001         	movff	___ftneg@f1,?___ftneg
  5678  002CB4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5679  002CB8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5680  002CBC  0012               	return		;funcret
  5681  002CBE                     __end_of___ftneg:
  5682                           	opt stack 0
  5683                           pclatu	equ	0xFFB
  5684                           pclath	equ	0xFFA
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           intcon2	equ	0xFF1
  5693                           indf0	equ	0xFEF
  5694                           postinc0	equ	0xFEE
  5695                           fsr0h	equ	0xFEA
  5696                           fsr0l	equ	0xFE9
  5697                           wreg	equ	0xFE8
  5698                           indf1	equ	0xFE7
  5699                           fsr1h	equ	0xFE2
  5700                           fsr1l	equ	0xFE1
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function ___ftmul *****************
  5709 ;; Defined at:
  5710 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  f1              3   23[COMRAM] float 
  5713 ;;  f2              3   26[COMRAM] float 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;  f3_as_produc    3   33[COMRAM] unsigned um
  5716 ;;  sign            1   37[COMRAM] unsigned char 
  5717 ;;  cntr            1   36[COMRAM] unsigned char 
  5718 ;;  exp             1   32[COMRAM] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  3   23[COMRAM] float 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5728 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;Total ram usage:       15 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    1
  5735 ;; This function calls:
  5736 ;;		___ftpack
  5737 ;; This function is called by:
  5738 ;;		_calculatePID
  5739 ;;		_RTD2Angle
  5740 ;;		_strtod
  5741 ;;		_breakDouble
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text29
  5746  0023D6                     __ptext29:
  5747                           	opt stack 0
  5748  0023D6                     ___ftmul:
  5749                           	opt stack 22
  5750                           
  5751                           ;incstack = 0
  5752  0023D6  C01A  F01E         	movff	___ftmul@f1+2,??___ftmul
  5753  0023DA  6A1F               	clrf	(??___ftmul+1)& (0+255),c
  5754  0023DC  6A20               	clrf	(??___ftmul+2)& (0+255),c
  5755  0023DE  3419               	rlcf	___ftmul@f1+1,w,c
  5756  0023E0  361E               	rlcf	??___ftmul& (0+255),f,c
  5757  0023E2  E301               	bnc	u215_41
  5758  0023E4  801F               	bsf	(??___ftmul+1)& (0+255),0,c
  5759  0023E6                     u215_41:
  5760  0023E6  501E               	movf	??___ftmul,w,c
  5761  0023E8  6E21               	movwf	___ftmul@exp,c
  5762  0023EA  5021               	movf	___ftmul@exp,w,c
  5763  0023EC  A4D8               	btfss	status,2,c
  5764  0023EE  D002               	goto	i2l2323
  5765  0023F0  D00E               	goto	i2l2325
  5766  0023F2  D06C               	goto	i2l879
  5767  0023F4                     i2l2323:
  5768  0023F4  C01D  F01E         	movff	___ftmul@f2+2,??___ftmul
  5769  0023F8  6A1F               	clrf	(??___ftmul+1)& (0+255),c
  5770  0023FA  6A20               	clrf	(??___ftmul+2)& (0+255),c
  5771  0023FC  341C               	rlcf	___ftmul@f2+1,w,c
  5772  0023FE  361E               	rlcf	??___ftmul& (0+255),f,c
  5773  002400  E301               	bnc	u217_41
  5774  002402  801F               	bsf	(??___ftmul+1)& (0+255),0,c
  5775  002404                     u217_41:
  5776  002404  501E               	movf	??___ftmul,w,c
  5777  002406  6E26               	movwf	___ftmul@sign,c
  5778  002408  5026               	movf	___ftmul@sign,w,c
  5779  00240A  A4D8               	btfss	status,2,c
  5780  00240C  D007               	goto	i2l2329
  5781  00240E                     i2l2325:
  5782  00240E  0E00               	movlw	0
  5783  002410  6E18               	movwf	?___ftmul,c
  5784  002412  0E00               	movlw	0
  5785  002414  6E19               	movwf	?___ftmul+1,c
  5786  002416  0E00               	movlw	0
  5787  002418  6E1A               	movwf	?___ftmul+2,c
  5788  00241A  D058               	goto	i2l879
  5789  00241C                     i2l2329:
  5790  00241C  5026               	movf	___ftmul@sign,w,c
  5791  00241E  0F7B               	addlw	123
  5792  002420  2621               	addwf	___ftmul@exp,f,c
  5793  002422  C01A  F026         	movff	___ftmul@f1+2,___ftmul@sign
  5794  002426  501D               	movf	___ftmul@f2+2,w,c
  5795  002428  1A26               	xorwf	___ftmul@sign,f,c
  5796  00242A  0E80               	movlw	128
  5797  00242C  1626               	andwf	___ftmul@sign,f,c
  5798  00242E  8E19               	bsf	___ftmul@f1+1,7,c
  5799  002430  8E1C               	bsf	___ftmul@f2+1,7,c
  5800  002432  0EFF               	movlw	255
  5801  002434  161B               	andwf	___ftmul@f2,f,c
  5802  002436  0EFF               	movlw	255
  5803  002438  161C               	andwf	___ftmul@f2+1,f,c
  5804  00243A  0E00               	movlw	0
  5805  00243C  161D               	andwf	___ftmul@f2+2,f,c
  5806  00243E  0E00               	movlw	0
  5807  002440  6E22               	movwf	___ftmul@f3_as_product,c
  5808  002442  0E00               	movlw	0
  5809  002444  6E23               	movwf	___ftmul@f3_as_product+1,c
  5810  002446  0E00               	movlw	0
  5811  002448  6E24               	movwf	___ftmul@f3_as_product+2,c
  5812  00244A  0E07               	movlw	7
  5813  00244C  6E25               	movwf	___ftmul@cntr,c
  5814  00244E  D000               	goto	i2l2343
  5815  002450                     i2l2343:
  5816  002450  A018               	btfss	___ftmul@f1,0,c
  5817  002452  D007               	goto	i2l2347
  5818  002454  501B               	movf	___ftmul@f2,w,c
  5819  002456  2622               	addwf	___ftmul@f3_as_product,f,c
  5820  002458  501C               	movf	___ftmul@f2+1,w,c
  5821  00245A  2223               	addwfc	___ftmul@f3_as_product+1,f,c
  5822  00245C  501D               	movf	___ftmul@f2+2,w,c
  5823  00245E  2224               	addwfc	___ftmul@f3_as_product+2,f,c
  5824  002460  D000               	goto	i2l2347
  5825  002462                     i2l2347:
  5826  002462  90D8               	bcf	status,0,c
  5827  002464  321A               	rrcf	___ftmul@f1+2,f,c
  5828  002466  3219               	rrcf	___ftmul@f1+1,f,c
  5829  002468  3218               	rrcf	___ftmul@f1,f,c
  5830  00246A  90D8               	bcf	status,0,c
  5831  00246C  361B               	rlcf	___ftmul@f2,f,c
  5832  00246E  361C               	rlcf	___ftmul@f2+1,f,c
  5833  002470  361D               	rlcf	___ftmul@f2+2,f,c
  5834  002472  2E25               	decfsz	___ftmul@cntr,f,c
  5835  002474  D7ED               	goto	i2l2343
  5836  002476  D000               	goto	i2l2351
  5837  002478                     i2l2351:
  5838  002478  0E09               	movlw	9
  5839  00247A  6E25               	movwf	___ftmul@cntr,c
  5840  00247C  D000               	goto	i2l2353
  5841  00247E                     i2l2353:
  5842  00247E  A018               	btfss	___ftmul@f1,0,c
  5843  002480  D007               	goto	i2l2357
  5844  002482  501B               	movf	___ftmul@f2,w,c
  5845  002484  2622               	addwf	___ftmul@f3_as_product,f,c
  5846  002486  501C               	movf	___ftmul@f2+1,w,c
  5847  002488  2223               	addwfc	___ftmul@f3_as_product+1,f,c
  5848  00248A  501D               	movf	___ftmul@f2+2,w,c
  5849  00248C  2224               	addwfc	___ftmul@f3_as_product+2,f,c
  5850  00248E  D000               	goto	i2l2357
  5851  002490                     i2l2357:
  5852  002490  90D8               	bcf	status,0,c
  5853  002492  321A               	rrcf	___ftmul@f1+2,f,c
  5854  002494  3219               	rrcf	___ftmul@f1+1,f,c
  5855  002496  3218               	rrcf	___ftmul@f1,f,c
  5856  002498  90D8               	bcf	status,0,c
  5857  00249A  3224               	rrcf	___ftmul@f3_as_product+2,f,c
  5858  00249C  3223               	rrcf	___ftmul@f3_as_product+1,f,c
  5859  00249E  3222               	rrcf	___ftmul@f3_as_product,f,c
  5860  0024A0  2E25               	decfsz	___ftmul@cntr,f,c
  5861  0024A2  D7ED               	goto	i2l2353
  5862  0024A4  D000               	goto	i2l2361
  5863  0024A6                     i2l2361:
  5864  0024A6  C022  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5865  0024AA  C023  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5866  0024AE  C024  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5867  0024B2  C021  F004         	movff	___ftmul@exp,___ftpack@exp
  5868  0024B6  C026  F005         	movff	___ftmul@sign,___ftpack@sign
  5869  0024BA  EC4B  F013         	call	___ftpack	;wreg free
  5870  0024BE  C001  F018         	movff	?___ftpack,?___ftmul
  5871  0024C2  C002  F019         	movff	?___ftpack+1,?___ftmul+1
  5872  0024C6  C003  F01A         	movff	?___ftpack+2,?___ftmul+2
  5873  0024CA  D000               	goto	i2l879
  5874  0024CC                     i2l879:
  5875  0024CC  0012               	return		;funcret
  5876  0024CE                     __end_of___ftmul:
  5877                           	opt stack 0
  5878                           pclatu	equ	0xFFB
  5879                           pclath	equ	0xFFA
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           intcon2	equ	0xFF1
  5888                           indf0	equ	0xFEF
  5889                           postinc0	equ	0xFEE
  5890                           fsr0h	equ	0xFEA
  5891                           fsr0l	equ	0xFE9
  5892                           wreg	equ	0xFE8
  5893                           indf1	equ	0xFE7
  5894                           fsr1h	equ	0xFE2
  5895                           fsr1l	equ	0xFE1
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function ___ftge *****************
  5904 ;; Defined at:
  5905 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  ff1             3   50[COMRAM] float 
  5908 ;;  ff2             3   53[COMRAM] float 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;		None
  5911 ;; Return value:  Size  Location     Type
  5912 ;;		None               void
  5913 ;; Registers used:
  5914 ;;		wreg, status,2, status,0
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5920 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;Total ram usage:        9 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; This function calls:
  5927 ;;		Nothing
  5928 ;; This function is called by:
  5929 ;;		_calculatePID
  5930 ;;		_strtod
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text30
  5935  00275C                     __ptext30:
  5936                           	opt stack 0
  5937  00275C                     ___ftge:
  5938                           	opt stack 23
  5939                           
  5940                           ;incstack = 0
  5941  00275C  AE35               	btfss	___ftge@ff1+2,7,c
  5942  00275E  D017               	goto	i2l2381
  5943  002760  C033  F039         	movff	___ftge@ff1,??___ftge
  5944  002764  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  5945  002768  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  5946  00276C  1E39               	comf	??___ftge,f,c
  5947  00276E  1E3A               	comf	??___ftge+1,f,c
  5948  002770  1E3B               	comf	??___ftge+2,f,c
  5949  002772  2A39               	incf	??___ftge,f,c
  5950  002774  0E00               	movlw	0
  5951  002776  223A               	addwfc	??___ftge+1,f,c
  5952  002778  223B               	addwfc	??___ftge+2,f,c
  5953  00277A  0E00               	movlw	0
  5954  00277C  2439               	addwf	??___ftge,w,c
  5955  00277E  6E33               	movwf	___ftge@ff1,c
  5956  002780  0E00               	movlw	0
  5957  002782  203A               	addwfc	??___ftge+1,w,c
  5958  002784  6E34               	movwf	___ftge@ff1+1,c
  5959  002786  0E80               	movlw	128
  5960  002788  203B               	addwfc	??___ftge+2,w,c
  5961  00278A  6E35               	movwf	___ftge@ff1+2,c
  5962  00278C  D000               	goto	i2l2381
  5963  00278E                     i2l2381:
  5964  00278E  AE38               	btfss	___ftge@ff2+2,7,c
  5965  002790  D017               	goto	i2l2385
  5966  002792  C036  F039         	movff	___ftge@ff2,??___ftge
  5967  002796  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  5968  00279A  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  5969  00279E  1E39               	comf	??___ftge,f,c
  5970  0027A0  1E3A               	comf	??___ftge+1,f,c
  5971  0027A2  1E3B               	comf	??___ftge+2,f,c
  5972  0027A4  2A39               	incf	??___ftge,f,c
  5973  0027A6  0E00               	movlw	0
  5974  0027A8  223A               	addwfc	??___ftge+1,f,c
  5975  0027AA  223B               	addwfc	??___ftge+2,f,c
  5976  0027AC  0E00               	movlw	0
  5977  0027AE  2439               	addwf	??___ftge,w,c
  5978  0027B0  6E36               	movwf	___ftge@ff2,c
  5979  0027B2  0E00               	movlw	0
  5980  0027B4  203A               	addwfc	??___ftge+1,w,c
  5981  0027B6  6E37               	movwf	___ftge@ff2+1,c
  5982  0027B8  0E80               	movlw	128
  5983  0027BA  203B               	addwfc	??___ftge+2,w,c
  5984  0027BC  6E38               	movwf	___ftge@ff2+2,c
  5985  0027BE  D000               	goto	i2l2385
  5986  0027C0                     i2l2385:
  5987  0027C0  0E00               	movlw	0
  5988  0027C2  1A33               	xorwf	___ftge@ff1,f,c
  5989  0027C4  0E00               	movlw	0
  5990  0027C6  1A34               	xorwf	___ftge@ff1+1,f,c
  5991  0027C8  0E80               	movlw	128
  5992  0027CA  1A35               	xorwf	___ftge@ff1+2,f,c
  5993  0027CC  0E00               	movlw	0
  5994  0027CE  1A36               	xorwf	___ftge@ff2,f,c
  5995  0027D0  0E00               	movlw	0
  5996  0027D2  1A37               	xorwf	___ftge@ff2+1,f,c
  5997  0027D4  0E80               	movlw	128
  5998  0027D6  1A38               	xorwf	___ftge@ff2+2,f,c
  5999  0027D8  5036               	movf	___ftge@ff2,w,c
  6000  0027DA  5C33               	subwf	___ftge@ff1,w,c
  6001  0027DC  5037               	movf	___ftge@ff2+1,w,c
  6002  0027DE  5834               	subwfb	___ftge@ff1+1,w,c
  6003  0027E0  5038               	movf	___ftge@ff2+2,w,c
  6004  0027E2  5835               	subwfb	___ftge@ff1+2,w,c
  6005  0027E4  B0D8               	btfsc	status,0,c
  6006  0027E6  D002               	goto	i2l2391
  6007  0027E8  90D8               	bcf	status,0,c
  6008  0027EA  D002               	goto	i2l873
  6009  0027EC                     i2l2391:
  6010  0027EC  80D8               	bsf	status,0,c
  6011  0027EE  D000               	goto	i2l873
  6012  0027F0                     i2l873:
  6013  0027F0  0012               	return		;funcret
  6014  0027F2                     __end_of___ftge:
  6015                           	opt stack 0
  6016                           pclatu	equ	0xFFB
  6017                           pclath	equ	0xFFA
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           intcon	equ	0xFF2
  6025                           intcon2	equ	0xFF1
  6026                           indf0	equ	0xFEF
  6027                           postinc0	equ	0xFEE
  6028                           fsr0h	equ	0xFEA
  6029                           fsr0l	equ	0xFE9
  6030                           wreg	equ	0xFE8
  6031                           indf1	equ	0xFE7
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function ___ftdiv *****************
  6042 ;; Defined at:
  6043 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  f1              3    8[COMRAM] float 
  6046 ;;  f2              3   11[COMRAM] float 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  f3              3   18[COMRAM] float 
  6049 ;;  sign            1   22[COMRAM] unsigned char 
  6050 ;;  exp             1   21[COMRAM] unsigned char 
  6051 ;;  cntr            1   17[COMRAM] unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;                  3    8[COMRAM] float 
  6054 ;; Registers used:
  6055 ;;		wreg, status,2, status,0, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6061 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;Total ram usage:       15 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    1
  6068 ;; This function calls:
  6069 ;;		___ftpack
  6070 ;; This function is called by:
  6071 ;;		_calculatePID
  6072 ;;		_strtod
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text31
  6077  0025B4                     __ptext31:
  6078                           	opt stack 0
  6079  0025B4                     ___ftdiv:
  6080                           	opt stack 22
  6081                           
  6082                           ;incstack = 0
  6083  0025B4  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  6084  0025B8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6085  0025BA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6086  0025BC  340A               	rlcf	___ftdiv@f1+1,w,c
  6087  0025BE  360F               	rlcf	??___ftdiv& (0+255),f,c
  6088  0025C0  E301               	bnc	u210_41
  6089  0025C2  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6090  0025C4                     u210_41:
  6091  0025C4  500F               	movf	??___ftdiv,w,c
  6092  0025C6  6E16               	movwf	___ftdiv@exp,c
  6093  0025C8  5016               	movf	___ftdiv@exp,w,c
  6094  0025CA  A4D8               	btfss	status,2,c
  6095  0025CC  D002               	goto	i2l2277
  6096  0025CE  D00E               	goto	i2l2279
  6097  0025D0  D061               	goto	i2l864
  6098  0025D2                     i2l2277:
  6099  0025D2  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  6100  0025D6  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6101  0025D8  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6102  0025DA  340D               	rlcf	___ftdiv@f2+1,w,c
  6103  0025DC  360F               	rlcf	??___ftdiv& (0+255),f,c
  6104  0025DE  E301               	bnc	u212_41
  6105  0025E0  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6106  0025E2                     u212_41:
  6107  0025E2  500F               	movf	??___ftdiv,w,c
  6108  0025E4  6E17               	movwf	___ftdiv@sign,c
  6109  0025E6  5017               	movf	___ftdiv@sign,w,c
  6110  0025E8  A4D8               	btfss	status,2,c
  6111  0025EA  D007               	goto	i2l2283
  6112  0025EC                     i2l2279:
  6113  0025EC  0E00               	movlw	0
  6114  0025EE  6E09               	movwf	?___ftdiv,c
  6115  0025F0  0E00               	movlw	0
  6116  0025F2  6E0A               	movwf	?___ftdiv+1,c
  6117  0025F4  0E00               	movlw	0
  6118  0025F6  6E0B               	movwf	?___ftdiv+2,c
  6119  0025F8  D04D               	goto	i2l864
  6120  0025FA                     i2l2283:
  6121  0025FA  0E00               	movlw	0
  6122  0025FC  6E13               	movwf	___ftdiv@f3,c
  6123  0025FE  0E00               	movlw	0
  6124  002600  6E14               	movwf	___ftdiv@f3+1,c
  6125  002602  0E00               	movlw	0
  6126  002604  6E15               	movwf	___ftdiv@f3+2,c
  6127  002606  5017               	movf	___ftdiv@sign,w,c
  6128  002608  0F89               	addlw	137
  6129  00260A  5E16               	subwf	___ftdiv@exp,f,c
  6130  00260C  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  6131  002610  500E               	movf	___ftdiv@f2+2,w,c
  6132  002612  1A17               	xorwf	___ftdiv@sign,f,c
  6133  002614  0E80               	movlw	128
  6134  002616  1617               	andwf	___ftdiv@sign,f,c
  6135  002618  8E0A               	bsf	___ftdiv@f1+1,7,c
  6136  00261A  0EFF               	movlw	255
  6137  00261C  1609               	andwf	___ftdiv@f1,f,c
  6138  00261E  0EFF               	movlw	255
  6139  002620  160A               	andwf	___ftdiv@f1+1,f,c
  6140  002622  0E00               	movlw	0
  6141  002624  160B               	andwf	___ftdiv@f1+2,f,c
  6142  002626  8E0D               	bsf	___ftdiv@f2+1,7,c
  6143  002628  0EFF               	movlw	255
  6144  00262A  160C               	andwf	___ftdiv@f2,f,c
  6145  00262C  0EFF               	movlw	255
  6146  00262E  160D               	andwf	___ftdiv@f2+1,f,c
  6147  002630  0E00               	movlw	0
  6148  002632  160E               	andwf	___ftdiv@f2+2,f,c
  6149  002634  0E18               	movlw	24
  6150  002636  6E12               	movwf	___ftdiv@cntr,c
  6151  002638  D000               	goto	i2l2303
  6152  00263A                     i2l2303:
  6153  00263A  90D8               	bcf	status,0,c
  6154  00263C  3613               	rlcf	___ftdiv@f3,f,c
  6155  00263E  3614               	rlcf	___ftdiv@f3+1,f,c
  6156  002640  3615               	rlcf	___ftdiv@f3+2,f,c
  6157  002642  500C               	movf	___ftdiv@f2,w,c
  6158  002644  5C09               	subwf	___ftdiv@f1,w,c
  6159  002646  500D               	movf	___ftdiv@f2+1,w,c
  6160  002648  580A               	subwfb	___ftdiv@f1+1,w,c
  6161  00264A  500E               	movf	___ftdiv@f2+2,w,c
  6162  00264C  580B               	subwfb	___ftdiv@f1+2,w,c
  6163  00264E  A0D8               	btfss	status,0,c
  6164  002650  D007               	goto	i2l867
  6165  002652  500C               	movf	___ftdiv@f2,w,c
  6166  002654  5E09               	subwf	___ftdiv@f1,f,c
  6167  002656  500D               	movf	___ftdiv@f2+1,w,c
  6168  002658  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6169  00265A  500E               	movf	___ftdiv@f2+2,w,c
  6170  00265C  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6171  00265E  8013               	bsf	___ftdiv@f3,0,c
  6172  002660                     i2l867:
  6173  002660  90D8               	bcf	status,0,c
  6174  002662  3609               	rlcf	___ftdiv@f1,f,c
  6175  002664  360A               	rlcf	___ftdiv@f1+1,f,c
  6176  002666  360B               	rlcf	___ftdiv@f1+2,f,c
  6177  002668  2E12               	decfsz	___ftdiv@cntr,f,c
  6178  00266A  D7E7               	goto	i2l2303
  6179  00266C  D000               	goto	i2l2313
  6180  00266E                     i2l2313:
  6181  00266E  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6182  002672  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6183  002676  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6184  00267A  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6185  00267E  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6186  002682  EC4B  F013         	call	___ftpack	;wreg free
  6187  002686  C001  F009         	movff	?___ftpack,?___ftdiv
  6188  00268A  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6189  00268E  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6190  002692  D000               	goto	i2l864
  6191  002694                     i2l864:
  6192  002694  0012               	return		;funcret
  6193  002696                     __end_of___ftdiv:
  6194                           	opt stack 0
  6195                           pclatu	equ	0xFFB
  6196                           pclath	equ	0xFFA
  6197                           tblptru	equ	0xFF8
  6198                           tblptrh	equ	0xFF7
  6199                           tblptrl	equ	0xFF6
  6200                           tablat	equ	0xFF5
  6201                           prodh	equ	0xFF4
  6202                           prodl	equ	0xFF3
  6203                           intcon	equ	0xFF2
  6204                           intcon2	equ	0xFF1
  6205                           indf0	equ	0xFEF
  6206                           postinc0	equ	0xFEE
  6207                           fsr0h	equ	0xFEA
  6208                           fsr0l	equ	0xFE9
  6209                           wreg	equ	0xFE8
  6210                           indf1	equ	0xFE7
  6211                           fsr1h	equ	0xFE2
  6212                           fsr1l	equ	0xFE1
  6213                           indf2	equ	0xFDF
  6214                           postinc2	equ	0xFDE
  6215                           postdec2	equ	0xFDD
  6216                           fsr2h	equ	0xFDA
  6217                           fsr2l	equ	0xFD9
  6218                           status	equ	0xFD8
  6219                           
  6220 ;; *************** function ___altoft *****************
  6221 ;; Defined at:
  6222 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;  c               4    8[COMRAM] long 
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  sign            1   17[COMRAM] unsigned char 
  6227 ;;  exp             1   16[COMRAM] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  3    8[COMRAM] float 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6237 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;Total ram usage:       10 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    1
  6244 ;; This function calls:
  6245 ;;		___ftpack
  6246 ;; This function is called by:
  6247 ;;		_strtod
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text32
  6252  002870                     __ptext32:
  6253                           	opt stack 0
  6254  002870                     ___altoft:
  6255                           	opt stack 21
  6256                           
  6257                           ;incstack = 0
  6258  002870  0E00               	movlw	0
  6259  002872  6E12               	movwf	___altoft@sign,c
  6260  002874  0E8E               	movlw	142
  6261  002876  6E11               	movwf	___altoft@exp,c
  6262  002878  AE0C               	btfss	___altoft@c+3,7,c
  6263  00287A  D012               	goto	i2l2265
  6264  00287C  1E0C               	comf	___altoft@c+3,f,c
  6265  00287E  1E0B               	comf	___altoft@c+2,f,c
  6266  002880  1E0A               	comf	___altoft@c+1,f,c
  6267  002882  6C09               	negf	___altoft@c,c
  6268  002884  0E00               	movlw	0
  6269  002886  220A               	addwfc	___altoft@c+1,f,c
  6270  002888  220B               	addwfc	___altoft@c+2,f,c
  6271  00288A  220C               	addwfc	___altoft@c+3,f,c
  6272  00288C  0E01               	movlw	1
  6273  00288E  6E12               	movwf	___altoft@sign,c
  6274  002890  D007               	goto	i2l2265
  6275  002892                     i2l2263:
  6276  002892  90D8               	bcf	status,0,c
  6277  002894  320C               	rrcf	___altoft@c+3,f,c
  6278  002896  320B               	rrcf	___altoft@c+2,f,c
  6279  002898  320A               	rrcf	___altoft@c+1,f,c
  6280  00289A  3209               	rrcf	___altoft@c,f,c
  6281  00289C  2A11               	incf	___altoft@exp,f,c
  6282  00289E  D000               	goto	i2l2265
  6283  0028A0                     i2l2265:
  6284  0028A0  0E00               	movlw	0
  6285  0028A2  1409               	andwf	___altoft@c,w,c
  6286  0028A4  6E0D               	movwf	??___altoft& (0+255),c
  6287  0028A6  0E00               	movlw	0
  6288  0028A8  140A               	andwf	___altoft@c+1,w,c
  6289  0028AA  6E0E               	movwf	(??___altoft+1)& (0+255),c
  6290  0028AC  0E00               	movlw	0
  6291  0028AE  140B               	andwf	___altoft@c+2,w,c
  6292  0028B0  6E0F               	movwf	(??___altoft+2)& (0+255),c
  6293  0028B2  0EFF               	movlw	255
  6294  0028B4  140C               	andwf	___altoft@c+3,w,c
  6295  0028B6  6E10               	movwf	(??___altoft+3)& (0+255),c
  6296  0028B8  500D               	movf	??___altoft,w,c
  6297  0028BA  100E               	iorwf	??___altoft+1,w,c
  6298  0028BC  100F               	iorwf	??___altoft+2,w,c
  6299  0028BE  1010               	iorwf	??___altoft+3,w,c
  6300  0028C0  A4D8               	btfss	status,2,c
  6301  0028C2  D7E7               	goto	i2l2263
  6302  0028C4  C009  F001         	movff	___altoft@c,___ftpack@arg
  6303  0028C8  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  6304  0028CC  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  6305  0028D0  C011  F004         	movff	___altoft@exp,___ftpack@exp
  6306  0028D4  C012  F005         	movff	___altoft@sign,___ftpack@sign
  6307  0028D8  EC4B  F013         	call	___ftpack	;wreg free
  6308  0028DC  C001  F009         	movff	?___ftpack,?___altoft
  6309  0028E0  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  6310  0028E4  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  6311  0028E8  D000               	goto	i2l499
  6312  0028EA                     i2l499:
  6313  0028EA  0012               	return		;funcret
  6314  0028EC                     __end_of___altoft:
  6315                           	opt stack 0
  6316                           pclatu	equ	0xFFB
  6317                           pclath	equ	0xFFA
  6318                           tblptru	equ	0xFF8
  6319                           tblptrh	equ	0xFF7
  6320                           tblptrl	equ	0xFF6
  6321                           tablat	equ	0xFF5
  6322                           prodh	equ	0xFF4
  6323                           prodl	equ	0xFF3
  6324                           intcon	equ	0xFF2
  6325                           intcon2	equ	0xFF1
  6326                           indf0	equ	0xFEF
  6327                           postinc0	equ	0xFEE
  6328                           fsr0h	equ	0xFEA
  6329                           fsr0l	equ	0xFE9
  6330                           wreg	equ	0xFE8
  6331                           indf1	equ	0xFE7
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           
  6341 ;; *************** function ___ftpack *****************
  6342 ;; Defined at:
  6343 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  arg             3    0[COMRAM] unsigned um
  6346 ;;  exp             1    3[COMRAM] unsigned char 
  6347 ;;  sign            1    4[COMRAM] unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;		None
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  3    0[COMRAM] float 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6359 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;Total ram usage:        8 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; This function calls:
  6366 ;;		Nothing
  6367 ;; This function is called by:
  6368 ;;		___altoft
  6369 ;;		___ftadd
  6370 ;;		___ftdiv
  6371 ;;		___ftmul
  6372 ;;		___lwtoft
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text33
  6377  002696                     __ptext33:
  6378                           	opt stack 0
  6379  002696                     ___ftpack:
  6380                           	opt stack 22
  6381                           
  6382                           ;incstack = 0
  6383  002696  5004               	movf	___ftpack@exp,w,c
  6384  002698  B4D8               	btfsc	status,2,c
  6385  00269A  D005               	goto	i2l2197
  6386  00269C  5001               	movf	___ftpack@arg,w,c
  6387  00269E  1002               	iorwf	___ftpack@arg+1,w,c
  6388  0026A0  1003               	iorwf	___ftpack@arg+2,w,c
  6389  0026A2  A4D8               	btfss	status,2,c
  6390  0026A4  D00E               	goto	i2l2203
  6391  0026A6                     i2l2197:
  6392  0026A6  0E00               	movlw	0
  6393  0026A8  6E01               	movwf	?___ftpack,c
  6394  0026AA  0E00               	movlw	0
  6395  0026AC  6E02               	movwf	?___ftpack+1,c
  6396  0026AE  0E00               	movlw	0
  6397  0026B0  6E03               	movwf	?___ftpack+2,c
  6398  0026B2  D053               	goto	i2l792
  6399  0026B4  D006               	goto	i2l2203
  6400  0026B6                     i2l2201:
  6401  0026B6  2A04               	incf	___ftpack@exp,f,c
  6402  0026B8  90D8               	bcf	status,0,c
  6403  0026BA  3203               	rrcf	___ftpack@arg+2,f,c
  6404  0026BC  3202               	rrcf	___ftpack@arg+1,f,c
  6405  0026BE  3201               	rrcf	___ftpack@arg,f,c
  6406  0026C0  D000               	goto	i2l2203
  6407  0026C2                     i2l2203:
  6408  0026C2  0E00               	movlw	0
  6409  0026C4  1401               	andwf	___ftpack@arg,w,c
  6410  0026C6  6E06               	movwf	??___ftpack& (0+255),c
  6411  0026C8  0E00               	movlw	0
  6412  0026CA  1402               	andwf	___ftpack@arg+1,w,c
  6413  0026CC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6414  0026CE  0EFE               	movlw	254
  6415  0026D0  1403               	andwf	___ftpack@arg+2,w,c
  6416  0026D2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6417  0026D4  5006               	movf	??___ftpack,w,c
  6418  0026D6  1007               	iorwf	??___ftpack+1,w,c
  6419  0026D8  1008               	iorwf	??___ftpack+2,w,c
  6420  0026DA  B4D8               	btfsc	status,2,c
  6421  0026DC  D00E               	goto	i2l2209
  6422  0026DE  D7EB               	goto	i2l2201
  6423  0026E0  D00C               	goto	i2l2209
  6424  0026E2                     i2l2205:
  6425  0026E2  2A04               	incf	___ftpack@exp,f,c
  6426  0026E4  0E01               	movlw	1
  6427  0026E6  2601               	addwf	___ftpack@arg,f,c
  6428  0026E8  0E00               	movlw	0
  6429  0026EA  2202               	addwfc	___ftpack@arg+1,f,c
  6430  0026EC  0E00               	movlw	0
  6431  0026EE  2203               	addwfc	___ftpack@arg+2,f,c
  6432  0026F0  90D8               	bcf	status,0,c
  6433  0026F2  3203               	rrcf	___ftpack@arg+2,f,c
  6434  0026F4  3202               	rrcf	___ftpack@arg+1,f,c
  6435  0026F6  3201               	rrcf	___ftpack@arg,f,c
  6436  0026F8  D000               	goto	i2l2209
  6437  0026FA                     i2l2209:
  6438  0026FA  0E00               	movlw	0
  6439  0026FC  1401               	andwf	___ftpack@arg,w,c
  6440  0026FE  6E06               	movwf	??___ftpack& (0+255),c
  6441  002700  0E00               	movlw	0
  6442  002702  1402               	andwf	___ftpack@arg+1,w,c
  6443  002704  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6444  002706  0EFF               	movlw	255
  6445  002708  1403               	andwf	___ftpack@arg+2,w,c
  6446  00270A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6447  00270C  5006               	movf	??___ftpack,w,c
  6448  00270E  1007               	iorwf	??___ftpack+1,w,c
  6449  002710  1008               	iorwf	??___ftpack+2,w,c
  6450  002712  B4D8               	btfsc	status,2,c
  6451  002714  D008               	goto	i2l2213
  6452  002716  D7E5               	goto	i2l2205
  6453  002718  D006               	goto	i2l2213
  6454  00271A                     i2l2211:
  6455  00271A  0604               	decf	___ftpack@exp,f,c
  6456  00271C  90D8               	bcf	status,0,c
  6457  00271E  3601               	rlcf	___ftpack@arg,f,c
  6458  002720  3602               	rlcf	___ftpack@arg+1,f,c
  6459  002722  3603               	rlcf	___ftpack@arg+2,f,c
  6460  002724  D000               	goto	i2l2213
  6461  002726                     i2l2213:
  6462  002726  BE02               	btfsc	___ftpack@arg+1,7,c
  6463  002728  D004               	goto	i2l803
  6464  00272A  0E02               	movlw	2
  6465  00272C  6004               	cpfslt	___ftpack@exp,c
  6466  00272E  D7F5               	goto	i2l2211
  6467  002730  D000               	goto	i2l803
  6468  002732                     i2l803:
  6469  002732  B004               	btfsc	___ftpack@exp,0,c
  6470  002734  D002               	goto	i2l2219
  6471  002736  9E02               	bcf	___ftpack@arg+1,7,c
  6472  002738  D000               	goto	i2l2219
  6473  00273A                     i2l2219:
  6474  00273A  90D8               	bcf	status,0,c
  6475  00273C  3204               	rrcf	___ftpack@exp,f,c
  6476  00273E  5004               	movf	___ftpack@exp,w,c
  6477  002740  1203               	iorwf	___ftpack@arg+2,f,c
  6478  002742  5005               	movf	___ftpack@sign,w,c
  6479  002744  B4D8               	btfsc	status,2,c
  6480  002746  D002               	goto	i2l2225
  6481  002748  8E03               	bsf	___ftpack@arg+2,7,c
  6482  00274A  D000               	goto	i2l2225
  6483  00274C                     i2l2225:
  6484  00274C  C001  F001         	movff	___ftpack@arg,?___ftpack
  6485  002750  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6486  002754  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6487  002758  D000               	goto	i2l792
  6488  00275A                     i2l792:
  6489  00275A  0012               	return		;funcret
  6490  00275C                     __end_of___ftpack:
  6491                           	opt stack 0
  6492                           pclatu	equ	0xFFB
  6493                           pclath	equ	0xFFA
  6494                           tblptru	equ	0xFF8
  6495                           tblptrh	equ	0xFF7
  6496                           tblptrl	equ	0xFF6
  6497                           tablat	equ	0xFF5
  6498                           prodh	equ	0xFF4
  6499                           prodl	equ	0xFF3
  6500                           intcon	equ	0xFF2
  6501                           intcon2	equ	0xFF1
  6502                           indf0	equ	0xFEF
  6503                           postinc0	equ	0xFEE
  6504                           fsr0h	equ	0xFEA
  6505                           fsr0l	equ	0xFE9
  6506                           wreg	equ	0xFE8
  6507                           indf1	equ	0xFE7
  6508                           fsr1h	equ	0xFE2
  6509                           fsr1l	equ	0xFE1
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           postdec2	equ	0xFDD
  6513                           fsr2h	equ	0xFDA
  6514                           fsr2l	equ	0xFD9
  6515                           status	equ	0xFD8
  6516                           
  6517 ;; *************** function _strcmp *****************
  6518 ;; Defined at:
  6519 ;;		line 33 in file "/opt/microchip/xc8/v1.34/sources/common/strcmp.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  6522 ;;		 -> key(5), 
  6523 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  6524 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(3), 
  6525 ;;		 -> STR_22(3), STR_21(3), STR_20(4), STR_19(4), 
  6526 ;;		 -> STR_18(4), STR_17(4), STR_16(3), STR_15(3), 
  6527 ;;		 -> STR_14(3), STR_13(3), STR_10(3), STR_9(3), 
  6528 ;;		 -> STR_8(3), STR_7(3), STR_6(3), STR_5(3), 
  6529 ;;		 -> STR_4(4), STR_3(4), 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  r               1    5[COMRAM] char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  2    0[COMRAM] int 
  6534 ;; Registers used:
  6535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;Total ram usage:        6 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_keyValue
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text34
  6555  002A54                     __ptext34:
  6556                           	opt stack 0
  6557  002A54                     _strcmp:
  6558                           	opt stack 23
  6559                           
  6560                           ;incstack = 0
  6561  002A54  D005               	goto	i2l2417
  6562  002A56                     i2l2415:
  6563  002A56  4A01               	infsnz	strcmp@s1,f,c
  6564  002A58  2A02               	incf	strcmp@s1+1,f,c
  6565  002A5A  4A03               	infsnz	strcmp@s2,f,c
  6566  002A5C  2A04               	incf	strcmp@s2+1,f,c
  6567  002A5E  D000               	goto	i2l2417
  6568  002A60                     i2l2417:
  6569  002A60  C001  FFD9         	movff	strcmp@s1,fsr2l
  6570  002A64  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6571  002A68  50DF               	movf	indf2,w,c
  6572  002A6A  6E05               	movwf	??_strcmp& (0+255),c
  6573  002A6C  C003  FFF6         	movff	strcmp@s2,tblptrl
  6574  002A70  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  6575  002A74                     	if	0	;tblptru may be non-zero
  6576  002A74                     	endif
  6577  002A74                     	if	0	;tblptru may be non-zero
  6578  002A74                     	endif
  6579  002A74  0008               	tblrd		*
  6580  002A76  50F5               	movf	tablat,w,c
  6581  002A78  0800               	sublw	0
  6582  002A7A  2405               	addwf	??_strcmp,w,c
  6583  002A7C  6E06               	movwf	strcmp@r,c
  6584  002A7E  5006               	movf	strcmp@r,w,c
  6585  002A80  A4D8               	btfss	status,2,c
  6586  002A82  D009               	goto	i2l2421
  6587  002A84  C001  FFD9         	movff	strcmp@s1,fsr2l
  6588  002A88  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  6589  002A8C  50DF               	movf	indf2,w,c
  6590  002A8E  B4D8               	btfsc	status,2,c
  6591  002A90  D002               	goto	i2l2421
  6592  002A92  D7E1               	goto	i2l2415
  6593  002A94  D000               	goto	i2l2421
  6594  002A96                     i2l2421:
  6595  002A96  5006               	movf	strcmp@r,w,c
  6596  002A98  6E01               	movwf	?_strcmp,c
  6597  002A9A  6A02               	clrf	?_strcmp+1,c
  6598  002A9C  BE01               	btfsc	?_strcmp,7,c
  6599  002A9E  0602               	decf	?_strcmp+1,f,c
  6600  002AA0  D000               	goto	i2l1047
  6601  002AA2                     i2l1047:
  6602  002AA2  0012               	return		;funcret
  6603  002AA4                     __end_of_strcmp:
  6604                           	opt stack 0
  6605                           pclatu	equ	0xFFB
  6606                           pclath	equ	0xFFA
  6607                           tblptru	equ	0xFF8
  6608                           tblptrh	equ	0xFF7
  6609                           tblptrl	equ	0xFF6
  6610                           tablat	equ	0xFF5
  6611                           prodh	equ	0xFF4
  6612                           prodl	equ	0xFF3
  6613                           intcon	equ	0xFF2
  6614                           intcon2	equ	0xFF1
  6615                           indf0	equ	0xFEF
  6616                           postinc0	equ	0xFEE
  6617                           fsr0h	equ	0xFEA
  6618                           fsr0l	equ	0xFE9
  6619                           wreg	equ	0xFE8
  6620                           indf1	equ	0xFE7
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           pclatu	equ	0xFFB
  6630                           pclath	equ	0xFFA
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           intcon	equ	0xFF2
  6638                           intcon2	equ	0xFF1
  6639                           indf0	equ	0xFEF
  6640                           postinc0	equ	0xFEE
  6641                           fsr0h	equ	0xFEA
  6642                           fsr0l	equ	0xFE9
  6643                           wreg	equ	0xFE8
  6644                           indf1	equ	0xFE7
  6645                           fsr1h	equ	0xFE2
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           postdec2	equ	0xFDD
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654                           	psect	rparam
  6655  0000                     pclatu	equ	0xFFB
  6656                           pclath	equ	0xFFA
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           intcon	equ	0xFF2
  6664                           intcon2	equ	0xFF1
  6665                           indf0	equ	0xFEF
  6666                           postinc0	equ	0xFEE
  6667                           fsr0h	equ	0xFEA
  6668                           fsr0l	equ	0xFE9
  6669                           wreg	equ	0xFE8
  6670                           indf1	equ	0xFE7
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    0
    Data        1
    BSS         74
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     84      95
    BANK0           160     17      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[4]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> key(COMRAM[5]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 10
		 -> value(BANK0[10]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), keyValue@str_end(COMRAM[2]), 

    SerTxStr@string	PTR unsigned char  size(2) Largest target is 36
		 -> STR_28(CODE[36]), STR_27(CODE[4]), STR_12(CODE[6]), STR_11(CODE[4]), 
		 -> STR_2(CODE[11]), value(BANK0[10]), STR_1(CODE[6]), key(COMRAM[5]), 

    keyValue@str_end	PTR unsigned char  size(2) Largest target is 10
		 -> value(BANK0[10]), 

    keyValue@str	PTR unsigned char  size(2) Largest target is 30
		 -> received(BANK0[30]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_RCInt
    _TMR0Int->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    _ImplementPIDMotion->_abs
    _RCInt->_keyValue
    _keyValue->_strtod
    i2_SerTxStr->i2_SerTx
    _strtod->___ftge
    ___ftmul->___ftdiv
    ___ftge->___ftadd
    ___ftdiv->___ftpack
    ___altoft->___ftpack

Critical Paths under _main in BANK0

    _SerInit->_SerTxStr
    _SerTxStr->_SerTx
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     501
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     501
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SerInit
 ---------------------------------------------------------------------------------
 (2) _SerInit                                              0     0      0     435
                           _SerTxStr
 ---------------------------------------------------------------------------------
 (3) _SerTxStr                                             2     0      2     435
                                             15 BANK0      2     0      2
                              _SerTx
 ---------------------------------------------------------------------------------
 (4) _SerTx                                                1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0   42408
                                              0 BANK0     14    14      0
                              _RCInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (6) _TMR0Int                                              0     0      0   24008
                 _ImplementPIDMotion
                          _RTD2Angle
                       _calculatePID
 ---------------------------------------------------------------------------------
 (7) _calculatePID                                        27    21      6   17797
                                             65 COMRAM    18    12      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     380
                                             50 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    6481
                                             38 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) _RTD2Angle                                            3     0      3    5842
                                             38 COMRAM     3     0      3
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) _ImplementPIDMotion                                   4     2      2     369
                                              4 COMRAM     4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (8) _abs                                                  4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _RCInt                                                2     2      0   18400
                                             82 COMRAM     2     2      0
                           _keyValue
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (7) _keyValue                                            11     7      4   18221
                                             71 COMRAM    11     7      4
                            _isspace
                             _strcmp
                             _strtod
                            i2_SerTx
                         i2_SerTxStr
 ---------------------------------------------------------------------------------
 (8) i2_SerTxStr                                           2     0      2     275
                                              1 COMRAM     2     0      2
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (7) i2_SerTx                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _strtod                                              12     8      4   13939
                                             59 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (9) _isspace                                              3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     322
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3    1325
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3561
                                             23 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1928
                                             50 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    2875
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___altoft                                            10     6      4    2311
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) _strcmp                                               6     2      4    2907
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SerInit
       _SerTxStr
         _SerTx

 _ISR (ROOT)
   _RCInt
     _keyValue
       _isspace
       _strcmp
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___lmul
         _isdigit
         _isspace
       i2_SerTx
       i2_SerTxStr
         i2_SerTx
     i2_SerTx
   _TMR0Int
     _ImplementPIDMotion
       _abs
     _RTD2Angle
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _calculatePID
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      5A       5       56.2%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     54      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B9      32        0.0%
DATA                 0      0      B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 13 03:23:11 2015

               ___altoft@exp 0011     __size_of_MotorDriverInit 001C                ___altoft@sign 0012  
                         _Kd 0066                           _Ki 0069                           _Kp 006C  
               ___ftadd@exp1 0032                 ___ftadd@exp2 0031                 ___ftadd@sign 0030  
                        l146 2C62                          l327 2D4A                          l700 2D54  
                        l702 2D5E                          l695 2D28                          l688 2D3E  
                        _PR2 000FCB                          _ISR 0008                          _abs 2C26  
                        _err 00B1                          _key 005A                          prod 000FF3  
                        wreg 000FE8                         ?_ISR 0001                 ___ftdiv@cntr 0012  
                 _Delay1TCYx 2D50                 ___ftdiv@sign 0017                 __CFG_WDT$OFF 000000  
                       ?_abs 0001                         l2411 2978                         l3133 2C66  
                       l2407 294A                         l3135 2C6A                         l3127 2C54  
                       l2591 2D2E                         l2595 2D18                         STR_1 1030  
                       STR_2 1025                         STR_3 103E                         STR_4 1046  
                       STR_5 1050                         STR_6 105C                         STR_7 104D  
                       STR_8 1059                         STR_9 104A                         _AZEL 005F  
                       u2300 299A                         u2307 2990                         u2290 296C  
                       u2297 2962                         u3817 2D1A                         u3827 2D30  
                       i2l55 1614              __end_of_PIDInit 2B36              __end_of_TMR0Int 2AF0  
                       abs@a 0001                         _main 2C4E                 ___ftpack@arg 0001  
               ___ftpack@exp 0004              __end_of_RTDInit 2BD2                         fsr0h 000FEA  
                       fsr1h 000FE2              __end_ofi2_SerTx 2D6E                         indf0 000FEF  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       pclat 000FFA                         prodh 000FF4                         prodl 000FF3  
                       start 0018                 ___ftmul@cntr 0025                 ___param_bank 000010  
               ___ftmul@sign 0026                        ??_ISR 00A0                  _Delay10TCYx 2D2A  
               ___fttol@exp1 0041                        ??_abs 0003              __end_of_SerInit 2C26  
               ___fttol@lval 003D                  _Delay1KTCYx 2D14            RTD2Angle@RTDAngle 0027  
                      ?_main 0001              __end_of___ftadd 22A0                        STR_10 1056  
                      STR_11 1036                        STR_12 1030                        STR_20 1042  
                      STR_21 1050                        STR_13 1053                        STR_22 105C  
                      STR_14 105F                        STR_23 104D                        STR_15 103B  
                      STR_24 1059                        STR_16 1043                        STR_25 104A  
                      STR_17 103E                        STR_26 1056                        STR_18 1046  
                      STR_27 1036                        STR_19 103A                        STR_28 1001  
            __end_of___ftdiv 2696              __end_of___ftneg 2CBE              __end_of___ftmul 24CE  
                      _T0CON 000FD5              __end_of___fttol 25B4                        _T2CON 000FCA  
                      _T3CON 000FB1                        i2l207 22A6                        i2l161 2836  
                      i2l218 23D2                        i2l158 282A                        i2l327 2D68  
                      i2l445 2C44                        i2l446 2C4C                        i2l608 20DA  
                      i2l392 2B6C                        i2l618 20AA                        i2l803 2732  
                      i2l900 25B2                        i2l591 1E0E                        i2l920 2BFC  
                      i2l832 2120                        i2l833 229E                        i2l499 28EA  
                      i2l915 2CDE                        i2l836 214A                        i2l589 1E06  
                      i2l847 220C                        i2l792 275A                        i2l864 2694  
                      i2l856 2228                        i2l873 27F0                        i2l867 2660  
                      i2l879 24CC                        i2l889 2CB0                        _RCREG 000FAE  
         __size_of_RTD2Angle 0038                        _TMR0H 000FD7                        _TMR0L 000FD6  
                      _SPBRG 000FAF                        _PORTD 000F83                        _RCInt 22A0  
                      _PORTH 000F87                        _TRISD 000F95                        _TRISH 000F99  
        ___lmul@multiplicand 0005               __CFG_FCMEN$OFF 000000                        _SerTx 2D40  
            __end_of_isdigit 2CE0                ___ftpack@sign 0005                        _value 0096  
            __end_of_isspace 2BFE                        tablat 000FF5                        status 000FD8  
                ?i2_SerTxStr 0002                   _ReadRTDpos 000000              __initialization 2B6E  
               __end_of_main 2C74               __CFG_OSC$HSPLL 000000                _StrippedValue 0072  
                keyValue@str 0048                       ??_main 00B1                ___fttol@sign1 003C  
           __end_of_SerTxStr 29A2                __activetblptr 000002            ??_MotorDriverInit 00AE  
                     ?_RCInt 0001                    ??_PIDInit 00AE                       ?_SerTx 0001  
                  ??_TMR0Int 0054             __end_of___altoft 28EC                    ??_RTDInit 00AF  
                ?_Delay1TCYx 0001                       _CCPR3L 000FB8                    ??i2_SerTx 0001  
           __end_of___ftpack 275C        __size_of_calculatePID 074A                       u210_41 25C4  
                     i2l1047 2AA2                       i2l1039 2C98                       i2l2201 26B6  
                     i2l3001 1C9A                       i2l2211 271A                       i2l2203 26C2  
                     i2l2213 2726                       i2l2205 26E2                       i2l3021 1CDA  
                     i2l3013 1CBE                       i2l2303 263A                       i2l3031 1CFA  
                     i2l3007 1CB2                       i2l2225 274C                       i2l2209 26FA  
                     i2l2313 266E                       i2l2241 2BF4                       i2l3025 1CE2  
                     i2l3009 1CB6                       i2l2219 273A                       i2l2323 23F4  
                     i2l2251 29CA                       i2l3019 1CD6                       i2l2421 2A96  
                     u212_41 25E2                       i2l2325 240E                       i2l2415 2A56  
                     i2l2263 2892                       i2l2351 2478                       i2l2343 2450  
                     i2l2247 29B4                       i2l2239 2BEE                       i2l2431 1D26  
                     i2l3063 22F4                       i2l2417 2A60                       i2l2265 28A0  
                     i2l2361 24A6                       i2l2353 247E                       i2l2329 241C  
                     i2l2521 1F22                       i2l2513 1F02                       i2l2441 1D4E  
                     i2l2283 25FA                       i2l2347 2462                       i2l2451 1D76  
                     i2l2443 1D56                       i2l3075 2348                       i2l3067 22FE  
                     i2l2197 26A6                       i2l2277 25D2                       i2l2381 278E  
                     i2l2357 2490                       i2l2373 2CD6                       i2l2533 1F5E  
                     i2l2509 1EFA                       i2l2461 1DA4                       i2l2445 1D5C  
                     i2l2429 1D20                       i2l3093 23A6                       i2l3069 2314  
                     i2l2621 2164                       i2l2701 255C                       i2l2279 25EC  
                     i2l2391 27EC                       i2l2543 1FC6                       i2l2631 218C  
                     i2l2615 2158                       i2l2385 27C0                       i2l2561 2000  
                     i2l2537 1F8C                       i2l2529 1F56                       i2l2481 1E38  
                     i2l2457 1D8E                       i2l3097 23BC                       i2l3089 2390  
                     i2l2641 21C8                       i2l2609 212E                       i2l2713 25A0  
                     i2l2705 2570                       i2l2571 2062                       i2l2539 1F9A  
                     i2l2491 1E6C                       i2l2475 1E14                       i2l2723 29FE  
                     i2l2803 28F4                       i2l2651 2200                       i2l2643 21D0  
                     i2l2707 257E                       i2l2581 209A                       i2l2565 202E  
                     i2l2557 1FF2                       i2l2485 1E50                       i2l2901 1984  
                     i2l2637 21B0                       i2l2709 2588                       i2l2741 10B2  
                     i2l2567 2036                       i2l2487 1E60                       i2l2727 2A2A  
                     i2l2807 2906                       i2l2639 21BC                       i2l2751 120C  
                     i2l2489 1E66                       i2l2913 1A00                       i2l2905 19BC  
                     i2l2921 1A1C                       i2l2657 2246                       i2l2649 21F4  
                     i2l2753 123C                       i2l2761 132E                       i2l2745 114A  
                     i2l2587 20CC                       i2l2843 17B8                       i2l2851 17DC  
                     i2l2667 2278                       u215_41 23E6                       i2l2941 1AC4  
                     i2l2925 1A28                       i2l2917 1A0C                       i2l2909 19C8  
                     i2l2861 1828                       i2l2677 24EC                       i2l2773 1490  
                     i2l2871 187C                       i2l2855 180A                       i2l2695 2546  
                     i2l2783 15B2                       i2l2775 14E8                       i2l2759 12FE  
                     i2l2961 1B84                       i2l2953 1B40                       i2l2945 1AFC  
                     i2l2937 1AB8                       i2l2929 1A50                       i2l2881 18C4  
                     i2l2865 1868                       i2l2849 17D6                       i2l2793 17A0  
                     i2l2875 189A                       i2l2867 186C                       i2l2699 2556  
                     i2l2981 1C18                       i2l2973 1BD4                       i2l2965 1B90  
                     i2l2957 1B4C                       i2l2949 1B08                       i2l2893 1940  
                     i2l2789 1780                       i2l2991 1C68                       i2l2985 1C50  
                     i2l2977 1C0C                       i2l2969 1BC8                       i2l2897 1978  
                     i2l2993 1C6E                       i2l2889 1934                       u217_41 2404  
                     i2l2997 1C92                       i2l2989 1C5C                       _RCREG1 000FAE  
           __end_of___lwtoft 2C9A                       u267_41 20EC                       u268_41 2100  
                     _RCSTA1 000FAB                       u288_41 24DE                       _TXREG1 000FAD  
                     _RCflag 0077                       _TXSTA1 000FAC            __end_of_RTD2Angle 2B6E  
                     SerTx@c 00AE                    ??_SerInit 00B1                       ___ftge 275C  
                     ___lmul 29A2                    ??___ftadd 002D               keyValue@length 004A  
                  ??___ftdiv 000F                    ??___ftneg 0004                    ??___ftmul 001E  
                  ??___fttol 0037             __end_of_keyValue 1D06             i2SerTxStr@string 0002  
                     _intErr 00B4                       clear_0 2B74                       clear_1 2B80  
                     _strcmp 2A54                       _strtod 1D06        ___ftmul@f3_as_product 0022  
__size_of_ImplementPIDMotion 005C                 __pdataCOMRAM 005F                 _calculatePID 1064  
                  ??_isdigit 0001            _calculatePID$1984 0051            _calculatePID$1985 004B  
          _calculatePID$1986 004E                 __mediumconst 0000                    ??_isspace 0001  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
        __size_ofi2_SerTxStr 0058                   _StartAngle 0055                   __accesstop 0060  
    __end_of__initialization 2B98                   ___altoft@c 0009                   ___ftadd@f1 0027  
                 ___ftadd@f2 002A                   ___ftge@ff1 0033                   ___ftge@ff2 0036  
              ___rparam_used 000001                   ___ftdiv@f1 0009                   ___ftdiv@f2 000C  
                 ___ftdiv@f3 0013                   ___ftneg@f1 0001                __end_of_RCInt 23D6  
                 ___ftmul@f1 0018                   ___ftmul@f2 001B                   ___fttol@f1 0033  
             __pcstackCOMRAM 0001                __end_of_SerTx 2D50          __size_of_Delay1TCYx 0010  
                 ___lwtoft@c 0009                      ??_RCInt 0053                      ??_SerTx 00AE  
               keyValue@flag 0050                   __pbssBANK0 0060                    ?_SerTxStr 00AF  
                    ?___ftge 0033                      ?___lmul 0001                 ?_Delay10TCYx 0001  
                    _CCP3CON 000FB7                 ?_Delay1KTCYx 0001                    ?___altoft 0009  
                    _BAUDCON 000F7E               ___lmul@product 0009                    ?___ftpack 0001  
                    ?_strcmp 0001                    ?___lwtoft 0009                      ?_strtod 003C  
                    _PIDInit 2AF0                _PIDEnableFlag 0058                      _TMR0Int 2AA4  
 ImplementPIDMotion@PIDValue 0005                      _RTDInit 2BA2               SerTxStr@string 00AF  
                    i2_SerTx 2D60                    ?_keyValue 0048                 ??i2_SerTxStr 0004  
                 ??_SerTxStr 00B1                      __Hparam 0000                      _SerInit 2BFE  
                    __Lparam 0000              _MotorDriverInit 2CE0              __size_of___ftge 0096  
            __size_of___lmul 005A                      ___ftadd 20DC                      ___ftdiv 25B4  
                    ___ftneg 2C9A                      ___ftmul 23D6                      ___fttol 24CE  
               __psmallconst 1000                   ??___altoft 000D                      __pcinit 2B6E  
                 ??___ftpack 0006              Delay10TCYx@unit 00AE                      __ramtop 1000  
                 _initialize 2CFC                      __ptext0 2C4E                      __ptext1 2CFC  
                    __ptext2 2BFE                      __ptext3 2948                      __ptext4 2D40  
                    __ptext5 2BA2                      __ptext6 2D50                      __ptext7 2D14  
                    __ptext8 2D2A                      __ptext9 2AF0                   ??___lwtoft 000C  
            __size_of_strcmp 0050                 __size_of_ISR 2868              __size_of_strtod 03D6  
               __size_of_abs 0028                      _isdigit 2CBE              keyValue@str_end 004E  
                    _isspace 2BD2                      _prevErr 00B7           __end_ofi2_SerTxStr 2A54  
               ??_Delay1TCYx 00AE               __pintcode_body 27F2         end_of_initialization 2B98  
                 ??_keyValue 004C                __Lmediumconst 0000                      int_func 27F2  
                    postdec2 000FDD                   _motorInput 0075                    _RTD2Angle 2B36  
                    postinc0 000FEE                      postinc2 000FDE                      strcmp@r 0006  
         __end_of_Delay1TCYx 2D60                      strtod@s 003C                    _PORTAbits 000F80  
                  _PORTEbits 000F84                    _PORTJbits 000F88                    _TRISAbits 000F92  
                  _TRISBbits 000F93                    _TRISEbits 000F96                    _TRISGbits 000F98  
                  _TRISJbits 000F9A      __end_of_MotorDriverInit 2CFC                  ___ftdiv@exp 0016  
                _CCP3CONbits 000FB7                  ___ftmul@exp 0021                  _StrippedKey 0059  
                 ?_RTD2Angle 0027               __end_of___ftge 27F2               __end_of___lmul 29FC  
       __size_of_Delay10TCYx 0016                __pidataCOMRAM 2D6E   __end_of_ImplementPIDMotion 2948  
                ?_initialize 0001         __size_of_Delay1KTCYx 0016               __end_of_strcmp 2AA4  
             __end_of_strtod 20DC          start_initialization 2B6E              _CurrentVelocity 0063  
               _CurrentAngle 0060                  __end_of_ISR 2870                  __end_of_abs 2C4E  
       calculatePID@setpoint 0045                     ??___ftge 0039                     ??___lmul 0009  
          __size_of_SerTxStr 005A                     ??_strcmp 0005                     ??_strtod 0040  
          __size_of___altoft 007C            __size_of___ftpack 00C6                  __pbssCOMRAM 0055  
          __size_of___lwtoft 0026                __pcstackBANK0 00A0                     ?_PIDInit 0001  
                   ?_TMR0Int 0001           calculatePID@derErr 0048                 _isdigit$1724 0002  
                   ?_RTDInit 0001                     ?i2_SerTx 0001              Delay1KTCYx@unit 00AE  
           ?_MotorDriverInit 0001          __size_of_initialize 0018                    __pnvBANK0 00B1  
          __size_of_keyValue 0558                     ?_SerInit 0001                    __pintcode 0008  
                ??_RTD2Angle 002A                     ?___ftadd 0027                     ?___ftdiv 0009  
                   ?___ftneg 0001                     ?___ftmul 0018                     ?___fttol 0033  
                __smallconst 1000                     ?_isdigit 0001               __size_of_RCInt 0136  
                   ?_isspace 0001               __size_of_SerTx 0010                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D                     i2u317_40 2902                     _PIR1bits 000F9E  
                   i2u290_40 250A                     i2u290_45 2502                     i2u296_40 2A20  
                   i2u296_47 2A16                     i2u297_40 2A4C                     i2u297_47 2A42  
                   _RCONbits 000FD0                  strtod@flags 0042                  strtod@expon 0043  
                   i2SerTx@c 0001                ?_calculatePID 0042                 _isspace$1727 0002  
           __size_of_PIDInit 0046            ___lmul@multiplier 0001                  _INTCON2bits 000FF1  
           __size_of_TMR0Int 004C             __size_of_RTDInit 0030             __size_ofi2_SerTx 000E  
                  keyValue@x 0052                    keyValue@y 0051                     _SetAngle 006F  
                   _SerTxStr 2948                     __Hrparam 0000                     __Lrparam 0000  
           __size_of_SerInit 0028             __size_of___ftadd 01C4             __size_of___ftdiv 00E2  
           __size_of___ftneg 0024                     ___altoft 2870             __size_of___ftmul 00F8  
           __size_of___fttol 00E6                 ??_initialize 00B1                     ___ftpack 2696  
          calculatePID@angle 0042               ??_calculatePID 0048                     ___lwtoft 2C74  
           __size_of_isdigit 0022             __size_of_isspace 002C                 RCInt@counter 0054  
                   __ptext10 2CE0                     __ptext20 22A0                     __ptext12 2AA4  
                   __ptext21 17AE                     __ptext13 1064                     __ptext30 275C  
                   __ptext22 29FC                     __ptext14 24CE                     __ptext31 25B4  
                   __ptext23 2D60                     __ptext15 20DC                     __ptext32 2870  
                   __ptext24 1D06                     __ptext16 2B36                     __ptext33 2696  
                   __ptext25 2BD2                     __ptext17 2C74                     __ptext34 2A54  
                   __ptext26 2CBE                     __ptext18 28EC                     __ptext27 29A2  
                   __ptext19 2C26                     __ptext28 2C9A                     __ptext29 23D6  
         _ImplementPIDMotion 28EC                     _keyValue 17AE                __size_of_main 0026  
             Delay1TCYx@unit 00AE                     _received 0078          ?_ImplementPIDMotion 0005  
         __end_of_initialize 2D14                ??_Delay10TCYx 00AE                   strtod@eexp 0041  
              ??_Delay1KTCYx 00AE         ??_ImplementPIDMotion 0007                   _INTCONbits 000FF2  
                   isdigit@c 0003                     intlevel2 0000                     isspace@c 0003  
                  strtod@res 003E          __end_of_Delay10TCYx 2D40                     strcmp@s1 0001  
                   strcmp@s2 0003          __end_of_Delay1KTCYx 2D2A                     strtod@_u 0044  
       __end_of_calculatePID 17AE                   i2_SerTxStr 29FC  
