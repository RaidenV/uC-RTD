

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Oct 12 02:43:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	idataBANK0
    53  002FC4                     __pidataBANK0:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _AZEL
    57  002FC4  01                 	db	1
    58  0000                     _BAUDCON	set	4024
    59  0000                     _INTCONbits	set	4082
    60  0000                     _IPR1bits	set	3999
    61  0000                     _PIE1bits	set	3997
    62  0000                     _PIR1bits	set	3998
    63  0000                     _PORTAbits	set	3968
    64  0000                     _RCONbits	set	4048
    65  0000                     _RCREG	set	4014
    66  0000                     _RCREG1	set	4014
    67  0000                     _RCSTA1	set	4011
    68  0000                     _SPBRG	set	4015
    69  0000                     _SSPBUF	set	4041
    70  0000                     _TRISAbits	set	3986
    71  0000                     _TXREG1	set	4013
    72  0000                     _TXSTA1	set	4012
    73                           
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     STR_1:
    79  001001  57                 	db	87	;'W'
    80  001002  65                 	db	101	;'e'
    81  001003  6C                 	db	108	;'l'
    82  001004  63                 	db	99	;'c'
    83  001005  6F                 	db	111	;'o'
    84  001006  6D                 	db	109	;'m'
    85  001007  65                 	db	101	;'e'
    86  001008  20                 	db	32
    87  001009  74                 	db	116	;'t'
    88  00100A  6F                 	db	111	;'o'
    89  00100B  20                 	db	32
    90  00100C  74                 	db	116	;'t'
    91  00100D  68                 	db	104	;'h'
    92  00100E  65                 	db	101	;'e'
    93  00100F  20                 	db	32
    94  001010  77                 	db	119	;'w'
    95  001011  6F                 	db	111	;'o'
    96  001012  72                 	db	114	;'r'
    97  001013  6C                 	db	108	;'l'
    98  001014  64                 	db	100	;'d'
    99  001015  20                 	db	32
   100  001016  6F                 	db	111	;'o'
   101  001017  66                 	db	102	;'f'
   102  001018  20                 	db	32
   103  001019  74                 	db	116	;'t'
   104  00101A  6F                 	db	111	;'o'
   105  00101B  6D                 	db	109	;'m'
   106  00101C  6F                 	db	111	;'o'
   107  00101D  72                 	db	114	;'r'
   108  00101E  72                 	db	114	;'r'
   109  00101F  6F                 	db	111	;'o'
   110  001020  77                 	db	119	;'w'
   111  001021  21                 	db	33
   112  001022  21                 	db	33
   113  001023  21                 	db	33
   114  001024  00                 	db	0
   115  001025                     STR_3:
   116  001025  20                 	db	32
   117  001026  20                 	db	32
   118  001027  20                 	db	32
   119  001028  56                 	db	86	;'V'
   120  001029  61                 	db	97	;'a'
   121  00102A  6C                 	db	108	;'l'
   122  00102B  75                 	db	117	;'u'
   123  00102C  65                 	db	101	;'e'
   124  00102D  3A                 	db	58	;':'
   125  00102E  20                 	db	32
   126  00102F  00                 	db	0
   127  001030                     STR_2:
   128  001030  4B                 	db	75	;'K'
   129  001031  65                 	db	101	;'e'
   130  001032  79                 	db	121	;'y'
   131  001033  3A                 	db	58	;':'
   132  001034  20                 	db	32
   133  001035  00                 	db	0
   134  001036                     STR_12:
   135  001036  3F                 	db	63	;'?'
   136  001037  3F                 	db	63	;'?'
   137  001038  3F                 	db	63	;'?'
   138  001039  00                 	db	0
   139  00103A                     STR_20:
   140  00103A  56                 	db	86	;'V'
   141  00103B  45                 	db	69	;'E'
   142  00103C  4C                 	db	76	;'L'
   143  00103D  00                 	db	0
   144  00103E                     STR_4:
   145  00103E  50                 	db	80	;'P'
   146  00103F  4F                 	db	79	;'O'
   147  001040  53                 	db	83	;'S'
   148  001041  00                 	db	0
   149  001042                     STR_21:
   150  001042  76                 	db	118	;'v'
   151  001043  65                 	db	101	;'e'
   152  001044  6C                 	db	108	;'l'
   153  001045  00                 	db	0
   154  001046                     STR_5:
   155  001046  70                 	db	112	;'p'
   156  001047  6F                 	db	111	;'o'
   157  001048  73                 	db	115	;'s'
   158  001049  00                 	db	0
   159  00104A                     STR_10:
   160  00104A  4B                 	db	75	;'K'
   161  00104B  44                 	db	68	;'D'
   162  00104C  00                 	db	0
   163  00104D                     STR_8:
   164  00104D  4B                 	db	75	;'K'
   165  00104E  49                 	db	73	;'I'
   166  00104F  00                 	db	0
   167  001050                     STR_6:
   168  001050  4B                 	db	75	;'K'
   169  001051  50                 	db	80	;'P'
   170  001052  00                 	db	0
   171  001053                     STR_14:
   172  001053  41                 	db	65	;'A'
   173  001054  5A                 	db	90	;'Z'
   174  001055  00                 	db	0
   175  001056                     STR_11:
   176  001056  6B                 	db	107	;'k'
   177  001057  64                 	db	100	;'d'
   178  001058  00                 	db	0
   179  001059                     STR_9:
   180  001059  6B                 	db	107	;'k'
   181  00105A  69                 	db	105	;'i'
   182  00105B  00                 	db	0
   183  00105C                     STR_7:
   184  00105C  6B                 	db	107	;'k'
   185  00105D  70                 	db	112	;'p'
   186  00105E  00                 	db	0
   187  00105F                     STR_15:
   188  00105F  61                 	db	97	;'a'
   189  001060  7A                 	db	122	;'z'
   190  001061  00                 	db	0
   191  0000                     
   192                           ; #config settings
   193  001062  00                 	db	0	; dummy byte at the end
   194  0000                     
   195                           	psect	cinit
   196  002EA2                     __pcinit:
   197                           	opt stack 0
   198  002EA2                     start_initialization:
   199                           	opt stack 0
   200  002EA2                     __initialization:
   201                           	opt stack 0
   202                           
   203                           ; Clear objects allocated to BANK0 (41 bytes)
   204  002EA2  EE00  F0B5         	lfsr	0,__pbssBANK0
   205  002EA6  0E29               	movlw	41
   206  002EA8                     clear_0:
   207  002EA8  6AEE               	clrf	postinc0,c
   208  002EAA  06E8               	decf	wreg,f,c
   209  002EAC  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (34 bytes)
   212  002EAE  EE00  F03F         	lfsr	0,__pbssCOMRAM
   213  002EB2  0E22               	movlw	34
   214  002EB4                     clear_1:
   215  002EB4  6AEE               	clrf	postinc0,c
   216  002EB6  06E8               	decf	wreg,f,c
   217  002EB8  E1FD               	bnz	clear_1
   218                           
   219                           ; Initialize objects allocated to BANK0 (1 bytes)
   220                           ; load TBLPTR registers with __pidataBANK0
   221  002EBA  0EC4               	movlw	low __pidataBANK0
   222  002EBC  6EF6               	movwf	tblptrl,c
   223  002EBE  0E2F               	movlw	high __pidataBANK0
   224  002EC0  6EF7               	movwf	tblptrh,c
   225  002EC2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   226  002EC4  6EF8               	movwf	tblptru,c
   227  002EC6  0009               	tblrd		*+	;fetch initializer
   228  002EC8  CFF5 F0DE          	movff	tablat,__pdataBANK0
   229  002ECC                     end_of_initialization:
   230                           	opt stack 0
   231  002ECC                     __end_of__initialization:
   232                           	opt stack 0
   233  002ECC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   234  002ECE  6EF8               	movwf	tblptru,c
   235  002ED0  0100               	movlb	0
   236  002ED2  EF32  F008         	goto	_main	;jump to C main() function
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           
   244                           	psect	bssCOMRAM
   245  00003F                     __pbssCOMRAM:
   246                           	opt stack 0
   247  00003F                     _Kd:
   248                           	opt stack 0
   249  00003F                     	ds	3
   250  000042                     _Ki:
   251                           	opt stack 0
   252  000042                     	ds	3
   253  000045                     _Kp:
   254                           	opt stack 0
   255  000045                     	ds	3
   256  000048                     _SetAngle:
   257                           	opt stack 0
   258  000048                     	ds	3
   259  00004B                     _StrippedValue:
   260                           	opt stack 0
   261  00004B                     	ds	3
   262  00004E                     _DoublePtr:
   263                           	opt stack 0
   264  00004E                     	ds	2
   265  000050                     _ReceivedChar:
   266                           	opt stack 0
   267  000050                     	ds	1
   268  000051                     _StrippedKey:
   269                           	opt stack 0
   270  000051                     	ds	1
   271  000052                     _value:
   272                           	opt stack 0
   273  000052                     	ds	10
   274  00005C                     _key:
   275                           	opt stack 0
   276  00005C                     	ds	5
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK0
   285  0000B5                     __pbssBANK0:
   286                           	opt stack 0
   287  0000B5                     _CurrentAngle:
   288                           	opt stack 0
   289  0000B5                     	ds	3
   290  0000B8                     _CurrentVelocity:
   291                           	opt stack 0
   292  0000B8                     	ds	3
   293  0000BB                     _RCflag:
   294                           	opt stack 0
   295  0000BB                     	ds	1
   296  0000BC                     _received:
   297                           	opt stack 0
   298  0000BC                     	ds	30
   299  0000DA                     _DoubleSPIM:
   300                           	opt stack 0
   301  0000DA                     	ds	4
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	dataBANK0
   310  0000DE                     __pdataBANK0:
   311                           	opt stack 0
   312  0000DE                     _AZEL:
   313                           	opt stack 0
   314  0000DE                     	ds	1
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           	psect	cstackBANK0
   323  000080                     __pcstackBANK0:
   324                           	opt stack 0
   325  000080                     ??_checksum:
   326  000080                     ?___lwdiv:
   327                           	opt stack 0
   328  000080                     ?___lwmod:
   329                           	opt stack 0
   330  000080                     ?_SPIReassembleDouble:
   331                           	opt stack 0
   332  000080                     ?___ftpack:
   333                           	opt stack 0
   334  000080                     SerTx@c:
   335                           	opt stack 0
   336  000080                     MReceiveSPI@tempCH:
   337                           	opt stack 0
   338  000080                     MGenerateChecksum@sum:
   339                           	opt stack 0
   340  000080                     Delay10TCYx@unit:
   341                           	opt stack 0
   342  000080                     ___lwdiv@dividend:
   343                           	opt stack 0
   344  000080                     ___lwmod@dividend:
   345                           	opt stack 0
   346  000080                     ___ftpack@arg:
   347                           	opt stack 0
   348                           
   349                           ; 3 bytes @ 0x0
   350  000080                     	ds	1
   351  000081                     MSendSPI@Slave:
   352                           	opt stack 0
   353  000081                     MGenerateChecksum@z:
   354                           	opt stack 0
   355  000081                     SerTxStr@string:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x1
   359  000081                     	ds	1
   360  000082                     MSendSPI@tempChar:
   361                           	opt stack 0
   362  000082                     ___lwdiv@divisor:
   363                           	opt stack 0
   364  000082                     ___lwmod@divisor:
   365                           	opt stack 0
   366  000082                     SPIDisassembleDouble@dub:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0x2
   370  000082                     	ds	1
   371  000083                     MSendSPI@tempChar_722:
   372                           	opt stack 0
   373  000083                     ___ftpack@exp:
   374                           	opt stack 0
   375  000083                     SPIReassembleDouble@dub:
   376                           	opt stack 0
   377                           
   378                           ; 3 bytes @ 0x3
   379  000083                     	ds	1
   380  000084                     MSendSPI@data:
   381                           	opt stack 0
   382  000084                     checksum@sum:
   383                           	opt stack 0
   384  000084                     ___ftpack@sign:
   385                           	opt stack 0
   386  000084                     ___lwdiv@counter:
   387                           	opt stack 0
   388  000084                     ___lwmod@counter:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x4
   392  000084                     	ds	1
   393  000085                     ??___ftpack:
   394  000085                     checksum@y:
   395                           	opt stack 0
   396  000085                     ___lwdiv@quotient:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x5
   400  000085                     	ds	3
   401  000088                     ?___ftmul:
   402                           	opt stack 0
   403  000088                     ___ftmul@f1:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0x8
   407  000088                     	ds	3
   408  00008B                     ___ftmul@f2:
   409                           	opt stack 0
   410                           
   411                           ; 3 bytes @ 0xB
   412  00008B                     	ds	3
   413  00008E                     ??___ftmul:
   414                           
   415                           ; 0 bytes @ 0xE
   416  00008E                     	ds	3
   417  000091                     ___ftmul@exp:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x11
   421  000091                     	ds	1
   422  000092                     ___ftmul@f3_as_product:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x12
   426  000092                     	ds	3
   427  000095                     ___ftmul@cntr:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x15
   431  000095                     	ds	1
   432  000096                     ___ftmul@sign:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x16
   436  000096                     	ds	1
   437  000097                     ?___fttol:
   438                           	opt stack 0
   439  000097                     ___fttol@f1:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0x17
   443  000097                     	ds	4
   444  00009B                     ??___fttol:
   445                           
   446                           ; 0 bytes @ 0x1B
   447  00009B                     	ds	5
   448  0000A0                     ___fttol@sign1:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x20
   452  0000A0                     	ds	1
   453  0000A1                     ___fttol@lval:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x21
   457  0000A1                     	ds	4
   458  0000A5                     ___fttol@exp1:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x25
   462  0000A5                     	ds	1
   463  0000A6                     breakDouble@dubs:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0x26
   467  0000A6                     	ds	3
   468  0000A9                     breakDouble@tempDub:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x29
   472  0000A9                     	ds	2
   473  0000AB                     breakDouble@temp1:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x2B
   477  0000AB                     	ds	2
   478  0000AD                     breakDouble@temp2:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x2D
   482  0000AD                     	ds	2
   483  0000AF                     MReceiveStrSPI@str:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x2F
   487  0000AF                     	ds	2
   488  0000B1                     MReceiveStrSPI@Slave:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x31
   492  0000B1                     	ds	1
   493  0000B2                     MReceiveStrSPI@x:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x32
   497  0000B2                     	ds	1
   498  0000B3                     MReceiveStrSPI@x_731:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x33
   502  0000B3                     	ds	1
   503  0000B4                     main@x:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x34
   507  0000B4                     	ds	1
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           
   515                           	psect	cstackCOMRAM
   516  000001                     __pcstackCOMRAM:
   517                           	opt stack 0
   518  000001                     ??_isspace:
   519  000001                     ??_isdigit:
   520  000001                     ?_strcmp:
   521                           	opt stack 0
   522  000001                     ?___ftneg:
   523                           	opt stack 0
   524  000001                     ?i2___ftpack:
   525                           	opt stack 0
   526  000001                     ?___lmul:
   527                           	opt stack 0
   528  000001                     i2SerTx@c:
   529                           	opt stack 0
   530  000001                     strcmp@s1:
   531                           	opt stack 0
   532  000001                     ___ftge@ff1:
   533                           	opt stack 0
   534  000001                     ___ftneg@f1:
   535                           	opt stack 0
   536  000001                     i2___ftpack@arg:
   537                           	opt stack 0
   538  000001                     ___lmul@multiplier:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x0
   542  000001                     	ds	1
   543  000002                     _isdigit$1322:
   544                           	opt stack 0
   545  000002                     _isspace$1325:
   546                           	opt stack 0
   547  000002                     i2SerTxStr@string:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x1
   551  000002                     	ds	1
   552  000003                     isdigit@c:
   553                           	opt stack 0
   554  000003                     isspace@c:
   555                           	opt stack 0
   556  000003                     strcmp@s2:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	1
   561  000004                     i2___ftpack@exp:
   562                           	opt stack 0
   563  000004                     ___ftge@ff2:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x3
   567  000004                     	ds	1
   568  000005                     ??_strcmp:
   569  000005                     i2___ftpack@sign:
   570                           	opt stack 0
   571  000005                     ___lmul@multiplicand:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x4
   575  000005                     	ds	1
   576  000006                     ??i2___ftpack:
   577  000006                     strcmp@r:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x5
   581  000006                     	ds	1
   582  000007                     ??___ftge:
   583                           
   584                           ; 0 bytes @ 0x6
   585  000007                     	ds	2
   586  000009                     ?___ftdiv:
   587                           	opt stack 0
   588  000009                     ?___altoft:
   589                           	opt stack 0
   590  000009                     ?i2___ftmul:
   591                           	opt stack 0
   592  000009                     ___ftdiv@f1:
   593                           	opt stack 0
   594  000009                     i2___ftmul@f1:
   595                           	opt stack 0
   596  000009                     ___lmul@product:
   597                           	opt stack 0
   598  000009                     ___altoft@c:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x8
   602  000009                     	ds	3
   603  00000C                     ___ftdiv@f2:
   604                           	opt stack 0
   605  00000C                     i2___ftmul@f2:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0xB
   609  00000C                     	ds	1
   610  00000D                     ??___altoft:
   611                           
   612                           ; 0 bytes @ 0xC
   613  00000D                     	ds	2
   614  00000F                     ??___ftdiv:
   615  00000F                     ??i2___ftmul:
   616                           
   617                           ; 0 bytes @ 0xE
   618  00000F                     	ds	2
   619  000011                     ___altoft@exp:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x10
   623  000011                     	ds	1
   624  000012                     ___altoft@sign:
   625                           	opt stack 0
   626  000012                     ___ftdiv@cntr:
   627                           	opt stack 0
   628  000012                     i2___ftmul@exp:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x11
   632  000012                     	ds	1
   633  000013                     ___ftdiv@f3:
   634                           	opt stack 0
   635  000013                     i2___ftmul@f3_as_product:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x12
   639  000013                     	ds	3
   640  000016                     ___ftdiv@exp:
   641                           	opt stack 0
   642  000016                     i2___ftmul@cntr:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x15
   646  000016                     	ds	1
   647  000017                     ___ftdiv@sign:
   648                           	opt stack 0
   649  000017                     i2___ftmul@sign:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x16
   653  000017                     	ds	1
   654  000018                     ?_strtod:
   655                           	opt stack 0
   656  000018                     strtod@s:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x17
   660  000018                     	ds	2
   661  00001A                     strtod@res:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x19
   665  00001A                     	ds	2
   666  00001C                     ??_strtod:
   667                           
   668                           ; 0 bytes @ 0x1B
   669  00001C                     	ds	1
   670  00001D                     strtod@eexp:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x1C
   674  00001D                     	ds	1
   675  00001E                     strtod@flags:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x1D
   679  00001E                     	ds	1
   680  00001F                     strtod@expon:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x1E
   684  00001F                     	ds	1
   685  000020                     strtod@_u:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x1F
   689  000020                     	ds	4
   690  000024                     keyValue@str:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x23
   694  000024                     	ds	2
   695  000026                     keyValue@length:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x25
   699  000026                     	ds	2
   700  000028                     ??_keyValue:
   701                           
   702                           ; 0 bytes @ 0x27
   703  000028                     	ds	2
   704  00002A                     keyValue@str_end:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x29
   708  00002A                     	ds	2
   709  00002C                     keyValue@flag:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x2B
   713  00002C                     	ds	1
   714  00002D                     keyValue@y:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x2C
   718  00002D                     	ds	1
   719  00002E                     keyValue@x:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x2D
   723  00002E                     	ds	1
   724  00002F                     
   725                           ; 0 bytes @ 0x2E
   726  00002F                     	ds	1
   727  000030                     RCInt@counter:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x2F
   731  000030                     	ds	1
   732  000031                     ??_ISR:
   733                           
   734                           ; 0 bytes @ 0x30
   735  000031                     	ds	14
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           
   743 ;;
   744 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   745 ;;
   746 ;; *************** function _main *****************
   747 ;; Defined at:
   748 ;;		line 13 in file "SPItest-MASTER.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  x               1   52[BANK0 ] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;		None               void
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;Total ram usage:        1 bytes
   767 ;; Hardware stack levels required when called:   10
   768 ;; This function calls:
   769 ;;		_Delay10TCYx
   770 ;;		_MReceiveStrSPI
   771 ;;		_MSendSPI
   772 ;;		_SPIDisassembleDouble
   773 ;;		_SPIReassembleDouble
   774 ;;		_checksum
   775 ;;		_initialize
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  001064                     __ptext0:
   783                           	opt stack 0
   784  001064                     _main:
   785                           	opt stack 21
   786                           
   787                           ;SPItest-MASTER.c: 15: unsigned char x = 0;
   788                           
   789                           ;incstack = 0
   790  001064  0E00               	movlw	0
   791  001066  0100               	movlb	0	; () banked
   792  001068  6FB4               	movwf	main@x& (0+255),b
   793                           
   794                           ; BSR set to: 0
   795                           ;SPItest-MASTER.c: 16: initialize();
   796  00106A  ECDD  F017         	call	_initialize	;wreg free
   797  00106E  D176               	goto	l271
   798  001070                     l4035:
   799                           
   800                           ;SPItest-MASTER.c: 20: {
   801                           ;SPItest-MASTER.c: 21: if (RCflag == 1)
   802  001070  0100               	movlb	0	; () banked
   803  001072  05BB               	decf	_RCflag& (0+255),w,b
   804  001074  A4D8               	btfss	status,2,c
   805  001076  D7FC               	goto	l4035
   806                           
   807                           ; BSR set to: 0
   808                           ;SPItest-MASTER.c: 22: {
   809                           ;SPItest-MASTER.c: 23: RCflag = 0;
   810  001078  0E00               	movlw	0
   811  00107A  0100               	movlb	0	; () banked
   812  00107C  6FBB               	movwf	_RCflag& (0+255),b
   813                           
   814                           ; BSR set to: 0
   815                           ;SPItest-MASTER.c: 24: if (AZEL == 1)
   816  00107E  0100               	movlb	0	; () banked
   817  001080  05DE               	decf	_AZEL& (0+255),w,b
   818  001082  A4D8               	btfss	status,2,c
   819  001084  D16D               	goto	l4181
   820                           
   821                           ; BSR set to: 0
   822                           ;SPItest-MASTER.c: 25: {
   823                           ;SPItest-MASTER.c: 26: if ((StrippedKey == 0x02) || (StrippedKey == 0x03) || (StrippedKe
      +                          y == 0x04) || (StrippedKey == 0x06) || StrippedKey == 0x08)
   824  001086  0E02               	movlw	2
   825  001088  1851               	xorwf	_StrippedKey,w,c
   826  00108A  B4D8               	btfsc	status,2,c
   827  00108C  D012               	goto	l4051
   828                           
   829                           ; BSR set to: 0
   830  00108E  0E03               	movlw	3
   831  001090  1851               	xorwf	_StrippedKey,w,c
   832  001092  B4D8               	btfsc	status,2,c
   833  001094  D00E               	goto	l4051
   834                           
   835                           ; BSR set to: 0
   836  001096  0E04               	movlw	4
   837  001098  1851               	xorwf	_StrippedKey,w,c
   838  00109A  B4D8               	btfsc	status,2,c
   839  00109C  D00A               	goto	l4051
   840                           
   841                           ; BSR set to: 0
   842  00109E  0E06               	movlw	6
   843  0010A0  1851               	xorwf	_StrippedKey,w,c
   844  0010A2  B4D8               	btfsc	status,2,c
   845  0010A4  D006               	goto	l4051
   846                           
   847                           ; BSR set to: 0
   848  0010A6  0E08               	movlw	8
   849  0010A8  1851               	xorwf	_StrippedKey,w,c
   850  0010AA  B4D8               	btfsc	status,2,c
   851  0010AC  D002               	goto	l4051
   852  0010AE  D116               	goto	l4153
   853                           
   854                           ; BSR set to: 0
   855  0010B0  D000               	goto	l4051
   856  0010B2                     l4051:
   857                           
   858                           ;SPItest-MASTER.c: 29: {
   859                           ;SPItest-MASTER.c: 30: if (StrippedKey == 0x02)
   860  0010B2  0E02               	movlw	2
   861  0010B4  1851               	xorwf	_StrippedKey,w,c
   862  0010B6  A4D8               	btfss	status,2,c
   863  0010B8  D032               	goto	l4071
   864                           
   865                           ;SPItest-MASTER.c: 31: {
   866                           ;SPItest-MASTER.c: 32: MSendSPI(StrippedKey, 1);
   867  0010BA  0E01               	movlw	1
   868  0010BC  0100               	movlb	0	; () banked
   869  0010BE  6F81               	movwf	MSendSPI@Slave& (0+255),b
   870  0010C0  5051               	movf	_StrippedKey,w,c
   871  0010C2  EC6D  F016         	call	_MSendSPI
   872                           
   873                           ;SPItest-MASTER.c: 33: MReceiveStrSPI(DoubleSPIM, 1);
   874  0010C6  0EDA               	movlw	low _DoubleSPIM
   875  0010C8  0100               	movlb	0	; () banked
   876  0010CA  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
   877  0010CC  0E00               	movlw	high _DoubleSPIM
   878  0010CE  0100               	movlb	0	; () banked
   879  0010D0  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
   880  0010D2  0E01               	movlw	1
   881  0010D4  0100               	movlb	0	; () banked
   882  0010D6  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
   883  0010D8  EC43  F014         	call	_MReceiveStrSPI	;wreg free
   884                           
   885                           ;SPItest-MASTER.c: 34: CurrentAngle = SPIReassembleDouble();
   886  0010DC  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
   887  0010E0  C080  F0B5         	movff	?_SPIReassembleDouble,_CurrentAngle
   888  0010E4  C081  F0B6         	movff	?_SPIReassembleDouble+1,_CurrentAngle+1
   889  0010E8  C082  F0B7         	movff	?_SPIReassembleDouble+2,_CurrentAngle+2
   890                           
   891                           ;SPItest-MASTER.c: 35: for (x = 0; x != 4; x++)
   892  0010EC  0E00               	movlw	0
   893  0010EE  0100               	movlb	0	; () banked
   894  0010F0  6FB4               	movwf	main@x& (0+255),b
   895  0010F2                     l4061:
   896                           
   897                           ; BSR set to: 0
   898  0010F2  0E04               	movlw	4
   899  0010F4  0100               	movlb	0	; () banked
   900  0010F6  19B4               	xorwf	main@x& (0+255),w,b
   901  0010F8  B4D8               	btfsc	status,2,c
   902  0010FA  D0E9               	goto	l4151
   903  0010FC  D001               	goto	l4065
   904                           
   905                           ; BSR set to: 0
   906  0010FE  D0E7               	goto	l4151
   907  001100                     l4065:
   908                           
   909                           ; BSR set to: 0
   910                           ;SPItest-MASTER.c: 36: DoubleSPIM[x] = '\0';
   911  001100  0100               	movlb	0	; () banked
   912  001102  51B4               	movf	main@x& (0+255),w,b
   913  001104  0D01               	mullw	1
   914  001106  0EDA               	movlw	low _DoubleSPIM
   915  001108  24F3               	addwf	prodl,w,c
   916  00110A  6ED9               	movwf	fsr2l,c
   917  00110C  0E00               	movlw	high _DoubleSPIM
   918  00110E  20F4               	addwfc	prodh,w,c
   919  001110  6EDA               	movwf	fsr2h,c
   920  001112  0E00               	movlw	0
   921  001114  6EDF               	movwf	indf2,c
   922                           
   923                           ; BSR set to: 0
   924  001116  0100               	movlb	0	; () banked
   925  001118  2BB4               	incf	main@x& (0+255),f,b
   926  00111A  D7EB               	goto	l4061
   927                           
   928                           ; BSR set to: 0
   929                           ;SPItest-MASTER.c: 37: }
   930                           
   931                           ; BSR set to: 0
   932  00111C  D0D8               	goto	l4151
   933  00111E                     l4071:
   934                           
   935                           ;SPItest-MASTER.c: 38: else if (StrippedKey == 0x03)
   936  00111E  0E03               	movlw	3
   937  001120  1851               	xorwf	_StrippedKey,w,c
   938  001122  A4D8               	btfss	status,2,c
   939  001124  D032               	goto	l4091
   940                           
   941                           ;SPItest-MASTER.c: 39: {
   942                           ;SPItest-MASTER.c: 40: MSendSPI(StrippedKey, 1);
   943  001126  0E01               	movlw	1
   944  001128  0100               	movlb	0	; () banked
   945  00112A  6F81               	movwf	MSendSPI@Slave& (0+255),b
   946  00112C  5051               	movf	_StrippedKey,w,c
   947  00112E  EC6D  F016         	call	_MSendSPI
   948                           
   949                           ;SPItest-MASTER.c: 41: MReceiveStrSPI(DoubleSPIM, 1);
   950  001132  0EDA               	movlw	low _DoubleSPIM
   951  001134  0100               	movlb	0	; () banked
   952  001136  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
   953  001138  0E00               	movlw	high _DoubleSPIM
   954  00113A  0100               	movlb	0	; () banked
   955  00113C  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
   956  00113E  0E01               	movlw	1
   957  001140  0100               	movlb	0	; () banked
   958  001142  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
   959  001144  EC43  F014         	call	_MReceiveStrSPI	;wreg free
   960                           
   961                           ;SPItest-MASTER.c: 42: CurrentVelocity = SPIReassembleDouble();
   962  001148  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
   963  00114C  C080  F0B8         	movff	?_SPIReassembleDouble,_CurrentVelocity
   964  001150  C081  F0B9         	movff	?_SPIReassembleDouble+1,_CurrentVelocity+1
   965  001154  C082  F0BA         	movff	?_SPIReassembleDouble+2,_CurrentVelocity+2
   966                           
   967                           ;SPItest-MASTER.c: 43: for (x = 0; x != 4; x++)
   968  001158  0E00               	movlw	0
   969  00115A  0100               	movlb	0	; () banked
   970  00115C  6FB4               	movwf	main@x& (0+255),b
   971  00115E                     l4081:
   972                           
   973                           ; BSR set to: 0
   974  00115E  0E04               	movlw	4
   975  001160  0100               	movlb	0	; () banked
   976  001162  19B4               	xorwf	main@x& (0+255),w,b
   977  001164  B4D8               	btfsc	status,2,c
   978  001166  D0B3               	goto	l4151
   979  001168  D001               	goto	l4085
   980                           
   981                           ; BSR set to: 0
   982  00116A  D0B1               	goto	l4151
   983  00116C                     l4085:
   984                           
   985                           ; BSR set to: 0
   986                           ;SPItest-MASTER.c: 44: DoubleSPIM[x] = '\0';
   987  00116C  0100               	movlb	0	; () banked
   988  00116E  51B4               	movf	main@x& (0+255),w,b
   989  001170  0D01               	mullw	1
   990  001172  0EDA               	movlw	low _DoubleSPIM
   991  001174  24F3               	addwf	prodl,w,c
   992  001176  6ED9               	movwf	fsr2l,c
   993  001178  0E00               	movlw	high _DoubleSPIM
   994  00117A  20F4               	addwfc	prodh,w,c
   995  00117C  6EDA               	movwf	fsr2h,c
   996  00117E  0E00               	movlw	0
   997  001180  6EDF               	movwf	indf2,c
   998                           
   999                           ; BSR set to: 0
  1000  001182  0100               	movlb	0	; () banked
  1001  001184  2BB4               	incf	main@x& (0+255),f,b
  1002  001186  D7EB               	goto	l4081
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;SPItest-MASTER.c: 45: }
  1006                           
  1007                           ; BSR set to: 0
  1008  001188  D0A2               	goto	l4151
  1009  00118A                     l4091:
  1010                           
  1011                           ;SPItest-MASTER.c: 46: else if (StrippedKey == 0x04)
  1012  00118A  0E04               	movlw	4
  1013  00118C  1851               	xorwf	_StrippedKey,w,c
  1014  00118E  A4D8               	btfss	status,2,c
  1015  001190  D032               	goto	l4111
  1016                           
  1017                           ;SPItest-MASTER.c: 47: {
  1018                           ;SPItest-MASTER.c: 48: MSendSPI(StrippedKey, 1);
  1019  001192  0E01               	movlw	1
  1020  001194  0100               	movlb	0	; () banked
  1021  001196  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1022  001198  5051               	movf	_StrippedKey,w,c
  1023  00119A  EC6D  F016         	call	_MSendSPI
  1024                           
  1025                           ;SPItest-MASTER.c: 49: MReceiveStrSPI(DoubleSPIM, 1);
  1026  00119E  0EDA               	movlw	low _DoubleSPIM
  1027  0011A0  0100               	movlb	0	; () banked
  1028  0011A2  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1029  0011A4  0E00               	movlw	high _DoubleSPIM
  1030  0011A6  0100               	movlb	0	; () banked
  1031  0011A8  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1032  0011AA  0E01               	movlw	1
  1033  0011AC  0100               	movlb	0	; () banked
  1034  0011AE  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1035  0011B0  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1036                           
  1037                           ;SPItest-MASTER.c: 50: Kp = SPIReassembleDouble();
  1038  0011B4  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1039  0011B8  C080  F045         	movff	?_SPIReassembleDouble,_Kp
  1040  0011BC  C081  F046         	movff	?_SPIReassembleDouble+1,_Kp+1
  1041  0011C0  C082  F047         	movff	?_SPIReassembleDouble+2,_Kp+2
  1042                           
  1043                           ;SPItest-MASTER.c: 51: for (x = 0; x != 4; x++)
  1044  0011C4  0E00               	movlw	0
  1045  0011C6  0100               	movlb	0	; () banked
  1046  0011C8  6FB4               	movwf	main@x& (0+255),b
  1047  0011CA                     l4101:
  1048                           
  1049                           ; BSR set to: 0
  1050  0011CA  0E04               	movlw	4
  1051  0011CC  0100               	movlb	0	; () banked
  1052  0011CE  19B4               	xorwf	main@x& (0+255),w,b
  1053  0011D0  B4D8               	btfsc	status,2,c
  1054  0011D2  D07D               	goto	l4151
  1055  0011D4  D001               	goto	l4105
  1056                           
  1057                           ; BSR set to: 0
  1058  0011D6  D07B               	goto	l4151
  1059  0011D8                     l4105:
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;SPItest-MASTER.c: 52: DoubleSPIM[x] = '\0';
  1063  0011D8  0100               	movlb	0	; () banked
  1064  0011DA  51B4               	movf	main@x& (0+255),w,b
  1065  0011DC  0D01               	mullw	1
  1066  0011DE  0EDA               	movlw	low _DoubleSPIM
  1067  0011E0  24F3               	addwf	prodl,w,c
  1068  0011E2  6ED9               	movwf	fsr2l,c
  1069  0011E4  0E00               	movlw	high _DoubleSPIM
  1070  0011E6  20F4               	addwfc	prodh,w,c
  1071  0011E8  6EDA               	movwf	fsr2h,c
  1072  0011EA  0E00               	movlw	0
  1073  0011EC  6EDF               	movwf	indf2,c
  1074                           
  1075                           ; BSR set to: 0
  1076  0011EE  0100               	movlb	0	; () banked
  1077  0011F0  2BB4               	incf	main@x& (0+255),f,b
  1078  0011F2  D7EB               	goto	l4101
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;SPItest-MASTER.c: 53: }
  1082                           
  1083                           ; BSR set to: 0
  1084  0011F4  D06C               	goto	l4151
  1085  0011F6                     l4111:
  1086                           
  1087                           ;SPItest-MASTER.c: 54: else if (StrippedKey == 0x06)
  1088  0011F6  0E06               	movlw	6
  1089  0011F8  1851               	xorwf	_StrippedKey,w,c
  1090  0011FA  A4D8               	btfss	status,2,c
  1091  0011FC  D032               	goto	l4131
  1092                           
  1093                           ;SPItest-MASTER.c: 55: {
  1094                           ;SPItest-MASTER.c: 56: MSendSPI(StrippedKey, 1);
  1095  0011FE  0E01               	movlw	1
  1096  001200  0100               	movlb	0	; () banked
  1097  001202  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1098  001204  5051               	movf	_StrippedKey,w,c
  1099  001206  EC6D  F016         	call	_MSendSPI
  1100                           
  1101                           ;SPItest-MASTER.c: 57: MReceiveStrSPI(DoubleSPIM, 1);
  1102  00120A  0EDA               	movlw	low _DoubleSPIM
  1103  00120C  0100               	movlb	0	; () banked
  1104  00120E  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1105  001210  0E00               	movlw	high _DoubleSPIM
  1106  001212  0100               	movlb	0	; () banked
  1107  001214  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1108  001216  0E01               	movlw	1
  1109  001218  0100               	movlb	0	; () banked
  1110  00121A  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1111  00121C  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1112                           
  1113                           ;SPItest-MASTER.c: 58: Ki = SPIReassembleDouble();
  1114  001220  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1115  001224  C080  F042         	movff	?_SPIReassembleDouble,_Ki
  1116  001228  C081  F043         	movff	?_SPIReassembleDouble+1,_Ki+1
  1117  00122C  C082  F044         	movff	?_SPIReassembleDouble+2,_Ki+2
  1118                           
  1119                           ;SPItest-MASTER.c: 59: for (x = 0; x != 4; x++)
  1120  001230  0E00               	movlw	0
  1121  001232  0100               	movlb	0	; () banked
  1122  001234  6FB4               	movwf	main@x& (0+255),b
  1123  001236                     l4121:
  1124                           
  1125                           ; BSR set to: 0
  1126  001236  0E04               	movlw	4
  1127  001238  0100               	movlb	0	; () banked
  1128  00123A  19B4               	xorwf	main@x& (0+255),w,b
  1129  00123C  B4D8               	btfsc	status,2,c
  1130  00123E  D047               	goto	l4151
  1131  001240  D001               	goto	l4125
  1132                           
  1133                           ; BSR set to: 0
  1134  001242  D045               	goto	l4151
  1135  001244                     l4125:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;SPItest-MASTER.c: 60: DoubleSPIM[x] = '\0';
  1139  001244  0100               	movlb	0	; () banked
  1140  001246  51B4               	movf	main@x& (0+255),w,b
  1141  001248  0D01               	mullw	1
  1142  00124A  0EDA               	movlw	low _DoubleSPIM
  1143  00124C  24F3               	addwf	prodl,w,c
  1144  00124E  6ED9               	movwf	fsr2l,c
  1145  001250  0E00               	movlw	high _DoubleSPIM
  1146  001252  20F4               	addwfc	prodh,w,c
  1147  001254  6EDA               	movwf	fsr2h,c
  1148  001256  0E00               	movlw	0
  1149  001258  6EDF               	movwf	indf2,c
  1150                           
  1151                           ; BSR set to: 0
  1152  00125A  0100               	movlb	0	; () banked
  1153  00125C  2BB4               	incf	main@x& (0+255),f,b
  1154  00125E  D7EB               	goto	l4121
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;SPItest-MASTER.c: 61: }
  1158                           
  1159                           ; BSR set to: 0
  1160  001260  D036               	goto	l4151
  1161  001262                     l4131:
  1162                           
  1163                           ;SPItest-MASTER.c: 62: else if (StrippedKey == 0x08)
  1164  001262  0E08               	movlw	8
  1165  001264  1851               	xorwf	_StrippedKey,w,c
  1166  001266  A4D8               	btfss	status,2,c
  1167  001268  D032               	goto	l4151
  1168                           
  1169                           ;SPItest-MASTER.c: 63: {
  1170                           ;SPItest-MASTER.c: 64: MSendSPI(StrippedKey, 1);
  1171  00126A  0E01               	movlw	1
  1172  00126C  0100               	movlb	0	; () banked
  1173  00126E  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1174  001270  5051               	movf	_StrippedKey,w,c
  1175  001272  EC6D  F016         	call	_MSendSPI
  1176                           
  1177                           ;SPItest-MASTER.c: 65: MReceiveStrSPI(DoubleSPIM, 1);
  1178  001276  0EDA               	movlw	low _DoubleSPIM
  1179  001278  0100               	movlb	0	; () banked
  1180  00127A  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1181  00127C  0E00               	movlw	high _DoubleSPIM
  1182  00127E  0100               	movlb	0	; () banked
  1183  001280  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1184  001282  0E01               	movlw	1
  1185  001284  0100               	movlb	0	; () banked
  1186  001286  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1187  001288  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1188                           
  1189                           ;SPItest-MASTER.c: 66: Kd = SPIReassembleDouble();
  1190  00128C  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1191  001290  C080  F03F         	movff	?_SPIReassembleDouble,_Kd
  1192  001294  C081  F040         	movff	?_SPIReassembleDouble+1,_Kd+1
  1193  001298  C082  F041         	movff	?_SPIReassembleDouble+2,_Kd+2
  1194                           
  1195                           ;SPItest-MASTER.c: 67: for (x = 0; x != 4; x++)
  1196  00129C  0E00               	movlw	0
  1197  00129E  0100               	movlb	0	; () banked
  1198  0012A0  6FB4               	movwf	main@x& (0+255),b
  1199  0012A2                     l4141:
  1200                           
  1201                           ; BSR set to: 0
  1202  0012A2  0E04               	movlw	4
  1203  0012A4  0100               	movlb	0	; () banked
  1204  0012A6  19B4               	xorwf	main@x& (0+255),w,b
  1205  0012A8  B4D8               	btfsc	status,2,c
  1206  0012AA  D011               	goto	l4151
  1207  0012AC  D001               	goto	l4145
  1208                           
  1209                           ; BSR set to: 0
  1210  0012AE  D00F               	goto	l4151
  1211  0012B0                     l4145:
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;SPItest-MASTER.c: 68: DoubleSPIM[x] = '\0';
  1215  0012B0  0100               	movlb	0	; () banked
  1216  0012B2  51B4               	movf	main@x& (0+255),w,b
  1217  0012B4  0D01               	mullw	1
  1218  0012B6  0EDA               	movlw	low _DoubleSPIM
  1219  0012B8  24F3               	addwf	prodl,w,c
  1220  0012BA  6ED9               	movwf	fsr2l,c
  1221  0012BC  0E00               	movlw	high _DoubleSPIM
  1222  0012BE  20F4               	addwfc	prodh,w,c
  1223  0012C0  6EDA               	movwf	fsr2h,c
  1224  0012C2  0E00               	movlw	0
  1225  0012C4  6EDF               	movwf	indf2,c
  1226                           
  1227                           ; BSR set to: 0
  1228  0012C6  0100               	movlb	0	; () banked
  1229  0012C8  2BB4               	incf	main@x& (0+255),f,b
  1230  0012CA  D7EB               	goto	l4141
  1231                           
  1232                           ; BSR set to: 0
  1233                           
  1234                           ; BSR set to: 0
  1235                           
  1236                           ; BSR set to: 0
  1237                           
  1238                           ; BSR set to: 0
  1239                           
  1240                           ; BSR set to: 0
  1241                           
  1242                           ; BSR set to: 0
  1243  0012CC  D000               	goto	l4151
  1244  0012CE                     l4151:
  1245                           
  1246                           ;SPItest-MASTER.c: 69: }
  1247                           ;SPItest-MASTER.c: 70: }
  1248                           ;SPItest-MASTER.c: 71: while (!checksum());
  1249  0012CE  EC28  F015         	call	_checksum	;wreg free
  1250  0012D2  0900               	iorlw	0
  1251  0012D4  A4D8               	btfss	status,2,c
  1252  0012D6  D6CC               	goto	l4035
  1253  0012D8  D6EC               	goto	l4051
  1254                           
  1255                           ;SPItest-MASTER.c: 72: }
  1256  0012DA  D6CA               	goto	l4035
  1257  0012DC                     l4153:
  1258                           
  1259                           ;SPItest-MASTER.c: 73: else if ((StrippedKey == 0x01) || (StrippedKey == 0x05) || (Strip
      +                          pedKey == 0x07) || (StrippedKey == 0x09))
  1260  0012DC  0451               	decf	_StrippedKey,w,c
  1261  0012DE  B4D8               	btfsc	status,2,c
  1262  0012E0  D00C               	goto	l4161
  1263  0012E2  0E05               	movlw	5
  1264  0012E4  1851               	xorwf	_StrippedKey,w,c
  1265  0012E6  B4D8               	btfsc	status,2,c
  1266  0012E8  D008               	goto	l4161
  1267  0012EA  0E07               	movlw	7
  1268  0012EC  1851               	xorwf	_StrippedKey,w,c
  1269  0012EE  B4D8               	btfsc	status,2,c
  1270  0012F0  D004               	goto	l4161
  1271  0012F2  0E09               	movlw	9
  1272  0012F4  1851               	xorwf	_StrippedKey,w,c
  1273  0012F6  A4D8               	btfss	status,2,c
  1274  0012F8  D6BB               	goto	l4035
  1275  0012FA                     l4161:
  1276                           
  1277                           ;SPItest-MASTER.c: 74: {
  1278                           ;SPItest-MASTER.c: 75: MSendSPI(StrippedKey, 1);
  1279  0012FA  0E01               	movlw	1
  1280  0012FC  0100               	movlb	0	; () banked
  1281  0012FE  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1282  001300  5051               	movf	_StrippedKey,w,c
  1283  001302  EC6D  F016         	call	_MSendSPI
  1284                           
  1285                           ;SPItest-MASTER.c: 76: SPIDisassembleDouble(StrippedValue);
  1286  001306  C04B  F082         	movff	_StrippedValue,SPIDisassembleDouble@dub
  1287  00130A  C04C  F083         	movff	_StrippedValue+1,SPIDisassembleDouble@dub+1
  1288  00130E  C04D  F084         	movff	_StrippedValue+2,SPIDisassembleDouble@dub+2
  1289  001312  ECED  F016         	call	_SPIDisassembleDouble	;wreg free
  1290                           
  1291                           ;SPItest-MASTER.c: 77: PORTAbits.RA3 = 0;
  1292  001316  9680               	bcf	3968,3,c	;volatile
  1293                           
  1294                           ;SPItest-MASTER.c: 78: while (PORTAbits.RA1);
  1295  001318  D000               	goto	l267
  1296  00131A                     l267:
  1297  00131A  B280               	btfsc	3968,1,c	;volatile
  1298  00131C  D7FE               	goto	l267
  1299                           
  1300                           ;SPItest-MASTER.c: 79: Delay10TCYx(50);
  1301  00131E  0E32               	movlw	50
  1302  001320  ECC3  F017         	call	_Delay10TCYx
  1303                           
  1304                           ;SPItest-MASTER.c: 80: for (x = 0; x != 4; x++)
  1305  001324  0E00               	movlw	0
  1306  001326  0100               	movlb	0	; () banked
  1307  001328  6FB4               	movwf	main@x& (0+255),b
  1308  00132A                     l4171:
  1309                           
  1310                           ; BSR set to: 0
  1311  00132A  0E04               	movlw	4
  1312  00132C  0100               	movlb	0	; () banked
  1313  00132E  19B4               	xorwf	main@x& (0+255),w,b
  1314  001330  B4D8               	btfsc	status,2,c
  1315  001332  D014               	goto	l271
  1316  001334  D001               	goto	l4175
  1317                           
  1318                           ; BSR set to: 0
  1319  001336  D012               	goto	l271
  1320  001338                     l4175:
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;SPItest-MASTER.c: 81: MSendSPI(DoubleSPIM[x], 1);
  1324  001338  0E01               	movlw	1
  1325  00133A  0100               	movlb	0	; () banked
  1326  00133C  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1327  00133E  0100               	movlb	0	; () banked
  1328  001340  51B4               	movf	main@x& (0+255),w,b
  1329  001342  0D01               	mullw	1
  1330  001344  0EDA               	movlw	low _DoubleSPIM
  1331  001346  24F3               	addwf	prodl,w,c
  1332  001348  6ED9               	movwf	fsr2l,c
  1333  00134A  0E00               	movlw	high _DoubleSPIM
  1334  00134C  20F4               	addwfc	prodh,w,c
  1335  00134E  6EDA               	movwf	fsr2h,c
  1336  001350  50DF               	movf	indf2,w,c
  1337  001352  EC6D  F016         	call	_MSendSPI
  1338  001356  0100               	movlb	0	; () banked
  1339  001358  2BB4               	incf	main@x& (0+255),f,b
  1340  00135A  D7E7               	goto	l4171
  1341  00135C                     l271:
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;SPItest-MASTER.c: 82: PORTAbits.RA3 = 1;
  1345  00135C  8680               	bsf	3968,3,c	;volatile
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;SPItest-MASTER.c: 83: }
  1349                           ;SPItest-MASTER.c: 84: }
  1350                           
  1351                           ; BSR set to: 0
  1352  00135E  D688               	goto	l4035
  1353  001360                     l4181:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;SPItest-MASTER.c: 86: else if (AZEL == 2)
  1357  001360  0E02               	movlw	2
  1358  001362  0100               	movlb	0	; () banked
  1359  001364  19DE               	xorwf	_AZEL& (0+255),w,b
  1360  001366  A4D8               	btfss	status,2,c
  1361  001368  D683               	goto	l4035
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;SPItest-MASTER.c: 87: {
  1365                           ;SPItest-MASTER.c: 88: if ((StrippedKey == 0x02) || (StrippedKey == 0x03) || (StrippedKe
      +                          y == 0x04) || (StrippedKey == 0x06) || StrippedKey == 0x08)
  1366  00136A  0E02               	movlw	2
  1367  00136C  1851               	xorwf	_StrippedKey,w,c
  1368  00136E  B4D8               	btfsc	status,2,c
  1369  001370  D012               	goto	l4193
  1370                           
  1371                           ; BSR set to: 0
  1372  001372  0E03               	movlw	3
  1373  001374  1851               	xorwf	_StrippedKey,w,c
  1374  001376  B4D8               	btfsc	status,2,c
  1375  001378  D00E               	goto	l4193
  1376                           
  1377                           ; BSR set to: 0
  1378  00137A  0E04               	movlw	4
  1379  00137C  1851               	xorwf	_StrippedKey,w,c
  1380  00137E  B4D8               	btfsc	status,2,c
  1381  001380  D00A               	goto	l4193
  1382                           
  1383                           ; BSR set to: 0
  1384  001382  0E06               	movlw	6
  1385  001384  1851               	xorwf	_StrippedKey,w,c
  1386  001386  B4D8               	btfsc	status,2,c
  1387  001388  D006               	goto	l4193
  1388                           
  1389                           ; BSR set to: 0
  1390  00138A  0E08               	movlw	8
  1391  00138C  1851               	xorwf	_StrippedKey,w,c
  1392  00138E  B4D8               	btfsc	status,2,c
  1393  001390  D002               	goto	l4193
  1394  001392  D116               	goto	l4295
  1395                           
  1396                           ; BSR set to: 0
  1397  001394  D000               	goto	l4193
  1398  001396                     l4193:
  1399                           
  1400                           ;SPItest-MASTER.c: 91: {
  1401                           ;SPItest-MASTER.c: 92: if (StrippedKey == 0x02)
  1402  001396  0E02               	movlw	2
  1403  001398  1851               	xorwf	_StrippedKey,w,c
  1404  00139A  A4D8               	btfss	status,2,c
  1405  00139C  D032               	goto	l4213
  1406                           
  1407                           ;SPItest-MASTER.c: 93: {
  1408                           ;SPItest-MASTER.c: 94: MSendSPI(StrippedKey, 2);
  1409  00139E  0E02               	movlw	2
  1410  0013A0  0100               	movlb	0	; () banked
  1411  0013A2  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1412  0013A4  5051               	movf	_StrippedKey,w,c
  1413  0013A6  EC6D  F016         	call	_MSendSPI
  1414                           
  1415                           ;SPItest-MASTER.c: 95: MReceiveStrSPI(DoubleSPIM, 2);
  1416  0013AA  0EDA               	movlw	low _DoubleSPIM
  1417  0013AC  0100               	movlb	0	; () banked
  1418  0013AE  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1419  0013B0  0E00               	movlw	high _DoubleSPIM
  1420  0013B2  0100               	movlb	0	; () banked
  1421  0013B4  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1422  0013B6  0E02               	movlw	2
  1423  0013B8  0100               	movlb	0	; () banked
  1424  0013BA  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1425  0013BC  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1426                           
  1427                           ;SPItest-MASTER.c: 96: CurrentAngle = SPIReassembleDouble();
  1428  0013C0  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1429  0013C4  C080  F0B5         	movff	?_SPIReassembleDouble,_CurrentAngle
  1430  0013C8  C081  F0B6         	movff	?_SPIReassembleDouble+1,_CurrentAngle+1
  1431  0013CC  C082  F0B7         	movff	?_SPIReassembleDouble+2,_CurrentAngle+2
  1432                           
  1433                           ;SPItest-MASTER.c: 97: for (x = 0; x != 4; x++)
  1434  0013D0  0E00               	movlw	0
  1435  0013D2  0100               	movlb	0	; () banked
  1436  0013D4  6FB4               	movwf	main@x& (0+255),b
  1437  0013D6                     l4203:
  1438                           
  1439                           ; BSR set to: 0
  1440  0013D6  0E04               	movlw	4
  1441  0013D8  0100               	movlb	0	; () banked
  1442  0013DA  19B4               	xorwf	main@x& (0+255),w,b
  1443  0013DC  B4D8               	btfsc	status,2,c
  1444  0013DE  D0E9               	goto	l4293
  1445  0013E0  D001               	goto	l4207
  1446                           
  1447                           ; BSR set to: 0
  1448  0013E2  D0E7               	goto	l4293
  1449  0013E4                     l4207:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;SPItest-MASTER.c: 98: DoubleSPIM[x] = '\0';
  1453  0013E4  0100               	movlb	0	; () banked
  1454  0013E6  51B4               	movf	main@x& (0+255),w,b
  1455  0013E8  0D01               	mullw	1
  1456  0013EA  0EDA               	movlw	low _DoubleSPIM
  1457  0013EC  24F3               	addwf	prodl,w,c
  1458  0013EE  6ED9               	movwf	fsr2l,c
  1459  0013F0  0E00               	movlw	high _DoubleSPIM
  1460  0013F2  20F4               	addwfc	prodh,w,c
  1461  0013F4  6EDA               	movwf	fsr2h,c
  1462  0013F6  0E00               	movlw	0
  1463  0013F8  6EDF               	movwf	indf2,c
  1464                           
  1465                           ; BSR set to: 0
  1466  0013FA  0100               	movlb	0	; () banked
  1467  0013FC  2BB4               	incf	main@x& (0+255),f,b
  1468  0013FE  D7EB               	goto	l4203
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;SPItest-MASTER.c: 99: }
  1472                           
  1473                           ; BSR set to: 0
  1474  001400  D0D8               	goto	l4293
  1475  001402                     l4213:
  1476                           
  1477                           ;SPItest-MASTER.c: 100: else if (StrippedKey == 0x03)
  1478  001402  0E03               	movlw	3
  1479  001404  1851               	xorwf	_StrippedKey,w,c
  1480  001406  A4D8               	btfss	status,2,c
  1481  001408  D032               	goto	l4233
  1482                           
  1483                           ;SPItest-MASTER.c: 101: {
  1484                           ;SPItest-MASTER.c: 102: MSendSPI(StrippedKey, 2);
  1485  00140A  0E02               	movlw	2
  1486  00140C  0100               	movlb	0	; () banked
  1487  00140E  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1488  001410  5051               	movf	_StrippedKey,w,c
  1489  001412  EC6D  F016         	call	_MSendSPI
  1490                           
  1491                           ;SPItest-MASTER.c: 103: MReceiveStrSPI(DoubleSPIM, 2);
  1492  001416  0EDA               	movlw	low _DoubleSPIM
  1493  001418  0100               	movlb	0	; () banked
  1494  00141A  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1495  00141C  0E00               	movlw	high _DoubleSPIM
  1496  00141E  0100               	movlb	0	; () banked
  1497  001420  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1498  001422  0E02               	movlw	2
  1499  001424  0100               	movlb	0	; () banked
  1500  001426  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1501  001428  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1502                           
  1503                           ;SPItest-MASTER.c: 104: CurrentVelocity = SPIReassembleDouble();
  1504  00142C  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1505  001430  C080  F0B8         	movff	?_SPIReassembleDouble,_CurrentVelocity
  1506  001434  C081  F0B9         	movff	?_SPIReassembleDouble+1,_CurrentVelocity+1
  1507  001438  C082  F0BA         	movff	?_SPIReassembleDouble+2,_CurrentVelocity+2
  1508                           
  1509                           ;SPItest-MASTER.c: 105: for (x = 0; x != 4; x++)
  1510  00143C  0E00               	movlw	0
  1511  00143E  0100               	movlb	0	; () banked
  1512  001440  6FB4               	movwf	main@x& (0+255),b
  1513  001442                     l4223:
  1514                           
  1515                           ; BSR set to: 0
  1516  001442  0E04               	movlw	4
  1517  001444  0100               	movlb	0	; () banked
  1518  001446  19B4               	xorwf	main@x& (0+255),w,b
  1519  001448  B4D8               	btfsc	status,2,c
  1520  00144A  D0B3               	goto	l4293
  1521  00144C  D001               	goto	l4227
  1522                           
  1523                           ; BSR set to: 0
  1524  00144E  D0B1               	goto	l4293
  1525  001450                     l4227:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;SPItest-MASTER.c: 106: DoubleSPIM[x] = '\0';
  1529  001450  0100               	movlb	0	; () banked
  1530  001452  51B4               	movf	main@x& (0+255),w,b
  1531  001454  0D01               	mullw	1
  1532  001456  0EDA               	movlw	low _DoubleSPIM
  1533  001458  24F3               	addwf	prodl,w,c
  1534  00145A  6ED9               	movwf	fsr2l,c
  1535  00145C  0E00               	movlw	high _DoubleSPIM
  1536  00145E  20F4               	addwfc	prodh,w,c
  1537  001460  6EDA               	movwf	fsr2h,c
  1538  001462  0E00               	movlw	0
  1539  001464  6EDF               	movwf	indf2,c
  1540                           
  1541                           ; BSR set to: 0
  1542  001466  0100               	movlb	0	; () banked
  1543  001468  2BB4               	incf	main@x& (0+255),f,b
  1544  00146A  D7EB               	goto	l4223
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;SPItest-MASTER.c: 107: }
  1548                           
  1549                           ; BSR set to: 0
  1550  00146C  D0A2               	goto	l4293
  1551  00146E                     l4233:
  1552                           
  1553                           ;SPItest-MASTER.c: 108: else if (StrippedKey == 0x04)
  1554  00146E  0E04               	movlw	4
  1555  001470  1851               	xorwf	_StrippedKey,w,c
  1556  001472  A4D8               	btfss	status,2,c
  1557  001474  D032               	goto	l4253
  1558                           
  1559                           ;SPItest-MASTER.c: 109: {
  1560                           ;SPItest-MASTER.c: 110: MSendSPI(StrippedKey, 2);
  1561  001476  0E02               	movlw	2
  1562  001478  0100               	movlb	0	; () banked
  1563  00147A  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1564  00147C  5051               	movf	_StrippedKey,w,c
  1565  00147E  EC6D  F016         	call	_MSendSPI
  1566                           
  1567                           ;SPItest-MASTER.c: 111: MReceiveStrSPI(DoubleSPIM, 2);
  1568  001482  0EDA               	movlw	low _DoubleSPIM
  1569  001484  0100               	movlb	0	; () banked
  1570  001486  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1571  001488  0E00               	movlw	high _DoubleSPIM
  1572  00148A  0100               	movlb	0	; () banked
  1573  00148C  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1574  00148E  0E02               	movlw	2
  1575  001490  0100               	movlb	0	; () banked
  1576  001492  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1577  001494  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1578                           
  1579                           ;SPItest-MASTER.c: 112: Kp = SPIReassembleDouble();
  1580  001498  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1581  00149C  C080  F045         	movff	?_SPIReassembleDouble,_Kp
  1582  0014A0  C081  F046         	movff	?_SPIReassembleDouble+1,_Kp+1
  1583  0014A4  C082  F047         	movff	?_SPIReassembleDouble+2,_Kp+2
  1584                           
  1585                           ;SPItest-MASTER.c: 113: for (x = 0; x != 4; x++)
  1586  0014A8  0E00               	movlw	0
  1587  0014AA  0100               	movlb	0	; () banked
  1588  0014AC  6FB4               	movwf	main@x& (0+255),b
  1589  0014AE                     l4243:
  1590                           
  1591                           ; BSR set to: 0
  1592  0014AE  0E04               	movlw	4
  1593  0014B0  0100               	movlb	0	; () banked
  1594  0014B2  19B4               	xorwf	main@x& (0+255),w,b
  1595  0014B4  B4D8               	btfsc	status,2,c
  1596  0014B6  D07D               	goto	l4293
  1597  0014B8  D001               	goto	l4247
  1598                           
  1599                           ; BSR set to: 0
  1600  0014BA  D07B               	goto	l4293
  1601  0014BC                     l4247:
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;SPItest-MASTER.c: 114: DoubleSPIM[x] = '\0';
  1605  0014BC  0100               	movlb	0	; () banked
  1606  0014BE  51B4               	movf	main@x& (0+255),w,b
  1607  0014C0  0D01               	mullw	1
  1608  0014C2  0EDA               	movlw	low _DoubleSPIM
  1609  0014C4  24F3               	addwf	prodl,w,c
  1610  0014C6  6ED9               	movwf	fsr2l,c
  1611  0014C8  0E00               	movlw	high _DoubleSPIM
  1612  0014CA  20F4               	addwfc	prodh,w,c
  1613  0014CC  6EDA               	movwf	fsr2h,c
  1614  0014CE  0E00               	movlw	0
  1615  0014D0  6EDF               	movwf	indf2,c
  1616                           
  1617                           ; BSR set to: 0
  1618  0014D2  0100               	movlb	0	; () banked
  1619  0014D4  2BB4               	incf	main@x& (0+255),f,b
  1620  0014D6  D7EB               	goto	l4243
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;SPItest-MASTER.c: 115: }
  1624                           
  1625                           ; BSR set to: 0
  1626  0014D8  D06C               	goto	l4293
  1627  0014DA                     l4253:
  1628                           
  1629                           ;SPItest-MASTER.c: 116: else if (StrippedKey == 0x06)
  1630  0014DA  0E06               	movlw	6
  1631  0014DC  1851               	xorwf	_StrippedKey,w,c
  1632  0014DE  A4D8               	btfss	status,2,c
  1633  0014E0  D032               	goto	l4273
  1634                           
  1635                           ;SPItest-MASTER.c: 117: {
  1636                           ;SPItest-MASTER.c: 118: MSendSPI(StrippedKey, 2);
  1637  0014E2  0E02               	movlw	2
  1638  0014E4  0100               	movlb	0	; () banked
  1639  0014E6  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1640  0014E8  5051               	movf	_StrippedKey,w,c
  1641  0014EA  EC6D  F016         	call	_MSendSPI
  1642                           
  1643                           ;SPItest-MASTER.c: 119: MReceiveStrSPI(DoubleSPIM, 2);
  1644  0014EE  0EDA               	movlw	low _DoubleSPIM
  1645  0014F0  0100               	movlb	0	; () banked
  1646  0014F2  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1647  0014F4  0E00               	movlw	high _DoubleSPIM
  1648  0014F6  0100               	movlb	0	; () banked
  1649  0014F8  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1650  0014FA  0E02               	movlw	2
  1651  0014FC  0100               	movlb	0	; () banked
  1652  0014FE  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1653  001500  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1654                           
  1655                           ;SPItest-MASTER.c: 120: Ki = SPIReassembleDouble();
  1656  001504  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1657  001508  C080  F042         	movff	?_SPIReassembleDouble,_Ki
  1658  00150C  C081  F043         	movff	?_SPIReassembleDouble+1,_Ki+1
  1659  001510  C082  F044         	movff	?_SPIReassembleDouble+2,_Ki+2
  1660                           
  1661                           ;SPItest-MASTER.c: 121: for (x = 0; x != 4; x++)
  1662  001514  0E00               	movlw	0
  1663  001516  0100               	movlb	0	; () banked
  1664  001518  6FB4               	movwf	main@x& (0+255),b
  1665  00151A                     l4263:
  1666                           
  1667                           ; BSR set to: 0
  1668  00151A  0E04               	movlw	4
  1669  00151C  0100               	movlb	0	; () banked
  1670  00151E  19B4               	xorwf	main@x& (0+255),w,b
  1671  001520  B4D8               	btfsc	status,2,c
  1672  001522  D047               	goto	l4293
  1673  001524  D001               	goto	l4267
  1674                           
  1675                           ; BSR set to: 0
  1676  001526  D045               	goto	l4293
  1677  001528                     l4267:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;SPItest-MASTER.c: 122: DoubleSPIM[x] = '\0';
  1681  001528  0100               	movlb	0	; () banked
  1682  00152A  51B4               	movf	main@x& (0+255),w,b
  1683  00152C  0D01               	mullw	1
  1684  00152E  0EDA               	movlw	low _DoubleSPIM
  1685  001530  24F3               	addwf	prodl,w,c
  1686  001532  6ED9               	movwf	fsr2l,c
  1687  001534  0E00               	movlw	high _DoubleSPIM
  1688  001536  20F4               	addwfc	prodh,w,c
  1689  001538  6EDA               	movwf	fsr2h,c
  1690  00153A  0E00               	movlw	0
  1691  00153C  6EDF               	movwf	indf2,c
  1692                           
  1693                           ; BSR set to: 0
  1694  00153E  0100               	movlb	0	; () banked
  1695  001540  2BB4               	incf	main@x& (0+255),f,b
  1696  001542  D7EB               	goto	l4263
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;SPItest-MASTER.c: 123: }
  1700                           
  1701                           ; BSR set to: 0
  1702  001544  D036               	goto	l4293
  1703  001546                     l4273:
  1704                           
  1705                           ;SPItest-MASTER.c: 124: else if (StrippedKey == 0x08)
  1706  001546  0E08               	movlw	8
  1707  001548  1851               	xorwf	_StrippedKey,w,c
  1708  00154A  A4D8               	btfss	status,2,c
  1709  00154C  D032               	goto	l4293
  1710                           
  1711                           ;SPItest-MASTER.c: 125: {
  1712                           ;SPItest-MASTER.c: 126: MSendSPI(StrippedKey, 2);
  1713  00154E  0E02               	movlw	2
  1714  001550  0100               	movlb	0	; () banked
  1715  001552  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1716  001554  5051               	movf	_StrippedKey,w,c
  1717  001556  EC6D  F016         	call	_MSendSPI
  1718                           
  1719                           ;SPItest-MASTER.c: 127: MReceiveStrSPI(DoubleSPIM, 2);
  1720  00155A  0EDA               	movlw	low _DoubleSPIM
  1721  00155C  0100               	movlb	0	; () banked
  1722  00155E  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1723  001560  0E00               	movlw	high _DoubleSPIM
  1724  001562  0100               	movlb	0	; () banked
  1725  001564  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1726  001566  0E02               	movlw	2
  1727  001568  0100               	movlb	0	; () banked
  1728  00156A  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1729  00156C  EC43  F014         	call	_MReceiveStrSPI	;wreg free
  1730                           
  1731                           ;SPItest-MASTER.c: 128: Kd = SPIReassembleDouble();
  1732  001570  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  1733  001574  C080  F03F         	movff	?_SPIReassembleDouble,_Kd
  1734  001578  C081  F040         	movff	?_SPIReassembleDouble+1,_Kd+1
  1735  00157C  C082  F041         	movff	?_SPIReassembleDouble+2,_Kd+2
  1736                           
  1737                           ;SPItest-MASTER.c: 129: for (x = 0; x != 4; x++)
  1738  001580  0E00               	movlw	0
  1739  001582  0100               	movlb	0	; () banked
  1740  001584  6FB4               	movwf	main@x& (0+255),b
  1741  001586                     l4283:
  1742                           
  1743                           ; BSR set to: 0
  1744  001586  0E04               	movlw	4
  1745  001588  0100               	movlb	0	; () banked
  1746  00158A  19B4               	xorwf	main@x& (0+255),w,b
  1747  00158C  B4D8               	btfsc	status,2,c
  1748  00158E  D011               	goto	l4293
  1749  001590  D001               	goto	l4287
  1750                           
  1751                           ; BSR set to: 0
  1752  001592  D00F               	goto	l4293
  1753  001594                     l4287:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;SPItest-MASTER.c: 130: DoubleSPIM[x] = '\0';
  1757  001594  0100               	movlb	0	; () banked
  1758  001596  51B4               	movf	main@x& (0+255),w,b
  1759  001598  0D01               	mullw	1
  1760  00159A  0EDA               	movlw	low _DoubleSPIM
  1761  00159C  24F3               	addwf	prodl,w,c
  1762  00159E  6ED9               	movwf	fsr2l,c
  1763  0015A0  0E00               	movlw	high _DoubleSPIM
  1764  0015A2  20F4               	addwfc	prodh,w,c
  1765  0015A4  6EDA               	movwf	fsr2h,c
  1766  0015A6  0E00               	movlw	0
  1767  0015A8  6EDF               	movwf	indf2,c
  1768                           
  1769                           ; BSR set to: 0
  1770  0015AA  0100               	movlb	0	; () banked
  1771  0015AC  2BB4               	incf	main@x& (0+255),f,b
  1772  0015AE  D7EB               	goto	l4283
  1773                           
  1774                           ; BSR set to: 0
  1775                           
  1776                           ; BSR set to: 0
  1777                           
  1778                           ; BSR set to: 0
  1779                           
  1780                           ; BSR set to: 0
  1781                           
  1782                           ; BSR set to: 0
  1783                           
  1784                           ; BSR set to: 0
  1785  0015B0  D000               	goto	l4293
  1786  0015B2                     l4293:
  1787                           
  1788                           ;SPItest-MASTER.c: 131: }
  1789                           ;SPItest-MASTER.c: 132: }
  1790                           ;SPItest-MASTER.c: 133: while (!checksum());
  1791  0015B2  EC28  F015         	call	_checksum	;wreg free
  1792  0015B6  0900               	iorlw	0
  1793  0015B8  A4D8               	btfss	status,2,c
  1794  0015BA  D55A               	goto	l4035
  1795  0015BC  D6EC               	goto	l4193
  1796                           
  1797                           ;SPItest-MASTER.c: 134: }
  1798  0015BE  D558               	goto	l4035
  1799  0015C0                     l4295:
  1800                           
  1801                           ;SPItest-MASTER.c: 135: else if ((StrippedKey == 0x01) || (StrippedKey == 0x05) || (Stri
      +                          ppedKey == 0x07) || (StrippedKey == 0x09))
  1802  0015C0  0451               	decf	_StrippedKey,w,c
  1803  0015C2  B4D8               	btfsc	status,2,c
  1804  0015C4  D00C               	goto	l4303
  1805  0015C6  0E05               	movlw	5
  1806  0015C8  1851               	xorwf	_StrippedKey,w,c
  1807  0015CA  B4D8               	btfsc	status,2,c
  1808  0015CC  D008               	goto	l4303
  1809  0015CE  0E07               	movlw	7
  1810  0015D0  1851               	xorwf	_StrippedKey,w,c
  1811  0015D2  B4D8               	btfsc	status,2,c
  1812  0015D4  D004               	goto	l4303
  1813  0015D6  0E09               	movlw	9
  1814  0015D8  1851               	xorwf	_StrippedKey,w,c
  1815  0015DA  A4D8               	btfss	status,2,c
  1816  0015DC  D549               	goto	l4035
  1817  0015DE                     l4303:
  1818                           
  1819                           ;SPItest-MASTER.c: 136: {
  1820                           ;SPItest-MASTER.c: 137: MSendSPI(StrippedKey, 2);
  1821  0015DE  0E02               	movlw	2
  1822  0015E0  0100               	movlb	0	; () banked
  1823  0015E2  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1824  0015E4  5051               	movf	_StrippedKey,w,c
  1825  0015E6  EC6D  F016         	call	_MSendSPI
  1826                           
  1827                           ;SPItest-MASTER.c: 138: SPIDisassembleDouble(StrippedValue);
  1828  0015EA  C04B  F082         	movff	_StrippedValue,SPIDisassembleDouble@dub
  1829  0015EE  C04C  F083         	movff	_StrippedValue+1,SPIDisassembleDouble@dub+1
  1830  0015F2  C04D  F084         	movff	_StrippedValue+2,SPIDisassembleDouble@dub+2
  1831  0015F6  ECED  F016         	call	_SPIDisassembleDouble	;wreg free
  1832                           
  1833                           ;SPItest-MASTER.c: 139: PORTAbits.RA4 = 0;
  1834  0015FA  9880               	bcf	3968,4,c	;volatile
  1835                           
  1836                           ;SPItest-MASTER.c: 140: while (PORTAbits.RA2);
  1837  0015FC  D000               	goto	l302
  1838  0015FE                     l302:
  1839  0015FE  B480               	btfsc	3968,2,c	;volatile
  1840  001600  D7FE               	goto	l302
  1841                           
  1842                           ;SPItest-MASTER.c: 141: Delay10TCYx(50);
  1843  001602  0E32               	movlw	50
  1844  001604  ECC3  F017         	call	_Delay10TCYx
  1845                           
  1846                           ;SPItest-MASTER.c: 142: for (x = 0; x != 4; x++)
  1847  001608  0E00               	movlw	0
  1848  00160A  0100               	movlb	0	; () banked
  1849  00160C  6FB4               	movwf	main@x& (0+255),b
  1850  00160E                     l4313:
  1851                           
  1852                           ; BSR set to: 0
  1853  00160E  0E04               	movlw	4
  1854  001610  0100               	movlb	0	; () banked
  1855  001612  19B4               	xorwf	main@x& (0+255),w,b
  1856  001614  B4D8               	btfsc	status,2,c
  1857  001616  D014               	goto	l306
  1858  001618  D001               	goto	l4317
  1859                           
  1860                           ; BSR set to: 0
  1861  00161A  D012               	goto	l306
  1862  00161C                     l4317:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;SPItest-MASTER.c: 143: MSendSPI(DoubleSPIM[x], 2);
  1866  00161C  0E02               	movlw	2
  1867  00161E  0100               	movlb	0	; () banked
  1868  001620  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1869  001622  0100               	movlb	0	; () banked
  1870  001624  51B4               	movf	main@x& (0+255),w,b
  1871  001626  0D01               	mullw	1
  1872  001628  0EDA               	movlw	low _DoubleSPIM
  1873  00162A  24F3               	addwf	prodl,w,c
  1874  00162C  6ED9               	movwf	fsr2l,c
  1875  00162E  0E00               	movlw	high _DoubleSPIM
  1876  001630  20F4               	addwfc	prodh,w,c
  1877  001632  6EDA               	movwf	fsr2h,c
  1878  001634  50DF               	movf	indf2,w,c
  1879  001636  EC6D  F016         	call	_MSendSPI
  1880  00163A  0100               	movlb	0	; () banked
  1881  00163C  2BB4               	incf	main@x& (0+255),f,b
  1882  00163E  D7E7               	goto	l4313
  1883  001640                     l306:
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;SPItest-MASTER.c: 144: PORTAbits.RA4 = 1;
  1887  001640  8880               	bsf	3968,4,c	;volatile
  1888                           
  1889                           ; BSR set to: 0
  1890                           
  1891                           ; BSR set to: 0
  1892                           
  1893                           ; BSR set to: 0
  1894                           
  1895                           ; BSR set to: 0
  1896                           
  1897                           ; BSR set to: 0
  1898                           
  1899                           ; BSR set to: 0
  1900  001642  D516               	goto	l4035
  1901                           
  1902                           ; BSR set to: 0
  1903                           
  1904                           ; BSR set to: 0
  1905  001644  EF0C  F000         	goto	start
  1906  001648                     __end_of_main:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           prodh	equ	0xFF4
  1913                           prodl	equ	0xFF3
  1914                           postinc0	equ	0xFEE
  1915                           wreg	equ	0xFE8
  1916                           indf2	equ	0xFDF
  1917                           fsr2h	equ	0xFDA
  1918                           fsr2l	equ	0xFD9
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _initialize *****************
  1922 ;; Defined at:
  1923 ;;		line 159 in file "SPItest-MASTER.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;		None
  1928 ;; Return value:  Size  Location     Type
  1929 ;;		None               void
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;Total ram usage:        0 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    9
  1944 ;; This function calls:
  1945 ;;		_SerInit
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text1
  1952  002FBA                     __ptext1:
  1953                           	opt stack 0
  1954  002FBA                     _initialize:
  1955                           	opt stack 21
  1956                           
  1957                           ;SPItest-MASTER.c: 161: INTCONbits.GIE = 1;
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;incstack = 0
  1961  002FBA  8EF2               	bsf	intcon,7,c	;volatile
  1962                           
  1963                           ;SPItest-MASTER.c: 162: INTCONbits.PEIE = 1;
  1964  002FBC  8CF2               	bsf	intcon,6,c	;volatile
  1965                           
  1966                           ;SPItest-MASTER.c: 163: SerInit();
  1967  002FBE  EC81  F017         	call	_SerInit	;wreg free
  1968  002FC2  0012               	return		;funcret
  1969  002FC4                     __end_of_initialize:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           prodh	equ	0xFF4
  1976                           prodl	equ	0xFF3
  1977                           intcon	equ	0xFF2
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           indf2	equ	0xFDF
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _SerInit *****************
  1986 ;; Defined at:
  1987 ;;		line 19 in file "SerComm.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;		None               void
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    8
  2008 ;; This function calls:
  2009 ;;		_SerTxStr
  2010 ;; This function is called by:
  2011 ;;		_initialize
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text2
  2016  002F02                     __ptext2:
  2017                           	opt stack 0
  2018  002F02                     _SerInit:
  2019                           	opt stack 21
  2020                           
  2021                           ;SerComm.c: 26: TXSTA1 = 0x24;
  2022                           
  2023                           ;incstack = 0
  2024  002F02  0E24               	movlw	36
  2025  002F04  6EAC               	movwf	4012,c	;volatile
  2026                           
  2027                           ;SerComm.c: 27: RCSTA1 = 0x90;
  2028  002F06  0E90               	movlw	144
  2029  002F08  6EAB               	movwf	4011,c	;volatile
  2030                           
  2031                           ;SerComm.c: 28: BAUDCON = 0x00;
  2032  002F0A  0E00               	movlw	0
  2033  002F0C  6EB8               	movwf	4024,c	;volatile
  2034                           
  2035                           ;SerComm.c: 29: SPBRG = 21;
  2036  002F0E  0E15               	movlw	21
  2037  002F10  6EAF               	movwf	4015,c	;volatile
  2038                           
  2039                           ;SerComm.c: 31: RCONbits.IPEN = 1;
  2040  002F12  8ED0               	bsf	4048,7,c	;volatile
  2041                           
  2042                           ;SerComm.c: 32: IPR1bits.RCIP = 1;
  2043  002F14  8A9F               	bsf	3999,5,c	;volatile
  2044                           
  2045                           ;SerComm.c: 33: PIE1bits.RC1IE = 1;
  2046  002F16  8A9D               	bsf	3997,5,c	;volatile
  2047                           
  2048                           ;SerComm.c: 35: SerTxStr("Welcome to the world of tomorrow!!!");
  2049  002F18  0E01               	movlw	low STR_1
  2050  002F1A  0100               	movlb	0	; () banked
  2051  002F1C  6F81               	movwf	SerTxStr@string& (0+255),b
  2052  002F1E  0E10               	movlw	high STR_1
  2053  002F20  0100               	movlb	0	; () banked
  2054  002F22  6F82               	movwf	(SerTxStr@string+1)& (0+255),b
  2055  002F24  EC13  F016         	call	_SerTxStr	;wreg free
  2056  002F28  0012               	return		;funcret
  2057  002F2A                     __end_of_SerInit:
  2058                           	opt stack 0
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           prodh	equ	0xFF4
  2064                           prodl	equ	0xFF3
  2065                           intcon	equ	0xFF2
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           indf2	equ	0xFDF
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _SerTxStr *****************
  2074 ;; Defined at:
  2075 ;;		line 50 in file "SerComm.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  string          2    1[BANK0 ] PTR unsigned char 
  2078 ;;		 -> STR_28(4), STR_13(6), STR_12(4), STR_3(11), 
  2079 ;;		 -> value(10), STR_2(6), key(5), STR_1(36), 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;		None               void
  2084 ;; Registers used:
  2085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2091 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;Total ram usage:        2 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    7
  2098 ;; This function calls:
  2099 ;;		_SerTx
  2100 ;; This function is called by:
  2101 ;;		_SerInit
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text3
  2106  002C26                     __ptext3:
  2107                           	opt stack 0
  2108  002C26                     _SerTxStr:
  2109                           	opt stack 21
  2110                           
  2111                           ;SerComm.c: 52: while (*string)
  2112                           
  2113                           ;incstack = 0
  2114  002C26  D017               	goto	l3765
  2115  002C28                     l3761:
  2116                           
  2117                           ;SerComm.c: 53: SerTx(*string++);
  2118  002C28  C081  FFF6         	movff	SerTxStr@string,tblptrl
  2119  002C2C  C082  FFF7         	movff	SerTxStr@string+1,tblptrh
  2120  002C30  0E00               	movlw	low (__smallconst shr (0+16))
  2121  002C32  6EF8               	movwf	tblptru,c
  2122  002C34  0E0F               	movlw	(high __ramtop+-1)
  2123  002C36  64F7               	cpfsgt	tblptrh,c
  2124  002C38  D003               	bra	u4787
  2125  002C3A  0008               	tblrd		*
  2126  002C3C  50F5               	movf	tablat,w,c
  2127  002C3E  D005               	bra	u4780
  2128  002C40                     u4787:
  2129  002C40  CFF6 FFE9          	movff	tblptrl,fsr0l
  2130  002C44  CFF7 FFEA          	movff	tblptrh,fsr0h
  2131  002C48  50EF               	movf	indf0,w,c
  2132  002C4A                     u4780:
  2133  002C4A  ECCE  F017         	call	_SerTx
  2134  002C4E  0100               	movlb	0	; () banked
  2135  002C50  4B81               	infsnz	SerTxStr@string& (0+255),f,b
  2136  002C52  2B82               	incf	(SerTxStr@string+1)& (0+255),f,b
  2137  002C54  D000               	goto	l3765
  2138  002C56                     l3765:
  2139  002C56  C081  FFF6         	movff	SerTxStr@string,tblptrl
  2140  002C5A  C082  FFF7         	movff	SerTxStr@string+1,tblptrh
  2141  002C5E  0E00               	movlw	low (__smallconst shr (0+16))
  2142  002C60  6EF8               	movwf	tblptru,c
  2143  002C62  0E0F               	movlw	(high __ramtop+-1)
  2144  002C64  64F7               	cpfsgt	tblptrh,c
  2145  002C66  D003               	bra	u4797
  2146  002C68  0008               	tblrd		*
  2147  002C6A  50F5               	movf	tablat,w,c
  2148  002C6C  D005               	bra	u4790
  2149  002C6E                     u4797:
  2150  002C6E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2151  002C72  CFF7 FFEA          	movff	tblptrh,fsr0h
  2152  002C76  50EF               	movf	indf0,w,c
  2153  002C78                     u4790:
  2154  002C78  0900               	iorlw	0
  2155  002C7A  A4D8               	btfss	status,2,c
  2156  002C7C  D7D5               	goto	l3761
  2157  002C7E  0012               	return		;funcret
  2158  002C80                     __end_of_SerTxStr:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           indf0	equ	0xFEF
  2168                           postinc0	equ	0xFEE
  2169                           fsr0h	equ	0xFEA
  2170                           fsr0l	equ	0xFE9
  2171                           wreg	equ	0xFE8
  2172                           indf2	equ	0xFDF
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _checksum *****************
  2178 ;; Defined at:
  2179 ;;		line 91 in file "SPIMaster.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  y               1    5[BANK0 ] unsigned char 
  2184 ;;  sum             1    4[BANK0 ] unsigned char 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  1    wreg      unsigned char 
  2187 ;; Registers used:
  2188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;Total ram usage:        6 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    6
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_main
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text4
  2209  002A50                     __ptext4:
  2210                           	opt stack 0
  2211  002A50                     _checksum:
  2212                           	opt stack 24
  2213                           
  2214                           ;SPIMaster.c: 93: unsigned char y, sum = 0;
  2215                           
  2216                           ;incstack = 0
  2217  002A50  0E00               	movlw	0
  2218  002A52  0100               	movlb	0	; () banked
  2219  002A54  6F84               	movwf	checksum@sum& (0+255),b
  2220                           
  2221                           ;SPIMaster.c: 94: for (y = 0; y != 3; y++)
  2222  002A56  0E00               	movlw	0
  2223  002A58  0100               	movlb	0	; () banked
  2224  002A5A  6F85               	movwf	checksum@y& (0+255),b
  2225  002A5C                     l3997:
  2226                           
  2227                           ; BSR set to: 0
  2228  002A5C  0E03               	movlw	3
  2229  002A5E  0100               	movlb	0	; () banked
  2230  002A60  1985               	xorwf	checksum@y& (0+255),w,b
  2231  002A62  B4D8               	btfsc	status,2,c
  2232  002A64  D011               	goto	l4007
  2233  002A66  D001               	goto	l4001
  2234                           
  2235                           ; BSR set to: 0
  2236  002A68  D00F               	goto	l4007
  2237  002A6A                     l4001:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;SPIMaster.c: 95: sum += DoubleSPIM[y];
  2241  002A6A  0100               	movlb	0	; () banked
  2242  002A6C  5185               	movf	checksum@y& (0+255),w,b
  2243  002A6E  0D01               	mullw	1
  2244  002A70  0EDA               	movlw	low _DoubleSPIM
  2245  002A72  24F3               	addwf	prodl,w,c
  2246  002A74  6ED9               	movwf	fsr2l,c
  2247  002A76  0E00               	movlw	high _DoubleSPIM
  2248  002A78  20F4               	addwfc	prodh,w,c
  2249  002A7A  6EDA               	movwf	fsr2h,c
  2250  002A7C  50DF               	movf	indf2,w,c
  2251  002A7E  0100               	movlb	0	; () banked
  2252  002A80  2784               	addwf	checksum@sum& (0+255),f,b
  2253                           
  2254                           ; BSR set to: 0
  2255  002A82  0100               	movlb	0	; () banked
  2256  002A84  2B85               	incf	checksum@y& (0+255),f,b
  2257  002A86  D7EA               	goto	l3997
  2258  002A88                     l4007:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;SPIMaster.c: 96: if ((sum - DoubleSPIM[3]) == 0)
  2262  002A88  0100               	movlb	0	; () banked
  2263  002A8A  51DD               	movf	(_DoubleSPIM+3)& (0+255),w,b
  2264  002A8C  0100               	movlb	0	; () banked
  2265  002A8E  6F80               	movwf	??_checksum& (0+255),b
  2266  002A90  6B81               	clrf	(??_checksum+1)& (0+255),b
  2267  002A92  0100               	movlb	0	; () banked
  2268  002A94  1F80               	comf	??_checksum& (0+255),f,b
  2269  002A96  1F81               	comf	(??_checksum+1)& (0+255),f,b
  2270  002A98  4B80               	infsnz	??_checksum& (0+255),f,b
  2271  002A9A  2B81               	incf	(??_checksum+1)& (0+255),f,b
  2272  002A9C  0100               	movlb	0	; () banked
  2273  002A9E  5184               	movf	checksum@sum& (0+255),w,b
  2274  002AA0  0100               	movlb	0	; () banked
  2275  002AA2  6F82               	movwf	(??_checksum+2)& (0+255),b
  2276  002AA4  6B83               	clrf	(??_checksum+3)& (0+255),b
  2277  002AA6  0100               	movlb	0	; () banked
  2278  002AA8  5180               	movf	??_checksum& (0+255),w,b
  2279  002AAA  0100               	movlb	0	; () banked
  2280  002AAC  2782               	addwf	(??_checksum+2)& (0+255),f,b
  2281  002AAE  0100               	movlb	0	; () banked
  2282  002AB0  5181               	movf	(??_checksum+1)& (0+255),w,b
  2283  002AB2  0100               	movlb	0	; () banked
  2284  002AB4  2383               	addwfc	(??_checksum+3)& (0+255),f,b
  2285  002AB6  0100               	movlb	0	; () banked
  2286  002AB8  5182               	movf	(??_checksum+2)& (0+255),w,b
  2287  002ABA  0100               	movlb	0	; () banked
  2288  002ABC  1183               	iorwf	(??_checksum+3)& (0+255),w,b
  2289  002ABE  A4D8               	btfss	status,2,c
  2290  002AC0  D002               	goto	l4015
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;SPIMaster.c: 97: return 1;
  2294  002AC2  0E01               	movlw	1
  2295                           
  2296                           ; BSR set to: 0
  2297                           
  2298                           ; BSR set to: 0
  2299  002AC4  D002               	goto	l388
  2300  002AC6                     l4015:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;SPIMaster.c: 98: else
  2304                           ;SPIMaster.c: 99: return 0;
  2305  002AC6  0E00               	movlw	0
  2306                           
  2307                           ; BSR set to: 0
  2308  002AC8  D000               	goto	l388
  2309  002ACA                     l388:
  2310                           
  2311                           ; BSR set to: 0
  2312  002ACA  0012               	return		;funcret
  2313  002ACC                     __end_of_checksum:
  2314                           	opt stack 0
  2315                           tblptru	equ	0xFF8
  2316                           tblptrh	equ	0xFF7
  2317                           tblptrl	equ	0xFF6
  2318                           tablat	equ	0xFF5
  2319                           prodh	equ	0xFF4
  2320                           prodl	equ	0xFF3
  2321                           intcon	equ	0xFF2
  2322                           indf0	equ	0xFEF
  2323                           postinc0	equ	0xFEE
  2324                           fsr0h	equ	0xFEA
  2325                           fsr0l	equ	0xFE9
  2326                           wreg	equ	0xFE8
  2327                           indf2	equ	0xFDF
  2328                           fsr2h	equ	0xFDA
  2329                           fsr2l	equ	0xFD9
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function _SPIDisassembleDouble *****************
  2333 ;; Defined at:
  2334 ;;		line 102 in file "SPIMaster.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  dub             3    2[BANK0 ] unsigned char 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;		None               void
  2341 ;; Registers used:
  2342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2348 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;Total ram usage:        3 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    7
  2355 ;; This function calls:
  2356 ;;		_MGenerateChecksum
  2357 ;; This function is called by:
  2358 ;;		_main
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text5
  2363  002DDA                     __ptext5:
  2364                           	opt stack 0
  2365  002DDA                     _SPIDisassembleDouble:
  2366                           	opt stack 23
  2367                           
  2368                           ;SPIMaster.c: 104: DoublePtr = (unsigned char*) &dub;
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;incstack = 0
  2372  002DDA  0E82               	movlw	low SPIDisassembleDouble@dub
  2373  002DDC  6E4E               	movwf	_DoublePtr,c
  2374  002DDE  0E00               	movlw	high SPIDisassembleDouble@dub
  2375  002DE0  6E4F               	movwf	_DoublePtr+1,c
  2376                           
  2377                           ;SPIMaster.c: 105: DoubleSPIM[0] = DoublePtr[0];
  2378  002DE2  C04E  FFD9         	movff	_DoublePtr,fsr2l
  2379  002DE6  C04F  FFDA         	movff	_DoublePtr+1,fsr2h
  2380  002DEA  50DF               	movf	indf2,w,c
  2381  002DEC  0100               	movlb	0	; () banked
  2382  002DEE  6FDA               	movwf	_DoubleSPIM& (0+255),b
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;SPIMaster.c: 106: DoubleSPIM[1] = DoublePtr[1];
  2386  002DF0  EE20 F001          	lfsr	2,1
  2387  002DF4  504E               	movf	_DoublePtr,w,c
  2388  002DF6  26D9               	addwf	fsr2l,f,c
  2389  002DF8  504F               	movf	_DoublePtr+1,w,c
  2390  002DFA  22DA               	addwfc	fsr2h,f,c
  2391  002DFC  50DF               	movf	indf2,w,c
  2392  002DFE  0100               	movlb	0	; () banked
  2393  002E00  6FDB               	movwf	(_DoubleSPIM+1)& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;SPIMaster.c: 107: DoubleSPIM[2] = DoublePtr[2];
  2397  002E02  EE20 F002          	lfsr	2,2
  2398  002E06  504E               	movf	_DoublePtr,w,c
  2399  002E08  26D9               	addwf	fsr2l,f,c
  2400  002E0A  504F               	movf	_DoublePtr+1,w,c
  2401  002E0C  22DA               	addwfc	fsr2h,f,c
  2402  002E0E  50DF               	movf	indf2,w,c
  2403  002E10  0100               	movlb	0	; () banked
  2404  002E12  6FDC               	movwf	(_DoubleSPIM+2)& (0+255),b
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;SPIMaster.c: 108: DoubleSPIM[3] = MGenerateChecksum();
  2408  002E14  EC31  F017         	call	_MGenerateChecksum	;wreg free
  2409  002E18  0100               	movlb	0	; () banked
  2410  002E1A  6FDD               	movwf	(_DoubleSPIM+3)& (0+255),b
  2411                           
  2412                           ; BSR set to: 0
  2413  002E1C  0012               	return		;funcret
  2414  002E1E                     __end_of_SPIDisassembleDouble:
  2415                           	opt stack 0
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           prodh	equ	0xFF4
  2421                           prodl	equ	0xFF3
  2422                           intcon	equ	0xFF2
  2423                           indf0	equ	0xFEF
  2424                           postinc0	equ	0xFEE
  2425                           fsr0h	equ	0xFEA
  2426                           fsr0l	equ	0xFE9
  2427                           wreg	equ	0xFE8
  2428                           indf2	equ	0xFDF
  2429                           fsr2h	equ	0xFDA
  2430                           fsr2l	equ	0xFD9
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function _MGenerateChecksum *****************
  2434 ;; Defined at:
  2435 ;;		line 111 in file "SPIMaster.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  z               1    1[BANK0 ] unsigned char 
  2440 ;;  sum             1    0[BANK0 ] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      unsigned char 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;Total ram usage:        2 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    6
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_SPIDisassembleDouble
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text6
  2465  002E62                     __ptext6:
  2466                           	opt stack 0
  2467  002E62                     _MGenerateChecksum:
  2468                           	opt stack 23
  2469                           
  2470                           ;SPIMaster.c: 113: unsigned char z, sum = 0;
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;incstack = 0
  2474  002E62  0E00               	movlw	0
  2475  002E64  0100               	movlb	0	; () banked
  2476  002E66  6F80               	movwf	MGenerateChecksum@sum& (0+255),b
  2477                           
  2478                           ;SPIMaster.c: 114: for (z = 0; z != 3; z++)
  2479  002E68  0E00               	movlw	0
  2480  002E6A  0100               	movlb	0	; () banked
  2481  002E6C  6F81               	movwf	MGenerateChecksum@z& (0+255),b
  2482  002E6E                     l3909:
  2483                           
  2484                           ; BSR set to: 0
  2485  002E6E  0E03               	movlw	3
  2486  002E70  0100               	movlb	0	; () banked
  2487  002E72  1981               	xorwf	MGenerateChecksum@z& (0+255),w,b
  2488  002E74  B4D8               	btfsc	status,2,c
  2489  002E76  D011               	goto	l3919
  2490  002E78  D001               	goto	l3913
  2491                           
  2492                           ; BSR set to: 0
  2493  002E7A  D00F               	goto	l3919
  2494  002E7C                     l3913:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;SPIMaster.c: 115: sum += DoubleSPIM[z];
  2498  002E7C  0100               	movlb	0	; () banked
  2499  002E7E  5181               	movf	MGenerateChecksum@z& (0+255),w,b
  2500  002E80  0D01               	mullw	1
  2501  002E82  0EDA               	movlw	low _DoubleSPIM
  2502  002E84  24F3               	addwf	prodl,w,c
  2503  002E86  6ED9               	movwf	fsr2l,c
  2504  002E88  0E00               	movlw	high _DoubleSPIM
  2505  002E8A  20F4               	addwfc	prodh,w,c
  2506  002E8C  6EDA               	movwf	fsr2h,c
  2507  002E8E  50DF               	movf	indf2,w,c
  2508  002E90  0100               	movlb	0	; () banked
  2509  002E92  2780               	addwf	MGenerateChecksum@sum& (0+255),f,b
  2510                           
  2511                           ; BSR set to: 0
  2512  002E94  0100               	movlb	0	; () banked
  2513  002E96  2B81               	incf	MGenerateChecksum@z& (0+255),f,b
  2514  002E98  D7EA               	goto	l3909
  2515  002E9A                     l3919:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;SPIMaster.c: 116: return sum;
  2519  002E9A  0100               	movlb	0	; () banked
  2520  002E9C  5180               	movf	MGenerateChecksum@sum& (0+255),w,b
  2521  002E9E  D000               	goto	l397
  2522  002EA0                     l397:
  2523                           
  2524                           ; BSR set to: 0
  2525  002EA0  0012               	return		;funcret
  2526  002EA2                     __end_of_MGenerateChecksum:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           indf0	equ	0xFEF
  2536                           postinc0	equ	0xFEE
  2537                           fsr0h	equ	0xFEA
  2538                           fsr0l	equ	0xFE9
  2539                           wreg	equ	0xFE8
  2540                           indf2	equ	0xFDF
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545 ;; *************** function _MSendSPI *****************
  2546 ;; Defined at:
  2547 ;;		line 16 in file "SPIMaster.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  data            1    wreg     unsigned char 
  2550 ;;  Slave           1    1[BANK0 ] unsigned char 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  data            1    4[BANK0 ] unsigned char 
  2553 ;;  tempChar        1    3[BANK0 ] unsigned char 
  2554 ;;  tempChar        1    2[BANK0 ] unsigned char 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;		None               void
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2564 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;Total ram usage:        4 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    7
  2571 ;; This function calls:
  2572 ;;		_Delay10TCYx
  2573 ;; This function is called by:
  2574 ;;		_main
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text7
  2579  002CDA                     __ptext7:
  2580                           	opt stack 0
  2581  002CDA                     _MSendSPI:
  2582                           	opt stack 23
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;incstack = 0
  2586                           ;MSendSPI@data stored from wreg
  2587  002CDA  0100               	movlb	0	; () banked
  2588  002CDC  6F84               	movwf	MSendSPI@data& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;SPIMaster.c: 18: if (Slave == 1)
  2592  002CDE  0100               	movlb	0	; () banked
  2593  002CE0  0581               	decf	MSendSPI@Slave& (0+255),w,b
  2594  002CE2  A4D8               	btfss	status,2,c
  2595  002CE4  D010               	goto	l3939
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;SPIMaster.c: 19: {
  2599                           ;SPIMaster.c: 20: PORTAbits.RA3 = 0;
  2600  002CE6  9680               	bcf	3968,3,c	;volatile
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;SPIMaster.c: 21: Delay10TCYx(1);
  2604  002CE8  0E01               	movlw	1
  2605  002CEA  ECC3  F017         	call	_Delay10TCYx
  2606                           
  2607                           ;SPIMaster.c: 22: unsigned char tempChar;
  2608                           ;SPIMaster.c: 23: tempChar = SSPBUF;
  2609  002CEE  CFC9 F082          	movff	4041,MSendSPI@tempChar	;volatile
  2610                           
  2611                           ;SPIMaster.c: 24: PIR1bits.SSPIF = 0;
  2612  002CF2  969E               	bcf	3998,3,c	;volatile
  2613                           
  2614                           ;SPIMaster.c: 25: SSPBUF = data;
  2615  002CF4  C084  FFC9         	movff	MSendSPI@data,4041	;volatile
  2616                           
  2617                           ;SPIMaster.c: 26: while (!PIR1bits.SSPIF);
  2618  002CF8  D000               	goto	l349
  2619  002CFA                     l349:
  2620  002CFA  A69E               	btfss	3998,3,c	;volatile
  2621  002CFC  D7FE               	goto	l349
  2622                           
  2623                           ;SPIMaster.c: 27: data = SSPBUF;
  2624  002CFE  CFC9 F084          	movff	4041,MSendSPI@data	;volatile
  2625                           
  2626                           ;SPIMaster.c: 28: PORTAbits.RA3 = 1;
  2627  002D02  8680               	bsf	3968,3,c	;volatile
  2628                           
  2629                           ;SPIMaster.c: 29: }
  2630  002D04  D015               	goto	l357
  2631  002D06                     l3939:
  2632                           
  2633                           ;SPIMaster.c: 31: else if (Slave == 2)
  2634  002D06  0E02               	movlw	2
  2635  002D08  0100               	movlb	0	; () banked
  2636  002D0A  1981               	xorwf	MSendSPI@Slave& (0+255),w,b
  2637  002D0C  A4D8               	btfss	status,2,c
  2638  002D0E  D010               	goto	l357
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;SPIMaster.c: 32: {
  2642                           ;SPIMaster.c: 33: PORTAbits.RA4 = 0;
  2643  002D10  9880               	bcf	3968,4,c	;volatile
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;SPIMaster.c: 34: Delay10TCYx(1);
  2647  002D12  0E01               	movlw	1
  2648  002D14  ECC3  F017         	call	_Delay10TCYx
  2649                           
  2650                           ;SPIMaster.c: 35: unsigned char tempChar;
  2651                           ;SPIMaster.c: 36: tempChar = SSPBUF;
  2652  002D18  CFC9 F083          	movff	4041,MSendSPI@tempChar_722	;volatile
  2653                           
  2654                           ;SPIMaster.c: 37: PIR1bits.SSPIF = 0;
  2655  002D1C  969E               	bcf	3998,3,c	;volatile
  2656                           
  2657                           ;SPIMaster.c: 38: SSPBUF = data;
  2658  002D1E  C084  FFC9         	movff	MSendSPI@data,4041	;volatile
  2659                           
  2660                           ;SPIMaster.c: 39: while (!PIR1bits.SSPIF);
  2661  002D22  D000               	goto	l354
  2662  002D24                     l354:
  2663  002D24  A69E               	btfss	3998,3,c	;volatile
  2664  002D26  D7FE               	goto	l354
  2665                           
  2666                           ;SPIMaster.c: 40: data = SSPBUF;
  2667  002D28  CFC9 F084          	movff	4041,MSendSPI@data	;volatile
  2668                           
  2669                           ;SPIMaster.c: 41: PORTAbits.RA3 = 2;
  2670  002D2C  9680               	bcf	3968,3,c	;volatile
  2671  002D2E  D000               	goto	l357
  2672  002D30                     l357:
  2673  002D30  0012               	return		;funcret
  2674  002D32                     __end_of_MSendSPI:
  2675                           	opt stack 0
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           prodh	equ	0xFF4
  2681                           prodl	equ	0xFF3
  2682                           intcon	equ	0xFF2
  2683                           indf0	equ	0xFEF
  2684                           postinc0	equ	0xFEE
  2685                           fsr0h	equ	0xFEA
  2686                           fsr0l	equ	0xFE9
  2687                           wreg	equ	0xFE8
  2688                           indf2	equ	0xFDF
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _MReceiveStrSPI *****************
  2694 ;; Defined at:
  2695 ;;		line 55 in file "SPIMaster.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  str             2   47[BANK0 ] PTR unsigned char 
  2698 ;;		 -> DoubleSPIM(4), 
  2699 ;;  Slave           1   49[BANK0 ] unsigned char 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  x               1   51[BANK0 ] unsigned char 
  2702 ;;  x               1   50[BANK0 ] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;		None               void
  2705 ;; Registers used:
  2706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2712 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;Total ram usage:        5 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    9
  2719 ;; This function calls:
  2720 ;;		_Delay10TCYx
  2721 ;;		_MReceiveSPI
  2722 ;;		_SPIReassembleDouble
  2723 ;;		_breakDouble
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text8
  2730  002886                     __ptext8:
  2731                           	opt stack 0
  2732  002886                     _MReceiveStrSPI:
  2733                           	opt stack 21
  2734                           
  2735                           ;SPIMaster.c: 57: if (Slave == 1)
  2736                           
  2737                           ;incstack = 0
  2738  002886  0100               	movlb	0	; () banked
  2739  002888  05B1               	decf	MReceiveStrSPI@Slave& (0+255),w,b
  2740  00288A  A4D8               	btfss	status,2,c
  2741  00288C  D02A               	goto	l3973
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;SPIMaster.c: 58: {
  2745                           ;SPIMaster.c: 59: unsigned char x;
  2746                           ;SPIMaster.c: 60: PORTAbits.RA3 = 0;
  2747  00288E  9680               	bcf	3968,3,c	;volatile
  2748                           
  2749                           ;SPIMaster.c: 61: while (PORTAbits.RA1);
  2750  002890  D000               	goto	l367
  2751  002892                     l367:
  2752  002892  B280               	btfsc	3968,1,c	;volatile
  2753  002894  D7FE               	goto	l367
  2754                           
  2755                           ;SPIMaster.c: 62: Delay10TCYx(25);
  2756  002896  0E19               	movlw	25
  2757  002898  ECC3  F017         	call	_Delay10TCYx
  2758                           
  2759                           ;SPIMaster.c: 63: for (x = 0; x < 4; x++)
  2760  00289C  0E00               	movlw	0
  2761  00289E  0100               	movlb	0	; () banked
  2762  0028A0  6FB2               	movwf	MReceiveStrSPI@x& (0+255),b
  2763  0028A2                     l3959:
  2764                           
  2765                           ; BSR set to: 0
  2766  0028A2  0E03               	movlw	3
  2767  0028A4  0100               	movlb	0	; () banked
  2768  0028A6  65B2               	cpfsgt	MReceiveStrSPI@x& (0+255),b
  2769  0028A8  D001               	goto	l3963
  2770                           
  2771                           ; BSR set to: 0
  2772  0028AA  D00F               	goto	l3969
  2773  0028AC                     l3963:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;SPIMaster.c: 64: DoubleSPIM[x] = MReceiveSPI();
  2777  0028AC  0100               	movlb	0	; () banked
  2778  0028AE  51B2               	movf	MReceiveStrSPI@x& (0+255),w,b
  2779  0028B0  0D01               	mullw	1
  2780  0028B2  0EDA               	movlw	low _DoubleSPIM
  2781  0028B4  24F3               	addwf	prodl,w,c
  2782  0028B6  6ED9               	movwf	fsr2l,c
  2783  0028B8  0E00               	movlw	high _DoubleSPIM
  2784  0028BA  20F4               	addwfc	prodh,w,c
  2785  0028BC  6EDA               	movwf	fsr2h,c
  2786  0028BE  ECB8  F017         	call	_MReceiveSPI	;wreg free
  2787  0028C2  6EDF               	movwf	indf2,c
  2788  0028C4  0100               	movlb	0	; () banked
  2789  0028C6  2BB2               	incf	MReceiveStrSPI@x& (0+255),f,b
  2790  0028C8  D7EC               	goto	l3959
  2791  0028CA                     l3969:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;SPIMaster.c: 65: breakDouble(SPIReassembleDouble());
  2795  0028CA  EC0F  F017         	call	_SPIReassembleDouble	;wreg free
  2796  0028CE  C080  F0A6         	movff	?_SPIReassembleDouble,breakDouble@dubs
  2797  0028D2  C081  F0A7         	movff	?_SPIReassembleDouble+1,breakDouble@dubs+1
  2798  0028D6  C082  F0A8         	movff	?_SPIReassembleDouble+2,breakDouble@dubs+2
  2799  0028DA  ECBD  F00F         	call	_breakDouble	;wreg free
  2800                           
  2801                           ;SPIMaster.c: 66: PORTAbits.RA3 = 1;
  2802  0028DE  8680               	bsf	3968,3,c	;volatile
  2803                           
  2804                           ;SPIMaster.c: 67: }
  2805  0028E0  D02A               	goto	l379
  2806  0028E2                     l3973:
  2807                           
  2808                           ;SPIMaster.c: 68: else if (Slave == 2)
  2809  0028E2  0E02               	movlw	2
  2810  0028E4  0100               	movlb	0	; () banked
  2811  0028E6  19B1               	xorwf	MReceiveStrSPI@Slave& (0+255),w,b
  2812  0028E8  A4D8               	btfss	status,2,c
  2813  0028EA  D025               	goto	l379
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;SPIMaster.c: 69: {
  2817                           ;SPIMaster.c: 70: unsigned char x;
  2818                           ;SPIMaster.c: 71: PORTAbits.RA4 = 0;
  2819  0028EC  9880               	bcf	3968,4,c	;volatile
  2820                           
  2821                           ;SPIMaster.c: 72: while (PORTAbits.RA2);
  2822  0028EE  D000               	goto	l374
  2823  0028F0                     l374:
  2824  0028F0  B480               	btfsc	3968,2,c	;volatile
  2825  0028F2  D7FE               	goto	l374
  2826                           
  2827                           ;SPIMaster.c: 73: Delay10TCYx(50);
  2828  0028F4  0E32               	movlw	50
  2829  0028F6  ECC3  F017         	call	_Delay10TCYx
  2830                           
  2831                           ;SPIMaster.c: 74: for (x = 0; x < 3; x++)
  2832  0028FA  0E00               	movlw	0
  2833  0028FC  0100               	movlb	0	; () banked
  2834  0028FE  6FB3               	movwf	MReceiveStrSPI@x_731& (0+255),b
  2835  002900                     l3981:
  2836                           
  2837                           ; BSR set to: 0
  2838  002900  0E02               	movlw	2
  2839  002902  0100               	movlb	0	; () banked
  2840  002904  65B3               	cpfsgt	MReceiveStrSPI@x_731& (0+255),b
  2841  002906  D001               	goto	l3985
  2842                           
  2843                           ; BSR set to: 0
  2844  002908  D011               	goto	l3991
  2845  00290A                     l3985:
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;SPIMaster.c: 75: str[x] = MReceiveSPI();
  2849  00290A  0100               	movlb	0	; () banked
  2850  00290C  51B3               	movf	MReceiveStrSPI@x_731& (0+255),w,b
  2851  00290E  0D01               	mullw	1
  2852  002910  50F3               	movf	prodl,w,c
  2853  002912  0100               	movlb	0	; () banked
  2854  002914  25AF               	addwf	MReceiveStrSPI@str& (0+255),w,b
  2855  002916  6ED9               	movwf	fsr2l,c
  2856  002918  50F4               	movf	prodh,w,c
  2857  00291A  0100               	movlb	0	; () banked
  2858  00291C  21B0               	addwfc	(MReceiveStrSPI@str+1)& (0+255),w,b
  2859  00291E  6EDA               	movwf	fsr2h,c
  2860  002920  ECB8  F017         	call	_MReceiveSPI	;wreg free
  2861  002924  6EDF               	movwf	indf2,c
  2862  002926  0100               	movlb	0	; () banked
  2863  002928  2BB3               	incf	MReceiveStrSPI@x_731& (0+255),f,b
  2864  00292A  D7EA               	goto	l3981
  2865  00292C                     l3991:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;SPIMaster.c: 76: Delay10TCYx(1);
  2869  00292C  0E01               	movlw	1
  2870  00292E  ECC3  F017         	call	_Delay10TCYx
  2871                           
  2872                           ;SPIMaster.c: 77: PORTAbits.RA4 = 1;
  2873  002932  8880               	bsf	3968,4,c	;volatile
  2874  002934  D000               	goto	l379
  2875  002936                     l379:
  2876  002936  0012               	return		;funcret
  2877  002938                     __end_of_MReceiveStrSPI:
  2878                           	opt stack 0
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           prodh	equ	0xFF4
  2884                           prodl	equ	0xFF3
  2885                           intcon	equ	0xFF2
  2886                           indf0	equ	0xFEF
  2887                           postinc0	equ	0xFEE
  2888                           fsr0h	equ	0xFEA
  2889                           fsr0l	equ	0xFE9
  2890                           wreg	equ	0xFE8
  2891                           indf2	equ	0xFDF
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _breakDouble *****************
  2897 ;; Defined at:
  2898 ;;		line 80 in file "SerComm.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  dubs            3   38[BANK0 ] unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  temp2           2   45[BANK0 ] unsigned int 
  2903 ;;  temp1           2   43[BANK0 ] unsigned int 
  2904 ;;  tempDub         2   41[BANK0 ] unsigned int 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;		None               void
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2914 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;Total ram usage:        9 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    8
  2921 ;; This function calls:
  2922 ;;		_SerTx
  2923 ;;		___ftmul
  2924 ;;		___fttol
  2925 ;;		___lwdiv
  2926 ;;		___lwmod
  2927 ;; This function is called by:
  2928 ;;		_MReceiveStrSPI
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           	psect	text9
  2933  001F7A                     __ptext9:
  2934                           	opt stack 0
  2935  001F7A                     _breakDouble:
  2936                           	opt stack 21
  2937                           
  2938                           ;SerComm.c: 82: unsigned int temp1, temp2;
  2939                           ;SerComm.c: 83: unsigned int tempDub;
  2940                           ;SerComm.c: 85: tempDub = dubs * 100;
  2941                           
  2942                           ;incstack = 0
  2943  001F7A  0E00               	movlw	0
  2944  001F7C  0100               	movlb	0	; () banked
  2945  001F7E  6F8B               	movwf	___ftmul@f2& (0+255),b
  2946  001F80  0EC8               	movlw	200
  2947  001F82  0100               	movlb	0	; () banked
  2948  001F84  6F8C               	movwf	(___ftmul@f2+1)& (0+255),b
  2949  001F86  0E42               	movlw	66
  2950  001F88  0100               	movlb	0	; () banked
  2951  001F8A  6F8D               	movwf	(___ftmul@f2+2)& (0+255),b
  2952  001F8C  C0A6  F088         	movff	breakDouble@dubs,___ftmul@f1
  2953  001F90  C0A7  F089         	movff	breakDouble@dubs+1,___ftmul@f1+1
  2954  001F94  C0A8  F08A         	movff	breakDouble@dubs+2,___ftmul@f1+2
  2955  001F98  EC81  F010         	call	___ftmul	;wreg free
  2956  001F9C  C088  F097         	movff	?___ftmul,___fttol@f1
  2957  001FA0  C089  F098         	movff	?___ftmul+1,___fttol@f1+1
  2958  001FA4  C08A  F099         	movff	?___ftmul+2,___fttol@f1+2
  2959  001FA8  ECCA  F011         	call	___fttol	;wreg free
  2960  001FAC  C097  F0A9         	movff	?___fttol,breakDouble@tempDub
  2961  001FB0  C098  F0AA         	movff	?___fttol+1,breakDouble@tempDub+1
  2962                           
  2963                           ;SerComm.c: 86: temp1 = tempDub / 10000;
  2964  001FB4  C0A9  F080         	movff	breakDouble@tempDub,___lwdiv@dividend
  2965  001FB8  C0AA  F081         	movff	breakDouble@tempDub+1,___lwdiv@dividend+1
  2966  001FBC  0E27               	movlw	39
  2967  001FBE  0100               	movlb	0	; () banked
  2968  001FC0  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2969  001FC2  0E10               	movlw	16
  2970  001FC4  6F82               	movwf	___lwdiv@divisor& (0+255),b
  2971  001FC6  ECE7  F014         	call	___lwdiv	;wreg free
  2972  001FCA  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  2973  001FCE  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  2974                           
  2975                           ;SerComm.c: 87: temp2 = tempDub % 10000;
  2976  001FD2  C0A9  F080         	movff	breakDouble@tempDub,___lwmod@dividend
  2977  001FD6  C0AA  F081         	movff	breakDouble@tempDub+1,___lwmod@dividend+1
  2978  001FDA  0E27               	movlw	39
  2979  001FDC  0100               	movlb	0	; () banked
  2980  001FDE  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  2981  001FE0  0E10               	movlw	16
  2982  001FE2  6F82               	movwf	___lwmod@divisor& (0+255),b
  2983  001FE4  ECDD  F015         	call	___lwmod	;wreg free
  2984  001FE8  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  2985  001FEC  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  2986                           
  2987                           ;SerComm.c: 88: if (temp1 != 0)
  2988  001FF0  0100               	movlb	0	; () banked
  2989  001FF2  51AB               	movf	breakDouble@temp1& (0+255),w,b
  2990  001FF4  0100               	movlb	0	; () banked
  2991  001FF6  11AC               	iorwf	(breakDouble@temp1+1)& (0+255),w,b
  2992  001FF8  B4D8               	btfsc	status,2,c
  2993  001FFA  D005               	goto	l49
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;SerComm.c: 89: SerTx(temp1 + 0x30);
  2997  001FFC  0100               	movlb	0	; () banked
  2998  001FFE  51AB               	movf	breakDouble@temp1& (0+255),w,b
  2999  002000  0F30               	addlw	48
  3000  002002  ECCE  F017         	call	_SerTx
  3001  002006                     l49:
  3002                           
  3003                           ;SerComm.c: 90: temp1 = temp2 / 1000;
  3004  002006  C0AD  F080         	movff	breakDouble@temp2,___lwdiv@dividend
  3005  00200A  C0AE  F081         	movff	breakDouble@temp2+1,___lwdiv@dividend+1
  3006  00200E  0E03               	movlw	3
  3007  002010  0100               	movlb	0	; () banked
  3008  002012  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3009  002014  0EE8               	movlw	232
  3010  002016  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3011  002018  ECE7  F014         	call	___lwdiv	;wreg free
  3012  00201C  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3013  002020  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3014                           
  3015                           ;SerComm.c: 91: temp2 = temp2 % 1000;
  3016  002024  C0AD  F080         	movff	breakDouble@temp2,___lwmod@dividend
  3017  002028  C0AE  F081         	movff	breakDouble@temp2+1,___lwmod@dividend+1
  3018  00202C  0E03               	movlw	3
  3019  00202E  0100               	movlb	0	; () banked
  3020  002030  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3021  002032  0EE8               	movlw	232
  3022  002034  6F82               	movwf	___lwmod@divisor& (0+255),b
  3023  002036  ECDD  F015         	call	___lwmod	;wreg free
  3024  00203A  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3025  00203E  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3026                           
  3027                           ;SerComm.c: 92: if (temp1 != 0)
  3028  002042  0100               	movlb	0	; () banked
  3029  002044  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3030  002046  0100               	movlb	0	; () banked
  3031  002048  11AC               	iorwf	(breakDouble@temp1+1)& (0+255),w,b
  3032  00204A  B4D8               	btfsc	status,2,c
  3033  00204C  D005               	goto	l50
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;SerComm.c: 93: SerTx(temp1 + 0x30);
  3037  00204E  0100               	movlb	0	; () banked
  3038  002050  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3039  002052  0F30               	addlw	48
  3040  002054  ECCE  F017         	call	_SerTx
  3041  002058                     l50:
  3042                           
  3043                           ;SerComm.c: 94: temp1 = temp2 / 100;
  3044  002058  C0AD  F080         	movff	breakDouble@temp2,___lwdiv@dividend
  3045  00205C  C0AE  F081         	movff	breakDouble@temp2+1,___lwdiv@dividend+1
  3046  002060  0E00               	movlw	0
  3047  002062  0100               	movlb	0	; () banked
  3048  002064  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3049  002066  0E64               	movlw	100
  3050  002068  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3051  00206A  ECE7  F014         	call	___lwdiv	;wreg free
  3052  00206E  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3053  002072  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3054                           
  3055                           ;SerComm.c: 95: temp2 = temp2 % 100;
  3056  002076  C0AD  F080         	movff	breakDouble@temp2,___lwmod@dividend
  3057  00207A  C0AE  F081         	movff	breakDouble@temp2+1,___lwmod@dividend+1
  3058  00207E  0E00               	movlw	0
  3059  002080  0100               	movlb	0	; () banked
  3060  002082  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3061  002084  0E64               	movlw	100
  3062  002086  6F82               	movwf	___lwmod@divisor& (0+255),b
  3063  002088  ECDD  F015         	call	___lwmod	;wreg free
  3064  00208C  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3065  002090  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3066                           
  3067                           ;SerComm.c: 96: SerTx(temp1 + 0x30);
  3068  002094  0100               	movlb	0	; () banked
  3069  002096  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3070  002098  0F30               	addlw	48
  3071  00209A  ECCE  F017         	call	_SerTx
  3072                           
  3073                           ;SerComm.c: 97: SerTx('.');
  3074  00209E  0E2E               	movlw	46
  3075  0020A0  ECCE  F017         	call	_SerTx
  3076                           
  3077                           ;SerComm.c: 98: temp1 = temp2 / 10;
  3078  0020A4  C0AD  F080         	movff	breakDouble@temp2,___lwdiv@dividend
  3079  0020A8  C0AE  F081         	movff	breakDouble@temp2+1,___lwdiv@dividend+1
  3080  0020AC  0E00               	movlw	0
  3081  0020AE  0100               	movlb	0	; () banked
  3082  0020B0  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3083  0020B2  0E0A               	movlw	10
  3084  0020B4  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3085  0020B6  ECE7  F014         	call	___lwdiv	;wreg free
  3086  0020BA  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3087  0020BE  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3088                           
  3089                           ;SerComm.c: 99: temp2 = temp2 % 10;
  3090  0020C2  C0AD  F080         	movff	breakDouble@temp2,___lwmod@dividend
  3091  0020C6  C0AE  F081         	movff	breakDouble@temp2+1,___lwmod@dividend+1
  3092  0020CA  0E00               	movlw	0
  3093  0020CC  0100               	movlb	0	; () banked
  3094  0020CE  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3095  0020D0  0E0A               	movlw	10
  3096  0020D2  6F82               	movwf	___lwmod@divisor& (0+255),b
  3097  0020D4  ECDD  F015         	call	___lwmod	;wreg free
  3098  0020D8  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3099  0020DC  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3100                           
  3101                           ;SerComm.c: 100: SerTx(temp1 + 0x30);
  3102  0020E0  0100               	movlb	0	; () banked
  3103  0020E2  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3104  0020E4  0F30               	addlw	48
  3105  0020E6  ECCE  F017         	call	_SerTx
  3106                           
  3107                           ;SerComm.c: 101: SerTx(temp2 + 0x30);
  3108  0020EA  0100               	movlb	0	; () banked
  3109  0020EC  51AD               	movf	breakDouble@temp2& (0+255),w,b
  3110  0020EE  0F30               	addlw	48
  3111  0020F0  ECCE  F017         	call	_SerTx
  3112                           
  3113                           ;SerComm.c: 102: SerTx(0x0A);
  3114  0020F4  0E0A               	movlw	10
  3115  0020F6  ECCE  F017         	call	_SerTx
  3116                           
  3117                           ;SerComm.c: 103: SerTx(0x0D);
  3118  0020FA  0E0D               	movlw	13
  3119  0020FC  ECCE  F017         	call	_SerTx
  3120  002100  0012               	return		;funcret
  3121  002102                     __end_of_breakDouble:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           indf0	equ	0xFEF
  3131                           postinc0	equ	0xFEE
  3132                           fsr0h	equ	0xFEA
  3133                           fsr0l	equ	0xFE9
  3134                           wreg	equ	0xFE8
  3135                           indf2	equ	0xFDF
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function ___lwmod *****************
  3141 ;; Defined at:
  3142 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  dividend        2    0[BANK0 ] unsigned int 
  3145 ;;  divisor         2    2[BANK0 ] unsigned int 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  counter         1    4[BANK0 ] unsigned char 
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  2    0[BANK0 ] unsigned int 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3157 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;Total ram usage:        5 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    6
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_breakDouble
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text10
  3172  002BBA                     __ptext10:
  3173                           	opt stack 0
  3174  002BBA                     ___lwmod:
  3175                           	opt stack 22
  3176                           
  3177                           ;incstack = 0
  3178  002BBA  0100               	movlb	0	; () banked
  3179  002BBC  5182               	movf	___lwmod@divisor& (0+255),w,b
  3180  002BBE  0100               	movlb	0	; () banked
  3181  002BC0  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3182  002BC2  B4D8               	btfsc	status,2,c
  3183  002BC4  D02B               	goto	l1032
  3184                           
  3185                           ; BSR set to: 0
  3186  002BC6  0E01               	movlw	1
  3187  002BC8  0100               	movlb	0	; () banked
  3188  002BCA  6F84               	movwf	___lwmod@counter& (0+255),b
  3189  002BCC  D007               	goto	l3843
  3190  002BCE                     l3841:
  3191                           
  3192                           ; BSR set to: 0
  3193  002BCE  0100               	movlb	0	; () banked
  3194  002BD0  90D8               	bcf	status,0,c
  3195  002BD2  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  3196  002BD4  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3197  002BD6  0100               	movlb	0	; () banked
  3198  002BD8  2B84               	incf	___lwmod@counter& (0+255),f,b
  3199  002BDA  D000               	goto	l3843
  3200  002BDC                     l3843:
  3201                           
  3202                           ; BSR set to: 0
  3203  002BDC  0100               	movlb	0	; () banked
  3204  002BDE  BF83               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
  3205  002BE0  D002               	goto	l3845
  3206  002BE2  D7F5               	goto	l3841
  3207                           
  3208                           ; BSR set to: 0
  3209  002BE4  D000               	goto	l3845
  3210  002BE6                     l3845:
  3211                           
  3212                           ; BSR set to: 0
  3213  002BE6  0100               	movlb	0	; () banked
  3214  002BE8  5182               	movf	___lwmod@divisor& (0+255),w,b
  3215  002BEA  0100               	movlb	0	; () banked
  3216  002BEC  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  3217  002BEE  0100               	movlb	0	; () banked
  3218  002BF0  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3219  002BF2  0100               	movlb	0	; () banked
  3220  002BF4  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3221  002BF6  A0D8               	btfss	status,0,c
  3222  002BF8  D009               	goto	l3849
  3223                           
  3224                           ; BSR set to: 0
  3225  002BFA  0100               	movlb	0	; () banked
  3226  002BFC  5182               	movf	___lwmod@divisor& (0+255),w,b
  3227  002BFE  0100               	movlb	0	; () banked
  3228  002C00  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  3229  002C02  0100               	movlb	0	; () banked
  3230  002C04  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3231  002C06  0100               	movlb	0	; () banked
  3232  002C08  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3233  002C0A  D000               	goto	l3849
  3234  002C0C                     l3849:
  3235                           
  3236                           ; BSR set to: 0
  3237  002C0C  0100               	movlb	0	; () banked
  3238  002C0E  90D8               	bcf	status,0,c
  3239  002C10  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3240  002C12  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  3241                           
  3242                           ; BSR set to: 0
  3243  002C14  0100               	movlb	0	; () banked
  3244  002C16  2F84               	decfsz	___lwmod@counter& (0+255),f,b
  3245  002C18  D7E6               	goto	l3845
  3246  002C1A  D000               	goto	l1032
  3247  002C1C                     l1032:
  3248                           
  3249                           ; BSR set to: 0
  3250  002C1C  C080  F080         	movff	___lwmod@dividend,?___lwmod
  3251  002C20  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  3252                           
  3253                           ; BSR set to: 0
  3254  002C24  0012               	return		;funcret
  3255  002C26                     __end_of___lwmod:
  3256                           	opt stack 0
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           indf0	equ	0xFEF
  3265                           postinc0	equ	0xFEE
  3266                           fsr0h	equ	0xFEA
  3267                           fsr0l	equ	0xFE9
  3268                           wreg	equ	0xFE8
  3269                           indf2	equ	0xFDF
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function ___lwdiv *****************
  3275 ;; Defined at:
  3276 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  dividend        2    0[BANK0 ] unsigned int 
  3279 ;;  divisor         2    2[BANK0 ] unsigned int 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  quotient        2    5[BANK0 ] unsigned int 
  3282 ;;  counter         1    4[BANK0 ] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  2    0[BANK0 ] unsigned int 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;Total ram usage:        7 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    6
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_breakDouble
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text11
  3307  0029CE                     __ptext11:
  3308                           	opt stack 0
  3309  0029CE                     ___lwdiv:
  3310                           	opt stack 22
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;incstack = 0
  3314  0029CE  0E00               	movlw	0
  3315  0029D0  0100               	movlb	0	; () banked
  3316  0029D2  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3317  0029D4  0E00               	movlw	0
  3318  0029D6  6F85               	movwf	___lwdiv@quotient& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321  0029D8  0100               	movlb	0	; () banked
  3322  0029DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3323  0029DC  0100               	movlb	0	; () banked
  3324  0029DE  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3325  0029E0  B4D8               	btfsc	status,2,c
  3326  0029E2  D031               	goto	l1022
  3327                           
  3328                           ; BSR set to: 0
  3329  0029E4  0E01               	movlw	1
  3330  0029E6  0100               	movlb	0	; () banked
  3331  0029E8  6F84               	movwf	___lwdiv@counter& (0+255),b
  3332  0029EA  D007               	goto	l3823
  3333  0029EC                     l3821:
  3334                           
  3335                           ; BSR set to: 0
  3336  0029EC  0100               	movlb	0	; () banked
  3337  0029EE  90D8               	bcf	status,0,c
  3338  0029F0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3339  0029F2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3340  0029F4  0100               	movlb	0	; () banked
  3341  0029F6  2B84               	incf	___lwdiv@counter& (0+255),f,b
  3342  0029F8  D000               	goto	l3823
  3343  0029FA                     l3823:
  3344                           
  3345                           ; BSR set to: 0
  3346  0029FA  0100               	movlb	0	; () banked
  3347  0029FC  BF83               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
  3348  0029FE  D002               	goto	l3825
  3349  002A00  D7F5               	goto	l3821
  3350                           
  3351                           ; BSR set to: 0
  3352  002A02  D000               	goto	l3825
  3353  002A04                     l3825:
  3354                           
  3355                           ; BSR set to: 0
  3356  002A04  0100               	movlb	0	; () banked
  3357  002A06  90D8               	bcf	status,0,c
  3358  002A08  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  3359  002A0A  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3360                           
  3361                           ; BSR set to: 0
  3362  002A0C  0100               	movlb	0	; () banked
  3363  002A0E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3364  002A10  0100               	movlb	0	; () banked
  3365  002A12  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3366  002A14  0100               	movlb	0	; () banked
  3367  002A16  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3368  002A18  0100               	movlb	0	; () banked
  3369  002A1A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3370  002A1C  A0D8               	btfss	status,0,c
  3371  002A1E  D00B               	goto	l3833
  3372                           
  3373                           ; BSR set to: 0
  3374  002A20  0100               	movlb	0	; () banked
  3375  002A22  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3376  002A24  0100               	movlb	0	; () banked
  3377  002A26  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3378  002A28  0100               	movlb	0	; () banked
  3379  002A2A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3380  002A2C  0100               	movlb	0	; () banked
  3381  002A2E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3382                           
  3383                           ; BSR set to: 0
  3384  002A30  0100               	movlb	0	; () banked
  3385  002A32  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  3386  002A34  D000               	goto	l3833
  3387  002A36                     l3833:
  3388                           
  3389                           ; BSR set to: 0
  3390  002A36  0100               	movlb	0	; () banked
  3391  002A38  90D8               	bcf	status,0,c
  3392  002A3A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3393  002A3C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3394                           
  3395                           ; BSR set to: 0
  3396  002A3E  0100               	movlb	0	; () banked
  3397  002A40  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  3398  002A42  D7E0               	goto	l3825
  3399  002A44  D000               	goto	l1022
  3400  002A46                     l1022:
  3401                           
  3402                           ; BSR set to: 0
  3403  002A46  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  3404  002A4A  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3405                           
  3406                           ; BSR set to: 0
  3407  002A4E  0012               	return		;funcret
  3408  002A50                     __end_of___lwdiv:
  3409                           	opt stack 0
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           prodh	equ	0xFF4
  3415                           prodl	equ	0xFF3
  3416                           intcon	equ	0xFF2
  3417                           indf0	equ	0xFEF
  3418                           postinc0	equ	0xFEE
  3419                           fsr0h	equ	0xFEA
  3420                           fsr0l	equ	0xFE9
  3421                           wreg	equ	0xFE8
  3422                           indf2	equ	0xFDF
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function ___fttol *****************
  3428 ;; Defined at:
  3429 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  f1              3   23[BANK0 ] float 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  lval            4   33[BANK0 ] unsigned long 
  3434 ;;  exp1            1   37[BANK0 ] unsigned char 
  3435 ;;  sign1           1   32[BANK0 ] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  4   23[BANK0 ] long 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3445 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;Total ram usage:       15 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    6
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_breakDouble
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text12
  3460  002394                     __ptext12:
  3461                           	opt stack 0
  3462  002394                     ___fttol:
  3463                           	opt stack 22
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;incstack = 0
  3467  002394  C099  F09B         	movff	___fttol@f1+2,??___fttol
  3468  002398  0100               	movlb	0	; () banked
  3469  00239A  6B9C               	clrf	(??___fttol+1)& (0+255),b
  3470  00239C  6B9D               	clrf	(??___fttol+2)& (0+255),b
  3471  00239E  0100               	movlb	0	; () banked
  3472  0023A0  3598               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3473  0023A2  0100               	movlb	0	; () banked
  3474  0023A4  379B               	rlcf	??___fttol& (0+255),f,b
  3475  0023A6  E301               	bnc	u3221
  3476  0023A8  819C               	bsf	(??___fttol+1)& (0+255),0,b
  3477  0023AA                     u3221:
  3478  0023AA  0100               	movlb	0	; () banked
  3479  0023AC  519B               	movf	??___fttol& (0+255),w,b
  3480  0023AE  0100               	movlb	0	; () banked
  3481  0023B0  6FA5               	movwf	___fttol@exp1& (0+255),b
  3482  0023B2  0100               	movlb	0	; () banked
  3483  0023B4  51A5               	movf	___fttol@exp1& (0+255),w,b
  3484  0023B6  A4D8               	btfss	status,2,c
  3485  0023B8  D002               	goto	l2921
  3486  0023BA  D051               	goto	l2945
  3487                           
  3488                           ; BSR set to: 0
  3489                           
  3490                           ; BSR set to: 0
  3491  0023BC  D083               	goto	l910
  3492  0023BE                     l2921:
  3493                           
  3494                           ; BSR set to: 0
  3495  0023BE  0E17               	movlw	23
  3496  0023C0  0100               	movlb	0	; () banked
  3497  0023C2  6F9B               	movwf	??___fttol& (0+255),b
  3498  0023C4  C097  F09C         	movff	___fttol@f1,??___fttol+1
  3499  0023C8  C098  F09D         	movff	___fttol@f1+1,??___fttol+2
  3500  0023CC  C099  F09E         	movff	___fttol@f1+2,??___fttol+3
  3501  0023D0  0100               	movlb	0	; () banked
  3502  0023D2  299B               	incf	??___fttol& (0+255),w,b
  3503  0023D4  0100               	movlb	0	; () banked
  3504  0023D6  6F9F               	movwf	(??___fttol+4)& (0+255),b
  3505  0023D8  D005               	goto	u3240
  3506  0023DA                     u3245:
  3507  0023DA  0100               	movlb	0	; () banked
  3508  0023DC  90D8               	bcf	status,0,c
  3509  0023DE  339E               	rrcf	(??___fttol+3)& (0+255),f,b
  3510  0023E0  339D               	rrcf	(??___fttol+2)& (0+255),f,b
  3511  0023E2  339C               	rrcf	(??___fttol+1)& (0+255),f,b
  3512  0023E4                     u3240:
  3513  0023E4  0100               	movlb	0	; () banked
  3514  0023E6  2F9F               	decfsz	(??___fttol+4)& (0+255),f,b
  3515  0023E8  D7F8               	goto	u3245
  3516  0023EA  0100               	movlb	0	; () banked
  3517  0023EC  519C               	movf	(??___fttol+1)& (0+255),w,b
  3518  0023EE  0100               	movlb	0	; () banked
  3519  0023F0  6FA0               	movwf	___fttol@sign1& (0+255),b
  3520                           
  3521                           ; BSR set to: 0
  3522  0023F2  0100               	movlb	0	; () banked
  3523  0023F4  8F98               	bsf	(___fttol@f1+1)& (0+255),7,b
  3524                           
  3525                           ; BSR set to: 0
  3526  0023F6  0EFF               	movlw	255
  3527  0023F8  0100               	movlb	0	; () banked
  3528  0023FA  1797               	andwf	___fttol@f1& (0+255),f,b
  3529  0023FC  0EFF               	movlw	255
  3530  0023FE  0100               	movlb	0	; () banked
  3531  002400  1798               	andwf	(___fttol@f1+1)& (0+255),f,b
  3532  002402  0E00               	movlw	0
  3533  002404  0100               	movlb	0	; () banked
  3534  002406  1799               	andwf	(___fttol@f1+2)& (0+255),f,b
  3535                           
  3536                           ; BSR set to: 0
  3537  002408  0100               	movlb	0	; () banked
  3538  00240A  5197               	movf	___fttol@f1& (0+255),w,b
  3539  00240C  0100               	movlb	0	; () banked
  3540  00240E  6FA1               	movwf	___fttol@lval& (0+255),b
  3541  002410  0100               	movlb	0	; () banked
  3542  002412  5198               	movf	(___fttol@f1+1)& (0+255),w,b
  3543  002414  0100               	movlb	0	; () banked
  3544  002416  6FA2               	movwf	(___fttol@lval+1)& (0+255),b
  3545  002418  0100               	movlb	0	; () banked
  3546  00241A  5199               	movf	(___fttol@f1+2)& (0+255),w,b
  3547  00241C  0100               	movlb	0	; () banked
  3548  00241E  6FA3               	movwf	(___fttol@lval+2)& (0+255),b
  3549  002420  0100               	movlb	0	; () banked
  3550  002422  6BA4               	clrf	(___fttol@lval+3)& (0+255),b
  3551                           
  3552                           ; BSR set to: 0
  3553  002424  0E8E               	movlw	142
  3554  002426  0100               	movlb	0	; () banked
  3555  002428  5FA5               	subwf	___fttol@exp1& (0+255),f,b
  3556                           
  3557                           ; BSR set to: 0
  3558  00242A  0100               	movlb	0	; () banked
  3559  00242C  AFA5               	btfss	___fttol@exp1& (0+255),7,b
  3560  00242E  D013               	goto	l2943
  3561                           
  3562                           ; BSR set to: 0
  3563  002430  0100               	movlb	0	; () banked
  3564  002432  51A5               	movf	___fttol@exp1& (0+255),w,b
  3565  002434  0A80               	xorlw	128
  3566  002436  0F8F               	addlw	143
  3567  002438  B0D8               	btfsc	status,0,c
  3568  00243A  D003               	goto	l2939
  3569  00243C  D010               	goto	l2945
  3570                           
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574  00243E  D042               	goto	l910
  3575                           
  3576                           ; BSR set to: 0
  3577  002440  D000               	goto	l2939
  3578  002442                     l2939:
  3579                           
  3580                           ; BSR set to: 0
  3581  002442  0100               	movlb	0	; () banked
  3582  002444  90D8               	bcf	status,0,c
  3583  002446  33A4               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3584  002448  33A3               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3585  00244A  33A2               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3586  00244C  33A1               	rrcf	___fttol@lval& (0+255),f,b
  3587                           
  3588                           ; BSR set to: 0
  3589  00244E  0100               	movlb	0	; () banked
  3590  002450  3FA5               	incfsz	___fttol@exp1& (0+255),f,b
  3591  002452  D7F7               	goto	l2939
  3592                           
  3593                           ; BSR set to: 0
  3594  002454  D01F               	goto	l2953
  3595  002456                     l2943:
  3596                           
  3597                           ; BSR set to: 0
  3598  002456  0E17               	movlw	23
  3599  002458  0100               	movlb	0	; () banked
  3600  00245A  65A5               	cpfsgt	___fttol@exp1& (0+255),b
  3601  00245C  D014               	goto	l2951
  3602  00245E                     l2945:
  3603                           
  3604                           ; BSR set to: 0
  3605  00245E  0E00               	movlw	0
  3606  002460  0100               	movlb	0	; () banked
  3607  002462  6F97               	movwf	?___fttol& (0+255),b
  3608  002464  0E00               	movlw	0
  3609  002466  6F98               	movwf	(?___fttol+1)& (0+255),b
  3610  002468  0E00               	movlw	0
  3611  00246A  6F99               	movwf	(?___fttol+2)& (0+255),b
  3612  00246C  0E00               	movlw	0
  3613  00246E  6F9A               	movwf	(?___fttol+3)& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616  002470  D029               	goto	l910
  3617                           
  3618                           ; BSR set to: 0
  3619  002472  D009               	goto	l2951
  3620  002474                     l2949:
  3621                           
  3622                           ; BSR set to: 0
  3623  002474  0100               	movlb	0	; () banked
  3624  002476  90D8               	bcf	status,0,c
  3625  002478  37A1               	rlcf	___fttol@lval& (0+255),f,b
  3626  00247A  37A2               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3627  00247C  37A3               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3628  00247E  37A4               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3629  002480  0100               	movlb	0	; () banked
  3630  002482  07A5               	decf	___fttol@exp1& (0+255),f,b
  3631  002484  D000               	goto	l2951
  3632  002486                     l2951:
  3633                           
  3634                           ; BSR set to: 0
  3635  002486  0100               	movlb	0	; () banked
  3636  002488  51A5               	movf	___fttol@exp1& (0+255),w,b
  3637  00248A  0100               	movlb	0	; () banked
  3638  00248C  B4D8               	btfsc	status,2,c
  3639  00248E  D002               	goto	l2953
  3640  002490  D7F1               	goto	l2949
  3641                           
  3642                           ; BSR set to: 0
  3643  002492  D000               	goto	l2953
  3644  002494                     l2953:
  3645                           
  3646                           ; BSR set to: 0
  3647  002494  0100               	movlb	0	; () banked
  3648  002496  51A0               	movf	___fttol@sign1& (0+255),w,b
  3649  002498  0100               	movlb	0	; () banked
  3650  00249A  B4D8               	btfsc	status,2,c
  3651  00249C  D00A               	goto	l2957
  3652                           
  3653                           ; BSR set to: 0
  3654  00249E  0100               	movlb	0	; () banked
  3655  0024A0  1FA4               	comf	(___fttol@lval+3)& (0+255),f,b
  3656  0024A2  1FA3               	comf	(___fttol@lval+2)& (0+255),f,b
  3657  0024A4  1FA2               	comf	(___fttol@lval+1)& (0+255),f,b
  3658  0024A6  6DA1               	negf	___fttol@lval& (0+255),b
  3659  0024A8  0E00               	movlw	0
  3660  0024AA  23A2               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3661  0024AC  23A3               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3662  0024AE  23A4               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3663  0024B0  D000               	goto	l2957
  3664  0024B2                     l2957:
  3665                           
  3666                           ; BSR set to: 0
  3667  0024B2  C0A1  F097         	movff	___fttol@lval,?___fttol
  3668  0024B6  C0A2  F098         	movff	___fttol@lval+1,?___fttol+1
  3669  0024BA  C0A3  F099         	movff	___fttol@lval+2,?___fttol+2
  3670  0024BE  C0A4  F09A         	movff	___fttol@lval+3,?___fttol+3
  3671  0024C2  D000               	goto	l910
  3672  0024C4                     l910:
  3673                           
  3674                           ; BSR set to: 0
  3675  0024C4  0012               	return		;funcret
  3676  0024C6                     __end_of___fttol:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           intcon	equ	0xFF2
  3685                           indf0	equ	0xFEF
  3686                           postinc0	equ	0xFEE
  3687                           fsr0h	equ	0xFEA
  3688                           fsr0l	equ	0xFE9
  3689                           wreg	equ	0xFE8
  3690                           indf2	equ	0xFDF
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function ___ftmul *****************
  3696 ;; Defined at:
  3697 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  f1              3    8[BANK0 ] float 
  3700 ;;  f2              3   11[BANK0 ] float 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  3703 ;;  sign            1   22[BANK0 ] unsigned char 
  3704 ;;  cntr            1   21[BANK0 ] unsigned char 
  3705 ;;  exp             1   17[BANK0 ] unsigned char 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  3    8[BANK0 ] float 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:       15 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    7
  3722 ;; This function calls:
  3723 ;;		___ftpack
  3724 ;; This function is called by:
  3725 ;;		_breakDouble
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text13
  3730  002102                     __ptext13:
  3731                           	opt stack 0
  3732  002102                     ___ftmul:
  3733                           	opt stack 21
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;incstack = 0
  3737  002102  C08A  F08E         	movff	___ftmul@f1+2,??___ftmul
  3738  002106  0100               	movlb	0	; () banked
  3739  002108  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  3740  00210A  6B90               	clrf	(??___ftmul+2)& (0+255),b
  3741  00210C  0100               	movlb	0	; () banked
  3742  00210E  3589               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3743  002110  0100               	movlb	0	; () banked
  3744  002112  378E               	rlcf	??___ftmul& (0+255),f,b
  3745  002114  E301               	bnc	u4811
  3746  002116  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  3747  002118                     u4811:
  3748  002118  0100               	movlb	0	; () banked
  3749  00211A  518E               	movf	??___ftmul& (0+255),w,b
  3750  00211C  0100               	movlb	0	; () banked
  3751  00211E  6F91               	movwf	___ftmul@exp& (0+255),b
  3752  002120  0100               	movlb	0	; () banked
  3753  002122  5191               	movf	___ftmul@exp& (0+255),w,b
  3754  002124  A4D8               	btfss	status,2,c
  3755  002126  D002               	goto	l3773
  3756  002128  D014               	goto	l3775
  3757                           
  3758                           ; BSR set to: 0
  3759                           
  3760                           ; BSR set to: 0
  3761  00212A  D098               	goto	l889
  3762  00212C                     l3773:
  3763                           
  3764                           ; BSR set to: 0
  3765  00212C  C08D  F08E         	movff	___ftmul@f2+2,??___ftmul
  3766  002130  0100               	movlb	0	; () banked
  3767  002132  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  3768  002134  6B90               	clrf	(??___ftmul+2)& (0+255),b
  3769  002136  0100               	movlb	0	; () banked
  3770  002138  358C               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3771  00213A  0100               	movlb	0	; () banked
  3772  00213C  378E               	rlcf	??___ftmul& (0+255),f,b
  3773  00213E  E301               	bnc	u4831
  3774  002140  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  3775  002142                     u4831:
  3776  002142  0100               	movlb	0	; () banked
  3777  002144  518E               	movf	??___ftmul& (0+255),w,b
  3778  002146  0100               	movlb	0	; () banked
  3779  002148  6F96               	movwf	___ftmul@sign& (0+255),b
  3780  00214A  0100               	movlb	0	; () banked
  3781  00214C  5196               	movf	___ftmul@sign& (0+255),w,b
  3782  00214E  A4D8               	btfss	status,2,c
  3783  002150  D00A               	goto	l3779
  3784  002152                     l3775:
  3785                           
  3786                           ; BSR set to: 0
  3787  002152  0E00               	movlw	0
  3788  002154  0100               	movlb	0	; () banked
  3789  002156  6F88               	movwf	?___ftmul& (0+255),b
  3790  002158  0E00               	movlw	0
  3791  00215A  0100               	movlb	0	; () banked
  3792  00215C  6F89               	movwf	(?___ftmul+1)& (0+255),b
  3793  00215E  0E00               	movlw	0
  3794  002160  0100               	movlb	0	; () banked
  3795  002162  6F8A               	movwf	(?___ftmul+2)& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798  002164  D07B               	goto	l889
  3799  002166                     l3779:
  3800                           
  3801                           ; BSR set to: 0
  3802  002166  0100               	movlb	0	; () banked
  3803  002168  5196               	movf	___ftmul@sign& (0+255),w,b
  3804  00216A  0F7B               	addlw	123
  3805  00216C  0100               	movlb	0	; () banked
  3806  00216E  2791               	addwf	___ftmul@exp& (0+255),f,b
  3807                           
  3808                           ; BSR set to: 0
  3809  002170  C08A  F096         	movff	___ftmul@f1+2,___ftmul@sign
  3810  002174  0100               	movlb	0	; () banked
  3811  002176  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  3812  002178  0100               	movlb	0	; () banked
  3813  00217A  1B96               	xorwf	___ftmul@sign& (0+255),f,b
  3814  00217C  0E80               	movlw	128
  3815  00217E  0100               	movlb	0	; () banked
  3816  002180  1796               	andwf	___ftmul@sign& (0+255),f,b
  3817                           
  3818                           ; BSR set to: 0
  3819  002182  0100               	movlb	0	; () banked
  3820  002184  8F89               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3821                           
  3822                           ; BSR set to: 0
  3823  002186  0100               	movlb	0	; () banked
  3824  002188  8F8C               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3825                           
  3826                           ; BSR set to: 0
  3827  00218A  0EFF               	movlw	255
  3828  00218C  0100               	movlb	0	; () banked
  3829  00218E  178B               	andwf	___ftmul@f2& (0+255),f,b
  3830  002190  0EFF               	movlw	255
  3831  002192  0100               	movlb	0	; () banked
  3832  002194  178C               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3833  002196  0E00               	movlw	0
  3834  002198  0100               	movlb	0	; () banked
  3835  00219A  178D               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3836                           
  3837                           ; BSR set to: 0
  3838  00219C  0E00               	movlw	0
  3839  00219E  0100               	movlb	0	; () banked
  3840  0021A0  6F92               	movwf	___ftmul@f3_as_product& (0+255),b
  3841  0021A2  0E00               	movlw	0
  3842  0021A4  0100               	movlb	0	; () banked
  3843  0021A6  6F93               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3844  0021A8  0E00               	movlw	0
  3845  0021AA  0100               	movlb	0	; () banked
  3846  0021AC  6F94               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3847                           
  3848                           ; BSR set to: 0
  3849  0021AE  0E07               	movlw	7
  3850  0021B0  0100               	movlb	0	; () banked
  3851  0021B2  6F95               	movwf	___ftmul@cntr& (0+255),b
  3852  0021B4  D000               	goto	l3793
  3853  0021B6                     l3793:
  3854                           
  3855                           ; BSR set to: 0
  3856  0021B6  0100               	movlb	0	; () banked
  3857  0021B8  A188               	btfss	___ftmul@f1& (0+255),0,b
  3858  0021BA  D00D               	goto	l3797
  3859                           
  3860                           ; BSR set to: 0
  3861  0021BC  0100               	movlb	0	; () banked
  3862  0021BE  518B               	movf	___ftmul@f2& (0+255),w,b
  3863  0021C0  0100               	movlb	0	; () banked
  3864  0021C2  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3865  0021C4  0100               	movlb	0	; () banked
  3866  0021C6  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  3867  0021C8  0100               	movlb	0	; () banked
  3868  0021CA  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3869  0021CC  0100               	movlb	0	; () banked
  3870  0021CE  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  3871  0021D0  0100               	movlb	0	; () banked
  3872  0021D2  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3873  0021D4  D000               	goto	l3797
  3874  0021D6                     l3797:
  3875                           
  3876                           ; BSR set to: 0
  3877  0021D6  0100               	movlb	0	; () banked
  3878  0021D8  90D8               	bcf	status,0,c
  3879  0021DA  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3880  0021DC  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3881  0021DE  3388               	rrcf	___ftmul@f1& (0+255),f,b
  3882  0021E0  0100               	movlb	0	; () banked
  3883  0021E2  90D8               	bcf	status,0,c
  3884  0021E4  378B               	rlcf	___ftmul@f2& (0+255),f,b
  3885  0021E6  378C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3886  0021E8  378D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3887                           
  3888                           ; BSR set to: 0
  3889  0021EA  0100               	movlb	0	; () banked
  3890  0021EC  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  3891  0021EE  D7E3               	goto	l3793
  3892  0021F0  D000               	goto	l3801
  3893  0021F2                     l3801:
  3894                           
  3895                           ; BSR set to: 0
  3896  0021F2  0E09               	movlw	9
  3897  0021F4  0100               	movlb	0	; () banked
  3898  0021F6  6F95               	movwf	___ftmul@cntr& (0+255),b
  3899  0021F8  D000               	goto	l3803
  3900  0021FA                     l3803:
  3901                           
  3902                           ; BSR set to: 0
  3903  0021FA  0100               	movlb	0	; () banked
  3904  0021FC  A188               	btfss	___ftmul@f1& (0+255),0,b
  3905  0021FE  D00D               	goto	l3807
  3906                           
  3907                           ; BSR set to: 0
  3908  002200  0100               	movlb	0	; () banked
  3909  002202  518B               	movf	___ftmul@f2& (0+255),w,b
  3910  002204  0100               	movlb	0	; () banked
  3911  002206  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3912  002208  0100               	movlb	0	; () banked
  3913  00220A  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  3914  00220C  0100               	movlb	0	; () banked
  3915  00220E  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3916  002210  0100               	movlb	0	; () banked
  3917  002212  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  3918  002214  0100               	movlb	0	; () banked
  3919  002216  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3920  002218  D000               	goto	l3807
  3921  00221A                     l3807:
  3922                           
  3923                           ; BSR set to: 0
  3924  00221A  0100               	movlb	0	; () banked
  3925  00221C  90D8               	bcf	status,0,c
  3926  00221E  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3927  002220  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3928  002222  3388               	rrcf	___ftmul@f1& (0+255),f,b
  3929  002224  0100               	movlb	0	; () banked
  3930  002226  90D8               	bcf	status,0,c
  3931  002228  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3932  00222A  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3933  00222C  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3934                           
  3935                           ; BSR set to: 0
  3936  00222E  0100               	movlb	0	; () banked
  3937  002230  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  3938  002232  D7E3               	goto	l3803
  3939  002234  D000               	goto	l3811
  3940  002236                     l3811:
  3941                           
  3942                           ; BSR set to: 0
  3943  002236  C092  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  3944  00223A  C093  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3945  00223E  C094  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3946  002242  C091  F083         	movff	___ftmul@exp,___ftpack@exp
  3947  002246  C096  F084         	movff	___ftmul@sign,___ftpack@sign
  3948  00224A  EC63  F012         	call	___ftpack	;wreg free
  3949  00224E  C080  F088         	movff	?___ftpack,?___ftmul
  3950  002252  C081  F089         	movff	?___ftpack+1,?___ftmul+1
  3951  002256  C082  F08A         	movff	?___ftpack+2,?___ftmul+2
  3952  00225A  D000               	goto	l889
  3953  00225C                     l889:
  3954  00225C  0012               	return		;funcret
  3955  00225E                     __end_of___ftmul:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           indf0	equ	0xFEF
  3965                           postinc0	equ	0xFEE
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           indf2	equ	0xFDF
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function ___ftpack *****************
  3975 ;; Defined at:
  3976 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  arg             3    0[BANK0 ] unsigned um
  3979 ;;  exp             1    3[BANK0 ] unsigned char 
  3980 ;;  sign            1    4[BANK0 ] unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  3    0[BANK0 ] float 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3992 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;Total ram usage:        8 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    6
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		___ftmul
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text14
  4007  0024C6                     __ptext14:
  4008                           	opt stack 0
  4009  0024C6                     ___ftpack:
  4010                           	opt stack 21
  4011                           
  4012                           ;incstack = 0
  4013  0024C6  0100               	movlb	0	; () banked
  4014  0024C8  5183               	movf	___ftpack@exp& (0+255),w,b
  4015  0024CA  0100               	movlb	0	; () banked
  4016  0024CC  B4D8               	btfsc	status,2,c
  4017  0024CE  D008               	goto	l3727
  4018                           
  4019                           ; BSR set to: 0
  4020  0024D0  0100               	movlb	0	; () banked
  4021  0024D2  5180               	movf	___ftpack@arg& (0+255),w,b
  4022  0024D4  0100               	movlb	0	; () banked
  4023  0024D6  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  4024  0024D8  0100               	movlb	0	; () banked
  4025  0024DA  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  4026  0024DC  A4D8               	btfss	status,2,c
  4027  0024DE  D013               	goto	l3733
  4028  0024E0                     l3727:
  4029                           
  4030                           ; BSR set to: 0
  4031  0024E0  0E00               	movlw	0
  4032  0024E2  0100               	movlb	0	; () banked
  4033  0024E4  6F80               	movwf	?___ftpack& (0+255),b
  4034  0024E6  0E00               	movlw	0
  4035  0024E8  0100               	movlb	0	; () banked
  4036  0024EA  6F81               	movwf	(?___ftpack+1)& (0+255),b
  4037  0024EC  0E00               	movlw	0
  4038  0024EE  0100               	movlb	0	; () banked
  4039  0024F0  6F82               	movwf	(?___ftpack+2)& (0+255),b
  4040                           
  4041                           ; BSR set to: 0
  4042  0024F2  D078               	goto	l802
  4043                           
  4044                           ; BSR set to: 0
  4045  0024F4  D008               	goto	l3733
  4046  0024F6                     l3731:
  4047                           
  4048                           ; BSR set to: 0
  4049  0024F6  0100               	movlb	0	; () banked
  4050  0024F8  2B83               	incf	___ftpack@exp& (0+255),f,b
  4051  0024FA  0100               	movlb	0	; () banked
  4052  0024FC  90D8               	bcf	status,0,c
  4053  0024FE  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4054  002500  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4055  002502  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4056  002504  D000               	goto	l3733
  4057  002506                     l3733:
  4058                           
  4059                           ; BSR set to: 0
  4060  002506  0E00               	movlw	0
  4061  002508  0100               	movlb	0	; () banked
  4062  00250A  1580               	andwf	___ftpack@arg& (0+255),w,b
  4063  00250C  0100               	movlb	0	; () banked
  4064  00250E  6F85               	movwf	??___ftpack& (0+255),b
  4065  002510  0E00               	movlw	0
  4066  002512  0100               	movlb	0	; () banked
  4067  002514  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4068  002516  0100               	movlb	0	; () banked
  4069  002518  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4070  00251A  0EFE               	movlw	254
  4071  00251C  0100               	movlb	0	; () banked
  4072  00251E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4073  002520  0100               	movlb	0	; () banked
  4074  002522  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4075  002524  0100               	movlb	0	; () banked
  4076  002526  5185               	movf	??___ftpack& (0+255),w,b
  4077  002528  0100               	movlb	0	; () banked
  4078  00252A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4079  00252C  0100               	movlb	0	; () banked
  4080  00252E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4081  002530  B4D8               	btfsc	status,2,c
  4082  002532  D013               	goto	l3739
  4083  002534  D7E0               	goto	l3731
  4084                           
  4085                           ; BSR set to: 0
  4086  002536  D011               	goto	l3739
  4087  002538                     l3735:
  4088                           
  4089                           ; BSR set to: 0
  4090  002538  0100               	movlb	0	; () banked
  4091  00253A  2B83               	incf	___ftpack@exp& (0+255),f,b
  4092                           
  4093                           ; BSR set to: 0
  4094  00253C  0E01               	movlw	1
  4095  00253E  0100               	movlb	0	; () banked
  4096  002540  2780               	addwf	___ftpack@arg& (0+255),f,b
  4097  002542  0E00               	movlw	0
  4098  002544  0100               	movlb	0	; () banked
  4099  002546  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  4100  002548  0E00               	movlw	0
  4101  00254A  0100               	movlb	0	; () banked
  4102  00254C  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  4103  00254E  0100               	movlb	0	; () banked
  4104  002550  90D8               	bcf	status,0,c
  4105  002552  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4106  002554  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4107  002556  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4108  002558  D000               	goto	l3739
  4109  00255A                     l3739:
  4110                           
  4111                           ; BSR set to: 0
  4112  00255A  0E00               	movlw	0
  4113  00255C  0100               	movlb	0	; () banked
  4114  00255E  1580               	andwf	___ftpack@arg& (0+255),w,b
  4115  002560  0100               	movlb	0	; () banked
  4116  002562  6F85               	movwf	??___ftpack& (0+255),b
  4117  002564  0E00               	movlw	0
  4118  002566  0100               	movlb	0	; () banked
  4119  002568  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4120  00256A  0100               	movlb	0	; () banked
  4121  00256C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4122  00256E  0EFF               	movlw	255
  4123  002570  0100               	movlb	0	; () banked
  4124  002572  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4125  002574  0100               	movlb	0	; () banked
  4126  002576  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4127  002578  0100               	movlb	0	; () banked
  4128  00257A  5185               	movf	??___ftpack& (0+255),w,b
  4129  00257C  0100               	movlb	0	; () banked
  4130  00257E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4131  002580  0100               	movlb	0	; () banked
  4132  002582  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4133  002584  B4D8               	btfsc	status,2,c
  4134  002586  D00A               	goto	l3743
  4135  002588  D7D7               	goto	l3735
  4136                           
  4137                           ; BSR set to: 0
  4138  00258A  D008               	goto	l3743
  4139  00258C                     l3741:
  4140                           
  4141                           ; BSR set to: 0
  4142  00258C  0100               	movlb	0	; () banked
  4143  00258E  0783               	decf	___ftpack@exp& (0+255),f,b
  4144  002590  0100               	movlb	0	; () banked
  4145  002592  90D8               	bcf	status,0,c
  4146  002594  3780               	rlcf	___ftpack@arg& (0+255),f,b
  4147  002596  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  4148  002598  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  4149  00259A  D000               	goto	l3743
  4150  00259C                     l3743:
  4151                           
  4152                           ; BSR set to: 0
  4153  00259C  0100               	movlb	0	; () banked
  4154  00259E  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  4155  0025A0  D005               	goto	l813
  4156                           
  4157                           ; BSR set to: 0
  4158  0025A2  0E02               	movlw	2
  4159  0025A4  0100               	movlb	0	; () banked
  4160  0025A6  6183               	cpfslt	___ftpack@exp& (0+255),b
  4161  0025A8  D7F1               	goto	l3741
  4162  0025AA  D000               	goto	l813
  4163  0025AC                     l813:
  4164                           
  4165                           ; BSR set to: 0
  4166  0025AC  0100               	movlb	0	; () banked
  4167  0025AE  B183               	btfsc	___ftpack@exp& (0+255),0,b
  4168  0025B0  D003               	goto	l3749
  4169                           
  4170                           ; BSR set to: 0
  4171  0025B2  0100               	movlb	0	; () banked
  4172  0025B4  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  4173  0025B6  D000               	goto	l3749
  4174  0025B8                     l3749:
  4175                           
  4176                           ; BSR set to: 0
  4177  0025B8  0100               	movlb	0	; () banked
  4178  0025BA  90D8               	bcf	status,0,c
  4179  0025BC  3383               	rrcf	___ftpack@exp& (0+255),f,b
  4180  0025BE  0100               	movlb	0	; () banked
  4181  0025C0  5183               	movf	___ftpack@exp& (0+255),w,b
  4182  0025C2  0100               	movlb	0	; () banked
  4183  0025C4  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  4184                           
  4185                           ; BSR set to: 0
  4186  0025C6  0100               	movlb	0	; () banked
  4187  0025C8  5184               	movf	___ftpack@sign& (0+255),w,b
  4188  0025CA  0100               	movlb	0	; () banked
  4189  0025CC  B4D8               	btfsc	status,2,c
  4190  0025CE  D003               	goto	l3755
  4191                           
  4192                           ; BSR set to: 0
  4193  0025D0  0100               	movlb	0	; () banked
  4194  0025D2  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  4195  0025D4  D000               	goto	l3755
  4196  0025D6                     l3755:
  4197                           
  4198                           ; BSR set to: 0
  4199  0025D6  C080  F080         	movff	___ftpack@arg,?___ftpack
  4200  0025DA  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  4201  0025DE  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  4202  0025E2  D000               	goto	l802
  4203  0025E4                     l802:
  4204                           
  4205                           ; BSR set to: 0
  4206  0025E4  0012               	return		;funcret
  4207  0025E6                     __end_of___ftpack:
  4208                           	opt stack 0
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           prodh	equ	0xFF4
  4214                           prodl	equ	0xFF3
  4215                           intcon	equ	0xFF2
  4216                           indf0	equ	0xFEF
  4217                           postinc0	equ	0xFEE
  4218                           fsr0h	equ	0xFEA
  4219                           fsr0l	equ	0xFE9
  4220                           wreg	equ	0xFE8
  4221                           indf2	equ	0xFDF
  4222                           fsr2h	equ	0xFDA
  4223                           fsr2l	equ	0xFD9
  4224                           status	equ	0xFD8
  4225                           
  4226 ;; *************** function _SerTx *****************
  4227 ;; Defined at:
  4228 ;;		line 41 in file "SerComm.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  c               1    wreg     unsigned char 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  c               1    0[BANK0 ] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;		None               void
  4235 ;; Registers used:
  4236 ;;		wreg
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;Total ram usage:        1 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    6
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_SerTxStr
  4253 ;;		_breakDouble
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text15
  4258  002F9C                     __ptext15:
  4259                           	opt stack 0
  4260  002F9C                     _SerTx:
  4261                           	opt stack 21
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;incstack = 0
  4265                           ;SerTx@c stored from wreg
  4266  002F9C  0100               	movlb	0	; () banked
  4267  002F9E  6F80               	movwf	SerTx@c& (0+255),b
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;SerComm.c: 43: TXREG1 = c;
  4271  002FA0  C080  FFAD         	movff	SerTx@c,4013	;volatile
  4272                           
  4273                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  4274  002FA4  D000               	goto	l28
  4275  002FA6                     l28:
  4276  002FA6  A89E               	btfss	3998,4,c	;volatile
  4277  002FA8  D7FE               	goto	l28
  4278  002FAA  0012               	return		;funcret
  4279  002FAC                     __end_of_SerTx:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           intcon	equ	0xFF2
  4288                           indf0	equ	0xFEF
  4289                           postinc0	equ	0xFEE
  4290                           fsr0h	equ	0xFEA
  4291                           fsr0l	equ	0xFE9
  4292                           wreg	equ	0xFE8
  4293                           indf2	equ	0xFDF
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _SPIReassembleDouble *****************
  4299 ;; Defined at:
  4300 ;;		line 81 in file "SPIMaster.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  dub             3    3[BANK0 ] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  3    0[BANK0 ] unsigned char 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4314 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;Total ram usage:        6 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    6
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_main
  4325 ;;		_MReceiveStrSPI
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text16
  4330  002E1E                     __ptext16:
  4331                           	opt stack 0
  4332  002E1E                     _SPIReassembleDouble:
  4333                           	opt stack 24
  4334                           
  4335                           ;SPIMaster.c: 83: double dub;
  4336                           ;SPIMaster.c: 84: DoublePtr = (unsigned char*) &dub;
  4337                           
  4338                           ;incstack = 0
  4339  002E1E  0E83               	movlw	low SPIReassembleDouble@dub
  4340  002E20  6E4E               	movwf	_DoublePtr,c
  4341  002E22  0E00               	movlw	high SPIReassembleDouble@dub
  4342  002E24  6E4F               	movwf	_DoublePtr+1,c
  4343                           
  4344                           ;SPIMaster.c: 85: DoublePtr[0] = DoubleSPIM[0];
  4345  002E26  C04E  FFD9         	movff	_DoublePtr,fsr2l
  4346  002E2A  C04F  FFDA         	movff	_DoublePtr+1,fsr2h
  4347  002E2E  C0DA  FFDF         	movff	_DoubleSPIM,indf2
  4348                           
  4349                           ;SPIMaster.c: 86: DoublePtr[1] = DoubleSPIM[1];
  4350  002E32  EE20 F001          	lfsr	2,1
  4351  002E36  504E               	movf	_DoublePtr,w,c
  4352  002E38  26D9               	addwf	fsr2l,f,c
  4353  002E3A  504F               	movf	_DoublePtr+1,w,c
  4354  002E3C  22DA               	addwfc	fsr2h,f,c
  4355  002E3E  C0DB  FFDF         	movff	_DoubleSPIM+1,indf2
  4356                           
  4357                           ;SPIMaster.c: 87: DoublePtr[2] = DoubleSPIM[2];
  4358  002E42  EE20 F002          	lfsr	2,2
  4359  002E46  504E               	movf	_DoublePtr,w,c
  4360  002E48  26D9               	addwf	fsr2l,f,c
  4361  002E4A  504F               	movf	_DoublePtr+1,w,c
  4362  002E4C  22DA               	addwfc	fsr2h,f,c
  4363  002E4E  C0DC  FFDF         	movff	_DoubleSPIM+2,indf2
  4364                           
  4365                           ;SPIMaster.c: 88: return dub;
  4366  002E52  C083  F080         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  4367  002E56  C084  F081         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  4368  002E5A  C085  F082         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  4369  002E5E  D000               	goto	l382
  4370  002E60                     l382:
  4371  002E60  0012               	return		;funcret
  4372  002E62                     __end_of_SPIReassembleDouble:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           indf0	equ	0xFEF
  4382                           postinc0	equ	0xFEE
  4383                           fsr0h	equ	0xFEA
  4384                           fsr0l	equ	0xFE9
  4385                           wreg	equ	0xFE8
  4386                           indf2	equ	0xFDF
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _MReceiveSPI *****************
  4392 ;; Defined at:
  4393 ;;		line 45 in file "SPIMaster.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  tempCH          1    0[BANK0 ] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      unsigned char 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;Total ram usage:        1 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    6
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_MReceiveStrSPI
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text17
  4422  002F70                     __ptext17:
  4423                           	opt stack 0
  4424  002F70                     _MReceiveSPI:
  4425                           	opt stack 23
  4426                           
  4427                           ;SPIMaster.c: 47: unsigned char tempCH;
  4428                           ;SPIMaster.c: 48: tempCH = SSPBUF;
  4429                           
  4430                           ;incstack = 0
  4431  002F70  CFC9 F080          	movff	4041,MReceiveSPI@tempCH	;volatile
  4432                           
  4433                           ;SPIMaster.c: 49: PIR1bits.SSPIF = 0;
  4434  002F74  969E               	bcf	3998,3,c	;volatile
  4435                           
  4436                           ;SPIMaster.c: 50: SSPBUF = 0x00;
  4437  002F76  0E00               	movlw	0
  4438  002F78  6EC9               	movwf	4041,c	;volatile
  4439                           
  4440                           ;SPIMaster.c: 51: while (!PIR1bits.SSPIF);
  4441  002F7A  D000               	goto	l360
  4442  002F7C                     l360:
  4443  002F7C  A69E               	btfss	3998,3,c	;volatile
  4444  002F7E  D7FE               	goto	l360
  4445                           
  4446                           ;SPIMaster.c: 52: return SSPBUF;
  4447  002F80  50C9               	movf	4041,w,c	;volatile
  4448  002F82  D000               	goto	l363
  4449  002F84                     l363:
  4450  002F84  0012               	return		;funcret
  4451  002F86                     __end_of_MReceiveSPI:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           prodh	equ	0xFF4
  4458                           prodl	equ	0xFF3
  4459                           intcon	equ	0xFF2
  4460                           indf0	equ	0xFEF
  4461                           postinc0	equ	0xFEE
  4462                           fsr0h	equ	0xFEA
  4463                           fsr0l	equ	0xFE9
  4464                           wreg	equ	0xFE8
  4465                           indf2	equ	0xFDF
  4466                           fsr2h	equ	0xFDA
  4467                           fsr2l	equ	0xFD9
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _Delay10TCYx *****************
  4471 ;; Defined at:
  4472 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  unit            1    wreg     unsigned char 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  unit            1    0[BANK0 ] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;		None               void
  4479 ;; Registers used:
  4480 ;;		wreg
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;Total ram usage:        1 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    6
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_main
  4497 ;;		_MSendSPI
  4498 ;;		_MReceiveStrSPI
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text18
  4503  002F86                     __ptext18:
  4504                           	opt stack 0
  4505  002F86                     _Delay10TCYx:
  4506                           	opt stack 23
  4507                           
  4508                           ;incstack = 0
  4509                           ;Delay10TCYx@unit stored from wreg
  4510  002F86  0100               	movlb	0	; () banked
  4511  002F88  6F80               	movwf	Delay10TCYx@unit& (0+255),b
  4512  002F8A                     
  4513                           ; BSR set to: 0
  4514  002F8A  0E03               	movlw	3
  4515  002F8C                     u5727:
  4516  002F8C  2EE8               	decfsz	wreg,f,c
  4517  002F8E  D7FE               	goto	u5727
  4518  002F90  F000               	nop	
  4519  002F92  0100               	movlb	0	; () banked
  4520  002F94  2F80               	decfsz	Delay10TCYx@unit& (0+255),f,b
  4521  002F96  D7F9               	goto	l3895
  4522  002F98  D000               	goto	l712
  4523  002F9A                     l712:
  4524                           
  4525                           ; BSR set to: 0
  4526  002F9A  0012               	return		;funcret
  4527  002F9C                     __end_of_Delay10TCYx:
  4528                           	opt stack 0
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           indf0	equ	0xFEF
  4537                           postinc0	equ	0xFEE
  4538                           fsr0h	equ	0xFEA
  4539                           fsr0l	equ	0xFE9
  4540                           wreg	equ	0xFE8
  4541                           indf2	equ	0xFDF
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _ISR *****************
  4547 ;; Defined at:
  4548 ;;		line 151 in file "SPItest-MASTER.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;		None               void
  4555 ;; Registers used:
  4556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;Total ram usage:       14 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    5
  4569 ;; This function calls:
  4570 ;;		_RCInt
  4571 ;; This function is called by:
  4572 ;;		Interrupt level 2
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	intcode
  4577  000008                     __pintcode:
  4578                           	opt stack 0
  4579  000008                     _ISR:
  4580                           	opt stack 21
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;incstack = 0
  4584  000008  CFFA F031          	movff	pclath,??_ISR
  4585  00000C  CFFB F032          	movff	pclatu,??_ISR+1
  4586  000010  CFE9 F033          	movff	fsr0l,??_ISR+2
  4587  000014  EDA4  F015         	call	int_func,f	;refresh shadow registers
  4588                           pclatu	equ	0xFFB
  4589                           pclath	equ	0xFFA
  4590                           tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           intcon	equ	0xFF2
  4597                           indf0	equ	0xFEF
  4598                           postinc0	equ	0xFEE
  4599                           fsr0h	equ	0xFEA
  4600                           fsr0l	equ	0xFE9
  4601                           wreg	equ	0xFE8
  4602                           indf2	equ	0xFDF
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607                           	psect	intcode_body
  4608  002B48                     __pintcode_body:
  4609                           	opt stack 21
  4610  002B48                     int_func:
  4611                           	opt stack 21
  4612  002B48  0006               	pop		; remove dummy address from shadow register refresh
  4613  002B4A  CFEA F034          	movff	fsr0h,??_ISR+3
  4614  002B4E  CFE1 F035          	movff	fsr1l,??_ISR+4
  4615  002B52  CFE2 F036          	movff	fsr1h,??_ISR+5
  4616  002B56  CFD9 F037          	movff	fsr2l,??_ISR+6
  4617  002B5A  CFDA F038          	movff	fsr2h,??_ISR+7
  4618  002B5E  CFF3 F039          	movff	prodl,??_ISR+8
  4619  002B62  CFF4 F03A          	movff	prodh,??_ISR+9
  4620  002B66  CFF6 F03B          	movff	tblptrl,??_ISR+10
  4621  002B6A  CFF7 F03C          	movff	tblptrh,??_ISR+11
  4622  002B6E  CFF8 F03D          	movff	tblptru,??_ISR+12
  4623  002B72  CFF5 F03E          	movff	tablat,??_ISR+13
  4624                           
  4625                           ;SPItest-MASTER.c: 153: if (PIR1bits.RCIF == 1)
  4626  002B76  AA9E               	btfss	3998,5,c	;volatile
  4627  002B78  D003               	goto	i2l313
  4628                           
  4629                           ;SPItest-MASTER.c: 154: {
  4630                           ;SPItest-MASTER.c: 155: RCInt();
  4631  002B7A  EC2F  F011         	call	_RCInt	;wreg free
  4632  002B7E  D000               	goto	i2l313
  4633  002B80                     i2l313:
  4634  002B80  C03E  FFF5         	movff	??_ISR+13,tablat
  4635  002B84  C03D  FFF8         	movff	??_ISR+12,tblptru
  4636  002B88  C03C  FFF7         	movff	??_ISR+11,tblptrh
  4637  002B8C  C03B  FFF6         	movff	??_ISR+10,tblptrl
  4638  002B90  C03A  FFF4         	movff	??_ISR+9,prodh
  4639  002B94  C039  FFF3         	movff	??_ISR+8,prodl
  4640  002B98  C038  FFDA         	movff	??_ISR+7,fsr2h
  4641  002B9C  C037  FFD9         	movff	??_ISR+6,fsr2l
  4642  002BA0  C036  FFE2         	movff	??_ISR+5,fsr1h
  4643  002BA4  C035  FFE1         	movff	??_ISR+4,fsr1l
  4644  002BA8  C034  FFEA         	movff	??_ISR+3,fsr0h
  4645  002BAC  C033  FFE9         	movff	??_ISR+2,fsr0l
  4646  002BB0  C032  FFFB         	movff	??_ISR+1,pclatu
  4647  002BB4  C031  FFFA         	movff	??_ISR,pclath
  4648  002BB8  0011               	retfie		f
  4649  002BBA                     __end_of_ISR:
  4650                           	opt stack 0
  4651                           pclatu	equ	0xFFB
  4652                           pclath	equ	0xFFA
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           indf0	equ	0xFEF
  4661                           postinc0	equ	0xFEE
  4662                           fsr0h	equ	0xFEA
  4663                           fsr0l	equ	0xFE9
  4664                           wreg	equ	0xFE8
  4665                           fsr1h	equ	0xFE2
  4666                           fsr1l	equ	0xFE1
  4667                           indf2	equ	0xFDF
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function _RCInt *****************
  4673 ;; Defined at:
  4674 ;;		line 19 in file "KeyValue.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  counter         1   47[COMRAM] unsigned char 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;		None               void
  4681 ;; Registers used:
  4682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;Total ram usage:        2 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    4
  4695 ;; This function calls:
  4696 ;;		_keyValue
  4697 ;;		i2_SerTx
  4698 ;; This function is called by:
  4699 ;;		_ISR
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text20
  4704  00225E                     __ptext20:
  4705                           	opt stack 0
  4706  00225E                     _RCInt:
  4707                           	opt stack 21
  4708                           
  4709                           ;KeyValue.c: 21: unsigned char counter = 0;
  4710                           
  4711                           ;incstack = 0
  4712  00225E  0E00               	movlw	0
  4713  002260  6E30               	movwf	RCInt@counter,c
  4714                           
  4715                           ;KeyValue.c: 23: {
  4716                           ;KeyValue.c: 24: while (PIR1bits.RCIF == 0);
  4717                           
  4718                           ;KeyValue.c: 22: do
  4719  002262  D000               	goto	i2l97
  4720  002264                     i2l97:
  4721  002264  AA9E               	btfss	3998,5,c	;volatile
  4722  002266  D7FE               	goto	i2l97
  4723                           
  4724                           ;KeyValue.c: 25: received[counter] = RCREG;
  4725  002268  5030               	movf	RCInt@counter,w,c
  4726  00226A  0D01               	mullw	1
  4727  00226C  0EBC               	movlw	low _received
  4728  00226E  24F3               	addwf	prodl,w,c
  4729  002270  6ED9               	movwf	fsr2l,c
  4730  002272  0E00               	movlw	high _received
  4731  002274  20F4               	addwfc	prodh,w,c
  4732  002276  6EDA               	movwf	fsr2h,c
  4733  002278  CFAE FFDF          	movff	4014,indf2	;volatile
  4734                           
  4735                           ;KeyValue.c: 26: SerTx(RCREG);
  4736  00227C  50AE               	movf	4014,w,c	;volatile
  4737  00227E  ECD6  F017         	call	i2_SerTx
  4738                           
  4739                           ;KeyValue.c: 27: if ((received[counter] == 0x08) || received[counter] == 0x7F)
  4740  002282  5030               	movf	RCInt@counter,w,c
  4741  002284  0D01               	mullw	1
  4742  002286  0EBC               	movlw	low _received
  4743  002288  24F3               	addwf	prodl,w,c
  4744  00228A  6ED9               	movwf	fsr2l,c
  4745  00228C  0E00               	movlw	high _received
  4746  00228E  20F4               	addwfc	prodh,w,c
  4747  002290  6EDA               	movwf	fsr2h,c
  4748  002292  0E08               	movlw	8
  4749  002294  18DE               	xorwf	postinc2,w,c
  4750  002296  B4D8               	btfsc	status,2,c
  4751  002298  D00C               	goto	i2l3279
  4752  00229A  5030               	movf	RCInt@counter,w,c
  4753  00229C  0D01               	mullw	1
  4754  00229E  0EBC               	movlw	low _received
  4755  0022A0  24F3               	addwf	prodl,w,c
  4756  0022A2  6ED9               	movwf	fsr2l,c
  4757  0022A4  0E00               	movlw	high _received
  4758  0022A6  20F4               	addwfc	prodh,w,c
  4759  0022A8  6EDA               	movwf	fsr2h,c
  4760  0022AA  0E7F               	movlw	127
  4761  0022AC  18DE               	xorwf	postinc2,w,c
  4762  0022AE  A4D8               	btfss	status,2,c
  4763  0022B0  D010               	goto	i2l3285
  4764  0022B2                     i2l3279:
  4765                           
  4766                           ;KeyValue.c: 28: {
  4767                           ;KeyValue.c: 29: if (counter != 0)
  4768  0022B2  5030               	movf	RCInt@counter,w,c
  4769  0022B4  B4D8               	btfsc	status,2,c
  4770  0022B6  D002               	goto	i2l3283
  4771                           
  4772                           ;KeyValue.c: 30: counter--;
  4773  0022B8  0630               	decf	RCInt@counter,f,c
  4774  0022BA  D000               	goto	i2l3283
  4775  0022BC                     i2l3283:
  4776                           
  4777                           ;KeyValue.c: 31: received[counter] = '\0';
  4778  0022BC  5030               	movf	RCInt@counter,w,c
  4779  0022BE  0D01               	mullw	1
  4780  0022C0  0EBC               	movlw	low _received
  4781  0022C2  24F3               	addwf	prodl,w,c
  4782  0022C4  6ED9               	movwf	fsr2l,c
  4783  0022C6  0E00               	movlw	high _received
  4784  0022C8  20F4               	addwfc	prodh,w,c
  4785  0022CA  6EDA               	movwf	fsr2h,c
  4786  0022CC  0E00               	movlw	0
  4787  0022CE  6EDF               	movwf	indf2,c
  4788                           
  4789                           ;KeyValue.c: 32: }
  4790  0022D0  D01A               	goto	i2l3291
  4791  0022D2                     i2l3285:
  4792                           
  4793                           ;KeyValue.c: 33: else if ((received[counter] != 0x08) && (received[counter] != 0x0D))
  4794  0022D2  5030               	movf	RCInt@counter,w,c
  4795  0022D4  0D01               	mullw	1
  4796  0022D6  0EBC               	movlw	low _received
  4797  0022D8  24F3               	addwf	prodl,w,c
  4798  0022DA  6ED9               	movwf	fsr2l,c
  4799  0022DC  0E00               	movlw	high _received
  4800  0022DE  20F4               	addwfc	prodh,w,c
  4801  0022E0  6EDA               	movwf	fsr2h,c
  4802  0022E2  0E08               	movlw	8
  4803  0022E4  18DE               	xorwf	postinc2,w,c
  4804  0022E6  B4D8               	btfsc	status,2,c
  4805  0022E8  D00E               	goto	i2l3291
  4806  0022EA  5030               	movf	RCInt@counter,w,c
  4807  0022EC  0D01               	mullw	1
  4808  0022EE  0EBC               	movlw	low _received
  4809  0022F0  24F3               	addwf	prodl,w,c
  4810  0022F2  6ED9               	movwf	fsr2l,c
  4811  0022F4  0E00               	movlw	high _received
  4812  0022F6  20F4               	addwfc	prodh,w,c
  4813  0022F8  6EDA               	movwf	fsr2h,c
  4814  0022FA  0E0D               	movlw	13
  4815  0022FC  18DE               	xorwf	postinc2,w,c
  4816  0022FE  B4D8               	btfsc	status,2,c
  4817  002300  D002               	goto	i2l3291
  4818                           
  4819                           ;KeyValue.c: 34: counter++;
  4820  002302  2A30               	incf	RCInt@counter,f,c
  4821  002304  D000               	goto	i2l3291
  4822  002306                     i2l3291:
  4823                           
  4824                           ;KeyValue.c: 35: }
  4825                           ;KeyValue.c: 36: while (RCREG != 0x0D);
  4826  002306  0E0D               	movlw	13
  4827  002308  18AE               	xorwf	4014,w,c	;volatile
  4828  00230A  A4D8               	btfss	status,2,c
  4829  00230C  D7AB               	goto	i2l97
  4830                           
  4831                           ;KeyValue.c: 38: SerTx(0x0A);
  4832  00230E  0E0A               	movlw	10
  4833  002310  ECD6  F017         	call	i2_SerTx
  4834                           
  4835                           ;KeyValue.c: 39: SerTx(0x0D);
  4836  002314  0E0D               	movlw	13
  4837  002316  ECD6  F017         	call	i2_SerTx
  4838                           
  4839                           ;KeyValue.c: 40: keyValue(received, 30);
  4840  00231A  0EBC               	movlw	low _received
  4841  00231C  6E24               	movwf	keyValue@str,c
  4842  00231E  0E00               	movlw	high _received
  4843  002320  6E25               	movwf	keyValue@str+1,c
  4844  002322  0E00               	movlw	0
  4845  002324  6E27               	movwf	keyValue@length+1,c
  4846  002326  0E1E               	movlw	30
  4847  002328  6E26               	movwf	keyValue@length,c
  4848  00232A  EC24  F00B         	call	_keyValue	;wreg free
  4849                           
  4850                           ;KeyValue.c: 41: SerTx(0x0A);
  4851  00232E  0E0A               	movlw	10
  4852  002330  ECD6  F017         	call	i2_SerTx
  4853                           
  4854                           ;KeyValue.c: 42: SerTx(0x0D);
  4855  002334  0E0D               	movlw	13
  4856  002336  ECD6  F017         	call	i2_SerTx
  4857                           
  4858                           ;KeyValue.c: 44: if (StrippedKey == 0x01)
  4859  00233A  0451               	decf	_StrippedKey,w,c
  4860  00233C  A4D8               	btfss	status,2,c
  4861  00233E  D007               	goto	i2l3305
  4862                           
  4863                           ;KeyValue.c: 45: {
  4864                           ;KeyValue.c: 46: SetAngle = StrippedValue;
  4865  002340  C04B  F048         	movff	_StrippedValue,_SetAngle
  4866  002344  C04C  F049         	movff	_StrippedValue+1,_SetAngle+1
  4867  002348  C04D  F04A         	movff	_StrippedValue+2,_SetAngle+2
  4868                           
  4869                           ;KeyValue.c: 47: }
  4870  00234C  D021               	goto	i2l108
  4871  00234E                     i2l3305:
  4872                           
  4873                           ;KeyValue.c: 49: else if (StrippedKey == 0x05)
  4874  00234E  0E05               	movlw	5
  4875  002350  1851               	xorwf	_StrippedKey,w,c
  4876  002352  A4D8               	btfss	status,2,c
  4877  002354  D007               	goto	i2l3309
  4878                           
  4879                           ;KeyValue.c: 50: {
  4880                           ;KeyValue.c: 51: Kp = StrippedValue;
  4881  002356  C04B  F045         	movff	_StrippedValue,_Kp
  4882  00235A  C04C  F046         	movff	_StrippedValue+1,_Kp+1
  4883  00235E  C04D  F047         	movff	_StrippedValue+2,_Kp+2
  4884                           
  4885                           ;KeyValue.c: 52: }
  4886  002362  D016               	goto	i2l108
  4887  002364                     i2l3309:
  4888                           
  4889                           ;KeyValue.c: 54: else if (StrippedKey == 0x07)
  4890  002364  0E07               	movlw	7
  4891  002366  1851               	xorwf	_StrippedKey,w,c
  4892  002368  A4D8               	btfss	status,2,c
  4893  00236A  D007               	goto	i2l3313
  4894                           
  4895                           ;KeyValue.c: 55: {
  4896                           ;KeyValue.c: 56: Ki = StrippedValue;
  4897  00236C  C04B  F042         	movff	_StrippedValue,_Ki
  4898  002370  C04C  F043         	movff	_StrippedValue+1,_Ki+1
  4899  002374  C04D  F044         	movff	_StrippedValue+2,_Ki+2
  4900                           
  4901                           ;KeyValue.c: 57: }
  4902  002378  D00B               	goto	i2l108
  4903  00237A                     i2l3313:
  4904                           
  4905                           ;KeyValue.c: 59: else if (StrippedKey == 0x09)
  4906  00237A  0E09               	movlw	9
  4907  00237C  1851               	xorwf	_StrippedKey,w,c
  4908  00237E  A4D8               	btfss	status,2,c
  4909  002380  D007               	goto	i2l108
  4910                           
  4911                           ;KeyValue.c: 60: {
  4912                           ;KeyValue.c: 61: Kd = StrippedValue;
  4913  002382  C04B  F03F         	movff	_StrippedValue,_Kd
  4914  002386  C04C  F040         	movff	_StrippedValue+1,_Kd+1
  4915  00238A  C04D  F041         	movff	_StrippedValue+2,_Kd+2
  4916  00238E  D000               	goto	i2l108
  4917  002390                     i2l108:
  4918                           
  4919                           ;KeyValue.c: 62: }
  4920                           ;KeyValue.c: 64: PIR1bits.RCIF = 0;
  4921  002390  9A9E               	bcf	3998,5,c	;volatile
  4922  002392  0012               	return		;funcret
  4923  002394                     __end_of_RCInt:
  4924                           	opt stack 0
  4925                           pclatu	equ	0xFFB
  4926                           pclath	equ	0xFFA
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon	equ	0xFF2
  4934                           indf0	equ	0xFEF
  4935                           postinc0	equ	0xFEE
  4936                           fsr0h	equ	0xFEA
  4937                           fsr0l	equ	0xFE9
  4938                           wreg	equ	0xFE8
  4939                           fsr1h	equ	0xFE2
  4940                           fsr1l	equ	0xFE1
  4941                           indf2	equ	0xFDF
  4942                           postinc2	equ	0xFDE
  4943                           fsr2h	equ	0xFDA
  4944                           fsr2l	equ	0xFD9
  4945                           status	equ	0xFD8
  4946                           
  4947 ;; *************** function _keyValue *****************
  4948 ;; Defined at:
  4949 ;;		line 67 in file "KeyValue.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  str             2   35[COMRAM] PTR unsigned char 
  4952 ;;		 -> received(30), 
  4953 ;;  length          2   37[COMRAM] unsigned short 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  str_end         2   41[COMRAM] PTR unsigned char 
  4956 ;;		 -> value(10), 
  4957 ;;  x               1   45[COMRAM] unsigned char 
  4958 ;;  y               1   44[COMRAM] unsigned char 
  4959 ;;  flag            1   43[COMRAM] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;		None               void
  4962 ;; Registers used:
  4963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:       11 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    3
  4976 ;; This function calls:
  4977 ;;		_isspace
  4978 ;;		_strcmp
  4979 ;;		_strtod
  4980 ;;		i2_SerTx
  4981 ;;		i2_SerTxStr
  4982 ;; This function is called by:
  4983 ;;		_RCInt
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           	psect	text21
  4988  001648                     __ptext21:
  4989                           	opt stack 0
  4990  001648                     _keyValue:
  4991                           	opt stack 21
  4992                           
  4993                           ;KeyValue.c: 69: unsigned char x = 0;
  4994                           
  4995                           ;incstack = 0
  4996  001648  0E00               	movlw	0
  4997  00164A  6E2E               	movwf	keyValue@x,c
  4998                           
  4999                           ;KeyValue.c: 70: unsigned char y = 0;
  5000  00164C  0E00               	movlw	0
  5001  00164E  6E2D               	movwf	keyValue@y,c
  5002  001650  D00F               	goto	i2l3049
  5003  001652                     i2l3043:
  5004                           
  5005                           ;KeyValue.c: 75: {
  5006                           ;KeyValue.c: 76: x++;
  5007  001652  2A2E               	incf	keyValue@x,f,c
  5008                           
  5009                           ;KeyValue.c: 77: if (str[x] == '=')
  5010  001654  502E               	movf	keyValue@x,w,c
  5011  001656  0D01               	mullw	1
  5012  001658  50F3               	movf	prodl,w,c
  5013  00165A  2424               	addwf	keyValue@str,w,c
  5014  00165C  6ED9               	movwf	fsr2l,c
  5015  00165E  50F4               	movf	prodh,w,c
  5016  001660  2025               	addwfc	keyValue@str+1,w,c
  5017  001662  6EDA               	movwf	fsr2h,c
  5018  001664  0E3D               	movlw	61
  5019  001666  18DE               	xorwf	postinc2,w,c
  5020  001668  A4D8               	btfss	status,2,c
  5021  00166A  D002               	goto	i2l3049
  5022                           
  5023                           ;KeyValue.c: 78: {
  5024                           ;KeyValue.c: 79: flag = 1;
  5025  00166C  0E01               	movlw	1
  5026  00166E  D001               	goto	L2
  5027  001670                     i2l3049:
  5028                           
  5029                           ;KeyValue.c: 81: else
  5030                           ;KeyValue.c: 82: flag = 0;
  5031  001670  0E00               	movlw	0
  5032  001672                     L2:
  5033  001672  6E2C               	movwf	keyValue@flag,c
  5034  001674  D000               	goto	i2l3051
  5035  001676                     i2l3051:
  5036  001676  502E               	movf	keyValue@x,w,c
  5037  001678  0D01               	mullw	1
  5038  00167A  50F3               	movf	prodl,w,c
  5039  00167C  2424               	addwf	keyValue@str,w,c
  5040  00167E  6ED9               	movwf	fsr2l,c
  5041  001680  50F4               	movf	prodh,w,c
  5042  001682  2025               	addwfc	keyValue@str+1,w,c
  5043  001684  6EDA               	movwf	fsr2h,c
  5044  001686  0E3D               	movlw	61
  5045  001688  18DE               	xorwf	postinc2,w,c
  5046  00168A  B4D8               	btfsc	status,2,c
  5047  00168C  D00B               	goto	i2l3055
  5048  00168E  502E               	movf	keyValue@x,w,c
  5049  001690  6E28               	movwf	??_keyValue& (0+255),c
  5050  001692  6A29               	clrf	(??_keyValue+1)& (0+255),c
  5051  001694  5026               	movf	keyValue@length,w,c
  5052  001696  5C28               	subwf	??_keyValue,w,c
  5053  001698  5027               	movf	keyValue@length+1,w,c
  5054  00169A  5829               	subwfb	??_keyValue+1,w,c
  5055  00169C  B0D8               	btfsc	status,0,c
  5056  00169E  D002               	goto	i2l3055
  5057  0016A0  D7D8               	goto	i2l3043
  5058  0016A2  D000               	goto	i2l3055
  5059  0016A4                     i2l3055:
  5060                           
  5061                           ;KeyValue.c: 83: }
  5062                           ;KeyValue.c: 84: if ((x < length) && flag)
  5063  0016A4  502E               	movf	keyValue@x,w,c
  5064  0016A6  6E28               	movwf	??_keyValue& (0+255),c
  5065  0016A8  6A29               	clrf	(??_keyValue+1)& (0+255),c
  5066  0016AA  5026               	movf	keyValue@length,w,c
  5067  0016AC  5C28               	subwf	??_keyValue,w,c
  5068  0016AE  5027               	movf	keyValue@length+1,w,c
  5069  0016B0  5829               	subwfb	??_keyValue+1,w,c
  5070  0016B2  B0D8               	btfsc	status,0,c
  5071  0016B4  D100               	goto	i2l3121
  5072  0016B6  502C               	movf	keyValue@flag,w,c
  5073  0016B8  B4D8               	btfsc	status,2,c
  5074  0016BA  D0FD               	goto	i2l3121
  5075                           
  5076                           ;KeyValue.c: 85: {
  5077                           ;KeyValue.c: 86: for (y = 0; y < x && y < 5; y++)
  5078  0016BC  0E00               	movlw	0
  5079  0016BE  6E2D               	movwf	keyValue@y,c
  5080  0016C0  D022               	goto	i2l3067
  5081  0016C2                     i2l3061:
  5082                           
  5083                           ;KeyValue.c: 87: {
  5084                           ;KeyValue.c: 88: if (isspace(str[y]) == 0)
  5085  0016C2  502D               	movf	keyValue@y,w,c
  5086  0016C4  0D01               	mullw	1
  5087  0016C6  50F3               	movf	prodl,w,c
  5088  0016C8  2424               	addwf	keyValue@str,w,c
  5089  0016CA  6ED9               	movwf	fsr2l,c
  5090  0016CC  50F4               	movf	prodh,w,c
  5091  0016CE  2025               	addwfc	keyValue@str+1,w,c
  5092  0016D0  6EDA               	movwf	fsr2h,c
  5093  0016D2  50DF               	movf	indf2,w,c
  5094  0016D4  EC6B  F017         	call	_isspace
  5095  0016D8  B0D8               	btfsc	status,0,c
  5096  0016DA  D013               	goto	i2l3065
  5097                           
  5098                           ;KeyValue.c: 89: key[y] = str[y];
  5099  0016DC  502D               	movf	keyValue@y,w,c
  5100  0016DE  0D01               	mullw	1
  5101  0016E0  50F3               	movf	prodl,w,c
  5102  0016E2  2424               	addwf	keyValue@str,w,c
  5103  0016E4  6ED9               	movwf	fsr2l,c
  5104  0016E6  50F4               	movf	prodh,w,c
  5105  0016E8  2025               	addwfc	keyValue@str+1,w,c
  5106  0016EA  6EDA               	movwf	fsr2h,c
  5107  0016EC  502D               	movf	keyValue@y,w,c
  5108  0016EE  0D01               	mullw	1
  5109  0016F0  0E5C               	movlw	low _key
  5110  0016F2  24F3               	addwf	prodl,w,c
  5111  0016F4  6EE1               	movwf	fsr1l,c
  5112  0016F6  0E00               	movlw	high _key
  5113  0016F8  20F4               	addwfc	prodh,w,c
  5114  0016FA  6EE2               	movwf	fsr1h,c
  5115  0016FC  CFDF FFE7          	movff	indf2,indf1
  5116  001700  D000               	goto	i2l3065
  5117  001702                     i2l3065:
  5118  001702  2A2D               	incf	keyValue@y,f,c
  5119  001704  D000               	goto	i2l3067
  5120  001706                     i2l3067:
  5121  001706  502E               	movf	keyValue@x,w,c
  5122  001708  5C2D               	subwf	keyValue@y,w,c
  5123  00170A  B0D8               	btfsc	status,0,c
  5124  00170C  D004               	goto	i2l3071
  5125  00170E  0E04               	movlw	4
  5126  001710  642D               	cpfsgt	keyValue@y,c
  5127  001712  D7D7               	goto	i2l3061
  5128  001714  D000               	goto	i2l3071
  5129  001716                     i2l3071:
  5130                           
  5131                           ;KeyValue.c: 90: }
  5132                           ;KeyValue.c: 92: SerTxStr("Key: ");
  5133  001716  0E30               	movlw	low STR_2
  5134  001718  6E02               	movwf	i2SerTxStr@string,c
  5135  00171A  0E10               	movlw	high STR_2
  5136  00171C  6E03               	movwf	i2SerTxStr@string+1,c
  5137  00171E  EC99  F016         	call	i2_SerTxStr	;wreg free
  5138                           
  5139                           ;KeyValue.c: 93: SerTxStr(key);
  5140  001722  0E5C               	movlw	low _key
  5141  001724  6E02               	movwf	i2SerTxStr@string,c
  5142  001726  0E00               	movlw	high _key
  5143  001728  6E03               	movwf	i2SerTxStr@string+1,c
  5144  00172A  EC99  F016         	call	i2_SerTxStr	;wreg free
  5145                           
  5146                           ;KeyValue.c: 95: for (y = 0; str[x + 1] != (0); y++)
  5147  00172E  0E00               	movlw	0
  5148  001730  6E2D               	movwf	keyValue@y,c
  5149  001732  D015               	goto	i2l3081
  5150  001734                     i2l3075:
  5151                           
  5152                           ;KeyValue.c: 96: {
  5153                           ;KeyValue.c: 97: x++;
  5154  001734  2A2E               	incf	keyValue@x,f,c
  5155                           
  5156                           ;KeyValue.c: 99: value[y] = str[x];
  5157  001736  502E               	movf	keyValue@x,w,c
  5158  001738  0D01               	mullw	1
  5159  00173A  50F3               	movf	prodl,w,c
  5160  00173C  2424               	addwf	keyValue@str,w,c
  5161  00173E  6ED9               	movwf	fsr2l,c
  5162  001740  50F4               	movf	prodh,w,c
  5163  001742  2025               	addwfc	keyValue@str+1,w,c
  5164  001744  6EDA               	movwf	fsr2h,c
  5165  001746  502D               	movf	keyValue@y,w,c
  5166  001748  0D01               	mullw	1
  5167  00174A  0E52               	movlw	low _value
  5168  00174C  24F3               	addwf	prodl,w,c
  5169  00174E  6EE1               	movwf	fsr1l,c
  5170  001750  0E00               	movlw	high _value
  5171  001752  20F4               	addwfc	prodh,w,c
  5172  001754  6EE2               	movwf	fsr1h,c
  5173  001756  CFDF FFE7          	movff	indf2,indf1
  5174  00175A  2A2D               	incf	keyValue@y,f,c
  5175  00175C  D000               	goto	i2l3081
  5176  00175E                     i2l3081:
  5177  00175E  502E               	movf	keyValue@x,w,c
  5178  001760  6E28               	movwf	??_keyValue& (0+255),c
  5179  001762  6A29               	clrf	(??_keyValue+1)& (0+255),c
  5180  001764  0E01               	movlw	1
  5181  001766  2628               	addwf	??_keyValue,f,c
  5182  001768  0E00               	movlw	0
  5183  00176A  2229               	addwfc	??_keyValue+1,f,c
  5184  00176C  5028               	movf	??_keyValue,w,c
  5185  00176E  2424               	addwf	keyValue@str,w,c
  5186  001770  6ED9               	movwf	fsr2l,c
  5187  001772  5029               	movf	??_keyValue+1,w,c
  5188  001774  2025               	addwfc	keyValue@str+1,w,c
  5189  001776  6EDA               	movwf	fsr2h,c
  5190  001778  50DF               	movf	indf2,w,c
  5191  00177A  A4D8               	btfss	status,2,c
  5192  00177C  D7DB               	goto	i2l3075
  5193                           
  5194                           ;KeyValue.c: 100: }
  5195                           ;KeyValue.c: 101: SerTxStr("   Value: ");
  5196  00177E  0E25               	movlw	low STR_3
  5197  001780  6E02               	movwf	i2SerTxStr@string,c
  5198  001782  0E10               	movlw	high STR_3
  5199  001784  6E03               	movwf	i2SerTxStr@string+1,c
  5200  001786  EC99  F016         	call	i2_SerTxStr	;wreg free
  5201                           
  5202                           ;KeyValue.c: 102: SerTxStr(value);
  5203  00178A  0E52               	movlw	low _value
  5204  00178C  6E02               	movwf	i2SerTxStr@string,c
  5205  00178E  0E00               	movlw	high _value
  5206  001790  6E03               	movwf	i2SerTxStr@string+1,c
  5207  001792  EC99  F016         	call	i2_SerTxStr	;wreg free
  5208                           
  5209                           ;KeyValue.c: 104: if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  5210  001796  0E5C               	movlw	low _key
  5211  001798  6E01               	movwf	strcmp@s1,c
  5212  00179A  0E00               	movlw	high _key
  5213  00179C  6E02               	movwf	strcmp@s1+1,c
  5214  00179E  0E3E               	movlw	low STR_4
  5215  0017A0  6E03               	movwf	strcmp@s2,c
  5216  0017A2  0E10               	movlw	high STR_4
  5217  0017A4  6E04               	movwf	strcmp@s2+1,c
  5218  0017A6  ECC5  F016         	call	_strcmp	;wreg free
  5219  0017AA  5001               	movf	?_strcmp,w,c
  5220  0017AC  1002               	iorwf	?_strcmp+1,w,c
  5221  0017AE  B4D8               	btfsc	status,2,c
  5222  0017B0  D00E               	goto	i2l3089
  5223  0017B2  0E5C               	movlw	low _key
  5224  0017B4  6E01               	movwf	strcmp@s1,c
  5225  0017B6  0E00               	movlw	high _key
  5226  0017B8  6E02               	movwf	strcmp@s1+1,c
  5227  0017BA  0E46               	movlw	low STR_5
  5228  0017BC  6E03               	movwf	strcmp@s2,c
  5229  0017BE  0E10               	movlw	high STR_5
  5230  0017C0  6E04               	movwf	strcmp@s2+1,c
  5231  0017C2  ECC5  F016         	call	_strcmp	;wreg free
  5232  0017C6  5001               	movf	?_strcmp,w,c
  5233  0017C8  1002               	iorwf	?_strcmp+1,w,c
  5234  0017CA  A4D8               	btfss	status,2,c
  5235  0017CC  D006               	goto	i2l3093
  5236  0017CE                     i2l3089:
  5237                           
  5238                           ;KeyValue.c: 105: {
  5239                           ;KeyValue.c: 106: StrippedKey = 0x01;
  5240  0017CE  0E01               	movlw	1
  5241  0017D0  6E51               	movwf	_StrippedKey,c
  5242                           
  5243                           ;KeyValue.c: 107: SerTx(';');
  5244  0017D2  0E3B               	movlw	59
  5245  0017D4  ECD6  F017         	call	i2_SerTx
  5246                           
  5247                           ;KeyValue.c: 108: }
  5248  0017D8  D199               	goto	i2l3193
  5249  0017DA                     i2l3093:
  5250                           
  5251                           ;KeyValue.c: 110: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  5252  0017DA  0E5C               	movlw	low _key
  5253  0017DC  6E01               	movwf	strcmp@s1,c
  5254  0017DE  0E00               	movlw	high _key
  5255  0017E0  6E02               	movwf	strcmp@s1+1,c
  5256  0017E2  0E50               	movlw	low STR_6
  5257  0017E4  6E03               	movwf	strcmp@s2,c
  5258  0017E6  0E10               	movlw	high STR_6
  5259  0017E8  6E04               	movwf	strcmp@s2+1,c
  5260  0017EA  ECC5  F016         	call	_strcmp	;wreg free
  5261  0017EE  5001               	movf	?_strcmp,w,c
  5262  0017F0  1002               	iorwf	?_strcmp+1,w,c
  5263  0017F2  B4D8               	btfsc	status,2,c
  5264  0017F4  D00E               	goto	i2l3097
  5265  0017F6  0E5C               	movlw	low _key
  5266  0017F8  6E01               	movwf	strcmp@s1,c
  5267  0017FA  0E00               	movlw	high _key
  5268  0017FC  6E02               	movwf	strcmp@s1+1,c
  5269  0017FE  0E5C               	movlw	low STR_7
  5270  001800  6E03               	movwf	strcmp@s2,c
  5271  001802  0E10               	movlw	high STR_7
  5272  001804  6E04               	movwf	strcmp@s2+1,c
  5273  001806  ECC5  F016         	call	_strcmp	;wreg free
  5274  00180A  5001               	movf	?_strcmp,w,c
  5275  00180C  1002               	iorwf	?_strcmp+1,w,c
  5276  00180E  A4D8               	btfss	status,2,c
  5277  001810  D006               	goto	i2l3101
  5278  001812                     i2l3097:
  5279                           
  5280                           ;KeyValue.c: 111: {
  5281                           ;KeyValue.c: 112: StrippedKey = 0x05;
  5282  001812  0E05               	movlw	5
  5283  001814  6E51               	movwf	_StrippedKey,c
  5284                           
  5285                           ;KeyValue.c: 113: SerTx(';');
  5286  001816  0E3B               	movlw	59
  5287  001818  ECD6  F017         	call	i2_SerTx
  5288                           
  5289                           ;KeyValue.c: 114: }
  5290  00181C  D177               	goto	i2l3193
  5291  00181E                     i2l3101:
  5292                           
  5293                           ;KeyValue.c: 116: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  5294  00181E  0E5C               	movlw	low _key
  5295  001820  6E01               	movwf	strcmp@s1,c
  5296  001822  0E00               	movlw	high _key
  5297  001824  6E02               	movwf	strcmp@s1+1,c
  5298  001826  0E4D               	movlw	low STR_8
  5299  001828  6E03               	movwf	strcmp@s2,c
  5300  00182A  0E10               	movlw	high STR_8
  5301  00182C  6E04               	movwf	strcmp@s2+1,c
  5302  00182E  ECC5  F016         	call	_strcmp	;wreg free
  5303  001832  5001               	movf	?_strcmp,w,c
  5304  001834  1002               	iorwf	?_strcmp+1,w,c
  5305  001836  B4D8               	btfsc	status,2,c
  5306  001838  D00E               	goto	i2l3105
  5307  00183A  0E5C               	movlw	low _key
  5308  00183C  6E01               	movwf	strcmp@s1,c
  5309  00183E  0E00               	movlw	high _key
  5310  001840  6E02               	movwf	strcmp@s1+1,c
  5311  001842  0E59               	movlw	low STR_9
  5312  001844  6E03               	movwf	strcmp@s2,c
  5313  001846  0E10               	movlw	high STR_9
  5314  001848  6E04               	movwf	strcmp@s2+1,c
  5315  00184A  ECC5  F016         	call	_strcmp	;wreg free
  5316  00184E  5001               	movf	?_strcmp,w,c
  5317  001850  1002               	iorwf	?_strcmp+1,w,c
  5318  001852  A4D8               	btfss	status,2,c
  5319  001854  D006               	goto	i2l3109
  5320  001856                     i2l3105:
  5321                           
  5322                           ;KeyValue.c: 117: {
  5323                           ;KeyValue.c: 118: StrippedKey = 0x07;
  5324  001856  0E07               	movlw	7
  5325  001858  6E51               	movwf	_StrippedKey,c
  5326                           
  5327                           ;KeyValue.c: 119: SerTx(';');
  5328  00185A  0E3B               	movlw	59
  5329  00185C  ECD6  F017         	call	i2_SerTx
  5330                           
  5331                           ;KeyValue.c: 120: }
  5332  001860  D155               	goto	i2l3193
  5333  001862                     i2l3109:
  5334                           
  5335                           ;KeyValue.c: 122: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  5336  001862  0E5C               	movlw	low _key
  5337  001864  6E01               	movwf	strcmp@s1,c
  5338  001866  0E00               	movlw	high _key
  5339  001868  6E02               	movwf	strcmp@s1+1,c
  5340  00186A  0E4A               	movlw	low STR_10
  5341  00186C  6E03               	movwf	strcmp@s2,c
  5342  00186E  0E10               	movlw	high STR_10
  5343  001870  6E04               	movwf	strcmp@s2+1,c
  5344  001872  ECC5  F016         	call	_strcmp	;wreg free
  5345  001876  5001               	movf	?_strcmp,w,c
  5346  001878  1002               	iorwf	?_strcmp+1,w,c
  5347  00187A  B4D8               	btfsc	status,2,c
  5348  00187C  D00E               	goto	i2l3113
  5349  00187E  0E5C               	movlw	low _key
  5350  001880  6E01               	movwf	strcmp@s1,c
  5351  001882  0E00               	movlw	high _key
  5352  001884  6E02               	movwf	strcmp@s1+1,c
  5353  001886  0E56               	movlw	low STR_11
  5354  001888  6E03               	movwf	strcmp@s2,c
  5355  00188A  0E10               	movlw	high STR_11
  5356  00188C  6E04               	movwf	strcmp@s2+1,c
  5357  00188E  ECC5  F016         	call	_strcmp	;wreg free
  5358  001892  5001               	movf	?_strcmp,w,c
  5359  001894  1002               	iorwf	?_strcmp+1,w,c
  5360  001896  A4D8               	btfss	status,2,c
  5361  001898  D006               	goto	i2l3117
  5362  00189A                     i2l3113:
  5363                           
  5364                           ;KeyValue.c: 123: {
  5365                           ;KeyValue.c: 124: StrippedKey = 0x09;
  5366  00189A  0E09               	movlw	9
  5367  00189C  6E51               	movwf	_StrippedKey,c
  5368                           
  5369                           ;KeyValue.c: 125: SerTx(';');
  5370  00189E  0E3B               	movlw	59
  5371  0018A0  ECD6  F017         	call	i2_SerTx
  5372                           
  5373                           ;KeyValue.c: 126: }
  5374  0018A4  D133               	goto	i2l3193
  5375  0018A6                     i2l3117:
  5376                           
  5377                           ;KeyValue.c: 128: else
  5378                           ;KeyValue.c: 129: {
  5379                           ;KeyValue.c: 130: SerTxStr("???");
  5380  0018A6  0E36               	movlw	low STR_12
  5381  0018A8  6E02               	movwf	i2SerTxStr@string,c
  5382  0018AA  0E10               	movlw	high STR_12
  5383  0018AC  6E03               	movwf	i2SerTxStr@string+1,c
  5384  0018AE  EC99  F016         	call	i2_SerTxStr	;wreg free
  5385  0018B2  D129               	goto	i2l3191
  5386                           
  5387                           ;KeyValue.c: 132: }
  5388                           ;KeyValue.c: 133: }
  5389                           
  5390                           ;KeyValue.c: 131: StrippedKey = 0;
  5391  0018B4  D12B               	goto	i2l3193
  5392  0018B6                     i2l3121:
  5393                           
  5394                           ;KeyValue.c: 135: else if (flag == 0)
  5395  0018B6  502C               	movf	keyValue@flag,w,c
  5396  0018B8  A4D8               	btfss	status,2,c
  5397  0018BA  D128               	goto	i2l3193
  5398                           
  5399                           ;KeyValue.c: 136: {
  5400                           ;KeyValue.c: 137: y = 0;
  5401  0018BC  0E00               	movlw	0
  5402  0018BE  6E2D               	movwf	keyValue@y,c
  5403                           
  5404                           ;KeyValue.c: 138: while (str[y] != 0x0D)
  5405  0018C0  D014               	goto	i2l3129
  5406  0018C2                     i2l3125:
  5407                           
  5408                           ;KeyValue.c: 139: {
  5409                           ;KeyValue.c: 141: key[y] = str[y];
  5410  0018C2  502D               	movf	keyValue@y,w,c
  5411  0018C4  0D01               	mullw	1
  5412  0018C6  50F3               	movf	prodl,w,c
  5413  0018C8  2424               	addwf	keyValue@str,w,c
  5414  0018CA  6ED9               	movwf	fsr2l,c
  5415  0018CC  50F4               	movf	prodh,w,c
  5416  0018CE  2025               	addwfc	keyValue@str+1,w,c
  5417  0018D0  6EDA               	movwf	fsr2h,c
  5418  0018D2  502D               	movf	keyValue@y,w,c
  5419  0018D4  0D01               	mullw	1
  5420  0018D6  0E5C               	movlw	low _key
  5421  0018D8  24F3               	addwf	prodl,w,c
  5422  0018DA  6EE1               	movwf	fsr1l,c
  5423  0018DC  0E00               	movlw	high _key
  5424  0018DE  20F4               	addwfc	prodh,w,c
  5425  0018E0  6EE2               	movwf	fsr1h,c
  5426  0018E2  CFDF FFE7          	movff	indf2,indf1
  5427                           
  5428                           ;KeyValue.c: 142: y++;
  5429  0018E6  2A2D               	incf	keyValue@y,f,c
  5430  0018E8  D000               	goto	i2l3129
  5431  0018EA                     i2l3129:
  5432  0018EA  502D               	movf	keyValue@y,w,c
  5433  0018EC  0D01               	mullw	1
  5434  0018EE  50F3               	movf	prodl,w,c
  5435  0018F0  2424               	addwf	keyValue@str,w,c
  5436  0018F2  6ED9               	movwf	fsr2l,c
  5437  0018F4  50F4               	movf	prodh,w,c
  5438  0018F6  2025               	addwfc	keyValue@str+1,w,c
  5439  0018F8  6EDA               	movwf	fsr2h,c
  5440  0018FA  0E0D               	movlw	13
  5441  0018FC  18DE               	xorwf	postinc2,w,c
  5442  0018FE  A4D8               	btfss	status,2,c
  5443  001900  D7E0               	goto	i2l3125
  5444                           
  5445                           ;KeyValue.c: 143: }
  5446                           ;KeyValue.c: 145: SerTxStr("Key: ");
  5447  001902  0E30               	movlw	low STR_2
  5448  001904  6E02               	movwf	i2SerTxStr@string,c
  5449  001906  0E10               	movlw	high STR_2
  5450  001908  6E03               	movwf	i2SerTxStr@string+1,c
  5451  00190A  EC99  F016         	call	i2_SerTxStr	;wreg free
  5452                           
  5453                           ;KeyValue.c: 146: SerTxStr(key);
  5454  00190E  0E5C               	movlw	low _key
  5455  001910  6E02               	movwf	i2SerTxStr@string,c
  5456  001912  0E00               	movlw	high _key
  5457  001914  6E03               	movwf	i2SerTxStr@string+1,c
  5458  001916  EC99  F016         	call	i2_SerTxStr	;wreg free
  5459                           
  5460                           ;KeyValue.c: 148: if ((strcmp(key, "AZ") == 0) || (strcmp(key, "az") == 0))
  5461  00191A  0E5C               	movlw	low _key
  5462  00191C  6E01               	movwf	strcmp@s1,c
  5463  00191E  0E00               	movlw	high _key
  5464  001920  6E02               	movwf	strcmp@s1+1,c
  5465  001922  0E53               	movlw	low STR_14
  5466  001924  6E03               	movwf	strcmp@s2,c
  5467  001926  0E10               	movlw	high STR_14
  5468  001928  6E04               	movwf	strcmp@s2+1,c
  5469  00192A  ECC5  F016         	call	_strcmp	;wreg free
  5470  00192E  5001               	movf	?_strcmp,w,c
  5471  001930  1002               	iorwf	?_strcmp+1,w,c
  5472  001932  B4D8               	btfsc	status,2,c
  5473  001934  D00E               	goto	i2l3137
  5474  001936  0E5C               	movlw	low _key
  5475  001938  6E01               	movwf	strcmp@s1,c
  5476  00193A  0E00               	movlw	high _key
  5477  00193C  6E02               	movwf	strcmp@s1+1,c
  5478  00193E  0E5F               	movlw	low STR_15
  5479  001940  6E03               	movwf	strcmp@s2,c
  5480  001942  0E10               	movlw	high STR_15
  5481  001944  6E04               	movwf	strcmp@s2+1,c
  5482  001946  ECC5  F016         	call	_strcmp	;wreg free
  5483  00194A  5001               	movf	?_strcmp,w,c
  5484  00194C  1002               	iorwf	?_strcmp+1,w,c
  5485  00194E  A4D8               	btfss	status,2,c
  5486  001950  D007               	goto	i2l3141
  5487  001952                     i2l3137:
  5488                           
  5489                           ;KeyValue.c: 149: {
  5490                           ;KeyValue.c: 150: AZEL = 1;
  5491  001952  0E01               	movlw	1
  5492  001954  0100               	movlb	0	; () banked
  5493  001956  6FDE               	movwf	_AZEL& (0+255),b
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;KeyValue.c: 151: SerTx(';');
  5497  001958  0E3B               	movlw	59
  5498  00195A  ECD6  F017         	call	i2_SerTx
  5499                           
  5500                           ;KeyValue.c: 152: }
  5501  00195E  D0D6               	goto	i2l3193
  5502  001960                     i2l3141:
  5503                           
  5504                           ;KeyValue.c: 154: else if ((strcmp(key, "EL") == 0) || (strcmp(key, "el") == 0))
  5505  001960  0E5C               	movlw	low _key
  5506  001962  6E01               	movwf	strcmp@s1,c
  5507  001964  0E00               	movlw	high _key
  5508  001966  6E02               	movwf	strcmp@s1+1,c
  5509  001968  0E3B               	movlw	low (STR_20+1)
  5510  00196A  6E03               	movwf	strcmp@s2,c
  5511  00196C  0E10               	movlw	high (STR_20+1)
  5512  00196E  6E04               	movwf	strcmp@s2+1,c
  5513  001970  ECC5  F016         	call	_strcmp	;wreg free
  5514  001974  5001               	movf	?_strcmp,w,c
  5515  001976  1002               	iorwf	?_strcmp+1,w,c
  5516  001978  B4D8               	btfsc	status,2,c
  5517  00197A  D00E               	goto	i2l3145
  5518  00197C  0E5C               	movlw	low _key
  5519  00197E  6E01               	movwf	strcmp@s1,c
  5520  001980  0E00               	movlw	high _key
  5521  001982  6E02               	movwf	strcmp@s1+1,c
  5522  001984  0E43               	movlw	low (STR_21+1)
  5523  001986  6E03               	movwf	strcmp@s2,c
  5524  001988  0E10               	movlw	high (STR_21+1)
  5525  00198A  6E04               	movwf	strcmp@s2+1,c
  5526  00198C  ECC5  F016         	call	_strcmp	;wreg free
  5527  001990  5001               	movf	?_strcmp,w,c
  5528  001992  1002               	iorwf	?_strcmp+1,w,c
  5529  001994  A4D8               	btfss	status,2,c
  5530  001996  D007               	goto	i2l3149
  5531  001998                     i2l3145:
  5532                           
  5533                           ;KeyValue.c: 155: {
  5534                           ;KeyValue.c: 156: AZEL = 2;
  5535  001998  0E02               	movlw	2
  5536  00199A  0100               	movlb	0	; () banked
  5537  00199C  6FDE               	movwf	_AZEL& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;KeyValue.c: 157: SerTx(';');
  5541  00199E  0E3B               	movlw	59
  5542  0019A0  ECD6  F017         	call	i2_SerTx
  5543                           
  5544                           ;KeyValue.c: 158: }
  5545  0019A4  D0B3               	goto	i2l3193
  5546  0019A6                     i2l3149:
  5547                           
  5548                           ;KeyValue.c: 160: else if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  5549  0019A6  0E5C               	movlw	low _key
  5550  0019A8  6E01               	movwf	strcmp@s1,c
  5551  0019AA  0E00               	movlw	high _key
  5552  0019AC  6E02               	movwf	strcmp@s1+1,c
  5553  0019AE  0E3E               	movlw	low STR_4
  5554  0019B0  6E03               	movwf	strcmp@s2,c
  5555  0019B2  0E10               	movlw	high STR_4
  5556  0019B4  6E04               	movwf	strcmp@s2+1,c
  5557  0019B6  ECC5  F016         	call	_strcmp	;wreg free
  5558  0019BA  5001               	movf	?_strcmp,w,c
  5559  0019BC  1002               	iorwf	?_strcmp+1,w,c
  5560  0019BE  B4D8               	btfsc	status,2,c
  5561  0019C0  D00E               	goto	i2l3153
  5562  0019C2  0E5C               	movlw	low _key
  5563  0019C4  6E01               	movwf	strcmp@s1,c
  5564  0019C6  0E00               	movlw	high _key
  5565  0019C8  6E02               	movwf	strcmp@s1+1,c
  5566  0019CA  0E46               	movlw	low STR_5
  5567  0019CC  6E03               	movwf	strcmp@s2,c
  5568  0019CE  0E10               	movlw	high STR_5
  5569  0019D0  6E04               	movwf	strcmp@s2+1,c
  5570  0019D2  ECC5  F016         	call	_strcmp	;wreg free
  5571  0019D6  5001               	movf	?_strcmp,w,c
  5572  0019D8  1002               	iorwf	?_strcmp+1,w,c
  5573  0019DA  A4D8               	btfss	status,2,c
  5574  0019DC  D006               	goto	i2l3157
  5575  0019DE                     i2l3153:
  5576                           
  5577                           ;KeyValue.c: 161: {
  5578                           ;KeyValue.c: 162: StrippedKey = 0x02;
  5579  0019DE  0E02               	movlw	2
  5580  0019E0  6E51               	movwf	_StrippedKey,c
  5581                           
  5582                           ;KeyValue.c: 163: SerTx(';');
  5583  0019E2  0E3B               	movlw	59
  5584  0019E4  ECD6  F017         	call	i2_SerTx
  5585                           
  5586                           ;KeyValue.c: 164: }
  5587  0019E8  D091               	goto	i2l3193
  5588  0019EA                     i2l3157:
  5589                           
  5590                           ;KeyValue.c: 166: else if((strcmp(key, "VEL") == 0) || (strcmp(key, "vel") == 0))
  5591  0019EA  0E5C               	movlw	low _key
  5592  0019EC  6E01               	movwf	strcmp@s1,c
  5593  0019EE  0E00               	movlw	high _key
  5594  0019F0  6E02               	movwf	strcmp@s1+1,c
  5595  0019F2  0E3A               	movlw	low STR_20
  5596  0019F4  6E03               	movwf	strcmp@s2,c
  5597  0019F6  0E10               	movlw	high STR_20
  5598  0019F8  6E04               	movwf	strcmp@s2+1,c
  5599  0019FA  ECC5  F016         	call	_strcmp	;wreg free
  5600  0019FE  5001               	movf	?_strcmp,w,c
  5601  001A00  1002               	iorwf	?_strcmp+1,w,c
  5602  001A02  B4D8               	btfsc	status,2,c
  5603  001A04  D00E               	goto	i2l3161
  5604  001A06  0E5C               	movlw	low _key
  5605  001A08  6E01               	movwf	strcmp@s1,c
  5606  001A0A  0E00               	movlw	high _key
  5607  001A0C  6E02               	movwf	strcmp@s1+1,c
  5608  001A0E  0E42               	movlw	low STR_21
  5609  001A10  6E03               	movwf	strcmp@s2,c
  5610  001A12  0E10               	movlw	high STR_21
  5611  001A14  6E04               	movwf	strcmp@s2+1,c
  5612  001A16  ECC5  F016         	call	_strcmp	;wreg free
  5613  001A1A  5001               	movf	?_strcmp,w,c
  5614  001A1C  1002               	iorwf	?_strcmp+1,w,c
  5615  001A1E  A4D8               	btfss	status,2,c
  5616  001A20  D006               	goto	i2l3165
  5617  001A22                     i2l3161:
  5618                           
  5619                           ;KeyValue.c: 167: {
  5620                           ;KeyValue.c: 168: StrippedKey = 0x03;
  5621  001A22  0E03               	movlw	3
  5622  001A24  6E51               	movwf	_StrippedKey,c
  5623                           
  5624                           ;KeyValue.c: 169: SerTx(';');
  5625  001A26  0E3B               	movlw	59
  5626  001A28  ECD6  F017         	call	i2_SerTx
  5627                           
  5628                           ;KeyValue.c: 170: }
  5629  001A2C  D06F               	goto	i2l3193
  5630  001A2E                     i2l3165:
  5631                           
  5632                           ;KeyValue.c: 172: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  5633  001A2E  0E5C               	movlw	low _key
  5634  001A30  6E01               	movwf	strcmp@s1,c
  5635  001A32  0E00               	movlw	high _key
  5636  001A34  6E02               	movwf	strcmp@s1+1,c
  5637  001A36  0E50               	movlw	low STR_6
  5638  001A38  6E03               	movwf	strcmp@s2,c
  5639  001A3A  0E10               	movlw	high STR_6
  5640  001A3C  6E04               	movwf	strcmp@s2+1,c
  5641  001A3E  ECC5  F016         	call	_strcmp	;wreg free
  5642  001A42  5001               	movf	?_strcmp,w,c
  5643  001A44  1002               	iorwf	?_strcmp+1,w,c
  5644  001A46  B4D8               	btfsc	status,2,c
  5645  001A48  D00E               	goto	i2l3169
  5646  001A4A  0E5C               	movlw	low _key
  5647  001A4C  6E01               	movwf	strcmp@s1,c
  5648  001A4E  0E00               	movlw	high _key
  5649  001A50  6E02               	movwf	strcmp@s1+1,c
  5650  001A52  0E5C               	movlw	low STR_7
  5651  001A54  6E03               	movwf	strcmp@s2,c
  5652  001A56  0E10               	movlw	high STR_7
  5653  001A58  6E04               	movwf	strcmp@s2+1,c
  5654  001A5A  ECC5  F016         	call	_strcmp	;wreg free
  5655  001A5E  5001               	movf	?_strcmp,w,c
  5656  001A60  1002               	iorwf	?_strcmp+1,w,c
  5657  001A62  A4D8               	btfss	status,2,c
  5658  001A64  D006               	goto	i2l3173
  5659  001A66                     i2l3169:
  5660                           
  5661                           ;KeyValue.c: 173: {
  5662                           ;KeyValue.c: 174: StrippedKey = 0x04;
  5663  001A66  0E04               	movlw	4
  5664  001A68  6E51               	movwf	_StrippedKey,c
  5665                           
  5666                           ;KeyValue.c: 175: SerTx(';');
  5667  001A6A  0E3B               	movlw	59
  5668  001A6C  ECD6  F017         	call	i2_SerTx
  5669                           
  5670                           ;KeyValue.c: 176: }
  5671  001A70  D04D               	goto	i2l3193
  5672  001A72                     i2l3173:
  5673                           
  5674                           ;KeyValue.c: 178: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  5675  001A72  0E5C               	movlw	low _key
  5676  001A74  6E01               	movwf	strcmp@s1,c
  5677  001A76  0E00               	movlw	high _key
  5678  001A78  6E02               	movwf	strcmp@s1+1,c
  5679  001A7A  0E4D               	movlw	low STR_8
  5680  001A7C  6E03               	movwf	strcmp@s2,c
  5681  001A7E  0E10               	movlw	high STR_8
  5682  001A80  6E04               	movwf	strcmp@s2+1,c
  5683  001A82  ECC5  F016         	call	_strcmp	;wreg free
  5684  001A86  5001               	movf	?_strcmp,w,c
  5685  001A88  1002               	iorwf	?_strcmp+1,w,c
  5686  001A8A  B4D8               	btfsc	status,2,c
  5687  001A8C  D00E               	goto	i2l3177
  5688  001A8E  0E5C               	movlw	low _key
  5689  001A90  6E01               	movwf	strcmp@s1,c
  5690  001A92  0E00               	movlw	high _key
  5691  001A94  6E02               	movwf	strcmp@s1+1,c
  5692  001A96  0E59               	movlw	low STR_9
  5693  001A98  6E03               	movwf	strcmp@s2,c
  5694  001A9A  0E10               	movlw	high STR_9
  5695  001A9C  6E04               	movwf	strcmp@s2+1,c
  5696  001A9E  ECC5  F016         	call	_strcmp	;wreg free
  5697  001AA2  5001               	movf	?_strcmp,w,c
  5698  001AA4  1002               	iorwf	?_strcmp+1,w,c
  5699  001AA6  A4D8               	btfss	status,2,c
  5700  001AA8  D006               	goto	i2l3181
  5701  001AAA                     i2l3177:
  5702                           
  5703                           ;KeyValue.c: 179: {
  5704                           ;KeyValue.c: 180: StrippedKey = 0x06;
  5705  001AAA  0E06               	movlw	6
  5706  001AAC  6E51               	movwf	_StrippedKey,c
  5707                           
  5708                           ;KeyValue.c: 181: SerTx(';');
  5709  001AAE  0E3B               	movlw	59
  5710  001AB0  ECD6  F017         	call	i2_SerTx
  5711                           
  5712                           ;KeyValue.c: 182: }
  5713  001AB4  D02B               	goto	i2l3193
  5714  001AB6                     i2l3181:
  5715                           
  5716                           ;KeyValue.c: 184: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  5717  001AB6  0E5C               	movlw	low _key
  5718  001AB8  6E01               	movwf	strcmp@s1,c
  5719  001ABA  0E00               	movlw	high _key
  5720  001ABC  6E02               	movwf	strcmp@s1+1,c
  5721  001ABE  0E4A               	movlw	low STR_10
  5722  001AC0  6E03               	movwf	strcmp@s2,c
  5723  001AC2  0E10               	movlw	high STR_10
  5724  001AC4  6E04               	movwf	strcmp@s2+1,c
  5725  001AC6  ECC5  F016         	call	_strcmp	;wreg free
  5726  001ACA  5001               	movf	?_strcmp,w,c
  5727  001ACC  1002               	iorwf	?_strcmp+1,w,c
  5728  001ACE  B4D8               	btfsc	status,2,c
  5729  001AD0  D00E               	goto	i2l3185
  5730  001AD2  0E5C               	movlw	low _key
  5731  001AD4  6E01               	movwf	strcmp@s1,c
  5732  001AD6  0E00               	movlw	high _key
  5733  001AD8  6E02               	movwf	strcmp@s1+1,c
  5734  001ADA  0E56               	movlw	low STR_11
  5735  001ADC  6E03               	movwf	strcmp@s2,c
  5736  001ADE  0E10               	movlw	high STR_11
  5737  001AE0  6E04               	movwf	strcmp@s2+1,c
  5738  001AE2  ECC5  F016         	call	_strcmp	;wreg free
  5739  001AE6  5001               	movf	?_strcmp,w,c
  5740  001AE8  1002               	iorwf	?_strcmp+1,w,c
  5741  001AEA  A4D8               	btfss	status,2,c
  5742  001AEC  D006               	goto	i2l3189
  5743  001AEE                     i2l3185:
  5744                           
  5745                           ;KeyValue.c: 185: {
  5746                           ;KeyValue.c: 186: StrippedKey = 0x08;
  5747  001AEE  0E08               	movlw	8
  5748  001AF0  6E51               	movwf	_StrippedKey,c
  5749                           
  5750                           ;KeyValue.c: 187: SerTx(';');
  5751  001AF2  0E3B               	movlw	59
  5752  001AF4  ECD6  F017         	call	i2_SerTx
  5753                           
  5754                           ;KeyValue.c: 188: }
  5755  001AF8  D009               	goto	i2l3193
  5756  001AFA                     i2l3189:
  5757                           
  5758                           ;KeyValue.c: 190: else
  5759                           ;KeyValue.c: 191: {
  5760                           ;KeyValue.c: 192: SerTxStr("???");
  5761  001AFA  0E36               	movlw	low STR_12
  5762  001AFC  6E02               	movwf	i2SerTxStr@string,c
  5763  001AFE  0E10               	movlw	high STR_12
  5764  001B00  6E03               	movwf	i2SerTxStr@string+1,c
  5765  001B02  EC99  F016         	call	i2_SerTxStr	;wreg free
  5766  001B06                     i2l3191:
  5767                           
  5768                           ;KeyValue.c: 193: StrippedKey = 0;
  5769  001B06  0E00               	movlw	0
  5770  001B08  6E51               	movwf	_StrippedKey,c
  5771  001B0A  D000               	goto	i2l3193
  5772  001B0C                     i2l3193:
  5773                           
  5774                           ;KeyValue.c: 194: }
  5775                           ;KeyValue.c: 195: }
  5776                           ;KeyValue.c: 197: StrippedValue = strtod(value, &str_end);
  5777  001B0C  0E52               	movlw	low _value
  5778  001B0E  6E18               	movwf	strtod@s,c
  5779  001B10  0E00               	movlw	high _value
  5780  001B12  6E19               	movwf	strtod@s+1,c
  5781  001B14  0E2A               	movlw	low keyValue@str_end
  5782  001B16  6E1A               	movwf	strtod@res,c
  5783  001B18  0E00               	movlw	high keyValue@str_end
  5784  001B1A  6E1B               	movwf	strtod@res+1,c
  5785  001B1C  ECD2  F00D         	call	_strtod	;wreg free
  5786  001B20  C018  F04B         	movff	?_strtod,_StrippedValue
  5787  001B24  C019  F04C         	movff	?_strtod+1,_StrippedValue+1
  5788  001B28  C01A  F04D         	movff	?_strtod+2,_StrippedValue+2
  5789                           
  5790                           ;KeyValue.c: 201: for (x = 0; x < 5; x++)
  5791  001B2C  0E00               	movlw	0
  5792  001B2E  6E2E               	movwf	keyValue@x,c
  5793  001B30                     i2l3197:
  5794  001B30  0E04               	movlw	4
  5795  001B32  642E               	cpfsgt	keyValue@x,c
  5796  001B34  D001               	goto	i2l3201
  5797  001B36  D00C               	goto	i2l3207
  5798  001B38                     i2l3201:
  5799                           
  5800                           ;KeyValue.c: 202: {
  5801                           ;KeyValue.c: 203: key[x] = (0);
  5802  001B38  502E               	movf	keyValue@x,w,c
  5803  001B3A  0D01               	mullw	1
  5804  001B3C  0E5C               	movlw	low _key
  5805  001B3E  24F3               	addwf	prodl,w,c
  5806  001B40  6ED9               	movwf	fsr2l,c
  5807  001B42  0E00               	movlw	high _key
  5808  001B44  20F4               	addwfc	prodh,w,c
  5809  001B46  6EDA               	movwf	fsr2h,c
  5810  001B48  0E00               	movlw	0
  5811  001B4A  6EDF               	movwf	indf2,c
  5812  001B4C  2A2E               	incf	keyValue@x,f,c
  5813  001B4E  D7F0               	goto	i2l3197
  5814  001B50                     i2l3207:
  5815                           
  5816                           ;KeyValue.c: 204: }
  5817                           ;KeyValue.c: 206: for (x = 0; x < 10; x++)
  5818  001B50  0E00               	movlw	0
  5819  001B52  6E2E               	movwf	keyValue@x,c
  5820  001B54                     i2l3209:
  5821  001B54  0E09               	movlw	9
  5822  001B56  642E               	cpfsgt	keyValue@x,c
  5823  001B58  D001               	goto	i2l3213
  5824  001B5A  D00C               	goto	i2l3219
  5825  001B5C                     i2l3213:
  5826                           
  5827                           ;KeyValue.c: 207: {
  5828                           ;KeyValue.c: 208: value[x] = (0);
  5829  001B5C  502E               	movf	keyValue@x,w,c
  5830  001B5E  0D01               	mullw	1
  5831  001B60  0E52               	movlw	low _value
  5832  001B62  24F3               	addwf	prodl,w,c
  5833  001B64  6ED9               	movwf	fsr2l,c
  5834  001B66  0E00               	movlw	high _value
  5835  001B68  20F4               	addwfc	prodh,w,c
  5836  001B6A  6EDA               	movwf	fsr2h,c
  5837  001B6C  0E00               	movlw	0
  5838  001B6E  6EDF               	movwf	indf2,c
  5839  001B70  2A2E               	incf	keyValue@x,f,c
  5840  001B72  D7F0               	goto	i2l3209
  5841  001B74                     i2l3219:
  5842                           
  5843                           ;KeyValue.c: 209: }
  5844                           ;KeyValue.c: 211: for (x = 0; x < 30; x++)
  5845  001B74  0E00               	movlw	0
  5846  001B76  6E2E               	movwf	keyValue@x,c
  5847  001B78                     i2l3221:
  5848  001B78  0E1D               	movlw	29
  5849  001B7A  642E               	cpfsgt	keyValue@x,c
  5850  001B7C  D001               	goto	i2l3225
  5851  001B7E  D00C               	goto	i2l3231
  5852  001B80                     i2l3225:
  5853                           
  5854                           ;KeyValue.c: 212: {
  5855                           ;KeyValue.c: 213: received[x] = (0);
  5856  001B80  502E               	movf	keyValue@x,w,c
  5857  001B82  0D01               	mullw	1
  5858  001B84  0EBC               	movlw	low _received
  5859  001B86  24F3               	addwf	prodl,w,c
  5860  001B88  6ED9               	movwf	fsr2l,c
  5861  001B8A  0E00               	movlw	high _received
  5862  001B8C  20F4               	addwfc	prodh,w,c
  5863  001B8E  6EDA               	movwf	fsr2h,c
  5864  001B90  0E00               	movlw	0
  5865  001B92  6EDF               	movwf	indf2,c
  5866  001B94  2A2E               	incf	keyValue@x,f,c
  5867  001B96  D7F0               	goto	i2l3221
  5868  001B98                     i2l3231:
  5869                           
  5870                           ;KeyValue.c: 214: }
  5871                           ;KeyValue.c: 215: flag = 0;
  5872  001B98  0E00               	movlw	0
  5873  001B9A  6E2C               	movwf	keyValue@flag,c
  5874                           
  5875                           ;KeyValue.c: 216: RCflag = 1;
  5876  001B9C  0E01               	movlw	1
  5877  001B9E  0100               	movlb	0	; () banked
  5878  001BA0  6FBB               	movwf	_RCflag& (0+255),b
  5879                           
  5880                           ; BSR set to: 0
  5881  001BA2  0012               	return		;funcret
  5882  001BA4                     __end_of_keyValue:
  5883                           	opt stack 0
  5884                           pclatu	equ	0xFFB
  5885                           pclath	equ	0xFFA
  5886                           tblptru	equ	0xFF8
  5887                           tblptrh	equ	0xFF7
  5888                           tblptrl	equ	0xFF6
  5889                           tablat	equ	0xFF5
  5890                           prodh	equ	0xFF4
  5891                           prodl	equ	0xFF3
  5892                           intcon	equ	0xFF2
  5893                           indf0	equ	0xFEF
  5894                           postinc0	equ	0xFEE
  5895                           fsr0h	equ	0xFEA
  5896                           fsr0l	equ	0xFE9
  5897                           wreg	equ	0xFE8
  5898                           indf1	equ	0xFE7
  5899                           fsr1h	equ	0xFE2
  5900                           fsr1l	equ	0xFE1
  5901                           indf2	equ	0xFDF
  5902                           postinc2	equ	0xFDE
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function i2_SerTxStr *****************
  5908 ;; Defined at:
  5909 ;;		line 50 in file "SerComm.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  string          2    1[COMRAM] PTR unsigned char 
  5912 ;;		 -> STR_28(4), STR_13(6), STR_12(4), STR_3(11), 
  5913 ;;		 -> value(10), STR_2(6), key(5), STR_1(36), 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;		None               void
  5918 ;; Registers used:
  5919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;Total ram usage:        2 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    1
  5932 ;; This function calls:
  5933 ;;		i2_SerTx
  5934 ;; This function is called by:
  5935 ;;		_keyValue
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text22
  5940  002D32                     __ptext22:
  5941                           	opt stack 0
  5942  002D32                     i2_SerTxStr:
  5943                           	opt stack 22
  5944                           
  5945                           ;SerComm.c: 52: while (*string)
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;incstack = 0
  5949  002D32  D016               	goto	i2l3005
  5950  002D34                     i2l3001:
  5951                           
  5952                           ;SerComm.c: 53: SerTx(*string++);
  5953  002D34  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  5954  002D38  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  5955  002D3C  0E00               	movlw	low (__smallconst shr (0+16))
  5956  002D3E  6EF8               	movwf	tblptru,c
  5957  002D40  0E0F               	movlw	(high __ramtop+-1)
  5958  002D42  64F7               	cpfsgt	tblptrh,c
  5959  002D44  D003               	bra	i2u336_47
  5960  002D46  0008               	tblrd		*
  5961  002D48  50F5               	movf	tablat,w,c
  5962  002D4A  D005               	bra	i2u336_40
  5963  002D4C                     i2u336_47:
  5964  002D4C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5965  002D50  CFF7 FFEA          	movff	tblptrh,fsr0h
  5966  002D54  50EF               	movf	indf0,w,c
  5967  002D56                     i2u336_40:
  5968  002D56  ECD6  F017         	call	i2_SerTx
  5969  002D5A  4A02               	infsnz	i2SerTxStr@string,f,c
  5970  002D5C  2A03               	incf	i2SerTxStr@string+1,f,c
  5971  002D5E  D000               	goto	i2l3005
  5972  002D60                     i2l3005:
  5973  002D60  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  5974  002D64  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  5975  002D68  0E00               	movlw	low (__smallconst shr (0+16))
  5976  002D6A  6EF8               	movwf	tblptru,c
  5977  002D6C  0E0F               	movlw	(high __ramtop+-1)
  5978  002D6E  64F7               	cpfsgt	tblptrh,c
  5979  002D70  D003               	bra	i2u337_47
  5980  002D72  0008               	tblrd		*
  5981  002D74  50F5               	movf	tablat,w,c
  5982  002D76  D005               	bra	i2u337_40
  5983  002D78                     i2u337_47:
  5984  002D78  CFF6 FFE9          	movff	tblptrl,fsr0l
  5985  002D7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5986  002D80  50EF               	movf	indf0,w,c
  5987  002D82                     i2u337_40:
  5988  002D82  0900               	iorlw	0
  5989  002D84  A4D8               	btfss	status,2,c
  5990  002D86  D7D6               	goto	i2l3001
  5991  002D88  0012               	return		;funcret
  5992  002D8A                     __end_ofi2_SerTxStr:
  5993                           	opt stack 0
  5994                           pclatu	equ	0xFFB
  5995                           pclath	equ	0xFFA
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodh	equ	0xFF4
  6001                           prodl	equ	0xFF3
  6002                           intcon	equ	0xFF2
  6003                           indf0	equ	0xFEF
  6004                           postinc0	equ	0xFEE
  6005                           fsr0h	equ	0xFEA
  6006                           fsr0l	equ	0xFE9
  6007                           wreg	equ	0xFE8
  6008                           indf1	equ	0xFE7
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8
  6016                           
  6017 ;; *************** function i2_SerTx *****************
  6018 ;; Defined at:
  6019 ;;		line 41 in file "SerComm.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  c               1    wreg     unsigned char 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  c               1    0[COMRAM] unsigned char 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;		None               void
  6026 ;; Registers used:
  6027 ;;		wreg
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;Total ram usage:        1 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_RCInt
  6043 ;;		_keyValue
  6044 ;;		i2_SerTxStr
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text23
  6049  002FAC                     __ptext23:
  6050                           	opt stack 0
  6051  002FAC                     i2_SerTx:
  6052                           	opt stack 24
  6053                           
  6054                           ;incstack = 0
  6055                           ;i2SerTx@c stored from wreg
  6056  002FAC  6E01               	movwf	i2SerTx@c,c
  6057                           
  6058                           ;SerComm.c: 43: TXREG1 = c;
  6059  002FAE  C001  FFAD         	movff	i2SerTx@c,4013	;volatile
  6060                           
  6061                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  6062  002FB2  D000               	goto	i2l28
  6063  002FB4                     i2l28:
  6064  002FB4  A89E               	btfss	3998,4,c	;volatile
  6065  002FB6  D7FE               	goto	i2l28
  6066  002FB8  0012               	return		;funcret
  6067  002FBA                     __end_ofi2_SerTx:
  6068                           	opt stack 0
  6069                           pclatu	equ	0xFFB
  6070                           pclath	equ	0xFFA
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           indf0	equ	0xFEF
  6079                           postinc0	equ	0xFEE
  6080                           fsr0h	equ	0xFEA
  6081                           fsr0l	equ	0xFE9
  6082                           wreg	equ	0xFE8
  6083                           indf1	equ	0xFE7
  6084                           fsr1h	equ	0xFE2
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _strtod *****************
  6093 ;; Defined at:
  6094 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/atof.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  s               2   23[COMRAM] PTR const unsigned char 
  6097 ;;		 -> value(10), 
  6098 ;;  res             2   25[COMRAM] PTR PTR const unsigned c
  6099 ;;		 -> NULL(0), keyValue@str_end(2), 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  _u              4   31[COMRAM] struct .
  6102 ;;  expon           1   30[COMRAM] char 
  6103 ;;  flags           1   29[COMRAM] unsigned char 
  6104 ;;  eexp            1   28[COMRAM] char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  3   23[COMRAM] char 
  6107 ;; Registers used:
  6108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;Total ram usage:       12 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    2
  6121 ;; This function calls:
  6122 ;;		___altoft
  6123 ;;		___ftdiv
  6124 ;;		___ftge
  6125 ;;		___ftneg
  6126 ;;		___lmul
  6127 ;;		_isdigit
  6128 ;;		_isspace
  6129 ;;		i2___ftmul
  6130 ;; This function is called by:
  6131 ;;		_keyValue
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text24
  6136  001BA4                     __ptext24:
  6137                           	opt stack 0
  6138  001BA4                     _strtod:
  6139                           	opt stack 21
  6140                           
  6141                           ;incstack = 0
  6142  001BA4  501A               	movf	strtod@res,w,c
  6143  001BA6  101B               	iorwf	strtod@res+1,w,c
  6144  001BA8  B4D8               	btfsc	status,2,c
  6145  001BAA  D00C               	goto	i2l2707
  6146  001BAC  C01A  FFD9         	movff	strtod@res,fsr2l
  6147  001BB0  C01B  FFDA         	movff	strtod@res+1,fsr2h
  6148  001BB4  C018  FFDE         	movff	strtod@s,postinc2
  6149  001BB8  C019  FFDD         	movff	strtod@s+1,postdec2
  6150  001BBC  D003               	goto	i2l2707
  6151  001BBE                     i2l2705:
  6152  001BBE  4A18               	infsnz	strtod@s,f,c
  6153  001BC0  2A19               	incf	strtod@s+1,f,c
  6154  001BC2  D000               	goto	i2l2707
  6155  001BC4                     i2l2707:
  6156  001BC4  C018  FFD9         	movff	strtod@s,fsr2l
  6157  001BC8  C019  FFDA         	movff	strtod@s+1,fsr2h
  6158  001BCC  50DF               	movf	indf2,w,c
  6159  001BCE  6E1D               	movwf	strtod@eexp,c
  6160  001BD0  501D               	movf	strtod@eexp,w,c
  6161  001BD2  EC6B  F017         	call	_isspace
  6162  001BD6  B0D8               	btfsc	status,0,c
  6163  001BD8  D7F2               	goto	i2l2705
  6164  001BDA  0E00               	movlw	0
  6165  001BDC  6E1E               	movwf	strtod@flags,c
  6166  001BDE  0E2D               	movlw	45
  6167  001BE0  181D               	xorwf	strtod@eexp,w,c
  6168  001BE2  A4D8               	btfss	status,2,c
  6169  001BE4  D003               	goto	i2l2717
  6170  001BE6  0E01               	movlw	1
  6171  001BE8  6E1E               	movwf	strtod@flags,c
  6172  001BEA  D004               	goto	i2l2719
  6173  001BEC                     i2l2717:
  6174  001BEC  0E2B               	movlw	43
  6175  001BEE  181D               	xorwf	strtod@eexp,w,c
  6176  001BF0  A4D8               	btfss	status,2,c
  6177  001BF2  D003               	goto	i2l2721
  6178  001BF4                     i2l2719:
  6179  001BF4  4A18               	infsnz	strtod@s,f,c
  6180  001BF6  2A19               	incf	strtod@s+1,f,c
  6181  001BF8  D000               	goto	i2l2721
  6182  001BFA                     i2l2721:
  6183  001BFA  0E00               	movlw	0
  6184  001BFC  6E1D               	movwf	strtod@eexp,c
  6185  001BFE  0E00               	movlw	0
  6186  001C00  6E20               	movwf	strtod@_u,c
  6187  001C02  0E00               	movlw	0
  6188  001C04  6E21               	movwf	strtod@_u+1,c
  6189  001C06  0E00               	movlw	0
  6190  001C08  6E22               	movwf	strtod@_u+2,c
  6191  001C0A  0E00               	movlw	0
  6192  001C0C  6E23               	movwf	strtod@_u+3,c
  6193  001C0E  0E00               	movlw	0
  6194  001C10  6E1F               	movwf	strtod@expon,c
  6195  001C12  D000               	goto	i2l2727
  6196  001C14                     i2l2727:
  6197  001C14  B81E               	btfsc	strtod@flags,4,c
  6198  001C16  D00A               	goto	i2l2733
  6199  001C18  C018  FFD9         	movff	strtod@s,fsr2l
  6200  001C1C  C019  FFDA         	movff	strtod@s+1,fsr2h
  6201  001C20  0E2E               	movlw	46
  6202  001C22  18DE               	xorwf	postinc2,w,c
  6203  001C24  A4D8               	btfss	status,2,c
  6204  001C26  D002               	goto	i2l2733
  6205  001C28  881E               	bsf	strtod@flags,4,c
  6206  001C2A  D040               	goto	i2l615
  6207  001C2C                     i2l2733:
  6208  001C2C  C018  FFD9         	movff	strtod@s,fsr2l
  6209  001C30  C019  FFDA         	movff	strtod@s+1,fsr2h
  6210  001C34  50DF               	movf	indf2,w,c
  6211  001C36  ECA7  F017         	call	_isdigit
  6212  001C3A  A0D8               	btfss	status,0,c
  6213  001C3C  D03A               	goto	i2l2751
  6214  001C3E  D001               	goto	i2l2737
  6215  001C40  D038               	goto	i2l2751
  6216  001C42                     i2l2737:
  6217  001C42  821E               	bsf	strtod@flags,1,c
  6218  001C44  0E08               	movlw	8
  6219  001C46  181D               	xorwf	strtod@eexp,w,c
  6220  001C48  B4D8               	btfsc	status,2,c
  6221  001C4A  D02C               	goto	i2l613
  6222  001C4C  B81E               	btfsc	strtod@flags,4,c
  6223  001C4E  061F               	decf	strtod@expon,f,c
  6224  001C50  2A1D               	incf	strtod@eexp,f,c
  6225  001C52  C020  F001         	movff	strtod@_u,___lmul@multiplier
  6226  001C56  C021  F002         	movff	strtod@_u+1,___lmul@multiplier+1
  6227  001C5A  C022  F003         	movff	strtod@_u+2,___lmul@multiplier+2
  6228  001C5E  C023  F004         	movff	strtod@_u+3,___lmul@multiplier+3
  6229  001C62  0E0A               	movlw	10
  6230  001C64  6E05               	movwf	___lmul@multiplicand,c
  6231  001C66  0E00               	movlw	0
  6232  001C68  6E06               	movwf	___lmul@multiplicand+1,c
  6233  001C6A  0E00               	movlw	0
  6234  001C6C  6E07               	movwf	___lmul@multiplicand+2,c
  6235  001C6E  0E00               	movlw	0
  6236  001C70  6E08               	movwf	___lmul@multiplicand+3,c
  6237  001C72  EC40  F016         	call	___lmul	;wreg free
  6238  001C76  C001  F020         	movff	?___lmul,strtod@_u
  6239  001C7A  C002  F021         	movff	?___lmul+1,strtod@_u+1
  6240  001C7E  C003  F022         	movff	?___lmul+2,strtod@_u+2
  6241  001C82  C004  F023         	movff	?___lmul+3,strtod@_u+3
  6242  001C86  C018  FFD9         	movff	strtod@s,fsr2l
  6243  001C8A  C019  FFDA         	movff	strtod@s+1,fsr2h
  6244  001C8E  50DF               	movf	indf2,w,c
  6245  001C90  6E1C               	movwf	??_strtod& (0+255),c
  6246  001C92  0ED0               	movlw	208
  6247  001C94  261C               	addwf	??_strtod,f,c
  6248  001C96  501C               	movf	??_strtod,w,c
  6249  001C98  2620               	addwf	strtod@_u,f,c
  6250  001C9A  0E00               	movlw	0
  6251  001C9C  2221               	addwfc	strtod@_u+1,f,c
  6252  001C9E  2222               	addwfc	strtod@_u+2,f,c
  6253  001CA0  2223               	addwfc	strtod@_u+3,f,c
  6254  001CA2  D004               	goto	i2l615
  6255  001CA4                     i2l613:
  6256  001CA4  B81E               	btfsc	strtod@flags,4,c
  6257  001CA6  D002               	goto	i2l615
  6258  001CA8  2A1F               	incf	strtod@expon,f,c
  6259  001CAA  D000               	goto	i2l615
  6260  001CAC                     i2l615:
  6261  001CAC  4A18               	infsnz	strtod@s,f,c
  6262  001CAE  2A19               	incf	strtod@s+1,f,c
  6263  001CB0  D7B1               	goto	i2l2727
  6264  001CB2                     i2l2751:
  6265  001CB2  0E00               	movlw	0
  6266  001CB4  6E1D               	movwf	strtod@eexp,c
  6267  001CB6  C018  FFD9         	movff	strtod@s,fsr2l
  6268  001CBA  C019  FFDA         	movff	strtod@s+1,fsr2h
  6269  001CBE  0E65               	movlw	101
  6270  001CC0  18DE               	xorwf	postinc2,w,c
  6271  001CC2  B4D8               	btfsc	status,2,c
  6272  001CC4  D008               	goto	i2l2757
  6273  001CC6  C018  FFD9         	movff	strtod@s,fsr2l
  6274  001CCA  C019  FFDA         	movff	strtod@s+1,fsr2h
  6275  001CCE  0E45               	movlw	69
  6276  001CD0  18DE               	xorwf	postinc2,w,c
  6277  001CD2  A4D8               	btfss	status,2,c
  6278  001CD4  D065               	goto	i2l2789
  6279  001CD6                     i2l2757:
  6280  001CD6  4A18               	infsnz	strtod@s,f,c
  6281  001CD8  2A19               	incf	strtod@s+1,f,c
  6282  001CDA  C018  FFD9         	movff	strtod@s,fsr2l
  6283  001CDE  C019  FFDA         	movff	strtod@s+1,fsr2h
  6284  001CE2  0E2D               	movlw	45
  6285  001CE4  18DE               	xorwf	postinc2,w,c
  6286  001CE6  A4D8               	btfss	status,2,c
  6287  001CE8  D002               	goto	i2l2761
  6288  001CEA  861E               	bsf	strtod@flags,3,c
  6289  001CEC  D008               	goto	i2l2763
  6290  001CEE                     i2l2761:
  6291  001CEE  C018  FFD9         	movff	strtod@s,fsr2l
  6292  001CF2  C019  FFDA         	movff	strtod@s+1,fsr2h
  6293  001CF6  0E2B               	movlw	43
  6294  001CF8  18DE               	xorwf	postinc2,w,c
  6295  001CFA  A4D8               	btfss	status,2,c
  6296  001CFC  D006               	goto	i2l2767
  6297  001CFE                     i2l2763:
  6298  001CFE  4A18               	infsnz	strtod@s,f,c
  6299  001D00  2A19               	incf	strtod@s+1,f,c
  6300  001D02  D003               	goto	i2l2767
  6301  001D04                     i2l2765:
  6302  001D04  4A18               	infsnz	strtod@s,f,c
  6303  001D06  2A19               	incf	strtod@s+1,f,c
  6304  001D08  D000               	goto	i2l2767
  6305  001D0A                     i2l2767:
  6306  001D0A  C018  FFD9         	movff	strtod@s,fsr2l
  6307  001D0E  C019  FFDA         	movff	strtod@s+1,fsr2h
  6308  001D12  0E30               	movlw	48
  6309  001D14  18DE               	xorwf	postinc2,w,c
  6310  001D16  B4D8               	btfsc	status,2,c
  6311  001D18  D7F5               	goto	i2l2765
  6312  001D1A  C018  FFD9         	movff	strtod@s,fsr2l
  6313  001D1E  C019  FFDA         	movff	strtod@s+1,fsr2h
  6314  001D22  50DF               	movf	indf2,w,c
  6315  001D24  ECA7  F017         	call	_isdigit
  6316  001D28  A0D8               	btfss	status,0,c
  6317  001D2A  D036               	goto	i2l2785
  6318  001D2C  C018  FFD9         	movff	strtod@s,fsr2l
  6319  001D30  C019  FFDA         	movff	strtod@s+1,fsr2h
  6320  001D34  50DF               	movf	indf2,w,c
  6321  001D36  0FD0               	addlw	208
  6322  001D38  6E1D               	movwf	strtod@eexp,c
  6323  001D3A  4A18               	infsnz	strtod@s,f,c
  6324  001D3C  2A19               	incf	strtod@s+1,f,c
  6325  001D3E  C018  FFD9         	movff	strtod@s,fsr2l
  6326  001D42  C019  FFDA         	movff	strtod@s+1,fsr2h
  6327  001D46  50DF               	movf	indf2,w,c
  6328  001D48  ECA7  F017         	call	_isdigit
  6329  001D4C  A0D8               	btfss	status,0,c
  6330  001D4E  D024               	goto	i2l2785
  6331  001D50  C018  FFD9         	movff	strtod@s,fsr2l
  6332  001D54  C019  FFDA         	movff	strtod@s+1,fsr2h
  6333  001D58  50DF               	movf	indf2,w,c
  6334  001D5A  6E1C               	movwf	??_strtod& (0+255),c
  6335  001D5C  501D               	movf	strtod@eexp,w,c
  6336  001D5E  0D0A               	mullw	10
  6337  001D60  50F3               	movf	prodl,w,c
  6338  001D62  241C               	addwf	??_strtod,w,c
  6339  001D64  0FD0               	addlw	208
  6340  001D66  6E1D               	movwf	strtod@eexp,c
  6341  001D68  4A18               	infsnz	strtod@s,f,c
  6342  001D6A  2A19               	incf	strtod@s+1,f,c
  6343  001D6C  C018  FFD9         	movff	strtod@s,fsr2l
  6344  001D70  C019  FFDA         	movff	strtod@s+1,fsr2h
  6345  001D74  50DF               	movf	indf2,w,c
  6346  001D76  ECA7  F017         	call	_isdigit
  6347  001D7A  A0D8               	btfss	status,0,c
  6348  001D7C  D00D               	goto	i2l2785
  6349  001D7E  C018  FFD9         	movff	strtod@s,fsr2l
  6350  001D82  C019  FFDA         	movff	strtod@s+1,fsr2h
  6351  001D86  50DF               	movf	indf2,w,c
  6352  001D88  6E1C               	movwf	??_strtod& (0+255),c
  6353  001D8A  501D               	movf	strtod@eexp,w,c
  6354  001D8C  0D0A               	mullw	10
  6355  001D8E  50F3               	movf	prodl,w,c
  6356  001D90  241C               	addwf	??_strtod,w,c
  6357  001D92  0FD0               	addlw	208
  6358  001D94  6E1D               	movwf	strtod@eexp,c
  6359  001D96  D000               	goto	i2l2785
  6360  001D98                     i2l2785:
  6361  001D98  A61E               	btfss	strtod@flags,3,c
  6362  001D9A  D002               	goto	i2l2789
  6363  001D9C  6C1D               	negf	strtod@eexp,c
  6364  001D9E  D000               	goto	i2l2789
  6365  001DA0                     i2l2789:
  6366  001DA0  501D               	movf	strtod@eexp,w,c
  6367  001DA2  261F               	addwf	strtod@expon,f,c
  6368  001DA4  501A               	movf	strtod@res,w,c
  6369  001DA6  101B               	iorwf	strtod@res+1,w,c
  6370  001DA8  A4D8               	btfss	status,2,c
  6371  001DAA  A21E               	btfss	strtod@flags,1,c
  6372  001DAC  D009               	goto	i2l2797
  6373  001DAE  C01A  FFD9         	movff	strtod@res,fsr2l
  6374  001DB2  C01B  FFDA         	movff	strtod@res+1,fsr2h
  6375  001DB6  C018  FFDE         	movff	strtod@s,postinc2
  6376  001DBA  C019  FFDD         	movff	strtod@s+1,postdec2
  6377  001DBE  D000               	goto	i2l2797
  6378  001DC0                     i2l2797:
  6379  001DC0  C020  F009         	movff	strtod@_u,___altoft@c
  6380  001DC4  C021  F00A         	movff	strtod@_u+1,___altoft@c+1
  6381  001DC8  C022  F00B         	movff	strtod@_u+2,___altoft@c+2
  6382  001DCC  C023  F00C         	movff	strtod@_u+3,___altoft@c+3
  6383  001DD0  EC66  F015         	call	___altoft	;wreg free
  6384  001DD4  C009  F020         	movff	?___altoft,strtod@_u
  6385  001DD8  C00A  F021         	movff	?___altoft+1,strtod@_u+1
  6386  001DDC  C00B  F022         	movff	?___altoft+2,strtod@_u+2
  6387  001DE0  5020               	movf	strtod@_u,w,c
  6388  001DE2  1021               	iorwf	strtod@_u+1,w,c
  6389  001DE4  1022               	iorwf	strtod@_u+2,w,c
  6390  001DE6  A4D8               	btfss	status,2,c
  6391  001DE8  D005               	goto	i2l2805
  6392  001DEA  0E00               	movlw	0
  6393  001DEC  6E18               	movwf	?_strtod,c
  6394  001DEE  0E00               	movlw	0
  6395  001DF0  D0A6               	goto	L9
  6396  001DF2  D0C2               	goto	i2l632
  6397  001DF4                     i2l2805:
  6398  001DF4  AE1F               	btfss	strtod@expon,7,c
  6399  001DF6  D04C               	goto	i2l2833
  6400  001DF8  6C1F               	negf	strtod@expon,c
  6401  001DFA  D017               	goto	i2l2813
  6402  001DFC                     i2l2809:
  6403  001DFC  C020  F009         	movff	strtod@_u,___ftdiv@f1
  6404  001E00  C021  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  6405  001E04  C022  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  6406  001E08  0E03               	movlw	3
  6407  001E0A  6E0C               	movwf	___ftdiv@f2,c
  6408  001E0C  0E15               	movlw	21
  6409  001E0E  6E0D               	movwf	___ftdiv@f2+1,c
  6410  001E10  0E50               	movlw	80
  6411  001E12  6E0E               	movwf	___ftdiv@f2+2,c
  6412  001E14  EC6F  F013         	call	___ftdiv	;wreg free
  6413  001E18  C009  F020         	movff	?___ftdiv,strtod@_u
  6414  001E1C  C00A  F021         	movff	?___ftdiv+1,strtod@_u+1
  6415  001E20  C00B  F022         	movff	?___ftdiv+2,strtod@_u+2
  6416  001E24  0EF6               	movlw	246
  6417  001E26  261F               	addwf	strtod@expon,f,c
  6418  001E28  D000               	goto	i2l2813
  6419  001E2A                     i2l2813:
  6420  001E2A  501F               	movf	strtod@expon,w,c
  6421  001E2C  0A80               	xorlw	128
  6422  001E2E  0F76               	addlw	-138
  6423  001E30  A0D8               	btfss	status,0,c
  6424  001E32  D018               	goto	i2l2819
  6425  001E34  D7E3               	goto	i2l2809
  6426  001E36  D016               	goto	i2l2819
  6427  001E38                     i2l2815:
  6428  001E38  C020  F009         	movff	strtod@_u,___ftdiv@f1
  6429  001E3C  C021  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  6430  001E40  C022  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  6431  001E44  0E00               	movlw	0
  6432  001E46  6E0C               	movwf	___ftdiv@f2,c
  6433  001E48  0E20               	movlw	32
  6434  001E4A  6E0D               	movwf	___ftdiv@f2+1,c
  6435  001E4C  0E41               	movlw	65
  6436  001E4E  6E0E               	movwf	___ftdiv@f2+2,c
  6437  001E50  EC6F  F013         	call	___ftdiv	;wreg free
  6438  001E54  C009  F020         	movff	?___ftdiv,strtod@_u
  6439  001E58  C00A  F021         	movff	?___ftdiv+1,strtod@_u+1
  6440  001E5C  C00B  F022         	movff	?___ftdiv+2,strtod@_u+2
  6441  001E60  061F               	decf	strtod@expon,f,c
  6442  001E62  D000               	goto	i2l2819
  6443  001E64                     i2l2819:
  6444  001E64  501F               	movf	strtod@expon,w,c
  6445  001E66  A4D8               	btfss	status,2,c
  6446  001E68  D7E7               	goto	i2l2815
  6447  001E6A  C020  F001         	movff	strtod@_u,___ftge@ff1
  6448  001E6E  C021  F002         	movff	strtod@_u+1,___ftge@ff1+1
  6449  001E72  C022  F003         	movff	strtod@_u+2,___ftge@ff1+2
  6450  001E76  0E00               	movlw	0
  6451  001E78  6E04               	movwf	___ftge@ff2,c
  6452  001E7A  0E80               	movlw	128
  6453  001E7C  6E05               	movwf	___ftge@ff2+1,c
  6454  001E7E  0E00               	movlw	0
  6455  001E80  6E06               	movwf	___ftge@ff2+2,c
  6456  001E82  EC9C  F014         	call	___ftge	;wreg free
  6457  001E86  D04D               	goto	L10
  6458  001E88  D077               	goto	i2l632
  6459  001E8A  D056               	goto	i2l2857
  6460  001E8C  D075               	goto	i2l632
  6461  001E8E  D05C               	goto	i2l642
  6462  001E90                     i2l2833:
  6463  001E90  501F               	movf	strtod@expon,w,c
  6464  001E92  0A80               	xorlw	128
  6465  001E94  0F7F               	addlw	-129
  6466  001E96  B0D8               	btfsc	status,0,c
  6467  001E98  D019               	goto	i2l2841
  6468  001E9A  D056               	goto	i2l642
  6469  001E9C  D017               	goto	i2l2841
  6470  001E9E                     i2l2837:
  6471  001E9E  C020  F009         	movff	strtod@_u,i2___ftmul@f1
  6472  001EA2  C021  F00A         	movff	strtod@_u+1,i2___ftmul@f1+1
  6473  001EA6  C022  F00B         	movff	strtod@_u+2,i2___ftmul@f1+2
  6474  001EAA  0E03               	movlw	3
  6475  001EAC  6E0C               	movwf	i2___ftmul@f2,c
  6476  001EAE  0E15               	movlw	21
  6477  001EB0  6E0D               	movwf	i2___ftmul@f2+1,c
  6478  001EB2  0E50               	movlw	80
  6479  001EB4  6E0E               	movwf	i2___ftmul@f2+2,c
  6480  001EB6  ECF3  F012         	call	i2___ftmul	;wreg free
  6481  001EBA  C009  F020         	movff	?i2___ftmul,strtod@_u
  6482  001EBE  C00A  F021         	movff	?i2___ftmul+1,strtod@_u+1
  6483  001EC2  C00B  F022         	movff	?i2___ftmul+2,strtod@_u+2
  6484  001EC6  0EF6               	movlw	246
  6485  001EC8  261F               	addwf	strtod@expon,f,c
  6486  001ECA  D000               	goto	i2l2841
  6487  001ECC                     i2l2841:
  6488  001ECC  0E0A               	movlw	10
  6489  001ECE  601F               	cpfslt	strtod@expon,c
  6490  001ED0  D7E6               	goto	i2l2837
  6491  001ED2  D016               	goto	i2l2847
  6492  001ED4                     i2l2843:
  6493  001ED4  C020  F009         	movff	strtod@_u,i2___ftmul@f1
  6494  001ED8  C021  F00A         	movff	strtod@_u+1,i2___ftmul@f1+1
  6495  001EDC  C022  F00B         	movff	strtod@_u+2,i2___ftmul@f1+2
  6496  001EE0  0E00               	movlw	0
  6497  001EE2  6E0C               	movwf	i2___ftmul@f2,c
  6498  001EE4  0E20               	movlw	32
  6499  001EE6  6E0D               	movwf	i2___ftmul@f2+1,c
  6500  001EE8  0E41               	movlw	65
  6501  001EEA  6E0E               	movwf	i2___ftmul@f2+2,c
  6502  001EEC  ECF3  F012         	call	i2___ftmul	;wreg free
  6503  001EF0  C009  F020         	movff	?i2___ftmul,strtod@_u
  6504  001EF4  C00A  F021         	movff	?i2___ftmul+1,strtod@_u+1
  6505  001EF8  C00B  F022         	movff	?i2___ftmul+2,strtod@_u+2
  6506  001EFC  061F               	decf	strtod@expon,f,c
  6507  001EFE  D000               	goto	i2l2847
  6508  001F00                     i2l2847:
  6509  001F00  501F               	movf	strtod@expon,w,c
  6510  001F02  A4D8               	btfss	status,2,c
  6511  001F04  D7E7               	goto	i2l2843
  6512  001F06  0EFF               	movlw	255
  6513  001F08  6E01               	movwf	___ftge@ff1,c
  6514  001F0A  0E7F               	movlw	127
  6515  001F0C  6E02               	movwf	___ftge@ff1+1,c
  6516  001F0E  0E7F               	movlw	127
  6517  001F10  6E03               	movwf	___ftge@ff1+2,c
  6518  001F12  C020  F004         	movff	strtod@_u,___ftge@ff2
  6519  001F16  C021  F005         	movff	strtod@_u+1,___ftge@ff2+1
  6520  001F1A  C022  F006         	movff	strtod@_u+2,___ftge@ff2+2
  6521  001F1E  EC9C  F014         	call	___ftge	;wreg free
  6522  001F22                     L10:
  6523  001F22  B0D8               	btfsc	status,0,c
  6524  001F24  D011               	goto	i2l642
  6525  001F26  A01E               	btfss	strtod@flags,0,c
  6526  001F28  D007               	goto	i2l2857
  6527  001F2A  0E00               	movlw	0
  6528  001F2C  6E18               	movwf	?_strtod,c
  6529  001F2E  0E80               	movlw	128
  6530  001F30  6E19               	movwf	?_strtod+1,c
  6531  001F32  0E80               	movlw	128
  6532  001F34  D006               	goto	L6
  6533  001F36  D020               	goto	i2l632
  6534  001F38                     i2l2857:
  6535  001F38  0E00               	movlw	0
  6536  001F3A  6E18               	movwf	?_strtod,c
  6537  001F3C  0E80               	movlw	128
  6538  001F3E                     L9:
  6539  001F3E  6E19               	movwf	?_strtod+1,c
  6540  001F40  0E00               	movlw	0
  6541  001F42                     L6:
  6542  001F42  6E1A               	movwf	?_strtod+2,c
  6543  001F44  D019               	goto	i2l632
  6544  001F46  D000               	goto	i2l642
  6545  001F48                     i2l642:
  6546  001F48  A01E               	btfss	strtod@flags,0,c
  6547  001F4A  D00F               	goto	i2l2863
  6548  001F4C  C020  F001         	movff	strtod@_u,___ftneg@f1
  6549  001F50  C021  F002         	movff	strtod@_u+1,___ftneg@f1+1
  6550  001F54  C022  F003         	movff	strtod@_u+2,___ftneg@f1+2
  6551  001F58  EC95  F017         	call	___ftneg	;wreg free
  6552  001F5C  C001  F020         	movff	?___ftneg,strtod@_u
  6553  001F60  C002  F021         	movff	?___ftneg+1,strtod@_u+1
  6554  001F64  C003  F022         	movff	?___ftneg+2,strtod@_u+2
  6555  001F68  D000               	goto	i2l2863
  6556  001F6A                     i2l2863:
  6557  001F6A  C020  F018         	movff	strtod@_u,?_strtod
  6558  001F6E  C021  F019         	movff	strtod@_u+1,?_strtod+1
  6559  001F72  C022  F01A         	movff	strtod@_u+2,?_strtod+2
  6560  001F76  D000               	goto	i2l632
  6561  001F78                     i2l632:
  6562  001F78  0012               	return		;funcret
  6563  001F7A                     __end_of_strtod:
  6564                           	opt stack 0
  6565                           pclatu	equ	0xFFB
  6566                           pclath	equ	0xFFA
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           intcon	equ	0xFF2
  6574                           indf0	equ	0xFEF
  6575                           postinc0	equ	0xFEE
  6576                           fsr0h	equ	0xFEA
  6577                           fsr0l	equ	0xFE9
  6578                           wreg	equ	0xFE8
  6579                           indf1	equ	0xFE7
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function i2___ftmul *****************
  6590 ;; Defined at:
  6591 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  f1              3    8[COMRAM] float 
  6594 ;;  f2              3   11[COMRAM] float 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  __ftmul         3   18[COMRAM] unsigned um
  6597 ;;  __ftmul         1   22[COMRAM] unsigned char 
  6598 ;;  __ftmul         1   21[COMRAM] unsigned char 
  6599 ;;  __ftmul         1   17[COMRAM] unsigned char 
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  3    8[COMRAM] float 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6609 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;Total ram usage:       15 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    1
  6616 ;; This function calls:
  6617 ;;		i2___ftpack
  6618 ;; This function is called by:
  6619 ;;		_strtod
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text25
  6624  0025E6                     __ptext25:
  6625                           	opt stack 0
  6626  0025E6                     i2___ftmul:
  6627                           	opt stack 21
  6628                           
  6629                           ;incstack = 0
  6630  0025E6  C00B  F00F         	movff	i2___ftmul@f1+2,??i2___ftmul
  6631  0025EA  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
  6632  0025EC  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
  6633  0025EE  340A               	rlcf	i2___ftmul@f1+1,w,c
  6634  0025F0  360F               	rlcf	??i2___ftmul& (0+255),f,c
  6635  0025F2  E301               	bnc	u272_41
  6636  0025F4  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
  6637  0025F6                     u272_41:
  6638  0025F6  500F               	movf	??i2___ftmul,w,c
  6639  0025F8  6E12               	movwf	i2___ftmul@exp,c
  6640  0025FA  5012               	movf	i2___ftmul@exp,w,c
  6641  0025FC  A4D8               	btfss	status,2,c
  6642  0025FE  D002               	goto	i2l2639
  6643  002600  D00E               	goto	i2l2641
  6644  002602  D06C               	goto	i2l889
  6645  002604                     i2l2639:
  6646  002604  C00E  F00F         	movff	i2___ftmul@f2+2,??i2___ftmul
  6647  002608  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
  6648  00260A  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
  6649  00260C  340D               	rlcf	i2___ftmul@f2+1,w,c
  6650  00260E  360F               	rlcf	??i2___ftmul& (0+255),f,c
  6651  002610  E301               	bnc	u274_41
  6652  002612  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
  6653  002614                     u274_41:
  6654  002614  500F               	movf	??i2___ftmul,w,c
  6655  002616  6E17               	movwf	i2___ftmul@sign,c
  6656  002618  5017               	movf	i2___ftmul@sign,w,c
  6657  00261A  A4D8               	btfss	status,2,c
  6658  00261C  D007               	goto	i2l2645
  6659  00261E                     i2l2641:
  6660  00261E  0E00               	movlw	0
  6661  002620  6E09               	movwf	?i2___ftmul,c
  6662  002622  0E00               	movlw	0
  6663  002624  6E0A               	movwf	?i2___ftmul+1,c
  6664  002626  0E00               	movlw	0
  6665  002628  6E0B               	movwf	?i2___ftmul+2,c
  6666  00262A  D058               	goto	i2l889
  6667  00262C                     i2l2645:
  6668  00262C  5017               	movf	i2___ftmul@sign,w,c
  6669  00262E  0F7B               	addlw	123
  6670  002630  2612               	addwf	i2___ftmul@exp,f,c
  6671  002632  C00B  F017         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  6672  002636  500E               	movf	i2___ftmul@f2+2,w,c
  6673  002638  1A17               	xorwf	i2___ftmul@sign,f,c
  6674  00263A  0E80               	movlw	128
  6675  00263C  1617               	andwf	i2___ftmul@sign,f,c
  6676  00263E  8E0A               	bsf	i2___ftmul@f1+1,7,c
  6677  002640  8E0D               	bsf	i2___ftmul@f2+1,7,c
  6678  002642  0EFF               	movlw	255
  6679  002644  160C               	andwf	i2___ftmul@f2,f,c
  6680  002646  0EFF               	movlw	255
  6681  002648  160D               	andwf	i2___ftmul@f2+1,f,c
  6682  00264A  0E00               	movlw	0
  6683  00264C  160E               	andwf	i2___ftmul@f2+2,f,c
  6684  00264E  0E00               	movlw	0
  6685  002650  6E13               	movwf	i2___ftmul@f3_as_product,c
  6686  002652  0E00               	movlw	0
  6687  002654  6E14               	movwf	i2___ftmul@f3_as_product+1,c
  6688  002656  0E00               	movlw	0
  6689  002658  6E15               	movwf	i2___ftmul@f3_as_product+2,c
  6690  00265A  0E07               	movlw	7
  6691  00265C  6E16               	movwf	i2___ftmul@cntr,c
  6692  00265E  D000               	goto	i2l2659
  6693  002660                     i2l2659:
  6694  002660  A009               	btfss	i2___ftmul@f1,0,c
  6695  002662  D007               	goto	i2l2663
  6696  002664  500C               	movf	i2___ftmul@f2,w,c
  6697  002666  2613               	addwf	i2___ftmul@f3_as_product,f,c
  6698  002668  500D               	movf	i2___ftmul@f2+1,w,c
  6699  00266A  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
  6700  00266C  500E               	movf	i2___ftmul@f2+2,w,c
  6701  00266E  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
  6702  002670  D000               	goto	i2l2663
  6703  002672                     i2l2663:
  6704  002672  90D8               	bcf	status,0,c
  6705  002674  320B               	rrcf	i2___ftmul@f1+2,f,c
  6706  002676  320A               	rrcf	i2___ftmul@f1+1,f,c
  6707  002678  3209               	rrcf	i2___ftmul@f1,f,c
  6708  00267A  90D8               	bcf	status,0,c
  6709  00267C  360C               	rlcf	i2___ftmul@f2,f,c
  6710  00267E  360D               	rlcf	i2___ftmul@f2+1,f,c
  6711  002680  360E               	rlcf	i2___ftmul@f2+2,f,c
  6712  002682  2E16               	decfsz	i2___ftmul@cntr,f,c
  6713  002684  D7ED               	goto	i2l2659
  6714  002686  D000               	goto	i2l2667
  6715  002688                     i2l2667:
  6716  002688  0E09               	movlw	9
  6717  00268A  6E16               	movwf	i2___ftmul@cntr,c
  6718  00268C  D000               	goto	i2l2669
  6719  00268E                     i2l2669:
  6720  00268E  A009               	btfss	i2___ftmul@f1,0,c
  6721  002690  D007               	goto	i2l2673
  6722  002692  500C               	movf	i2___ftmul@f2,w,c
  6723  002694  2613               	addwf	i2___ftmul@f3_as_product,f,c
  6724  002696  500D               	movf	i2___ftmul@f2+1,w,c
  6725  002698  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
  6726  00269A  500E               	movf	i2___ftmul@f2+2,w,c
  6727  00269C  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
  6728  00269E  D000               	goto	i2l2673
  6729  0026A0                     i2l2673:
  6730  0026A0  90D8               	bcf	status,0,c
  6731  0026A2  320B               	rrcf	i2___ftmul@f1+2,f,c
  6732  0026A4  320A               	rrcf	i2___ftmul@f1+1,f,c
  6733  0026A6  3209               	rrcf	i2___ftmul@f1,f,c
  6734  0026A8  90D8               	bcf	status,0,c
  6735  0026AA  3215               	rrcf	i2___ftmul@f3_as_product+2,f,c
  6736  0026AC  3214               	rrcf	i2___ftmul@f3_as_product+1,f,c
  6737  0026AE  3213               	rrcf	i2___ftmul@f3_as_product,f,c
  6738  0026B0  2E16               	decfsz	i2___ftmul@cntr,f,c
  6739  0026B2  D7ED               	goto	i2l2669
  6740  0026B4  D000               	goto	i2l2677
  6741  0026B6                     i2l2677:
  6742  0026B6  C013  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  6743  0026BA  C014  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  6744  0026BE  C015  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  6745  0026C2  C012  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  6746  0026C6  C017  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  6747  0026CA  ECE0  F013         	call	i2___ftpack	;wreg free
  6748  0026CE  C001  F009         	movff	?i2___ftpack,?i2___ftmul
  6749  0026D2  C002  F00A         	movff	?i2___ftpack+1,?i2___ftmul+1
  6750  0026D6  C003  F00B         	movff	?i2___ftpack+2,?i2___ftmul+2
  6751  0026DA  D000               	goto	i2l889
  6752  0026DC                     i2l889:
  6753  0026DC  0012               	return		;funcret
  6754  0026DE                     __end_ofi2___ftmul:
  6755                           	opt stack 0
  6756                           pclatu	equ	0xFFB
  6757                           pclath	equ	0xFFA
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           indf0	equ	0xFEF
  6766                           postinc0	equ	0xFEE
  6767                           fsr0h	equ	0xFEA
  6768                           fsr0l	equ	0xFE9
  6769                           wreg	equ	0xFE8
  6770                           indf1	equ	0xFE7
  6771                           fsr1h	equ	0xFE2
  6772                           fsr1l	equ	0xFE1
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _isspace *****************
  6781 ;; Defined at:
  6782 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isspace.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  c               1    wreg     unsigned char 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  c               1    2[COMRAM] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;Total ram usage:        3 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_keyValue
  6806 ;;		_strtod
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text26
  6811  002ED6                     __ptext26:
  6812                           	opt stack 0
  6813  002ED6                     _isspace:
  6814                           	opt stack 22
  6815                           
  6816                           ;incstack = 0
  6817                           ;isspace@c stored from wreg
  6818  002ED6  6E03               	movwf	isspace@c,c
  6819  002ED8  0E01               	movlw	1
  6820  002EDA  6E02               	movwf	_isspace$1325,c
  6821  002EDC  0E20               	movlw	32
  6822  002EDE  1803               	xorwf	isspace@c,w,c
  6823  002EE0  B4D8               	btfsc	status,2,c
  6824  002EE2  D00A               	goto	i2l2485
  6825  002EE4  0E0E               	movlw	14
  6826  002EE6  6003               	cpfslt	isspace@c,c
  6827  002EE8  D004               	goto	i2l2483
  6828  002EEA  0E09               	movlw	9
  6829  002EEC  6003               	cpfslt	isspace@c,c
  6830  002EEE  D004               	goto	i2l2485
  6831  002EF0  D000               	goto	i2l2483
  6832  002EF2                     i2l2483:
  6833  002EF2  0E00               	movlw	0
  6834  002EF4  6E02               	movwf	_isspace$1325,c
  6835  002EF6  D000               	goto	i2l2485
  6836  002EF8                     i2l2485:
  6837  002EF8  C002  F001         	movff	_isspace$1325,??_isspace
  6838  002EFC  3001               	rrcf	??_isspace,w,c
  6839  002EFE  D000               	goto	i2l930
  6840  002F00                     i2l930:
  6841  002F00  0012               	return		;funcret
  6842  002F02                     __end_of_isspace:
  6843                           	opt stack 0
  6844                           pclatu	equ	0xFFB
  6845                           pclath	equ	0xFFA
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           prodh	equ	0xFF4
  6851                           prodl	equ	0xFF3
  6852                           intcon	equ	0xFF2
  6853                           indf0	equ	0xFEF
  6854                           postinc0	equ	0xFEE
  6855                           fsr0h	equ	0xFEA
  6856                           fsr0l	equ	0xFE9
  6857                           wreg	equ	0xFE8
  6858                           indf1	equ	0xFE7
  6859                           fsr1h	equ	0xFE2
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _isdigit *****************
  6869 ;; Defined at:
  6870 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  c               1    wreg     unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  c               1    2[COMRAM] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        3 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; This function calls:
  6891 ;;		Nothing
  6892 ;; This function is called by:
  6893 ;;		_strtod
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text27
  6898  002F4E                     __ptext27:
  6899                           	opt stack 0
  6900  002F4E                     _isdigit:
  6901                           	opt stack 22
  6902                           
  6903                           ;incstack = 0
  6904                           ;isdigit@c stored from wreg
  6905  002F4E  6E03               	movwf	isdigit@c,c
  6906  002F50  0E00               	movlw	0
  6907  002F52  6E02               	movwf	_isdigit$1322,c
  6908  002F54  0E3A               	movlw	58
  6909  002F56  6003               	cpfslt	isdigit@c,c
  6910  002F58  D006               	goto	i2l2605
  6911  002F5A  0E2F               	movlw	47
  6912  002F5C  6403               	cpfsgt	isdigit@c,c
  6913  002F5E  D003               	goto	i2l2605
  6914  002F60  0E01               	movlw	1
  6915  002F62  6E02               	movwf	_isdigit$1322,c
  6916  002F64  D000               	goto	i2l2605
  6917  002F66                     i2l2605:
  6918  002F66  C002  F001         	movff	_isdigit$1322,??_isdigit
  6919  002F6A  3001               	rrcf	??_isdigit,w,c
  6920  002F6C  D000               	goto	i2l925
  6921  002F6E                     i2l925:
  6922  002F6E  0012               	return		;funcret
  6923  002F70                     __end_of_isdigit:
  6924                           	opt stack 0
  6925                           pclatu	equ	0xFFB
  6926                           pclath	equ	0xFFA
  6927                           tblptru	equ	0xFF8
  6928                           tblptrh	equ	0xFF7
  6929                           tblptrl	equ	0xFF6
  6930                           tablat	equ	0xFF5
  6931                           prodh	equ	0xFF4
  6932                           prodl	equ	0xFF3
  6933                           intcon	equ	0xFF2
  6934                           indf0	equ	0xFEF
  6935                           postinc0	equ	0xFEE
  6936                           fsr0h	equ	0xFEA
  6937                           fsr0l	equ	0xFE9
  6938                           wreg	equ	0xFE8
  6939                           indf1	equ	0xFE7
  6940                           fsr1h	equ	0xFE2
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           postdec2	equ	0xFDD
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function ___lmul *****************
  6950 ;; Defined at:
  6951 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;  multiplier      4    0[COMRAM] unsigned long 
  6954 ;;  multiplicand    4    4[COMRAM] unsigned long 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  product         4    8[COMRAM] unsigned long 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  4    0[COMRAM] unsigned long 
  6959 ;; Registers used:
  6960 ;;		wreg, status,2, status,0
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6966 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;Total ram usage:       12 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_strtod
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text28
  6980  002C80                     __ptext28:
  6981                           	opt stack 0
  6982  002C80                     ___lmul:
  6983                           	opt stack 22
  6984                           
  6985                           ;incstack = 0
  6986  002C80  0E00               	movlw	0
  6987  002C82  6E09               	movwf	___lmul@product,c
  6988  002C84  0E00               	movlw	0
  6989  002C86  6E0A               	movwf	___lmul@product+1,c
  6990  002C88  0E00               	movlw	0
  6991  002C8A  6E0B               	movwf	___lmul@product+2,c
  6992  002C8C  0E00               	movlw	0
  6993  002C8E  6E0C               	movwf	___lmul@product+3,c
  6994  002C90  D000               	goto	i2l2491
  6995  002C92                     i2l2491:
  6996  002C92  A001               	btfss	___lmul@multiplier,0,c
  6997  002C94  D009               	goto	i2l2495
  6998  002C96  5005               	movf	___lmul@multiplicand,w,c
  6999  002C98  2609               	addwf	___lmul@product,f,c
  7000  002C9A  5006               	movf	___lmul@multiplicand+1,w,c
  7001  002C9C  220A               	addwfc	___lmul@product+1,f,c
  7002  002C9E  5007               	movf	___lmul@multiplicand+2,w,c
  7003  002CA0  220B               	addwfc	___lmul@product+2,f,c
  7004  002CA2  5008               	movf	___lmul@multiplicand+3,w,c
  7005  002CA4  220C               	addwfc	___lmul@product+3,f,c
  7006  002CA6  D000               	goto	i2l2495
  7007  002CA8                     i2l2495:
  7008  002CA8  90D8               	bcf	status,0,c
  7009  002CAA  3605               	rlcf	___lmul@multiplicand,f,c
  7010  002CAC  3606               	rlcf	___lmul@multiplicand+1,f,c
  7011  002CAE  3607               	rlcf	___lmul@multiplicand+2,f,c
  7012  002CB0  3608               	rlcf	___lmul@multiplicand+3,f,c
  7013  002CB2  90D8               	bcf	status,0,c
  7014  002CB4  3204               	rrcf	___lmul@multiplier+3,f,c
  7015  002CB6  3203               	rrcf	___lmul@multiplier+2,f,c
  7016  002CB8  3202               	rrcf	___lmul@multiplier+1,f,c
  7017  002CBA  3201               	rrcf	___lmul@multiplier,f,c
  7018  002CBC  5001               	movf	___lmul@multiplier,w,c
  7019  002CBE  1002               	iorwf	___lmul@multiplier+1,w,c
  7020  002CC0  1003               	iorwf	___lmul@multiplier+2,w,c
  7021  002CC2  1004               	iorwf	___lmul@multiplier+3,w,c
  7022  002CC4  A4D8               	btfss	status,2,c
  7023  002CC6  D7E5               	goto	i2l2491
  7024  002CC8  C009  F001         	movff	___lmul@product,?___lmul
  7025  002CCC  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7026  002CD0  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7027  002CD4  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7028  002CD8  0012               	return		;funcret
  7029  002CDA                     __end_of___lmul:
  7030                           	opt stack 0
  7031                           pclatu	equ	0xFFB
  7032                           pclath	equ	0xFFA
  7033                           tblptru	equ	0xFF8
  7034                           tblptrh	equ	0xFF7
  7035                           tblptrl	equ	0xFF6
  7036                           tablat	equ	0xFF5
  7037                           prodh	equ	0xFF4
  7038                           prodl	equ	0xFF3
  7039                           intcon	equ	0xFF2
  7040                           indf0	equ	0xFEF
  7041                           postinc0	equ	0xFEE
  7042                           fsr0h	equ	0xFEA
  7043                           fsr0l	equ	0xFE9
  7044                           wreg	equ	0xFE8
  7045                           indf1	equ	0xFE7
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function ___ftneg *****************
  7056 ;; Defined at:
  7057 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  f1              3    0[COMRAM] float 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  3    0[COMRAM] float 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7071 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7074 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7075 ;;Total ram usage:        3 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_strtod
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text29
  7085  002F2A                     __ptext29:
  7086                           	opt stack 0
  7087  002F2A                     ___ftneg:
  7088                           	opt stack 22
  7089                           
  7090                           ;incstack = 0
  7091  002F2A  5001               	movf	___ftneg@f1,w,c
  7092  002F2C  1002               	iorwf	___ftneg@f1+1,w,c
  7093  002F2E  1003               	iorwf	___ftneg@f1+2,w,c
  7094  002F30  B4D8               	btfsc	status,2,c
  7095  002F32  D006               	goto	i2l899
  7096  002F34  0E00               	movlw	0
  7097  002F36  1A01               	xorwf	___ftneg@f1,f,c
  7098  002F38  0E00               	movlw	0
  7099  002F3A  1A02               	xorwf	___ftneg@f1+1,f,c
  7100  002F3C  0E80               	movlw	128
  7101  002F3E  1A03               	xorwf	___ftneg@f1+2,f,c
  7102  002F40                     i2l899:
  7103  002F40  C001  F001         	movff	___ftneg@f1,?___ftneg
  7104  002F44  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7105  002F48  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7106  002F4C  0012               	return		;funcret
  7107  002F4E                     __end_of___ftneg:
  7108                           	opt stack 0
  7109                           pclatu	equ	0xFFB
  7110                           pclath	equ	0xFFA
  7111                           tblptru	equ	0xFF8
  7112                           tblptrh	equ	0xFF7
  7113                           tblptrl	equ	0xFF6
  7114                           tablat	equ	0xFF5
  7115                           prodh	equ	0xFF4
  7116                           prodl	equ	0xFF3
  7117                           intcon	equ	0xFF2
  7118                           indf0	equ	0xFEF
  7119                           postinc0	equ	0xFEE
  7120                           fsr0h	equ	0xFEA
  7121                           fsr0l	equ	0xFE9
  7122                           wreg	equ	0xFE8
  7123                           indf1	equ	0xFE7
  7124                           fsr1h	equ	0xFE2
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function ___ftge *****************
  7134 ;; Defined at:
  7135 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  ff1             3    0[COMRAM] float 
  7138 ;;  ff2             3    3[COMRAM] float 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;		None               void
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7150 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;Total ram usage:        9 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; This function calls:
  7157 ;;		Nothing
  7158 ;; This function is called by:
  7159 ;;		_strtod
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           	psect	text30
  7164  002938                     __ptext30:
  7165                           	opt stack 0
  7166  002938                     ___ftge:
  7167                           	opt stack 22
  7168                           
  7169                           ;incstack = 0
  7170  002938  AE03               	btfss	___ftge@ff1+2,7,c
  7171  00293A  D017               	goto	i2l2613
  7172  00293C  C001  F007         	movff	___ftge@ff1,??___ftge
  7173  002940  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7174  002944  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7175  002948  1E07               	comf	??___ftge,f,c
  7176  00294A  1E08               	comf	??___ftge+1,f,c
  7177  00294C  1E09               	comf	??___ftge+2,f,c
  7178  00294E  2A07               	incf	??___ftge,f,c
  7179  002950  0E00               	movlw	0
  7180  002952  2208               	addwfc	??___ftge+1,f,c
  7181  002954  2209               	addwfc	??___ftge+2,f,c
  7182  002956  0E00               	movlw	0
  7183  002958  2407               	addwf	??___ftge,w,c
  7184  00295A  6E01               	movwf	___ftge@ff1,c
  7185  00295C  0E00               	movlw	0
  7186  00295E  2008               	addwfc	??___ftge+1,w,c
  7187  002960  6E02               	movwf	___ftge@ff1+1,c
  7188  002962  0E80               	movlw	128
  7189  002964  2009               	addwfc	??___ftge+2,w,c
  7190  002966  6E03               	movwf	___ftge@ff1+2,c
  7191  002968  D000               	goto	i2l2613
  7192  00296A                     i2l2613:
  7193  00296A  AE06               	btfss	___ftge@ff2+2,7,c
  7194  00296C  D017               	goto	i2l2617
  7195  00296E  C004  F007         	movff	___ftge@ff2,??___ftge
  7196  002972  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7197  002976  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7198  00297A  1E07               	comf	??___ftge,f,c
  7199  00297C  1E08               	comf	??___ftge+1,f,c
  7200  00297E  1E09               	comf	??___ftge+2,f,c
  7201  002980  2A07               	incf	??___ftge,f,c
  7202  002982  0E00               	movlw	0
  7203  002984  2208               	addwfc	??___ftge+1,f,c
  7204  002986  2209               	addwfc	??___ftge+2,f,c
  7205  002988  0E00               	movlw	0
  7206  00298A  2407               	addwf	??___ftge,w,c
  7207  00298C  6E04               	movwf	___ftge@ff2,c
  7208  00298E  0E00               	movlw	0
  7209  002990  2008               	addwfc	??___ftge+1,w,c
  7210  002992  6E05               	movwf	___ftge@ff2+1,c
  7211  002994  0E80               	movlw	128
  7212  002996  2009               	addwfc	??___ftge+2,w,c
  7213  002998  6E06               	movwf	___ftge@ff2+2,c
  7214  00299A  D000               	goto	i2l2617
  7215  00299C                     i2l2617:
  7216  00299C  0E00               	movlw	0
  7217  00299E  1A01               	xorwf	___ftge@ff1,f,c
  7218  0029A0  0E00               	movlw	0
  7219  0029A2  1A02               	xorwf	___ftge@ff1+1,f,c
  7220  0029A4  0E80               	movlw	128
  7221  0029A6  1A03               	xorwf	___ftge@ff1+2,f,c
  7222  0029A8  0E00               	movlw	0
  7223  0029AA  1A04               	xorwf	___ftge@ff2,f,c
  7224  0029AC  0E00               	movlw	0
  7225  0029AE  1A05               	xorwf	___ftge@ff2+1,f,c
  7226  0029B0  0E80               	movlw	128
  7227  0029B2  1A06               	xorwf	___ftge@ff2+2,f,c
  7228  0029B4  5004               	movf	___ftge@ff2,w,c
  7229  0029B6  5C01               	subwf	___ftge@ff1,w,c
  7230  0029B8  5005               	movf	___ftge@ff2+1,w,c
  7231  0029BA  5802               	subwfb	___ftge@ff1+1,w,c
  7232  0029BC  5006               	movf	___ftge@ff2+2,w,c
  7233  0029BE  5803               	subwfb	___ftge@ff1+2,w,c
  7234  0029C0  B0D8               	btfsc	status,0,c
  7235  0029C2  D002               	goto	i2l2623
  7236  0029C4  90D8               	bcf	status,0,c
  7237  0029C6  D002               	goto	i2l883
  7238  0029C8                     i2l2623:
  7239  0029C8  80D8               	bsf	status,0,c
  7240  0029CA  D000               	goto	i2l883
  7241  0029CC                     i2l883:
  7242  0029CC  0012               	return		;funcret
  7243  0029CE                     __end_of___ftge:
  7244                           	opt stack 0
  7245                           pclatu	equ	0xFFB
  7246                           pclath	equ	0xFFA
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           indf0	equ	0xFEF
  7255                           postinc0	equ	0xFEE
  7256                           fsr0h	equ	0xFEA
  7257                           fsr0l	equ	0xFE9
  7258                           wreg	equ	0xFE8
  7259                           indf1	equ	0xFE7
  7260                           fsr1h	equ	0xFE2
  7261                           fsr1l	equ	0xFE1
  7262                           indf2	equ	0xFDF
  7263                           postinc2	equ	0xFDE
  7264                           postdec2	equ	0xFDD
  7265                           fsr2h	equ	0xFDA
  7266                           fsr2l	equ	0xFD9
  7267                           status	equ	0xFD8
  7268                           
  7269 ;; *************** function ___ftdiv *****************
  7270 ;; Defined at:
  7271 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  f1              3    8[COMRAM] float 
  7274 ;;  f2              3   11[COMRAM] float 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  f3              3   18[COMRAM] float 
  7277 ;;  sign            1   22[COMRAM] unsigned char 
  7278 ;;  exp             1   21[COMRAM] unsigned char 
  7279 ;;  cntr            1   17[COMRAM] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  3    8[COMRAM] float 
  7282 ;; Registers used:
  7283 ;;		wreg, status,2, status,0, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7289 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;Total ram usage:       15 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    1
  7296 ;; This function calls:
  7297 ;;		i2___ftpack
  7298 ;; This function is called by:
  7299 ;;		_strtod
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text31
  7304  0026DE                     __ptext31:
  7305                           	opt stack 0
  7306  0026DE                     ___ftdiv:
  7307                           	opt stack 21
  7308                           
  7309                           ;incstack = 0
  7310  0026DE  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  7311  0026E2  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7312  0026E4  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7313  0026E6  340A               	rlcf	___ftdiv@f1+1,w,c
  7314  0026E8  360F               	rlcf	??___ftdiv& (0+255),f,c
  7315  0026EA  E301               	bnc	u260_41
  7316  0026EC  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7317  0026EE                     u260_41:
  7318  0026EE  500F               	movf	??___ftdiv,w,c
  7319  0026F0  6E16               	movwf	___ftdiv@exp,c
  7320  0026F2  5016               	movf	___ftdiv@exp,w,c
  7321  0026F4  A4D8               	btfss	status,2,c
  7322  0026F6  D002               	goto	i2l2557
  7323  0026F8  D00E               	goto	i2l2559
  7324  0026FA  D061               	goto	i2l874
  7325  0026FC                     i2l2557:
  7326  0026FC  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  7327  002700  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7328  002702  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7329  002704  340D               	rlcf	___ftdiv@f2+1,w,c
  7330  002706  360F               	rlcf	??___ftdiv& (0+255),f,c
  7331  002708  E301               	bnc	u262_41
  7332  00270A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7333  00270C                     u262_41:
  7334  00270C  500F               	movf	??___ftdiv,w,c
  7335  00270E  6E17               	movwf	___ftdiv@sign,c
  7336  002710  5017               	movf	___ftdiv@sign,w,c
  7337  002712  A4D8               	btfss	status,2,c
  7338  002714  D007               	goto	i2l2563
  7339  002716                     i2l2559:
  7340  002716  0E00               	movlw	0
  7341  002718  6E09               	movwf	?___ftdiv,c
  7342  00271A  0E00               	movlw	0
  7343  00271C  6E0A               	movwf	?___ftdiv+1,c
  7344  00271E  0E00               	movlw	0
  7345  002720  6E0B               	movwf	?___ftdiv+2,c
  7346  002722  D04D               	goto	i2l874
  7347  002724                     i2l2563:
  7348  002724  0E00               	movlw	0
  7349  002726  6E13               	movwf	___ftdiv@f3,c
  7350  002728  0E00               	movlw	0
  7351  00272A  6E14               	movwf	___ftdiv@f3+1,c
  7352  00272C  0E00               	movlw	0
  7353  00272E  6E15               	movwf	___ftdiv@f3+2,c
  7354  002730  5017               	movf	___ftdiv@sign,w,c
  7355  002732  0F89               	addlw	137
  7356  002734  5E16               	subwf	___ftdiv@exp,f,c
  7357  002736  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  7358  00273A  500E               	movf	___ftdiv@f2+2,w,c
  7359  00273C  1A17               	xorwf	___ftdiv@sign,f,c
  7360  00273E  0E80               	movlw	128
  7361  002740  1617               	andwf	___ftdiv@sign,f,c
  7362  002742  8E0A               	bsf	___ftdiv@f1+1,7,c
  7363  002744  0EFF               	movlw	255
  7364  002746  1609               	andwf	___ftdiv@f1,f,c
  7365  002748  0EFF               	movlw	255
  7366  00274A  160A               	andwf	___ftdiv@f1+1,f,c
  7367  00274C  0E00               	movlw	0
  7368  00274E  160B               	andwf	___ftdiv@f1+2,f,c
  7369  002750  8E0D               	bsf	___ftdiv@f2+1,7,c
  7370  002752  0EFF               	movlw	255
  7371  002754  160C               	andwf	___ftdiv@f2,f,c
  7372  002756  0EFF               	movlw	255
  7373  002758  160D               	andwf	___ftdiv@f2+1,f,c
  7374  00275A  0E00               	movlw	0
  7375  00275C  160E               	andwf	___ftdiv@f2+2,f,c
  7376  00275E  0E18               	movlw	24
  7377  002760  6E12               	movwf	___ftdiv@cntr,c
  7378  002762  D000               	goto	i2l2583
  7379  002764                     i2l2583:
  7380  002764  90D8               	bcf	status,0,c
  7381  002766  3613               	rlcf	___ftdiv@f3,f,c
  7382  002768  3614               	rlcf	___ftdiv@f3+1,f,c
  7383  00276A  3615               	rlcf	___ftdiv@f3+2,f,c
  7384  00276C  500C               	movf	___ftdiv@f2,w,c
  7385  00276E  5C09               	subwf	___ftdiv@f1,w,c
  7386  002770  500D               	movf	___ftdiv@f2+1,w,c
  7387  002772  580A               	subwfb	___ftdiv@f1+1,w,c
  7388  002774  500E               	movf	___ftdiv@f2+2,w,c
  7389  002776  580B               	subwfb	___ftdiv@f1+2,w,c
  7390  002778  A0D8               	btfss	status,0,c
  7391  00277A  D007               	goto	i2l877
  7392  00277C  500C               	movf	___ftdiv@f2,w,c
  7393  00277E  5E09               	subwf	___ftdiv@f1,f,c
  7394  002780  500D               	movf	___ftdiv@f2+1,w,c
  7395  002782  5A0A               	subwfb	___ftdiv@f1+1,f,c
  7396  002784  500E               	movf	___ftdiv@f2+2,w,c
  7397  002786  5A0B               	subwfb	___ftdiv@f1+2,f,c
  7398  002788  8013               	bsf	___ftdiv@f3,0,c
  7399  00278A                     i2l877:
  7400  00278A  90D8               	bcf	status,0,c
  7401  00278C  3609               	rlcf	___ftdiv@f1,f,c
  7402  00278E  360A               	rlcf	___ftdiv@f1+1,f,c
  7403  002790  360B               	rlcf	___ftdiv@f1+2,f,c
  7404  002792  2E12               	decfsz	___ftdiv@cntr,f,c
  7405  002794  D7E7               	goto	i2l2583
  7406  002796  D000               	goto	i2l2593
  7407  002798                     i2l2593:
  7408  002798  C013  F001         	movff	___ftdiv@f3,i2___ftpack@arg
  7409  00279C  C014  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
  7410  0027A0  C015  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
  7411  0027A4  C016  F004         	movff	___ftdiv@exp,i2___ftpack@exp
  7412  0027A8  C017  F005         	movff	___ftdiv@sign,i2___ftpack@sign
  7413  0027AC  ECE0  F013         	call	i2___ftpack	;wreg free
  7414  0027B0  C001  F009         	movff	?i2___ftpack,?___ftdiv
  7415  0027B4  C002  F00A         	movff	?i2___ftpack+1,?___ftdiv+1
  7416  0027B8  C003  F00B         	movff	?i2___ftpack+2,?___ftdiv+2
  7417  0027BC  D000               	goto	i2l874
  7418  0027BE                     i2l874:
  7419  0027BE  0012               	return		;funcret
  7420  0027C0                     __end_of___ftdiv:
  7421                           	opt stack 0
  7422                           pclatu	equ	0xFFB
  7423                           pclath	equ	0xFFA
  7424                           tblptru	equ	0xFF8
  7425                           tblptrh	equ	0xFF7
  7426                           tblptrl	equ	0xFF6
  7427                           tablat	equ	0xFF5
  7428                           prodh	equ	0xFF4
  7429                           prodl	equ	0xFF3
  7430                           intcon	equ	0xFF2
  7431                           indf0	equ	0xFEF
  7432                           postinc0	equ	0xFEE
  7433                           fsr0h	equ	0xFEA
  7434                           fsr0l	equ	0xFE9
  7435                           wreg	equ	0xFE8
  7436                           indf1	equ	0xFE7
  7437                           fsr1h	equ	0xFE2
  7438                           fsr1l	equ	0xFE1
  7439                           indf2	equ	0xFDF
  7440                           postinc2	equ	0xFDE
  7441                           postdec2	equ	0xFDD
  7442                           fsr2h	equ	0xFDA
  7443                           fsr2l	equ	0xFD9
  7444                           status	equ	0xFD8
  7445                           
  7446 ;; *************** function ___altoft *****************
  7447 ;; Defined at:
  7448 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  c               4    8[COMRAM] long 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  sign            1   17[COMRAM] unsigned char 
  7453 ;;  exp             1   16[COMRAM] unsigned char 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  3    8[COMRAM] float 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:       10 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:    1
  7470 ;; This function calls:
  7471 ;;		i2___ftpack
  7472 ;; This function is called by:
  7473 ;;		_strtod
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text32
  7478  002ACC                     __ptext32:
  7479                           	opt stack 0
  7480  002ACC                     ___altoft:
  7481                           	opt stack 21
  7482                           
  7483                           ;incstack = 0
  7484  002ACC  0E00               	movlw	0
  7485  002ACE  6E12               	movwf	___altoft@sign,c
  7486  002AD0  0E8E               	movlw	142
  7487  002AD2  6E11               	movwf	___altoft@exp,c
  7488  002AD4  AE0C               	btfss	___altoft@c+3,7,c
  7489  002AD6  D012               	goto	i2l2545
  7490  002AD8  1E0C               	comf	___altoft@c+3,f,c
  7491  002ADA  1E0B               	comf	___altoft@c+2,f,c
  7492  002ADC  1E0A               	comf	___altoft@c+1,f,c
  7493  002ADE  6C09               	negf	___altoft@c,c
  7494  002AE0  0E00               	movlw	0
  7495  002AE2  220A               	addwfc	___altoft@c+1,f,c
  7496  002AE4  220B               	addwfc	___altoft@c+2,f,c
  7497  002AE6  220C               	addwfc	___altoft@c+3,f,c
  7498  002AE8  0E01               	movlw	1
  7499  002AEA  6E12               	movwf	___altoft@sign,c
  7500  002AEC  D007               	goto	i2l2545
  7501  002AEE                     i2l2543:
  7502  002AEE  90D8               	bcf	status,0,c
  7503  002AF0  320C               	rrcf	___altoft@c+3,f,c
  7504  002AF2  320B               	rrcf	___altoft@c+2,f,c
  7505  002AF4  320A               	rrcf	___altoft@c+1,f,c
  7506  002AF6  3209               	rrcf	___altoft@c,f,c
  7507  002AF8  2A11               	incf	___altoft@exp,f,c
  7508  002AFA  D000               	goto	i2l2545
  7509  002AFC                     i2l2545:
  7510  002AFC  0E00               	movlw	0
  7511  002AFE  1409               	andwf	___altoft@c,w,c
  7512  002B00  6E0D               	movwf	??___altoft& (0+255),c
  7513  002B02  0E00               	movlw	0
  7514  002B04  140A               	andwf	___altoft@c+1,w,c
  7515  002B06  6E0E               	movwf	(??___altoft+1)& (0+255),c
  7516  002B08  0E00               	movlw	0
  7517  002B0A  140B               	andwf	___altoft@c+2,w,c
  7518  002B0C  6E0F               	movwf	(??___altoft+2)& (0+255),c
  7519  002B0E  0EFF               	movlw	255
  7520  002B10  140C               	andwf	___altoft@c+3,w,c
  7521  002B12  6E10               	movwf	(??___altoft+3)& (0+255),c
  7522  002B14  500D               	movf	??___altoft,w,c
  7523  002B16  100E               	iorwf	??___altoft+1,w,c
  7524  002B18  100F               	iorwf	??___altoft+2,w,c
  7525  002B1A  1010               	iorwf	??___altoft+3,w,c
  7526  002B1C  A4D8               	btfss	status,2,c
  7527  002B1E  D7E7               	goto	i2l2543
  7528  002B20  C009  F001         	movff	___altoft@c,i2___ftpack@arg
  7529  002B24  C00A  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
  7530  002B28  C00B  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
  7531  002B2C  C011  F004         	movff	___altoft@exp,i2___ftpack@exp
  7532  002B30  C012  F005         	movff	___altoft@sign,i2___ftpack@sign
  7533  002B34  ECE0  F013         	call	i2___ftpack	;wreg free
  7534  002B38  C001  F009         	movff	?i2___ftpack,?___altoft
  7535  002B3C  C002  F00A         	movff	?i2___ftpack+1,?___altoft+1
  7536  002B40  C003  F00B         	movff	?i2___ftpack+2,?___altoft+2
  7537  002B44  D000               	goto	i2l523
  7538  002B46                     i2l523:
  7539  002B46  0012               	return		;funcret
  7540  002B48                     __end_of___altoft:
  7541                           	opt stack 0
  7542                           pclatu	equ	0xFFB
  7543                           pclath	equ	0xFFA
  7544                           tblptru	equ	0xFF8
  7545                           tblptrh	equ	0xFF7
  7546                           tblptrl	equ	0xFF6
  7547                           tablat	equ	0xFF5
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           intcon	equ	0xFF2
  7551                           indf0	equ	0xFEF
  7552                           postinc0	equ	0xFEE
  7553                           fsr0h	equ	0xFEA
  7554                           fsr0l	equ	0xFE9
  7555                           wreg	equ	0xFE8
  7556                           indf1	equ	0xFE7
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function i2___ftpack *****************
  7567 ;; Defined at:
  7568 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  arg             3    0[COMRAM] unsigned um
  7571 ;;  exp             1    3[COMRAM] unsigned char 
  7572 ;;  sign            1    4[COMRAM] unsigned char 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  3    0[COMRAM] float 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7584 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;Total ram usage:        8 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; This function calls:
  7591 ;;		Nothing
  7592 ;; This function is called by:
  7593 ;;		___altoft
  7594 ;;		___ftdiv
  7595 ;;		i2___ftmul
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text33
  7600  0027C0                     __ptext33:
  7601                           	opt stack 0
  7602  0027C0                     i2___ftpack:
  7603                           	opt stack 21
  7604                           
  7605                           ;incstack = 0
  7606  0027C0  5004               	movf	i2___ftpack@exp,w,c
  7607  0027C2  B4D8               	btfsc	status,2,c
  7608  0027C4  D005               	goto	i2l2441
  7609  0027C6  5001               	movf	i2___ftpack@arg,w,c
  7610  0027C8  1002               	iorwf	i2___ftpack@arg+1,w,c
  7611  0027CA  1003               	iorwf	i2___ftpack@arg+2,w,c
  7612  0027CC  A4D8               	btfss	status,2,c
  7613  0027CE  D00E               	goto	i2l2447
  7614  0027D0                     i2l2441:
  7615  0027D0  0E00               	movlw	0
  7616  0027D2  6E01               	movwf	?i2___ftpack,c
  7617  0027D4  0E00               	movlw	0
  7618  0027D6  6E02               	movwf	?i2___ftpack+1,c
  7619  0027D8  0E00               	movlw	0
  7620  0027DA  6E03               	movwf	?i2___ftpack+2,c
  7621  0027DC  D053               	goto	i2l802
  7622  0027DE  D006               	goto	i2l2447
  7623  0027E0                     i2l2445:
  7624  0027E0  2A04               	incf	i2___ftpack@exp,f,c
  7625  0027E2  90D8               	bcf	status,0,c
  7626  0027E4  3203               	rrcf	i2___ftpack@arg+2,f,c
  7627  0027E6  3202               	rrcf	i2___ftpack@arg+1,f,c
  7628  0027E8  3201               	rrcf	i2___ftpack@arg,f,c
  7629  0027EA  D000               	goto	i2l2447
  7630  0027EC                     i2l2447:
  7631  0027EC  0E00               	movlw	0
  7632  0027EE  1401               	andwf	i2___ftpack@arg,w,c
  7633  0027F0  6E06               	movwf	??i2___ftpack& (0+255),c
  7634  0027F2  0E00               	movlw	0
  7635  0027F4  1402               	andwf	i2___ftpack@arg+1,w,c
  7636  0027F6  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  7637  0027F8  0EFE               	movlw	254
  7638  0027FA  1403               	andwf	i2___ftpack@arg+2,w,c
  7639  0027FC  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  7640  0027FE  5006               	movf	??i2___ftpack,w,c
  7641  002800  1007               	iorwf	??i2___ftpack+1,w,c
  7642  002802  1008               	iorwf	??i2___ftpack+2,w,c
  7643  002804  B4D8               	btfsc	status,2,c
  7644  002806  D00E               	goto	i2l2453
  7645  002808  D7EB               	goto	i2l2445
  7646  00280A  D00C               	goto	i2l2453
  7647  00280C                     i2l2449:
  7648  00280C  2A04               	incf	i2___ftpack@exp,f,c
  7649  00280E  0E01               	movlw	1
  7650  002810  2601               	addwf	i2___ftpack@arg,f,c
  7651  002812  0E00               	movlw	0
  7652  002814  2202               	addwfc	i2___ftpack@arg+1,f,c
  7653  002816  0E00               	movlw	0
  7654  002818  2203               	addwfc	i2___ftpack@arg+2,f,c
  7655  00281A  90D8               	bcf	status,0,c
  7656  00281C  3203               	rrcf	i2___ftpack@arg+2,f,c
  7657  00281E  3202               	rrcf	i2___ftpack@arg+1,f,c
  7658  002820  3201               	rrcf	i2___ftpack@arg,f,c
  7659  002822  D000               	goto	i2l2453
  7660  002824                     i2l2453:
  7661  002824  0E00               	movlw	0
  7662  002826  1401               	andwf	i2___ftpack@arg,w,c
  7663  002828  6E06               	movwf	??i2___ftpack& (0+255),c
  7664  00282A  0E00               	movlw	0
  7665  00282C  1402               	andwf	i2___ftpack@arg+1,w,c
  7666  00282E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  7667  002830  0EFF               	movlw	255
  7668  002832  1403               	andwf	i2___ftpack@arg+2,w,c
  7669  002834  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  7670  002836  5006               	movf	??i2___ftpack,w,c
  7671  002838  1007               	iorwf	??i2___ftpack+1,w,c
  7672  00283A  1008               	iorwf	??i2___ftpack+2,w,c
  7673  00283C  B4D8               	btfsc	status,2,c
  7674  00283E  D008               	goto	i2l2457
  7675  002840  D7E5               	goto	i2l2449
  7676  002842  D006               	goto	i2l2457
  7677  002844                     i2l2455:
  7678  002844  0604               	decf	i2___ftpack@exp,f,c
  7679  002846  90D8               	bcf	status,0,c
  7680  002848  3601               	rlcf	i2___ftpack@arg,f,c
  7681  00284A  3602               	rlcf	i2___ftpack@arg+1,f,c
  7682  00284C  3603               	rlcf	i2___ftpack@arg+2,f,c
  7683  00284E  D000               	goto	i2l2457
  7684  002850                     i2l2457:
  7685  002850  BE02               	btfsc	i2___ftpack@arg+1,7,c
  7686  002852  D004               	goto	i2l813
  7687  002854  0E02               	movlw	2
  7688  002856  6004               	cpfslt	i2___ftpack@exp,c
  7689  002858  D7F5               	goto	i2l2455
  7690  00285A  D000               	goto	i2l813
  7691  00285C                     i2l813:
  7692  00285C  B004               	btfsc	i2___ftpack@exp,0,c
  7693  00285E  D002               	goto	i2l2463
  7694  002860  9E02               	bcf	i2___ftpack@arg+1,7,c
  7695  002862  D000               	goto	i2l2463
  7696  002864                     i2l2463:
  7697  002864  90D8               	bcf	status,0,c
  7698  002866  3204               	rrcf	i2___ftpack@exp,f,c
  7699  002868  5004               	movf	i2___ftpack@exp,w,c
  7700  00286A  1203               	iorwf	i2___ftpack@arg+2,f,c
  7701  00286C  5005               	movf	i2___ftpack@sign,w,c
  7702  00286E  B4D8               	btfsc	status,2,c
  7703  002870  D002               	goto	i2l2469
  7704  002872  8E03               	bsf	i2___ftpack@arg+2,7,c
  7705  002874  D000               	goto	i2l2469
  7706  002876                     i2l2469:
  7707  002876  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  7708  00287A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  7709  00287E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  7710  002882  D000               	goto	i2l802
  7711  002884                     i2l802:
  7712  002884  0012               	return		;funcret
  7713  002886                     __end_ofi2___ftpack:
  7714                           	opt stack 0
  7715                           pclatu	equ	0xFFB
  7716                           pclath	equ	0xFFA
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           intcon	equ	0xFF2
  7724                           indf0	equ	0xFEF
  7725                           postinc0	equ	0xFEE
  7726                           fsr0h	equ	0xFEA
  7727                           fsr0l	equ	0xFE9
  7728                           wreg	equ	0xFE8
  7729                           indf1	equ	0xFE7
  7730                           fsr1h	equ	0xFE2
  7731                           fsr1l	equ	0xFE1
  7732                           indf2	equ	0xFDF
  7733                           postinc2	equ	0xFDE
  7734                           postdec2	equ	0xFDD
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _strcmp *****************
  7740 ;; Defined at:
  7741 ;;		line 33 in file "/opt/microchip/xc8/v1.34/sources/common/strcmp.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  7744 ;;		 -> key(5), 
  7745 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  7746 ;;		 -> STR_27(3), STR_26(3), STR_25(3), STR_24(3), 
  7747 ;;		 -> STR_23(3), STR_22(3), STR_21(4), STR_20(4), 
  7748 ;;		 -> STR_19(4), STR_18(4), STR_17(3), STR_16(3), 
  7749 ;;		 -> STR_15(3), STR_14(3), STR_11(3), STR_10(3), 
  7750 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(3), 
  7751 ;;		 -> STR_5(4), STR_4(4), 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  r               1    5[COMRAM] char 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  2    0[COMRAM] int 
  7756 ;; Registers used:
  7757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;Total ram usage:        6 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; This function calls:
  7770 ;;		Nothing
  7771 ;; This function is called by:
  7772 ;;		_keyValue
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           	psect	text34
  7777  002D8A                     __ptext34:
  7778                           	opt stack 0
  7779  002D8A                     _strcmp:
  7780                           	opt stack 23
  7781                           
  7782                           ;incstack = 0
  7783  002D8A  D005               	goto	i2l2693
  7784  002D8C                     i2l2691:
  7785  002D8C  4A01               	infsnz	strcmp@s1,f,c
  7786  002D8E  2A02               	incf	strcmp@s1+1,f,c
  7787  002D90  4A03               	infsnz	strcmp@s2,f,c
  7788  002D92  2A04               	incf	strcmp@s2+1,f,c
  7789  002D94  D000               	goto	i2l2693
  7790  002D96                     i2l2693:
  7791  002D96  C001  FFD9         	movff	strcmp@s1,fsr2l
  7792  002D9A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  7793  002D9E  50DF               	movf	indf2,w,c
  7794  002DA0  6E05               	movwf	??_strcmp& (0+255),c
  7795  002DA2  C003  FFF6         	movff	strcmp@s2,tblptrl
  7796  002DA6  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  7797  002DAA                     	if	0	;tblptru may be non-zero
  7798  002DAA                     	endif
  7799  002DAA                     	if	0	;tblptru may be non-zero
  7800  002DAA                     	endif
  7801  002DAA  0008               	tblrd		*
  7802  002DAC  50F5               	movf	tablat,w,c
  7803  002DAE  0800               	sublw	0
  7804  002DB0  2405               	addwf	??_strcmp,w,c
  7805  002DB2  6E06               	movwf	strcmp@r,c
  7806  002DB4  5006               	movf	strcmp@r,w,c
  7807  002DB6  A4D8               	btfss	status,2,c
  7808  002DB8  D009               	goto	i2l2697
  7809  002DBA  C001  FFD9         	movff	strcmp@s1,fsr2l
  7810  002DBE  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  7811  002DC2  50DF               	movf	indf2,w,c
  7812  002DC4  B4D8               	btfsc	status,2,c
  7813  002DC6  D002               	goto	i2l2697
  7814  002DC8  D7E1               	goto	i2l2691
  7815  002DCA  D000               	goto	i2l2697
  7816  002DCC                     i2l2697:
  7817  002DCC  5006               	movf	strcmp@r,w,c
  7818  002DCE  6E01               	movwf	?_strcmp,c
  7819  002DD0  6A02               	clrf	?_strcmp+1,c
  7820  002DD2  BE01               	btfsc	?_strcmp,7,c
  7821  002DD4  0602               	decf	?_strcmp+1,f,c
  7822  002DD6  D000               	goto	i2l1057
  7823  002DD8                     i2l1057:
  7824  002DD8  0012               	return		;funcret
  7825  002DDA                     __end_of_strcmp:
  7826                           	opt stack 0
  7827                           pclatu	equ	0xFFB
  7828                           pclath	equ	0xFFA
  7829                           tblptru	equ	0xFF8
  7830                           tblptrh	equ	0xFF7
  7831                           tblptrl	equ	0xFF6
  7832                           tablat	equ	0xFF5
  7833                           prodh	equ	0xFF4
  7834                           prodl	equ	0xFF3
  7835                           intcon	equ	0xFF2
  7836                           indf0	equ	0xFEF
  7837                           postinc0	equ	0xFEE
  7838                           fsr0h	equ	0xFEA
  7839                           fsr0l	equ	0xFE9
  7840                           wreg	equ	0xFE8
  7841                           indf1	equ	0xFE7
  7842                           fsr1h	equ	0xFE2
  7843                           fsr1l	equ	0xFE1
  7844                           indf2	equ	0xFDF
  7845                           postinc2	equ	0xFDE
  7846                           postdec2	equ	0xFDD
  7847                           fsr2h	equ	0xFDA
  7848                           fsr2l	equ	0xFD9
  7849                           status	equ	0xFD8
  7850                           pclatu	equ	0xFFB
  7851                           pclath	equ	0xFFA
  7852                           tblptru	equ	0xFF8
  7853                           tblptrh	equ	0xFF7
  7854                           tblptrl	equ	0xFF6
  7855                           tablat	equ	0xFF5
  7856                           prodh	equ	0xFF4
  7857                           prodl	equ	0xFF3
  7858                           intcon	equ	0xFF2
  7859                           indf0	equ	0xFEF
  7860                           postinc0	equ	0xFEE
  7861                           fsr0h	equ	0xFEA
  7862                           fsr0l	equ	0xFE9
  7863                           wreg	equ	0xFE8
  7864                           indf1	equ	0xFE7
  7865                           fsr1h	equ	0xFE2
  7866                           fsr1l	equ	0xFE1
  7867                           indf2	equ	0xFDF
  7868                           postinc2	equ	0xFDE
  7869                           postdec2	equ	0xFDD
  7870                           fsr2h	equ	0xFDA
  7871                           fsr2l	equ	0xFD9
  7872                           status	equ	0xFD8
  7873                           
  7874                           	psect	rparam
  7875  0000                     pclatu	equ	0xFFB
  7876                           pclath	equ	0xFFA
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           indf0	equ	0xFEF
  7885                           postinc0	equ	0xFEE
  7886                           fsr0h	equ	0xFEA
  7887                           fsr0l	equ	0xFE9
  7888                           wreg	equ	0xFE8
  7889                           indf1	equ	0xFE7
  7890                           fsr1h	equ	0xFE2
  7891                           fsr1l	equ	0xFE1
  7892                           indf2	equ	0xFDF
  7893                           postinc2	equ	0xFDE
  7894                           postdec2	equ	0xFDD
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    0
    Data        1
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62      96
    BANK0           128     53      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), 
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> key(COMRAM[5]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 10
		 -> value(COMRAM[10]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), keyValue@str_end(COMRAM[2]), 

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), SPIDisassembleDouble@dub(BANK0[3]), SPIReassembleDouble@dub(BANK0[3]), 

    MReceiveStrSPI@str	PTR unsigned char  size(2) Largest target is 4
		 -> DoubleSPIM(BANK0[4]), 

    keyValue@str_end	PTR unsigned char  size(2) Largest target is 10
		 -> value(COMRAM[10]), 

    keyValue@str	PTR unsigned char  size(2) Largest target is 30
		 -> received(BANK0[30]), 

    SerTxStr@string	PTR unsigned char  size(2) Largest target is 36
		 -> STR_28(CODE[4]), STR_13(CODE[6]), STR_12(CODE[4]), STR_3(CODE[11]), 
		 -> value(COMRAM[10]), STR_2(CODE[6]), key(COMRAM[5]), STR_1(CODE[36]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_RCInt
    _RCInt->_keyValue
    _keyValue->_strtod
    i2_SerTxStr->i2_SerTx
    _strtod->___ftdiv
    _strtod->i2___ftmul
    i2___ftmul->i2___ftpack
    ___ftdiv->i2___ftpack
    ___altoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_MReceiveStrSPI
    _SerInit->_SerTxStr
    _SerTxStr->_SerTx
    _SPIDisassembleDouble->_MGenerateChecksum
    _MSendSPI->_Delay10TCYx
    _MReceiveStrSPI->_breakDouble
    _breakDouble->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10026
                                             52 BANK0      1     1      0
                        _Delay10TCYx
                     _MReceiveStrSPI
                           _MSendSPI
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _checksum
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     401
                            _SerInit
 ---------------------------------------------------------------------------------
 (2) _SerInit                                              0     0      0     401
                           _SerTxStr
 ---------------------------------------------------------------------------------
 (3) _SerTxStr                                             2     0      2     401
                                              1 BANK0      2     0      2
                              _SerTx
 ---------------------------------------------------------------------------------
 (1) _checksum                                             6     6      0     136
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     324
                                              2 BANK0      3     0      3
                  _MGenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _MGenerateChecksum                                    2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MSendSPI                                             4     3      1    1077
                                              1 BANK0      4     3      1
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (1) _MReceiveStrSPI                                       5     2      3    6777
                                             47 BANK0      5     2      3
                        _Delay10TCYx
                        _MReceiveSPI
                _SPIReassembleDouble
                        _breakDouble
 ---------------------------------------------------------------------------------
 (2) _breakDouble                                          9     6      3    5063
                                             38 BANK0      9     6      3
                _SPIReassembleDouble (ARG)
                              _SerTx
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     752
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     761
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     305
                                             23 BANK0     15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2626
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1798
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _SerTx                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      89
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _MReceiveSPI                                          1     1      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Delay10TCYx                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    8840
                                             48 COMRAM    14    14      0
                              _RCInt
 ---------------------------------------------------------------------------------
 (6) _RCInt                                                2     2      0    8840
                                             46 COMRAM     2     2      0
                           _keyValue
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (7) _keyValue                                            11     7      4    8661
                                             35 COMRAM    11     7      4
                            _isspace
                             _strcmp
                             _strtod
                            i2_SerTx
                         i2_SerTxStr
 ---------------------------------------------------------------------------------
 (8) i2_SerTxStr                                           2     0      2     275
                                              1 COMRAM     2     0      2
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (7) i2_SerTx                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _strtod                                              12     8      4    4885
                                             23 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6     895
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _isspace                                              3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     278
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1037
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___altoft                                            10     6      4     656
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) _strcmp                                               6     2      4    2423
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _MReceiveStrSPI
     _Delay10TCYx
     _MReceiveSPI
     _SPIReassembleDouble
     _breakDouble
       _SPIReassembleDouble (ARG)
       _SerTx (ARG)
       ___ftmul (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
       ___lwdiv (ARG)
       ___lwmod (ARG)
   _MSendSPI
     _Delay10TCYx
   _SPIDisassembleDouble
     _MGenerateChecksum
   _SPIReassembleDouble
   _checksum
   _initialize
     _SerInit
       _SerTxStr
         _SerTx

 _ISR (ROOT)
   _RCInt
     _keyValue
       _isspace
       _strcmp
       _strtod
         ___altoft
           i2___ftpack
         ___ftdiv
           i2___ftpack
         ___ftge
         ___ftneg
         ___lmul
         _isdigit
         _isspace
         i2___ftmul
           i2___ftpack
       i2_SerTx
       i2_SerTxStr
         i2_SerTx
     i2_SerTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      5F       5       74.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      60       1       75.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BF      34        0.0%
DATA                 0      0      BF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Oct 12 02:43:04 2015

                 ___altoft@exp 0011                  ___altoft@sign 0012                             l50 2058  
                           l28 2FA6                             l49 2006                             _Kd 003F  
                           _Ki 0042                             _Kp 0045                     i2___ftpack 27C0  
                          l302 15FE                            l306 1640                            l271 135C  
                          l360 2F7C                            l354 2D24                            l363 2F84  
                          l267 131A                            l357 2D30                            l349 2CFA  
                          l382 2E60                            l374 28F0                            l367 2892  
                          l712 2F9A                            l802 25E4                            l379 2936  
                          l388 2ACA                            l813 25AC                            l397 2EA0  
                          l910 24C4                            l889 225C                            _ISR 0008  
                          _key 005C                            prod 000FF3                            wreg 000FE8  
                         ?_ISR 0001                   ___ftdiv@cntr 0012                   ___ftdiv@sign 0017  
                 __CFG_WDT$OFF 000000                           l1022 2A46                           l1032 2C1C  
                         l4001 2A6A                           l4101 11CA                           l4015 2AC6  
                         l4007 2A88                           l4111 11F6                           l4121 1236  
                         l4105 11D8                           l4203 13D6                           l4131 1262  
                         l4051 10B2                           l4035 1070                           l4213 1402  
                         l4141 12A2                           l4125 1244                           l4061 10F2  
                         l4303 15DE                           l4223 1442                           l4207 13E4  
                         l4151 12CE                           l4071 111E                           l4313 160E  
                         l4233 146E                           l4161 12FA                           l4145 12B0  
                         l4081 115E                           l4065 1100                           l4153 12DC  
                         l4243 14AE                           l4227 1450                           l4171 132A  
                         l4091 118A                           l4317 161C                           l4253 14DA  
                         l4085 116C                           l4181 1360                           l4263 151A  
                         l4247 14BC                           l4175 1338                           l3801 21F2  
                         l2921 23BE                           l4273 1546                           l4193 1396  
                         l3731 24F6                           l3811 2236                           l3803 21FA  
                         l4283 1586                           l4267 1528                           l3741 258C  
                         l3733 2506                           l3821 29EC                           l4293 15B2  
                         l3743 259C                           l3735 2538                           l3727 24E0  
                         l3807 221A                           l2951 2486                           l2943 2456  
                         l3823 29FA                           l4287 1594                           l4295 15C0  
                         l2945 245E                           l2953 2494                           l3833 2A36  
                         l3825 2A04                           l3841 2BCE                           l3913 2E7C  
                         l3761 2C28                           l3755 25D6                           l3739 255A  
                         l2939 2442                           l3843 2BDC                           l3749 25B8  
                         l3773 212C                           l2957 24B2                           l2949 2474  
                         l3845 2BE6                           l3909 2E6E                           l3765 2C56  
                         l3775 2152                           l3919 2E9A                           l3793 21B6  
                         l3849 2C0C                           l3779 2166                           l3963 28AC  
                         l3939 2D06                           l3797 21D6                           l3981 2900  
                         l3973 28E2                           l3895 2F8A                           l3991 292C  
                         l3959 28A2                           l3985 290A                           l3969 28CA  
                         l3997 2A5C                           STR_1 1001                           STR_2 1030  
                         STR_3 1025                           STR_4 103E                           STR_5 1046  
                         STR_6 1050                           STR_7 105C                           STR_8 104D  
                         STR_9 1059                           _AZEL 00DE                           u3221 23AA  
                         u3240 23E4                           u3245 23DA                           u4811 2118  
                         u4831 2142                           i2l28 2FB4                           u4780 2C4A  
                         u4790 2C78                           u5727 2F8C                           u4787 2C40  
                         u4797 2C6E                           i2l97 2264                           _main 1064  
                 ___ftpack@arg 0080                   ___ftpack@exp 0083                           fsr0h 000FEA  
                         fsr1h 000FE2                __end_ofi2_SerTx 2FBA                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 0018              MReceiveSPI@tempCH 0080                   ___ftmul@cntr 0095  
                 i2___ftmul@f1 0009                   i2___ftmul@f2 000C                   ___param_bank 000010  
                 ___ftmul@sign 0096                    _MReceiveSPI 2F70                          ??_ISR 0031  
                  _Delay10TCYx 2F86                   ___fttol@exp1 00A5                __end_of_SerInit 2F2A  
                 ___fttol@lval 00A1              _MGenerateChecksum 2E62                          ?_main 0001  
           ?_MGenerateChecksum 0001                          STR_10 104A                          STR_11 1056  
                        STR_20 103A                          STR_12 1036                          STR_13 1030  
                        STR_21 1042                          STR_22 1050                          STR_14 1053  
                        STR_23 105C                          STR_15 105F                          STR_24 104D  
                        STR_16 103B                          STR_25 1059                          STR_17 1043  
                        STR_26 104A                          STR_18 103E                          STR_27 1056  
                        STR_19 1046                          STR_28 1036                __end_of___ftdiv 27C0  
              __end_of___ftneg 2F4E                __end_of___ftmul 225E                __end_of___fttol 24C6  
              __end_of___lwdiv 2A50                __end_of___lwmod 2C26                          i2l108 2390  
                        i2l313 2B80                          i2l523 2B46                          i2l613 1CA4  
                        i2l615 1CAC                          i2l632 1F78                          i2l802 2884  
                        i2l642 1F48                          i2l813 285C                          i2l930 2F00  
                        i2l925 2F6E                          i2l874 27BE                          i2l883 29CC  
                        i2l877 278A                          i2l889 26DC                          i2l899 2F40  
                        _RCREG 000FAE                          _SPBRG 000FAF                          _RCInt 225E  
       ??_SPIDisassembleDouble 0085            ___lmul@multiplicand 0005                 __CFG_FCMEN$OFF 000000  
                        _SerTx 2F9C            ??_MGenerateChecksum 0080                __end_of_isdigit 2F70  
                ___ftpack@sign 0084                          _value 0052                     _DoubleSPIM 00DA  
                        main@x 00B4                __end_of_isspace 2F02                          tablat 000FF5  
                        status 000FD8               __end_of_MSendSPI 2D32             __size_ofi2___ftmul 00F8  
                  ?i2_SerTxStr 0002                __initialization 2EA2      __end_of_MGenerateChecksum 2EA2  
                 __end_of_main 1648                  i2___ftmul@exp 0012                 __CFG_OSC$HSPLL 000000  
                  ?i2___ftpack 0001                  _StrippedValue 004B                    keyValue@str 0024  
                       ??_main 00B4                  ___fttol@sign1 00A0           __size_of_breakDouble 0188  
             __end_of_SerTxStr 2C80                  __activetblptr 000002                         ?_RCInt 0001  
                       ?_SerTx 0001               __end_of___altoft 2B48                      ??i2_SerTx 0001  
          MReceiveStrSPI@Slave 00B1               __end_of___ftpack 25E6            MReceiveStrSPI@x_731 00B3  
                       i2l1057 2DD8                         i2l3001 2D34                         i2l3005 2D60  
                       i2l3101 181E                         i2l3201 1B38                         i2l3113 189A  
                       i2l3105 1856                         i2l3121 18B6                         i2l3043 1652  
                       i2l3051 1676                         i2l3221 1B78                         i2l3213 1B5C  
                       i2l3141 1960                         i2l3125 18C2                         i2l3117 18A6  
                       i2l3109 1862                         i2l3061 16C2                         i2l3231 1B98  
                       i2l3207 1B50                         i2l3071 1716                         i2l3055 16A4  
                       i2l2441 27D0                         i2l3225 1B80                         i2l3209 1B54  
                       i2l3161 1A22                         i2l3153 19DE                         i2l3145 1998  
                       i2l3137 1952                         i2l3129 18EA                         i2l3081 175E  
                       i2l3065 1702                         i2l3049 1670                         i2l3313 237A  
                       i2l3305 234E                         i2l3219 1B74                         i2l3075 1734  
                       i2l3067 1706                         i2l2453 2824                         i2l2445 27E0  
                       i2l2613 296A                         i2l2605 2F66                         i2l3181 1AB6  
                       i2l3173 1A72                         i2l3165 1A2E                         i2l3157 19EA  
                       i2l3149 19A6                         i2l3093 17DA                         i2l3309 2364  
                       i2l2463 2864                         i2l2455 2844                         i2l2447 27EC  
                       i2l2543 2AEE                         i2l2623 29C8                         i2l3191 1B06  
                       i2l2457 2850                         i2l2449 280C                         i2l2545 2AFC  
                       i2l2617 299C                         i2l2641 261E                         i2l2721 1BFA  
                       i2l2705 1BBE                         i2l3185 1AEE                         i2l3177 1AAA  
                       i2l3169 1A66                         i2l3097 1812                         i2l3193 1B0C  
                       i2l3089 17CE                         i2l2563 2724                         i2l2491 2C92  
                       i2l2483 2EF2                         i2l2707 1BC4                         i2l3291 2306  
                       i2l3283 22BC                         i2l2469 2876                         i2l2557 26FC  
                       i2l2485 2EF8                         i2l2645 262C                         i2l2813 1E2A  
                       i2l2805 1DF4                         i2l2733 1C2C                         i2l2717 1BEC  
                       i2l3197 1B30                         i2l3189 1AFA                         i2l3285 22D2  
                       i2l2583 2764                         i2l2559 2716                         i2l2495 2CA8  
                       i2l2663 2672                         i2l2639 2604                         i2l2815 1E38  
                       i2l2751 1CB2                         i2l2727 1C14                         i2l2719 1BF4  
                       i2l3279 22B2                         i2l2593 2798                         i2l2673 26A0  
                       i2l2841 1ECC                         i2l2809 1DFC                         i2l2833 1E90  
                       i2l2761 1CEE                         i2l2737 1C42                         i2l2691 2D8C  
                       i2l2667 2688                         i2l2659 2660                         i2l2843 1ED4  
                       i2l2819 1E64                         i2l2763 1CFE                         i2l2693 2D96  
                       i2l2677 26B6                         i2l2669 268E                         i2l2837 1E9E  
                       i2l2765 1D04                         i2l2757 1CD6                         i2l2863 1F6A  
                       i2l2847 1F00                         i2l2767 1D0A                         i2l2697 2DCC  
                       i2l2857 1F38                         i2l2785 1D98                         i2l2797 1DC0  
                       i2l2789 1DA0                         u260_41 26EE                         u262_41 270C  
                       _RCREG1 000FAE                         u272_41 25F6                         u274_41 2614  
                       _RCSTA1 000FAB                         _SSPBUF 000FC9                         _TXREG1 000FAD  
                       _RCflag 00BB                         _TXSTA1 000FAC               __end_of_checksum 2ACC  
                       SerTx@c 0080                      ??_SerInit 0083                         ___ftge 2938  
                       ___lmul 2C80                 keyValue@length 0026                      ??___ftdiv 000F  
                    ??___ftneg 0004                      ??___ftmul 008E                      ??___fttol 009B  
             __end_of_keyValue 1BA4                      ??___lwdiv 0084                      ??___lwmod 0084  
             i2SerTxStr@string 0002                         clear_0 2EA8                         clear_1 2EB4  
                       _strcmp 2D8A                         _strtod 1BA4          ___ftmul@f3_as_product 0092  
                    ??_isdigit 0001              __end_ofi2___ftmul 26DE                   __mediumconst 0000  
                    ??_isspace 0001                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8            __size_ofi2_SerTxStr 0058                     __accesstop 0080  
      __end_of__initialization 2ECC                     ___altoft@c 0009            __size_ofi2___ftpack 00C6  
                   ___ftge@ff1 0001                     ___ftge@ff2 0004                  ___rparam_used 000001  
                   ___ftdiv@f1 0009                     ___ftdiv@f2 000C                     ___ftdiv@f3 0013  
                   ___ftneg@f1 0001                 i2___ftpack@arg 0001                  __end_of_RCInt 2394  
               i2___ftpack@exp 0004                     ___ftmul@f1 0088                     ___ftmul@f2 008B  
                   ___fttol@f1 0097                 __pcstackCOMRAM 0001                  __end_of_SerTx 2FAC  
   __size_of_MGenerateChecksum 0040                   __pidataBANK0 2FC4                 i2___ftmul@cntr 0016  
               i2___ftmul@sign 0017   __size_of_SPIReassembleDouble 0044                      ?_MSendSPI 0081  
                      ??_RCInt 002F              MReceiveStrSPI@str 00AF                        ??_SerTx 0080  
                 keyValue@flag 002C                     __pbssBANK0 00B5                MReceiveStrSPI@x 00B2  
                    ?_SerTxStr 0081                   ?_MReceiveSPI 0001                        ?___ftge 0001  
                      ?___lmul 0001                   ?_Delay10TCYx 0001                      ?___altoft 0009  
                      _BAUDCON 000FB8                 ___lmul@product 0009                      ?___ftpack 0080  
                      ?_strcmp 0001                        ?_strtod 0018                     ??_MSendSPI 0082  
                    ?_checksum 0001        __size_of_MReceiveStrSPI 00B2                 SerTxStr@string 0081  
                      i2_SerTx 2FAC                      ?_keyValue 0024                   ??i2_SerTxStr 0004  
                   ??_SerTxStr 0083                        __Hparam 0000                        _SerInit 2F02  
                      __Lparam 0000                __size_of___ftge 0096                __size_of___lmul 005A  
                      ___ftdiv 26DE                        ___ftneg 2F2A                        ___ftmul 2102  
                      ___fttol 2394                        ___lwdiv 29CE                        ___lwmod 2BBA  
                 __psmallconst 1000                     ??___altoft 000D                        __pcinit 2EA2  
                 ??i2___ftpack 0006                     ??___ftpack 0085                Delay10TCYx@unit 0080  
      i2___ftmul@f3_as_product 0013                        __ramtop 1000                     _initialize 2FBA  
                      __ptext0 1064                        __ptext1 2FBA                        __ptext2 2F02  
                      __ptext3 2C26                        __ptext4 2A50                        __ptext5 2DDA  
                      __ptext6 2E62                        __ptext7 2CDA                        __ptext8 2886  
                      __ptext9 1F7A                __size_of_strcmp 0050                   __size_of_ISR 2BB2  
              __size_of_strtod 03D6                        _isdigit 2F4E                keyValue@str_end 002A  
                   ??_checksum 0080                   MSendSPI@data 0084                        _isspace 2ED6  
__size_of_SPIDisassembleDouble 0044             __end_ofi2_SerTxStr 2D8A                 __pintcode_body 2B48  
         end_of_initialization 2ECC                     ??_keyValue 0028                  __Lmediumconst 0000  
                      int_func 2B48             __end_ofi2___ftpack 2886                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                  ??_breakDouble 00A9  
                      strcmp@r 0006                        strtod@s 0018                      _PORTAbits 000F80  
                    _TRISAbits 000F92                      i2___ftmul 25E6                    ___ftdiv@exp 0016  
          _SPIReassembleDouble 2E1E                i2___ftpack@sign 0005                    ___ftmul@exp 0091  
                  _StrippedKey 0051                 __end_of___ftge 29CE           __size_of_MReceiveSPI 0016  
               __end_of___lmul 2CDA           __size_of_Delay10TCYx 0016                    ?_initialize 0001  
         ?_SPIReassembleDouble 0080                      _DoublePtr 004E                 __end_of_strcmp 2DDA  
               _MReceiveStrSPI 2886                 __end_of_strtod 1F7A            __end_of_breakDouble 2102  
          start_initialization 2EA2                _CurrentVelocity 00B8                   _CurrentAngle 00B5  
                  __end_of_ISR 2BBA              __size_of_MSendSPI 0058                     ?i2___ftmul 0009  
                     ??___ftge 0007                       ??___lmul 0009              __size_of_SerTxStr 005A  
                  __pdataBANK0 00DE         __end_of_MReceiveStrSPI 2938          ??_SPIReassembleDouble 0083  
                     ??_strcmp 0005                       ??_strtod 001C              __size_of___altoft 007C  
            __size_of___ftpack 0120                    __pbssCOMRAM 003F                  __pcstackBANK0 0080  
                 _ReceivedChar 0050                   _isdigit$1322 0002              __size_of_checksum 007C  
                     ?i2_SerTx 0001           MSendSPI@tempChar_722 0083            __size_of_initialize 000A  
            __size_of_keyValue 055C         SPIReassembleDouble@dub 0083                       ?_SerInit 0001  
             ___lwdiv@dividend 0080                      __pintcode 0008               breakDouble@temp1 00AB  
             breakDouble@temp2 00AD                       ?___ftdiv 0009                       ?___ftneg 0001  
                     ?___ftmul 0088                       ?___fttol 0097                       ?___lwdiv 0080  
                     ?___lwmod 0080                    _breakDouble 1F7A             breakDouble@tempDub 00A9  
              ?_MReceiveStrSPI 00AF                    __smallconst 1000                       ?_isdigit 0001  
               __size_of_RCInt 0136                       ?_isspace 0001                 __size_of_SerTx 0010  
             ___lwdiv@quotient 0085                    ??i2___ftmul 000F                      checksum@y 0085  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D   __end_of_SPIDisassembleDouble 2E1E  
                     i2u336_40 2D56                       i2u336_47 2D4C                       i2u337_40 2D82  
                     _PIR1bits 000F9E                       i2u337_47 2D78                       _RCONbits 000FD0  
                  strtod@flags 001E                    strtod@expon 001F                       i2SerTx@c 0001  
                     _MSendSPI 2CDA                   _isspace$1325 0002              ___lmul@multiplier 0001  
             __size_ofi2_SerTx 000E                      keyValue@x 002E                      keyValue@y 002D  
                     _SetAngle 0048                       _SerTxStr 2C26                       __Hrparam 0000  
                     __Lrparam 0000               __size_of_SerInit 0028               __size_of___ftdiv 00E2  
             __size_of___ftneg 0024                       ___altoft 2ACC               __size_of___ftmul 015C  
             __size_of___fttol 0132               __size_of___lwdiv 0082               __size_of___lwmod 006C  
                 ??_initialize 0083                       ___ftpack 24C6                       _checksum 2A50  
             __size_of_isdigit 0022           MGenerateChecksum@sum 0080                ___lwdiv@divisor 0082  
              breakDouble@dubs 00A6               __size_of_isspace 002C                ___lwdiv@counter 0084  
                 RCInt@counter 0030                       __ptext10 2BBA                       __ptext11 29CE  
                     __ptext20 225E                       __ptext12 2394                       __ptext21 1648  
                     __ptext13 2102                       __ptext30 2938                       __ptext22 2D32  
                     __ptext14 24C6                       __ptext31 26DE                       __ptext23 2FAC  
                     __ptext15 2F9C                       __ptext32 2ACC                       __ptext24 1BA4  
                     __ptext16 2E1E                       __ptext33 27C0                       __ptext25 25E6  
                     __ptext17 2F70                       __ptext34 2D8A                       __ptext26 2ED6  
                     __ptext18 2F86                       __ptext27 2F4E                       __ptext28 2C80  
                     __ptext29 2F2A                    checksum@sum 0084                       _keyValue 1648  
                __size_of_main 05E4                  MSendSPI@Slave 0081                       _received 00BC  
           __end_of_initialize 2FC4                  ??_MReceiveSPI 0080                  ??_Delay10TCYx 0080  
                   strtod@eexp 001D                     _INTCONbits 000FF2           _SPIDisassembleDouble 2DDA  
                     isdigit@c 0003                       intlevel2 0000               MSendSPI@tempChar 0082  
             ___lwmod@dividend 0080                       isspace@c 0003                      strtod@res 001A  
  __end_of_SPIReassembleDouble 2E62               ??_MReceiveStrSPI 00B2                   ?_breakDouble 00A6  
          __end_of_MReceiveSPI 2F86            __end_of_Delay10TCYx 2F9C             MGenerateChecksum@z 0081  
                     strcmp@s1 0001                       strcmp@s2 0003                ___lwmod@divisor 0082  
              ___lwmod@counter 0084          ?_SPIDisassembleDouble 0082                       strtod@_u 0020  
      SPIDisassembleDouble@dub 0082                     i2_SerTxStr 2D32  
