

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 28 03:21:02 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           	psect	idataBANK0
    55  003068                     __pidataBANK0:
    56                           	opt stack 0
    57                           
    58                           ;initializer for _AZEL
    59  003068  01                 	db	1
    60  0000                     _PORTAbits	set	3968
    61  0000                     _TRISAbits	set	3986
    62  0000                     _TRISCbits	set	3988
    63  0000                     _BAUDCON	set	4024
    64  0000                     _IPR1bits	set	3999
    65  0000                     _PIE1bits	set	3997
    66  0000                     _PIR1bits	set	3998
    67  0000                     _RCONbits	set	4048
    68  0000                     _RCREG	set	4014
    69  0000                     _RCREG1	set	4014
    70  0000                     _RCSTA1	set	4011
    71  0000                     _SPBRG	set	4015
    72  0000                     _SSPBUF	set	4041
    73  0000                     _SSPCON1	set	4038
    74  0000                     _SSPCON1bits	set	4038
    75  0000                     _SSPSTAT	set	4039
    76  0000                     _SSPSTATbits	set	4039
    77  0000                     _TXREG1	set	4013
    78  0000                     _TXSTA1	set	4012
    79  0000                     _INTCONbits	set	4082
    80                           
    81                           	psect	smallconst
    82  001000                     __psmallconst:
    83                           	opt stack 0
    84  001000  00                 	db	0
    85  001001                     STR_1:
    86  001001  57                 	db	87	;'W'
    87  001002  65                 	db	101	;'e'
    88  001003  6C                 	db	108	;'l'
    89  001004  63                 	db	99	;'c'
    90  001005  6F                 	db	111	;'o'
    91  001006  6D                 	db	109	;'m'
    92  001007  65                 	db	101	;'e'
    93  001008  20                 	db	32
    94  001009  74                 	db	116	;'t'
    95  00100A  6F                 	db	111	;'o'
    96  00100B  20                 	db	32
    97  00100C  74                 	db	116	;'t'
    98  00100D  68                 	db	104	;'h'
    99  00100E  65                 	db	101	;'e'
   100  00100F  20                 	db	32
   101  001010  77                 	db	119	;'w'
   102  001011  6F                 	db	111	;'o'
   103  001012  72                 	db	114	;'r'
   104  001013  6C                 	db	108	;'l'
   105  001014  64                 	db	100	;'d'
   106  001015  20                 	db	32
   107  001016  6F                 	db	111	;'o'
   108  001017  66                 	db	102	;'f'
   109  001018  20                 	db	32
   110  001019  74                 	db	116	;'t'
   111  00101A  6F                 	db	111	;'o'
   112  00101B  6D                 	db	109	;'m'
   113  00101C  6F                 	db	111	;'o'
   114  00101D  72                 	db	114	;'r'
   115  00101E  72                 	db	114	;'r'
   116  00101F  6F                 	db	111	;'o'
   117  001020  77                 	db	119	;'w'
   118  001021  21                 	db	33
   119  001022  21                 	db	33
   120  001023  21                 	db	33
   121  001024  00                 	db	0
   122  001025                     STR_3:
   123  001025  20                 	db	32
   124  001026  20                 	db	32
   125  001027  20                 	db	32
   126  001028  56                 	db	86	;'V'
   127  001029  61                 	db	97	;'a'
   128  00102A  6C                 	db	108	;'l'
   129  00102B  75                 	db	117	;'u'
   130  00102C  65                 	db	101	;'e'
   131  00102D  3A                 	db	58	;':'
   132  00102E  20                 	db	32
   133  00102F  00                 	db	0
   134  001030                     STR_2:
   135  001030  4B                 	db	75	;'K'
   136  001031  65                 	db	101	;'e'
   137  001032  79                 	db	121	;'y'
   138  001033  3A                 	db	58	;':'
   139  001034  20                 	db	32
   140  001035  00                 	db	0
   141  001036                     STR_12:
   142  001036  3F                 	db	63	;'?'
   143  001037  3F                 	db	63	;'?'
   144  001038  3F                 	db	63	;'?'
   145  001039  00                 	db	0
   146  00103A                     STR_20:
   147  00103A  56                 	db	86	;'V'
   148  00103B  45                 	db	69	;'E'
   149  00103C  4C                 	db	76	;'L'
   150  00103D  00                 	db	0
   151  00103E                     STR_4:
   152  00103E  50                 	db	80	;'P'
   153  00103F  4F                 	db	79	;'O'
   154  001040  53                 	db	83	;'S'
   155  001041  00                 	db	0
   156  001042                     STR_21:
   157  001042  76                 	db	118	;'v'
   158  001043  65                 	db	101	;'e'
   159  001044  6C                 	db	108	;'l'
   160  001045  00                 	db	0
   161  001046                     STR_5:
   162  001046  70                 	db	112	;'p'
   163  001047  6F                 	db	111	;'o'
   164  001048  73                 	db	115	;'s'
   165  001049  00                 	db	0
   166  00104A                     STR_10:
   167  00104A  4B                 	db	75	;'K'
   168  00104B  44                 	db	68	;'D'
   169  00104C  00                 	db	0
   170  00104D                     STR_8:
   171  00104D  4B                 	db	75	;'K'
   172  00104E  49                 	db	73	;'I'
   173  00104F  00                 	db	0
   174  001050                     STR_6:
   175  001050  4B                 	db	75	;'K'
   176  001051  50                 	db	80	;'P'
   177  001052  00                 	db	0
   178  001053                     STR_14:
   179  001053  41                 	db	65	;'A'
   180  001054  5A                 	db	90	;'Z'
   181  001055  00                 	db	0
   182  001056                     STR_11:
   183  001056  6B                 	db	107	;'k'
   184  001057  64                 	db	100	;'d'
   185  001058  00                 	db	0
   186  001059                     STR_9:
   187  001059  6B                 	db	107	;'k'
   188  00105A  69                 	db	105	;'i'
   189  00105B  00                 	db	0
   190  00105C                     STR_7:
   191  00105C  6B                 	db	107	;'k'
   192  00105D  70                 	db	112	;'p'
   193  00105E  00                 	db	0
   194  00105F                     STR_15:
   195  00105F  61                 	db	97	;'a'
   196  001060  7A                 	db	122	;'z'
   197  001061  00                 	db	0
   198  0000                     
   199                           ; #config settings
   200  001062  00                 	db	0	; dummy byte at the end
   201  0000                     
   202                           	psect	cinit
   203  002F2A                     __pcinit:
   204                           	opt stack 0
   205  002F2A                     start_initialization:
   206                           	opt stack 0
   207  002F2A                     __initialization:
   208                           	opt stack 0
   209                           
   210                           ; Clear objects allocated to BANK0 (41 bytes)
   211  002F2A  EE00  F0B5         	lfsr	0,__pbssBANK0
   212  002F2E  0E29               	movlw	41
   213  002F30                     clear_0:
   214  002F30  6AEE               	clrf	postinc0,c
   215  002F32  06E8               	decf	wreg,f,c
   216  002F34  E1FD               	bnz	clear_0
   217                           
   218                           ; Clear objects allocated to COMRAM (35 bytes)
   219  002F36  EE00  F03F         	lfsr	0,__pbssCOMRAM
   220  002F3A  0E23               	movlw	35
   221  002F3C                     clear_1:
   222  002F3C  6AEE               	clrf	postinc0,c
   223  002F3E  06E8               	decf	wreg,f,c
   224  002F40  E1FD               	bnz	clear_1
   225                           
   226                           ; Initialize objects allocated to BANK0 (1 bytes)
   227                           ; load TBLPTR registers with __pidataBANK0
   228  002F42  0E68               	movlw	low __pidataBANK0
   229  002F44  6EF6               	movwf	tblptrl,c
   230  002F46  0E30               	movlw	high __pidataBANK0
   231  002F48  6EF7               	movwf	tblptrh,c
   232  002F4A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   233  002F4C  6EF8               	movwf	tblptru,c
   234  002F4E  0009               	tblrd		*+	;fetch initializer
   235  002F50  CFF5 F0DE          	movff	tablat,__pdataBANK0
   236  002F54                     end_of_initialization:
   237                           	opt stack 0
   238  002F54                     __end_of__initialization:
   239                           	opt stack 0
   240  002F54  0E00               	movlw	low (__Lmediumconst shr (0+16))
   241  002F56  6EF8               	movwf	tblptru,c
   242  002F58  0100               	movlb	0
   243  002F5A  EF32  F008         	goto	_main	;jump to C main() function
   244                           tblptru	equ	0xFF8
   245                           tblptrh	equ	0xFF7
   246                           tblptrl	equ	0xFF6
   247                           tablat	equ	0xFF5
   248                           postinc0	equ	0xFEE
   249                           wreg	equ	0xFE8
   250                           
   251                           	psect	bssCOMRAM
   252  00003F                     __pbssCOMRAM:
   253                           	opt stack 0
   254  00003F                     _Kd:
   255                           	opt stack 0
   256  00003F                     	ds	3
   257  000042                     _Ki:
   258                           	opt stack 0
   259  000042                     	ds	3
   260  000045                     _Kp:
   261                           	opt stack 0
   262  000045                     	ds	3
   263  000048                     _SetAngle:
   264                           	opt stack 0
   265  000048                     	ds	3
   266  00004B                     _StrippedValue:
   267                           	opt stack 0
   268  00004B                     	ds	3
   269  00004E                     _DoublePtr:
   270                           	opt stack 0
   271  00004E                     	ds	2
   272  000050                     _PIDEnableFlag:
   273                           	opt stack 0
   274  000050                     	ds	1
   275  000051                     _ReceivedChar:
   276                           	opt stack 0
   277  000051                     	ds	1
   278  000052                     _StrippedKey:
   279                           	opt stack 0
   280  000052                     	ds	1
   281  000053                     _value:
   282                           	opt stack 0
   283  000053                     	ds	10
   284  00005D                     _key:
   285                           	opt stack 0
   286  00005D                     	ds	5
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           
   294                           	psect	bssBANK0
   295  0000B5                     __pbssBANK0:
   296                           	opt stack 0
   297  0000B5                     _CurrentAngle:
   298                           	opt stack 0
   299  0000B5                     	ds	3
   300  0000B8                     _CurrentVelocity:
   301                           	opt stack 0
   302  0000B8                     	ds	3
   303  0000BB                     _RCflag:
   304                           	opt stack 0
   305  0000BB                     	ds	1
   306  0000BC                     _received:
   307                           	opt stack 0
   308  0000BC                     	ds	30
   309  0000DA                     _DoubleSPIM:
   310                           	opt stack 0
   311  0000DA                     	ds	4
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           
   319                           	psect	dataBANK0
   320  0000DE                     __pdataBANK0:
   321                           	opt stack 0
   322  0000DE                     _AZEL:
   323                           	opt stack 0
   324  0000DE                     	ds	1
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	cstackBANK0
   333  000080                     __pcstackBANK0:
   334                           	opt stack 0
   335  000080                     ??_checksum:
   336  000080                     ?___lwdiv:
   337                           	opt stack 0
   338  000080                     ?___lwmod:
   339                           	opt stack 0
   340  000080                     ?_SPIReassembleDouble:
   341                           	opt stack 0
   342  000080                     ?___ftpack:
   343                           	opt stack 0
   344  000080                     SerTx@c:
   345                           	opt stack 0
   346  000080                     MReceiveSPI@tempCH:
   347                           	opt stack 0
   348  000080                     MGenerateChecksum@sum:
   349                           	opt stack 0
   350  000080                     OpenSPI@bus_mode:
   351                           	opt stack 0
   352  000080                     Delay10TCYx@unit:
   353                           	opt stack 0
   354  000080                     ___lwdiv@dividend:
   355                           	opt stack 0
   356  000080                     ___lwmod@dividend:
   357                           	opt stack 0
   358  000080                     ___ftpack@arg:
   359                           	opt stack 0
   360                           
   361                           ; 3 bytes @ 0x0
   362  000080                     	ds	1
   363  000081                     MSendSPI@Slave:
   364                           	opt stack 0
   365  000081                     MGenerateChecksum@z:
   366                           	opt stack 0
   367  000081                     OpenSPI@smp_phase:
   368                           	opt stack 0
   369  000081                     SerTxStr@string:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x1
   373  000081                     	ds	1
   374  000082                     MSendSPI@tempChar:
   375                           	opt stack 0
   376  000082                     OpenSPI@sync_mode:
   377                           	opt stack 0
   378  000082                     ___lwdiv@divisor:
   379                           	opt stack 0
   380  000082                     ___lwmod@divisor:
   381                           	opt stack 0
   382  000082                     SPIDisassembleDouble@dub:
   383                           	opt stack 0
   384                           
   385                           ; 3 bytes @ 0x2
   386  000082                     	ds	1
   387  000083                     MSendSPI@tempChar_727:
   388                           	opt stack 0
   389  000083                     ___ftpack@exp:
   390                           	opt stack 0
   391  000083                     SPIReassembleDouble@dub:
   392                           	opt stack 0
   393                           
   394                           ; 3 bytes @ 0x3
   395  000083                     	ds	1
   396  000084                     MSendSPI@data:
   397                           	opt stack 0
   398  000084                     checksum@sum:
   399                           	opt stack 0
   400  000084                     ___ftpack@sign:
   401                           	opt stack 0
   402  000084                     ___lwdiv@counter:
   403                           	opt stack 0
   404  000084                     ___lwmod@counter:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x4
   408  000084                     	ds	1
   409  000085                     ??___ftpack:
   410  000085                     checksum@y:
   411                           	opt stack 0
   412  000085                     ___lwdiv@quotient:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x5
   416  000085                     	ds	3
   417  000088                     ?___ftmul:
   418                           	opt stack 0
   419  000088                     ___ftmul@f1:
   420                           	opt stack 0
   421                           
   422                           ; 3 bytes @ 0x8
   423  000088                     	ds	3
   424  00008B                     ___ftmul@f2:
   425                           	opt stack 0
   426                           
   427                           ; 3 bytes @ 0xB
   428  00008B                     	ds	3
   429  00008E                     ??___ftmul:
   430                           
   431                           ; 0 bytes @ 0xE
   432  00008E                     	ds	3
   433  000091                     ___ftmul@exp:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x11
   437  000091                     	ds	1
   438  000092                     ___ftmul@f3_as_product:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0x12
   442  000092                     	ds	3
   443  000095                     ___ftmul@cntr:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x15
   447  000095                     	ds	1
   448  000096                     ___ftmul@sign:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x16
   452  000096                     	ds	1
   453  000097                     ?___fttol:
   454                           	opt stack 0
   455  000097                     ___fttol@f1:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0x17
   459  000097                     	ds	4
   460  00009B                     ??___fttol:
   461                           
   462                           ; 0 bytes @ 0x1B
   463  00009B                     	ds	5
   464  0000A0                     ___fttol@sign1:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x20
   468  0000A0                     	ds	1
   469  0000A1                     ___fttol@lval:
   470                           	opt stack 0
   471                           
   472                           ; 4 bytes @ 0x21
   473  0000A1                     	ds	4
   474  0000A5                     ___fttol@exp1:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x25
   478  0000A5                     	ds	1
   479  0000A6                     breakDouble@dubs:
   480                           	opt stack 0
   481                           
   482                           ; 3 bytes @ 0x26
   483  0000A6                     	ds	3
   484  0000A9                     breakDouble@tempDub:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x29
   488  0000A9                     	ds	2
   489  0000AB                     breakDouble@temp1:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x2B
   493  0000AB                     	ds	2
   494  0000AD                     breakDouble@temp2:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x2D
   498  0000AD                     	ds	2
   499  0000AF                     MReceiveStrSPI@str:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x2F
   503  0000AF                     	ds	2
   504  0000B1                     MReceiveStrSPI@Slave:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x31
   508  0000B1                     	ds	1
   509  0000B2                     MReceiveStrSPI@x:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x32
   513  0000B2                     	ds	1
   514  0000B3                     MReceiveStrSPI@x_736:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x33
   518  0000B3                     	ds	1
   519  0000B4                     main@x:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x34
   523  0000B4                     	ds	1
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           
   531                           	psect	cstackCOMRAM
   532  000001                     __pcstackCOMRAM:
   533                           	opt stack 0
   534  000001                     ??_isspace:
   535  000001                     ??_isdigit:
   536  000001                     ?_strcmp:
   537                           	opt stack 0
   538  000001                     ?___ftneg:
   539                           	opt stack 0
   540  000001                     ?i2___ftpack:
   541                           	opt stack 0
   542  000001                     ?___lmul:
   543                           	opt stack 0
   544  000001                     i2SerTx@c:
   545                           	opt stack 0
   546  000001                     strcmp@s1:
   547                           	opt stack 0
   548  000001                     ___ftge@ff1:
   549                           	opt stack 0
   550  000001                     ___ftneg@f1:
   551                           	opt stack 0
   552  000001                     i2___ftpack@arg:
   553                           	opt stack 0
   554  000001                     ___lmul@multiplier:
   555                           	opt stack 0
   556                           
   557                           ; 4 bytes @ 0x0
   558  000001                     	ds	1
   559  000002                     _isdigit$1327:
   560                           	opt stack 0
   561  000002                     _isspace$1330:
   562                           	opt stack 0
   563  000002                     i2SerTxStr@string:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x1
   567  000002                     	ds	1
   568  000003                     isdigit@c:
   569                           	opt stack 0
   570  000003                     isspace@c:
   571                           	opt stack 0
   572  000003                     strcmp@s2:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x2
   576  000003                     	ds	1
   577  000004                     i2___ftpack@exp:
   578                           	opt stack 0
   579  000004                     ___ftge@ff2:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x3
   583  000004                     	ds	1
   584  000005                     ??_strcmp:
   585  000005                     i2___ftpack@sign:
   586                           	opt stack 0
   587  000005                     ___lmul@multiplicand:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x4
   591  000005                     	ds	1
   592  000006                     ??i2___ftpack:
   593  000006                     strcmp@r:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x5
   597  000006                     	ds	1
   598  000007                     ??___ftge:
   599                           
   600                           ; 0 bytes @ 0x6
   601  000007                     	ds	2
   602  000009                     ?___ftdiv:
   603                           	opt stack 0
   604  000009                     ?___altoft:
   605                           	opt stack 0
   606  000009                     ?i2___ftmul:
   607                           	opt stack 0
   608  000009                     ___ftdiv@f1:
   609                           	opt stack 0
   610  000009                     i2___ftmul@f1:
   611                           	opt stack 0
   612  000009                     ___lmul@product:
   613                           	opt stack 0
   614  000009                     ___altoft@c:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x8
   618  000009                     	ds	3
   619  00000C                     ___ftdiv@f2:
   620                           	opt stack 0
   621  00000C                     i2___ftmul@f2:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0xB
   625  00000C                     	ds	1
   626  00000D                     ??___altoft:
   627                           
   628                           ; 0 bytes @ 0xC
   629  00000D                     	ds	2
   630  00000F                     ??___ftdiv:
   631  00000F                     ??i2___ftmul:
   632                           
   633                           ; 0 bytes @ 0xE
   634  00000F                     	ds	2
   635  000011                     ___altoft@exp:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x10
   639  000011                     	ds	1
   640  000012                     ___altoft@sign:
   641                           	opt stack 0
   642  000012                     ___ftdiv@cntr:
   643                           	opt stack 0
   644  000012                     i2___ftmul@exp:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x11
   648  000012                     	ds	1
   649  000013                     ___ftdiv@f3:
   650                           	opt stack 0
   651  000013                     i2___ftmul@f3_as_product:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x12
   655  000013                     	ds	3
   656  000016                     ___ftdiv@exp:
   657                           	opt stack 0
   658  000016                     i2___ftmul@cntr:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x15
   662  000016                     	ds	1
   663  000017                     ___ftdiv@sign:
   664                           	opt stack 0
   665  000017                     i2___ftmul@sign:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x16
   669  000017                     	ds	1
   670  000018                     ?_strtod:
   671                           	opt stack 0
   672  000018                     strtod@s:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x17
   676  000018                     	ds	2
   677  00001A                     strtod@res:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x19
   681  00001A                     	ds	2
   682  00001C                     ??_strtod:
   683                           
   684                           ; 0 bytes @ 0x1B
   685  00001C                     	ds	1
   686  00001D                     strtod@eexp:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x1C
   690  00001D                     	ds	1
   691  00001E                     strtod@flags:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x1D
   695  00001E                     	ds	1
   696  00001F                     strtod@expon:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x1E
   700  00001F                     	ds	1
   701  000020                     strtod@_u:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x1F
   705  000020                     	ds	4
   706  000024                     keyValue@str:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x23
   710  000024                     	ds	2
   711  000026                     keyValue@length:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x25
   715  000026                     	ds	2
   716  000028                     ??_keyValue:
   717                           
   718                           ; 0 bytes @ 0x27
   719  000028                     	ds	2
   720  00002A                     keyValue@str_end:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x29
   724  00002A                     	ds	2
   725  00002C                     keyValue@flag:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x2B
   729  00002C                     	ds	1
   730  00002D                     keyValue@y:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x2C
   734  00002D                     	ds	1
   735  00002E                     keyValue@x:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x2D
   739  00002E                     	ds	1
   740  00002F                     
   741                           ; 0 bytes @ 0x2E
   742  00002F                     	ds	1
   743  000030                     RCInt@counter:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x2F
   747  000030                     	ds	1
   748  000031                     ??_ISR:
   749                           
   750                           ; 0 bytes @ 0x30
   751  000031                     	ds	14
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           
   759 ;;
   760 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   761 ;;
   762 ;; *************** function _main *****************
   763 ;; Defined at:
   764 ;;		line 13 in file "SPItest-MASTER.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  x               1   52[BANK0 ] unsigned char 
   769 ;; Return value:  Size  Location     Type
   770 ;;		None               void
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   781 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   782 ;;Total ram usage:        1 bytes
   783 ;; Hardware stack levels required when called:   10
   784 ;; This function calls:
   785 ;;		_Delay10TCYx
   786 ;;		_MReceiveStrSPI
   787 ;;		_MSendSPI
   788 ;;		_SPIDisassembleDouble
   789 ;;		_SPIReassembleDouble
   790 ;;		_checksum
   791 ;;		_initialize
   792 ;; This function is called by:
   793 ;;		Startup code after reset
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text0
   798  001064                     __ptext0:
   799                           	opt stack 0
   800  001064                     _main:
   801                           	opt stack 21
   802                           
   803                           ;SPItest-MASTER.c: 15: unsigned char x = 0;
   804                           
   805                           ;incstack = 0
   806  001064  0E00               	movlw	0
   807  001066  0100               	movlb	0	; () banked
   808  001068  6FB4               	movwf	main@x& (0+255),b
   809                           
   810                           ; BSR set to: 0
   811                           ;SPItest-MASTER.c: 16: initialize();
   812  00106A  EC26  F018         	call	_initialize	;wreg free
   813  00106E  D17A               	goto	l280
   814  001070                     l4138:
   815                           
   816                           ;SPItest-MASTER.c: 20: {
   817                           ;SPItest-MASTER.c: 21: if (RCflag == 1)
   818  001070  0100               	movlb	0	; () banked
   819  001072  05BB               	decf	_RCflag& (0+255),w,b
   820  001074  A4D8               	btfss	status,2,c
   821  001076  D7FC               	goto	l4138
   822                           
   823                           ; BSR set to: 0
   824                           ;SPItest-MASTER.c: 22: {
   825                           ;SPItest-MASTER.c: 23: RCflag = 0;
   826  001078  0E00               	movlw	0
   827  00107A  0100               	movlb	0	; () banked
   828  00107C  6FBB               	movwf	_RCflag& (0+255),b
   829                           
   830                           ; BSR set to: 0
   831                           ;SPItest-MASTER.c: 24: if (AZEL == 1)
   832  00107E  0100               	movlb	0	; () banked
   833  001080  05DE               	decf	_AZEL& (0+255),w,b
   834  001082  B4D8               	btfsc	status,2,c
   835  001084  D002               	goto	l245
   836  001086  D170               	goto	l4286
   837                           
   838                           ; BSR set to: 0
   839                           ;SPItest-MASTER.c: 25: {
   840                           ;SPItest-MASTER.c: 26: while(PORTAbits.RA1);
   841  001088  D000               	goto	l245
   842  00108A                     l245:
   843  00108A  B280               	btfsc	3968,1,c	;volatile
   844  00108C  D7FE               	goto	l245
   845                           
   846                           ;SPItest-MASTER.c: 27: if ((StrippedKey == 0x02) || (StrippedKey == 0x03) || (StrippedKe
      +                          y == 0x04) || (StrippedKey == 0x06) || StrippedKey == 0x08)
   847  00108E  0E02               	movlw	2
   848  001090  1852               	xorwf	_StrippedKey,w,c
   849  001092  B4D8               	btfsc	status,2,c
   850  001094  D012               	goto	l4156
   851  001096  0E03               	movlw	3
   852  001098  1852               	xorwf	_StrippedKey,w,c
   853  00109A  B4D8               	btfsc	status,2,c
   854  00109C  D00E               	goto	l4156
   855  00109E  0E04               	movlw	4
   856  0010A0  1852               	xorwf	_StrippedKey,w,c
   857  0010A2  B4D8               	btfsc	status,2,c
   858  0010A4  D00A               	goto	l4156
   859  0010A6  0E06               	movlw	6
   860  0010A8  1852               	xorwf	_StrippedKey,w,c
   861  0010AA  B4D8               	btfsc	status,2,c
   862  0010AC  D006               	goto	l4156
   863  0010AE  0E08               	movlw	8
   864  0010B0  1852               	xorwf	_StrippedKey,w,c
   865  0010B2  B4D8               	btfsc	status,2,c
   866  0010B4  D002               	goto	l4156
   867  0010B6  D116               	goto	l4258
   868  0010B8  D000               	goto	l4156
   869  0010BA                     l4156:
   870                           
   871                           ;SPItest-MASTER.c: 30: {
   872                           ;SPItest-MASTER.c: 31: if (StrippedKey == 0x02)
   873  0010BA  0E02               	movlw	2
   874  0010BC  1852               	xorwf	_StrippedKey,w,c
   875  0010BE  A4D8               	btfss	status,2,c
   876  0010C0  D032               	goto	l4176
   877                           
   878                           ;SPItest-MASTER.c: 32: {
   879                           ;SPItest-MASTER.c: 33: MSendSPI(StrippedKey, 1);
   880  0010C2  0E01               	movlw	1
   881  0010C4  0100               	movlb	0	; () banked
   882  0010C6  6F81               	movwf	MSendSPI@Slave& (0+255),b
   883  0010C8  5052               	movf	_StrippedKey,w,c
   884  0010CA  ECB1  F016         	call	_MSendSPI
   885                           
   886                           ;SPItest-MASTER.c: 34: MReceiveStrSPI(DoubleSPIM, 1);
   887  0010CE  0EDA               	movlw	low _DoubleSPIM
   888  0010D0  0100               	movlb	0	; () banked
   889  0010D2  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
   890  0010D4  0E00               	movlw	high _DoubleSPIM
   891  0010D6  0100               	movlb	0	; () banked
   892  0010D8  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
   893  0010DA  0E01               	movlw	1
   894  0010DC  0100               	movlb	0	; () banked
   895  0010DE  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
   896  0010E0  EC55  F014         	call	_MReceiveStrSPI	;wreg free
   897                           
   898                           ;SPItest-MASTER.c: 35: CurrentAngle = SPIReassembleDouble();
   899  0010E4  EC53  F017         	call	_SPIReassembleDouble	;wreg free
   900  0010E8  C080  F0B5         	movff	?_SPIReassembleDouble,_CurrentAngle
   901  0010EC  C081  F0B6         	movff	?_SPIReassembleDouble+1,_CurrentAngle+1
   902  0010F0  C082  F0B7         	movff	?_SPIReassembleDouble+2,_CurrentAngle+2
   903                           
   904                           ;SPItest-MASTER.c: 36: for (x = 0; x != 4; x++)
   905  0010F4  0E00               	movlw	0
   906  0010F6  0100               	movlb	0	; () banked
   907  0010F8  6FB4               	movwf	main@x& (0+255),b
   908  0010FA                     l4166:
   909                           
   910                           ; BSR set to: 0
   911  0010FA  0E04               	movlw	4
   912  0010FC  0100               	movlb	0	; () banked
   913  0010FE  19B4               	xorwf	main@x& (0+255),w,b
   914  001100  B4D8               	btfsc	status,2,c
   915  001102  D0E9               	goto	l4256
   916  001104  D001               	goto	l4170
   917                           
   918                           ; BSR set to: 0
   919  001106  D0E7               	goto	l4256
   920  001108                     l4170:
   921                           
   922                           ; BSR set to: 0
   923                           ;SPItest-MASTER.c: 37: DoubleSPIM[x] = '\0';
   924  001108  0100               	movlb	0	; () banked
   925  00110A  51B4               	movf	main@x& (0+255),w,b
   926  00110C  0D01               	mullw	1
   927  00110E  0EDA               	movlw	low _DoubleSPIM
   928  001110  24F3               	addwf	prodl,w,c
   929  001112  6ED9               	movwf	fsr2l,c
   930  001114  0E00               	movlw	high _DoubleSPIM
   931  001116  20F4               	addwfc	prodh,w,c
   932  001118  6EDA               	movwf	fsr2h,c
   933  00111A  0E00               	movlw	0
   934  00111C  6EDF               	movwf	indf2,c
   935                           
   936                           ; BSR set to: 0
   937  00111E  0100               	movlb	0	; () banked
   938  001120  2BB4               	incf	main@x& (0+255),f,b
   939  001122  D7EB               	goto	l4166
   940                           
   941                           ; BSR set to: 0
   942                           ;SPItest-MASTER.c: 38: }
   943                           
   944                           ; BSR set to: 0
   945  001124  D0D8               	goto	l4256
   946  001126                     l4176:
   947                           
   948                           ;SPItest-MASTER.c: 39: else if (StrippedKey == 0x03)
   949  001126  0E03               	movlw	3
   950  001128  1852               	xorwf	_StrippedKey,w,c
   951  00112A  A4D8               	btfss	status,2,c
   952  00112C  D032               	goto	l4196
   953                           
   954                           ;SPItest-MASTER.c: 40: {
   955                           ;SPItest-MASTER.c: 41: MSendSPI(StrippedKey, 1);
   956  00112E  0E01               	movlw	1
   957  001130  0100               	movlb	0	; () banked
   958  001132  6F81               	movwf	MSendSPI@Slave& (0+255),b
   959  001134  5052               	movf	_StrippedKey,w,c
   960  001136  ECB1  F016         	call	_MSendSPI
   961                           
   962                           ;SPItest-MASTER.c: 42: MReceiveStrSPI(DoubleSPIM, 1);
   963  00113A  0EDA               	movlw	low _DoubleSPIM
   964  00113C  0100               	movlb	0	; () banked
   965  00113E  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
   966  001140  0E00               	movlw	high _DoubleSPIM
   967  001142  0100               	movlb	0	; () banked
   968  001144  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
   969  001146  0E01               	movlw	1
   970  001148  0100               	movlb	0	; () banked
   971  00114A  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
   972  00114C  EC55  F014         	call	_MReceiveStrSPI	;wreg free
   973                           
   974                           ;SPItest-MASTER.c: 43: CurrentVelocity = SPIReassembleDouble();
   975  001150  EC53  F017         	call	_SPIReassembleDouble	;wreg free
   976  001154  C080  F0B8         	movff	?_SPIReassembleDouble,_CurrentVelocity
   977  001158  C081  F0B9         	movff	?_SPIReassembleDouble+1,_CurrentVelocity+1
   978  00115C  C082  F0BA         	movff	?_SPIReassembleDouble+2,_CurrentVelocity+2
   979                           
   980                           ;SPItest-MASTER.c: 44: for (x = 0; x != 4; x++)
   981  001160  0E00               	movlw	0
   982  001162  0100               	movlb	0	; () banked
   983  001164  6FB4               	movwf	main@x& (0+255),b
   984  001166                     l4186:
   985                           
   986                           ; BSR set to: 0
   987  001166  0E04               	movlw	4
   988  001168  0100               	movlb	0	; () banked
   989  00116A  19B4               	xorwf	main@x& (0+255),w,b
   990  00116C  B4D8               	btfsc	status,2,c
   991  00116E  D0B3               	goto	l4256
   992  001170  D001               	goto	l4190
   993                           
   994                           ; BSR set to: 0
   995  001172  D0B1               	goto	l4256
   996  001174                     l4190:
   997                           
   998                           ; BSR set to: 0
   999                           ;SPItest-MASTER.c: 45: DoubleSPIM[x] = '\0';
  1000  001174  0100               	movlb	0	; () banked
  1001  001176  51B4               	movf	main@x& (0+255),w,b
  1002  001178  0D01               	mullw	1
  1003  00117A  0EDA               	movlw	low _DoubleSPIM
  1004  00117C  24F3               	addwf	prodl,w,c
  1005  00117E  6ED9               	movwf	fsr2l,c
  1006  001180  0E00               	movlw	high _DoubleSPIM
  1007  001182  20F4               	addwfc	prodh,w,c
  1008  001184  6EDA               	movwf	fsr2h,c
  1009  001186  0E00               	movlw	0
  1010  001188  6EDF               	movwf	indf2,c
  1011                           
  1012                           ; BSR set to: 0
  1013  00118A  0100               	movlb	0	; () banked
  1014  00118C  2BB4               	incf	main@x& (0+255),f,b
  1015  00118E  D7EB               	goto	l4186
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;SPItest-MASTER.c: 46: }
  1019                           
  1020                           ; BSR set to: 0
  1021  001190  D0A2               	goto	l4256
  1022  001192                     l4196:
  1023                           
  1024                           ;SPItest-MASTER.c: 47: else if (StrippedKey == 0x04)
  1025  001192  0E04               	movlw	4
  1026  001194  1852               	xorwf	_StrippedKey,w,c
  1027  001196  A4D8               	btfss	status,2,c
  1028  001198  D032               	goto	l4216
  1029                           
  1030                           ;SPItest-MASTER.c: 48: {
  1031                           ;SPItest-MASTER.c: 49: MSendSPI(StrippedKey, 1);
  1032  00119A  0E01               	movlw	1
  1033  00119C  0100               	movlb	0	; () banked
  1034  00119E  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1035  0011A0  5052               	movf	_StrippedKey,w,c
  1036  0011A2  ECB1  F016         	call	_MSendSPI
  1037                           
  1038                           ;SPItest-MASTER.c: 50: MReceiveStrSPI(DoubleSPIM, 1);
  1039  0011A6  0EDA               	movlw	low _DoubleSPIM
  1040  0011A8  0100               	movlb	0	; () banked
  1041  0011AA  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1042  0011AC  0E00               	movlw	high _DoubleSPIM
  1043  0011AE  0100               	movlb	0	; () banked
  1044  0011B0  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1045  0011B2  0E01               	movlw	1
  1046  0011B4  0100               	movlb	0	; () banked
  1047  0011B6  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1048  0011B8  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1049                           
  1050                           ;SPItest-MASTER.c: 51: Kp = SPIReassembleDouble();
  1051  0011BC  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1052  0011C0  C080  F045         	movff	?_SPIReassembleDouble,_Kp
  1053  0011C4  C081  F046         	movff	?_SPIReassembleDouble+1,_Kp+1
  1054  0011C8  C082  F047         	movff	?_SPIReassembleDouble+2,_Kp+2
  1055                           
  1056                           ;SPItest-MASTER.c: 52: for (x = 0; x != 4; x++)
  1057  0011CC  0E00               	movlw	0
  1058  0011CE  0100               	movlb	0	; () banked
  1059  0011D0  6FB4               	movwf	main@x& (0+255),b
  1060  0011D2                     l4206:
  1061                           
  1062                           ; BSR set to: 0
  1063  0011D2  0E04               	movlw	4
  1064  0011D4  0100               	movlb	0	; () banked
  1065  0011D6  19B4               	xorwf	main@x& (0+255),w,b
  1066  0011D8  B4D8               	btfsc	status,2,c
  1067  0011DA  D07D               	goto	l4256
  1068  0011DC  D001               	goto	l4210
  1069                           
  1070                           ; BSR set to: 0
  1071  0011DE  D07B               	goto	l4256
  1072  0011E0                     l4210:
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;SPItest-MASTER.c: 53: DoubleSPIM[x] = '\0';
  1076  0011E0  0100               	movlb	0	; () banked
  1077  0011E2  51B4               	movf	main@x& (0+255),w,b
  1078  0011E4  0D01               	mullw	1
  1079  0011E6  0EDA               	movlw	low _DoubleSPIM
  1080  0011E8  24F3               	addwf	prodl,w,c
  1081  0011EA  6ED9               	movwf	fsr2l,c
  1082  0011EC  0E00               	movlw	high _DoubleSPIM
  1083  0011EE  20F4               	addwfc	prodh,w,c
  1084  0011F0  6EDA               	movwf	fsr2h,c
  1085  0011F2  0E00               	movlw	0
  1086  0011F4  6EDF               	movwf	indf2,c
  1087                           
  1088                           ; BSR set to: 0
  1089  0011F6  0100               	movlb	0	; () banked
  1090  0011F8  2BB4               	incf	main@x& (0+255),f,b
  1091  0011FA  D7EB               	goto	l4206
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;SPItest-MASTER.c: 54: }
  1095                           
  1096                           ; BSR set to: 0
  1097  0011FC  D06C               	goto	l4256
  1098  0011FE                     l4216:
  1099                           
  1100                           ;SPItest-MASTER.c: 55: else if (StrippedKey == 0x06)
  1101  0011FE  0E06               	movlw	6
  1102  001200  1852               	xorwf	_StrippedKey,w,c
  1103  001202  A4D8               	btfss	status,2,c
  1104  001204  D032               	goto	l4236
  1105                           
  1106                           ;SPItest-MASTER.c: 56: {
  1107                           ;SPItest-MASTER.c: 57: MSendSPI(StrippedKey, 1);
  1108  001206  0E01               	movlw	1
  1109  001208  0100               	movlb	0	; () banked
  1110  00120A  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1111  00120C  5052               	movf	_StrippedKey,w,c
  1112  00120E  ECB1  F016         	call	_MSendSPI
  1113                           
  1114                           ;SPItest-MASTER.c: 58: MReceiveStrSPI(DoubleSPIM, 1);
  1115  001212  0EDA               	movlw	low _DoubleSPIM
  1116  001214  0100               	movlb	0	; () banked
  1117  001216  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1118  001218  0E00               	movlw	high _DoubleSPIM
  1119  00121A  0100               	movlb	0	; () banked
  1120  00121C  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1121  00121E  0E01               	movlw	1
  1122  001220  0100               	movlb	0	; () banked
  1123  001222  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1124  001224  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1125                           
  1126                           ;SPItest-MASTER.c: 59: Ki = SPIReassembleDouble();
  1127  001228  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1128  00122C  C080  F042         	movff	?_SPIReassembleDouble,_Ki
  1129  001230  C081  F043         	movff	?_SPIReassembleDouble+1,_Ki+1
  1130  001234  C082  F044         	movff	?_SPIReassembleDouble+2,_Ki+2
  1131                           
  1132                           ;SPItest-MASTER.c: 60: for (x = 0; x != 4; x++)
  1133  001238  0E00               	movlw	0
  1134  00123A  0100               	movlb	0	; () banked
  1135  00123C  6FB4               	movwf	main@x& (0+255),b
  1136  00123E                     l4226:
  1137                           
  1138                           ; BSR set to: 0
  1139  00123E  0E04               	movlw	4
  1140  001240  0100               	movlb	0	; () banked
  1141  001242  19B4               	xorwf	main@x& (0+255),w,b
  1142  001244  B4D8               	btfsc	status,2,c
  1143  001246  D047               	goto	l4256
  1144  001248  D001               	goto	l4230
  1145                           
  1146                           ; BSR set to: 0
  1147  00124A  D045               	goto	l4256
  1148  00124C                     l4230:
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;SPItest-MASTER.c: 61: DoubleSPIM[x] = '\0';
  1152  00124C  0100               	movlb	0	; () banked
  1153  00124E  51B4               	movf	main@x& (0+255),w,b
  1154  001250  0D01               	mullw	1
  1155  001252  0EDA               	movlw	low _DoubleSPIM
  1156  001254  24F3               	addwf	prodl,w,c
  1157  001256  6ED9               	movwf	fsr2l,c
  1158  001258  0E00               	movlw	high _DoubleSPIM
  1159  00125A  20F4               	addwfc	prodh,w,c
  1160  00125C  6EDA               	movwf	fsr2h,c
  1161  00125E  0E00               	movlw	0
  1162  001260  6EDF               	movwf	indf2,c
  1163                           
  1164                           ; BSR set to: 0
  1165  001262  0100               	movlb	0	; () banked
  1166  001264  2BB4               	incf	main@x& (0+255),f,b
  1167  001266  D7EB               	goto	l4226
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;SPItest-MASTER.c: 62: }
  1171                           
  1172                           ; BSR set to: 0
  1173  001268  D036               	goto	l4256
  1174  00126A                     l4236:
  1175                           
  1176                           ;SPItest-MASTER.c: 63: else if (StrippedKey == 0x08)
  1177  00126A  0E08               	movlw	8
  1178  00126C  1852               	xorwf	_StrippedKey,w,c
  1179  00126E  A4D8               	btfss	status,2,c
  1180  001270  D032               	goto	l4256
  1181                           
  1182                           ;SPItest-MASTER.c: 64: {
  1183                           ;SPItest-MASTER.c: 65: MSendSPI(StrippedKey, 1);
  1184  001272  0E01               	movlw	1
  1185  001274  0100               	movlb	0	; () banked
  1186  001276  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1187  001278  5052               	movf	_StrippedKey,w,c
  1188  00127A  ECB1  F016         	call	_MSendSPI
  1189                           
  1190                           ;SPItest-MASTER.c: 66: MReceiveStrSPI(DoubleSPIM, 1);
  1191  00127E  0EDA               	movlw	low _DoubleSPIM
  1192  001280  0100               	movlb	0	; () banked
  1193  001282  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1194  001284  0E00               	movlw	high _DoubleSPIM
  1195  001286  0100               	movlb	0	; () banked
  1196  001288  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1197  00128A  0E01               	movlw	1
  1198  00128C  0100               	movlb	0	; () banked
  1199  00128E  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1200  001290  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1201                           
  1202                           ;SPItest-MASTER.c: 67: Kd = SPIReassembleDouble();
  1203  001294  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1204  001298  C080  F03F         	movff	?_SPIReassembleDouble,_Kd
  1205  00129C  C081  F040         	movff	?_SPIReassembleDouble+1,_Kd+1
  1206  0012A0  C082  F041         	movff	?_SPIReassembleDouble+2,_Kd+2
  1207                           
  1208                           ;SPItest-MASTER.c: 68: for (x = 0; x != 4; x++)
  1209  0012A4  0E00               	movlw	0
  1210  0012A6  0100               	movlb	0	; () banked
  1211  0012A8  6FB4               	movwf	main@x& (0+255),b
  1212  0012AA                     l4246:
  1213                           
  1214                           ; BSR set to: 0
  1215  0012AA  0E04               	movlw	4
  1216  0012AC  0100               	movlb	0	; () banked
  1217  0012AE  19B4               	xorwf	main@x& (0+255),w,b
  1218  0012B0  B4D8               	btfsc	status,2,c
  1219  0012B2  D011               	goto	l4256
  1220  0012B4  D001               	goto	l4250
  1221                           
  1222                           ; BSR set to: 0
  1223  0012B6  D00F               	goto	l4256
  1224  0012B8                     l4250:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;SPItest-MASTER.c: 69: DoubleSPIM[x] = '\0';
  1228  0012B8  0100               	movlb	0	; () banked
  1229  0012BA  51B4               	movf	main@x& (0+255),w,b
  1230  0012BC  0D01               	mullw	1
  1231  0012BE  0EDA               	movlw	low _DoubleSPIM
  1232  0012C0  24F3               	addwf	prodl,w,c
  1233  0012C2  6ED9               	movwf	fsr2l,c
  1234  0012C4  0E00               	movlw	high _DoubleSPIM
  1235  0012C6  20F4               	addwfc	prodh,w,c
  1236  0012C8  6EDA               	movwf	fsr2h,c
  1237  0012CA  0E00               	movlw	0
  1238  0012CC  6EDF               	movwf	indf2,c
  1239                           
  1240                           ; BSR set to: 0
  1241  0012CE  0100               	movlb	0	; () banked
  1242  0012D0  2BB4               	incf	main@x& (0+255),f,b
  1243  0012D2  D7EB               	goto	l4246
  1244                           
  1245                           ; BSR set to: 0
  1246                           
  1247                           ; BSR set to: 0
  1248                           
  1249                           ; BSR set to: 0
  1250                           
  1251                           ; BSR set to: 0
  1252                           
  1253                           ; BSR set to: 0
  1254                           
  1255                           ; BSR set to: 0
  1256  0012D4  D000               	goto	l4256
  1257  0012D6                     l4256:
  1258                           
  1259                           ;SPItest-MASTER.c: 70: }
  1260                           ;SPItest-MASTER.c: 71: }
  1261                           ;SPItest-MASTER.c: 72: while (!checksum());
  1262  0012D6  EC3A  F015         	call	_checksum	;wreg free
  1263  0012DA  0900               	iorlw	0
  1264  0012DC  A4D8               	btfss	status,2,c
  1265  0012DE  D6C8               	goto	l4138
  1266  0012E0  D6EC               	goto	l4156
  1267                           
  1268                           ;SPItest-MASTER.c: 73: }
  1269  0012E2  D6C6               	goto	l4138
  1270  0012E4                     l4258:
  1271                           
  1272                           ;SPItest-MASTER.c: 74: else if ((StrippedKey == 0x01) || (StrippedKey == 0x05) || (Strip
      +                          pedKey == 0x07) || (StrippedKey == 0x09))
  1273  0012E4  0452               	decf	_StrippedKey,w,c
  1274  0012E6  B4D8               	btfsc	status,2,c
  1275  0012E8  D00C               	goto	l4266
  1276  0012EA  0E05               	movlw	5
  1277  0012EC  1852               	xorwf	_StrippedKey,w,c
  1278  0012EE  B4D8               	btfsc	status,2,c
  1279  0012F0  D008               	goto	l4266
  1280  0012F2  0E07               	movlw	7
  1281  0012F4  1852               	xorwf	_StrippedKey,w,c
  1282  0012F6  B4D8               	btfsc	status,2,c
  1283  0012F8  D004               	goto	l4266
  1284  0012FA  0E09               	movlw	9
  1285  0012FC  1852               	xorwf	_StrippedKey,w,c
  1286  0012FE  A4D8               	btfss	status,2,c
  1287  001300  D6B7               	goto	l4138
  1288  001302                     l4266:
  1289                           
  1290                           ;SPItest-MASTER.c: 75: {
  1291                           ;SPItest-MASTER.c: 76: MSendSPI(StrippedKey, 1);
  1292  001302  0E01               	movlw	1
  1293  001304  0100               	movlb	0	; () banked
  1294  001306  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1295  001308  5052               	movf	_StrippedKey,w,c
  1296  00130A  ECB1  F016         	call	_MSendSPI
  1297                           
  1298                           ;SPItest-MASTER.c: 77: SPIDisassembleDouble(StrippedValue);
  1299  00130E  C04B  F082         	movff	_StrippedValue,SPIDisassembleDouble@dub
  1300  001312  C04C  F083         	movff	_StrippedValue+1,SPIDisassembleDouble@dub+1
  1301  001316  C04D  F084         	movff	_StrippedValue+2,SPIDisassembleDouble@dub+2
  1302  00131A  EC31  F017         	call	_SPIDisassembleDouble	;wreg free
  1303                           
  1304                           ;SPItest-MASTER.c: 78: PORTAbits.RA3 = 0;
  1305  00131E  9680               	bcf	3968,3,c	;volatile
  1306                           
  1307                           ;SPItest-MASTER.c: 79: while (PORTAbits.RA1);
  1308  001320  D000               	goto	l276
  1309  001322                     l276:
  1310  001322  B280               	btfsc	3968,1,c	;volatile
  1311  001324  D7FE               	goto	l276
  1312                           
  1313                           ;SPItest-MASTER.c: 80: Delay10TCYx(50);
  1314  001326  0E32               	movlw	50
  1315  001328  EC13  F018         	call	_Delay10TCYx
  1316                           
  1317                           ;SPItest-MASTER.c: 81: for (x = 0; x != 4; x++)
  1318  00132C  0E00               	movlw	0
  1319  00132E  0100               	movlb	0	; () banked
  1320  001330  6FB4               	movwf	main@x& (0+255),b
  1321  001332                     l4276:
  1322                           
  1323                           ; BSR set to: 0
  1324  001332  0E04               	movlw	4
  1325  001334  0100               	movlb	0	; () banked
  1326  001336  19B4               	xorwf	main@x& (0+255),w,b
  1327  001338  B4D8               	btfsc	status,2,c
  1328  00133A  D014               	goto	l280
  1329  00133C  D001               	goto	l4280
  1330                           
  1331                           ; BSR set to: 0
  1332  00133E  D012               	goto	l280
  1333  001340                     l4280:
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;SPItest-MASTER.c: 82: MSendSPI(DoubleSPIM[x], 1);
  1337  001340  0E01               	movlw	1
  1338  001342  0100               	movlb	0	; () banked
  1339  001344  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1340  001346  0100               	movlb	0	; () banked
  1341  001348  51B4               	movf	main@x& (0+255),w,b
  1342  00134A  0D01               	mullw	1
  1343  00134C  0EDA               	movlw	low _DoubleSPIM
  1344  00134E  24F3               	addwf	prodl,w,c
  1345  001350  6ED9               	movwf	fsr2l,c
  1346  001352  0E00               	movlw	high _DoubleSPIM
  1347  001354  20F4               	addwfc	prodh,w,c
  1348  001356  6EDA               	movwf	fsr2h,c
  1349  001358  50DF               	movf	indf2,w,c
  1350  00135A  ECB1  F016         	call	_MSendSPI
  1351  00135E  0100               	movlb	0	; () banked
  1352  001360  2BB4               	incf	main@x& (0+255),f,b
  1353  001362  D7E7               	goto	l4276
  1354  001364                     l280:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;SPItest-MASTER.c: 83: PORTAbits.RA3 = 1;
  1358  001364  8680               	bsf	3968,3,c	;volatile
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;SPItest-MASTER.c: 84: }
  1362                           ;SPItest-MASTER.c: 85: }
  1363                           
  1364                           ; BSR set to: 0
  1365  001366  D684               	goto	l4138
  1366  001368                     l4286:
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;SPItest-MASTER.c: 87: else if (AZEL == 2)
  1370  001368  0E02               	movlw	2
  1371  00136A  0100               	movlb	0	; () banked
  1372  00136C  19DE               	xorwf	_AZEL& (0+255),w,b
  1373  00136E  A4D8               	btfss	status,2,c
  1374  001370  D67F               	goto	l4138
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;SPItest-MASTER.c: 88: {
  1378                           ;SPItest-MASTER.c: 89: if ((StrippedKey == 0x02) || (StrippedKey == 0x03) || (StrippedKe
      +                          y == 0x04) || (StrippedKey == 0x06) || StrippedKey == 0x08)
  1379  001372  0E02               	movlw	2
  1380  001374  1852               	xorwf	_StrippedKey,w,c
  1381  001376  B4D8               	btfsc	status,2,c
  1382  001378  D012               	goto	l4298
  1383                           
  1384                           ; BSR set to: 0
  1385  00137A  0E03               	movlw	3
  1386  00137C  1852               	xorwf	_StrippedKey,w,c
  1387  00137E  B4D8               	btfsc	status,2,c
  1388  001380  D00E               	goto	l4298
  1389                           
  1390                           ; BSR set to: 0
  1391  001382  0E04               	movlw	4
  1392  001384  1852               	xorwf	_StrippedKey,w,c
  1393  001386  B4D8               	btfsc	status,2,c
  1394  001388  D00A               	goto	l4298
  1395                           
  1396                           ; BSR set to: 0
  1397  00138A  0E06               	movlw	6
  1398  00138C  1852               	xorwf	_StrippedKey,w,c
  1399  00138E  B4D8               	btfsc	status,2,c
  1400  001390  D006               	goto	l4298
  1401                           
  1402                           ; BSR set to: 0
  1403  001392  0E08               	movlw	8
  1404  001394  1852               	xorwf	_StrippedKey,w,c
  1405  001396  B4D8               	btfsc	status,2,c
  1406  001398  D002               	goto	l4298
  1407  00139A  D116               	goto	l4400
  1408                           
  1409                           ; BSR set to: 0
  1410  00139C  D000               	goto	l4298
  1411  00139E                     l4298:
  1412                           
  1413                           ;SPItest-MASTER.c: 92: {
  1414                           ;SPItest-MASTER.c: 93: if (StrippedKey == 0x02)
  1415  00139E  0E02               	movlw	2
  1416  0013A0  1852               	xorwf	_StrippedKey,w,c
  1417  0013A2  A4D8               	btfss	status,2,c
  1418  0013A4  D032               	goto	l4318
  1419                           
  1420                           ;SPItest-MASTER.c: 94: {
  1421                           ;SPItest-MASTER.c: 95: MSendSPI(StrippedKey, 2);
  1422  0013A6  0E02               	movlw	2
  1423  0013A8  0100               	movlb	0	; () banked
  1424  0013AA  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1425  0013AC  5052               	movf	_StrippedKey,w,c
  1426  0013AE  ECB1  F016         	call	_MSendSPI
  1427                           
  1428                           ;SPItest-MASTER.c: 96: MReceiveStrSPI(DoubleSPIM, 2);
  1429  0013B2  0EDA               	movlw	low _DoubleSPIM
  1430  0013B4  0100               	movlb	0	; () banked
  1431  0013B6  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1432  0013B8  0E00               	movlw	high _DoubleSPIM
  1433  0013BA  0100               	movlb	0	; () banked
  1434  0013BC  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1435  0013BE  0E02               	movlw	2
  1436  0013C0  0100               	movlb	0	; () banked
  1437  0013C2  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1438  0013C4  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1439                           
  1440                           ;SPItest-MASTER.c: 97: CurrentAngle = SPIReassembleDouble();
  1441  0013C8  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1442  0013CC  C080  F0B5         	movff	?_SPIReassembleDouble,_CurrentAngle
  1443  0013D0  C081  F0B6         	movff	?_SPIReassembleDouble+1,_CurrentAngle+1
  1444  0013D4  C082  F0B7         	movff	?_SPIReassembleDouble+2,_CurrentAngle+2
  1445                           
  1446                           ;SPItest-MASTER.c: 98: for (x = 0; x != 4; x++)
  1447  0013D8  0E00               	movlw	0
  1448  0013DA  0100               	movlb	0	; () banked
  1449  0013DC  6FB4               	movwf	main@x& (0+255),b
  1450  0013DE                     l4308:
  1451                           
  1452                           ; BSR set to: 0
  1453  0013DE  0E04               	movlw	4
  1454  0013E0  0100               	movlb	0	; () banked
  1455  0013E2  19B4               	xorwf	main@x& (0+255),w,b
  1456  0013E4  B4D8               	btfsc	status,2,c
  1457  0013E6  D0E9               	goto	l4398
  1458  0013E8  D001               	goto	l4312
  1459                           
  1460                           ; BSR set to: 0
  1461  0013EA  D0E7               	goto	l4398
  1462  0013EC                     l4312:
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;SPItest-MASTER.c: 99: DoubleSPIM[x] = '\0';
  1466  0013EC  0100               	movlb	0	; () banked
  1467  0013EE  51B4               	movf	main@x& (0+255),w,b
  1468  0013F0  0D01               	mullw	1
  1469  0013F2  0EDA               	movlw	low _DoubleSPIM
  1470  0013F4  24F3               	addwf	prodl,w,c
  1471  0013F6  6ED9               	movwf	fsr2l,c
  1472  0013F8  0E00               	movlw	high _DoubleSPIM
  1473  0013FA  20F4               	addwfc	prodh,w,c
  1474  0013FC  6EDA               	movwf	fsr2h,c
  1475  0013FE  0E00               	movlw	0
  1476  001400  6EDF               	movwf	indf2,c
  1477                           
  1478                           ; BSR set to: 0
  1479  001402  0100               	movlb	0	; () banked
  1480  001404  2BB4               	incf	main@x& (0+255),f,b
  1481  001406  D7EB               	goto	l4308
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;SPItest-MASTER.c: 100: }
  1485                           
  1486                           ; BSR set to: 0
  1487  001408  D0D8               	goto	l4398
  1488  00140A                     l4318:
  1489                           
  1490                           ;SPItest-MASTER.c: 101: else if (StrippedKey == 0x03)
  1491  00140A  0E03               	movlw	3
  1492  00140C  1852               	xorwf	_StrippedKey,w,c
  1493  00140E  A4D8               	btfss	status,2,c
  1494  001410  D032               	goto	l4338
  1495                           
  1496                           ;SPItest-MASTER.c: 102: {
  1497                           ;SPItest-MASTER.c: 103: MSendSPI(StrippedKey, 2);
  1498  001412  0E02               	movlw	2
  1499  001414  0100               	movlb	0	; () banked
  1500  001416  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1501  001418  5052               	movf	_StrippedKey,w,c
  1502  00141A  ECB1  F016         	call	_MSendSPI
  1503                           
  1504                           ;SPItest-MASTER.c: 104: MReceiveStrSPI(DoubleSPIM, 2);
  1505  00141E  0EDA               	movlw	low _DoubleSPIM
  1506  001420  0100               	movlb	0	; () banked
  1507  001422  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1508  001424  0E00               	movlw	high _DoubleSPIM
  1509  001426  0100               	movlb	0	; () banked
  1510  001428  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1511  00142A  0E02               	movlw	2
  1512  00142C  0100               	movlb	0	; () banked
  1513  00142E  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1514  001430  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1515                           
  1516                           ;SPItest-MASTER.c: 105: CurrentVelocity = SPIReassembleDouble();
  1517  001434  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1518  001438  C080  F0B8         	movff	?_SPIReassembleDouble,_CurrentVelocity
  1519  00143C  C081  F0B9         	movff	?_SPIReassembleDouble+1,_CurrentVelocity+1
  1520  001440  C082  F0BA         	movff	?_SPIReassembleDouble+2,_CurrentVelocity+2
  1521                           
  1522                           ;SPItest-MASTER.c: 106: for (x = 0; x != 4; x++)
  1523  001444  0E00               	movlw	0
  1524  001446  0100               	movlb	0	; () banked
  1525  001448  6FB4               	movwf	main@x& (0+255),b
  1526  00144A                     l4328:
  1527                           
  1528                           ; BSR set to: 0
  1529  00144A  0E04               	movlw	4
  1530  00144C  0100               	movlb	0	; () banked
  1531  00144E  19B4               	xorwf	main@x& (0+255),w,b
  1532  001450  B4D8               	btfsc	status,2,c
  1533  001452  D0B3               	goto	l4398
  1534  001454  D001               	goto	l4332
  1535                           
  1536                           ; BSR set to: 0
  1537  001456  D0B1               	goto	l4398
  1538  001458                     l4332:
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;SPItest-MASTER.c: 107: DoubleSPIM[x] = '\0';
  1542  001458  0100               	movlb	0	; () banked
  1543  00145A  51B4               	movf	main@x& (0+255),w,b
  1544  00145C  0D01               	mullw	1
  1545  00145E  0EDA               	movlw	low _DoubleSPIM
  1546  001460  24F3               	addwf	prodl,w,c
  1547  001462  6ED9               	movwf	fsr2l,c
  1548  001464  0E00               	movlw	high _DoubleSPIM
  1549  001466  20F4               	addwfc	prodh,w,c
  1550  001468  6EDA               	movwf	fsr2h,c
  1551  00146A  0E00               	movlw	0
  1552  00146C  6EDF               	movwf	indf2,c
  1553                           
  1554                           ; BSR set to: 0
  1555  00146E  0100               	movlb	0	; () banked
  1556  001470  2BB4               	incf	main@x& (0+255),f,b
  1557  001472  D7EB               	goto	l4328
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;SPItest-MASTER.c: 108: }
  1561                           
  1562                           ; BSR set to: 0
  1563  001474  D0A2               	goto	l4398
  1564  001476                     l4338:
  1565                           
  1566                           ;SPItest-MASTER.c: 109: else if (StrippedKey == 0x04)
  1567  001476  0E04               	movlw	4
  1568  001478  1852               	xorwf	_StrippedKey,w,c
  1569  00147A  A4D8               	btfss	status,2,c
  1570  00147C  D032               	goto	l4358
  1571                           
  1572                           ;SPItest-MASTER.c: 110: {
  1573                           ;SPItest-MASTER.c: 111: MSendSPI(StrippedKey, 2);
  1574  00147E  0E02               	movlw	2
  1575  001480  0100               	movlb	0	; () banked
  1576  001482  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1577  001484  5052               	movf	_StrippedKey,w,c
  1578  001486  ECB1  F016         	call	_MSendSPI
  1579                           
  1580                           ;SPItest-MASTER.c: 112: MReceiveStrSPI(DoubleSPIM, 2);
  1581  00148A  0EDA               	movlw	low _DoubleSPIM
  1582  00148C  0100               	movlb	0	; () banked
  1583  00148E  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1584  001490  0E00               	movlw	high _DoubleSPIM
  1585  001492  0100               	movlb	0	; () banked
  1586  001494  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1587  001496  0E02               	movlw	2
  1588  001498  0100               	movlb	0	; () banked
  1589  00149A  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1590  00149C  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1591                           
  1592                           ;SPItest-MASTER.c: 113: Kp = SPIReassembleDouble();
  1593  0014A0  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1594  0014A4  C080  F045         	movff	?_SPIReassembleDouble,_Kp
  1595  0014A8  C081  F046         	movff	?_SPIReassembleDouble+1,_Kp+1
  1596  0014AC  C082  F047         	movff	?_SPIReassembleDouble+2,_Kp+2
  1597                           
  1598                           ;SPItest-MASTER.c: 114: for (x = 0; x != 4; x++)
  1599  0014B0  0E00               	movlw	0
  1600  0014B2  0100               	movlb	0	; () banked
  1601  0014B4  6FB4               	movwf	main@x& (0+255),b
  1602  0014B6                     l4348:
  1603                           
  1604                           ; BSR set to: 0
  1605  0014B6  0E04               	movlw	4
  1606  0014B8  0100               	movlb	0	; () banked
  1607  0014BA  19B4               	xorwf	main@x& (0+255),w,b
  1608  0014BC  B4D8               	btfsc	status,2,c
  1609  0014BE  D07D               	goto	l4398
  1610  0014C0  D001               	goto	l4352
  1611                           
  1612                           ; BSR set to: 0
  1613  0014C2  D07B               	goto	l4398
  1614  0014C4                     l4352:
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;SPItest-MASTER.c: 115: DoubleSPIM[x] = '\0';
  1618  0014C4  0100               	movlb	0	; () banked
  1619  0014C6  51B4               	movf	main@x& (0+255),w,b
  1620  0014C8  0D01               	mullw	1
  1621  0014CA  0EDA               	movlw	low _DoubleSPIM
  1622  0014CC  24F3               	addwf	prodl,w,c
  1623  0014CE  6ED9               	movwf	fsr2l,c
  1624  0014D0  0E00               	movlw	high _DoubleSPIM
  1625  0014D2  20F4               	addwfc	prodh,w,c
  1626  0014D4  6EDA               	movwf	fsr2h,c
  1627  0014D6  0E00               	movlw	0
  1628  0014D8  6EDF               	movwf	indf2,c
  1629                           
  1630                           ; BSR set to: 0
  1631  0014DA  0100               	movlb	0	; () banked
  1632  0014DC  2BB4               	incf	main@x& (0+255),f,b
  1633  0014DE  D7EB               	goto	l4348
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;SPItest-MASTER.c: 116: }
  1637                           
  1638                           ; BSR set to: 0
  1639  0014E0  D06C               	goto	l4398
  1640  0014E2                     l4358:
  1641                           
  1642                           ;SPItest-MASTER.c: 117: else if (StrippedKey == 0x06)
  1643  0014E2  0E06               	movlw	6
  1644  0014E4  1852               	xorwf	_StrippedKey,w,c
  1645  0014E6  A4D8               	btfss	status,2,c
  1646  0014E8  D032               	goto	l4378
  1647                           
  1648                           ;SPItest-MASTER.c: 118: {
  1649                           ;SPItest-MASTER.c: 119: MSendSPI(StrippedKey, 2);
  1650  0014EA  0E02               	movlw	2
  1651  0014EC  0100               	movlb	0	; () banked
  1652  0014EE  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1653  0014F0  5052               	movf	_StrippedKey,w,c
  1654  0014F2  ECB1  F016         	call	_MSendSPI
  1655                           
  1656                           ;SPItest-MASTER.c: 120: MReceiveStrSPI(DoubleSPIM, 2);
  1657  0014F6  0EDA               	movlw	low _DoubleSPIM
  1658  0014F8  0100               	movlb	0	; () banked
  1659  0014FA  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1660  0014FC  0E00               	movlw	high _DoubleSPIM
  1661  0014FE  0100               	movlb	0	; () banked
  1662  001500  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1663  001502  0E02               	movlw	2
  1664  001504  0100               	movlb	0	; () banked
  1665  001506  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1666  001508  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1667                           
  1668                           ;SPItest-MASTER.c: 121: Ki = SPIReassembleDouble();
  1669  00150C  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1670  001510  C080  F042         	movff	?_SPIReassembleDouble,_Ki
  1671  001514  C081  F043         	movff	?_SPIReassembleDouble+1,_Ki+1
  1672  001518  C082  F044         	movff	?_SPIReassembleDouble+2,_Ki+2
  1673                           
  1674                           ;SPItest-MASTER.c: 122: for (x = 0; x != 4; x++)
  1675  00151C  0E00               	movlw	0
  1676  00151E  0100               	movlb	0	; () banked
  1677  001520  6FB4               	movwf	main@x& (0+255),b
  1678  001522                     l4368:
  1679                           
  1680                           ; BSR set to: 0
  1681  001522  0E04               	movlw	4
  1682  001524  0100               	movlb	0	; () banked
  1683  001526  19B4               	xorwf	main@x& (0+255),w,b
  1684  001528  B4D8               	btfsc	status,2,c
  1685  00152A  D047               	goto	l4398
  1686  00152C  D001               	goto	l4372
  1687                           
  1688                           ; BSR set to: 0
  1689  00152E  D045               	goto	l4398
  1690  001530                     l4372:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;SPItest-MASTER.c: 123: DoubleSPIM[x] = '\0';
  1694  001530  0100               	movlb	0	; () banked
  1695  001532  51B4               	movf	main@x& (0+255),w,b
  1696  001534  0D01               	mullw	1
  1697  001536  0EDA               	movlw	low _DoubleSPIM
  1698  001538  24F3               	addwf	prodl,w,c
  1699  00153A  6ED9               	movwf	fsr2l,c
  1700  00153C  0E00               	movlw	high _DoubleSPIM
  1701  00153E  20F4               	addwfc	prodh,w,c
  1702  001540  6EDA               	movwf	fsr2h,c
  1703  001542  0E00               	movlw	0
  1704  001544  6EDF               	movwf	indf2,c
  1705                           
  1706                           ; BSR set to: 0
  1707  001546  0100               	movlb	0	; () banked
  1708  001548  2BB4               	incf	main@x& (0+255),f,b
  1709  00154A  D7EB               	goto	l4368
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;SPItest-MASTER.c: 124: }
  1713                           
  1714                           ; BSR set to: 0
  1715  00154C  D036               	goto	l4398
  1716  00154E                     l4378:
  1717                           
  1718                           ;SPItest-MASTER.c: 125: else if (StrippedKey == 0x08)
  1719  00154E  0E08               	movlw	8
  1720  001550  1852               	xorwf	_StrippedKey,w,c
  1721  001552  A4D8               	btfss	status,2,c
  1722  001554  D032               	goto	l4398
  1723                           
  1724                           ;SPItest-MASTER.c: 126: {
  1725                           ;SPItest-MASTER.c: 127: MSendSPI(StrippedKey, 2);
  1726  001556  0E02               	movlw	2
  1727  001558  0100               	movlb	0	; () banked
  1728  00155A  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1729  00155C  5052               	movf	_StrippedKey,w,c
  1730  00155E  ECB1  F016         	call	_MSendSPI
  1731                           
  1732                           ;SPItest-MASTER.c: 128: MReceiveStrSPI(DoubleSPIM, 2);
  1733  001562  0EDA               	movlw	low _DoubleSPIM
  1734  001564  0100               	movlb	0	; () banked
  1735  001566  6FAF               	movwf	MReceiveStrSPI@str& (0+255),b
  1736  001568  0E00               	movlw	high _DoubleSPIM
  1737  00156A  0100               	movlb	0	; () banked
  1738  00156C  6FB0               	movwf	(MReceiveStrSPI@str+1)& (0+255),b
  1739  00156E  0E02               	movlw	2
  1740  001570  0100               	movlb	0	; () banked
  1741  001572  6FB1               	movwf	MReceiveStrSPI@Slave& (0+255),b
  1742  001574  EC55  F014         	call	_MReceiveStrSPI	;wreg free
  1743                           
  1744                           ;SPItest-MASTER.c: 129: Kd = SPIReassembleDouble();
  1745  001578  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  1746  00157C  C080  F03F         	movff	?_SPIReassembleDouble,_Kd
  1747  001580  C081  F040         	movff	?_SPIReassembleDouble+1,_Kd+1
  1748  001584  C082  F041         	movff	?_SPIReassembleDouble+2,_Kd+2
  1749                           
  1750                           ;SPItest-MASTER.c: 130: for (x = 0; x != 4; x++)
  1751  001588  0E00               	movlw	0
  1752  00158A  0100               	movlb	0	; () banked
  1753  00158C  6FB4               	movwf	main@x& (0+255),b
  1754  00158E                     l4388:
  1755                           
  1756                           ; BSR set to: 0
  1757  00158E  0E04               	movlw	4
  1758  001590  0100               	movlb	0	; () banked
  1759  001592  19B4               	xorwf	main@x& (0+255),w,b
  1760  001594  B4D8               	btfsc	status,2,c
  1761  001596  D011               	goto	l4398
  1762  001598  D001               	goto	l4392
  1763                           
  1764                           ; BSR set to: 0
  1765  00159A  D00F               	goto	l4398
  1766  00159C                     l4392:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;SPItest-MASTER.c: 131: DoubleSPIM[x] = '\0';
  1770  00159C  0100               	movlb	0	; () banked
  1771  00159E  51B4               	movf	main@x& (0+255),w,b
  1772  0015A0  0D01               	mullw	1
  1773  0015A2  0EDA               	movlw	low _DoubleSPIM
  1774  0015A4  24F3               	addwf	prodl,w,c
  1775  0015A6  6ED9               	movwf	fsr2l,c
  1776  0015A8  0E00               	movlw	high _DoubleSPIM
  1777  0015AA  20F4               	addwfc	prodh,w,c
  1778  0015AC  6EDA               	movwf	fsr2h,c
  1779  0015AE  0E00               	movlw	0
  1780  0015B0  6EDF               	movwf	indf2,c
  1781                           
  1782                           ; BSR set to: 0
  1783  0015B2  0100               	movlb	0	; () banked
  1784  0015B4  2BB4               	incf	main@x& (0+255),f,b
  1785  0015B6  D7EB               	goto	l4388
  1786                           
  1787                           ; BSR set to: 0
  1788                           
  1789                           ; BSR set to: 0
  1790                           
  1791                           ; BSR set to: 0
  1792                           
  1793                           ; BSR set to: 0
  1794                           
  1795                           ; BSR set to: 0
  1796                           
  1797                           ; BSR set to: 0
  1798  0015B8  D000               	goto	l4398
  1799  0015BA                     l4398:
  1800                           
  1801                           ;SPItest-MASTER.c: 132: }
  1802                           ;SPItest-MASTER.c: 133: }
  1803                           ;SPItest-MASTER.c: 134: while (!checksum());
  1804  0015BA  EC3A  F015         	call	_checksum	;wreg free
  1805  0015BE  0900               	iorlw	0
  1806  0015C0  A4D8               	btfss	status,2,c
  1807  0015C2  D556               	goto	l4138
  1808  0015C4  D6EC               	goto	l4298
  1809                           
  1810                           ;SPItest-MASTER.c: 135: }
  1811  0015C6  D554               	goto	l4138
  1812  0015C8                     l4400:
  1813                           
  1814                           ;SPItest-MASTER.c: 136: else if ((StrippedKey == 0x01) || (StrippedKey == 0x05) || (Stri
      +                          ppedKey == 0x07) || (StrippedKey == 0x09))
  1815  0015C8  0452               	decf	_StrippedKey,w,c
  1816  0015CA  B4D8               	btfsc	status,2,c
  1817  0015CC  D00C               	goto	l4408
  1818  0015CE  0E05               	movlw	5
  1819  0015D0  1852               	xorwf	_StrippedKey,w,c
  1820  0015D2  B4D8               	btfsc	status,2,c
  1821  0015D4  D008               	goto	l4408
  1822  0015D6  0E07               	movlw	7
  1823  0015D8  1852               	xorwf	_StrippedKey,w,c
  1824  0015DA  B4D8               	btfsc	status,2,c
  1825  0015DC  D004               	goto	l4408
  1826  0015DE  0E09               	movlw	9
  1827  0015E0  1852               	xorwf	_StrippedKey,w,c
  1828  0015E2  A4D8               	btfss	status,2,c
  1829  0015E4  D545               	goto	l4138
  1830  0015E6                     l4408:
  1831                           
  1832                           ;SPItest-MASTER.c: 137: {
  1833                           ;SPItest-MASTER.c: 138: MSendSPI(StrippedKey, 2);
  1834  0015E6  0E02               	movlw	2
  1835  0015E8  0100               	movlb	0	; () banked
  1836  0015EA  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1837  0015EC  5052               	movf	_StrippedKey,w,c
  1838  0015EE  ECB1  F016         	call	_MSendSPI
  1839                           
  1840                           ;SPItest-MASTER.c: 139: SPIDisassembleDouble(StrippedValue);
  1841  0015F2  C04B  F082         	movff	_StrippedValue,SPIDisassembleDouble@dub
  1842  0015F6  C04C  F083         	movff	_StrippedValue+1,SPIDisassembleDouble@dub+1
  1843  0015FA  C04D  F084         	movff	_StrippedValue+2,SPIDisassembleDouble@dub+2
  1844  0015FE  EC31  F017         	call	_SPIDisassembleDouble	;wreg free
  1845                           
  1846                           ;SPItest-MASTER.c: 140: PORTAbits.RA4 = 0;
  1847  001602  9880               	bcf	3968,4,c	;volatile
  1848                           
  1849                           ;SPItest-MASTER.c: 141: while (PORTAbits.RA2);
  1850  001604  D000               	goto	l311
  1851  001606                     l311:
  1852  001606  B480               	btfsc	3968,2,c	;volatile
  1853  001608  D7FE               	goto	l311
  1854                           
  1855                           ;SPItest-MASTER.c: 142: Delay10TCYx(50);
  1856  00160A  0E32               	movlw	50
  1857  00160C  EC13  F018         	call	_Delay10TCYx
  1858                           
  1859                           ;SPItest-MASTER.c: 143: for (x = 0; x != 4; x++)
  1860  001610  0E00               	movlw	0
  1861  001612  0100               	movlb	0	; () banked
  1862  001614  6FB4               	movwf	main@x& (0+255),b
  1863  001616                     l4418:
  1864                           
  1865                           ; BSR set to: 0
  1866  001616  0E04               	movlw	4
  1867  001618  0100               	movlb	0	; () banked
  1868  00161A  19B4               	xorwf	main@x& (0+255),w,b
  1869  00161C  B4D8               	btfsc	status,2,c
  1870  00161E  D014               	goto	l315
  1871  001620  D001               	goto	l4422
  1872                           
  1873                           ; BSR set to: 0
  1874  001622  D012               	goto	l315
  1875  001624                     l4422:
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;SPItest-MASTER.c: 144: MSendSPI(DoubleSPIM[x], 2);
  1879  001624  0E02               	movlw	2
  1880  001626  0100               	movlb	0	; () banked
  1881  001628  6F81               	movwf	MSendSPI@Slave& (0+255),b
  1882  00162A  0100               	movlb	0	; () banked
  1883  00162C  51B4               	movf	main@x& (0+255),w,b
  1884  00162E  0D01               	mullw	1
  1885  001630  0EDA               	movlw	low _DoubleSPIM
  1886  001632  24F3               	addwf	prodl,w,c
  1887  001634  6ED9               	movwf	fsr2l,c
  1888  001636  0E00               	movlw	high _DoubleSPIM
  1889  001638  20F4               	addwfc	prodh,w,c
  1890  00163A  6EDA               	movwf	fsr2h,c
  1891  00163C  50DF               	movf	indf2,w,c
  1892  00163E  ECB1  F016         	call	_MSendSPI
  1893  001642  0100               	movlb	0	; () banked
  1894  001644  2BB4               	incf	main@x& (0+255),f,b
  1895  001646  D7E7               	goto	l4418
  1896  001648                     l315:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;SPItest-MASTER.c: 145: PORTAbits.RA4 = 1;
  1900  001648  8880               	bsf	3968,4,c	;volatile
  1901                           
  1902                           ; BSR set to: 0
  1903                           
  1904                           ; BSR set to: 0
  1905                           
  1906                           ; BSR set to: 0
  1907                           
  1908                           ; BSR set to: 0
  1909                           
  1910                           ; BSR set to: 0
  1911                           
  1912                           ; BSR set to: 0
  1913  00164A  D512               	goto	l4138
  1914                           
  1915                           ; BSR set to: 0
  1916                           
  1917                           ; BSR set to: 0
  1918  00164C  EF0C  F000         	goto	start
  1919  001650                     __end_of_main:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           postinc0	equ	0xFEE
  1928                           wreg	equ	0xFE8
  1929                           indf2	equ	0xFDF
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _initialize *****************
  1935 ;; Defined at:
  1936 ;;		line 160 in file "SPItest-MASTER.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;		None               void
  1943 ;; Registers used:
  1944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;Total ram usage:        0 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    9
  1957 ;; This function calls:
  1958 ;;		_SPIInitM
  1959 ;;		_SerInit
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text1
  1966  00304C                     __ptext1:
  1967                           	opt stack 0
  1968  00304C                     _initialize:
  1969                           	opt stack 21
  1970                           
  1971                           ;SPItest-MASTER.c: 162: SPIInitM();
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;incstack = 0
  1975  00304C  ECFC  F017         	call	_SPIInitM	;wreg free
  1976                           
  1977                           ;SPItest-MASTER.c: 163: SerInit();
  1978  003050  ECC5  F017         	call	_SerInit	;wreg free
  1979                           
  1980                           ;SPItest-MASTER.c: 164: INTCONbits.GIE = 1;
  1981  003054  8EF2               	bsf	intcon,7,c	;volatile
  1982                           
  1983                           ;SPItest-MASTER.c: 165: INTCONbits.PEIE = 1;
  1984  003056  8CF2               	bsf	intcon,6,c	;volatile
  1985  003058  0012               	return		;funcret
  1986  00305A                     __end_of_initialize:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           intcon	equ	0xFF2
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           indf2	equ	0xFDF
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _SerInit *****************
  2003 ;; Defined at:
  2004 ;;		line 19 in file "SerComm.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;		None               void
  2011 ;; Registers used:
  2012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    8
  2025 ;; This function calls:
  2026 ;;		_SerTxStr
  2027 ;; This function is called by:
  2028 ;;		_initialize
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text2
  2033  002F8A                     __ptext2:
  2034                           	opt stack 0
  2035  002F8A                     _SerInit:
  2036                           	opt stack 21
  2037                           
  2038                           ;SerComm.c: 26: TXSTA1 = 0x24;
  2039                           
  2040                           ;incstack = 0
  2041  002F8A  0E24               	movlw	36
  2042  002F8C  6EAC               	movwf	4012,c	;volatile
  2043                           
  2044                           ;SerComm.c: 27: RCSTA1 = 0x90;
  2045  002F8E  0E90               	movlw	144
  2046  002F90  6EAB               	movwf	4011,c	;volatile
  2047                           
  2048                           ;SerComm.c: 28: BAUDCON = 0x00;
  2049  002F92  0E00               	movlw	0
  2050  002F94  6EB8               	movwf	4024,c	;volatile
  2051                           
  2052                           ;SerComm.c: 29: SPBRG = 21;
  2053  002F96  0E15               	movlw	21
  2054  002F98  6EAF               	movwf	4015,c	;volatile
  2055                           
  2056                           ;SerComm.c: 31: RCONbits.IPEN = 1;
  2057  002F9A  8ED0               	bsf	4048,7,c	;volatile
  2058                           
  2059                           ;SerComm.c: 32: IPR1bits.RCIP = 1;
  2060  002F9C  8A9F               	bsf	3999,5,c	;volatile
  2061                           
  2062                           ;SerComm.c: 33: PIE1bits.RC1IE = 1;
  2063  002F9E  8A9D               	bsf	3997,5,c	;volatile
  2064                           
  2065                           ;SerComm.c: 35: SerTxStr("Welcome to the world of tomorrow!!!");
  2066  002FA0  0E01               	movlw	low STR_1
  2067  002FA2  0100               	movlb	0	; () banked
  2068  002FA4  6F81               	movwf	SerTxStr@string& (0+255),b
  2069  002FA6  0E10               	movlw	high STR_1
  2070  002FA8  0100               	movlb	0	; () banked
  2071  002FAA  6F82               	movwf	(SerTxStr@string+1)& (0+255),b
  2072  002FAC  EC57  F016         	call	_SerTxStr	;wreg free
  2073  002FB0  0012               	return		;funcret
  2074  002FB2                     __end_of_SerInit:
  2075                           	opt stack 0
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           prodh	equ	0xFF4
  2081                           prodl	equ	0xFF3
  2082                           intcon	equ	0xFF2
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           indf2	equ	0xFDF
  2086                           fsr2h	equ	0xFDA
  2087                           fsr2l	equ	0xFD9
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function _SerTxStr *****************
  2091 ;; Defined at:
  2092 ;;		line 50 in file "SerComm.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  string          2    1[BANK0 ] PTR unsigned char 
  2095 ;;		 -> STR_28(4), STR_13(6), STR_12(4), STR_3(11), 
  2096 ;;		 -> value(10), STR_2(6), key(5), STR_1(36), 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;		None               void
  2101 ;; Registers used:
  2102 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2108 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;Total ram usage:        2 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    7
  2115 ;; This function calls:
  2116 ;;		_SerTx
  2117 ;; This function is called by:
  2118 ;;		_SerInit
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text3
  2123  002CAE                     __ptext3:
  2124                           	opt stack 0
  2125  002CAE                     _SerTxStr:
  2126                           	opt stack 21
  2127                           
  2128                           ;SerComm.c: 52: while (*string)
  2129                           
  2130                           ;incstack = 0
  2131  002CAE  D017               	goto	l3840
  2132  002CB0                     l3836:
  2133                           
  2134                           ;SerComm.c: 53: SerTx(*string++);
  2135  002CB0  C081  FFF6         	movff	SerTxStr@string,tblptrl
  2136  002CB4  C082  FFF7         	movff	SerTxStr@string+1,tblptrh
  2137  002CB8  0E00               	movlw	low (__smallconst shr (0+16))
  2138  002CBA  6EF8               	movwf	tblptru,c
  2139  002CBC  0E0F               	movlw	(high __ramtop+-1)
  2140  002CBE  64F7               	cpfsgt	tblptrh,c
  2141  002CC0  D003               	bra	u4827
  2142  002CC2  0008               	tblrd		*
  2143  002CC4  50F5               	movf	tablat,w,c
  2144  002CC6  D005               	bra	u4820
  2145  002CC8                     u4827:
  2146  002CC8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2147  002CCC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2148  002CD0  50EF               	movf	indf0,w,c
  2149  002CD2                     u4820:
  2150  002CD2  EC1E  F018         	call	_SerTx
  2151  002CD6  0100               	movlb	0	; () banked
  2152  002CD8  4B81               	infsnz	SerTxStr@string& (0+255),f,b
  2153  002CDA  2B82               	incf	(SerTxStr@string+1)& (0+255),f,b
  2154  002CDC  D000               	goto	l3840
  2155  002CDE                     l3840:
  2156  002CDE  C081  FFF6         	movff	SerTxStr@string,tblptrl
  2157  002CE2  C082  FFF7         	movff	SerTxStr@string+1,tblptrh
  2158  002CE6  0E00               	movlw	low (__smallconst shr (0+16))
  2159  002CE8  6EF8               	movwf	tblptru,c
  2160  002CEA  0E0F               	movlw	(high __ramtop+-1)
  2161  002CEC  64F7               	cpfsgt	tblptrh,c
  2162  002CEE  D003               	bra	u4837
  2163  002CF0  0008               	tblrd		*
  2164  002CF2  50F5               	movf	tablat,w,c
  2165  002CF4  D005               	bra	u4830
  2166  002CF6                     u4837:
  2167  002CF6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2168  002CFA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2169  002CFE  50EF               	movf	indf0,w,c
  2170  002D00                     u4830:
  2171  002D00  0900               	iorlw	0
  2172  002D02  A4D8               	btfss	status,2,c
  2173  002D04  D7D5               	goto	l3836
  2174  002D06  0012               	return		;funcret
  2175  002D08                     __end_of_SerTxStr:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           prodh	equ	0xFF4
  2182                           prodl	equ	0xFF3
  2183                           intcon	equ	0xFF2
  2184                           indf0	equ	0xFEF
  2185                           postinc0	equ	0xFEE
  2186                           fsr0h	equ	0xFEA
  2187                           fsr0l	equ	0xFE9
  2188                           wreg	equ	0xFE8
  2189                           indf2	equ	0xFDF
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _SPIInitM *****************
  2195 ;; Defined at:
  2196 ;;		line 9 in file "SPIMaster.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;		None               void
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;Total ram usage:        0 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    7
  2217 ;; This function calls:
  2218 ;;		_OpenSPI
  2219 ;; This function is called by:
  2220 ;;		_initialize
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text4
  2225  002FF8                     __ptext4:
  2226                           	opt stack 0
  2227  002FF8                     _SPIInitM:
  2228                           	opt stack 22
  2229                           
  2230                           ;SPIMaster.c: 11: OpenSPI(0b00000000, 0b00000000, 0b00000000);
  2231                           
  2232                           ;incstack = 0
  2233  002FF8  0E00               	movlw	0
  2234  002FFA  0100               	movlb	0	; () banked
  2235  002FFC  6F80               	movwf	OpenSPI@bus_mode& (0+255),b
  2236  002FFE  0E00               	movlw	0
  2237  003000  0100               	movlb	0	; () banked
  2238  003002  6F81               	movwf	OpenSPI@smp_phase& (0+255),b
  2239  003004  0E00               	movlw	0
  2240  003006  EC25  F016         	call	_OpenSPI
  2241                           
  2242                           ;SPIMaster.c: 12: TRISAbits.RA1 = 1;
  2243  00300A  8292               	bsf	3986,1,c	;volatile
  2244                           
  2245                           ;SPIMaster.c: 13: TRISAbits.RA3 = 0;
  2246  00300C  9692               	bcf	3986,3,c	;volatile
  2247  00300E  0012               	return		;funcret
  2248  003010                     __end_of_SPIInitM:
  2249                           	opt stack 0
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           prodh	equ	0xFF4
  2255                           prodl	equ	0xFF3
  2256                           intcon	equ	0xFF2
  2257                           indf0	equ	0xFEF
  2258                           postinc0	equ	0xFEE
  2259                           fsr0h	equ	0xFEA
  2260                           fsr0l	equ	0xFE9
  2261                           wreg	equ	0xFE8
  2262                           indf2	equ	0xFDF
  2263                           fsr2h	equ	0xFDA
  2264                           fsr2l	equ	0xFD9
  2265                           status	equ	0xFD8
  2266                           
  2267 ;; *************** function _OpenSPI *****************
  2268 ;; Defined at:
  2269 ;;		line 14 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi_open.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  sync_mode       1    wreg     unsigned char 
  2272 ;;  bus_mode        1    0[BANK0 ] unsigned char 
  2273 ;;  smp_phase       1    1[BANK0 ] unsigned char 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  sync_mode       1    2[BANK0 ] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;		None               void
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2285 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;Total ram usage:        3 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    6
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_SPIInitM
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text5
  2300  002C4A                     __ptext5:
  2301                           	opt stack 0
  2302  002C4A                     _OpenSPI:
  2303                           	opt stack 22
  2304                           
  2305                           ;incstack = 0
  2306                           ;OpenSPI@sync_mode stored from wreg
  2307  002C4A  0100               	movlb	0	; () banked
  2308  002C4C  6F82               	movwf	OpenSPI@sync_mode& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311  002C4E  0E3F               	movlw	63
  2312  002C50  16C7               	andwf	4039,f,c	;volatile
  2313                           
  2314                           ; BSR set to: 0
  2315  002C52  0E00               	movlw	0
  2316  002C54  6EC6               	movwf	4038,c	;volatile
  2317                           
  2318                           ; BSR set to: 0
  2319  002C56  0100               	movlb	0	; () banked
  2320  002C58  5182               	movf	OpenSPI@sync_mode& (0+255),w,b
  2321  002C5A  12C6               	iorwf	4038,f,c	;volatile
  2322                           
  2323                           ; BSR set to: 0
  2324  002C5C  0100               	movlb	0	; () banked
  2325  002C5E  5181               	movf	OpenSPI@smp_phase& (0+255),w,b
  2326  002C60  12C7               	iorwf	4039,f,c	;volatile
  2327  002C62  D005               	goto	l3852
  2328  002C64                     l422:
  2329                           
  2330                           ; BSR set to: 0
  2331  002C64  8CC7               	bsf	4039,6,c	;volatile
  2332  002C66  D016               	goto	l3856
  2333  002C68                     l424:
  2334                           
  2335                           ; BSR set to: 0
  2336  002C68  8CC7               	bsf	4039,6,c	;volatile
  2337  002C6A                     l425:
  2338                           
  2339                           ; BSR set to: 0
  2340  002C6A  88C6               	bsf	4038,4,c	;volatile
  2341                           
  2342                           ; BSR set to: 0
  2343                           
  2344                           ; BSR set to: 0
  2345  002C6C  D013               	goto	l3856
  2346  002C6E                     l3852:
  2347                           
  2348                           ; BSR set to: 0
  2349  002C6E  0100               	movlb	0	; () banked
  2350  002C70  5180               	movf	OpenSPI@bus_mode& (0+255),w,b
  2351                           
  2352                           ; Switch size 1, requested type "space"
  2353                           ; Number of cases is 3, Range of values is 0 to 3
  2354                           ; switch strategies available:
  2355                           ; Name         Instructions Cycles
  2356                           ; simple_byte           10     6 (average)
  2357                           ;	Chosen strategy is simple_byte
  2358  002C72  0A00               	xorlw	0	; case 0
  2359  002C74  B4D8               	btfsc	status,2,c
  2360  002C76  D7F6               	goto	l422
  2361  002C78  0A02               	xorlw	2	; case 2
  2362  002C7A  B4D8               	btfsc	status,2,c
  2363  002C7C  D7F5               	goto	l424
  2364  002C7E  0A01               	xorlw	1	; case 3
  2365  002C80  B4D8               	btfsc	status,2,c
  2366  002C82  D7F3               	goto	l425
  2367                           
  2368                           ; BSR set to: 0
  2369  002C84  D007               	goto	l3856
  2370  002C86                     l428:
  2371                           
  2372                           ; BSR set to: 0
  2373  002C86  8694               	bsf	3988,3,c	;volatile
  2374  002C88  8A92               	bsf	3986,5,c	;volatile
  2375  002C8A  D00D               	goto	l429
  2376  002C8C                     l430:
  2377                           
  2378                           ; BSR set to: 0
  2379  002C8C  8694               	bsf	3988,3,c	;volatile
  2380  002C8E  D00B               	goto	l429
  2381  002C90                     l431:
  2382                           
  2383                           ; BSR set to: 0
  2384  002C90  9694               	bcf	3988,3,c	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387  002C92  D009               	goto	l429
  2388  002C94                     l3856:
  2389                           
  2390                           ; BSR set to: 0
  2391  002C94  0100               	movlb	0	; () banked
  2392  002C96  5182               	movf	OpenSPI@sync_mode& (0+255),w,b
  2393                           
  2394                           ; Switch size 1, requested type "space"
  2395                           ; Number of cases is 2, Range of values is 4 to 5
  2396                           ; switch strategies available:
  2397                           ; Name         Instructions Cycles
  2398                           ; simple_byte            7     4 (average)
  2399                           ;	Chosen strategy is simple_byte
  2400  002C98  0A04               	xorlw	4	; case 4
  2401  002C9A  B4D8               	btfsc	status,2,c
  2402  002C9C  D7F4               	goto	l428
  2403  002C9E  0A01               	xorlw	1	; case 5
  2404  002CA0  B4D8               	btfsc	status,2,c
  2405  002CA2  D7F4               	goto	l430
  2406  002CA4  D7F5               	goto	l431
  2407  002CA6                     l429:
  2408                           
  2409                           ; BSR set to: 0
  2410  002CA6  8894               	bsf	3988,4,c	;volatile
  2411  002CA8  9A94               	bcf	3988,5,c	;volatile
  2412                           
  2413                           ; BSR set to: 0
  2414  002CAA  8AC6               	bsf	4038,5,c	;volatile
  2415                           
  2416                           ; BSR set to: 0
  2417  002CAC  0012               	return		;funcret
  2418  002CAE                     __end_of_OpenSPI:
  2419                           	opt stack 0
  2420                           tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           prodh	equ	0xFF4
  2425                           prodl	equ	0xFF3
  2426                           intcon	equ	0xFF2
  2427                           indf0	equ	0xFEF
  2428                           postinc0	equ	0xFEE
  2429                           fsr0h	equ	0xFEA
  2430                           fsr0l	equ	0xFE9
  2431                           wreg	equ	0xFE8
  2432                           indf2	equ	0xFDF
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _checksum *****************
  2438 ;; Defined at:
  2439 ;;		line 91 in file "SPIMaster.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  y               1    5[BANK0 ] unsigned char 
  2444 ;;  sum             1    4[BANK0 ] unsigned char 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      unsigned char 
  2447 ;; Registers used:
  2448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;Total ram usage:        6 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    6
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text6
  2469  002A74                     __ptext6:
  2470                           	opt stack 0
  2471  002A74                     _checksum:
  2472                           	opt stack 24
  2473                           
  2474                           ;SPIMaster.c: 93: unsigned char y, sum = 0;
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;incstack = 0
  2478  002A74  0E00               	movlw	0
  2479  002A76  0100               	movlb	0	; () banked
  2480  002A78  6F84               	movwf	checksum@sum& (0+255),b
  2481                           
  2482                           ;SPIMaster.c: 94: for (y = 0; y != 3; y++)
  2483  002A7A  0E00               	movlw	0
  2484  002A7C  0100               	movlb	0	; () banked
  2485  002A7E  6F85               	movwf	checksum@y& (0+255),b
  2486  002A80                     l4100:
  2487                           
  2488                           ; BSR set to: 0
  2489  002A80  0E03               	movlw	3
  2490  002A82  0100               	movlb	0	; () banked
  2491  002A84  1985               	xorwf	checksum@y& (0+255),w,b
  2492  002A86  B4D8               	btfsc	status,2,c
  2493  002A88  D011               	goto	l4110
  2494  002A8A  D001               	goto	l4104
  2495                           
  2496                           ; BSR set to: 0
  2497  002A8C  D00F               	goto	l4110
  2498  002A8E                     l4104:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;SPIMaster.c: 95: sum += DoubleSPIM[y];
  2502  002A8E  0100               	movlb	0	; () banked
  2503  002A90  5185               	movf	checksum@y& (0+255),w,b
  2504  002A92  0D01               	mullw	1
  2505  002A94  0EDA               	movlw	low _DoubleSPIM
  2506  002A96  24F3               	addwf	prodl,w,c
  2507  002A98  6ED9               	movwf	fsr2l,c
  2508  002A9A  0E00               	movlw	high _DoubleSPIM
  2509  002A9C  20F4               	addwfc	prodh,w,c
  2510  002A9E  6EDA               	movwf	fsr2h,c
  2511  002AA0  50DF               	movf	indf2,w,c
  2512  002AA2  0100               	movlb	0	; () banked
  2513  002AA4  2784               	addwf	checksum@sum& (0+255),f,b
  2514                           
  2515                           ; BSR set to: 0
  2516  002AA6  0100               	movlb	0	; () banked
  2517  002AA8  2B85               	incf	checksum@y& (0+255),f,b
  2518  002AAA  D7EA               	goto	l4100
  2519  002AAC                     l4110:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;SPIMaster.c: 96: if ((sum - DoubleSPIM[3]) == 0)
  2523  002AAC  0100               	movlb	0	; () banked
  2524  002AAE  51DD               	movf	(_DoubleSPIM+3)& (0+255),w,b
  2525  002AB0  0100               	movlb	0	; () banked
  2526  002AB2  6F80               	movwf	??_checksum& (0+255),b
  2527  002AB4  6B81               	clrf	(??_checksum+1)& (0+255),b
  2528  002AB6  0100               	movlb	0	; () banked
  2529  002AB8  1F80               	comf	??_checksum& (0+255),f,b
  2530  002ABA  1F81               	comf	(??_checksum+1)& (0+255),f,b
  2531  002ABC  4B80               	infsnz	??_checksum& (0+255),f,b
  2532  002ABE  2B81               	incf	(??_checksum+1)& (0+255),f,b
  2533  002AC0  0100               	movlb	0	; () banked
  2534  002AC2  5184               	movf	checksum@sum& (0+255),w,b
  2535  002AC4  0100               	movlb	0	; () banked
  2536  002AC6  6F82               	movwf	(??_checksum+2)& (0+255),b
  2537  002AC8  6B83               	clrf	(??_checksum+3)& (0+255),b
  2538  002ACA  0100               	movlb	0	; () banked
  2539  002ACC  5180               	movf	??_checksum& (0+255),w,b
  2540  002ACE  0100               	movlb	0	; () banked
  2541  002AD0  2782               	addwf	(??_checksum+2)& (0+255),f,b
  2542  002AD2  0100               	movlb	0	; () banked
  2543  002AD4  5181               	movf	(??_checksum+1)& (0+255),w,b
  2544  002AD6  0100               	movlb	0	; () banked
  2545  002AD8  2383               	addwfc	(??_checksum+3)& (0+255),f,b
  2546  002ADA  0100               	movlb	0	; () banked
  2547  002ADC  5182               	movf	(??_checksum+2)& (0+255),w,b
  2548  002ADE  0100               	movlb	0	; () banked
  2549  002AE0  1183               	iorwf	(??_checksum+3)& (0+255),w,b
  2550  002AE2  A4D8               	btfss	status,2,c
  2551  002AE4  D002               	goto	l4118
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;SPIMaster.c: 97: return 1;
  2555  002AE6  0E01               	movlw	1
  2556                           
  2557                           ; BSR set to: 0
  2558                           
  2559                           ; BSR set to: 0
  2560  002AE8  D002               	goto	l397
  2561  002AEA                     l4118:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;SPIMaster.c: 98: else
  2565                           ;SPIMaster.c: 99: return 0;
  2566  002AEA  0E00               	movlw	0
  2567                           
  2568                           ; BSR set to: 0
  2569  002AEC  D000               	goto	l397
  2570  002AEE                     l397:
  2571                           
  2572                           ; BSR set to: 0
  2573  002AEE  0012               	return		;funcret
  2574  002AF0                     __end_of_checksum:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           prodh	equ	0xFF4
  2581                           prodl	equ	0xFF3
  2582                           intcon	equ	0xFF2
  2583                           indf0	equ	0xFEF
  2584                           postinc0	equ	0xFEE
  2585                           fsr0h	equ	0xFEA
  2586                           fsr0l	equ	0xFE9
  2587                           wreg	equ	0xFE8
  2588                           indf2	equ	0xFDF
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _SPIDisassembleDouble *****************
  2594 ;; Defined at:
  2595 ;;		line 102 in file "SPIMaster.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  dub             3    2[BANK0 ] unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;		None               void
  2602 ;; Registers used:
  2603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2609 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;Total ram usage:        3 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    7
  2616 ;; This function calls:
  2617 ;;		_MGenerateChecksum
  2618 ;; This function is called by:
  2619 ;;		_main
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text7
  2624  002E62                     __ptext7:
  2625                           	opt stack 0
  2626  002E62                     _SPIDisassembleDouble:
  2627                           	opt stack 23
  2628                           
  2629                           ;SPIMaster.c: 104: DoublePtr = (unsigned char*) &dub;
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;incstack = 0
  2633  002E62  0E82               	movlw	low SPIDisassembleDouble@dub
  2634  002E64  6E4E               	movwf	_DoublePtr,c
  2635  002E66  0E00               	movlw	high SPIDisassembleDouble@dub
  2636  002E68  6E4F               	movwf	_DoublePtr+1,c
  2637                           
  2638                           ;SPIMaster.c: 105: DoubleSPIM[0] = DoublePtr[0];
  2639  002E6A  C04E  FFD9         	movff	_DoublePtr,fsr2l
  2640  002E6E  C04F  FFDA         	movff	_DoublePtr+1,fsr2h
  2641  002E72  50DF               	movf	indf2,w,c
  2642  002E74  0100               	movlb	0	; () banked
  2643  002E76  6FDA               	movwf	_DoubleSPIM& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;SPIMaster.c: 106: DoubleSPIM[1] = DoublePtr[1];
  2647  002E78  EE20 F001          	lfsr	2,1
  2648  002E7C  504E               	movf	_DoublePtr,w,c
  2649  002E7E  26D9               	addwf	fsr2l,f,c
  2650  002E80  504F               	movf	_DoublePtr+1,w,c
  2651  002E82  22DA               	addwfc	fsr2h,f,c
  2652  002E84  50DF               	movf	indf2,w,c
  2653  002E86  0100               	movlb	0	; () banked
  2654  002E88  6FDB               	movwf	(_DoubleSPIM+1)& (0+255),b
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;SPIMaster.c: 107: DoubleSPIM[2] = DoublePtr[2];
  2658  002E8A  EE20 F002          	lfsr	2,2
  2659  002E8E  504E               	movf	_DoublePtr,w,c
  2660  002E90  26D9               	addwf	fsr2l,f,c
  2661  002E92  504F               	movf	_DoublePtr+1,w,c
  2662  002E94  22DA               	addwfc	fsr2h,f,c
  2663  002E96  50DF               	movf	indf2,w,c
  2664  002E98  0100               	movlb	0	; () banked
  2665  002E9A  6FDC               	movwf	(_DoubleSPIM+2)& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;SPIMaster.c: 108: DoubleSPIM[3] = MGenerateChecksum();
  2669  002E9C  EC75  F017         	call	_MGenerateChecksum	;wreg free
  2670  002EA0  0100               	movlb	0	; () banked
  2671  002EA2  6FDD               	movwf	(_DoubleSPIM+3)& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674  002EA4  0012               	return		;funcret
  2675  002EA6                     __end_of_SPIDisassembleDouble:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           intcon	equ	0xFF2
  2684                           indf0	equ	0xFEF
  2685                           postinc0	equ	0xFEE
  2686                           fsr0h	equ	0xFEA
  2687                           fsr0l	equ	0xFE9
  2688                           wreg	equ	0xFE8
  2689                           indf2	equ	0xFDF
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _MGenerateChecksum *****************
  2695 ;; Defined at:
  2696 ;;		line 111 in file "SPIMaster.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  z               1    1[BANK0 ] unsigned char 
  2701 ;;  sum             1    0[BANK0 ] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      unsigned char 
  2704 ;; Registers used:
  2705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;Total ram usage:        2 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    6
  2718 ;; This function calls:
  2719 ;;		Nothing
  2720 ;; This function is called by:
  2721 ;;		_SPIDisassembleDouble
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text8
  2726  002EEA                     __ptext8:
  2727                           	opt stack 0
  2728  002EEA                     _MGenerateChecksum:
  2729                           	opt stack 23
  2730                           
  2731                           ;SPIMaster.c: 113: unsigned char z, sum = 0;
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;incstack = 0
  2735  002EEA  0E00               	movlw	0
  2736  002EEC  0100               	movlb	0	; () banked
  2737  002EEE  6F80               	movwf	MGenerateChecksum@sum& (0+255),b
  2738                           
  2739                           ;SPIMaster.c: 114: for (z = 0; z != 3; z++)
  2740  002EF0  0E00               	movlw	0
  2741  002EF2  0100               	movlb	0	; () banked
  2742  002EF4  6F81               	movwf	MGenerateChecksum@z& (0+255),b
  2743  002EF6                     l4008:
  2744                           
  2745                           ; BSR set to: 0
  2746  002EF6  0E03               	movlw	3
  2747  002EF8  0100               	movlb	0	; () banked
  2748  002EFA  1981               	xorwf	MGenerateChecksum@z& (0+255),w,b
  2749  002EFC  B4D8               	btfsc	status,2,c
  2750  002EFE  D011               	goto	l4018
  2751  002F00  D001               	goto	l4012
  2752                           
  2753                           ; BSR set to: 0
  2754  002F02  D00F               	goto	l4018
  2755  002F04                     l4012:
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;SPIMaster.c: 115: sum += DoubleSPIM[z];
  2759  002F04  0100               	movlb	0	; () banked
  2760  002F06  5181               	movf	MGenerateChecksum@z& (0+255),w,b
  2761  002F08  0D01               	mullw	1
  2762  002F0A  0EDA               	movlw	low _DoubleSPIM
  2763  002F0C  24F3               	addwf	prodl,w,c
  2764  002F0E  6ED9               	movwf	fsr2l,c
  2765  002F10  0E00               	movlw	high _DoubleSPIM
  2766  002F12  20F4               	addwfc	prodh,w,c
  2767  002F14  6EDA               	movwf	fsr2h,c
  2768  002F16  50DF               	movf	indf2,w,c
  2769  002F18  0100               	movlb	0	; () banked
  2770  002F1A  2780               	addwf	MGenerateChecksum@sum& (0+255),f,b
  2771                           
  2772                           ; BSR set to: 0
  2773  002F1C  0100               	movlb	0	; () banked
  2774  002F1E  2B81               	incf	MGenerateChecksum@z& (0+255),f,b
  2775  002F20  D7EA               	goto	l4008
  2776  002F22                     l4018:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;SPIMaster.c: 116: return sum;
  2780  002F22  0100               	movlb	0	; () banked
  2781  002F24  5180               	movf	MGenerateChecksum@sum& (0+255),w,b
  2782  002F26  D000               	goto	l406
  2783  002F28                     l406:
  2784                           
  2785                           ; BSR set to: 0
  2786  002F28  0012               	return		;funcret
  2787  002F2A                     __end_of_MGenerateChecksum:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           prodh	equ	0xFF4
  2794                           prodl	equ	0xFF3
  2795                           intcon	equ	0xFF2
  2796                           indf0	equ	0xFEF
  2797                           postinc0	equ	0xFEE
  2798                           fsr0h	equ	0xFEA
  2799                           fsr0l	equ	0xFE9
  2800                           wreg	equ	0xFE8
  2801                           indf2	equ	0xFDF
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           status	equ	0xFD8
  2805                           
  2806 ;; *************** function _MSendSPI *****************
  2807 ;; Defined at:
  2808 ;;		line 16 in file "SPIMaster.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  data            1    wreg     unsigned char 
  2811 ;;  Slave           1    1[BANK0 ] unsigned char 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  data            1    4[BANK0 ] unsigned char 
  2814 ;;  tempChar        1    3[BANK0 ] unsigned char 
  2815 ;;  tempChar        1    2[BANK0 ] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;		None               void
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2825 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;Total ram usage:        4 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    7
  2832 ;; This function calls:
  2833 ;;		_Delay10TCYx
  2834 ;; This function is called by:
  2835 ;;		_main
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text9
  2840  002D62                     __ptext9:
  2841                           	opt stack 0
  2842  002D62                     _MSendSPI:
  2843                           	opt stack 23
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;incstack = 0
  2847                           ;MSendSPI@data stored from wreg
  2848  002D62  0100               	movlb	0	; () banked
  2849  002D64  6F84               	movwf	MSendSPI@data& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;SPIMaster.c: 18: if (Slave == 1)
  2853  002D66  0100               	movlb	0	; () banked
  2854  002D68  0581               	decf	MSendSPI@Slave& (0+255),w,b
  2855  002D6A  A4D8               	btfss	status,2,c
  2856  002D6C  D010               	goto	l4042
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;SPIMaster.c: 19: {
  2860                           ;SPIMaster.c: 20: PORTAbits.RA3 = 0;
  2861  002D6E  9680               	bcf	3968,3,c	;volatile
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;SPIMaster.c: 21: Delay10TCYx(1);
  2865  002D70  0E01               	movlw	1
  2866  002D72  EC13  F018         	call	_Delay10TCYx
  2867                           
  2868                           ;SPIMaster.c: 22: unsigned char tempChar;
  2869                           ;SPIMaster.c: 23: tempChar = SSPBUF;
  2870  002D76  CFC9 F082          	movff	4041,MSendSPI@tempChar	;volatile
  2871                           
  2872                           ;SPIMaster.c: 24: PIR1bits.SSPIF = 0;
  2873  002D7A  969E               	bcf	3998,3,c	;volatile
  2874                           
  2875                           ;SPIMaster.c: 25: SSPBUF = data;
  2876  002D7C  C084  FFC9         	movff	MSendSPI@data,4041	;volatile
  2877                           
  2878                           ;SPIMaster.c: 26: while (!PIR1bits.SSPIF);
  2879  002D80  D000               	goto	l358
  2880  002D82                     l358:
  2881  002D82  A69E               	btfss	3998,3,c	;volatile
  2882  002D84  D7FE               	goto	l358
  2883                           
  2884                           ;SPIMaster.c: 27: data = SSPBUF;
  2885  002D86  CFC9 F084          	movff	4041,MSendSPI@data	;volatile
  2886                           
  2887                           ;SPIMaster.c: 28: PORTAbits.RA3 = 1;
  2888  002D8A  8680               	bsf	3968,3,c	;volatile
  2889                           
  2890                           ;SPIMaster.c: 29: }
  2891  002D8C  D015               	goto	l366
  2892  002D8E                     l4042:
  2893                           
  2894                           ;SPIMaster.c: 31: else if (Slave == 2)
  2895  002D8E  0E02               	movlw	2
  2896  002D90  0100               	movlb	0	; () banked
  2897  002D92  1981               	xorwf	MSendSPI@Slave& (0+255),w,b
  2898  002D94  A4D8               	btfss	status,2,c
  2899  002D96  D010               	goto	l366
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;SPIMaster.c: 32: {
  2903                           ;SPIMaster.c: 33: PORTAbits.RA4 = 0;
  2904  002D98  9880               	bcf	3968,4,c	;volatile
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;SPIMaster.c: 34: Delay10TCYx(1);
  2908  002D9A  0E01               	movlw	1
  2909  002D9C  EC13  F018         	call	_Delay10TCYx
  2910                           
  2911                           ;SPIMaster.c: 35: unsigned char tempChar;
  2912                           ;SPIMaster.c: 36: tempChar = SSPBUF;
  2913  002DA0  CFC9 F083          	movff	4041,MSendSPI@tempChar_727	;volatile
  2914                           
  2915                           ;SPIMaster.c: 37: PIR1bits.SSPIF = 0;
  2916  002DA4  969E               	bcf	3998,3,c	;volatile
  2917                           
  2918                           ;SPIMaster.c: 38: SSPBUF = data;
  2919  002DA6  C084  FFC9         	movff	MSendSPI@data,4041	;volatile
  2920                           
  2921                           ;SPIMaster.c: 39: while (!PIR1bits.SSPIF);
  2922  002DAA  D000               	goto	l363
  2923  002DAC                     l363:
  2924  002DAC  A69E               	btfss	3998,3,c	;volatile
  2925  002DAE  D7FE               	goto	l363
  2926                           
  2927                           ;SPIMaster.c: 40: data = SSPBUF;
  2928  002DB0  CFC9 F084          	movff	4041,MSendSPI@data	;volatile
  2929                           
  2930                           ;SPIMaster.c: 41: PORTAbits.RA3 = 2;
  2931  002DB4  9680               	bcf	3968,3,c	;volatile
  2932  002DB6  D000               	goto	l366
  2933  002DB8                     l366:
  2934  002DB8  0012               	return		;funcret
  2935  002DBA                     __end_of_MSendSPI:
  2936                           	opt stack 0
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           prodh	equ	0xFF4
  2942                           prodl	equ	0xFF3
  2943                           intcon	equ	0xFF2
  2944                           indf0	equ	0xFEF
  2945                           postinc0	equ	0xFEE
  2946                           fsr0h	equ	0xFEA
  2947                           fsr0l	equ	0xFE9
  2948                           wreg	equ	0xFE8
  2949                           indf2	equ	0xFDF
  2950                           fsr2h	equ	0xFDA
  2951                           fsr2l	equ	0xFD9
  2952                           status	equ	0xFD8
  2953                           
  2954 ;; *************** function _MReceiveStrSPI *****************
  2955 ;; Defined at:
  2956 ;;		line 55 in file "SPIMaster.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  str             2   47[BANK0 ] PTR unsigned char 
  2959 ;;		 -> DoubleSPIM(4), 
  2960 ;;  Slave           1   49[BANK0 ] unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  x               1   51[BANK0 ] unsigned char 
  2963 ;;  x               1   50[BANK0 ] unsigned char 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;		None               void
  2966 ;; Registers used:
  2967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2973 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;Total ram usage:        5 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    9
  2980 ;; This function calls:
  2981 ;;		_Delay10TCYx
  2982 ;;		_MReceiveSPI
  2983 ;;		_SPIReassembleDouble
  2984 ;;		_breakDouble
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text10
  2991  0028AA                     __ptext10:
  2992                           	opt stack 0
  2993  0028AA                     _MReceiveStrSPI:
  2994                           	opt stack 21
  2995                           
  2996                           ;SPIMaster.c: 57: if (Slave == 1)
  2997                           
  2998                           ;incstack = 0
  2999  0028AA  0100               	movlb	0	; () banked
  3000  0028AC  05B1               	decf	MReceiveStrSPI@Slave& (0+255),w,b
  3001  0028AE  A4D8               	btfss	status,2,c
  3002  0028B0  D02A               	goto	l4076
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;SPIMaster.c: 58: {
  3006                           ;SPIMaster.c: 59: unsigned char x;
  3007                           ;SPIMaster.c: 60: PORTAbits.RA3 = 0;
  3008  0028B2  9680               	bcf	3968,3,c	;volatile
  3009                           
  3010                           ;SPIMaster.c: 61: while (PORTAbits.RA1);
  3011  0028B4  D000               	goto	l376
  3012  0028B6                     l376:
  3013  0028B6  B280               	btfsc	3968,1,c	;volatile
  3014  0028B8  D7FE               	goto	l376
  3015                           
  3016                           ;SPIMaster.c: 62: Delay10TCYx(25);
  3017  0028BA  0E19               	movlw	25
  3018  0028BC  EC13  F018         	call	_Delay10TCYx
  3019                           
  3020                           ;SPIMaster.c: 63: for (x = 0; x < 4; x++)
  3021  0028C0  0E00               	movlw	0
  3022  0028C2  0100               	movlb	0	; () banked
  3023  0028C4  6FB2               	movwf	MReceiveStrSPI@x& (0+255),b
  3024  0028C6                     l4062:
  3025                           
  3026                           ; BSR set to: 0
  3027  0028C6  0E03               	movlw	3
  3028  0028C8  0100               	movlb	0	; () banked
  3029  0028CA  65B2               	cpfsgt	MReceiveStrSPI@x& (0+255),b
  3030  0028CC  D001               	goto	l4066
  3031                           
  3032                           ; BSR set to: 0
  3033  0028CE  D00F               	goto	l4072
  3034  0028D0                     l4066:
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;SPIMaster.c: 64: DoubleSPIM[x] = MReceiveSPI();
  3038  0028D0  0100               	movlb	0	; () banked
  3039  0028D2  51B2               	movf	MReceiveStrSPI@x& (0+255),w,b
  3040  0028D4  0D01               	mullw	1
  3041  0028D6  0EDA               	movlw	low _DoubleSPIM
  3042  0028D8  24F3               	addwf	prodl,w,c
  3043  0028DA  6ED9               	movwf	fsr2l,c
  3044  0028DC  0E00               	movlw	high _DoubleSPIM
  3045  0028DE  20F4               	addwfc	prodh,w,c
  3046  0028E0  6EDA               	movwf	fsr2h,c
  3047  0028E2  EC08  F018         	call	_MReceiveSPI	;wreg free
  3048  0028E6  6EDF               	movwf	indf2,c
  3049  0028E8  0100               	movlb	0	; () banked
  3050  0028EA  2BB2               	incf	MReceiveStrSPI@x& (0+255),f,b
  3051  0028EC  D7EC               	goto	l4062
  3052  0028EE                     l4072:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;SPIMaster.c: 65: breakDouble(SPIReassembleDouble());
  3056  0028EE  EC53  F017         	call	_SPIReassembleDouble	;wreg free
  3057  0028F2  C080  F0A6         	movff	?_SPIReassembleDouble,breakDouble@dubs
  3058  0028F6  C081  F0A7         	movff	?_SPIReassembleDouble+1,breakDouble@dubs+1
  3059  0028FA  C082  F0A8         	movff	?_SPIReassembleDouble+2,breakDouble@dubs+2
  3060  0028FE  ECC1  F00F         	call	_breakDouble	;wreg free
  3061                           
  3062                           ;SPIMaster.c: 66: PORTAbits.RA3 = 1;
  3063  002902  8680               	bsf	3968,3,c	;volatile
  3064                           
  3065                           ;SPIMaster.c: 67: }
  3066  002904  D02A               	goto	l388
  3067  002906                     l4076:
  3068                           
  3069                           ;SPIMaster.c: 68: else if (Slave == 2)
  3070  002906  0E02               	movlw	2
  3071  002908  0100               	movlb	0	; () banked
  3072  00290A  19B1               	xorwf	MReceiveStrSPI@Slave& (0+255),w,b
  3073  00290C  A4D8               	btfss	status,2,c
  3074  00290E  D025               	goto	l388
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;SPIMaster.c: 69: {
  3078                           ;SPIMaster.c: 70: unsigned char x;
  3079                           ;SPIMaster.c: 71: PORTAbits.RA4 = 0;
  3080  002910  9880               	bcf	3968,4,c	;volatile
  3081                           
  3082                           ;SPIMaster.c: 72: while (PORTAbits.RA2);
  3083  002912  D000               	goto	l383
  3084  002914                     l383:
  3085  002914  B480               	btfsc	3968,2,c	;volatile
  3086  002916  D7FE               	goto	l383
  3087                           
  3088                           ;SPIMaster.c: 73: Delay10TCYx(50);
  3089  002918  0E32               	movlw	50
  3090  00291A  EC13  F018         	call	_Delay10TCYx
  3091                           
  3092                           ;SPIMaster.c: 74: for (x = 0; x < 3; x++)
  3093  00291E  0E00               	movlw	0
  3094  002920  0100               	movlb	0	; () banked
  3095  002922  6FB3               	movwf	MReceiveStrSPI@x_736& (0+255),b
  3096  002924                     l4084:
  3097                           
  3098                           ; BSR set to: 0
  3099  002924  0E02               	movlw	2
  3100  002926  0100               	movlb	0	; () banked
  3101  002928  65B3               	cpfsgt	MReceiveStrSPI@x_736& (0+255),b
  3102  00292A  D001               	goto	l4088
  3103                           
  3104                           ; BSR set to: 0
  3105  00292C  D011               	goto	l4094
  3106  00292E                     l4088:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;SPIMaster.c: 75: str[x] = MReceiveSPI();
  3110  00292E  0100               	movlb	0	; () banked
  3111  002930  51B3               	movf	MReceiveStrSPI@x_736& (0+255),w,b
  3112  002932  0D01               	mullw	1
  3113  002934  50F3               	movf	prodl,w,c
  3114  002936  0100               	movlb	0	; () banked
  3115  002938  25AF               	addwf	MReceiveStrSPI@str& (0+255),w,b
  3116  00293A  6ED9               	movwf	fsr2l,c
  3117  00293C  50F4               	movf	prodh,w,c
  3118  00293E  0100               	movlb	0	; () banked
  3119  002940  21B0               	addwfc	(MReceiveStrSPI@str+1)& (0+255),w,b
  3120  002942  6EDA               	movwf	fsr2h,c
  3121  002944  EC08  F018         	call	_MReceiveSPI	;wreg free
  3122  002948  6EDF               	movwf	indf2,c
  3123  00294A  0100               	movlb	0	; () banked
  3124  00294C  2BB3               	incf	MReceiveStrSPI@x_736& (0+255),f,b
  3125  00294E  D7EA               	goto	l4084
  3126  002950                     l4094:
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;SPIMaster.c: 76: Delay10TCYx(1);
  3130  002950  0E01               	movlw	1
  3131  002952  EC13  F018         	call	_Delay10TCYx
  3132                           
  3133                           ;SPIMaster.c: 77: PORTAbits.RA4 = 1;
  3134  002956  8880               	bsf	3968,4,c	;volatile
  3135  002958  D000               	goto	l388
  3136  00295A                     l388:
  3137  00295A  0012               	return		;funcret
  3138  00295C                     __end_of_MReceiveStrSPI:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           prodh	equ	0xFF4
  3145                           prodl	equ	0xFF3
  3146                           intcon	equ	0xFF2
  3147                           indf0	equ	0xFEF
  3148                           postinc0	equ	0xFEE
  3149                           fsr0h	equ	0xFEA
  3150                           fsr0l	equ	0xFE9
  3151                           wreg	equ	0xFE8
  3152                           indf2	equ	0xFDF
  3153                           fsr2h	equ	0xFDA
  3154                           fsr2l	equ	0xFD9
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function _breakDouble *****************
  3158 ;; Defined at:
  3159 ;;		line 80 in file "SerComm.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  dubs            3   38[BANK0 ] unsigned char 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  temp2           2   45[BANK0 ] unsigned int 
  3164 ;;  temp1           2   43[BANK0 ] unsigned int 
  3165 ;;  tempDub         2   41[BANK0 ] unsigned int 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3175 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;Total ram usage:        9 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    8
  3182 ;; This function calls:
  3183 ;;		_SerTx
  3184 ;;		___ftmul
  3185 ;;		___fttol
  3186 ;;		___lwdiv
  3187 ;;		___lwmod
  3188 ;; This function is called by:
  3189 ;;		_MReceiveStrSPI
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text11
  3194  001F82                     __ptext11:
  3195                           	opt stack 0
  3196  001F82                     _breakDouble:
  3197                           	opt stack 21
  3198                           
  3199                           ;SerComm.c: 82: unsigned int temp1, temp2;
  3200                           ;SerComm.c: 83: unsigned int tempDub;
  3201                           ;SerComm.c: 85: tempDub = dubs * 100;
  3202                           
  3203                           ;incstack = 0
  3204  001F82  0E00               	movlw	0
  3205  001F84  0100               	movlb	0	; () banked
  3206  001F86  6F8B               	movwf	___ftmul@f2& (0+255),b
  3207  001F88  0EC8               	movlw	200
  3208  001F8A  0100               	movlb	0	; () banked
  3209  001F8C  6F8C               	movwf	(___ftmul@f2+1)& (0+255),b
  3210  001F8E  0E42               	movlw	66
  3211  001F90  0100               	movlb	0	; () banked
  3212  001F92  6F8D               	movwf	(___ftmul@f2+2)& (0+255),b
  3213  001F94  C0A6  F088         	movff	breakDouble@dubs,___ftmul@f1
  3214  001F98  C0A7  F089         	movff	breakDouble@dubs+1,___ftmul@f1+1
  3215  001F9C  C0A8  F08A         	movff	breakDouble@dubs+2,___ftmul@f1+2
  3216  001FA0  EC85  F010         	call	___ftmul	;wreg free
  3217  001FA4  C088  F097         	movff	?___ftmul,___fttol@f1
  3218  001FA8  C089  F098         	movff	?___ftmul+1,___fttol@f1+1
  3219  001FAC  C08A  F099         	movff	?___ftmul+2,___fttol@f1+2
  3220  001FB0  ECDC  F011         	call	___fttol	;wreg free
  3221  001FB4  C097  F0A9         	movff	?___fttol,breakDouble@tempDub
  3222  001FB8  C098  F0AA         	movff	?___fttol+1,breakDouble@tempDub+1
  3223                           
  3224                           ;SerComm.c: 86: temp1 = tempDub / 10000;
  3225  001FBC  C0A9  F080         	movff	breakDouble@tempDub,___lwdiv@dividend
  3226  001FC0  C0AA  F081         	movff	breakDouble@tempDub+1,___lwdiv@dividend+1
  3227  001FC4  0E27               	movlw	39
  3228  001FC6  0100               	movlb	0	; () banked
  3229  001FC8  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3230  001FCA  0E10               	movlw	16
  3231  001FCC  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3232  001FCE  ECF9  F014         	call	___lwdiv	;wreg free
  3233  001FD2  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3234  001FD6  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3235                           
  3236                           ;SerComm.c: 87: temp2 = tempDub % 10000;
  3237  001FDA  C0A9  F080         	movff	breakDouble@tempDub,___lwmod@dividend
  3238  001FDE  C0AA  F081         	movff	breakDouble@tempDub+1,___lwmod@dividend+1
  3239  001FE2  0E27               	movlw	39
  3240  001FE4  0100               	movlb	0	; () banked
  3241  001FE6  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3242  001FE8  0E10               	movlw	16
  3243  001FEA  6F82               	movwf	___lwmod@divisor& (0+255),b
  3244  001FEC  ECEF  F015         	call	___lwmod	;wreg free
  3245  001FF0  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3246  001FF4  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3247                           
  3248                           ;SerComm.c: 88: if (temp1 != 0)
  3249  001FF8  0100               	movlb	0	; () banked
  3250  001FFA  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3251  001FFC  0100               	movlb	0	; () banked
  3252  001FFE  11AC               	iorwf	(breakDouble@temp1+1)& (0+255),w,b
  3253  002000  B4D8               	btfsc	status,2,c
  3254  002002  D005               	goto	l49
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;SerComm.c: 89: SerTx(temp1 + 0x30);
  3258  002004  0100               	movlb	0	; () banked
  3259  002006  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3260  002008  0F30               	addlw	48
  3261  00200A  EC1E  F018         	call	_SerTx
  3262  00200E                     l49:
  3263                           
  3264                           ;SerComm.c: 90: temp1 = temp2 / 1000;
  3265  00200E  C0AD  F080         	movff	breakDouble@temp2,___lwdiv@dividend
  3266  002012  C0AE  F081         	movff	breakDouble@temp2+1,___lwdiv@dividend+1
  3267  002016  0E03               	movlw	3
  3268  002018  0100               	movlb	0	; () banked
  3269  00201A  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3270  00201C  0EE8               	movlw	232
  3271  00201E  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3272  002020  ECF9  F014         	call	___lwdiv	;wreg free
  3273  002024  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3274  002028  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3275                           
  3276                           ;SerComm.c: 91: temp2 = temp2 % 1000;
  3277  00202C  C0AD  F080         	movff	breakDouble@temp2,___lwmod@dividend
  3278  002030  C0AE  F081         	movff	breakDouble@temp2+1,___lwmod@dividend+1
  3279  002034  0E03               	movlw	3
  3280  002036  0100               	movlb	0	; () banked
  3281  002038  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3282  00203A  0EE8               	movlw	232
  3283  00203C  6F82               	movwf	___lwmod@divisor& (0+255),b
  3284  00203E  ECEF  F015         	call	___lwmod	;wreg free
  3285  002042  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3286  002046  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3287                           
  3288                           ;SerComm.c: 92: if (temp1 != 0)
  3289  00204A  0100               	movlb	0	; () banked
  3290  00204C  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3291  00204E  0100               	movlb	0	; () banked
  3292  002050  11AC               	iorwf	(breakDouble@temp1+1)& (0+255),w,b
  3293  002052  B4D8               	btfsc	status,2,c
  3294  002054  D005               	goto	l50
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;SerComm.c: 93: SerTx(temp1 + 0x30);
  3298  002056  0100               	movlb	0	; () banked
  3299  002058  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3300  00205A  0F30               	addlw	48
  3301  00205C  EC1E  F018         	call	_SerTx
  3302  002060                     l50:
  3303                           
  3304                           ;SerComm.c: 94: temp1 = temp2 / 100;
  3305  002060  C0AD  F080         	movff	breakDouble@temp2,___lwdiv@dividend
  3306  002064  C0AE  F081         	movff	breakDouble@temp2+1,___lwdiv@dividend+1
  3307  002068  0E00               	movlw	0
  3308  00206A  0100               	movlb	0	; () banked
  3309  00206C  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3310  00206E  0E64               	movlw	100
  3311  002070  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3312  002072  ECF9  F014         	call	___lwdiv	;wreg free
  3313  002076  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3314  00207A  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3315                           
  3316                           ;SerComm.c: 95: temp2 = temp2 % 100;
  3317  00207E  C0AD  F080         	movff	breakDouble@temp2,___lwmod@dividend
  3318  002082  C0AE  F081         	movff	breakDouble@temp2+1,___lwmod@dividend+1
  3319  002086  0E00               	movlw	0
  3320  002088  0100               	movlb	0	; () banked
  3321  00208A  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3322  00208C  0E64               	movlw	100
  3323  00208E  6F82               	movwf	___lwmod@divisor& (0+255),b
  3324  002090  ECEF  F015         	call	___lwmod	;wreg free
  3325  002094  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3326  002098  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3327                           
  3328                           ;SerComm.c: 96: SerTx(temp1 + 0x30);
  3329  00209C  0100               	movlb	0	; () banked
  3330  00209E  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3331  0020A0  0F30               	addlw	48
  3332  0020A2  EC1E  F018         	call	_SerTx
  3333                           
  3334                           ;SerComm.c: 97: SerTx('.');
  3335  0020A6  0E2E               	movlw	46
  3336  0020A8  EC1E  F018         	call	_SerTx
  3337                           
  3338                           ;SerComm.c: 98: temp1 = temp2 / 10;
  3339  0020AC  C0AD  F080         	movff	breakDouble@temp2,___lwdiv@dividend
  3340  0020B0  C0AE  F081         	movff	breakDouble@temp2+1,___lwdiv@dividend+1
  3341  0020B4  0E00               	movlw	0
  3342  0020B6  0100               	movlb	0	; () banked
  3343  0020B8  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3344  0020BA  0E0A               	movlw	10
  3345  0020BC  6F82               	movwf	___lwdiv@divisor& (0+255),b
  3346  0020BE  ECF9  F014         	call	___lwdiv	;wreg free
  3347  0020C2  C080  F0AB         	movff	?___lwdiv,breakDouble@temp1
  3348  0020C6  C081  F0AC         	movff	?___lwdiv+1,breakDouble@temp1+1
  3349                           
  3350                           ;SerComm.c: 99: temp2 = temp2 % 10;
  3351  0020CA  C0AD  F080         	movff	breakDouble@temp2,___lwmod@dividend
  3352  0020CE  C0AE  F081         	movff	breakDouble@temp2+1,___lwmod@dividend+1
  3353  0020D2  0E00               	movlw	0
  3354  0020D4  0100               	movlb	0	; () banked
  3355  0020D6  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  3356  0020D8  0E0A               	movlw	10
  3357  0020DA  6F82               	movwf	___lwmod@divisor& (0+255),b
  3358  0020DC  ECEF  F015         	call	___lwmod	;wreg free
  3359  0020E0  C080  F0AD         	movff	?___lwmod,breakDouble@temp2
  3360  0020E4  C081  F0AE         	movff	?___lwmod+1,breakDouble@temp2+1
  3361                           
  3362                           ;SerComm.c: 100: SerTx(temp1 + 0x30);
  3363  0020E8  0100               	movlb	0	; () banked
  3364  0020EA  51AB               	movf	breakDouble@temp1& (0+255),w,b
  3365  0020EC  0F30               	addlw	48
  3366  0020EE  EC1E  F018         	call	_SerTx
  3367                           
  3368                           ;SerComm.c: 101: SerTx(temp2 + 0x30);
  3369  0020F2  0100               	movlb	0	; () banked
  3370  0020F4  51AD               	movf	breakDouble@temp2& (0+255),w,b
  3371  0020F6  0F30               	addlw	48
  3372  0020F8  EC1E  F018         	call	_SerTx
  3373                           
  3374                           ;SerComm.c: 102: SerTx(0x0A);
  3375  0020FC  0E0A               	movlw	10
  3376  0020FE  EC1E  F018         	call	_SerTx
  3377                           
  3378                           ;SerComm.c: 103: SerTx(0x0D);
  3379  002102  0E0D               	movlw	13
  3380  002104  EC1E  F018         	call	_SerTx
  3381  002108  0012               	return		;funcret
  3382  00210A                     __end_of_breakDouble:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           intcon	equ	0xFF2
  3391                           indf0	equ	0xFEF
  3392                           postinc0	equ	0xFEE
  3393                           fsr0h	equ	0xFEA
  3394                           fsr0l	equ	0xFE9
  3395                           wreg	equ	0xFE8
  3396                           indf2	equ	0xFDF
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function ___lwmod *****************
  3402 ;; Defined at:
  3403 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  dividend        2    0[BANK0 ] unsigned int 
  3406 ;;  divisor         2    2[BANK0 ] unsigned int 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  counter         1    4[BANK0 ] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  2    0[BANK0 ] unsigned int 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3418 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;Total ram usage:        5 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_breakDouble
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text12
  3433  002BDE                     __ptext12:
  3434                           	opt stack 0
  3435  002BDE                     ___lwmod:
  3436                           	opt stack 22
  3437                           
  3438                           ;incstack = 0
  3439  002BDE  0100               	movlb	0	; () banked
  3440  002BE0  5182               	movf	___lwmod@divisor& (0+255),w,b
  3441  002BE2  0100               	movlb	0	; () banked
  3442  002BE4  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3443  002BE6  B4D8               	btfsc	status,2,c
  3444  002BE8  D02B               	goto	l1041
  3445                           
  3446                           ; BSR set to: 0
  3447  002BEA  0E01               	movlw	1
  3448  002BEC  0100               	movlb	0	; () banked
  3449  002BEE  6F84               	movwf	___lwmod@counter& (0+255),b
  3450  002BF0  D007               	goto	l3936
  3451  002BF2                     l3934:
  3452                           
  3453                           ; BSR set to: 0
  3454  002BF2  0100               	movlb	0	; () banked
  3455  002BF4  90D8               	bcf	status,0,c
  3456  002BF6  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  3457  002BF8  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3458  002BFA  0100               	movlb	0	; () banked
  3459  002BFC  2B84               	incf	___lwmod@counter& (0+255),f,b
  3460  002BFE  D000               	goto	l3936
  3461  002C00                     l3936:
  3462                           
  3463                           ; BSR set to: 0
  3464  002C00  0100               	movlb	0	; () banked
  3465  002C02  BF83               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
  3466  002C04  D002               	goto	l3938
  3467  002C06  D7F5               	goto	l3934
  3468                           
  3469                           ; BSR set to: 0
  3470  002C08  D000               	goto	l3938
  3471  002C0A                     l3938:
  3472                           
  3473                           ; BSR set to: 0
  3474  002C0A  0100               	movlb	0	; () banked
  3475  002C0C  5182               	movf	___lwmod@divisor& (0+255),w,b
  3476  002C0E  0100               	movlb	0	; () banked
  3477  002C10  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  3478  002C12  0100               	movlb	0	; () banked
  3479  002C14  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3480  002C16  0100               	movlb	0	; () banked
  3481  002C18  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3482  002C1A  A0D8               	btfss	status,0,c
  3483  002C1C  D009               	goto	l3942
  3484                           
  3485                           ; BSR set to: 0
  3486  002C1E  0100               	movlb	0	; () banked
  3487  002C20  5182               	movf	___lwmod@divisor& (0+255),w,b
  3488  002C22  0100               	movlb	0	; () banked
  3489  002C24  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  3490  002C26  0100               	movlb	0	; () banked
  3491  002C28  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3492  002C2A  0100               	movlb	0	; () banked
  3493  002C2C  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3494  002C2E  D000               	goto	l3942
  3495  002C30                     l3942:
  3496                           
  3497                           ; BSR set to: 0
  3498  002C30  0100               	movlb	0	; () banked
  3499  002C32  90D8               	bcf	status,0,c
  3500  002C34  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3501  002C36  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  3502                           
  3503                           ; BSR set to: 0
  3504  002C38  0100               	movlb	0	; () banked
  3505  002C3A  2F84               	decfsz	___lwmod@counter& (0+255),f,b
  3506  002C3C  D7E6               	goto	l3938
  3507  002C3E  D000               	goto	l1041
  3508  002C40                     l1041:
  3509                           
  3510                           ; BSR set to: 0
  3511  002C40  C080  F080         	movff	___lwmod@dividend,?___lwmod
  3512  002C44  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  3513                           
  3514                           ; BSR set to: 0
  3515  002C48  0012               	return		;funcret
  3516  002C4A                     __end_of___lwmod:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           indf0	equ	0xFEF
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           indf2	equ	0xFDF
  3531                           fsr2h	equ	0xFDA
  3532                           fsr2l	equ	0xFD9
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function ___lwdiv *****************
  3536 ;; Defined at:
  3537 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  dividend        2    0[BANK0 ] unsigned int 
  3540 ;;  divisor         2    2[BANK0 ] unsigned int 
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  quotient        2    5[BANK0 ] unsigned int 
  3543 ;;  counter         1    4[BANK0 ] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  2    0[BANK0 ] unsigned int 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3553 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;Total ram usage:        7 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    6
  3560 ;; This function calls:
  3561 ;;		Nothing
  3562 ;; This function is called by:
  3563 ;;		_breakDouble
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	text13
  3568  0029F2                     __ptext13:
  3569                           	opt stack 0
  3570  0029F2                     ___lwdiv:
  3571                           	opt stack 22
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;incstack = 0
  3575  0029F2  0E00               	movlw	0
  3576  0029F4  0100               	movlb	0	; () banked
  3577  0029F6  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3578  0029F8  0E00               	movlw	0
  3579  0029FA  6F85               	movwf	___lwdiv@quotient& (0+255),b
  3580                           
  3581                           ; BSR set to: 0
  3582  0029FC  0100               	movlb	0	; () banked
  3583  0029FE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3584  002A00  0100               	movlb	0	; () banked
  3585  002A02  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3586  002A04  B4D8               	btfsc	status,2,c
  3587  002A06  D031               	goto	l1031
  3588                           
  3589                           ; BSR set to: 0
  3590  002A08  0E01               	movlw	1
  3591  002A0A  0100               	movlb	0	; () banked
  3592  002A0C  6F84               	movwf	___lwdiv@counter& (0+255),b
  3593  002A0E  D007               	goto	l3916
  3594  002A10                     l3914:
  3595                           
  3596                           ; BSR set to: 0
  3597  002A10  0100               	movlb	0	; () banked
  3598  002A12  90D8               	bcf	status,0,c
  3599  002A14  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3600  002A16  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3601  002A18  0100               	movlb	0	; () banked
  3602  002A1A  2B84               	incf	___lwdiv@counter& (0+255),f,b
  3603  002A1C  D000               	goto	l3916
  3604  002A1E                     l3916:
  3605                           
  3606                           ; BSR set to: 0
  3607  002A1E  0100               	movlb	0	; () banked
  3608  002A20  BF83               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
  3609  002A22  D002               	goto	l3918
  3610  002A24  D7F5               	goto	l3914
  3611                           
  3612                           ; BSR set to: 0
  3613  002A26  D000               	goto	l3918
  3614  002A28                     l3918:
  3615                           
  3616                           ; BSR set to: 0
  3617  002A28  0100               	movlb	0	; () banked
  3618  002A2A  90D8               	bcf	status,0,c
  3619  002A2C  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  3620  002A2E  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3621                           
  3622                           ; BSR set to: 0
  3623  002A30  0100               	movlb	0	; () banked
  3624  002A32  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3625  002A34  0100               	movlb	0	; () banked
  3626  002A36  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3627  002A38  0100               	movlb	0	; () banked
  3628  002A3A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3629  002A3C  0100               	movlb	0	; () banked
  3630  002A3E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3631  002A40  A0D8               	btfss	status,0,c
  3632  002A42  D00B               	goto	l3926
  3633                           
  3634                           ; BSR set to: 0
  3635  002A44  0100               	movlb	0	; () banked
  3636  002A46  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3637  002A48  0100               	movlb	0	; () banked
  3638  002A4A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3639  002A4C  0100               	movlb	0	; () banked
  3640  002A4E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3641  002A50  0100               	movlb	0	; () banked
  3642  002A52  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3643                           
  3644                           ; BSR set to: 0
  3645  002A54  0100               	movlb	0	; () banked
  3646  002A56  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  3647  002A58  D000               	goto	l3926
  3648  002A5A                     l3926:
  3649                           
  3650                           ; BSR set to: 0
  3651  002A5A  0100               	movlb	0	; () banked
  3652  002A5C  90D8               	bcf	status,0,c
  3653  002A5E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3654  002A60  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3655                           
  3656                           ; BSR set to: 0
  3657  002A62  0100               	movlb	0	; () banked
  3658  002A64  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  3659  002A66  D7E0               	goto	l3918
  3660  002A68  D000               	goto	l1031
  3661  002A6A                     l1031:
  3662                           
  3663                           ; BSR set to: 0
  3664  002A6A  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  3665  002A6E  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3666                           
  3667                           ; BSR set to: 0
  3668  002A72  0012               	return		;funcret
  3669  002A74                     __end_of___lwdiv:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodh	equ	0xFF4
  3676                           prodl	equ	0xFF3
  3677                           intcon	equ	0xFF2
  3678                           indf0	equ	0xFEF
  3679                           postinc0	equ	0xFEE
  3680                           fsr0h	equ	0xFEA
  3681                           fsr0l	equ	0xFE9
  3682                           wreg	equ	0xFE8
  3683                           indf2	equ	0xFDF
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function ___fttol *****************
  3689 ;; Defined at:
  3690 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  f1              3   23[BANK0 ] float 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  lval            4   33[BANK0 ] unsigned long 
  3695 ;;  exp1            1   37[BANK0 ] unsigned char 
  3696 ;;  sign1           1   32[BANK0 ] unsigned char 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  4   23[BANK0 ] long 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:       15 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    6
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_breakDouble
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text14
  3721  0023B8                     __ptext14:
  3722                           	opt stack 0
  3723  0023B8                     ___fttol:
  3724                           	opt stack 22
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;incstack = 0
  3728  0023B8  C099  F09B         	movff	___fttol@f1+2,??___fttol
  3729  0023BC  0100               	movlb	0	; () banked
  3730  0023BE  6B9C               	clrf	(??___fttol+1)& (0+255),b
  3731  0023C0  6B9D               	clrf	(??___fttol+2)& (0+255),b
  3732  0023C2  0100               	movlb	0	; () banked
  3733  0023C4  3598               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3734  0023C6  0100               	movlb	0	; () banked
  3735  0023C8  379B               	rlcf	??___fttol& (0+255),f,b
  3736  0023CA  E301               	bnc	u3241
  3737  0023CC  819C               	bsf	(??___fttol+1)& (0+255),0,b
  3738  0023CE                     u3241:
  3739  0023CE  0100               	movlb	0	; () banked
  3740  0023D0  519B               	movf	??___fttol& (0+255),w,b
  3741  0023D2  0100               	movlb	0	; () banked
  3742  0023D4  6FA5               	movwf	___fttol@exp1& (0+255),b
  3743  0023D6  0100               	movlb	0	; () banked
  3744  0023D8  51A5               	movf	___fttol@exp1& (0+255),w,b
  3745  0023DA  A4D8               	btfss	status,2,c
  3746  0023DC  D002               	goto	l2978
  3747  0023DE  D051               	goto	l3002
  3748                           
  3749                           ; BSR set to: 0
  3750                           
  3751                           ; BSR set to: 0
  3752  0023E0  D083               	goto	l919
  3753  0023E2                     l2978:
  3754                           
  3755                           ; BSR set to: 0
  3756  0023E2  0E17               	movlw	23
  3757  0023E4  0100               	movlb	0	; () banked
  3758  0023E6  6F9B               	movwf	??___fttol& (0+255),b
  3759  0023E8  C097  F09C         	movff	___fttol@f1,??___fttol+1
  3760  0023EC  C098  F09D         	movff	___fttol@f1+1,??___fttol+2
  3761  0023F0  C099  F09E         	movff	___fttol@f1+2,??___fttol+3
  3762  0023F4  0100               	movlb	0	; () banked
  3763  0023F6  299B               	incf	??___fttol& (0+255),w,b
  3764  0023F8  0100               	movlb	0	; () banked
  3765  0023FA  6F9F               	movwf	(??___fttol+4)& (0+255),b
  3766  0023FC  D005               	goto	u3260
  3767  0023FE                     u3265:
  3768  0023FE  0100               	movlb	0	; () banked
  3769  002400  90D8               	bcf	status,0,c
  3770  002402  339E               	rrcf	(??___fttol+3)& (0+255),f,b
  3771  002404  339D               	rrcf	(??___fttol+2)& (0+255),f,b
  3772  002406  339C               	rrcf	(??___fttol+1)& (0+255),f,b
  3773  002408                     u3260:
  3774  002408  0100               	movlb	0	; () banked
  3775  00240A  2F9F               	decfsz	(??___fttol+4)& (0+255),f,b
  3776  00240C  D7F8               	goto	u3265
  3777  00240E  0100               	movlb	0	; () banked
  3778  002410  519C               	movf	(??___fttol+1)& (0+255),w,b
  3779  002412  0100               	movlb	0	; () banked
  3780  002414  6FA0               	movwf	___fttol@sign1& (0+255),b
  3781                           
  3782                           ; BSR set to: 0
  3783  002416  0100               	movlb	0	; () banked
  3784  002418  8F98               	bsf	(___fttol@f1+1)& (0+255),7,b
  3785                           
  3786                           ; BSR set to: 0
  3787  00241A  0EFF               	movlw	255
  3788  00241C  0100               	movlb	0	; () banked
  3789  00241E  1797               	andwf	___fttol@f1& (0+255),f,b
  3790  002420  0EFF               	movlw	255
  3791  002422  0100               	movlb	0	; () banked
  3792  002424  1798               	andwf	(___fttol@f1+1)& (0+255),f,b
  3793  002426  0E00               	movlw	0
  3794  002428  0100               	movlb	0	; () banked
  3795  00242A  1799               	andwf	(___fttol@f1+2)& (0+255),f,b
  3796                           
  3797                           ; BSR set to: 0
  3798  00242C  0100               	movlb	0	; () banked
  3799  00242E  5197               	movf	___fttol@f1& (0+255),w,b
  3800  002430  0100               	movlb	0	; () banked
  3801  002432  6FA1               	movwf	___fttol@lval& (0+255),b
  3802  002434  0100               	movlb	0	; () banked
  3803  002436  5198               	movf	(___fttol@f1+1)& (0+255),w,b
  3804  002438  0100               	movlb	0	; () banked
  3805  00243A  6FA2               	movwf	(___fttol@lval+1)& (0+255),b
  3806  00243C  0100               	movlb	0	; () banked
  3807  00243E  5199               	movf	(___fttol@f1+2)& (0+255),w,b
  3808  002440  0100               	movlb	0	; () banked
  3809  002442  6FA3               	movwf	(___fttol@lval+2)& (0+255),b
  3810  002444  0100               	movlb	0	; () banked
  3811  002446  6BA4               	clrf	(___fttol@lval+3)& (0+255),b
  3812                           
  3813                           ; BSR set to: 0
  3814  002448  0E8E               	movlw	142
  3815  00244A  0100               	movlb	0	; () banked
  3816  00244C  5FA5               	subwf	___fttol@exp1& (0+255),f,b
  3817                           
  3818                           ; BSR set to: 0
  3819  00244E  0100               	movlb	0	; () banked
  3820  002450  AFA5               	btfss	___fttol@exp1& (0+255),7,b
  3821  002452  D013               	goto	l3000
  3822                           
  3823                           ; BSR set to: 0
  3824  002454  0100               	movlb	0	; () banked
  3825  002456  51A5               	movf	___fttol@exp1& (0+255),w,b
  3826  002458  0A80               	xorlw	128
  3827  00245A  0F8F               	addlw	143
  3828  00245C  B0D8               	btfsc	status,0,c
  3829  00245E  D003               	goto	l2996
  3830  002460  D010               	goto	l3002
  3831                           
  3832                           ; BSR set to: 0
  3833                           
  3834                           ; BSR set to: 0
  3835  002462  D042               	goto	l919
  3836                           
  3837                           ; BSR set to: 0
  3838  002464  D000               	goto	l2996
  3839  002466                     l2996:
  3840                           
  3841                           ; BSR set to: 0
  3842  002466  0100               	movlb	0	; () banked
  3843  002468  90D8               	bcf	status,0,c
  3844  00246A  33A4               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3845  00246C  33A3               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3846  00246E  33A2               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3847  002470  33A1               	rrcf	___fttol@lval& (0+255),f,b
  3848                           
  3849                           ; BSR set to: 0
  3850  002472  0100               	movlb	0	; () banked
  3851  002474  3FA5               	incfsz	___fttol@exp1& (0+255),f,b
  3852  002476  D7F7               	goto	l2996
  3853                           
  3854                           ; BSR set to: 0
  3855  002478  D01F               	goto	l3010
  3856  00247A                     l3000:
  3857                           
  3858                           ; BSR set to: 0
  3859  00247A  0E17               	movlw	23
  3860  00247C  0100               	movlb	0	; () banked
  3861  00247E  65A5               	cpfsgt	___fttol@exp1& (0+255),b
  3862  002480  D014               	goto	l3008
  3863  002482                     l3002:
  3864                           
  3865                           ; BSR set to: 0
  3866  002482  0E00               	movlw	0
  3867  002484  0100               	movlb	0	; () banked
  3868  002486  6F97               	movwf	?___fttol& (0+255),b
  3869  002488  0E00               	movlw	0
  3870  00248A  6F98               	movwf	(?___fttol+1)& (0+255),b
  3871  00248C  0E00               	movlw	0
  3872  00248E  6F99               	movwf	(?___fttol+2)& (0+255),b
  3873  002490  0E00               	movlw	0
  3874  002492  6F9A               	movwf	(?___fttol+3)& (0+255),b
  3875                           
  3876                           ; BSR set to: 0
  3877  002494  D029               	goto	l919
  3878                           
  3879                           ; BSR set to: 0
  3880  002496  D009               	goto	l3008
  3881  002498                     l3006:
  3882                           
  3883                           ; BSR set to: 0
  3884  002498  0100               	movlb	0	; () banked
  3885  00249A  90D8               	bcf	status,0,c
  3886  00249C  37A1               	rlcf	___fttol@lval& (0+255),f,b
  3887  00249E  37A2               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3888  0024A0  37A3               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3889  0024A2  37A4               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3890  0024A4  0100               	movlb	0	; () banked
  3891  0024A6  07A5               	decf	___fttol@exp1& (0+255),f,b
  3892  0024A8  D000               	goto	l3008
  3893  0024AA                     l3008:
  3894                           
  3895                           ; BSR set to: 0
  3896  0024AA  0100               	movlb	0	; () banked
  3897  0024AC  51A5               	movf	___fttol@exp1& (0+255),w,b
  3898  0024AE  0100               	movlb	0	; () banked
  3899  0024B0  B4D8               	btfsc	status,2,c
  3900  0024B2  D002               	goto	l3010
  3901  0024B4  D7F1               	goto	l3006
  3902                           
  3903                           ; BSR set to: 0
  3904  0024B6  D000               	goto	l3010
  3905  0024B8                     l3010:
  3906                           
  3907                           ; BSR set to: 0
  3908  0024B8  0100               	movlb	0	; () banked
  3909  0024BA  51A0               	movf	___fttol@sign1& (0+255),w,b
  3910  0024BC  0100               	movlb	0	; () banked
  3911  0024BE  B4D8               	btfsc	status,2,c
  3912  0024C0  D00A               	goto	l3014
  3913                           
  3914                           ; BSR set to: 0
  3915  0024C2  0100               	movlb	0	; () banked
  3916  0024C4  1FA4               	comf	(___fttol@lval+3)& (0+255),f,b
  3917  0024C6  1FA3               	comf	(___fttol@lval+2)& (0+255),f,b
  3918  0024C8  1FA2               	comf	(___fttol@lval+1)& (0+255),f,b
  3919  0024CA  6DA1               	negf	___fttol@lval& (0+255),b
  3920  0024CC  0E00               	movlw	0
  3921  0024CE  23A2               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3922  0024D0  23A3               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3923  0024D2  23A4               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3924  0024D4  D000               	goto	l3014
  3925  0024D6                     l3014:
  3926                           
  3927                           ; BSR set to: 0
  3928  0024D6  C0A1  F097         	movff	___fttol@lval,?___fttol
  3929  0024DA  C0A2  F098         	movff	___fttol@lval+1,?___fttol+1
  3930  0024DE  C0A3  F099         	movff	___fttol@lval+2,?___fttol+2
  3931  0024E2  C0A4  F09A         	movff	___fttol@lval+3,?___fttol+3
  3932  0024E6  D000               	goto	l919
  3933  0024E8                     l919:
  3934                           
  3935                           ; BSR set to: 0
  3936  0024E8  0012               	return		;funcret
  3937  0024EA                     __end_of___fttol:
  3938                           	opt stack 0
  3939                           tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           prodh	equ	0xFF4
  3944                           prodl	equ	0xFF3
  3945                           intcon	equ	0xFF2
  3946                           indf0	equ	0xFEF
  3947                           postinc0	equ	0xFEE
  3948                           fsr0h	equ	0xFEA
  3949                           fsr0l	equ	0xFE9
  3950                           wreg	equ	0xFE8
  3951                           indf2	equ	0xFDF
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function ___ftmul *****************
  3957 ;; Defined at:
  3958 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  f1              3    8[BANK0 ] float 
  3961 ;;  f2              3   11[BANK0 ] float 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  3964 ;;  sign            1   22[BANK0 ] unsigned char 
  3965 ;;  cntr            1   21[BANK0 ] unsigned char 
  3966 ;;  exp             1   17[BANK0 ] unsigned char 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  3    8[BANK0 ] float 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:       15 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    7
  3983 ;; This function calls:
  3984 ;;		___ftpack
  3985 ;; This function is called by:
  3986 ;;		_breakDouble
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text15
  3991  00210A                     __ptext15:
  3992                           	opt stack 0
  3993  00210A                     ___ftmul:
  3994                           	opt stack 21
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;incstack = 0
  3998  00210A  C08A  F08E         	movff	___ftmul@f1+2,??___ftmul
  3999  00210E  0100               	movlb	0	; () banked
  4000  002110  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  4001  002112  6B90               	clrf	(??___ftmul+2)& (0+255),b
  4002  002114  0100               	movlb	0	; () banked
  4003  002116  3589               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4004  002118  0100               	movlb	0	; () banked
  4005  00211A  378E               	rlcf	??___ftmul& (0+255),f,b
  4006  00211C  E301               	bnc	u4851
  4007  00211E  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  4008  002120                     u4851:
  4009  002120  0100               	movlb	0	; () banked
  4010  002122  518E               	movf	??___ftmul& (0+255),w,b
  4011  002124  0100               	movlb	0	; () banked
  4012  002126  6F91               	movwf	___ftmul@exp& (0+255),b
  4013  002128  0100               	movlb	0	; () banked
  4014  00212A  5191               	movf	___ftmul@exp& (0+255),w,b
  4015  00212C  A4D8               	btfss	status,2,c
  4016  00212E  D002               	goto	l3866
  4017  002130  D014               	goto	l3868
  4018                           
  4019                           ; BSR set to: 0
  4020                           
  4021                           ; BSR set to: 0
  4022  002132  D098               	goto	l898
  4023  002134                     l3866:
  4024                           
  4025                           ; BSR set to: 0
  4026  002134  C08D  F08E         	movff	___ftmul@f2+2,??___ftmul
  4027  002138  0100               	movlb	0	; () banked
  4028  00213A  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  4029  00213C  6B90               	clrf	(??___ftmul+2)& (0+255),b
  4030  00213E  0100               	movlb	0	; () banked
  4031  002140  358C               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4032  002142  0100               	movlb	0	; () banked
  4033  002144  378E               	rlcf	??___ftmul& (0+255),f,b
  4034  002146  E301               	bnc	u4871
  4035  002148  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  4036  00214A                     u4871:
  4037  00214A  0100               	movlb	0	; () banked
  4038  00214C  518E               	movf	??___ftmul& (0+255),w,b
  4039  00214E  0100               	movlb	0	; () banked
  4040  002150  6F96               	movwf	___ftmul@sign& (0+255),b
  4041  002152  0100               	movlb	0	; () banked
  4042  002154  5196               	movf	___ftmul@sign& (0+255),w,b
  4043  002156  A4D8               	btfss	status,2,c
  4044  002158  D00A               	goto	l3872
  4045  00215A                     l3868:
  4046                           
  4047                           ; BSR set to: 0
  4048  00215A  0E00               	movlw	0
  4049  00215C  0100               	movlb	0	; () banked
  4050  00215E  6F88               	movwf	?___ftmul& (0+255),b
  4051  002160  0E00               	movlw	0
  4052  002162  0100               	movlb	0	; () banked
  4053  002164  6F89               	movwf	(?___ftmul+1)& (0+255),b
  4054  002166  0E00               	movlw	0
  4055  002168  0100               	movlb	0	; () banked
  4056  00216A  6F8A               	movwf	(?___ftmul+2)& (0+255),b
  4057                           
  4058                           ; BSR set to: 0
  4059  00216C  D07B               	goto	l898
  4060  00216E                     l3872:
  4061                           
  4062                           ; BSR set to: 0
  4063  00216E  0100               	movlb	0	; () banked
  4064  002170  5196               	movf	___ftmul@sign& (0+255),w,b
  4065  002172  0F7B               	addlw	123
  4066  002174  0100               	movlb	0	; () banked
  4067  002176  2791               	addwf	___ftmul@exp& (0+255),f,b
  4068                           
  4069                           ; BSR set to: 0
  4070  002178  C08A  F096         	movff	___ftmul@f1+2,___ftmul@sign
  4071  00217C  0100               	movlb	0	; () banked
  4072  00217E  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  4073  002180  0100               	movlb	0	; () banked
  4074  002182  1B96               	xorwf	___ftmul@sign& (0+255),f,b
  4075  002184  0E80               	movlw	128
  4076  002186  0100               	movlb	0	; () banked
  4077  002188  1796               	andwf	___ftmul@sign& (0+255),f,b
  4078                           
  4079                           ; BSR set to: 0
  4080  00218A  0100               	movlb	0	; () banked
  4081  00218C  8F89               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4082                           
  4083                           ; BSR set to: 0
  4084  00218E  0100               	movlb	0	; () banked
  4085  002190  8F8C               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4086                           
  4087                           ; BSR set to: 0
  4088  002192  0EFF               	movlw	255
  4089  002194  0100               	movlb	0	; () banked
  4090  002196  178B               	andwf	___ftmul@f2& (0+255),f,b
  4091  002198  0EFF               	movlw	255
  4092  00219A  0100               	movlb	0	; () banked
  4093  00219C  178C               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4094  00219E  0E00               	movlw	0
  4095  0021A0  0100               	movlb	0	; () banked
  4096  0021A2  178D               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4097                           
  4098                           ; BSR set to: 0
  4099  0021A4  0E00               	movlw	0
  4100  0021A6  0100               	movlb	0	; () banked
  4101  0021A8  6F92               	movwf	___ftmul@f3_as_product& (0+255),b
  4102  0021AA  0E00               	movlw	0
  4103  0021AC  0100               	movlb	0	; () banked
  4104  0021AE  6F93               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4105  0021B0  0E00               	movlw	0
  4106  0021B2  0100               	movlb	0	; () banked
  4107  0021B4  6F94               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4108                           
  4109                           ; BSR set to: 0
  4110  0021B6  0E07               	movlw	7
  4111  0021B8  0100               	movlb	0	; () banked
  4112  0021BA  6F95               	movwf	___ftmul@cntr& (0+255),b
  4113  0021BC  D000               	goto	l3886
  4114  0021BE                     l3886:
  4115                           
  4116                           ; BSR set to: 0
  4117  0021BE  0100               	movlb	0	; () banked
  4118  0021C0  A188               	btfss	___ftmul@f1& (0+255),0,b
  4119  0021C2  D00D               	goto	l3890
  4120                           
  4121                           ; BSR set to: 0
  4122  0021C4  0100               	movlb	0	; () banked
  4123  0021C6  518B               	movf	___ftmul@f2& (0+255),w,b
  4124  0021C8  0100               	movlb	0	; () banked
  4125  0021CA  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4126  0021CC  0100               	movlb	0	; () banked
  4127  0021CE  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  4128  0021D0  0100               	movlb	0	; () banked
  4129  0021D2  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4130  0021D4  0100               	movlb	0	; () banked
  4131  0021D6  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  4132  0021D8  0100               	movlb	0	; () banked
  4133  0021DA  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4134  0021DC  D000               	goto	l3890
  4135  0021DE                     l3890:
  4136                           
  4137                           ; BSR set to: 0
  4138  0021DE  0100               	movlb	0	; () banked
  4139  0021E0  90D8               	bcf	status,0,c
  4140  0021E2  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4141  0021E4  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4142  0021E6  3388               	rrcf	___ftmul@f1& (0+255),f,b
  4143  0021E8  0100               	movlb	0	; () banked
  4144  0021EA  90D8               	bcf	status,0,c
  4145  0021EC  378B               	rlcf	___ftmul@f2& (0+255),f,b
  4146  0021EE  378C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4147  0021F0  378D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4148                           
  4149                           ; BSR set to: 0
  4150  0021F2  0100               	movlb	0	; () banked
  4151  0021F4  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  4152  0021F6  D7E3               	goto	l3886
  4153  0021F8  D000               	goto	l3894
  4154  0021FA                     l3894:
  4155                           
  4156                           ; BSR set to: 0
  4157  0021FA  0E09               	movlw	9
  4158  0021FC  0100               	movlb	0	; () banked
  4159  0021FE  6F95               	movwf	___ftmul@cntr& (0+255),b
  4160  002200  D000               	goto	l3896
  4161  002202                     l3896:
  4162                           
  4163                           ; BSR set to: 0
  4164  002202  0100               	movlb	0	; () banked
  4165  002204  A188               	btfss	___ftmul@f1& (0+255),0,b
  4166  002206  D00D               	goto	l3900
  4167                           
  4168                           ; BSR set to: 0
  4169  002208  0100               	movlb	0	; () banked
  4170  00220A  518B               	movf	___ftmul@f2& (0+255),w,b
  4171  00220C  0100               	movlb	0	; () banked
  4172  00220E  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4173  002210  0100               	movlb	0	; () banked
  4174  002212  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  4175  002214  0100               	movlb	0	; () banked
  4176  002216  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4177  002218  0100               	movlb	0	; () banked
  4178  00221A  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  4179  00221C  0100               	movlb	0	; () banked
  4180  00221E  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4181  002220  D000               	goto	l3900
  4182  002222                     l3900:
  4183                           
  4184                           ; BSR set to: 0
  4185  002222  0100               	movlb	0	; () banked
  4186  002224  90D8               	bcf	status,0,c
  4187  002226  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4188  002228  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4189  00222A  3388               	rrcf	___ftmul@f1& (0+255),f,b
  4190  00222C  0100               	movlb	0	; () banked
  4191  00222E  90D8               	bcf	status,0,c
  4192  002230  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4193  002232  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4194  002234  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4195                           
  4196                           ; BSR set to: 0
  4197  002236  0100               	movlb	0	; () banked
  4198  002238  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  4199  00223A  D7E3               	goto	l3896
  4200  00223C  D000               	goto	l3904
  4201  00223E                     l3904:
  4202                           
  4203                           ; BSR set to: 0
  4204  00223E  C092  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  4205  002242  C093  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4206  002246  C094  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4207  00224A  C091  F083         	movff	___ftmul@exp,___ftpack@exp
  4208  00224E  C096  F084         	movff	___ftmul@sign,___ftpack@sign
  4209  002252  EC75  F012         	call	___ftpack	;wreg free
  4210  002256  C080  F088         	movff	?___ftpack,?___ftmul
  4211  00225A  C081  F089         	movff	?___ftpack+1,?___ftmul+1
  4212  00225E  C082  F08A         	movff	?___ftpack+2,?___ftmul+2
  4213  002262  D000               	goto	l898
  4214  002264                     l898:
  4215  002264  0012               	return		;funcret
  4216  002266                     __end_of___ftmul:
  4217                           	opt stack 0
  4218                           tblptru	equ	0xFF8
  4219                           tblptrh	equ	0xFF7
  4220                           tblptrl	equ	0xFF6
  4221                           tablat	equ	0xFF5
  4222                           prodh	equ	0xFF4
  4223                           prodl	equ	0xFF3
  4224                           intcon	equ	0xFF2
  4225                           indf0	equ	0xFEF
  4226                           postinc0	equ	0xFEE
  4227                           fsr0h	equ	0xFEA
  4228                           fsr0l	equ	0xFE9
  4229                           wreg	equ	0xFE8
  4230                           indf2	equ	0xFDF
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function ___ftpack *****************
  4236 ;; Defined at:
  4237 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  arg             3    0[BANK0 ] unsigned um
  4240 ;;  exp             1    3[BANK0 ] unsigned char 
  4241 ;;  sign            1    4[BANK0 ] unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;		None
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  3    0[BANK0 ] float 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4253 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;Total ram usage:        8 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    6
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		___ftmul
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text16
  4268  0024EA                     __ptext16:
  4269                           	opt stack 0
  4270  0024EA                     ___ftpack:
  4271                           	opt stack 21
  4272                           
  4273                           ;incstack = 0
  4274  0024EA  0100               	movlb	0	; () banked
  4275  0024EC  5183               	movf	___ftpack@exp& (0+255),w,b
  4276  0024EE  0100               	movlb	0	; () banked
  4277  0024F0  B4D8               	btfsc	status,2,c
  4278  0024F2  D008               	goto	l3802
  4279                           
  4280                           ; BSR set to: 0
  4281  0024F4  0100               	movlb	0	; () banked
  4282  0024F6  5180               	movf	___ftpack@arg& (0+255),w,b
  4283  0024F8  0100               	movlb	0	; () banked
  4284  0024FA  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  4285  0024FC  0100               	movlb	0	; () banked
  4286  0024FE  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  4287  002500  A4D8               	btfss	status,2,c
  4288  002502  D013               	goto	l3808
  4289  002504                     l3802:
  4290                           
  4291                           ; BSR set to: 0
  4292  002504  0E00               	movlw	0
  4293  002506  0100               	movlb	0	; () banked
  4294  002508  6F80               	movwf	?___ftpack& (0+255),b
  4295  00250A  0E00               	movlw	0
  4296  00250C  0100               	movlb	0	; () banked
  4297  00250E  6F81               	movwf	(?___ftpack+1)& (0+255),b
  4298  002510  0E00               	movlw	0
  4299  002512  0100               	movlb	0	; () banked
  4300  002514  6F82               	movwf	(?___ftpack+2)& (0+255),b
  4301                           
  4302                           ; BSR set to: 0
  4303  002516  D078               	goto	l811
  4304                           
  4305                           ; BSR set to: 0
  4306  002518  D008               	goto	l3808
  4307  00251A                     l3806:
  4308                           
  4309                           ; BSR set to: 0
  4310  00251A  0100               	movlb	0	; () banked
  4311  00251C  2B83               	incf	___ftpack@exp& (0+255),f,b
  4312  00251E  0100               	movlb	0	; () banked
  4313  002520  90D8               	bcf	status,0,c
  4314  002522  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4315  002524  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4316  002526  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4317  002528  D000               	goto	l3808
  4318  00252A                     l3808:
  4319                           
  4320                           ; BSR set to: 0
  4321  00252A  0E00               	movlw	0
  4322  00252C  0100               	movlb	0	; () banked
  4323  00252E  1580               	andwf	___ftpack@arg& (0+255),w,b
  4324  002530  0100               	movlb	0	; () banked
  4325  002532  6F85               	movwf	??___ftpack& (0+255),b
  4326  002534  0E00               	movlw	0
  4327  002536  0100               	movlb	0	; () banked
  4328  002538  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4329  00253A  0100               	movlb	0	; () banked
  4330  00253C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4331  00253E  0EFE               	movlw	254
  4332  002540  0100               	movlb	0	; () banked
  4333  002542  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4334  002544  0100               	movlb	0	; () banked
  4335  002546  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4336  002548  0100               	movlb	0	; () banked
  4337  00254A  5185               	movf	??___ftpack& (0+255),w,b
  4338  00254C  0100               	movlb	0	; () banked
  4339  00254E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4340  002550  0100               	movlb	0	; () banked
  4341  002552  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4342  002554  B4D8               	btfsc	status,2,c
  4343  002556  D013               	goto	l3814
  4344  002558  D7E0               	goto	l3806
  4345                           
  4346                           ; BSR set to: 0
  4347  00255A  D011               	goto	l3814
  4348  00255C                     l3810:
  4349                           
  4350                           ; BSR set to: 0
  4351  00255C  0100               	movlb	0	; () banked
  4352  00255E  2B83               	incf	___ftpack@exp& (0+255),f,b
  4353                           
  4354                           ; BSR set to: 0
  4355  002560  0E01               	movlw	1
  4356  002562  0100               	movlb	0	; () banked
  4357  002564  2780               	addwf	___ftpack@arg& (0+255),f,b
  4358  002566  0E00               	movlw	0
  4359  002568  0100               	movlb	0	; () banked
  4360  00256A  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  4361  00256C  0E00               	movlw	0
  4362  00256E  0100               	movlb	0	; () banked
  4363  002570  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  4364  002572  0100               	movlb	0	; () banked
  4365  002574  90D8               	bcf	status,0,c
  4366  002576  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4367  002578  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4368  00257A  3380               	rrcf	___ftpack@arg& (0+255),f,b
  4369  00257C  D000               	goto	l3814
  4370  00257E                     l3814:
  4371                           
  4372                           ; BSR set to: 0
  4373  00257E  0E00               	movlw	0
  4374  002580  0100               	movlb	0	; () banked
  4375  002582  1580               	andwf	___ftpack@arg& (0+255),w,b
  4376  002584  0100               	movlb	0	; () banked
  4377  002586  6F85               	movwf	??___ftpack& (0+255),b
  4378  002588  0E00               	movlw	0
  4379  00258A  0100               	movlb	0	; () banked
  4380  00258C  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4381  00258E  0100               	movlb	0	; () banked
  4382  002590  6F86               	movwf	(??___ftpack+1)& (0+255),b
  4383  002592  0EFF               	movlw	255
  4384  002594  0100               	movlb	0	; () banked
  4385  002596  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4386  002598  0100               	movlb	0	; () banked
  4387  00259A  6F87               	movwf	(??___ftpack+2)& (0+255),b
  4388  00259C  0100               	movlb	0	; () banked
  4389  00259E  5185               	movf	??___ftpack& (0+255),w,b
  4390  0025A0  0100               	movlb	0	; () banked
  4391  0025A2  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  4392  0025A4  0100               	movlb	0	; () banked
  4393  0025A6  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  4394  0025A8  B4D8               	btfsc	status,2,c
  4395  0025AA  D00A               	goto	l3818
  4396  0025AC  D7D7               	goto	l3810
  4397                           
  4398                           ; BSR set to: 0
  4399  0025AE  D008               	goto	l3818
  4400  0025B0                     l3816:
  4401                           
  4402                           ; BSR set to: 0
  4403  0025B0  0100               	movlb	0	; () banked
  4404  0025B2  0783               	decf	___ftpack@exp& (0+255),f,b
  4405  0025B4  0100               	movlb	0	; () banked
  4406  0025B6  90D8               	bcf	status,0,c
  4407  0025B8  3780               	rlcf	___ftpack@arg& (0+255),f,b
  4408  0025BA  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  4409  0025BC  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  4410  0025BE  D000               	goto	l3818
  4411  0025C0                     l3818:
  4412                           
  4413                           ; BSR set to: 0
  4414  0025C0  0100               	movlb	0	; () banked
  4415  0025C2  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  4416  0025C4  D005               	goto	l822
  4417                           
  4418                           ; BSR set to: 0
  4419  0025C6  0E02               	movlw	2
  4420  0025C8  0100               	movlb	0	; () banked
  4421  0025CA  6183               	cpfslt	___ftpack@exp& (0+255),b
  4422  0025CC  D7F1               	goto	l3816
  4423  0025CE  D000               	goto	l822
  4424  0025D0                     l822:
  4425                           
  4426                           ; BSR set to: 0
  4427  0025D0  0100               	movlb	0	; () banked
  4428  0025D2  B183               	btfsc	___ftpack@exp& (0+255),0,b
  4429  0025D4  D003               	goto	l3824
  4430                           
  4431                           ; BSR set to: 0
  4432  0025D6  0100               	movlb	0	; () banked
  4433  0025D8  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  4434  0025DA  D000               	goto	l3824
  4435  0025DC                     l3824:
  4436                           
  4437                           ; BSR set to: 0
  4438  0025DC  0100               	movlb	0	; () banked
  4439  0025DE  90D8               	bcf	status,0,c
  4440  0025E0  3383               	rrcf	___ftpack@exp& (0+255),f,b
  4441  0025E2  0100               	movlb	0	; () banked
  4442  0025E4  5183               	movf	___ftpack@exp& (0+255),w,b
  4443  0025E6  0100               	movlb	0	; () banked
  4444  0025E8  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  4445                           
  4446                           ; BSR set to: 0
  4447  0025EA  0100               	movlb	0	; () banked
  4448  0025EC  5184               	movf	___ftpack@sign& (0+255),w,b
  4449  0025EE  0100               	movlb	0	; () banked
  4450  0025F0  B4D8               	btfsc	status,2,c
  4451  0025F2  D003               	goto	l3830
  4452                           
  4453                           ; BSR set to: 0
  4454  0025F4  0100               	movlb	0	; () banked
  4455  0025F6  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  4456  0025F8  D000               	goto	l3830
  4457  0025FA                     l3830:
  4458                           
  4459                           ; BSR set to: 0
  4460  0025FA  C080  F080         	movff	___ftpack@arg,?___ftpack
  4461  0025FE  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  4462  002602  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  4463  002606  D000               	goto	l811
  4464  002608                     l811:
  4465                           
  4466                           ; BSR set to: 0
  4467  002608  0012               	return		;funcret
  4468  00260A                     __end_of___ftpack:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           indf0	equ	0xFEF
  4478                           postinc0	equ	0xFEE
  4479                           fsr0h	equ	0xFEA
  4480                           fsr0l	equ	0xFE9
  4481                           wreg	equ	0xFE8
  4482                           indf2	equ	0xFDF
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _SerTx *****************
  4488 ;; Defined at:
  4489 ;;		line 41 in file "SerComm.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  c               1    wreg     unsigned char 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;  c               1    0[BANK0 ] unsigned char 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;Total ram usage:        1 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    6
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_SerTxStr
  4514 ;;		_breakDouble
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text17
  4519  00303C                     __ptext17:
  4520                           	opt stack 0
  4521  00303C                     _SerTx:
  4522                           	opt stack 21
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;incstack = 0
  4526                           ;SerTx@c stored from wreg
  4527  00303C  0100               	movlb	0	; () banked
  4528  00303E  6F80               	movwf	SerTx@c& (0+255),b
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;SerComm.c: 43: TXREG1 = c;
  4532  003040  C080  FFAD         	movff	SerTx@c,4013	;volatile
  4533                           
  4534                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  4535  003044  D000               	goto	l28
  4536  003046                     l28:
  4537  003046  A89E               	btfss	3998,4,c	;volatile
  4538  003048  D7FE               	goto	l28
  4539  00304A  0012               	return		;funcret
  4540  00304C                     __end_of_SerTx:
  4541                           	opt stack 0
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           intcon	equ	0xFF2
  4549                           indf0	equ	0xFEF
  4550                           postinc0	equ	0xFEE
  4551                           fsr0h	equ	0xFEA
  4552                           fsr0l	equ	0xFE9
  4553                           wreg	equ	0xFE8
  4554                           indf2	equ	0xFDF
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _SPIReassembleDouble *****************
  4560 ;; Defined at:
  4561 ;;		line 81 in file "SPIMaster.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  dub             3    3[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  3    0[BANK0 ] unsigned char 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4575 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;Total ram usage:        6 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    6
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_main
  4586 ;;		_MReceiveStrSPI
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text18
  4591  002EA6                     __ptext18:
  4592                           	opt stack 0
  4593  002EA6                     _SPIReassembleDouble:
  4594                           	opt stack 24
  4595                           
  4596                           ;SPIMaster.c: 83: double dub;
  4597                           ;SPIMaster.c: 84: DoublePtr = (unsigned char*) &dub;
  4598                           
  4599                           ;incstack = 0
  4600  002EA6  0E83               	movlw	low SPIReassembleDouble@dub
  4601  002EA8  6E4E               	movwf	_DoublePtr,c
  4602  002EAA  0E00               	movlw	high SPIReassembleDouble@dub
  4603  002EAC  6E4F               	movwf	_DoublePtr+1,c
  4604                           
  4605                           ;SPIMaster.c: 85: DoublePtr[0] = DoubleSPIM[0];
  4606  002EAE  C04E  FFD9         	movff	_DoublePtr,fsr2l
  4607  002EB2  C04F  FFDA         	movff	_DoublePtr+1,fsr2h
  4608  002EB6  C0DA  FFDF         	movff	_DoubleSPIM,indf2
  4609                           
  4610                           ;SPIMaster.c: 86: DoublePtr[1] = DoubleSPIM[1];
  4611  002EBA  EE20 F001          	lfsr	2,1
  4612  002EBE  504E               	movf	_DoublePtr,w,c
  4613  002EC0  26D9               	addwf	fsr2l,f,c
  4614  002EC2  504F               	movf	_DoublePtr+1,w,c
  4615  002EC4  22DA               	addwfc	fsr2h,f,c
  4616  002EC6  C0DB  FFDF         	movff	_DoubleSPIM+1,indf2
  4617                           
  4618                           ;SPIMaster.c: 87: DoublePtr[2] = DoubleSPIM[2];
  4619  002ECA  EE20 F002          	lfsr	2,2
  4620  002ECE  504E               	movf	_DoublePtr,w,c
  4621  002ED0  26D9               	addwf	fsr2l,f,c
  4622  002ED2  504F               	movf	_DoublePtr+1,w,c
  4623  002ED4  22DA               	addwfc	fsr2h,f,c
  4624  002ED6  C0DC  FFDF         	movff	_DoubleSPIM+2,indf2
  4625                           
  4626                           ;SPIMaster.c: 88: return dub;
  4627  002EDA  C083  F080         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  4628  002EDE  C084  F081         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  4629  002EE2  C085  F082         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  4630  002EE6  D000               	goto	l391
  4631  002EE8                     l391:
  4632  002EE8  0012               	return		;funcret
  4633  002EEA                     __end_of_SPIReassembleDouble:
  4634                           	opt stack 0
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           intcon	equ	0xFF2
  4642                           indf0	equ	0xFEF
  4643                           postinc0	equ	0xFEE
  4644                           fsr0h	equ	0xFEA
  4645                           fsr0l	equ	0xFE9
  4646                           wreg	equ	0xFE8
  4647                           indf2	equ	0xFDF
  4648                           fsr2h	equ	0xFDA
  4649                           fsr2l	equ	0xFD9
  4650                           status	equ	0xFD8
  4651                           
  4652 ;; *************** function _MReceiveSPI *****************
  4653 ;; Defined at:
  4654 ;;		line 45 in file "SPIMaster.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;		None
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;  tempCH          1    0[BANK0 ] unsigned char 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      unsigned char 
  4661 ;; Registers used:
  4662 ;;		wreg, status,2
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;Total ram usage:        1 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    6
  4675 ;; This function calls:
  4676 ;;		Nothing
  4677 ;; This function is called by:
  4678 ;;		_MReceiveStrSPI
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text19
  4683  003010                     __ptext19:
  4684                           	opt stack 0
  4685  003010                     _MReceiveSPI:
  4686                           	opt stack 23
  4687                           
  4688                           ;SPIMaster.c: 47: unsigned char tempCH;
  4689                           ;SPIMaster.c: 48: tempCH = SSPBUF;
  4690                           
  4691                           ;incstack = 0
  4692  003010  CFC9 F080          	movff	4041,MReceiveSPI@tempCH	;volatile
  4693                           
  4694                           ;SPIMaster.c: 49: PIR1bits.SSPIF = 0;
  4695  003014  969E               	bcf	3998,3,c	;volatile
  4696                           
  4697                           ;SPIMaster.c: 50: SSPBUF = 0x00;
  4698  003016  0E00               	movlw	0
  4699  003018  6EC9               	movwf	4041,c	;volatile
  4700                           
  4701                           ;SPIMaster.c: 51: while (!PIR1bits.SSPIF);
  4702  00301A  D000               	goto	l369
  4703  00301C                     l369:
  4704  00301C  A69E               	btfss	3998,3,c	;volatile
  4705  00301E  D7FE               	goto	l369
  4706                           
  4707                           ;SPIMaster.c: 52: return SSPBUF;
  4708  003020  50C9               	movf	4041,w,c	;volatile
  4709  003022  D000               	goto	l372
  4710  003024                     l372:
  4711  003024  0012               	return		;funcret
  4712  003026                     __end_of_MReceiveSPI:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           indf0	equ	0xFEF
  4722                           postinc0	equ	0xFEE
  4723                           fsr0h	equ	0xFEA
  4724                           fsr0l	equ	0xFE9
  4725                           wreg	equ	0xFE8
  4726                           indf2	equ	0xFDF
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _Delay10TCYx *****************
  4732 ;; Defined at:
  4733 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  unit            1    wreg     unsigned char 
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  unit            1    0[BANK0 ] unsigned char 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;		None               void
  4740 ;; Registers used:
  4741 ;;		wreg
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        1 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    6
  4754 ;; This function calls:
  4755 ;;		Nothing
  4756 ;; This function is called by:
  4757 ;;		_main
  4758 ;;		_MSendSPI
  4759 ;;		_MReceiveStrSPI
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text20
  4764  003026                     __ptext20:
  4765                           	opt stack 0
  4766  003026                     _Delay10TCYx:
  4767                           	opt stack 23
  4768                           
  4769                           ;incstack = 0
  4770                           ;Delay10TCYx@unit stored from wreg
  4771  003026  0100               	movlb	0	; () banked
  4772  003028  6F80               	movwf	Delay10TCYx@unit& (0+255),b
  4773  00302A                     
  4774                           ; BSR set to: 0
  4775  00302A  0E03               	movlw	3
  4776  00302C                     u5777:
  4777  00302C  2EE8               	decfsz	wreg,f,c
  4778  00302E  D7FE               	goto	u5777
  4779  003030  F000               	nop	
  4780  003032  0100               	movlb	0	; () banked
  4781  003034  2F80               	decfsz	Delay10TCYx@unit& (0+255),f,b
  4782  003036  D7F9               	goto	l3988
  4783  003038  D000               	goto	l721
  4784  00303A                     l721:
  4785                           
  4786                           ; BSR set to: 0
  4787  00303A  0012               	return		;funcret
  4788  00303C                     __end_of_Delay10TCYx:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           indf0	equ	0xFEF
  4798                           postinc0	equ	0xFEE
  4799                           fsr0h	equ	0xFEA
  4800                           fsr0l	equ	0xFE9
  4801                           wreg	equ	0xFE8
  4802                           indf2	equ	0xFDF
  4803                           fsr2h	equ	0xFDA
  4804                           fsr2l	equ	0xFD9
  4805                           status	equ	0xFD8
  4806                           
  4807 ;; *************** function _ISR *****************
  4808 ;; Defined at:
  4809 ;;		line 152 in file "SPItest-MASTER.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;		None               void
  4816 ;; Registers used:
  4817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;Total ram usage:       14 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    5
  4830 ;; This function calls:
  4831 ;;		_RCInt
  4832 ;; This function is called by:
  4833 ;;		Interrupt level 2
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	intcode
  4838  000008                     __pintcode:
  4839                           	opt stack 0
  4840  000008                     _ISR:
  4841                           	opt stack 21
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;incstack = 0
  4845  000008  CFFA F031          	movff	pclath,??_ISR
  4846  00000C  CFFB F032          	movff	pclatu,??_ISR+1
  4847  000010  CFE9 F033          	movff	fsr0l,??_ISR+2
  4848  000014  EDB6  F015         	call	int_func,f	;refresh shadow registers
  4849                           pclatu	equ	0xFFB
  4850                           pclath	equ	0xFFA
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           indf0	equ	0xFEF
  4859                           postinc0	equ	0xFEE
  4860                           fsr0h	equ	0xFEA
  4861                           fsr0l	equ	0xFE9
  4862                           wreg	equ	0xFE8
  4863                           indf2	equ	0xFDF
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868                           	psect	intcode_body
  4869  002B6C                     __pintcode_body:
  4870                           	opt stack 21
  4871  002B6C                     int_func:
  4872                           	opt stack 21
  4873  002B6C  0006               	pop		; remove dummy address from shadow register refresh
  4874  002B6E  CFEA F034          	movff	fsr0h,??_ISR+3
  4875  002B72  CFE1 F035          	movff	fsr1l,??_ISR+4
  4876  002B76  CFE2 F036          	movff	fsr1h,??_ISR+5
  4877  002B7A  CFD9 F037          	movff	fsr2l,??_ISR+6
  4878  002B7E  CFDA F038          	movff	fsr2h,??_ISR+7
  4879  002B82  CFF3 F039          	movff	prodl,??_ISR+8
  4880  002B86  CFF4 F03A          	movff	prodh,??_ISR+9
  4881  002B8A  CFF6 F03B          	movff	tblptrl,??_ISR+10
  4882  002B8E  CFF7 F03C          	movff	tblptrh,??_ISR+11
  4883  002B92  CFF8 F03D          	movff	tblptru,??_ISR+12
  4884  002B96  CFF5 F03E          	movff	tablat,??_ISR+13
  4885                           
  4886                           ;SPItest-MASTER.c: 154: if (PIR1bits.RCIF == 1)
  4887  002B9A  AA9E               	btfss	3998,5,c	;volatile
  4888  002B9C  D003               	goto	i2l322
  4889                           
  4890                           ;SPItest-MASTER.c: 155: {
  4891                           ;SPItest-MASTER.c: 156: RCInt();
  4892  002B9E  EC33  F011         	call	_RCInt	;wreg free
  4893  002BA2  D000               	goto	i2l322
  4894  002BA4                     i2l322:
  4895  002BA4  C03E  FFF5         	movff	??_ISR+13,tablat
  4896  002BA8  C03D  FFF8         	movff	??_ISR+12,tblptru
  4897  002BAC  C03C  FFF7         	movff	??_ISR+11,tblptrh
  4898  002BB0  C03B  FFF6         	movff	??_ISR+10,tblptrl
  4899  002BB4  C03A  FFF4         	movff	??_ISR+9,prodh
  4900  002BB8  C039  FFF3         	movff	??_ISR+8,prodl
  4901  002BBC  C038  FFDA         	movff	??_ISR+7,fsr2h
  4902  002BC0  C037  FFD9         	movff	??_ISR+6,fsr2l
  4903  002BC4  C036  FFE2         	movff	??_ISR+5,fsr1h
  4904  002BC8  C035  FFE1         	movff	??_ISR+4,fsr1l
  4905  002BCC  C034  FFEA         	movff	??_ISR+3,fsr0h
  4906  002BD0  C033  FFE9         	movff	??_ISR+2,fsr0l
  4907  002BD4  C032  FFFB         	movff	??_ISR+1,pclatu
  4908  002BD8  C031  FFFA         	movff	??_ISR,pclath
  4909  002BDC  0011               	retfie		f
  4910  002BDE                     __end_of_ISR:
  4911                           	opt stack 0
  4912                           pclatu	equ	0xFFB
  4913                           pclath	equ	0xFFA
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           intcon	equ	0xFF2
  4921                           indf0	equ	0xFEF
  4922                           postinc0	equ	0xFEE
  4923                           fsr0h	equ	0xFEA
  4924                           fsr0l	equ	0xFE9
  4925                           wreg	equ	0xFE8
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function _RCInt *****************
  4934 ;; Defined at:
  4935 ;;		line 19 in file "KeyValue.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  counter         1   47[COMRAM] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;		None               void
  4942 ;; Registers used:
  4943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;Total ram usage:        2 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    4
  4956 ;; This function calls:
  4957 ;;		_keyValue
  4958 ;;		i2_SerTx
  4959 ;; This function is called by:
  4960 ;;		_ISR
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text22
  4965  002266                     __ptext22:
  4966                           	opt stack 0
  4967  002266                     _RCInt:
  4968                           	opt stack 21
  4969                           
  4970                           ;KeyValue.c: 21: unsigned char counter = 0;
  4971                           
  4972                           ;incstack = 0
  4973  002266  0E00               	movlw	0
  4974  002268  6E30               	movwf	RCInt@counter,c
  4975                           
  4976                           ;KeyValue.c: 23: {
  4977                           ;KeyValue.c: 24: while (PIR1bits.RCIF == 0);
  4978                           
  4979                           ;KeyValue.c: 22: do
  4980  00226A  D000               	goto	i2l99
  4981  00226C                     i2l99:
  4982  00226C  AA9E               	btfss	3998,5,c	;volatile
  4983  00226E  D7FE               	goto	i2l99
  4984                           
  4985                           ;KeyValue.c: 25: received[counter] = RCREG;
  4986  002270  5030               	movf	RCInt@counter,w,c
  4987  002272  0D01               	mullw	1
  4988  002274  0EBC               	movlw	low _received
  4989  002276  24F3               	addwf	prodl,w,c
  4990  002278  6ED9               	movwf	fsr2l,c
  4991  00227A  0E00               	movlw	high _received
  4992  00227C  20F4               	addwfc	prodh,w,c
  4993  00227E  6EDA               	movwf	fsr2h,c
  4994  002280  CFAE FFDF          	movff	4014,indf2	;volatile
  4995                           
  4996                           ;KeyValue.c: 26: SerTx(RCREG);
  4997  002284  50AE               	movf	4014,w,c	;volatile
  4998  002286  EC2D  F018         	call	i2_SerTx
  4999                           
  5000                           ;KeyValue.c: 27: if ((received[counter] == 0x08) || received[counter] == 0x7F)
  5001  00228A  5030               	movf	RCInt@counter,w,c
  5002  00228C  0D01               	mullw	1
  5003  00228E  0EBC               	movlw	low _received
  5004  002290  24F3               	addwf	prodl,w,c
  5005  002292  6ED9               	movwf	fsr2l,c
  5006  002294  0E00               	movlw	high _received
  5007  002296  20F4               	addwfc	prodh,w,c
  5008  002298  6EDA               	movwf	fsr2h,c
  5009  00229A  0E08               	movlw	8
  5010  00229C  18DE               	xorwf	postinc2,w,c
  5011  00229E  B4D8               	btfsc	status,2,c
  5012  0022A0  D00C               	goto	i2l3342
  5013  0022A2  5030               	movf	RCInt@counter,w,c
  5014  0022A4  0D01               	mullw	1
  5015  0022A6  0EBC               	movlw	low _received
  5016  0022A8  24F3               	addwf	prodl,w,c
  5017  0022AA  6ED9               	movwf	fsr2l,c
  5018  0022AC  0E00               	movlw	high _received
  5019  0022AE  20F4               	addwfc	prodh,w,c
  5020  0022B0  6EDA               	movwf	fsr2h,c
  5021  0022B2  0E7F               	movlw	127
  5022  0022B4  18DE               	xorwf	postinc2,w,c
  5023  0022B6  A4D8               	btfss	status,2,c
  5024  0022B8  D010               	goto	i2l3348
  5025  0022BA                     i2l3342:
  5026                           
  5027                           ;KeyValue.c: 28: {
  5028                           ;KeyValue.c: 29: if (counter != 0)
  5029  0022BA  5030               	movf	RCInt@counter,w,c
  5030  0022BC  B4D8               	btfsc	status,2,c
  5031  0022BE  D002               	goto	i2l3346
  5032                           
  5033                           ;KeyValue.c: 30: counter--;
  5034  0022C0  0630               	decf	RCInt@counter,f,c
  5035  0022C2  D000               	goto	i2l3346
  5036  0022C4                     i2l3346:
  5037                           
  5038                           ;KeyValue.c: 31: received[counter] = '\0';
  5039  0022C4  5030               	movf	RCInt@counter,w,c
  5040  0022C6  0D01               	mullw	1
  5041  0022C8  0EBC               	movlw	low _received
  5042  0022CA  24F3               	addwf	prodl,w,c
  5043  0022CC  6ED9               	movwf	fsr2l,c
  5044  0022CE  0E00               	movlw	high _received
  5045  0022D0  20F4               	addwfc	prodh,w,c
  5046  0022D2  6EDA               	movwf	fsr2h,c
  5047  0022D4  0E00               	movlw	0
  5048  0022D6  6EDF               	movwf	indf2,c
  5049                           
  5050                           ;KeyValue.c: 32: }
  5051  0022D8  D01A               	goto	i2l3354
  5052  0022DA                     i2l3348:
  5053                           
  5054                           ;KeyValue.c: 33: else if ((received[counter] != 0x08) && (received[counter] != 0x0D))
  5055  0022DA  5030               	movf	RCInt@counter,w,c
  5056  0022DC  0D01               	mullw	1
  5057  0022DE  0EBC               	movlw	low _received
  5058  0022E0  24F3               	addwf	prodl,w,c
  5059  0022E2  6ED9               	movwf	fsr2l,c
  5060  0022E4  0E00               	movlw	high _received
  5061  0022E6  20F4               	addwfc	prodh,w,c
  5062  0022E8  6EDA               	movwf	fsr2h,c
  5063  0022EA  0E08               	movlw	8
  5064  0022EC  18DE               	xorwf	postinc2,w,c
  5065  0022EE  B4D8               	btfsc	status,2,c
  5066  0022F0  D00E               	goto	i2l3354
  5067  0022F2  5030               	movf	RCInt@counter,w,c
  5068  0022F4  0D01               	mullw	1
  5069  0022F6  0EBC               	movlw	low _received
  5070  0022F8  24F3               	addwf	prodl,w,c
  5071  0022FA  6ED9               	movwf	fsr2l,c
  5072  0022FC  0E00               	movlw	high _received
  5073  0022FE  20F4               	addwfc	prodh,w,c
  5074  002300  6EDA               	movwf	fsr2h,c
  5075  002302  0E0D               	movlw	13
  5076  002304  18DE               	xorwf	postinc2,w,c
  5077  002306  B4D8               	btfsc	status,2,c
  5078  002308  D002               	goto	i2l3354
  5079                           
  5080                           ;KeyValue.c: 34: counter++;
  5081  00230A  2A30               	incf	RCInt@counter,f,c
  5082  00230C  D000               	goto	i2l3354
  5083  00230E                     i2l3354:
  5084                           
  5085                           ;KeyValue.c: 35: }
  5086                           ;KeyValue.c: 36: while (RCREG != 0x0D);
  5087  00230E  0E0D               	movlw	13
  5088  002310  18AE               	xorwf	4014,w,c	;volatile
  5089  002312  A4D8               	btfss	status,2,c
  5090  002314  D7AB               	goto	i2l99
  5091                           
  5092                           ;KeyValue.c: 38: SerTx(0x0A);
  5093  002316  0E0A               	movlw	10
  5094  002318  EC2D  F018         	call	i2_SerTx
  5095                           
  5096                           ;KeyValue.c: 39: SerTx(0x0D);
  5097  00231C  0E0D               	movlw	13
  5098  00231E  EC2D  F018         	call	i2_SerTx
  5099                           
  5100                           ;KeyValue.c: 40: keyValue(received, 30);
  5101  002322  0EBC               	movlw	low _received
  5102  002324  6E24               	movwf	keyValue@str,c
  5103  002326  0E00               	movlw	high _received
  5104  002328  6E25               	movwf	keyValue@str+1,c
  5105  00232A  0E00               	movlw	0
  5106  00232C  6E27               	movwf	keyValue@length+1,c
  5107  00232E  0E1E               	movlw	30
  5108  002330  6E26               	movwf	keyValue@length,c
  5109  002332  EC28  F00B         	call	_keyValue	;wreg free
  5110                           
  5111                           ;KeyValue.c: 41: SerTx(0x0A);
  5112  002336  0E0A               	movlw	10
  5113  002338  EC2D  F018         	call	i2_SerTx
  5114                           
  5115                           ;KeyValue.c: 42: SerTx(0x0D);
  5116  00233C  0E0D               	movlw	13
  5117  00233E  EC2D  F018         	call	i2_SerTx
  5118                           
  5119                           ;KeyValue.c: 44: if (StrippedKey == 0x01)
  5120  002342  0452               	decf	_StrippedKey,w,c
  5121  002344  A4D8               	btfss	status,2,c
  5122  002346  D015               	goto	i2l3374
  5123                           
  5124                           ;KeyValue.c: 45: {
  5125                           ;KeyValue.c: 46: if (SetAngle != StrippedValue)
  5126  002348  504B               	movf	_StrippedValue,w,c
  5127  00234A  1848               	xorwf	_SetAngle,w,c
  5128  00234C  E107               	bnz	i2u393_40
  5129  00234E  504C               	movf	_StrippedValue+1,w,c
  5130  002350  1849               	xorwf	_SetAngle+1,w,c
  5131  002352  E104               	bnz	i2u393_40
  5132  002354  504D               	movf	_StrippedValue+2,w,c
  5133  002356  184A               	xorwf	_SetAngle+2,w,c
  5134  002358  B4D8               	btfsc	status,2,c
  5135  00235A  D008               	goto	i2l3372
  5136  00235C                     i2u393_40:
  5137                           
  5138                           ;KeyValue.c: 47: {
  5139                           ;KeyValue.c: 48: SetAngle = StrippedValue;
  5140  00235C  C04B  F048         	movff	_StrippedValue,_SetAngle
  5141  002360  C04C  F049         	movff	_StrippedValue+1,_SetAngle+1
  5142  002364  C04D  F04A         	movff	_StrippedValue+2,_SetAngle+2
  5143                           
  5144                           ;KeyValue.c: 49: PIDEnableFlag = 0x03;
  5145  002368  0E03               	movlw	3
  5146  00236A  D001               	goto	L1
  5147  00236C                     i2l3372:
  5148                           
  5149                           ;KeyValue.c: 51: else
  5150                           ;KeyValue.c: 52: PIDEnableFlag = 0x01;
  5151  00236C  0E01               	movlw	1
  5152  00236E                     L1:
  5153  00236E  6E50               	movwf	_PIDEnableFlag,c
  5154                           
  5155                           ;KeyValue.c: 53: }
  5156  002370  D021               	goto	i2l112
  5157  002372                     i2l3374:
  5158                           
  5159                           ;KeyValue.c: 55: else if (StrippedKey == 0x05)
  5160  002372  0E05               	movlw	5
  5161  002374  1852               	xorwf	_StrippedKey,w,c
  5162  002376  A4D8               	btfss	status,2,c
  5163  002378  D007               	goto	i2l3378
  5164                           
  5165                           ;KeyValue.c: 56: {
  5166                           ;KeyValue.c: 57: Kp = StrippedValue;
  5167  00237A  C04B  F045         	movff	_StrippedValue,_Kp
  5168  00237E  C04C  F046         	movff	_StrippedValue+1,_Kp+1
  5169  002382  C04D  F047         	movff	_StrippedValue+2,_Kp+2
  5170                           
  5171                           ;KeyValue.c: 58: }
  5172  002386  D016               	goto	i2l112
  5173  002388                     i2l3378:
  5174                           
  5175                           ;KeyValue.c: 60: else if (StrippedKey == 0x07)
  5176  002388  0E07               	movlw	7
  5177  00238A  1852               	xorwf	_StrippedKey,w,c
  5178  00238C  A4D8               	btfss	status,2,c
  5179  00238E  D007               	goto	i2l3382
  5180                           
  5181                           ;KeyValue.c: 61: {
  5182                           ;KeyValue.c: 62: Ki = StrippedValue;
  5183  002390  C04B  F042         	movff	_StrippedValue,_Ki
  5184  002394  C04C  F043         	movff	_StrippedValue+1,_Ki+1
  5185  002398  C04D  F044         	movff	_StrippedValue+2,_Ki+2
  5186                           
  5187                           ;KeyValue.c: 63: }
  5188  00239C  D00B               	goto	i2l112
  5189  00239E                     i2l3382:
  5190                           
  5191                           ;KeyValue.c: 65: else if (StrippedKey == 0x09)
  5192  00239E  0E09               	movlw	9
  5193  0023A0  1852               	xorwf	_StrippedKey,w,c
  5194  0023A2  A4D8               	btfss	status,2,c
  5195  0023A4  D007               	goto	i2l112
  5196                           
  5197                           ;KeyValue.c: 66: {
  5198                           ;KeyValue.c: 67: Kd = StrippedValue;
  5199  0023A6  C04B  F03F         	movff	_StrippedValue,_Kd
  5200  0023AA  C04C  F040         	movff	_StrippedValue+1,_Kd+1
  5201  0023AE  C04D  F041         	movff	_StrippedValue+2,_Kd+2
  5202  0023B2  D000               	goto	i2l112
  5203  0023B4                     i2l112:
  5204                           
  5205                           ;KeyValue.c: 68: }
  5206                           ;KeyValue.c: 70: PIR1bits.RCIF = 0;
  5207  0023B4  9A9E               	bcf	3998,5,c	;volatile
  5208  0023B6  0012               	return		;funcret
  5209  0023B8                     __end_of_RCInt:
  5210                           	opt stack 0
  5211                           pclatu	equ	0xFFB
  5212                           pclath	equ	0xFFA
  5213                           tblptru	equ	0xFF8
  5214                           tblptrh	equ	0xFF7
  5215                           tblptrl	equ	0xFF6
  5216                           tablat	equ	0xFF5
  5217                           prodh	equ	0xFF4
  5218                           prodl	equ	0xFF3
  5219                           intcon	equ	0xFF2
  5220                           indf0	equ	0xFEF
  5221                           postinc0	equ	0xFEE
  5222                           fsr0h	equ	0xFEA
  5223                           fsr0l	equ	0xFE9
  5224                           wreg	equ	0xFE8
  5225                           fsr1h	equ	0xFE2
  5226                           fsr1l	equ	0xFE1
  5227                           indf2	equ	0xFDF
  5228                           postinc2	equ	0xFDE
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _keyValue *****************
  5234 ;; Defined at:
  5235 ;;		line 73 in file "KeyValue.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;  str             2   35[COMRAM] PTR unsigned char 
  5238 ;;		 -> received(30), 
  5239 ;;  length          2   37[COMRAM] unsigned short 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;  str_end         2   41[COMRAM] PTR unsigned char 
  5242 ;;		 -> value(10), 
  5243 ;;  x               1   45[COMRAM] unsigned char 
  5244 ;;  y               1   44[COMRAM] unsigned char 
  5245 ;;  flag            1   43[COMRAM] unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;		None               void
  5248 ;; Registers used:
  5249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:       11 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    3
  5262 ;; This function calls:
  5263 ;;		_isspace
  5264 ;;		_strcmp
  5265 ;;		_strtod
  5266 ;;		i2_SerTx
  5267 ;;		i2_SerTxStr
  5268 ;; This function is called by:
  5269 ;;		_RCInt
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text23
  5274  001650                     __ptext23:
  5275                           	opt stack 0
  5276  001650                     _keyValue:
  5277                           	opt stack 21
  5278                           
  5279                           ;KeyValue.c: 75: unsigned char x = 0;
  5280                           
  5281                           ;incstack = 0
  5282  001650  0E00               	movlw	0
  5283  001652  6E2E               	movwf	keyValue@x,c
  5284                           
  5285                           ;KeyValue.c: 76: unsigned char y = 0;
  5286  001654  0E00               	movlw	0
  5287  001656  6E2D               	movwf	keyValue@y,c
  5288  001658  D00F               	goto	i2l3106
  5289  00165A                     i2l3100:
  5290                           
  5291                           ;KeyValue.c: 81: {
  5292                           ;KeyValue.c: 82: x++;
  5293  00165A  2A2E               	incf	keyValue@x,f,c
  5294                           
  5295                           ;KeyValue.c: 83: if (str[x] == '=')
  5296  00165C  502E               	movf	keyValue@x,w,c
  5297  00165E  0D01               	mullw	1
  5298  001660  50F3               	movf	prodl,w,c
  5299  001662  2424               	addwf	keyValue@str,w,c
  5300  001664  6ED9               	movwf	fsr2l,c
  5301  001666  50F4               	movf	prodh,w,c
  5302  001668  2025               	addwfc	keyValue@str+1,w,c
  5303  00166A  6EDA               	movwf	fsr2h,c
  5304  00166C  0E3D               	movlw	61
  5305  00166E  18DE               	xorwf	postinc2,w,c
  5306  001670  A4D8               	btfss	status,2,c
  5307  001672  D002               	goto	i2l3106
  5308                           
  5309                           ;KeyValue.c: 84: {
  5310                           ;KeyValue.c: 85: flag = 1;
  5311  001674  0E01               	movlw	1
  5312  001676  D001               	goto	L3
  5313  001678                     i2l3106:
  5314                           
  5315                           ;KeyValue.c: 87: else
  5316                           ;KeyValue.c: 88: flag = 0;
  5317  001678  0E00               	movlw	0
  5318  00167A                     L3:
  5319  00167A  6E2C               	movwf	keyValue@flag,c
  5320  00167C  D000               	goto	i2l3108
  5321  00167E                     i2l3108:
  5322  00167E  502E               	movf	keyValue@x,w,c
  5323  001680  0D01               	mullw	1
  5324  001682  50F3               	movf	prodl,w,c
  5325  001684  2424               	addwf	keyValue@str,w,c
  5326  001686  6ED9               	movwf	fsr2l,c
  5327  001688  50F4               	movf	prodh,w,c
  5328  00168A  2025               	addwfc	keyValue@str+1,w,c
  5329  00168C  6EDA               	movwf	fsr2h,c
  5330  00168E  0E3D               	movlw	61
  5331  001690  18DE               	xorwf	postinc2,w,c
  5332  001692  B4D8               	btfsc	status,2,c
  5333  001694  D00B               	goto	i2l3112
  5334  001696  502E               	movf	keyValue@x,w,c
  5335  001698  6E28               	movwf	??_keyValue& (0+255),c
  5336  00169A  6A29               	clrf	(??_keyValue+1)& (0+255),c
  5337  00169C  5026               	movf	keyValue@length,w,c
  5338  00169E  5C28               	subwf	??_keyValue,w,c
  5339  0016A0  5027               	movf	keyValue@length+1,w,c
  5340  0016A2  5829               	subwfb	??_keyValue+1,w,c
  5341  0016A4  B0D8               	btfsc	status,0,c
  5342  0016A6  D002               	goto	i2l3112
  5343  0016A8  D7D8               	goto	i2l3100
  5344  0016AA  D000               	goto	i2l3112
  5345  0016AC                     i2l3112:
  5346                           
  5347                           ;KeyValue.c: 89: }
  5348                           ;KeyValue.c: 90: if ((x < length) && flag)
  5349  0016AC  502E               	movf	keyValue@x,w,c
  5350  0016AE  6E28               	movwf	??_keyValue& (0+255),c
  5351  0016B0  6A29               	clrf	(??_keyValue+1)& (0+255),c
  5352  0016B2  5026               	movf	keyValue@length,w,c
  5353  0016B4  5C28               	subwf	??_keyValue,w,c
  5354  0016B6  5027               	movf	keyValue@length+1,w,c
  5355  0016B8  5829               	subwfb	??_keyValue+1,w,c
  5356  0016BA  B0D8               	btfsc	status,0,c
  5357  0016BC  D100               	goto	i2l3178
  5358  0016BE  502C               	movf	keyValue@flag,w,c
  5359  0016C0  B4D8               	btfsc	status,2,c
  5360  0016C2  D0FD               	goto	i2l3178
  5361                           
  5362                           ;KeyValue.c: 91: {
  5363                           ;KeyValue.c: 92: for (y = 0; y < x && y < 5; y++)
  5364  0016C4  0E00               	movlw	0
  5365  0016C6  6E2D               	movwf	keyValue@y,c
  5366  0016C8  D022               	goto	i2l3124
  5367  0016CA                     i2l3118:
  5368                           
  5369                           ;KeyValue.c: 93: {
  5370                           ;KeyValue.c: 94: if (isspace(str[y]) == 0)
  5371  0016CA  502D               	movf	keyValue@y,w,c
  5372  0016CC  0D01               	mullw	1
  5373  0016CE  50F3               	movf	prodl,w,c
  5374  0016D0  2424               	addwf	keyValue@str,w,c
  5375  0016D2  6ED9               	movwf	fsr2l,c
  5376  0016D4  50F4               	movf	prodh,w,c
  5377  0016D6  2025               	addwfc	keyValue@str+1,w,c
  5378  0016D8  6EDA               	movwf	fsr2h,c
  5379  0016DA  50DF               	movf	indf2,w,c
  5380  0016DC  ECAF  F017         	call	_isspace
  5381  0016E0  B0D8               	btfsc	status,0,c
  5382  0016E2  D013               	goto	i2l3122
  5383                           
  5384                           ;KeyValue.c: 95: key[y] = str[y];
  5385  0016E4  502D               	movf	keyValue@y,w,c
  5386  0016E6  0D01               	mullw	1
  5387  0016E8  50F3               	movf	prodl,w,c
  5388  0016EA  2424               	addwf	keyValue@str,w,c
  5389  0016EC  6ED9               	movwf	fsr2l,c
  5390  0016EE  50F4               	movf	prodh,w,c
  5391  0016F0  2025               	addwfc	keyValue@str+1,w,c
  5392  0016F2  6EDA               	movwf	fsr2h,c
  5393  0016F4  502D               	movf	keyValue@y,w,c
  5394  0016F6  0D01               	mullw	1
  5395  0016F8  0E5D               	movlw	low _key
  5396  0016FA  24F3               	addwf	prodl,w,c
  5397  0016FC  6EE1               	movwf	fsr1l,c
  5398  0016FE  0E00               	movlw	high _key
  5399  001700  20F4               	addwfc	prodh,w,c
  5400  001702  6EE2               	movwf	fsr1h,c
  5401  001704  CFDF FFE7          	movff	indf2,indf1
  5402  001708  D000               	goto	i2l3122
  5403  00170A                     i2l3122:
  5404  00170A  2A2D               	incf	keyValue@y,f,c
  5405  00170C  D000               	goto	i2l3124
  5406  00170E                     i2l3124:
  5407  00170E  502E               	movf	keyValue@x,w,c
  5408  001710  5C2D               	subwf	keyValue@y,w,c
  5409  001712  B0D8               	btfsc	status,0,c
  5410  001714  D004               	goto	i2l3128
  5411  001716  0E04               	movlw	4
  5412  001718  642D               	cpfsgt	keyValue@y,c
  5413  00171A  D7D7               	goto	i2l3118
  5414  00171C  D000               	goto	i2l3128
  5415  00171E                     i2l3128:
  5416                           
  5417                           ;KeyValue.c: 96: }
  5418                           ;KeyValue.c: 98: SerTxStr("Key: ");
  5419  00171E  0E30               	movlw	low STR_2
  5420  001720  6E02               	movwf	i2SerTxStr@string,c
  5421  001722  0E10               	movlw	high STR_2
  5422  001724  6E03               	movwf	i2SerTxStr@string+1,c
  5423  001726  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5424                           
  5425                           ;KeyValue.c: 99: SerTxStr(key);
  5426  00172A  0E5D               	movlw	low _key
  5427  00172C  6E02               	movwf	i2SerTxStr@string,c
  5428  00172E  0E00               	movlw	high _key
  5429  001730  6E03               	movwf	i2SerTxStr@string+1,c
  5430  001732  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5431                           
  5432                           ;KeyValue.c: 101: for (y = 0; str[x + 1] != (0); y++)
  5433  001736  0E00               	movlw	0
  5434  001738  6E2D               	movwf	keyValue@y,c
  5435  00173A  D015               	goto	i2l3138
  5436  00173C                     i2l3132:
  5437                           
  5438                           ;KeyValue.c: 102: {
  5439                           ;KeyValue.c: 103: x++;
  5440  00173C  2A2E               	incf	keyValue@x,f,c
  5441                           
  5442                           ;KeyValue.c: 105: value[y] = str[x];
  5443  00173E  502E               	movf	keyValue@x,w,c
  5444  001740  0D01               	mullw	1
  5445  001742  50F3               	movf	prodl,w,c
  5446  001744  2424               	addwf	keyValue@str,w,c
  5447  001746  6ED9               	movwf	fsr2l,c
  5448  001748  50F4               	movf	prodh,w,c
  5449  00174A  2025               	addwfc	keyValue@str+1,w,c
  5450  00174C  6EDA               	movwf	fsr2h,c
  5451  00174E  502D               	movf	keyValue@y,w,c
  5452  001750  0D01               	mullw	1
  5453  001752  0E53               	movlw	low _value
  5454  001754  24F3               	addwf	prodl,w,c
  5455  001756  6EE1               	movwf	fsr1l,c
  5456  001758  0E00               	movlw	high _value
  5457  00175A  20F4               	addwfc	prodh,w,c
  5458  00175C  6EE2               	movwf	fsr1h,c
  5459  00175E  CFDF FFE7          	movff	indf2,indf1
  5460  001762  2A2D               	incf	keyValue@y,f,c
  5461  001764  D000               	goto	i2l3138
  5462  001766                     i2l3138:
  5463  001766  502E               	movf	keyValue@x,w,c
  5464  001768  6E28               	movwf	??_keyValue& (0+255),c
  5465  00176A  6A29               	clrf	(??_keyValue+1)& (0+255),c
  5466  00176C  0E01               	movlw	1
  5467  00176E  2628               	addwf	??_keyValue,f,c
  5468  001770  0E00               	movlw	0
  5469  001772  2229               	addwfc	??_keyValue+1,f,c
  5470  001774  5028               	movf	??_keyValue,w,c
  5471  001776  2424               	addwf	keyValue@str,w,c
  5472  001778  6ED9               	movwf	fsr2l,c
  5473  00177A  5029               	movf	??_keyValue+1,w,c
  5474  00177C  2025               	addwfc	keyValue@str+1,w,c
  5475  00177E  6EDA               	movwf	fsr2h,c
  5476  001780  50DF               	movf	indf2,w,c
  5477  001782  A4D8               	btfss	status,2,c
  5478  001784  D7DB               	goto	i2l3132
  5479                           
  5480                           ;KeyValue.c: 106: }
  5481                           ;KeyValue.c: 107: SerTxStr("   Value: ");
  5482  001786  0E25               	movlw	low STR_3
  5483  001788  6E02               	movwf	i2SerTxStr@string,c
  5484  00178A  0E10               	movlw	high STR_3
  5485  00178C  6E03               	movwf	i2SerTxStr@string+1,c
  5486  00178E  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5487                           
  5488                           ;KeyValue.c: 108: SerTxStr(value);
  5489  001792  0E53               	movlw	low _value
  5490  001794  6E02               	movwf	i2SerTxStr@string,c
  5491  001796  0E00               	movlw	high _value
  5492  001798  6E03               	movwf	i2SerTxStr@string+1,c
  5493  00179A  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5494                           
  5495                           ;KeyValue.c: 110: if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  5496  00179E  0E5D               	movlw	low _key
  5497  0017A0  6E01               	movwf	strcmp@s1,c
  5498  0017A2  0E00               	movlw	high _key
  5499  0017A4  6E02               	movwf	strcmp@s1+1,c
  5500  0017A6  0E3E               	movlw	low STR_4
  5501  0017A8  6E03               	movwf	strcmp@s2,c
  5502  0017AA  0E10               	movlw	high STR_4
  5503  0017AC  6E04               	movwf	strcmp@s2+1,c
  5504  0017AE  EC09  F017         	call	_strcmp	;wreg free
  5505  0017B2  5001               	movf	?_strcmp,w,c
  5506  0017B4  1002               	iorwf	?_strcmp+1,w,c
  5507  0017B6  B4D8               	btfsc	status,2,c
  5508  0017B8  D00E               	goto	i2l3146
  5509  0017BA  0E5D               	movlw	low _key
  5510  0017BC  6E01               	movwf	strcmp@s1,c
  5511  0017BE  0E00               	movlw	high _key
  5512  0017C0  6E02               	movwf	strcmp@s1+1,c
  5513  0017C2  0E46               	movlw	low STR_5
  5514  0017C4  6E03               	movwf	strcmp@s2,c
  5515  0017C6  0E10               	movlw	high STR_5
  5516  0017C8  6E04               	movwf	strcmp@s2+1,c
  5517  0017CA  EC09  F017         	call	_strcmp	;wreg free
  5518  0017CE  5001               	movf	?_strcmp,w,c
  5519  0017D0  1002               	iorwf	?_strcmp+1,w,c
  5520  0017D2  A4D8               	btfss	status,2,c
  5521  0017D4  D006               	goto	i2l3150
  5522  0017D6                     i2l3146:
  5523                           
  5524                           ;KeyValue.c: 111: {
  5525                           ;KeyValue.c: 112: StrippedKey = 0x01;
  5526  0017D6  0E01               	movlw	1
  5527  0017D8  6E52               	movwf	_StrippedKey,c
  5528                           
  5529                           ;KeyValue.c: 113: SerTx(';');
  5530  0017DA  0E3B               	movlw	59
  5531  0017DC  EC2D  F018         	call	i2_SerTx
  5532                           
  5533                           ;KeyValue.c: 114: }
  5534  0017E0  D199               	goto	i2l3250
  5535  0017E2                     i2l3150:
  5536                           
  5537                           ;KeyValue.c: 116: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  5538  0017E2  0E5D               	movlw	low _key
  5539  0017E4  6E01               	movwf	strcmp@s1,c
  5540  0017E6  0E00               	movlw	high _key
  5541  0017E8  6E02               	movwf	strcmp@s1+1,c
  5542  0017EA  0E50               	movlw	low STR_6
  5543  0017EC  6E03               	movwf	strcmp@s2,c
  5544  0017EE  0E10               	movlw	high STR_6
  5545  0017F0  6E04               	movwf	strcmp@s2+1,c
  5546  0017F2  EC09  F017         	call	_strcmp	;wreg free
  5547  0017F6  5001               	movf	?_strcmp,w,c
  5548  0017F8  1002               	iorwf	?_strcmp+1,w,c
  5549  0017FA  B4D8               	btfsc	status,2,c
  5550  0017FC  D00E               	goto	i2l3154
  5551  0017FE  0E5D               	movlw	low _key
  5552  001800  6E01               	movwf	strcmp@s1,c
  5553  001802  0E00               	movlw	high _key
  5554  001804  6E02               	movwf	strcmp@s1+1,c
  5555  001806  0E5C               	movlw	low STR_7
  5556  001808  6E03               	movwf	strcmp@s2,c
  5557  00180A  0E10               	movlw	high STR_7
  5558  00180C  6E04               	movwf	strcmp@s2+1,c
  5559  00180E  EC09  F017         	call	_strcmp	;wreg free
  5560  001812  5001               	movf	?_strcmp,w,c
  5561  001814  1002               	iorwf	?_strcmp+1,w,c
  5562  001816  A4D8               	btfss	status,2,c
  5563  001818  D006               	goto	i2l3158
  5564  00181A                     i2l3154:
  5565                           
  5566                           ;KeyValue.c: 117: {
  5567                           ;KeyValue.c: 118: StrippedKey = 0x05;
  5568  00181A  0E05               	movlw	5
  5569  00181C  6E52               	movwf	_StrippedKey,c
  5570                           
  5571                           ;KeyValue.c: 119: SerTx(';');
  5572  00181E  0E3B               	movlw	59
  5573  001820  EC2D  F018         	call	i2_SerTx
  5574                           
  5575                           ;KeyValue.c: 120: }
  5576  001824  D177               	goto	i2l3250
  5577  001826                     i2l3158:
  5578                           
  5579                           ;KeyValue.c: 122: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  5580  001826  0E5D               	movlw	low _key
  5581  001828  6E01               	movwf	strcmp@s1,c
  5582  00182A  0E00               	movlw	high _key
  5583  00182C  6E02               	movwf	strcmp@s1+1,c
  5584  00182E  0E4D               	movlw	low STR_8
  5585  001830  6E03               	movwf	strcmp@s2,c
  5586  001832  0E10               	movlw	high STR_8
  5587  001834  6E04               	movwf	strcmp@s2+1,c
  5588  001836  EC09  F017         	call	_strcmp	;wreg free
  5589  00183A  5001               	movf	?_strcmp,w,c
  5590  00183C  1002               	iorwf	?_strcmp+1,w,c
  5591  00183E  B4D8               	btfsc	status,2,c
  5592  001840  D00E               	goto	i2l3162
  5593  001842  0E5D               	movlw	low _key
  5594  001844  6E01               	movwf	strcmp@s1,c
  5595  001846  0E00               	movlw	high _key
  5596  001848  6E02               	movwf	strcmp@s1+1,c
  5597  00184A  0E59               	movlw	low STR_9
  5598  00184C  6E03               	movwf	strcmp@s2,c
  5599  00184E  0E10               	movlw	high STR_9
  5600  001850  6E04               	movwf	strcmp@s2+1,c
  5601  001852  EC09  F017         	call	_strcmp	;wreg free
  5602  001856  5001               	movf	?_strcmp,w,c
  5603  001858  1002               	iorwf	?_strcmp+1,w,c
  5604  00185A  A4D8               	btfss	status,2,c
  5605  00185C  D006               	goto	i2l3166
  5606  00185E                     i2l3162:
  5607                           
  5608                           ;KeyValue.c: 123: {
  5609                           ;KeyValue.c: 124: StrippedKey = 0x07;
  5610  00185E  0E07               	movlw	7
  5611  001860  6E52               	movwf	_StrippedKey,c
  5612                           
  5613                           ;KeyValue.c: 125: SerTx(';');
  5614  001862  0E3B               	movlw	59
  5615  001864  EC2D  F018         	call	i2_SerTx
  5616                           
  5617                           ;KeyValue.c: 126: }
  5618  001868  D155               	goto	i2l3250
  5619  00186A                     i2l3166:
  5620                           
  5621                           ;KeyValue.c: 128: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  5622  00186A  0E5D               	movlw	low _key
  5623  00186C  6E01               	movwf	strcmp@s1,c
  5624  00186E  0E00               	movlw	high _key
  5625  001870  6E02               	movwf	strcmp@s1+1,c
  5626  001872  0E4A               	movlw	low STR_10
  5627  001874  6E03               	movwf	strcmp@s2,c
  5628  001876  0E10               	movlw	high STR_10
  5629  001878  6E04               	movwf	strcmp@s2+1,c
  5630  00187A  EC09  F017         	call	_strcmp	;wreg free
  5631  00187E  5001               	movf	?_strcmp,w,c
  5632  001880  1002               	iorwf	?_strcmp+1,w,c
  5633  001882  B4D8               	btfsc	status,2,c
  5634  001884  D00E               	goto	i2l3170
  5635  001886  0E5D               	movlw	low _key
  5636  001888  6E01               	movwf	strcmp@s1,c
  5637  00188A  0E00               	movlw	high _key
  5638  00188C  6E02               	movwf	strcmp@s1+1,c
  5639  00188E  0E56               	movlw	low STR_11
  5640  001890  6E03               	movwf	strcmp@s2,c
  5641  001892  0E10               	movlw	high STR_11
  5642  001894  6E04               	movwf	strcmp@s2+1,c
  5643  001896  EC09  F017         	call	_strcmp	;wreg free
  5644  00189A  5001               	movf	?_strcmp,w,c
  5645  00189C  1002               	iorwf	?_strcmp+1,w,c
  5646  00189E  A4D8               	btfss	status,2,c
  5647  0018A0  D006               	goto	i2l3174
  5648  0018A2                     i2l3170:
  5649                           
  5650                           ;KeyValue.c: 129: {
  5651                           ;KeyValue.c: 130: StrippedKey = 0x09;
  5652  0018A2  0E09               	movlw	9
  5653  0018A4  6E52               	movwf	_StrippedKey,c
  5654                           
  5655                           ;KeyValue.c: 131: SerTx(';');
  5656  0018A6  0E3B               	movlw	59
  5657  0018A8  EC2D  F018         	call	i2_SerTx
  5658                           
  5659                           ;KeyValue.c: 132: }
  5660  0018AC  D133               	goto	i2l3250
  5661  0018AE                     i2l3174:
  5662                           
  5663                           ;KeyValue.c: 134: else
  5664                           ;KeyValue.c: 135: {
  5665                           ;KeyValue.c: 136: SerTxStr("???");
  5666  0018AE  0E36               	movlw	low STR_12
  5667  0018B0  6E02               	movwf	i2SerTxStr@string,c
  5668  0018B2  0E10               	movlw	high STR_12
  5669  0018B4  6E03               	movwf	i2SerTxStr@string+1,c
  5670  0018B6  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5671  0018BA  D129               	goto	i2l3248
  5672                           
  5673                           ;KeyValue.c: 138: }
  5674                           ;KeyValue.c: 139: }
  5675                           
  5676                           ;KeyValue.c: 137: StrippedKey = 0;
  5677  0018BC  D12B               	goto	i2l3250
  5678  0018BE                     i2l3178:
  5679                           
  5680                           ;KeyValue.c: 141: else if (flag == 0)
  5681  0018BE  502C               	movf	keyValue@flag,w,c
  5682  0018C0  A4D8               	btfss	status,2,c
  5683  0018C2  D128               	goto	i2l3250
  5684                           
  5685                           ;KeyValue.c: 142: {
  5686                           ;KeyValue.c: 143: y = 0;
  5687  0018C4  0E00               	movlw	0
  5688  0018C6  6E2D               	movwf	keyValue@y,c
  5689                           
  5690                           ;KeyValue.c: 144: while (str[y] != 0x0D)
  5691  0018C8  D014               	goto	i2l3186
  5692  0018CA                     i2l3182:
  5693                           
  5694                           ;KeyValue.c: 145: {
  5695                           ;KeyValue.c: 147: key[y] = str[y];
  5696  0018CA  502D               	movf	keyValue@y,w,c
  5697  0018CC  0D01               	mullw	1
  5698  0018CE  50F3               	movf	prodl,w,c
  5699  0018D0  2424               	addwf	keyValue@str,w,c
  5700  0018D2  6ED9               	movwf	fsr2l,c
  5701  0018D4  50F4               	movf	prodh,w,c
  5702  0018D6  2025               	addwfc	keyValue@str+1,w,c
  5703  0018D8  6EDA               	movwf	fsr2h,c
  5704  0018DA  502D               	movf	keyValue@y,w,c
  5705  0018DC  0D01               	mullw	1
  5706  0018DE  0E5D               	movlw	low _key
  5707  0018E0  24F3               	addwf	prodl,w,c
  5708  0018E2  6EE1               	movwf	fsr1l,c
  5709  0018E4  0E00               	movlw	high _key
  5710  0018E6  20F4               	addwfc	prodh,w,c
  5711  0018E8  6EE2               	movwf	fsr1h,c
  5712  0018EA  CFDF FFE7          	movff	indf2,indf1
  5713                           
  5714                           ;KeyValue.c: 148: y++;
  5715  0018EE  2A2D               	incf	keyValue@y,f,c
  5716  0018F0  D000               	goto	i2l3186
  5717  0018F2                     i2l3186:
  5718  0018F2  502D               	movf	keyValue@y,w,c
  5719  0018F4  0D01               	mullw	1
  5720  0018F6  50F3               	movf	prodl,w,c
  5721  0018F8  2424               	addwf	keyValue@str,w,c
  5722  0018FA  6ED9               	movwf	fsr2l,c
  5723  0018FC  50F4               	movf	prodh,w,c
  5724  0018FE  2025               	addwfc	keyValue@str+1,w,c
  5725  001900  6EDA               	movwf	fsr2h,c
  5726  001902  0E0D               	movlw	13
  5727  001904  18DE               	xorwf	postinc2,w,c
  5728  001906  A4D8               	btfss	status,2,c
  5729  001908  D7E0               	goto	i2l3182
  5730                           
  5731                           ;KeyValue.c: 149: }
  5732                           ;KeyValue.c: 151: SerTxStr("Key: ");
  5733  00190A  0E30               	movlw	low STR_2
  5734  00190C  6E02               	movwf	i2SerTxStr@string,c
  5735  00190E  0E10               	movlw	high STR_2
  5736  001910  6E03               	movwf	i2SerTxStr@string+1,c
  5737  001912  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5738                           
  5739                           ;KeyValue.c: 152: SerTxStr(key);
  5740  001916  0E5D               	movlw	low _key
  5741  001918  6E02               	movwf	i2SerTxStr@string,c
  5742  00191A  0E00               	movlw	high _key
  5743  00191C  6E03               	movwf	i2SerTxStr@string+1,c
  5744  00191E  ECDD  F016         	call	i2_SerTxStr	;wreg free
  5745                           
  5746                           ;KeyValue.c: 154: if ((strcmp(key, "AZ") == 0) || (strcmp(key, "az") == 0))
  5747  001922  0E5D               	movlw	low _key
  5748  001924  6E01               	movwf	strcmp@s1,c
  5749  001926  0E00               	movlw	high _key
  5750  001928  6E02               	movwf	strcmp@s1+1,c
  5751  00192A  0E53               	movlw	low STR_14
  5752  00192C  6E03               	movwf	strcmp@s2,c
  5753  00192E  0E10               	movlw	high STR_14
  5754  001930  6E04               	movwf	strcmp@s2+1,c
  5755  001932  EC09  F017         	call	_strcmp	;wreg free
  5756  001936  5001               	movf	?_strcmp,w,c
  5757  001938  1002               	iorwf	?_strcmp+1,w,c
  5758  00193A  B4D8               	btfsc	status,2,c
  5759  00193C  D00E               	goto	i2l3194
  5760  00193E  0E5D               	movlw	low _key
  5761  001940  6E01               	movwf	strcmp@s1,c
  5762  001942  0E00               	movlw	high _key
  5763  001944  6E02               	movwf	strcmp@s1+1,c
  5764  001946  0E5F               	movlw	low STR_15
  5765  001948  6E03               	movwf	strcmp@s2,c
  5766  00194A  0E10               	movlw	high STR_15
  5767  00194C  6E04               	movwf	strcmp@s2+1,c
  5768  00194E  EC09  F017         	call	_strcmp	;wreg free
  5769  001952  5001               	movf	?_strcmp,w,c
  5770  001954  1002               	iorwf	?_strcmp+1,w,c
  5771  001956  A4D8               	btfss	status,2,c
  5772  001958  D007               	goto	i2l3198
  5773  00195A                     i2l3194:
  5774                           
  5775                           ;KeyValue.c: 155: {
  5776                           ;KeyValue.c: 156: AZEL = 1;
  5777  00195A  0E01               	movlw	1
  5778  00195C  0100               	movlb	0	; () banked
  5779  00195E  6FDE               	movwf	_AZEL& (0+255),b
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;KeyValue.c: 157: SerTx(';');
  5783  001960  0E3B               	movlw	59
  5784  001962  EC2D  F018         	call	i2_SerTx
  5785                           
  5786                           ;KeyValue.c: 158: }
  5787  001966  D0D6               	goto	i2l3250
  5788  001968                     i2l3198:
  5789                           
  5790                           ;KeyValue.c: 160: else if ((strcmp(key, "EL") == 0) || (strcmp(key, "el") == 0))
  5791  001968  0E5D               	movlw	low _key
  5792  00196A  6E01               	movwf	strcmp@s1,c
  5793  00196C  0E00               	movlw	high _key
  5794  00196E  6E02               	movwf	strcmp@s1+1,c
  5795  001970  0E3B               	movlw	low (STR_20+1)
  5796  001972  6E03               	movwf	strcmp@s2,c
  5797  001974  0E10               	movlw	high (STR_20+1)
  5798  001976  6E04               	movwf	strcmp@s2+1,c
  5799  001978  EC09  F017         	call	_strcmp	;wreg free
  5800  00197C  5001               	movf	?_strcmp,w,c
  5801  00197E  1002               	iorwf	?_strcmp+1,w,c
  5802  001980  B4D8               	btfsc	status,2,c
  5803  001982  D00E               	goto	i2l3202
  5804  001984  0E5D               	movlw	low _key
  5805  001986  6E01               	movwf	strcmp@s1,c
  5806  001988  0E00               	movlw	high _key
  5807  00198A  6E02               	movwf	strcmp@s1+1,c
  5808  00198C  0E43               	movlw	low (STR_21+1)
  5809  00198E  6E03               	movwf	strcmp@s2,c
  5810  001990  0E10               	movlw	high (STR_21+1)
  5811  001992  6E04               	movwf	strcmp@s2+1,c
  5812  001994  EC09  F017         	call	_strcmp	;wreg free
  5813  001998  5001               	movf	?_strcmp,w,c
  5814  00199A  1002               	iorwf	?_strcmp+1,w,c
  5815  00199C  A4D8               	btfss	status,2,c
  5816  00199E  D007               	goto	i2l3206
  5817  0019A0                     i2l3202:
  5818                           
  5819                           ;KeyValue.c: 161: {
  5820                           ;KeyValue.c: 162: AZEL = 2;
  5821  0019A0  0E02               	movlw	2
  5822  0019A2  0100               	movlb	0	; () banked
  5823  0019A4  6FDE               	movwf	_AZEL& (0+255),b
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;KeyValue.c: 163: SerTx(';');
  5827  0019A6  0E3B               	movlw	59
  5828  0019A8  EC2D  F018         	call	i2_SerTx
  5829                           
  5830                           ;KeyValue.c: 164: }
  5831  0019AC  D0B3               	goto	i2l3250
  5832  0019AE                     i2l3206:
  5833                           
  5834                           ;KeyValue.c: 166: else if ((strcmp(key, "POS") == 0) || (strcmp(key, "pos") == 0))
  5835  0019AE  0E5D               	movlw	low _key
  5836  0019B0  6E01               	movwf	strcmp@s1,c
  5837  0019B2  0E00               	movlw	high _key
  5838  0019B4  6E02               	movwf	strcmp@s1+1,c
  5839  0019B6  0E3E               	movlw	low STR_4
  5840  0019B8  6E03               	movwf	strcmp@s2,c
  5841  0019BA  0E10               	movlw	high STR_4
  5842  0019BC  6E04               	movwf	strcmp@s2+1,c
  5843  0019BE  EC09  F017         	call	_strcmp	;wreg free
  5844  0019C2  5001               	movf	?_strcmp,w,c
  5845  0019C4  1002               	iorwf	?_strcmp+1,w,c
  5846  0019C6  B4D8               	btfsc	status,2,c
  5847  0019C8  D00E               	goto	i2l3210
  5848  0019CA  0E5D               	movlw	low _key
  5849  0019CC  6E01               	movwf	strcmp@s1,c
  5850  0019CE  0E00               	movlw	high _key
  5851  0019D0  6E02               	movwf	strcmp@s1+1,c
  5852  0019D2  0E46               	movlw	low STR_5
  5853  0019D4  6E03               	movwf	strcmp@s2,c
  5854  0019D6  0E10               	movlw	high STR_5
  5855  0019D8  6E04               	movwf	strcmp@s2+1,c
  5856  0019DA  EC09  F017         	call	_strcmp	;wreg free
  5857  0019DE  5001               	movf	?_strcmp,w,c
  5858  0019E0  1002               	iorwf	?_strcmp+1,w,c
  5859  0019E2  A4D8               	btfss	status,2,c
  5860  0019E4  D006               	goto	i2l3214
  5861  0019E6                     i2l3210:
  5862                           
  5863                           ;KeyValue.c: 167: {
  5864                           ;KeyValue.c: 168: StrippedKey = 0x02;
  5865  0019E6  0E02               	movlw	2
  5866  0019E8  6E52               	movwf	_StrippedKey,c
  5867                           
  5868                           ;KeyValue.c: 169: SerTx(';');
  5869  0019EA  0E3B               	movlw	59
  5870  0019EC  EC2D  F018         	call	i2_SerTx
  5871                           
  5872                           ;KeyValue.c: 170: }
  5873  0019F0  D091               	goto	i2l3250
  5874  0019F2                     i2l3214:
  5875                           
  5876                           ;KeyValue.c: 172: else if ((strcmp(key, "VEL") == 0) || (strcmp(key, "vel") == 0))
  5877  0019F2  0E5D               	movlw	low _key
  5878  0019F4  6E01               	movwf	strcmp@s1,c
  5879  0019F6  0E00               	movlw	high _key
  5880  0019F8  6E02               	movwf	strcmp@s1+1,c
  5881  0019FA  0E3A               	movlw	low STR_20
  5882  0019FC  6E03               	movwf	strcmp@s2,c
  5883  0019FE  0E10               	movlw	high STR_20
  5884  001A00  6E04               	movwf	strcmp@s2+1,c
  5885  001A02  EC09  F017         	call	_strcmp	;wreg free
  5886  001A06  5001               	movf	?_strcmp,w,c
  5887  001A08  1002               	iorwf	?_strcmp+1,w,c
  5888  001A0A  B4D8               	btfsc	status,2,c
  5889  001A0C  D00E               	goto	i2l3218
  5890  001A0E  0E5D               	movlw	low _key
  5891  001A10  6E01               	movwf	strcmp@s1,c
  5892  001A12  0E00               	movlw	high _key
  5893  001A14  6E02               	movwf	strcmp@s1+1,c
  5894  001A16  0E42               	movlw	low STR_21
  5895  001A18  6E03               	movwf	strcmp@s2,c
  5896  001A1A  0E10               	movlw	high STR_21
  5897  001A1C  6E04               	movwf	strcmp@s2+1,c
  5898  001A1E  EC09  F017         	call	_strcmp	;wreg free
  5899  001A22  5001               	movf	?_strcmp,w,c
  5900  001A24  1002               	iorwf	?_strcmp+1,w,c
  5901  001A26  A4D8               	btfss	status,2,c
  5902  001A28  D006               	goto	i2l3222
  5903  001A2A                     i2l3218:
  5904                           
  5905                           ;KeyValue.c: 173: {
  5906                           ;KeyValue.c: 174: StrippedKey = 0x03;
  5907  001A2A  0E03               	movlw	3
  5908  001A2C  6E52               	movwf	_StrippedKey,c
  5909                           
  5910                           ;KeyValue.c: 175: SerTx(';');
  5911  001A2E  0E3B               	movlw	59
  5912  001A30  EC2D  F018         	call	i2_SerTx
  5913                           
  5914                           ;KeyValue.c: 176: }
  5915  001A34  D06F               	goto	i2l3250
  5916  001A36                     i2l3222:
  5917                           
  5918                           ;KeyValue.c: 178: else if ((strcmp(key, "KP") == 0) || (strcmp(key, "kp") == 0))
  5919  001A36  0E5D               	movlw	low _key
  5920  001A38  6E01               	movwf	strcmp@s1,c
  5921  001A3A  0E00               	movlw	high _key
  5922  001A3C  6E02               	movwf	strcmp@s1+1,c
  5923  001A3E  0E50               	movlw	low STR_6
  5924  001A40  6E03               	movwf	strcmp@s2,c
  5925  001A42  0E10               	movlw	high STR_6
  5926  001A44  6E04               	movwf	strcmp@s2+1,c
  5927  001A46  EC09  F017         	call	_strcmp	;wreg free
  5928  001A4A  5001               	movf	?_strcmp,w,c
  5929  001A4C  1002               	iorwf	?_strcmp+1,w,c
  5930  001A4E  B4D8               	btfsc	status,2,c
  5931  001A50  D00E               	goto	i2l3226
  5932  001A52  0E5D               	movlw	low _key
  5933  001A54  6E01               	movwf	strcmp@s1,c
  5934  001A56  0E00               	movlw	high _key
  5935  001A58  6E02               	movwf	strcmp@s1+1,c
  5936  001A5A  0E5C               	movlw	low STR_7
  5937  001A5C  6E03               	movwf	strcmp@s2,c
  5938  001A5E  0E10               	movlw	high STR_7
  5939  001A60  6E04               	movwf	strcmp@s2+1,c
  5940  001A62  EC09  F017         	call	_strcmp	;wreg free
  5941  001A66  5001               	movf	?_strcmp,w,c
  5942  001A68  1002               	iorwf	?_strcmp+1,w,c
  5943  001A6A  A4D8               	btfss	status,2,c
  5944  001A6C  D006               	goto	i2l3230
  5945  001A6E                     i2l3226:
  5946                           
  5947                           ;KeyValue.c: 179: {
  5948                           ;KeyValue.c: 180: StrippedKey = 0x04;
  5949  001A6E  0E04               	movlw	4
  5950  001A70  6E52               	movwf	_StrippedKey,c
  5951                           
  5952                           ;KeyValue.c: 181: SerTx(';');
  5953  001A72  0E3B               	movlw	59
  5954  001A74  EC2D  F018         	call	i2_SerTx
  5955                           
  5956                           ;KeyValue.c: 182: }
  5957  001A78  D04D               	goto	i2l3250
  5958  001A7A                     i2l3230:
  5959                           
  5960                           ;KeyValue.c: 184: else if ((strcmp(key, "KI") == 0) || (strcmp(key, "ki") == 0))
  5961  001A7A  0E5D               	movlw	low _key
  5962  001A7C  6E01               	movwf	strcmp@s1,c
  5963  001A7E  0E00               	movlw	high _key
  5964  001A80  6E02               	movwf	strcmp@s1+1,c
  5965  001A82  0E4D               	movlw	low STR_8
  5966  001A84  6E03               	movwf	strcmp@s2,c
  5967  001A86  0E10               	movlw	high STR_8
  5968  001A88  6E04               	movwf	strcmp@s2+1,c
  5969  001A8A  EC09  F017         	call	_strcmp	;wreg free
  5970  001A8E  5001               	movf	?_strcmp,w,c
  5971  001A90  1002               	iorwf	?_strcmp+1,w,c
  5972  001A92  B4D8               	btfsc	status,2,c
  5973  001A94  D00E               	goto	i2l3234
  5974  001A96  0E5D               	movlw	low _key
  5975  001A98  6E01               	movwf	strcmp@s1,c
  5976  001A9A  0E00               	movlw	high _key
  5977  001A9C  6E02               	movwf	strcmp@s1+1,c
  5978  001A9E  0E59               	movlw	low STR_9
  5979  001AA0  6E03               	movwf	strcmp@s2,c
  5980  001AA2  0E10               	movlw	high STR_9
  5981  001AA4  6E04               	movwf	strcmp@s2+1,c
  5982  001AA6  EC09  F017         	call	_strcmp	;wreg free
  5983  001AAA  5001               	movf	?_strcmp,w,c
  5984  001AAC  1002               	iorwf	?_strcmp+1,w,c
  5985  001AAE  A4D8               	btfss	status,2,c
  5986  001AB0  D006               	goto	i2l3238
  5987  001AB2                     i2l3234:
  5988                           
  5989                           ;KeyValue.c: 185: {
  5990                           ;KeyValue.c: 186: StrippedKey = 0x06;
  5991  001AB2  0E06               	movlw	6
  5992  001AB4  6E52               	movwf	_StrippedKey,c
  5993                           
  5994                           ;KeyValue.c: 187: SerTx(';');
  5995  001AB6  0E3B               	movlw	59
  5996  001AB8  EC2D  F018         	call	i2_SerTx
  5997                           
  5998                           ;KeyValue.c: 188: }
  5999  001ABC  D02B               	goto	i2l3250
  6000  001ABE                     i2l3238:
  6001                           
  6002                           ;KeyValue.c: 190: else if ((strcmp(key, "KD") == 0) || (strcmp(key, "kd") == 0))
  6003  001ABE  0E5D               	movlw	low _key
  6004  001AC0  6E01               	movwf	strcmp@s1,c
  6005  001AC2  0E00               	movlw	high _key
  6006  001AC4  6E02               	movwf	strcmp@s1+1,c
  6007  001AC6  0E4A               	movlw	low STR_10
  6008  001AC8  6E03               	movwf	strcmp@s2,c
  6009  001ACA  0E10               	movlw	high STR_10
  6010  001ACC  6E04               	movwf	strcmp@s2+1,c
  6011  001ACE  EC09  F017         	call	_strcmp	;wreg free
  6012  001AD2  5001               	movf	?_strcmp,w,c
  6013  001AD4  1002               	iorwf	?_strcmp+1,w,c
  6014  001AD6  B4D8               	btfsc	status,2,c
  6015  001AD8  D00E               	goto	i2l3242
  6016  001ADA  0E5D               	movlw	low _key
  6017  001ADC  6E01               	movwf	strcmp@s1,c
  6018  001ADE  0E00               	movlw	high _key
  6019  001AE0  6E02               	movwf	strcmp@s1+1,c
  6020  001AE2  0E56               	movlw	low STR_11
  6021  001AE4  6E03               	movwf	strcmp@s2,c
  6022  001AE6  0E10               	movlw	high STR_11
  6023  001AE8  6E04               	movwf	strcmp@s2+1,c
  6024  001AEA  EC09  F017         	call	_strcmp	;wreg free
  6025  001AEE  5001               	movf	?_strcmp,w,c
  6026  001AF0  1002               	iorwf	?_strcmp+1,w,c
  6027  001AF2  A4D8               	btfss	status,2,c
  6028  001AF4  D006               	goto	i2l3246
  6029  001AF6                     i2l3242:
  6030                           
  6031                           ;KeyValue.c: 191: {
  6032                           ;KeyValue.c: 192: StrippedKey = 0x08;
  6033  001AF6  0E08               	movlw	8
  6034  001AF8  6E52               	movwf	_StrippedKey,c
  6035                           
  6036                           ;KeyValue.c: 193: SerTx(';');
  6037  001AFA  0E3B               	movlw	59
  6038  001AFC  EC2D  F018         	call	i2_SerTx
  6039                           
  6040                           ;KeyValue.c: 194: }
  6041  001B00  D009               	goto	i2l3250
  6042  001B02                     i2l3246:
  6043                           
  6044                           ;KeyValue.c: 196: else
  6045                           ;KeyValue.c: 197: {
  6046                           ;KeyValue.c: 198: SerTxStr("???");
  6047  001B02  0E36               	movlw	low STR_12
  6048  001B04  6E02               	movwf	i2SerTxStr@string,c
  6049  001B06  0E10               	movlw	high STR_12
  6050  001B08  6E03               	movwf	i2SerTxStr@string+1,c
  6051  001B0A  ECDD  F016         	call	i2_SerTxStr	;wreg free
  6052  001B0E                     i2l3248:
  6053                           
  6054                           ;KeyValue.c: 199: StrippedKey = 0;
  6055  001B0E  0E00               	movlw	0
  6056  001B10  6E52               	movwf	_StrippedKey,c
  6057  001B12  D000               	goto	i2l3250
  6058  001B14                     i2l3250:
  6059                           
  6060                           ;KeyValue.c: 200: }
  6061                           ;KeyValue.c: 201: }
  6062                           ;KeyValue.c: 203: StrippedValue = strtod(value, &str_end);
  6063  001B14  0E53               	movlw	low _value
  6064  001B16  6E18               	movwf	strtod@s,c
  6065  001B18  0E00               	movlw	high _value
  6066  001B1A  6E19               	movwf	strtod@s+1,c
  6067  001B1C  0E2A               	movlw	low keyValue@str_end
  6068  001B1E  6E1A               	movwf	strtod@res,c
  6069  001B20  0E00               	movlw	high keyValue@str_end
  6070  001B22  6E1B               	movwf	strtod@res+1,c
  6071  001B24  ECD6  F00D         	call	_strtod	;wreg free
  6072  001B28  C018  F04B         	movff	?_strtod,_StrippedValue
  6073  001B2C  C019  F04C         	movff	?_strtod+1,_StrippedValue+1
  6074  001B30  C01A  F04D         	movff	?_strtod+2,_StrippedValue+2
  6075                           
  6076                           ;KeyValue.c: 207: for (x = 0; x < 5; x++)
  6077  001B34  0E00               	movlw	0
  6078  001B36  6E2E               	movwf	keyValue@x,c
  6079  001B38                     i2l3254:
  6080  001B38  0E04               	movlw	4
  6081  001B3A  642E               	cpfsgt	keyValue@x,c
  6082  001B3C  D001               	goto	i2l3258
  6083  001B3E  D00C               	goto	i2l3264
  6084  001B40                     i2l3258:
  6085                           
  6086                           ;KeyValue.c: 208: {
  6087                           ;KeyValue.c: 209: key[x] = (0);
  6088  001B40  502E               	movf	keyValue@x,w,c
  6089  001B42  0D01               	mullw	1
  6090  001B44  0E5D               	movlw	low _key
  6091  001B46  24F3               	addwf	prodl,w,c
  6092  001B48  6ED9               	movwf	fsr2l,c
  6093  001B4A  0E00               	movlw	high _key
  6094  001B4C  20F4               	addwfc	prodh,w,c
  6095  001B4E  6EDA               	movwf	fsr2h,c
  6096  001B50  0E00               	movlw	0
  6097  001B52  6EDF               	movwf	indf2,c
  6098  001B54  2A2E               	incf	keyValue@x,f,c
  6099  001B56  D7F0               	goto	i2l3254
  6100  001B58                     i2l3264:
  6101                           
  6102                           ;KeyValue.c: 210: }
  6103                           ;KeyValue.c: 212: for (x = 0; x < 10; x++)
  6104  001B58  0E00               	movlw	0
  6105  001B5A  6E2E               	movwf	keyValue@x,c
  6106  001B5C                     i2l3266:
  6107  001B5C  0E09               	movlw	9
  6108  001B5E  642E               	cpfsgt	keyValue@x,c
  6109  001B60  D001               	goto	i2l3270
  6110  001B62  D00C               	goto	i2l3276
  6111  001B64                     i2l3270:
  6112                           
  6113                           ;KeyValue.c: 213: {
  6114                           ;KeyValue.c: 214: value[x] = (0);
  6115  001B64  502E               	movf	keyValue@x,w,c
  6116  001B66  0D01               	mullw	1
  6117  001B68  0E53               	movlw	low _value
  6118  001B6A  24F3               	addwf	prodl,w,c
  6119  001B6C  6ED9               	movwf	fsr2l,c
  6120  001B6E  0E00               	movlw	high _value
  6121  001B70  20F4               	addwfc	prodh,w,c
  6122  001B72  6EDA               	movwf	fsr2h,c
  6123  001B74  0E00               	movlw	0
  6124  001B76  6EDF               	movwf	indf2,c
  6125  001B78  2A2E               	incf	keyValue@x,f,c
  6126  001B7A  D7F0               	goto	i2l3266
  6127  001B7C                     i2l3276:
  6128                           
  6129                           ;KeyValue.c: 215: }
  6130                           ;KeyValue.c: 217: for (x = 0; x < 30; x++)
  6131  001B7C  0E00               	movlw	0
  6132  001B7E  6E2E               	movwf	keyValue@x,c
  6133  001B80                     i2l3278:
  6134  001B80  0E1D               	movlw	29
  6135  001B82  642E               	cpfsgt	keyValue@x,c
  6136  001B84  D001               	goto	i2l3282
  6137  001B86  D00C               	goto	i2l3288
  6138  001B88                     i2l3282:
  6139                           
  6140                           ;KeyValue.c: 218: {
  6141                           ;KeyValue.c: 219: received[x] = (0);
  6142  001B88  502E               	movf	keyValue@x,w,c
  6143  001B8A  0D01               	mullw	1
  6144  001B8C  0EBC               	movlw	low _received
  6145  001B8E  24F3               	addwf	prodl,w,c
  6146  001B90  6ED9               	movwf	fsr2l,c
  6147  001B92  0E00               	movlw	high _received
  6148  001B94  20F4               	addwfc	prodh,w,c
  6149  001B96  6EDA               	movwf	fsr2h,c
  6150  001B98  0E00               	movlw	0
  6151  001B9A  6EDF               	movwf	indf2,c
  6152  001B9C  2A2E               	incf	keyValue@x,f,c
  6153  001B9E  D7F0               	goto	i2l3278
  6154  001BA0                     i2l3288:
  6155                           
  6156                           ;KeyValue.c: 220: }
  6157                           ;KeyValue.c: 221: flag = 0;
  6158  001BA0  0E00               	movlw	0
  6159  001BA2  6E2C               	movwf	keyValue@flag,c
  6160                           
  6161                           ;KeyValue.c: 222: RCflag = 1;
  6162  001BA4  0E01               	movlw	1
  6163  001BA6  0100               	movlb	0	; () banked
  6164  001BA8  6FBB               	movwf	_RCflag& (0+255),b
  6165                           
  6166                           ; BSR set to: 0
  6167  001BAA  0012               	return		;funcret
  6168  001BAC                     __end_of_keyValue:
  6169                           	opt stack 0
  6170                           pclatu	equ	0xFFB
  6171                           pclath	equ	0xFFA
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           indf0	equ	0xFEF
  6180                           postinc0	equ	0xFEE
  6181                           fsr0h	equ	0xFEA
  6182                           fsr0l	equ	0xFE9
  6183                           wreg	equ	0xFE8
  6184                           indf1	equ	0xFE7
  6185                           fsr1h	equ	0xFE2
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           fsr2h	equ	0xFDA
  6190                           fsr2l	equ	0xFD9
  6191                           status	equ	0xFD8
  6192                           
  6193 ;; *************** function i2_SerTxStr *****************
  6194 ;; Defined at:
  6195 ;;		line 50 in file "SerComm.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;  string          2    1[COMRAM] PTR unsigned char 
  6198 ;;		 -> STR_28(4), STR_13(6), STR_12(4), STR_3(11), 
  6199 ;;		 -> value(10), STR_2(6), key(5), STR_1(36), 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;		None               void
  6204 ;; Registers used:
  6205 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6211 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    1
  6218 ;; This function calls:
  6219 ;;		i2_SerTx
  6220 ;; This function is called by:
  6221 ;;		_keyValue
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text24
  6226  002DBA                     __ptext24:
  6227                           	opt stack 0
  6228  002DBA                     i2_SerTxStr:
  6229                           	opt stack 22
  6230                           
  6231                           ;SerComm.c: 52: while (*string)
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;incstack = 0
  6235  002DBA  D016               	goto	i2l3062
  6236  002DBC                     i2l3058:
  6237                           
  6238                           ;SerComm.c: 53: SerTx(*string++);
  6239  002DBC  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  6240  002DC0  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  6241  002DC4  0E00               	movlw	low (__smallconst shr (0+16))
  6242  002DC6  6EF8               	movwf	tblptru,c
  6243  002DC8  0E0F               	movlw	(high __ramtop+-1)
  6244  002DCA  64F7               	cpfsgt	tblptrh,c
  6245  002DCC  D003               	bra	i2u338_47
  6246  002DCE  0008               	tblrd		*
  6247  002DD0  50F5               	movf	tablat,w,c
  6248  002DD2  D005               	bra	i2u338_40
  6249  002DD4                     i2u338_47:
  6250  002DD4  CFF6 FFE9          	movff	tblptrl,fsr0l
  6251  002DD8  CFF7 FFEA          	movff	tblptrh,fsr0h
  6252  002DDC  50EF               	movf	indf0,w,c
  6253  002DDE                     i2u338_40:
  6254  002DDE  EC2D  F018         	call	i2_SerTx
  6255  002DE2  4A02               	infsnz	i2SerTxStr@string,f,c
  6256  002DE4  2A03               	incf	i2SerTxStr@string+1,f,c
  6257  002DE6  D000               	goto	i2l3062
  6258  002DE8                     i2l3062:
  6259  002DE8  C002  FFF6         	movff	i2SerTxStr@string,tblptrl
  6260  002DEC  C003  FFF7         	movff	i2SerTxStr@string+1,tblptrh
  6261  002DF0  0E00               	movlw	low (__smallconst shr (0+16))
  6262  002DF2  6EF8               	movwf	tblptru,c
  6263  002DF4  0E0F               	movlw	(high __ramtop+-1)
  6264  002DF6  64F7               	cpfsgt	tblptrh,c
  6265  002DF8  D003               	bra	i2u339_47
  6266  002DFA  0008               	tblrd		*
  6267  002DFC  50F5               	movf	tablat,w,c
  6268  002DFE  D005               	bra	i2u339_40
  6269  002E00                     i2u339_47:
  6270  002E00  CFF6 FFE9          	movff	tblptrl,fsr0l
  6271  002E04  CFF7 FFEA          	movff	tblptrh,fsr0h
  6272  002E08  50EF               	movf	indf0,w,c
  6273  002E0A                     i2u339_40:
  6274  002E0A  0900               	iorlw	0
  6275  002E0C  A4D8               	btfss	status,2,c
  6276  002E0E  D7D6               	goto	i2l3058
  6277  002E10  0012               	return		;funcret
  6278  002E12                     __end_ofi2_SerTxStr:
  6279                           	opt stack 0
  6280                           pclatu	equ	0xFFB
  6281                           pclath	equ	0xFFA
  6282                           tblptru	equ	0xFF8
  6283                           tblptrh	equ	0xFF7
  6284                           tblptrl	equ	0xFF6
  6285                           tablat	equ	0xFF5
  6286                           prodh	equ	0xFF4
  6287                           prodl	equ	0xFF3
  6288                           intcon	equ	0xFF2
  6289                           indf0	equ	0xFEF
  6290                           postinc0	equ	0xFEE
  6291                           fsr0h	equ	0xFEA
  6292                           fsr0l	equ	0xFE9
  6293                           wreg	equ	0xFE8
  6294                           indf1	equ	0xFE7
  6295                           fsr1h	equ	0xFE2
  6296                           fsr1l	equ	0xFE1
  6297                           indf2	equ	0xFDF
  6298                           postinc2	equ	0xFDE
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function i2_SerTx *****************
  6304 ;; Defined at:
  6305 ;;		line 41 in file "SerComm.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  c               1    wreg     unsigned char 
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;  c               1    0[COMRAM] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;		None               void
  6312 ;; Registers used:
  6313 ;;		wreg
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;Total ram usage:        1 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; This function calls:
  6326 ;;		Nothing
  6327 ;; This function is called by:
  6328 ;;		_RCInt
  6329 ;;		_keyValue
  6330 ;;		i2_SerTxStr
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text25
  6335  00305A                     __ptext25:
  6336                           	opt stack 0
  6337  00305A                     i2_SerTx:
  6338                           	opt stack 24
  6339                           
  6340                           ;incstack = 0
  6341                           ;i2SerTx@c stored from wreg
  6342  00305A  6E01               	movwf	i2SerTx@c,c
  6343                           
  6344                           ;SerComm.c: 43: TXREG1 = c;
  6345  00305C  C001  FFAD         	movff	i2SerTx@c,4013	;volatile
  6346                           
  6347                           ;SerComm.c: 44: while (PIR1bits.TX1IF == 0);
  6348  003060  D000               	goto	i2l28
  6349  003062                     i2l28:
  6350  003062  A89E               	btfss	3998,4,c	;volatile
  6351  003064  D7FE               	goto	i2l28
  6352  003066  0012               	return		;funcret
  6353  003068                     __end_ofi2_SerTx:
  6354                           	opt stack 0
  6355                           pclatu	equ	0xFFB
  6356                           pclath	equ	0xFFA
  6357                           tblptru	equ	0xFF8
  6358                           tblptrh	equ	0xFF7
  6359                           tblptrl	equ	0xFF6
  6360                           tablat	equ	0xFF5
  6361                           prodh	equ	0xFF4
  6362                           prodl	equ	0xFF3
  6363                           intcon	equ	0xFF2
  6364                           indf0	equ	0xFEF
  6365                           postinc0	equ	0xFEE
  6366                           fsr0h	equ	0xFEA
  6367                           fsr0l	equ	0xFE9
  6368                           wreg	equ	0xFE8
  6369                           indf1	equ	0xFE7
  6370                           fsr1h	equ	0xFE2
  6371                           fsr1l	equ	0xFE1
  6372                           indf2	equ	0xFDF
  6373                           postinc2	equ	0xFDE
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _strtod *****************
  6379 ;; Defined at:
  6380 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/atof.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  s               2   23[COMRAM] PTR const unsigned char 
  6383 ;;		 -> value(10), 
  6384 ;;  res             2   25[COMRAM] PTR PTR const unsigned c
  6385 ;;		 -> NULL(0), keyValue@str_end(2), 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  _u              4   31[COMRAM] struct .
  6388 ;;  expon           1   30[COMRAM] char 
  6389 ;;  flags           1   29[COMRAM] unsigned char 
  6390 ;;  eexp            1   28[COMRAM] char 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  3   23[COMRAM] char 
  6393 ;; Registers used:
  6394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6400 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;Total ram usage:       12 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    2
  6407 ;; This function calls:
  6408 ;;		___altoft
  6409 ;;		___ftdiv
  6410 ;;		___ftge
  6411 ;;		___ftneg
  6412 ;;		___lmul
  6413 ;;		_isdigit
  6414 ;;		_isspace
  6415 ;;		i2___ftmul
  6416 ;; This function is called by:
  6417 ;;		_keyValue
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text26
  6422  001BAC                     __ptext26:
  6423                           	opt stack 0
  6424  001BAC                     _strtod:
  6425                           	opt stack 21
  6426                           
  6427                           ;incstack = 0
  6428  001BAC  501A               	movf	strtod@res,w,c
  6429  001BAE  101B               	iorwf	strtod@res+1,w,c
  6430  001BB0  B4D8               	btfsc	status,2,c
  6431  001BB2  D00C               	goto	i2l2746
  6432  001BB4  C01A  FFD9         	movff	strtod@res,fsr2l
  6433  001BB8  C01B  FFDA         	movff	strtod@res+1,fsr2h
  6434  001BBC  C018  FFDE         	movff	strtod@s,postinc2
  6435  001BC0  C019  FFDD         	movff	strtod@s+1,postdec2
  6436  001BC4  D003               	goto	i2l2746
  6437  001BC6                     i2l2744:
  6438  001BC6  4A18               	infsnz	strtod@s,f,c
  6439  001BC8  2A19               	incf	strtod@s+1,f,c
  6440  001BCA  D000               	goto	i2l2746
  6441  001BCC                     i2l2746:
  6442  001BCC  C018  FFD9         	movff	strtod@s,fsr2l
  6443  001BD0  C019  FFDA         	movff	strtod@s+1,fsr2h
  6444  001BD4  50DF               	movf	indf2,w,c
  6445  001BD6  6E1D               	movwf	strtod@eexp,c
  6446  001BD8  501D               	movf	strtod@eexp,w,c
  6447  001BDA  ECAF  F017         	call	_isspace
  6448  001BDE  B0D8               	btfsc	status,0,c
  6449  001BE0  D7F2               	goto	i2l2744
  6450  001BE2  0E00               	movlw	0
  6451  001BE4  6E1E               	movwf	strtod@flags,c
  6452  001BE6  0E2D               	movlw	45
  6453  001BE8  181D               	xorwf	strtod@eexp,w,c
  6454  001BEA  A4D8               	btfss	status,2,c
  6455  001BEC  D003               	goto	i2l2756
  6456  001BEE  0E01               	movlw	1
  6457  001BF0  6E1E               	movwf	strtod@flags,c
  6458  001BF2  D004               	goto	i2l2758
  6459  001BF4                     i2l2756:
  6460  001BF4  0E2B               	movlw	43
  6461  001BF6  181D               	xorwf	strtod@eexp,w,c
  6462  001BF8  A4D8               	btfss	status,2,c
  6463  001BFA  D003               	goto	i2l2760
  6464  001BFC                     i2l2758:
  6465  001BFC  4A18               	infsnz	strtod@s,f,c
  6466  001BFE  2A19               	incf	strtod@s+1,f,c
  6467  001C00  D000               	goto	i2l2760
  6468  001C02                     i2l2760:
  6469  001C02  0E00               	movlw	0
  6470  001C04  6E1D               	movwf	strtod@eexp,c
  6471  001C06  0E00               	movlw	0
  6472  001C08  6E20               	movwf	strtod@_u,c
  6473  001C0A  0E00               	movlw	0
  6474  001C0C  6E21               	movwf	strtod@_u+1,c
  6475  001C0E  0E00               	movlw	0
  6476  001C10  6E22               	movwf	strtod@_u+2,c
  6477  001C12  0E00               	movlw	0
  6478  001C14  6E23               	movwf	strtod@_u+3,c
  6479  001C16  0E00               	movlw	0
  6480  001C18  6E1F               	movwf	strtod@expon,c
  6481  001C1A  D000               	goto	i2l2766
  6482  001C1C                     i2l2766:
  6483  001C1C  B81E               	btfsc	strtod@flags,4,c
  6484  001C1E  D00A               	goto	i2l2772
  6485  001C20  C018  FFD9         	movff	strtod@s,fsr2l
  6486  001C24  C019  FFDA         	movff	strtod@s+1,fsr2h
  6487  001C28  0E2E               	movlw	46
  6488  001C2A  18DE               	xorwf	postinc2,w,c
  6489  001C2C  A4D8               	btfss	status,2,c
  6490  001C2E  D002               	goto	i2l2772
  6491  001C30  881E               	bsf	strtod@flags,4,c
  6492  001C32  D040               	goto	i2l624
  6493  001C34                     i2l2772:
  6494  001C34  C018  FFD9         	movff	strtod@s,fsr2l
  6495  001C38  C019  FFDA         	movff	strtod@s+1,fsr2h
  6496  001C3C  50DF               	movf	indf2,w,c
  6497  001C3E  ECEB  F017         	call	_isdigit
  6498  001C42  A0D8               	btfss	status,0,c
  6499  001C44  D03A               	goto	i2l2790
  6500  001C46  D001               	goto	i2l2776
  6501  001C48  D038               	goto	i2l2790
  6502  001C4A                     i2l2776:
  6503  001C4A  821E               	bsf	strtod@flags,1,c
  6504  001C4C  0E08               	movlw	8
  6505  001C4E  181D               	xorwf	strtod@eexp,w,c
  6506  001C50  B4D8               	btfsc	status,2,c
  6507  001C52  D02C               	goto	i2l622
  6508  001C54  B81E               	btfsc	strtod@flags,4,c
  6509  001C56  061F               	decf	strtod@expon,f,c
  6510  001C58  2A1D               	incf	strtod@eexp,f,c
  6511  001C5A  C020  F001         	movff	strtod@_u,___lmul@multiplier
  6512  001C5E  C021  F002         	movff	strtod@_u+1,___lmul@multiplier+1
  6513  001C62  C022  F003         	movff	strtod@_u+2,___lmul@multiplier+2
  6514  001C66  C023  F004         	movff	strtod@_u+3,___lmul@multiplier+3
  6515  001C6A  0E0A               	movlw	10
  6516  001C6C  6E05               	movwf	___lmul@multiplicand,c
  6517  001C6E  0E00               	movlw	0
  6518  001C70  6E06               	movwf	___lmul@multiplicand+1,c
  6519  001C72  0E00               	movlw	0
  6520  001C74  6E07               	movwf	___lmul@multiplicand+2,c
  6521  001C76  0E00               	movlw	0
  6522  001C78  6E08               	movwf	___lmul@multiplicand+3,c
  6523  001C7A  EC84  F016         	call	___lmul	;wreg free
  6524  001C7E  C001  F020         	movff	?___lmul,strtod@_u
  6525  001C82  C002  F021         	movff	?___lmul+1,strtod@_u+1
  6526  001C86  C003  F022         	movff	?___lmul+2,strtod@_u+2
  6527  001C8A  C004  F023         	movff	?___lmul+3,strtod@_u+3
  6528  001C8E  C018  FFD9         	movff	strtod@s,fsr2l
  6529  001C92  C019  FFDA         	movff	strtod@s+1,fsr2h
  6530  001C96  50DF               	movf	indf2,w,c
  6531  001C98  6E1C               	movwf	??_strtod& (0+255),c
  6532  001C9A  0ED0               	movlw	208
  6533  001C9C  261C               	addwf	??_strtod,f,c
  6534  001C9E  501C               	movf	??_strtod,w,c
  6535  001CA0  2620               	addwf	strtod@_u,f,c
  6536  001CA2  0E00               	movlw	0
  6537  001CA4  2221               	addwfc	strtod@_u+1,f,c
  6538  001CA6  2222               	addwfc	strtod@_u+2,f,c
  6539  001CA8  2223               	addwfc	strtod@_u+3,f,c
  6540  001CAA  D004               	goto	i2l624
  6541  001CAC                     i2l622:
  6542  001CAC  B81E               	btfsc	strtod@flags,4,c
  6543  001CAE  D002               	goto	i2l624
  6544  001CB0  2A1F               	incf	strtod@expon,f,c
  6545  001CB2  D000               	goto	i2l624
  6546  001CB4                     i2l624:
  6547  001CB4  4A18               	infsnz	strtod@s,f,c
  6548  001CB6  2A19               	incf	strtod@s+1,f,c
  6549  001CB8  D7B1               	goto	i2l2766
  6550  001CBA                     i2l2790:
  6551  001CBA  0E00               	movlw	0
  6552  001CBC  6E1D               	movwf	strtod@eexp,c
  6553  001CBE  C018  FFD9         	movff	strtod@s,fsr2l
  6554  001CC2  C019  FFDA         	movff	strtod@s+1,fsr2h
  6555  001CC6  0E65               	movlw	101
  6556  001CC8  18DE               	xorwf	postinc2,w,c
  6557  001CCA  B4D8               	btfsc	status,2,c
  6558  001CCC  D008               	goto	i2l2796
  6559  001CCE  C018  FFD9         	movff	strtod@s,fsr2l
  6560  001CD2  C019  FFDA         	movff	strtod@s+1,fsr2h
  6561  001CD6  0E45               	movlw	69
  6562  001CD8  18DE               	xorwf	postinc2,w,c
  6563  001CDA  A4D8               	btfss	status,2,c
  6564  001CDC  D065               	goto	i2l2828
  6565  001CDE                     i2l2796:
  6566  001CDE  4A18               	infsnz	strtod@s,f,c
  6567  001CE0  2A19               	incf	strtod@s+1,f,c
  6568  001CE2  C018  FFD9         	movff	strtod@s,fsr2l
  6569  001CE6  C019  FFDA         	movff	strtod@s+1,fsr2h
  6570  001CEA  0E2D               	movlw	45
  6571  001CEC  18DE               	xorwf	postinc2,w,c
  6572  001CEE  A4D8               	btfss	status,2,c
  6573  001CF0  D002               	goto	i2l2800
  6574  001CF2  861E               	bsf	strtod@flags,3,c
  6575  001CF4  D008               	goto	i2l2802
  6576  001CF6                     i2l2800:
  6577  001CF6  C018  FFD9         	movff	strtod@s,fsr2l
  6578  001CFA  C019  FFDA         	movff	strtod@s+1,fsr2h
  6579  001CFE  0E2B               	movlw	43
  6580  001D00  18DE               	xorwf	postinc2,w,c
  6581  001D02  A4D8               	btfss	status,2,c
  6582  001D04  D006               	goto	i2l2806
  6583  001D06                     i2l2802:
  6584  001D06  4A18               	infsnz	strtod@s,f,c
  6585  001D08  2A19               	incf	strtod@s+1,f,c
  6586  001D0A  D003               	goto	i2l2806
  6587  001D0C                     i2l2804:
  6588  001D0C  4A18               	infsnz	strtod@s,f,c
  6589  001D0E  2A19               	incf	strtod@s+1,f,c
  6590  001D10  D000               	goto	i2l2806
  6591  001D12                     i2l2806:
  6592  001D12  C018  FFD9         	movff	strtod@s,fsr2l
  6593  001D16  C019  FFDA         	movff	strtod@s+1,fsr2h
  6594  001D1A  0E30               	movlw	48
  6595  001D1C  18DE               	xorwf	postinc2,w,c
  6596  001D1E  B4D8               	btfsc	status,2,c
  6597  001D20  D7F5               	goto	i2l2804
  6598  001D22  C018  FFD9         	movff	strtod@s,fsr2l
  6599  001D26  C019  FFDA         	movff	strtod@s+1,fsr2h
  6600  001D2A  50DF               	movf	indf2,w,c
  6601  001D2C  ECEB  F017         	call	_isdigit
  6602  001D30  A0D8               	btfss	status,0,c
  6603  001D32  D036               	goto	i2l2824
  6604  001D34  C018  FFD9         	movff	strtod@s,fsr2l
  6605  001D38  C019  FFDA         	movff	strtod@s+1,fsr2h
  6606  001D3C  50DF               	movf	indf2,w,c
  6607  001D3E  0FD0               	addlw	208
  6608  001D40  6E1D               	movwf	strtod@eexp,c
  6609  001D42  4A18               	infsnz	strtod@s,f,c
  6610  001D44  2A19               	incf	strtod@s+1,f,c
  6611  001D46  C018  FFD9         	movff	strtod@s,fsr2l
  6612  001D4A  C019  FFDA         	movff	strtod@s+1,fsr2h
  6613  001D4E  50DF               	movf	indf2,w,c
  6614  001D50  ECEB  F017         	call	_isdigit
  6615  001D54  A0D8               	btfss	status,0,c
  6616  001D56  D024               	goto	i2l2824
  6617  001D58  C018  FFD9         	movff	strtod@s,fsr2l
  6618  001D5C  C019  FFDA         	movff	strtod@s+1,fsr2h
  6619  001D60  50DF               	movf	indf2,w,c
  6620  001D62  6E1C               	movwf	??_strtod& (0+255),c
  6621  001D64  501D               	movf	strtod@eexp,w,c
  6622  001D66  0D0A               	mullw	10
  6623  001D68  50F3               	movf	prodl,w,c
  6624  001D6A  241C               	addwf	??_strtod,w,c
  6625  001D6C  0FD0               	addlw	208
  6626  001D6E  6E1D               	movwf	strtod@eexp,c
  6627  001D70  4A18               	infsnz	strtod@s,f,c
  6628  001D72  2A19               	incf	strtod@s+1,f,c
  6629  001D74  C018  FFD9         	movff	strtod@s,fsr2l
  6630  001D78  C019  FFDA         	movff	strtod@s+1,fsr2h
  6631  001D7C  50DF               	movf	indf2,w,c
  6632  001D7E  ECEB  F017         	call	_isdigit
  6633  001D82  A0D8               	btfss	status,0,c
  6634  001D84  D00D               	goto	i2l2824
  6635  001D86  C018  FFD9         	movff	strtod@s,fsr2l
  6636  001D8A  C019  FFDA         	movff	strtod@s+1,fsr2h
  6637  001D8E  50DF               	movf	indf2,w,c
  6638  001D90  6E1C               	movwf	??_strtod& (0+255),c
  6639  001D92  501D               	movf	strtod@eexp,w,c
  6640  001D94  0D0A               	mullw	10
  6641  001D96  50F3               	movf	prodl,w,c
  6642  001D98  241C               	addwf	??_strtod,w,c
  6643  001D9A  0FD0               	addlw	208
  6644  001D9C  6E1D               	movwf	strtod@eexp,c
  6645  001D9E  D000               	goto	i2l2824
  6646  001DA0                     i2l2824:
  6647  001DA0  A61E               	btfss	strtod@flags,3,c
  6648  001DA2  D002               	goto	i2l2828
  6649  001DA4  6C1D               	negf	strtod@eexp,c
  6650  001DA6  D000               	goto	i2l2828
  6651  001DA8                     i2l2828:
  6652  001DA8  501D               	movf	strtod@eexp,w,c
  6653  001DAA  261F               	addwf	strtod@expon,f,c
  6654  001DAC  501A               	movf	strtod@res,w,c
  6655  001DAE  101B               	iorwf	strtod@res+1,w,c
  6656  001DB0  A4D8               	btfss	status,2,c
  6657  001DB2  A21E               	btfss	strtod@flags,1,c
  6658  001DB4  D009               	goto	i2l2836
  6659  001DB6  C01A  FFD9         	movff	strtod@res,fsr2l
  6660  001DBA  C01B  FFDA         	movff	strtod@res+1,fsr2h
  6661  001DBE  C018  FFDE         	movff	strtod@s,postinc2
  6662  001DC2  C019  FFDD         	movff	strtod@s+1,postdec2
  6663  001DC6  D000               	goto	i2l2836
  6664  001DC8                     i2l2836:
  6665  001DC8  C020  F009         	movff	strtod@_u,___altoft@c
  6666  001DCC  C021  F00A         	movff	strtod@_u+1,___altoft@c+1
  6667  001DD0  C022  F00B         	movff	strtod@_u+2,___altoft@c+2
  6668  001DD4  C023  F00C         	movff	strtod@_u+3,___altoft@c+3
  6669  001DD8  EC78  F015         	call	___altoft	;wreg free
  6670  001DDC  C009  F020         	movff	?___altoft,strtod@_u
  6671  001DE0  C00A  F021         	movff	?___altoft+1,strtod@_u+1
  6672  001DE4  C00B  F022         	movff	?___altoft+2,strtod@_u+2
  6673  001DE8  5020               	movf	strtod@_u,w,c
  6674  001DEA  1021               	iorwf	strtod@_u+1,w,c
  6675  001DEC  1022               	iorwf	strtod@_u+2,w,c
  6676  001DEE  A4D8               	btfss	status,2,c
  6677  001DF0  D005               	goto	i2l2844
  6678  001DF2  0E00               	movlw	0
  6679  001DF4  6E18               	movwf	?_strtod,c
  6680  001DF6  0E00               	movlw	0
  6681  001DF8  D0A6               	goto	L10
  6682  001DFA  D0C2               	goto	i2l641
  6683  001DFC                     i2l2844:
  6684  001DFC  AE1F               	btfss	strtod@expon,7,c
  6685  001DFE  D04C               	goto	i2l2872
  6686  001E00  6C1F               	negf	strtod@expon,c
  6687  001E02  D017               	goto	i2l2852
  6688  001E04                     i2l2848:
  6689  001E04  C020  F009         	movff	strtod@_u,___ftdiv@f1
  6690  001E08  C021  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  6691  001E0C  C022  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  6692  001E10  0E03               	movlw	3
  6693  001E12  6E0C               	movwf	___ftdiv@f2,c
  6694  001E14  0E15               	movlw	21
  6695  001E16  6E0D               	movwf	___ftdiv@f2+1,c
  6696  001E18  0E50               	movlw	80
  6697  001E1A  6E0E               	movwf	___ftdiv@f2+2,c
  6698  001E1C  EC81  F013         	call	___ftdiv	;wreg free
  6699  001E20  C009  F020         	movff	?___ftdiv,strtod@_u
  6700  001E24  C00A  F021         	movff	?___ftdiv+1,strtod@_u+1
  6701  001E28  C00B  F022         	movff	?___ftdiv+2,strtod@_u+2
  6702  001E2C  0EF6               	movlw	246
  6703  001E2E  261F               	addwf	strtod@expon,f,c
  6704  001E30  D000               	goto	i2l2852
  6705  001E32                     i2l2852:
  6706  001E32  501F               	movf	strtod@expon,w,c
  6707  001E34  0A80               	xorlw	128
  6708  001E36  0F76               	addlw	-138
  6709  001E38  A0D8               	btfss	status,0,c
  6710  001E3A  D018               	goto	i2l2858
  6711  001E3C  D7E3               	goto	i2l2848
  6712  001E3E  D016               	goto	i2l2858
  6713  001E40                     i2l2854:
  6714  001E40  C020  F009         	movff	strtod@_u,___ftdiv@f1
  6715  001E44  C021  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  6716  001E48  C022  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  6717  001E4C  0E00               	movlw	0
  6718  001E4E  6E0C               	movwf	___ftdiv@f2,c
  6719  001E50  0E20               	movlw	32
  6720  001E52  6E0D               	movwf	___ftdiv@f2+1,c
  6721  001E54  0E41               	movlw	65
  6722  001E56  6E0E               	movwf	___ftdiv@f2+2,c
  6723  001E58  EC81  F013         	call	___ftdiv	;wreg free
  6724  001E5C  C009  F020         	movff	?___ftdiv,strtod@_u
  6725  001E60  C00A  F021         	movff	?___ftdiv+1,strtod@_u+1
  6726  001E64  C00B  F022         	movff	?___ftdiv+2,strtod@_u+2
  6727  001E68  061F               	decf	strtod@expon,f,c
  6728  001E6A  D000               	goto	i2l2858
  6729  001E6C                     i2l2858:
  6730  001E6C  501F               	movf	strtod@expon,w,c
  6731  001E6E  A4D8               	btfss	status,2,c
  6732  001E70  D7E7               	goto	i2l2854
  6733  001E72  C020  F001         	movff	strtod@_u,___ftge@ff1
  6734  001E76  C021  F002         	movff	strtod@_u+1,___ftge@ff1+1
  6735  001E7A  C022  F003         	movff	strtod@_u+2,___ftge@ff1+2
  6736  001E7E  0E00               	movlw	0
  6737  001E80  6E04               	movwf	___ftge@ff2,c
  6738  001E82  0E80               	movlw	128
  6739  001E84  6E05               	movwf	___ftge@ff2+1,c
  6740  001E86  0E00               	movlw	0
  6741  001E88  6E06               	movwf	___ftge@ff2+2,c
  6742  001E8A  ECAE  F014         	call	___ftge	;wreg free
  6743  001E8E  D04D               	goto	L11
  6744  001E90  D077               	goto	i2l641
  6745  001E92  D056               	goto	i2l2896
  6746  001E94  D075               	goto	i2l641
  6747  001E96  D05C               	goto	i2l651
  6748  001E98                     i2l2872:
  6749  001E98  501F               	movf	strtod@expon,w,c
  6750  001E9A  0A80               	xorlw	128
  6751  001E9C  0F7F               	addlw	-129
  6752  001E9E  B0D8               	btfsc	status,0,c
  6753  001EA0  D019               	goto	i2l2880
  6754  001EA2  D056               	goto	i2l651
  6755  001EA4  D017               	goto	i2l2880
  6756  001EA6                     i2l2876:
  6757  001EA6  C020  F009         	movff	strtod@_u,i2___ftmul@f1
  6758  001EAA  C021  F00A         	movff	strtod@_u+1,i2___ftmul@f1+1
  6759  001EAE  C022  F00B         	movff	strtod@_u+2,i2___ftmul@f1+2
  6760  001EB2  0E03               	movlw	3
  6761  001EB4  6E0C               	movwf	i2___ftmul@f2,c
  6762  001EB6  0E15               	movlw	21
  6763  001EB8  6E0D               	movwf	i2___ftmul@f2+1,c
  6764  001EBA  0E50               	movlw	80
  6765  001EBC  6E0E               	movwf	i2___ftmul@f2+2,c
  6766  001EBE  EC05  F013         	call	i2___ftmul	;wreg free
  6767  001EC2  C009  F020         	movff	?i2___ftmul,strtod@_u
  6768  001EC6  C00A  F021         	movff	?i2___ftmul+1,strtod@_u+1
  6769  001ECA  C00B  F022         	movff	?i2___ftmul+2,strtod@_u+2
  6770  001ECE  0EF6               	movlw	246
  6771  001ED0  261F               	addwf	strtod@expon,f,c
  6772  001ED2  D000               	goto	i2l2880
  6773  001ED4                     i2l2880:
  6774  001ED4  0E0A               	movlw	10
  6775  001ED6  601F               	cpfslt	strtod@expon,c
  6776  001ED8  D7E6               	goto	i2l2876
  6777  001EDA  D016               	goto	i2l2886
  6778  001EDC                     i2l2882:
  6779  001EDC  C020  F009         	movff	strtod@_u,i2___ftmul@f1
  6780  001EE0  C021  F00A         	movff	strtod@_u+1,i2___ftmul@f1+1
  6781  001EE4  C022  F00B         	movff	strtod@_u+2,i2___ftmul@f1+2
  6782  001EE8  0E00               	movlw	0
  6783  001EEA  6E0C               	movwf	i2___ftmul@f2,c
  6784  001EEC  0E20               	movlw	32
  6785  001EEE  6E0D               	movwf	i2___ftmul@f2+1,c
  6786  001EF0  0E41               	movlw	65
  6787  001EF2  6E0E               	movwf	i2___ftmul@f2+2,c
  6788  001EF4  EC05  F013         	call	i2___ftmul	;wreg free
  6789  001EF8  C009  F020         	movff	?i2___ftmul,strtod@_u
  6790  001EFC  C00A  F021         	movff	?i2___ftmul+1,strtod@_u+1
  6791  001F00  C00B  F022         	movff	?i2___ftmul+2,strtod@_u+2
  6792  001F04  061F               	decf	strtod@expon,f,c
  6793  001F06  D000               	goto	i2l2886
  6794  001F08                     i2l2886:
  6795  001F08  501F               	movf	strtod@expon,w,c
  6796  001F0A  A4D8               	btfss	status,2,c
  6797  001F0C  D7E7               	goto	i2l2882
  6798  001F0E  0EFF               	movlw	255
  6799  001F10  6E01               	movwf	___ftge@ff1,c
  6800  001F12  0E7F               	movlw	127
  6801  001F14  6E02               	movwf	___ftge@ff1+1,c
  6802  001F16  0E7F               	movlw	127
  6803  001F18  6E03               	movwf	___ftge@ff1+2,c
  6804  001F1A  C020  F004         	movff	strtod@_u,___ftge@ff2
  6805  001F1E  C021  F005         	movff	strtod@_u+1,___ftge@ff2+1
  6806  001F22  C022  F006         	movff	strtod@_u+2,___ftge@ff2+2
  6807  001F26  ECAE  F014         	call	___ftge	;wreg free
  6808  001F2A                     L11:
  6809  001F2A  B0D8               	btfsc	status,0,c
  6810  001F2C  D011               	goto	i2l651
  6811  001F2E  A01E               	btfss	strtod@flags,0,c
  6812  001F30  D007               	goto	i2l2896
  6813  001F32  0E00               	movlw	0
  6814  001F34  6E18               	movwf	?_strtod,c
  6815  001F36  0E80               	movlw	128
  6816  001F38  6E19               	movwf	?_strtod+1,c
  6817  001F3A  0E80               	movlw	128
  6818  001F3C  D006               	goto	L7
  6819  001F3E  D020               	goto	i2l641
  6820  001F40                     i2l2896:
  6821  001F40  0E00               	movlw	0
  6822  001F42  6E18               	movwf	?_strtod,c
  6823  001F44  0E80               	movlw	128
  6824  001F46                     L10:
  6825  001F46  6E19               	movwf	?_strtod+1,c
  6826  001F48  0E00               	movlw	0
  6827  001F4A                     L7:
  6828  001F4A  6E1A               	movwf	?_strtod+2,c
  6829  001F4C  D019               	goto	i2l641
  6830  001F4E  D000               	goto	i2l651
  6831  001F50                     i2l651:
  6832  001F50  A01E               	btfss	strtod@flags,0,c
  6833  001F52  D00F               	goto	i2l2902
  6834  001F54  C020  F001         	movff	strtod@_u,___ftneg@f1
  6835  001F58  C021  F002         	movff	strtod@_u+1,___ftneg@f1+1
  6836  001F5C  C022  F003         	movff	strtod@_u+2,___ftneg@f1+2
  6837  001F60  ECD9  F017         	call	___ftneg	;wreg free
  6838  001F64  C001  F020         	movff	?___ftneg,strtod@_u
  6839  001F68  C002  F021         	movff	?___ftneg+1,strtod@_u+1
  6840  001F6C  C003  F022         	movff	?___ftneg+2,strtod@_u+2
  6841  001F70  D000               	goto	i2l2902
  6842  001F72                     i2l2902:
  6843  001F72  C020  F018         	movff	strtod@_u,?_strtod
  6844  001F76  C021  F019         	movff	strtod@_u+1,?_strtod+1
  6845  001F7A  C022  F01A         	movff	strtod@_u+2,?_strtod+2
  6846  001F7E  D000               	goto	i2l641
  6847  001F80                     i2l641:
  6848  001F80  0012               	return		;funcret
  6849  001F82                     __end_of_strtod:
  6850                           	opt stack 0
  6851                           pclatu	equ	0xFFB
  6852                           pclath	equ	0xFFA
  6853                           tblptru	equ	0xFF8
  6854                           tblptrh	equ	0xFF7
  6855                           tblptrl	equ	0xFF6
  6856                           tablat	equ	0xFF5
  6857                           prodh	equ	0xFF4
  6858                           prodl	equ	0xFF3
  6859                           intcon	equ	0xFF2
  6860                           indf0	equ	0xFEF
  6861                           postinc0	equ	0xFEE
  6862                           fsr0h	equ	0xFEA
  6863                           fsr0l	equ	0xFE9
  6864                           wreg	equ	0xFE8
  6865                           indf1	equ	0xFE7
  6866                           fsr1h	equ	0xFE2
  6867                           fsr1l	equ	0xFE1
  6868                           indf2	equ	0xFDF
  6869                           postinc2	equ	0xFDE
  6870                           postdec2	equ	0xFDD
  6871                           fsr2h	equ	0xFDA
  6872                           fsr2l	equ	0xFD9
  6873                           status	equ	0xFD8
  6874                           
  6875 ;; *************** function i2___ftmul *****************
  6876 ;; Defined at:
  6877 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  f1              3    8[COMRAM] float 
  6880 ;;  f2              3   11[COMRAM] float 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  __ftmul         3   18[COMRAM] unsigned um
  6883 ;;  __ftmul         1   22[COMRAM] unsigned char 
  6884 ;;  __ftmul         1   21[COMRAM] unsigned char 
  6885 ;;  __ftmul         1   17[COMRAM] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  3    8[COMRAM] float 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:       15 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    1
  6902 ;; This function calls:
  6903 ;;		i2___ftpack
  6904 ;; This function is called by:
  6905 ;;		_strtod
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           	psect	text27
  6910  00260A                     __ptext27:
  6911                           	opt stack 0
  6912  00260A                     i2___ftmul:
  6913                           	opt stack 21
  6914                           
  6915                           ;incstack = 0
  6916  00260A  C00B  F00F         	movff	i2___ftmul@f1+2,??i2___ftmul
  6917  00260E  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
  6918  002610  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
  6919  002612  340A               	rlcf	i2___ftmul@f1+1,w,c
  6920  002614  360F               	rlcf	??i2___ftmul& (0+255),f,c
  6921  002616  E301               	bnc	u274_41
  6922  002618  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
  6923  00261A                     u274_41:
  6924  00261A  500F               	movf	??i2___ftmul,w,c
  6925  00261C  6E12               	movwf	i2___ftmul@exp,c
  6926  00261E  5012               	movf	i2___ftmul@exp,w,c
  6927  002620  A4D8               	btfss	status,2,c
  6928  002622  D002               	goto	i2l2678
  6929  002624  D00E               	goto	i2l2680
  6930  002626  D06C               	goto	i2l898
  6931  002628                     i2l2678:
  6932  002628  C00E  F00F         	movff	i2___ftmul@f2+2,??i2___ftmul
  6933  00262C  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
  6934  00262E  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
  6935  002630  340D               	rlcf	i2___ftmul@f2+1,w,c
  6936  002632  360F               	rlcf	??i2___ftmul& (0+255),f,c
  6937  002634  E301               	bnc	u276_41
  6938  002636  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
  6939  002638                     u276_41:
  6940  002638  500F               	movf	??i2___ftmul,w,c
  6941  00263A  6E17               	movwf	i2___ftmul@sign,c
  6942  00263C  5017               	movf	i2___ftmul@sign,w,c
  6943  00263E  A4D8               	btfss	status,2,c
  6944  002640  D007               	goto	i2l2684
  6945  002642                     i2l2680:
  6946  002642  0E00               	movlw	0
  6947  002644  6E09               	movwf	?i2___ftmul,c
  6948  002646  0E00               	movlw	0
  6949  002648  6E0A               	movwf	?i2___ftmul+1,c
  6950  00264A  0E00               	movlw	0
  6951  00264C  6E0B               	movwf	?i2___ftmul+2,c
  6952  00264E  D058               	goto	i2l898
  6953  002650                     i2l2684:
  6954  002650  5017               	movf	i2___ftmul@sign,w,c
  6955  002652  0F7B               	addlw	123
  6956  002654  2612               	addwf	i2___ftmul@exp,f,c
  6957  002656  C00B  F017         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  6958  00265A  500E               	movf	i2___ftmul@f2+2,w,c
  6959  00265C  1A17               	xorwf	i2___ftmul@sign,f,c
  6960  00265E  0E80               	movlw	128
  6961  002660  1617               	andwf	i2___ftmul@sign,f,c
  6962  002662  8E0A               	bsf	i2___ftmul@f1+1,7,c
  6963  002664  8E0D               	bsf	i2___ftmul@f2+1,7,c
  6964  002666  0EFF               	movlw	255
  6965  002668  160C               	andwf	i2___ftmul@f2,f,c
  6966  00266A  0EFF               	movlw	255
  6967  00266C  160D               	andwf	i2___ftmul@f2+1,f,c
  6968  00266E  0E00               	movlw	0
  6969  002670  160E               	andwf	i2___ftmul@f2+2,f,c
  6970  002672  0E00               	movlw	0
  6971  002674  6E13               	movwf	i2___ftmul@f3_as_product,c
  6972  002676  0E00               	movlw	0
  6973  002678  6E14               	movwf	i2___ftmul@f3_as_product+1,c
  6974  00267A  0E00               	movlw	0
  6975  00267C  6E15               	movwf	i2___ftmul@f3_as_product+2,c
  6976  00267E  0E07               	movlw	7
  6977  002680  6E16               	movwf	i2___ftmul@cntr,c
  6978  002682  D000               	goto	i2l2698
  6979  002684                     i2l2698:
  6980  002684  A009               	btfss	i2___ftmul@f1,0,c
  6981  002686  D007               	goto	i2l2702
  6982  002688  500C               	movf	i2___ftmul@f2,w,c
  6983  00268A  2613               	addwf	i2___ftmul@f3_as_product,f,c
  6984  00268C  500D               	movf	i2___ftmul@f2+1,w,c
  6985  00268E  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
  6986  002690  500E               	movf	i2___ftmul@f2+2,w,c
  6987  002692  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
  6988  002694  D000               	goto	i2l2702
  6989  002696                     i2l2702:
  6990  002696  90D8               	bcf	status,0,c
  6991  002698  320B               	rrcf	i2___ftmul@f1+2,f,c
  6992  00269A  320A               	rrcf	i2___ftmul@f1+1,f,c
  6993  00269C  3209               	rrcf	i2___ftmul@f1,f,c
  6994  00269E  90D8               	bcf	status,0,c
  6995  0026A0  360C               	rlcf	i2___ftmul@f2,f,c
  6996  0026A2  360D               	rlcf	i2___ftmul@f2+1,f,c
  6997  0026A4  360E               	rlcf	i2___ftmul@f2+2,f,c
  6998  0026A6  2E16               	decfsz	i2___ftmul@cntr,f,c
  6999  0026A8  D7ED               	goto	i2l2698
  7000  0026AA  D000               	goto	i2l2706
  7001  0026AC                     i2l2706:
  7002  0026AC  0E09               	movlw	9
  7003  0026AE  6E16               	movwf	i2___ftmul@cntr,c
  7004  0026B0  D000               	goto	i2l2708
  7005  0026B2                     i2l2708:
  7006  0026B2  A009               	btfss	i2___ftmul@f1,0,c
  7007  0026B4  D007               	goto	i2l2712
  7008  0026B6  500C               	movf	i2___ftmul@f2,w,c
  7009  0026B8  2613               	addwf	i2___ftmul@f3_as_product,f,c
  7010  0026BA  500D               	movf	i2___ftmul@f2+1,w,c
  7011  0026BC  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7012  0026BE  500E               	movf	i2___ftmul@f2+2,w,c
  7013  0026C0  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7014  0026C2  D000               	goto	i2l2712
  7015  0026C4                     i2l2712:
  7016  0026C4  90D8               	bcf	status,0,c
  7017  0026C6  320B               	rrcf	i2___ftmul@f1+2,f,c
  7018  0026C8  320A               	rrcf	i2___ftmul@f1+1,f,c
  7019  0026CA  3209               	rrcf	i2___ftmul@f1,f,c
  7020  0026CC  90D8               	bcf	status,0,c
  7021  0026CE  3215               	rrcf	i2___ftmul@f3_as_product+2,f,c
  7022  0026D0  3214               	rrcf	i2___ftmul@f3_as_product+1,f,c
  7023  0026D2  3213               	rrcf	i2___ftmul@f3_as_product,f,c
  7024  0026D4  2E16               	decfsz	i2___ftmul@cntr,f,c
  7025  0026D6  D7ED               	goto	i2l2708
  7026  0026D8  D000               	goto	i2l2716
  7027  0026DA                     i2l2716:
  7028  0026DA  C013  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  7029  0026DE  C014  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  7030  0026E2  C015  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  7031  0026E6  C012  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  7032  0026EA  C017  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  7033  0026EE  ECF2  F013         	call	i2___ftpack	;wreg free
  7034  0026F2  C001  F009         	movff	?i2___ftpack,?i2___ftmul
  7035  0026F6  C002  F00A         	movff	?i2___ftpack+1,?i2___ftmul+1
  7036  0026FA  C003  F00B         	movff	?i2___ftpack+2,?i2___ftmul+2
  7037  0026FE  D000               	goto	i2l898
  7038  002700                     i2l898:
  7039  002700  0012               	return		;funcret
  7040  002702                     __end_ofi2___ftmul:
  7041                           	opt stack 0
  7042                           pclatu	equ	0xFFB
  7043                           pclath	equ	0xFFA
  7044                           tblptru	equ	0xFF8
  7045                           tblptrh	equ	0xFF7
  7046                           tblptrl	equ	0xFF6
  7047                           tablat	equ	0xFF5
  7048                           prodh	equ	0xFF4
  7049                           prodl	equ	0xFF3
  7050                           intcon	equ	0xFF2
  7051                           indf0	equ	0xFEF
  7052                           postinc0	equ	0xFEE
  7053                           fsr0h	equ	0xFEA
  7054                           fsr0l	equ	0xFE9
  7055                           wreg	equ	0xFE8
  7056                           indf1	equ	0xFE7
  7057                           fsr1h	equ	0xFE2
  7058                           fsr1l	equ	0xFE1
  7059                           indf2	equ	0xFDF
  7060                           postinc2	equ	0xFDE
  7061                           postdec2	equ	0xFDD
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function _isspace *****************
  7067 ;; Defined at:
  7068 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isspace.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;  c               1    wreg     unsigned char 
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;  c               1    2[COMRAM] unsigned char 
  7073 ;; Return value:  Size  Location     Type
  7074 ;;		None               void
  7075 ;; Registers used:
  7076 ;;		wreg, status,2, status,0
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;Total ram usage:        3 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; This function calls:
  7089 ;;		Nothing
  7090 ;; This function is called by:
  7091 ;;		_keyValue
  7092 ;;		_strtod
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text28
  7097  002F5E                     __ptext28:
  7098                           	opt stack 0
  7099  002F5E                     _isspace:
  7100                           	opt stack 22
  7101                           
  7102                           ;incstack = 0
  7103                           ;isspace@c stored from wreg
  7104  002F5E  6E03               	movwf	isspace@c,c
  7105  002F60  0E01               	movlw	1
  7106  002F62  6E02               	movwf	_isspace$1330,c
  7107  002F64  0E20               	movlw	32
  7108  002F66  1803               	xorwf	isspace@c,w,c
  7109  002F68  B4D8               	btfsc	status,2,c
  7110  002F6A  D00A               	goto	i2l2524
  7111  002F6C  0E0E               	movlw	14
  7112  002F6E  6003               	cpfslt	isspace@c,c
  7113  002F70  D004               	goto	i2l2522
  7114  002F72  0E09               	movlw	9
  7115  002F74  6003               	cpfslt	isspace@c,c
  7116  002F76  D004               	goto	i2l2524
  7117  002F78  D000               	goto	i2l2522
  7118  002F7A                     i2l2522:
  7119  002F7A  0E00               	movlw	0
  7120  002F7C  6E02               	movwf	_isspace$1330,c
  7121  002F7E  D000               	goto	i2l2524
  7122  002F80                     i2l2524:
  7123  002F80  C002  F001         	movff	_isspace$1330,??_isspace
  7124  002F84  3001               	rrcf	??_isspace,w,c
  7125  002F86  D000               	goto	i2l939
  7126  002F88                     i2l939:
  7127  002F88  0012               	return		;funcret
  7128  002F8A                     __end_of_isspace:
  7129                           	opt stack 0
  7130                           pclatu	equ	0xFFB
  7131                           pclath	equ	0xFFA
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           indf0	equ	0xFEF
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           fsr1h	equ	0xFE2
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _isdigit *****************
  7155 ;; Defined at:
  7156 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/isdigit.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  c               1    wreg     unsigned char 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  c               1    2[COMRAM] unsigned char 
  7161 ;; Return value:  Size  Location     Type
  7162 ;;		None               void
  7163 ;; Registers used:
  7164 ;;		wreg, status,2, status,0
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;Total ram usage:        3 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_strtod
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text29
  7184  002FD6                     __ptext29:
  7185                           	opt stack 0
  7186  002FD6                     _isdigit:
  7187                           	opt stack 22
  7188                           
  7189                           ;incstack = 0
  7190                           ;isdigit@c stored from wreg
  7191  002FD6  6E03               	movwf	isdigit@c,c
  7192  002FD8  0E00               	movlw	0
  7193  002FDA  6E02               	movwf	_isdigit$1327,c
  7194  002FDC  0E3A               	movlw	58
  7195  002FDE  6003               	cpfslt	isdigit@c,c
  7196  002FE0  D006               	goto	i2l2644
  7197  002FE2  0E2F               	movlw	47
  7198  002FE4  6403               	cpfsgt	isdigit@c,c
  7199  002FE6  D003               	goto	i2l2644
  7200  002FE8  0E01               	movlw	1
  7201  002FEA  6E02               	movwf	_isdigit$1327,c
  7202  002FEC  D000               	goto	i2l2644
  7203  002FEE                     i2l2644:
  7204  002FEE  C002  F001         	movff	_isdigit$1327,??_isdigit
  7205  002FF2  3001               	rrcf	??_isdigit,w,c
  7206  002FF4  D000               	goto	i2l934
  7207  002FF6                     i2l934:
  7208  002FF6  0012               	return		;funcret
  7209  002FF8                     __end_of_isdigit:
  7210                           	opt stack 0
  7211                           pclatu	equ	0xFFB
  7212                           pclath	equ	0xFFA
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           indf0	equ	0xFEF
  7221                           postinc0	equ	0xFEE
  7222                           fsr0h	equ	0xFEA
  7223                           fsr0l	equ	0xFE9
  7224                           wreg	equ	0xFE8
  7225                           indf1	equ	0xFE7
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function ___lmul *****************
  7236 ;; Defined at:
  7237 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul32.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  multiplier      4    0[COMRAM] unsigned long 
  7240 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  product         4    8[COMRAM] unsigned long 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  4    0[COMRAM] unsigned long 
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7252 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;Total ram usage:       12 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; This function calls:
  7259 ;;		Nothing
  7260 ;; This function is called by:
  7261 ;;		_strtod
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text30
  7266  002D08                     __ptext30:
  7267                           	opt stack 0
  7268  002D08                     ___lmul:
  7269                           	opt stack 22
  7270                           
  7271                           ;incstack = 0
  7272  002D08  0E00               	movlw	0
  7273  002D0A  6E09               	movwf	___lmul@product,c
  7274  002D0C  0E00               	movlw	0
  7275  002D0E  6E0A               	movwf	___lmul@product+1,c
  7276  002D10  0E00               	movlw	0
  7277  002D12  6E0B               	movwf	___lmul@product+2,c
  7278  002D14  0E00               	movlw	0
  7279  002D16  6E0C               	movwf	___lmul@product+3,c
  7280  002D18  D000               	goto	i2l2530
  7281  002D1A                     i2l2530:
  7282  002D1A  A001               	btfss	___lmul@multiplier,0,c
  7283  002D1C  D009               	goto	i2l2534
  7284  002D1E  5005               	movf	___lmul@multiplicand,w,c
  7285  002D20  2609               	addwf	___lmul@product,f,c
  7286  002D22  5006               	movf	___lmul@multiplicand+1,w,c
  7287  002D24  220A               	addwfc	___lmul@product+1,f,c
  7288  002D26  5007               	movf	___lmul@multiplicand+2,w,c
  7289  002D28  220B               	addwfc	___lmul@product+2,f,c
  7290  002D2A  5008               	movf	___lmul@multiplicand+3,w,c
  7291  002D2C  220C               	addwfc	___lmul@product+3,f,c
  7292  002D2E  D000               	goto	i2l2534
  7293  002D30                     i2l2534:
  7294  002D30  90D8               	bcf	status,0,c
  7295  002D32  3605               	rlcf	___lmul@multiplicand,f,c
  7296  002D34  3606               	rlcf	___lmul@multiplicand+1,f,c
  7297  002D36  3607               	rlcf	___lmul@multiplicand+2,f,c
  7298  002D38  3608               	rlcf	___lmul@multiplicand+3,f,c
  7299  002D3A  90D8               	bcf	status,0,c
  7300  002D3C  3204               	rrcf	___lmul@multiplier+3,f,c
  7301  002D3E  3203               	rrcf	___lmul@multiplier+2,f,c
  7302  002D40  3202               	rrcf	___lmul@multiplier+1,f,c
  7303  002D42  3201               	rrcf	___lmul@multiplier,f,c
  7304  002D44  5001               	movf	___lmul@multiplier,w,c
  7305  002D46  1002               	iorwf	___lmul@multiplier+1,w,c
  7306  002D48  1003               	iorwf	___lmul@multiplier+2,w,c
  7307  002D4A  1004               	iorwf	___lmul@multiplier+3,w,c
  7308  002D4C  A4D8               	btfss	status,2,c
  7309  002D4E  D7E5               	goto	i2l2530
  7310  002D50  C009  F001         	movff	___lmul@product,?___lmul
  7311  002D54  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7312  002D58  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7313  002D5C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7314  002D60  0012               	return		;funcret
  7315  002D62                     __end_of___lmul:
  7316                           	opt stack 0
  7317                           pclatu	equ	0xFFB
  7318                           pclath	equ	0xFFA
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           intcon	equ	0xFF2
  7326                           indf0	equ	0xFEF
  7327                           postinc0	equ	0xFEE
  7328                           fsr0h	equ	0xFEA
  7329                           fsr0l	equ	0xFE9
  7330                           wreg	equ	0xFE8
  7331                           indf1	equ	0xFE7
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function ___ftneg *****************
  7342 ;; Defined at:
  7343 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  f1              3    0[COMRAM] float 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  3    0[COMRAM] float 
  7350 ;; Registers used:
  7351 ;;		wreg, status,2, status,0
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7357 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;Total ram usage:        3 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_strtod
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text31
  7371  002FB2                     __ptext31:
  7372                           	opt stack 0
  7373  002FB2                     ___ftneg:
  7374                           	opt stack 22
  7375                           
  7376                           ;incstack = 0
  7377  002FB2  5001               	movf	___ftneg@f1,w,c
  7378  002FB4  1002               	iorwf	___ftneg@f1+1,w,c
  7379  002FB6  1003               	iorwf	___ftneg@f1+2,w,c
  7380  002FB8  B4D8               	btfsc	status,2,c
  7381  002FBA  D006               	goto	i2l908
  7382  002FBC  0E00               	movlw	0
  7383  002FBE  1A01               	xorwf	___ftneg@f1,f,c
  7384  002FC0  0E00               	movlw	0
  7385  002FC2  1A02               	xorwf	___ftneg@f1+1,f,c
  7386  002FC4  0E80               	movlw	128
  7387  002FC6  1A03               	xorwf	___ftneg@f1+2,f,c
  7388  002FC8                     i2l908:
  7389  002FC8  C001  F001         	movff	___ftneg@f1,?___ftneg
  7390  002FCC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7391  002FD0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7392  002FD4  0012               	return		;funcret
  7393  002FD6                     __end_of___ftneg:
  7394                           	opt stack 0
  7395                           pclatu	equ	0xFFB
  7396                           pclath	equ	0xFFA
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           intcon	equ	0xFF2
  7404                           indf0	equ	0xFEF
  7405                           postinc0	equ	0xFEE
  7406                           fsr0h	equ	0xFEA
  7407                           fsr0l	equ	0xFE9
  7408                           wreg	equ	0xFE8
  7409                           indf1	equ	0xFE7
  7410                           fsr1h	equ	0xFE2
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function ___ftge *****************
  7420 ;; Defined at:
  7421 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  ff1             3    0[COMRAM] float 
  7424 ;;  ff2             3    3[COMRAM] float 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7436 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;Total ram usage:        9 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_strtod
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text32
  7450  00295C                     __ptext32:
  7451                           	opt stack 0
  7452  00295C                     ___ftge:
  7453                           	opt stack 22
  7454                           
  7455                           ;incstack = 0
  7456  00295C  AE03               	btfss	___ftge@ff1+2,7,c
  7457  00295E  D017               	goto	i2l2652
  7458  002960  C001  F007         	movff	___ftge@ff1,??___ftge
  7459  002964  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7460  002968  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7461  00296C  1E07               	comf	??___ftge,f,c
  7462  00296E  1E08               	comf	??___ftge+1,f,c
  7463  002970  1E09               	comf	??___ftge+2,f,c
  7464  002972  2A07               	incf	??___ftge,f,c
  7465  002974  0E00               	movlw	0
  7466  002976  2208               	addwfc	??___ftge+1,f,c
  7467  002978  2209               	addwfc	??___ftge+2,f,c
  7468  00297A  0E00               	movlw	0
  7469  00297C  2407               	addwf	??___ftge,w,c
  7470  00297E  6E01               	movwf	___ftge@ff1,c
  7471  002980  0E00               	movlw	0
  7472  002982  2008               	addwfc	??___ftge+1,w,c
  7473  002984  6E02               	movwf	___ftge@ff1+1,c
  7474  002986  0E80               	movlw	128
  7475  002988  2009               	addwfc	??___ftge+2,w,c
  7476  00298A  6E03               	movwf	___ftge@ff1+2,c
  7477  00298C  D000               	goto	i2l2652
  7478  00298E                     i2l2652:
  7479  00298E  AE06               	btfss	___ftge@ff2+2,7,c
  7480  002990  D017               	goto	i2l2656
  7481  002992  C004  F007         	movff	___ftge@ff2,??___ftge
  7482  002996  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7483  00299A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7484  00299E  1E07               	comf	??___ftge,f,c
  7485  0029A0  1E08               	comf	??___ftge+1,f,c
  7486  0029A2  1E09               	comf	??___ftge+2,f,c
  7487  0029A4  2A07               	incf	??___ftge,f,c
  7488  0029A6  0E00               	movlw	0
  7489  0029A8  2208               	addwfc	??___ftge+1,f,c
  7490  0029AA  2209               	addwfc	??___ftge+2,f,c
  7491  0029AC  0E00               	movlw	0
  7492  0029AE  2407               	addwf	??___ftge,w,c
  7493  0029B0  6E04               	movwf	___ftge@ff2,c
  7494  0029B2  0E00               	movlw	0
  7495  0029B4  2008               	addwfc	??___ftge+1,w,c
  7496  0029B6  6E05               	movwf	___ftge@ff2+1,c
  7497  0029B8  0E80               	movlw	128
  7498  0029BA  2009               	addwfc	??___ftge+2,w,c
  7499  0029BC  6E06               	movwf	___ftge@ff2+2,c
  7500  0029BE  D000               	goto	i2l2656
  7501  0029C0                     i2l2656:
  7502  0029C0  0E00               	movlw	0
  7503  0029C2  1A01               	xorwf	___ftge@ff1,f,c
  7504  0029C4  0E00               	movlw	0
  7505  0029C6  1A02               	xorwf	___ftge@ff1+1,f,c
  7506  0029C8  0E80               	movlw	128
  7507  0029CA  1A03               	xorwf	___ftge@ff1+2,f,c
  7508  0029CC  0E00               	movlw	0
  7509  0029CE  1A04               	xorwf	___ftge@ff2,f,c
  7510  0029D0  0E00               	movlw	0
  7511  0029D2  1A05               	xorwf	___ftge@ff2+1,f,c
  7512  0029D4  0E80               	movlw	128
  7513  0029D6  1A06               	xorwf	___ftge@ff2+2,f,c
  7514  0029D8  5004               	movf	___ftge@ff2,w,c
  7515  0029DA  5C01               	subwf	___ftge@ff1,w,c
  7516  0029DC  5005               	movf	___ftge@ff2+1,w,c
  7517  0029DE  5802               	subwfb	___ftge@ff1+1,w,c
  7518  0029E0  5006               	movf	___ftge@ff2+2,w,c
  7519  0029E2  5803               	subwfb	___ftge@ff1+2,w,c
  7520  0029E4  B0D8               	btfsc	status,0,c
  7521  0029E6  D002               	goto	i2l2662
  7522  0029E8  90D8               	bcf	status,0,c
  7523  0029EA  D002               	goto	i2l892
  7524  0029EC                     i2l2662:
  7525  0029EC  80D8               	bsf	status,0,c
  7526  0029EE  D000               	goto	i2l892
  7527  0029F0                     i2l892:
  7528  0029F0  0012               	return		;funcret
  7529  0029F2                     __end_of___ftge:
  7530                           	opt stack 0
  7531                           pclatu	equ	0xFFB
  7532                           pclath	equ	0xFFA
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           indf0	equ	0xFEF
  7541                           postinc0	equ	0xFEE
  7542                           fsr0h	equ	0xFEA
  7543                           fsr0l	equ	0xFE9
  7544                           wreg	equ	0xFE8
  7545                           indf1	equ	0xFE7
  7546                           fsr1h	equ	0xFE2
  7547                           fsr1l	equ	0xFE1
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           postdec2	equ	0xFDD
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function ___ftdiv *****************
  7556 ;; Defined at:
  7557 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  f1              3    8[COMRAM] float 
  7560 ;;  f2              3   11[COMRAM] float 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  f3              3   18[COMRAM] float 
  7563 ;;  sign            1   22[COMRAM] unsigned char 
  7564 ;;  exp             1   21[COMRAM] unsigned char 
  7565 ;;  cntr            1   17[COMRAM] unsigned char 
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  3    8[COMRAM] float 
  7568 ;; Registers used:
  7569 ;;		wreg, status,2, status,0, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:       15 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    1
  7582 ;; This function calls:
  7583 ;;		i2___ftpack
  7584 ;; This function is called by:
  7585 ;;		_strtod
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text33
  7590  002702                     __ptext33:
  7591                           	opt stack 0
  7592  002702                     ___ftdiv:
  7593                           	opt stack 21
  7594                           
  7595                           ;incstack = 0
  7596  002702  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  7597  002706  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7598  002708  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7599  00270A  340A               	rlcf	___ftdiv@f1+1,w,c
  7600  00270C  360F               	rlcf	??___ftdiv& (0+255),f,c
  7601  00270E  E301               	bnc	u262_41
  7602  002710  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7603  002712                     u262_41:
  7604  002712  500F               	movf	??___ftdiv,w,c
  7605  002714  6E16               	movwf	___ftdiv@exp,c
  7606  002716  5016               	movf	___ftdiv@exp,w,c
  7607  002718  A4D8               	btfss	status,2,c
  7608  00271A  D002               	goto	i2l2596
  7609  00271C  D00E               	goto	i2l2598
  7610  00271E  D061               	goto	i2l883
  7611  002720                     i2l2596:
  7612  002720  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  7613  002724  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  7614  002726  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  7615  002728  340D               	rlcf	___ftdiv@f2+1,w,c
  7616  00272A  360F               	rlcf	??___ftdiv& (0+255),f,c
  7617  00272C  E301               	bnc	u264_41
  7618  00272E  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  7619  002730                     u264_41:
  7620  002730  500F               	movf	??___ftdiv,w,c
  7621  002732  6E17               	movwf	___ftdiv@sign,c
  7622  002734  5017               	movf	___ftdiv@sign,w,c
  7623  002736  A4D8               	btfss	status,2,c
  7624  002738  D007               	goto	i2l2602
  7625  00273A                     i2l2598:
  7626  00273A  0E00               	movlw	0
  7627  00273C  6E09               	movwf	?___ftdiv,c
  7628  00273E  0E00               	movlw	0
  7629  002740  6E0A               	movwf	?___ftdiv+1,c
  7630  002742  0E00               	movlw	0
  7631  002744  6E0B               	movwf	?___ftdiv+2,c
  7632  002746  D04D               	goto	i2l883
  7633  002748                     i2l2602:
  7634  002748  0E00               	movlw	0
  7635  00274A  6E13               	movwf	___ftdiv@f3,c
  7636  00274C  0E00               	movlw	0
  7637  00274E  6E14               	movwf	___ftdiv@f3+1,c
  7638  002750  0E00               	movlw	0
  7639  002752  6E15               	movwf	___ftdiv@f3+2,c
  7640  002754  5017               	movf	___ftdiv@sign,w,c
  7641  002756  0F89               	addlw	137
  7642  002758  5E16               	subwf	___ftdiv@exp,f,c
  7643  00275A  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  7644  00275E  500E               	movf	___ftdiv@f2+2,w,c
  7645  002760  1A17               	xorwf	___ftdiv@sign,f,c
  7646  002762  0E80               	movlw	128
  7647  002764  1617               	andwf	___ftdiv@sign,f,c
  7648  002766  8E0A               	bsf	___ftdiv@f1+1,7,c
  7649  002768  0EFF               	movlw	255
  7650  00276A  1609               	andwf	___ftdiv@f1,f,c
  7651  00276C  0EFF               	movlw	255
  7652  00276E  160A               	andwf	___ftdiv@f1+1,f,c
  7653  002770  0E00               	movlw	0
  7654  002772  160B               	andwf	___ftdiv@f1+2,f,c
  7655  002774  8E0D               	bsf	___ftdiv@f2+1,7,c
  7656  002776  0EFF               	movlw	255
  7657  002778  160C               	andwf	___ftdiv@f2,f,c
  7658  00277A  0EFF               	movlw	255
  7659  00277C  160D               	andwf	___ftdiv@f2+1,f,c
  7660  00277E  0E00               	movlw	0
  7661  002780  160E               	andwf	___ftdiv@f2+2,f,c
  7662  002782  0E18               	movlw	24
  7663  002784  6E12               	movwf	___ftdiv@cntr,c
  7664  002786  D000               	goto	i2l2622
  7665  002788                     i2l2622:
  7666  002788  90D8               	bcf	status,0,c
  7667  00278A  3613               	rlcf	___ftdiv@f3,f,c
  7668  00278C  3614               	rlcf	___ftdiv@f3+1,f,c
  7669  00278E  3615               	rlcf	___ftdiv@f3+2,f,c
  7670  002790  500C               	movf	___ftdiv@f2,w,c
  7671  002792  5C09               	subwf	___ftdiv@f1,w,c
  7672  002794  500D               	movf	___ftdiv@f2+1,w,c
  7673  002796  580A               	subwfb	___ftdiv@f1+1,w,c
  7674  002798  500E               	movf	___ftdiv@f2+2,w,c
  7675  00279A  580B               	subwfb	___ftdiv@f1+2,w,c
  7676  00279C  A0D8               	btfss	status,0,c
  7677  00279E  D007               	goto	i2l886
  7678  0027A0  500C               	movf	___ftdiv@f2,w,c
  7679  0027A2  5E09               	subwf	___ftdiv@f1,f,c
  7680  0027A4  500D               	movf	___ftdiv@f2+1,w,c
  7681  0027A6  5A0A               	subwfb	___ftdiv@f1+1,f,c
  7682  0027A8  500E               	movf	___ftdiv@f2+2,w,c
  7683  0027AA  5A0B               	subwfb	___ftdiv@f1+2,f,c
  7684  0027AC  8013               	bsf	___ftdiv@f3,0,c
  7685  0027AE                     i2l886:
  7686  0027AE  90D8               	bcf	status,0,c
  7687  0027B0  3609               	rlcf	___ftdiv@f1,f,c
  7688  0027B2  360A               	rlcf	___ftdiv@f1+1,f,c
  7689  0027B4  360B               	rlcf	___ftdiv@f1+2,f,c
  7690  0027B6  2E12               	decfsz	___ftdiv@cntr,f,c
  7691  0027B8  D7E7               	goto	i2l2622
  7692  0027BA  D000               	goto	i2l2632
  7693  0027BC                     i2l2632:
  7694  0027BC  C013  F001         	movff	___ftdiv@f3,i2___ftpack@arg
  7695  0027C0  C014  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
  7696  0027C4  C015  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
  7697  0027C8  C016  F004         	movff	___ftdiv@exp,i2___ftpack@exp
  7698  0027CC  C017  F005         	movff	___ftdiv@sign,i2___ftpack@sign
  7699  0027D0  ECF2  F013         	call	i2___ftpack	;wreg free
  7700  0027D4  C001  F009         	movff	?i2___ftpack,?___ftdiv
  7701  0027D8  C002  F00A         	movff	?i2___ftpack+1,?___ftdiv+1
  7702  0027DC  C003  F00B         	movff	?i2___ftpack+2,?___ftdiv+2
  7703  0027E0  D000               	goto	i2l883
  7704  0027E2                     i2l883:
  7705  0027E2  0012               	return		;funcret
  7706  0027E4                     __end_of___ftdiv:
  7707                           	opt stack 0
  7708                           pclatu	equ	0xFFB
  7709                           pclath	equ	0xFFA
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           indf0	equ	0xFEF
  7718                           postinc0	equ	0xFEE
  7719                           fsr0h	equ	0xFEA
  7720                           fsr0l	equ	0xFE9
  7721                           wreg	equ	0xFE8
  7722                           indf1	equ	0xFE7
  7723                           fsr1h	equ	0xFE2
  7724                           fsr1l	equ	0xFE1
  7725                           indf2	equ	0xFDF
  7726                           postinc2	equ	0xFDE
  7727                           postdec2	equ	0xFDD
  7728                           fsr2h	equ	0xFDA
  7729                           fsr2l	equ	0xFD9
  7730                           status	equ	0xFD8
  7731                           
  7732 ;; *************** function ___altoft *****************
  7733 ;; Defined at:
  7734 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  c               4    8[COMRAM] long 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;  sign            1   17[COMRAM] unsigned char 
  7739 ;;  exp             1   16[COMRAM] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  3    8[COMRAM] float 
  7742 ;; Registers used:
  7743 ;;		wreg, status,2, status,0, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;Total ram usage:       10 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    1
  7756 ;; This function calls:
  7757 ;;		i2___ftpack
  7758 ;; This function is called by:
  7759 ;;		_strtod
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text34
  7764  002AF0                     __ptext34:
  7765                           	opt stack 0
  7766  002AF0                     ___altoft:
  7767                           	opt stack 21
  7768                           
  7769                           ;incstack = 0
  7770  002AF0  0E00               	movlw	0
  7771  002AF2  6E12               	movwf	___altoft@sign,c
  7772  002AF4  0E8E               	movlw	142
  7773  002AF6  6E11               	movwf	___altoft@exp,c
  7774  002AF8  AE0C               	btfss	___altoft@c+3,7,c
  7775  002AFA  D012               	goto	i2l2584
  7776  002AFC  1E0C               	comf	___altoft@c+3,f,c
  7777  002AFE  1E0B               	comf	___altoft@c+2,f,c
  7778  002B00  1E0A               	comf	___altoft@c+1,f,c
  7779  002B02  6C09               	negf	___altoft@c,c
  7780  002B04  0E00               	movlw	0
  7781  002B06  220A               	addwfc	___altoft@c+1,f,c
  7782  002B08  220B               	addwfc	___altoft@c+2,f,c
  7783  002B0A  220C               	addwfc	___altoft@c+3,f,c
  7784  002B0C  0E01               	movlw	1
  7785  002B0E  6E12               	movwf	___altoft@sign,c
  7786  002B10  D007               	goto	i2l2584
  7787  002B12                     i2l2582:
  7788  002B12  90D8               	bcf	status,0,c
  7789  002B14  320C               	rrcf	___altoft@c+3,f,c
  7790  002B16  320B               	rrcf	___altoft@c+2,f,c
  7791  002B18  320A               	rrcf	___altoft@c+1,f,c
  7792  002B1A  3209               	rrcf	___altoft@c,f,c
  7793  002B1C  2A11               	incf	___altoft@exp,f,c
  7794  002B1E  D000               	goto	i2l2584
  7795  002B20                     i2l2584:
  7796  002B20  0E00               	movlw	0
  7797  002B22  1409               	andwf	___altoft@c,w,c
  7798  002B24  6E0D               	movwf	??___altoft& (0+255),c
  7799  002B26  0E00               	movlw	0
  7800  002B28  140A               	andwf	___altoft@c+1,w,c
  7801  002B2A  6E0E               	movwf	(??___altoft+1)& (0+255),c
  7802  002B2C  0E00               	movlw	0
  7803  002B2E  140B               	andwf	___altoft@c+2,w,c
  7804  002B30  6E0F               	movwf	(??___altoft+2)& (0+255),c
  7805  002B32  0EFF               	movlw	255
  7806  002B34  140C               	andwf	___altoft@c+3,w,c
  7807  002B36  6E10               	movwf	(??___altoft+3)& (0+255),c
  7808  002B38  500D               	movf	??___altoft,w,c
  7809  002B3A  100E               	iorwf	??___altoft+1,w,c
  7810  002B3C  100F               	iorwf	??___altoft+2,w,c
  7811  002B3E  1010               	iorwf	??___altoft+3,w,c
  7812  002B40  A4D8               	btfss	status,2,c
  7813  002B42  D7E7               	goto	i2l2582
  7814  002B44  C009  F001         	movff	___altoft@c,i2___ftpack@arg
  7815  002B48  C00A  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
  7816  002B4C  C00B  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
  7817  002B50  C011  F004         	movff	___altoft@exp,i2___ftpack@exp
  7818  002B54  C012  F005         	movff	___altoft@sign,i2___ftpack@sign
  7819  002B58  ECF2  F013         	call	i2___ftpack	;wreg free
  7820  002B5C  C001  F009         	movff	?i2___ftpack,?___altoft
  7821  002B60  C002  F00A         	movff	?i2___ftpack+1,?___altoft+1
  7822  002B64  C003  F00B         	movff	?i2___ftpack+2,?___altoft+2
  7823  002B68  D000               	goto	i2l532
  7824  002B6A                     i2l532:
  7825  002B6A  0012               	return		;funcret
  7826  002B6C                     __end_of___altoft:
  7827                           	opt stack 0
  7828                           pclatu	equ	0xFFB
  7829                           pclath	equ	0xFFA
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           indf0	equ	0xFEF
  7838                           postinc0	equ	0xFEE
  7839                           fsr0h	equ	0xFEA
  7840                           fsr0l	equ	0xFE9
  7841                           wreg	equ	0xFE8
  7842                           indf1	equ	0xFE7
  7843                           fsr1h	equ	0xFE2
  7844                           fsr1l	equ	0xFE1
  7845                           indf2	equ	0xFDF
  7846                           postinc2	equ	0xFDE
  7847                           postdec2	equ	0xFDD
  7848                           fsr2h	equ	0xFDA
  7849                           fsr2l	equ	0xFD9
  7850                           status	equ	0xFD8
  7851                           
  7852 ;; *************** function i2___ftpack *****************
  7853 ;; Defined at:
  7854 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;  arg             3    0[COMRAM] unsigned um
  7857 ;;  exp             1    3[COMRAM] unsigned char 
  7858 ;;  sign            1    4[COMRAM] unsigned char 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  3    0[COMRAM] float 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7870 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;Total ram usage:        8 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; This function calls:
  7877 ;;		Nothing
  7878 ;; This function is called by:
  7879 ;;		___altoft
  7880 ;;		___ftdiv
  7881 ;;		i2___ftmul
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text35
  7886  0027E4                     __ptext35:
  7887                           	opt stack 0
  7888  0027E4                     i2___ftpack:
  7889                           	opt stack 21
  7890                           
  7891                           ;incstack = 0
  7892  0027E4  5004               	movf	i2___ftpack@exp,w,c
  7893  0027E6  B4D8               	btfsc	status,2,c
  7894  0027E8  D005               	goto	i2l2480
  7895  0027EA  5001               	movf	i2___ftpack@arg,w,c
  7896  0027EC  1002               	iorwf	i2___ftpack@arg+1,w,c
  7897  0027EE  1003               	iorwf	i2___ftpack@arg+2,w,c
  7898  0027F0  A4D8               	btfss	status,2,c
  7899  0027F2  D00E               	goto	i2l2486
  7900  0027F4                     i2l2480:
  7901  0027F4  0E00               	movlw	0
  7902  0027F6  6E01               	movwf	?i2___ftpack,c
  7903  0027F8  0E00               	movlw	0
  7904  0027FA  6E02               	movwf	?i2___ftpack+1,c
  7905  0027FC  0E00               	movlw	0
  7906  0027FE  6E03               	movwf	?i2___ftpack+2,c
  7907  002800  D053               	goto	i2l811
  7908  002802  D006               	goto	i2l2486
  7909  002804                     i2l2484:
  7910  002804  2A04               	incf	i2___ftpack@exp,f,c
  7911  002806  90D8               	bcf	status,0,c
  7912  002808  3203               	rrcf	i2___ftpack@arg+2,f,c
  7913  00280A  3202               	rrcf	i2___ftpack@arg+1,f,c
  7914  00280C  3201               	rrcf	i2___ftpack@arg,f,c
  7915  00280E  D000               	goto	i2l2486
  7916  002810                     i2l2486:
  7917  002810  0E00               	movlw	0
  7918  002812  1401               	andwf	i2___ftpack@arg,w,c
  7919  002814  6E06               	movwf	??i2___ftpack& (0+255),c
  7920  002816  0E00               	movlw	0
  7921  002818  1402               	andwf	i2___ftpack@arg+1,w,c
  7922  00281A  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  7923  00281C  0EFE               	movlw	254
  7924  00281E  1403               	andwf	i2___ftpack@arg+2,w,c
  7925  002820  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  7926  002822  5006               	movf	??i2___ftpack,w,c
  7927  002824  1007               	iorwf	??i2___ftpack+1,w,c
  7928  002826  1008               	iorwf	??i2___ftpack+2,w,c
  7929  002828  B4D8               	btfsc	status,2,c
  7930  00282A  D00E               	goto	i2l2492
  7931  00282C  D7EB               	goto	i2l2484
  7932  00282E  D00C               	goto	i2l2492
  7933  002830                     i2l2488:
  7934  002830  2A04               	incf	i2___ftpack@exp,f,c
  7935  002832  0E01               	movlw	1
  7936  002834  2601               	addwf	i2___ftpack@arg,f,c
  7937  002836  0E00               	movlw	0
  7938  002838  2202               	addwfc	i2___ftpack@arg+1,f,c
  7939  00283A  0E00               	movlw	0
  7940  00283C  2203               	addwfc	i2___ftpack@arg+2,f,c
  7941  00283E  90D8               	bcf	status,0,c
  7942  002840  3203               	rrcf	i2___ftpack@arg+2,f,c
  7943  002842  3202               	rrcf	i2___ftpack@arg+1,f,c
  7944  002844  3201               	rrcf	i2___ftpack@arg,f,c
  7945  002846  D000               	goto	i2l2492
  7946  002848                     i2l2492:
  7947  002848  0E00               	movlw	0
  7948  00284A  1401               	andwf	i2___ftpack@arg,w,c
  7949  00284C  6E06               	movwf	??i2___ftpack& (0+255),c
  7950  00284E  0E00               	movlw	0
  7951  002850  1402               	andwf	i2___ftpack@arg+1,w,c
  7952  002852  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  7953  002854  0EFF               	movlw	255
  7954  002856  1403               	andwf	i2___ftpack@arg+2,w,c
  7955  002858  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  7956  00285A  5006               	movf	??i2___ftpack,w,c
  7957  00285C  1007               	iorwf	??i2___ftpack+1,w,c
  7958  00285E  1008               	iorwf	??i2___ftpack+2,w,c
  7959  002860  B4D8               	btfsc	status,2,c
  7960  002862  D008               	goto	i2l2496
  7961  002864  D7E5               	goto	i2l2488
  7962  002866  D006               	goto	i2l2496
  7963  002868                     i2l2494:
  7964  002868  0604               	decf	i2___ftpack@exp,f,c
  7965  00286A  90D8               	bcf	status,0,c
  7966  00286C  3601               	rlcf	i2___ftpack@arg,f,c
  7967  00286E  3602               	rlcf	i2___ftpack@arg+1,f,c
  7968  002870  3603               	rlcf	i2___ftpack@arg+2,f,c
  7969  002872  D000               	goto	i2l2496
  7970  002874                     i2l2496:
  7971  002874  BE02               	btfsc	i2___ftpack@arg+1,7,c
  7972  002876  D004               	goto	i2l822
  7973  002878  0E02               	movlw	2
  7974  00287A  6004               	cpfslt	i2___ftpack@exp,c
  7975  00287C  D7F5               	goto	i2l2494
  7976  00287E  D000               	goto	i2l822
  7977  002880                     i2l822:
  7978  002880  B004               	btfsc	i2___ftpack@exp,0,c
  7979  002882  D002               	goto	i2l2502
  7980  002884  9E02               	bcf	i2___ftpack@arg+1,7,c
  7981  002886  D000               	goto	i2l2502
  7982  002888                     i2l2502:
  7983  002888  90D8               	bcf	status,0,c
  7984  00288A  3204               	rrcf	i2___ftpack@exp,f,c
  7985  00288C  5004               	movf	i2___ftpack@exp,w,c
  7986  00288E  1203               	iorwf	i2___ftpack@arg+2,f,c
  7987  002890  5005               	movf	i2___ftpack@sign,w,c
  7988  002892  B4D8               	btfsc	status,2,c
  7989  002894  D002               	goto	i2l2508
  7990  002896  8E03               	bsf	i2___ftpack@arg+2,7,c
  7991  002898  D000               	goto	i2l2508
  7992  00289A                     i2l2508:
  7993  00289A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  7994  00289E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  7995  0028A2  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  7996  0028A6  D000               	goto	i2l811
  7997  0028A8                     i2l811:
  7998  0028A8  0012               	return		;funcret
  7999  0028AA                     __end_ofi2___ftpack:
  8000                           	opt stack 0
  8001                           pclatu	equ	0xFFB
  8002                           pclath	equ	0xFFA
  8003                           tblptru	equ	0xFF8
  8004                           tblptrh	equ	0xFF7
  8005                           tblptrl	equ	0xFF6
  8006                           tablat	equ	0xFF5
  8007                           prodh	equ	0xFF4
  8008                           prodl	equ	0xFF3
  8009                           intcon	equ	0xFF2
  8010                           indf0	equ	0xFEF
  8011                           postinc0	equ	0xFEE
  8012                           fsr0h	equ	0xFEA
  8013                           fsr0l	equ	0xFE9
  8014                           wreg	equ	0xFE8
  8015                           indf1	equ	0xFE7
  8016                           fsr1h	equ	0xFE2
  8017                           fsr1l	equ	0xFE1
  8018                           indf2	equ	0xFDF
  8019                           postinc2	equ	0xFDE
  8020                           postdec2	equ	0xFDD
  8021                           fsr2h	equ	0xFDA
  8022                           fsr2l	equ	0xFD9
  8023                           status	equ	0xFD8
  8024                           
  8025 ;; *************** function _strcmp *****************
  8026 ;; Defined at:
  8027 ;;		line 33 in file "/opt/microchip/xc8/v1.34/sources/common/strcmp.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  8030 ;;		 -> key(5), 
  8031 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  8032 ;;		 -> STR_27(3), STR_26(3), STR_25(3), STR_24(3), 
  8033 ;;		 -> STR_23(3), STR_22(3), STR_21(4), STR_20(4), 
  8034 ;;		 -> STR_19(4), STR_18(4), STR_17(3), STR_16(3), 
  8035 ;;		 -> STR_15(3), STR_14(3), STR_11(3), STR_10(3), 
  8036 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(3), 
  8037 ;;		 -> STR_5(4), STR_4(4), 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  r               1    5[COMRAM] char 
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  2    0[COMRAM] int 
  8042 ;; Registers used:
  8043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8049 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;Total ram usage:        6 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; This function calls:
  8056 ;;		Nothing
  8057 ;; This function is called by:
  8058 ;;		_keyValue
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           	psect	text36
  8063  002E12                     __ptext36:
  8064                           	opt stack 0
  8065  002E12                     _strcmp:
  8066                           	opt stack 23
  8067                           
  8068                           ;incstack = 0
  8069  002E12  D005               	goto	i2l2732
  8070  002E14                     i2l2730:
  8071  002E14  4A01               	infsnz	strcmp@s1,f,c
  8072  002E16  2A02               	incf	strcmp@s1+1,f,c
  8073  002E18  4A03               	infsnz	strcmp@s2,f,c
  8074  002E1A  2A04               	incf	strcmp@s2+1,f,c
  8075  002E1C  D000               	goto	i2l2732
  8076  002E1E                     i2l2732:
  8077  002E1E  C001  FFD9         	movff	strcmp@s1,fsr2l
  8078  002E22  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  8079  002E26  50DF               	movf	indf2,w,c
  8080  002E28  6E05               	movwf	??_strcmp& (0+255),c
  8081  002E2A  C003  FFF6         	movff	strcmp@s2,tblptrl
  8082  002E2E  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  8083  002E32                     	if	0	;tblptru may be non-zero
  8084  002E32                     	endif
  8085  002E32                     	if	0	;tblptru may be non-zero
  8086  002E32                     	endif
  8087  002E32  0008               	tblrd		*
  8088  002E34  50F5               	movf	tablat,w,c
  8089  002E36  0800               	sublw	0
  8090  002E38  2405               	addwf	??_strcmp,w,c
  8091  002E3A  6E06               	movwf	strcmp@r,c
  8092  002E3C  5006               	movf	strcmp@r,w,c
  8093  002E3E  A4D8               	btfss	status,2,c
  8094  002E40  D009               	goto	i2l2736
  8095  002E42  C001  FFD9         	movff	strcmp@s1,fsr2l
  8096  002E46  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  8097  002E4A  50DF               	movf	indf2,w,c
  8098  002E4C  B4D8               	btfsc	status,2,c
  8099  002E4E  D002               	goto	i2l2736
  8100  002E50  D7E1               	goto	i2l2730
  8101  002E52  D000               	goto	i2l2736
  8102  002E54                     i2l2736:
  8103  002E54  5006               	movf	strcmp@r,w,c
  8104  002E56  6E01               	movwf	?_strcmp,c
  8105  002E58  6A02               	clrf	?_strcmp+1,c
  8106  002E5A  BE01               	btfsc	?_strcmp,7,c
  8107  002E5C  0602               	decf	?_strcmp+1,f,c
  8108  002E5E  D000               	goto	i2l1066
  8109  002E60                     i2l1066:
  8110  002E60  0012               	return		;funcret
  8111  002E62                     __end_of_strcmp:
  8112                           	opt stack 0
  8113                           pclatu	equ	0xFFB
  8114                           pclath	equ	0xFFA
  8115                           tblptru	equ	0xFF8
  8116                           tblptrh	equ	0xFF7
  8117                           tblptrl	equ	0xFF6
  8118                           tablat	equ	0xFF5
  8119                           prodh	equ	0xFF4
  8120                           prodl	equ	0xFF3
  8121                           intcon	equ	0xFF2
  8122                           indf0	equ	0xFEF
  8123                           postinc0	equ	0xFEE
  8124                           fsr0h	equ	0xFEA
  8125                           fsr0l	equ	0xFE9
  8126                           wreg	equ	0xFE8
  8127                           indf1	equ	0xFE7
  8128                           fsr1h	equ	0xFE2
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           pclatu	equ	0xFFB
  8137                           pclath	equ	0xFFA
  8138                           tblptru	equ	0xFF8
  8139                           tblptrh	equ	0xFF7
  8140                           tblptrl	equ	0xFF6
  8141                           tablat	equ	0xFF5
  8142                           prodh	equ	0xFF4
  8143                           prodl	equ	0xFF3
  8144                           intcon	equ	0xFF2
  8145                           indf0	equ	0xFEF
  8146                           postinc0	equ	0xFEE
  8147                           fsr0h	equ	0xFEA
  8148                           fsr0l	equ	0xFE9
  8149                           wreg	equ	0xFE8
  8150                           indf1	equ	0xFE7
  8151                           fsr1h	equ	0xFE2
  8152                           fsr1l	equ	0xFE1
  8153                           indf2	equ	0xFDF
  8154                           postinc2	equ	0xFDE
  8155                           postdec2	equ	0xFDD
  8156                           fsr2h	equ	0xFDA
  8157                           fsr2l	equ	0xFD9
  8158                           status	equ	0xFD8
  8159                           
  8160                           	psect	rparam
  8161  0000                     pclatu	equ	0xFFB
  8162                           pclath	equ	0xFFA
  8163                           tblptru	equ	0xFF8
  8164                           tblptrh	equ	0xFF7
  8165                           tblptrl	equ	0xFF6
  8166                           tablat	equ	0xFF5
  8167                           prodh	equ	0xFF4
  8168                           prodl	equ	0xFF3
  8169                           intcon	equ	0xFF2
  8170                           indf0	equ	0xFEF
  8171                           postinc0	equ	0xFEE
  8172                           fsr0h	equ	0xFEA
  8173                           fsr0l	equ	0xFE9
  8174                           wreg	equ	0xFE8
  8175                           indf1	equ	0xFE7
  8176                           fsr1h	equ	0xFE2
  8177                           fsr1l	equ	0xFE1
  8178                           indf2	equ	0xFDF
  8179                           postinc2	equ	0xFDE
  8180                           postdec2	equ	0xFDD
  8181                           fsr2h	equ	0xFDA
  8182                           fsr2l	equ	0xFD9
  8183                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    0
    Data        1
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62      97
    BANK0           128     53      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), 
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> key(COMRAM[5]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 10
		 -> value(COMRAM[10]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), keyValue@str_end(COMRAM[2]), 

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), SPIDisassembleDouble@dub(BANK0[3]), SPIReassembleDouble@dub(BANK0[3]), 

    MReceiveStrSPI@str	PTR unsigned char  size(2) Largest target is 4
		 -> DoubleSPIM(BANK0[4]), 

    keyValue@str_end	PTR unsigned char  size(2) Largest target is 10
		 -> value(COMRAM[10]), 

    keyValue@str	PTR unsigned char  size(2) Largest target is 30
		 -> received(BANK0[30]), 

    SerTxStr@string	PTR unsigned char  size(2) Largest target is 36
		 -> STR_28(CODE[4]), STR_13(CODE[6]), STR_12(CODE[4]), STR_3(CODE[11]), 
		 -> value(COMRAM[10]), STR_2(CODE[6]), key(COMRAM[5]), STR_1(CODE[36]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_RCInt
    _RCInt->_keyValue
    _keyValue->_strtod
    i2_SerTxStr->i2_SerTx
    _strtod->___ftdiv
    _strtod->i2___ftmul
    i2___ftmul->i2___ftpack
    ___ftdiv->i2___ftpack
    ___altoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_MReceiveStrSPI
    _SerInit->_SerTxStr
    _SerTxStr->_SerTx
    _SPIInitM->_OpenSPI
    _SPIDisassembleDouble->_MGenerateChecksum
    _MSendSPI->_Delay10TCYx
    _MReceiveStrSPI->_breakDouble
    _breakDouble->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10280
                                             52 BANK0      1     1      0
                        _Delay10TCYx
                     _MReceiveStrSPI
                           _MSendSPI
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _checksum
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     655
                           _SPIInitM
                            _SerInit
 ---------------------------------------------------------------------------------
 (2) _SerInit                                              0     0      0     401
                           _SerTxStr
 ---------------------------------------------------------------------------------
 (3) _SerTxStr                                             2     0      2     401
                                              1 BANK0      2     0      2
                              _SerTx
 ---------------------------------------------------------------------------------
 (2) _SPIInitM                                             0     0      0     254
                            _OpenSPI
 ---------------------------------------------------------------------------------
 (3) _OpenSPI                                              3     1      2     254
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _checksum                                             6     6      0     136
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     324
                                              2 BANK0      3     0      3
                  _MGenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _MGenerateChecksum                                    2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MSendSPI                                             4     3      1    1077
                                              1 BANK0      4     3      1
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (1) _MReceiveStrSPI                                       5     2      3    6777
                                             47 BANK0      5     2      3
                        _Delay10TCYx
                        _MReceiveSPI
                _SPIReassembleDouble
                        _breakDouble
 ---------------------------------------------------------------------------------
 (2) _breakDouble                                          9     6      3    5063
                                             38 BANK0      9     6      3
                _SPIReassembleDouble (ARG)
                              _SerTx
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     752
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     761
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     305
                                             23 BANK0     15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2626
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1798
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _SerTx                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      89
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _MReceiveSPI                                          1     1      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Delay10TCYx                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    8840
                                             48 COMRAM    14    14      0
                              _RCInt
 ---------------------------------------------------------------------------------
 (6) _RCInt                                                2     2      0    8840
                                             46 COMRAM     2     2      0
                           _keyValue
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (7) _keyValue                                            11     7      4    8661
                                             35 COMRAM    11     7      4
                            _isspace
                             _strcmp
                             _strtod
                            i2_SerTx
                         i2_SerTxStr
 ---------------------------------------------------------------------------------
 (8) i2_SerTxStr                                           2     0      2     275
                                              1 COMRAM     2     0      2
                            i2_SerTx
 ---------------------------------------------------------------------------------
 (7) i2_SerTx                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _strtod                                              12     8      4    4885
                                             23 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6     895
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _isspace                                              3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     278
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1037
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___altoft                                            10     6      4     656
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) _strcmp                                               6     2      4    2423
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _MReceiveStrSPI
     _Delay10TCYx
     _MReceiveSPI
     _SPIReassembleDouble
     _breakDouble
       _SPIReassembleDouble (ARG)
       _SerTx (ARG)
       ___ftmul (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
       ___lwdiv (ARG)
       ___lwmod (ARG)
   _MSendSPI
     _Delay10TCYx
   _SPIDisassembleDouble
     _MGenerateChecksum
   _SPIReassembleDouble
   _checksum
   _initialize
     _SPIInitM
       _OpenSPI
     _SerInit
       _SerTxStr
         _SerTx

 _ISR (ROOT)
   _RCInt
     _keyValue
       _isspace
       _strcmp
       _strtod
         ___altoft
           i2___ftpack
         ___ftdiv
           i2___ftpack
         ___ftge
         ___ftneg
         ___lmul
         _isdigit
         _isspace
         i2___ftmul
           i2___ftpack
       i2_SerTx
       i2_SerTxStr
         i2_SerTx
     i2_SerTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      5F       5       74.2%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      61       1       76.4%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0       6        0.0%
DATA                 0      0      C0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 28 03:21:02 2015

                 ___altoft@exp 0011                    _SSPSTATbits 000FC7                  ___altoft@sign 0012  
                           l50 2060                             l28 3046                             l49 200E  
                           _Kd 003F                             _Ki 0042                             _Kp 0045  
                   i2___ftpack 27E4                            l311 1606                            l315 1648  
                          l245 108A                            l406 2F28                            l430 2C8C  
                          l422 2C64                            l431 2C90                            l424 2C68  
                          l280 1364                            l425 2C6A                            l363 2DAC  
                          l372 3024                            l428 2C86                            l276 1322  
                          l429 2CA6                            l366 2DB8                            l358 2D82  
                          l391 2EE8                            l383 2914                            l376 28B6  
                          l721 303A                            l369 301C                            l811 2608  
                          l388 295A                            l397 2AEE                            l822 25D0  
                          l919 24E8                            l898 2264                            _ISR 0008  
                          _key 005D                            prod 000FF3                            wreg 000FE8  
                         ?_ISR 0001                   ___ftdiv@cntr 0012                   ___ftdiv@sign 0017  
                 __CFG_WDT$OFF 000000                           l1031 2A6A                           l1041 2C40  
                         l3000 247A                           l3002 2482                           l3010 24B8  
                         l3014 24D6                           l3006 2498                           l3008 24AA  
                         l4012 2F04                           l4100 2A80                           l4110 2AAC  
                         l4008 2EF6                           l4104 2A8E                           l4042 2D8E  
                         l4018 2F22                           l4210 11E0                           l4062 28C6  
                         l4118 2AEA                           l4230 124C                           l4206 11D2  
                         l4072 28EE                           l4312 13EC                           l4400 15C8  
                         l4216 11FE                           l4066 28D0                           l4250 12B8  
                         l4226 123E                           l4170 1108                           l4138 1070  
                         l4084 2924                           l4076 2906                           l4332 1458  
                         l4308 13DE                           l4236 126A                           l4156 10BA  
                         l4094 2950                           l4422 1624                           l4318 140A  
                         l4246 12AA                           l4190 1174                           l4166 10FA  
                         l4088 292E                           l4408 15E6                           l4352 14C4  
                         l4328 144A                           l4280 1340                           l4256 12D6  
                         l4176 1126                           l3810 255C                           l3802 2504  
                         l4418 1616                           l4338 1476                           l4266 1302  
                         l4186 1166                           l4258 12E4                           l3900 2222  
                         l4372 1530                           l4348 14B6                           l4276 1332  
                         l4196 1192                           l3830 25FA                           l3814 257E  
                         l3806 251A                           l4358 14E2                           l4286 1368  
                         l3824 25DC                           l3816 25B0                           l3808 252A  
                         l3904 223E                           l3840 2CDE                           l4392 159C  
                         l4368 1522                           l3818 25C0                           l3914 2A10  
                         l4378 154E                           l4298 139E                           l3916 2A1E  
                         l3852 2C6E                           l3836 2CB0                           l4388 158E  
                         l3926 2A5A                           l3918 2A28                           l3942 2C30  
                         l3934 2BF2                           l4398 15BA                           l3872 216E  
                         l3936 2C00                           l3856 2C94                           l3890 21DE  
                         l3866 2134                           l2978 23E2                           l3938 2C0A  
                         l3868 215A                           l2996 2466                           l3894 21FA  
                         l3886 21BE                           l3896 2202                           l3988 302A  
                         STR_1 1001                           STR_2 1030                           STR_3 1025  
                         STR_4 103E                           STR_5 1046                           STR_6 1050  
                         STR_7 105C                           STR_8 104D                           STR_9 1059  
                         _AZEL 00DE                           u3241 23CE                           u3260 2408  
                         u3265 23FE                           u4820 2CD2                           u4830 2D00  
                         u4851 2120                           u4827 2CC8                           i2l28 3062  
                         u4837 2CF6                           u4871 214A                           u5777 302C  
                         i2l99 226C                           _main 1064                   ___ftpack@arg 0080  
                 ___ftpack@exp 0083                           fsr0h 000FEA                           fsr1h 000FE2  
              __end_ofi2_SerTx 3068                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           indf1 000FE7                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 0018  
            MReceiveSPI@tempCH 0080                   ___ftmul@cntr 0095                   i2___ftmul@f1 0009  
                 i2___ftmul@f2 000C                   ___param_bank 000010                   ___ftmul@sign 0096  
                  _MReceiveSPI 3010                          ??_ISR 0031                    _Delay10TCYx 3026  
                 ___fttol@exp1 00A5                __end_of_OpenSPI 2CAE                __end_of_SerInit 2FB2  
                 ___fttol@lval 00A1              _MGenerateChecksum 2EEA                          ?_main 0001  
           ?_MGenerateChecksum 0001                          STR_10 104A                          STR_11 1056  
                        STR_20 103A                          STR_12 1036                          STR_13 1030  
                        STR_21 1042                          STR_22 1050                          STR_14 1053  
                        STR_23 105C                          STR_15 105F                          STR_24 104D  
                        STR_16 103B                          STR_25 1059                          STR_17 1043  
                        STR_26 104A                          STR_18 103E                          STR_27 1056  
                        STR_19 1046                          STR_28 1036                __end_of___ftdiv 27E4  
              __end_of___ftneg 2FD6                __end_of___ftmul 2266                __end_of___fttol 24EA  
              __end_of___lwdiv 2A74                          i2l112 23B4                __end_of___lwmod 2C4A  
                        i2l322 2BA4                          i2l532 2B6A                          i2l622 1CAC  
                        i2l624 1CB4                          i2l641 1F80                          i2l811 28A8  
                        i2l651 1F50                          i2l822 2880                          i2l908 2FC8  
                        i2l934 2FF6                          i2l883 27E2                          i2l939 2F88  
                        i2l892 29F0                          i2l886 27AE                          i2l898 2700  
                        _RCREG 000FAE                          _SPBRG 000FAF                          _RCInt 2266  
       ??_SPIDisassembleDouble 0085            ___lmul@multiplicand 0005                 __CFG_FCMEN$OFF 000000  
                        _SerTx 303C            ??_MGenerateChecksum 0080                __end_of_isdigit 2FF8  
                ___ftpack@sign 0084                          _value 0053               __end_of_SPIInitM 3010  
                   _DoubleSPIM 00DA                          main@x 00B4                __end_of_isspace 2F8A  
                        tablat 000FF5                          status 000FD8               __end_of_MSendSPI 2DBA  
           __size_ofi2___ftmul 00F8                    ?i2_SerTxStr 0002                __initialization 2F2A  
    __end_of_MGenerateChecksum 2F2A                   __end_of_main 1650                  i2___ftmul@exp 0012  
               __CFG_OSC$HSPLL 000000                    ?i2___ftpack 0001                  _StrippedValue 004B  
                  keyValue@str 0024                         ??_main 00B4                  ___fttol@sign1 00A0  
         __size_of_breakDouble 0188               __end_of_SerTxStr 2D08                  __activetblptr 000002  
                       ?_RCInt 0001                         ?_SerTx 0001               __end_of___altoft 2B6C  
                    ??i2_SerTx 0001            MReceiveStrSPI@Slave 00B1               __end_of___ftpack 260A  
          MReceiveStrSPI@x_736 00B3                         i2l1066 2E60                         i2l3100 165A  
                       i2l3112 16AC                         i2l3210 19E6                         i2l3202 19A0  
                       i2l3122 170A                         i2l3106 1678                         i2l3132 173C  
                       i2l3124 170E                         i2l3108 167E                         i2l2502 2888  
                       i2l3062 2DE8                         i2l3230 1A7A                         i2l3222 1A36  
                       i2l3214 19F2                         i2l3206 19AE                         i2l3150 17E2  
                       i2l3118 16CA                         i2l3128 171E                         i2l2602 2748  
                       i2l2530 2D1A                         i2l2522 2F7A                         i2l3058 2DBC  
                       i2l3242 1AF6                         i2l3234 1AB2                         i2l3226 1A6E  
                       i2l3218 1A2A                         i2l3170 18A2                         i2l3162 185E  
                       i2l3154 181A                         i2l3250 1B14                         i2l3146 17D6  
                       i2l3138 1766                         i2l2508 289A                         i2l2524 2F80  
                       i2l2622 2788                         i2l2534 2D30                         i2l2702 2696  
                       i2l3270 1B64                         i2l3254 1B38                         i2l3246 1B02  
                       i2l3238 1ABE                         i2l3182 18CA                         i2l3174 18AE  
                       i2l3166 186A                         i2l3158 1826                         i2l3342 22BA  
                       i2l2480 27F4                         i2l2632 27BC                         i2l2712 26C4  
                       i2l2800 1CF6                         i2l3264 1B58                         i2l3248 1B0E  
                       i2l2730 2E14                         i2l2706 26AC                         i2l2802 1D06  
                       i2l3282 1B88                         i2l3266 1B5C                         i2l3258 1B40  
                       i2l3194 195A                         i2l3186 18F2                         i2l3178 18BE  
                       i2l3354 230E                         i2l3346 22C4                         i2l2732 2E1E  
                       i2l2492 2848                         i2l2484 2804                         i2l2652 298E  
                       i2l2644 2FEE                         i2l2716 26DA                         i2l2708 26B2  
                       i2l2804 1D0C                         i2l3276 1B7C                         i2l3372 236C  
                       i2l3348 22DA                         i2l2494 2868                         i2l2486 2810  
                       i2l2582 2B12                         i2l2662 29EC                         i2l2902 1F72  
                       i2l2806 1D12                         i2l3278 1B80                         i2l3198 1968  
                       i2l3382 239E                         i2l3374 2372                         i2l2736 2E54  
                       i2l2496 2874                         i2l2488 2830                         i2l2584 2B20  
                       i2l2656 29C0                         i2l2680 2642                         i2l2824 1DA0  
                       i2l2760 1C02                         i2l2744 1BC6                         i2l3288 1BA0  
                       i2l2746 1BCC                         i2l3378 2388                         i2l2596 2720  
                       i2l2684 2650                         i2l2852 1E32                         i2l2844 1DFC  
                       i2l2836 1DC8                         i2l2828 1DA8                         i2l2772 1C34  
                       i2l2756 1BF4                         i2l2598 273A                         i2l2678 2628  
                       i2l2854 1E40                         i2l2790 1CBA                         i2l2766 1C1C  
                       i2l2758 1BFC                         i2l2880 1ED4                         i2l2848 1E04  
                       i2l2872 1E98                         i2l2776 1C4A                         i2l2698 2684  
                       i2l2882 1EDC                         i2l2858 1E6C                         i2l2876 1EA6  
                       i2l2796 1CDE                         i2l2886 1F08                         i2l2896 1F40  
                       u262_41 2712                         _RCREG1 000FAE                         u264_41 2730  
                       u274_41 261A                         u276_41 2638                         _RCSTA1 000FAB  
                       _SSPBUF 000FC9                         _TXREG1 000FAD                         _RCflag 00BB  
                       _TXSTA1 000FAC               __end_of_checksum 2AF0                         SerTx@c 0080  
                    ??_OpenSPI 0082                      ??_SerInit 0083                         ___ftge 295C  
                       ___lmul 2D08                 keyValue@length 0026                      ??___ftdiv 000F  
                    ??___ftneg 0004                      ??___ftmul 008E                      ??___fttol 009B  
             __end_of_keyValue 1BAC                      ??___lwdiv 0084                      ??___lwmod 0084  
             i2SerTxStr@string 0002                         clear_0 2F30                         clear_1 2F3C  
                       _strcmp 2E12                         _strtod 1BAC          ___ftmul@f3_as_product 0092  
                    ??_isdigit 0001              __end_ofi2___ftmul 2702                   __mediumconst 0000  
                    ??_isspace 0001                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8            __size_ofi2_SerTxStr 0058                     __accesstop 0080  
      __end_of__initialization 2F54                     ___altoft@c 0009            __size_ofi2___ftpack 00C6  
                   ___ftge@ff1 0001                     ___ftge@ff2 0004                  ___rparam_used 000001  
                   ___ftdiv@f1 0009                     ___ftdiv@f2 000C                     ___ftdiv@f3 0013  
                   ___ftneg@f1 0001                 i2___ftpack@arg 0001                  __end_of_RCInt 23B8  
               i2___ftpack@exp 0004                     ___ftmul@f1 0088                     ___ftmul@f2 008B  
                   ___fttol@f1 0097                 __pcstackCOMRAM 0001                  __end_of_SerTx 304C  
   __size_of_MGenerateChecksum 0040                   __pidataBANK0 3068                 i2___ftmul@cntr 0016  
               i2___ftmul@sign 0017                      ?_SPIInitM 0001   __size_of_SPIReassembleDouble 0044  
                    ?_MSendSPI 0081                        ??_RCInt 002F              MReceiveStrSPI@str 00AF  
                      ??_SerTx 0080                   keyValue@flag 002C                     __pbssBANK0 00B5  
              MReceiveStrSPI@x 00B2                      ?_SerTxStr 0081                   ?_MReceiveSPI 0001  
                      ?___ftge 0001                        ?___lmul 0001                   ?_Delay10TCYx 0001  
                    ?___altoft 0009                        _BAUDCON 000FB8                 ___lmul@product 0009  
                   ??_SPIInitM 0083                      ?___ftpack 0080                        ?_strcmp 0001  
                      ?_strtod 0018                     ??_MSendSPI 0082                      ?_checksum 0001  
      __size_of_MReceiveStrSPI 00B2                  _PIDEnableFlag 0050                        _SSPCON1 000FC6  
               SerTxStr@string 0081                        i2_SerTx 305A                        _SSPSTAT 000FC7  
                    ?_keyValue 0024                   ??i2_SerTxStr 0004                     ??_SerTxStr 0083  
                      _OpenSPI 2C4A                        __Hparam 0000                        _SerInit 2F8A  
                      __Lparam 0000                __size_of___ftge 0096                __size_of___lmul 005A  
                      ___ftdiv 2702                        ___ftneg 2FB2                        ___ftmul 210A  
                      ___fttol 23B8                        ___lwdiv 29F2                        ___lwmod 2BDE  
                 __psmallconst 1000                     ??___altoft 000D                        __pcinit 2F2A  
                 ??i2___ftpack 0006                     ??___ftpack 0085                Delay10TCYx@unit 0080  
      i2___ftmul@f3_as_product 0013                        __ramtop 1000                     _initialize 304C  
                      __ptext0 1064                        __ptext1 304C                        __ptext2 2F8A  
                      __ptext3 2CAE                        __ptext4 2FF8                        __ptext5 2C4A  
                      __ptext6 2A74                        __ptext7 2E62                        __ptext8 2EEA  
                      __ptext9 2D62                __size_of_strcmp 0050                   __size_of_ISR 2BD6  
              __size_of_strtod 03D6                        _isdigit 2FD6                keyValue@str_end 002A  
                   ??_checksum 0080                   MSendSPI@data 0084                        _isspace 2F5E  
__size_of_SPIDisassembleDouble 0044             __end_ofi2_SerTxStr 2E12                 __pintcode_body 2B6C  
         end_of_initialization 2F54                     ??_keyValue 0028                  __Lmediumconst 0000  
                      int_func 2B6C             __end_ofi2___ftpack 28AA                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                  ??_breakDouble 00A9  
                      strcmp@r 0006                        strtod@s 0018                      _PORTAbits 000F80  
                    _TRISAbits 000F92                      _TRISCbits 000F94                      i2___ftmul 260A  
                  ___ftdiv@exp 0016            _SPIReassembleDouble 2EA6                i2___ftpack@sign 0005  
                  ___ftmul@exp 0091                    _StrippedKey 0052                 __end_of___ftge 29F2  
         __size_of_MReceiveSPI 0016                 __end_of___lmul 2D62           __size_of_Delay10TCYx 0016  
                  ?_initialize 0001               OpenSPI@smp_phase 0081           ?_SPIReassembleDouble 0080  
                    _DoublePtr 004E              __size_of_SPIInitM 0018                 __end_of_strcmp 2E62  
               _MReceiveStrSPI 28AA                 __end_of_strtod 1F82            __end_of_breakDouble 210A  
          start_initialization 2F2A                _CurrentVelocity 00B8                   _CurrentAngle 00B5  
                  __end_of_ISR 2BDE              __size_of_MSendSPI 0058                     ?i2___ftmul 0009  
             OpenSPI@sync_mode 0082                       ??___ftge 0007                       ??___lmul 0009  
            __size_of_SerTxStr 005A                    __pdataBANK0 00DE         __end_of_MReceiveStrSPI 295C  
        ??_SPIReassembleDouble 0083                       ??_strcmp 0005                       ??_strtod 001C  
            __size_of___altoft 007C              __size_of___ftpack 0120                    __pbssCOMRAM 003F  
                __pcstackBANK0 0080                   _ReceivedChar 0051                   _isdigit$1327 0002  
            __size_of_checksum 007C                       ?i2_SerTx 0001           MSendSPI@tempChar_727 0083  
          __size_of_initialize 000E              __size_of_keyValue 055C         SPIReassembleDouble@dub 0083  
                     ?_OpenSPI 0080                       ?_SerInit 0001               ___lwdiv@dividend 0080  
                    __pintcode 0008               breakDouble@temp1 00AB               breakDouble@temp2 00AD  
                     ?___ftdiv 0009                       ?___ftneg 0001                       ?___ftmul 0088  
                     ?___fttol 0097                       ?___lwdiv 0080                       ?___lwmod 0080  
                  _breakDouble 1F82             breakDouble@tempDub 00A9                ?_MReceiveStrSPI 00AF  
                  __smallconst 1000                       ?_isdigit 0001                 __size_of_RCInt 0152  
                     ?_isspace 0001                 __size_of_SerTx 0010               ___lwdiv@quotient 0085  
                  ??i2___ftmul 000F                      checksum@y 0085                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D   __end_of_SPIDisassembleDouble 2EA6                       _PIR1bits 000F9E  
                     i2u338_40 2DDE                       i2u338_47 2DD4                       i2u339_40 2E0A  
                     i2u339_47 2E00                       i2u393_40 235C                       _RCONbits 000FD0  
                  strtod@flags 001E                    strtod@expon 001F                       i2SerTx@c 0001  
                     _SPIInitM 2FF8                OpenSPI@bus_mode 0080                       _MSendSPI 2D62  
                 _isspace$1330 0002              ___lmul@multiplier 0001               __size_ofi2_SerTx 000E  
                    keyValue@x 002E                      keyValue@y 002D                       _SetAngle 0048  
                     _SerTxStr 2CAE                       __Hrparam 0000                       __Lrparam 0000  
             __size_of_OpenSPI 0064               __size_of_SerInit 0028               __size_of___ftdiv 00E2  
             __size_of___ftneg 0024                       ___altoft 2AF0               __size_of___ftmul 015C  
             __size_of___fttol 0132               __size_of___lwdiv 0082               __size_of___lwmod 006C  
                 ??_initialize 0083                       ___ftpack 24EA                       _checksum 2A74  
             __size_of_isdigit 0022           MGenerateChecksum@sum 0080                ___lwdiv@divisor 0082  
              breakDouble@dubs 00A6               __size_of_isspace 002C                ___lwdiv@counter 0084  
                 RCInt@counter 0030                       __ptext10 28AA                       __ptext11 1F82  
                     __ptext20 3026                       __ptext12 2BDE                       __ptext13 29F2  
                     __ptext30 2D08                       __ptext22 2266                       __ptext14 23B8  
                     __ptext31 2FB2                       __ptext23 1650                       __ptext15 210A  
                     __ptext32 295C                       __ptext24 2DBA                       __ptext16 24EA  
                     __ptext33 2702                       __ptext25 305A                       __ptext17 303C  
                     __ptext34 2AF0                       __ptext26 1BAC                       __ptext18 2EA6  
                     __ptext35 27E4                       __ptext27 260A                       __ptext19 3010  
                     __ptext36 2E12                       __ptext28 2F5E                       __ptext29 2FD6  
                  checksum@sum 0084                       _keyValue 1650                  __size_of_main 05EC  
                MSendSPI@Slave 0081                       _received 00BC             __end_of_initialize 305A  
                ??_MReceiveSPI 0080                  ??_Delay10TCYx 0080                     strtod@eexp 001D  
                   _INTCONbits 000FF2           _SPIDisassembleDouble 2E62                       isdigit@c 0003  
                     intlevel2 0000               MSendSPI@tempChar 0082               ___lwmod@dividend 0080  
                     isspace@c 0003                      strtod@res 001A    __end_of_SPIReassembleDouble 2EEA  
             ??_MReceiveStrSPI 00B2                   ?_breakDouble 00A6            __end_of_MReceiveSPI 3026  
          __end_of_Delay10TCYx 303C             MGenerateChecksum@z 0081                       strcmp@s1 0001  
                     strcmp@s2 0003                ___lwmod@divisor 0082                ___lwmod@counter 0084  
        ?_SPIDisassembleDouble 0082                       strtod@_u 0020                    _SSPCON1bits 000FC6  
      SPIDisassembleDouble@dub 0082                     i2_SerTxStr 2DBA  
