

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Oct 30 03:35:42 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  001720                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _DeadbandHigh
    75  001720  00C8               	dw	200
    76                           
    77                           ;initializer for _DeadbandLow
    78  001722  FF38               	dw	65336
    79                           
    80                           	psect	idataBANK0
    81  001724                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _loopTime
    85                           ;PID.c: 5: unsigned char PIDEnableFlag;
    86                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    87                           ;PID.c: 7: double Ki;
    88                           ;PID.c: 8: double Kp;
    89                           ;PID.c: 9: double Kd;
    90                           ;PID.c: 10: double SetAngle;
    91                           ;PID.c: 11: double CurrentAngle;
    92                           ;PID.c: 12: double error;
    93                           ;PID.c: 13: double prevErr;
    94                           ;PID.c: 14: double intErr;
    95                           ;PID.c: 15: int motorInput;
    96  001724  C3                 	db	195
    97  001725  F5                 	db	245
    98  001726  3C                 	db	60
    99  0000                     _ADCON0	set	4034
   100  0000                     _ADCON0bits	set	4034
   101  0000                     _ADCON1	set	4033
   102  0000                     _ADCON2	set	4032
   103  0000                     _ADRESH	set	4036
   104  0000                     _ADRESL	set	4035
   105  0000                     _CCP3CON	set	4023
   106  0000                     _CCP3CONbits	set	4023
   107  0000                     _CCPR3L	set	4024
   108  0000                     _EEADR	set	4009
   109  0000                     _EEADRH	set	4010
   110  0000                     _EECON1bits	set	4006
   111  0000                     _EECON2	set	4007
   112  0000                     _EEDATA	set	4008
   113  0000                     _HLVDCON	set	4050
   114  0000                     _INTCON	set	4082
   115  0000                     _INTCON2bits	set	4081
   116  0000                     _INTCONbits	set	4082
   117  0000                     _IPR2bits	set	4002
   118  0000                     _OSCCONbits	set	4051
   119  0000                     _PIE1bits	set	3997
   120  0000                     _PIE2bits	set	4000
   121  0000                     _PIR1bits	set	3998
   122  0000                     _PIR2bits	set	4001
   123  0000                     _PORTA	set	3968
   124  0000                     _PORTAbits	set	3968
   125  0000                     _PORTB	set	3969
   126  0000                     _PORTBbits	set	3969
   127  0000                     _PORTC	set	3970
   128  0000                     _PORTCbits	set	3970
   129  0000                     _PORTD	set	3971
   130  0000                     _PORTE	set	3972
   131  0000                     _PORTEbits	set	3972
   132  0000                     _PORTF	set	3973
   133  0000                     _PORTG	set	3974
   134  0000                     _PORTH	set	3975
   135  0000                     _PORTJ	set	3976
   136  0000                     _PORTJbits	set	3976
   137  0000                     _PR2	set	4043
   138  0000                     _SSP1BUF	set	4041
   139  0000                     _SSP1CON1	set	4038
   140  0000                     _SSP1CON1bits	set	4038
   141  0000                     _SSP1STAT	set	4039
   142  0000                     _SSP1STATbits	set	4039
   143  0000                     _T0CON	set	4053
   144  0000                     _T0CONbits	set	4053
   145  0000                     _T2CON	set	4042
   146  0000                     _T3CON	set	4017
   147  0000                     _TMR0H	set	4055
   148  0000                     _TMR0L	set	4054
   149  0000                     _TRISAbits	set	3986
   150  0000                     _TRISBbits	set	3987
   151  0000                     _TRISCbits	set	3988
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISEbits	set	3990
   154  0000                     _TRISFbits	set	3991
   155  0000                     _TRISGbits	set	3992
   156  0000                     _TRISH	set	3993
   157  0000                     _TRISJbits	set	3994
   158                           
   159                           ; #config settings
   160  0000                     
   161                           	psect	cinit
   162  00109C                     __pcinit:
   163                           	opt stack 0
   164  00109C                     start_initialization:
   165                           	opt stack 0
   166  00109C                     __initialization:
   167                           	opt stack 0
   168                           
   169                           ; Clear objects allocated to BANK0 (31 bytes)
   170  00109C  EE00  F096         	lfsr	0,__pbssBANK0
   171  0010A0  0E1F               	movlw	31
   172  0010A2                     clear_0:
   173  0010A2  6AEE               	clrf	postinc0,c
   174  0010A4  06E8               	decf	wreg,f,c
   175  0010A6  E1FD               	bnz	clear_0
   176                           
   177                           ; Clear objects allocated to COMRAM (13 bytes)
   178  0010A8  EE00  F036         	lfsr	0,__pbssCOMRAM
   179  0010AC  0E0D               	movlw	13
   180  0010AE                     clear_1:
   181  0010AE  6AEE               	clrf	postinc0,c
   182  0010B0  06E8               	decf	wreg,f,c
   183  0010B2  E1FD               	bnz	clear_1
   184                           
   185                           ; Initialize objects allocated to BANK0 (3 bytes)
   186                           ; load TBLPTR registers with __pidataBANK0
   187  0010B4  0E24               	movlw	low __pidataBANK0
   188  0010B6  6EF6               	movwf	tblptrl,c
   189  0010B8  0E17               	movlw	high __pidataBANK0
   190  0010BA  6EF7               	movwf	tblptrh,c
   191  0010BC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   192  0010BE  6EF8               	movwf	tblptru,c
   193  0010C0  0009               	tblrd		*+	;fetch initializer
   194  0010C2  CFF5 F0B5          	movff	tablat,__pdataBANK0
   195  0010C6  0009               	tblrd		*+	;fetch initializer
   196  0010C8  CFF5 F0B6          	movff	tablat,__pdataBANK0+1
   197  0010CC  0009               	tblrd		*+	;fetch initializer
   198  0010CE  CFF5 F0B7          	movff	tablat,__pdataBANK0+2
   199                           
   200                           ; Initialize objects allocated to COMRAM (4 bytes)
   201                           ; load TBLPTR registers with __pidataCOMRAM
   202  0010D2  0E20               	movlw	low __pidataCOMRAM
   203  0010D4  6EF6               	movwf	tblptrl,c
   204  0010D6  0E17               	movlw	high __pidataCOMRAM
   205  0010D8  6EF7               	movwf	tblptrh,c
   206  0010DA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   207  0010DC  6EF8               	movwf	tblptru,c
   208  0010DE  EE00  F043         	lfsr	0,__pdataCOMRAM
   209  0010E2  EE10 F004          	lfsr	1,4
   210  0010E6                     copy_data0:
   211  0010E6  0009               	tblrd		*+
   212  0010E8  CFF5 FFEE          	movff	tablat,postinc0
   213  0010EC  50E5               	movf	postdec1,w,c
   214  0010EE  50E1               	movf	fsr1l,w,c
   215  0010F0  E1FA               	bnz	copy_data0
   216  0010F2                     end_of_initialization:
   217                           	opt stack 0
   218  0010F2                     __end_of__initialization:
   219                           	opt stack 0
   220  0010F2  0100               	movlb	0
   221  0010F4  EF0E  F000         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           postdec1	equ	0xFE5
   229                           fsr1l	equ	0xFE1
   230                           
   231                           	psect	bssCOMRAM
   232  000036                     __pbssCOMRAM:
   233                           	opt stack 0
   234  000036                     _DoubleSPIS:
   235                           	opt stack 0
   236  000036                     	ds	4
   237  00003A                     _DDouble:
   238                           	opt stack 0
   239  00003A                     	ds	3
   240  00003D                     _SetAngle:
   241                           	opt stack 0
   242  00003D                     	ds	3
   243  000040                     _DoublePtr:
   244                           	opt stack 0
   245  000040                     	ds	2
   246  000042                     _PIDEnableFlag:
   247                           	opt stack 0
   248  000042                     	ds	1
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           postdec1	equ	0xFE5
   256                           fsr1l	equ	0xFE1
   257                           
   258                           	psect	dataCOMRAM
   259  000043                     __pdataCOMRAM:
   260                           	opt stack 0
   261  000043                     _DeadbandHigh:
   262                           	opt stack 0
   263  000043                     	ds	2
   264  000045                     _DeadbandLow:
   265                           	opt stack 0
   266  000045                     	ds	2
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssBANK0
   277  000096                     __pbssBANK0:
   278                           	opt stack 0
   279  000096                     _CurrentAngle:
   280                           	opt stack 0
   281  000096                     	ds	3
   282  000099                     _CurrentVelocity:
   283                           	opt stack 0
   284  000099                     	ds	3
   285  00009C                     _Kd:
   286                           	opt stack 0
   287  00009C                     	ds	3
   288  00009F                     _Ki:
   289                           	opt stack 0
   290  00009F                     	ds	3
   291  0000A2                     _Kp:
   292                           	opt stack 0
   293  0000A2                     	ds	3
   294  0000A5                     _error:
   295                           	opt stack 0
   296  0000A5                     	ds	3
   297  0000A8                     _intErr:
   298                           	opt stack 0
   299  0000A8                     	ds	3
   300  0000AB                     _prevErr:
   301                           	opt stack 0
   302  0000AB                     	ds	3
   303  0000AE                     _motorInput:
   304                           	opt stack 0
   305  0000AE                     	ds	2
   306  0000B0                     _Command:
   307                           	opt stack 0
   308  0000B0                     	ds	1
   309  0000B1                     _JSEnableFlag:
   310                           	opt stack 0
   311  0000B1                     	ds	1
   312  0000B2                     _SPIflag:
   313                           	opt stack 0
   314  0000B2                     	ds	1
   315  0000B3                     _TMR0Flag:
   316                           	opt stack 0
   317  0000B3                     	ds	1
   318  0000B4                     _dummy_byte:
   319                           	opt stack 0
   320  0000B4                     	ds	1
   321                           tblptru	equ	0xFF8
   322                           tblptrh	equ	0xFF7
   323                           tblptrl	equ	0xFF6
   324                           tablat	equ	0xFF5
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           postdec1	equ	0xFE5
   328                           fsr1l	equ	0xFE1
   329                           
   330                           	psect	dataBANK0
   331  0000B5                     __pdataBANK0:
   332                           	opt stack 0
   333  0000B5                     _loopTime:
   334                           	opt stack 0
   335  0000B5                     	ds	3
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           postdec1	equ	0xFE5
   343                           fsr1l	equ	0xFE1
   344                           
   345                           	psect	cstackBANK0
   346  000060                     __pcstackBANK0:
   347                           	opt stack 0
   348  000060                     ?___ftmul:
   349                           	opt stack 0
   350  000060                     ___ftmul@f1:
   351                           	opt stack 0
   352                           
   353                           ; 3 bytes @ 0x0
   354  000060                     	ds	3
   355  000063                     ___ftmul@f2:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x3
   359  000063                     	ds	3
   360  000066                     ___ftmul@exp:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x6
   364  000066                     	ds	1
   365  000067                     ___ftmul@f3_as_product:
   366                           	opt stack 0
   367                           
   368                           ; 3 bytes @ 0x7
   369  000067                     	ds	3
   370  00006A                     ___ftmul@cntr:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0xA
   374  00006A                     	ds	1
   375  00006B                     ___ftmul@sign:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0xB
   379  00006B                     	ds	1
   380  00006C                     ?___ftadd:
   381                           	opt stack 0
   382  00006C                     ?_RTD2Angle:
   383                           	opt stack 0
   384  00006C                     RTD2Angle@RTDAngle:
   385                           	opt stack 0
   386  00006C                     ___ftadd@f1:
   387                           	opt stack 0
   388                           
   389                           ; 3 bytes @ 0xC
   390  00006C                     	ds	3
   391  00006F                     ___ftadd@f2:
   392                           	opt stack 0
   393                           
   394                           ; 3 bytes @ 0xF
   395  00006F                     	ds	3
   396  000072                     ??___ftadd:
   397                           
   398                           ; 0 bytes @ 0x12
   399  000072                     	ds	3
   400  000075                     ___ftadd@sign:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x15
   404  000075                     	ds	1
   405  000076                     ___ftadd@exp2:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x16
   409  000076                     	ds	1
   410  000077                     ___ftadd@exp1:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x17
   414  000077                     	ds	1
   415  000078                     ?___ftsub:
   416                           	opt stack 0
   417  000078                     ?___fttol:
   418                           	opt stack 0
   419  000078                     ___ftsub@f1:
   420                           	opt stack 0
   421  000078                     ___fttol@f1:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x18
   425  000078                     	ds	3
   426  00007B                     ___ftsub@f2:
   427                           	opt stack 0
   428                           
   429                           ; 3 bytes @ 0x1B
   430  00007B                     	ds	1
   431  00007C                     ??___fttol:
   432                           
   433                           ; 0 bytes @ 0x1C
   434  00007C                     	ds	5
   435  000081                     ___fttol@sign1:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x21
   439  000081                     	ds	1
   440  000082                     ___fttol@lval:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x22
   444  000082                     	ds	4
   445  000086                     ___fttol@exp1:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x26
   449  000086                     	ds	1
   450  000087                     calculatePID@angle:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x27
   454  000087                     	ds	3
   455  00008A                     calculatePID@setpoint:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0x2A
   459  00008A                     	ds	3
   460  00008D                     calculatePID@derErr:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0x2D
   464  00008D                     	ds	3
   465  000090                     _calculatePID$3286:
   466                           	opt stack 0
   467                           
   468                           ; 3 bytes @ 0x30
   469  000090                     	ds	3
   470  000093                     _calculatePID$3287:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x33
   474  000093                     	ds	3
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackCOMRAM
   485  000001                     __pcstackCOMRAM:
   486                           	opt stack 0
   487  000001                     Write_b_eep@badd:
   488                           	opt stack 0
   489  000001                     EEDisassembleDouble@dub:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x0
   493  000001                     	ds	2
   494  000003                     Write_b_eep@bdat:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x2
   498  000003                     	ds	1
   499  000004                     Write_b_eep@GIE_BIT_VAL:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x3
   503  000004                     	ds	1
   504  000005                     EEWriteChar@ch:
   505                           	opt stack 0
   506  000005                     EEWriteDouble@dub:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0x4
   510  000005                     	ds	1
   511  000006                     EEWriteChar@location:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x5
   515  000006                     	ds	2
   516  000008                     EEWriteDouble@location:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x7
   520  000008                     	ds	1
   521  000009                     EEWriteDouble@x:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x8
   525  000009                     	ds	1
   526  00000A                     ??_ISR:
   527                           
   528                           ; 0 bytes @ 0x9
   529  00000A                     	ds	16
   530  00001A                     ?_abs:
   531                           	opt stack 0
   532  00001A                     ?_DetectMovement:
   533                           	opt stack 0
   534  00001A                     ?___ftpack:
   535                           	opt stack 0
   536  00001A                     ?_SPIReassembleDouble:
   537                           	opt stack 0
   538  00001A                     ?_EEReassembleDouble:
   539                           	opt stack 0
   540  00001A                     ?___ftneg:
   541                           	opt stack 0
   542  00001A                     SendSPI1@temp:
   543                           	opt stack 0
   544  00001A                     GenerateChecksum@sum:
   545                           	opt stack 0
   546  00001A                     OpenSPI1@bus_mode:
   547                           	opt stack 0
   548  00001A                     Delay10TCYx@unit:
   549                           	opt stack 0
   550  00001A                     Delay1KTCYx@unit:
   551                           	opt stack 0
   552  00001A                     Delay1TCYx@unit:
   553                           	opt stack 0
   554  00001A                     Read_b_eep@badd:
   555                           	opt stack 0
   556  00001A                     abs@a:
   557                           	opt stack 0
   558  00001A                     ___ftpack@arg:
   559                           	opt stack 0
   560  00001A                     ___ftge@ff1:
   561                           	opt stack 0
   562  00001A                     ___ftneg@f1:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x19
   566  00001A                     	ds	1
   567  00001B                     ?_ReadRTDpos:
   568                           	opt stack 0
   569  00001B                     SendSPI1@data:
   570                           	opt stack 0
   571  00001B                     GenerateChecksum@y:
   572                           	opt stack 0
   573  00001B                     OpenSPI1@smp_phase:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x1A
   577  00001B                     	ds	1
   578  00001C                     ??_abs:
   579  00001C                     ??_DetectMovement:
   580  00001C                     EEReadChar@location:
   581                           	opt stack 0
   582  00001C                     OpenSPI1@sync_mode:
   583                           	opt stack 0
   584  00001C                     SPIDisassembleDouble@dub:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x1B
   588  00001C                     	ds	1
   589  00001D                     ??_ReadRTDpos:
   590  00001D                     EEReadChar@ch:
   591                           	opt stack 0
   592  00001D                     ___ftpack@exp:
   593                           	opt stack 0
   594  00001D                     DetectMovement@JoystickResult:
   595                           	opt stack 0
   596  00001D                     SPIReassembleDouble@dub:
   597                           	opt stack 0
   598  00001D                     EEReassembleDouble@dub:
   599                           	opt stack 0
   600  00001D                     ___ftge@ff2:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x1C
   604  00001D                     	ds	1
   605  00001E                     ___ftpack@sign:
   606                           	opt stack 0
   607  00001E                     ImplementPIDMotion@PIDValue:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x1D
   611  00001E                     	ds	1
   612  00001F                     ??___ftpack:
   613  00001F                     DetectMovement@ADCresult:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x1E
   617  00001F                     	ds	1
   618  000020                     ??_ImplementPIDMotion:
   619  000020                     ??___ftge:
   620  000020                     ?_EEReadDouble:
   621                           	opt stack 0
   622  000020                     ReadRTDpos@HighPosition:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x1F
   626  000020                     	ds	1
   627  000021                     ReadRTDpos@LowPosition:
   628                           	opt stack 0
   629  000021                     ImplementJSMotion@JoystickValue:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x20
   633  000021                     	ds	1
   634  000022                     ?___ftdiv:
   635                           	opt stack 0
   636  000022                     ?___lwtoft:
   637                           	opt stack 0
   638  000022                     ReadRTDpos@FullPosition:
   639                           	opt stack 0
   640  000022                     ___lwtoft@c:
   641                           	opt stack 0
   642  000022                     ___ftdiv@f1:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x21
   646  000022                     	ds	1
   647  000023                     ??_ImplementJSMotion:
   648  000023                     EEReadDouble@location:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x22
   652  000023                     	ds	1
   653  000024                     ReadRTDpos@x:
   654                           	opt stack 0
   655  000024                     EEReadDouble@x:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x23
   659  000024                     	ds	1
   660  000025                     ??_EEBootUp:
   661  000025                     ImplementJSMotion@CCPinput:
   662                           	opt stack 0
   663  000025                     ___ftdiv@f2:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x24
   667  000025                     	ds	2
   668  000027                     
   669                           ; 0 bytes @ 0x26
   670  000027                     	ds	1
   671  000028                     ??___ftdiv:
   672                           
   673                           ; 0 bytes @ 0x27
   674  000028                     	ds	3
   675  00002B                     ___ftdiv@cntr:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x2A
   679  00002B                     	ds	1
   680  00002C                     ___ftdiv@f3:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x2B
   684  00002C                     	ds	3
   685  00002F                     ___ftdiv@exp:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x2E
   689  00002F                     	ds	1
   690  000030                     ___ftdiv@sign:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x2F
   694  000030                     	ds	1
   695  000031                     ??___ftmul:
   696                           
   697                           ; 0 bytes @ 0x30
   698  000031                     	ds	3
   699  000034                     main@temporary:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x33
   703  000034                     	ds	1
   704  000035                     main@x:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x34
   708  000035                     	ds	1
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1l	equ	0xFE1
   717                           
   718 ;;
   719 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   720 ;;
   721 ;; *************** function _main *****************
   722 ;; Defined at:
   723 ;;		line 20 in file "RTDuC.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  x               1   52[COMRAM] unsigned char 
   728 ;;  temporary       1   51[COMRAM] unsigned char 
   729 ;; Return value:  Size  Location     Type
   730 ;;		None               void
   731 ;; Registers used:
   732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   742 ;;Total ram usage:        2 bytes
   743 ;; Hardware stack levels required when called:    9
   744 ;; This function calls:
   745 ;;		_DetectJoystick
   746 ;;		_DetectMovement
   747 ;;		_ImplementJSMotion
   748 ;;		_ImplementPIDMotion
   749 ;;		_RTD2Angle
   750 ;;		_ReadRTDpos
   751 ;;		_ReceiveSPI1
   752 ;;		_SPIDisassembleDouble
   753 ;;		_SPIReassembleDouble
   754 ;;		_SendSPI1
   755 ;;		_calculatePID
   756 ;;		_initialize
   757 ;; This function is called by:
   758 ;;		Startup code after reset
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text0
   763  00001C                     __ptext0:
   764                           	opt stack 0
   765  00001C                     _main:
   766                           	opt stack 22
   767                           
   768                           ;RTDuC.c: 22: unsigned char temporary, x = 0;
   769                           
   770                           ;incstack = 0
   771  00001C  0E00               	movlw	0
   772  00001E  6E35               	movwf	main@x,c
   773                           
   774                           ;RTDuC.c: 24: initialize();
   775  000020  EC8D  F00A         	call	_initialize	;wreg free
   776                           
   777                           ;RTDuC.c: 26: PORTCbits.RC6 = 0;
   778  000024  9C82               	bcf	3970,6,c	;volatile
   779                           
   780                           ;RTDuC.c: 27: SSP1BUF = dummy_byte;
   781  000026  C0B4  FFC9         	movff	_dummy_byte,4041	;volatile
   782  00002A  D000               	goto	l3800
   783  00002C                     l3800:
   784                           
   785                           ;RTDuC.c: 30: {
   786                           ;RTDuC.c: 31: if (SPIflag == 1)
   787  00002C  0100               	movlb	0	; () banked
   788  00002E  05B2               	decf	_SPIflag& (0+255),w,b
   789  000030  A4D8               	btfss	status,2,c
   790  000032  D0E7               	goto	l3894
   791                           
   792                           ; BSR set to: 0
   793                           ;RTDuC.c: 32: {
   794                           ;RTDuC.c: 33: SPIflag = 0;
   795  000034  0E00               	movlw	0
   796  000036  0100               	movlb	0	; () banked
   797  000038  6FB2               	movwf	_SPIflag& (0+255),b
   798                           
   799                           ; BSR set to: 0
   800                           ;RTDuC.c: 34: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   801  00003A  0E02               	movlw	2
   802  00003C  0100               	movlb	0	; () banked
   803  00003E  19B0               	xorwf	_Command& (0+255),w,b
   804  000040  B4D8               	btfsc	status,2,c
   805  000042  D014               	goto	l3814
   806                           
   807                           ; BSR set to: 0
   808  000044  0E03               	movlw	3
   809  000046  0100               	movlb	0	; () banked
   810  000048  19B0               	xorwf	_Command& (0+255),w,b
   811  00004A  B4D8               	btfsc	status,2,c
   812  00004C  D00F               	goto	l3814
   813                           
   814                           ; BSR set to: 0
   815  00004E  0E04               	movlw	4
   816  000050  0100               	movlb	0	; () banked
   817  000052  19B0               	xorwf	_Command& (0+255),w,b
   818  000054  B4D8               	btfsc	status,2,c
   819  000056  D00A               	goto	l3814
   820                           
   821                           ; BSR set to: 0
   822  000058  0E06               	movlw	6
   823  00005A  0100               	movlb	0	; () banked
   824  00005C  19B0               	xorwf	_Command& (0+255),w,b
   825  00005E  B4D8               	btfsc	status,2,c
   826  000060  D005               	goto	l3814
   827                           
   828                           ; BSR set to: 0
   829  000062  0E08               	movlw	8
   830  000064  0100               	movlb	0	; () banked
   831  000066  19B0               	xorwf	_Command& (0+255),w,b
   832  000068  A4D8               	btfss	status,2,c
   833  00006A  D05F               	goto	l3850
   834  00006C                     l3814:
   835                           
   836                           ; BSR set to: 0
   837                           ;RTDuC.c: 35: {
   838                           ;RTDuC.c: 36: if (Command == 0x02)
   839  00006C  0E02               	movlw	2
   840  00006E  0100               	movlb	0	; () banked
   841  000070  19B0               	xorwf	_Command& (0+255),w,b
   842  000072  A4D8               	btfss	status,2,c
   843  000074  D009               	goto	l3818
   844                           
   845                           ; BSR set to: 0
   846                           ;RTDuC.c: 37: SPIDisassembleDouble(CurrentAngle);
   847  000076  C096  F01C         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   848  00007A  C097  F01D         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   849  00007E  C098  F01E         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   850  000082  ECF8  F009         	call	_SPIDisassembleDouble	;wreg free
   851  000086  D038               	goto	l3834
   852  000088                     l3818:
   853                           
   854                           ;RTDuC.c: 38: else if (Command == 0x03)
   855  000088  0E03               	movlw	3
   856  00008A  0100               	movlb	0	; () banked
   857  00008C  19B0               	xorwf	_Command& (0+255),w,b
   858  00008E  A4D8               	btfss	status,2,c
   859  000090  D009               	goto	l3822
   860                           
   861                           ; BSR set to: 0
   862                           ;RTDuC.c: 39: SPIDisassembleDouble(CurrentVelocity);
   863  000092  C099  F01C         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   864  000096  C09A  F01D         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   865  00009A  C09B  F01E         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   866  00009E  ECF8  F009         	call	_SPIDisassembleDouble	;wreg free
   867  0000A2  D02A               	goto	l3834
   868  0000A4                     l3822:
   869                           
   870                           ;RTDuC.c: 40: else if (Command == 0x04)
   871  0000A4  0E04               	movlw	4
   872  0000A6  0100               	movlb	0	; () banked
   873  0000A8  19B0               	xorwf	_Command& (0+255),w,b
   874  0000AA  A4D8               	btfss	status,2,c
   875  0000AC  D009               	goto	l3826
   876                           
   877                           ; BSR set to: 0
   878                           ;RTDuC.c: 41: SPIDisassembleDouble(Kp);
   879  0000AE  C0A2  F01C         	movff	_Kp,SPIDisassembleDouble@dub
   880  0000B2  C0A3  F01D         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   881  0000B6  C0A4  F01E         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   882  0000BA  ECF8  F009         	call	_SPIDisassembleDouble	;wreg free
   883  0000BE  D01C               	goto	l3834
   884  0000C0                     l3826:
   885                           
   886                           ;RTDuC.c: 42: else if (Command == 0x06)
   887  0000C0  0E06               	movlw	6
   888  0000C2  0100               	movlb	0	; () banked
   889  0000C4  19B0               	xorwf	_Command& (0+255),w,b
   890  0000C6  A4D8               	btfss	status,2,c
   891  0000C8  D009               	goto	l3830
   892                           
   893                           ; BSR set to: 0
   894                           ;RTDuC.c: 43: SPIDisassembleDouble(Ki);
   895  0000CA  C09F  F01C         	movff	_Ki,SPIDisassembleDouble@dub
   896  0000CE  C0A0  F01D         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   897  0000D2  C0A1  F01E         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   898  0000D6  ECF8  F009         	call	_SPIDisassembleDouble	;wreg free
   899  0000DA  D00E               	goto	l3834
   900  0000DC                     l3830:
   901                           
   902                           ;RTDuC.c: 44: else if (Command == 0x08)
   903  0000DC  0E08               	movlw	8
   904  0000DE  0100               	movlb	0	; () banked
   905  0000E0  19B0               	xorwf	_Command& (0+255),w,b
   906  0000E2  A4D8               	btfss	status,2,c
   907  0000E4  D009               	goto	l3834
   908                           
   909                           ; BSR set to: 0
   910                           ;RTDuC.c: 45: SPIDisassembleDouble(Kd);
   911  0000E6  C09C  F01C         	movff	_Kd,SPIDisassembleDouble@dub
   912  0000EA  C09D  F01D         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   913  0000EE  C09E  F01E         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   914  0000F2  ECF8  F009         	call	_SPIDisassembleDouble	;wreg free
   915  0000F6  D000               	goto	l3834
   916  0000F8                     l3834:
   917                           
   918                           ;RTDuC.c: 46: INTCONbits.GIE = 0;
   919  0000F8  9EF2               	bcf	intcon,7,c	;volatile
   920                           
   921                           ;RTDuC.c: 47: PORTCbits.RC6 = 0;
   922  0000FA  9C82               	bcf	3970,6,c	;volatile
   923                           
   924                           ;RTDuC.c: 48: for (x = 0; x < 4; x++)
   925  0000FC  0E00               	movlw	0
   926  0000FE  6E35               	movwf	main@x,c
   927  000100  D00D               	goto	l3848
   928  000102  D00F               	goto	l484
   929  000104                     l3844:
   930                           
   931                           ;RTDuC.c: 49: SendSPI1(DoubleSPIS[x]);
   932  000104  5035               	movf	main@x,w,c
   933  000106  0D01               	mullw	1
   934  000108  0E36               	movlw	low _DoubleSPIS
   935  00010A  24F3               	addwf	prodl,w,c
   936  00010C  6ED9               	movwf	fsr2l,c
   937  00010E  0E00               	movlw	high _DoubleSPIS
   938  000110  20F4               	addwfc	prodh,w,c
   939  000112  6EDA               	movwf	fsr2h,c
   940  000114  50DF               	movf	indf2,w,c
   941  000116  EC35  F00B         	call	_SendSPI1
   942  00011A  2A35               	incf	main@x,f,c
   943  00011C                     l3848:
   944  00011C  0E03               	movlw	3
   945  00011E  6435               	cpfsgt	main@x,c
   946  000120  D7F1               	goto	l3844
   947  000122                     l484:
   948                           
   949                           ;RTDuC.c: 50: temporary = SSP1BUF;
   950  000122  CFC9 F034          	movff	4041,main@temporary	;volatile
   951                           
   952                           ;RTDuC.c: 51: INTCONbits.GIE = 1;
   953  000126  8EF2               	bsf	intcon,7,c	;volatile
   954                           
   955                           ;RTDuC.c: 52: }
   956  000128  D06A               	goto	l3892
   957  00012A                     l3850:
   958                           
   959                           ;RTDuC.c: 53: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   960  00012A  0100               	movlb	0	; () banked
   961  00012C  05B0               	decf	_Command& (0+255),w,b
   962  00012E  B4D8               	btfsc	status,2,c
   963  000130  D00F               	goto	l488
   964                           
   965                           ; BSR set to: 0
   966  000132  0E05               	movlw	5
   967  000134  0100               	movlb	0	; () banked
   968  000136  19B0               	xorwf	_Command& (0+255),w,b
   969  000138  B4D8               	btfsc	status,2,c
   970  00013A  D00A               	goto	l488
   971                           
   972                           ; BSR set to: 0
   973  00013C  0E07               	movlw	7
   974  00013E  0100               	movlb	0	; () banked
   975  000140  19B0               	xorwf	_Command& (0+255),w,b
   976  000142  B4D8               	btfsc	status,2,c
   977  000144  D005               	goto	l488
   978                           
   979                           ; BSR set to: 0
   980  000146  0E09               	movlw	9
   981  000148  0100               	movlb	0	; () banked
   982  00014A  19B0               	xorwf	_Command& (0+255),w,b
   983  00014C  A4D8               	btfss	status,2,c
   984  00014E  D057               	goto	l3892
   985  000150                     l488:
   986                           
   987                           ; BSR set to: 0
   988                           ;RTDuC.c: 54: {
   989                           ;RTDuC.c: 55: INTCONbits.GIE = 0;
   990  000150  9EF2               	bcf	intcon,7,c	;volatile
   991                           
   992                           ;RTDuC.c: 56: PORTCbits.RC6 = 0;
   993  000152  9C82               	bcf	3970,6,c	;volatile
   994                           
   995                           ; BSR set to: 0
   996                           ;RTDuC.c: 57: for (x = 0; x != 4; x++)
   997  000154  0E00               	movlw	0
   998  000156  6E35               	movwf	main@x,c
   999  000158                     l3860:
  1000                           
  1001                           ; BSR set to: 0
  1002  000158  0E04               	movlw	4
  1003  00015A  1835               	xorwf	main@x,w,c
  1004  00015C  B4D8               	btfsc	status,2,c
  1005  00015E  D00F               	goto	l490
  1006  000160  D001               	goto	l3864
  1007                           
  1008                           ; BSR set to: 0
  1009  000162  D00D               	goto	l490
  1010  000164                     l3864:
  1011                           
  1012                           ;RTDuC.c: 58: DoubleSPIS[x] = ReceiveSPI1();
  1013  000164  5035               	movf	main@x,w,c
  1014  000166  0D01               	mullw	1
  1015  000168  0E36               	movlw	low _DoubleSPIS
  1016  00016A  24F3               	addwf	prodl,w,c
  1017  00016C  6ED9               	movwf	fsr2l,c
  1018  00016E  0E00               	movlw	high _DoubleSPIS
  1019  000170  20F4               	addwfc	prodh,w,c
  1020  000172  6EDA               	movwf	fsr2h,c
  1021  000174  EC54  F00B         	call	_ReceiveSPI1	;wreg free
  1022  000178  6EDF               	movwf	indf2,c
  1023  00017A  2A35               	incf	main@x,f,c
  1024  00017C  D7ED               	goto	l3860
  1025  00017E                     l490:
  1026                           
  1027                           ;RTDuC.c: 59: INTCONbits.GIE = 1;
  1028  00017E  8EF2               	bsf	intcon,7,c	;volatile
  1029                           
  1030                           ;RTDuC.c: 60: if (Command == 0x01)
  1031  000180  0100               	movlb	0	; () banked
  1032  000182  05B0               	decf	_Command& (0+255),w,b
  1033  000184  A4D8               	btfss	status,2,c
  1034  000186  D00E               	goto	l3878
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;RTDuC.c: 61: {
  1038                           ;RTDuC.c: 62: SetAngle = SPIReassembleDouble();
  1039  000188  EC97  F009         	call	_SPIReassembleDouble	;wreg free
  1040  00018C  C01A  F03D         	movff	?_SPIReassembleDouble,_SetAngle
  1041  000190  C01B  F03E         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1042  000194  C01C  F03F         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1043                           
  1044                           ;RTDuC.c: 63: PIDEnableFlag = 3;
  1045  000198  0E03               	movlw	3
  1046  00019A  6E42               	movwf	_PIDEnableFlag,c
  1047                           
  1048                           ;RTDuC.c: 64: JSEnableFlag = 0;
  1049  00019C  0E00               	movlw	0
  1050  00019E  0100               	movlb	0	; () banked
  1051  0001A0  6FB1               	movwf	_JSEnableFlag& (0+255),b
  1052                           
  1053                           ;RTDuC.c: 65: }
  1054  0001A2  D02A               	goto	l3890
  1055  0001A4                     l3878:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;RTDuC.c: 66: else if (Command == 0x05)
  1059  0001A4  0E05               	movlw	5
  1060  0001A6  0100               	movlb	0	; () banked
  1061  0001A8  19B0               	xorwf	_Command& (0+255),w,b
  1062  0001AA  A4D8               	btfss	status,2,c
  1063  0001AC  D009               	goto	l3882
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;RTDuC.c: 67: {
  1067                           ;RTDuC.c: 68: Kp = SPIReassembleDouble();
  1068  0001AE  EC97  F009         	call	_SPIReassembleDouble	;wreg free
  1069  0001B2  C01A  F0A2         	movff	?_SPIReassembleDouble,_Kp
  1070  0001B6  C01B  F0A3         	movff	?_SPIReassembleDouble+1,_Kp+1
  1071  0001BA  C01C  F0A4         	movff	?_SPIReassembleDouble+2,_Kp+2
  1072                           
  1073                           ;RTDuC.c: 69: }
  1074  0001BE  D01C               	goto	l3890
  1075  0001C0                     l3882:
  1076                           
  1077                           ;RTDuC.c: 70: else if (Command == 0x07)
  1078  0001C0  0E07               	movlw	7
  1079  0001C2  0100               	movlb	0	; () banked
  1080  0001C4  19B0               	xorwf	_Command& (0+255),w,b
  1081  0001C6  A4D8               	btfss	status,2,c
  1082  0001C8  D009               	goto	l3886
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;RTDuC.c: 71: {
  1086                           ;RTDuC.c: 72: Ki = SPIReassembleDouble();
  1087  0001CA  EC97  F009         	call	_SPIReassembleDouble	;wreg free
  1088  0001CE  C01A  F09F         	movff	?_SPIReassembleDouble,_Ki
  1089  0001D2  C01B  F0A0         	movff	?_SPIReassembleDouble+1,_Ki+1
  1090  0001D6  C01C  F0A1         	movff	?_SPIReassembleDouble+2,_Ki+2
  1091                           
  1092                           ;RTDuC.c: 73: }
  1093  0001DA  D00E               	goto	l3890
  1094  0001DC                     l3886:
  1095                           
  1096                           ;RTDuC.c: 74: else if (Command == 0x09)
  1097  0001DC  0E09               	movlw	9
  1098  0001DE  0100               	movlb	0	; () banked
  1099  0001E0  19B0               	xorwf	_Command& (0+255),w,b
  1100  0001E2  A4D8               	btfss	status,2,c
  1101  0001E4  D009               	goto	l3890
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;RTDuC.c: 75: {
  1105                           ;RTDuC.c: 76: Kd = SPIReassembleDouble();
  1106  0001E6  EC97  F009         	call	_SPIReassembleDouble	;wreg free
  1107  0001EA  C01A  F09C         	movff	?_SPIReassembleDouble,_Kd
  1108  0001EE  C01B  F09D         	movff	?_SPIReassembleDouble+1,_Kd+1
  1109  0001F2  C01C  F09E         	movff	?_SPIReassembleDouble+2,_Kd+2
  1110  0001F6  D000               	goto	l3890
  1111  0001F8                     l3890:
  1112                           
  1113                           ;RTDuC.c: 77: }
  1114                           ;RTDuC.c: 78: temporary = SSP1BUF;
  1115  0001F8  CFC9 F034          	movff	4041,main@temporary	;volatile
  1116  0001FC  D000               	goto	l3892
  1117  0001FE                     l3892:
  1118                           
  1119                           ;RTDuC.c: 79: }
  1120                           ;RTDuC.c: 80: PIE1bits.SSP1IE = 1;
  1121  0001FE  869D               	bsf	3997,3,c	;volatile
  1122  000200  D000               	goto	l3894
  1123  000202                     l3894:
  1124                           
  1125                           ;RTDuC.c: 81: }
  1126                           ;RTDuC.c: 83: DetectJoystick();
  1127  000202  ECE9  F00A         	call	_DetectJoystick	;wreg free
  1128                           
  1129                           ;RTDuC.c: 84: if (JSEnableFlag == 1)
  1130  000206  0100               	movlb	0	; () banked
  1131  000208  05B1               	decf	_JSEnableFlag& (0+255),w,b
  1132  00020A  A4D8               	btfss	status,2,c
  1133  00020C  D009               	goto	l3900
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;RTDuC.c: 85: {
  1137                           ;RTDuC.c: 86: ImplementJSMotion(DetectMovement());
  1138  00020E  EC18  F008         	call	_DetectMovement	;wreg free
  1139  000212  C01A  F021         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1140  000216  C01B  F022         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1141  00021A  EC4C  F005         	call	_ImplementJSMotion	;wreg free
  1142  00021E  D000               	goto	l3900
  1143  000220                     l3900:
  1144                           
  1145                           ;RTDuC.c: 87: }
  1146                           ;RTDuC.c: 89: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1147  000220  0442               	decf	_PIDEnableFlag,w,c
  1148  000222  A4D8               	btfss	status,2,c
  1149  000224  D02D               	goto	l3914
  1150  000226  0100               	movlb	0	; () banked
  1151  000228  05B3               	decf	_TMR0Flag& (0+255),w,b
  1152  00022A  A4D8               	btfss	status,2,c
  1153  00022C  D029               	goto	l3914
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;RTDuC.c: 90: {
  1157                           ;RTDuC.c: 91: PORTCbits.RC6 = 1;
  1158  00022E  8C82               	bsf	3970,6,c	;volatile
  1159                           
  1160                           ;RTDuC.c: 92: INTCONbits.GIE = 0;
  1161  000230  9EF2               	bcf	intcon,7,c	;volatile
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;RTDuC.c: 93: CurrentAngle = RTD2Angle(ReadRTDpos());
  1165  000232  EC7C  F008         	call	_ReadRTDpos	;wreg free
  1166  000236  C01B  F06C         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1167  00023A  C01C  F06D         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1168  00023E  ECD9  F009         	call	_RTD2Angle	;wreg free
  1169  000242  C06C  F096         	movff	?_RTD2Angle,_CurrentAngle
  1170  000246  C06D  F097         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1171  00024A  C06E  F098         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1172                           
  1173                           ;RTDuC.c: 94: calculatePID(CurrentAngle, SetAngle);
  1174  00024E  C096  F087         	movff	_CurrentAngle,calculatePID@angle
  1175  000252  C097  F088         	movff	_CurrentAngle+1,calculatePID@angle+1
  1176  000256  C098  F089         	movff	_CurrentAngle+2,calculatePID@angle+2
  1177  00025A  C03D  F08A         	movff	_SetAngle,calculatePID@setpoint
  1178  00025E  C03E  F08B         	movff	_SetAngle+1,calculatePID@setpoint+1
  1179  000262  C03F  F08C         	movff	_SetAngle+2,calculatePID@setpoint+2
  1180  000266  EC73  F001         	call	_calculatePID	;wreg free
  1181                           
  1182                           ;RTDuC.c: 95: ImplementPIDMotion(motorInput);
  1183  00026A  C0AE  F01E         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1184  00026E  C0AF  F01F         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1185  000272  EC98  F007         	call	_ImplementPIDMotion	;wreg free
  1186                           
  1187                           ;RTDuC.c: 96: TMR0Flag = 0;
  1188  000276  0E00               	movlw	0
  1189  000278  0100               	movlb	0	; () banked
  1190  00027A  6FB3               	movwf	_TMR0Flag& (0+255),b
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;RTDuC.c: 97: INTCONbits.GIE = 1;
  1194  00027C  8EF2               	bsf	intcon,7,c	;volatile
  1195  00027E  D02F               	goto	l3932
  1196  000280                     l3914:
  1197                           
  1198                           ;RTDuC.c: 101: else if (PIDEnableFlag == 3)
  1199  000280  0E03               	movlw	3
  1200  000282  1842               	xorwf	_PIDEnableFlag,w,c
  1201  000284  A4D8               	btfss	status,2,c
  1202  000286  D6D2               	goto	l3800
  1203                           
  1204                           ;RTDuC.c: 102: {
  1205                           ;RTDuC.c: 103: PORTCbits.RC6 = 1;
  1206  000288  8C82               	bsf	3970,6,c	;volatile
  1207                           
  1208                           ;RTDuC.c: 104: INTCONbits.GIE = 0;
  1209  00028A  9EF2               	bcf	intcon,7,c	;volatile
  1210                           
  1211                           ;RTDuC.c: 105: TMR0H = 0xDB;
  1212  00028C  0EDB               	movlw	219
  1213  00028E  6ED7               	movwf	4055,c	;volatile
  1214                           
  1215                           ;RTDuC.c: 106: TMR0L = 0x60;
  1216  000290  0E60               	movlw	96
  1217  000292  6ED6               	movwf	4054,c	;volatile
  1218                           
  1219                           ;RTDuC.c: 107: CurrentAngle = RTD2Angle(ReadRTDpos());
  1220  000294  EC7C  F008         	call	_ReadRTDpos	;wreg free
  1221  000298  C01B  F06C         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1222  00029C  C01C  F06D         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1223  0002A0  ECD9  F009         	call	_RTD2Angle	;wreg free
  1224  0002A4  C06C  F096         	movff	?_RTD2Angle,_CurrentAngle
  1225  0002A8  C06D  F097         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1226  0002AC  C06E  F098         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1227                           
  1228                           ;RTDuC.c: 108: calculatePID(CurrentAngle, SetAngle);
  1229  0002B0  C096  F087         	movff	_CurrentAngle,calculatePID@angle
  1230  0002B4  C097  F088         	movff	_CurrentAngle+1,calculatePID@angle+1
  1231  0002B8  C098  F089         	movff	_CurrentAngle+2,calculatePID@angle+2
  1232  0002BC  C03D  F08A         	movff	_SetAngle,calculatePID@setpoint
  1233  0002C0  C03E  F08B         	movff	_SetAngle+1,calculatePID@setpoint+1
  1234  0002C4  C03F  F08C         	movff	_SetAngle+2,calculatePID@setpoint+2
  1235  0002C8  EC73  F001         	call	_calculatePID	;wreg free
  1236                           
  1237                           ;RTDuC.c: 109: ImplementPIDMotion(motorInput);
  1238  0002CC  C0AE  F01E         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1239  0002D0  C0AF  F01F         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1240  0002D4  EC98  F007         	call	_ImplementPIDMotion	;wreg free
  1241                           
  1242                           ;RTDuC.c: 110: INTCONbits.GIE = 1;
  1243  0002D8  8EF2               	bsf	intcon,7,c	;volatile
  1244                           
  1245                           ;RTDuC.c: 111: INTCONbits.TMR0IE = 1;
  1246  0002DA  8AF2               	bsf	intcon,5,c	;volatile
  1247                           
  1248                           ;RTDuC.c: 112: T0CONbits.TMR0ON = 1;
  1249  0002DC  8ED5               	bsf	4053,7,c	;volatile
  1250  0002DE                     l3932:
  1251                           
  1252                           ;RTDuC.c: 113: PORTCbits.RC6 = 0;
  1253  0002DE  9C82               	bcf	3970,6,c	;volatile
  1254  0002E0  D6A5               	goto	l3800
  1255  0002E2  EF0C  F000         	goto	start
  1256  0002E6                     __end_of_main:
  1257                           	opt stack 0
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           prodh	equ	0xFF4
  1263                           prodl	equ	0xFF3
  1264                           intcon	equ	0xFF2
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           postdec1	equ	0xFE5
  1268                           fsr1l	equ	0xFE1
  1269                           indf2	equ	0xFDF
  1270                           fsr2h	equ	0xFDA
  1271                           fsr2l	equ	0xFD9
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _initialize *****************
  1275 ;; Defined at:
  1276 ;;		line 118 in file "RTDuC.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;		None               void
  1283 ;; Registers used:
  1284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;Total ram usage:        0 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    8
  1297 ;; This function calls:
  1298 ;;		_EEPROMInit
  1299 ;;		_InitializeInterrupts
  1300 ;;		_JoystickInit
  1301 ;;		_MotorDriverInit
  1302 ;;		_PIDInit
  1303 ;;		_RTDInit
  1304 ;;		_SPIInit
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text1
  1311  00151A                     __ptext1:
  1312                           	opt stack 0
  1313  00151A                     _initialize:
  1314                           	opt stack 22
  1315                           
  1316                           ;RTDuC.c: 120: while (OSCCONbits.OSTS == 0);
  1317                           
  1318                           ;incstack = 0
  1319  00151A  D000               	goto	l507
  1320  00151C                     l507:
  1321  00151C  A6D3               	btfss	4051,3,c	;volatile
  1322  00151E  D7FE               	goto	l507
  1323                           
  1324                           ;RTDuC.c: 122: RTDInit();
  1325  001520  EC4A  F00A         	call	_RTDInit	;wreg free
  1326                           
  1327                           ;RTDuC.c: 123: SPIInit();
  1328  001524  EC1B  F00B         	call	_SPIInit	;wreg free
  1329                           
  1330                           ;RTDuC.c: 124: JoystickInit();
  1331  001528  EC62  F00A         	call	_JoystickInit	;wreg free
  1332                           
  1333                           ;RTDuC.c: 125: MotorDriverInit();
  1334  00152C  ECB3  F00A         	call	_MotorDriverInit	;wreg free
  1335                           
  1336                           ;RTDuC.c: 126: PIDInit();
  1337  001530  EC52  F009         	call	_PIDInit	;wreg free
  1338                           
  1339                           ;RTDuC.c: 127: EEPROMInit();
  1340  001534  EC41  F00B         	call	_EEPROMInit	;wreg free
  1341                           
  1342                           ;RTDuC.c: 129: InitializeInterrupts();
  1343  001538  EC7E  F00B         	call	_InitializeInterrupts	;wreg free
  1344                           
  1345                           ;RTDuC.c: 131: PORTAbits.RA3 = 1;
  1346  00153C  8680               	bsf	3968,3,c	;volatile
  1347  00153E  0012               	return		;funcret
  1348  001540                     __end_of_initialize:
  1349                           	opt stack 0
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           prodh	equ	0xFF4
  1355                           prodl	equ	0xFF3
  1356                           intcon	equ	0xFF2
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1l	equ	0xFE1
  1361                           indf2	equ	0xFDF
  1362                           fsr2h	equ	0xFDA
  1363                           fsr2l	equ	0xFD9
  1364                           status	equ	0xFD8
  1365                           
  1366 ;; *************** function _SPIInit *****************
  1367 ;; Defined at:
  1368 ;;		line 16 in file "SPISlave.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;		None               void
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    5
  1389 ;; This function calls:
  1390 ;;		_OpenSPI1
  1391 ;; This function is called by:
  1392 ;;		_initialize
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text2
  1397  001636                     __ptext2:
  1398                           	opt stack 0
  1399  001636                     _SPIInit:
  1400                           	opt stack 24
  1401                           
  1402                           ;SPISlave.c: 18: TRISCbits.RC4 = 1;
  1403                           
  1404                           ;incstack = 0
  1405  001636  8894               	bsf	3988,4,c	;volatile
  1406                           
  1407                           ;SPISlave.c: 19: TRISCbits.RC5 = 0;
  1408  001638  9A94               	bcf	3988,5,c	;volatile
  1409                           
  1410                           ;SPISlave.c: 20: TRISFbits.RF7 = 1;
  1411  00163A  8E97               	bsf	3991,7,c	;volatile
  1412                           
  1413                           ;SPISlave.c: 21: TRISCbits.RC6 = 0;
  1414  00163C  9C94               	bcf	3988,6,c	;volatile
  1415                           
  1416                           ;SPISlave.c: 22: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  1417  00163E  0E00               	movlw	0
  1418  001640  6E1A               	movwf	OpenSPI1@bus_mode,c
  1419  001642  0E00               	movlw	0
  1420  001644  6E1B               	movwf	OpenSPI1@smp_phase,c
  1421  001646  0E04               	movlw	4
  1422  001648  ECAA  F008         	call	_OpenSPI1
  1423                           
  1424                           ;SPISlave.c: 23: PIE1bits.SSP1IE = 1;
  1425  00164C  869D               	bsf	3997,3,c	;volatile
  1426  00164E  0012               	return		;funcret
  1427  001650                     __end_of_SPIInit:
  1428                           	opt stack 0
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           prodh	equ	0xFF4
  1434                           prodl	equ	0xFF3
  1435                           intcon	equ	0xFF2
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1l	equ	0xFE1
  1440                           indf2	equ	0xFDF
  1441                           fsr2h	equ	0xFDA
  1442                           fsr2l	equ	0xFD9
  1443                           status	equ	0xFD8
  1444                           
  1445 ;; *************** function _OpenSPI1 *****************
  1446 ;; Defined at:
  1447 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  sync_mode       1    wreg     unsigned char 
  1450 ;;  bus_mode        1   25[COMRAM] unsigned char 
  1451 ;;  smp_phase       1   26[COMRAM] unsigned char 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  sync_mode       1   27[COMRAM] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;		None               void
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;Total ram usage:        3 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    4
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_SPIInit
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           	psect	text3
  1478  001154                     __ptext3:
  1479                           	opt stack 0
  1480  001154                     _OpenSPI1:
  1481                           	opt stack 24
  1482                           
  1483                           ;incstack = 0
  1484                           ;OpenSPI1@sync_mode stored from wreg
  1485  001154  6E1C               	movwf	OpenSPI1@sync_mode,c
  1486  001156  0E3F               	movlw	63
  1487  001158  16C7               	andwf	4039,f,c	;volatile
  1488  00115A  0E00               	movlw	0
  1489  00115C  6EC6               	movwf	4038,c	;volatile
  1490  00115E  501C               	movf	OpenSPI1@sync_mode,w,c
  1491  001160  12C6               	iorwf	4038,f,c	;volatile
  1492  001162  501B               	movf	OpenSPI1@smp_phase,w,c
  1493  001164  12C7               	iorwf	4039,f,c	;volatile
  1494  001166  D005               	goto	l3246
  1495  001168                     l585:
  1496  001168  8CC7               	bsf	4039,6,c	;volatile
  1497  00116A  D013               	goto	l3250
  1498  00116C                     l587:
  1499  00116C  8CC7               	bsf	4039,6,c	;volatile
  1500  00116E                     l588:
  1501  00116E  88C6               	bsf	4038,4,c	;volatile
  1502  001170  D010               	goto	l3250
  1503  001172                     l3246:
  1504  001172  501A               	movf	OpenSPI1@bus_mode,w,c
  1505                           
  1506                           ; Switch size 1, requested type "space"
  1507                           ; Number of cases is 3, Range of values is 0 to 3
  1508                           ; switch strategies available:
  1509                           ; Name         Instructions Cycles
  1510                           ; simple_byte           10     6 (average)
  1511                           ;	Chosen strategy is simple_byte
  1512  001174  0A00               	xorlw	0	; case 0
  1513  001176  B4D8               	btfsc	status,2,c
  1514  001178  D7F7               	goto	l585
  1515  00117A  0A02               	xorlw	2	; case 2
  1516  00117C  B4D8               	btfsc	status,2,c
  1517  00117E  D7F6               	goto	l587
  1518  001180  0A01               	xorlw	1	; case 3
  1519  001182  B4D8               	btfsc	status,2,c
  1520  001184  D7F4               	goto	l588
  1521  001186  D005               	goto	l3250
  1522  001188                     l591:
  1523  001188  8E97               	bsf	3991,7,c	;volatile
  1524  00118A                     l593:
  1525  00118A  8694               	bsf	3988,3,c	;volatile
  1526  00118C  D00A               	goto	l592
  1527  00118E                     l594:
  1528  00118E  9694               	bcf	3988,3,c	;volatile
  1529  001190  D008               	goto	l592
  1530  001192                     l3250:
  1531  001192  501C               	movf	OpenSPI1@sync_mode,w,c
  1532                           
  1533                           ; Switch size 1, requested type "space"
  1534                           ; Number of cases is 2, Range of values is 4 to 5
  1535                           ; switch strategies available:
  1536                           ; Name         Instructions Cycles
  1537                           ; simple_byte            7     4 (average)
  1538                           ;	Chosen strategy is simple_byte
  1539  001194  0A04               	xorlw	4	; case 4
  1540  001196  B4D8               	btfsc	status,2,c
  1541  001198  D7F7               	goto	l591
  1542  00119A  0A01               	xorlw	1	; case 5
  1543  00119C  B4D8               	btfsc	status,2,c
  1544  00119E  D7F5               	goto	l593
  1545  0011A0  D7F6               	goto	l594
  1546  0011A2                     l592:
  1547  0011A2  8894               	bsf	3988,4,c	;volatile
  1548  0011A4  9A94               	bcf	3988,5,c	;volatile
  1549  0011A6  8AC6               	bsf	4038,5,c	;volatile
  1550  0011A8  0012               	return		;funcret
  1551  0011AA                     __end_of_OpenSPI1:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           prodh	equ	0xFF4
  1558                           prodl	equ	0xFF3
  1559                           intcon	equ	0xFF2
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           postdec1	equ	0xFE5
  1563                           fsr1l	equ	0xFE1
  1564                           indf2	equ	0xFDF
  1565                           fsr2h	equ	0xFDA
  1566                           fsr2l	equ	0xFD9
  1567                           status	equ	0xFD8
  1568                           
  1569 ;; *************** function _RTDInit *****************
  1570 ;; Defined at:
  1571 ;;		line 3 in file "ResolverToDigital.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;		None               void
  1578 ;; Registers used:
  1579 ;;		wreg, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;Total ram usage:        0 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    5
  1592 ;; This function calls:
  1593 ;;		_Delay10TCYx
  1594 ;;		_Delay1KTCYx
  1595 ;;		_Delay1TCYx
  1596 ;; This function is called by:
  1597 ;;		_initialize
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text4
  1602  001494                     __ptext4:
  1603                           	opt stack 0
  1604  001494                     _RTDInit:
  1605                           	opt stack 24
  1606                           
  1607                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1608                           
  1609                           ;incstack = 0
  1610  001494  6895               	setf	3989,c	;volatile
  1611                           
  1612                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1613  001496  6899               	setf	3993,c	;volatile
  1614                           
  1615                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1616  001498  9096               	bcf	3990,0,c	;volatile
  1617                           
  1618                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1619  00149A  9296               	bcf	3990,1,c	;volatile
  1620                           
  1621                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1622  00149C  9496               	bcf	3990,2,c	;volatile
  1623                           
  1624                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1625  00149E  909A               	bcf	3994,0,c	;volatile
  1626                           
  1627                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1628  0014A0  8A96               	bsf	3990,5,c	;volatile
  1629                           
  1630                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1631  0014A2  8C96               	bsf	3990,6,c	;volatile
  1632                           
  1633                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1634  0014A4  8E96               	bsf	3990,7,c	;volatile
  1635                           
  1636                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  1637  0014A6  9088               	bcf	3976,0,c	;volatile
  1638                           
  1639                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  1640  0014A8  0E0A               	movlw	10
  1641  0014AA  EC5D  F00B         	call	_Delay10TCYx
  1642                           
  1643                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  1644  0014AE  8088               	bsf	3976,0,c	;volatile
  1645                           
  1646                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  1647  0014B0  0E14               	movlw	20
  1648  0014B2  EC4B  F00B         	call	_Delay1KTCYx
  1649                           
  1650                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  1651  0014B6  9084               	bcf	3972,0,c	;volatile
  1652                           
  1653                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  1654  0014B8  0E01               	movlw	1
  1655  0014BA  EC78  F00B         	call	_Delay1TCYx
  1656                           
  1657                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  1658  0014BE  8084               	bsf	3972,0,c	;volatile
  1659                           
  1660                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  1661  0014C0  9484               	bcf	3972,2,c	;volatile
  1662  0014C2  0012               	return		;funcret
  1663  0014C4                     __end_of_RTDInit:
  1664                           	opt stack 0
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           prodh	equ	0xFF4
  1670                           prodl	equ	0xFF3
  1671                           intcon	equ	0xFF2
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           indf2	equ	0xFDF
  1677                           fsr2h	equ	0xFDA
  1678                           fsr2l	equ	0xFD9
  1679                           status	equ	0xFD8
  1680                           
  1681 ;; *************** function _Delay1TCYx *****************
  1682 ;; Defined at:
  1683 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;  unit            1    wreg     unsigned char 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  unit            1   25[COMRAM] unsigned char 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;		None               void
  1690 ;; Registers used:
  1691 ;;		wreg
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;Total ram usage:        1 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    4
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_RTDInit
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text5
  1712  0016F0                     __ptext5:
  1713                           	opt stack 0
  1714  0016F0                     _Delay1TCYx:
  1715                           	opt stack 24
  1716                           
  1717                           ;incstack = 0
  1718                           ;Delay1TCYx@unit stored from wreg
  1719  0016F0  6E1A               	movwf	Delay1TCYx@unit,c
  1720  0016F2                     l839:
  1721  0016F2  F000               	nop	
  1722  0016F4  2E1A               	decfsz	Delay1TCYx@unit,f,c
  1723  0016F6  D7FD               	goto	l839
  1724  0016F8  D000               	goto	l841
  1725  0016FA                     l841:
  1726  0016FA  0012               	return		;funcret
  1727  0016FC                     __end_of_Delay1TCYx:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           prodh	equ	0xFF4
  1734                           prodl	equ	0xFF3
  1735                           intcon	equ	0xFF2
  1736                           postinc0	equ	0xFEE
  1737                           wreg	equ	0xFE8
  1738                           postdec1	equ	0xFE5
  1739                           fsr1l	equ	0xFE1
  1740                           indf2	equ	0xFDF
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _Delay1KTCYx *****************
  1746 ;; Defined at:
  1747 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  unit            1    wreg     unsigned char 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  unit            1   25[COMRAM] unsigned char 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1765 ;;Total ram usage:        1 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    4
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_RTDInit
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text6
  1776  001696                     __ptext6:
  1777                           	opt stack 0
  1778  001696                     _Delay1KTCYx:
  1779                           	opt stack 24
  1780                           
  1781                           ;incstack = 0
  1782                           ;Delay1KTCYx@unit stored from wreg
  1783  001696  6E1A               	movwf	Delay1KTCYx@unit,c
  1784  001698  0EFA               	movlw	250
  1785  00169A                     u3747:
  1786  00169A  F000               	nop	
  1787  00169C  2EE8               	decfsz	wreg,f,c
  1788  00169E  D7FD               	goto	u3747
  1789  0016A0  2E1A               	decfsz	Delay1KTCYx@unit,f,c
  1790  0016A2  D7FA               	goto	l3230
  1791  0016A4  D000               	goto	l834
  1792  0016A6                     l834:
  1793  0016A6  0012               	return		;funcret
  1794  0016A8                     __end_of_Delay1KTCYx:
  1795                           	opt stack 0
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           intcon	equ	0xFF2
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           indf2	equ	0xFDF
  1808                           fsr2h	equ	0xFDA
  1809                           fsr2l	equ	0xFD9
  1810                           status	equ	0xFD8
  1811                           
  1812 ;; *************** function _PIDInit *****************
  1813 ;; Defined at:
  1814 ;;		line 18 in file "PID.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;		None               void
  1821 ;; Registers used:
  1822 ;;		wreg, status,2
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    4
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_initialize
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text7
  1843  0012A4                     __ptext7:
  1844                           	opt stack 0
  1845  0012A4                     _PIDInit:
  1846                           	opt stack 25
  1847                           
  1848                           ;PID.c: 20: error = 0;
  1849                           
  1850                           ;incstack = 0
  1851  0012A4  0E00               	movlw	0
  1852  0012A6  0100               	movlb	0	; () banked
  1853  0012A8  6FA5               	movwf	_error& (0+255),b
  1854  0012AA  0E00               	movlw	0
  1855  0012AC  0100               	movlb	0	; () banked
  1856  0012AE  6FA6               	movwf	(_error+1)& (0+255),b
  1857  0012B0  0E00               	movlw	0
  1858  0012B2  0100               	movlb	0	; () banked
  1859  0012B4  6FA7               	movwf	(_error+2)& (0+255),b
  1860                           
  1861                           ;PID.c: 21: prevErr = 0;
  1862  0012B6  0E00               	movlw	0
  1863  0012B8  0100               	movlb	0	; () banked
  1864  0012BA  6FAB               	movwf	_prevErr& (0+255),b
  1865  0012BC  0E00               	movlw	0
  1866  0012BE  0100               	movlb	0	; () banked
  1867  0012C0  6FAC               	movwf	(_prevErr+1)& (0+255),b
  1868  0012C2  0E00               	movlw	0
  1869  0012C4  0100               	movlb	0	; () banked
  1870  0012C6  6FAD               	movwf	(_prevErr+2)& (0+255),b
  1871                           
  1872                           ;PID.c: 22: intErr = 0;
  1873  0012C8  0E00               	movlw	0
  1874  0012CA  0100               	movlb	0	; () banked
  1875  0012CC  6FA8               	movwf	_intErr& (0+255),b
  1876  0012CE  0E00               	movlw	0
  1877  0012D0  0100               	movlb	0	; () banked
  1878  0012D2  6FA9               	movwf	(_intErr+1)& (0+255),b
  1879  0012D4  0E00               	movlw	0
  1880  0012D6  0100               	movlb	0	; () banked
  1881  0012D8  6FAA               	movwf	(_intErr+2)& (0+255),b
  1882                           
  1883                           ;PID.c: 24: T0CON = 0x04;
  1884  0012DA  0E04               	movlw	4
  1885  0012DC  6ED5               	movwf	4053,c	;volatile
  1886                           
  1887                           ;PID.c: 25: TMR0H = 0xDB;
  1888  0012DE  0EDB               	movlw	219
  1889  0012E0  6ED7               	movwf	4055,c	;volatile
  1890                           
  1891                           ;PID.c: 26: TMR0L = 0x60;
  1892  0012E2  0E60               	movlw	96
  1893  0012E4  6ED6               	movwf	4054,c	;volatile
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;PID.c: 27: INTCON2bits.TMR0IP = 1;
  1897  0012E6  84F1               	bsf	intcon2,2,c	;volatile
  1898                           
  1899                           ; BSR set to: 0
  1900  0012E8  0012               	return		;funcret
  1901  0012EA                     __end_of_PIDInit:
  1902                           	opt stack 0
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           prodh	equ	0xFF4
  1908                           prodl	equ	0xFF3
  1909                           intcon	equ	0xFF2
  1910                           intcon2	equ	0xFF1
  1911                           postinc0	equ	0xFEE
  1912                           wreg	equ	0xFE8
  1913                           postdec1	equ	0xFE5
  1914                           fsr1l	equ	0xFE1
  1915                           indf2	equ	0xFDF
  1916                           fsr2h	equ	0xFDA
  1917                           fsr2l	equ	0xFD9
  1918                           status	equ	0xFD8
  1919                           
  1920 ;; *************** function _MotorDriverInit *****************
  1921 ;; Defined at:
  1922 ;;		line 7 in file "MotorControl.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;		None
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;		None
  1927 ;; Return value:  Size  Location     Type
  1928 ;;		None               void
  1929 ;; Registers used:
  1930 ;;		wreg, status,2
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;Total ram usage:        0 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    4
  1943 ;; This function calls:
  1944 ;;		Nothing
  1945 ;; This function is called by:
  1946 ;;		_initialize
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text8
  1951  001566                     __ptext8:
  1952                           	opt stack 0
  1953  001566                     _MotorDriverInit:
  1954                           	opt stack 25
  1955                           
  1956                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;incstack = 0
  1960  001566  9098               	bcf	3992,0,c	;volatile
  1961                           
  1962                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  1963  001568  9896               	bcf	3990,4,c	;volatile
  1964                           
  1965                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  1966  00156A  9696               	bcf	3990,3,c	;volatile
  1967                           
  1968                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  1969  00156C  9698               	bcf	3992,3,c	;volatile
  1970                           
  1971                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  1972  00156E  8093               	bsf	3987,0,c	;volatile
  1973                           
  1974                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  1975  001570  9892               	bcf	3986,4,c	;volatile
  1976                           
  1977                           ;MotorControl.c: 18: CCPR3L = 0x00;
  1978  001572  0E00               	movlw	0
  1979  001574  6EB8               	movwf	4024,c	;volatile
  1980                           
  1981                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  1982  001576  98B7               	bcf	4023,4,c	;volatile
  1983                           
  1984                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  1985  001578  9AB7               	bcf	4023,5,c	;volatile
  1986                           
  1987                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  1988  00157A  0E4C               	movlw	76
  1989  00157C  6EB7               	movwf	4023,c	;volatile
  1990                           
  1991                           ;MotorControl.c: 22: PR2 = 0xFF;
  1992  00157E  68CB               	setf	4043,c	;volatile
  1993                           
  1994                           ;MotorControl.c: 23: T3CON = 0x00;
  1995  001580  0E00               	movlw	0
  1996  001582  6EB1               	movwf	4017,c	;volatile
  1997                           
  1998                           ;MotorControl.c: 24: T2CON = 0x04;
  1999  001584  0E04               	movlw	4
  2000  001586  6ECA               	movwf	4042,c	;volatile
  2001  001588  0012               	return		;funcret
  2002  00158A                     __end_of_MotorDriverInit:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           prodh	equ	0xFF4
  2009                           prodl	equ	0xFF3
  2010                           intcon	equ	0xFF2
  2011                           intcon2	equ	0xFF1
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           postdec1	equ	0xFE5
  2015                           fsr1l	equ	0xFE1
  2016                           indf2	equ	0xFDF
  2017                           fsr2h	equ	0xFDA
  2018                           fsr2l	equ	0xFD9
  2019                           status	equ	0xFD8
  2020                           
  2021 ;; *************** function _JoystickInit *****************
  2022 ;; Defined at:
  2023 ;;		line 6 in file "Joystick.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;		None               void
  2030 ;; Registers used:
  2031 ;;		wreg, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;Total ram usage:        0 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    4
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_initialize
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text9
  2052  0014C4                     __ptext9:
  2053                           	opt stack 0
  2054  0014C4                     _JoystickInit:
  2055                           	opt stack 25
  2056                           
  2057                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  2058                           
  2059                           ;incstack = 0
  2060  0014C4  9492               	bcf	3986,2,c	;volatile
  2061                           
  2062                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  2063  0014C6  8293               	bsf	3987,1,c	;volatile
  2064                           
  2065                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  2066  0014C8  A281               	btfss	3969,1,c	;volatile
  2067  0014CA  D003               	goto	l31
  2068                           
  2069                           ;Joystick.c: 11: {
  2070                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  2071  0014CC  8480               	bsf	3968,2,c	;volatile
  2072                           
  2073                           ;Joystick.c: 13: JSEnableFlag = 1;
  2074  0014CE  0E01               	movlw	1
  2075  0014D0  D004               	goto	L1
  2076  0014D2                     l31:
  2077                           
  2078                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  2079  0014D2  B281               	btfsc	3969,1,c	;volatile
  2080  0014D4  D005               	goto	l3344
  2081                           
  2082                           ;Joystick.c: 16: {
  2083                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  2084  0014D6  9480               	bcf	3968,2,c	;volatile
  2085                           
  2086                           ;Joystick.c: 18: JSEnableFlag = 0;
  2087  0014D8  0E00               	movlw	0
  2088  0014DA                     L1:
  2089  0014DA  0100               	movlb	0	; () banked
  2090  0014DC  6FB1               	movwf	_JSEnableFlag& (0+255),b
  2091                           
  2092                           ; BSR set to: 0
  2093  0014DE  D000               	goto	l3344
  2094  0014E0                     l3344:
  2095                           
  2096                           ;Joystick.c: 19: }
  2097                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  2098  0014E0  80C2               	bsf	4034,0,c	;volatile
  2099                           
  2100                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  2101  0014E2  50C2               	movf	4034,w,c	;volatile
  2102  0014E4  0B01               	andlw	1
  2103  0014E6  6EC2               	movwf	4034,c	;volatile
  2104                           
  2105                           ;Joystick.c: 23: ADCON1 = 0x0D;
  2106  0014E8  0E0D               	movlw	13
  2107  0014EA  6EC1               	movwf	4033,c	;volatile
  2108                           
  2109                           ;Joystick.c: 24: ADCON2 = 0xB4;
  2110  0014EC  0EB4               	movlw	180
  2111  0014EE  6EC0               	movwf	4032,c	;volatile
  2112  0014F0  0012               	return		;funcret
  2113  0014F2                     __end_of_JoystickInit:
  2114                           	opt stack 0
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           intcon2	equ	0xFF1
  2123                           postinc0	equ	0xFEE
  2124                           wreg	equ	0xFE8
  2125                           postdec1	equ	0xFE5
  2126                           fsr1l	equ	0xFE1
  2127                           indf2	equ	0xFDF
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _InitializeInterrupts *****************
  2133 ;; Defined at:
  2134 ;;		line 196 in file "RTDuC.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		None
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    4
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_initialize
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text10
  2163  0016FC                     __ptext10:
  2164                           	opt stack 0
  2165  0016FC                     _InitializeInterrupts:
  2166                           	opt stack 25
  2167                           
  2168                           ;RTDuC.c: 198: INTCONbits.GIE = 1;
  2169                           
  2170                           ;incstack = 0
  2171  0016FC  8EF2               	bsf	intcon,7,c	;volatile
  2172                           
  2173                           ;RTDuC.c: 199: INTCONbits.PEIE = 1;
  2174  0016FE  8CF2               	bsf	intcon,6,c	;volatile
  2175                           
  2176                           ;RTDuC.c: 201: PIE2bits.OSCFIE = 1;
  2177  001700  8EA0               	bsf	4000,7,c	;volatile
  2178                           
  2179                           ;RTDuC.c: 202: IPR2bits.OSCFIP = 1;
  2180  001702  8EA2               	bsf	4002,7,c	;volatile
  2181  001704  0012               	return		;funcret
  2182  001706                     __end_of_InitializeInterrupts:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           intcon	equ	0xFF2
  2191                           intcon2	equ	0xFF1
  2192                           postinc0	equ	0xFEE
  2193                           wreg	equ	0xFE8
  2194                           postdec1	equ	0xFE5
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           fsr2h	equ	0xFDA
  2198                           fsr2l	equ	0xFD9
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _EEPROMInit *****************
  2202 ;; Defined at:
  2203 ;;		line 13 in file "EEPROM.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;		None               void
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    7
  2224 ;; This function calls:
  2225 ;;		_EEBootUp
  2226 ;; This function is called by:
  2227 ;;		_initialize
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text11
  2232  001682                     __ptext11:
  2233                           	opt stack 0
  2234  001682                     _EEPROMInit:
  2235                           	opt stack 22
  2236                           
  2237                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  2238                           
  2239                           ;incstack = 0
  2240  001682  9EA6               	bcf	4006,7,c	;volatile
  2241                           
  2242                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  2243  001684  9CA6               	bcf	4006,6,c	;volatile
  2244                           
  2245                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  2246  001686  84A6               	bsf	4006,2,c	;volatile
  2247                           
  2248                           ;EEPROM.c: 19: EEBootUp();
  2249  001688  ECDB  F007         	call	_EEBootUp	;wreg free
  2250                           
  2251                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  2252  00168C  0E3D               	movlw	61
  2253  00168E  6ED2               	movwf	4050,c	;volatile
  2254                           
  2255                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  2256  001690  84A0               	bsf	4000,2,c	;volatile
  2257                           
  2258                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  2259  001692  84A2               	bsf	4002,2,c	;volatile
  2260  001694  0012               	return		;funcret
  2261  001696                     __end_of_EEPROMInit:
  2262                           	opt stack 0
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           intcon	equ	0xFF2
  2270                           intcon2	equ	0xFF1
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           postdec1	equ	0xFE5
  2274                           fsr1l	equ	0xFE1
  2275                           indf2	equ	0xFDF
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _EEBootUp *****************
  2281 ;; Defined at:
  2282 ;;		line 27 in file "EEPROM.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;Total ram usage:        2 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    6
  2303 ;; This function calls:
  2304 ;;		_EEReadChar
  2305 ;;		_EEReadDouble
  2306 ;; This function is called by:
  2307 ;;		_EEPROMInit
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text12
  2312  000FB6                     __ptext12:
  2313                           	opt stack 0
  2314  000FB6                     _EEBootUp:
  2315                           	opt stack 22
  2316                           
  2317                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  2318                           
  2319                           ;incstack = 0
  2320  000FB6  0E16               	movlw	22
  2321  000FB8  EC0B  F00B         	call	_EEReadChar
  2322  000FBC  0900               	iorlw	0
  2323  000FBE  B4D8               	btfsc	status,2,c
  2324  000FC0  D036               	goto	l339
  2325                           
  2326                           ;EEPROM.c: 30: {
  2327                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  2328  000FC2  0E00               	movlw	0
  2329  000FC4  ECD5  F008         	call	_EEReadDouble
  2330  000FC8  C020  F03D         	movff	?_EEReadDouble,_SetAngle
  2331  000FCC  C021  F03E         	movff	?_EEReadDouble+1,_SetAngle+1
  2332  000FD0  C022  F03F         	movff	?_EEReadDouble+2,_SetAngle+2
  2333                           
  2334                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  2335  000FD4  0E03               	movlw	3
  2336  000FD6  ECD5  F008         	call	_EEReadDouble
  2337  000FDA  C020  F0A2         	movff	?_EEReadDouble,_Kp
  2338  000FDE  C021  F0A3         	movff	?_EEReadDouble+1,_Kp+1
  2339  000FE2  C022  F0A4         	movff	?_EEReadDouble+2,_Kp+2
  2340                           
  2341                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  2342  000FE6  0E06               	movlw	6
  2343  000FE8  ECD5  F008         	call	_EEReadDouble
  2344  000FEC  C020  F09F         	movff	?_EEReadDouble,_Ki
  2345  000FF0  C021  F0A0         	movff	?_EEReadDouble+1,_Ki+1
  2346  000FF4  C022  F0A1         	movff	?_EEReadDouble+2,_Ki+2
  2347                           
  2348                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  2349  000FF8  0E09               	movlw	9
  2350  000FFA  ECD5  F008         	call	_EEReadDouble
  2351  000FFE  C020  F09C         	movff	?_EEReadDouble,_Kd
  2352  001002  C021  F09D         	movff	?_EEReadDouble+1,_Kd+1
  2353  001006  C022  F09E         	movff	?_EEReadDouble+2,_Kd+2
  2354                           
  2355                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  2356  00100A  0E15               	movlw	21
  2357  00100C  EC0B  F00B         	call	_EEReadChar
  2358  001010  6E42               	movwf	_PIDEnableFlag,c
  2359                           
  2360                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  2361  001012  5042               	movf	_PIDEnableFlag,w,c
  2362  001014  6E25               	movwf	??_EEBootUp& (0+255),c
  2363  001016  6A26               	clrf	(??_EEBootUp+1)& (0+255),c
  2364  001018  0E01               	movlw	1
  2365  00101A  1225               	iorwf	??_EEBootUp,f,c
  2366  00101C  0E00               	movlw	0
  2367  00101E  1226               	iorwf	??_EEBootUp+1,f,c
  2368  001020  0425               	decf	??_EEBootUp,w,c
  2369  001022  1026               	iorwf	??_EEBootUp+1,w,c
  2370  001024  A4D8               	btfss	status,2,c
  2371  001026  D003               	goto	l339
  2372                           
  2373                           ;EEPROM.c: 37: {
  2374                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  2375  001028  0E03               	movlw	3
  2376  00102A  6E42               	movwf	_PIDEnableFlag,c
  2377  00102C  D000               	goto	l339
  2378  00102E                     l339:
  2379  00102E  0012               	return		;funcret
  2380  001030                     __end_of_EEBootUp:
  2381                           	opt stack 0
  2382                           tblptru	equ	0xFF8
  2383                           tblptrh	equ	0xFF7
  2384                           tblptrl	equ	0xFF6
  2385                           tablat	equ	0xFF5
  2386                           prodh	equ	0xFF4
  2387                           prodl	equ	0xFF3
  2388                           intcon	equ	0xFF2
  2389                           intcon2	equ	0xFF1
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1l	equ	0xFE1
  2394                           indf2	equ	0xFDF
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _EEReadDouble *****************
  2400 ;; Defined at:
  2401 ;;		line 100 in file "EEPROM.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  location        1    wreg     unsigned char 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  location        1   34[COMRAM] unsigned char 
  2406 ;;  x               1   35[COMRAM] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  3   31[COMRAM] unsigned char 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2416 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;Total ram usage:        5 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    5
  2423 ;; This function calls:
  2424 ;;		_Busy_eep
  2425 ;;		_EEReassembleDouble
  2426 ;;		_Read_b_eep
  2427 ;; This function is called by:
  2428 ;;		_EEBootUp
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text13
  2433  0011AA                     __ptext13:
  2434                           	opt stack 0
  2435  0011AA                     _EEReadDouble:
  2436                           	opt stack 22
  2437                           
  2438                           ;incstack = 0
  2439                           ;EEReadDouble@location stored from wreg
  2440  0011AA  6E23               	movwf	EEReadDouble@location,c
  2441                           
  2442                           ;EEPROM.c: 102: unsigned char x;
  2443                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  2444  0011AC  50F2               	movf	intcon,w,c	;volatile
  2445  0011AE  0B3F               	andlw	63
  2446  0011B0  6EF2               	movwf	intcon,c	;volatile
  2447                           
  2448                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  2449  0011B2  0E00               	movlw	0
  2450  0011B4  6E24               	movwf	EEReadDouble@x,c
  2451  0011B6                     l3172:
  2452  0011B6  0E02               	movlw	2
  2453  0011B8  6424               	cpfsgt	EEReadDouble@x,c
  2454  0011BA  D001               	goto	l3176
  2455  0011BC  D014               	goto	l3184
  2456  0011BE                     l3176:
  2457                           
  2458                           ;EEPROM.c: 107: {
  2459                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  2460  0011BE  5024               	movf	EEReadDouble@x,w,c
  2461  0011C0  0D01               	mullw	1
  2462  0011C2  0E3A               	movlw	low _DDouble
  2463  0011C4  24F3               	addwf	prodl,w,c
  2464  0011C6  6ED9               	movwf	fsr2l,c
  2465  0011C8  0E00               	movlw	high _DDouble
  2466  0011CA  20F4               	addwfc	prodh,w,c
  2467  0011CC  6EDA               	movwf	fsr2h,c
  2468  0011CE  5023               	movf	EEReadDouble@location,w,c
  2469  0011D0  2424               	addwf	EEReadDouble@x,w,c
  2470  0011D2  6E1A               	movwf	Read_b_eep@badd,c
  2471  0011D4  6A1B               	clrf	Read_b_eep@badd+1,c
  2472  0011D6  361B               	rlcf	Read_b_eep@badd+1,f,c
  2473  0011D8  EC28  F00B         	call	_Read_b_eep	;wreg free
  2474  0011DC  6EDF               	movwf	indf2,c
  2475                           
  2476                           ;EEPROM.c: 109: Busy_eep();
  2477  0011DE  EC88  F00B         	call	_Busy_eep	;wreg free
  2478  0011E2  2A24               	incf	EEReadDouble@x,f,c
  2479  0011E4  D7E8               	goto	l3172
  2480  0011E6                     l3184:
  2481                           
  2482                           ;EEPROM.c: 110: }
  2483                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  2484  0011E6  50F2               	movf	intcon,w,c	;volatile
  2485  0011E8  09C0               	iorlw	192
  2486  0011EA  6EF2               	movwf	intcon,c	;volatile
  2487                           
  2488                           ;EEPROM.c: 114: return EEReassembleDouble();
  2489  0011EC  EC75  F009         	call	_EEReassembleDouble	;wreg free
  2490  0011F0  C01A  F020         	movff	?_EEReassembleDouble,?_EEReadDouble
  2491  0011F4  C01B  F021         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  2492  0011F8  C01C  F022         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  2493  0011FC  D000               	goto	l355
  2494  0011FE                     l355:
  2495  0011FE  0012               	return		;funcret
  2496  001200                     __end_of_EEReadDouble:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           intcon2	equ	0xFF1
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           postdec1	equ	0xFE5
  2509                           fsr1l	equ	0xFE1
  2510                           indf2	equ	0xFDF
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _EEReassembleDouble *****************
  2516 ;; Defined at:
  2517 ;;		line 62 in file "EEPROM.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;		None
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  dub             3   28[COMRAM] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  3   25[COMRAM] unsigned char 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2531 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;Total ram usage:        6 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    4
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_EEReadDouble
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text14
  2546  0012EA                     __ptext14:
  2547                           	opt stack 0
  2548  0012EA                     _EEReassembleDouble:
  2549                           	opt stack 22
  2550                           
  2551                           ;EEPROM.c: 64: double dub;
  2552                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  2553                           
  2554                           ;incstack = 0
  2555  0012EA  0E1D               	movlw	low EEReassembleDouble@dub
  2556  0012EC  6E40               	movwf	_DoublePtr,c
  2557  0012EE  0E00               	movlw	high EEReassembleDouble@dub
  2558  0012F0  6E41               	movwf	_DoublePtr+1,c
  2559                           
  2560                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  2561  0012F2  C040  FFD9         	movff	_DoublePtr,fsr2l
  2562  0012F6  C041  FFDA         	movff	_DoublePtr+1,fsr2h
  2563  0012FA  C03A  FFDF         	movff	_DDouble,indf2
  2564                           
  2565                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  2566  0012FE  EE20 F001          	lfsr	2,1
  2567  001302  5040               	movf	_DoublePtr,w,c
  2568  001304  26D9               	addwf	fsr2l,f,c
  2569  001306  5041               	movf	_DoublePtr+1,w,c
  2570  001308  22DA               	addwfc	fsr2h,f,c
  2571  00130A  C03B  FFDF         	movff	_DDouble+1,indf2
  2572                           
  2573                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  2574  00130E  EE20 F002          	lfsr	2,2
  2575  001312  5040               	movf	_DoublePtr,w,c
  2576  001314  26D9               	addwf	fsr2l,f,c
  2577  001316  5041               	movf	_DoublePtr+1,w,c
  2578  001318  22DA               	addwfc	fsr2h,f,c
  2579  00131A  C03C  FFDF         	movff	_DDouble+2,indf2
  2580                           
  2581                           ;EEPROM.c: 69: return dub;
  2582  00131E  C01D  F01A         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  2583  001322  C01E  F01B         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  2584  001326  C01F  F01C         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  2585  00132A  D000               	goto	l345
  2586  00132C                     l345:
  2587  00132C  0012               	return		;funcret
  2588  00132E                     __end_of_EEReassembleDouble:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           intcon2	equ	0xFF1
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _Busy_eep *****************
  2608 ;; Defined at:
  2609 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		None
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    4
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_EEReadDouble
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text15
  2638  001710                     __ptext15:
  2639                           	opt stack 0
  2640  001710                     _Busy_eep:
  2641                           	opt stack 22
  2642                           
  2643                           ;incstack = 0
  2644  001710  D000               	goto	l535
  2645  001712                     l535:
  2646  001712  B2A6               	btfsc	4006,1,c	;volatile
  2647  001714  D7FE               	goto	l535
  2648  001716  0012               	return		;funcret
  2649  001718                     __end_of_Busy_eep:
  2650                           	opt stack 0
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           intcon	equ	0xFF2
  2658                           intcon2	equ	0xFF1
  2659                           postinc0	equ	0xFEE
  2660                           wreg	equ	0xFE8
  2661                           postdec1	equ	0xFE5
  2662                           fsr1l	equ	0xFE1
  2663                           indf2	equ	0xFDF
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _EEReadChar *****************
  2669 ;; Defined at:
  2670 ;;		line 136 in file "EEPROM.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  location        1    wreg     unsigned char 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  location        1   27[COMRAM] unsigned char 
  2675 ;;  ch              1   28[COMRAM] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      unsigned char 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;Total ram usage:        2 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    5
  2692 ;; This function calls:
  2693 ;;		_Read_b_eep
  2694 ;; This function is called by:
  2695 ;;		_EEBootUp
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text16
  2700  001616                     __ptext16:
  2701                           	opt stack 0
  2702  001616                     _EEReadChar:
  2703                           	opt stack 22
  2704                           
  2705                           ;incstack = 0
  2706                           ;EEReadChar@location stored from wreg
  2707  001616  6E1C               	movwf	EEReadChar@location,c
  2708                           
  2709                           ;EEPROM.c: 138: unsigned char ch;
  2710                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  2711  001618  50F2               	movf	intcon,w,c	;volatile
  2712  00161A  0B3F               	andlw	63
  2713  00161C  6EF2               	movwf	intcon,c	;volatile
  2714                           
  2715                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  2716  00161E  C01C  F01A         	movff	EEReadChar@location,Read_b_eep@badd
  2717  001622  6A1B               	clrf	Read_b_eep@badd+1,c
  2718  001624  EC28  F00B         	call	_Read_b_eep	;wreg free
  2719  001628  6E1D               	movwf	EEReadChar@ch,c
  2720                           
  2721                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  2722  00162A  50F2               	movf	intcon,w,c	;volatile
  2723  00162C  09C0               	iorlw	192
  2724  00162E  6EF2               	movwf	intcon,c	;volatile
  2725                           
  2726                           ;EEPROM.c: 146: return ch;
  2727  001630  501D               	movf	EEReadChar@ch,w,c
  2728  001632  D000               	goto	l361
  2729  001634                     l361:
  2730  001634  0012               	return		;funcret
  2731  001636                     __end_of_EEReadChar:
  2732                           	opt stack 0
  2733                           tblptru	equ	0xFF8
  2734                           tblptrh	equ	0xFF7
  2735                           tblptrl	equ	0xFF6
  2736                           tablat	equ	0xFF5
  2737                           prodh	equ	0xFF4
  2738                           prodl	equ	0xFF3
  2739                           intcon	equ	0xFF2
  2740                           intcon2	equ	0xFF1
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1l	equ	0xFE1
  2745                           indf2	equ	0xFDF
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function _Read_b_eep *****************
  2751 ;; Defined at:
  2752 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  badd            2   25[COMRAM] unsigned int 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;		None
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      unsigned char 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;Total ram usage:        2 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    4
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_EEReadDouble
  2777 ;;		_EEReadChar
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text17
  2782  001650                     __ptext17:
  2783                           	opt stack 0
  2784  001650                     _Read_b_eep:
  2785                           	opt stack 22
  2786                           
  2787                           ;incstack = 0
  2788  001650  501B               	movf	Read_b_eep@badd+1,w,c
  2789  001652  0B03               	andlw	3
  2790  001654  6EAA               	movwf	4010,c	;volatile
  2791  001656  C01A  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  2792  00165A  9CA6               	bcf	4006,6,c	;volatile
  2793  00165C  9EA6               	bcf	4006,7,c	;volatile
  2794  00165E  80A6               	bsf	4006,0,c	;volatile
  2795  001660  F000               	nop	
  2796  001662  F000               	nop	
  2797  001664  50A8               	movf	4008,w,c	;volatile
  2798  001666  D000               	goto	l551
  2799  001668                     l551:
  2800  001668  0012               	return		;funcret
  2801  00166A                     __end_of_Read_b_eep:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           intcon	equ	0xFF2
  2810                           intcon2	equ	0xFF1
  2811                           postinc0	equ	0xFEE
  2812                           wreg	equ	0xFE8
  2813                           postdec1	equ	0xFE5
  2814                           fsr1l	equ	0xFE1
  2815                           indf2	equ	0xFDF
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _calculatePID *****************
  2821 ;; Defined at:
  2822 ;;		line 30 in file "PID.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  angle           3   39[BANK0 ] unsigned char 
  2825 ;;  setpoint        3   42[BANK0 ] unsigned char 
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;  derErr          3   45[BANK0 ] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;		None               void
  2830 ;; Registers used:
  2831 ;;		wreg, status,2, status,0, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2837 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;Total ram usage:       15 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    7
  2844 ;; This function calls:
  2845 ;;		___ftadd
  2846 ;;		___ftdiv
  2847 ;;		___ftge
  2848 ;;		___ftmul
  2849 ;;		___ftneg
  2850 ;;		___ftsub
  2851 ;;		___fttol
  2852 ;; This function is called by:
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text18
  2858  0002E6                     __ptext18:
  2859                           	opt stack 0
  2860  0002E6                     _calculatePID:
  2861                           	opt stack 23
  2862                           
  2863                           ;PID.c: 32: double derErr;
  2864                           ;PID.c: 33: if (PIDEnableFlag == 3)
  2865                           
  2866                           ;incstack = 0
  2867  0002E6  0E03               	movlw	3
  2868  0002E8  1842               	xorwf	_PIDEnableFlag,w,c
  2869  0002EA  A4D8               	btfss	status,2,c
  2870  0002EC  D01E               	goto	l3688
  2871                           
  2872                           ;PID.c: 34: {
  2873                           ;PID.c: 35: error = 0;
  2874  0002EE  0E00               	movlw	0
  2875  0002F0  0100               	movlb	0	; () banked
  2876  0002F2  6FA5               	movwf	_error& (0+255),b
  2877  0002F4  0E00               	movlw	0
  2878  0002F6  0100               	movlb	0	; () banked
  2879  0002F8  6FA6               	movwf	(_error+1)& (0+255),b
  2880  0002FA  0E00               	movlw	0
  2881  0002FC  0100               	movlb	0	; () banked
  2882  0002FE  6FA7               	movwf	(_error+2)& (0+255),b
  2883                           
  2884                           ;PID.c: 36: prevErr = 0;
  2885  000300  0E00               	movlw	0
  2886  000302  0100               	movlb	0	; () banked
  2887  000304  6FAB               	movwf	_prevErr& (0+255),b
  2888  000306  0E00               	movlw	0
  2889  000308  0100               	movlb	0	; () banked
  2890  00030A  6FAC               	movwf	(_prevErr+1)& (0+255),b
  2891  00030C  0E00               	movlw	0
  2892  00030E  0100               	movlb	0	; () banked
  2893  000310  6FAD               	movwf	(_prevErr+2)& (0+255),b
  2894                           
  2895                           ;PID.c: 37: intErr = 0;
  2896  000312  0E00               	movlw	0
  2897  000314  0100               	movlb	0	; () banked
  2898  000316  6FA8               	movwf	_intErr& (0+255),b
  2899  000318  0E00               	movlw	0
  2900  00031A  0100               	movlb	0	; () banked
  2901  00031C  6FA9               	movwf	(_intErr+1)& (0+255),b
  2902  00031E  0E00               	movlw	0
  2903  000320  0100               	movlb	0	; () banked
  2904  000322  6FAA               	movwf	(_intErr+2)& (0+255),b
  2905                           
  2906                           ;PID.c: 38: PIDEnableFlag = 1;
  2907  000324  0E01               	movlw	1
  2908  000326  6E42               	movwf	_PIDEnableFlag,c
  2909  000328  D000               	goto	l3688
  2910  00032A                     l3688:
  2911                           
  2912                           ;PID.c: 39: }
  2913                           ;PID.c: 41: error = setpoint - angle;
  2914  00032A  C087  F01A         	movff	calculatePID@angle,___ftneg@f1
  2915  00032E  C088  F01B         	movff	calculatePID@angle+1,___ftneg@f1+1
  2916  000332  C089  F01C         	movff	calculatePID@angle+2,___ftneg@f1+2
  2917  000336  ECC5  F00A         	call	___ftneg	;wreg free
  2918  00033A  C01A  F06C         	movff	?___ftneg,___ftadd@f1
  2919  00033E  C01B  F06D         	movff	?___ftneg+1,___ftadd@f1+1
  2920  000342  C01C  F06E         	movff	?___ftneg+2,___ftadd@f1+2
  2921  000346  C08A  F06F         	movff	calculatePID@setpoint,___ftadd@f2
  2922  00034A  C08B  F070         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2923  00034E  C08C  F071         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2924  000352  ECCC  F002         	call	___ftadd	;wreg free
  2925  000356  C06C  F0A5         	movff	?___ftadd,_error
  2926  00035A  C06D  F0A6         	movff	?___ftadd+1,_error+1
  2927  00035E  C06E  F0A7         	movff	?___ftadd+2,_error+2
  2928                           
  2929                           ;PID.c: 42: if (error > 180)
  2930  000362  0E00               	movlw	0
  2931  000364  6E1A               	movwf	___ftge@ff1,c
  2932  000366  0E34               	movlw	52
  2933  000368  6E1B               	movwf	___ftge@ff1+1,c
  2934  00036A  0E43               	movlw	67
  2935  00036C  6E1C               	movwf	___ftge@ff1+2,c
  2936  00036E  C0A5  F01D         	movff	_error,___ftge@ff2
  2937  000372  C0A6  F01E         	movff	_error+1,___ftge@ff2+1
  2938  000376  C0A7  F01F         	movff	_error+2,___ftge@ff2+2
  2939  00037A  EC4D  F007         	call	___ftge	;wreg free
  2940  00037E  B0D8               	btfsc	status,0,c
  2941  000380  D018               	goto	l3694
  2942                           
  2943                           ;PID.c: 43: error -= 360;
  2944  000382  C0A5  F078         	movff	_error,___ftsub@f1
  2945  000386  C0A6  F079         	movff	_error+1,___ftsub@f1+1
  2946  00038A  C0A7  F07A         	movff	_error+2,___ftsub@f1+2
  2947  00038E  0E00               	movlw	0
  2948  000390  0100               	movlb	0	; () banked
  2949  000392  6F7B               	movwf	___ftsub@f2& (0+255),b
  2950  000394  0EB4               	movlw	180
  2951  000396  0100               	movlb	0	; () banked
  2952  000398  6F7C               	movwf	(___ftsub@f2+1)& (0+255),b
  2953  00039A  0E43               	movlw	67
  2954  00039C  0100               	movlb	0	; () banked
  2955  00039E  6F7D               	movwf	(___ftsub@f2+2)& (0+255),b
  2956  0003A0  EC2A  F009         	call	___ftsub	;wreg free
  2957  0003A4  C078  F0A5         	movff	?___ftsub,_error
  2958  0003A8  C079  F0A6         	movff	?___ftsub+1,_error+1
  2959  0003AC  C07A  F0A7         	movff	?___ftsub+2,_error+2
  2960  0003B0  D028               	goto	l151
  2961  0003B2                     l3694:
  2962                           
  2963                           ;PID.c: 44: else if (error < -180)
  2964  0003B2  C0A5  F01A         	movff	_error,___ftge@ff1
  2965  0003B6  C0A6  F01B         	movff	_error+1,___ftge@ff1+1
  2966  0003BA  C0A7  F01C         	movff	_error+2,___ftge@ff1+2
  2967  0003BE  0E00               	movlw	0
  2968  0003C0  6E1D               	movwf	___ftge@ff2,c
  2969  0003C2  0E34               	movlw	52
  2970  0003C4  6E1E               	movwf	___ftge@ff2+1,c
  2971  0003C6  0EC3               	movlw	195
  2972  0003C8  6E1F               	movwf	___ftge@ff2+2,c
  2973  0003CA  EC4D  F007         	call	___ftge	;wreg free
  2974  0003CE  B0D8               	btfsc	status,0,c
  2975  0003D0  D018               	goto	l151
  2976                           
  2977                           ;PID.c: 45: error += 360;
  2978  0003D2  C0A5  F06C         	movff	_error,___ftadd@f1
  2979  0003D6  C0A6  F06D         	movff	_error+1,___ftadd@f1+1
  2980  0003DA  C0A7  F06E         	movff	_error+2,___ftadd@f1+2
  2981  0003DE  0E00               	movlw	0
  2982  0003E0  0100               	movlb	0	; () banked
  2983  0003E2  6F6F               	movwf	___ftadd@f2& (0+255),b
  2984  0003E4  0EB4               	movlw	180
  2985  0003E6  0100               	movlb	0	; () banked
  2986  0003E8  6F70               	movwf	(___ftadd@f2+1)& (0+255),b
  2987  0003EA  0E43               	movlw	67
  2988  0003EC  0100               	movlb	0	; () banked
  2989  0003EE  6F71               	movwf	(___ftadd@f2+2)& (0+255),b
  2990  0003F0  ECCC  F002         	call	___ftadd	;wreg free
  2991  0003F4  C06C  F0A5         	movff	?___ftadd,_error
  2992  0003F8  C06D  F0A6         	movff	?___ftadd+1,_error+1
  2993  0003FC  C06E  F0A7         	movff	?___ftadd+2,_error+2
  2994  000400  D000               	goto	l151
  2995  000402                     l151:
  2996                           
  2997                           ;PID.c: 47: derErr = error - prevErr;
  2998  000402  C0AB  F01A         	movff	_prevErr,___ftneg@f1
  2999  000406  C0AC  F01B         	movff	_prevErr+1,___ftneg@f1+1
  3000  00040A  C0AD  F01C         	movff	_prevErr+2,___ftneg@f1+2
  3001  00040E  ECC5  F00A         	call	___ftneg	;wreg free
  3002  000412  C01A  F06C         	movff	?___ftneg,___ftadd@f1
  3003  000416  C01B  F06D         	movff	?___ftneg+1,___ftadd@f1+1
  3004  00041A  C01C  F06E         	movff	?___ftneg+2,___ftadd@f1+2
  3005  00041E  C0A5  F06F         	movff	_error,___ftadd@f2
  3006  000422  C0A6  F070         	movff	_error+1,___ftadd@f2+1
  3007  000426  C0A7  F071         	movff	_error+2,___ftadd@f2+2
  3008  00042A  ECCC  F002         	call	___ftadd	;wreg free
  3009  00042E  C06C  F08D         	movff	?___ftadd,calculatePID@derErr
  3010  000432  C06D  F08E         	movff	?___ftadd+1,calculatePID@derErr+1
  3011  000436  C06E  F08F         	movff	?___ftadd+2,calculatePID@derErr+2
  3012                           
  3013                           ;PID.c: 48: intErr += error;
  3014  00043A  C0A8  F06C         	movff	_intErr,___ftadd@f1
  3015  00043E  C0A9  F06D         	movff	_intErr+1,___ftadd@f1+1
  3016  000442  C0AA  F06E         	movff	_intErr+2,___ftadd@f1+2
  3017  000446  C0A5  F06F         	movff	_error,___ftadd@f2
  3018  00044A  C0A6  F070         	movff	_error+1,___ftadd@f2+1
  3019  00044E  C0A7  F071         	movff	_error+2,___ftadd@f2+2
  3020  000452  ECCC  F002         	call	___ftadd	;wreg free
  3021  000456  C06C  F0A8         	movff	?___ftadd,_intErr
  3022  00045A  C06D  F0A9         	movff	?___ftadd+1,_intErr+1
  3023  00045E  C06E  F0AA         	movff	?___ftadd+2,_intErr+2
  3024                           
  3025                           ;PID.c: 49: if (intErr > 2000)
  3026  000462  0E00               	movlw	0
  3027  000464  6E1A               	movwf	___ftge@ff1,c
  3028  000466  0EFA               	movlw	250
  3029  000468  6E1B               	movwf	___ftge@ff1+1,c
  3030  00046A  0E44               	movlw	68
  3031  00046C  6E1C               	movwf	___ftge@ff1+2,c
  3032  00046E  C0A8  F01D         	movff	_intErr,___ftge@ff2
  3033  000472  C0A9  F01E         	movff	_intErr+1,___ftge@ff2+1
  3034  000476  C0AA  F01F         	movff	_intErr+2,___ftge@ff2+2
  3035  00047A  EC4D  F007         	call	___ftge	;wreg free
  3036  00047E  B0D8               	btfsc	status,0,c
  3037  000480  D00A               	goto	l3700
  3038                           
  3039                           ;PID.c: 50: intErr = 2000;
  3040  000482  0E00               	movlw	0
  3041  000484  0100               	movlb	0	; () banked
  3042  000486  6FA8               	movwf	_intErr& (0+255),b
  3043  000488  0EFA               	movlw	250
  3044  00048A  0100               	movlb	0	; () banked
  3045  00048C  6FA9               	movwf	(_intErr+1)& (0+255),b
  3046  00048E  0E44               	movlw	68
  3047  000490  0100               	movlb	0	; () banked
  3048  000492  6FAA               	movwf	(_intErr+2)& (0+255),b
  3049  000494  D000               	goto	l3700
  3050  000496                     l3700:
  3051                           
  3052                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3053  000496  C0A8  F063         	movff	_intErr,___ftmul@f2
  3054  00049A  C0A9  F064         	movff	_intErr+1,___ftmul@f2+1
  3055  00049E  C0AA  F065         	movff	_intErr+2,___ftmul@f2+2
  3056  0004A2  C09F  F060         	movff	_Ki,___ftmul@f1
  3057  0004A6  C0A0  F061         	movff	_Ki+1,___ftmul@f1+1
  3058  0004AA  C0A1  F062         	movff	_Ki+2,___ftmul@f1+2
  3059  0004AE  EC0B  F004         	call	___ftmul	;wreg free
  3060  0004B2  C060  F090         	movff	?___ftmul,_calculatePID$3286
  3061  0004B6  C061  F091         	movff	?___ftmul+1,_calculatePID$3286+1
  3062  0004BA  C062  F092         	movff	?___ftmul+2,_calculatePID$3286+2
  3063                           
  3064                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3065  0004BE  C0B5  F063         	movff	_loopTime,___ftmul@f2
  3066  0004C2  C0B6  F064         	movff	_loopTime+1,___ftmul@f2+1
  3067  0004C6  C0B7  F065         	movff	_loopTime+2,___ftmul@f2+2
  3068  0004CA  C090  F060         	movff	_calculatePID$3286,___ftmul@f1
  3069  0004CE  C091  F061         	movff	_calculatePID$3286+1,___ftmul@f1+1
  3070  0004D2  C092  F062         	movff	_calculatePID$3286+2,___ftmul@f1+2
  3071  0004D6  EC0B  F004         	call	___ftmul	;wreg free
  3072  0004DA  C060  F06F         	movff	?___ftmul,___ftadd@f2
  3073  0004DE  C061  F070         	movff	?___ftmul+1,___ftadd@f2+1
  3074  0004E2  C062  F071         	movff	?___ftmul+2,___ftadd@f2+2
  3075  0004E6  C0A5  F063         	movff	_error,___ftmul@f2
  3076  0004EA  C0A6  F064         	movff	_error+1,___ftmul@f2+1
  3077  0004EE  C0A7  F065         	movff	_error+2,___ftmul@f2+2
  3078  0004F2  C0A2  F060         	movff	_Kp,___ftmul@f1
  3079  0004F6  C0A3  F061         	movff	_Kp+1,___ftmul@f1+1
  3080  0004FA  C0A4  F062         	movff	_Kp+2,___ftmul@f1+2
  3081  0004FE  EC0B  F004         	call	___ftmul	;wreg free
  3082  000502  C060  F06C         	movff	?___ftmul,___ftadd@f1
  3083  000506  C061  F06D         	movff	?___ftmul+1,___ftadd@f1+1
  3084  00050A  C062  F06E         	movff	?___ftmul+2,___ftadd@f1+2
  3085  00050E  ECCC  F002         	call	___ftadd	;wreg free
  3086  000512  C06C  F093         	movff	?___ftadd,_calculatePID$3287
  3087  000516  C06D  F094         	movff	?___ftadd+1,_calculatePID$3287+1
  3088  00051A  C06E  F095         	movff	?___ftadd+2,_calculatePID$3287+2
  3089                           
  3090                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3091  00051E  C09C  F063         	movff	_Kd,___ftmul@f2
  3092  000522  C09D  F064         	movff	_Kd+1,___ftmul@f2+1
  3093  000526  C09E  F065         	movff	_Kd+2,___ftmul@f2+2
  3094  00052A  C0B5  F025         	movff	_loopTime,___ftdiv@f2
  3095  00052E  C0B6  F026         	movff	_loopTime+1,___ftdiv@f2+1
  3096  000532  C0B7  F027         	movff	_loopTime+2,___ftdiv@f2+2
  3097  000536  C08D  F022         	movff	calculatePID@derErr,___ftdiv@f1
  3098  00053A  C08E  F023         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  3099  00053E  C08F  F024         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  3100  000542  ECC1  F005         	call	___ftdiv	;wreg free
  3101  000546  C022  F060         	movff	?___ftdiv,___ftmul@f1
  3102  00054A  C023  F061         	movff	?___ftdiv+1,___ftmul@f1+1
  3103  00054E  C024  F062         	movff	?___ftdiv+2,___ftmul@f1+2
  3104  000552  EC0B  F004         	call	___ftmul	;wreg free
  3105  000556  C060  F06F         	movff	?___ftmul,___ftadd@f2
  3106  00055A  C061  F070         	movff	?___ftmul+1,___ftadd@f2+1
  3107  00055E  C062  F071         	movff	?___ftmul+2,___ftadd@f2+2
  3108  000562  C093  F06C         	movff	_calculatePID$3287,___ftadd@f1
  3109  000566  C094  F06D         	movff	_calculatePID$3287+1,___ftadd@f1+1
  3110  00056A  C095  F06E         	movff	_calculatePID$3287+2,___ftadd@f1+2
  3111  00056E  ECCC  F002         	call	___ftadd	;wreg free
  3112  000572  C06C  F078         	movff	?___ftadd,___fttol@f1
  3113  000576  C06D  F079         	movff	?___ftadd+1,___fttol@f1+1
  3114  00057A  C06E  F07A         	movff	?___ftadd+2,___fttol@f1+2
  3115  00057E  ECB3  F004         	call	___fttol	;wreg free
  3116  000582  C078  F0AE         	movff	?___fttol,_motorInput
  3117  000586  C079  F0AF         	movff	?___fttol+1,_motorInput+1
  3118                           
  3119                           ;PID.c: 54: prevErr = error;
  3120  00058A  C0A5  F0AB         	movff	_error,_prevErr
  3121  00058E  C0A6  F0AC         	movff	_error+1,_prevErr+1
  3122  000592  C0A7  F0AD         	movff	_error+2,_prevErr+2
  3123  000596  0012               	return		;funcret
  3124  000598                     __end_of_calculatePID:
  3125                           	opt stack 0
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           intcon2	equ	0xFF1
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           postdec1	equ	0xFE5
  3137                           fsr1l	equ	0xFE1
  3138                           indf2	equ	0xFDF
  3139                           fsr2h	equ	0xFDA
  3140                           fsr2l	equ	0xFD9
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function ___fttol *****************
  3144 ;; Defined at:
  3145 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  f1              3   24[BANK0 ] float 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  lval            4   34[BANK0 ] unsigned long 
  3150 ;;  exp1            1   38[BANK0 ] unsigned char 
  3151 ;;  sign1           1   33[BANK0 ] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  4   24[BANK0 ] long 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:       15 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    4
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_calculatePID
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text19
  3176  000966                     __ptext19:
  3177                           	opt stack 0
  3178  000966                     ___fttol:
  3179                           	opt stack 25
  3180                           
  3181                           ;incstack = 0
  3182  000966  C07A  F07C         	movff	___fttol@f1+2,??___fttol
  3183  00096A  0100               	movlb	0	; () banked
  3184  00096C  6B7D               	clrf	(??___fttol+1)& (0+255),b
  3185  00096E  6B7E               	clrf	(??___fttol+2)& (0+255),b
  3186  000970  0100               	movlb	0	; () banked
  3187  000972  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3188  000974  0100               	movlb	0	; () banked
  3189  000976  377C               	rlcf	??___fttol& (0+255),f,b
  3190  000978  E301               	bnc	u3131
  3191  00097A  817D               	bsf	(??___fttol+1)& (0+255),0,b
  3192  00097C                     u3131:
  3193  00097C  0100               	movlb	0	; () banked
  3194  00097E  517C               	movf	??___fttol& (0+255),w,b
  3195  000980  0100               	movlb	0	; () banked
  3196  000982  6F86               	movwf	___fttol@exp1& (0+255),b
  3197  000984  0100               	movlb	0	; () banked
  3198  000986  5186               	movf	___fttol@exp1& (0+255),w,b
  3199  000988  A4D8               	btfss	status,2,c
  3200  00098A  D002               	goto	l3546
  3201  00098C  D051               	goto	l3570
  3202                           
  3203                           ; BSR set to: 0
  3204                           
  3205                           ; BSR set to: 0
  3206  00098E  D083               	goto	l1039
  3207  000990                     l3546:
  3208                           
  3209                           ; BSR set to: 0
  3210  000990  0E17               	movlw	23
  3211  000992  0100               	movlb	0	; () banked
  3212  000994  6F7C               	movwf	??___fttol& (0+255),b
  3213  000996  C078  F07D         	movff	___fttol@f1,??___fttol+1
  3214  00099A  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
  3215  00099E  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
  3216  0009A2  0100               	movlb	0	; () banked
  3217  0009A4  297C               	incf	??___fttol& (0+255),w,b
  3218  0009A6  0100               	movlb	0	; () banked
  3219  0009A8  6F80               	movwf	(??___fttol+4)& (0+255),b
  3220  0009AA  D005               	goto	u3150
  3221  0009AC                     u3155:
  3222  0009AC  0100               	movlb	0	; () banked
  3223  0009AE  90D8               	bcf	status,0,c
  3224  0009B0  337F               	rrcf	(??___fttol+3)& (0+255),f,b
  3225  0009B2  337E               	rrcf	(??___fttol+2)& (0+255),f,b
  3226  0009B4  337D               	rrcf	(??___fttol+1)& (0+255),f,b
  3227  0009B6                     u3150:
  3228  0009B6  0100               	movlb	0	; () banked
  3229  0009B8  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
  3230  0009BA  D7F8               	goto	u3155
  3231  0009BC  0100               	movlb	0	; () banked
  3232  0009BE  517D               	movf	(??___fttol+1)& (0+255),w,b
  3233  0009C0  0100               	movlb	0	; () banked
  3234  0009C2  6F81               	movwf	___fttol@sign1& (0+255),b
  3235                           
  3236                           ; BSR set to: 0
  3237  0009C4  0100               	movlb	0	; () banked
  3238  0009C6  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
  3239                           
  3240                           ; BSR set to: 0
  3241  0009C8  0EFF               	movlw	255
  3242  0009CA  0100               	movlb	0	; () banked
  3243  0009CC  1778               	andwf	___fttol@f1& (0+255),f,b
  3244  0009CE  0EFF               	movlw	255
  3245  0009D0  0100               	movlb	0	; () banked
  3246  0009D2  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
  3247  0009D4  0E00               	movlw	0
  3248  0009D6  0100               	movlb	0	; () banked
  3249  0009D8  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
  3250                           
  3251                           ; BSR set to: 0
  3252  0009DA  0100               	movlb	0	; () banked
  3253  0009DC  5178               	movf	___fttol@f1& (0+255),w,b
  3254  0009DE  0100               	movlb	0	; () banked
  3255  0009E0  6F82               	movwf	___fttol@lval& (0+255),b
  3256  0009E2  0100               	movlb	0	; () banked
  3257  0009E4  5179               	movf	(___fttol@f1+1)& (0+255),w,b
  3258  0009E6  0100               	movlb	0	; () banked
  3259  0009E8  6F83               	movwf	(___fttol@lval+1)& (0+255),b
  3260  0009EA  0100               	movlb	0	; () banked
  3261  0009EC  517A               	movf	(___fttol@f1+2)& (0+255),w,b
  3262  0009EE  0100               	movlb	0	; () banked
  3263  0009F0  6F84               	movwf	(___fttol@lval+2)& (0+255),b
  3264  0009F2  0100               	movlb	0	; () banked
  3265  0009F4  6B85               	clrf	(___fttol@lval+3)& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268  0009F6  0E8E               	movlw	142
  3269  0009F8  0100               	movlb	0	; () banked
  3270  0009FA  5F86               	subwf	___fttol@exp1& (0+255),f,b
  3271                           
  3272                           ; BSR set to: 0
  3273  0009FC  0100               	movlb	0	; () banked
  3274  0009FE  AF86               	btfss	___fttol@exp1& (0+255),7,b
  3275  000A00  D013               	goto	l3568
  3276                           
  3277                           ; BSR set to: 0
  3278  000A02  0100               	movlb	0	; () banked
  3279  000A04  5186               	movf	___fttol@exp1& (0+255),w,b
  3280  000A06  0A80               	xorlw	128
  3281  000A08  0F8F               	addlw	143
  3282  000A0A  B0D8               	btfsc	status,0,c
  3283  000A0C  D003               	goto	l3564
  3284  000A0E  D010               	goto	l3570
  3285                           
  3286                           ; BSR set to: 0
  3287                           
  3288                           ; BSR set to: 0
  3289  000A10  D042               	goto	l1039
  3290                           
  3291                           ; BSR set to: 0
  3292  000A12  D000               	goto	l3564
  3293  000A14                     l3564:
  3294                           
  3295                           ; BSR set to: 0
  3296  000A14  0100               	movlb	0	; () banked
  3297  000A16  90D8               	bcf	status,0,c
  3298  000A18  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3299  000A1A  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3300  000A1C  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3301  000A1E  3382               	rrcf	___fttol@lval& (0+255),f,b
  3302                           
  3303                           ; BSR set to: 0
  3304  000A20  0100               	movlb	0	; () banked
  3305  000A22  3F86               	incfsz	___fttol@exp1& (0+255),f,b
  3306  000A24  D7F7               	goto	l3564
  3307                           
  3308                           ; BSR set to: 0
  3309  000A26  D01F               	goto	l3578
  3310  000A28                     l3568:
  3311                           
  3312                           ; BSR set to: 0
  3313  000A28  0E17               	movlw	23
  3314  000A2A  0100               	movlb	0	; () banked
  3315  000A2C  6586               	cpfsgt	___fttol@exp1& (0+255),b
  3316  000A2E  D014               	goto	l3576
  3317  000A30                     l3570:
  3318                           
  3319                           ; BSR set to: 0
  3320  000A30  0E00               	movlw	0
  3321  000A32  0100               	movlb	0	; () banked
  3322  000A34  6F78               	movwf	?___fttol& (0+255),b
  3323  000A36  0E00               	movlw	0
  3324  000A38  6F79               	movwf	(?___fttol+1)& (0+255),b
  3325  000A3A  0E00               	movlw	0
  3326  000A3C  6F7A               	movwf	(?___fttol+2)& (0+255),b
  3327  000A3E  0E00               	movlw	0
  3328  000A40  6F7B               	movwf	(?___fttol+3)& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331  000A42  D029               	goto	l1039
  3332                           
  3333                           ; BSR set to: 0
  3334  000A44  D009               	goto	l3576
  3335  000A46                     l3574:
  3336                           
  3337                           ; BSR set to: 0
  3338  000A46  0100               	movlb	0	; () banked
  3339  000A48  90D8               	bcf	status,0,c
  3340  000A4A  3782               	rlcf	___fttol@lval& (0+255),f,b
  3341  000A4C  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3342  000A4E  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3343  000A50  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3344  000A52  0100               	movlb	0	; () banked
  3345  000A54  0786               	decf	___fttol@exp1& (0+255),f,b
  3346  000A56  D000               	goto	l3576
  3347  000A58                     l3576:
  3348                           
  3349                           ; BSR set to: 0
  3350  000A58  0100               	movlb	0	; () banked
  3351  000A5A  5186               	movf	___fttol@exp1& (0+255),w,b
  3352  000A5C  0100               	movlb	0	; () banked
  3353  000A5E  B4D8               	btfsc	status,2,c
  3354  000A60  D002               	goto	l3578
  3355  000A62  D7F1               	goto	l3574
  3356                           
  3357                           ; BSR set to: 0
  3358  000A64  D000               	goto	l3578
  3359  000A66                     l3578:
  3360                           
  3361                           ; BSR set to: 0
  3362  000A66  0100               	movlb	0	; () banked
  3363  000A68  5181               	movf	___fttol@sign1& (0+255),w,b
  3364  000A6A  0100               	movlb	0	; () banked
  3365  000A6C  B4D8               	btfsc	status,2,c
  3366  000A6E  D00A               	goto	l3582
  3367                           
  3368                           ; BSR set to: 0
  3369  000A70  0100               	movlb	0	; () banked
  3370  000A72  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
  3371  000A74  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
  3372  000A76  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
  3373  000A78  6D82               	negf	___fttol@lval& (0+255),b
  3374  000A7A  0E00               	movlw	0
  3375  000A7C  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3376  000A7E  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3377  000A80  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3378  000A82  D000               	goto	l3582
  3379  000A84                     l3582:
  3380                           
  3381                           ; BSR set to: 0
  3382  000A84  C082  F078         	movff	___fttol@lval,?___fttol
  3383  000A88  C083  F079         	movff	___fttol@lval+1,?___fttol+1
  3384  000A8C  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
  3385  000A90  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
  3386  000A94  D000               	goto	l1039
  3387  000A96                     l1039:
  3388                           
  3389                           ; BSR set to: 0
  3390  000A96  0012               	return		;funcret
  3391  000A98                     __end_of___fttol:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           intcon2	equ	0xFF1
  3401                           postinc0	equ	0xFEE
  3402                           wreg	equ	0xFE8
  3403                           postdec1	equ	0xFE5
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function ___ftsub *****************
  3411 ;; Defined at:
  3412 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  f1              3   24[BANK0 ] float 
  3415 ;;  f2              3   27[BANK0 ] float 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  3   24[BANK0 ] float 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3427 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;Total ram usage:        6 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    6
  3434 ;; This function calls:
  3435 ;;		___ftadd
  3436 ;; This function is called by:
  3437 ;;		_calculatePID
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text20
  3442  001254                     __ptext20:
  3443                           	opt stack 0
  3444  001254                     ___ftsub:
  3445                           	opt stack 23
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;incstack = 0
  3449  001254  0100               	movlb	0	; () banked
  3450  001256  517B               	movf	___ftsub@f2& (0+255),w,b
  3451  001258  0100               	movlb	0	; () banked
  3452  00125A  117C               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  3453  00125C  0100               	movlb	0	; () banked
  3454  00125E  117D               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  3455  001260  B4D8               	btfsc	status,2,c
  3456  001262  D00A               	goto	l3514
  3457                           
  3458                           ; BSR set to: 0
  3459  001264  0E00               	movlw	0
  3460  001266  0100               	movlb	0	; () banked
  3461  001268  1B7B               	xorwf	___ftsub@f2& (0+255),f,b
  3462  00126A  0E00               	movlw	0
  3463  00126C  0100               	movlb	0	; () banked
  3464  00126E  1B7C               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  3465  001270  0E80               	movlw	128
  3466  001272  0100               	movlb	0	; () banked
  3467  001274  1B7D               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  3468  001276  D000               	goto	l3514
  3469  001278                     l3514:
  3470                           
  3471                           ; BSR set to: 0
  3472  001278  C078  F06C         	movff	___ftsub@f1,___ftadd@f1
  3473  00127C  C079  F06D         	movff	___ftsub@f1+1,___ftadd@f1+1
  3474  001280  C07A  F06E         	movff	___ftsub@f1+2,___ftadd@f1+2
  3475  001284  C07B  F06F         	movff	___ftsub@f2,___ftadd@f2
  3476  001288  C07C  F070         	movff	___ftsub@f2+1,___ftadd@f2+1
  3477  00128C  C07D  F071         	movff	___ftsub@f2+2,___ftadd@f2+2
  3478  001290  ECCC  F002         	call	___ftadd	;wreg free
  3479  001294  C06C  F078         	movff	?___ftadd,?___ftsub
  3480  001298  C06D  F079         	movff	?___ftadd+1,?___ftsub+1
  3481  00129C  C06E  F07A         	movff	?___ftadd+2,?___ftsub+2
  3482  0012A0  D000               	goto	l1035
  3483  0012A2                     l1035:
  3484  0012A2  0012               	return		;funcret
  3485  0012A4                     __end_of___ftsub:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodh	equ	0xFF4
  3492                           prodl	equ	0xFF3
  3493                           intcon	equ	0xFF2
  3494                           intcon2	equ	0xFF1
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           postdec1	equ	0xFE5
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function ___ftadd *****************
  3505 ;; Defined at:
  3506 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  f1              3   12[BANK0 ] float 
  3509 ;;  f2              3   15[BANK0 ] float 
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  exp1            1   23[BANK0 ] unsigned char 
  3512 ;;  exp2            1   22[BANK0 ] unsigned char 
  3513 ;;  sign            1   21[BANK0 ] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  3   12[BANK0 ] float 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3523 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;Total ram usage:       12 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    5
  3530 ;; This function calls:
  3531 ;;		___ftpack
  3532 ;; This function is called by:
  3533 ;;		_calculatePID
  3534 ;;		___ftsub
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text21
  3539  000598                     __ptext21:
  3540                           	opt stack 0
  3541  000598                     ___ftadd:
  3542                           	opt stack 23
  3543                           
  3544                           ;incstack = 0
  3545  000598  C06E  F072         	movff	___ftadd@f1+2,??___ftadd
  3546  00059C  0100               	movlb	0	; () banked
  3547  00059E  6B73               	clrf	(??___ftadd+1)& (0+255),b
  3548  0005A0  6B74               	clrf	(??___ftadd+2)& (0+255),b
  3549  0005A2  0100               	movlb	0	; () banked
  3550  0005A4  356D               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3551  0005A6  0100               	movlb	0	; () banked
  3552  0005A8  3772               	rlcf	??___ftadd& (0+255),f,b
  3553  0005AA  E301               	bnc	u2711
  3554  0005AC  8173               	bsf	(??___ftadd+1)& (0+255),0,b
  3555  0005AE                     u2711:
  3556  0005AE  0100               	movlb	0	; () banked
  3557  0005B0  5172               	movf	??___ftadd& (0+255),w,b
  3558  0005B2  0100               	movlb	0	; () banked
  3559  0005B4  6F77               	movwf	___ftadd@exp1& (0+255),b
  3560  0005B6  C071  F072         	movff	___ftadd@f2+2,??___ftadd
  3561  0005BA  0100               	movlb	0	; () banked
  3562  0005BC  6B73               	clrf	(??___ftadd+1)& (0+255),b
  3563  0005BE  6B74               	clrf	(??___ftadd+2)& (0+255),b
  3564  0005C0  0100               	movlb	0	; () banked
  3565  0005C2  3570               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3566  0005C4  0100               	movlb	0	; () banked
  3567  0005C6  3772               	rlcf	??___ftadd& (0+255),f,b
  3568  0005C8  E301               	bnc	u2721
  3569  0005CA  8173               	bsf	(??___ftadd+1)& (0+255),0,b
  3570  0005CC                     u2721:
  3571  0005CC  0100               	movlb	0	; () banked
  3572  0005CE  5172               	movf	??___ftadd& (0+255),w,b
  3573  0005D0  0100               	movlb	0	; () banked
  3574  0005D2  6F76               	movwf	___ftadd@exp2& (0+255),b
  3575                           
  3576                           ; BSR set to: 0
  3577  0005D4  0100               	movlb	0	; () banked
  3578  0005D6  5177               	movf	___ftadd@exp1& (0+255),w,b
  3579  0005D8  0100               	movlb	0	; () banked
  3580  0005DA  B4D8               	btfsc	status,2,c
  3581  0005DC  D011               	goto	l971
  3582                           
  3583                           ; BSR set to: 0
  3584  0005DE  0100               	movlb	0	; () banked
  3585  0005E0  5176               	movf	___ftadd@exp2& (0+255),w,b
  3586  0005E2  0100               	movlb	0	; () banked
  3587  0005E4  5D77               	subwf	___ftadd@exp1& (0+255),w,b
  3588  0005E6  B0D8               	btfsc	status,0,c
  3589  0005E8  D012               	goto	l3272
  3590                           
  3591                           ; BSR set to: 0
  3592  0005EA  0100               	movlb	0	; () banked
  3593  0005EC  5177               	movf	___ftadd@exp1& (0+255),w,b
  3594  0005EE  0800               	sublw	0
  3595  0005F0  0100               	movlb	0	; () banked
  3596  0005F2  2576               	addwf	___ftadd@exp2& (0+255),w,b
  3597  0005F4  0100               	movlb	0	; () banked
  3598  0005F6  6F72               	movwf	??___ftadd& (0+255),b
  3599  0005F8  0E18               	movlw	24
  3600  0005FA  0100               	movlb	0	; () banked
  3601  0005FC  6572               	cpfsgt	??___ftadd& (0+255),b
  3602  0005FE  D007               	goto	l3272
  3603  000600                     l971:
  3604                           
  3605                           ; BSR set to: 0
  3606  000600  C06F  F06C         	movff	___ftadd@f2,?___ftadd
  3607  000604  C070  F06D         	movff	___ftadd@f2+1,?___ftadd+1
  3608  000608  C071  F06E         	movff	___ftadd@f2+2,?___ftadd+2
  3609  00060C  D103               	goto	l972
  3610  00060E                     l3272:
  3611                           
  3612                           ; BSR set to: 0
  3613  00060E  0100               	movlb	0	; () banked
  3614  000610  5176               	movf	___ftadd@exp2& (0+255),w,b
  3615  000612  0100               	movlb	0	; () banked
  3616  000614  B4D8               	btfsc	status,2,c
  3617  000616  D011               	goto	l975
  3618                           
  3619                           ; BSR set to: 0
  3620  000618  0100               	movlb	0	; () banked
  3621  00061A  5177               	movf	___ftadd@exp1& (0+255),w,b
  3622  00061C  0100               	movlb	0	; () banked
  3623  00061E  5D76               	subwf	___ftadd@exp2& (0+255),w,b
  3624  000620  B0D8               	btfsc	status,0,c
  3625  000622  D012               	goto	l3278
  3626                           
  3627                           ; BSR set to: 0
  3628  000624  0100               	movlb	0	; () banked
  3629  000626  5176               	movf	___ftadd@exp2& (0+255),w,b
  3630  000628  0800               	sublw	0
  3631  00062A  0100               	movlb	0	; () banked
  3632  00062C  2577               	addwf	___ftadd@exp1& (0+255),w,b
  3633  00062E  0100               	movlb	0	; () banked
  3634  000630  6F72               	movwf	??___ftadd& (0+255),b
  3635  000632  0E18               	movlw	24
  3636  000634  0100               	movlb	0	; () banked
  3637  000636  6572               	cpfsgt	??___ftadd& (0+255),b
  3638  000638  D007               	goto	l3278
  3639  00063A                     l975:
  3640                           
  3641                           ; BSR set to: 0
  3642  00063A  C06C  F06C         	movff	___ftadd@f1,?___ftadd
  3643  00063E  C06D  F06D         	movff	___ftadd@f1+1,?___ftadd+1
  3644  000642  C06E  F06E         	movff	___ftadd@f1+2,?___ftadd+2
  3645  000646  D0E6               	goto	l972
  3646  000648                     l3278:
  3647                           
  3648                           ; BSR set to: 0
  3649  000648  0E06               	movlw	6
  3650  00064A  0100               	movlb	0	; () banked
  3651  00064C  6F75               	movwf	___ftadd@sign& (0+255),b
  3652                           
  3653                           ; BSR set to: 0
  3654  00064E  0100               	movlb	0	; () banked
  3655  000650  AF6E               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3656  000652  D003               	goto	l3284
  3657                           
  3658                           ; BSR set to: 0
  3659  000654  0100               	movlb	0	; () banked
  3660  000656  8F75               	bsf	___ftadd@sign& (0+255),7,b
  3661  000658  D000               	goto	l3284
  3662  00065A                     l3284:
  3663                           
  3664                           ; BSR set to: 0
  3665  00065A  0100               	movlb	0	; () banked
  3666  00065C  AF71               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3667  00065E  D002               	goto	l977
  3668                           
  3669                           ; BSR set to: 0
  3670  000660  0100               	movlb	0	; () banked
  3671  000662  8D75               	bsf	___ftadd@sign& (0+255),6,b
  3672  000664                     l977:
  3673                           
  3674                           ; BSR set to: 0
  3675  000664  0100               	movlb	0	; () banked
  3676  000666  8F6D               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3677                           
  3678                           ; BSR set to: 0
  3679  000668  0EFF               	movlw	255
  3680  00066A  0100               	movlb	0	; () banked
  3681  00066C  176C               	andwf	___ftadd@f1& (0+255),f,b
  3682  00066E  0EFF               	movlw	255
  3683  000670  0100               	movlb	0	; () banked
  3684  000672  176D               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3685  000674  0E00               	movlw	0
  3686  000676  0100               	movlb	0	; () banked
  3687  000678  176E               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3688  00067A  0100               	movlb	0	; () banked
  3689  00067C  8F70               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3690                           
  3691                           ; BSR set to: 0
  3692  00067E  0EFF               	movlw	255
  3693  000680  0100               	movlb	0	; () banked
  3694  000682  176F               	andwf	___ftadd@f2& (0+255),f,b
  3695  000684  0EFF               	movlw	255
  3696  000686  0100               	movlb	0	; () banked
  3697  000688  1770               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3698  00068A  0E00               	movlw	0
  3699  00068C  0100               	movlb	0	; () banked
  3700  00068E  1771               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3701                           
  3702                           ; BSR set to: 0
  3703  000690  0100               	movlb	0	; () banked
  3704  000692  5176               	movf	___ftadd@exp2& (0+255),w,b
  3705  000694  0100               	movlb	0	; () banked
  3706  000696  5D77               	subwf	___ftadd@exp1& (0+255),w,b
  3707  000698  B0D8               	btfsc	status,0,c
  3708  00069A  D028               	goto	l3304
  3709  00069C                     l3294:
  3710                           
  3711                           ; BSR set to: 0
  3712  00069C  0100               	movlb	0	; () banked
  3713  00069E  90D8               	bcf	status,0,c
  3714  0006A0  376F               	rlcf	___ftadd@f2& (0+255),f,b
  3715  0006A2  3770               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3716  0006A4  3771               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3717  0006A6  0100               	movlb	0	; () banked
  3718  0006A8  0776               	decf	___ftadd@exp2& (0+255),f,b
  3719                           
  3720                           ; BSR set to: 0
  3721  0006AA  0100               	movlb	0	; () banked
  3722  0006AC  5177               	movf	___ftadd@exp1& (0+255),w,b
  3723  0006AE  0100               	movlb	0	; () banked
  3724  0006B0  1976               	xorwf	___ftadd@exp2& (0+255),w,b
  3725  0006B2  B4D8               	btfsc	status,2,c
  3726  0006B4  D013               	goto	l3302
  3727                           
  3728                           ; BSR set to: 0
  3729  0006B6  0100               	movlb	0	; () banked
  3730  0006B8  0775               	decf	___ftadd@sign& (0+255),f,b
  3731  0006BA  C075  F072         	movff	___ftadd@sign,??___ftadd
  3732  0006BE  0E07               	movlw	7
  3733  0006C0  0100               	movlb	0	; () banked
  3734  0006C2  1772               	andwf	??___ftadd& (0+255),f,b
  3735  0006C4  B4D8               	btfsc	status,2,c
  3736  0006C6  D00A               	goto	l3302
  3737  0006C8  D7E9               	goto	l3294
  3738                           
  3739                           ; BSR set to: 0
  3740                           
  3741                           ; BSR set to: 0
  3742  0006CA  D008               	goto	l3302
  3743  0006CC                     l3300:
  3744                           
  3745                           ; BSR set to: 0
  3746  0006CC  0100               	movlb	0	; () banked
  3747  0006CE  90D8               	bcf	status,0,c
  3748  0006D0  336E               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3749  0006D2  336D               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3750  0006D4  336C               	rrcf	___ftadd@f1& (0+255),f,b
  3751  0006D6  0100               	movlb	0	; () banked
  3752  0006D8  2B77               	incf	___ftadd@exp1& (0+255),f,b
  3753  0006DA  D000               	goto	l3302
  3754  0006DC                     l3302:
  3755                           
  3756                           ; BSR set to: 0
  3757  0006DC  0100               	movlb	0	; () banked
  3758  0006DE  5176               	movf	___ftadd@exp2& (0+255),w,b
  3759  0006E0  0100               	movlb	0	; () banked
  3760  0006E2  1977               	xorwf	___ftadd@exp1& (0+255),w,b
  3761  0006E4  B4D8               	btfsc	status,2,c
  3762  0006E6  D030               	goto	l986
  3763  0006E8  D7F1               	goto	l3300
  3764                           
  3765                           ; BSR set to: 0
  3766  0006EA  D02E               	goto	l986
  3767  0006EC                     l3304:
  3768                           
  3769                           ; BSR set to: 0
  3770  0006EC  0100               	movlb	0	; () banked
  3771  0006EE  5177               	movf	___ftadd@exp1& (0+255),w,b
  3772  0006F0  0100               	movlb	0	; () banked
  3773  0006F2  5D76               	subwf	___ftadd@exp2& (0+255),w,b
  3774  0006F4  B0D8               	btfsc	status,0,c
  3775  0006F6  D028               	goto	l986
  3776  0006F8                     l3306:
  3777                           
  3778                           ; BSR set to: 0
  3779  0006F8  0100               	movlb	0	; () banked
  3780  0006FA  90D8               	bcf	status,0,c
  3781  0006FC  376C               	rlcf	___ftadd@f1& (0+255),f,b
  3782  0006FE  376D               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3783  000700  376E               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3784  000702  0100               	movlb	0	; () banked
  3785  000704  0777               	decf	___ftadd@exp1& (0+255),f,b
  3786                           
  3787                           ; BSR set to: 0
  3788  000706  0100               	movlb	0	; () banked
  3789  000708  5177               	movf	___ftadd@exp1& (0+255),w,b
  3790  00070A  0100               	movlb	0	; () banked
  3791  00070C  1976               	xorwf	___ftadd@exp2& (0+255),w,b
  3792  00070E  B4D8               	btfsc	status,2,c
  3793  000710  D013               	goto	l3314
  3794                           
  3795                           ; BSR set to: 0
  3796  000712  0100               	movlb	0	; () banked
  3797  000714  0775               	decf	___ftadd@sign& (0+255),f,b
  3798  000716  C075  F072         	movff	___ftadd@sign,??___ftadd
  3799  00071A  0E07               	movlw	7
  3800  00071C  0100               	movlb	0	; () banked
  3801  00071E  1772               	andwf	??___ftadd& (0+255),f,b
  3802  000720  B4D8               	btfsc	status,2,c
  3803  000722  D00A               	goto	l3314
  3804  000724  D7E9               	goto	l3306
  3805                           
  3806                           ; BSR set to: 0
  3807                           
  3808                           ; BSR set to: 0
  3809  000726  D008               	goto	l3314
  3810  000728                     l3312:
  3811                           
  3812                           ; BSR set to: 0
  3813  000728  0100               	movlb	0	; () banked
  3814  00072A  90D8               	bcf	status,0,c
  3815  00072C  3371               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3816  00072E  3370               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3817  000730  336F               	rrcf	___ftadd@f2& (0+255),f,b
  3818  000732  0100               	movlb	0	; () banked
  3819  000734  2B76               	incf	___ftadd@exp2& (0+255),f,b
  3820  000736  D000               	goto	l3314
  3821  000738                     l3314:
  3822                           
  3823                           ; BSR set to: 0
  3824  000738  0100               	movlb	0	; () banked
  3825  00073A  5176               	movf	___ftadd@exp2& (0+255),w,b
  3826  00073C  0100               	movlb	0	; () banked
  3827  00073E  1977               	xorwf	___ftadd@exp1& (0+255),w,b
  3828  000740  B4D8               	btfsc	status,2,c
  3829  000742  D002               	goto	l986
  3830  000744  D7F1               	goto	l3312
  3831                           
  3832                           ; BSR set to: 0
  3833  000746  D000               	goto	l986
  3834  000748                     l986:
  3835                           
  3836                           ; BSR set to: 0
  3837  000748  0100               	movlb	0	; () banked
  3838  00074A  AF75               	btfss	___ftadd@sign& (0+255),7,b
  3839  00074C  D012               	goto	l995
  3840                           
  3841                           ; BSR set to: 0
  3842  00074E  0EFF               	movlw	255
  3843  000750  0100               	movlb	0	; () banked
  3844  000752  1B6C               	xorwf	___ftadd@f1& (0+255),f,b
  3845  000754  0EFF               	movlw	255
  3846  000756  0100               	movlb	0	; () banked
  3847  000758  1B6D               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3848  00075A  0EFF               	movlw	255
  3849  00075C  0100               	movlb	0	; () banked
  3850  00075E  1B6E               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3851  000760  0E01               	movlw	1
  3852  000762  0100               	movlb	0	; () banked
  3853  000764  276C               	addwf	___ftadd@f1& (0+255),f,b
  3854  000766  0E00               	movlw	0
  3855  000768  0100               	movlb	0	; () banked
  3856  00076A  236D               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3857  00076C  0E00               	movlw	0
  3858  00076E  0100               	movlb	0	; () banked
  3859  000770  236E               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3860  000772                     l995:
  3861                           
  3862                           ; BSR set to: 0
  3863  000772  0100               	movlb	0	; () banked
  3864  000774  AD75               	btfss	___ftadd@sign& (0+255),6,b
  3865  000776  D013               	goto	l3320
  3866                           
  3867                           ; BSR set to: 0
  3868  000778  0EFF               	movlw	255
  3869  00077A  0100               	movlb	0	; () banked
  3870  00077C  1B6F               	xorwf	___ftadd@f2& (0+255),f,b
  3871  00077E  0EFF               	movlw	255
  3872  000780  0100               	movlb	0	; () banked
  3873  000782  1B70               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3874  000784  0EFF               	movlw	255
  3875  000786  0100               	movlb	0	; () banked
  3876  000788  1B71               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3877  00078A  0E01               	movlw	1
  3878  00078C  0100               	movlb	0	; () banked
  3879  00078E  276F               	addwf	___ftadd@f2& (0+255),f,b
  3880  000790  0E00               	movlw	0
  3881  000792  0100               	movlb	0	; () banked
  3882  000794  2370               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3883  000796  0E00               	movlw	0
  3884  000798  0100               	movlb	0	; () banked
  3885  00079A  2371               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3886  00079C  D000               	goto	l3320
  3887  00079E                     l3320:
  3888                           
  3889                           ; BSR set to: 0
  3890  00079E  0E00               	movlw	0
  3891  0007A0  0100               	movlb	0	; () banked
  3892  0007A2  6F75               	movwf	___ftadd@sign& (0+255),b
  3893                           
  3894                           ; BSR set to: 0
  3895  0007A4  0100               	movlb	0	; () banked
  3896  0007A6  516C               	movf	___ftadd@f1& (0+255),w,b
  3897  0007A8  0100               	movlb	0	; () banked
  3898  0007AA  276F               	addwf	___ftadd@f2& (0+255),f,b
  3899  0007AC  0100               	movlb	0	; () banked
  3900  0007AE  516D               	movf	(___ftadd@f1+1)& (0+255),w,b
  3901  0007B0  0100               	movlb	0	; () banked
  3902  0007B2  2370               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3903  0007B4  0100               	movlb	0	; () banked
  3904  0007B6  516E               	movf	(___ftadd@f1+2)& (0+255),w,b
  3905  0007B8  0100               	movlb	0	; () banked
  3906  0007BA  2371               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3907                           
  3908                           ; BSR set to: 0
  3909  0007BC  0100               	movlb	0	; () banked
  3910  0007BE  AF71               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3911  0007C0  D016               	goto	l3330
  3912                           
  3913                           ; BSR set to: 0
  3914  0007C2  0EFF               	movlw	255
  3915  0007C4  0100               	movlb	0	; () banked
  3916  0007C6  1B6F               	xorwf	___ftadd@f2& (0+255),f,b
  3917  0007C8  0EFF               	movlw	255
  3918  0007CA  0100               	movlb	0	; () banked
  3919  0007CC  1B70               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3920  0007CE  0EFF               	movlw	255
  3921  0007D0  0100               	movlb	0	; () banked
  3922  0007D2  1B71               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3923  0007D4  0E01               	movlw	1
  3924  0007D6  0100               	movlb	0	; () banked
  3925  0007D8  276F               	addwf	___ftadd@f2& (0+255),f,b
  3926  0007DA  0E00               	movlw	0
  3927  0007DC  0100               	movlb	0	; () banked
  3928  0007DE  2370               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3929  0007E0  0E00               	movlw	0
  3930  0007E2  0100               	movlb	0	; () banked
  3931  0007E4  2371               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3932                           
  3933                           ; BSR set to: 0
  3934  0007E6  0E01               	movlw	1
  3935  0007E8  0100               	movlb	0	; () banked
  3936  0007EA  6F75               	movwf	___ftadd@sign& (0+255),b
  3937  0007EC  D000               	goto	l3330
  3938  0007EE                     l3330:
  3939                           
  3940                           ; BSR set to: 0
  3941  0007EE  C06F  F01A         	movff	___ftadd@f2,___ftpack@arg
  3942  0007F2  C070  F01B         	movff	___ftadd@f2+1,___ftpack@arg+1
  3943  0007F6  C071  F01C         	movff	___ftadd@f2+2,___ftpack@arg+2
  3944  0007FA  C077  F01D         	movff	___ftadd@exp1,___ftpack@exp
  3945  0007FE  C075  F01E         	movff	___ftadd@sign,___ftpack@sign
  3946  000802  EC32  F006         	call	___ftpack	;wreg free
  3947  000806  C01A  F06C         	movff	?___ftpack,?___ftadd
  3948  00080A  C01B  F06D         	movff	?___ftpack+1,?___ftadd+1
  3949  00080E  C01C  F06E         	movff	?___ftpack+2,?___ftadd+2
  3950  000812  D000               	goto	l972
  3951  000814                     l972:
  3952  000814  0012               	return		;funcret
  3953  000816                     __end_of___ftadd:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           intcon	equ	0xFF2
  3962                           intcon2	equ	0xFF1
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function ___ftneg *****************
  3973 ;; Defined at:
  3974 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  f1              3   25[COMRAM] float 
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  3   25[COMRAM] float 
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3988 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;Total ram usage:        3 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    4
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_calculatePID
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text22
  4003  00158A                     __ptext22:
  4004                           	opt stack 0
  4005  00158A                     ___ftneg:
  4006                           	opt stack 25
  4007                           
  4008                           ;incstack = 0
  4009  00158A  501A               	movf	___ftneg@f1,w,c
  4010  00158C  101B               	iorwf	___ftneg@f1+1,w,c
  4011  00158E  101C               	iorwf	___ftneg@f1+2,w,c
  4012  001590  B4D8               	btfsc	status,2,c
  4013  001592  D006               	goto	l1028
  4014  001594  0E00               	movlw	0
  4015  001596  1A1A               	xorwf	___ftneg@f1,f,c
  4016  001598  0E00               	movlw	0
  4017  00159A  1A1B               	xorwf	___ftneg@f1+1,f,c
  4018  00159C  0E80               	movlw	128
  4019  00159E  1A1C               	xorwf	___ftneg@f1+2,f,c
  4020  0015A0                     l1028:
  4021  0015A0  C01A  F01A         	movff	___ftneg@f1,?___ftneg
  4022  0015A4  C01B  F01B         	movff	___ftneg@f1+1,?___ftneg+1
  4023  0015A8  C01C  F01C         	movff	___ftneg@f1+2,?___ftneg+2
  4024  0015AC  0012               	return		;funcret
  4025  0015AE                     __end_of___ftneg:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           intcon2	equ	0xFF1
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function ___ftge *****************
  4045 ;; Defined at:
  4046 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  ff1             3   25[COMRAM] float 
  4049 ;;  ff2             3   28[COMRAM] float 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:        9 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    4
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_calculatePID
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text23
  4076  000E9A                     __ptext23:
  4077                           	opt stack 0
  4078  000E9A                     ___ftge:
  4079                           	opt stack 25
  4080                           
  4081                           ;incstack = 0
  4082  000E9A  AE1C               	btfss	___ftge@ff1+2,7,c
  4083  000E9C  D017               	goto	l3522
  4084  000E9E  C01A  F020         	movff	___ftge@ff1,??___ftge
  4085  000EA2  C01B  F021         	movff	___ftge@ff1+1,??___ftge+1
  4086  000EA6  C01C  F022         	movff	___ftge@ff1+2,??___ftge+2
  4087  000EAA  1E20               	comf	??___ftge,f,c
  4088  000EAC  1E21               	comf	??___ftge+1,f,c
  4089  000EAE  1E22               	comf	??___ftge+2,f,c
  4090  000EB0  2A20               	incf	??___ftge,f,c
  4091  000EB2  0E00               	movlw	0
  4092  000EB4  2221               	addwfc	??___ftge+1,f,c
  4093  000EB6  2222               	addwfc	??___ftge+2,f,c
  4094  000EB8  0E00               	movlw	0
  4095  000EBA  2420               	addwf	??___ftge,w,c
  4096  000EBC  6E1A               	movwf	___ftge@ff1,c
  4097  000EBE  0E00               	movlw	0
  4098  000EC0  2021               	addwfc	??___ftge+1,w,c
  4099  000EC2  6E1B               	movwf	___ftge@ff1+1,c
  4100  000EC4  0E80               	movlw	128
  4101  000EC6  2022               	addwfc	??___ftge+2,w,c
  4102  000EC8  6E1C               	movwf	___ftge@ff1+2,c
  4103  000ECA  D000               	goto	l3522
  4104  000ECC                     l3522:
  4105  000ECC  AE1F               	btfss	___ftge@ff2+2,7,c
  4106  000ECE  D017               	goto	l3526
  4107  000ED0  C01D  F020         	movff	___ftge@ff2,??___ftge
  4108  000ED4  C01E  F021         	movff	___ftge@ff2+1,??___ftge+1
  4109  000ED8  C01F  F022         	movff	___ftge@ff2+2,??___ftge+2
  4110  000EDC  1E20               	comf	??___ftge,f,c
  4111  000EDE  1E21               	comf	??___ftge+1,f,c
  4112  000EE0  1E22               	comf	??___ftge+2,f,c
  4113  000EE2  2A20               	incf	??___ftge,f,c
  4114  000EE4  0E00               	movlw	0
  4115  000EE6  2221               	addwfc	??___ftge+1,f,c
  4116  000EE8  2222               	addwfc	??___ftge+2,f,c
  4117  000EEA  0E00               	movlw	0
  4118  000EEC  2420               	addwf	??___ftge,w,c
  4119  000EEE  6E1D               	movwf	___ftge@ff2,c
  4120  000EF0  0E00               	movlw	0
  4121  000EF2  2021               	addwfc	??___ftge+1,w,c
  4122  000EF4  6E1E               	movwf	___ftge@ff2+1,c
  4123  000EF6  0E80               	movlw	128
  4124  000EF8  2022               	addwfc	??___ftge+2,w,c
  4125  000EFA  6E1F               	movwf	___ftge@ff2+2,c
  4126  000EFC  D000               	goto	l3526
  4127  000EFE                     l3526:
  4128  000EFE  0E00               	movlw	0
  4129  000F00  1A1A               	xorwf	___ftge@ff1,f,c
  4130  000F02  0E00               	movlw	0
  4131  000F04  1A1B               	xorwf	___ftge@ff1+1,f,c
  4132  000F06  0E80               	movlw	128
  4133  000F08  1A1C               	xorwf	___ftge@ff1+2,f,c
  4134  000F0A  0E00               	movlw	0
  4135  000F0C  1A1D               	xorwf	___ftge@ff2,f,c
  4136  000F0E  0E00               	movlw	0
  4137  000F10  1A1E               	xorwf	___ftge@ff2+1,f,c
  4138  000F12  0E80               	movlw	128
  4139  000F14  1A1F               	xorwf	___ftge@ff2+2,f,c
  4140  000F16  501D               	movf	___ftge@ff2,w,c
  4141  000F18  5C1A               	subwf	___ftge@ff1,w,c
  4142  000F1A  501E               	movf	___ftge@ff2+1,w,c
  4143  000F1C  581B               	subwfb	___ftge@ff1+1,w,c
  4144  000F1E  501F               	movf	___ftge@ff2+2,w,c
  4145  000F20  581C               	subwfb	___ftge@ff1+2,w,c
  4146  000F22  B0D8               	btfsc	status,0,c
  4147  000F24  D002               	goto	l3532
  4148  000F26  90D8               	bcf	status,0,c
  4149  000F28  D002               	goto	l1012
  4150  000F2A                     l3532:
  4151  000F2A  80D8               	bsf	status,0,c
  4152  000F2C  D000               	goto	l1012
  4153  000F2E                     l1012:
  4154  000F2E  0012               	return		;funcret
  4155  000F30                     __end_of___ftge:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           intcon2	equ	0xFF1
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postdec1	equ	0xFE5
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function ___ftdiv *****************
  4175 ;; Defined at:
  4176 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  f1              3   33[COMRAM] float 
  4179 ;;  f2              3   36[COMRAM] float 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  f3              3   43[COMRAM] float 
  4182 ;;  sign            1   47[COMRAM] unsigned char 
  4183 ;;  exp             1   46[COMRAM] unsigned char 
  4184 ;;  cntr            1   42[COMRAM] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  3   33[COMRAM] float 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4194 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;Total ram usage:       15 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    5
  4201 ;; This function calls:
  4202 ;;		___ftpack
  4203 ;; This function is called by:
  4204 ;;		_calculatePID
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text24
  4209  000B82                     __ptext24:
  4210                           	opt stack 0
  4211  000B82                     ___ftdiv:
  4212                           	opt stack 24
  4213                           
  4214                           ;incstack = 0
  4215  000B82  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  4216  000B86  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  4217  000B88  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  4218  000B8A  3423               	rlcf	___ftdiv@f1+1,w,c
  4219  000B8C  3628               	rlcf	??___ftdiv& (0+255),f,c
  4220  000B8E  E301               	bnc	u2971
  4221  000B90  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  4222  000B92                     u2971:
  4223  000B92  5028               	movf	??___ftdiv,w,c
  4224  000B94  6E2F               	movwf	___ftdiv@exp,c
  4225  000B96  502F               	movf	___ftdiv@exp,w,c
  4226  000B98  A4D8               	btfss	status,2,c
  4227  000B9A  D002               	goto	l3422
  4228  000B9C  D00E               	goto	l3424
  4229  000B9E  D061               	goto	l1003
  4230  000BA0                     l3422:
  4231  000BA0  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  4232  000BA4  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  4233  000BA6  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  4234  000BA8  3426               	rlcf	___ftdiv@f2+1,w,c
  4235  000BAA  3628               	rlcf	??___ftdiv& (0+255),f,c
  4236  000BAC  E301               	bnc	u2991
  4237  000BAE  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  4238  000BB0                     u2991:
  4239  000BB0  5028               	movf	??___ftdiv,w,c
  4240  000BB2  6E30               	movwf	___ftdiv@sign,c
  4241  000BB4  5030               	movf	___ftdiv@sign,w,c
  4242  000BB6  A4D8               	btfss	status,2,c
  4243  000BB8  D007               	goto	l3428
  4244  000BBA                     l3424:
  4245  000BBA  0E00               	movlw	0
  4246  000BBC  6E22               	movwf	?___ftdiv,c
  4247  000BBE  0E00               	movlw	0
  4248  000BC0  6E23               	movwf	?___ftdiv+1,c
  4249  000BC2  0E00               	movlw	0
  4250  000BC4  6E24               	movwf	?___ftdiv+2,c
  4251  000BC6  D04D               	goto	l1003
  4252  000BC8                     l3428:
  4253  000BC8  0E00               	movlw	0
  4254  000BCA  6E2C               	movwf	___ftdiv@f3,c
  4255  000BCC  0E00               	movlw	0
  4256  000BCE  6E2D               	movwf	___ftdiv@f3+1,c
  4257  000BD0  0E00               	movlw	0
  4258  000BD2  6E2E               	movwf	___ftdiv@f3+2,c
  4259  000BD4  5030               	movf	___ftdiv@sign,w,c
  4260  000BD6  0F89               	addlw	137
  4261  000BD8  5E2F               	subwf	___ftdiv@exp,f,c
  4262  000BDA  C024  F030         	movff	___ftdiv@f1+2,___ftdiv@sign
  4263  000BDE  5027               	movf	___ftdiv@f2+2,w,c
  4264  000BE0  1A30               	xorwf	___ftdiv@sign,f,c
  4265  000BE2  0E80               	movlw	128
  4266  000BE4  1630               	andwf	___ftdiv@sign,f,c
  4267  000BE6  8E23               	bsf	___ftdiv@f1+1,7,c
  4268  000BE8  0EFF               	movlw	255
  4269  000BEA  1622               	andwf	___ftdiv@f1,f,c
  4270  000BEC  0EFF               	movlw	255
  4271  000BEE  1623               	andwf	___ftdiv@f1+1,f,c
  4272  000BF0  0E00               	movlw	0
  4273  000BF2  1624               	andwf	___ftdiv@f1+2,f,c
  4274  000BF4  8E26               	bsf	___ftdiv@f2+1,7,c
  4275  000BF6  0EFF               	movlw	255
  4276  000BF8  1625               	andwf	___ftdiv@f2,f,c
  4277  000BFA  0EFF               	movlw	255
  4278  000BFC  1626               	andwf	___ftdiv@f2+1,f,c
  4279  000BFE  0E00               	movlw	0
  4280  000C00  1627               	andwf	___ftdiv@f2+2,f,c
  4281  000C02  0E18               	movlw	24
  4282  000C04  6E2B               	movwf	___ftdiv@cntr,c
  4283  000C06  D000               	goto	l3448
  4284  000C08                     l3448:
  4285  000C08  90D8               	bcf	status,0,c
  4286  000C0A  362C               	rlcf	___ftdiv@f3,f,c
  4287  000C0C  362D               	rlcf	___ftdiv@f3+1,f,c
  4288  000C0E  362E               	rlcf	___ftdiv@f3+2,f,c
  4289  000C10  5025               	movf	___ftdiv@f2,w,c
  4290  000C12  5C22               	subwf	___ftdiv@f1,w,c
  4291  000C14  5026               	movf	___ftdiv@f2+1,w,c
  4292  000C16  5823               	subwfb	___ftdiv@f1+1,w,c
  4293  000C18  5027               	movf	___ftdiv@f2+2,w,c
  4294  000C1A  5824               	subwfb	___ftdiv@f1+2,w,c
  4295  000C1C  A0D8               	btfss	status,0,c
  4296  000C1E  D007               	goto	l1006
  4297  000C20  5025               	movf	___ftdiv@f2,w,c
  4298  000C22  5E22               	subwf	___ftdiv@f1,f,c
  4299  000C24  5026               	movf	___ftdiv@f2+1,w,c
  4300  000C26  5A23               	subwfb	___ftdiv@f1+1,f,c
  4301  000C28  5027               	movf	___ftdiv@f2+2,w,c
  4302  000C2A  5A24               	subwfb	___ftdiv@f1+2,f,c
  4303  000C2C  802C               	bsf	___ftdiv@f3,0,c
  4304  000C2E                     l1006:
  4305  000C2E  90D8               	bcf	status,0,c
  4306  000C30  3622               	rlcf	___ftdiv@f1,f,c
  4307  000C32  3623               	rlcf	___ftdiv@f1+1,f,c
  4308  000C34  3624               	rlcf	___ftdiv@f1+2,f,c
  4309  000C36  2E2B               	decfsz	___ftdiv@cntr,f,c
  4310  000C38  D7E7               	goto	l3448
  4311  000C3A  D000               	goto	l3458
  4312  000C3C                     l3458:
  4313  000C3C  C02C  F01A         	movff	___ftdiv@f3,___ftpack@arg
  4314  000C40  C02D  F01B         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4315  000C44  C02E  F01C         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4316  000C48  C02F  F01D         	movff	___ftdiv@exp,___ftpack@exp
  4317  000C4C  C030  F01E         	movff	___ftdiv@sign,___ftpack@sign
  4318  000C50  EC32  F006         	call	___ftpack	;wreg free
  4319  000C54  C01A  F022         	movff	?___ftpack,?___ftdiv
  4320  000C58  C01B  F023         	movff	?___ftpack+1,?___ftdiv+1
  4321  000C5C  C01C  F024         	movff	?___ftpack+2,?___ftdiv+2
  4322  000C60  D000               	goto	l1003
  4323  000C62                     l1003:
  4324  000C62  0012               	return		;funcret
  4325  000C64                     __end_of___ftdiv:
  4326                           	opt stack 0
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           intcon2	equ	0xFF1
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           fsr2h	equ	0xFDA
  4341                           fsr2l	equ	0xFD9
  4342                           status	equ	0xFD8
  4343                           
  4344 ;; *************** function _SendSPI1 *****************
  4345 ;; Defined at:
  4346 ;;		line 35 in file "SPISlave.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  data            1    wreg     unsigned char 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  data            1   26[COMRAM] unsigned char 
  4351 ;;  temp            1   25[COMRAM] unsigned char 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;		None               void
  4354 ;; Registers used:
  4355 ;;		wreg
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;Total ram usage:        2 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    4
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_main
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text25
  4376  00166A                     __ptext25:
  4377                           	opt stack 0
  4378  00166A                     _SendSPI1:
  4379                           	opt stack 26
  4380                           
  4381                           ;incstack = 0
  4382                           ;SendSPI1@data stored from wreg
  4383  00166A  6E1B               	movwf	SendSPI1@data,c
  4384                           
  4385                           ;SPISlave.c: 37: SSP1BUF = data;
  4386  00166C  C01B  FFC9         	movff	SendSPI1@data,4041	;volatile
  4387                           
  4388                           ;SPISlave.c: 38: unsigned char temp;
  4389                           ;SPISlave.c: 39: PIR1bits.SSP1IF = 0;
  4390  001670  969E               	bcf	3998,3,c	;volatile
  4391                           
  4392                           ;SPISlave.c: 40: temp = SSP1BUF;
  4393  001672  CFC9 F01A          	movff	4041,SendSPI1@temp	;volatile
  4394                           
  4395                           ;SPISlave.c: 41: while (!PIR1bits.SSP1IF);
  4396  001676  D000               	goto	l253
  4397  001678                     l253:
  4398  001678  A69E               	btfss	3998,3,c	;volatile
  4399  00167A  D7FE               	goto	l253
  4400                           
  4401                           ;SPISlave.c: 42: SSP1CON1bits.SSPOV1 = 0;
  4402  00167C  9CC6               	bcf	4038,6,c	;volatile
  4403                           
  4404                           ;SPISlave.c: 43: PIR1bits.SSP1IF = 0;
  4405  00167E  969E               	bcf	3998,3,c	;volatile
  4406  001680  0012               	return		;funcret
  4407  001682                     __end_of_SendSPI1:
  4408                           	opt stack 0
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           intcon2	equ	0xFF1
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           postdec1	equ	0xFE5
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function _SPIReassembleDouble *****************
  4427 ;; Defined at:
  4428 ;;		line 71 in file "SPISlave.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;		None
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  dub             3   28[COMRAM] unsigned char 
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  3   25[COMRAM] unsigned char 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;Total ram usage:        6 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    4
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_main
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           	psect	text26
  4457  00132E                     __ptext26:
  4458                           	opt stack 0
  4459  00132E                     _SPIReassembleDouble:
  4460                           	opt stack 26
  4461                           
  4462                           ;SPISlave.c: 73: double dub;
  4463                           ;SPISlave.c: 74: DoublePtr = (unsigned char*) &dub;
  4464                           
  4465                           ;incstack = 0
  4466  00132E  0E1D               	movlw	low SPIReassembleDouble@dub
  4467  001330  6E40               	movwf	_DoublePtr,c
  4468  001332  0E00               	movlw	high SPIReassembleDouble@dub
  4469  001334  6E41               	movwf	_DoublePtr+1,c
  4470                           
  4471                           ;SPISlave.c: 75: DoublePtr[0] = DoubleSPIS[0];
  4472  001336  C040  FFD9         	movff	_DoublePtr,fsr2l
  4473  00133A  C041  FFDA         	movff	_DoublePtr+1,fsr2h
  4474  00133E  C036  FFDF         	movff	_DoubleSPIS,indf2
  4475                           
  4476                           ;SPISlave.c: 76: DoublePtr[1] = DoubleSPIS[1];
  4477  001342  EE20 F001          	lfsr	2,1
  4478  001346  5040               	movf	_DoublePtr,w,c
  4479  001348  26D9               	addwf	fsr2l,f,c
  4480  00134A  5041               	movf	_DoublePtr+1,w,c
  4481  00134C  22DA               	addwfc	fsr2h,f,c
  4482  00134E  C037  FFDF         	movff	_DoubleSPIS+1,indf2
  4483                           
  4484                           ;SPISlave.c: 77: DoublePtr[2] = DoubleSPIS[2];
  4485  001352  EE20 F002          	lfsr	2,2
  4486  001356  5040               	movf	_DoublePtr,w,c
  4487  001358  26D9               	addwf	fsr2l,f,c
  4488  00135A  5041               	movf	_DoublePtr+1,w,c
  4489  00135C  22DA               	addwfc	fsr2h,f,c
  4490  00135E  C038  FFDF         	movff	_DoubleSPIS+2,indf2
  4491                           
  4492                           ;SPISlave.c: 79: return dub;
  4493  001362  C01D  F01A         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  4494  001366  C01E  F01B         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  4495  00136A  C01F  F01C         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  4496  00136E  D000               	goto	l273
  4497  001370                     l273:
  4498  001370  0012               	return		;funcret
  4499  001372                     __end_of_SPIReassembleDouble:
  4500                           	opt stack 0
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           intcon	equ	0xFF2
  4508                           intcon2	equ	0xFF1
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           postdec1	equ	0xFE5
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           fsr2h	equ	0xFDA
  4515                           fsr2l	equ	0xFD9
  4516                           status	equ	0xFD8
  4517                           
  4518 ;; *************** function _SPIDisassembleDouble *****************
  4519 ;; Defined at:
  4520 ;;		line 54 in file "SPISlave.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  dub             3   27[COMRAM] unsigned char 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;		None
  4525 ;; Return value:  Size  Location     Type
  4526 ;;		None               void
  4527 ;; Registers used:
  4528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4534 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;Total ram usage:        3 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    5
  4541 ;; This function calls:
  4542 ;;		_GenerateChecksum
  4543 ;; This function is called by:
  4544 ;;		_main
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text27
  4549  0013F0                     __ptext27:
  4550                           	opt stack 0
  4551  0013F0                     _SPIDisassembleDouble:
  4552                           	opt stack 25
  4553                           
  4554                           ;SPISlave.c: 56: DoublePtr = (unsigned char*) &dub;
  4555                           
  4556                           ;incstack = 0
  4557  0013F0  0E1C               	movlw	low SPIDisassembleDouble@dub
  4558  0013F2  6E40               	movwf	_DoublePtr,c
  4559  0013F4  0E00               	movlw	high SPIDisassembleDouble@dub
  4560  0013F6  6E41               	movwf	_DoublePtr+1,c
  4561                           
  4562                           ;SPISlave.c: 57: DoubleSPIS[0] = DoublePtr[0];
  4563  0013F8  C040  FFD9         	movff	_DoublePtr,fsr2l
  4564  0013FC  C041  FFDA         	movff	_DoublePtr+1,fsr2h
  4565  001400  50DF               	movf	indf2,w,c
  4566  001402  6E36               	movwf	_DoubleSPIS,c
  4567                           
  4568                           ;SPISlave.c: 58: DoubleSPIS[1] = DoublePtr[1];
  4569  001404  EE20 F001          	lfsr	2,1
  4570  001408  5040               	movf	_DoublePtr,w,c
  4571  00140A  26D9               	addwf	fsr2l,f,c
  4572  00140C  5041               	movf	_DoublePtr+1,w,c
  4573  00140E  22DA               	addwfc	fsr2h,f,c
  4574  001410  50DF               	movf	indf2,w,c
  4575  001412  6E37               	movwf	_DoubleSPIS+1,c
  4576                           
  4577                           ;SPISlave.c: 59: DoubleSPIS[2] = DoublePtr[2];
  4578  001414  EE20 F002          	lfsr	2,2
  4579  001418  5040               	movf	_DoublePtr,w,c
  4580  00141A  26D9               	addwf	fsr2l,f,c
  4581  00141C  5041               	movf	_DoublePtr+1,w,c
  4582  00141E  22DA               	addwfc	fsr2h,f,c
  4583  001420  50DF               	movf	indf2,w,c
  4584  001422  6E38               	movwf	_DoubleSPIS+2,c
  4585                           
  4586                           ;SPISlave.c: 60: DoubleSPIS[3] = GenerateChecksum();
  4587  001424  EC31  F00A         	call	_GenerateChecksum	;wreg free
  4588  001428  6E39               	movwf	_DoubleSPIS+3,c
  4589  00142A  0012               	return		;funcret
  4590  00142C                     __end_of_SPIDisassembleDouble:
  4591                           	opt stack 0
  4592                           tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           intcon	equ	0xFF2
  4599                           intcon2	equ	0xFF1
  4600                           postinc0	equ	0xFEE
  4601                           wreg	equ	0xFE8
  4602                           postdec1	equ	0xFE5
  4603                           fsr1l	equ	0xFE1
  4604                           indf2	equ	0xFDF
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _GenerateChecksum *****************
  4610 ;; Defined at:
  4611 ;;		line 63 in file "SPISlave.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  y               1   26[COMRAM] unsigned char 
  4616 ;;  sum             1   25[COMRAM] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      unsigned char 
  4619 ;; Registers used:
  4620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        2 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    4
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_SPIDisassembleDouble
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text28
  4641  001462                     __ptext28:
  4642                           	opt stack 0
  4643  001462                     _GenerateChecksum:
  4644                           	opt stack 25
  4645                           
  4646                           ;SPISlave.c: 65: unsigned char y, sum = 0;
  4647                           
  4648                           ;incstack = 0
  4649  001462  0E00               	movlw	0
  4650  001464  6E1A               	movwf	GenerateChecksum@sum,c
  4651                           
  4652                           ;SPISlave.c: 66: for (y = 0; y != 3; y++)
  4653  001466  0E00               	movlw	0
  4654  001468  6E1B               	movwf	GenerateChecksum@y,c
  4655  00146A                     l3390:
  4656  00146A  0E03               	movlw	3
  4657  00146C  181B               	xorwf	GenerateChecksum@y,w,c
  4658  00146E  B4D8               	btfsc	status,2,c
  4659  001470  D00E               	goto	l3400
  4660  001472  D001               	goto	l3394
  4661  001474  D00C               	goto	l3400
  4662  001476                     l3394:
  4663                           
  4664                           ;SPISlave.c: 67: sum += DoubleSPIS[y];
  4665  001476  501B               	movf	GenerateChecksum@y,w,c
  4666  001478  0D01               	mullw	1
  4667  00147A  0E36               	movlw	low _DoubleSPIS
  4668  00147C  24F3               	addwf	prodl,w,c
  4669  00147E  6ED9               	movwf	fsr2l,c
  4670  001480  0E00               	movlw	high _DoubleSPIS
  4671  001482  20F4               	addwfc	prodh,w,c
  4672  001484  6EDA               	movwf	fsr2h,c
  4673  001486  50DF               	movf	indf2,w,c
  4674  001488  261A               	addwf	GenerateChecksum@sum,f,c
  4675  00148A  2A1B               	incf	GenerateChecksum@y,f,c
  4676  00148C  D7EE               	goto	l3390
  4677  00148E                     l3400:
  4678                           
  4679                           ;SPISlave.c: 68: return sum;
  4680  00148E  501A               	movf	GenerateChecksum@sum,w,c
  4681  001490  D000               	goto	l270
  4682  001492                     l270:
  4683  001492  0012               	return		;funcret
  4684  001494                     __end_of_GenerateChecksum:
  4685                           	opt stack 0
  4686                           tblptru	equ	0xFF8
  4687                           tblptrh	equ	0xFF7
  4688                           tblptrl	equ	0xFF6
  4689                           tablat	equ	0xFF5
  4690                           prodh	equ	0xFF4
  4691                           prodl	equ	0xFF3
  4692                           intcon	equ	0xFF2
  4693                           intcon2	equ	0xFF1
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           postdec1	equ	0xFE5
  4697                           fsr1l	equ	0xFE1
  4698                           indf2	equ	0xFDF
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function _ReceiveSPI1 *****************
  4704 ;; Defined at:
  4705 ;;		line 46 in file "SPISlave.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      unsigned char 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;Total ram usage:        0 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    4
  4726 ;; This function calls:
  4727 ;;		Nothing
  4728 ;; This function is called by:
  4729 ;;		_main
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text29
  4734  0016A8                     __ptext29:
  4735                           	opt stack 0
  4736  0016A8                     _ReceiveSPI1:
  4737                           	opt stack 26
  4738                           
  4739                           ;SPISlave.c: 48: SSP1BUF = 0x00;
  4740                           
  4741                           ;incstack = 0
  4742  0016A8  0E00               	movlw	0
  4743  0016AA  6EC9               	movwf	4041,c	;volatile
  4744                           
  4745                           ;SPISlave.c: 49: while (!PIR1bits.SSP1IF);
  4746  0016AC  D000               	goto	l259
  4747  0016AE                     l259:
  4748  0016AE  A69E               	btfss	3998,3,c	;volatile
  4749  0016B0  D7FE               	goto	l259
  4750                           
  4751                           ;SPISlave.c: 50: PIR1bits.SSP1IF = 0;
  4752  0016B2  969E               	bcf	3998,3,c	;volatile
  4753                           
  4754                           ;SPISlave.c: 51: return SSP1BUF;
  4755  0016B4  50C9               	movf	4041,w,c	;volatile
  4756  0016B6  D000               	goto	l262
  4757  0016B8                     l262:
  4758  0016B8  0012               	return		;funcret
  4759  0016BA                     __end_of_ReceiveSPI1:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon2	equ	0xFF1
  4769                           postinc0	equ	0xFEE
  4770                           wreg	equ	0xFE8
  4771                           postdec1	equ	0xFE5
  4772                           fsr1l	equ	0xFE1
  4773                           indf2	equ	0xFDF
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778 ;; *************** function _ReadRTDpos *****************
  4779 ;; Defined at:
  4780 ;;		line 39 in file "ResolverToDigital.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  FullPosition    2   33[COMRAM] unsigned int 
  4785 ;;  helloworld      2    0        unsigned int 
  4786 ;;  x               1   35[COMRAM] unsigned char 
  4787 ;;  LowPosition     1   32[COMRAM] unsigned char 
  4788 ;;  HighPosition    1   31[COMRAM] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  2   26[COMRAM] unsigned int 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;Total ram usage:       10 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    5
  4805 ;; This function calls:
  4806 ;;		_Delay10TCYx
  4807 ;; This function is called by:
  4808 ;;		_main
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text30
  4813  0010F8                     __ptext30:
  4814                           	opt stack 0
  4815  0010F8                     _ReadRTDpos:
  4816                           	opt stack 25
  4817                           
  4818                           ;ResolverToDigital.c: 41: unsigned char x;
  4819                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  4820                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  4821                           ;ResolverToDigital.c: 48: {
  4822                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  4823                           
  4824                           ;incstack = 0
  4825  0010F8  9EF2               	bcf	intcon,7,c	;volatile
  4826                           
  4827                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  4828  0010FA  8284               	bsf	3972,1,c	;volatile
  4829                           
  4830                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  4831  0010FC  9084               	bcf	3972,0,c	;volatile
  4832                           
  4833                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  4834  0010FE  0E00               	movlw	0
  4835  001100  6E24               	movwf	ReadRTDpos@x,c
  4836  001102  D003               	goto	l3718
  4837  001104  D005               	goto	l190
  4838  001106                     l189:
  4839                           
  4840                           ;ResolverToDigital.c: 53: __nop();
  4841  001106  F000               	nop	
  4842  001108  2A24               	incf	ReadRTDpos@x,f,c
  4843  00110A                     l3718:
  4844  00110A  0E07               	movlw	7
  4845  00110C  6424               	cpfsgt	ReadRTDpos@x,c
  4846  00110E  D7FB               	goto	l189
  4847  001110                     l190:
  4848                           
  4849                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  4850  001110  8484               	bsf	3972,2,c	;volatile
  4851                           
  4852                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  4853  001112  9484               	bcf	3972,2,c	;volatile
  4854                           
  4855                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  4856  001114  0E01               	movlw	1
  4857  001116  EC5D  F00B         	call	_Delay10TCYx
  4858                           
  4859                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  4860  00111A  CF87 F020          	movff	3975,ReadRTDpos@HighPosition	;volatile
  4861                           
  4862                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  4863  00111E  CF83 F021          	movff	3971,ReadRTDpos@LowPosition	;volatile
  4864                           
  4865                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  4866  001122  8484               	bsf	3972,2,c	;volatile
  4867                           
  4868                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  4869  001124  8084               	bsf	3972,0,c	;volatile
  4870                           
  4871                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  4872  001126  C021  F022         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  4873  00112A  6A23               	clrf	ReadRTDpos@FullPosition+1,c
  4874                           
  4875                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  4876  00112C  C020  F01D         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  4877  001130  0E0F               	movlw	15
  4878  001132  161D               	andwf	??_ReadRTDpos,f,c
  4879  001134  501D               	movf	??_ReadRTDpos,w,c
  4880  001136  6E1F               	movwf	(??_ReadRTDpos+2)& (0+255),c
  4881  001138  6A1E               	clrf	(??_ReadRTDpos+1)& (0+255),c
  4882  00113A  5022               	movf	ReadRTDpos@FullPosition,w,c
  4883  00113C  101E               	iorwf	??_ReadRTDpos+1,w,c
  4884  00113E  6E22               	movwf	ReadRTDpos@FullPosition,c
  4885  001140  5023               	movf	ReadRTDpos@FullPosition+1,w,c
  4886  001142  101F               	iorwf	??_ReadRTDpos+2,w,c
  4887  001144  6E23               	movwf	ReadRTDpos@FullPosition+1,c
  4888                           
  4889                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  4890  001146  8EF2               	bsf	intcon,7,c	;volatile
  4891                           
  4892                           ;ResolverToDigital.c: 64: return FullPosition;
  4893  001148  C022  F01B         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  4894  00114C  C023  F01C         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  4895  001150  D000               	goto	l191
  4896  001152                     l191:
  4897  001152  0012               	return		;funcret
  4898  001154                     __end_of_ReadRTDpos:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon2	equ	0xFF1
  4908                           postinc0	equ	0xFEE
  4909                           wreg	equ	0xFE8
  4910                           postdec1	equ	0xFE5
  4911                           fsr1l	equ	0xFE1
  4912                           indf2	equ	0xFDF
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _Delay10TCYx *****************
  4918 ;; Defined at:
  4919 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  unit            1    wreg     unsigned char 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  unit            1   25[COMRAM] unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;		None               void
  4926 ;; Registers used:
  4927 ;;		wreg
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;Total ram usage:        1 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    4
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_RTDInit
  4944 ;;		_ReadRTDpos
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text31
  4949  0016BA                     __ptext31:
  4950                           	opt stack 0
  4951  0016BA                     _Delay10TCYx:
  4952                           	opt stack 24
  4953                           
  4954                           ;incstack = 0
  4955                           ;Delay10TCYx@unit stored from wreg
  4956  0016BA  6E1A               	movwf	Delay10TCYx@unit,c
  4957  0016BC  0E03               	movlw	3
  4958  0016BE                     u3757:
  4959  0016BE  2EE8               	decfsz	wreg,f,c
  4960  0016C0  D7FE               	goto	u3757
  4961  0016C2  F000               	nop	
  4962  0016C4  2E1A               	decfsz	Delay10TCYx@unit,f,c
  4963  0016C6  D7FA               	goto	l3226
  4964  0016C8  D000               	goto	l827
  4965  0016CA                     l827:
  4966  0016CA  0012               	return		;funcret
  4967  0016CC                     __end_of_Delay10TCYx:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon2	equ	0xFF1
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function _RTD2Angle *****************
  4987 ;; Defined at:
  4988 ;;		line 99 in file "ResolverToDigital.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  RTDAngle        2   12[BANK0 ] unsigned int 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  3   12[BANK0 ] unsigned int 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0, cstack
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5002 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;Total ram usage:        3 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    6
  5009 ;; This function calls:
  5010 ;;		___ftmul
  5011 ;;		___lwtoft
  5012 ;; This function is called by:
  5013 ;;		_main
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text32
  5018  0013B2                     __ptext32:
  5019                           	opt stack 0
  5020  0013B2                     _RTD2Angle:
  5021                           	opt stack 24
  5022                           
  5023                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  5024                           
  5025                           ;incstack = 0
  5026  0013B2  C06C  F022         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  5027  0013B6  C06D  F023         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  5028  0013BA  ECA0  F00A         	call	___lwtoft	;wreg free
  5029  0013BE  C022  F060         	movff	?___lwtoft,___ftmul@f1
  5030  0013C2  C023  F061         	movff	?___lwtoft+1,___ftmul@f1+1
  5031  0013C6  C024  F062         	movff	?___lwtoft+2,___ftmul@f1+2
  5032  0013CA  0E00               	movlw	0
  5033  0013CC  0100               	movlb	0	; () banked
  5034  0013CE  6F63               	movwf	___ftmul@f2& (0+255),b
  5035  0013D0  0EB4               	movlw	180
  5036  0013D2  0100               	movlb	0	; () banked
  5037  0013D4  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  5038  0013D6  0E3D               	movlw	61
  5039  0013D8  0100               	movlb	0	; () banked
  5040  0013DA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  5041  0013DC  EC0B  F004         	call	___ftmul	;wreg free
  5042  0013E0  C060  F06C         	movff	?___ftmul,?_RTD2Angle
  5043  0013E4  C061  F06D         	movff	?___ftmul+1,?_RTD2Angle+1
  5044  0013E8  C062  F06E         	movff	?___ftmul+2,?_RTD2Angle+2
  5045  0013EC  D000               	goto	l199
  5046  0013EE                     l199:
  5047  0013EE  0012               	return		;funcret
  5048  0013F0                     __end_of_RTD2Angle:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon2	equ	0xFF1
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           postdec1	equ	0xFE5
  5061                           fsr1l	equ	0xFE1
  5062                           indf2	equ	0xFDF
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function ___lwtoft *****************
  5068 ;; Defined at:
  5069 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  c               2   33[COMRAM] unsigned int 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;		None
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  3   33[COMRAM] float 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, status,0, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5083 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;Total ram usage:        3 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    5
  5090 ;; This function calls:
  5091 ;;		___ftpack
  5092 ;; This function is called by:
  5093 ;;		_RTD2Angle
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           	psect	text33
  5098  001540                     __ptext33:
  5099                           	opt stack 0
  5100  001540                     ___lwtoft:
  5101                           	opt stack 24
  5102                           
  5103                           ;incstack = 0
  5104  001540  C022  F01A         	movff	___lwtoft@c,___ftpack@arg
  5105  001544  C023  F01B         	movff	___lwtoft@c+1,___ftpack@arg+1
  5106  001548  6A1C               	clrf	___ftpack@arg+2,c
  5107  00154A  0E8E               	movlw	142
  5108  00154C  6E1D               	movwf	___ftpack@exp,c
  5109  00154E  0E00               	movlw	0
  5110  001550  6E1E               	movwf	___ftpack@sign,c
  5111  001552  EC32  F006         	call	___ftpack	;wreg free
  5112  001556  C01A  F022         	movff	?___ftpack,?___lwtoft
  5113  00155A  C01B  F023         	movff	?___ftpack+1,?___lwtoft+1
  5114  00155E  C01C  F024         	movff	?___ftpack+2,?___lwtoft+2
  5115  001562  D000               	goto	l1168
  5116  001564                     l1168:
  5117  001564  0012               	return		;funcret
  5118  001566                     __end_of___lwtoft:
  5119                           	opt stack 0
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           intcon2	equ	0xFF1
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           postdec1	equ	0xFE5
  5131                           fsr1l	equ	0xFE1
  5132                           indf2	equ	0xFDF
  5133                           fsr2h	equ	0xFDA
  5134                           fsr2l	equ	0xFD9
  5135                           status	equ	0xFD8
  5136                           
  5137 ;; *************** function ___ftmul *****************
  5138 ;; Defined at:
  5139 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  f1              3    0[BANK0 ] float 
  5142 ;;  f2              3    3[BANK0 ] float 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  5145 ;;  sign            1   11[BANK0 ] unsigned char 
  5146 ;;  cntr            1   10[BANK0 ] unsigned char 
  5147 ;;  exp             1    6[BANK0 ] unsigned char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  3    0[BANK0 ] float 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2, status,0, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5157 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;Total ram usage:       15 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    5
  5164 ;; This function calls:
  5165 ;;		___ftpack
  5166 ;; This function is called by:
  5167 ;;		_calculatePID
  5168 ;;		_RTD2Angle
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text34
  5173  000816                     __ptext34:
  5174                           	opt stack 0
  5175  000816                     ___ftmul:
  5176                           	opt stack 24
  5177                           
  5178                           ;incstack = 0
  5179  000816  C062  F031         	movff	___ftmul@f1+2,??___ftmul
  5180  00081A  6A32               	clrf	(??___ftmul+1)& (0+255),c
  5181  00081C  6A33               	clrf	(??___ftmul+2)& (0+255),c
  5182  00081E  0100               	movlb	0	; () banked
  5183  000820  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5184  000822  3631               	rlcf	??___ftmul& (0+255),f,c
  5185  000824  E301               	bnc	u3021
  5186  000826  8032               	bsf	(??___ftmul+1)& (0+255),0,c
  5187  000828                     u3021:
  5188  000828  5031               	movf	??___ftmul,w,c
  5189  00082A  0100               	movlb	0	; () banked
  5190  00082C  6F66               	movwf	___ftmul@exp& (0+255),b
  5191  00082E  0100               	movlb	0	; () banked
  5192  000830  5166               	movf	___ftmul@exp& (0+255),w,b
  5193  000832  A4D8               	btfss	status,2,c
  5194  000834  D002               	goto	l3468
  5195  000836  D011               	goto	l3470
  5196                           
  5197                           ; BSR set to: 0
  5198                           
  5199                           ; BSR set to: 0
  5200  000838  D095               	goto	l1018
  5201  00083A                     l3468:
  5202                           
  5203                           ; BSR set to: 0
  5204  00083A  C065  F031         	movff	___ftmul@f2+2,??___ftmul
  5205  00083E  6A32               	clrf	(??___ftmul+1)& (0+255),c
  5206  000840  6A33               	clrf	(??___ftmul+2)& (0+255),c
  5207  000842  0100               	movlb	0	; () banked
  5208  000844  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5209  000846  3631               	rlcf	??___ftmul& (0+255),f,c
  5210  000848  E301               	bnc	u3041
  5211  00084A  8032               	bsf	(??___ftmul+1)& (0+255),0,c
  5212  00084C                     u3041:
  5213  00084C  5031               	movf	??___ftmul,w,c
  5214  00084E  0100               	movlb	0	; () banked
  5215  000850  6F6B               	movwf	___ftmul@sign& (0+255),b
  5216  000852  0100               	movlb	0	; () banked
  5217  000854  516B               	movf	___ftmul@sign& (0+255),w,b
  5218  000856  A4D8               	btfss	status,2,c
  5219  000858  D00A               	goto	l3474
  5220  00085A                     l3470:
  5221                           
  5222                           ; BSR set to: 0
  5223  00085A  0E00               	movlw	0
  5224  00085C  0100               	movlb	0	; () banked
  5225  00085E  6F60               	movwf	?___ftmul& (0+255),b
  5226  000860  0E00               	movlw	0
  5227  000862  0100               	movlb	0	; () banked
  5228  000864  6F61               	movwf	(?___ftmul+1)& (0+255),b
  5229  000866  0E00               	movlw	0
  5230  000868  0100               	movlb	0	; () banked
  5231  00086A  6F62               	movwf	(?___ftmul+2)& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234  00086C  D07B               	goto	l1018
  5235  00086E                     l3474:
  5236                           
  5237                           ; BSR set to: 0
  5238  00086E  0100               	movlb	0	; () banked
  5239  000870  516B               	movf	___ftmul@sign& (0+255),w,b
  5240  000872  0F7B               	addlw	123
  5241  000874  0100               	movlb	0	; () banked
  5242  000876  2766               	addwf	___ftmul@exp& (0+255),f,b
  5243                           
  5244                           ; BSR set to: 0
  5245  000878  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  5246  00087C  0100               	movlb	0	; () banked
  5247  00087E  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  5248  000880  0100               	movlb	0	; () banked
  5249  000882  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  5250  000884  0E80               	movlw	128
  5251  000886  0100               	movlb	0	; () banked
  5252  000888  176B               	andwf	___ftmul@sign& (0+255),f,b
  5253                           
  5254                           ; BSR set to: 0
  5255  00088A  0100               	movlb	0	; () banked
  5256  00088C  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5257                           
  5258                           ; BSR set to: 0
  5259  00088E  0100               	movlb	0	; () banked
  5260  000890  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5261                           
  5262                           ; BSR set to: 0
  5263  000892  0EFF               	movlw	255
  5264  000894  0100               	movlb	0	; () banked
  5265  000896  1763               	andwf	___ftmul@f2& (0+255),f,b
  5266  000898  0EFF               	movlw	255
  5267  00089A  0100               	movlb	0	; () banked
  5268  00089C  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5269  00089E  0E00               	movlw	0
  5270  0008A0  0100               	movlb	0	; () banked
  5271  0008A2  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5272                           
  5273                           ; BSR set to: 0
  5274  0008A4  0E00               	movlw	0
  5275  0008A6  0100               	movlb	0	; () banked
  5276  0008A8  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  5277  0008AA  0E00               	movlw	0
  5278  0008AC  0100               	movlb	0	; () banked
  5279  0008AE  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5280  0008B0  0E00               	movlw	0
  5281  0008B2  0100               	movlb	0	; () banked
  5282  0008B4  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5283                           
  5284                           ; BSR set to: 0
  5285  0008B6  0E07               	movlw	7
  5286  0008B8  0100               	movlb	0	; () banked
  5287  0008BA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  5288  0008BC  D000               	goto	l3488
  5289  0008BE                     l3488:
  5290                           
  5291                           ; BSR set to: 0
  5292  0008BE  0100               	movlb	0	; () banked
  5293  0008C0  A160               	btfss	___ftmul@f1& (0+255),0,b
  5294  0008C2  D00D               	goto	l3492
  5295                           
  5296                           ; BSR set to: 0
  5297  0008C4  0100               	movlb	0	; () banked
  5298  0008C6  5163               	movf	___ftmul@f2& (0+255),w,b
  5299  0008C8  0100               	movlb	0	; () banked
  5300  0008CA  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5301  0008CC  0100               	movlb	0	; () banked
  5302  0008CE  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  5303  0008D0  0100               	movlb	0	; () banked
  5304  0008D2  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5305  0008D4  0100               	movlb	0	; () banked
  5306  0008D6  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  5307  0008D8  0100               	movlb	0	; () banked
  5308  0008DA  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5309  0008DC  D000               	goto	l3492
  5310  0008DE                     l3492:
  5311                           
  5312                           ; BSR set to: 0
  5313  0008DE  0100               	movlb	0	; () banked
  5314  0008E0  90D8               	bcf	status,0,c
  5315  0008E2  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5316  0008E4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5317  0008E6  3360               	rrcf	___ftmul@f1& (0+255),f,b
  5318  0008E8  0100               	movlb	0	; () banked
  5319  0008EA  90D8               	bcf	status,0,c
  5320  0008EC  3763               	rlcf	___ftmul@f2& (0+255),f,b
  5321  0008EE  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5322  0008F0  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5323                           
  5324                           ; BSR set to: 0
  5325  0008F2  0100               	movlb	0	; () banked
  5326  0008F4  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  5327  0008F6  D7E3               	goto	l3488
  5328  0008F8  D000               	goto	l3496
  5329  0008FA                     l3496:
  5330                           
  5331                           ; BSR set to: 0
  5332  0008FA  0E09               	movlw	9
  5333  0008FC  0100               	movlb	0	; () banked
  5334  0008FE  6F6A               	movwf	___ftmul@cntr& (0+255),b
  5335  000900  D000               	goto	l3498
  5336  000902                     l3498:
  5337                           
  5338                           ; BSR set to: 0
  5339  000902  0100               	movlb	0	; () banked
  5340  000904  A160               	btfss	___ftmul@f1& (0+255),0,b
  5341  000906  D00D               	goto	l3502
  5342                           
  5343                           ; BSR set to: 0
  5344  000908  0100               	movlb	0	; () banked
  5345  00090A  5163               	movf	___ftmul@f2& (0+255),w,b
  5346  00090C  0100               	movlb	0	; () banked
  5347  00090E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5348  000910  0100               	movlb	0	; () banked
  5349  000912  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  5350  000914  0100               	movlb	0	; () banked
  5351  000916  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5352  000918  0100               	movlb	0	; () banked
  5353  00091A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  5354  00091C  0100               	movlb	0	; () banked
  5355  00091E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5356  000920  D000               	goto	l3502
  5357  000922                     l3502:
  5358                           
  5359                           ; BSR set to: 0
  5360  000922  0100               	movlb	0	; () banked
  5361  000924  90D8               	bcf	status,0,c
  5362  000926  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5363  000928  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5364  00092A  3360               	rrcf	___ftmul@f1& (0+255),f,b
  5365  00092C  0100               	movlb	0	; () banked
  5366  00092E  90D8               	bcf	status,0,c
  5367  000930  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5368  000932  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5369  000934  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5370                           
  5371                           ; BSR set to: 0
  5372  000936  0100               	movlb	0	; () banked
  5373  000938  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  5374  00093A  D7E3               	goto	l3498
  5375  00093C  D000               	goto	l3506
  5376  00093E                     l3506:
  5377                           
  5378                           ; BSR set to: 0
  5379  00093E  C067  F01A         	movff	___ftmul@f3_as_product,___ftpack@arg
  5380  000942  C068  F01B         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5381  000946  C069  F01C         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5382  00094A  C066  F01D         	movff	___ftmul@exp,___ftpack@exp
  5383  00094E  C06B  F01E         	movff	___ftmul@sign,___ftpack@sign
  5384  000952  EC32  F006         	call	___ftpack	;wreg free
  5385  000956  C01A  F060         	movff	?___ftpack,?___ftmul
  5386  00095A  C01B  F061         	movff	?___ftpack+1,?___ftmul+1
  5387  00095E  C01C  F062         	movff	?___ftpack+2,?___ftmul+2
  5388  000962  D000               	goto	l1018
  5389  000964                     l1018:
  5390  000964  0012               	return		;funcret
  5391  000966                     __end_of___ftmul:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           intcon	equ	0xFF2
  5400                           intcon2	equ	0xFF1
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1l	equ	0xFE1
  5405                           indf2	equ	0xFDF
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function ___ftpack *****************
  5411 ;; Defined at:
  5412 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  arg             3   25[COMRAM] unsigned um
  5415 ;;  exp             1   28[COMRAM] unsigned char 
  5416 ;;  sign            1   29[COMRAM] unsigned char 
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  3   25[COMRAM] float 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        8 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    4
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		___ftadd
  5439 ;;		___ftdiv
  5440 ;;		___ftmul
  5441 ;;		___lwtoft
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           	psect	text35
  5446  000C64                     __ptext35:
  5447                           	opt stack 0
  5448  000C64                     ___ftpack:
  5449                           	opt stack 23
  5450                           
  5451                           ;incstack = 0
  5452  000C64  501D               	movf	___ftpack@exp,w,c
  5453  000C66  B4D8               	btfsc	status,2,c
  5454  000C68  D005               	goto	l3194
  5455  000C6A  501A               	movf	___ftpack@arg,w,c
  5456  000C6C  101B               	iorwf	___ftpack@arg+1,w,c
  5457  000C6E  101C               	iorwf	___ftpack@arg+2,w,c
  5458  000C70  A4D8               	btfss	status,2,c
  5459  000C72  D00E               	goto	l3200
  5460  000C74                     l3194:
  5461  000C74  0E00               	movlw	0
  5462  000C76  6E1A               	movwf	?___ftpack,c
  5463  000C78  0E00               	movlw	0
  5464  000C7A  6E1B               	movwf	?___ftpack+1,c
  5465  000C7C  0E00               	movlw	0
  5466  000C7E  6E1C               	movwf	?___ftpack+2,c
  5467  000C80  D053               	goto	l931
  5468  000C82  D006               	goto	l3200
  5469  000C84                     l3198:
  5470  000C84  2A1D               	incf	___ftpack@exp,f,c
  5471  000C86  90D8               	bcf	status,0,c
  5472  000C88  321C               	rrcf	___ftpack@arg+2,f,c
  5473  000C8A  321B               	rrcf	___ftpack@arg+1,f,c
  5474  000C8C  321A               	rrcf	___ftpack@arg,f,c
  5475  000C8E  D000               	goto	l3200
  5476  000C90                     l3200:
  5477  000C90  0E00               	movlw	0
  5478  000C92  141A               	andwf	___ftpack@arg,w,c
  5479  000C94  6E1F               	movwf	??___ftpack& (0+255),c
  5480  000C96  0E00               	movlw	0
  5481  000C98  141B               	andwf	___ftpack@arg+1,w,c
  5482  000C9A  6E20               	movwf	(??___ftpack+1)& (0+255),c
  5483  000C9C  0EFE               	movlw	254
  5484  000C9E  141C               	andwf	___ftpack@arg+2,w,c
  5485  000CA0  6E21               	movwf	(??___ftpack+2)& (0+255),c
  5486  000CA2  501F               	movf	??___ftpack,w,c
  5487  000CA4  1020               	iorwf	??___ftpack+1,w,c
  5488  000CA6  1021               	iorwf	??___ftpack+2,w,c
  5489  000CA8  B4D8               	btfsc	status,2,c
  5490  000CAA  D00E               	goto	l3206
  5491  000CAC  D7EB               	goto	l3198
  5492  000CAE  D00C               	goto	l3206
  5493  000CB0                     l3202:
  5494  000CB0  2A1D               	incf	___ftpack@exp,f,c
  5495  000CB2  0E01               	movlw	1
  5496  000CB4  261A               	addwf	___ftpack@arg,f,c
  5497  000CB6  0E00               	movlw	0
  5498  000CB8  221B               	addwfc	___ftpack@arg+1,f,c
  5499  000CBA  0E00               	movlw	0
  5500  000CBC  221C               	addwfc	___ftpack@arg+2,f,c
  5501  000CBE  90D8               	bcf	status,0,c
  5502  000CC0  321C               	rrcf	___ftpack@arg+2,f,c
  5503  000CC2  321B               	rrcf	___ftpack@arg+1,f,c
  5504  000CC4  321A               	rrcf	___ftpack@arg,f,c
  5505  000CC6  D000               	goto	l3206
  5506  000CC8                     l3206:
  5507  000CC8  0E00               	movlw	0
  5508  000CCA  141A               	andwf	___ftpack@arg,w,c
  5509  000CCC  6E1F               	movwf	??___ftpack& (0+255),c
  5510  000CCE  0E00               	movlw	0
  5511  000CD0  141B               	andwf	___ftpack@arg+1,w,c
  5512  000CD2  6E20               	movwf	(??___ftpack+1)& (0+255),c
  5513  000CD4  0EFF               	movlw	255
  5514  000CD6  141C               	andwf	___ftpack@arg+2,w,c
  5515  000CD8  6E21               	movwf	(??___ftpack+2)& (0+255),c
  5516  000CDA  501F               	movf	??___ftpack,w,c
  5517  000CDC  1020               	iorwf	??___ftpack+1,w,c
  5518  000CDE  1021               	iorwf	??___ftpack+2,w,c
  5519  000CE0  B4D8               	btfsc	status,2,c
  5520  000CE2  D008               	goto	l3210
  5521  000CE4  D7E5               	goto	l3202
  5522  000CE6  D006               	goto	l3210
  5523  000CE8                     l3208:
  5524  000CE8  061D               	decf	___ftpack@exp,f,c
  5525  000CEA  90D8               	bcf	status,0,c
  5526  000CEC  361A               	rlcf	___ftpack@arg,f,c
  5527  000CEE  361B               	rlcf	___ftpack@arg+1,f,c
  5528  000CF0  361C               	rlcf	___ftpack@arg+2,f,c
  5529  000CF2  D000               	goto	l3210
  5530  000CF4                     l3210:
  5531  000CF4  BE1B               	btfsc	___ftpack@arg+1,7,c
  5532  000CF6  D004               	goto	l942
  5533  000CF8  0E02               	movlw	2
  5534  000CFA  601D               	cpfslt	___ftpack@exp,c
  5535  000CFC  D7F5               	goto	l3208
  5536  000CFE  D000               	goto	l942
  5537  000D00                     l942:
  5538  000D00  B01D               	btfsc	___ftpack@exp,0,c
  5539  000D02  D002               	goto	l3216
  5540  000D04  9E1B               	bcf	___ftpack@arg+1,7,c
  5541  000D06  D000               	goto	l3216
  5542  000D08                     l3216:
  5543  000D08  90D8               	bcf	status,0,c
  5544  000D0A  321D               	rrcf	___ftpack@exp,f,c
  5545  000D0C  501D               	movf	___ftpack@exp,w,c
  5546  000D0E  121C               	iorwf	___ftpack@arg+2,f,c
  5547  000D10  501E               	movf	___ftpack@sign,w,c
  5548  000D12  B4D8               	btfsc	status,2,c
  5549  000D14  D002               	goto	l3222
  5550  000D16  8E1C               	bsf	___ftpack@arg+2,7,c
  5551  000D18  D000               	goto	l3222
  5552  000D1A                     l3222:
  5553  000D1A  C01A  F01A         	movff	___ftpack@arg,?___ftpack
  5554  000D1E  C01B  F01B         	movff	___ftpack@arg+1,?___ftpack+1
  5555  000D22  C01C  F01C         	movff	___ftpack@arg+2,?___ftpack+2
  5556  000D26  D000               	goto	l931
  5557  000D28                     l931:
  5558  000D28  0012               	return		;funcret
  5559  000D2A                     __end_of___ftpack:
  5560                           	opt stack 0
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           intcon	equ	0xFF2
  5568                           intcon2	equ	0xFF1
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           postdec1	equ	0xFE5
  5572                           fsr1l	equ	0xFE1
  5573                           indf2	equ	0xFDF
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function _ImplementPIDMotion *****************
  5579 ;; Defined at:
  5580 ;;		line 40 in file "MotorControl.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  PIDValue        2   29[COMRAM] int 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5594 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;Total ram usage:        4 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    5
  5601 ;; This function calls:
  5602 ;;		_abs
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text36
  5609  000F30                     __ptext36:
  5610                           	opt stack 0
  5611  000F30                     _ImplementPIDMotion:
  5612                           	opt stack 25
  5613                           
  5614                           ;MotorControl.c: 42: if (PIDValue > 255)
  5615                           
  5616                           ;incstack = 0
  5617  000F30  BE1F               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  5618  000F32  D007               	goto	l3630
  5619  000F34  041F               	decf	ImplementPIDMotion@PIDValue+1,w,c
  5620  000F36  A0D8               	btfss	status,0,c
  5621  000F38  D004               	goto	l3630
  5622                           
  5623                           ;MotorControl.c: 43: PIDValue = 255;
  5624  000F3A  0E00               	movlw	0
  5625  000F3C  6E1F               	movwf	ImplementPIDMotion@PIDValue+1,c
  5626  000F3E  681E               	setf	ImplementPIDMotion@PIDValue,c
  5627  000F40  D00C               	goto	l3634
  5628  000F42                     l3630:
  5629                           
  5630                           ;MotorControl.c: 44: else if (PIDValue < -255)
  5631  000F42  AE1F               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  5632  000F44  D00A               	goto	l3634
  5633  000F46  041E               	decf	ImplementPIDMotion@PIDValue,w,c
  5634  000F48  0EFF               	movlw	255
  5635  000F4A  581F               	subwfb	ImplementPIDMotion@PIDValue+1,w,c
  5636  000F4C  B0D8               	btfsc	status,0,c
  5637  000F4E  D005               	goto	l3634
  5638                           
  5639                           ;MotorControl.c: 45: PIDValue = -255;
  5640  000F50  0EFF               	movlw	255
  5641  000F52  6E1F               	movwf	ImplementPIDMotion@PIDValue+1,c
  5642  000F54  0E01               	movlw	1
  5643  000F56  6E1E               	movwf	ImplementPIDMotion@PIDValue,c
  5644  000F58  D000               	goto	l3634
  5645  000F5A                     l3634:
  5646                           
  5647                           ;MotorControl.c: 47: if (PIDValue < 0)
  5648  000F5A  AE1F               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  5649  000F5C  D002               	goto	l3638
  5650                           
  5651                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  5652  000F5E  8EB7               	bsf	4023,7,c	;volatile
  5653  000F60  D009               	goto	l3642
  5654  000F62                     l3638:
  5655                           
  5656                           ;MotorControl.c: 49: else if (PIDValue > 0)
  5657  000F62  BE1F               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  5658  000F64  D007               	goto	l3642
  5659  000F66  501F               	movf	ImplementPIDMotion@PIDValue+1,w,c
  5660  000F68  E103               	bnz	u3300
  5661  000F6A  041E               	decf	ImplementPIDMotion@PIDValue,w,c
  5662  000F6C  A0D8               	btfss	status,0,c
  5663  000F6E  D002               	goto	l3642
  5664  000F70                     u3300:
  5665                           
  5666                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  5667  000F70  9EB7               	bcf	4023,7,c	;volatile
  5668  000F72  D000               	goto	l3642
  5669  000F74                     l3642:
  5670                           
  5671                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  5672  000F74  C01E  F01A         	movff	ImplementPIDMotion@PIDValue,abs@a
  5673  000F78  C01F  F01B         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  5674  000F7C  EC79  F00A         	call	_abs	;wreg free
  5675  000F80  C01A  F01E         	movff	?_abs,ImplementPIDMotion@PIDValue
  5676  000F84  C01B  F01F         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  5677                           
  5678                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  5679  000F88  C01E  F020         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5680  000F8C  C01F  F021         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  5681  000F90  3421               	rlcf	??_ImplementPIDMotion+1,w,c
  5682  000F92  3221               	rrcf	??_ImplementPIDMotion+1,f,c
  5683  000F94  3220               	rrcf	??_ImplementPIDMotion,f,c
  5684  000F96  3421               	rlcf	??_ImplementPIDMotion+1,w,c
  5685  000F98  3221               	rrcf	??_ImplementPIDMotion+1,f,c
  5686  000F9A  3220               	rrcf	??_ImplementPIDMotion,f,c
  5687  000F9C  5020               	movf	??_ImplementPIDMotion,w,c
  5688  000F9E  6EB8               	movwf	4024,c	;volatile
  5689                           
  5690                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  5691  000FA0  C01E  F020         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5692  000FA4  0E03               	movlw	3
  5693  000FA6  1620               	andwf	??_ImplementPIDMotion,f,c
  5694  000FA8  3A20               	swapf	??_ImplementPIDMotion,f,c
  5695  000FAA  50B7               	movf	4023,w,c	;volatile
  5696  000FAC  1820               	xorwf	??_ImplementPIDMotion,w,c
  5697  000FAE  0BCF               	andlw	-49
  5698  000FB0  1820               	xorwf	??_ImplementPIDMotion,w,c
  5699  000FB2  6EB7               	movwf	4023,c	;volatile
  5700  000FB4  0012               	return		;funcret
  5701  000FB6                     __end_of_ImplementPIDMotion:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           intcon	equ	0xFF2
  5710                           intcon2	equ	0xFF1
  5711                           postinc0	equ	0xFEE
  5712                           wreg	equ	0xFE8
  5713                           postdec1	equ	0xFE5
  5714                           fsr1l	equ	0xFE1
  5715                           indf2	equ	0xFDF
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _ImplementJSMotion *****************
  5721 ;; Defined at:
  5722 ;;		line 58 in file "MotorControl.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  JoystickValu    2   32[COMRAM] int 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  CCPinput        2   36[COMRAM] unsigned int 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;Total ram usage:        6 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    5
  5743 ;; This function calls:
  5744 ;;		_abs
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text37
  5751  000A98                     __ptext37:
  5752                           	opt stack 0
  5753  000A98                     _ImplementJSMotion:
  5754                           	opt stack 25
  5755                           
  5756                           ;MotorControl.c: 60: unsigned int CCPinput;
  5757                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  5758                           
  5759                           ;incstack = 0
  5760  000A98  5045               	movf	_DeadbandLow,w,c
  5761  000A9A  5C21               	subwf	ImplementJSMotion@JoystickValue,w,c
  5762  000A9C  5022               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5763  000A9E  0A80               	xorlw	128
  5764  000AA0  6E23               	movwf	??_ImplementJSMotion& (0+255),c
  5765  000AA2  5046               	movf	_DeadbandLow+1,w,c
  5766  000AA4  0A80               	xorlw	128
  5767  000AA6  5823               	subwfb	??_ImplementJSMotion& (0+255),w,c
  5768  000AA8  B0D8               	btfsc	status,0,c
  5769  000AAA  D002               	goto	l3654
  5770                           
  5771                           ;MotorControl.c: 62: {
  5772                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  5773  000AAC  8EB7               	bsf	4023,7,c	;volatile
  5774  000AAE  D00B               	goto	l3658
  5775  000AB0                     l3654:
  5776                           
  5777                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  5778  000AB0  5021               	movf	ImplementJSMotion@JoystickValue,w,c
  5779  000AB2  5C43               	subwf	_DeadbandHigh,w,c
  5780  000AB4  5044               	movf	_DeadbandHigh+1,w,c
  5781  000AB6  0A80               	xorlw	128
  5782  000AB8  6E23               	movwf	??_ImplementJSMotion& (0+255),c
  5783  000ABA  5022               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5784  000ABC  0A80               	xorlw	128
  5785  000ABE  5823               	subwfb	??_ImplementJSMotion& (0+255),w,c
  5786  000AC0  B0D8               	btfsc	status,0,c
  5787  000AC2  D004               	goto	l3660
  5788                           
  5789                           ;MotorControl.c: 67: {
  5790                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  5791  000AC4  9EB7               	bcf	4023,7,c	;volatile
  5792  000AC6                     l3658:
  5793                           
  5794                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  5795  000AC6  0E00               	movlw	0
  5796  000AC8  6E42               	movwf	_PIDEnableFlag,c
  5797                           
  5798                           ;MotorControl.c: 70: }
  5799  000ACA  D020               	goto	l3672
  5800  000ACC                     l3660:
  5801                           
  5802                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  5803  000ACC  5021               	movf	ImplementJSMotion@JoystickValue,w,c
  5804  000ACE  5C43               	subwf	_DeadbandHigh,w,c
  5805  000AD0  5044               	movf	_DeadbandHigh+1,w,c
  5806  000AD2  0A80               	xorlw	128
  5807  000AD4  6E23               	movwf	??_ImplementJSMotion& (0+255),c
  5808  000AD6  5022               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5809  000AD8  0A80               	xorlw	128
  5810  000ADA  5823               	subwfb	??_ImplementJSMotion& (0+255),w,c
  5811  000ADC  A0D8               	btfss	status,0,c
  5812  000ADE  D016               	goto	l3672
  5813  000AE0  5045               	movf	_DeadbandLow,w,c
  5814  000AE2  5C21               	subwf	ImplementJSMotion@JoystickValue,w,c
  5815  000AE4  5022               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5816  000AE6  0A80               	xorlw	128
  5817  000AE8  6E23               	movwf	??_ImplementJSMotion& (0+255),c
  5818  000AEA  5046               	movf	_DeadbandLow+1,w,c
  5819  000AEC  0A80               	xorlw	128
  5820  000AEE  5823               	subwfb	??_ImplementJSMotion& (0+255),w,c
  5821  000AF0  A0D8               	btfss	status,0,c
  5822  000AF2  D00C               	goto	l3672
  5823  000AF4  5042               	movf	_PIDEnableFlag,w,c
  5824  000AF6  A4D8               	btfss	status,2,c
  5825  000AF8  D009               	goto	l3672
  5826                           
  5827                           ;MotorControl.c: 72: {
  5828                           ;MotorControl.c: 73: JoystickValue = 0;
  5829  000AFA  0E00               	movlw	0
  5830  000AFC  6E22               	movwf	ImplementJSMotion@JoystickValue+1,c
  5831  000AFE  0E00               	movlw	0
  5832  000B00  6E21               	movwf	ImplementJSMotion@JoystickValue,c
  5833                           
  5834                           ;MotorControl.c: 74: CCPR3L = 0x00;
  5835  000B02  0E00               	movlw	0
  5836  000B04  6EB8               	movwf	4024,c	;volatile
  5837                           
  5838                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  5839  000B06  9AB7               	bcf	4023,5,c	;volatile
  5840                           
  5841                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  5842  000B08  98B7               	bcf	4023,4,c	;volatile
  5843  000B0A  D000               	goto	l3672
  5844  000B0C                     l3672:
  5845                           
  5846                           ;MotorControl.c: 77: }
  5847                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  5848  000B0C  5045               	movf	_DeadbandLow,w,c
  5849  000B0E  5C21               	subwf	ImplementJSMotion@JoystickValue,w,c
  5850  000B10  5022               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5851  000B12  0A80               	xorlw	128
  5852  000B14  6E23               	movwf	??_ImplementJSMotion& (0+255),c
  5853  000B16  5046               	movf	_DeadbandLow+1,w,c
  5854  000B18  0A80               	xorlw	128
  5855  000B1A  5823               	subwfb	??_ImplementJSMotion& (0+255),w,c
  5856  000B1C  A0D8               	btfss	status,0,c
  5857  000B1E  D00A               	goto	l3676
  5858  000B20  5021               	movf	ImplementJSMotion@JoystickValue,w,c
  5859  000B22  5C43               	subwf	_DeadbandHigh,w,c
  5860  000B24  5044               	movf	_DeadbandHigh+1,w,c
  5861  000B26  0A80               	xorlw	128
  5862  000B28  6E23               	movwf	??_ImplementJSMotion& (0+255),c
  5863  000B2A  5022               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5864  000B2C  0A80               	xorlw	128
  5865  000B2E  5823               	subwfb	??_ImplementJSMotion& (0+255),w,c
  5866  000B30  B0D8               	btfsc	status,0,c
  5867  000B32  D026               	goto	l109
  5868  000B34                     l3676:
  5869                           
  5870                           ;MotorControl.c: 80: {
  5871                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  5872  000B34  C021  F01A         	movff	ImplementJSMotion@JoystickValue,abs@a
  5873  000B38  C022  F01B         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  5874  000B3C  EC79  F00A         	call	_abs	;wreg free
  5875  000B40  C01A  F021         	movff	?_abs,ImplementJSMotion@JoystickValue
  5876  000B44  C01B  F022         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  5877                           
  5878                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  5879  000B48  90D8               	bcf	status,0,c
  5880  000B4A  3421               	rlcf	ImplementJSMotion@JoystickValue,w,c
  5881  000B4C  6E25               	movwf	ImplementJSMotion@CCPinput,c
  5882  000B4E  3422               	rlcf	ImplementJSMotion@JoystickValue+1,w,c
  5883  000B50  6E26               	movwf	ImplementJSMotion@CCPinput+1,c
  5884                           
  5885                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  5886  000B52  C025  F023         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  5887  000B56  C026  F024         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  5888  000B5A  90D8               	bcf	status,0,c
  5889  000B5C  3224               	rrcf	??_ImplementJSMotion+1,f,c
  5890  000B5E  3223               	rrcf	??_ImplementJSMotion,f,c
  5891  000B60  90D8               	bcf	status,0,c
  5892  000B62  3224               	rrcf	??_ImplementJSMotion+1,f,c
  5893  000B64  3223               	rrcf	??_ImplementJSMotion,f,c
  5894  000B66  5023               	movf	??_ImplementJSMotion,w,c
  5895  000B68  6EB8               	movwf	4024,c	;volatile
  5896                           
  5897                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  5898  000B6A  C025  F023         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  5899  000B6E  0E03               	movlw	3
  5900  000B70  1623               	andwf	??_ImplementJSMotion,f,c
  5901  000B72  3A23               	swapf	??_ImplementJSMotion,f,c
  5902  000B74  50B7               	movf	4023,w,c	;volatile
  5903  000B76  1823               	xorwf	??_ImplementJSMotion,w,c
  5904  000B78  0BCF               	andlw	-49
  5905  000B7A  1823               	xorwf	??_ImplementJSMotion,w,c
  5906  000B7C  6EB7               	movwf	4023,c	;volatile
  5907  000B7E  D000               	goto	l109
  5908  000B80                     l109:
  5909  000B80  0012               	return		;funcret
  5910  000B82                     __end_of_ImplementJSMotion:
  5911                           	opt stack 0
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           intcon2	equ	0xFF1
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           postdec1	equ	0xFE5
  5923                           fsr1l	equ	0xFE1
  5924                           indf2	equ	0xFDF
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function _abs *****************
  5930 ;; Defined at:
  5931 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  a               2   25[COMRAM] int 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  2   25[COMRAM] int 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5945 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;Total ram usage:        4 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    4
  5952 ;; This function calls:
  5953 ;;		Nothing
  5954 ;; This function is called by:
  5955 ;;		_ImplementPIDMotion
  5956 ;;		_ImplementJSMotion
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text38
  5961  0014F2                     __ptext38:
  5962                           	opt stack 0
  5963  0014F2                     _abs:
  5964                           	opt stack 25
  5965                           
  5966                           ;incstack = 0
  5967  0014F2  AE1B               	btfss	abs@a+1,7,c
  5968  0014F4  D00D               	goto	l645
  5969  0014F6  C01A  F01C         	movff	abs@a,??_abs
  5970  0014FA  C01B  F01D         	movff	abs@a+1,??_abs+1
  5971  0014FE  1E1C               	comf	??_abs,f,c
  5972  001500  1E1D               	comf	??_abs+1,f,c
  5973  001502  4A1C               	infsnz	??_abs,f,c
  5974  001504  2A1D               	incf	??_abs+1,f,c
  5975  001506  C01C  F01A         	movff	??_abs,?_abs
  5976  00150A  C01D  F01B         	movff	??_abs+1,?_abs+1
  5977  00150E  D004               	goto	l646
  5978  001510                     l645:
  5979  001510  C01A  F01A         	movff	abs@a,?_abs
  5980  001514  C01B  F01B         	movff	abs@a+1,?_abs+1
  5981  001518                     l646:
  5982  001518  0012               	return		;funcret
  5983  00151A                     __end_of_abs:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           intcon	equ	0xFF2
  5992                           intcon2	equ	0xFF1
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           postdec1	equ	0xFE5
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _DetectMovement *****************
  6003 ;; Defined at:
  6004 ;;		line 42 in file "Joystick.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;		None
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  ADCresult       2   30[COMRAM] unsigned int 
  6009 ;;  JoystickResu    2   28[COMRAM] int 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  2   25[COMRAM] int 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6019 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;Total ram usage:        7 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    4
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_main
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text39
  6034  001030                     __ptext39:
  6035                           	opt stack 0
  6036  001030                     _DetectMovement:
  6037                           	opt stack 26
  6038                           
  6039                           ;Joystick.c: 44: unsigned int ADCresult;
  6040                           ;Joystick.c: 45: int JoystickResult;
  6041                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  6042                           
  6043                           ;incstack = 0
  6044  001030  82C2               	bsf	4034,1,c	;volatile
  6045                           
  6046                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  6047  001032  D000               	goto	l43
  6048  001034                     l43:
  6049  001034  B2C2               	btfsc	4034,1,c	;volatile
  6050  001036  D7FE               	goto	l43
  6051                           
  6052                           ;Joystick.c: 50: ADCresult = ADRESH;
  6053  001038  CFC4 F01F          	movff	4036,DetectMovement@ADCresult	;volatile
  6054  00103C  6A20               	clrf	DetectMovement@ADCresult+1,c
  6055                           
  6056                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  6057  00103E  501F               	movf	DetectMovement@ADCresult,w,c
  6058  001040  6E20               	movwf	DetectMovement@ADCresult+1,c
  6059  001042  6A1F               	clrf	DetectMovement@ADCresult,c
  6060                           
  6061                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  6062  001044  501F               	movf	DetectMovement@ADCresult,w,c
  6063  001046  10C3               	iorwf	4035,w,c	;volatile
  6064  001048  6E1F               	movwf	DetectMovement@ADCresult,c
  6065  00104A  5020               	movf	DetectMovement@ADCresult+1,w,c
  6066  00104C  6E20               	movwf	DetectMovement@ADCresult+1,c
  6067                           
  6068                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  6069  00104E  0E00               	movlw	0
  6070  001050  241F               	addwf	DetectMovement@ADCresult,w,c
  6071  001052  6E1D               	movwf	DetectMovement@JoystickResult,c
  6072  001054  0EFE               	movlw	254
  6073  001056  2020               	addwfc	DetectMovement@ADCresult+1,w,c
  6074  001058  6E1E               	movwf	DetectMovement@JoystickResult+1,c
  6075                           
  6076                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  6077  00105A  501D               	movf	DetectMovement@JoystickResult,w,c
  6078  00105C  5C43               	subwf	_DeadbandHigh,w,c
  6079  00105E  5044               	movf	_DeadbandHigh+1,w,c
  6080  001060  0A80               	xorlw	128
  6081  001062  6E1C               	movwf	??_DetectMovement& (0+255),c
  6082  001064  501E               	movf	DetectMovement@JoystickResult+1,w,c
  6083  001066  0A80               	xorlw	128
  6084  001068  581C               	subwfb	??_DetectMovement& (0+255),w,c
  6085  00106A  A0D8               	btfss	status,0,c
  6086  00106C  D00A               	goto	l3614
  6087  00106E  5045               	movf	_DeadbandLow,w,c
  6088  001070  5C1D               	subwf	DetectMovement@JoystickResult,w,c
  6089  001072  501E               	movf	DetectMovement@JoystickResult+1,w,c
  6090  001074  0A80               	xorlw	128
  6091  001076  6E1C               	movwf	??_DetectMovement& (0+255),c
  6092  001078  5046               	movf	_DeadbandLow+1,w,c
  6093  00107A  0A80               	xorlw	128
  6094  00107C  581C               	subwfb	??_DetectMovement& (0+255),w,c
  6095  00107E  B0D8               	btfsc	status,0,c
  6096  001080  D007               	goto	l3622
  6097  001082                     l3614:
  6098                           
  6099                           ;Joystick.c: 56: {
  6100                           ;Joystick.c: 57: PIDEnableFlag = 0;
  6101  001082  0E00               	movlw	0
  6102  001084  6E42               	movwf	_PIDEnableFlag,c
  6103                           
  6104                           ;Joystick.c: 58: return JoystickResult;
  6105  001086  C01D  F01A         	movff	DetectMovement@JoystickResult,?_DetectMovement
  6106  00108A  C01E  F01B         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  6107                           
  6108                           ;Joystick.c: 59: }
  6109  00108E  D005               	goto	l49
  6110  001090                     l3622:
  6111                           
  6112                           ;Joystick.c: 60: else
  6113                           ;Joystick.c: 61: return 0;
  6114  001090  0E00               	movlw	0
  6115  001092  6E1B               	movwf	?_DetectMovement+1,c
  6116  001094  0E00               	movlw	0
  6117  001096  6E1A               	movwf	?_DetectMovement,c
  6118  001098  D000               	goto	l49
  6119  00109A                     l49:
  6120  00109A  0012               	return		;funcret
  6121  00109C                     __end_of_DetectMovement:
  6122                           	opt stack 0
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           prodh	equ	0xFF4
  6128                           prodl	equ	0xFF3
  6129                           intcon	equ	0xFF2
  6130                           intcon2	equ	0xFF1
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           postdec1	equ	0xFE5
  6134                           fsr1l	equ	0xFE1
  6135                           indf2	equ	0xFDF
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _DetectJoystick *****************
  6141 ;; Defined at:
  6142 ;;		line 27 in file "Joystick.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;		None               void
  6149 ;; Registers used:
  6150 ;;		wreg, status,2
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;Total ram usage:        0 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    4
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_main
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text40
  6171  0015D2                     __ptext40:
  6172                           	opt stack 0
  6173  0015D2                     _DetectJoystick:
  6174                           	opt stack 26
  6175                           
  6176                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  6177                           
  6178                           ;incstack = 0
  6179  0015D2  B281               	btfsc	3969,1,c	;volatile
  6180  0015D4  D003               	goto	l37
  6181                           
  6182                           ;Joystick.c: 30: {
  6183                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  6184  0015D6  9480               	bcf	3968,2,c	;volatile
  6185                           
  6186                           ;Joystick.c: 32: JSEnableFlag = 0;
  6187  0015D8  0E00               	movlw	0
  6188  0015DA  D008               	goto	L2
  6189  0015DC                     l37:
  6190                           
  6191                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  6192  0015DC  A281               	btfss	3969,1,c	;volatile
  6193  0015DE  D009               	goto	l40
  6194  0015E0  0100               	movlb	0	; () banked
  6195  0015E2  51B1               	movf	_JSEnableFlag& (0+255),w,b
  6196  0015E4  A4D8               	btfss	status,2,c
  6197  0015E6  D005               	goto	l40
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;Joystick.c: 36: {
  6201                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  6202  0015E8  8480               	bsf	3968,2,c	;volatile
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;Joystick.c: 38: JSEnableFlag = 1;
  6206  0015EA  0E01               	movlw	1
  6207  0015EC                     L2:
  6208  0015EC  0100               	movlb	0	; () banked
  6209  0015EE  6FB1               	movwf	_JSEnableFlag& (0+255),b
  6210                           
  6211                           ; BSR set to: 0
  6212  0015F0  D000               	goto	l40
  6213  0015F2                     l40:
  6214  0015F2  0012               	return		;funcret
  6215  0015F4                     __end_of_DetectJoystick:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           prodh	equ	0xFF4
  6222                           prodl	equ	0xFF3
  6223                           intcon	equ	0xFF2
  6224                           intcon2	equ	0xFF1
  6225                           postinc0	equ	0xFEE
  6226                           wreg	equ	0xFE8
  6227                           postdec1	equ	0xFE5
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           fsr2h	equ	0xFDA
  6231                           fsr2l	equ	0xFD9
  6232                           status	equ	0xFD8
  6233                           
  6234 ;; *************** function _ISR *****************
  6235 ;; Defined at:
  6236 ;;		line 134 in file "RTDuC.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;		None               void
  6243 ;; Registers used:
  6244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;Total ram usage:       16 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    3
  6257 ;; This function calls:
  6258 ;;		_HLVDInt
  6259 ;;		_INT0Int
  6260 ;;		_SPIInt
  6261 ;;		_TMR0Int
  6262 ;; This function is called by:
  6263 ;;		Interrupt level 2
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	intcode
  6268  000008                     __pintcode:
  6269                           	opt stack 0
  6270  000008                     _ISR:
  6271                           	opt stack 22
  6272                           
  6273                           ;incstack = 0
  6274  000008  CFFA F00C          	movff	pclath,??_ISR+2
  6275  00000C  CFFB F00D          	movff	pclatu,??_ISR+3
  6276  000010  CFE9 F00E          	movff	fsr0l,??_ISR+4
  6277  000014  ED95  F006         	call	int_func,f	;refresh shadow registers
  6278                           pclatu	equ	0xFFB
  6279                           pclath	equ	0xFFA
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           intcon2	equ	0xFF1
  6288                           postinc0	equ	0xFEE
  6289                           fsr0l	equ	0xFE9
  6290                           wreg	equ	0xFE8
  6291                           postdec1	equ	0xFE5
  6292                           fsr1l	equ	0xFE1
  6293                           indf2	equ	0xFDF
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298                           	psect	intcode_body
  6299  000D2A                     __pintcode_body:
  6300                           	opt stack 22
  6301  000D2A                     int_func:
  6302                           	opt stack 22
  6303  000D2A  0006               	pop		; remove dummy address from shadow register refresh
  6304  000D2C  CFEA F00F          	movff	fsr0h,??_ISR+5
  6305  000D30  CFE1 F010          	movff	fsr1l,??_ISR+6
  6306  000D34  CFE2 F011          	movff	fsr1h,??_ISR+7
  6307  000D38  CFD9 F012          	movff	fsr2l,??_ISR+8
  6308  000D3C  CFDA F013          	movff	fsr2h,??_ISR+9
  6309  000D40  CFF3 F014          	movff	prodl,??_ISR+10
  6310  000D44  CFF4 F015          	movff	prodh,??_ISR+11
  6311  000D48  CFF6 F016          	movff	tblptrl,??_ISR+12
  6312  000D4C  CFF7 F017          	movff	tblptrh,??_ISR+13
  6313  000D50  CFF8 F018          	movff	tblptru,??_ISR+14
  6314  000D54  CFF5 F019          	movff	tablat,??_ISR+15
  6315                           
  6316                           ;RTDuC.c: 136: PORTCbits.RC6 = 1;
  6317  000D58  8C82               	bsf	3970,6,c	;volatile
  6318                           
  6319                           ;RTDuC.c: 137: if (PIR1bits.SSP1IF == 1)
  6320  000D5A  A69E               	btfss	3998,3,c	;volatile
  6321  000D5C  D003               	goto	i2l3104
  6322                           
  6323                           ;RTDuC.c: 138: {
  6324                           ;RTDuC.c: 139: SPIInt();
  6325  000D5E  EC6F  F00B         	call	_SPIInt	;wreg free
  6326  000D62  D000               	goto	i2l3104
  6327  000D64                     i2l3104:
  6328                           
  6329                           ;RTDuC.c: 140: }
  6330                           ;RTDuC.c: 142: if ((INTCONbits.TMR0IF == 1) && ((PIDEnableFlag | 0x01) == 0x01))
  6331  000D64  A4F2               	btfss	intcon,2,c	;volatile
  6332  000D66  D00F               	goto	i2l3112
  6333  000D68  5042               	movf	_PIDEnableFlag,w,c
  6334  000D6A  6E0A               	movwf	??_ISR& (0+255),c
  6335  000D6C  6A0B               	clrf	(??_ISR+1)& (0+255),c
  6336  000D6E  0E01               	movlw	1
  6337  000D70  120A               	iorwf	??_ISR,f,c
  6338  000D72  0E00               	movlw	0
  6339  000D74  120B               	iorwf	??_ISR+1,f,c
  6340  000D76  040A               	decf	??_ISR,w,c
  6341  000D78  100B               	iorwf	??_ISR+1,w,c
  6342  000D7A  A4D8               	btfss	status,2,c
  6343  000D7C  D004               	goto	i2l3112
  6344                           
  6345                           ;RTDuC.c: 143: {
  6346                           ;RTDuC.c: 144: TMR0Int();
  6347  000D7E  EC66  F00B         	call	_TMR0Int	;wreg free
  6348                           
  6349                           ;RTDuC.c: 145: PORTCbits.RC6 = 0;
  6350  000D82  9C82               	bcf	3970,6,c	;volatile
  6351  000D84  D000               	goto	i2l3112
  6352  000D86                     i2l3112:
  6353                           
  6354                           ;RTDuC.c: 146: }
  6355                           ;RTDuC.c: 148: if (INTCONbits.INT0IF == 1)
  6356  000D86  A2F2               	btfss	intcon,1,c	;volatile
  6357  000D88  D003               	goto	i2l3116
  6358                           
  6359                           ;RTDuC.c: 149: {
  6360                           ;RTDuC.c: 150: INT0Int();
  6361  000D8A  ECD7  F00A         	call	_INT0Int	;wreg free
  6362  000D8E  D000               	goto	i2l3116
  6363  000D90                     i2l3116:
  6364                           
  6365                           ;RTDuC.c: 151: }
  6366                           ;RTDuC.c: 153: if (PIR2bits.HLVDIF == 1)
  6367  000D90  A4A1               	btfss	4001,2,c	;volatile
  6368  000D92  D006               	goto	i2l3122
  6369                           
  6370                           ;RTDuC.c: 154: {
  6371                           ;RTDuC.c: 155: PORTAbits.RA4 = 0;
  6372  000D94  9880               	bcf	3968,4,c	;volatile
  6373                           
  6374                           ;RTDuC.c: 156: PORTAbits.RA3 = 0;
  6375  000D96  9680               	bcf	3968,3,c	;volatile
  6376                           
  6377                           ;RTDuC.c: 157: PORTAbits.RA2 = 0;
  6378  000D98  9480               	bcf	3968,2,c	;volatile
  6379                           
  6380                           ;RTDuC.c: 158: HLVDInt();
  6381  000D9A  ECF1  F006         	call	_HLVDInt	;wreg free
  6382  000D9E  D000               	goto	i2l3122
  6383  000DA0                     i2l3122:
  6384                           
  6385                           ;RTDuC.c: 159: }
  6386                           ;RTDuC.c: 161: if (PIR2bits.OSCFIF == 1)
  6387  000DA0  AEA1               	btfss	4001,7,c	;volatile
  6388  000DA2  D002               	goto	i2l518
  6389  000DA4  00FF               	reset		;# 
  6390  000DA6  D000               	goto	i2l518
  6391  000DA8                     i2l518:
  6392  000DA8  C019  FFF5         	movff	??_ISR+15,tablat
  6393  000DAC  C018  FFF8         	movff	??_ISR+14,tblptru
  6394  000DB0  C017  FFF7         	movff	??_ISR+13,tblptrh
  6395  000DB4  C016  FFF6         	movff	??_ISR+12,tblptrl
  6396  000DB8  C015  FFF4         	movff	??_ISR+11,prodh
  6397  000DBC  C014  FFF3         	movff	??_ISR+10,prodl
  6398  000DC0  C013  FFDA         	movff	??_ISR+9,fsr2h
  6399  000DC4  C012  FFD9         	movff	??_ISR+8,fsr2l
  6400  000DC8  C011  FFE2         	movff	??_ISR+7,fsr1h
  6401  000DCC  C010  FFE1         	movff	??_ISR+6,fsr1l
  6402  000DD0  C00F  FFEA         	movff	??_ISR+5,fsr0h
  6403  000DD4  C00E  FFE9         	movff	??_ISR+4,fsr0l
  6404  000DD8  C00D  FFFB         	movff	??_ISR+3,pclatu
  6405  000DDC  C00C  FFFA         	movff	??_ISR+2,pclath
  6406  000DE0  0011               	retfie		f
  6407  000DE2                     __end_of_ISR:
  6408                           	opt stack 0
  6409                           pclatu	equ	0xFFB
  6410                           pclath	equ	0xFFA
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           prodh	equ	0xFF4
  6416                           prodl	equ	0xFF3
  6417                           intcon	equ	0xFF2
  6418                           intcon2	equ	0xFF1
  6419                           postinc0	equ	0xFEE
  6420                           fsr0h	equ	0xFEA
  6421                           fsr0l	equ	0xFE9
  6422                           wreg	equ	0xFE8
  6423                           postdec1	equ	0xFE5
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           
  6431 ;; *************** function _TMR0Int *****************
  6432 ;; Defined at:
  6433 ;;		line 57 in file "PID.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;		None               void
  6440 ;; Registers used:
  6441 ;;		wreg, status,2
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; This function calls:
  6454 ;;		Nothing
  6455 ;; This function is called by:
  6456 ;;		_ISR
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text42
  6461  0016CC                     __ptext42:
  6462                           	opt stack 0
  6463  0016CC                     _TMR0Int:
  6464                           	opt stack 24
  6465                           
  6466                           ;PID.c: 59: TMR0H = 0xDB;
  6467                           
  6468                           ;incstack = 0
  6469  0016CC  0EDB               	movlw	219
  6470  0016CE  6ED7               	movwf	4055,c	;volatile
  6471                           
  6472                           ;PID.c: 60: TMR0L = 0x60;
  6473  0016D0  0E60               	movlw	96
  6474  0016D2  6ED6               	movwf	4054,c	;volatile
  6475                           
  6476                           ;PID.c: 61: TMR0Flag = 1;
  6477  0016D4  0E01               	movlw	1
  6478  0016D6  0100               	movlb	0	; () banked
  6479  0016D8  6FB3               	movwf	_TMR0Flag& (0+255),b
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;PID.c: 62: INTCONbits.TMR0IF = 0;
  6483  0016DA  94F2               	bcf	intcon,2,c	;volatile
  6484                           
  6485                           ; BSR set to: 0
  6486  0016DC  0012               	return		;funcret
  6487  0016DE                     __end_of_TMR0Int:
  6488                           	opt stack 0
  6489                           pclatu	equ	0xFFB
  6490                           pclath	equ	0xFFA
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           intcon	equ	0xFF2
  6498                           intcon2	equ	0xFF1
  6499                           postinc0	equ	0xFEE
  6500                           fsr0h	equ	0xFEA
  6501                           fsr0l	equ	0xFE9
  6502                           wreg	equ	0xFE8
  6503                           postdec1	equ	0xFE5
  6504                           fsr1h	equ	0xFE2
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           fsr2h	equ	0xFDA
  6508                           fsr2l	equ	0xFD9
  6509                           status	equ	0xFD8
  6510                           
  6511 ;; *************** function _SPIInt *****************
  6512 ;; Defined at:
  6513 ;;		line 26 in file "SPISlave.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;		None               void
  6520 ;; Registers used:
  6521 ;;		wreg, status,2
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;Total ram usage:        0 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		_ISR
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text43
  6541  0016DE                     __ptext43:
  6542                           	opt stack 0
  6543  0016DE                     _SPIInt:
  6544                           	opt stack 24
  6545                           
  6546                           ;SPISlave.c: 28: Command = SSP1BUF;
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;incstack = 0
  6550  0016DE  CFC9 F0B0          	movff	4041,_Command	;volatile
  6551                           
  6552                           ;SPISlave.c: 29: PORTCbits.RC6 = 1;
  6553  0016E2  8C82               	bsf	3970,6,c	;volatile
  6554                           
  6555                           ;SPISlave.c: 30: PIR1bits.SSP1IF = 0;
  6556  0016E4  969E               	bcf	3998,3,c	;volatile
  6557                           
  6558                           ;SPISlave.c: 31: PIE1bits.SSP1IE = 0;
  6559  0016E6  969D               	bcf	3997,3,c	;volatile
  6560                           
  6561                           ;SPISlave.c: 32: SPIflag = 1;
  6562  0016E8  0E01               	movlw	1
  6563  0016EA  0100               	movlb	0	; () banked
  6564  0016EC  6FB2               	movwf	_SPIflag& (0+255),b
  6565                           
  6566                           ; BSR set to: 0
  6567  0016EE  0012               	return		;funcret
  6568  0016F0                     __end_of_SPIInt:
  6569                           	opt stack 0
  6570                           pclatu	equ	0xFFB
  6571                           pclath	equ	0xFFA
  6572                           tblptru	equ	0xFF8
  6573                           tblptrh	equ	0xFF7
  6574                           tblptrl	equ	0xFF6
  6575                           tablat	equ	0xFF5
  6576                           prodh	equ	0xFF4
  6577                           prodl	equ	0xFF3
  6578                           intcon	equ	0xFF2
  6579                           intcon2	equ	0xFF1
  6580                           postinc0	equ	0xFEE
  6581                           fsr0h	equ	0xFEA
  6582                           fsr0l	equ	0xFE9
  6583                           wreg	equ	0xFE8
  6584                           postdec1	equ	0xFE5
  6585                           fsr1h	equ	0xFE2
  6586                           fsr1l	equ	0xFE1
  6587                           indf2	equ	0xFDF
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function _INT0Int *****************
  6593 ;; Defined at:
  6594 ;;		line 179 in file "RTDuC.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;		None               void
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;Total ram usage:        0 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    1
  6615 ;; This function calls:
  6616 ;;		_KillMotors
  6617 ;; This function is called by:
  6618 ;;		_ISR
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text44
  6623  0015AE                     __ptext44:
  6624                           	opt stack 0
  6625  0015AE                     _INT0Int:
  6626                           	opt stack 23
  6627                           
  6628                           ;RTDuC.c: 181: KillMotors();
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;incstack = 0
  6632  0015AE  EC83  F00B         	call	_KillMotors	;wreg free
  6633                           
  6634                           ;RTDuC.c: 182: PORTAbits.RA3 = 0;
  6635  0015B2  9680               	bcf	3968,3,c	;volatile
  6636                           
  6637                           ;RTDuC.c: 183: T0CONbits.TMR0ON = 1;
  6638  0015B4  8ED5               	bsf	4053,7,c	;volatile
  6639                           
  6640                           ;RTDuC.c: 184: INTCONbits.GIE = 0;
  6641  0015B6  9EF2               	bcf	intcon,7,c	;volatile
  6642                           
  6643                           ;RTDuC.c: 185: PORTAbits.RA4 = 1;
  6644  0015B8  8880               	bsf	3968,4,c	;volatile
  6645  0015BA  D000               	goto	i2l2000
  6646  0015BC                     i2l2000:
  6647                           
  6648                           ;RTDuC.c: 187: {
  6649                           ;RTDuC.c: 188: TMR0H = 0x00;
  6650  0015BC  0E00               	movlw	0
  6651  0015BE  6ED7               	movwf	4055,c	;volatile
  6652                           
  6653                           ;RTDuC.c: 189: TMR0L = 0x00;
  6654  0015C0  0E00               	movlw	0
  6655  0015C2  6ED6               	movwf	4054,c	;volatile
  6656                           
  6657                           ;RTDuC.c: 190: while (!INTCONbits.TMR0IF);
  6658  0015C4  D000               	goto	i2l522
  6659  0015C6                     i2l522:
  6660  0015C6  A4F2               	btfss	intcon,2,c	;volatile
  6661  0015C8  D7FE               	goto	i2l522
  6662                           
  6663                           ;RTDuC.c: 191: INTCONbits.TMR0IF = 0;
  6664  0015CA  94F2               	bcf	intcon,2,c	;volatile
  6665                           
  6666                           ;RTDuC.c: 192: ~PORTAbits.RA4;
  6667  0015CC  5080               	movf	3968,w,c	;volatile
  6668  0015CE  D7F6               	goto	i2l2000
  6669  0015D0  0012               	return		;funcret
  6670  0015D2                     __end_of_INT0Int:
  6671                           	opt stack 0
  6672                           pclatu	equ	0xFFB
  6673                           pclath	equ	0xFFA
  6674                           tblptru	equ	0xFF8
  6675                           tblptrh	equ	0xFF7
  6676                           tblptrl	equ	0xFF6
  6677                           tablat	equ	0xFF5
  6678                           prodh	equ	0xFF4
  6679                           prodl	equ	0xFF3
  6680                           intcon	equ	0xFF2
  6681                           intcon2	equ	0xFF1
  6682                           postinc0	equ	0xFEE
  6683                           fsr0h	equ	0xFEA
  6684                           fsr0l	equ	0xFE9
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1h	equ	0xFE2
  6688                           fsr1l	equ	0xFE1
  6689                           indf2	equ	0xFDF
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _KillMotors *****************
  6695 ;; Defined at:
  6696 ;;		line 28 in file "MotorControl.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;		None               void
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_INT0Int
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text45
  6724  001706                     __ptext45:
  6725                           	opt stack 0
  6726  001706                     _KillMotors:
  6727                           	opt stack 23
  6728                           
  6729                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  6730                           
  6731                           ;incstack = 0
  6732  001706  8880               	bsf	3968,4,c	;volatile
  6733                           
  6734                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  6735  001708  50B7               	movf	4023,w,c	;volatile
  6736  00170A  0BF0               	andlw	240
  6737  00170C  6EB7               	movwf	4023,c	;volatile
  6738  00170E  0012               	return		;funcret
  6739  001710                     __end_of_KillMotors:
  6740                           	opt stack 0
  6741                           pclatu	equ	0xFFB
  6742                           pclath	equ	0xFFA
  6743                           tblptru	equ	0xFF8
  6744                           tblptrh	equ	0xFF7
  6745                           tblptrl	equ	0xFF6
  6746                           tablat	equ	0xFF5
  6747                           prodh	equ	0xFF4
  6748                           prodl	equ	0xFF3
  6749                           intcon	equ	0xFF2
  6750                           intcon2	equ	0xFF1
  6751                           postinc0	equ	0xFEE
  6752                           fsr0h	equ	0xFEA
  6753                           fsr0l	equ	0xFE9
  6754                           wreg	equ	0xFE8
  6755                           postdec1	equ	0xFE5
  6756                           fsr1h	equ	0xFE2
  6757                           fsr1l	equ	0xFE1
  6758                           indf2	equ	0xFDF
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function _HLVDInt *****************
  6764 ;; Defined at:
  6765 ;;		line 150 in file "EEPROM.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;		None               void
  6772 ;; Registers used:
  6773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    2
  6786 ;; This function calls:
  6787 ;;		_EEWriteChar
  6788 ;;		_EEWriteDouble
  6789 ;; This function is called by:
  6790 ;;		_ISR
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text46
  6795  000DE2                     __ptext46:
  6796                           	opt stack 0
  6797  000DE2                     _HLVDInt:
  6798                           	opt stack 22
  6799                           
  6800                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  6801                           
  6802                           ;incstack = 0
  6803  000DE2  C03D  F005         	movff	_SetAngle,EEWriteDouble@dub
  6804  000DE6  C03E  F006         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6805  000DEA  C03F  F007         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6806  000DEE  0E00               	movlw	0
  6807  000DF0  EC00  F009         	call	_EEWriteDouble
  6808                           
  6809                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  6810  000DF4  C0A2  F005         	movff	_Kp,EEWriteDouble@dub
  6811  000DF8  C0A3  F006         	movff	_Kp+1,EEWriteDouble@dub+1
  6812  000DFC  C0A4  F007         	movff	_Kp+2,EEWriteDouble@dub+2
  6813  000E00  0E03               	movlw	3
  6814  000E02  EC00  F009         	call	_EEWriteDouble
  6815                           
  6816                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  6817  000E06  C09F  F005         	movff	_Ki,EEWriteDouble@dub
  6818  000E0A  C0A0  F006         	movff	_Ki+1,EEWriteDouble@dub+1
  6819  000E0E  C0A1  F007         	movff	_Ki+2,EEWriteDouble@dub+2
  6820  000E12  0E06               	movlw	6
  6821  000E14  EC00  F009         	call	_EEWriteDouble
  6822                           
  6823                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  6824  000E18  C09C  F005         	movff	_Kd,EEWriteDouble@dub
  6825  000E1C  C09D  F006         	movff	_Kd+1,EEWriteDouble@dub+1
  6826  000E20  C09E  F007         	movff	_Kd+2,EEWriteDouble@dub+2
  6827  000E24  0E09               	movlw	9
  6828  000E26  EC00  F009         	call	_EEWriteDouble
  6829                           
  6830                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  6831  000E2A  CF80 F005          	movff	3968,EEWriteChar@ch	;volatile
  6832  000E2E  0E0C               	movlw	12
  6833  000E30  ECFA  F00A         	call	_EEWriteChar
  6834                           
  6835                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  6836  000E34  CF81 F005          	movff	3969,EEWriteChar@ch	;volatile
  6837  000E38  0E0D               	movlw	13
  6838  000E3A  ECFA  F00A         	call	_EEWriteChar
  6839                           
  6840                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  6841  000E3E  CF82 F005          	movff	3970,EEWriteChar@ch	;volatile
  6842  000E42  0E0E               	movlw	14
  6843  000E44  ECFA  F00A         	call	_EEWriteChar
  6844                           
  6845                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  6846  000E48  CF83 F005          	movff	3971,EEWriteChar@ch	;volatile
  6847  000E4C  0E0F               	movlw	15
  6848  000E4E  ECFA  F00A         	call	_EEWriteChar
  6849                           
  6850                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  6851  000E52  CF84 F005          	movff	3972,EEWriteChar@ch	;volatile
  6852  000E56  0E10               	movlw	16
  6853  000E58  ECFA  F00A         	call	_EEWriteChar
  6854                           
  6855                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  6856  000E5C  CF85 F005          	movff	3973,EEWriteChar@ch	;volatile
  6857  000E60  0E11               	movlw	17
  6858  000E62  ECFA  F00A         	call	_EEWriteChar
  6859                           
  6860                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  6861  000E66  CF86 F005          	movff	3974,EEWriteChar@ch	;volatile
  6862  000E6A  0E12               	movlw	18
  6863  000E6C  ECFA  F00A         	call	_EEWriteChar
  6864                           
  6865                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  6866  000E70  CF87 F005          	movff	3975,EEWriteChar@ch	;volatile
  6867  000E74  0E13               	movlw	19
  6868  000E76  ECFA  F00A         	call	_EEWriteChar
  6869                           
  6870                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  6871  000E7A  CF88 F005          	movff	3976,EEWriteChar@ch	;volatile
  6872  000E7E  0E14               	movlw	20
  6873  000E80  ECFA  F00A         	call	_EEWriteChar
  6874                           
  6875                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  6876  000E84  C042  F005         	movff	_PIDEnableFlag,EEWriteChar@ch
  6877  000E88  0E15               	movlw	21
  6878  000E8A  ECFA  F00A         	call	_EEWriteChar
  6879                           
  6880                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  6881  000E8E  0E01               	movlw	1
  6882  000E90  6E05               	movwf	EEWriteChar@ch,c
  6883  000E92  0E16               	movlw	22
  6884  000E94  ECFA  F00A         	call	_EEWriteChar
  6885  000E98  0012               	return		;funcret
  6886  000E9A                     __end_of_HLVDInt:
  6887                           	opt stack 0
  6888                           pclatu	equ	0xFFB
  6889                           pclath	equ	0xFFA
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon2	equ	0xFF1
  6898                           postinc0	equ	0xFEE
  6899                           fsr0h	equ	0xFEA
  6900                           fsr0l	equ	0xFE9
  6901                           wreg	equ	0xFE8
  6902                           postdec1	equ	0xFE5
  6903                           fsr1h	equ	0xFE2
  6904                           fsr1l	equ	0xFE1
  6905                           indf2	equ	0xFDF
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function _EEWriteDouble *****************
  6911 ;; Defined at:
  6912 ;;		line 77 in file "EEPROM.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  location        1    wreg     unsigned char 
  6915 ;;  dub             3    4[COMRAM] unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  location        1    7[COMRAM] unsigned char 
  6918 ;;  x               1    8[COMRAM] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;		None               void
  6921 ;; Registers used:
  6922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6928 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;Total ram usage:        5 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    1
  6935 ;; This function calls:
  6936 ;;		_EEDisassembleDouble
  6937 ;;		_Write_b_eep
  6938 ;;		i2_Busy_eep
  6939 ;; This function is called by:
  6940 ;;		_HLVDInt
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text47
  6945  001200                     __ptext47:
  6946                           	opt stack 0
  6947  001200                     _EEWriteDouble:
  6948                           	opt stack 22
  6949                           
  6950                           ;incstack = 0
  6951                           ;EEWriteDouble@location stored from wreg
  6952  001200  6E08               	movwf	EEWriteDouble@location,c
  6953                           
  6954                           ;EEPROM.c: 79: unsigned char x;
  6955                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  6956  001202  C005  F001         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6957  001206  C006  F002         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6958  00120A  C007  F003         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6959  00120E  EC16  F00A         	call	_EEDisassembleDouble	;wreg free
  6960                           
  6961                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  6962  001212  50F2               	movf	intcon,w,c	;volatile
  6963  001214  0B3F               	andlw	63
  6964  001216  6EF2               	movwf	intcon,c	;volatile
  6965                           
  6966                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  6967  001218  0E00               	movlw	0
  6968  00121A  6E09               	movwf	EEWriteDouble@x,c
  6969  00121C                     i2l2526:
  6970  00121C  0E02               	movlw	2
  6971  00121E  6409               	cpfsgt	EEWriteDouble@x,c
  6972  001220  D001               	goto	i2l2530
  6973  001222  D014               	goto	i2l2540
  6974  001224                     i2l2530:
  6975                           
  6976                           ;EEPROM.c: 86: {
  6977                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  6978  001224  C008  F001         	movff	EEWriteDouble@location,Write_b_eep@badd
  6979  001228  6A02               	clrf	Write_b_eep@badd+1,c
  6980  00122A  5009               	movf	EEWriteDouble@x,w,c
  6981  00122C  0D01               	mullw	1
  6982  00122E  0E3A               	movlw	low _DDouble
  6983  001230  24F3               	addwf	prodl,w,c
  6984  001232  6ED9               	movwf	fsr2l,c
  6985  001234  0E00               	movlw	high _DDouble
  6986  001236  20F4               	addwfc	prodh,w,c
  6987  001238  6EDA               	movwf	fsr2h,c
  6988  00123A  50DF               	movf	indf2,w,c
  6989  00123C  6E03               	movwf	Write_b_eep@bdat,c
  6990  00123E  ECB9  F009         	call	_Write_b_eep	;wreg free
  6991                           
  6992                           ;EEPROM.c: 88: location++;
  6993  001242  2A08               	incf	EEWriteDouble@location,f,c
  6994                           
  6995                           ;EEPROM.c: 89: Busy_eep();
  6996  001244  EC8C  F00B         	call	i2_Busy_eep	;wreg free
  6997  001248  2A09               	incf	EEWriteDouble@x,f,c
  6998  00124A  D7E8               	goto	i2l2526
  6999  00124C                     i2l2540:
  7000                           
  7001                           ;EEPROM.c: 90: }
  7002                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7003  00124C  50F2               	movf	intcon,w,c	;volatile
  7004  00124E  09C0               	iorlw	192
  7005  001250  6EF2               	movwf	intcon,c	;volatile
  7006  001252  0012               	return		;funcret
  7007  001254                     __end_of_EEWriteDouble:
  7008                           	opt stack 0
  7009                           pclatu	equ	0xFFB
  7010                           pclath	equ	0xFFA
  7011                           tblptru	equ	0xFF8
  7012                           tblptrh	equ	0xFF7
  7013                           tblptrl	equ	0xFF6
  7014                           tablat	equ	0xFF5
  7015                           prodh	equ	0xFF4
  7016                           prodl	equ	0xFF3
  7017                           intcon	equ	0xFF2
  7018                           intcon2	equ	0xFF1
  7019                           postinc0	equ	0xFEE
  7020                           fsr0h	equ	0xFEA
  7021                           fsr0l	equ	0xFE9
  7022                           wreg	equ	0xFE8
  7023                           postdec1	equ	0xFE5
  7024                           fsr1h	equ	0xFE2
  7025                           fsr1l	equ	0xFE1
  7026                           indf2	equ	0xFDF
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031 ;; *************** function _EEDisassembleDouble *****************
  7032 ;; Defined at:
  7033 ;;		line 48 in file "EEPROM.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  dub             3    0[COMRAM] unsigned char 
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;		None
  7038 ;; Return value:  Size  Location     Type
  7039 ;;		None               void
  7040 ;; Registers used:
  7041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7047 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;Total ram usage:        3 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_EEWriteDouble
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text48
  7061  00142C                     __ptext48:
  7062                           	opt stack 0
  7063  00142C                     _EEDisassembleDouble:
  7064                           	opt stack 22
  7065                           
  7066                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7067                           
  7068                           ;incstack = 0
  7069  00142C  0E01               	movlw	low EEDisassembleDouble@dub
  7070  00142E  6E40               	movwf	_DoublePtr,c
  7071  001430  0E00               	movlw	high EEDisassembleDouble@dub
  7072  001432  6E41               	movwf	_DoublePtr+1,c
  7073                           
  7074                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7075  001434  C040  FFD9         	movff	_DoublePtr,fsr2l
  7076  001438  C041  FFDA         	movff	_DoublePtr+1,fsr2h
  7077  00143C  50DF               	movf	indf2,w,c
  7078  00143E  6E3A               	movwf	_DDouble,c
  7079                           
  7080                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7081  001440  EE20 F001          	lfsr	2,1
  7082  001444  5040               	movf	_DoublePtr,w,c
  7083  001446  26D9               	addwf	fsr2l,f,c
  7084  001448  5041               	movf	_DoublePtr+1,w,c
  7085  00144A  22DA               	addwfc	fsr2h,f,c
  7086  00144C  50DF               	movf	indf2,w,c
  7087  00144E  6E3B               	movwf	_DDouble+1,c
  7088                           
  7089                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7090  001450  EE20 F002          	lfsr	2,2
  7091  001454  5040               	movf	_DoublePtr,w,c
  7092  001456  26D9               	addwf	fsr2l,f,c
  7093  001458  5041               	movf	_DoublePtr+1,w,c
  7094  00145A  22DA               	addwfc	fsr2h,f,c
  7095  00145C  50DF               	movf	indf2,w,c
  7096  00145E  6E3C               	movwf	_DDouble+2,c
  7097  001460  0012               	return		;funcret
  7098  001462                     __end_of_EEDisassembleDouble:
  7099                           	opt stack 0
  7100                           pclatu	equ	0xFFB
  7101                           pclath	equ	0xFFA
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           intcon	equ	0xFF2
  7109                           intcon2	equ	0xFF1
  7110                           postinc0	equ	0xFEE
  7111                           fsr0h	equ	0xFEA
  7112                           fsr0l	equ	0xFE9
  7113                           wreg	equ	0xFE8
  7114                           postdec1	equ	0xFE5
  7115                           fsr1h	equ	0xFE2
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _EEWriteChar *****************
  7123 ;; Defined at:
  7124 ;;		line 122 in file "EEPROM.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;  location        1    wreg     unsigned char 
  7127 ;;  ch              1    4[COMRAM] unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  location        1    5[COMRAM] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;		None               void
  7132 ;; Registers used:
  7133 ;;		wreg, status,2, status,0, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7139 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;Total ram usage:        2 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    1
  7146 ;; This function calls:
  7147 ;;		_Write_b_eep
  7148 ;;		i2_Busy_eep
  7149 ;; This function is called by:
  7150 ;;		_HLVDInt
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text49
  7155  0015F4                     __ptext49:
  7156                           	opt stack 0
  7157  0015F4                     _EEWriteChar:
  7158                           	opt stack 22
  7159                           
  7160                           ;incstack = 0
  7161                           ;EEWriteChar@location stored from wreg
  7162  0015F4  6E06               	movwf	EEWriteChar@location,c
  7163                           
  7164                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7165  0015F6  50F2               	movf	intcon,w,c	;volatile
  7166  0015F8  0B3F               	andlw	63
  7167  0015FA  6EF2               	movwf	intcon,c	;volatile
  7168                           
  7169                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7170  0015FC  C006  F001         	movff	EEWriteChar@location,Write_b_eep@badd
  7171  001600  6A02               	clrf	Write_b_eep@badd+1,c
  7172  001602  C005  F003         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7173  001606  ECB9  F009         	call	_Write_b_eep	;wreg free
  7174                           
  7175                           ;EEPROM.c: 127: Busy_eep();
  7176  00160A  EC8C  F00B         	call	i2_Busy_eep	;wreg free
  7177                           
  7178                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7179  00160E  50F2               	movf	intcon,w,c	;volatile
  7180  001610  09C0               	iorlw	192
  7181  001612  6EF2               	movwf	intcon,c	;volatile
  7182  001614  0012               	return		;funcret
  7183  001616                     __end_of_EEWriteChar:
  7184                           	opt stack 0
  7185                           pclatu	equ	0xFFB
  7186                           pclath	equ	0xFFA
  7187                           tblptru	equ	0xFF8
  7188                           tblptrh	equ	0xFF7
  7189                           tblptrl	equ	0xFF6
  7190                           tablat	equ	0xFF5
  7191                           prodh	equ	0xFF4
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           postinc0	equ	0xFEE
  7196                           fsr0h	equ	0xFEA
  7197                           fsr0l	equ	0xFE9
  7198                           wreg	equ	0xFE8
  7199                           postdec1	equ	0xFE5
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function i2_Busy_eep *****************
  7208 ;; Defined at:
  7209 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;		None
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;		None
  7214 ;; Return value:  Size  Location     Type
  7215 ;;		None               void
  7216 ;; Registers used:
  7217 ;;		None
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;Total ram usage:        0 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_EEWriteDouble
  7233 ;;		_EEWriteChar
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text50
  7238  001718                     __ptext50:
  7239                           	opt stack 0
  7240  001718                     i2_Busy_eep:
  7241                           	opt stack 22
  7242                           
  7243                           ;incstack = 0
  7244  001718  D000               	goto	i2l535
  7245  00171A                     i2l535:
  7246  00171A  B2A6               	btfsc	4006,1,c	;volatile
  7247  00171C  D7FE               	goto	i2l535
  7248  00171E  0012               	return		;funcret
  7249  001720                     __end_ofi2_Busy_eep:
  7250                           	opt stack 0
  7251                           pclatu	equ	0xFFB
  7252                           pclath	equ	0xFFA
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           intcon	equ	0xFF2
  7260                           intcon2	equ	0xFF1
  7261                           postinc0	equ	0xFEE
  7262                           fsr0h	equ	0xFEA
  7263                           fsr0l	equ	0xFE9
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1h	equ	0xFE2
  7267                           fsr1l	equ	0xFE1
  7268                           indf2	equ	0xFDF
  7269                           fsr2h	equ	0xFDA
  7270                           fsr2l	equ	0xFD9
  7271                           status	equ	0xFD8
  7272                           
  7273 ;; *************** function _Write_b_eep *****************
  7274 ;; Defined at:
  7275 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  badd            2    0[COMRAM] unsigned int 
  7278 ;;  bdat            1    2[COMRAM] unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  GIE_BIT_VAL     1    3[COMRAM] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, status,0
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:        4 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; This function calls:
  7297 ;;		Nothing
  7298 ;; This function is called by:
  7299 ;;		_EEWriteDouble
  7300 ;;		_EEWriteChar
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text51
  7305  001372                     __ptext51:
  7306                           	opt stack 0
  7307  001372                     _Write_b_eep:
  7308                           	opt stack 22
  7309                           
  7310                           ;incstack = 0
  7311  001372  0E00               	movlw	0
  7312  001374  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7313  001376  5002               	movf	Write_b_eep@badd+1,w,c
  7314  001378  0B03               	andlw	3
  7315  00137A  6EAA               	movwf	4010,c	;volatile
  7316  00137C  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7317  001380  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7318  001384  9EA6               	bcf	4006,7,c	;volatile
  7319  001386  9CA6               	bcf	4006,6,c	;volatile
  7320  001388  84A6               	bsf	4006,2,c	;volatile
  7321  00138A  0E00               	movlw	0
  7322  00138C  BEF2               	btfsc	intcon,7,c	;volatile
  7323  00138E  0E01               	movlw	1
  7324  001390  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7325  001392  9EF2               	bcf	intcon,7,c	;volatile
  7326  001394  0E55               	movlw	85
  7327  001396  6EA7               	movwf	4007,c	;volatile
  7328  001398  0EAA               	movlw	170
  7329  00139A  6EA7               	movwf	4007,c	;volatile
  7330  00139C  82A6               	bsf	4006,1,c	;volatile
  7331  00139E  D000               	goto	i2l566
  7332  0013A0                     i2l566:
  7333  0013A0  B2A6               	btfsc	4006,1,c	;volatile
  7334  0013A2  D7FE               	goto	i2l566
  7335  0013A4  B004               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7336  0013A6  D002               	bra	i2u145_45
  7337  0013A8  9EF2               	bcf	intcon,7,c	;volatile
  7338  0013AA  D001               	bra	i2u145_46
  7339  0013AC                     i2u145_45:
  7340  0013AC  8EF2               	bsf	intcon,7,c	;volatile
  7341  0013AE                     i2u145_46:
  7342  0013AE  94A6               	bcf	4006,2,c	;volatile
  7343  0013B0  0012               	return		;funcret
  7344  0013B2                     __end_of_Write_b_eep:
  7345                           	opt stack 0
  7346  0000                     pclatu	equ	0xFFB
  7347                           pclath	equ	0xFFA
  7348                           tblptru	equ	0xFF8
  7349                           tblptrh	equ	0xFF7
  7350                           tblptrl	equ	0xFF6
  7351                           tablat	equ	0xFF5
  7352                           prodh	equ	0xFF4
  7353                           prodl	equ	0xFF3
  7354                           intcon	equ	0xFF2
  7355                           intcon2	equ	0xFF1
  7356                           postinc0	equ	0xFEE
  7357                           fsr0h	equ	0xFEA
  7358                           fsr0l	equ	0xFE9
  7359                           wreg	equ	0xFE8
  7360                           postdec1	equ	0xFE5
  7361                           fsr1h	equ	0xFE2
  7362                           fsr1l	equ	0xFE1
  7363                           indf2	equ	0xFDF
  7364                           fsr2h	equ	0xFDA
  7365                           fsr2l	equ	0xFD9
  7366                           status	equ	0xFD8
  7367                           pclatu	equ	0xFFB
  7368                           pclath	equ	0xFFA
  7369                           tblptru	equ	0xFF8
  7370                           tblptrh	equ	0xFF7
  7371                           tblptrl	equ	0xFF6
  7372                           tablat	equ	0xFF5
  7373                           prodh	equ	0xFF4
  7374                           prodl	equ	0xFF3
  7375                           intcon	equ	0xFF2
  7376                           intcon2	equ	0xFF1
  7377                           postinc0	equ	0xFEE
  7378                           fsr0h	equ	0xFEA
  7379                           fsr0l	equ	0xFE9
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389                           	psect	rparam
  7390  0000                     pclatu	equ	0xFFB
  7391                           pclath	equ	0xFFA
  7392                           tblptru	equ	0xFF8
  7393                           tblptrh	equ	0xFF7
  7394                           tblptrl	equ	0xFF6
  7395                           tablat	equ	0xFF5
  7396                           prodh	equ	0xFF4
  7397                           prodl	equ	0xFF3
  7398                           intcon	equ	0xFF2
  7399                           intcon2	equ	0xFF1
  7400                           postinc0	equ	0xFEE
  7401                           fsr0h	equ	0xFEA
  7402                           fsr0l	equ	0xFE9
  7403                           wreg	equ	0xFE8
  7404                           postdec1	equ	0xFE5
  7405                           fsr1h	equ	0xFE2
  7406                           fsr1l	equ	0xFE1
  7407                           indf2	equ	0xFDF
  7408                           fsr2h	equ	0xFDA
  7409                           fsr2l	equ	0xFD9
  7410                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     53      70
    BANK0           160     54      88
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _SPIDisassembleDouble->_GenerateChecksum
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_DetectMovement

Critical Paths under _ISR in COMRAM

    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   29317
                                             51 COMRAM     2     2      0
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    1145
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     278
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     278
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      93
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     774
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     774
                                             36 COMRAM     2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     493
                                             31 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3     116
                                             25 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     281
                                             27 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     216
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _calculatePID                                        15     9      6   18913
                                             39 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     448
                                             24 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5245
                                             24 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4881
                                             12 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     219
                                             25 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     660
                                             25 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3152
                                             33 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3     116
                                             25 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     606
                                             27 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRTDpos                                          12    10      2     235
                                             26 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTD2Angle                                            3     0      3    6593
                                             12 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2572
                                             33 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3836
                                             48 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                             25 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ImplementPIDMotion                                   4     2      2     627
                                             29 COMRAM     4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     643
                                             32 COMRAM     6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     247
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     198
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0    1913
                                              9 COMRAM    16    16      0
                            _HLVDInt
                            _INT0Int
                             _SPIInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (7) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (8) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _HLVDInt                                              0     0      0    1913
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (8) _EEWriteDouble                                        5     2      3     819
                                              4 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (9) _EEDisassembleDouble                                  3     0      3     104
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) _EEWriteChar                                          2     1      1    1094
                                              4 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (9) i2_Busy_eep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Write_b_eep                                          4     1      3     346
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
   _ImplementPIDMotion
     _abs
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1

 _ISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      58       5       55.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     35      46       1       73.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E      32        0.0%
DATA                 0      0      9E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Oct 30 03:35:42 2015

      __size_of_MotorDriverInit 0024                              l31 14D2                              l40 15F2  
                            l43 1034                              l37 15DC                              l49 109A  
                            _Kd 009C                              _Ki 009F                              _Kp 00A2  
           ?_EEReassembleDouble 001A                    ___ftadd@exp1 0077                    ___ftadd@exp2 0076  
     ImplementJSMotion@CCPinput 0025                    ___ftadd@sign 0075                             l109 0B80  
                           l151 0402                             l253 1678                             l190 1110  
                           l262 16B8                             l270 1492                             l191 1152  
                           l273 1370                             l361 1634                             l345 132C  
                           l259 16AE                             l355 11FE                             l339 102E  
                           l507 151C                             l189 1106                             l199 13EE  
                           l551 1668                             l535 1712                             l490 017E  
                           l484 0122                             l645 1510                             l646 1518  
                           l591 1188                             l592 11A2                             l488 0150  
                           l841 16FA                             l593 118A                             l585 1168  
                           l834 16A6                             l594 118E                             l931 0D28  
                           l827 16CA                             l587 116C                             l588 116E  
                           l942 0D00                             l839 16F2                             l971 0600  
                           l972 0814                             l975 063A                             l977 0664  
                           l986 0748                             l995 0772                             _PR2 000FCB  
                           _ISR 0008                             _abs 14F2            __size_of_Write_b_eep 0040  
                           prod 000FF3                             wreg 000FE8                            ?_ISR 0001  
               __end_of_INT0Int 15D2                    ___ftdiv@cntr 002B                 __end_of_HLVDInt 0E9A  
                    _Delay1TCYx 16F0                    ___ftdiv@sign 0030                    __CFG_WDT$OFF 000000  
                          l1003 0C62                            l1012 0F2E                            l1006 0C2E  
                          l1018 0964                            l1035 12A2                            ?_abs 001A  
                          l1028 15A0                            l1039 0A96                            l3200 0C90  
                          l1168 1564                            l3210 0CF4                            l3202 0CB0  
                          l3300 06CC                            l3222 0D1A                            l3206 0CC8  
                          l3302 06DC                            l3230 1698                            l3216 0D08  
                          l3208 0CE8                            l3400 148E                            l3320 079E  
                          l3312 0728                            l3304 06EC                            l3226 16BC  
                          l3330 07EE                            l3314 0738                            l3306 06F8  
                          l3250 1192                            l3172 11B6                            l3502 0922  
                          l3422 0BA0                            l3246 1172                            l3424 0BBA  
                          l3272 060E                            l3184 11E6                            l3176 11BE  
                          l3344 14E0                            l3194 0C74                            l3506 093E  
                          l3522 0ECC                            l3514 1278                            l3428 0BC8  
                          l3532 0F2A                            l3284 065A                            l3700 0496  
                          l3622 1090                            l3614 1082                            l3630 0F42  
                          l3198 0C84                            l3470 085A                            l3390 146A  
                          l3526 0EFE                            l3294 069C                            l3278 0648  
                          l3448 0C08                            l3800 002C                            l3642 0F74  
                          l3634 0F5A                            l3474 086E                            l3394 1476  
                          l3458 0C3C                            l3570 0A30                            l3546 0990  
                          l3660 0ACC                            l3492 08DE                            l3468 083A  
                          l3564 0A14                            l3900 0220                            l3654 0AB0  
                          l3638 0F62                            l3718 110A                            l3582 0A84  
                          l3574 0A46                            l3830 00DC                            l3822 00A4  
                          l3814 006C                            l3672 0B0C                            l3496 08FA  
                          l3488 08BE                            l3576 0A58                            l3568 0A28  
                          l3658 0AC6                            l3498 0902                            l3578 0A66  
                          l3914 0280                            l3826 00C0                            l3834 00F8  
                          l3818 0088                            l3850 012A                            l3676 0B34  
                          l3932 02DE                            l3860 0158                            l3844 0104  
                          l3694 03B2                            l3688 032A                            l3864 0164  
                          l3848 011C                            l3882 01C0                            l3890 01F8  
                          l3892 01FE                            l3886 01DC                            l3878 01A4  
                          l3894 0202                            u3021 0828                            u3041 084C  
                          u3131 097C                            u3300 0F70                            u3150 09B6  
                          u3155 09AC                            u2711 05AE                            u2721 05CC  
                          u2971 0B92                            u3747 169A                            u3757 16BE  
                          u2991 0BB0                 __end_of_PIDInit 12EA  ImplementJSMotion@JoystickValue 0021  
          ??_EEReassembleDouble 001D                    EEReadChar@ch 001D                 __end_of_TMR0Int 16DE  
                          abs@a 001A                            _main 001C                    ___ftpack@arg 001A  
                   _DeadbandLow 0045                    ___ftpack@exp 001D                 __end_of_RTDInit 14C4  
               __end_of_SPIInit 1650                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            pclat 000FFA  
                ??_EEReadDouble 0023                            prodh 000FF4                            prodl 000FF3  
                          start 0018             __size_of_EEPROMInit 0014                    ?_EEWriteChar 0005  
                  ___ftmul@cntr 006A                    ___param_bank 000010                    ___ftmul@sign 006B  
 __size_of_InitializeInterrupts 000A                           ??_ISR 000A                     _Delay10TCYx 16BA  
              __end_of_EEBootUp 1030                    ___fttol@exp1 0086                           ??_abs 001C  
                  ___fttol@lval 0082                     _Delay1KTCYx 1696                     ReadRTDpos@x 0024  
             RTD2Angle@RTDAngle 006C                           ?_main 0001                           _EEADR 000FA9  
               __end_of___ftadd 0816                 __end_of___ftdiv 0C64                 __end_of___ftneg 15AE  
               __end_of___ftmul 0966                           _T0CON 000FD5                 __end_of___ftsub 12A4  
               __end_of___fttol 0A98                           _T2CON 000FCA                           _T3CON 000FB1  
                         i2l522 15C6                           i2l518 0DA8                           i2l535 171A  
                         i2l566 13A0              __size_of_RTD2Angle 003E                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001F                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 001A  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 0004  
                  _DeadbandHigh 0043                           _error 00A5                   ___ftpack@sign 001E  
                    _DoubleSPIS 0036                           main@x 0035                   ??_ReceiveSPI1 001A  
                         tablat 000FF5                     ?i2_Busy_eep 0001                           status 000FD8  
                 EEReadDouble@x 0024      __size_of_ImplementJSMotion 00EA           EEWriteDouble@location 0008  
           GenerateChecksum@sum 001A                      _ReadRTDpos 10F8                      _KillMotors 1706  
               __initialization 109C                    __end_of_main 02E6                  _DetectJoystick 15D2  
                _DetectMovement 1030                      _Read_b_eep 1650                __end_of_Busy_eep 1718  
         EEReassembleDouble@dub 001D                  __CFG_OSC$HSPLL 000000                __end_of_SendSPI1 1682  
              __end_of_OpenSPI1 11AA                          ??_main 0034                   ___fttol@sign1 0081  
                 __activetblptr 000003               ??_MotorDriverInit 001A         DetectMovement@ADCresult 001F  
                     ??_INT0Int 0001                       ??_HLVDInt 000A                       ??_PIDInit 001A  
                     ??_TMR0Int 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                       ??_RTDInit 001B                          _EEDATA 000FA8  
                   ?_Delay1TCYx 0001                       ??_SPIInit 001D                          _CCPR3L 000FB8  
                        _EECON2 000FA7                __end_of___ftpack 0D2A           __size_of_calculatePID 02B2  
                        i2l2000 15BC                          i2l3112 0D86                          i2l3104 0D64  
                        i2l3122 0DA0                          i2l3116 0D90                          i2l2530 1224  
                        i2l2540 124C                          i2l2526 121C                          _INTCON 000FF2  
              __end_of___lwtoft 1566                          _SPIInt 16DE               __end_of_RTD2Angle 13F0  
           __end_of_ReceiveSPI1 16BA          __end_of_DetectJoystick 15F4          __end_of_DetectMovement 109C  
              OpenSPI1@bus_mode 001A                   _EEWriteDouble 1200                          ___ftge 0E9A  
                     ??___ftadd 0072                       ??___ftdiv 0028                       ??___ftneg 001D  
                     ??___ftmul 0031                       ??___ftsub 0034                       ??___fttol 007C  
                        _intErr 00A8                          clear_0 10A2                          clear_1 10AE  
           __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0067                   main@temporary 0034  
                  ??_EEPROMInit 0027     __size_of_ImplementPIDMotion 0086                    __pdataCOMRAM 0043  
                  _calculatePID 02E6            __end_of_EEReadDouble 1200               _calculatePID$3286 0090  
             _calculatePID$3287 0093                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8               ?_GenerateChecksum 0001                       ?_EEBootUp 0001  
                    __accesstop 0060         __end_of__initialization 10F2              ??_GenerateChecksum 001A  
                    ___ftadd@f1 006C                      ___ftadd@f2 006F                      ___ftge@ff1 001A  
                    ___ftge@ff2 001D                   ___rparam_used 000001                      ___ftdiv@f1 0022  
                    ___ftdiv@f2 0025                      ___ftdiv@f3 002C              EEReadChar@location 001C  
                    ___ftneg@f1 001A                     ?_ReadRTDpos 001B                     ?_KillMotors 0001  
                  ??_EEReadChar 001C                  ?_EEWriteDouble 0005                      ___ftmul@f1 0060  
                    ___ftmul@f2 0063                 ?_DetectJoystick 0001                 ?_DetectMovement 001A  
            __end_of_EEPROMInit 1696                      ___ftsub@f1 0078                      ___ftsub@f2 007B  
                    ___fttol@f1 0078                  __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 1462  
                  __pidataBANK0 1724            __size_of_EEWriteChar 0022                     ?_Read_b_eep 001A  
           __size_of_Delay1TCYx 000C               GenerateChecksum@y 001B                      ___lwtoft@c 0022  
  __size_of_SPIReassembleDouble 0044              __end_of_EEReadChar 1636                      __pbssBANK0 0096  
                   _ReceiveSPI1 16A8                      ??_EEBootUp 0025                       ?_Busy_eep 0001  
                 ?_JoystickInit 0001                         ?_SPIInt 0001                       ?_SendSPI1 0001  
                     ?_OpenSPI1 001A                         ?___ftge 001A                    ?_Delay10TCYx 0001  
                EEWriteDouble@x 0009                         _CCP3CON 000FB7                    ?_Delay1KTCYx 0001  
                     ?___ftpack 001A                   ??_Write_b_eep 0004                       ?___lwtoft 0022  
                       _HLVDCON 000FD2                         _INT0Int 15AE                         _HLVDInt 0DE2  
  __end_of_InitializeInterrupts 1706                         _PIDInit 12A4                         _DDouble 003A  
           __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A                   _PIDEnableFlag 0042  
                       _SSP1BUF 000FC9                         _TMR0Int 16CC      ImplementPIDMotion@PIDValue 001E  
                       _RTDInit 1494                         _SPIInit 1636                         _SPIflag 00B2  
              EEWriteDouble@dub 0005             __size_of_Read_b_eep 001A                  ??_JoystickInit 001A  
                  ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044                      ??_Busy_eep 001A  
                       _Command 00B0                 __size_of_SPIInt 0012                      ??_SendSPI1 001A  
               ??_EEWriteDouble 0008                      ??_OpenSPI1 001C             EEWriteChar@location 0006  
                       __Hparam 0000                         __Lparam 0000                 _MotorDriverInit 1566  
               __size_of___ftge 0096                         ___ftadd 0598                         ___ftdiv 0B82  
                       ___ftneg 158A                         ___ftmul 0816                         ___ftsub 1254  
                       ___fttol 0966                      _dummy_byte 00B4           __size_of_EEReadDouble 0056  
                  SendSPI1@data 001B                         __pcinit 109C                      ??___ftpack 001F  
               Delay10TCYx@unit 001A                         __ramtop 1000                      _initialize 151A  
                  SendSPI1@temp 001A                         __ptext0 001C                         __ptext1 151A  
                       __ptext2 1636                         __ptext3 1154                         __ptext4 1494  
                       __ptext5 16F0                         __ptext6 1696                         __ptext7 12A4  
                       __ptext8 1566                         __ptext9 14C4                      ??___lwtoft 0025  
                     _T0CONbits 000FD5                    __size_of_ISR 0DDA                    __size_of_abs 0028  
            __end_ofi2_Busy_eep 1720                         _prevErr 00AB   __size_of_SPIDisassembleDouble 003C  
           __end_of_Write_b_eep 13B2                    ??_Delay1TCYx 001A                  __pintcode_body 0D2A  
          end_of_initialization 10F2                         int_func 0D2A               OpenSPI1@smp_phase 001B  
                  _EEReadDouble 11AA           ReadRTDpos@LowPosition 0021                         postdec1 000FE5  
                    _motorInput 00AE                       _RTD2Angle 13B2                         postinc0 000FEE  
             OpenSPI1@sync_mode 001C              __end_of_Delay1TCYx 16FC                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _PORTCbits 000F82                       _PORTEbits 000F84  
                     _PORTJbits 000F88                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                       _TRISEbits 000F96                       _TRISFbits 000F97  
                     _TRISGbits 000F98                       _TRISJbits 000F9A         __end_of_MotorDriverInit 158A  
              ??_DetectJoystick 001A                ??_DetectMovement 001C                     ___ftdiv@exp 002F  
             __size_of_EEBootUp 007A             _SPIReassembleDouble 132E                     _CCP3CONbits 000FB7  
                __end_of_SPIInt 16F0                    ??_ReadRTDpos 001D                    ??_KillMotors 0001  
                   ___ftmul@exp 0066            _InitializeInterrupts 16FC                      ?_RTD2Angle 006C  
     __size_of_GenerateChecksum 0032                    ??_Read_b_eep 001C                  __end_of___ftge 0F30  
          __size_of_Delay10TCYx 0012                   __pidataCOMRAM 1720      __end_of_ImplementPIDMotion 0FB6  
                   ?_initialize 0001                     _Write_b_eep 1372            __end_of_JoystickInit 14F2  
          __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 001A                       _DoublePtr 0040  
           start_initialization 109C                 _CurrentVelocity 0099                    _CurrentAngle 0096  
                   __end_of_ISR 0DE2                     __end_of_abs 151A              __end_of_ReadRTDpos 1154  
            __end_of_KillMotors 1710                    ?_ReceiveSPI1 0001              __end_of_Read_b_eep 166A  
          EEReadDouble@location 0023                        ??_SPIInt 0001               __size_of_Busy_eep 0008  
          calculatePID@setpoint 008A                   ??_EEWriteChar 0006          ReadRTDpos@HighPosition 0020  
             __size_of_SendSPI1 0018               __size_of_OpenSPI1 0056           ?_InitializeInterrupts 0001  
                      ??___ftge 0020                     __pdataBANK0 00B5           ??_SPIReassembleDouble 001D  
  __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6                        ?_INT0Int 0001  
                      ?_HLVDInt 0001                     __pbssCOMRAM 0036               __size_of___lwtoft 0026  
                 __pcstackBANK0 0060                        ?_PIDInit 0001                        ?_TMR0Int 0001  
            calculatePID@derErr 008D                        ?_RTDInit 0001                        ?_SPIInit 0001  
               Delay1KTCYx@unit 001A                ?_MotorDriverInit 0001             __size_of_initialize 0026  
        SPIReassembleDouble@dub 001D                   EEWriteChar@ch 0005                       __pintcode 0008  
                   ??_RTD2Angle 0034                        ?___ftadd 006C                        ?___ftdiv 0022  
                      ?___ftneg 001A                        ?___ftmul 0060                        ?___ftsub 0078  
                      ?___fttol 0078             __end_of_EEWriteChar 1616      __end_of_EEReassembleDouble 132E  
                      _EEBootUp 0FB6                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0          ??_InitializeInterrupts 001A           __end_of_EEWriteDouble 1254  
  __end_of_SPIDisassembleDouble 142C                        i2u145_45 13AC                        i2u145_46 13AE  
                      _PIR1bits 000F9E                        _PIR2bits 000FA1           __size_of_JoystickInit 002E  
                      _SSP1CON1 000FC6                        _TMR0Flag 00B3                _GenerateChecksum 1462  
                      _SSP1STAT 000FC7                      _ADCON0bits 000FC2                 Write_b_eep@badd 0001  
               Write_b_eep@bdat 0003                   ?_calculatePID 0087                __size_of_INT0Int 0024  
              __size_of_HLVDInt 00B8                __size_of_PIDInit 0046                     _INTCON2bits 000FF1  
              __size_of_TMR0Int 0012                       copy_data0 10E6                __size_of_RTDInit 0030  
              __size_of_SPIInit 001A                        _Busy_eep 1710            __size_of_ReceiveSPI1 0012  
                  _JoystickInit 14C4                        _SendSPI1 166A                      _EECON1bits 000FA6  
                      _SetAngle 003D                        _OpenSPI1 1154          ReadRTDpos@FullPosition 0022  
                      __Hrparam 0000                     _EEWriteChar 15F4                        __Lrparam 0000  
                  _JSEnableFlag 00B1                __size_of___ftadd 027E                __size_of___ftdiv 00E2  
              __size_of___ftneg 0024                __size_of___ftmul 0150                __size_of___ftsub 0050  
              __size_of___fttol 0132                    ??_initialize 0027                        ___ftpack 0C64  
                  ?_Write_b_eep 0001               calculatePID@angle 0087                  ??_calculatePID 0034  
                      ___lwtoft 1540                      _EEPROMInit 1682                        __ptext10 16FC  
                      __ptext11 1682                        __ptext20 1254                        __ptext12 0FB6  
                      __ptext21 0598                        __ptext13 11AA                        __ptext30 10F8  
                      __ptext22 158A                        __ptext14 12EA                        __ptext31 16BA  
                      __ptext23 0E9A                        __ptext15 1710                        __ptext40 15D2  
                      __ptext32 13B2                        __ptext24 0B82                        __ptext16 1616  
                      __ptext33 1540                        __ptext25 166A                        __ptext17 1650  
                      __ptext50 1718                        __ptext42 16CC                        __ptext34 0816  
                      __ptext26 132E                        __ptext18 02E6                        __ptext51 1372  
                      __ptext43 16DE                        __ptext35 0C64                        __ptext27 13F0  
                      __ptext19 0966                        __ptext44 15AE                        __ptext36 0F30  
                      __ptext28 1462                        __ptext45 1706                        __ptext37 0A98  
                      __ptext29 16A8                        __ptext46 0DE2                        __ptext38 14F2  
                      __ptext47 1200                        __ptext39 1030                        __ptext48 142C  
                      __ptext49 15F4                    _SSP1CON1bits 000FC6              _ImplementPIDMotion 0F30  
                 __size_of_main 02CA             _EEDisassembleDouble 142C                  Delay1TCYx@unit 001A  
           ?_ImplementPIDMotion 001E              __end_of_initialize 1540                        _loopTime 00B5  
                    _EEReadChar 1616                   ??_Delay10TCYx 001A                   ??_Delay1KTCYx 001A  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0001            ??_ImplementPIDMotion 0020  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 13F0                        intlevel2 0000  
                    _OSCCONbits 000FD3    DetectMovement@JoystickResult 001D               _ImplementJSMotion 0A98  
   __end_of_SPIReassembleDouble 1372              ?_ImplementJSMotion 0021         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 006C           ??_EEDisassembleDouble 0004             __end_of_Delay10TCYx 16CC  
           ??_ImplementJSMotion 0023          EEDisassembleDouble@dub 0001                     ?_EEPROMInit 0001  
           __end_of_Delay1KTCYx 16A8           ?_SPIDisassembleDouble 001C        __end_of_GenerateChecksum 1494  
                    i2_Busy_eep 1718         SPIDisassembleDouble@dub 001C       __end_of_ImplementJSMotion 0B82  
          __end_of_calculatePID 0598                   ?_EEReadDouble 0020                     ?_EEReadChar 0001  
            _EEReassembleDouble 12EA  
