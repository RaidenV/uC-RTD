

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Nov  8 06:38:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  002E36                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _DeadbandHigh
    88  002E36  00C8               	dw	200
    89                           
    90                           ;initializer for _DeadbandLow
    91  002E38  FF38               	dw	65336
    92                           
    93                           ;initializer for _timer1High
    94  002E3A  C0                 	db	192
    95                           
    96                           	psect	idataBANK0
    97  002E3B                     __pidataBANK0:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _loopTime
   101                           ;PID.c: 5: unsigned char PIDEnableFlag;
   102                           ;PID.c: 6: unsigned char TMR0Flag = 0;
   103                           ;PID.c: 7: double Ki;
   104                           ;PID.c: 8: double Kp;
   105                           ;PID.c: 9: double Kd;
   106                           ;PID.c: 10: double SetAngle;
   107                           ;PID.c: 11: double CurrentAngle;
   108                           ;PID.c: 12: double error;
   109                           ;PID.c: 13: double prevErr;
   110                           ;PID.c: 14: double intErr;
   111                           ;PID.c: 15: int motorInput;
   112  002E3B  C3                 	db	195
   113  002E3C  F5                 	db	245
   114  002E3D  3C                 	db	60
   115                           
   116                           	psect	smallconst
   117  001000                     __psmallconst:
   118                           	opt stack 0
   119  001000  00                 	db	0
   120  001001                     _DataLodeSize:
   121                           	opt stack 0
   122  001001  0258               	dw	600
   123  001003                     __end_of_DataLodeSize:
   124                           	opt stack 0
   125  001003                     _TransmitLodeSize:
   126                           	opt stack 0
   127  001003  0708               	dw	1800
   128  001005                     __end_of_TransmitLodeSize:
   129                           	opt stack 0
   130  0000                     _ADCON0	set	4034
   131  0000                     _ADCON0bits	set	4034
   132  0000                     _ADCON1	set	4033
   133  0000                     _ADCON2	set	4032
   134  0000                     _ADRESH	set	4036
   135  0000                     _ADRESL	set	4035
   136  0000                     _CCP3CON	set	4023
   137  0000                     _CCP3CONbits	set	4023
   138  0000                     _CCPR3L	set	4024
   139  0000                     _EEADR	set	4009
   140  0000                     _EEADRH	set	4010
   141  0000                     _EECON1bits	set	4006
   142  0000                     _EECON2	set	4007
   143  0000                     _EEDATA	set	4008
   144  0000                     _HLVDCON	set	4050
   145  0000                     _INTCON	set	4082
   146  0000                     _INTCONbits	set	4082
   147  0000                     _IPR2bits	set	4002
   148  0000                     _OSCCONbits	set	4051
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIE2bits	set	4000
   151  0000                     _PIR1bits	set	3998
   152  0000                     _PIR2bits	set	4001
   153  0000                     _PORTA	set	3968
   154  0000                     _PORTAbits	set	3968
   155  0000                     _PORTB	set	3969
   156  0000                     _PORTBbits	set	3969
   157  0000                     _PORTC	set	3970
   158  0000                     _PORTCbits	set	3970
   159  0000                     _PORTD	set	3971
   160  0000                     _PORTE	set	3972
   161  0000                     _PORTEbits	set	3972
   162  0000                     _PORTF	set	3973
   163  0000                     _PORTG	set	3974
   164  0000                     _PORTH	set	3975
   165  0000                     _PORTJ	set	3976
   166  0000                     _PORTJbits	set	3976
   167  0000                     _PR2	set	4043
   168  0000                     _SSP1BUF	set	4041
   169  0000                     _SSP1CON1	set	4038
   170  0000                     _SSP1CON1bits	set	4038
   171  0000                     _SSP1STAT	set	4039
   172  0000                     _SSP1STATbits	set	4039
   173  0000                     _T0CON	set	4053
   174  0000                     _T0CONbits	set	4053
   175  0000                     _T1CONbits	set	4045
   176  0000                     _T2CON	set	4042
   177  0000                     _T3CON	set	4017
   178  0000                     _T3CONbits	set	4017
   179  0000                     _TMR0H	set	4055
   180  0000                     _TMR0L	set	4054
   181  0000                     _TMR1H	set	4047
   182  0000                     _TMR1L	set	4046
   183  0000                     _TMR3H	set	4019
   184  0000                     _TMR3L	set	4018
   185  0000                     _TRISAbits	set	3986
   186  0000                     _TRISBbits	set	3987
   187  0000                     _TRISCbits	set	3988
   188  0000                     _TRISD	set	3989
   189  0000                     _TRISEbits	set	3990
   190  0000                     _TRISFbits	set	3991
   191  0000                     _TRISGbits	set	3992
   192  0000                     _TRISH	set	3993
   193  0000                     _TRISJbits	set	3994
   194                           
   195                           ; #config settings
   196  001005  00                 	db	0	; dummy byte at the end
   197  0000                     
   198                           	psect	cinit
   199  0024DA                     __pcinit:
   200                           	opt stack 0
   201  0024DA                     start_initialization:
   202                           	opt stack 0
   203  0024DA                     __initialization:
   204                           	opt stack 0
   205                           
   206                           ; Clear objects allocated to BIGRAM (3600 bytes)
   207  0024DA  EE00  F0CD         	lfsr	0,__pbssBIGRAM
   208  0024DE  EE1E F010          	lfsr	1,3600
   209  0024E2                     clear_0:
   210  0024E2  6AEE               	clrf	postinc0,c
   211  0024E4  50E5               	movf	postdec1,w,c
   212  0024E6  50E1               	movf	fsr1l,w,c
   213  0024E8  E1FC               	bnz	clear_0
   214  0024EA  50E2               	movf	fsr1h,w,c
   215  0024EC  E1FA               	bnz	clear_0
   216                           
   217                           ; Clear objects allocated to BANK0 (32 bytes)
   218  0024EE  EE00  F0AA         	lfsr	0,__pbssBANK0
   219  0024F2  0E20               	movlw	32
   220  0024F4                     clear_1:
   221  0024F4  6AEE               	clrf	postinc0,c
   222  0024F6  06E8               	decf	wreg,f,c
   223  0024F8  E1FD               	bnz	clear_1
   224                           
   225                           ; Clear objects allocated to COMRAM (14 bytes)
   226  0024FA  EE00  F035         	lfsr	0,__pbssCOMRAM
   227  0024FE  0E0E               	movlw	14
   228  002500                     clear_2:
   229  002500  6AEE               	clrf	postinc0,c
   230  002502  06E8               	decf	wreg,f,c
   231  002504  E1FD               	bnz	clear_2
   232                           
   233                           ; Initialize objects allocated to BANK0 (3 bytes)
   234                           ; load TBLPTR registers with __pidataBANK0
   235  002506  0E3B               	movlw	low __pidataBANK0
   236  002508  6EF6               	movwf	tblptrl,c
   237  00250A  0E2E               	movlw	high __pidataBANK0
   238  00250C  6EF7               	movwf	tblptrh,c
   239  00250E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   240  002510  6EF8               	movwf	tblptru,c
   241  002512  0009               	tblrd		*+	;fetch initializer
   242  002514  CFF5 F0CA          	movff	tablat,__pdataBANK0
   243  002518  0009               	tblrd		*+	;fetch initializer
   244  00251A  CFF5 F0CB          	movff	tablat,__pdataBANK0+1
   245  00251E  0009               	tblrd		*+	;fetch initializer
   246  002520  CFF5 F0CC          	movff	tablat,__pdataBANK0+2
   247                           
   248                           ; Initialize objects allocated to COMRAM (5 bytes)
   249                           ; load TBLPTR registers with __pidataCOMRAM
   250  002524  0E36               	movlw	low __pidataCOMRAM
   251  002526  6EF6               	movwf	tblptrl,c
   252  002528  0E2E               	movlw	high __pidataCOMRAM
   253  00252A  6EF7               	movwf	tblptrh,c
   254  00252C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   255  00252E  6EF8               	movwf	tblptru,c
   256  002530  EE00  F043         	lfsr	0,__pdataCOMRAM
   257  002534  EE10 F005          	lfsr	1,5
   258  002538                     copy_data0:
   259  002538  0009               	tblrd		*+
   260  00253A  CFF5 FFEE          	movff	tablat,postinc0
   261  00253E  50E5               	movf	postdec1,w,c
   262  002540  50E1               	movf	fsr1l,w,c
   263  002542  E1FA               	bnz	copy_data0
   264  002544                     end_of_initialization:
   265                           	opt stack 0
   266  002544                     __end_of__initialization:
   267                           	opt stack 0
   268  002544  0100               	movlb	0
   269  002546  EF03  F008         	goto	_main	;jump to C main() function
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           postdec1	equ	0xFE5
   277                           fsr1h	equ	0xFE2
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssCOMRAM
   281  000035                     __pbssCOMRAM:
   282                           	opt stack 0
   283  000035                     _DoubleSPIS:
   284                           	opt stack 0
   285  000035                     	ds	4
   286  000039                     _DDouble:
   287                           	opt stack 0
   288  000039                     	ds	3
   289  00003C                     _SetAngle:
   290                           	opt stack 0
   291  00003C                     	ds	3
   292  00003F                     _DoublePtr:
   293                           	opt stack 0
   294  00003F                     	ds	2
   295  000041                     _Command:
   296                           	opt stack 0
   297  000041                     	ds	1
   298  000042                     _timer1Low:
   299                           	opt stack 0
   300  000042                     	ds	1
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           postdec1	equ	0xFE5
   308                           fsr1h	equ	0xFE2
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	dataCOMRAM
   312  000043                     __pdataCOMRAM:
   313                           	opt stack 0
   314  000043                     _DeadbandHigh:
   315                           	opt stack 0
   316  000043                     	ds	2
   317  000045                     _DeadbandLow:
   318                           	opt stack 0
   319  000045                     	ds	2
   320  000047                     _timer1High:
   321                           	opt stack 0
   322  000047                     	ds	1
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1h	equ	0xFE2
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	bssBANK0
   334  0000AA                     __pbssBANK0:
   335                           	opt stack 0
   336  0000AA                     _CurrentAngle:
   337                           	opt stack 0
   338  0000AA                     	ds	3
   339  0000AD                     _CurrentVelocity:
   340                           	opt stack 0
   341  0000AD                     	ds	3
   342  0000B0                     _Kd:
   343                           	opt stack 0
   344  0000B0                     	ds	3
   345  0000B3                     _Ki:
   346                           	opt stack 0
   347  0000B3                     	ds	3
   348  0000B6                     _Kp:
   349                           	opt stack 0
   350  0000B6                     	ds	3
   351  0000B9                     _error:
   352                           	opt stack 0
   353  0000B9                     	ds	3
   354  0000BC                     _intErr:
   355                           	opt stack 0
   356  0000BC                     	ds	3
   357  0000BF                     _prevErr:
   358                           	opt stack 0
   359  0000BF                     	ds	3
   360  0000C2                     _motorInput:
   361                           	opt stack 0
   362  0000C2                     	ds	2
   363  0000C4                     _JSEnableFlag:
   364                           	opt stack 0
   365  0000C4                     	ds	1
   366  0000C5                     _PIDEnableFlag:
   367                           	opt stack 0
   368  0000C5                     	ds	1
   369  0000C6                     _RECFlag:
   370                           	opt stack 0
   371  0000C6                     	ds	1
   372  0000C7                     _SPIflag:
   373                           	opt stack 0
   374  0000C7                     	ds	1
   375  0000C8                     _TMR0Flag:
   376                           	opt stack 0
   377  0000C8                     	ds	1
   378  0000C9                     _dummy_byte:
   379                           	opt stack 0
   380  0000C9                     	ds	1
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1h	equ	0xFE2
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	dataBANK0
   392  0000CA                     __pdataBANK0:
   393                           	opt stack 0
   394  0000CA                     _loopTime:
   395                           	opt stack 0
   396  0000CA                     	ds	3
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bssBIGRAM
   408  0000CD                     __pbssBIGRAM:
   409                           	opt stack 0
   410  0000CD                     _DataLode:
   411                           	opt stack 0
   412  0000CD                     	ds	1800
   413  0007D5                     _TransmitLode:
   414                           	opt stack 0
   415  0007D5                     	ds	1800
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1h	equ	0xFE2
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	cstackBANK0
   427  000060                     __pcstackBANK0:
   428                           	opt stack 0
   429  000060                     ___ftdiv@cntr:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x0
   433  000060                     	ds	1
   434  000061                     ___ftdiv@f3:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0x1
   438  000061                     	ds	3
   439  000064                     ___ftdiv@exp:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x4
   443  000064                     	ds	1
   444  000065                     ___ftdiv@sign:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x5
   448  000065                     	ds	1
   449  000066                     ?___ftmul:
   450                           	opt stack 0
   451  000066                     ___ftmul@f1:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0x6
   455  000066                     	ds	3
   456  000069                     ___ftmul@f2:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0x9
   460  000069                     	ds	3
   461  00006C                     ??___ftmul:
   462                           
   463                           ; 0 bytes @ 0xC
   464  00006C                     	ds	3
   465  00006F                     ___ftmul@exp:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0xF
   469  00006F                     	ds	1
   470  000070                     ___ftmul@f3_as_product:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x10
   474  000070                     	ds	3
   475  000073                     ___ftmul@cntr:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x13
   479  000073                     	ds	1
   480  000074                     ___ftmul@sign:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x14
   484  000074                     	ds	1
   485  000075                     ?_RTD2Angle:
   486                           	opt stack 0
   487  000075                     ?___fttol:
   488                           	opt stack 0
   489  000075                     RTD2Angle@RTDAngle:
   490                           	opt stack 0
   491  000075                     ___fttol@f1:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x15
   495  000075                     	ds	4
   496  000079                     ??___fttol:
   497                           
   498                           ; 0 bytes @ 0x19
   499  000079                     	ds	5
   500  00007E                     ___fttol@sign1:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x1E
   504  00007E                     	ds	1
   505  00007F                     ___fttol@lval:
   506                           	opt stack 0
   507                           
   508                           ; 4 bytes @ 0x1F
   509  00007F                     	ds	4
   510  000083                     ___fttol@exp1:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x23
   514  000083                     	ds	1
   515  000084                     ?_abs:
   516                           	opt stack 0
   517  000084                     abs@a:
   518                           	opt stack 0
   519  000084                     calculatePID@angle:
   520                           	opt stack 0
   521                           
   522                           ; 3 bytes @ 0x24
   523  000084                     	ds	2
   524  000086                     ??_abs:
   525                           
   526                           ; 0 bytes @ 0x26
   527  000086                     	ds	1
   528  000087                     calculatePID@setpoint:
   529                           	opt stack 0
   530                           
   531                           ; 3 bytes @ 0x27
   532  000087                     	ds	1
   533  000088                     ImplementPIDMotion@PIDValue:
   534                           	opt stack 0
   535  000088                     ImplementJSMotion@JoystickValue:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x28
   539  000088                     	ds	2
   540  00008A                     ??_ImplementPIDMotion:
   541  00008A                     ??_ImplementJSMotion:
   542  00008A                     calculatePID@derErr:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x2A
   546  00008A                     	ds	2
   547  00008C                     ImplementJSMotion@CCPinput:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x2C
   551  00008C                     	ds	1
   552  00008D                     _calculatePID$3484:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x2D
   556  00008D                     	ds	3
   557  000090                     _calculatePID$3485:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x30
   561  000090                     	ds	3
   562  000093                     ZeroMotors@average:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x33
   566  000093                     	ds	3
   567  000096                     ZeroMotors@PrevAngle:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x36
   571  000096                     	ds	3
   572  000099                     main@trash:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x39
   576  000099                     	ds	1
   577  00009A                     main@saveKp:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x3A
   581  00009A                     	ds	3
   582  00009D                     main@saveKi:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x3D
   586  00009D                     	ds	3
   587  0000A0                     main@saveKd:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x40
   591  0000A0                     	ds	3
   592  0000A3                     main@saveSP:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x43
   596  0000A3                     	ds	3
   597  0000A6                     main@dtime:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x46
   601  0000A6                     	ds	1
   602  0000A7                     main@counter:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x47
   606  0000A7                     	ds	2
   607  0000A9                     main@x:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x49
   611  0000A9                     	ds	1
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           postdec1	equ	0xFE5
   619                           fsr1h	equ	0xFE2
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	cstackCOMRAM
   623  000001                     __pcstackCOMRAM:
   624                           	opt stack 0
   625  000001                     i2Write_b_eep@badd:
   626                           	opt stack 0
   627  000001                     i2EEDisassembleDouble@dub:
   628                           	opt stack 0
   629                           
   630                           ; 3 bytes @ 0x0
   631  000001                     	ds	2
   632  000003                     i2Write_b_eep@bdat:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x2
   636  000003                     	ds	1
   637  000004                     i2Write_b_eep@GIE_BIT_VAL:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x3
   641  000004                     	ds	1
   642  000005                     i2EEWriteChar@ch:
   643                           	opt stack 0
   644  000005                     i2EEWriteDouble@dub:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x4
   648  000005                     	ds	1
   649  000006                     i2EEWriteChar@location:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x5
   653  000006                     	ds	2
   654  000008                     i2EEWriteDouble@location:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x7
   658  000008                     	ds	1
   659  000009                     i2EEWriteDouble@x:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x8
   663  000009                     	ds	1
   664  00000A                     ??_ISR:
   665  00000A                     
   666                           ; 0 bytes @ 0x9
   667  00000A                     	ds	14
   668  000018                     ?_DetectMovement:
   669                           	opt stack 0
   670  000018                     ?___lwdiv:
   671                           	opt stack 0
   672  000018                     ?___ftpack:
   673                           	opt stack 0
   674  000018                     ?_SPIReassembleDouble:
   675                           	opt stack 0
   676  000018                     ?_EEReassembleDouble:
   677                           	opt stack 0
   678  000018                     ?___ftneg:
   679                           	opt stack 0
   680  000018                     GenerateChecksum@sum:
   681                           	opt stack 0
   682  000018                     OpenSPI1@bus_mode:
   683                           	opt stack 0
   684  000018                     Delay10TCYx@unit:
   685                           	opt stack 0
   686  000018                     Delay1KTCYx@unit:
   687                           	opt stack 0
   688  000018                     Delay1TCYx@unit:
   689                           	opt stack 0
   690  000018                     Read_b_eep@badd:
   691                           	opt stack 0
   692  000018                     Write_b_eep@badd:
   693                           	opt stack 0
   694  000018                     ___lwdiv@dividend:
   695                           	opt stack 0
   696  000018                     EEDisassembleDouble@dub:
   697                           	opt stack 0
   698  000018                     ___ftpack@arg:
   699                           	opt stack 0
   700  000018                     ___ftge@ff1:
   701                           	opt stack 0
   702  000018                     ___ftneg@f1:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x17
   706  000018                     	ds	1
   707  000019                     ?_ReadRTDpos:
   708                           	opt stack 0
   709  000019                     GenerateChecksum@y:
   710                           	opt stack 0
   711  000019                     OpenSPI1@smp_phase:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x18
   715  000019                     	ds	1
   716  00001A                     ??_DetectMovement:
   717  00001A                     EEReadChar@location:
   718                           	opt stack 0
   719  00001A                     Write_b_eep@bdat:
   720                           	opt stack 0
   721  00001A                     OpenSPI1@sync_mode:
   722                           	opt stack 0
   723  00001A                     ___lwdiv@divisor:
   724                           	opt stack 0
   725  00001A                     SPIDisassembleDouble@dub:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x19
   729  00001A                     	ds	1
   730  00001B                     ??_ReadRTDpos:
   731  00001B                     SPIRestart@temp:
   732                           	opt stack 0
   733  00001B                     EEReadChar@ch:
   734                           	opt stack 0
   735  00001B                     Write_b_eep@GIE_BIT_VAL:
   736                           	opt stack 0
   737  00001B                     ___ftpack@exp:
   738                           	opt stack 0
   739  00001B                     DetectMovement@JoystickResult:
   740                           	opt stack 0
   741  00001B                     SPIReassembleDouble@dub:
   742                           	opt stack 0
   743  00001B                     EEReassembleDouble@dub:
   744                           	opt stack 0
   745  00001B                     ___ftge@ff2:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x1A
   749  00001B                     	ds	1
   750  00001C                     SendSPI1@temp:
   751                           	opt stack 0
   752  00001C                     EEWriteChar@ch:
   753                           	opt stack 0
   754  00001C                     ___ftpack@sign:
   755                           	opt stack 0
   756  00001C                     ___lwdiv@quotient:
   757                           	opt stack 0
   758  00001C                     EEWriteDouble@dub:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x1B
   762  00001C                     	ds	1
   763  00001D                     ??___ftpack:
   764  00001D                     SendSPI1@data:
   765                           	opt stack 0
   766  00001D                     EEWriteChar@location:
   767                           	opt stack 0
   768  00001D                     DetectMovement@ADCresult:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x1C
   772  00001D                     	ds	1
   773  00001E                     ??___ftge:
   774  00001E                     ?_EEReadDouble:
   775                           	opt stack 0
   776  00001E                     ReadRTDpos@HighPosition:
   777                           	opt stack 0
   778  00001E                     ___lwdiv@counter:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1D
   782  00001E                     	ds	1
   783  00001F                     ?___wmul:
   784                           	opt stack 0
   785  00001F                     ReadRTDpos@LowPosition:
   786                           	opt stack 0
   787  00001F                     EEWriteDouble@location:
   788                           	opt stack 0
   789  00001F                     ___wmul@multiplier:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x1E
   793  00001F                     	ds	1
   794  000020                     ?___ftadd:
   795                           	opt stack 0
   796  000020                     ?___lwtoft:
   797                           	opt stack 0
   798  000020                     EEWriteDouble@x:
   799                           	opt stack 0
   800  000020                     ReadRTDpos@FullPosition:
   801                           	opt stack 0
   802  000020                     ___lwtoft@c:
   803                           	opt stack 0
   804  000020                     ___ftadd@f1:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x1F
   808  000020                     	ds	1
   809  000021                     EEReadDouble@location:
   810                           	opt stack 0
   811  000021                     ___wmul@multiplicand:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x20
   815  000021                     	ds	1
   816  000022                     ReadRTDpos@x:
   817                           	opt stack 0
   818  000022                     EEReadDouble@x:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x21
   822  000022                     	ds	1
   823  000023                     ___wmul@product:
   824                           	opt stack 0
   825  000023                     ___ftadd@f2:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x22
   829  000023                     	ds	2
   830  000025                     SPIDisassembleLode@Data:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x24
   834  000025                     	ds	1
   835  000026                     ??___ftadd:
   836                           
   837                           ; 0 bytes @ 0x25
   838  000026                     	ds	1
   839  000027                     SPIDisassembleLode@Transmit:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x26
   843  000027                     	ds	2
   844  000029                     ??_SPIDisassembleLode:
   845  000029                     ___ftadd@sign:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x28
   849  000029                     	ds	1
   850  00002A                     ___ftadd@exp2:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x29
   854  00002A                     	ds	1
   855  00002B                     ___ftadd@exp1:
   856                           	opt stack 0
   857  00002B                     SPIDisassembleLode@y:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x2A
   861  00002B                     	ds	1
   862  00002C                     ?___ftdiv:
   863                           	opt stack 0
   864  00002C                     ?___ftsub:
   865                           	opt stack 0
   866  00002C                     ___ftdiv@f1:
   867                           	opt stack 0
   868  00002C                     ___ftsub@f1:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x2B
   872  00002C                     	ds	1
   873  00002D                     SPIDisassembleLode@dub:
   874                           	opt stack 0
   875                           
   876                           ; 3 bytes @ 0x2C
   877  00002D                     	ds	2
   878  00002F                     ___ftdiv@f2:
   879                           	opt stack 0
   880  00002F                     ___ftsub@f2:
   881                           	opt stack 0
   882                           
   883                           ; 3 bytes @ 0x2E
   884  00002F                     	ds	3
   885  000032                     ??___ftdiv:
   886  000032                     
   887                           ; 0 bytes @ 0x31
   888  000032                     	ds	3
   889  000035                     tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1h	equ	0xFE2
   897                           fsr1l	equ	0xFE1
   898                           
   899                           ; 0 bytes @ 0x34
   900 ;;
   901 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   902 ;;
   903 ;; *************** function _main *****************
   904 ;; Defined at:
   905 ;;		line 29 in file "RTDuC.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;		None
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  saveSP          3   67[BANK0 ] PTR unsigned char 
   910 ;;  saveKd          3   64[BANK0 ] PTR unsigned char 
   911 ;;  saveKi          3   61[BANK0 ] PTR unsigned char 
   912 ;;  saveKp          3   58[BANK0 ] PTR unsigned char 
   913 ;;  counter         2   71[BANK0 ] unsigned int 
   914 ;;  x               1   73[BANK0 ] unsigned char 
   915 ;;  dtime           1   70[BANK0 ] const unsigned char 
   916 ;;  trash           1   57[BANK0 ] unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;		None               void
   919 ;; Registers used:
   920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;Total ram usage:       17 bytes
   931 ;; Hardware stack levels required when called:   10
   932 ;; This function calls:
   933 ;;		_Delay10TCYx
   934 ;;		_DetectJoystick
   935 ;;		_DetectMovement
   936 ;;		_ImplementJSMotion
   937 ;;		_ImplementPIDMotion
   938 ;;		_RTD2Angle
   939 ;;		_ReadRTDpos
   940 ;;		_ReceiveSPI1
   941 ;;		_SPIDisassembleDouble
   942 ;;		_SPIDisassembleLode
   943 ;;		_SPIReassembleDouble
   944 ;;		_SPIRestart
   945 ;;		_SaveAll
   946 ;;		_SendSPI1
   947 ;;		_ZeroMotors
   948 ;;		___wmul
   949 ;;		_calculatePID
   950 ;;		_initialize
   951 ;; This function is called by:
   952 ;;		Startup code after reset
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text0
   957  001006                     __ptext0:
   958                           	opt stack 0
   959  001006                     _main:
   960                           	opt stack 21
   961                           
   962                           ;RTDuC.c: 31: const unsigned char dtime = 10;
   963                           
   964                           ;incstack = 0
   965  001006  0E0A               	movlw	10
   966  001008  0100               	movlb	0	; () banked
   967  00100A  6FA6               	movwf	main@dtime& (0+255),b
   968                           
   969                           ;RTDuC.c: 32: unsigned char trash, x = 0;
   970  00100C  0E00               	movlw	0
   971  00100E  0100               	movlb	0	; () banked
   972  001010  6FA9               	movwf	main@x& (0+255),b
   973                           
   974                           ;RTDuC.c: 33: unsigned int counter = 0;
   975  001012  0E00               	movlw	0
   976  001014  0100               	movlb	0	; () banked
   977  001016  6FA8               	movwf	(main@counter+1)& (0+255),b
   978  001018  0E00               	movlw	0
   979  00101A  6FA7               	movwf	main@counter& (0+255),b
   980                           
   981                           ; BSR set to: 0
   982                           ;RTDuC.c: 35: initialize();
   983  00101C  EC76  F015         	call	_initialize	;wreg free
   984                           
   985                           ;RTDuC.c: 37: SSP1BUF = dummy_byte;
   986  001020  C0C9  FFC9         	movff	_dummy_byte,4041	;volatile
   987                           
   988                           ;RTDuC.c: 38: PORTCbits.RC6 = 0;
   989  001024  9C82               	bcf	3970,6,c	;volatile
   990  001026  D000               	goto	l4185
   991  001028                     l4185:
   992                           
   993                           ;RTDuC.c: 41: {
   994                           ;RTDuC.c: 42: if (SPIflag == 1)
   995  001028  0100               	movlb	0	; () banked
   996  00102A  05C7               	decf	_SPIflag& (0+255),w,b
   997  00102C  A4D8               	btfss	status,2,c
   998  00102E  D0E9               	goto	l4285
   999                           
  1000                           ; BSR set to: 0
  1001                           ;RTDuC.c: 43: {
  1002                           ;RTDuC.c: 44: SPIflag = 0;
  1003  001030  0E00               	movlw	0
  1004  001032  0100               	movlb	0	; () banked
  1005  001034  6FC7               	movwf	_SPIflag& (0+255),b
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;RTDuC.c: 45: INTCONbits.GIE = 0;
  1009  001036  9EF2               	bcf	intcon,7,c	;volatile
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;RTDuC.c: 46: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
  1013  001038  0E02               	movlw	2
  1014  00103A  1841               	xorwf	_Command,w,c
  1015  00103C  B4D8               	btfsc	status,2,c
  1016  00103E  D010               	goto	l4201
  1017                           
  1018                           ; BSR set to: 0
  1019  001040  0E03               	movlw	3
  1020  001042  1841               	xorwf	_Command,w,c
  1021  001044  B4D8               	btfsc	status,2,c
  1022  001046  D00C               	goto	l4201
  1023                           
  1024                           ; BSR set to: 0
  1025  001048  0E04               	movlw	4
  1026  00104A  1841               	xorwf	_Command,w,c
  1027  00104C  B4D8               	btfsc	status,2,c
  1028  00104E  D008               	goto	l4201
  1029                           
  1030                           ; BSR set to: 0
  1031  001050  0E06               	movlw	6
  1032  001052  1841               	xorwf	_Command,w,c
  1033  001054  B4D8               	btfsc	status,2,c
  1034  001056  D004               	goto	l4201
  1035                           
  1036                           ; BSR set to: 0
  1037  001058  0E08               	movlw	8
  1038  00105A  1841               	xorwf	_Command,w,c
  1039  00105C  A4D8               	btfss	status,2,c
  1040  00105E  D05D               	goto	l4239
  1041  001060                     l4201:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;RTDuC.c: 47: {
  1045                           ;RTDuC.c: 48: if (Command == 0x02)
  1046  001060  0E02               	movlw	2
  1047  001062  1841               	xorwf	_Command,w,c
  1048  001064  A4D8               	btfss	status,2,c
  1049  001066  D009               	goto	l4205
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;RTDuC.c: 49: SPIDisassembleDouble(CurrentAngle);
  1053  001068  C0AA  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
  1054  00106C  C0AB  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
  1055  001070  C0AC  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
  1056  001074  EC22  F015         	call	_SPIDisassembleDouble	;wreg free
  1057  001078  D034               	goto	l4221
  1058  00107A                     l4205:
  1059                           
  1060                           ;RTDuC.c: 50: else if (Command == 0x03)
  1061  00107A  0E03               	movlw	3
  1062  00107C  1841               	xorwf	_Command,w,c
  1063  00107E  A4D8               	btfss	status,2,c
  1064  001080  D009               	goto	l4209
  1065                           
  1066                           ;RTDuC.c: 51: SPIDisassembleDouble(CurrentVelocity);
  1067  001082  C0AD  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
  1068  001086  C0AE  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
  1069  00108A  C0AF  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
  1070  00108E  EC22  F015         	call	_SPIDisassembleDouble	;wreg free
  1071  001092  D027               	goto	l4221
  1072  001094                     l4209:
  1073                           
  1074                           ;RTDuC.c: 52: else if (Command == 0x04)
  1075  001094  0E04               	movlw	4
  1076  001096  1841               	xorwf	_Command,w,c
  1077  001098  A4D8               	btfss	status,2,c
  1078  00109A  D009               	goto	l4213
  1079                           
  1080                           ;RTDuC.c: 53: SPIDisassembleDouble(Kp);
  1081  00109C  C0B6  F01A         	movff	_Kp,SPIDisassembleDouble@dub
  1082  0010A0  C0B7  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
  1083  0010A4  C0B8  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
  1084  0010A8  EC22  F015         	call	_SPIDisassembleDouble	;wreg free
  1085  0010AC  D01A               	goto	l4221
  1086  0010AE                     l4213:
  1087                           
  1088                           ;RTDuC.c: 54: else if (Command == 0x06)
  1089  0010AE  0E06               	movlw	6
  1090  0010B0  1841               	xorwf	_Command,w,c
  1091  0010B2  A4D8               	btfss	status,2,c
  1092  0010B4  D009               	goto	l4217
  1093                           
  1094                           ;RTDuC.c: 55: SPIDisassembleDouble(Ki);
  1095  0010B6  C0B3  F01A         	movff	_Ki,SPIDisassembleDouble@dub
  1096  0010BA  C0B4  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
  1097  0010BE  C0B5  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
  1098  0010C2  EC22  F015         	call	_SPIDisassembleDouble	;wreg free
  1099  0010C6  D00D               	goto	l4221
  1100  0010C8                     l4217:
  1101                           
  1102                           ;RTDuC.c: 56: else if (Command == 0x08)
  1103  0010C8  0E08               	movlw	8
  1104  0010CA  1841               	xorwf	_Command,w,c
  1105  0010CC  A4D8               	btfss	status,2,c
  1106  0010CE  D009               	goto	l4221
  1107                           
  1108                           ;RTDuC.c: 57: SPIDisassembleDouble(Kd);
  1109  0010D0  C0B0  F01A         	movff	_Kd,SPIDisassembleDouble@dub
  1110  0010D4  C0B1  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
  1111  0010D8  C0B2  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
  1112  0010DC  EC22  F015         	call	_SPIDisassembleDouble	;wreg free
  1113  0010E0  D000               	goto	l4221
  1114  0010E2                     l4221:
  1115                           
  1116                           ;RTDuC.c: 59: PORTCbits.RC6 = 0;
  1117  0010E2  9C82               	bcf	3970,6,c	;volatile
  1118                           
  1119                           ;RTDuC.c: 60: for (x = 0; x < 4; x++)
  1120  0010E4  0E00               	movlw	0
  1121  0010E6  0100               	movlb	0	; () banked
  1122  0010E8  6FA9               	movwf	main@x& (0+255),b
  1123  0010EA                     l4225:
  1124                           
  1125                           ; BSR set to: 0
  1126  0010EA  0E03               	movlw	3
  1127  0010EC  0100               	movlb	0	; () banked
  1128  0010EE  65A9               	cpfsgt	main@x& (0+255),b
  1129  0010F0  D001               	goto	l4229
  1130                           
  1131                           ; BSR set to: 0
  1132  0010F2  D00F               	goto	l4235
  1133  0010F4                     l4229:
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;RTDuC.c: 61: SendSPI1(DoubleSPIS[x]);
  1137  0010F4  0100               	movlb	0	; () banked
  1138  0010F6  51A9               	movf	main@x& (0+255),w,b
  1139  0010F8  0D01               	mullw	1
  1140  0010FA  0E35               	movlw	low _DoubleSPIS
  1141  0010FC  24F3               	addwf	prodl,w,c
  1142  0010FE  6ED9               	movwf	fsr2l,c
  1143  001100  0E00               	movlw	high _DoubleSPIS
  1144  001102  20F4               	addwfc	prodh,w,c
  1145  001104  6EDA               	movwf	fsr2h,c
  1146  001106  50DF               	movf	indf2,w,c
  1147  001108  ECBE  F015         	call	_SendSPI1
  1148  00110C  0100               	movlb	0	; () banked
  1149  00110E  2BA9               	incf	main@x& (0+255),f,b
  1150  001110  D7EC               	goto	l4225
  1151  001112                     l4235:
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;RTDuC.c: 62: SPIRestart();
  1155  001112  ECCD  F016         	call	_SPIRestart	;wreg free
  1156                           
  1157                           ;RTDuC.c: 63: PORTCbits.RC6 = 1;
  1158  001116  8C82               	bsf	3970,6,c	;volatile
  1159                           
  1160                           ;RTDuC.c: 64: }
  1161  001118  D06C               	goto	l545
  1162  00111A                     l4239:
  1163                           
  1164                           ;RTDuC.c: 65: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
  1165  00111A  0441               	decf	_Command,w,c
  1166  00111C  B4D8               	btfsc	status,2,c
  1167  00111E  D00C               	goto	l548
  1168  001120  0E05               	movlw	5
  1169  001122  1841               	xorwf	_Command,w,c
  1170  001124  B4D8               	btfsc	status,2,c
  1171  001126  D008               	goto	l548
  1172  001128  0E07               	movlw	7
  1173  00112A  1841               	xorwf	_Command,w,c
  1174  00112C  B4D8               	btfsc	status,2,c
  1175  00112E  D004               	goto	l548
  1176  001130  0E09               	movlw	9
  1177  001132  1841               	xorwf	_Command,w,c
  1178  001134  A4D8               	btfss	status,2,c
  1179  001136  D059               	goto	l546
  1180  001138                     l548:
  1181                           
  1182                           ;RTDuC.c: 66: {
  1183                           ;RTDuC.c: 67: PORTCbits.RC6 = 0;
  1184  001138  9C82               	bcf	3970,6,c	;volatile
  1185                           
  1186                           ;RTDuC.c: 68: for (x = 0; x != 4; x++)
  1187  00113A  0E00               	movlw	0
  1188  00113C  0100               	movlb	0	; () banked
  1189  00113E  6FA9               	movwf	main@x& (0+255),b
  1190  001140                     l4249:
  1191                           
  1192                           ; BSR set to: 0
  1193  001140  0E04               	movlw	4
  1194  001142  0100               	movlb	0	; () banked
  1195  001144  19A9               	xorwf	main@x& (0+255),w,b
  1196  001146  B4D8               	btfsc	status,2,c
  1197  001148  D011               	goto	l550
  1198  00114A  D001               	goto	l4253
  1199                           
  1200                           ; BSR set to: 0
  1201  00114C  D00F               	goto	l550
  1202  00114E                     l4253:
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;RTDuC.c: 69: DoubleSPIS[x] = ReceiveSPI1();
  1206  00114E  0100               	movlb	0	; () banked
  1207  001150  51A9               	movf	main@x& (0+255),w,b
  1208  001152  0D01               	mullw	1
  1209  001154  0E35               	movlw	low _DoubleSPIS
  1210  001156  24F3               	addwf	prodl,w,c
  1211  001158  6ED9               	movwf	fsr2l,c
  1212  00115A  0E00               	movlw	high _DoubleSPIS
  1213  00115C  20F4               	addwfc	prodh,w,c
  1214  00115E  6EDA               	movwf	fsr2h,c
  1215  001160  ECEB  F015         	call	_ReceiveSPI1	;wreg free
  1216  001164  6EDF               	movwf	indf2,c
  1217  001166  0100               	movlb	0	; () banked
  1218  001168  2BA9               	incf	main@x& (0+255),f,b
  1219  00116A  D7EA               	goto	l4249
  1220  00116C                     l550:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;RTDuC.c: 71: PORTCbits.RC6 = 1;
  1224  00116C  8C82               	bsf	3970,6,c	;volatile
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;RTDuC.c: 73: if (Command == 0x01)
  1228  00116E  0441               	decf	_Command,w,c
  1229  001170  A4D8               	btfss	status,2,c
  1230  001172  D00F               	goto	l4267
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;RTDuC.c: 74: {
  1234                           ;RTDuC.c: 75: SetAngle = SPIReassembleDouble();
  1235  001174  EC80  F014         	call	_SPIReassembleDouble	;wreg free
  1236  001178  C018  F03C         	movff	?_SPIReassembleDouble,_SetAngle
  1237  00117C  C019  F03D         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1238  001180  C01A  F03E         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1239                           
  1240                           ;RTDuC.c: 76: PIDEnableFlag = 3;
  1241  001184  0E03               	movlw	3
  1242  001186  0100               	movlb	0	; () banked
  1243  001188  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;RTDuC.c: 77: JSEnableFlag = 0;
  1247  00118A  0E00               	movlw	0
  1248  00118C  0100               	movlb	0	; () banked
  1249  00118E  6FC4               	movwf	_JSEnableFlag& (0+255),b
  1250                           
  1251                           ;RTDuC.c: 78: }
  1252  001190  D027               	goto	l4279
  1253  001192                     l4267:
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;RTDuC.c: 79: else if (Command == 0x05)
  1257  001192  0E05               	movlw	5
  1258  001194  1841               	xorwf	_Command,w,c
  1259  001196  A4D8               	btfss	status,2,c
  1260  001198  D009               	goto	l4271
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;RTDuC.c: 80: {
  1264                           ;RTDuC.c: 81: Kp = SPIReassembleDouble();
  1265  00119A  EC80  F014         	call	_SPIReassembleDouble	;wreg free
  1266  00119E  C018  F0B6         	movff	?_SPIReassembleDouble,_Kp
  1267  0011A2  C019  F0B7         	movff	?_SPIReassembleDouble+1,_Kp+1
  1268  0011A6  C01A  F0B8         	movff	?_SPIReassembleDouble+2,_Kp+2
  1269                           
  1270                           ;RTDuC.c: 82: }
  1271  0011AA  D01A               	goto	l4279
  1272  0011AC                     l4271:
  1273                           
  1274                           ;RTDuC.c: 83: else if (Command == 0x07)
  1275  0011AC  0E07               	movlw	7
  1276  0011AE  1841               	xorwf	_Command,w,c
  1277  0011B0  A4D8               	btfss	status,2,c
  1278  0011B2  D009               	goto	l4275
  1279                           
  1280                           ;RTDuC.c: 84: {
  1281                           ;RTDuC.c: 85: Ki = SPIReassembleDouble();
  1282  0011B4  EC80  F014         	call	_SPIReassembleDouble	;wreg free
  1283  0011B8  C018  F0B3         	movff	?_SPIReassembleDouble,_Ki
  1284  0011BC  C019  F0B4         	movff	?_SPIReassembleDouble+1,_Ki+1
  1285  0011C0  C01A  F0B5         	movff	?_SPIReassembleDouble+2,_Ki+2
  1286                           
  1287                           ;RTDuC.c: 86: }
  1288  0011C4  D00D               	goto	l4279
  1289  0011C6                     l4275:
  1290                           
  1291                           ;RTDuC.c: 87: else if (Command == 0x09)
  1292  0011C6  0E09               	movlw	9
  1293  0011C8  1841               	xorwf	_Command,w,c
  1294  0011CA  A4D8               	btfss	status,2,c
  1295  0011CC  D009               	goto	l4279
  1296                           
  1297                           ;RTDuC.c: 88: {
  1298                           ;RTDuC.c: 89: Kd = SPIReassembleDouble();
  1299  0011CE  EC80  F014         	call	_SPIReassembleDouble	;wreg free
  1300  0011D2  C018  F0B0         	movff	?_SPIReassembleDouble,_Kd
  1301  0011D6  C019  F0B1         	movff	?_SPIReassembleDouble+1,_Kd+1
  1302  0011DA  C01A  F0B2         	movff	?_SPIReassembleDouble+2,_Kd+2
  1303  0011DE  D000               	goto	l4279
  1304  0011E0                     l4279:
  1305                           
  1306                           ;RTDuC.c: 90: }
  1307                           ;RTDuC.c: 91: SPIRestart();
  1308  0011E0  ECCD  F016         	call	_SPIRestart	;wreg free
  1309                           
  1310                           ;RTDuC.c: 92: SaveAll();
  1311  0011E4  ECC6  F010         	call	_SaveAll	;wreg free
  1312                           
  1313                           ;RTDuC.c: 93: }
  1314  0011E8  D004               	goto	l545
  1315  0011EA                     l546:
  1316                           
  1317                           ;RTDuC.c: 94: else
  1318                           ;RTDuC.c: 95: {
  1319                           ;RTDuC.c: 96: trash = SSP1BUF;
  1320  0011EA  CFC9 F099          	movff	4041,main@trash	;volatile
  1321                           
  1322                           ;RTDuC.c: 97: PIR1bits.SSP1IF = 0;
  1323  0011EE  969E               	bcf	3998,3,c	;volatile
  1324  0011F0  D000               	goto	l545
  1325  0011F2                     l545:
  1326                           
  1327                           ;RTDuC.c: 98: }
  1328                           ;RTDuC.c: 100: INTCONbits.GIE = 1;
  1329  0011F2  8EF2               	bsf	intcon,7,c	;volatile
  1330                           
  1331                           ;RTDuC.c: 101: PIE1bits.SSP1IE = 1;
  1332  0011F4  869D               	bsf	3997,3,c	;volatile
  1333                           
  1334                           ;RTDuC.c: 102: PORTCbits.RC6 = 0;
  1335  0011F6  9C82               	bcf	3970,6,c	;volatile
  1336                           
  1337                           ;RTDuC.c: 103: Delay10TCYx(dtime);
  1338  0011F8  0100               	movlb	0	; () banked
  1339  0011FA  51A6               	movf	main@dtime& (0+255),w,b
  1340  0011FC  ECEC  F016         	call	_Delay10TCYx
  1341  001200  D000               	goto	l4285
  1342  001202                     l4285:
  1343                           
  1344                           ;RTDuC.c: 104: }
  1345                           ;RTDuC.c: 105: PORTCbits.RC6 = 1;
  1346  001202  8C82               	bsf	3970,6,c	;volatile
  1347                           
  1348                           ;RTDuC.c: 106: DetectJoystick();
  1349  001204  EC81  F016         	call	_DetectJoystick	;wreg free
  1350                           
  1351                           ;RTDuC.c: 107: PORTCbits.RC6 = 0;
  1352  001208  9C82               	bcf	3970,6,c	;volatile
  1353                           
  1354                           ;RTDuC.c: 108: Delay10TCYx(10);
  1355  00120A  0E0A               	movlw	10
  1356  00120C  ECEC  F016         	call	_Delay10TCYx
  1357                           
  1358                           ;RTDuC.c: 109: if (JSEnableFlag == 1)
  1359  001210  0100               	movlb	0	; () banked
  1360  001212  05C4               	decf	_JSEnableFlag& (0+255),w,b
  1361  001214  A4D8               	btfss	status,2,c
  1362  001216  D011               	goto	l4303
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;RTDuC.c: 110: {
  1366                           ;RTDuC.c: 111: PORTCbits.RC6 = 1;
  1367  001218  8C82               	bsf	3970,6,c	;volatile
  1368                           
  1369                           ;RTDuC.c: 112: INTCONbits.GIE = 0;
  1370  00121A  9EF2               	bcf	intcon,7,c	;volatile
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;RTDuC.c: 113: ImplementJSMotion(DetectMovement());
  1374  00121C  ECDD  F012         	call	_DetectMovement	;wreg free
  1375  001220  C018  F088         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1376  001224  C019  F089         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1377  001228  EC40  F00E         	call	_ImplementJSMotion	;wreg free
  1378                           
  1379                           ;RTDuC.c: 114: INTCONbits.GIE = 1;
  1380  00122C  8EF2               	bsf	intcon,7,c	;volatile
  1381                           
  1382                           ;RTDuC.c: 115: PORTCbits.RC6 = 0;
  1383  00122E  9C82               	bcf	3970,6,c	;volatile
  1384                           
  1385                           ;RTDuC.c: 116: Delay10TCYx(dtime);
  1386  001230  0100               	movlb	0	; () banked
  1387  001232  51A6               	movf	main@dtime& (0+255),w,b
  1388  001234  ECEC  F016         	call	_Delay10TCYx
  1389  001238  D000               	goto	l4303
  1390  00123A                     l4303:
  1391                           
  1392                           ;RTDuC.c: 117: }
  1393                           ;RTDuC.c: 119: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1394  00123A  0100               	movlb	0	; () banked
  1395  00123C  05C5               	decf	_PIDEnableFlag& (0+255),w,b
  1396  00123E  A4D8               	btfss	status,2,c
  1397  001240  D032               	goto	l4319
  1398                           
  1399                           ; BSR set to: 0
  1400  001242  0100               	movlb	0	; () banked
  1401  001244  05C8               	decf	_TMR0Flag& (0+255),w,b
  1402  001246  A4D8               	btfss	status,2,c
  1403  001248  D02E               	goto	l4319
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;RTDuC.c: 120: {
  1407                           ;RTDuC.c: 121: PORTCbits.RC6 = 1;
  1408  00124A  8C82               	bsf	3970,6,c	;volatile
  1409                           
  1410                           ;RTDuC.c: 122: INTCONbits.GIE = 0;
  1411  00124C  9EF2               	bcf	intcon,7,c	;volatile
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;RTDuC.c: 123: CurrentAngle = RTD2Angle(ReadRTDpos());
  1415  00124E  EC14  F013         	call	_ReadRTDpos	;wreg free
  1416  001252  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1417  001256  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1418  00125A  EC03  F015         	call	_RTD2Angle	;wreg free
  1419  00125E  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1420  001262  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1421  001266  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1422                           
  1423                           ;RTDuC.c: 124: calculatePID(CurrentAngle, SetAngle);
  1424  00126A  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1425  00126E  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1426  001272  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1427  001276  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1428  00127A  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1429  00127E  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1430  001282  ECB1  F00A         	call	_calculatePID	;wreg free
  1431                           
  1432                           ;RTDuC.c: 125: ImplementPIDMotion(motorInput);
  1433  001286  C0C2  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1434  00128A  C0C3  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1435  00128E  EC7E  F011         	call	_ImplementPIDMotion	;wreg free
  1436                           
  1437                           ;RTDuC.c: 126: TMR0Flag = 0;
  1438  001292  0E00               	movlw	0
  1439  001294  0100               	movlb	0	; () banked
  1440  001296  6FC8               	movwf	_TMR0Flag& (0+255),b
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;RTDuC.c: 127: INTCONbits.GIE = 1;
  1444  001298  8EF2               	bsf	intcon,7,c	;volatile
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;RTDuC.c: 128: PORTCbits.RC6 = 0;
  1448  00129A  9C82               	bcf	3970,6,c	;volatile
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;RTDuC.c: 129: Delay10TCYx(dtime);
  1452  00129C  0100               	movlb	0	; () banked
  1453  00129E  51A6               	movf	main@dtime& (0+255),w,b
  1454  0012A0  ECEC  F016         	call	_Delay10TCYx
  1455                           
  1456                           ;RTDuC.c: 130: }
  1457  0012A4  D053               	goto	l561
  1458  0012A6                     l4319:
  1459                           
  1460                           ;RTDuC.c: 132: else if (PIDEnableFlag == 3)
  1461  0012A6  0E03               	movlw	3
  1462  0012A8  0100               	movlb	0	; () banked
  1463  0012AA  19C5               	xorwf	_PIDEnableFlag& (0+255),w,b
  1464  0012AC  A4D8               	btfss	status,2,c
  1465  0012AE  D030               	goto	l4339
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;RTDuC.c: 133: {
  1469                           ;RTDuC.c: 134: PORTCbits.RC6 = 1;
  1470  0012B0  8C82               	bsf	3970,6,c	;volatile
  1471                           
  1472                           ;RTDuC.c: 135: INTCONbits.GIE = 0;
  1473  0012B2  9EF2               	bcf	intcon,7,c	;volatile
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;RTDuC.c: 136: TMR0H = 0xDB;
  1477  0012B4  0EDB               	movlw	219
  1478  0012B6  6ED7               	movwf	4055,c	;volatile
  1479                           
  1480                           ;RTDuC.c: 137: TMR0L = 0x60;
  1481  0012B8  0E60               	movlw	96
  1482  0012BA  6ED6               	movwf	4054,c	;volatile
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;RTDuC.c: 138: CurrentAngle = RTD2Angle(ReadRTDpos());
  1486  0012BC  EC14  F013         	call	_ReadRTDpos	;wreg free
  1487  0012C0  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1488  0012C4  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1489  0012C8  EC03  F015         	call	_RTD2Angle	;wreg free
  1490  0012CC  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1491  0012D0  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1492  0012D4  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1493                           
  1494                           ;RTDuC.c: 139: calculatePID(CurrentAngle, SetAngle);
  1495  0012D8  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1496  0012DC  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1497  0012E0  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1498  0012E4  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1499  0012E8  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1500  0012EC  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1501  0012F0  ECB1  F00A         	call	_calculatePID	;wreg free
  1502                           
  1503                           ;RTDuC.c: 140: ImplementPIDMotion(motorInput);
  1504  0012F4  C0C2  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1505  0012F8  C0C3  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1506  0012FC  EC7E  F011         	call	_ImplementPIDMotion	;wreg free
  1507                           
  1508                           ;RTDuC.c: 141: INTCONbits.GIE = 1;
  1509  001300  8EF2               	bsf	intcon,7,c	;volatile
  1510                           
  1511                           ;RTDuC.c: 143: T0CONbits.TMR0ON = 1;
  1512  001302  8ED5               	bsf	4053,7,c	;volatile
  1513                           
  1514                           ;RTDuC.c: 144: PORTCbits.RC6 = 0;
  1515  001304  9C82               	bcf	3970,6,c	;volatile
  1516                           
  1517                           ;RTDuC.c: 145: Delay10TCYx(dtime);
  1518  001306  0100               	movlb	0	; () banked
  1519  001308  51A6               	movf	main@dtime& (0+255),w,b
  1520  00130A  ECEC  F016         	call	_Delay10TCYx
  1521                           
  1522                           ;RTDuC.c: 146: }
  1523  00130E  D01E               	goto	l561
  1524  001310                     l4339:
  1525                           
  1526                           ;RTDuC.c: 148: else if (TMR0Flag == 1)
  1527  001310  0100               	movlb	0	; () banked
  1528  001312  05C8               	decf	_TMR0Flag& (0+255),w,b
  1529  001314  A4D8               	btfss	status,2,c
  1530  001316  D01A               	goto	l561
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;RTDuC.c: 149: {
  1534                           ;RTDuC.c: 150: PORTCbits.RC6 = 1;
  1535  001318  8C82               	bsf	3970,6,c	;volatile
  1536                           
  1537                           ;RTDuC.c: 151: INTCONbits.GIE = 0;
  1538  00131A  9EF2               	bcf	intcon,7,c	;volatile
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;RTDuC.c: 152: CurrentAngle = RTD2Angle(ReadRTDpos());
  1542  00131C  EC14  F013         	call	_ReadRTDpos	;wreg free
  1543  001320  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1544  001324  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1545  001328  EC03  F015         	call	_RTD2Angle	;wreg free
  1546  00132C  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1547  001330  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1548  001334  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1549                           
  1550                           ;RTDuC.c: 153: INTCONbits.GIE = 1;
  1551  001338  8EF2               	bsf	intcon,7,c	;volatile
  1552                           
  1553                           ;RTDuC.c: 154: TMR0Flag = 0;
  1554  00133A  0E00               	movlw	0
  1555  00133C  0100               	movlb	0	; () banked
  1556  00133E  6FC8               	movwf	_TMR0Flag& (0+255),b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;RTDuC.c: 155: PORTCbits.RC6 = 0;
  1560  001340  9C82               	bcf	3970,6,c	;volatile
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;RTDuC.c: 156: Delay10TCYx(dtime);
  1564  001342  0100               	movlb	0	; () banked
  1565  001344  51A6               	movf	main@dtime& (0+255),w,b
  1566  001346  ECEC  F016         	call	_Delay10TCYx
  1567  00134A  D000               	goto	l561
  1568  00134C                     l561:
  1569                           
  1570                           ;RTDuC.c: 157: }
  1571                           ;RTDuC.c: 159: if (RECFlag == 1)
  1572  00134C  0100               	movlb	0	; () banked
  1573  00134E  05C6               	decf	_RECFlag& (0+255),w,b
  1574  001350  A4D8               	btfss	status,2,c
  1575  001352  D66A               	goto	l4185
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;RTDuC.c: 160: {
  1579                           ;RTDuC.c: 161: PORTCbits.RC6 = 1;
  1580  001354  8C82               	bsf	3970,6,c	;volatile
  1581                           
  1582                           ;RTDuC.c: 162: double saveKp = Kp,
  1583  001356  C0B6  F09A         	movff	_Kp,main@saveKp
  1584  00135A  C0B7  F09B         	movff	_Kp+1,main@saveKp+1
  1585  00135E  C0B8  F09C         	movff	_Kp+2,main@saveKp+2
  1586                           
  1587                           ;RTDuC.c: 163: saveKi = Ki,
  1588  001362  C0B3  F09D         	movff	_Ki,main@saveKi
  1589  001366  C0B4  F09E         	movff	_Ki+1,main@saveKi+1
  1590  00136A  C0B5  F09F         	movff	_Ki+2,main@saveKi+2
  1591                           
  1592                           ;RTDuC.c: 164: saveKd = Kd,
  1593  00136E  C0B0  F0A0         	movff	_Kd,main@saveKd
  1594  001372  C0B1  F0A1         	movff	_Kd+1,main@saveKd+1
  1595  001376  C0B2  F0A2         	movff	_Kd+2,main@saveKd+2
  1596                           
  1597                           ;RTDuC.c: 165: saveSP = SetAngle;
  1598  00137A  C03C  F0A3         	movff	_SetAngle,main@saveSP
  1599  00137E  C03D  F0A4         	movff	_SetAngle+1,main@saveSP+1
  1600  001382  C03E  F0A5         	movff	_SetAngle+2,main@saveSP+2
  1601                           
  1602                           ;RTDuC.c: 167: INTCONbits.GIE = 0;
  1603  001386  9EF2               	bcf	intcon,7,c	;volatile
  1604                           
  1605                           ;RTDuC.c: 168: INTCONbits.TMR0IE = 0;
  1606  001388  9AF2               	bcf	intcon,5,c	;volatile
  1607                           
  1608                           ;RTDuC.c: 169: T0CONbits.TMR0ON = 0;
  1609  00138A  9ED5               	bcf	4053,7,c	;volatile
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;RTDuC.c: 171: ZeroMotors();
  1613  00138C  EC96  F00D         	call	_ZeroMotors	;wreg free
  1614                           
  1615                           ;RTDuC.c: 172: Kp = saveKp;
  1616  001390  C09A  F0B6         	movff	main@saveKp,_Kp
  1617  001394  C09B  F0B7         	movff	main@saveKp+1,_Kp+1
  1618  001398  C09C  F0B8         	movff	main@saveKp+2,_Kp+2
  1619                           
  1620                           ;RTDuC.c: 173: Ki = saveKi;
  1621  00139C  C09D  F0B3         	movff	main@saveKi,_Ki
  1622  0013A0  C09E  F0B4         	movff	main@saveKi+1,_Ki+1
  1623  0013A4  C09F  F0B5         	movff	main@saveKi+2,_Ki+2
  1624                           
  1625                           ;RTDuC.c: 174: Kd = saveKd;
  1626  0013A8  C0A0  F0B0         	movff	main@saveKd,_Kd
  1627  0013AC  C0A1  F0B1         	movff	main@saveKd+1,_Kd+1
  1628  0013B0  C0A2  F0B2         	movff	main@saveKd+2,_Kd+2
  1629                           
  1630                           ;RTDuC.c: 176: TMR0H = 0xDB;
  1631  0013B4  0EDB               	movlw	219
  1632  0013B6  6ED7               	movwf	4055,c	;volatile
  1633                           
  1634                           ;RTDuC.c: 177: TMR0L = 0x60;
  1635  0013B8  0E60               	movlw	96
  1636  0013BA  6ED6               	movwf	4054,c	;volatile
  1637                           
  1638                           ;RTDuC.c: 179: PIDEnableFlag = 3;
  1639  0013BC  0E03               	movlw	3
  1640  0013BE  0100               	movlb	0	; () banked
  1641  0013C0  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;RTDuC.c: 180: SetAngle = 60;
  1645  0013C2  0E00               	movlw	0
  1646  0013C4  6E3C               	movwf	_SetAngle,c
  1647  0013C6  0E70               	movlw	112
  1648  0013C8  6E3D               	movwf	_SetAngle+1,c
  1649  0013CA  0E42               	movlw	66
  1650  0013CC  6E3E               	movwf	_SetAngle+2,c
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;RTDuC.c: 181: counter = 0;
  1654  0013CE  0E00               	movlw	0
  1655  0013D0  0100               	movlb	0	; () banked
  1656  0013D2  6FA8               	movwf	(main@counter+1)& (0+255),b
  1657  0013D4  0E00               	movlw	0
  1658  0013D6  6FA7               	movwf	main@counter& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;RTDuC.c: 183: T0CONbits.TMR0ON = 1;
  1662  0013D8  8ED5               	bsf	4053,7,c	;volatile
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;RTDuC.c: 184: T3CONbits.TMR3ON = 1;
  1666  0013DA  80B1               	bsf	4017,0,c	;volatile
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;RTDuC.c: 186: PORTAbits.RA3 = 0;
  1670  0013DC  9680               	bcf	3968,3,c	;volatile
  1671                           
  1672                           ;RTDuC.c: 188: while (counter < DataLodeSize)
  1673  0013DE  D067               	goto	l4395
  1674  0013E0                     l4379:
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;RTDuC.c: 189: {
  1678                           ;RTDuC.c: 190: CurrentAngle = RTD2Angle(ReadRTDpos());
  1679  0013E0  EC14  F013         	call	_ReadRTDpos	;wreg free
  1680  0013E4  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1681  0013E8  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1682  0013EC  EC03  F015         	call	_RTD2Angle	;wreg free
  1683  0013F0  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1684  0013F4  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1685  0013F8  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1686                           
  1687                           ;RTDuC.c: 191: calculatePID(CurrentAngle, SetAngle);
  1688  0013FC  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1689  001400  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1690  001404  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1691  001408  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1692  00140C  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1693  001410  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1694  001414  ECB1  F00A         	call	_calculatePID	;wreg free
  1695                           
  1696                           ;RTDuC.c: 192: ImplementPIDMotion(motorInput);
  1697  001418  C0C2  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1698  00141C  C0C3  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1699  001420  EC7E  F011         	call	_ImplementPIDMotion	;wreg free
  1700                           
  1701                           ;RTDuC.c: 193: while (INTCONbits.TMR0IF == 0)
  1702  001424  D03C               	goto	l4391
  1703  001426                     l569:
  1704                           
  1705                           ;RTDuC.c: 194: {
  1706                           ;RTDuC.c: 195: PORTAbits.RA3 = 1;
  1707  001426  8680               	bsf	3968,3,c	;volatile
  1708                           
  1709                           ;RTDuC.c: 196: TMR3H = 0xF6;
  1710  001428  0EF6               	movlw	246
  1711  00142A  6EB3               	movwf	4019,c	;volatile
  1712                           
  1713                           ;RTDuC.c: 197: TMR3L = 0x3C;
  1714  00142C  0E3C               	movlw	60
  1715  00142E  6EB2               	movwf	4018,c	;volatile
  1716                           
  1717                           ;RTDuC.c: 198: DataLode[counter] = RTD2Angle(ReadRTDpos());
  1718  001430  C0A7  F01F         	movff	main@counter,___wmul@multiplier
  1719  001434  C0A8  F020         	movff	main@counter+1,___wmul@multiplier+1
  1720  001438  0E00               	movlw	0
  1721  00143A  6E22               	movwf	___wmul@multiplicand+1,c
  1722  00143C  0E03               	movlw	3
  1723  00143E  6E21               	movwf	___wmul@multiplicand,c
  1724  001440  EC00  F016         	call	___wmul	;wreg free
  1725  001444  0ECD               	movlw	low _DataLode
  1726  001446  241F               	addwf	?___wmul,w,c
  1727  001448  6ED9               	movwf	fsr2l,c
  1728  00144A  0E00               	movlw	high _DataLode
  1729  00144C  2020               	addwfc	?___wmul+1,w,c
  1730  00144E  6EDA               	movwf	fsr2h,c
  1731  001450  EC14  F013         	call	_ReadRTDpos	;wreg free
  1732  001454  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1733  001458  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1734  00145C  EC03  F015         	call	_RTD2Angle	;wreg free
  1735  001460  C075  FFDE         	movff	?_RTD2Angle,postinc2
  1736  001464  C076  FFDE         	movff	?_RTD2Angle+1,postinc2
  1737  001468  C077  FFDE         	movff	?_RTD2Angle+2,postinc2
  1738                           
  1739                           ;RTDuC.c: 199: PORTAbits.RA3 = 0;
  1740  00146C  9680               	bcf	3968,3,c	;volatile
  1741                           
  1742                           ;RTDuC.c: 200: while (PIR2bits.TMR3IF == 0);
  1743  00146E  D000               	goto	l570
  1744  001470                     l570:
  1745  001470  A2A1               	btfss	4001,1,c	;volatile
  1746  001472  D7FE               	goto	l570
  1747                           
  1748                           ;RTDuC.c: 201: PIR2bits.TMR3IF = 0;
  1749  001474  92A1               	bcf	4001,1,c	;volatile
  1750                           
  1751                           ;RTDuC.c: 202: if (counter < DataLodeSize)
  1752  001476  0E01               	movlw	low _DataLodeSize
  1753  001478  6EF6               	movwf	tblptrl,c
  1754  00147A                     	if	1	;There is more than 1 active tblptr byte
  1755  00147A  0E10               	movlw	high _DataLodeSize
  1756  00147C  6EF7               	movwf	tblptrh,c
  1757  00147E                     	endif
  1758  00147E                     	if	1	;There are 3 active tblptr bytes
  1759  00147E  0E00               	movlw	low (_DataLodeSize shr (0+16))
  1760  001480  6EF8               	movwf	tblptru,c
  1761  001482                     	endif
  1762  001482  0009               	tblrd		*+
  1763  001484  50F5               	movf	tablat,w,c
  1764  001486  0100               	movlb	0	; () banked
  1765  001488  5DA7               	subwf	main@counter& (0+255),w,b
  1766  00148A  0009               	tblrd		*+
  1767  00148C  50F5               	movf	tablat,w,c
  1768  00148E  0100               	movlb	0	; () banked
  1769  001490  59A8               	subwfb	(main@counter+1)& (0+255),w,b
  1770  001492  B0D8               	btfsc	status,0,c
  1771  001494  D004               	goto	l4391
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;RTDuC.c: 203: counter++;
  1775  001496  0100               	movlb	0	; () banked
  1776  001498  4BA7               	infsnz	main@counter& (0+255),f,b
  1777  00149A  2BA8               	incf	(main@counter+1)& (0+255),f,b
  1778                           
  1779                           ; BSR set to: 0
  1780  00149C  D000               	goto	l4391
  1781  00149E                     l4391:
  1782  00149E  A4F2               	btfss	intcon,2,c	;volatile
  1783  0014A0  D7C2               	goto	l569
  1784                           
  1785                           ;RTDuC.c: 204: }
  1786                           ;RTDuC.c: 205: INTCONbits.TMR0IF = 0;
  1787  0014A2  94F2               	bcf	intcon,2,c	;volatile
  1788                           
  1789                           ;RTDuC.c: 206: TMR0H = 0xDB;
  1790  0014A4  0EDB               	movlw	219
  1791  0014A6  6ED7               	movwf	4055,c	;volatile
  1792                           
  1793                           ;RTDuC.c: 207: TMR0L = 0x60;
  1794  0014A8  0E60               	movlw	96
  1795  0014AA  6ED6               	movwf	4054,c	;volatile
  1796  0014AC  D000               	goto	l4395
  1797  0014AE                     l4395:
  1798  0014AE  0E01               	movlw	low _DataLodeSize
  1799  0014B0  6EF6               	movwf	tblptrl,c
  1800  0014B2                     	if	1	;There is more than 1 active tblptr byte
  1801  0014B2  0E10               	movlw	high _DataLodeSize
  1802  0014B4  6EF7               	movwf	tblptrh,c
  1803  0014B6                     	endif
  1804  0014B6                     	if	1	;There are 3 active tblptr bytes
  1805  0014B6  0E00               	movlw	low (_DataLodeSize shr (0+16))
  1806  0014B8  6EF8               	movwf	tblptru,c
  1807  0014BA                     	endif
  1808  0014BA  0009               	tblrd		*+
  1809  0014BC  50F5               	movf	tablat,w,c
  1810  0014BE  0100               	movlb	0	; () banked
  1811  0014C0  5DA7               	subwf	main@counter& (0+255),w,b
  1812  0014C2  0009               	tblrd		*+
  1813  0014C4  50F5               	movf	tablat,w,c
  1814  0014C6  0100               	movlb	0	; () banked
  1815  0014C8  59A8               	subwfb	(main@counter+1)& (0+255),w,b
  1816  0014CA  A0D8               	btfss	status,0,c
  1817  0014CC  D789               	goto	l4379
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;RTDuC.c: 208: }
  1821                           ;RTDuC.c: 209: SPIDisassembleLode(DataLode, TransmitLode);
  1822                           
  1823                           ; BSR set to: 0
  1824  0014CE  0ECD               	movlw	low _DataLode
  1825  0014D0  6E25               	movwf	SPIDisassembleLode@Data,c
  1826  0014D2  0E00               	movlw	high _DataLode
  1827  0014D4  6E26               	movwf	SPIDisassembleLode@Data+1,c
  1828  0014D6  0ED5               	movlw	low _TransmitLode
  1829  0014D8  6E27               	movwf	SPIDisassembleLode@Transmit,c
  1830  0014DA  0E07               	movlw	high _TransmitLode
  1831  0014DC  6E28               	movwf	SPIDisassembleLode@Transmit+1,c
  1832  0014DE  ECF3  F00F         	call	_SPIDisassembleLode	;wreg free
  1833                           
  1834                           ;RTDuC.c: 210: SPIRestart();
  1835  0014E2  ECCD  F016         	call	_SPIRestart	;wreg free
  1836                           
  1837                           ;RTDuC.c: 211: PORTCbits.RC6 = 0;
  1838  0014E6  9C82               	bcf	3970,6,c	;volatile
  1839                           
  1840                           ;RTDuC.c: 212: for (counter = 0; counter != TransmitLodeSize; counter++)
  1841  0014E8  0E00               	movlw	0
  1842  0014EA  0100               	movlb	0	; () banked
  1843  0014EC  6FA8               	movwf	(main@counter+1)& (0+255),b
  1844  0014EE  0E00               	movlw	0
  1845  0014F0  6FA7               	movwf	main@counter& (0+255),b
  1846  0014F2                     l4405:
  1847                           
  1848                           ; BSR set to: 0
  1849  0014F2  0E03               	movlw	low _TransmitLodeSize
  1850  0014F4  6EF6               	movwf	tblptrl,c
  1851  0014F6                     	if	1	;There is more than 1 active tblptr byte
  1852  0014F6  0E10               	movlw	high _TransmitLodeSize
  1853  0014F8  6EF7               	movwf	tblptrh,c
  1854  0014FA                     	endif
  1855  0014FA                     	if	1	;There are 3 active tblptr bytes
  1856  0014FA  0E00               	movlw	low (_TransmitLodeSize shr (0+16))
  1857  0014FC  6EF8               	movwf	tblptru,c
  1858  0014FE                     	endif
  1859  0014FE  0009               	tblrd		*+
  1860  001500  50F5               	movf	tablat,w,c
  1861  001502  0100               	movlb	0	; () banked
  1862  001504  19A7               	xorwf	main@counter& (0+255),w,b
  1863  001506  E108               	bnz	l4409
  1864  001508  0009               	tblrd		*+
  1865  00150A  50F5               	movf	tablat,w,c
  1866  00150C  0100               	movlb	0	; () banked
  1867  00150E  19A8               	xorwf	(main@counter+1)& (0+255),w,b
  1868  001510  B4D8               	btfsc	status,2,c
  1869  001512  D012               	goto	l577
  1870  001514  D001               	goto	l4409
  1871                           
  1872                           ; BSR set to: 0
  1873  001516  D010               	goto	l577
  1874  001518                     l4409:
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;RTDuC.c: 213: SendSPI1(TransmitLode[counter]);
  1878  001518  0ED5               	movlw	low _TransmitLode
  1879  00151A  0100               	movlb	0	; () banked
  1880  00151C  25A7               	addwf	main@counter& (0+255),w,b
  1881  00151E  6ED9               	movwf	fsr2l,c
  1882  001520  0E07               	movlw	high _TransmitLode
  1883  001522  0100               	movlb	0	; () banked
  1884  001524  21A8               	addwfc	(main@counter+1)& (0+255),w,b
  1885  001526  6EDA               	movwf	fsr2h,c
  1886  001528  50DF               	movf	indf2,w,c
  1887  00152A  ECBE  F015         	call	_SendSPI1
  1888  00152E  0100               	movlb	0	; () banked
  1889  001530  4BA7               	infsnz	main@counter& (0+255),f,b
  1890  001532  2BA8               	incf	(main@counter+1)& (0+255),f,b
  1891  001534  D7DE               	goto	l4405
  1892                           
  1893                           ; BSR set to: 0
  1894  001536  D7F0               	goto	l4409
  1895  001538                     l577:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;RTDuC.c: 214: PORTCbits.RC6 = 1;
  1899  001538  8C82               	bsf	3970,6,c	;volatile
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;RTDuC.c: 215: SPIRestart();
  1903  00153A  ECCD  F016         	call	_SPIRestart	;wreg free
  1904                           
  1905                           ;RTDuC.c: 216: RECFlag = 0;
  1906  00153E  0E00               	movlw	0
  1907  001540  0100               	movlb	0	; () banked
  1908  001542  6FC6               	movwf	_RECFlag& (0+255),b
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;RTDuC.c: 217: INTCONbits.TMR0IE = 1;
  1912  001544  8AF2               	bsf	intcon,5,c	;volatile
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;RTDuC.c: 218: INTCONbits.PEIE = 1;
  1916  001546  8CF2               	bsf	intcon,6,c	;volatile
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;RTDuC.c: 219: INTCONbits.GIE = 1;
  1920  001548  8EF2               	bsf	intcon,7,c	;volatile
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;RTDuC.c: 220: SetAngle = saveSP;
  1924  00154A  C0A3  F03C         	movff	main@saveSP,_SetAngle
  1925  00154E  C0A4  F03D         	movff	main@saveSP+1,_SetAngle+1
  1926  001552  C0A5  F03E         	movff	main@saveSP+2,_SetAngle+2
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;RTDuC.c: 221: PIDEnableFlag = 3;
  1930  001556  0E03               	movlw	3
  1931  001558  0100               	movlb	0	; () banked
  1932  00155A  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1933                           
  1934                           ; BSR set to: 0
  1935                           
  1936                           ; BSR set to: 0
  1937  00155C  D565               	goto	l4185
  1938                           
  1939                           ; BSR set to: 0
  1940                           
  1941                           ; BSR set to: 0
  1942  00155E  EF0C  F000         	goto	start
  1943  001562                     __end_of_main:
  1944                           	opt stack 0
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           prodh	equ	0xFF4
  1950                           prodl	equ	0xFF3
  1951                           intcon	equ	0xFF2
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postdec1	equ	0xFE5
  1955                           fsr1h	equ	0xFE2
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           postinc2	equ	0xFDE
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _initialize *****************
  1964 ;; Defined at:
  1965 ;;		line 228 in file "RTDuC.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;		None               void
  1972 ;; Registers used:
  1973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;Total ram usage:        0 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    9
  1986 ;; This function calls:
  1987 ;;		_EEPROMInit
  1988 ;;		_InitializeInterrupts
  1989 ;;		_JoystickInit
  1990 ;;		_MotorDriverInit
  1991 ;;		_PIDInit
  1992 ;;		_RTDInit
  1993 ;;		_RecTmrInit
  1994 ;;		_SPIInit
  1995 ;;		_ZeroMotors
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text1
  2002  002AEC                     __ptext1:
  2003                           	opt stack 0
  2004  002AEC                     _initialize:
  2005                           	opt stack 21
  2006                           
  2007                           ;RTDuC.c: 230: while (OSCCONbits.OSTS == 0);
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;incstack = 0
  2011  002AEC  D000               	goto	l583
  2012  002AEE                     l583:
  2013  002AEE  A6D3               	btfss	4051,3,c	;volatile
  2014  002AF0  D7FE               	goto	l583
  2015                           
  2016                           ;RTDuC.c: 231: PORTCbits.RC6 = 1;
  2017  002AF2  8C82               	bsf	3970,6,c	;volatile
  2018                           
  2019                           ;RTDuC.c: 233: RTDInit();
  2020  002AF4  EC8F  F015         	call	_RTDInit	;wreg free
  2021                           
  2022                           ;RTDuC.c: 234: SPIInit();
  2023  002AF8  ECB3  F016         	call	_SPIInit	;wreg free
  2024                           
  2025                           ;RTDuC.c: 235: JoystickInit();
  2026  002AFC  ECA7  F015         	call	_JoystickInit	;wreg free
  2027                           
  2028                           ;RTDuC.c: 236: MotorDriverInit();
  2029  002B00  EC4C  F016         	call	_MotorDriverInit	;wreg free
  2030                           
  2031                           ;RTDuC.c: 237: PIDInit();
  2032  002B04  EC3C  F014         	call	_PIDInit	;wreg free
  2033                           
  2034                           ;RTDuC.c: 238: ZeroMotors();
  2035  002B08  EC96  F00D         	call	_ZeroMotors	;wreg free
  2036                           
  2037                           ;RTDuC.c: 239: EEPROMInit();
  2038  002B0C  ECD9  F016         	call	_EEPROMInit	;wreg free
  2039                           
  2040                           ;RTDuC.c: 240: RecTmrInit();
  2041  002B10  EC0F  F017         	call	_RecTmrInit	;wreg free
  2042                           
  2043                           ;RTDuC.c: 242: InitializeInterrupts();
  2044  002B14  EC04  F017         	call	_InitializeInterrupts	;wreg free
  2045                           
  2046                           ;RTDuC.c: 243: TRISAbits.RA3 = 0;
  2047  002B18  9692               	bcf	3986,3,c	;volatile
  2048                           
  2049                           ;RTDuC.c: 244: PORTAbits.RA3 = 1;
  2050  002B1A  8680               	bsf	3968,3,c	;volatile
  2051  002B1C  0012               	return		;funcret
  2052  002B1E                     __end_of_initialize:
  2053                           	opt stack 0
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodh	equ	0xFF4
  2059                           prodl	equ	0xFF3
  2060                           intcon	equ	0xFF2
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           postdec1	equ	0xFE5
  2064                           fsr1h	equ	0xFE2
  2065                           fsr1l	equ	0xFE1
  2066                           indf2	equ	0xFDF
  2067                           postinc2	equ	0xFDE
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _ZeroMotors *****************
  2073 ;; Defined at:
  2074 ;;		line 325 in file "RTDuC.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  PrevAngle       3   54[BANK0 ] unsigned char 
  2079 ;;  average         3   51[BANK0 ] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;		None               void
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;Total ram usage:        6 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    8
  2096 ;; This function calls:
  2097 ;;		_ImplementPIDMotion
  2098 ;;		_RTD2Angle
  2099 ;;		_ReadRTDpos
  2100 ;;		___ftadd
  2101 ;;		___ftdiv
  2102 ;;		___ftge
  2103 ;;		___fttol
  2104 ;;		_abs
  2105 ;;		_calculatePID
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;;		_initialize
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text2
  2113  001B2C                     __ptext2:
  2114                           	opt stack 0
  2115  001B2C                     _ZeroMotors:
  2116                           	opt stack 21
  2117                           
  2118                           ;RTDuC.c: 327: double average, PrevAngle;
  2119                           ;RTDuC.c: 328: Ki = 2;
  2120                           
  2121                           ;incstack = 0
  2122  001B2C  0E00               	movlw	0
  2123  001B2E  0100               	movlb	0	; () banked
  2124  001B30  6FB3               	movwf	_Ki& (0+255),b
  2125  001B32  0E00               	movlw	0
  2126  001B34  0100               	movlb	0	; () banked
  2127  001B36  6FB4               	movwf	(_Ki+1)& (0+255),b
  2128  001B38  0E40               	movlw	64
  2129  001B3A  0100               	movlb	0	; () banked
  2130  001B3C  6FB5               	movwf	(_Ki+2)& (0+255),b
  2131                           
  2132                           ;RTDuC.c: 329: Kp = 0.5;
  2133  001B3E  0E00               	movlw	0
  2134  001B40  0100               	movlb	0	; () banked
  2135  001B42  6FB6               	movwf	_Kp& (0+255),b
  2136  001B44  0E00               	movlw	0
  2137  001B46  0100               	movlb	0	; () banked
  2138  001B48  6FB7               	movwf	(_Kp+1)& (0+255),b
  2139  001B4A  0E3F               	movlw	63
  2140  001B4C  0100               	movlb	0	; () banked
  2141  001B4E  6FB8               	movwf	(_Kp+2)& (0+255),b
  2142                           
  2143                           ;RTDuC.c: 330: Kd = 0;
  2144  001B50  0E00               	movlw	0
  2145  001B52  0100               	movlb	0	; () banked
  2146  001B54  6FB0               	movwf	_Kd& (0+255),b
  2147  001B56  0E00               	movlw	0
  2148  001B58  0100               	movlb	0	; () banked
  2149  001B5A  6FB1               	movwf	(_Kd+1)& (0+255),b
  2150  001B5C  0E00               	movlw	0
  2151  001B5E  0100               	movlb	0	; () banked
  2152  001B60  6FB2               	movwf	(_Kd+2)& (0+255),b
  2153                           
  2154                           ;RTDuC.c: 331: TMR0H = 0xDB;
  2155  001B62  0EDB               	movlw	219
  2156  001B64  6ED7               	movwf	4055,c	;volatile
  2157                           
  2158                           ;RTDuC.c: 332: TMR0L = 0x60;
  2159  001B66  0E60               	movlw	96
  2160  001B68  6ED6               	movwf	4054,c	;volatile
  2161                           
  2162                           ;RTDuC.c: 333: PIDEnableFlag = 3;
  2163  001B6A  0E03               	movlw	3
  2164  001B6C  0100               	movlb	0	; () banked
  2165  001B6E  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  2166                           
  2167                           ;RTDuC.c: 334: SetAngle = 0;
  2168  001B70  0E00               	movlw	0
  2169  001B72  6E3C               	movwf	_SetAngle,c
  2170  001B74  0E00               	movlw	0
  2171  001B76  6E3D               	movwf	_SetAngle+1,c
  2172  001B78  0E00               	movlw	0
  2173  001B7A  6E3E               	movwf	_SetAngle+2,c
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;RTDuC.c: 335: INTCONbits.GIE = 0;
  2177  001B7C  9EF2               	bcf	intcon,7,c	;volatile
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;RTDuC.c: 336: INTCONbits.PEIE = 0;
  2181  001B7E  9CF2               	bcf	intcon,6,c	;volatile
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;RTDuC.c: 337: T0CONbits.TMR0ON = 1;
  2185  001B80  8ED5               	bsf	4053,7,c	;volatile
  2186  001B82  D000               	goto	l4137
  2187  001B84                     l4137:
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;RTDuC.c: 339: {
  2191                           ;RTDuC.c: 340: CurrentAngle = RTD2Angle(ReadRTDpos());
  2192  001B84  EC14  F013         	call	_ReadRTDpos	;wreg free
  2193  001B88  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  2194  001B8C  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  2195  001B90  EC03  F015         	call	_RTD2Angle	;wreg free
  2196  001B94  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  2197  001B98  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  2198  001B9C  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  2199                           
  2200                           ;RTDuC.c: 341: calculatePID(CurrentAngle, SetAngle);
  2201  001BA0  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  2202  001BA4  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  2203  001BA8  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  2204  001BAC  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  2205  001BB0  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  2206  001BB4  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  2207  001BB8  ECB1  F00A         	call	_calculatePID	;wreg free
  2208                           
  2209                           ;RTDuC.c: 342: ImplementPIDMotion(motorInput);
  2210  001BBC  C0C2  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  2211  001BC0  C0C3  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  2212  001BC4  EC7E  F011         	call	_ImplementPIDMotion	;wreg free
  2213                           
  2214                           ;RTDuC.c: 343: while (INTCONbits.TMR0IF == 0);
  2215  001BC8  D000               	goto	l613
  2216  001BCA                     l613:
  2217  001BCA  A4F2               	btfss	intcon,2,c	;volatile
  2218  001BCC  D7FE               	goto	l613
  2219                           
  2220                           ;RTDuC.c: 344: INTCONbits.TMR0IF = 0;
  2221  001BCE  94F2               	bcf	intcon,2,c	;volatile
  2222                           
  2223                           ;RTDuC.c: 345: TMR0H = 0xDB;
  2224  001BD0  0EDB               	movlw	219
  2225  001BD2  6ED7               	movwf	4055,c	;volatile
  2226                           
  2227                           ;RTDuC.c: 346: TMR0L = 0x60;
  2228  001BD4  0E60               	movlw	96
  2229  001BD6  6ED6               	movwf	4054,c	;volatile
  2230                           
  2231                           ;RTDuC.c: 347: average = (PrevAngle + CurrentAngle) / 2;
  2232  001BD8  C0AA  F023         	movff	_CurrentAngle,___ftadd@f2
  2233  001BDC  C0AB  F024         	movff	_CurrentAngle+1,___ftadd@f2+1
  2234  001BE0  C0AC  F025         	movff	_CurrentAngle+2,___ftadd@f2+2
  2235  001BE4  C096  F020         	movff	ZeroMotors@PrevAngle,___ftadd@f1
  2236  001BE8  C097  F021         	movff	ZeroMotors@PrevAngle+1,___ftadd@f1+1
  2237  001BEC  C098  F022         	movff	ZeroMotors@PrevAngle+2,___ftadd@f1+2
  2238  001BF0  EC06  F00C         	call	___ftadd	;wreg free
  2239  001BF4  C020  F02C         	movff	?___ftadd,___ftdiv@f1
  2240  001BF8  C021  F02D         	movff	?___ftadd+1,___ftdiv@f1+1
  2241  001BFC  C022  F02E         	movff	?___ftadd+2,___ftdiv@f1+2
  2242  001C00  0E00               	movlw	0
  2243  001C02  6E2F               	movwf	___ftdiv@f2,c
  2244  001C04  0E00               	movlw	0
  2245  001C06  6E30               	movwf	___ftdiv@f2+1,c
  2246  001C08  0E40               	movlw	64
  2247  001C0A  6E31               	movwf	___ftdiv@f2+2,c
  2248  001C0C  EC73  F00F         	call	___ftdiv	;wreg free
  2249  001C10  C02C  F093         	movff	?___ftdiv,ZeroMotors@average
  2250  001C14  C02D  F094         	movff	?___ftdiv+1,ZeroMotors@average+1
  2251  001C18  C02E  F095         	movff	?___ftdiv+2,ZeroMotors@average+2
  2252                           
  2253                           ;RTDuC.c: 348: PrevAngle = CurrentAngle;
  2254  001C1C  C0AA  F096         	movff	_CurrentAngle,ZeroMotors@PrevAngle
  2255  001C20  C0AB  F097         	movff	_CurrentAngle+1,ZeroMotors@PrevAngle+1
  2256  001C24  C0AC  F098         	movff	_CurrentAngle+2,ZeroMotors@PrevAngle+2
  2257                           
  2258                           ;RTDuC.c: 349: }
  2259                           ;RTDuC.c: 350: while ((average > 1) && (abs(error) > 1));
  2260  001C28  0E00               	movlw	0
  2261  001C2A  6E18               	movwf	___ftge@ff1,c
  2262  001C2C  0E80               	movlw	128
  2263  001C2E  6E19               	movwf	___ftge@ff1+1,c
  2264  001C30  0E3F               	movlw	63
  2265  001C32  6E1A               	movwf	___ftge@ff1+2,c
  2266  001C34  C093  F01B         	movff	ZeroMotors@average,___ftge@ff2
  2267  001C38  C094  F01C         	movff	ZeroMotors@average+1,___ftge@ff2+1
  2268  001C3C  C095  F01D         	movff	ZeroMotors@average+2,___ftge@ff2+2
  2269  001C40  EC22  F012         	call	___ftge	;wreg free
  2270  001C44  B0D8               	btfsc	status,0,c
  2271  001C46  D01B               	goto	l619
  2272  001C48  C0B9  F075         	movff	_error,___fttol@f1
  2273  001C4C  C0BA  F076         	movff	_error+1,___fttol@f1+1
  2274  001C50  C0BB  F077         	movff	_error+2,___fttol@f1+2
  2275  001C54  ECDA  F00E         	call	___fttol	;wreg free
  2276  001C58  C075  F084         	movff	?___fttol,abs@a
  2277  001C5C  C076  F085         	movff	?___fttol+1,abs@a+1
  2278  001C60  ECD5  F015         	call	_abs	;wreg free
  2279  001C64  0100               	movlb	0	; () banked
  2280  001C66  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  2281  001C68  D00A               	goto	l619
  2282  001C6A  0100               	movlb	0	; () banked
  2283  001C6C  5185               	movf	(?_abs+1)& (0+255),w,b
  2284  001C6E  E18A               	bnz	l4137
  2285  001C70  0E02               	movlw	2
  2286  001C72  0100               	movlb	0	; () banked
  2287  001C74  5D84               	subwf	?_abs& (0+255),w,b
  2288  001C76  A0D8               	btfss	status,0,c
  2289  001C78  D002               	goto	l619
  2290  001C7A  D784               	goto	l4137
  2291                           
  2292                           ; BSR set to: 0
  2293  001C7C  D000               	goto	l619
  2294  001C7E                     l619:
  2295  001C7E  0012               	return		;funcret
  2296  001C80                     __end_of_ZeroMotors:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           intcon	equ	0xFF2
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1h	equ	0xFE2
  2309                           fsr1l	equ	0xFE1
  2310                           indf2	equ	0xFDF
  2311                           postinc2	equ	0xFDE
  2312                           fsr2h	equ	0xFDA
  2313                           fsr2l	equ	0xFD9
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function _calculatePID *****************
  2317 ;; Defined at:
  2318 ;;		line 29 in file "PID.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  angle           3   36[BANK0 ] unsigned char 
  2321 ;;  setpoint        3   39[BANK0 ] unsigned char 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  derErr          3   42[BANK0 ] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:       15 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    7
  2340 ;; This function calls:
  2341 ;;		___ftadd
  2342 ;;		___ftdiv
  2343 ;;		___ftge
  2344 ;;		___ftmul
  2345 ;;		___ftneg
  2346 ;;		___ftsub
  2347 ;;		___fttol
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;;		_ZeroMotors
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text3
  2355  001562                     __ptext3:
  2356                           	opt stack 0
  2357  001562                     _calculatePID:
  2358                           	opt stack 21
  2359                           
  2360                           ;PID.c: 31: double derErr;
  2361                           ;PID.c: 32: if (PIDEnableFlag == 3)
  2362                           
  2363                           ;incstack = 0
  2364  001562  0E03               	movlw	3
  2365  001564  0100               	movlb	0	; () banked
  2366  001566  19C5               	xorwf	_PIDEnableFlag& (0+255),w,b
  2367  001568  A4D8               	btfss	status,2,c
  2368  00156A  D01F               	goto	l4105
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;PID.c: 33: {
  2372                           ;PID.c: 34: error = 0;
  2373  00156C  0E00               	movlw	0
  2374  00156E  0100               	movlb	0	; () banked
  2375  001570  6FB9               	movwf	_error& (0+255),b
  2376  001572  0E00               	movlw	0
  2377  001574  0100               	movlb	0	; () banked
  2378  001576  6FBA               	movwf	(_error+1)& (0+255),b
  2379  001578  0E00               	movlw	0
  2380  00157A  0100               	movlb	0	; () banked
  2381  00157C  6FBB               	movwf	(_error+2)& (0+255),b
  2382                           
  2383                           ;PID.c: 35: prevErr = 0;
  2384  00157E  0E00               	movlw	0
  2385  001580  0100               	movlb	0	; () banked
  2386  001582  6FBF               	movwf	_prevErr& (0+255),b
  2387  001584  0E00               	movlw	0
  2388  001586  0100               	movlb	0	; () banked
  2389  001588  6FC0               	movwf	(_prevErr+1)& (0+255),b
  2390  00158A  0E00               	movlw	0
  2391  00158C  0100               	movlb	0	; () banked
  2392  00158E  6FC1               	movwf	(_prevErr+2)& (0+255),b
  2393                           
  2394                           ;PID.c: 36: intErr = 0;
  2395  001590  0E00               	movlw	0
  2396  001592  0100               	movlb	0	; () banked
  2397  001594  6FBC               	movwf	_intErr& (0+255),b
  2398  001596  0E00               	movlw	0
  2399  001598  0100               	movlb	0	; () banked
  2400  00159A  6FBD               	movwf	(_intErr+1)& (0+255),b
  2401  00159C  0E00               	movlw	0
  2402  00159E  0100               	movlb	0	; () banked
  2403  0015A0  6FBE               	movwf	(_intErr+2)& (0+255),b
  2404                           
  2405                           ;PID.c: 37: PIDEnableFlag = 1;
  2406  0015A2  0E01               	movlw	1
  2407  0015A4  0100               	movlb	0	; () banked
  2408  0015A6  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  2409  0015A8  D000               	goto	l4105
  2410  0015AA                     l4105:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;PID.c: 38: }
  2414                           ;PID.c: 40: error = setpoint - angle;
  2415  0015AA  C084  F018         	movff	calculatePID@angle,___ftneg@f1
  2416  0015AE  C085  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  2417  0015B2  C086  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  2418  0015B6  EC3A  F016         	call	___ftneg	;wreg free
  2419  0015BA  C018  F020         	movff	?___ftneg,___ftadd@f1
  2420  0015BE  C019  F021         	movff	?___ftneg+1,___ftadd@f1+1
  2421  0015C2  C01A  F022         	movff	?___ftneg+2,___ftadd@f1+2
  2422  0015C6  C087  F023         	movff	calculatePID@setpoint,___ftadd@f2
  2423  0015CA  C088  F024         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2424  0015CE  C089  F025         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2425  0015D2  EC06  F00C         	call	___ftadd	;wreg free
  2426  0015D6  C020  F0B9         	movff	?___ftadd,_error
  2427  0015DA  C021  F0BA         	movff	?___ftadd+1,_error+1
  2428  0015DE  C022  F0BB         	movff	?___ftadd+2,_error+2
  2429                           
  2430                           ;PID.c: 41: if (error > 180)
  2431  0015E2  0E00               	movlw	0
  2432  0015E4  6E18               	movwf	___ftge@ff1,c
  2433  0015E6  0E34               	movlw	52
  2434  0015E8  6E19               	movwf	___ftge@ff1+1,c
  2435  0015EA  0E43               	movlw	67
  2436  0015EC  6E1A               	movwf	___ftge@ff1+2,c
  2437  0015EE  C0B9  F01B         	movff	_error,___ftge@ff2
  2438  0015F2  C0BA  F01C         	movff	_error+1,___ftge@ff2+1
  2439  0015F6  C0BB  F01D         	movff	_error+2,___ftge@ff2+2
  2440  0015FA  EC22  F012         	call	___ftge	;wreg free
  2441  0015FE  B0D8               	btfsc	status,0,c
  2442  001600  D015               	goto	l4111
  2443                           
  2444                           ;PID.c: 42: error -= 360;
  2445  001602  C0B9  F02C         	movff	_error,___ftsub@f1
  2446  001606  C0BA  F02D         	movff	_error+1,___ftsub@f1+1
  2447  00160A  C0BB  F02E         	movff	_error+2,___ftsub@f1+2
  2448  00160E  0E00               	movlw	0
  2449  001610  6E2F               	movwf	___ftsub@f2,c
  2450  001612  0EB4               	movlw	180
  2451  001614  6E30               	movwf	___ftsub@f2+1,c
  2452  001616  0E43               	movlw	67
  2453  001618  6E31               	movwf	___ftsub@f2+2,c
  2454  00161A  EC1A  F014         	call	___ftsub	;wreg free
  2455  00161E  C02C  F0B9         	movff	?___ftsub,_error
  2456  001622  C02D  F0BA         	movff	?___ftsub+1,_error+1
  2457  001626  C02E  F0BB         	movff	?___ftsub+2,_error+2
  2458  00162A  D025               	goto	l149
  2459  00162C                     l4111:
  2460                           
  2461                           ;PID.c: 43: else if (error < -180)
  2462  00162C  C0B9  F018         	movff	_error,___ftge@ff1
  2463  001630  C0BA  F019         	movff	_error+1,___ftge@ff1+1
  2464  001634  C0BB  F01A         	movff	_error+2,___ftge@ff1+2
  2465  001638  0E00               	movlw	0
  2466  00163A  6E1B               	movwf	___ftge@ff2,c
  2467  00163C  0E34               	movlw	52
  2468  00163E  6E1C               	movwf	___ftge@ff2+1,c
  2469  001640  0EC3               	movlw	195
  2470  001642  6E1D               	movwf	___ftge@ff2+2,c
  2471  001644  EC22  F012         	call	___ftge	;wreg free
  2472  001648  B0D8               	btfsc	status,0,c
  2473  00164A  D015               	goto	l149
  2474                           
  2475                           ;PID.c: 44: error += 360;
  2476  00164C  C0B9  F020         	movff	_error,___ftadd@f1
  2477  001650  C0BA  F021         	movff	_error+1,___ftadd@f1+1
  2478  001654  C0BB  F022         	movff	_error+2,___ftadd@f1+2
  2479  001658  0E00               	movlw	0
  2480  00165A  6E23               	movwf	___ftadd@f2,c
  2481  00165C  0EB4               	movlw	180
  2482  00165E  6E24               	movwf	___ftadd@f2+1,c
  2483  001660  0E43               	movlw	67
  2484  001662  6E25               	movwf	___ftadd@f2+2,c
  2485  001664  EC06  F00C         	call	___ftadd	;wreg free
  2486  001668  C020  F0B9         	movff	?___ftadd,_error
  2487  00166C  C021  F0BA         	movff	?___ftadd+1,_error+1
  2488  001670  C022  F0BB         	movff	?___ftadd+2,_error+2
  2489  001674  D000               	goto	l149
  2490  001676                     l149:
  2491                           
  2492                           ;PID.c: 46: derErr = error - prevErr;
  2493  001676  C0BF  F018         	movff	_prevErr,___ftneg@f1
  2494  00167A  C0C0  F019         	movff	_prevErr+1,___ftneg@f1+1
  2495  00167E  C0C1  F01A         	movff	_prevErr+2,___ftneg@f1+2
  2496  001682  EC3A  F016         	call	___ftneg	;wreg free
  2497  001686  C018  F020         	movff	?___ftneg,___ftadd@f1
  2498  00168A  C019  F021         	movff	?___ftneg+1,___ftadd@f1+1
  2499  00168E  C01A  F022         	movff	?___ftneg+2,___ftadd@f1+2
  2500  001692  C0B9  F023         	movff	_error,___ftadd@f2
  2501  001696  C0BA  F024         	movff	_error+1,___ftadd@f2+1
  2502  00169A  C0BB  F025         	movff	_error+2,___ftadd@f2+2
  2503  00169E  EC06  F00C         	call	___ftadd	;wreg free
  2504  0016A2  C020  F08A         	movff	?___ftadd,calculatePID@derErr
  2505  0016A6  C021  F08B         	movff	?___ftadd+1,calculatePID@derErr+1
  2506  0016AA  C022  F08C         	movff	?___ftadd+2,calculatePID@derErr+2
  2507                           
  2508                           ;PID.c: 47: intErr += error;
  2509  0016AE  C0BC  F020         	movff	_intErr,___ftadd@f1
  2510  0016B2  C0BD  F021         	movff	_intErr+1,___ftadd@f1+1
  2511  0016B6  C0BE  F022         	movff	_intErr+2,___ftadd@f1+2
  2512  0016BA  C0B9  F023         	movff	_error,___ftadd@f2
  2513  0016BE  C0BA  F024         	movff	_error+1,___ftadd@f2+1
  2514  0016C2  C0BB  F025         	movff	_error+2,___ftadd@f2+2
  2515  0016C6  EC06  F00C         	call	___ftadd	;wreg free
  2516  0016CA  C020  F0BC         	movff	?___ftadd,_intErr
  2517  0016CE  C021  F0BD         	movff	?___ftadd+1,_intErr+1
  2518  0016D2  C022  F0BE         	movff	?___ftadd+2,_intErr+2
  2519                           
  2520                           ;PID.c: 48: if (intErr > 2000)
  2521  0016D6  0E00               	movlw	0
  2522  0016D8  6E18               	movwf	___ftge@ff1,c
  2523  0016DA  0EFA               	movlw	250
  2524  0016DC  6E19               	movwf	___ftge@ff1+1,c
  2525  0016DE  0E44               	movlw	68
  2526  0016E0  6E1A               	movwf	___ftge@ff1+2,c
  2527  0016E2  C0BC  F01B         	movff	_intErr,___ftge@ff2
  2528  0016E6  C0BD  F01C         	movff	_intErr+1,___ftge@ff2+1
  2529  0016EA  C0BE  F01D         	movff	_intErr+2,___ftge@ff2+2
  2530  0016EE  EC22  F012         	call	___ftge	;wreg free
  2531  0016F2  B0D8               	btfsc	status,0,c
  2532  0016F4  D00A               	goto	l4117
  2533                           
  2534                           ;PID.c: 49: intErr = 2000;
  2535  0016F6  0E00               	movlw	0
  2536  0016F8  0100               	movlb	0	; () banked
  2537  0016FA  6FBC               	movwf	_intErr& (0+255),b
  2538  0016FC  0EFA               	movlw	250
  2539  0016FE  0100               	movlb	0	; () banked
  2540  001700  6FBD               	movwf	(_intErr+1)& (0+255),b
  2541  001702  0E44               	movlw	68
  2542  001704  0100               	movlb	0	; () banked
  2543  001706  6FBE               	movwf	(_intErr+2)& (0+255),b
  2544  001708  D000               	goto	l4117
  2545  00170A                     l4117:
  2546                           
  2547                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2548  00170A  C0BC  F069         	movff	_intErr,___ftmul@f2
  2549  00170E  C0BD  F06A         	movff	_intErr+1,___ftmul@f2+1
  2550  001712  C0BE  F06B         	movff	_intErr+2,___ftmul@f2+2
  2551  001716  C0B3  F066         	movff	_Ki,___ftmul@f1
  2552  00171A  C0B4  F067         	movff	_Ki+1,___ftmul@f1+1
  2553  00171E  C0B5  F068         	movff	_Ki+2,___ftmul@f1+2
  2554  001722  ECE8  F00C         	call	___ftmul	;wreg free
  2555  001726  C066  F08D         	movff	?___ftmul,_calculatePID$3484
  2556  00172A  C067  F08E         	movff	?___ftmul+1,_calculatePID$3484+1
  2557  00172E  C068  F08F         	movff	?___ftmul+2,_calculatePID$3484+2
  2558                           
  2559                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2560  001732  C0CA  F069         	movff	_loopTime,___ftmul@f2
  2561  001736  C0CB  F06A         	movff	_loopTime+1,___ftmul@f2+1
  2562  00173A  C0CC  F06B         	movff	_loopTime+2,___ftmul@f2+2
  2563  00173E  C08D  F066         	movff	_calculatePID$3484,___ftmul@f1
  2564  001742  C08E  F067         	movff	_calculatePID$3484+1,___ftmul@f1+1
  2565  001746  C08F  F068         	movff	_calculatePID$3484+2,___ftmul@f1+2
  2566  00174A  ECE8  F00C         	call	___ftmul	;wreg free
  2567  00174E  C066  F023         	movff	?___ftmul,___ftadd@f2
  2568  001752  C067  F024         	movff	?___ftmul+1,___ftadd@f2+1
  2569  001756  C068  F025         	movff	?___ftmul+2,___ftadd@f2+2
  2570  00175A  C0B9  F069         	movff	_error,___ftmul@f2
  2571  00175E  C0BA  F06A         	movff	_error+1,___ftmul@f2+1
  2572  001762  C0BB  F06B         	movff	_error+2,___ftmul@f2+2
  2573  001766  C0B6  F066         	movff	_Kp,___ftmul@f1
  2574  00176A  C0B7  F067         	movff	_Kp+1,___ftmul@f1+1
  2575  00176E  C0B8  F068         	movff	_Kp+2,___ftmul@f1+2
  2576  001772  ECE8  F00C         	call	___ftmul	;wreg free
  2577  001776  C066  F020         	movff	?___ftmul,___ftadd@f1
  2578  00177A  C067  F021         	movff	?___ftmul+1,___ftadd@f1+1
  2579  00177E  C068  F022         	movff	?___ftmul+2,___ftadd@f1+2
  2580  001782  EC06  F00C         	call	___ftadd	;wreg free
  2581  001786  C020  F090         	movff	?___ftadd,_calculatePID$3485
  2582  00178A  C021  F091         	movff	?___ftadd+1,_calculatePID$3485+1
  2583  00178E  C022  F092         	movff	?___ftadd+2,_calculatePID$3485+2
  2584                           
  2585                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2586  001792  C0B0  F069         	movff	_Kd,___ftmul@f2
  2587  001796  C0B1  F06A         	movff	_Kd+1,___ftmul@f2+1
  2588  00179A  C0B2  F06B         	movff	_Kd+2,___ftmul@f2+2
  2589  00179E  C0CA  F02F         	movff	_loopTime,___ftdiv@f2
  2590  0017A2  C0CB  F030         	movff	_loopTime+1,___ftdiv@f2+1
  2591  0017A6  C0CC  F031         	movff	_loopTime+2,___ftdiv@f2+2
  2592  0017AA  C08A  F02C         	movff	calculatePID@derErr,___ftdiv@f1
  2593  0017AE  C08B  F02D         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2594  0017B2  C08C  F02E         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2595  0017B6  EC73  F00F         	call	___ftdiv	;wreg free
  2596  0017BA  C02C  F066         	movff	?___ftdiv,___ftmul@f1
  2597  0017BE  C02D  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  2598  0017C2  C02E  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  2599  0017C6  ECE8  F00C         	call	___ftmul	;wreg free
  2600  0017CA  C066  F023         	movff	?___ftmul,___ftadd@f2
  2601  0017CE  C067  F024         	movff	?___ftmul+1,___ftadd@f2+1
  2602  0017D2  C068  F025         	movff	?___ftmul+2,___ftadd@f2+2
  2603  0017D6  C090  F020         	movff	_calculatePID$3485,___ftadd@f1
  2604  0017DA  C091  F021         	movff	_calculatePID$3485+1,___ftadd@f1+1
  2605  0017DE  C092  F022         	movff	_calculatePID$3485+2,___ftadd@f1+2
  2606  0017E2  EC06  F00C         	call	___ftadd	;wreg free
  2607  0017E6  C020  F075         	movff	?___ftadd,___fttol@f1
  2608  0017EA  C021  F076         	movff	?___ftadd+1,___fttol@f1+1
  2609  0017EE  C022  F077         	movff	?___ftadd+2,___fttol@f1+2
  2610  0017F2  ECDA  F00E         	call	___fttol	;wreg free
  2611  0017F6  C075  F0C2         	movff	?___fttol,_motorInput
  2612  0017FA  C076  F0C3         	movff	?___fttol+1,_motorInput+1
  2613                           
  2614                           ;PID.c: 53: prevErr = error;
  2615  0017FE  C0B9  F0BF         	movff	_error,_prevErr
  2616  001802  C0BA  F0C0         	movff	_error+1,_prevErr+1
  2617  001806  C0BB  F0C1         	movff	_error+2,_prevErr+2
  2618  00180A  0012               	return		;funcret
  2619  00180C                     __end_of_calculatePID:
  2620                           	opt stack 0
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           intcon	equ	0xFF2
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           postdec1	equ	0xFE5
  2631                           fsr1h	equ	0xFE2
  2632                           fsr1l	equ	0xFE1
  2633                           indf2	equ	0xFDF
  2634                           postinc2	equ	0xFDE
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function ___fttol *****************
  2640 ;; Defined at:
  2641 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  f1              3   21[BANK0 ] float 
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;  lval            4   31[BANK0 ] unsigned long 
  2646 ;;  exp1            1   35[BANK0 ] unsigned char 
  2647 ;;  sign1           1   30[BANK0 ] unsigned char 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  4   21[BANK0 ] long 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;Total ram usage:       15 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    4
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		_calculatePID
  2668 ;;		_ZeroMotors
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text4
  2673  001DB4                     __ptext4:
  2674                           	opt stack 0
  2675  001DB4                     ___fttol:
  2676                           	opt stack 23
  2677                           
  2678                           ;incstack = 0
  2679  001DB4  C077  F079         	movff	___fttol@f1+2,??___fttol
  2680  001DB8  0100               	movlb	0	; () banked
  2681  001DBA  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2682  001DBC  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2683  001DBE  0100               	movlb	0	; () banked
  2684  001DC0  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2685  001DC2  0100               	movlb	0	; () banked
  2686  001DC4  3779               	rlcf	??___fttol& (0+255),f,b
  2687  001DC6  E301               	bnc	u3471
  2688  001DC8  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2689  001DCA                     u3471:
  2690  001DCA  0100               	movlb	0	; () banked
  2691  001DCC  5179               	movf	??___fttol& (0+255),w,b
  2692  001DCE  0100               	movlb	0	; () banked
  2693  001DD0  6F83               	movwf	___fttol@exp1& (0+255),b
  2694  001DD2  0100               	movlb	0	; () banked
  2695  001DD4  5183               	movf	___fttol@exp1& (0+255),w,b
  2696  001DD6  A4D8               	btfss	status,2,c
  2697  001DD8  D002               	goto	l4057
  2698  001DDA  D051               	goto	l4081
  2699                           
  2700                           ; BSR set to: 0
  2701                           
  2702                           ; BSR set to: 0
  2703  001DDC  D083               	goto	l1128
  2704  001DDE                     l4057:
  2705                           
  2706                           ; BSR set to: 0
  2707  001DDE  0E17               	movlw	23
  2708  001DE0  0100               	movlb	0	; () banked
  2709  001DE2  6F79               	movwf	??___fttol& (0+255),b
  2710  001DE4  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2711  001DE8  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2712  001DEC  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2713  001DF0  0100               	movlb	0	; () banked
  2714  001DF2  2979               	incf	??___fttol& (0+255),w,b
  2715  001DF4  0100               	movlb	0	; () banked
  2716  001DF6  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2717  001DF8  D005               	goto	u3490
  2718  001DFA                     u3495:
  2719  001DFA  0100               	movlb	0	; () banked
  2720  001DFC  90D8               	bcf	status,0,c
  2721  001DFE  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2722  001E00  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2723  001E02  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2724  001E04                     u3490:
  2725  001E04  0100               	movlb	0	; () banked
  2726  001E06  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2727  001E08  D7F8               	goto	u3495
  2728  001E0A  0100               	movlb	0	; () banked
  2729  001E0C  517A               	movf	(??___fttol+1)& (0+255),w,b
  2730  001E0E  0100               	movlb	0	; () banked
  2731  001E10  6F7E               	movwf	___fttol@sign1& (0+255),b
  2732                           
  2733                           ; BSR set to: 0
  2734  001E12  0100               	movlb	0	; () banked
  2735  001E14  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2736                           
  2737                           ; BSR set to: 0
  2738  001E16  0EFF               	movlw	255
  2739  001E18  0100               	movlb	0	; () banked
  2740  001E1A  1775               	andwf	___fttol@f1& (0+255),f,b
  2741  001E1C  0EFF               	movlw	255
  2742  001E1E  0100               	movlb	0	; () banked
  2743  001E20  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2744  001E22  0E00               	movlw	0
  2745  001E24  0100               	movlb	0	; () banked
  2746  001E26  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2747                           
  2748                           ; BSR set to: 0
  2749  001E28  0100               	movlb	0	; () banked
  2750  001E2A  5175               	movf	___fttol@f1& (0+255),w,b
  2751  001E2C  0100               	movlb	0	; () banked
  2752  001E2E  6F7F               	movwf	___fttol@lval& (0+255),b
  2753  001E30  0100               	movlb	0	; () banked
  2754  001E32  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2755  001E34  0100               	movlb	0	; () banked
  2756  001E36  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2757  001E38  0100               	movlb	0	; () banked
  2758  001E3A  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2759  001E3C  0100               	movlb	0	; () banked
  2760  001E3E  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2761  001E40  0100               	movlb	0	; () banked
  2762  001E42  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765  001E44  0E8E               	movlw	142
  2766  001E46  0100               	movlb	0	; () banked
  2767  001E48  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2768                           
  2769                           ; BSR set to: 0
  2770  001E4A  0100               	movlb	0	; () banked
  2771  001E4C  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2772  001E4E  D013               	goto	l4079
  2773                           
  2774                           ; BSR set to: 0
  2775  001E50  0100               	movlb	0	; () banked
  2776  001E52  5183               	movf	___fttol@exp1& (0+255),w,b
  2777  001E54  0A80               	xorlw	128
  2778  001E56  0F8F               	addlw	143
  2779  001E58  B0D8               	btfsc	status,0,c
  2780  001E5A  D003               	goto	l4075
  2781  001E5C  D010               	goto	l4081
  2782                           
  2783                           ; BSR set to: 0
  2784                           
  2785                           ; BSR set to: 0
  2786  001E5E  D042               	goto	l1128
  2787                           
  2788                           ; BSR set to: 0
  2789  001E60  D000               	goto	l4075
  2790  001E62                     l4075:
  2791                           
  2792                           ; BSR set to: 0
  2793  001E62  0100               	movlb	0	; () banked
  2794  001E64  90D8               	bcf	status,0,c
  2795  001E66  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2796  001E68  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2797  001E6A  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2798  001E6C  337F               	rrcf	___fttol@lval& (0+255),f,b
  2799                           
  2800                           ; BSR set to: 0
  2801  001E6E  0100               	movlb	0	; () banked
  2802  001E70  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2803  001E72  D7F7               	goto	l4075
  2804                           
  2805                           ; BSR set to: 0
  2806  001E74  D01F               	goto	l4089
  2807  001E76                     l4079:
  2808                           
  2809                           ; BSR set to: 0
  2810  001E76  0E17               	movlw	23
  2811  001E78  0100               	movlb	0	; () banked
  2812  001E7A  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2813  001E7C  D014               	goto	l4087
  2814  001E7E                     l4081:
  2815                           
  2816                           ; BSR set to: 0
  2817  001E7E  0E00               	movlw	0
  2818  001E80  0100               	movlb	0	; () banked
  2819  001E82  6F75               	movwf	?___fttol& (0+255),b
  2820  001E84  0E00               	movlw	0
  2821  001E86  6F76               	movwf	(?___fttol+1)& (0+255),b
  2822  001E88  0E00               	movlw	0
  2823  001E8A  6F77               	movwf	(?___fttol+2)& (0+255),b
  2824  001E8C  0E00               	movlw	0
  2825  001E8E  6F78               	movwf	(?___fttol+3)& (0+255),b
  2826                           
  2827                           ; BSR set to: 0
  2828  001E90  D029               	goto	l1128
  2829                           
  2830                           ; BSR set to: 0
  2831  001E92  D009               	goto	l4087
  2832  001E94                     l4085:
  2833                           
  2834                           ; BSR set to: 0
  2835  001E94  0100               	movlb	0	; () banked
  2836  001E96  90D8               	bcf	status,0,c
  2837  001E98  377F               	rlcf	___fttol@lval& (0+255),f,b
  2838  001E9A  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2839  001E9C  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2840  001E9E  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2841  001EA0  0100               	movlb	0	; () banked
  2842  001EA2  0783               	decf	___fttol@exp1& (0+255),f,b
  2843  001EA4  D000               	goto	l4087
  2844  001EA6                     l4087:
  2845                           
  2846                           ; BSR set to: 0
  2847  001EA6  0100               	movlb	0	; () banked
  2848  001EA8  5183               	movf	___fttol@exp1& (0+255),w,b
  2849  001EAA  0100               	movlb	0	; () banked
  2850  001EAC  B4D8               	btfsc	status,2,c
  2851  001EAE  D002               	goto	l4089
  2852  001EB0  D7F1               	goto	l4085
  2853                           
  2854                           ; BSR set to: 0
  2855  001EB2  D000               	goto	l4089
  2856  001EB4                     l4089:
  2857                           
  2858                           ; BSR set to: 0
  2859  001EB4  0100               	movlb	0	; () banked
  2860  001EB6  517E               	movf	___fttol@sign1& (0+255),w,b
  2861  001EB8  0100               	movlb	0	; () banked
  2862  001EBA  B4D8               	btfsc	status,2,c
  2863  001EBC  D00A               	goto	l4093
  2864                           
  2865                           ; BSR set to: 0
  2866  001EBE  0100               	movlb	0	; () banked
  2867  001EC0  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2868  001EC2  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2869  001EC4  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2870  001EC6  6D7F               	negf	___fttol@lval& (0+255),b
  2871  001EC8  0E00               	movlw	0
  2872  001ECA  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2873  001ECC  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2874  001ECE  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2875  001ED0  D000               	goto	l4093
  2876  001ED2                     l4093:
  2877                           
  2878                           ; BSR set to: 0
  2879  001ED2  C07F  F075         	movff	___fttol@lval,?___fttol
  2880  001ED6  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2881  001EDA  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2882  001EDE  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2883  001EE2  D000               	goto	l1128
  2884  001EE4                     l1128:
  2885                           
  2886                           ; BSR set to: 0
  2887  001EE4  0012               	return		;funcret
  2888  001EE6                     __end_of___fttol:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           prodh	equ	0xFF4
  2895                           prodl	equ	0xFF3
  2896                           intcon	equ	0xFF2
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1h	equ	0xFE2
  2901                           fsr1l	equ	0xFE1
  2902                           indf2	equ	0xFDF
  2903                           postinc2	equ	0xFDE
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function ___ftsub *****************
  2909 ;; Defined at:
  2910 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  f1              3   43[COMRAM] float 
  2913 ;;  f2              3   46[COMRAM] float 
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  3   43[COMRAM] float 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        6 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    6
  2932 ;; This function calls:
  2933 ;;		___ftadd
  2934 ;; This function is called by:
  2935 ;;		_calculatePID
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text5
  2940  002834                     __ptext5:
  2941                           	opt stack 0
  2942  002834                     ___ftsub:
  2943                           	opt stack 21
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;incstack = 0
  2947  002834  502F               	movf	___ftsub@f2,w,c
  2948  002836  1030               	iorwf	___ftsub@f2+1,w,c
  2949  002838  1031               	iorwf	___ftsub@f2+2,w,c
  2950  00283A  B4D8               	btfsc	status,2,c
  2951  00283C  D007               	goto	l4047
  2952  00283E  0E00               	movlw	0
  2953  002840  1A2F               	xorwf	___ftsub@f2,f,c
  2954  002842  0E00               	movlw	0
  2955  002844  1A30               	xorwf	___ftsub@f2+1,f,c
  2956  002846  0E80               	movlw	128
  2957  002848  1A31               	xorwf	___ftsub@f2+2,f,c
  2958  00284A  D000               	goto	l4047
  2959  00284C                     l4047:
  2960  00284C  C02C  F020         	movff	___ftsub@f1,___ftadd@f1
  2961  002850  C02D  F021         	movff	___ftsub@f1+1,___ftadd@f1+1
  2962  002854  C02E  F022         	movff	___ftsub@f1+2,___ftadd@f1+2
  2963  002858  C02F  F023         	movff	___ftsub@f2,___ftadd@f2
  2964  00285C  C030  F024         	movff	___ftsub@f2+1,___ftadd@f2+1
  2965  002860  C031  F025         	movff	___ftsub@f2+2,___ftadd@f2+2
  2966  002864  EC06  F00C         	call	___ftadd	;wreg free
  2967  002868  C020  F02C         	movff	?___ftadd,?___ftsub
  2968  00286C  C021  F02D         	movff	?___ftadd+1,?___ftsub+1
  2969  002870  C022  F02E         	movff	?___ftadd+2,?___ftsub+2
  2970  002874  D000               	goto	l1124
  2971  002876                     l1124:
  2972  002876  0012               	return		;funcret
  2973  002878                     __end_of___ftsub:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           postinc0	equ	0xFEE
  2983                           wreg	equ	0xFE8
  2984                           postdec1	equ	0xFE5
  2985                           fsr1h	equ	0xFE2
  2986                           fsr1l	equ	0xFE1
  2987                           indf2	equ	0xFDF
  2988                           postinc2	equ	0xFDE
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function ___ftadd *****************
  2994 ;; Defined at:
  2995 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  f1              3   31[COMRAM] float 
  2998 ;;  f2              3   34[COMRAM] float 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  exp1            1   42[COMRAM] unsigned char 
  3001 ;;  exp2            1   41[COMRAM] unsigned char 
  3002 ;;  sign            1   40[COMRAM] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  3   31[COMRAM] float 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3012 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;Total ram usage:       12 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    5
  3019 ;; This function calls:
  3020 ;;		___ftpack
  3021 ;; This function is called by:
  3022 ;;		_calculatePID
  3023 ;;		_ZeroMotors
  3024 ;;		___ftsub
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text6
  3029  00180C                     __ptext6:
  3030                           	opt stack 0
  3031  00180C                     ___ftadd:
  3032                           	opt stack 21
  3033                           
  3034                           ;incstack = 0
  3035  00180C  C022  F026         	movff	___ftadd@f1+2,??___ftadd
  3036  001810  6A27               	clrf	(??___ftadd+1)& (0+255),c
  3037  001812  6A28               	clrf	(??___ftadd+2)& (0+255),c
  3038  001814  3421               	rlcf	___ftadd@f1+1,w,c
  3039  001816  3626               	rlcf	??___ftadd& (0+255),f,c
  3040  001818  E301               	bnc	u3141
  3041  00181A  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  3042  00181C                     u3141:
  3043  00181C  5026               	movf	??___ftadd,w,c
  3044  00181E  6E2B               	movwf	___ftadd@exp1,c
  3045  001820  C025  F026         	movff	___ftadd@f2+2,??___ftadd
  3046  001824  6A27               	clrf	(??___ftadd+1)& (0+255),c
  3047  001826  6A28               	clrf	(??___ftadd+2)& (0+255),c
  3048  001828  3424               	rlcf	___ftadd@f2+1,w,c
  3049  00182A  3626               	rlcf	??___ftadd& (0+255),f,c
  3050  00182C  E301               	bnc	u3151
  3051  00182E  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  3052  001830                     u3151:
  3053  001830  5026               	movf	??___ftadd,w,c
  3054  001832  6E2A               	movwf	___ftadd@exp2,c
  3055  001834  502B               	movf	___ftadd@exp1,w,c
  3056  001836  B4D8               	btfsc	status,2,c
  3057  001838  D00B               	goto	l1060
  3058  00183A  502A               	movf	___ftadd@exp2,w,c
  3059  00183C  5C2B               	subwf	___ftadd@exp1,w,c
  3060  00183E  B0D8               	btfsc	status,0,c
  3061  001840  D00E               	goto	l3887
  3062  001842  502B               	movf	___ftadd@exp1,w,c
  3063  001844  0800               	sublw	0
  3064  001846  242A               	addwf	___ftadd@exp2,w,c
  3065  001848  6E26               	movwf	??___ftadd& (0+255),c
  3066  00184A  0E18               	movlw	24
  3067  00184C  6426               	cpfsgt	??___ftadd,c
  3068  00184E  D007               	goto	l3887
  3069  001850                     l1060:
  3070  001850  C023  F020         	movff	___ftadd@f2,?___ftadd
  3071  001854  C024  F021         	movff	___ftadd@f2+1,?___ftadd+1
  3072  001858  C025  F022         	movff	___ftadd@f2+2,?___ftadd+2
  3073  00185C  D0B8               	goto	l1061
  3074  00185E                     l3887:
  3075  00185E  502A               	movf	___ftadd@exp2,w,c
  3076  001860  B4D8               	btfsc	status,2,c
  3077  001862  D00B               	goto	l1064
  3078  001864  502B               	movf	___ftadd@exp1,w,c
  3079  001866  5C2A               	subwf	___ftadd@exp2,w,c
  3080  001868  B0D8               	btfsc	status,0,c
  3081  00186A  D00E               	goto	l3893
  3082  00186C  502A               	movf	___ftadd@exp2,w,c
  3083  00186E  0800               	sublw	0
  3084  001870  242B               	addwf	___ftadd@exp1,w,c
  3085  001872  6E26               	movwf	??___ftadd& (0+255),c
  3086  001874  0E18               	movlw	24
  3087  001876  6426               	cpfsgt	??___ftadd,c
  3088  001878  D007               	goto	l3893
  3089  00187A                     l1064:
  3090  00187A  C020  F020         	movff	___ftadd@f1,?___ftadd
  3091  00187E  C021  F021         	movff	___ftadd@f1+1,?___ftadd+1
  3092  001882  C022  F022         	movff	___ftadd@f1+2,?___ftadd+2
  3093  001886  D0A3               	goto	l1061
  3094  001888                     l3893:
  3095  001888  0E06               	movlw	6
  3096  00188A  6E29               	movwf	___ftadd@sign,c
  3097  00188C  AE22               	btfss	___ftadd@f1+2,7,c
  3098  00188E  D002               	goto	l3899
  3099  001890  8E29               	bsf	___ftadd@sign,7,c
  3100  001892  D000               	goto	l3899
  3101  001894                     l3899:
  3102  001894  BE25               	btfsc	___ftadd@f2+2,7,c
  3103  001896  8C29               	bsf	___ftadd@sign,6,c
  3104  001898  8E21               	bsf	___ftadd@f1+1,7,c
  3105  00189A  0EFF               	movlw	255
  3106  00189C  1620               	andwf	___ftadd@f1,f,c
  3107  00189E  0EFF               	movlw	255
  3108  0018A0  1621               	andwf	___ftadd@f1+1,f,c
  3109  0018A2  0E00               	movlw	0
  3110  0018A4  1622               	andwf	___ftadd@f1+2,f,c
  3111  0018A6  8E24               	bsf	___ftadd@f2+1,7,c
  3112  0018A8  0EFF               	movlw	255
  3113  0018AA  1623               	andwf	___ftadd@f2,f,c
  3114  0018AC  0EFF               	movlw	255
  3115  0018AE  1624               	andwf	___ftadd@f2+1,f,c
  3116  0018B0  0E00               	movlw	0
  3117  0018B2  1625               	andwf	___ftadd@f2+2,f,c
  3118  0018B4  502A               	movf	___ftadd@exp2,w,c
  3119  0018B6  5C2B               	subwf	___ftadd@exp1,w,c
  3120  0018B8  B0D8               	btfsc	status,0,c
  3121  0018BA  D01E               	goto	l3919
  3122  0018BC                     l3909:
  3123  0018BC  90D8               	bcf	status,0,c
  3124  0018BE  3623               	rlcf	___ftadd@f2,f,c
  3125  0018C0  3624               	rlcf	___ftadd@f2+1,f,c
  3126  0018C2  3625               	rlcf	___ftadd@f2+2,f,c
  3127  0018C4  062A               	decf	___ftadd@exp2,f,c
  3128  0018C6  502B               	movf	___ftadd@exp1,w,c
  3129  0018C8  182A               	xorwf	___ftadd@exp2,w,c
  3130  0018CA  B4D8               	btfsc	status,2,c
  3131  0018CC  D00F               	goto	l3917
  3132  0018CE  0629               	decf	___ftadd@sign,f,c
  3133  0018D0  C029  F026         	movff	___ftadd@sign,??___ftadd
  3134  0018D4  0E07               	movlw	7
  3135  0018D6  1626               	andwf	??___ftadd,f,c
  3136  0018D8  B4D8               	btfsc	status,2,c
  3137  0018DA  D008               	goto	l3917
  3138  0018DC  D7EF               	goto	l3909
  3139  0018DE  D006               	goto	l3917
  3140  0018E0                     l3915:
  3141  0018E0  90D8               	bcf	status,0,c
  3142  0018E2  3222               	rrcf	___ftadd@f1+2,f,c
  3143  0018E4  3221               	rrcf	___ftadd@f1+1,f,c
  3144  0018E6  3220               	rrcf	___ftadd@f1,f,c
  3145  0018E8  2A2B               	incf	___ftadd@exp1,f,c
  3146  0018EA  D000               	goto	l3917
  3147  0018EC                     l3917:
  3148  0018EC  502A               	movf	___ftadd@exp2,w,c
  3149  0018EE  182B               	xorwf	___ftadd@exp1,w,c
  3150  0018F0  B4D8               	btfsc	status,2,c
  3151  0018F2  D024               	goto	l1075
  3152  0018F4  D7F5               	goto	l3915
  3153  0018F6  D022               	goto	l1075
  3154  0018F8                     l3919:
  3155  0018F8  502B               	movf	___ftadd@exp1,w,c
  3156  0018FA  5C2A               	subwf	___ftadd@exp2,w,c
  3157  0018FC  B0D8               	btfsc	status,0,c
  3158  0018FE  D01E               	goto	l1075
  3159  001900                     l3921:
  3160  001900  90D8               	bcf	status,0,c
  3161  001902  3620               	rlcf	___ftadd@f1,f,c
  3162  001904  3621               	rlcf	___ftadd@f1+1,f,c
  3163  001906  3622               	rlcf	___ftadd@f1+2,f,c
  3164  001908  062B               	decf	___ftadd@exp1,f,c
  3165  00190A  502B               	movf	___ftadd@exp1,w,c
  3166  00190C  182A               	xorwf	___ftadd@exp2,w,c
  3167  00190E  B4D8               	btfsc	status,2,c
  3168  001910  D00F               	goto	l3929
  3169  001912  0629               	decf	___ftadd@sign,f,c
  3170  001914  C029  F026         	movff	___ftadd@sign,??___ftadd
  3171  001918  0E07               	movlw	7
  3172  00191A  1626               	andwf	??___ftadd,f,c
  3173  00191C  B4D8               	btfsc	status,2,c
  3174  00191E  D008               	goto	l3929
  3175  001920  D7EF               	goto	l3921
  3176  001922  D006               	goto	l3929
  3177  001924                     l3927:
  3178  001924  90D8               	bcf	status,0,c
  3179  001926  3225               	rrcf	___ftadd@f2+2,f,c
  3180  001928  3224               	rrcf	___ftadd@f2+1,f,c
  3181  00192A  3223               	rrcf	___ftadd@f2,f,c
  3182  00192C  2A2A               	incf	___ftadd@exp2,f,c
  3183  00192E  D000               	goto	l3929
  3184  001930                     l3929:
  3185  001930  502A               	movf	___ftadd@exp2,w,c
  3186  001932  182B               	xorwf	___ftadd@exp1,w,c
  3187  001934  B4D8               	btfsc	status,2,c
  3188  001936  D002               	goto	l1075
  3189  001938  D7F5               	goto	l3927
  3190  00193A  D000               	goto	l1075
  3191  00193C                     l1075:
  3192  00193C  AE29               	btfss	___ftadd@sign,7,c
  3193  00193E  D00C               	goto	l1084
  3194  001940  0EFF               	movlw	255
  3195  001942  1A20               	xorwf	___ftadd@f1,f,c
  3196  001944  0EFF               	movlw	255
  3197  001946  1A21               	xorwf	___ftadd@f1+1,f,c
  3198  001948  0EFF               	movlw	255
  3199  00194A  1A22               	xorwf	___ftadd@f1+2,f,c
  3200  00194C  0E01               	movlw	1
  3201  00194E  2620               	addwf	___ftadd@f1,f,c
  3202  001950  0E00               	movlw	0
  3203  001952  2221               	addwfc	___ftadd@f1+1,f,c
  3204  001954  0E00               	movlw	0
  3205  001956  2222               	addwfc	___ftadd@f1+2,f,c
  3206  001958                     l1084:
  3207  001958  AC29               	btfss	___ftadd@sign,6,c
  3208  00195A  D00D               	goto	l3935
  3209  00195C  0EFF               	movlw	255
  3210  00195E  1A23               	xorwf	___ftadd@f2,f,c
  3211  001960  0EFF               	movlw	255
  3212  001962  1A24               	xorwf	___ftadd@f2+1,f,c
  3213  001964  0EFF               	movlw	255
  3214  001966  1A25               	xorwf	___ftadd@f2+2,f,c
  3215  001968  0E01               	movlw	1
  3216  00196A  2623               	addwf	___ftadd@f2,f,c
  3217  00196C  0E00               	movlw	0
  3218  00196E  2224               	addwfc	___ftadd@f2+1,f,c
  3219  001970  0E00               	movlw	0
  3220  001972  2225               	addwfc	___ftadd@f2+2,f,c
  3221  001974  D000               	goto	l3935
  3222  001976                     l3935:
  3223  001976  0E00               	movlw	0
  3224  001978  6E29               	movwf	___ftadd@sign,c
  3225  00197A  5020               	movf	___ftadd@f1,w,c
  3226  00197C  2623               	addwf	___ftadd@f2,f,c
  3227  00197E  5021               	movf	___ftadd@f1+1,w,c
  3228  001980  2224               	addwfc	___ftadd@f2+1,f,c
  3229  001982  5022               	movf	___ftadd@f1+2,w,c
  3230  001984  2225               	addwfc	___ftadd@f2+2,f,c
  3231  001986  AE25               	btfss	___ftadd@f2+2,7,c
  3232  001988  D00F               	goto	l3945
  3233  00198A  0EFF               	movlw	255
  3234  00198C  1A23               	xorwf	___ftadd@f2,f,c
  3235  00198E  0EFF               	movlw	255
  3236  001990  1A24               	xorwf	___ftadd@f2+1,f,c
  3237  001992  0EFF               	movlw	255
  3238  001994  1A25               	xorwf	___ftadd@f2+2,f,c
  3239  001996  0E01               	movlw	1
  3240  001998  2623               	addwf	___ftadd@f2,f,c
  3241  00199A  0E00               	movlw	0
  3242  00199C  2224               	addwfc	___ftadd@f2+1,f,c
  3243  00199E  0E00               	movlw	0
  3244  0019A0  2225               	addwfc	___ftadd@f2+2,f,c
  3245  0019A2  0E01               	movlw	1
  3246  0019A4  6E29               	movwf	___ftadd@sign,c
  3247  0019A6  D000               	goto	l3945
  3248  0019A8                     l3945:
  3249  0019A8  C023  F018         	movff	___ftadd@f2,___ftpack@arg
  3250  0019AC  C024  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  3251  0019B0  C025  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  3252  0019B4  C02B  F01B         	movff	___ftadd@exp1,___ftpack@exp
  3253  0019B8  C029  F01C         	movff	___ftadd@sign,___ftpack@sign
  3254  0019BC  EC63  F010         	call	___ftpack	;wreg free
  3255  0019C0  C018  F020         	movff	?___ftpack,?___ftadd
  3256  0019C4  C019  F021         	movff	?___ftpack+1,?___ftadd+1
  3257  0019C8  C01A  F022         	movff	?___ftpack+2,?___ftadd+2
  3258  0019CC  D000               	goto	l1061
  3259  0019CE                     l1061:
  3260  0019CE  0012               	return		;funcret
  3261  0019D0                     __end_of___ftadd:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           tblptrh	equ	0xFF7
  3265                           tblptrl	equ	0xFF6
  3266                           tablat	equ	0xFF5
  3267                           prodh	equ	0xFF4
  3268                           prodl	equ	0xFF3
  3269                           intcon	equ	0xFF2
  3270                           postinc0	equ	0xFEE
  3271                           wreg	equ	0xFE8
  3272                           postdec1	equ	0xFE5
  3273                           fsr1h	equ	0xFE2
  3274                           fsr1l	equ	0xFE1
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function ___ftneg *****************
  3282 ;; Defined at:
  3283 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  f1              3   23[COMRAM] float 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  3   23[COMRAM] float 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;Total ram usage:        3 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    4
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_calculatePID
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text7
  3312  002C74                     __ptext7:
  3313                           	opt stack 0
  3314  002C74                     ___ftneg:
  3315                           	opt stack 23
  3316                           
  3317                           ;incstack = 0
  3318  002C74  5018               	movf	___ftneg@f1,w,c
  3319  002C76  1019               	iorwf	___ftneg@f1+1,w,c
  3320  002C78  101A               	iorwf	___ftneg@f1+2,w,c
  3321  002C7A  B4D8               	btfsc	status,2,c
  3322  002C7C  D006               	goto	l1117
  3323  002C7E  0E00               	movlw	0
  3324  002C80  1A18               	xorwf	___ftneg@f1,f,c
  3325  002C82  0E00               	movlw	0
  3326  002C84  1A19               	xorwf	___ftneg@f1+1,f,c
  3327  002C86  0E80               	movlw	128
  3328  002C88  1A1A               	xorwf	___ftneg@f1+2,f,c
  3329  002C8A                     l1117:
  3330  002C8A  C018  F018         	movff	___ftneg@f1,?___ftneg
  3331  002C8E  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  3332  002C92  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  3333  002C96  0012               	return		;funcret
  3334  002C98                     __end_of___ftneg:
  3335                           	opt stack 0
  3336                           tblptru	equ	0xFF8
  3337                           tblptrh	equ	0xFF7
  3338                           tblptrl	equ	0xFF6
  3339                           tablat	equ	0xFF5
  3340                           prodh	equ	0xFF4
  3341                           prodl	equ	0xFF3
  3342                           intcon	equ	0xFF2
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           fsr1h	equ	0xFE2
  3347                           fsr1l	equ	0xFE1
  3348                           indf2	equ	0xFDF
  3349                           postinc2	equ	0xFDE
  3350                           fsr2h	equ	0xFDA
  3351                           fsr2l	equ	0xFD9
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function ___ftge *****************
  3355 ;; Defined at:
  3356 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  ff1             3   23[COMRAM] float 
  3359 ;;  ff2             3   26[COMRAM] float 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;		None               void
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3371 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;Total ram usage:        9 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    4
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_calculatePID
  3382 ;;		_ZeroMotors
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text8
  3387  002444                     __ptext8:
  3388                           	opt stack 0
  3389  002444                     ___ftge:
  3390                           	opt stack 23
  3391                           
  3392                           ;incstack = 0
  3393  002444  AE1A               	btfss	___ftge@ff1+2,7,c
  3394  002446  D017               	goto	l2885
  3395  002448  C018  F01E         	movff	___ftge@ff1,??___ftge
  3396  00244C  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3397  002450  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3398  002454  1E1E               	comf	??___ftge,f,c
  3399  002456  1E1F               	comf	??___ftge+1,f,c
  3400  002458  1E20               	comf	??___ftge+2,f,c
  3401  00245A  2A1E               	incf	??___ftge,f,c
  3402  00245C  0E00               	movlw	0
  3403  00245E  221F               	addwfc	??___ftge+1,f,c
  3404  002460  2220               	addwfc	??___ftge+2,f,c
  3405  002462  0E00               	movlw	0
  3406  002464  241E               	addwf	??___ftge,w,c
  3407  002466  6E18               	movwf	___ftge@ff1,c
  3408  002468  0E00               	movlw	0
  3409  00246A  201F               	addwfc	??___ftge+1,w,c
  3410  00246C  6E19               	movwf	___ftge@ff1+1,c
  3411  00246E  0E80               	movlw	128
  3412  002470  2020               	addwfc	??___ftge+2,w,c
  3413  002472  6E1A               	movwf	___ftge@ff1+2,c
  3414  002474  D000               	goto	l2885
  3415  002476                     l2885:
  3416  002476  AE1D               	btfss	___ftge@ff2+2,7,c
  3417  002478  D017               	goto	l2889
  3418  00247A  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3419  00247E  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3420  002482  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3421  002486  1E1E               	comf	??___ftge,f,c
  3422  002488  1E1F               	comf	??___ftge+1,f,c
  3423  00248A  1E20               	comf	??___ftge+2,f,c
  3424  00248C  2A1E               	incf	??___ftge,f,c
  3425  00248E  0E00               	movlw	0
  3426  002490  221F               	addwfc	??___ftge+1,f,c
  3427  002492  2220               	addwfc	??___ftge+2,f,c
  3428  002494  0E00               	movlw	0
  3429  002496  241E               	addwf	??___ftge,w,c
  3430  002498  6E1B               	movwf	___ftge@ff2,c
  3431  00249A  0E00               	movlw	0
  3432  00249C  201F               	addwfc	??___ftge+1,w,c
  3433  00249E  6E1C               	movwf	___ftge@ff2+1,c
  3434  0024A0  0E80               	movlw	128
  3435  0024A2  2020               	addwfc	??___ftge+2,w,c
  3436  0024A4  6E1D               	movwf	___ftge@ff2+2,c
  3437  0024A6  D000               	goto	l2889
  3438  0024A8                     l2889:
  3439  0024A8  0E00               	movlw	0
  3440  0024AA  1A18               	xorwf	___ftge@ff1,f,c
  3441  0024AC  0E00               	movlw	0
  3442  0024AE  1A19               	xorwf	___ftge@ff1+1,f,c
  3443  0024B0  0E80               	movlw	128
  3444  0024B2  1A1A               	xorwf	___ftge@ff1+2,f,c
  3445  0024B4  0E00               	movlw	0
  3446  0024B6  1A1B               	xorwf	___ftge@ff2,f,c
  3447  0024B8  0E00               	movlw	0
  3448  0024BA  1A1C               	xorwf	___ftge@ff2+1,f,c
  3449  0024BC  0E80               	movlw	128
  3450  0024BE  1A1D               	xorwf	___ftge@ff2+2,f,c
  3451  0024C0  501B               	movf	___ftge@ff2,w,c
  3452  0024C2  5C18               	subwf	___ftge@ff1,w,c
  3453  0024C4  501C               	movf	___ftge@ff2+1,w,c
  3454  0024C6  5819               	subwfb	___ftge@ff1+1,w,c
  3455  0024C8  501D               	movf	___ftge@ff2+2,w,c
  3456  0024CA  581A               	subwfb	___ftge@ff1+2,w,c
  3457  0024CC  B0D8               	btfsc	status,0,c
  3458  0024CE  D002               	goto	l2895
  3459  0024D0  90D8               	bcf	status,0,c
  3460  0024D2  D002               	goto	l1101
  3461  0024D4                     l2895:
  3462  0024D4  80D8               	bsf	status,0,c
  3463  0024D6  D000               	goto	l1101
  3464  0024D8                     l1101:
  3465  0024D8  0012               	return		;funcret
  3466  0024DA                     __end_of___ftge:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           postinc0	equ	0xFEE
  3476                           wreg	equ	0xFE8
  3477                           postdec1	equ	0xFE5
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           indf2	equ	0xFDF
  3481                           postinc2	equ	0xFDE
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           status	equ	0xFD8
  3485                           
  3486 ;; *************** function ___ftdiv *****************
  3487 ;; Defined at:
  3488 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  f1              3   43[COMRAM] float 
  3491 ;;  f2              3   46[COMRAM] float 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  f3              3    1[BANK0 ] float 
  3494 ;;  sign            1    5[BANK0 ] unsigned char 
  3495 ;;  exp             1    4[BANK0 ] unsigned char 
  3496 ;;  cntr            1    0[BANK0 ] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  3   43[COMRAM] float 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3506 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;Total ram usage:       15 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    5
  3513 ;; This function calls:
  3514 ;;		___ftpack
  3515 ;; This function is called by:
  3516 ;;		_calculatePID
  3517 ;;		_ZeroMotors
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text9
  3522  001EE6                     __ptext9:
  3523                           	opt stack 0
  3524  001EE6                     ___ftdiv:
  3525                           	opt stack 22
  3526                           
  3527                           ;incstack = 0
  3528  001EE6  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  3529  001EEA  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  3530  001EEC  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  3531  001EEE  342D               	rlcf	___ftdiv@f1+1,w,c
  3532  001EF0  3632               	rlcf	??___ftdiv& (0+255),f,c
  3533  001EF2  E301               	bnc	u3351
  3534  001EF4  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  3535  001EF6                     u3351:
  3536  001EF6  5032               	movf	??___ftdiv,w,c
  3537  001EF8  0100               	movlb	0	; () banked
  3538  001EFA  6F64               	movwf	___ftdiv@exp& (0+255),b
  3539  001EFC  0100               	movlb	0	; () banked
  3540  001EFE  5164               	movf	___ftdiv@exp& (0+255),w,b
  3541  001F00  A4D8               	btfss	status,2,c
  3542  001F02  D002               	goto	l3955
  3543  001F04  D010               	goto	l3957
  3544                           
  3545                           ; BSR set to: 0
  3546                           
  3547                           ; BSR set to: 0
  3548  001F06  D06E               	goto	l1092
  3549  001F08                     l3955:
  3550                           
  3551                           ; BSR set to: 0
  3552  001F08  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  3553  001F0C  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  3554  001F0E  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  3555  001F10  3430               	rlcf	___ftdiv@f2+1,w,c
  3556  001F12  3632               	rlcf	??___ftdiv& (0+255),f,c
  3557  001F14  E301               	bnc	u3371
  3558  001F16  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  3559  001F18                     u3371:
  3560  001F18  5032               	movf	??___ftdiv,w,c
  3561  001F1A  0100               	movlb	0	; () banked
  3562  001F1C  6F65               	movwf	___ftdiv@sign& (0+255),b
  3563  001F1E  0100               	movlb	0	; () banked
  3564  001F20  5165               	movf	___ftdiv@sign& (0+255),w,b
  3565  001F22  A4D8               	btfss	status,2,c
  3566  001F24  D007               	goto	l3961
  3567  001F26                     l3957:
  3568                           
  3569                           ; BSR set to: 0
  3570  001F26  0E00               	movlw	0
  3571  001F28  6E2C               	movwf	?___ftdiv,c
  3572  001F2A  0E00               	movlw	0
  3573  001F2C  6E2D               	movwf	?___ftdiv+1,c
  3574  001F2E  0E00               	movlw	0
  3575  001F30  6E2E               	movwf	?___ftdiv+2,c
  3576                           
  3577                           ; BSR set to: 0
  3578  001F32  D058               	goto	l1092
  3579  001F34                     l3961:
  3580                           
  3581                           ; BSR set to: 0
  3582  001F34  0E00               	movlw	0
  3583  001F36  0100               	movlb	0	; () banked
  3584  001F38  6F61               	movwf	___ftdiv@f3& (0+255),b
  3585  001F3A  0E00               	movlw	0
  3586  001F3C  0100               	movlb	0	; () banked
  3587  001F3E  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
  3588  001F40  0E00               	movlw	0
  3589  001F42  0100               	movlb	0	; () banked
  3590  001F44  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
  3591                           
  3592                           ; BSR set to: 0
  3593  001F46  0100               	movlb	0	; () banked
  3594  001F48  5165               	movf	___ftdiv@sign& (0+255),w,b
  3595  001F4A  0F89               	addlw	137
  3596  001F4C  0100               	movlb	0	; () banked
  3597  001F4E  5F64               	subwf	___ftdiv@exp& (0+255),f,b
  3598                           
  3599                           ; BSR set to: 0
  3600  001F50  C02E  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
  3601                           
  3602                           ; BSR set to: 0
  3603  001F54  5031               	movf	___ftdiv@f2+2,w,c
  3604  001F56  0100               	movlb	0	; () banked
  3605  001F58  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 0
  3608  001F5A  0E80               	movlw	128
  3609  001F5C  0100               	movlb	0	; () banked
  3610  001F5E  1765               	andwf	___ftdiv@sign& (0+255),f,b
  3611                           
  3612                           ; BSR set to: 0
  3613  001F60  8E2D               	bsf	___ftdiv@f1+1,7,c
  3614                           
  3615                           ; BSR set to: 0
  3616  001F62  0EFF               	movlw	255
  3617  001F64  162C               	andwf	___ftdiv@f1,f,c
  3618  001F66  0EFF               	movlw	255
  3619  001F68  162D               	andwf	___ftdiv@f1+1,f,c
  3620  001F6A  0E00               	movlw	0
  3621  001F6C  162E               	andwf	___ftdiv@f1+2,f,c
  3622                           
  3623                           ; BSR set to: 0
  3624  001F6E  8E30               	bsf	___ftdiv@f2+1,7,c
  3625                           
  3626                           ; BSR set to: 0
  3627  001F70  0EFF               	movlw	255
  3628  001F72  162F               	andwf	___ftdiv@f2,f,c
  3629  001F74  0EFF               	movlw	255
  3630  001F76  1630               	andwf	___ftdiv@f2+1,f,c
  3631  001F78  0E00               	movlw	0
  3632  001F7A  1631               	andwf	___ftdiv@f2+2,f,c
  3633                           
  3634                           ; BSR set to: 0
  3635  001F7C  0E18               	movlw	24
  3636  001F7E  0100               	movlb	0	; () banked
  3637  001F80  6F60               	movwf	___ftdiv@cntr& (0+255),b
  3638  001F82  D000               	goto	l3981
  3639  001F84                     l3981:
  3640                           
  3641                           ; BSR set to: 0
  3642  001F84  0100               	movlb	0	; () banked
  3643  001F86  90D8               	bcf	status,0,c
  3644  001F88  3761               	rlcf	___ftdiv@f3& (0+255),f,b
  3645  001F8A  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3646  001F8C  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3647                           
  3648                           ; BSR set to: 0
  3649  001F8E  502F               	movf	___ftdiv@f2,w,c
  3650  001F90  5C2C               	subwf	___ftdiv@f1,w,c
  3651  001F92  5030               	movf	___ftdiv@f2+1,w,c
  3652  001F94  582D               	subwfb	___ftdiv@f1+1,w,c
  3653  001F96  5031               	movf	___ftdiv@f2+2,w,c
  3654  001F98  582E               	subwfb	___ftdiv@f1+2,w,c
  3655  001F9A  A0D8               	btfss	status,0,c
  3656  001F9C  D008               	goto	l1095
  3657                           
  3658                           ; BSR set to: 0
  3659  001F9E  502F               	movf	___ftdiv@f2,w,c
  3660  001FA0  5E2C               	subwf	___ftdiv@f1,f,c
  3661  001FA2  5030               	movf	___ftdiv@f2+1,w,c
  3662  001FA4  5A2D               	subwfb	___ftdiv@f1+1,f,c
  3663  001FA6  5031               	movf	___ftdiv@f2+2,w,c
  3664  001FA8  5A2E               	subwfb	___ftdiv@f1+2,f,c
  3665                           
  3666                           ; BSR set to: 0
  3667  001FAA  0100               	movlb	0	; () banked
  3668  001FAC  8161               	bsf	___ftdiv@f3& (0+255),0,b
  3669  001FAE                     l1095:
  3670                           
  3671                           ; BSR set to: 0
  3672  001FAE  90D8               	bcf	status,0,c
  3673  001FB0  362C               	rlcf	___ftdiv@f1,f,c
  3674  001FB2  362D               	rlcf	___ftdiv@f1+1,f,c
  3675  001FB4  362E               	rlcf	___ftdiv@f1+2,f,c
  3676                           
  3677                           ; BSR set to: 0
  3678  001FB6  0100               	movlb	0	; () banked
  3679  001FB8  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
  3680  001FBA  D7E4               	goto	l3981
  3681  001FBC  D000               	goto	l3991
  3682  001FBE                     l3991:
  3683                           
  3684                           ; BSR set to: 0
  3685  001FBE  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
  3686  001FC2  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3687  001FC6  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3688  001FCA  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3689  001FCE  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3690  001FD2  EC63  F010         	call	___ftpack	;wreg free
  3691  001FD6  C018  F02C         	movff	?___ftpack,?___ftdiv
  3692  001FDA  C019  F02D         	movff	?___ftpack+1,?___ftdiv+1
  3693  001FDE  C01A  F02E         	movff	?___ftpack+2,?___ftdiv+2
  3694  001FE2  D000               	goto	l1092
  3695  001FE4                     l1092:
  3696  001FE4  0012               	return		;funcret
  3697  001FE6                     __end_of___ftdiv:
  3698                           	opt stack 0
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           intcon	equ	0xFF2
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postdec1	equ	0xFE5
  3709                           fsr1h	equ	0xFE2
  3710                           fsr1l	equ	0xFE1
  3711                           indf2	equ	0xFDF
  3712                           postinc2	equ	0xFDE
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _ReadRTDpos *****************
  3718 ;; Defined at:
  3719 ;;		line 39 in file "ResolverToDigital.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3724 ;;  helloworld      2    0        unsigned int 
  3725 ;;  x               1   33[COMRAM] unsigned char 
  3726 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3727 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  2   24[COMRAM] unsigned int 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;Total ram usage:       10 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    5
  3744 ;; This function calls:
  3745 ;;		_Delay10TCYx
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;;		_ZeroMotors
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text10
  3753  002628                     __ptext10:
  3754                           	opt stack 0
  3755  002628                     _ReadRTDpos:
  3756                           	opt stack 23
  3757                           
  3758                           ;ResolverToDigital.c: 41: unsigned char x;
  3759                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  3760                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  3761                           ;ResolverToDigital.c: 48: {
  3762                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  3763                           
  3764                           ;incstack = 0
  3765  002628  9EF2               	bcf	intcon,7,c	;volatile
  3766                           
  3767                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  3768  00262A  8284               	bsf	3972,1,c	;volatile
  3769                           
  3770                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  3771  00262C  9084               	bcf	3972,0,c	;volatile
  3772                           
  3773                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  3774  00262E  0E00               	movlw	0
  3775  002630  6E22               	movwf	ReadRTDpos@x,c
  3776  002632  D003               	goto	l3015
  3777  002634  D005               	goto	l188
  3778  002636                     l187:
  3779                           
  3780                           ;ResolverToDigital.c: 53: __nop();
  3781  002636  F000               	nop	
  3782  002638  2A22               	incf	ReadRTDpos@x,f,c
  3783  00263A                     l3015:
  3784  00263A  0E07               	movlw	7
  3785  00263C  6422               	cpfsgt	ReadRTDpos@x,c
  3786  00263E  D7FB               	goto	l187
  3787  002640                     l188:
  3788                           
  3789                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  3790  002640  8484               	bsf	3972,2,c	;volatile
  3791                           
  3792                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  3793  002642  9484               	bcf	3972,2,c	;volatile
  3794                           
  3795                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  3796  002644  0E01               	movlw	1
  3797  002646  ECEC  F016         	call	_Delay10TCYx
  3798                           
  3799                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  3800  00264A  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3801                           
  3802                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  3803  00264E  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3804                           
  3805                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  3806  002652  8484               	bsf	3972,2,c	;volatile
  3807                           
  3808                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  3809  002654  8084               	bsf	3972,0,c	;volatile
  3810                           
  3811                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  3812  002656  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3813  00265A  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3814                           
  3815                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3816  00265C  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3817  002660  0E0F               	movlw	15
  3818  002662  161B               	andwf	??_ReadRTDpos,f,c
  3819  002664  501B               	movf	??_ReadRTDpos,w,c
  3820  002666  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3821  002668  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3822  00266A  5020               	movf	ReadRTDpos@FullPosition,w,c
  3823  00266C  101C               	iorwf	??_ReadRTDpos+1,w,c
  3824  00266E  6E20               	movwf	ReadRTDpos@FullPosition,c
  3825  002670  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3826  002672  101D               	iorwf	??_ReadRTDpos+2,w,c
  3827  002674  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3828                           
  3829                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  3830  002676  8EF2               	bsf	intcon,7,c	;volatile
  3831                           
  3832                           ;ResolverToDigital.c: 64: return FullPosition;
  3833  002678  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3834  00267C  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3835  002680  D000               	goto	l189
  3836  002682                     l189:
  3837  002682  0012               	return		;funcret
  3838  002684                     __end_of_ReadRTDpos:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           intcon	equ	0xFF2
  3847                           postinc0	equ	0xFEE
  3848                           wreg	equ	0xFE8
  3849                           postdec1	equ	0xFE5
  3850                           fsr1h	equ	0xFE2
  3851                           fsr1l	equ	0xFE1
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function _RTD2Angle *****************
  3859 ;; Defined at:
  3860 ;;		line 99 in file "ResolverToDigital.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  RTDAngle        2   21[BANK0 ] unsigned int 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  3   21[BANK0 ] unsigned int 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3874 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;Total ram usage:        3 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    6
  3881 ;; This function calls:
  3882 ;;		___ftmul
  3883 ;;		___lwtoft
  3884 ;; This function is called by:
  3885 ;;		_main
  3886 ;;		_ZeroMotors
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text11
  3891  002A06                     __ptext11:
  3892                           	opt stack 0
  3893  002A06                     _RTD2Angle:
  3894                           	opt stack 22
  3895                           
  3896                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  3897                           
  3898                           ;incstack = 0
  3899  002A06  C075  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3900  002A0A  C076  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3901  002A0E  EC14  F016         	call	___lwtoft	;wreg free
  3902  002A12  C020  F066         	movff	?___lwtoft,___ftmul@f1
  3903  002A16  C021  F067         	movff	?___lwtoft+1,___ftmul@f1+1
  3904  002A1A  C022  F068         	movff	?___lwtoft+2,___ftmul@f1+2
  3905  002A1E  0E00               	movlw	0
  3906  002A20  0100               	movlb	0	; () banked
  3907  002A22  6F69               	movwf	___ftmul@f2& (0+255),b
  3908  002A24  0EB4               	movlw	180
  3909  002A26  0100               	movlb	0	; () banked
  3910  002A28  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  3911  002A2A  0E3D               	movlw	61
  3912  002A2C  0100               	movlb	0	; () banked
  3913  002A2E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  3914  002A30  ECE8  F00C         	call	___ftmul	;wreg free
  3915  002A34  C066  F075         	movff	?___ftmul,?_RTD2Angle
  3916  002A38  C067  F076         	movff	?___ftmul+1,?_RTD2Angle+1
  3917  002A3C  C068  F077         	movff	?___ftmul+2,?_RTD2Angle+2
  3918  002A40  D000               	goto	l197
  3919  002A42                     l197:
  3920  002A42  0012               	return		;funcret
  3921  002A44                     __end_of_RTD2Angle:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           postdec1	equ	0xFE5
  3933                           fsr1h	equ	0xFE2
  3934                           fsr1l	equ	0xFE1
  3935                           indf2	equ	0xFDF
  3936                           postinc2	equ	0xFDE
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function ___lwtoft *****************
  3942 ;; Defined at:
  3943 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  c               2   31[COMRAM] unsigned int 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  3   31[COMRAM] float 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3957 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;Total ram usage:        3 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    5
  3964 ;; This function calls:
  3965 ;;		___ftpack
  3966 ;; This function is called by:
  3967 ;;		_RTD2Angle
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text12
  3972  002C28                     __ptext12:
  3973                           	opt stack 0
  3974  002C28                     ___lwtoft:
  3975                           	opt stack 22
  3976                           
  3977                           ;incstack = 0
  3978  002C28  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  3979  002C2C  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  3980  002C30  6A1A               	clrf	___ftpack@arg+2,c
  3981  002C32  0E8E               	movlw	142
  3982  002C34  6E1B               	movwf	___ftpack@exp,c
  3983  002C36  0E00               	movlw	0
  3984  002C38  6E1C               	movwf	___ftpack@sign,c
  3985  002C3A  EC63  F010         	call	___ftpack	;wreg free
  3986  002C3E  C018  F020         	movff	?___ftpack,?___lwtoft
  3987  002C42  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  3988  002C46  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  3989  002C4A  D000               	goto	l1257
  3990  002C4C                     l1257:
  3991  002C4C  0012               	return		;funcret
  3992  002C4E                     __end_of___lwtoft:
  3993                           	opt stack 0
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1h	equ	0xFE2
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           status	equ	0xFD8
  4011                           
  4012 ;; *************** function ___ftmul *****************
  4013 ;; Defined at:
  4014 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  f1              3    6[BANK0 ] float 
  4017 ;;  f2              3    9[BANK0 ] float 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  4020 ;;  sign            1   20[BANK0 ] unsigned char 
  4021 ;;  cntr            1   19[BANK0 ] unsigned char 
  4022 ;;  exp             1   15[BANK0 ] unsigned char 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  3    6[BANK0 ] float 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4032 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;Total ram usage:       15 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    5
  4039 ;; This function calls:
  4040 ;;		___ftpack
  4041 ;; This function is called by:
  4042 ;;		_calculatePID
  4043 ;;		_RTD2Angle
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text13
  4048  0019D0                     __ptext13:
  4049                           	opt stack 0
  4050  0019D0                     ___ftmul:
  4051                           	opt stack 22
  4052                           
  4053                           ;incstack = 0
  4054  0019D0  C068  F06C         	movff	___ftmul@f1+2,??___ftmul
  4055  0019D4  0100               	movlb	0	; () banked
  4056  0019D6  6B6D               	clrf	(??___ftmul+1)& (0+255),b
  4057  0019D8  6B6E               	clrf	(??___ftmul+2)& (0+255),b
  4058  0019DA  0100               	movlb	0	; () banked
  4059  0019DC  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4060  0019DE  0100               	movlb	0	; () banked
  4061  0019E0  376C               	rlcf	??___ftmul& (0+255),f,b
  4062  0019E2  E301               	bnc	u3401
  4063  0019E4  816D               	bsf	(??___ftmul+1)& (0+255),0,b
  4064  0019E6                     u3401:
  4065  0019E6  0100               	movlb	0	; () banked
  4066  0019E8  516C               	movf	??___ftmul& (0+255),w,b
  4067  0019EA  0100               	movlb	0	; () banked
  4068  0019EC  6F6F               	movwf	___ftmul@exp& (0+255),b
  4069  0019EE  0100               	movlb	0	; () banked
  4070  0019F0  516F               	movf	___ftmul@exp& (0+255),w,b
  4071  0019F2  A4D8               	btfss	status,2,c
  4072  0019F4  D002               	goto	l4001
  4073  0019F6  D014               	goto	l4003
  4074                           
  4075                           ; BSR set to: 0
  4076                           
  4077                           ; BSR set to: 0
  4078  0019F8  D098               	goto	l1107
  4079  0019FA                     l4001:
  4080                           
  4081                           ; BSR set to: 0
  4082  0019FA  C06B  F06C         	movff	___ftmul@f2+2,??___ftmul
  4083  0019FE  0100               	movlb	0	; () banked
  4084  001A00  6B6D               	clrf	(??___ftmul+1)& (0+255),b
  4085  001A02  6B6E               	clrf	(??___ftmul+2)& (0+255),b
  4086  001A04  0100               	movlb	0	; () banked
  4087  001A06  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4088  001A08  0100               	movlb	0	; () banked
  4089  001A0A  376C               	rlcf	??___ftmul& (0+255),f,b
  4090  001A0C  E301               	bnc	u3421
  4091  001A0E  816D               	bsf	(??___ftmul+1)& (0+255),0,b
  4092  001A10                     u3421:
  4093  001A10  0100               	movlb	0	; () banked
  4094  001A12  516C               	movf	??___ftmul& (0+255),w,b
  4095  001A14  0100               	movlb	0	; () banked
  4096  001A16  6F74               	movwf	___ftmul@sign& (0+255),b
  4097  001A18  0100               	movlb	0	; () banked
  4098  001A1A  5174               	movf	___ftmul@sign& (0+255),w,b
  4099  001A1C  A4D8               	btfss	status,2,c
  4100  001A1E  D00A               	goto	l4007
  4101  001A20                     l4003:
  4102                           
  4103                           ; BSR set to: 0
  4104  001A20  0E00               	movlw	0
  4105  001A22  0100               	movlb	0	; () banked
  4106  001A24  6F66               	movwf	?___ftmul& (0+255),b
  4107  001A26  0E00               	movlw	0
  4108  001A28  0100               	movlb	0	; () banked
  4109  001A2A  6F67               	movwf	(?___ftmul+1)& (0+255),b
  4110  001A2C  0E00               	movlw	0
  4111  001A2E  0100               	movlb	0	; () banked
  4112  001A30  6F68               	movwf	(?___ftmul+2)& (0+255),b
  4113                           
  4114                           ; BSR set to: 0
  4115  001A32  D07B               	goto	l1107
  4116  001A34                     l4007:
  4117                           
  4118                           ; BSR set to: 0
  4119  001A34  0100               	movlb	0	; () banked
  4120  001A36  5174               	movf	___ftmul@sign& (0+255),w,b
  4121  001A38  0F7B               	addlw	123
  4122  001A3A  0100               	movlb	0	; () banked
  4123  001A3C  276F               	addwf	___ftmul@exp& (0+255),f,b
  4124                           
  4125                           ; BSR set to: 0
  4126  001A3E  C068  F074         	movff	___ftmul@f1+2,___ftmul@sign
  4127  001A42  0100               	movlb	0	; () banked
  4128  001A44  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4129  001A46  0100               	movlb	0	; () banked
  4130  001A48  1B74               	xorwf	___ftmul@sign& (0+255),f,b
  4131  001A4A  0E80               	movlw	128
  4132  001A4C  0100               	movlb	0	; () banked
  4133  001A4E  1774               	andwf	___ftmul@sign& (0+255),f,b
  4134                           
  4135                           ; BSR set to: 0
  4136  001A50  0100               	movlb	0	; () banked
  4137  001A52  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4138                           
  4139                           ; BSR set to: 0
  4140  001A54  0100               	movlb	0	; () banked
  4141  001A56  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4142                           
  4143                           ; BSR set to: 0
  4144  001A58  0EFF               	movlw	255
  4145  001A5A  0100               	movlb	0	; () banked
  4146  001A5C  1769               	andwf	___ftmul@f2& (0+255),f,b
  4147  001A5E  0EFF               	movlw	255
  4148  001A60  0100               	movlb	0	; () banked
  4149  001A62  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4150  001A64  0E00               	movlw	0
  4151  001A66  0100               	movlb	0	; () banked
  4152  001A68  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4153                           
  4154                           ; BSR set to: 0
  4155  001A6A  0E00               	movlw	0
  4156  001A6C  0100               	movlb	0	; () banked
  4157  001A6E  6F70               	movwf	___ftmul@f3_as_product& (0+255),b
  4158  001A70  0E00               	movlw	0
  4159  001A72  0100               	movlb	0	; () banked
  4160  001A74  6F71               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4161  001A76  0E00               	movlw	0
  4162  001A78  0100               	movlb	0	; () banked
  4163  001A7A  6F72               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4164                           
  4165                           ; BSR set to: 0
  4166  001A7C  0E07               	movlw	7
  4167  001A7E  0100               	movlb	0	; () banked
  4168  001A80  6F73               	movwf	___ftmul@cntr& (0+255),b
  4169  001A82  D000               	goto	l4021
  4170  001A84                     l4021:
  4171                           
  4172                           ; BSR set to: 0
  4173  001A84  0100               	movlb	0	; () banked
  4174  001A86  A166               	btfss	___ftmul@f1& (0+255),0,b
  4175  001A88  D00D               	goto	l4025
  4176                           
  4177                           ; BSR set to: 0
  4178  001A8A  0100               	movlb	0	; () banked
  4179  001A8C  5169               	movf	___ftmul@f2& (0+255),w,b
  4180  001A8E  0100               	movlb	0	; () banked
  4181  001A90  2770               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4182  001A92  0100               	movlb	0	; () banked
  4183  001A94  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4184  001A96  0100               	movlb	0	; () banked
  4185  001A98  2371               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4186  001A9A  0100               	movlb	0	; () banked
  4187  001A9C  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4188  001A9E  0100               	movlb	0	; () banked
  4189  001AA0  2372               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4190  001AA2  D000               	goto	l4025
  4191  001AA4                     l4025:
  4192                           
  4193                           ; BSR set to: 0
  4194  001AA4  0100               	movlb	0	; () banked
  4195  001AA6  90D8               	bcf	status,0,c
  4196  001AA8  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4197  001AAA  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4198  001AAC  3366               	rrcf	___ftmul@f1& (0+255),f,b
  4199  001AAE  0100               	movlb	0	; () banked
  4200  001AB0  90D8               	bcf	status,0,c
  4201  001AB2  3769               	rlcf	___ftmul@f2& (0+255),f,b
  4202  001AB4  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4203  001AB6  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4204                           
  4205                           ; BSR set to: 0
  4206  001AB8  0100               	movlb	0	; () banked
  4207  001ABA  2F73               	decfsz	___ftmul@cntr& (0+255),f,b
  4208  001ABC  D7E3               	goto	l4021
  4209  001ABE  D000               	goto	l4029
  4210  001AC0                     l4029:
  4211                           
  4212                           ; BSR set to: 0
  4213  001AC0  0E09               	movlw	9
  4214  001AC2  0100               	movlb	0	; () banked
  4215  001AC4  6F73               	movwf	___ftmul@cntr& (0+255),b
  4216  001AC6  D000               	goto	l4031
  4217  001AC8                     l4031:
  4218                           
  4219                           ; BSR set to: 0
  4220  001AC8  0100               	movlb	0	; () banked
  4221  001ACA  A166               	btfss	___ftmul@f1& (0+255),0,b
  4222  001ACC  D00D               	goto	l4035
  4223                           
  4224                           ; BSR set to: 0
  4225  001ACE  0100               	movlb	0	; () banked
  4226  001AD0  5169               	movf	___ftmul@f2& (0+255),w,b
  4227  001AD2  0100               	movlb	0	; () banked
  4228  001AD4  2770               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4229  001AD6  0100               	movlb	0	; () banked
  4230  001AD8  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4231  001ADA  0100               	movlb	0	; () banked
  4232  001ADC  2371               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4233  001ADE  0100               	movlb	0	; () banked
  4234  001AE0  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4235  001AE2  0100               	movlb	0	; () banked
  4236  001AE4  2372               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4237  001AE6  D000               	goto	l4035
  4238  001AE8                     l4035:
  4239                           
  4240                           ; BSR set to: 0
  4241  001AE8  0100               	movlb	0	; () banked
  4242  001AEA  90D8               	bcf	status,0,c
  4243  001AEC  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4244  001AEE  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4245  001AF0  3366               	rrcf	___ftmul@f1& (0+255),f,b
  4246  001AF2  0100               	movlb	0	; () banked
  4247  001AF4  90D8               	bcf	status,0,c
  4248  001AF6  3372               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4249  001AF8  3371               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4250  001AFA  3370               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4251                           
  4252                           ; BSR set to: 0
  4253  001AFC  0100               	movlb	0	; () banked
  4254  001AFE  2F73               	decfsz	___ftmul@cntr& (0+255),f,b
  4255  001B00  D7E3               	goto	l4031
  4256  001B02  D000               	goto	l4039
  4257  001B04                     l4039:
  4258                           
  4259                           ; BSR set to: 0
  4260  001B04  C070  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  4261  001B08  C071  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4262  001B0C  C072  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4263  001B10  C06F  F01B         	movff	___ftmul@exp,___ftpack@exp
  4264  001B14  C074  F01C         	movff	___ftmul@sign,___ftpack@sign
  4265  001B18  EC63  F010         	call	___ftpack	;wreg free
  4266  001B1C  C018  F066         	movff	?___ftpack,?___ftmul
  4267  001B20  C019  F067         	movff	?___ftpack+1,?___ftmul+1
  4268  001B24  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
  4269  001B28  D000               	goto	l1107
  4270  001B2A                     l1107:
  4271  001B2A  0012               	return		;funcret
  4272  001B2C                     __end_of___ftmul:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           postinc0	equ	0xFEE
  4282                           wreg	equ	0xFE8
  4283                           postdec1	equ	0xFE5
  4284                           fsr1h	equ	0xFE2
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function ___ftpack *****************
  4293 ;; Defined at:
  4294 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  arg             3   23[COMRAM] unsigned um
  4297 ;;  exp             1   26[COMRAM] unsigned char 
  4298 ;;  sign            1   27[COMRAM] unsigned char 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  3   23[COMRAM] float 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        8 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    4
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		___ftadd
  4321 ;;		___ftdiv
  4322 ;;		___ftmul
  4323 ;;		___lwtoft
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text14
  4328  0020C6                     __ptext14:
  4329                           	opt stack 0
  4330  0020C6                     ___ftpack:
  4331                           	opt stack 21
  4332                           
  4333                           ;incstack = 0
  4334  0020C6  501B               	movf	___ftpack@exp,w,c
  4335  0020C8  B4D8               	btfsc	status,2,c
  4336  0020CA  D005               	goto	l3847
  4337  0020CC  5018               	movf	___ftpack@arg,w,c
  4338  0020CE  1019               	iorwf	___ftpack@arg+1,w,c
  4339  0020D0  101A               	iorwf	___ftpack@arg+2,w,c
  4340  0020D2  A4D8               	btfss	status,2,c
  4341  0020D4  D00E               	goto	l3853
  4342  0020D6                     l3847:
  4343  0020D6  0E00               	movlw	0
  4344  0020D8  6E18               	movwf	?___ftpack,c
  4345  0020DA  0E00               	movlw	0
  4346  0020DC  6E19               	movwf	?___ftpack+1,c
  4347  0020DE  0E00               	movlw	0
  4348  0020E0  6E1A               	movwf	?___ftpack+2,c
  4349  0020E2  D053               	goto	l1020
  4350  0020E4  D006               	goto	l3853
  4351  0020E6                     l3851:
  4352  0020E6  2A1B               	incf	___ftpack@exp,f,c
  4353  0020E8  90D8               	bcf	status,0,c
  4354  0020EA  321A               	rrcf	___ftpack@arg+2,f,c
  4355  0020EC  3219               	rrcf	___ftpack@arg+1,f,c
  4356  0020EE  3218               	rrcf	___ftpack@arg,f,c
  4357  0020F0  D000               	goto	l3853
  4358  0020F2                     l3853:
  4359  0020F2  0E00               	movlw	0
  4360  0020F4  1418               	andwf	___ftpack@arg,w,c
  4361  0020F6  6E1D               	movwf	??___ftpack& (0+255),c
  4362  0020F8  0E00               	movlw	0
  4363  0020FA  1419               	andwf	___ftpack@arg+1,w,c
  4364  0020FC  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4365  0020FE  0EFE               	movlw	254
  4366  002100  141A               	andwf	___ftpack@arg+2,w,c
  4367  002102  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4368  002104  501D               	movf	??___ftpack,w,c
  4369  002106  101E               	iorwf	??___ftpack+1,w,c
  4370  002108  101F               	iorwf	??___ftpack+2,w,c
  4371  00210A  B4D8               	btfsc	status,2,c
  4372  00210C  D00E               	goto	l3859
  4373  00210E  D7EB               	goto	l3851
  4374  002110  D00C               	goto	l3859
  4375  002112                     l3855:
  4376  002112  2A1B               	incf	___ftpack@exp,f,c
  4377  002114  0E01               	movlw	1
  4378  002116  2618               	addwf	___ftpack@arg,f,c
  4379  002118  0E00               	movlw	0
  4380  00211A  2219               	addwfc	___ftpack@arg+1,f,c
  4381  00211C  0E00               	movlw	0
  4382  00211E  221A               	addwfc	___ftpack@arg+2,f,c
  4383  002120  90D8               	bcf	status,0,c
  4384  002122  321A               	rrcf	___ftpack@arg+2,f,c
  4385  002124  3219               	rrcf	___ftpack@arg+1,f,c
  4386  002126  3218               	rrcf	___ftpack@arg,f,c
  4387  002128  D000               	goto	l3859
  4388  00212A                     l3859:
  4389  00212A  0E00               	movlw	0
  4390  00212C  1418               	andwf	___ftpack@arg,w,c
  4391  00212E  6E1D               	movwf	??___ftpack& (0+255),c
  4392  002130  0E00               	movlw	0
  4393  002132  1419               	andwf	___ftpack@arg+1,w,c
  4394  002134  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4395  002136  0EFF               	movlw	255
  4396  002138  141A               	andwf	___ftpack@arg+2,w,c
  4397  00213A  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4398  00213C  501D               	movf	??___ftpack,w,c
  4399  00213E  101E               	iorwf	??___ftpack+1,w,c
  4400  002140  101F               	iorwf	??___ftpack+2,w,c
  4401  002142  B4D8               	btfsc	status,2,c
  4402  002144  D008               	goto	l3863
  4403  002146  D7E5               	goto	l3855
  4404  002148  D006               	goto	l3863
  4405  00214A                     l3861:
  4406  00214A  061B               	decf	___ftpack@exp,f,c
  4407  00214C  90D8               	bcf	status,0,c
  4408  00214E  3618               	rlcf	___ftpack@arg,f,c
  4409  002150  3619               	rlcf	___ftpack@arg+1,f,c
  4410  002152  361A               	rlcf	___ftpack@arg+2,f,c
  4411  002154  D000               	goto	l3863
  4412  002156                     l3863:
  4413  002156  BE19               	btfsc	___ftpack@arg+1,7,c
  4414  002158  D004               	goto	l1031
  4415  00215A  0E02               	movlw	2
  4416  00215C  601B               	cpfslt	___ftpack@exp,c
  4417  00215E  D7F5               	goto	l3861
  4418  002160  D000               	goto	l1031
  4419  002162                     l1031:
  4420  002162  B01B               	btfsc	___ftpack@exp,0,c
  4421  002164  D002               	goto	l3869
  4422  002166  9E19               	bcf	___ftpack@arg+1,7,c
  4423  002168  D000               	goto	l3869
  4424  00216A                     l3869:
  4425  00216A  90D8               	bcf	status,0,c
  4426  00216C  321B               	rrcf	___ftpack@exp,f,c
  4427  00216E  501B               	movf	___ftpack@exp,w,c
  4428  002170  121A               	iorwf	___ftpack@arg+2,f,c
  4429  002172  501C               	movf	___ftpack@sign,w,c
  4430  002174  B4D8               	btfsc	status,2,c
  4431  002176  D002               	goto	l3875
  4432  002178  8E1A               	bsf	___ftpack@arg+2,7,c
  4433  00217A  D000               	goto	l3875
  4434  00217C                     l3875:
  4435  00217C  C018  F018         	movff	___ftpack@arg,?___ftpack
  4436  002180  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  4437  002184  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  4438  002188  D000               	goto	l1020
  4439  00218A                     l1020:
  4440  00218A  0012               	return		;funcret
  4441  00218C                     __end_of___ftpack:
  4442                           	opt stack 0
  4443                           tblptru	equ	0xFF8
  4444                           tblptrh	equ	0xFF7
  4445                           tblptrl	equ	0xFF6
  4446                           tablat	equ	0xFF5
  4447                           prodh	equ	0xFF4
  4448                           prodl	equ	0xFF3
  4449                           intcon	equ	0xFF2
  4450                           postinc0	equ	0xFEE
  4451                           wreg	equ	0xFE8
  4452                           postdec1	equ	0xFE5
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _ImplementPIDMotion *****************
  4462 ;; Defined at:
  4463 ;;		line 40 in file "MotorControl.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  PIDValue        2   40[BANK0 ] int 
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;		None
  4468 ;; Return value:  Size  Location     Type
  4469 ;;		None               void
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;Total ram usage:        4 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    5
  4484 ;; This function calls:
  4485 ;;		_abs
  4486 ;; This function is called by:
  4487 ;;		_main
  4488 ;;		_ZeroMotors
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text15
  4493  0022FC                     __ptext15:
  4494                           	opt stack 0
  4495  0022FC                     _ImplementPIDMotion:
  4496                           	opt stack 23
  4497                           
  4498                           ;MotorControl.c: 42: if (PIDValue > 255)
  4499                           
  4500                           ;incstack = 0
  4501  0022FC  0100               	movlb	0	; () banked
  4502  0022FE  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4503  002300  D009               	goto	l2957
  4504  002302  0100               	movlb	0	; () banked
  4505  002304  0589               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4506  002306  A0D8               	btfss	status,0,c
  4507  002308  D005               	goto	l2957
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;MotorControl.c: 43: PIDValue = 255;
  4511  00230A  0E00               	movlw	0
  4512  00230C  0100               	movlb	0	; () banked
  4513  00230E  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4514  002310  6988               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4515  002312  D010               	goto	l2961
  4516  002314                     l2957:
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;MotorControl.c: 44: else if (PIDValue < -255)
  4520  002314  0100               	movlb	0	; () banked
  4521  002316  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4522  002318  D00D               	goto	l2961
  4523  00231A  0100               	movlb	0	; () banked
  4524  00231C  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4525  00231E  0EFF               	movlw	255
  4526  002320  0100               	movlb	0	; () banked
  4527  002322  5989               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4528  002324  B0D8               	btfsc	status,0,c
  4529  002326  D006               	goto	l2961
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;MotorControl.c: 45: PIDValue = -255;
  4533  002328  0EFF               	movlw	255
  4534  00232A  0100               	movlb	0	; () banked
  4535  00232C  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4536  00232E  0E01               	movlw	1
  4537  002330  6F88               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4538                           
  4539                           ; BSR set to: 0
  4540  002332  D000               	goto	l2961
  4541  002334                     l2961:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;MotorControl.c: 47: if (PIDValue < 0)
  4545  002334  0100               	movlb	0	; () banked
  4546  002336  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4547  002338  D002               	goto	l2965
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  4551  00233A  8EB7               	bsf	4023,7,c	;volatile
  4552  00233C  D00C               	goto	l2969
  4553  00233E                     l2965:
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;MotorControl.c: 49: else if (PIDValue > 0)
  4557  00233E  0100               	movlb	0	; () banked
  4558  002340  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4559  002342  D009               	goto	l2969
  4560  002344  0100               	movlb	0	; () banked
  4561  002346  5189               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4562  002348  E104               	bnz	u2150
  4563  00234A  0100               	movlb	0	; () banked
  4564  00234C  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4565  00234E  A0D8               	btfss	status,0,c
  4566  002350  D002               	goto	l2969
  4567  002352                     u2150:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  4571  002352  9EB7               	bcf	4023,7,c	;volatile
  4572                           
  4573                           ; BSR set to: 0
  4574  002354  D000               	goto	l2969
  4575  002356                     l2969:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  4579  002356  C088  F084         	movff	ImplementPIDMotion@PIDValue,abs@a
  4580  00235A  C089  F085         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4581  00235E  ECD5  F015         	call	_abs	;wreg free
  4582  002362  C084  F088         	movff	?_abs,ImplementPIDMotion@PIDValue
  4583  002366  C085  F089         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4584                           
  4585                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  4586  00236A  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4587  00236E  C089  F08B         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4588  002372  0100               	movlb	0	; () banked
  4589  002374  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4590  002376  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4591  002378  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4592  00237A  0100               	movlb	0	; () banked
  4593  00237C  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4594  00237E  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4595  002380  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4596  002382  0100               	movlb	0	; () banked
  4597  002384  518A               	movf	??_ImplementPIDMotion& (0+255),w,b
  4598  002386  6EB8               	movwf	4024,c	;volatile
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4602  002388  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4603  00238C  0E03               	movlw	3
  4604  00238E  0100               	movlb	0	; () banked
  4605  002390  178A               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4606  002392  0100               	movlb	0	; () banked
  4607  002394  3B8A               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4608  002396  50B7               	movf	4023,w,c	;volatile
  4609  002398  0100               	movlb	0	; () banked
  4610  00239A  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4611  00239C  0BCF               	andlw	-49
  4612  00239E  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4613  0023A0  6EB7               	movwf	4023,c	;volatile
  4614                           
  4615                           ; BSR set to: 0
  4616  0023A2  0012               	return		;funcret
  4617  0023A4                     __end_of_ImplementPIDMotion:
  4618                           	opt stack 0
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           postinc0	equ	0xFEE
  4627                           wreg	equ	0xFE8
  4628                           postdec1	equ	0xFE5
  4629                           fsr1h	equ	0xFE2
  4630                           fsr1l	equ	0xFE1
  4631                           indf2	equ	0xFDF
  4632                           postinc2	equ	0xFDE
  4633                           fsr2h	equ	0xFDA
  4634                           fsr2l	equ	0xFD9
  4635                           status	equ	0xFD8
  4636                           
  4637 ;; *************** function _SPIInit *****************
  4638 ;; Defined at:
  4639 ;;		line 21 in file "SPISlave.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;		None               void
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;Total ram usage:        0 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    5
  4660 ;; This function calls:
  4661 ;;		_OpenSPI1
  4662 ;; This function is called by:
  4663 ;;		_initialize
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text16
  4668  002D66                     __ptext16:
  4669                           	opt stack 0
  4670  002D66                     _SPIInit:
  4671                           	opt stack 24
  4672                           
  4673                           ;SPISlave.c: 23: TRISCbits.RC4 = 1;
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;incstack = 0
  4677  002D66  8894               	bsf	3988,4,c	;volatile
  4678                           
  4679                           ;SPISlave.c: 24: TRISCbits.RC5 = 0;
  4680  002D68  9A94               	bcf	3988,5,c	;volatile
  4681                           
  4682                           ;SPISlave.c: 25: TRISFbits.RF7 = 1;
  4683  002D6A  8E97               	bsf	3991,7,c	;volatile
  4684                           
  4685                           ;SPISlave.c: 26: TRISCbits.RC6 = 0;
  4686  002D6C  9C94               	bcf	3988,6,c	;volatile
  4687                           
  4688                           ;SPISlave.c: 27: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4689  002D6E  0E00               	movlw	0
  4690  002D70  6E18               	movwf	OpenSPI1@bus_mode,c
  4691  002D72  0E00               	movlw	0
  4692  002D74  6E19               	movwf	OpenSPI1@smp_phase,c
  4693  002D76  0E04               	movlw	4
  4694  002D78  EC9B  F013         	call	_OpenSPI1
  4695                           
  4696                           ;SPISlave.c: 28: PIE1bits.SSP1IE = 1;
  4697  002D7C  869D               	bsf	3997,3,c	;volatile
  4698  002D7E  0012               	return		;funcret
  4699  002D80                     __end_of_SPIInit:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function _RecTmrInit *****************
  4720 ;; Defined at:
  4721 ;;		line 308 in file "RTDuC.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;		None
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;		None
  4726 ;; Return value:  Size  Location     Type
  4727 ;;		None               void
  4728 ;; Registers used:
  4729 ;;		wreg, status,2
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;Total ram usage:        0 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    4
  4742 ;; This function calls:
  4743 ;;		Nothing
  4744 ;; This function is called by:
  4745 ;;		_initialize
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text17
  4750  002E1E                     __ptext17:
  4751                           	opt stack 0
  4752  002E1E                     _RecTmrInit:
  4753                           	opt stack 25
  4754                           
  4755                           ;RTDuC.c: 310: T3CONbits.T3CKPS = 0x3;
  4756                           
  4757                           ;incstack = 0
  4758  002E1E  0E30               	movlw	48
  4759  002E20  12B1               	iorwf	4017,f,c	;volatile
  4760                           
  4761                           ;RTDuC.c: 311: T3CONbits.TMR3CS = 0;
  4762  002E22  92B1               	bcf	4017,1,c	;volatile
  4763  002E24  0012               	return		;funcret
  4764  002E26                     __end_of_RecTmrInit:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           intcon	equ	0xFF2
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           postdec1	equ	0xFE5
  4776                           fsr1h	equ	0xFE2
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function _RTDInit *****************
  4785 ;; Defined at:
  4786 ;;		line 3 in file "ResolverToDigital.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;		None               void
  4793 ;; Registers used:
  4794 ;;		wreg, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    5
  4807 ;; This function calls:
  4808 ;;		_Delay10TCYx
  4809 ;;		_Delay1KTCYx
  4810 ;;		_Delay1TCYx
  4811 ;; This function is called by:
  4812 ;;		_initialize
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text18
  4817  002B1E                     __ptext18:
  4818                           	opt stack 0
  4819  002B1E                     _RTDInit:
  4820                           	opt stack 24
  4821                           
  4822                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4823                           
  4824                           ;incstack = 0
  4825  002B1E  6895               	setf	3989,c	;volatile
  4826                           
  4827                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4828  002B20  6899               	setf	3993,c	;volatile
  4829                           
  4830                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4831  002B22  9096               	bcf	3990,0,c	;volatile
  4832                           
  4833                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4834  002B24  9296               	bcf	3990,1,c	;volatile
  4835                           
  4836                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4837  002B26  9496               	bcf	3990,2,c	;volatile
  4838                           
  4839                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4840  002B28  909A               	bcf	3994,0,c	;volatile
  4841                           
  4842                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4843  002B2A  8A96               	bsf	3990,5,c	;volatile
  4844                           
  4845                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4846  002B2C  8C96               	bsf	3990,6,c	;volatile
  4847                           
  4848                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4849  002B2E  8E96               	bsf	3990,7,c	;volatile
  4850                           
  4851                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  4852  002B30  9088               	bcf	3976,0,c	;volatile
  4853                           
  4854                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  4855  002B32  0E0A               	movlw	10
  4856  002B34  ECEC  F016         	call	_Delay10TCYx
  4857                           
  4858                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  4859  002B38  8088               	bsf	3976,0,c	;volatile
  4860                           
  4861                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  4862  002B3A  0E14               	movlw	20
  4863  002B3C  ECE3  F016         	call	_Delay1KTCYx
  4864                           
  4865                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  4866  002B40  9084               	bcf	3972,0,c	;volatile
  4867                           
  4868                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  4869  002B42  0E01               	movlw	1
  4870  002B44  ECFE  F016         	call	_Delay1TCYx
  4871                           
  4872                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  4873  002B48  8084               	bsf	3972,0,c	;volatile
  4874                           
  4875                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  4876  002B4A  9484               	bcf	3972,2,c	;volatile
  4877  002B4C  0012               	return		;funcret
  4878  002B4E                     __end_of_RTDInit:
  4879                           	opt stack 0
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           postinc0	equ	0xFEE
  4888                           wreg	equ	0xFE8
  4889                           postdec1	equ	0xFE5
  4890                           fsr1h	equ	0xFE2
  4891                           fsr1l	equ	0xFE1
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _Delay1TCYx *****************
  4899 ;; Defined at:
  4900 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  unit            1    wreg     unsigned char 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  unit            1   23[COMRAM] unsigned char 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		wreg
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;Total ram usage:        1 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    4
  4921 ;; This function calls:
  4922 ;;		Nothing
  4923 ;; This function is called by:
  4924 ;;		_RTDInit
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text19
  4929  002DFC                     __ptext19:
  4930                           	opt stack 0
  4931  002DFC                     _Delay1TCYx:
  4932                           	opt stack 24
  4933                           
  4934                           ;incstack = 0
  4935                           ;Delay1TCYx@unit stored from wreg
  4936  002DFC  6E18               	movwf	Delay1TCYx@unit,c
  4937  002DFE                     l928:
  4938  002DFE  F000               	nop	
  4939  002E00  2E18               	decfsz	Delay1TCYx@unit,f,c
  4940  002E02  D7FD               	goto	l928
  4941  002E04  D000               	goto	l930
  4942  002E06                     l930:
  4943  002E06  0012               	return		;funcret
  4944  002E08                     __end_of_Delay1TCYx:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _Delay1KTCYx *****************
  4965 ;; Defined at:
  4966 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  unit            1    wreg     unsigned char 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  unit            1   23[COMRAM] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;		None               void
  4973 ;; Registers used:
  4974 ;;		wreg
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        1 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    4
  4987 ;; This function calls:
  4988 ;;		Nothing
  4989 ;; This function is called by:
  4990 ;;		_RTDInit
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text20
  4995  002DC6                     __ptext20:
  4996                           	opt stack 0
  4997  002DC6                     _Delay1KTCYx:
  4998                           	opt stack 24
  4999                           
  5000                           ;incstack = 0
  5001                           ;Delay1KTCYx@unit stored from wreg
  5002  002DC6  6E18               	movwf	Delay1KTCYx@unit,c
  5003  002DC8  0EFA               	movlw	250
  5004  002DCA                     u3987:
  5005  002DCA  F000               	nop	
  5006  002DCC  2EE8               	decfsz	wreg,f,c
  5007  002DCE  D7FD               	goto	u3987
  5008  002DD0  2E18               	decfsz	Delay1KTCYx@unit,f,c
  5009  002DD2  D7FA               	goto	l2999
  5010  002DD4  D000               	goto	l923
  5011  002DD6                     l923:
  5012  002DD6  0012               	return		;funcret
  5013  002DD8                     __end_of_Delay1KTCYx:
  5014                           	opt stack 0
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1h	equ	0xFE2
  5026                           fsr1l	equ	0xFE1
  5027                           indf2	equ	0xFDF
  5028                           postinc2	equ	0xFDE
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _Delay10TCYx *****************
  5034 ;; Defined at:
  5035 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  unit            1    wreg     unsigned char 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  unit            1   23[COMRAM] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;		None               void
  5042 ;; Registers used:
  5043 ;;		wreg
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        1 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    4
  5056 ;; This function calls:
  5057 ;;		Nothing
  5058 ;; This function is called by:
  5059 ;;		_RTDInit
  5060 ;;		_ReadRTDpos
  5061 ;;		_main
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text21
  5066  002DD8                     __ptext21:
  5067                           	opt stack 0
  5068  002DD8                     _Delay10TCYx:
  5069                           	opt stack 23
  5070                           
  5071                           ;incstack = 0
  5072                           ;Delay10TCYx@unit stored from wreg
  5073  002DD8  6E18               	movwf	Delay10TCYx@unit,c
  5074  002DDA  0E03               	movlw	3
  5075  002DDC                     u3997:
  5076  002DDC  2EE8               	decfsz	wreg,f,c
  5077  002DDE  D7FE               	goto	u3997
  5078  002DE0  F000               	nop	
  5079  002DE2  2E18               	decfsz	Delay10TCYx@unit,f,c
  5080  002DE4  D7FA               	goto	l2743
  5081  002DE6  D000               	goto	l916
  5082  002DE8                     l916:
  5083  002DE8  0012               	return		;funcret
  5084  002DEA                     __end_of_Delay10TCYx:
  5085                           	opt stack 0
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           intcon	equ	0xFF2
  5093                           postinc0	equ	0xFEE
  5094                           wreg	equ	0xFE8
  5095                           postdec1	equ	0xFE5
  5096                           fsr1h	equ	0xFE2
  5097                           fsr1l	equ	0xFE1
  5098                           indf2	equ	0xFDF
  5099                           postinc2	equ	0xFDE
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _PIDInit *****************
  5105 ;; Defined at:
  5106 ;;		line 18 in file "PID.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;		None               void
  5113 ;; Registers used:
  5114 ;;		wreg, status,2
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    4
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_initialize
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text22
  5135  002878                     __ptext22:
  5136                           	opt stack 0
  5137  002878                     _PIDInit:
  5138                           	opt stack 25
  5139                           
  5140                           ;PID.c: 20: error = 0;
  5141                           
  5142                           ;incstack = 0
  5143  002878  0E00               	movlw	0
  5144  00287A  0100               	movlb	0	; () banked
  5145  00287C  6FB9               	movwf	_error& (0+255),b
  5146  00287E  0E00               	movlw	0
  5147  002880  0100               	movlb	0	; () banked
  5148  002882  6FBA               	movwf	(_error+1)& (0+255),b
  5149  002884  0E00               	movlw	0
  5150  002886  0100               	movlb	0	; () banked
  5151  002888  6FBB               	movwf	(_error+2)& (0+255),b
  5152                           
  5153                           ;PID.c: 21: prevErr = 0;
  5154  00288A  0E00               	movlw	0
  5155  00288C  0100               	movlb	0	; () banked
  5156  00288E  6FBF               	movwf	_prevErr& (0+255),b
  5157  002890  0E00               	movlw	0
  5158  002892  0100               	movlb	0	; () banked
  5159  002894  6FC0               	movwf	(_prevErr+1)& (0+255),b
  5160  002896  0E00               	movlw	0
  5161  002898  0100               	movlb	0	; () banked
  5162  00289A  6FC1               	movwf	(_prevErr+2)& (0+255),b
  5163                           
  5164                           ;PID.c: 22: intErr = 0;
  5165  00289C  0E00               	movlw	0
  5166  00289E  0100               	movlb	0	; () banked
  5167  0028A0  6FBC               	movwf	_intErr& (0+255),b
  5168  0028A2  0E00               	movlw	0
  5169  0028A4  0100               	movlb	0	; () banked
  5170  0028A6  6FBD               	movwf	(_intErr+1)& (0+255),b
  5171  0028A8  0E00               	movlw	0
  5172  0028AA  0100               	movlb	0	; () banked
  5173  0028AC  6FBE               	movwf	(_intErr+2)& (0+255),b
  5174                           
  5175                           ;PID.c: 24: T0CON = 0x04;
  5176  0028AE  0E04               	movlw	4
  5177  0028B0  6ED5               	movwf	4053,c	;volatile
  5178                           
  5179                           ;PID.c: 25: TMR0H = 0xDB;
  5180  0028B2  0EDB               	movlw	219
  5181  0028B4  6ED7               	movwf	4055,c	;volatile
  5182                           
  5183                           ;PID.c: 26: TMR0L = 0x60;
  5184  0028B6  0E60               	movlw	96
  5185  0028B8  6ED6               	movwf	4054,c	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188  0028BA  0012               	return		;funcret
  5189  0028BC                     __end_of_PIDInit:
  5190                           	opt stack 0
  5191                           tblptru	equ	0xFF8
  5192                           tblptrh	equ	0xFF7
  5193                           tblptrl	equ	0xFF6
  5194                           tablat	equ	0xFF5
  5195                           prodh	equ	0xFF4
  5196                           prodl	equ	0xFF3
  5197                           intcon	equ	0xFF2
  5198                           postinc0	equ	0xFEE
  5199                           wreg	equ	0xFE8
  5200                           postdec1	equ	0xFE5
  5201                           fsr1h	equ	0xFE2
  5202                           fsr1l	equ	0xFE1
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           fsr2h	equ	0xFDA
  5206                           fsr2l	equ	0xFD9
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function _MotorDriverInit *****************
  5210 ;; Defined at:
  5211 ;;		line 7 in file "MotorControl.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		wreg, status,2
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;Total ram usage:        0 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    4
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_initialize
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text23
  5240  002C98                     __ptext23:
  5241                           	opt stack 0
  5242  002C98                     _MotorDriverInit:
  5243                           	opt stack 25
  5244                           
  5245                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;incstack = 0
  5249  002C98  9098               	bcf	3992,0,c	;volatile
  5250                           
  5251                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  5252  002C9A  9896               	bcf	3990,4,c	;volatile
  5253                           
  5254                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  5255  002C9C  9696               	bcf	3990,3,c	;volatile
  5256                           
  5257                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  5258  002C9E  9698               	bcf	3992,3,c	;volatile
  5259                           
  5260                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  5261  002CA0  8093               	bsf	3987,0,c	;volatile
  5262                           
  5263                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  5264  002CA2  9892               	bcf	3986,4,c	;volatile
  5265                           
  5266                           ;MotorControl.c: 18: CCPR3L = 0x00;
  5267  002CA4  0E00               	movlw	0
  5268  002CA6  6EB8               	movwf	4024,c	;volatile
  5269                           
  5270                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  5271  002CA8  98B7               	bcf	4023,4,c	;volatile
  5272                           
  5273                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  5274  002CAA  9AB7               	bcf	4023,5,c	;volatile
  5275                           
  5276                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  5277  002CAC  0E4C               	movlw	76
  5278  002CAE  6EB7               	movwf	4023,c	;volatile
  5279                           
  5280                           ;MotorControl.c: 22: PR2 = 0xFF;
  5281  002CB0  68CB               	setf	4043,c	;volatile
  5282                           
  5283                           ;MotorControl.c: 23: T3CON = 0x00;
  5284  002CB2  0E00               	movlw	0
  5285  002CB4  6EB1               	movwf	4017,c	;volatile
  5286                           
  5287                           ;MotorControl.c: 24: T2CON = 0x04;
  5288  002CB6  0E04               	movlw	4
  5289  002CB8  6ECA               	movwf	4042,c	;volatile
  5290  002CBA  0012               	return		;funcret
  5291  002CBC                     __end_of_MotorDriverInit:
  5292                           	opt stack 0
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           prodh	equ	0xFF4
  5298                           prodl	equ	0xFF3
  5299                           intcon	equ	0xFF2
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function _JoystickInit *****************
  5312 ;; Defined at:
  5313 ;;		line 6 in file "Joystick.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;Total ram usage:        0 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    4
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_initialize
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           	psect	text24
  5342  002B4E                     __ptext24:
  5343                           	opt stack 0
  5344  002B4E                     _JoystickInit:
  5345                           	opt stack 25
  5346                           
  5347                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  5348                           
  5349                           ;incstack = 0
  5350  002B4E  9492               	bcf	3986,2,c	;volatile
  5351                           
  5352                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  5353  002B50  8293               	bsf	3987,1,c	;volatile
  5354                           
  5355                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  5356  002B52  A281               	btfss	3969,1,c	;volatile
  5357  002B54  D003               	goto	l31
  5358                           
  5359                           ;Joystick.c: 11: {
  5360                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  5361  002B56  8480               	bsf	3968,2,c	;volatile
  5362                           
  5363                           ;Joystick.c: 13: JSEnableFlag = 1;
  5364  002B58  0E01               	movlw	1
  5365  002B5A  D004               	goto	L1
  5366  002B5C                     l31:
  5367                           
  5368                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  5369  002B5C  B281               	btfsc	3969,1,c	;volatile
  5370  002B5E  D005               	goto	l3145
  5371                           
  5372                           ;Joystick.c: 16: {
  5373                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  5374  002B60  9480               	bcf	3968,2,c	;volatile
  5375                           
  5376                           ;Joystick.c: 18: JSEnableFlag = 0;
  5377  002B62  0E00               	movlw	0
  5378  002B64                     L1:
  5379  002B64  0100               	movlb	0	; () banked
  5380  002B66  6FC4               	movwf	_JSEnableFlag& (0+255),b
  5381                           
  5382                           ; BSR set to: 0
  5383  002B68  D000               	goto	l3145
  5384  002B6A                     l3145:
  5385                           
  5386                           ;Joystick.c: 19: }
  5387                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  5388  002B6A  80C2               	bsf	4034,0,c	;volatile
  5389                           
  5390                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  5391  002B6C  50C2               	movf	4034,w,c	;volatile
  5392  002B6E  0B01               	andlw	1
  5393  002B70  6EC2               	movwf	4034,c	;volatile
  5394                           
  5395                           ;Joystick.c: 23: ADCON1 = 0x0D;
  5396  002B72  0E0D               	movlw	13
  5397  002B74  6EC1               	movwf	4033,c	;volatile
  5398                           
  5399                           ;Joystick.c: 24: ADCON2 = 0xB4;
  5400  002B76  0EB4               	movlw	180
  5401  002B78  6EC0               	movwf	4032,c	;volatile
  5402  002B7A  0012               	return		;funcret
  5403  002B7C                     __end_of_JoystickInit:
  5404                           	opt stack 0
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon	equ	0xFF2
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           postdec1	equ	0xFE5
  5415                           fsr1h	equ	0xFE2
  5416                           fsr1l	equ	0xFE1
  5417                           indf2	equ	0xFDF
  5418                           postinc2	equ	0xFDE
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function _InitializeInterrupts *****************
  5424 ;; Defined at:
  5425 ;;		line 314 in file "RTDuC.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;		None
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;		None               void
  5432 ;; Registers used:
  5433 ;;		None
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:        0 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    4
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_initialize
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text25
  5454  002E08                     __ptext25:
  5455                           	opt stack 0
  5456  002E08                     _InitializeInterrupts:
  5457                           	opt stack 25
  5458                           
  5459                           ;RTDuC.c: 316: INTCONbits.GIE = 1;
  5460                           
  5461                           ;incstack = 0
  5462  002E08  8EF2               	bsf	intcon,7,c	;volatile
  5463                           
  5464                           ;RTDuC.c: 317: INTCONbits.PEIE = 1;
  5465  002E0A  8CF2               	bsf	intcon,6,c	;volatile
  5466                           
  5467                           ;RTDuC.c: 319: INTCONbits.TMR0IE = 1;
  5468  002E0C  8AF2               	bsf	intcon,5,c	;volatile
  5469                           
  5470                           ;RTDuC.c: 320: T0CONbits.TMR0ON = 1;
  5471  002E0E  8ED5               	bsf	4053,7,c	;volatile
  5472                           
  5473                           ;RTDuC.c: 322: PIE2bits.OSCFIE = 1;
  5474  002E10  8EA0               	bsf	4000,7,c	;volatile
  5475  002E12  0012               	return		;funcret
  5476  002E14                     __end_of_InitializeInterrupts:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           postdec1	equ	0xFE5
  5488                           fsr1h	equ	0xFE2
  5489                           fsr1l	equ	0xFE1
  5490                           indf2	equ	0xFDF
  5491                           postinc2	equ	0xFDE
  5492                           fsr2h	equ	0xFDA
  5493                           fsr2l	equ	0xFD9
  5494                           status	equ	0xFD8
  5495                           
  5496 ;; *************** function _EEPROMInit *****************
  5497 ;; Defined at:
  5498 ;;		line 13 in file "EEPROM.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;		None
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;		None
  5503 ;; Return value:  Size  Location     Type
  5504 ;;		None               void
  5505 ;; Registers used:
  5506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;Total ram usage:        0 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    7
  5519 ;; This function calls:
  5520 ;;		_EEBootUp
  5521 ;; This function is called by:
  5522 ;;		_initialize
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text26
  5527  002DB2                     __ptext26:
  5528                           	opt stack 0
  5529  002DB2                     _EEPROMInit:
  5530                           	opt stack 22
  5531                           
  5532                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5533                           
  5534                           ;incstack = 0
  5535  002DB2  9EA6               	bcf	4006,7,c	;volatile
  5536                           
  5537                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5538  002DB4  9CA6               	bcf	4006,6,c	;volatile
  5539                           
  5540                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5541  002DB6  84A6               	bsf	4006,2,c	;volatile
  5542                           
  5543                           ;EEPROM.c: 19: EEBootUp();
  5544  002DB8  ECA5  F012         	call	_EEBootUp	;wreg free
  5545                           
  5546                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5547  002DBC  0E3D               	movlw	61
  5548  002DBE  6ED2               	movwf	4050,c	;volatile
  5549                           
  5550                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5551  002DC0  84A0               	bsf	4000,2,c	;volatile
  5552                           
  5553                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5554  002DC2  84A2               	bsf	4002,2,c	;volatile
  5555  002DC4  0012               	return		;funcret
  5556  002DC6                     __end_of_EEPROMInit:
  5557                           	opt stack 0
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           prodh	equ	0xFF4
  5563                           prodl	equ	0xFF3
  5564                           intcon	equ	0xFF2
  5565                           postinc0	equ	0xFEE
  5566                           wreg	equ	0xFE8
  5567                           postdec1	equ	0xFE5
  5568                           fsr1h	equ	0xFE2
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function _EEBootUp *****************
  5577 ;; Defined at:
  5578 ;;		line 27 in file "EEPROM.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;		None               void
  5585 ;; Registers used:
  5586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;Total ram usage:        0 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    6
  5599 ;; This function calls:
  5600 ;;		_EEReadChar
  5601 ;;		_EEReadDouble
  5602 ;; This function is called by:
  5603 ;;		_EEPROMInit
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text27
  5608  00254A                     __ptext27:
  5609                           	opt stack 0
  5610  00254A                     _EEBootUp:
  5611                           	opt stack 22
  5612                           
  5613                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  5614                           
  5615                           ;incstack = 0
  5616  00254A  0E16               	movlw	22
  5617  00254C  ECA3  F016         	call	_EEReadChar
  5618  002550  0900               	iorlw	0
  5619  002552  B4D8               	btfsc	status,2,c
  5620  002554  D031               	goto	l369
  5621                           
  5622                           ;EEPROM.c: 30: {
  5623                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  5624  002556  0E00               	movlw	0
  5625  002558  EC70  F013         	call	_EEReadDouble
  5626  00255C  C01E  F03C         	movff	?_EEReadDouble,_SetAngle
  5627  002560  C01F  F03D         	movff	?_EEReadDouble+1,_SetAngle+1
  5628  002564  C020  F03E         	movff	?_EEReadDouble+2,_SetAngle+2
  5629                           
  5630                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  5631  002568  0E03               	movlw	3
  5632  00256A  EC70  F013         	call	_EEReadDouble
  5633  00256E  C01E  F0B6         	movff	?_EEReadDouble,_Kp
  5634  002572  C01F  F0B7         	movff	?_EEReadDouble+1,_Kp+1
  5635  002576  C020  F0B8         	movff	?_EEReadDouble+2,_Kp+2
  5636                           
  5637                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  5638  00257A  0E06               	movlw	6
  5639  00257C  EC70  F013         	call	_EEReadDouble
  5640  002580  C01E  F0B3         	movff	?_EEReadDouble,_Ki
  5641  002584  C01F  F0B4         	movff	?_EEReadDouble+1,_Ki+1
  5642  002588  C020  F0B5         	movff	?_EEReadDouble+2,_Ki+2
  5643                           
  5644                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  5645  00258C  0E09               	movlw	9
  5646  00258E  EC70  F013         	call	_EEReadDouble
  5647  002592  C01E  F0B0         	movff	?_EEReadDouble,_Kd
  5648  002596  C01F  F0B1         	movff	?_EEReadDouble+1,_Kd+1
  5649  00259A  C020  F0B2         	movff	?_EEReadDouble+2,_Kd+2
  5650                           
  5651                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  5652  00259E  0E15               	movlw	21
  5653  0025A0  ECA3  F016         	call	_EEReadChar
  5654  0025A4  0100               	movlb	0	; () banked
  5655  0025A6  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;EEPROM.c: 36: if(PIDEnableFlag == 1)
  5659  0025A8  0100               	movlb	0	; () banked
  5660  0025AA  05C5               	decf	_PIDEnableFlag& (0+255),w,b
  5661  0025AC  A4D8               	btfss	status,2,c
  5662  0025AE  D004               	goto	l369
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;EEPROM.c: 37: {
  5666                           ;EEPROM.c: 38: PIDEnableFlag = 3;
  5667  0025B0  0E03               	movlw	3
  5668  0025B2  0100               	movlb	0	; () banked
  5669  0025B4  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  5670                           
  5671                           ; BSR set to: 0
  5672  0025B6  D000               	goto	l369
  5673  0025B8                     l369:
  5674  0025B8  0012               	return		;funcret
  5675  0025BA                     __end_of_EEBootUp:
  5676                           	opt stack 0
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           intcon	equ	0xFF2
  5684                           postinc0	equ	0xFEE
  5685                           wreg	equ	0xFE8
  5686                           postdec1	equ	0xFE5
  5687                           fsr1h	equ	0xFE2
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           fsr2h	equ	0xFDA
  5692                           fsr2l	equ	0xFD9
  5693                           status	equ	0xFD8
  5694                           
  5695 ;; *************** function _EEReadDouble *****************
  5696 ;; Defined at:
  5697 ;;		line 100 in file "EEPROM.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;  location        1    wreg     unsigned char 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  location        1   32[COMRAM] unsigned char 
  5702 ;;  x               1   33[COMRAM] unsigned char 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  3   29[COMRAM] unsigned char 
  5705 ;; Registers used:
  5706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5712 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;Total ram usage:        5 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    5
  5719 ;; This function calls:
  5720 ;;		_Busy_eep
  5721 ;;		_EEReassembleDouble
  5722 ;;		_Read_b_eep
  5723 ;; This function is called by:
  5724 ;;		_EEBootUp
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text28
  5729  0026E0                     __ptext28:
  5730                           	opt stack 0
  5731  0026E0                     _EEReadDouble:
  5732                           	opt stack 22
  5733                           
  5734                           ;incstack = 0
  5735                           ;EEReadDouble@location stored from wreg
  5736  0026E0  6E21               	movwf	EEReadDouble@location,c
  5737                           
  5738                           ;EEPROM.c: 102: unsigned char x;
  5739                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  5740  0026E2  50F2               	movf	intcon,w,c	;volatile
  5741  0026E4  0B3F               	andlw	63
  5742  0026E6  6EF2               	movwf	intcon,c	;volatile
  5743                           
  5744                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  5745  0026E8  0E00               	movlw	0
  5746  0026EA  6E22               	movwf	EEReadDouble@x,c
  5747  0026EC                     l2761:
  5748  0026EC  0E02               	movlw	2
  5749  0026EE  6422               	cpfsgt	EEReadDouble@x,c
  5750  0026F0  D001               	goto	l2765
  5751  0026F2  D014               	goto	l2773
  5752  0026F4                     l2765:
  5753                           
  5754                           ;EEPROM.c: 107: {
  5755                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  5756  0026F4  5022               	movf	EEReadDouble@x,w,c
  5757  0026F6  0D01               	mullw	1
  5758  0026F8  0E39               	movlw	low _DDouble
  5759  0026FA  24F3               	addwf	prodl,w,c
  5760  0026FC  6ED9               	movwf	fsr2l,c
  5761  0026FE  0E00               	movlw	high _DDouble
  5762  002700  20F4               	addwfc	prodh,w,c
  5763  002702  6EDA               	movwf	fsr2h,c
  5764  002704  5021               	movf	EEReadDouble@location,w,c
  5765  002706  2422               	addwf	EEReadDouble@x,w,c
  5766  002708  6E18               	movwf	Read_b_eep@badd,c
  5767  00270A  6A19               	clrf	Read_b_eep@badd+1,c
  5768  00270C  3619               	rlcf	Read_b_eep@badd+1,f,c
  5769  00270E  ECC0  F016         	call	_Read_b_eep	;wreg free
  5770  002712  6EDF               	movwf	indf2,c
  5771                           
  5772                           ;EEPROM.c: 109: Busy_eep();
  5773  002714  EC13  F017         	call	_Busy_eep	;wreg free
  5774  002718  2A22               	incf	EEReadDouble@x,f,c
  5775  00271A  D7E8               	goto	l2761
  5776  00271C                     l2773:
  5777                           
  5778                           ;EEPROM.c: 110: }
  5779                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  5780  00271C  50F2               	movf	intcon,w,c	;volatile
  5781  00271E  09C0               	iorlw	192
  5782  002720  6EF2               	movwf	intcon,c	;volatile
  5783                           
  5784                           ;EEPROM.c: 114: return EEReassembleDouble();
  5785  002722  EC5E  F014         	call	_EEReassembleDouble	;wreg free
  5786  002726  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5787  00272A  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5788  00272E  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5789  002732  D000               	goto	l385
  5790  002734                     l385:
  5791  002734  0012               	return		;funcret
  5792  002736                     __end_of_EEReadDouble:
  5793                           	opt stack 0
  5794                           tblptru	equ	0xFF8
  5795                           tblptrh	equ	0xFF7
  5796                           tblptrl	equ	0xFF6
  5797                           tablat	equ	0xFF5
  5798                           prodh	equ	0xFF4
  5799                           prodl	equ	0xFF3
  5800                           intcon	equ	0xFF2
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           fsr1h	equ	0xFE2
  5805                           fsr1l	equ	0xFE1
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _EEReassembleDouble *****************
  5813 ;; Defined at:
  5814 ;;		line 62 in file "EEPROM.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  dub             3   26[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  3   23[COMRAM] unsigned char 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5828 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;Total ram usage:        6 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    4
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_EEReadDouble
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text29
  5843  0028BC                     __ptext29:
  5844                           	opt stack 0
  5845  0028BC                     _EEReassembleDouble:
  5846                           	opt stack 22
  5847                           
  5848                           ;EEPROM.c: 64: double dub;
  5849                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  5850                           
  5851                           ;incstack = 0
  5852  0028BC  0E1B               	movlw	low EEReassembleDouble@dub
  5853  0028BE  6E3F               	movwf	_DoublePtr,c
  5854  0028C0  0E00               	movlw	high EEReassembleDouble@dub
  5855  0028C2  6E40               	movwf	_DoublePtr+1,c
  5856                           
  5857                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  5858  0028C4  C03F  FFD9         	movff	_DoublePtr,fsr2l
  5859  0028C8  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  5860  0028CC  C039  FFDF         	movff	_DDouble,indf2
  5861                           
  5862                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  5863  0028D0  EE20 F001          	lfsr	2,1
  5864  0028D4  503F               	movf	_DoublePtr,w,c
  5865  0028D6  26D9               	addwf	fsr2l,f,c
  5866  0028D8  5040               	movf	_DoublePtr+1,w,c
  5867  0028DA  22DA               	addwfc	fsr2h,f,c
  5868  0028DC  C03A  FFDF         	movff	_DDouble+1,indf2
  5869                           
  5870                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  5871  0028E0  EE20 F002          	lfsr	2,2
  5872  0028E4  503F               	movf	_DoublePtr,w,c
  5873  0028E6  26D9               	addwf	fsr2l,f,c
  5874  0028E8  5040               	movf	_DoublePtr+1,w,c
  5875  0028EA  22DA               	addwfc	fsr2h,f,c
  5876  0028EC  C03B  FFDF         	movff	_DDouble+2,indf2
  5877                           
  5878                           ;EEPROM.c: 69: return dub;
  5879  0028F0  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5880  0028F4  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5881  0028F8  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5882  0028FC  D000               	goto	l375
  5883  0028FE                     l375:
  5884  0028FE  0012               	return		;funcret
  5885  002900                     __end_of_EEReassembleDouble:
  5886                           	opt stack 0
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           postinc0	equ	0xFEE
  5895                           wreg	equ	0xFE8
  5896                           postdec1	equ	0xFE5
  5897                           fsr1h	equ	0xFE2
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function _EEReadChar *****************
  5906 ;; Defined at:
  5907 ;;		line 136 in file "EEPROM.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  location        1    wreg     unsigned char 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  location        1   25[COMRAM] unsigned char 
  5912 ;;  ch              1   26[COMRAM] unsigned char 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      unsigned char 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;Total ram usage:        2 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    5
  5929 ;; This function calls:
  5930 ;;		_Read_b_eep
  5931 ;; This function is called by:
  5932 ;;		_EEBootUp
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text30
  5937  002D46                     __ptext30:
  5938                           	opt stack 0
  5939  002D46                     _EEReadChar:
  5940                           	opt stack 22
  5941                           
  5942                           ;incstack = 0
  5943                           ;EEReadChar@location stored from wreg
  5944  002D46  6E1A               	movwf	EEReadChar@location,c
  5945                           
  5946                           ;EEPROM.c: 138: unsigned char ch;
  5947                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  5948  002D48  50F2               	movf	intcon,w,c	;volatile
  5949  002D4A  0B3F               	andlw	63
  5950  002D4C  6EF2               	movwf	intcon,c	;volatile
  5951                           
  5952                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  5953  002D4E  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  5954  002D52  6A19               	clrf	Read_b_eep@badd+1,c
  5955  002D54  ECC0  F016         	call	_Read_b_eep	;wreg free
  5956  002D58  6E1B               	movwf	EEReadChar@ch,c
  5957                           
  5958                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  5959  002D5A  50F2               	movf	intcon,w,c	;volatile
  5960  002D5C  09C0               	iorlw	192
  5961  002D5E  6EF2               	movwf	intcon,c	;volatile
  5962                           
  5963                           ;EEPROM.c: 146: return ch;
  5964  002D60  501B               	movf	EEReadChar@ch,w,c
  5965  002D62  D000               	goto	l391
  5966  002D64                     l391:
  5967  002D64  0012               	return		;funcret
  5968  002D66                     __end_of_EEReadChar:
  5969                           	opt stack 0
  5970                           tblptru	equ	0xFF8
  5971                           tblptrh	equ	0xFF7
  5972                           tblptrl	equ	0xFF6
  5973                           tablat	equ	0xFF5
  5974                           prodh	equ	0xFF4
  5975                           prodl	equ	0xFF3
  5976                           intcon	equ	0xFF2
  5977                           postinc0	equ	0xFEE
  5978                           wreg	equ	0xFE8
  5979                           postdec1	equ	0xFE5
  5980                           fsr1h	equ	0xFE2
  5981                           fsr1l	equ	0xFE1
  5982                           indf2	equ	0xFDF
  5983                           postinc2	equ	0xFDE
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _Read_b_eep *****************
  5989 ;; Defined at:
  5990 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  badd            2   23[COMRAM] unsigned int 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;		None
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  1    wreg      unsigned char 
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;Total ram usage:        2 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    4
  6011 ;; This function calls:
  6012 ;;		Nothing
  6013 ;; This function is called by:
  6014 ;;		_EEReadDouble
  6015 ;;		_EEReadChar
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text31
  6020  002D80                     __ptext31:
  6021                           	opt stack 0
  6022  002D80                     _Read_b_eep:
  6023                           	opt stack 22
  6024                           
  6025                           ;incstack = 0
  6026  002D80  5019               	movf	Read_b_eep@badd+1,w,c
  6027  002D82  0B03               	andlw	3
  6028  002D84  6EAA               	movwf	4010,c	;volatile
  6029  002D86  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  6030  002D8A  9CA6               	bcf	4006,6,c	;volatile
  6031  002D8C  9EA6               	bcf	4006,7,c	;volatile
  6032  002D8E  80A6               	bsf	4006,0,c	;volatile
  6033  002D90  F000               	nop	
  6034  002D92  F000               	nop	
  6035  002D94  50A8               	movf	4008,w,c	;volatile
  6036  002D96  D000               	goto	l640
  6037  002D98                     l640:
  6038  002D98  0012               	return		;funcret
  6039  002D9A                     __end_of_Read_b_eep:
  6040                           	opt stack 0
  6041                           tblptru	equ	0xFF8
  6042                           tblptrh	equ	0xFF7
  6043                           tblptrl	equ	0xFF6
  6044                           tablat	equ	0xFF5
  6045                           prodh	equ	0xFF4
  6046                           prodl	equ	0xFF3
  6047                           intcon	equ	0xFF2
  6048                           postinc0	equ	0xFEE
  6049                           wreg	equ	0xFE8
  6050                           postdec1	equ	0xFE5
  6051                           fsr1h	equ	0xFE2
  6052                           fsr1l	equ	0xFE1
  6053                           indf2	equ	0xFDF
  6054                           postinc2	equ	0xFDE
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _SendSPI1 *****************
  6060 ;; Defined at:
  6061 ;;		line 44 in file "SPISlave.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  data            1    wreg     unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  data            1   28[COMRAM] unsigned char 
  6066 ;;  temp            1   27[COMRAM] unsigned char 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;		None               void
  6069 ;; Registers used:
  6070 ;;		wreg, status,2, status,0, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;Total ram usage:        2 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    6
  6083 ;; This function calls:
  6084 ;;		_SPIRestart
  6085 ;; This function is called by:
  6086 ;;		_main
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           	psect	text32
  6091  002B7C                     __ptext32:
  6092                           	opt stack 0
  6093  002B7C                     _SendSPI1:
  6094                           	opt stack 24
  6095                           
  6096                           ;incstack = 0
  6097                           ;SendSPI1@data stored from wreg
  6098  002B7C  6E1D               	movwf	SendSPI1@data,c
  6099                           
  6100                           ;SPISlave.c: 46: SSP1BUF = data;
  6101  002B7E  C01D  FFC9         	movff	SendSPI1@data,4041	;volatile
  6102                           
  6103                           ;SPISlave.c: 47: unsigned char temp;
  6104                           ;SPISlave.c: 48: PIR1bits.SSP1IF = 0;
  6105  002B82  969E               	bcf	3998,3,c	;volatile
  6106                           
  6107                           ;SPISlave.c: 49: temp = SSP1BUF;
  6108  002B84  CFC9 F01C          	movff	4041,SendSPI1@temp	;volatile
  6109                           
  6110                           ;SPISlave.c: 50: PIR1bits.TMR1IF = 0;
  6111  002B88  909E               	bcf	3998,0,c	;volatile
  6112                           
  6113                           ;SPISlave.c: 51: T1CONbits.TMR1ON = 1;
  6114  002B8A  80CD               	bsf	4045,0,c	;volatile
  6115                           
  6116                           ;SPISlave.c: 52: TMR1H = timer1High;
  6117  002B8C  C047  FFCF         	movff	_timer1High,4047	;volatile
  6118                           
  6119                           ;SPISlave.c: 53: TMR1L = timer1Low;
  6120  002B90  C042  FFCE         	movff	_timer1Low,4046	;volatile
  6121                           
  6122                           ;SPISlave.c: 54: while (!PIR1bits.SSP1IF)
  6123  002B94  D005               	goto	l3439
  6124  002B96                     l272:
  6125                           
  6126                           ;SPISlave.c: 55: {
  6127                           ;SPISlave.c: 56: if (PIR1bits.TMR1IF == 1)
  6128  002B96  A09E               	btfss	3998,0,c	;volatile
  6129  002B98  D003               	goto	l3439
  6130                           
  6131                           ;SPISlave.c: 57: {
  6132                           ;SPISlave.c: 58: SPIRestart();
  6133  002B9A  ECCD  F016         	call	_SPIRestart	;wreg free
  6134  002B9E  D000               	goto	l3439
  6135  002BA0                     l3439:
  6136  002BA0  A69E               	btfss	3998,3,c	;volatile
  6137  002BA2  D7F9               	goto	l272
  6138                           
  6139                           ;SPISlave.c: 59: }
  6140                           ;SPISlave.c: 60: }
  6141                           ;SPISlave.c: 61: SSP1CON1bits.SSPOV1 = 0;
  6142  002BA4  9CC6               	bcf	4038,6,c	;volatile
  6143                           
  6144                           ;SPISlave.c: 62: PIR1bits.SSP1IF = 0;
  6145  002BA6  969E               	bcf	3998,3,c	;volatile
  6146  002BA8  0012               	return		;funcret
  6147  002BAA                     __end_of_SendSPI1:
  6148                           	opt stack 0
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           intcon	equ	0xFF2
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _SaveAll *****************
  6168 ;; Defined at:
  6169 ;;		line 150 in file "EEPROM.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;		None
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;		None
  6174 ;; Return value:  Size  Location     Type
  6175 ;;		None               void
  6176 ;; Registers used:
  6177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;Total ram usage:        0 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    6
  6190 ;; This function calls:
  6191 ;;		_EEWriteChar
  6192 ;;		_EEWriteDouble
  6193 ;; This function is called by:
  6194 ;;		_main
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text33
  6199  00218C                     __ptext33:
  6200                           	opt stack 0
  6201  00218C                     _SaveAll:
  6202                           	opt stack 24
  6203                           
  6204                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  6205                           
  6206                           ;incstack = 0
  6207  00218C  C03C  F01C         	movff	_SetAngle,EEWriteDouble@dub
  6208  002190  C03D  F01D         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6209  002194  C03E  F01E         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6210  002198  0E00               	movlw	0
  6211  00219A  ECC6  F013         	call	_EEWriteDouble
  6212                           
  6213                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  6214  00219E  C0B6  F01C         	movff	_Kp,EEWriteDouble@dub
  6215  0021A2  C0B7  F01D         	movff	_Kp+1,EEWriteDouble@dub+1
  6216  0021A6  C0B8  F01E         	movff	_Kp+2,EEWriteDouble@dub+2
  6217  0021AA  0E03               	movlw	3
  6218  0021AC  ECC6  F013         	call	_EEWriteDouble
  6219                           
  6220                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  6221  0021B0  C0B3  F01C         	movff	_Ki,EEWriteDouble@dub
  6222  0021B4  C0B4  F01D         	movff	_Ki+1,EEWriteDouble@dub+1
  6223  0021B8  C0B5  F01E         	movff	_Ki+2,EEWriteDouble@dub+2
  6224  0021BC  0E06               	movlw	6
  6225  0021BE  ECC6  F013         	call	_EEWriteDouble
  6226                           
  6227                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  6228  0021C2  C0B0  F01C         	movff	_Kd,EEWriteDouble@dub
  6229  0021C6  C0B1  F01D         	movff	_Kd+1,EEWriteDouble@dub+1
  6230  0021CA  C0B2  F01E         	movff	_Kd+2,EEWriteDouble@dub+2
  6231  0021CE  0E09               	movlw	9
  6232  0021D0  ECC6  F013         	call	_EEWriteDouble
  6233                           
  6234                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  6235  0021D4  CF80 F01C          	movff	3968,EEWriteChar@ch	;volatile
  6236  0021D8  0E0C               	movlw	12
  6237  0021DA  EC70  F016         	call	_EEWriteChar
  6238                           
  6239                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  6240  0021DE  CF81 F01C          	movff	3969,EEWriteChar@ch	;volatile
  6241  0021E2  0E0D               	movlw	13
  6242  0021E4  EC70  F016         	call	_EEWriteChar
  6243                           
  6244                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  6245  0021E8  CF82 F01C          	movff	3970,EEWriteChar@ch	;volatile
  6246  0021EC  0E0E               	movlw	14
  6247  0021EE  EC70  F016         	call	_EEWriteChar
  6248                           
  6249                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  6250  0021F2  CF83 F01C          	movff	3971,EEWriteChar@ch	;volatile
  6251  0021F6  0E0F               	movlw	15
  6252  0021F8  EC70  F016         	call	_EEWriteChar
  6253                           
  6254                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  6255  0021FC  CF84 F01C          	movff	3972,EEWriteChar@ch	;volatile
  6256  002200  0E10               	movlw	16
  6257  002202  EC70  F016         	call	_EEWriteChar
  6258                           
  6259                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  6260  002206  CF85 F01C          	movff	3973,EEWriteChar@ch	;volatile
  6261  00220A  0E11               	movlw	17
  6262  00220C  EC70  F016         	call	_EEWriteChar
  6263                           
  6264                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  6265  002210  CF86 F01C          	movff	3974,EEWriteChar@ch	;volatile
  6266  002214  0E12               	movlw	18
  6267  002216  EC70  F016         	call	_EEWriteChar
  6268                           
  6269                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  6270  00221A  CF87 F01C          	movff	3975,EEWriteChar@ch	;volatile
  6271  00221E  0E13               	movlw	19
  6272  002220  EC70  F016         	call	_EEWriteChar
  6273                           
  6274                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  6275  002224  CF88 F01C          	movff	3976,EEWriteChar@ch	;volatile
  6276  002228  0E14               	movlw	20
  6277  00222A  EC70  F016         	call	_EEWriteChar
  6278                           
  6279                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  6280  00222E  C0C5  F01C         	movff	_PIDEnableFlag,EEWriteChar@ch
  6281  002232  0E15               	movlw	21
  6282  002234  EC70  F016         	call	_EEWriteChar
  6283                           
  6284                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  6285  002238  0E01               	movlw	1
  6286  00223A  6E1C               	movwf	EEWriteChar@ch,c
  6287  00223C  0E16               	movlw	22
  6288  00223E  EC70  F016         	call	_EEWriteChar
  6289  002242  0012               	return		;funcret
  6290  002244                     __end_of_SaveAll:
  6291                           	opt stack 0
  6292                           tblptru	equ	0xFF8
  6293                           tblptrh	equ	0xFF7
  6294                           tblptrl	equ	0xFF6
  6295                           tablat	equ	0xFF5
  6296                           prodh	equ	0xFF4
  6297                           prodl	equ	0xFF3
  6298                           intcon	equ	0xFF2
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           postdec1	equ	0xFE5
  6302                           fsr1h	equ	0xFE2
  6303                           fsr1l	equ	0xFE1
  6304                           indf2	equ	0xFDF
  6305                           postinc2	equ	0xFDE
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310 ;; *************** function _EEWriteDouble *****************
  6311 ;; Defined at:
  6312 ;;		line 77 in file "EEPROM.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;  location        1    wreg     unsigned char 
  6315 ;;  dub             3   27[COMRAM] unsigned char 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  location        1   30[COMRAM] unsigned char 
  6318 ;;  x               1   31[COMRAM] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;		None               void
  6321 ;; Registers used:
  6322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6328 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;Total ram usage:        5 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    5
  6335 ;; This function calls:
  6336 ;;		_Busy_eep
  6337 ;;		_EEDisassembleDouble
  6338 ;;		_Write_b_eep
  6339 ;; This function is called by:
  6340 ;;		_SaveAll
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text34
  6345  00278C                     __ptext34:
  6346                           	opt stack 0
  6347  00278C                     _EEWriteDouble:
  6348                           	opt stack 24
  6349                           
  6350                           ;incstack = 0
  6351                           ;EEWriteDouble@location stored from wreg
  6352  00278C  6E1F               	movwf	EEWriteDouble@location,c
  6353                           
  6354                           ;EEPROM.c: 79: unsigned char x;
  6355                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  6356  00278E  C01C  F018         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6357  002792  C01D  F019         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6358  002796  C01E  F01A         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6359  00279A  EC40  F015         	call	_EEDisassembleDouble	;wreg free
  6360                           
  6361                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  6362  00279E  50F2               	movf	intcon,w,c	;volatile
  6363  0027A0  0B3F               	andlw	63
  6364  0027A2  6EF2               	movwf	intcon,c	;volatile
  6365                           
  6366                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  6367  0027A4  0E00               	movlw	0
  6368  0027A6  6E20               	movwf	EEWriteDouble@x,c
  6369  0027A8                     l3231:
  6370  0027A8  0E02               	movlw	2
  6371  0027AA  6420               	cpfsgt	EEWriteDouble@x,c
  6372  0027AC  D001               	goto	l3235
  6373  0027AE  D014               	goto	l3245
  6374  0027B0                     l3235:
  6375                           
  6376                           ;EEPROM.c: 86: {
  6377                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  6378  0027B0  C01F  F018         	movff	EEWriteDouble@location,Write_b_eep@badd
  6379  0027B4  6A19               	clrf	Write_b_eep@badd+1,c
  6380  0027B6  5020               	movf	EEWriteDouble@x,w,c
  6381  0027B8  0D01               	mullw	1
  6382  0027BA  0E39               	movlw	low _DDouble
  6383  0027BC  24F3               	addwf	prodl,w,c
  6384  0027BE  6ED9               	movwf	fsr2l,c
  6385  0027C0  0E00               	movlw	high _DDouble
  6386  0027C2  20F4               	addwfc	prodh,w,c
  6387  0027C4  6EDA               	movwf	fsr2h,c
  6388  0027C6  50DF               	movf	indf2,w,c
  6389  0027C8  6E1A               	movwf	Write_b_eep@bdat,c
  6390  0027CA  ECC3  F014         	call	_Write_b_eep	;wreg free
  6391                           
  6392                           ;EEPROM.c: 88: location++;
  6393  0027CE  2A1F               	incf	EEWriteDouble@location,f,c
  6394                           
  6395                           ;EEPROM.c: 89: Busy_eep();
  6396  0027D0  EC13  F017         	call	_Busy_eep	;wreg free
  6397  0027D4  2A20               	incf	EEWriteDouble@x,f,c
  6398  0027D6  D7E8               	goto	l3231
  6399  0027D8                     l3245:
  6400                           
  6401                           ;EEPROM.c: 90: }
  6402                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  6403  0027D8  50F2               	movf	intcon,w,c	;volatile
  6404  0027DA  09C0               	iorlw	192
  6405  0027DC  6EF2               	movwf	intcon,c	;volatile
  6406  0027DE  0012               	return		;funcret
  6407  0027E0                     __end_of_EEWriteDouble:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodh	equ	0xFF4
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           postdec1	equ	0xFE5
  6419                           fsr1h	equ	0xFE2
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _EEDisassembleDouble *****************
  6428 ;; Defined at:
  6429 ;;		line 48 in file "EEPROM.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  dub             3   23[COMRAM] unsigned char 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;		None               void
  6436 ;; Registers used:
  6437 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6443 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;Total ram usage:        3 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    4
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_EEWriteDouble
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text35
  6458  002A80                     __ptext35:
  6459                           	opt stack 0
  6460  002A80                     _EEDisassembleDouble:
  6461                           	opt stack 24
  6462                           
  6463                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  6464                           
  6465                           ;incstack = 0
  6466  002A80  0E18               	movlw	low EEDisassembleDouble@dub
  6467  002A82  6E3F               	movwf	_DoublePtr,c
  6468  002A84  0E00               	movlw	high EEDisassembleDouble@dub
  6469  002A86  6E40               	movwf	_DoublePtr+1,c
  6470                           
  6471                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  6472  002A88  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6473  002A8C  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6474  002A90  50DF               	movf	indf2,w,c
  6475  002A92  6E39               	movwf	_DDouble,c
  6476                           
  6477                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  6478  002A94  EE20 F001          	lfsr	2,1
  6479  002A98  503F               	movf	_DoublePtr,w,c
  6480  002A9A  26D9               	addwf	fsr2l,f,c
  6481  002A9C  5040               	movf	_DoublePtr+1,w,c
  6482  002A9E  22DA               	addwfc	fsr2h,f,c
  6483  002AA0  50DF               	movf	indf2,w,c
  6484  002AA2  6E3A               	movwf	_DDouble+1,c
  6485                           
  6486                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  6487  002AA4  EE20 F002          	lfsr	2,2
  6488  002AA8  503F               	movf	_DoublePtr,w,c
  6489  002AAA  26D9               	addwf	fsr2l,f,c
  6490  002AAC  5040               	movf	_DoublePtr+1,w,c
  6491  002AAE  22DA               	addwfc	fsr2h,f,c
  6492  002AB0  50DF               	movf	indf2,w,c
  6493  002AB2  6E3B               	movwf	_DDouble+2,c
  6494  002AB4  0012               	return		;funcret
  6495  002AB6                     __end_of_EEDisassembleDouble:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           postinc0	equ	0xFEE
  6505                           wreg	equ	0xFE8
  6506                           postdec1	equ	0xFE5
  6507                           fsr1h	equ	0xFE2
  6508                           fsr1l	equ	0xFE1
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           fsr2h	equ	0xFDA
  6512                           fsr2l	equ	0xFD9
  6513                           status	equ	0xFD8
  6514                           
  6515 ;; *************** function _EEWriteChar *****************
  6516 ;; Defined at:
  6517 ;;		line 122 in file "EEPROM.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;  location        1    wreg     unsigned char 
  6520 ;;  ch              1   27[COMRAM] unsigned char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  location        1   28[COMRAM] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6532 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;Total ram usage:        2 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    5
  6539 ;; This function calls:
  6540 ;;		_Busy_eep
  6541 ;;		_Write_b_eep
  6542 ;; This function is called by:
  6543 ;;		_SaveAll
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text36
  6548  002CE0                     __ptext36:
  6549                           	opt stack 0
  6550  002CE0                     _EEWriteChar:
  6551                           	opt stack 24
  6552                           
  6553                           ;incstack = 0
  6554                           ;EEWriteChar@location stored from wreg
  6555  002CE0  6E1D               	movwf	EEWriteChar@location,c
  6556                           
  6557                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  6558  002CE2  50F2               	movf	intcon,w,c	;volatile
  6559  002CE4  0B3F               	andlw	63
  6560  002CE6  6EF2               	movwf	intcon,c	;volatile
  6561                           
  6562                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  6563  002CE8  C01D  F018         	movff	EEWriteChar@location,Write_b_eep@badd
  6564  002CEC  6A19               	clrf	Write_b_eep@badd+1,c
  6565  002CEE  C01C  F01A         	movff	EEWriteChar@ch,Write_b_eep@bdat
  6566  002CF2  ECC3  F014         	call	_Write_b_eep	;wreg free
  6567                           
  6568                           ;EEPROM.c: 127: Busy_eep();
  6569  002CF6  EC13  F017         	call	_Busy_eep	;wreg free
  6570                           
  6571                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  6572  002CFA  50F2               	movf	intcon,w,c	;volatile
  6573  002CFC  09C0               	iorlw	192
  6574  002CFE  6EF2               	movwf	intcon,c	;volatile
  6575  002D00  0012               	return		;funcret
  6576  002D02                     __end_of_EEWriteChar:
  6577                           	opt stack 0
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           postinc0	equ	0xFEE
  6586                           wreg	equ	0xFE8
  6587                           postdec1	equ	0xFE5
  6588                           fsr1h	equ	0xFE2
  6589                           fsr1l	equ	0xFE1
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _Write_b_eep *****************
  6597 ;; Defined at:
  6598 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  badd            2   23[COMRAM] unsigned int 
  6601 ;;  bdat            1   25[COMRAM] unsigned char 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  GIE_BIT_VAL     1   26[COMRAM] unsigned char 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, status,2, status,0
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6613 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;Total ram usage:        4 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    4
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_EEWriteDouble
  6624 ;;		_EEWriteChar
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text37
  6629  002986                     __ptext37:
  6630                           	opt stack 0
  6631  002986                     _Write_b_eep:
  6632                           	opt stack 24
  6633                           
  6634                           ;incstack = 0
  6635  002986  0E00               	movlw	0
  6636  002988  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6637  00298A  5019               	movf	Write_b_eep@badd+1,w,c
  6638  00298C  0B03               	andlw	3
  6639  00298E  6EAA               	movwf	4010,c	;volatile
  6640  002990  C018  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6641  002994  C01A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6642  002998  9EA6               	bcf	4006,7,c	;volatile
  6643  00299A  9CA6               	bcf	4006,6,c	;volatile
  6644  00299C  84A6               	bsf	4006,2,c	;volatile
  6645  00299E  0E00               	movlw	0
  6646  0029A0  BEF2               	btfsc	intcon,7,c	;volatile
  6647  0029A2  0E01               	movlw	1
  6648  0029A4  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6649  0029A6  9EF2               	bcf	intcon,7,c	;volatile
  6650  0029A8  0E55               	movlw	85
  6651  0029AA  6EA7               	movwf	4007,c	;volatile
  6652  0029AC  0EAA               	movlw	170
  6653  0029AE  6EA7               	movwf	4007,c	;volatile
  6654  0029B0  82A6               	bsf	4006,1,c	;volatile
  6655  0029B2  D000               	goto	l655
  6656  0029B4                     l655:
  6657  0029B4  B2A6               	btfsc	4006,1,c	;volatile
  6658  0029B6  D7FE               	goto	l655
  6659  0029B8  B01B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  6660  0029BA  D002               	bra	u2255
  6661  0029BC  9EF2               	bcf	intcon,7,c	;volatile
  6662  0029BE  D001               	bra	u2256
  6663  0029C0                     u2255:
  6664  0029C0  8EF2               	bsf	intcon,7,c	;volatile
  6665  0029C2                     u2256:
  6666  0029C2  94A6               	bcf	4006,2,c	;volatile
  6667  0029C4  0012               	return		;funcret
  6668  0029C6                     __end_of_Write_b_eep:
  6669                           	opt stack 0
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           intcon	equ	0xFF2
  6677                           postinc0	equ	0xFEE
  6678                           wreg	equ	0xFE8
  6679                           postdec1	equ	0xFE5
  6680                           fsr1h	equ	0xFE2
  6681                           fsr1l	equ	0xFE1
  6682                           indf2	equ	0xFDF
  6683                           postinc2	equ	0xFDE
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _Busy_eep *****************
  6689 ;; Defined at:
  6690 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;		None               void
  6697 ;; Registers used:
  6698 ;;		None
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;Total ram usage:        0 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    4
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_EEWriteDouble
  6715 ;;		_EEReadDouble
  6716 ;;		_EEWriteChar
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text38
  6721  002E26                     __ptext38:
  6722                           	opt stack 0
  6723  002E26                     _Busy_eep:
  6724                           	opt stack 22
  6725                           
  6726                           ;incstack = 0
  6727  002E26  D000               	goto	l624
  6728  002E28                     l624:
  6729  002E28  B2A6               	btfsc	4006,1,c	;volatile
  6730  002E2A  D7FE               	goto	l624
  6731  002E2C  0012               	return		;funcret
  6732  002E2E                     __end_of_Busy_eep:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           postdec1	equ	0xFE5
  6744                           fsr1h	equ	0xFE2
  6745                           fsr1l	equ	0xFE1
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function _SPIReassembleDouble *****************
  6753 ;; Defined at:
  6754 ;;		line 120 in file "SPISlave.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  dub             3   26[COMRAM] unsigned char 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  3   23[COMRAM] unsigned char 
  6761 ;; Registers used:
  6762 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6768 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;Total ram usage:        6 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    4
  6775 ;; This function calls:
  6776 ;;		Nothing
  6777 ;; This function is called by:
  6778 ;;		_main
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text39
  6783  002900                     __ptext39:
  6784                           	opt stack 0
  6785  002900                     _SPIReassembleDouble:
  6786                           	opt stack 26
  6787                           
  6788                           ;SPISlave.c: 122: double dub;
  6789                           ;SPISlave.c: 123: DoublePtr = (unsigned char*) &dub;
  6790                           
  6791                           ;incstack = 0
  6792  002900  0E1B               	movlw	low SPIReassembleDouble@dub
  6793  002902  6E3F               	movwf	_DoublePtr,c
  6794  002904  0E00               	movlw	high SPIReassembleDouble@dub
  6795  002906  6E40               	movwf	_DoublePtr+1,c
  6796                           
  6797                           ;SPISlave.c: 124: DoublePtr[0] = DoubleSPIS[0];
  6798  002908  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6799  00290C  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6800  002910  C035  FFDF         	movff	_DoubleSPIS,indf2
  6801                           
  6802                           ;SPISlave.c: 125: DoublePtr[1] = DoubleSPIS[1];
  6803  002914  EE20 F001          	lfsr	2,1
  6804  002918  503F               	movf	_DoublePtr,w,c
  6805  00291A  26D9               	addwf	fsr2l,f,c
  6806  00291C  5040               	movf	_DoublePtr+1,w,c
  6807  00291E  22DA               	addwfc	fsr2h,f,c
  6808  002920  C036  FFDF         	movff	_DoubleSPIS+1,indf2
  6809                           
  6810                           ;SPISlave.c: 126: DoublePtr[2] = DoubleSPIS[2];
  6811  002924  EE20 F002          	lfsr	2,2
  6812  002928  503F               	movf	_DoublePtr,w,c
  6813  00292A  26D9               	addwf	fsr2l,f,c
  6814  00292C  5040               	movf	_DoublePtr+1,w,c
  6815  00292E  22DA               	addwfc	fsr2h,f,c
  6816  002930  C037  FFDF         	movff	_DoubleSPIS+2,indf2
  6817                           
  6818                           ;SPISlave.c: 128: return dub;
  6819  002934  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  6820  002938  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  6821  00293C  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  6822  002940  D000               	goto	l300
  6823  002942                     l300:
  6824  002942  0012               	return		;funcret
  6825  002944                     __end_of_SPIReassembleDouble:
  6826                           	opt stack 0
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           postinc0	equ	0xFEE
  6835                           wreg	equ	0xFE8
  6836                           postdec1	equ	0xFE5
  6837                           fsr1h	equ	0xFE2
  6838                           fsr1l	equ	0xFE1
  6839                           indf2	equ	0xFDF
  6840                           postinc2	equ	0xFDE
  6841                           fsr2h	equ	0xFDA
  6842                           fsr2l	equ	0xFD9
  6843                           status	equ	0xFD8
  6844                           
  6845 ;; *************** function _SPIDisassembleLode *****************
  6846 ;; Defined at:
  6847 ;;		line 93 in file "SPISlave.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  Data            2   36[COMRAM] PTR 
  6850 ;;		 -> DataLode(1800), 
  6851 ;;  Transmit        2   38[COMRAM] PTR unsigned char 
  6852 ;;		 -> TransmitLode(1800), 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;  dub             3   44[COMRAM] PTR unsigned char 
  6855 ;;  y               2   42[COMRAM] unsigned int 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;		None               void
  6858 ;; Registers used:
  6859 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;Total ram usage:       11 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    5
  6872 ;; This function calls:
  6873 ;;		___lwdiv
  6874 ;;		___wmul
  6875 ;; This function is called by:
  6876 ;;		_main
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text40
  6881  001FE6                     __ptext40:
  6882                           	opt stack 0
  6883  001FE6                     _SPIDisassembleLode:
  6884                           	opt stack 25
  6885                           
  6886                           ;SPISlave.c: 95: unsigned int y = 0;
  6887                           
  6888                           ;incstack = 0
  6889  001FE6  0E00               	movlw	0
  6890  001FE8  6E2C               	movwf	SPIDisassembleLode@y+1,c
  6891  001FEA  0E00               	movlw	0
  6892  001FEC  6E2B               	movwf	SPIDisassembleLode@y,c
  6893                           
  6894                           ;SPISlave.c: 96: double dub;
  6895                           ;SPISlave.c: 97: DoublePtr = (unsigned char*) &dub;
  6896  001FEE  0E2D               	movlw	low SPIDisassembleLode@dub
  6897  001FF0  6E3F               	movwf	_DoublePtr,c
  6898  001FF2  0E00               	movlw	high SPIDisassembleLode@dub
  6899  001FF4  6E40               	movwf	_DoublePtr+1,c
  6900                           
  6901                           ;SPISlave.c: 98: for (y = 0; y != 1800; y += 3)
  6902  001FF6  0E00               	movlw	0
  6903  001FF8  6E2C               	movwf	SPIDisassembleLode@y+1,c
  6904  001FFA  0E00               	movlw	0
  6905  001FFC  6E2B               	movwf	SPIDisassembleLode@y,c
  6906  001FFE  0E08               	movlw	8
  6907  002000  182B               	xorwf	SPIDisassembleLode@y,w,c
  6908  002002  E106               	bnz	l3477
  6909  002004  0E07               	movlw	7
  6910  002006  182C               	xorwf	SPIDisassembleLode@y+1,w,c
  6911  002008  B4D8               	btfsc	status,2,c
  6912  00200A  D05C               	goto	l290
  6913  00200C  D001               	goto	l3477
  6914  00200E  D05A               	goto	l290
  6915  002010                     l3477:
  6916                           
  6917                           ;SPISlave.c: 99: {
  6918                           ;SPISlave.c: 100: dub = Data[y / 3];
  6919  002010  0E00               	movlw	0
  6920  002012  6E1B               	movwf	___lwdiv@divisor+1,c
  6921  002014  0E03               	movlw	3
  6922  002016  6E1A               	movwf	___lwdiv@divisor,c
  6923  002018  C02B  F018         	movff	SPIDisassembleLode@y,___lwdiv@dividend
  6924  00201C  C02C  F019         	movff	SPIDisassembleLode@y+1,___lwdiv@dividend+1
  6925  002020  EC42  F013         	call	___lwdiv	;wreg free
  6926  002024  C018  F01F         	movff	?___lwdiv,___wmul@multiplier
  6927  002028  C019  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
  6928  00202C  0E00               	movlw	0
  6929  00202E  6E22               	movwf	___wmul@multiplicand+1,c
  6930  002030  0E03               	movlw	3
  6931  002032  6E21               	movwf	___wmul@multiplicand,c
  6932  002034  EC00  F016         	call	___wmul	;wreg free
  6933  002038  501F               	movf	?___wmul,w,c
  6934  00203A  2425               	addwf	SPIDisassembleLode@Data,w,c
  6935  00203C  6ED9               	movwf	fsr2l,c
  6936  00203E  5020               	movf	?___wmul+1,w,c
  6937  002040  2026               	addwfc	SPIDisassembleLode@Data+1,w,c
  6938  002042  6EDA               	movwf	fsr2h,c
  6939  002044  CFDE F02D          	movff	postinc2,SPIDisassembleLode@dub
  6940  002048  CFDE F02E          	movff	postinc2,SPIDisassembleLode@dub+1
  6941  00204C  CFDD F02F          	movff	postdec2,SPIDisassembleLode@dub+2
  6942                           
  6943                           ;SPISlave.c: 101: Transmit[y] = DoublePtr[0];
  6944  002050  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6945  002054  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6946  002058  502B               	movf	SPIDisassembleLode@y,w,c
  6947  00205A  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  6948  00205C  6EE1               	movwf	fsr1l,c
  6949  00205E  502C               	movf	SPIDisassembleLode@y+1,w,c
  6950  002060  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  6951  002062  6EE2               	movwf	fsr1h,c
  6952  002064  CFDF FFE7          	movff	indf2,indf1
  6953                           
  6954                           ;SPISlave.c: 102: Transmit[y + 1] = DoublePtr[1];
  6955  002068  EE20 F001          	lfsr	2,1
  6956  00206C  503F               	movf	_DoublePtr,w,c
  6957  00206E  26D9               	addwf	fsr2l,f,c
  6958  002070  5040               	movf	_DoublePtr+1,w,c
  6959  002072  22DA               	addwfc	fsr2h,f,c
  6960  002074  0E01               	movlw	1
  6961  002076  242B               	addwf	SPIDisassembleLode@y,w,c
  6962  002078  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  6963  00207A  0E00               	movlw	0
  6964  00207C  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  6965  00207E  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  6966  002080  5029               	movf	??_SPIDisassembleLode,w,c
  6967  002082  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  6968  002084  6EE1               	movwf	fsr1l,c
  6969  002086  502A               	movf	??_SPIDisassembleLode+1,w,c
  6970  002088  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  6971  00208A  6EE2               	movwf	fsr1h,c
  6972  00208C  CFDF FFE7          	movff	indf2,indf1
  6973                           
  6974                           ;SPISlave.c: 103: Transmit[y + 2] = DoublePtr[2];
  6975  002090  EE20 F002          	lfsr	2,2
  6976  002094  503F               	movf	_DoublePtr,w,c
  6977  002096  26D9               	addwf	fsr2l,f,c
  6978  002098  5040               	movf	_DoublePtr+1,w,c
  6979  00209A  22DA               	addwfc	fsr2h,f,c
  6980  00209C  0E02               	movlw	2
  6981  00209E  242B               	addwf	SPIDisassembleLode@y,w,c
  6982  0020A0  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  6983  0020A2  0E00               	movlw	0
  6984  0020A4  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  6985  0020A6  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  6986  0020A8  5029               	movf	??_SPIDisassembleLode,w,c
  6987  0020AA  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  6988  0020AC  6EE1               	movwf	fsr1l,c
  6989  0020AE  502A               	movf	??_SPIDisassembleLode+1,w,c
  6990  0020B0  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  6991  0020B2  6EE2               	movwf	fsr1h,c
  6992  0020B4  CFDF FFE7          	movff	indf2,indf1
  6993  0020B8  0E03               	movlw	3
  6994  0020BA  262B               	addwf	SPIDisassembleLode@y,f,c
  6995  0020BC  0E00               	movlw	0
  6996  0020BE  222C               	addwfc	SPIDisassembleLode@y+1,f,c
  6997  0020C0  D79E               	goto	L2
  6998  0020C2  D7A6               	goto	l3477
  6999  0020C4                     l290:
  7000  0020C4  0012               	return		;funcret
  7001  0020C6                     __end_of_SPIDisassembleLode:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           intcon	equ	0xFF2
  7010                           postinc0	equ	0xFEE
  7011                           wreg	equ	0xFE8
  7012                           indf1	equ	0xFE7
  7013                           postdec1	equ	0xFE5
  7014                           fsr1h	equ	0xFE2
  7015                           fsr1l	equ	0xFE1
  7016                           indf2	equ	0xFDF
  7017                           postinc2	equ	0xFDE
  7018                           postdec2	equ	0xFDD
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function ___wmul *****************
  7024 ;; Defined at:
  7025 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;  multiplier      2   30[COMRAM] unsigned int 
  7028 ;;  multiplicand    2   32[COMRAM] unsigned int 
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  product         2   34[COMRAM] unsigned int 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  2   30[COMRAM] unsigned int 
  7033 ;; Registers used:
  7034 ;;		wreg, status,2, status,0, prodl, prodh
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;Total ram usage:        6 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:    4
  7047 ;; This function calls:
  7048 ;;		Nothing
  7049 ;; This function is called by:
  7050 ;;		_SPIDisassembleLode
  7051 ;;		_main
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text41
  7056  002C00                     __ptext41:
  7057                           	opt stack 0
  7058  002C00                     ___wmul:
  7059                           	opt stack 26
  7060                           
  7061                           ;incstack = 0
  7062  002C00  501F               	movf	___wmul@multiplier,w,c
  7063  002C02  0221               	mulwf	___wmul@multiplicand,c
  7064  002C04  CFF3 F023          	movff	prodl,___wmul@product
  7065  002C08  CFF4 F024          	movff	prodh,___wmul@product+1
  7066  002C0C  501F               	movf	___wmul@multiplier,w,c
  7067  002C0E  0222               	mulwf	___wmul@multiplicand+1,c
  7068  002C10  50F3               	movf	prodl,w,c
  7069  002C12  2624               	addwf	___wmul@product+1,f,c
  7070  002C14  5020               	movf	___wmul@multiplier+1,w,c
  7071  002C16  0221               	mulwf	___wmul@multiplicand,c
  7072  002C18  50F3               	movf	prodl,w,c
  7073  002C1A  2624               	addwf	___wmul@product+1,f,c
  7074  002C1C  C023  F01F         	movff	___wmul@product,?___wmul
  7075  002C20  C024  F020         	movff	___wmul@product+1,?___wmul+1
  7076  002C24  D000               	goto	l687
  7077  002C26                     l687:
  7078  002C26  0012               	return		;funcret
  7079  002C28                     __end_of___wmul:
  7080                           	opt stack 0
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           postinc0	equ	0xFEE
  7089                           wreg	equ	0xFE8
  7090                           indf1	equ	0xFE7
  7091                           postdec1	equ	0xFE5
  7092                           fsr1h	equ	0xFE2
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           
  7101 ;; *************** function ___lwdiv *****************
  7102 ;; Defined at:
  7103 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  dividend        2   23[COMRAM] unsigned int 
  7106 ;;  divisor         2   25[COMRAM] unsigned int 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  quotient        2   27[COMRAM] unsigned int 
  7109 ;;  counter         1   29[COMRAM] unsigned char 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  2   23[COMRAM] unsigned int 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7119 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;Total ram usage:        7 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    4
  7126 ;; This function calls:
  7127 ;;		Nothing
  7128 ;; This function is called by:
  7129 ;;		_SPIDisassembleLode
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text42
  7134  002684                     __ptext42:
  7135                           	opt stack 0
  7136  002684                     ___lwdiv:
  7137                           	opt stack 25
  7138                           
  7139                           ;incstack = 0
  7140  002684  0E00               	movlw	0
  7141  002686  6E1D               	movwf	___lwdiv@quotient+1,c
  7142  002688  0E00               	movlw	0
  7143  00268A  6E1C               	movwf	___lwdiv@quotient,c
  7144  00268C  501A               	movf	___lwdiv@divisor,w,c
  7145  00268E  101B               	iorwf	___lwdiv@divisor+1,w,c
  7146  002690  B4D8               	btfsc	status,2,c
  7147  002692  D021               	goto	l1230
  7148  002694  0E01               	movlw	1
  7149  002696  6E1E               	movwf	___lwdiv@counter,c
  7150  002698  D005               	goto	l3297
  7151  00269A                     l3295:
  7152  00269A  90D8               	bcf	status,0,c
  7153  00269C  361A               	rlcf	___lwdiv@divisor,f,c
  7154  00269E  361B               	rlcf	___lwdiv@divisor+1,f,c
  7155  0026A0  2A1E               	incf	___lwdiv@counter,f,c
  7156  0026A2  D000               	goto	l3297
  7157  0026A4                     l3297:
  7158  0026A4  BE1B               	btfsc	___lwdiv@divisor+1,7,c
  7159  0026A6  D002               	goto	l3299
  7160  0026A8  D7F8               	goto	l3295
  7161  0026AA  D000               	goto	l3299
  7162  0026AC                     l3299:
  7163  0026AC  90D8               	bcf	status,0,c
  7164  0026AE  361C               	rlcf	___lwdiv@quotient,f,c
  7165  0026B0  361D               	rlcf	___lwdiv@quotient+1,f,c
  7166  0026B2  501A               	movf	___lwdiv@divisor,w,c
  7167  0026B4  5C18               	subwf	___lwdiv@dividend,w,c
  7168  0026B6  501B               	movf	___lwdiv@divisor+1,w,c
  7169  0026B8  5819               	subwfb	___lwdiv@dividend+1,w,c
  7170  0026BA  A0D8               	btfss	status,0,c
  7171  0026BC  D006               	goto	l3307
  7172  0026BE  501A               	movf	___lwdiv@divisor,w,c
  7173  0026C0  5E18               	subwf	___lwdiv@dividend,f,c
  7174  0026C2  501B               	movf	___lwdiv@divisor+1,w,c
  7175  0026C4  5A19               	subwfb	___lwdiv@dividend+1,f,c
  7176  0026C6  801C               	bsf	___lwdiv@quotient,0,c
  7177  0026C8  D000               	goto	l3307
  7178  0026CA                     l3307:
  7179  0026CA  90D8               	bcf	status,0,c
  7180  0026CC  321B               	rrcf	___lwdiv@divisor+1,f,c
  7181  0026CE  321A               	rrcf	___lwdiv@divisor,f,c
  7182  0026D0  2E1E               	decfsz	___lwdiv@counter,f,c
  7183  0026D2  D7EC               	goto	l3299
  7184  0026D4  D000               	goto	l1230
  7185  0026D6                     l1230:
  7186  0026D6  C01C  F018         	movff	___lwdiv@quotient,?___lwdiv
  7187  0026DA  C01D  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7188  0026DE  0012               	return		;funcret
  7189  0026E0                     __end_of___lwdiv:
  7190                           	opt stack 0
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postdec1	equ	0xFE5
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function _SPIDisassembleDouble *****************
  7212 ;; Defined at:
  7213 ;;		line 84 in file "SPISlave.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  dub             3   25[COMRAM] unsigned int 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;		None               void
  7220 ;; Registers used:
  7221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;Total ram usage:        3 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    5
  7234 ;; This function calls:
  7235 ;;		_GenerateChecksum
  7236 ;; This function is called by:
  7237 ;;		_main
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text43
  7242  002A44                     __ptext43:
  7243                           	opt stack 0
  7244  002A44                     _SPIDisassembleDouble:
  7245                           	opt stack 25
  7246                           
  7247                           ;SPISlave.c: 86: DoublePtr = (unsigned char*) &dub;
  7248                           
  7249                           ;incstack = 0
  7250  002A44  0E1A               	movlw	low SPIDisassembleDouble@dub
  7251  002A46  6E3F               	movwf	_DoublePtr,c
  7252  002A48  0E00               	movlw	high SPIDisassembleDouble@dub
  7253  002A4A  6E40               	movwf	_DoublePtr+1,c
  7254                           
  7255                           ;SPISlave.c: 87: DoubleSPIS[0] = DoublePtr[0];
  7256  002A4C  C03F  FFD9         	movff	_DoublePtr,fsr2l
  7257  002A50  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  7258  002A54  50DF               	movf	indf2,w,c
  7259  002A56  6E35               	movwf	_DoubleSPIS,c
  7260                           
  7261                           ;SPISlave.c: 88: DoubleSPIS[1] = DoublePtr[1];
  7262  002A58  EE20 F001          	lfsr	2,1
  7263  002A5C  503F               	movf	_DoublePtr,w,c
  7264  002A5E  26D9               	addwf	fsr2l,f,c
  7265  002A60  5040               	movf	_DoublePtr+1,w,c
  7266  002A62  22DA               	addwfc	fsr2h,f,c
  7267  002A64  50DF               	movf	indf2,w,c
  7268  002A66  6E36               	movwf	_DoubleSPIS+1,c
  7269                           
  7270                           ;SPISlave.c: 89: DoubleSPIS[2] = DoublePtr[2];
  7271  002A68  EE20 F002          	lfsr	2,2
  7272  002A6C  503F               	movf	_DoublePtr,w,c
  7273  002A6E  26D9               	addwf	fsr2l,f,c
  7274  002A70  5040               	movf	_DoublePtr+1,w,c
  7275  002A72  22DA               	addwfc	fsr2h,f,c
  7276  002A74  50DF               	movf	indf2,w,c
  7277  002A76  6E37               	movwf	_DoubleSPIS+2,c
  7278                           
  7279                           ;SPISlave.c: 90: DoubleSPIS[3] = GenerateChecksum();
  7280  002A78  ECA2  F014         	call	_GenerateChecksum	;wreg free
  7281  002A7C  6E38               	movwf	_DoubleSPIS+3,c
  7282  002A7E  0012               	return		;funcret
  7283  002A80                     __end_of_SPIDisassembleDouble:
  7284                           	opt stack 0
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           indf1	equ	0xFE7
  7295                           postdec1	equ	0xFE5
  7296                           fsr1h	equ	0xFE2
  7297                           fsr1l	equ	0xFE1
  7298                           indf2	equ	0xFDF
  7299                           postinc2	equ	0xFDE
  7300                           postdec2	equ	0xFDD
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305 ;; *************** function _GenerateChecksum *****************
  7306 ;; Defined at:
  7307 ;;		line 107 in file "SPISlave.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;		None
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  y               1   24[COMRAM] unsigned char 
  7312 ;;  sum             1   23[COMRAM] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      unsigned char 
  7315 ;; Registers used:
  7316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;Total ram usage:        2 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    4
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_SPIDisassembleDouble
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text44
  7337  002944                     __ptext44:
  7338                           	opt stack 0
  7339  002944                     _GenerateChecksum:
  7340                           	opt stack 25
  7341                           
  7342                           ;SPISlave.c: 109: if ((Command > 0x00) && (Command < 0x0B))
  7343                           
  7344                           ;incstack = 0
  7345  002944  5041               	movf	_Command,w,c
  7346  002946  B4D8               	btfsc	status,2,c
  7347  002948  D01B               	goto	l3211
  7348  00294A  0E0B               	movlw	11
  7349  00294C  6041               	cpfslt	_Command,c
  7350  00294E  D018               	goto	l3211
  7351                           
  7352                           ;SPISlave.c: 110: {
  7353                           ;SPISlave.c: 111: unsigned char y, sum = 0;
  7354  002950  0E00               	movlw	0
  7355  002952  6E18               	movwf	GenerateChecksum@sum,c
  7356                           
  7357                           ;SPISlave.c: 112: for (y = 0; y != 3; y++)
  7358  002954  0E00               	movlw	0
  7359  002956  6E19               	movwf	GenerateChecksum@y,c
  7360  002958                     l3195:
  7361  002958  0E03               	movlw	3
  7362  00295A  1819               	xorwf	GenerateChecksum@y,w,c
  7363  00295C  B4D8               	btfsc	status,2,c
  7364  00295E  D00E               	goto	l3205
  7365  002960  D001               	goto	l3199
  7366  002962  D00C               	goto	l3205
  7367  002964                     l3199:
  7368                           
  7369                           ;SPISlave.c: 113: sum += DoubleSPIS[y];
  7370  002964  5019               	movf	GenerateChecksum@y,w,c
  7371  002966  0D01               	mullw	1
  7372  002968  0E35               	movlw	low _DoubleSPIS
  7373  00296A  24F3               	addwf	prodl,w,c
  7374  00296C  6ED9               	movwf	fsr2l,c
  7375  00296E  0E00               	movlw	high _DoubleSPIS
  7376  002970  20F4               	addwfc	prodh,w,c
  7377  002972  6EDA               	movwf	fsr2h,c
  7378  002974  50DF               	movf	indf2,w,c
  7379  002976  2618               	addwf	GenerateChecksum@sum,f,c
  7380  002978  2A19               	incf	GenerateChecksum@y,f,c
  7381  00297A  D7EE               	goto	l3195
  7382  00297C                     l3205:
  7383                           
  7384                           ;SPISlave.c: 114: return sum;
  7385  00297C  5018               	movf	GenerateChecksum@sum,w,c
  7386                           
  7387                           ;SPISlave.c: 115: }
  7388  00297E  D002               	goto	l296
  7389  002980                     l3211:
  7390                           
  7391                           ;SPISlave.c: 116: else
  7392                           ;SPISlave.c: 117: return 0xFF;
  7393  002980  0EFF               	movlw	255
  7394  002982  D000               	goto	l296
  7395  002984                     l296:
  7396  002984  0012               	return		;funcret
  7397  002986                     __end_of_GenerateChecksum:
  7398                           	opt stack 0
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           intcon	equ	0xFF2
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           indf1	equ	0xFE7
  7409                           postdec1	equ	0xFE5
  7410                           fsr1h	equ	0xFE2
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _ReceiveSPI1 *****************
  7420 ;; Defined at:
  7421 ;;		line 65 in file "SPISlave.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      unsigned char 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;Total ram usage:        0 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    6
  7442 ;; This function calls:
  7443 ;;		_SPIRestart
  7444 ;; This function is called by:
  7445 ;;		_main
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text45
  7450  002BD6                     __ptext45:
  7451                           	opt stack 0
  7452  002BD6                     _ReceiveSPI1:
  7453                           	opt stack 24
  7454                           
  7455                           ;SPISlave.c: 67: SSP1BUF = 0x00;
  7456                           
  7457                           ;incstack = 0
  7458  002BD6  0E00               	movlw	0
  7459  002BD8  6EC9               	movwf	4041,c	;volatile
  7460                           
  7461                           ;SPISlave.c: 68: PIR1bits.TMR1IF = 0;
  7462  002BDA  909E               	bcf	3998,0,c	;volatile
  7463                           
  7464                           ;SPISlave.c: 69: T1CONbits.TMR1ON = 1;
  7465  002BDC  80CD               	bsf	4045,0,c	;volatile
  7466                           
  7467                           ;SPISlave.c: 70: TMR1H = timer1High;
  7468  002BDE  C047  FFCF         	movff	_timer1High,4047	;volatile
  7469                           
  7470                           ;SPISlave.c: 71: TMR1L = timer1Low;
  7471  002BE2  C042  FFCE         	movff	_timer1Low,4046	;volatile
  7472                           
  7473                           ;SPISlave.c: 72: while (!PIR1bits.SSP1IF)
  7474  002BE6  D005               	goto	l3453
  7475  002BE8                     l279:
  7476                           
  7477                           ;SPISlave.c: 73: {
  7478                           ;SPISlave.c: 74: if (PIR1bits.TMR1IF == 1)
  7479  002BE8  A09E               	btfss	3998,0,c	;volatile
  7480  002BEA  D003               	goto	l3453
  7481                           
  7482                           ;SPISlave.c: 75: {
  7483                           ;SPISlave.c: 76: SPIRestart();
  7484  002BEC  ECCD  F016         	call	_SPIRestart	;wreg free
  7485  002BF0  D000               	goto	l3453
  7486  002BF2                     l3453:
  7487  002BF2  A69E               	btfss	3998,3,c	;volatile
  7488  002BF4  D7F9               	goto	l279
  7489                           
  7490                           ;SPISlave.c: 77: }
  7491                           ;SPISlave.c: 78: }
  7492                           ;SPISlave.c: 79: PIR1bits.SSP1IF = 0;
  7493  002BF6  969E               	bcf	3998,3,c	;volatile
  7494                           
  7495                           ;SPISlave.c: 80: SSP1CON1bits.SSPOV1 = 0;
  7496  002BF8  9CC6               	bcf	4038,6,c	;volatile
  7497                           
  7498                           ;SPISlave.c: 81: return SSP1BUF;
  7499  002BFA  50C9               	movf	4041,w,c	;volatile
  7500  002BFC  D000               	goto	l282
  7501  002BFE                     l282:
  7502  002BFE  0012               	return		;funcret
  7503  002C00                     __end_of_ReceiveSPI1:
  7504                           	opt stack 0
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           intcon	equ	0xFF2
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           indf1	equ	0xFE7
  7515                           postdec1	equ	0xFE5
  7516                           fsr1h	equ	0xFE2
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _SPIRestart *****************
  7526 ;; Defined at:
  7527 ;;		line 131 in file "SPISlave.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  temp            1   26[COMRAM] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;		None               void
  7534 ;; Registers used:
  7535 ;;		wreg, status,2, status,0, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        1 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    5
  7548 ;; This function calls:
  7549 ;;		_OpenSPI1
  7550 ;; This function is called by:
  7551 ;;		_SendSPI1
  7552 ;;		_ReceiveSPI1
  7553 ;;		_main
  7554 ;; This function uses a non-reentrant model
  7555 ;;
  7556                           
  7557                           	psect	text46
  7558  002D9A                     __ptext46:
  7559                           	opt stack 0
  7560  002D9A                     _SPIRestart:
  7561                           	opt stack 24
  7562                           
  7563                           ;SPISlave.c: 133: unsigned char temp;
  7564                           ;SPISlave.c: 134: PIR1bits.SSPIF = 1;
  7565                           
  7566                           ;incstack = 0
  7567  002D9A  869E               	bsf	3998,3,c	;volatile
  7568                           
  7569                           ;SPISlave.c: 135: temp = SSP1BUF;
  7570  002D9C  CFC9 F01B          	movff	4041,SPIRestart@temp	;volatile
  7571                           
  7572                           ;SPISlave.c: 136: (SSP1CON1 &=0xDF);
  7573  002DA0  9AC6               	bcf	4038,5,c	;volatile
  7574                           
  7575                           ;SPISlave.c: 137: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  7576  002DA2  0E00               	movlw	0
  7577  002DA4  6E18               	movwf	OpenSPI1@bus_mode,c
  7578  002DA6  0E00               	movlw	0
  7579  002DA8  6E19               	movwf	OpenSPI1@smp_phase,c
  7580  002DAA  0E04               	movlw	4
  7581  002DAC  EC9B  F013         	call	_OpenSPI1
  7582  002DB0  0012               	return		;funcret
  7583  002DB2                     __end_of_SPIRestart:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           intcon	equ	0xFF2
  7592                           postinc0	equ	0xFEE
  7593                           wreg	equ	0xFE8
  7594                           indf1	equ	0xFE7
  7595                           postdec1	equ	0xFE5
  7596                           fsr1h	equ	0xFE2
  7597                           fsr1l	equ	0xFE1
  7598                           indf2	equ	0xFDF
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           fsr2h	equ	0xFDA
  7602                           fsr2l	equ	0xFD9
  7603                           status	equ	0xFD8
  7604                           
  7605 ;; *************** function _OpenSPI1 *****************
  7606 ;; Defined at:
  7607 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  sync_mode       1    wreg     unsigned char 
  7610 ;;  bus_mode        1   23[COMRAM] unsigned char 
  7611 ;;  smp_phase       1   24[COMRAM] unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  sync_mode       1   25[COMRAM] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;		None               void
  7616 ;; Registers used:
  7617 ;;		wreg, status,2, status,0
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;Total ram usage:        3 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    4
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		_SPIInit
  7634 ;;		_SPIRestart
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text47
  7639  002736                     __ptext47:
  7640                           	opt stack 0
  7641  002736                     _OpenSPI1:
  7642                           	opt stack 24
  7643                           
  7644                           ;incstack = 0
  7645                           ;OpenSPI1@sync_mode stored from wreg
  7646  002736  6E1A               	movwf	OpenSPI1@sync_mode,c
  7647  002738  0E3F               	movlw	63
  7648  00273A  16C7               	andwf	4039,f,c	;volatile
  7649  00273C  0E00               	movlw	0
  7650  00273E  6EC6               	movwf	4038,c	;volatile
  7651  002740  501A               	movf	OpenSPI1@sync_mode,w,c
  7652  002742  12C6               	iorwf	4038,f,c	;volatile
  7653  002744  5019               	movf	OpenSPI1@smp_phase,w,c
  7654  002746  12C7               	iorwf	4039,f,c	;volatile
  7655  002748  D005               	goto	l3051
  7656  00274A                     l674:
  7657  00274A  8CC7               	bsf	4039,6,c	;volatile
  7658  00274C  D013               	goto	l3055
  7659  00274E                     l676:
  7660  00274E  8CC7               	bsf	4039,6,c	;volatile
  7661  002750                     l677:
  7662  002750  88C6               	bsf	4038,4,c	;volatile
  7663  002752  D010               	goto	l3055
  7664  002754                     l3051:
  7665  002754  5018               	movf	OpenSPI1@bus_mode,w,c
  7666                           
  7667                           ; Switch size 1, requested type "space"
  7668                           ; Number of cases is 3, Range of values is 0 to 3
  7669                           ; switch strategies available:
  7670                           ; Name         Instructions Cycles
  7671                           ; simple_byte           10     6 (average)
  7672                           ;	Chosen strategy is simple_byte
  7673  002756  0A00               	xorlw	0	; case 0
  7674  002758  B4D8               	btfsc	status,2,c
  7675  00275A  D7F7               	goto	l674
  7676  00275C  0A02               	xorlw	2	; case 2
  7677  00275E  B4D8               	btfsc	status,2,c
  7678  002760  D7F6               	goto	l676
  7679  002762  0A01               	xorlw	1	; case 3
  7680  002764  B4D8               	btfsc	status,2,c
  7681  002766  D7F4               	goto	l677
  7682  002768  D005               	goto	l3055
  7683  00276A                     l680:
  7684  00276A  8E97               	bsf	3991,7,c	;volatile
  7685  00276C                     l682:
  7686  00276C  8694               	bsf	3988,3,c	;volatile
  7687  00276E  D00A               	goto	l681
  7688  002770                     l683:
  7689  002770  9694               	bcf	3988,3,c	;volatile
  7690  002772  D008               	goto	l681
  7691  002774                     l3055:
  7692  002774  501A               	movf	OpenSPI1@sync_mode,w,c
  7693                           
  7694                           ; Switch size 1, requested type "space"
  7695                           ; Number of cases is 2, Range of values is 4 to 5
  7696                           ; switch strategies available:
  7697                           ; Name         Instructions Cycles
  7698                           ; simple_byte            7     4 (average)
  7699                           ;	Chosen strategy is simple_byte
  7700  002776  0A04               	xorlw	4	; case 4
  7701  002778  B4D8               	btfsc	status,2,c
  7702  00277A  D7F7               	goto	l680
  7703  00277C  0A01               	xorlw	1	; case 5
  7704  00277E  B4D8               	btfsc	status,2,c
  7705  002780  D7F5               	goto	l682
  7706  002782  D7F6               	goto	l683
  7707  002784                     l681:
  7708  002784  8894               	bsf	3988,4,c	;volatile
  7709  002786  9A94               	bcf	3988,5,c	;volatile
  7710  002788  8AC6               	bsf	4038,5,c	;volatile
  7711  00278A  0012               	return		;funcret
  7712  00278C                     __end_of_OpenSPI1:
  7713                           	opt stack 0
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           postinc0	equ	0xFEE
  7722                           wreg	equ	0xFE8
  7723                           indf1	equ	0xFE7
  7724                           postdec1	equ	0xFE5
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function _ImplementJSMotion *****************
  7735 ;; Defined at:
  7736 ;;		line 58 in file "MotorControl.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  JoystickValu    2   40[BANK0 ] int 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  CCPinput        2   44[BANK0 ] unsigned int 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7750 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;Total ram usage:        6 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    5
  7757 ;; This function calls:
  7758 ;;		_abs
  7759 ;; This function is called by:
  7760 ;;		_main
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text48
  7765  001C80                     __ptext48:
  7766                           	opt stack 0
  7767  001C80                     _ImplementJSMotion:
  7768                           	opt stack 25
  7769                           
  7770                           ;MotorControl.c: 60: unsigned int CCPinput;
  7771                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  7772                           
  7773                           ;incstack = 0
  7774  001C80  5045               	movf	_DeadbandLow,w,c
  7775  001C82  0100               	movlb	0	; () banked
  7776  001C84  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7777  001C86  0100               	movlb	0	; () banked
  7778  001C88  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7779  001C8A  0A80               	xorlw	128
  7780  001C8C  0100               	movlb	0	; () banked
  7781  001C8E  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7782  001C90  5046               	movf	_DeadbandLow+1,w,c
  7783  001C92  0A80               	xorlw	128
  7784  001C94  0100               	movlb	0	; () banked
  7785  001C96  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7786  001C98  B0D8               	btfsc	status,0,c
  7787  001C9A  D002               	goto	l3381
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;MotorControl.c: 62: {
  7791                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  7792  001C9C  8EB7               	bsf	4023,7,c	;volatile
  7793  001C9E  D00F               	goto	l3385
  7794  001CA0                     l3381:
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  7798  001CA0  0100               	movlb	0	; () banked
  7799  001CA2  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7800  001CA4  5C43               	subwf	_DeadbandHigh,w,c
  7801  001CA6  5044               	movf	_DeadbandHigh+1,w,c
  7802  001CA8  0A80               	xorlw	128
  7803  001CAA  0100               	movlb	0	; () banked
  7804  001CAC  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7805  001CAE  0100               	movlb	0	; () banked
  7806  001CB0  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7807  001CB2  0A80               	xorlw	128
  7808  001CB4  0100               	movlb	0	; () banked
  7809  001CB6  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7810  001CB8  B0D8               	btfsc	status,0,c
  7811  001CBA  D005               	goto	l3387
  7812                           
  7813                           ; BSR set to: 0
  7814                           ;MotorControl.c: 67: {
  7815                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  7816  001CBC  9EB7               	bcf	4023,7,c	;volatile
  7817  001CBE                     l3385:
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  7821  001CBE  0E00               	movlw	0
  7822  001CC0  0100               	movlb	0	; () banked
  7823  001CC2  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  7824                           
  7825                           ;MotorControl.c: 70: }
  7826  001CC4  D02A               	goto	l3399
  7827  001CC6                     l3387:
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  7831  001CC6  0100               	movlb	0	; () banked
  7832  001CC8  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7833  001CCA  5C43               	subwf	_DeadbandHigh,w,c
  7834  001CCC  5044               	movf	_DeadbandHigh+1,w,c
  7835  001CCE  0A80               	xorlw	128
  7836  001CD0  0100               	movlb	0	; () banked
  7837  001CD2  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7838  001CD4  0100               	movlb	0	; () banked
  7839  001CD6  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7840  001CD8  0A80               	xorlw	128
  7841  001CDA  0100               	movlb	0	; () banked
  7842  001CDC  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7843  001CDE  A0D8               	btfss	status,0,c
  7844  001CE0  D01C               	goto	l3399
  7845                           
  7846                           ; BSR set to: 0
  7847  001CE2  5045               	movf	_DeadbandLow,w,c
  7848  001CE4  0100               	movlb	0	; () banked
  7849  001CE6  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7850  001CE8  0100               	movlb	0	; () banked
  7851  001CEA  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7852  001CEC  0A80               	xorlw	128
  7853  001CEE  0100               	movlb	0	; () banked
  7854  001CF0  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7855  001CF2  5046               	movf	_DeadbandLow+1,w,c
  7856  001CF4  0A80               	xorlw	128
  7857  001CF6  0100               	movlb	0	; () banked
  7858  001CF8  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7859  001CFA  A0D8               	btfss	status,0,c
  7860  001CFC  D00E               	goto	l3399
  7861                           
  7862                           ; BSR set to: 0
  7863  001CFE  0100               	movlb	0	; () banked
  7864  001D00  51C5               	movf	_PIDEnableFlag& (0+255),w,b
  7865  001D02  A4D8               	btfss	status,2,c
  7866  001D04  D00A               	goto	l3399
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;MotorControl.c: 72: {
  7870                           ;MotorControl.c: 73: JoystickValue = 0;
  7871  001D06  0E00               	movlw	0
  7872  001D08  0100               	movlb	0	; () banked
  7873  001D0A  6F89               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  7874  001D0C  0E00               	movlw	0
  7875  001D0E  6F88               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  7876                           
  7877                           ;MotorControl.c: 74: CCPR3L = 0x00;
  7878  001D10  0E00               	movlw	0
  7879  001D12  6EB8               	movwf	4024,c	;volatile
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  7883  001D14  9AB7               	bcf	4023,5,c	;volatile
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  7887  001D16  98B7               	bcf	4023,4,c	;volatile
  7888                           
  7889                           ; BSR set to: 0
  7890                           
  7891                           ; BSR set to: 0
  7892  001D18  D000               	goto	l3399
  7893  001D1A                     l3399:
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;MotorControl.c: 77: }
  7897                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  7898  001D1A  5045               	movf	_DeadbandLow,w,c
  7899  001D1C  0100               	movlb	0	; () banked
  7900  001D1E  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7901  001D20  0100               	movlb	0	; () banked
  7902  001D22  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7903  001D24  0A80               	xorlw	128
  7904  001D26  0100               	movlb	0	; () banked
  7905  001D28  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7906  001D2A  5046               	movf	_DeadbandLow+1,w,c
  7907  001D2C  0A80               	xorlw	128
  7908  001D2E  0100               	movlb	0	; () banked
  7909  001D30  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7910  001D32  A0D8               	btfss	status,0,c
  7911  001D34  D00E               	goto	l3403
  7912                           
  7913                           ; BSR set to: 0
  7914  001D36  0100               	movlb	0	; () banked
  7915  001D38  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7916  001D3A  5C43               	subwf	_DeadbandHigh,w,c
  7917  001D3C  5044               	movf	_DeadbandHigh+1,w,c
  7918  001D3E  0A80               	xorlw	128
  7919  001D40  0100               	movlb	0	; () banked
  7920  001D42  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7921  001D44  0100               	movlb	0	; () banked
  7922  001D46  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7923  001D48  0A80               	xorlw	128
  7924  001D4A  0100               	movlb	0	; () banked
  7925  001D4C  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7926  001D4E  B0D8               	btfsc	status,0,c
  7927  001D50  D030               	goto	l109
  7928  001D52                     l3403:
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;MotorControl.c: 80: {
  7932                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  7933  001D52  C088  F084         	movff	ImplementJSMotion@JoystickValue,abs@a
  7934  001D56  C089  F085         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  7935  001D5A  ECD5  F015         	call	_abs	;wreg free
  7936  001D5E  C084  F088         	movff	?_abs,ImplementJSMotion@JoystickValue
  7937  001D62  C085  F089         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  7938                           
  7939                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  7940  001D66  90D8               	bcf	status,0,c
  7941  001D68  0100               	movlb	0	; () banked
  7942  001D6A  3588               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7943  001D6C  0100               	movlb	0	; () banked
  7944  001D6E  6F8C               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  7945  001D70  0100               	movlb	0	; () banked
  7946  001D72  3589               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7947  001D74  0100               	movlb	0	; () banked
  7948  001D76  6F8D               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  7952  001D78  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7953  001D7C  C08D  F08B         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  7954  001D80  0100               	movlb	0	; () banked
  7955  001D82  90D8               	bcf	status,0,c
  7956  001D84  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7957  001D86  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7958  001D88  0100               	movlb	0	; () banked
  7959  001D8A  90D8               	bcf	status,0,c
  7960  001D8C  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7961  001D8E  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7962  001D90  0100               	movlb	0	; () banked
  7963  001D92  518A               	movf	??_ImplementJSMotion& (0+255),w,b
  7964  001D94  6EB8               	movwf	4024,c	;volatile
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  7968  001D96  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7969  001D9A  0E03               	movlw	3
  7970  001D9C  0100               	movlb	0	; () banked
  7971  001D9E  178A               	andwf	??_ImplementJSMotion& (0+255),f,b
  7972  001DA0  0100               	movlb	0	; () banked
  7973  001DA2  3B8A               	swapf	??_ImplementJSMotion& (0+255),f,b
  7974  001DA4  50B7               	movf	4023,w,c	;volatile
  7975  001DA6  0100               	movlb	0	; () banked
  7976  001DA8  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  7977  001DAA  0BCF               	andlw	-49
  7978  001DAC  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  7979  001DAE  6EB7               	movwf	4023,c	;volatile
  7980  001DB0  D000               	goto	l109
  7981  001DB2                     l109:
  7982                           
  7983                           ; BSR set to: 0
  7984  001DB2  0012               	return		;funcret
  7985  001DB4                     __end_of_ImplementJSMotion:
  7986                           	opt stack 0
  7987                           tblptru	equ	0xFF8
  7988                           tblptrh	equ	0xFF7
  7989                           tblptrl	equ	0xFF6
  7990                           tablat	equ	0xFF5
  7991                           prodh	equ	0xFF4
  7992                           prodl	equ	0xFF3
  7993                           intcon	equ	0xFF2
  7994                           postinc0	equ	0xFEE
  7995                           wreg	equ	0xFE8
  7996                           indf1	equ	0xFE7
  7997                           postdec1	equ	0xFE5
  7998                           fsr1h	equ	0xFE2
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _abs *****************
  8008 ;; Defined at:
  8009 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  a               2   36[BANK0 ] int 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  2   36[BANK0 ] int 
  8016 ;; Registers used:
  8017 ;;		wreg, status,2, status,0
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;Total ram usage:        4 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    4
  8030 ;; This function calls:
  8031 ;;		Nothing
  8032 ;; This function is called by:
  8033 ;;		_ImplementPIDMotion
  8034 ;;		_ImplementJSMotion
  8035 ;;		_ZeroMotors
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           	psect	text49
  8040  002BAA                     __ptext49:
  8041                           	opt stack 0
  8042  002BAA                     _abs:
  8043                           	opt stack 24
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;incstack = 0
  8047  002BAA  0100               	movlb	0	; () banked
  8048  002BAC  AF85               	btfss	(abs@a+1)& (0+255),7,b
  8049  002BAE  D00E               	goto	l734
  8050                           
  8051                           ; BSR set to: 0
  8052  002BB0  C084  F086         	movff	abs@a,??_abs
  8053  002BB4  C085  F087         	movff	abs@a+1,??_abs+1
  8054  002BB8  0100               	movlb	0	; () banked
  8055  002BBA  1F86               	comf	??_abs& (0+255),f,b
  8056  002BBC  1F87               	comf	(??_abs+1)& (0+255),f,b
  8057  002BBE  4B86               	infsnz	??_abs& (0+255),f,b
  8058  002BC0  2B87               	incf	(??_abs+1)& (0+255),f,b
  8059  002BC2  C086  F084         	movff	??_abs,?_abs
  8060  002BC6  C087  F085         	movff	??_abs+1,?_abs+1
  8061  002BCA  D004               	goto	l735
  8062  002BCC                     l734:
  8063                           
  8064                           ; BSR set to: 0
  8065  002BCC  C084  F084         	movff	abs@a,?_abs
  8066  002BD0  C085  F085         	movff	abs@a+1,?_abs+1
  8067  002BD4                     l735:
  8068                           
  8069                           ; BSR set to: 0
  8070  002BD4  0012               	return		;funcret
  8071  002BD6                     __end_of_abs:
  8072                           	opt stack 0
  8073                           tblptru	equ	0xFF8
  8074                           tblptrh	equ	0xFF7
  8075                           tblptrl	equ	0xFF6
  8076                           tablat	equ	0xFF5
  8077                           prodh	equ	0xFF4
  8078                           prodl	equ	0xFF3
  8079                           intcon	equ	0xFF2
  8080                           postinc0	equ	0xFEE
  8081                           wreg	equ	0xFE8
  8082                           indf1	equ	0xFE7
  8083                           postdec1	equ	0xFE5
  8084                           fsr1h	equ	0xFE2
  8085                           fsr1l	equ	0xFE1
  8086                           indf2	equ	0xFDF
  8087                           postinc2	equ	0xFDE
  8088                           postdec2	equ	0xFDD
  8089                           fsr2h	equ	0xFDA
  8090                           fsr2l	equ	0xFD9
  8091                           status	equ	0xFD8
  8092                           
  8093 ;; *************** function _DetectMovement *****************
  8094 ;; Defined at:
  8095 ;;		line 42 in file "Joystick.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  ADCresult       2   28[COMRAM] unsigned int 
  8100 ;;  JoystickResu    2   26[COMRAM] int 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  2   23[COMRAM] int 
  8103 ;; Registers used:
  8104 ;;		wreg, status,2, status,0
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;Total ram usage:        7 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    4
  8117 ;; This function calls:
  8118 ;;		Nothing
  8119 ;; This function is called by:
  8120 ;;		_main
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text50
  8125  0025BA                     __ptext50:
  8126                           	opt stack 0
  8127  0025BA                     _DetectMovement:
  8128                           	opt stack 26
  8129                           
  8130                           ;Joystick.c: 44: unsigned int ADCresult;
  8131                           ;Joystick.c: 45: int JoystickResult;
  8132                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;incstack = 0
  8136  0025BA  82C2               	bsf	4034,1,c	;volatile
  8137                           
  8138                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  8139  0025BC  D000               	goto	l43
  8140  0025BE                     l43:
  8141  0025BE  B2C2               	btfsc	4034,1,c	;volatile
  8142  0025C0  D7FE               	goto	l43
  8143                           
  8144                           ;Joystick.c: 50: ADCresult = ADRESH;
  8145  0025C2  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  8146  0025C6  6A1E               	clrf	DetectMovement@ADCresult+1,c
  8147                           
  8148                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  8149  0025C8  501D               	movf	DetectMovement@ADCresult,w,c
  8150  0025CA  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8151  0025CC  6A1D               	clrf	DetectMovement@ADCresult,c
  8152                           
  8153                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  8154  0025CE  501D               	movf	DetectMovement@ADCresult,w,c
  8155  0025D0  10C3               	iorwf	4035,w,c	;volatile
  8156  0025D2  6E1D               	movwf	DetectMovement@ADCresult,c
  8157  0025D4  501E               	movf	DetectMovement@ADCresult+1,w,c
  8158  0025D6  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8159                           
  8160                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  8161  0025D8  0E00               	movlw	0
  8162  0025DA  241D               	addwf	DetectMovement@ADCresult,w,c
  8163  0025DC  6E1B               	movwf	DetectMovement@JoystickResult,c
  8164  0025DE  0EFE               	movlw	254
  8165  0025E0  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  8166  0025E2  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  8167                           
  8168                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  8169  0025E4  501B               	movf	DetectMovement@JoystickResult,w,c
  8170  0025E6  5C43               	subwf	_DeadbandHigh,w,c
  8171  0025E8  5044               	movf	_DeadbandHigh+1,w,c
  8172  0025EA  0A80               	xorlw	128
  8173  0025EC  6E1A               	movwf	??_DetectMovement& (0+255),c
  8174  0025EE  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8175  0025F0  0A80               	xorlw	128
  8176  0025F2  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8177  0025F4  A0D8               	btfss	status,0,c
  8178  0025F6  D00A               	goto	l3363
  8179  0025F8  5045               	movf	_DeadbandLow,w,c
  8180  0025FA  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  8181  0025FC  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8182  0025FE  0A80               	xorlw	128
  8183  002600  6E1A               	movwf	??_DetectMovement& (0+255),c
  8184  002602  5046               	movf	_DeadbandLow+1,w,c
  8185  002604  0A80               	xorlw	128
  8186  002606  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8187  002608  B0D8               	btfsc	status,0,c
  8188  00260A  D008               	goto	l3371
  8189  00260C                     l3363:
  8190                           
  8191                           ;Joystick.c: 56: {
  8192                           ;Joystick.c: 57: PIDEnableFlag = 0;
  8193  00260C  0E00               	movlw	0
  8194  00260E  0100               	movlb	0	; () banked
  8195  002610  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;Joystick.c: 58: return JoystickResult;
  8199  002612  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  8200  002616  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;Joystick.c: 59: }
  8204                           
  8205                           ; BSR set to: 0
  8206  00261A  D005               	goto	l49
  8207  00261C                     l3371:
  8208                           
  8209                           ;Joystick.c: 60: else
  8210                           ;Joystick.c: 61: return 0;
  8211  00261C  0E00               	movlw	0
  8212  00261E  6E19               	movwf	?_DetectMovement+1,c
  8213  002620  0E00               	movlw	0
  8214  002622  6E18               	movwf	?_DetectMovement,c
  8215  002624  D000               	goto	l49
  8216  002626                     l49:
  8217  002626  0012               	return		;funcret
  8218  002628                     __end_of_DetectMovement:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           postinc0	equ	0xFEE
  8228                           wreg	equ	0xFE8
  8229                           indf1	equ	0xFE7
  8230                           postdec1	equ	0xFE5
  8231                           fsr1h	equ	0xFE2
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function _DetectJoystick *****************
  8241 ;; Defined at:
  8242 ;;		line 27 in file "Joystick.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;		None
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;		None
  8247 ;; Return value:  Size  Location     Type
  8248 ;;		None               void
  8249 ;; Registers used:
  8250 ;;		wreg, status,2
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;Total ram usage:        0 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    4
  8263 ;; This function calls:
  8264 ;;		Nothing
  8265 ;; This function is called by:
  8266 ;;		_main
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           	psect	text51
  8271  002D02                     __ptext51:
  8272                           	opt stack 0
  8273  002D02                     _DetectJoystick:
  8274                           	opt stack 26
  8275                           
  8276                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  8277                           
  8278                           ;incstack = 0
  8279  002D02  B281               	btfsc	3969,1,c	;volatile
  8280  002D04  D003               	goto	l37
  8281                           
  8282                           ;Joystick.c: 30: {
  8283                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  8284  002D06  9480               	bcf	3968,2,c	;volatile
  8285                           
  8286                           ;Joystick.c: 32: JSEnableFlag = 0;
  8287  002D08  0E00               	movlw	0
  8288  002D0A  D008               	goto	L3
  8289  002D0C                     l37:
  8290                           
  8291                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  8292  002D0C  A281               	btfss	3969,1,c	;volatile
  8293  002D0E  D009               	goto	l40
  8294  002D10  0100               	movlb	0	; () banked
  8295  002D12  51C4               	movf	_JSEnableFlag& (0+255),w,b
  8296  002D14  A4D8               	btfss	status,2,c
  8297  002D16  D005               	goto	l40
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;Joystick.c: 36: {
  8301                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  8302  002D18  8480               	bsf	3968,2,c	;volatile
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;Joystick.c: 38: JSEnableFlag = 1;
  8306  002D1A  0E01               	movlw	1
  8307  002D1C                     L3:
  8308  002D1C  0100               	movlb	0	; () banked
  8309  002D1E  6FC4               	movwf	_JSEnableFlag& (0+255),b
  8310                           
  8311                           ; BSR set to: 0
  8312  002D20  D000               	goto	l40
  8313  002D22                     l40:
  8314  002D22  0012               	return		;funcret
  8315  002D24                     __end_of_DetectJoystick:
  8316                           	opt stack 0
  8317                           tblptru	equ	0xFF8
  8318                           tblptrh	equ	0xFF7
  8319                           tblptrl	equ	0xFF6
  8320                           tablat	equ	0xFF5
  8321                           prodh	equ	0xFF4
  8322                           prodl	equ	0xFF3
  8323                           intcon	equ	0xFF2
  8324                           postinc0	equ	0xFEE
  8325                           wreg	equ	0xFE8
  8326                           indf1	equ	0xFE7
  8327                           postdec1	equ	0xFE5
  8328                           fsr1h	equ	0xFE2
  8329                           fsr1l	equ	0xFE1
  8330                           indf2	equ	0xFDF
  8331                           postinc2	equ	0xFDE
  8332                           postdec2	equ	0xFDD
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337 ;; *************** function _ISR *****************
  8338 ;; Defined at:
  8339 ;;		line 247 in file "RTDuC.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;		None
  8344 ;; Return value:  Size  Location     Type
  8345 ;;		None               void
  8346 ;; Registers used:
  8347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;Total ram usage:       14 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    3
  8360 ;; This function calls:
  8361 ;;		_INT0Int
  8362 ;;		_SPIInt
  8363 ;;		_TMR0Int
  8364 ;;		i2_SaveAll
  8365 ;; This function is called by:
  8366 ;;		Interrupt level 2
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           	psect	intcode
  8371  000008                     __pintcode:
  8372                           	opt stack 0
  8373  000008                     _ISR:
  8374                           	opt stack 21
  8375                           
  8376                           ;incstack = 0
  8377  000008  CFFA F00A          	movff	pclath,??_ISR
  8378  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  8379  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  8380  000014  EDD2  F011         	call	int_func,f	;refresh shadow registers
  8381                           pclatu	equ	0xFFB
  8382                           pclath	equ	0xFFA
  8383                           tblptru	equ	0xFF8
  8384                           tblptrh	equ	0xFF7
  8385                           tblptrl	equ	0xFF6
  8386                           tablat	equ	0xFF5
  8387                           prodh	equ	0xFF4
  8388                           prodl	equ	0xFF3
  8389                           intcon	equ	0xFF2
  8390                           postinc0	equ	0xFEE
  8391                           fsr0l	equ	0xFE9
  8392                           wreg	equ	0xFE8
  8393                           indf1	equ	0xFE7
  8394                           postdec1	equ	0xFE5
  8395                           fsr1h	equ	0xFE2
  8396                           fsr1l	equ	0xFE1
  8397                           indf2	equ	0xFDF
  8398                           postinc2	equ	0xFDE
  8399                           postdec2	equ	0xFDD
  8400                           fsr2h	equ	0xFDA
  8401                           fsr2l	equ	0xFD9
  8402                           status	equ	0xFD8
  8403                           
  8404                           	psect	intcode_body
  8405  0023A4                     __pintcode_body:
  8406                           	opt stack 21
  8407  0023A4                     int_func:
  8408                           	opt stack 21
  8409  0023A4  0006               	pop		; remove dummy address from shadow register refresh
  8410  0023A6  CFEA F00D          	movff	fsr0h,??_ISR+3
  8411  0023AA  CFE1 F00E          	movff	fsr1l,??_ISR+4
  8412  0023AE  CFE2 F00F          	movff	fsr1h,??_ISR+5
  8413  0023B2  CFD9 F010          	movff	fsr2l,??_ISR+6
  8414  0023B6  CFDA F011          	movff	fsr2h,??_ISR+7
  8415  0023BA  CFF3 F012          	movff	prodl,??_ISR+8
  8416  0023BE  CFF4 F013          	movff	prodh,??_ISR+9
  8417  0023C2  CFF6 F014          	movff	tblptrl,??_ISR+10
  8418  0023C6  CFF7 F015          	movff	tblptrh,??_ISR+11
  8419  0023CA  CFF8 F016          	movff	tblptru,??_ISR+12
  8420  0023CE  CFF5 F017          	movff	tablat,??_ISR+13
  8421                           
  8422                           ;RTDuC.c: 249: PORTCbits.RC6 = 1;
  8423  0023D2  8C82               	bsf	3970,6,c	;volatile
  8424                           
  8425                           ;RTDuC.c: 250: if (PIR1bits.SSP1IF == 1)
  8426  0023D4  A69E               	btfss	3998,3,c	;volatile
  8427  0023D6  D003               	goto	i2l3825
  8428                           
  8429                           ;RTDuC.c: 251: {
  8430                           ;RTDuC.c: 252: SPIInt();
  8431  0023D8  EC27  F016         	call	_SPIInt	;wreg free
  8432  0023DC  D000               	goto	i2l3825
  8433  0023DE                     i2l3825:
  8434                           
  8435                           ;RTDuC.c: 253: }
  8436                           ;RTDuC.c: 255: if (INTCONbits.TMR0IF == 1)
  8437  0023DE  A4F2               	btfss	intcon,2,c	;volatile
  8438  0023E0  D003               	goto	i2l3829
  8439                           
  8440                           ;RTDuC.c: 256: {
  8441                           ;RTDuC.c: 257: TMR0Int();
  8442  0023E2  ECF5  F016         	call	_TMR0Int	;wreg free
  8443  0023E6  D000               	goto	i2l3829
  8444  0023E8                     i2l3829:
  8445                           
  8446                           ;RTDuC.c: 258: }
  8447                           ;RTDuC.c: 260: if (INTCONbits.INT0IF == 1)
  8448  0023E8  A2F2               	btfss	intcon,1,c	;volatile
  8449  0023EA  D003               	goto	i2l3833
  8450                           
  8451                           ;RTDuC.c: 261: {
  8452                           ;RTDuC.c: 262: INT0Int();
  8453  0023EC  EC5E  F016         	call	_INT0Int	;wreg free
  8454  0023F0  D000               	goto	i2l3833
  8455  0023F2                     i2l3833:
  8456                           
  8457                           ;RTDuC.c: 263: }
  8458                           ;RTDuC.c: 265: if (PIR2bits.HLVDIF == 1)
  8459  0023F2  A4A1               	btfss	4001,2,c	;volatile
  8460  0023F4  D006               	goto	i2l3839
  8461                           
  8462                           ;RTDuC.c: 266: {
  8463                           ;RTDuC.c: 267: PORTAbits.RA4 = 0;
  8464  0023F6  9880               	bcf	3968,4,c	;volatile
  8465                           
  8466                           ;RTDuC.c: 268: PORTAbits.RA3 = 0;
  8467  0023F8  9680               	bcf	3968,3,c	;volatile
  8468                           
  8469                           ;RTDuC.c: 269: PORTAbits.RA2 = 0;
  8470  0023FA  9480               	bcf	3968,2,c	;volatile
  8471                           
  8472                           ;RTDuC.c: 270: SaveAll();
  8473  0023FC  EC22  F011         	call	i2_SaveAll	;wreg free
  8474  002400  D000               	goto	i2l3839
  8475  002402                     i2l3839:
  8476                           
  8477                           ;RTDuC.c: 271: }
  8478                           ;RTDuC.c: 273: if (PIR2bits.OSCFIF == 1)
  8479  002402  AEA1               	btfss	4001,7,c	;volatile
  8480  002404  D002               	goto	i2l594
  8481  002406  00FF               	reset		;# 
  8482  002408  D000               	goto	i2l594
  8483  00240A                     i2l594:
  8484  00240A  C017  FFF5         	movff	??_ISR+13,tablat
  8485  00240E  C016  FFF8         	movff	??_ISR+12,tblptru
  8486  002412  C015  FFF7         	movff	??_ISR+11,tblptrh
  8487  002416  C014  FFF6         	movff	??_ISR+10,tblptrl
  8488  00241A  C013  FFF4         	movff	??_ISR+9,prodh
  8489  00241E  C012  FFF3         	movff	??_ISR+8,prodl
  8490  002422  C011  FFDA         	movff	??_ISR+7,fsr2h
  8491  002426  C010  FFD9         	movff	??_ISR+6,fsr2l
  8492  00242A  C00F  FFE2         	movff	??_ISR+5,fsr1h
  8493  00242E  C00E  FFE1         	movff	??_ISR+4,fsr1l
  8494  002432  C00D  FFEA         	movff	??_ISR+3,fsr0h
  8495  002436  C00C  FFE9         	movff	??_ISR+2,fsr0l
  8496  00243A  C00B  FFFB         	movff	??_ISR+1,pclatu
  8497  00243E  C00A  FFFA         	movff	??_ISR,pclath
  8498  002442  0011               	retfie		f
  8499  002444                     __end_of_ISR:
  8500                           	opt stack 0
  8501                           pclatu	equ	0xFFB
  8502                           pclath	equ	0xFFA
  8503                           tblptru	equ	0xFF8
  8504                           tblptrh	equ	0xFF7
  8505                           tblptrl	equ	0xFF6
  8506                           tablat	equ	0xFF5
  8507                           prodh	equ	0xFF4
  8508                           prodl	equ	0xFF3
  8509                           intcon	equ	0xFF2
  8510                           postinc0	equ	0xFEE
  8511                           fsr0h	equ	0xFEA
  8512                           fsr0l	equ	0xFE9
  8513                           wreg	equ	0xFE8
  8514                           indf1	equ	0xFE7
  8515                           postdec1	equ	0xFE5
  8516                           fsr1h	equ	0xFE2
  8517                           fsr1l	equ	0xFE1
  8518                           indf2	equ	0xFDF
  8519                           postinc2	equ	0xFDE
  8520                           postdec2	equ	0xFDD
  8521                           fsr2h	equ	0xFDA
  8522                           fsr2l	equ	0xFD9
  8523                           status	equ	0xFD8
  8524                           
  8525 ;; *************** function i2_SaveAll *****************
  8526 ;; Defined at:
  8527 ;;		line 150 in file "EEPROM.c"
  8528 ;; Parameters:    Size  Location     Type
  8529 ;;		None
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;		None
  8532 ;; Return value:  Size  Location     Type
  8533 ;;		None               void
  8534 ;; Registers used:
  8535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;Total ram usage:        0 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    2
  8548 ;; This function calls:
  8549 ;;		i2_EEWriteChar
  8550 ;;		i2_EEWriteDouble
  8551 ;; This function is called by:
  8552 ;;		_ISR
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           	psect	text53
  8557  002244                     __ptext53:
  8558                           	opt stack 0
  8559  002244                     i2_SaveAll:
  8560                           	opt stack 21
  8561                           
  8562                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  8563                           
  8564                           ;incstack = 0
  8565  002244  C03C  F005         	movff	_SetAngle,i2EEWriteDouble@dub
  8566  002248  C03D  F006         	movff	_SetAngle+1,i2EEWriteDouble@dub+1
  8567  00224C  C03E  F007         	movff	_SetAngle+2,i2EEWriteDouble@dub+2
  8568  002250  0E00               	movlw	0
  8569  002252  ECF0  F013         	call	i2_EEWriteDouble
  8570                           
  8571                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  8572  002256  C0B6  F005         	movff	_Kp,i2EEWriteDouble@dub
  8573  00225A  C0B7  F006         	movff	_Kp+1,i2EEWriteDouble@dub+1
  8574  00225E  C0B8  F007         	movff	_Kp+2,i2EEWriteDouble@dub+2
  8575  002262  0E03               	movlw	3
  8576  002264  ECF0  F013         	call	i2_EEWriteDouble
  8577                           
  8578                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  8579  002268  C0B3  F005         	movff	_Ki,i2EEWriteDouble@dub
  8580  00226C  C0B4  F006         	movff	_Ki+1,i2EEWriteDouble@dub+1
  8581  002270  C0B5  F007         	movff	_Ki+2,i2EEWriteDouble@dub+2
  8582  002274  0E06               	movlw	6
  8583  002276  ECF0  F013         	call	i2_EEWriteDouble
  8584                           
  8585                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  8586  00227A  C0B0  F005         	movff	_Kd,i2EEWriteDouble@dub
  8587  00227E  C0B1  F006         	movff	_Kd+1,i2EEWriteDouble@dub+1
  8588  002282  C0B2  F007         	movff	_Kd+2,i2EEWriteDouble@dub+2
  8589  002286  0E09               	movlw	9
  8590  002288  ECF0  F013         	call	i2_EEWriteDouble
  8591                           
  8592                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  8593  00228C  CF80 F005          	movff	3968,i2EEWriteChar@ch	;volatile
  8594  002290  0E0C               	movlw	12
  8595  002292  EC92  F016         	call	i2_EEWriteChar
  8596                           
  8597                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  8598  002296  CF81 F005          	movff	3969,i2EEWriteChar@ch	;volatile
  8599  00229A  0E0D               	movlw	13
  8600  00229C  EC92  F016         	call	i2_EEWriteChar
  8601                           
  8602                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  8603  0022A0  CF82 F005          	movff	3970,i2EEWriteChar@ch	;volatile
  8604  0022A4  0E0E               	movlw	14
  8605  0022A6  EC92  F016         	call	i2_EEWriteChar
  8606                           
  8607                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  8608  0022AA  CF83 F005          	movff	3971,i2EEWriteChar@ch	;volatile
  8609  0022AE  0E0F               	movlw	15
  8610  0022B0  EC92  F016         	call	i2_EEWriteChar
  8611                           
  8612                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  8613  0022B4  CF84 F005          	movff	3972,i2EEWriteChar@ch	;volatile
  8614  0022B8  0E10               	movlw	16
  8615  0022BA  EC92  F016         	call	i2_EEWriteChar
  8616                           
  8617                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  8618  0022BE  CF85 F005          	movff	3973,i2EEWriteChar@ch	;volatile
  8619  0022C2  0E11               	movlw	17
  8620  0022C4  EC92  F016         	call	i2_EEWriteChar
  8621                           
  8622                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  8623  0022C8  CF86 F005          	movff	3974,i2EEWriteChar@ch	;volatile
  8624  0022CC  0E12               	movlw	18
  8625  0022CE  EC92  F016         	call	i2_EEWriteChar
  8626                           
  8627                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  8628  0022D2  CF87 F005          	movff	3975,i2EEWriteChar@ch	;volatile
  8629  0022D6  0E13               	movlw	19
  8630  0022D8  EC92  F016         	call	i2_EEWriteChar
  8631                           
  8632                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  8633  0022DC  CF88 F005          	movff	3976,i2EEWriteChar@ch	;volatile
  8634  0022E0  0E14               	movlw	20
  8635  0022E2  EC92  F016         	call	i2_EEWriteChar
  8636                           
  8637                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  8638  0022E6  C0C5  F005         	movff	_PIDEnableFlag,i2EEWriteChar@ch
  8639  0022EA  0E15               	movlw	21
  8640  0022EC  EC92  F016         	call	i2_EEWriteChar
  8641                           
  8642                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  8643  0022F0  0E01               	movlw	1
  8644  0022F2  6E05               	movwf	i2EEWriteChar@ch,c
  8645  0022F4  0E16               	movlw	22
  8646  0022F6  EC92  F016         	call	i2_EEWriteChar
  8647  0022FA  0012               	return		;funcret
  8648  0022FC                     __end_ofi2_SaveAll:
  8649                           	opt stack 0
  8650                           pclatu	equ	0xFFB
  8651                           pclath	equ	0xFFA
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           postinc0	equ	0xFEE
  8660                           fsr0h	equ	0xFEA
  8661                           fsr0l	equ	0xFE9
  8662                           wreg	equ	0xFE8
  8663                           indf1	equ	0xFE7
  8664                           postdec1	equ	0xFE5
  8665                           fsr1h	equ	0xFE2
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function i2_EEWriteDouble *****************
  8675 ;; Defined at:
  8676 ;;		line 77 in file "EEPROM.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;  location        1    wreg     unsigned char 
  8679 ;;  dub             3    4[COMRAM] unsigned char 
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  location        1    7[COMRAM] unsigned char 
  8682 ;;  EEWriteDoubl    1    8[COMRAM] unsigned char 
  8683 ;; Return value:  Size  Location     Type
  8684 ;;		None               void
  8685 ;; Registers used:
  8686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8692 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;Total ram usage:        5 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    1
  8699 ;; This function calls:
  8700 ;;		i2_Busy_eep
  8701 ;;		i2_EEDisassembleDouble
  8702 ;;		i2_Write_b_eep
  8703 ;; This function is called by:
  8704 ;;		i2_SaveAll
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text54
  8709  0027E0                     __ptext54:
  8710                           	opt stack 0
  8711  0027E0                     i2_EEWriteDouble:
  8712                           	opt stack 21
  8713                           
  8714                           ;incstack = 0
  8715                           ;i2EEWriteDouble@location stored from wreg
  8716  0027E0  6E08               	movwf	i2EEWriteDouble@location,c
  8717                           
  8718                           ;EEPROM.c: 79: unsigned char x;
  8719                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  8720  0027E2  C005  F001         	movff	i2EEWriteDouble@dub,i2EEDisassembleDouble@dub
  8721  0027E6  C006  F002         	movff	i2EEWriteDouble@dub+1,i2EEDisassembleDouble@dub+1
  8722  0027EA  C007  F003         	movff	i2EEWriteDouble@dub+2,i2EEDisassembleDouble@dub+2
  8723  0027EE  EC5B  F015         	call	i2_EEDisassembleDouble	;wreg free
  8724                           
  8725                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  8726  0027F2  50F2               	movf	intcon,w,c	;volatile
  8727  0027F4  0B3F               	andlw	63
  8728  0027F6  6EF2               	movwf	intcon,c	;volatile
  8729                           
  8730                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  8731  0027F8  0E00               	movlw	0
  8732  0027FA  6E09               	movwf	i2EEWriteDouble@x,c
  8733  0027FC                     i2l3317:
  8734  0027FC  0E02               	movlw	2
  8735  0027FE  6409               	cpfsgt	i2EEWriteDouble@x,c
  8736  002800  D001               	goto	i2l3321
  8737  002802  D014               	goto	i2l3331
  8738  002804                     i2l3321:
  8739                           
  8740                           ;EEPROM.c: 86: {
  8741                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  8742  002804  C008  F001         	movff	i2EEWriteDouble@location,i2Write_b_eep@badd
  8743  002808  6A02               	clrf	i2Write_b_eep@badd+1,c
  8744  00280A  5009               	movf	i2EEWriteDouble@x,w,c
  8745  00280C  0D01               	mullw	1
  8746  00280E  0E39               	movlw	low _DDouble
  8747  002810  24F3               	addwf	prodl,w,c
  8748  002812  6ED9               	movwf	fsr2l,c
  8749  002814  0E00               	movlw	high _DDouble
  8750  002816  20F4               	addwfc	prodh,w,c
  8751  002818  6EDA               	movwf	fsr2h,c
  8752  00281A  50DF               	movf	indf2,w,c
  8753  00281C  6E03               	movwf	i2Write_b_eep@bdat,c
  8754  00281E  ECE3  F014         	call	i2_Write_b_eep	;wreg free
  8755                           
  8756                           ;EEPROM.c: 88: location++;
  8757  002822  2A08               	incf	i2EEWriteDouble@location,f,c
  8758                           
  8759                           ;EEPROM.c: 89: Busy_eep();
  8760  002824  EC17  F017         	call	i2_Busy_eep	;wreg free
  8761  002828  2A09               	incf	i2EEWriteDouble@x,f,c
  8762  00282A  D7E8               	goto	i2l3317
  8763  00282C                     i2l3331:
  8764                           
  8765                           ;EEPROM.c: 90: }
  8766                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  8767  00282C  50F2               	movf	intcon,w,c	;volatile
  8768  00282E  09C0               	iorlw	192
  8769  002830  6EF2               	movwf	intcon,c	;volatile
  8770  002832  0012               	return		;funcret
  8771  002834                     __end_ofi2_EEWriteDouble:
  8772                           	opt stack 0
  8773                           pclatu	equ	0xFFB
  8774                           pclath	equ	0xFFA
  8775                           tblptru	equ	0xFF8
  8776                           tblptrh	equ	0xFF7
  8777                           tblptrl	equ	0xFF6
  8778                           tablat	equ	0xFF5
  8779                           prodh	equ	0xFF4
  8780                           prodl	equ	0xFF3
  8781                           intcon	equ	0xFF2
  8782                           postinc0	equ	0xFEE
  8783                           fsr0h	equ	0xFEA
  8784                           fsr0l	equ	0xFE9
  8785                           wreg	equ	0xFE8
  8786                           indf1	equ	0xFE7
  8787                           postdec1	equ	0xFE5
  8788                           fsr1h	equ	0xFE2
  8789                           fsr1l	equ	0xFE1
  8790                           indf2	equ	0xFDF
  8791                           postinc2	equ	0xFDE
  8792                           postdec2	equ	0xFDD
  8793                           fsr2h	equ	0xFDA
  8794                           fsr2l	equ	0xFD9
  8795                           status	equ	0xFD8
  8796                           
  8797 ;; *************** function i2_EEDisassembleDouble *****************
  8798 ;; Defined at:
  8799 ;;		line 48 in file "EEPROM.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  dub             3    0[COMRAM] unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;		None
  8804 ;; Return value:  Size  Location     Type
  8805 ;;		None               void
  8806 ;; Registers used:
  8807 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8813 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;Total ram usage:        3 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; This function calls:
  8820 ;;		Nothing
  8821 ;; This function is called by:
  8822 ;;		i2_EEWriteDouble
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text55
  8827  002AB6                     __ptext55:
  8828                           	opt stack 0
  8829  002AB6                     i2_EEDisassembleDouble:
  8830                           	opt stack 21
  8831                           
  8832                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  8833                           
  8834                           ;incstack = 0
  8835  002AB6  0E01               	movlw	low i2EEDisassembleDouble@dub
  8836  002AB8  6E3F               	movwf	_DoublePtr,c
  8837  002ABA  0E00               	movlw	high i2EEDisassembleDouble@dub
  8838  002ABC  6E40               	movwf	_DoublePtr+1,c
  8839                           
  8840                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  8841  002ABE  C03F  FFD9         	movff	_DoublePtr,fsr2l
  8842  002AC2  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  8843  002AC6  50DF               	movf	indf2,w,c
  8844  002AC8  6E39               	movwf	_DDouble,c
  8845                           
  8846                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  8847  002ACA  EE20 F001          	lfsr	2,1
  8848  002ACE  503F               	movf	_DoublePtr,w,c
  8849  002AD0  26D9               	addwf	fsr2l,f,c
  8850  002AD2  5040               	movf	_DoublePtr+1,w,c
  8851  002AD4  22DA               	addwfc	fsr2h,f,c
  8852  002AD6  50DF               	movf	indf2,w,c
  8853  002AD8  6E3A               	movwf	_DDouble+1,c
  8854                           
  8855                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  8856  002ADA  EE20 F002          	lfsr	2,2
  8857  002ADE  503F               	movf	_DoublePtr,w,c
  8858  002AE0  26D9               	addwf	fsr2l,f,c
  8859  002AE2  5040               	movf	_DoublePtr+1,w,c
  8860  002AE4  22DA               	addwfc	fsr2h,f,c
  8861  002AE6  50DF               	movf	indf2,w,c
  8862  002AE8  6E3B               	movwf	_DDouble+2,c
  8863  002AEA  0012               	return		;funcret
  8864  002AEC                     __end_ofi2_EEDisassembleDouble:
  8865                           	opt stack 0
  8866                           pclatu	equ	0xFFB
  8867                           pclath	equ	0xFFA
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           postinc0	equ	0xFEE
  8876                           fsr0h	equ	0xFEA
  8877                           fsr0l	equ	0xFE9
  8878                           wreg	equ	0xFE8
  8879                           indf1	equ	0xFE7
  8880                           postdec1	equ	0xFE5
  8881                           fsr1h	equ	0xFE2
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           postdec2	equ	0xFDD
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function i2_EEWriteChar *****************
  8891 ;; Defined at:
  8892 ;;		line 122 in file "EEPROM.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  location        1    wreg     unsigned char 
  8895 ;;  ch              1    4[COMRAM] unsigned char 
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  location        1    5[COMRAM] unsigned char 
  8898 ;; Return value:  Size  Location     Type
  8899 ;;		None               void
  8900 ;; Registers used:
  8901 ;;		wreg, status,2, status,0, cstack
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8907 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;Total ram usage:        2 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    1
  8914 ;; This function calls:
  8915 ;;		i2_Busy_eep
  8916 ;;		i2_Write_b_eep
  8917 ;; This function is called by:
  8918 ;;		i2_SaveAll
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text56
  8923  002D24                     __ptext56:
  8924                           	opt stack 0
  8925  002D24                     i2_EEWriteChar:
  8926                           	opt stack 21
  8927                           
  8928                           ;incstack = 0
  8929                           ;i2EEWriteChar@location stored from wreg
  8930  002D24  6E06               	movwf	i2EEWriteChar@location,c
  8931                           
  8932                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  8933  002D26  50F2               	movf	intcon,w,c	;volatile
  8934  002D28  0B3F               	andlw	63
  8935  002D2A  6EF2               	movwf	intcon,c	;volatile
  8936                           
  8937                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  8938  002D2C  C006  F001         	movff	i2EEWriteChar@location,i2Write_b_eep@badd
  8939  002D30  6A02               	clrf	i2Write_b_eep@badd+1,c
  8940  002D32  C005  F003         	movff	i2EEWriteChar@ch,i2Write_b_eep@bdat
  8941  002D36  ECE3  F014         	call	i2_Write_b_eep	;wreg free
  8942                           
  8943                           ;EEPROM.c: 127: Busy_eep();
  8944  002D3A  EC17  F017         	call	i2_Busy_eep	;wreg free
  8945                           
  8946                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  8947  002D3E  50F2               	movf	intcon,w,c	;volatile
  8948  002D40  09C0               	iorlw	192
  8949  002D42  6EF2               	movwf	intcon,c	;volatile
  8950  002D44  0012               	return		;funcret
  8951  002D46                     __end_ofi2_EEWriteChar:
  8952                           	opt stack 0
  8953                           pclatu	equ	0xFFB
  8954                           pclath	equ	0xFFA
  8955                           tblptru	equ	0xFF8
  8956                           tblptrh	equ	0xFF7
  8957                           tblptrl	equ	0xFF6
  8958                           tablat	equ	0xFF5
  8959                           prodh	equ	0xFF4
  8960                           prodl	equ	0xFF3
  8961                           intcon	equ	0xFF2
  8962                           postinc0	equ	0xFEE
  8963                           fsr0h	equ	0xFEA
  8964                           fsr0l	equ	0xFE9
  8965                           wreg	equ	0xFE8
  8966                           indf1	equ	0xFE7
  8967                           postdec1	equ	0xFE5
  8968                           fsr1h	equ	0xFE2
  8969                           fsr1l	equ	0xFE1
  8970                           indf2	equ	0xFDF
  8971                           postinc2	equ	0xFDE
  8972                           postdec2	equ	0xFDD
  8973                           fsr2h	equ	0xFDA
  8974                           fsr2l	equ	0xFD9
  8975                           status	equ	0xFD8
  8976                           
  8977 ;; *************** function i2_Write_b_eep *****************
  8978 ;; Defined at:
  8979 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;  badd            2    0[COMRAM] unsigned int 
  8982 ;;  bdat            1    2[COMRAM] unsigned char 
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;  Write_b_eep     1    3[COMRAM] unsigned char 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;		None               void
  8987 ;; Registers used:
  8988 ;;		wreg, status,2, status,0
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8994 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;Total ram usage:        4 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; This function calls:
  9001 ;;		Nothing
  9002 ;; This function is called by:
  9003 ;;		i2_EEWriteDouble
  9004 ;;		i2_EEWriteChar
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	text57
  9009  0029C6                     __ptext57:
  9010                           	opt stack 0
  9011  0029C6                     i2_Write_b_eep:
  9012                           	opt stack 21
  9013                           
  9014                           ;incstack = 0
  9015  0029C6  0E00               	movlw	0
  9016  0029C8  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  9017  0029CA  5002               	movf	i2Write_b_eep@badd+1,w,c
  9018  0029CC  0B03               	andlw	3
  9019  0029CE  6EAA               	movwf	4010,c	;volatile
  9020  0029D0  C001  FFA9         	movff	i2Write_b_eep@badd,4009	;volatile
  9021  0029D4  C003  FFA8         	movff	i2Write_b_eep@bdat,4008	;volatile
  9022  0029D8  9EA6               	bcf	4006,7,c	;volatile
  9023  0029DA  9CA6               	bcf	4006,6,c	;volatile
  9024  0029DC  84A6               	bsf	4006,2,c	;volatile
  9025  0029DE  0E00               	movlw	0
  9026  0029E0  BEF2               	btfsc	intcon,7,c	;volatile
  9027  0029E2  0E01               	movlw	1
  9028  0029E4  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  9029  0029E6  9EF2               	bcf	intcon,7,c	;volatile
  9030  0029E8  0E55               	movlw	85
  9031  0029EA  6EA7               	movwf	4007,c	;volatile
  9032  0029EC  0EAA               	movlw	170
  9033  0029EE  6EA7               	movwf	4007,c	;volatile
  9034  0029F0  82A6               	bsf	4006,1,c	;volatile
  9035  0029F2  D000               	goto	i2l655
  9036  0029F4                     i2l655:
  9037  0029F4  B2A6               	btfsc	4006,1,c	;volatile
  9038  0029F6  D7FE               	goto	i2l655
  9039  0029F8  B004               	btfsc	i2Write_b_eep@GIE_BIT_VAL,0,c
  9040  0029FA  D002               	bra	i2u228_45
  9041  0029FC  9EF2               	bcf	intcon,7,c	;volatile
  9042  0029FE  D001               	bra	i2u228_46
  9043  002A00                     i2u228_45:
  9044  002A00  8EF2               	bsf	intcon,7,c	;volatile
  9045  002A02                     i2u228_46:
  9046  002A02  94A6               	bcf	4006,2,c	;volatile
  9047  002A04  0012               	return		;funcret
  9048  002A06                     __end_ofi2_Write_b_eep:
  9049                           	opt stack 0
  9050                           pclatu	equ	0xFFB
  9051                           pclath	equ	0xFFA
  9052                           tblptru	equ	0xFF8
  9053                           tblptrh	equ	0xFF7
  9054                           tblptrl	equ	0xFF6
  9055                           tablat	equ	0xFF5
  9056                           prodh	equ	0xFF4
  9057                           prodl	equ	0xFF3
  9058                           intcon	equ	0xFF2
  9059                           postinc0	equ	0xFEE
  9060                           fsr0h	equ	0xFEA
  9061                           fsr0l	equ	0xFE9
  9062                           wreg	equ	0xFE8
  9063                           indf1	equ	0xFE7
  9064                           postdec1	equ	0xFE5
  9065                           fsr1h	equ	0xFE2
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function i2_Busy_eep *****************
  9075 ;; Defined at:
  9076 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;		None               void
  9083 ;; Registers used:
  9084 ;;		None
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        0 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; This function calls:
  9097 ;;		Nothing
  9098 ;; This function is called by:
  9099 ;;		i2_EEWriteDouble
  9100 ;;		i2_EEWriteChar
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           	psect	text58
  9105  002E2E                     __ptext58:
  9106                           	opt stack 0
  9107  002E2E                     i2_Busy_eep:
  9108                           	opt stack 21
  9109                           
  9110                           ;incstack = 0
  9111  002E2E  D000               	goto	i2l624
  9112  002E30                     i2l624:
  9113  002E30  B2A6               	btfsc	4006,1,c	;volatile
  9114  002E32  D7FE               	goto	i2l624
  9115  002E34  0012               	return		;funcret
  9116  002E36                     __end_ofi2_Busy_eep:
  9117                           	opt stack 0
  9118                           pclatu	equ	0xFFB
  9119                           pclath	equ	0xFFA
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           intcon	equ	0xFF2
  9127                           postinc0	equ	0xFEE
  9128                           fsr0h	equ	0xFEA
  9129                           fsr0l	equ	0xFE9
  9130                           wreg	equ	0xFE8
  9131                           indf1	equ	0xFE7
  9132                           postdec1	equ	0xFE5
  9133                           fsr1h	equ	0xFE2
  9134                           fsr1l	equ	0xFE1
  9135                           indf2	equ	0xFDF
  9136                           postinc2	equ	0xFDE
  9137                           postdec2	equ	0xFDD
  9138                           fsr2h	equ	0xFDA
  9139                           fsr2l	equ	0xFD9
  9140                           status	equ	0xFD8
  9141                           
  9142 ;; *************** function _TMR0Int *****************
  9143 ;; Defined at:
  9144 ;;		line 56 in file "PID.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;		None
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;		None
  9149 ;; Return value:  Size  Location     Type
  9150 ;;		None               void
  9151 ;; Registers used:
  9152 ;;		wreg, status,2
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;Total ram usage:        0 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		_ISR
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           	psect	text59
  9172  002DEA                     __ptext59:
  9173                           	opt stack 0
  9174  002DEA                     _TMR0Int:
  9175                           	opt stack 23
  9176                           
  9177                           ;PID.c: 58: TMR0H = 0xDB;
  9178                           
  9179                           ;incstack = 0
  9180  002DEA  0EDB               	movlw	219
  9181  002DEC  6ED7               	movwf	4055,c	;volatile
  9182                           
  9183                           ;PID.c: 59: TMR0L = 0x60;
  9184  002DEE  0E60               	movlw	96
  9185  002DF0  6ED6               	movwf	4054,c	;volatile
  9186                           
  9187                           ;PID.c: 60: TMR0Flag = 1;
  9188  002DF2  0E01               	movlw	1
  9189  002DF4  0100               	movlb	0	; () banked
  9190  002DF6  6FC8               	movwf	_TMR0Flag& (0+255),b
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;PID.c: 61: INTCONbits.TMR0IF = 0;
  9194  002DF8  94F2               	bcf	intcon,2,c	;volatile
  9195                           
  9196                           ; BSR set to: 0
  9197  002DFA  0012               	return		;funcret
  9198  002DFC                     __end_of_TMR0Int:
  9199                           	opt stack 0
  9200                           pclatu	equ	0xFFB
  9201                           pclath	equ	0xFFA
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           prodh	equ	0xFF4
  9207                           prodl	equ	0xFF3
  9208                           intcon	equ	0xFF2
  9209                           postinc0	equ	0xFEE
  9210                           fsr0h	equ	0xFEA
  9211                           fsr0l	equ	0xFE9
  9212                           wreg	equ	0xFE8
  9213                           indf1	equ	0xFE7
  9214                           postdec1	equ	0xFE5
  9215                           fsr1h	equ	0xFE2
  9216                           fsr1l	equ	0xFE1
  9217                           indf2	equ	0xFDF
  9218                           postinc2	equ	0xFDE
  9219                           postdec2	equ	0xFDD
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function _SPIInt *****************
  9225 ;; Defined at:
  9226 ;;		line 31 in file "SPISlave.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;		None
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;		None               void
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;Total ram usage:        0 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; This function calls:
  9247 ;;		Nothing
  9248 ;; This function is called by:
  9249 ;;		_ISR
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           	psect	text60
  9254  002C4E                     __ptext60:
  9255                           	opt stack 0
  9256  002C4E                     _SPIInt:
  9257                           	opt stack 23
  9258                           
  9259                           ;SPISlave.c: 33: PORTCbits.RC6 = 1;
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;incstack = 0
  9263  002C4E  8C82               	bsf	3970,6,c	;volatile
  9264                           
  9265                           ;SPISlave.c: 34: INTCONbits.GIE = 0;
  9266  002C50  9EF2               	bcf	intcon,7,c	;volatile
  9267                           
  9268                           ;SPISlave.c: 35: Command = SSP1BUF;
  9269  002C52  CFC9 F041          	movff	4041,_Command	;volatile
  9270                           
  9271                           ;SPISlave.c: 36: PIR1bits.SSP1IF = 0;
  9272  002C56  969E               	bcf	3998,3,c	;volatile
  9273                           
  9274                           ;SPISlave.c: 37: PIE1bits.SSP1IE = 0;
  9275  002C58  969D               	bcf	3997,3,c	;volatile
  9276                           
  9277                           ;SPISlave.c: 38: if (Command == 0x0A)
  9278  002C5A  0E0A               	movlw	10
  9279  002C5C  1841               	xorwf	_Command,w,c
  9280  002C5E  A4D8               	btfss	status,2,c
  9281  002C60  D004               	goto	i2l3421
  9282                           
  9283                           ;SPISlave.c: 39: RECFlag = 1;
  9284  002C62  0E01               	movlw	1
  9285  002C64  0100               	movlb	0	; () banked
  9286  002C66  6FC6               	movwf	_RECFlag& (0+255),b
  9287  002C68  D004               	goto	i2l268
  9288  002C6A                     i2l3421:
  9289                           
  9290                           ;SPISlave.c: 40: else
  9291                           ;SPISlave.c: 41: SPIflag = 1;
  9292  002C6A  0E01               	movlw	1
  9293  002C6C  0100               	movlb	0	; () banked
  9294  002C6E  6FC7               	movwf	_SPIflag& (0+255),b
  9295  002C70  D000               	goto	i2l268
  9296  002C72                     i2l268:
  9297                           
  9298                           ; BSR set to: 0
  9299  002C72  0012               	return		;funcret
  9300  002C74                     __end_of_SPIInt:
  9301                           	opt stack 0
  9302                           pclatu	equ	0xFFB
  9303                           pclath	equ	0xFFA
  9304                           tblptru	equ	0xFF8
  9305                           tblptrh	equ	0xFF7
  9306                           tblptrl	equ	0xFF6
  9307                           tablat	equ	0xFF5
  9308                           prodh	equ	0xFF4
  9309                           prodl	equ	0xFF3
  9310                           intcon	equ	0xFF2
  9311                           postinc0	equ	0xFEE
  9312                           fsr0h	equ	0xFEA
  9313                           fsr0l	equ	0xFE9
  9314                           wreg	equ	0xFE8
  9315                           indf1	equ	0xFE7
  9316                           postdec1	equ	0xFE5
  9317                           fsr1h	equ	0xFE2
  9318                           fsr1l	equ	0xFE1
  9319                           indf2	equ	0xFDF
  9320                           postinc2	equ	0xFDE
  9321                           postdec2	equ	0xFDD
  9322                           fsr2h	equ	0xFDA
  9323                           fsr2l	equ	0xFD9
  9324                           status	equ	0xFD8
  9325                           
  9326 ;; *************** function _INT0Int *****************
  9327 ;; Defined at:
  9328 ;;		line 291 in file "RTDuC.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;		None               void
  9335 ;; Registers used:
  9336 ;;		wreg, status,2, status,0, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;Total ram usage:        0 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    1
  9349 ;; This function calls:
  9350 ;;		_KillMotors
  9351 ;; This function is called by:
  9352 ;;		_ISR
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text61
  9357  002CBC                     __ptext61:
  9358                           	opt stack 0
  9359  002CBC                     _INT0Int:
  9360                           	opt stack 22
  9361                           
  9362                           ;RTDuC.c: 293: KillMotors();
  9363                           
  9364                           ; BSR set to: 0
  9365                           ;incstack = 0
  9366  002CBC  EC0A  F017         	call	_KillMotors	;wreg free
  9367                           
  9368                           ;RTDuC.c: 294: PORTAbits.RA3 = 0;
  9369  002CC0  9680               	bcf	3968,3,c	;volatile
  9370                           
  9371                           ;RTDuC.c: 295: T0CONbits.TMR0ON = 1;
  9372  002CC2  8ED5               	bsf	4053,7,c	;volatile
  9373                           
  9374                           ;RTDuC.c: 296: INTCONbits.GIE = 0;
  9375  002CC4  9EF2               	bcf	intcon,7,c	;volatile
  9376                           
  9377                           ;RTDuC.c: 297: PORTAbits.RA4 = 1;
  9378  002CC6  8880               	bsf	3968,4,c	;volatile
  9379  002CC8  D000               	goto	i2l2273
  9380  002CCA                     i2l2273:
  9381                           
  9382                           ;RTDuC.c: 299: {
  9383                           ;RTDuC.c: 300: TMR0H = 0x00;
  9384  002CCA  0E00               	movlw	0
  9385  002CCC  6ED7               	movwf	4055,c	;volatile
  9386                           
  9387                           ;RTDuC.c: 301: TMR0L = 0x00;
  9388  002CCE  0E00               	movlw	0
  9389  002CD0  6ED6               	movwf	4054,c	;volatile
  9390                           
  9391                           ;RTDuC.c: 302: while (!INTCONbits.TMR0IF);
  9392  002CD2  D000               	goto	i2l598
  9393  002CD4                     i2l598:
  9394  002CD4  A4F2               	btfss	intcon,2,c	;volatile
  9395  002CD6  D7FE               	goto	i2l598
  9396                           
  9397                           ;RTDuC.c: 303: INTCONbits.TMR0IF = 0;
  9398  002CD8  94F2               	bcf	intcon,2,c	;volatile
  9399                           
  9400                           ;RTDuC.c: 304: ~PORTAbits.RA4;
  9401  002CDA  5080               	movf	3968,w,c	;volatile
  9402  002CDC  D7F6               	goto	i2l2273
  9403  002CDE  0012               	return		;funcret
  9404  002CE0                     __end_of_INT0Int:
  9405                           	opt stack 0
  9406                           pclatu	equ	0xFFB
  9407                           pclath	equ	0xFFA
  9408                           tblptru	equ	0xFF8
  9409                           tblptrh	equ	0xFF7
  9410                           tblptrl	equ	0xFF6
  9411                           tablat	equ	0xFF5
  9412                           prodh	equ	0xFF4
  9413                           prodl	equ	0xFF3
  9414                           intcon	equ	0xFF2
  9415                           postinc0	equ	0xFEE
  9416                           fsr0h	equ	0xFEA
  9417                           fsr0l	equ	0xFE9
  9418                           wreg	equ	0xFE8
  9419                           indf1	equ	0xFE7
  9420                           postdec1	equ	0xFE5
  9421                           fsr1h	equ	0xFE2
  9422                           fsr1l	equ	0xFE1
  9423                           indf2	equ	0xFDF
  9424                           postinc2	equ	0xFDE
  9425                           postdec2	equ	0xFDD
  9426                           fsr2h	equ	0xFDA
  9427                           fsr2l	equ	0xFD9
  9428                           status	equ	0xFD8
  9429                           
  9430 ;; *************** function _KillMotors *****************
  9431 ;; Defined at:
  9432 ;;		line 28 in file "MotorControl.c"
  9433 ;; Parameters:    Size  Location     Type
  9434 ;;		None
  9435 ;; Auto vars:     Size  Location     Type
  9436 ;;		None
  9437 ;; Return value:  Size  Location     Type
  9438 ;;		None               void
  9439 ;; Registers used:
  9440 ;;		wreg, status,2, status,0
  9441 ;; Tracked objects:
  9442 ;;		On entry : 0/0
  9443 ;;		On exit  : 0/0
  9444 ;;		Unchanged: 0/0
  9445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;Total ram usage:        0 bytes
  9451 ;; Hardware stack levels used:    1
  9452 ;; This function calls:
  9453 ;;		Nothing
  9454 ;; This function is called by:
  9455 ;;		_INT0Int
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           	psect	text62
  9460  002E14                     __ptext62:
  9461                           	opt stack 0
  9462  002E14                     _KillMotors:
  9463                           	opt stack 22
  9464                           
  9465                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  9466                           
  9467                           ;incstack = 0
  9468  002E14  8880               	bsf	3968,4,c	;volatile
  9469                           
  9470                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  9471  002E16  50B7               	movf	4023,w,c	;volatile
  9472  002E18  0BF0               	andlw	240
  9473  002E1A  6EB7               	movwf	4023,c	;volatile
  9474  002E1C  0012               	return		;funcret
  9475  002E1E                     __end_of_KillMotors:
  9476                           	opt stack 0
  9477                           pclatu	equ	0xFFB
  9478                           pclath	equ	0xFFA
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           intcon	equ	0xFF2
  9486                           postinc0	equ	0xFEE
  9487                           fsr0h	equ	0xFEA
  9488                           fsr0l	equ	0xFE9
  9489                           wreg	equ	0xFE8
  9490                           indf1	equ	0xFE7
  9491                           postdec1	equ	0xFE5
  9492                           fsr1h	equ	0xFE2
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           fsr2h	equ	0xFDA
  9498                           fsr2l	equ	0xFD9
  9499                           status	equ	0xFD8
  9500                           pclatu	equ	0xFFB
  9501                           pclath	equ	0xFFA
  9502                           tblptru	equ	0xFF8
  9503                           tblptrh	equ	0xFF7
  9504                           tblptrl	equ	0xFF6
  9505                           tablat	equ	0xFF5
  9506                           prodh	equ	0xFF4
  9507                           prodl	equ	0xFF3
  9508                           intcon	equ	0xFF2
  9509                           postinc0	equ	0xFEE
  9510                           fsr0h	equ	0xFEA
  9511                           fsr0l	equ	0xFE9
  9512                           wreg	equ	0xFE8
  9513                           indf1	equ	0xFE7
  9514                           postdec1	equ	0xFE5
  9515                           fsr1h	equ	0xFE2
  9516                           fsr1l	equ	0xFE1
  9517                           indf2	equ	0xFDF
  9518                           postinc2	equ	0xFDE
  9519                           postdec2	equ	0xFDD
  9520                           fsr2h	equ	0xFDA
  9521                           fsr2l	equ	0xFD9
  9522                           status	equ	0xFD8
  9523                           
  9524                           	psect	rparam
  9525  0000                     pclatu	equ	0xFFB
  9526                           pclath	equ	0xFFA
  9527                           tblptru	equ	0xFF8
  9528                           tblptrh	equ	0xFF7
  9529                           tblptrl	equ	0xFF6
  9530                           tablat	equ	0xFF5
  9531                           prodh	equ	0xFF4
  9532                           prodl	equ	0xFF3
  9533                           intcon	equ	0xFF2
  9534                           postinc0	equ	0xFEE
  9535                           fsr0h	equ	0xFEA
  9536                           fsr0l	equ	0xFE9
  9537                           wreg	equ	0xFE8
  9538                           indf1	equ	0xFE7
  9539                           postdec1	equ	0xFE5
  9540                           fsr1h	equ	0xFE2
  9541                           fsr1l	equ	0xFE1
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           fsr2h	equ	0xFDA
  9546                           fsr2l	equ	0xFD9
  9547                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        8
    BSS         3646
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      71
    BANK0           160     74     109
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    SPIDisassembleLode@Transmit	PTR unsigned char  size(2) Largest target is 1800
		 -> TransmitLode(BIGRAM[1800]), 

    SPIDisassembleLode@Data	PTR  size(2) Largest target is 1800
		 -> DataLode(BIGRAM[1800]), 

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleLode@dub(COMRAM[3]), SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _ZeroMotors->___ftdiv
    _calculatePID->___ftdiv
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftdiv->___ftadd
    _ReadRTDpos->_Delay10TCYx
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SendSPI1->_SPIRestart
    _SaveAll->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep
    _SPIDisassembleLode->___wmul
    ___wmul->___lwdiv
    _SPIDisassembleDouble->_GenerateChecksum
    _ReceiveSPI1->_SPIRestart
    _SPIRestart->_OpenSPI1

Critical Paths under _ISR in COMRAM

    i2_SaveAll->i2_EEWriteDouble
    i2_EEWriteDouble->i2_Write_b_eep
    i2_EEWriteChar->i2_Write_b_eep

Critical Paths under _main in BANK0

    _main->_ZeroMotors
    _initialize->_ZeroMotors
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftmul
    _RTD2Angle->___ftmul
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  109384
                                             57 BANK0     17    17      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                 _SPIDisassembleLode
                _SPIReassembleDouble
                         _SPIRestart
                            _SaveAll
                           _SendSPI1
                         _ZeroMotors
                             ___wmul
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   38253
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                         _RecTmrInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           6     6      0   37274
                                             51 BANK0      6     6      0
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   19702
                                             36 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     525
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5399
                                             43 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5035
                                             31 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3306
                                             43 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6901
                                             21 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                              6 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     671
                                             40 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     344
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (2) _RecTmrInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     569
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             0     0      0     569
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     352
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0     368
                                             27 COMRAM     2     2      0
                         _SPIRestart
 ---------------------------------------------------------------------------------
 (1) _SaveAll                                              0     0      0    1919
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (2) _EEWriteDouble                                        5     2      3     825
                                             27 COMRAM     5     2      3
                           _Busy_eep
                _EEDisassembleDouble
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _EEDisassembleDouble                                  3     0      3     110
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEWriteChar                                          2     1      1    1094
                                             27 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     346
                                             23 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleLode                                  11     7      4    1103
                                             36 COMRAM    11     7      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     415
                                             30 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     458
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0     345
                         _SPIRestart
 ---------------------------------------------------------------------------------
 (2) _SPIRestart                                           1     1      0     345
                                             26 COMRAM     1     1      0
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     344
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     545
                                             40 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     258
                                             36 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     983
                                              9 COMRAM    14    14      0
                            _INT0Int
                             _SPIInt
                            _TMR0Int
                          i2_SaveAll
 ---------------------------------------------------------------------------------
 (8) i2_SaveAll                                            0     0      0     983
                      i2_EEWriteChar
                    i2_EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteDouble                                      5     2      3     459
                                              4 COMRAM     5     2      3
                         i2_Busy_eep
              i2_EEDisassembleDouble
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_EEDisassembleDouble                               3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteChar                                        2     1      1     524
                                              4 COMRAM     2     1      1
                         i2_Busy_eep
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_Write_b_eep                                       4     1      3     194
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
     _SPIRestart
       _OpenSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIDisassembleLode
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _SPIReassembleDouble
   _SPIRestart
     _OpenSPI1
   _SaveAll
     _EEWriteChar
       _Busy_eep
       _Write_b_eep
     _EEWriteDouble
       _Busy_eep
       _EEDisassembleDouble
       _Write_b_eep
   _SendSPI1
     _SPIRestart
       _OpenSPI1
   _ZeroMotors
     _ImplementPIDMotion
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _RTD2Angle
       _ReadRTDpos (ARG)
         _Delay10TCYx
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _ReadRTDpos
       _Delay10TCYx
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___fttol
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _calculatePID
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   ___wmul
     ___lwdiv (ARG)
   _calculatePID
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _RecTmrInit
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int
   i2_SaveAll
     i2_EEWriteChar
       i2_Busy_eep
       i2_Write_b_eep
     i2_EEWriteDouble
       i2_Busy_eep
       i2_EEDisassembleDouble
       i2_Write_b_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     E10      37       91.5%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4A      6D       5       68.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4      32        0.0%
DATA                 0      0     EC4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Nov  8 06:38:24 2015

                    _SPIRestart 2D9A        __size_of_MotorDriverInit 0024                              l31 2B5C  
                            l40 2D22                              l43 25BE                              l37 2D0C  
                            l49 2626                              _Kd 00B0                              _Ki 00B3  
                            _Kp 00B6             ___wmul@multiplicand 0021             ?_EEReassembleDouble 0018  
                  ___ftadd@exp1 002B                    ___ftadd@exp2 002A       ImplementJSMotion@CCPinput 008C  
                  ___ftadd@sign 0029                             l300 2942                             l109 1DB2  
                           l149 1676                             l272 2B96                             l282 2BFE  
                           l290 20C4                             l187 2636                             l188 2640  
                           l197 2A42                             l189 2682                             l613 1BCA  
                           l550 116C                             l279 2BE8                             l391 2D64  
                           l375 28FE                             l296 2984                             l624 2E28  
                           l640 2D98                             l385 2734                             l369 25B8  
                           l561 134C                             l545 11F2                             l570 1470  
                           l546 11EA                             l619 1C7E                             l548 1138  
                           l734 2BCC                             l735 2BD4                             l655 29B4  
                           l583 2AEE                             l680 276A                             l681 2784  
                           l577 1538                             l569 1426                             l682 276C  
                           l674 274A                             l930 2E06                             l683 2770  
                           l923 2DD6                             l676 274E                             l916 2DE8  
                           l677 2750                             l687 2C26                             l928 2DFE  
                           _PR2 000FCB                             _ISR 0008                             _abs 2BAA  
          __size_of_Write_b_eep 0040                             prod 000FF3                             wreg 000FE8  
       ??i2_EEDisassembleDouble 0004                            ?_ISR 0001                 __end_of_INT0Int 2CE0  
                  ___ftdiv@cntr 0060                      _Delay1TCYx 2DFC                    ___ftdiv@sign 0065  
                  __CFG_WDT$OFF 000000                            l1020 218A                            l1101 24D8  
                          l1031 2162                            l1107 1B2A                            ?_abs 0084  
                          l1060 1850                            l1124 2876                            l1117 2C8A  
                          l1061 19CE                            l1230 26D6                            l1064 187A  
                          l1128 1EE4                            l1075 193C                            l1092 1FE4  
                          l1084 1958                            l3015 263A                            l1095 1FAE  
                          l4001 19FA                            l1257 2C4C                            l3051 2754  
                          l3211 2980                            l4003 1A20                            l3205 297C  
                          l4021 1A84                            l3055 2774                            l3231 27A8  
                          l4031 1AC8                            l4007 1A34                            l4111 162C  
                          l3145 2B6A                            l4025 1AA4                            l4105 15AA  
                          l4201 1060                            l3403 1D52                            l3307 26CA  
                          l3235 27B0                            l4035 1AE8                            l3245 27D8  
                          l4029 1AC0                            l4117 170A                            l4213 10AE  
                          l4221 10E2                            l4205 107A                            l4039 1B04  
                          l4047 284C                            l4303 123A                            l4081 1E7E  
                          l4057 1DDE                            l4137 1B84                            l4225 10EA  
                          l4217 10C8                            l4209 1094                            l3371 261C  
                          l3363 260C                            l3195 2958                            l4075 1E62  
                          l4235 1112                            l3381 1CA0                            l3453 2BF2  
                          l4093 1ED2                            l4085 1E94                            l4405 14F2  
                          l4253 114E                            l4229 10F4                            l3199 2964  
                          l3295 269A                            l3439 2BA0                            l2743 2DDA  
                          l4087 1EA6                            l4079 1E76                            l4319 12A6  
                          l4271 11AC                            l4239 111A                            l3385 1CBE  
                          l3297 26A4                            l2761 26EC                            l4089 1EB4  
                          l4409 1518                            l4249 1140                            l4185 1028  
                          l3387 1CC6                            l3299 26AC                            l4339 1310  
                          l4275 11C6                            l4267 1192                            l3477 2010  
                          l2773 271C                            l2765 26F4                            l4285 1202  
                          l3399 1D1A                            l4391 149E                            l4279 11E0  
                          l2961 2334                            l3921 1900                            l3851 20E6  
                          l3915 18E0                            l4379 13E0                            l4395 14AE  
                          l2965 233E                            l2957 2314                            l3861 214A  
                          l3853 20F2                            l2885 2476                            l3917 18EC  
                          l3909 18BC                            l3863 2156                            l3855 2112  
                          l3847 20D6                            l2895 24D4                            l3935 1976  
                          l3927 1924                            l3919 18F8                            l2969 2356  
                          l3961 1F34                            l2889 24A8                            l3945 19A8  
                          l3929 1930                            l3875 217C                            l3859 212A  
                          l3955 1F08                            l3869 216A                            l3981 1F84  
                          l3957 1F26                            l3893 1888                            l2999 2DC8  
                          l3991 1FBE                            l3887 185E                            l3899 1894  
                          u2150 2352                            u3141 181C                            u2255 29C0  
                          u3151 1830                            u2256 29C2                            u3401 19E6  
                          u3421 1A10                            u3351 1EF6                     main@counter 00A7  
                          u3371 1F18                            u3471 1DCA                            u3490 1E04  
                          u3495 1DFA                            u3987 2DCA                            u3997 2DDC  
               __end_of_PIDInit 28BC  ImplementJSMotion@JoystickValue 0088            ??_EEReassembleDouble 001B  
                  EEReadChar@ch 001B                 __end_of_TMR0Int 2DFC                            abs@a 0084  
                          _main 1006                    ___ftpack@arg 0018                     _DeadbandLow 0045  
                  ___ftpack@exp 001B                 __end_of_RTDInit 2B4E                 __end_of_SPIInit 2D80  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            indf1 000FE7                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            pclat 000FFA  
                ??_EEReadDouble 0021          __size_ofi2_Write_b_eep 0040                            prodh 000FF4  
                          prodl 000FF3                            start 0018             __size_of_EEPROMInit 0014  
                  ?_EEWriteChar 001C                    ___ftmul@cntr 0073                    ___param_bank 000010  
                  ___ftmul@sign 0074   __size_of_InitializeInterrupts 000C                           ??_ISR 000A  
                   _Delay10TCYx 2DD8                __end_of_EEBootUp 25BA                    ___fttol@exp1 0083  
                         ??_abs 0086                 __end_of_SaveAll 2244                    ___fttol@lval 007F  
                   _Delay1KTCYx 2DC6                 i2EEWriteChar@ch 0005                     ReadRTDpos@x 0022  
             RTD2Angle@RTDAngle 0075                           ?_main 0001                           _EEADR 000FA9  
               __end_of___ftadd 19D0                 __end_of___ftdiv 1FE6                 __end_of___ftneg 2C98  
               __end_of___ftmul 1B2C                           _T0CON 000FD5                 __end_of___ftsub 2878  
               __end_of___fttol 1EE6                           _T2CON 000FCA                           _T3CON 000FB1  
               __end_of___lwdiv 26E0                           i2l268 2C72                           i2l624 2E30  
                         i2l655 29F4                           i2l594 240A                           i2l598 2CD4  
            __size_of_RTD2Angle 003E                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001D                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054             ZeroMotors@PrevAngle 0096  
        Write_b_eep@GIE_BIT_VAL 001B                    _DeadbandHigh 0043                           _error 00B9  
                 ___ftpack@sign 001C                      _DoubleSPIS 0035                           main@x 00A9  
                 ??_ReceiveSPI1 001C                           tablat 000FF5              __size_ofi2_SaveAll 00B8  
                   ?i2_Busy_eep 0001                           status 000FD8                   EEReadDouble@x 0022  
    __size_of_ImplementJSMotion 0134           EEWriteDouble@location 001F             GenerateChecksum@sum 0018  
                    _ReadRTDpos 2628                      _KillMotors 2E14                 __initialization 24DA  
                   ?_SPIRestart 0001                    __end_of_main 1562                      _RecTmrInit 2E1E  
                _DetectJoystick 2D02                  _DetectMovement 25BA                      _Read_b_eep 2D80  
              __end_of_Busy_eep 2E2E           EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000  
              __end_of_SendSPI1 2BAA                __end_of_OpenSPI1 278C                    _DataLodeSize 1001  
                        ??_main 0035                   ___fttol@sign1 007E                   __activetblptr 000003  
             ??_MotorDriverInit 0018         DetectMovement@ADCresult 001D                   i2_Write_b_eep 29C6  
                     ??_INT0Int 0001                       ??_PIDInit 0018                       ??_TMR0Int 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                     ??_RTDInit 0019                          _EEDATA 000FA8                     ?_Delay1TCYx 0001  
                     ??_SPIInit 001B                          _CCPR3L 000FB8                          _EECON2 000FA7  
              __end_of___ftpack 218C           __size_of_calculatePID 02AA                          i2l2273 2CCA  
                        i2l3321 2804                          i2l3331 282C                          i2l3421 2C6A  
                        i2l3317 27FC                          i2l3833 23F2                          i2l3825 23DE  
                        i2l3829 23E8                          i2l3839 2402                          _INTCON 000FF2  
              __end_of___lwtoft 2C4E                i2EEWriteDouble@x 0009                          _SPIInt 2C4E  
           SPIDisassembleLode@y 002B               __end_of_RTD2Angle 2A44           i2EEWriteChar@location 0006  
           __end_of_ReceiveSPI1 2C00                       ??_SaveAll 0021      SPIDisassembleLode@Transmit 0027  
        __end_of_DetectJoystick 2D24          __end_of_DetectMovement 2628                OpenSPI1@bus_mode 0018  
                 _EEWriteDouble 278C                          ___ftge 2444                          ___wmul 2C00  
                     ??___ftadd 0026                       ??___ftdiv 0032                       ??___ftneg 001B  
                     ??___ftmul 006C                       ??___ftsub 0032                       ??___fttol 0079  
                     ??___lwdiv 001C                          _intErr 00BC                          clear_0 24E2  
                        clear_1 24F4                          clear_2 2500               __end_ofi2_SaveAll 22FC  
                ?i2_Write_b_eep 0001             __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0070  
                  ??_EEPROMInit 0023     __size_of_ImplementPIDMotion 00A8        __size_ofi2_EEWriteDouble 0054  
            _SPIDisassembleLode 1FE6                    __pdataCOMRAM 0043                    _calculatePID 1562  
          __end_of_EEReadDouble 2736               _calculatePID$3484 008D               _calculatePID$3485 0090  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8             __size_of_SPIRestart 0018             ?_SPIDisassembleLode 0025  
             ?_GenerateChecksum 0001                       ?_EEBootUp 0001                      __accesstop 0060  
       __end_of__initialization 2544              ??_GenerateChecksum 0018                      ___ftadd@f1 0020  
                    ___ftadd@f2 0023                      ___ftge@ff1 0018                      ___ftge@ff2 001B  
                    _ZeroMotors 1B2C                   ___rparam_used 000001                      ___ftdiv@f1 002C  
                    ___ftdiv@f2 002F                      ___ftdiv@f3 0061              EEReadChar@location 001A  
                    ___ftneg@f1 0018                     ?_ReadRTDpos 0019                     ?_KillMotors 0001  
                  ??_EEReadChar 001A                  ?_EEWriteDouble 001C                      ___ftmul@f1 0066  
                    ___ftmul@f2 0069                 ?_DetectJoystick 0001                 ?_DetectMovement 0018  
            __end_of_EEPROMInit 2DC6                      ___ftsub@f1 002C                      ___ftsub@f2 002F  
                    ___fttol@f1 0075                  __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 2AB6  
                  __pidataBANK0 2E3B                     ?_RecTmrInit 0001            ??_SPIDisassembleLode 0029  
          __size_of_EEWriteChar 0022                     ?_Read_b_eep 0018             __size_of_Delay1TCYx 000C  
             GenerateChecksum@y 0019                      ___lwtoft@c 0020    __size_of_SPIReassembleDouble 0044  
        __size_ofi2_EEWriteChar 0022              __end_of_EEReadChar 2D66  __size_ofi2_EEDisassembleDouble 0036  
 __end_ofi2_EEDisassembleDouble 2AEC                      __pbssBANK0 00AA                     _ReceiveSPI1 2BD6  
                    ??_EEBootUp 0023                       ?_Busy_eep 0001         i2EEWriteDouble@location 0008  
                 ?_JoystickInit 0001                         ?_SPIInt 0001                       ?_SendSPI1 0001  
                     ?_OpenSPI1 0018                         ?___ftge 0018                    ?_Delay10TCYx 0001  
                       ?___wmul 001F                  EEWriteDouble@x 0020                         _CCP3CON 000FB7  
                  ?_Delay1KTCYx 0001                 ??i2_Write_b_eep 0004        i2EEDisassembleDouble@dub 0001  
                     ?___ftpack 0018                   ??_Write_b_eep 001B                       ?___lwtoft 0020  
                       _HLVDCON 000FD2                         _INT0Int 2CBC                         _RECFlag 00C6  
  __end_of_InitializeInterrupts 2E14                         _PIDInit 2878                         _DDouble 0039  
           __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A                   _PIDEnableFlag 00C5  
                       _SSP1BUF 000FC9                         _TMR0Int 2DEA      ImplementPIDMotion@PIDValue 0088  
                       _RTDInit 2B1E                         _SPIInit 2D66               ??i2_EEWriteDouble 0008  
           __size_of_RecTmrInit 0008                         _SPIflag 00C7                EEWriteDouble@dub 001C  
           __size_of_Read_b_eep 001A                _TransmitLodeSize 1003                  ??_JoystickInit 0018  
                  ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044                      ??_Busy_eep 0018  
                       _Command 0041                     ?_ZeroMotors 0001                 __size_of_SPIInt 0026  
                    ??_SendSPI1 001C                 ??_EEWriteDouble 001F                      ??_OpenSPI1 001A  
           EEWriteChar@location 001D                         _SaveAll 218C                         __Hparam 0000  
                       __Lparam 0000                 _MotorDriverInit 2C98                    ??_SPIRestart 001B  
                 i2_EEWriteChar 2D24                 __size_of___ftge 0096                         ___ftadd 180C  
                       ___ftdiv 1EE6                         ___ftneg 2C74                 __size_of___wmul 0028  
                       ___ftmul 19D0                         ___ftsub 2834                         ___fttol 1DB4  
                       ___lwdiv 2684                    __psmallconst 1000                      _dummy_byte 00C9  
         __size_of_EEReadDouble 0056                    SendSPI1@data 001D                         __pcinit 24DA  
                    ??___ftpack 001D                 Delay10TCYx@unit 0018                         __ramtop 1000  
                    _initialize 2AEC                    SendSPI1@temp 001C                         __ptext0 1006  
                       __ptext1 2AEC                         __ptext2 1B2C                         __ptext3 1562  
                       __ptext4 1DB4                         __ptext5 2834                         __ptext6 180C  
                       __ptext7 2C74                         __ptext8 2444                         __ptext9 1EE6  
                    ??___lwtoft 0023                       _T0CONbits 000FD5                    __size_of_ISR 243C  
                     _T1CONbits 000FCD                    __size_of_abs 002C              __end_ofi2_Busy_eep 2E36  
                     _T3CONbits 000FB1               i2Write_b_eep@badd 0001               i2Write_b_eep@bdat 0003  
                       _prevErr 00BF   __size_of_SPIDisassembleDouble 003C             __end_of_Write_b_eep 29C6  
                  ??_Delay1TCYx 0018                  __pintcode_body 23A4            end_of_initialization 2544  
            __end_of_SPIRestart 2DB2                         int_func 23A4               OpenSPI1@smp_phase 0019  
                  _EEReadDouble 26E0                  ?i2_EEWriteChar 0005           ReadRTDpos@LowPosition 001F  
                    _timer1High 0047                         postdec1 000FE5                         postdec2 000FDD  
                    _motorInput 00C2                       _RTD2Angle 2A06                         postinc0 000FEE  
                       postinc2 000FDE               OpenSPI1@sync_mode 001A              __end_of_Delay1TCYx 2E08  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _PORTCbits 000F82  
                     _PORTEbits 000F84                       _PORTJbits 000F88        i2Write_b_eep@GIE_BIT_VAL 0004  
           __size_of_ZeroMotors 0154                       i2_SaveAll 2244          SPIDisassembleLode@Data 0025  
                     _TRISAbits 000F92                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISEbits 000F96                       _TRISFbits 000F97                       _TRISGbits 000F98  
                     _TRISJbits 000F9A         __end_of_MotorDriverInit 2CBC                ??_DetectJoystick 0018  
              ??_DetectMovement 001A                     ___ftdiv@exp 0064               __size_of_EEBootUp 0070  
           _SPIReassembleDouble 2900                     _CCP3CONbits 000FB7                      main@saveSP 00A3  
                    main@saveKd 00A0                      main@saveKi 009D                      main@saveKp 009A  
                __end_of_SPIInt 2C74                    ??_ReadRTDpos 001B                    ??_KillMotors 0001  
                   ___ftmul@exp 006F            _InitializeInterrupts 2E08                    ??_RecTmrInit 0018  
                    ?_RTD2Angle 0075       __size_of_GenerateChecksum 0042                    ??_Read_b_eep 001A  
                __end_of___ftge 24DA                  __end_of___wmul 2C28            __size_of_Delay10TCYx 0012  
                 __pidataCOMRAM 2E36      __end_of_ImplementPIDMotion 23A4                     ?_initialize 0001  
                   _Write_b_eep 2986            __end_of_JoystickInit 2B7C            __size_of_Delay1KTCYx 0012  
          ?_SPIReassembleDouble 0018                       _DoublePtr 003F                      ?i2_SaveAll 0001  
           start_initialization 24DA                 _CurrentVelocity 00AD                    _CurrentAngle 00AA  
                   __end_of_ISR 2444                     __end_of_abs 2BD6              __end_of_ReadRTDpos 2684  
            __end_of_KillMotors 2E1E                    ?_ReceiveSPI1 0001              __end_of_RecTmrInit 2E26  
            __end_of_Read_b_eep 2D9A            EEReadDouble@location 0021                        ??_SPIInt 0001  
               ??i2_EEWriteChar 0006               __size_of_Busy_eep 0008            calculatePID@setpoint 0087  
                 ??_EEWriteChar 001D          ReadRTDpos@HighPosition 001E               __size_of_SendSPI1 002E  
             __size_of_OpenSPI1 0056           ?_InitializeInterrupts 0001                        ??___ftge 001E  
                      ??___wmul 0023     __size_of_SPIDisassembleLode 00E0                     __pdataBANK0 00CA  
      __end_of_TransmitLodeSize 1005           ??_SPIReassembleDouble 001B                 i2_EEWriteDouble 27E0  
  __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6                     __pbssBIGRAM 00CD  
                      ?_INT0Int 0001                     __pbssCOMRAM 0035               __size_of___lwtoft 0026  
                 __pcstackBANK0 0060                        ?_PIDInit 0001                        ?_TMR0Int 0001  
            calculatePID@derErr 008A                  SPIRestart@temp 001B                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001  
         i2_EEDisassembleDouble 2AB6                    ??_ZeroMotors 0035             __size_of_initialize 0032  
        SPIReassembleDouble@dub 001B                   EEWriteChar@ch 001C                        ?_SaveAll 0001  
              ___lwdiv@dividend 0018                       __pintcode 0008                     ??_RTD2Angle 0035  
                      ?___ftadd 0020                        ?___ftdiv 002C                        ?___ftneg 0018  
                      ?___ftmul 0066                        ?___ftsub 002C                        ?___fttol 0075  
                      ?___lwdiv 0018             __end_of_EEWriteChar 2D02           __end_ofi2_Write_b_eep 2A06  
                   __smallconst 1000                     ??i2_SaveAll 000A              __end_of_ZeroMotors 1C80  
              ___lwdiv@quotient 001C      __end_of_EEReassembleDouble 2900                        _EEBootUp 254A  
                ___wmul@product 0023                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0              i2EEWriteDouble@dub 0005          ??_InitializeInterrupts 0018  
         __end_of_EEWriteDouble 27E0    __end_of_SPIDisassembleDouble 2A80                        i2u228_45 2A00  
                      i2u228_46 2A02                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                     _timer1Low 0042         __end_ofi2_EEWriteDouble 2834           __size_of_JoystickInit 002E  
                      _SSP1CON1 000FC6                        _TMR0Flag 00C8                _GenerateChecksum 2944  
                      _SSP1STAT 000FC7           SPIDisassembleLode@dub 002D                      _ADCON0bits 000FC2  
             ___wmul@multiplier 001F                 Write_b_eep@badd 0018                 Write_b_eep@bdat 001A  
                 ?_calculatePID 0084                        _DataLode 00CD                       main@dtime 00A6  
                     main@trash 0099                __size_of_INT0Int 0024                __size_of_PIDInit 0044  
              __size_of_TMR0Int 0012                       copy_data0 2538                __size_of_RTDInit 0030  
              __size_of_SPIInit 001A          ?i2_EEDisassembleDouble 0001                        _Busy_eep 2E26  
          __size_of_ReceiveSPI1 002A                    _JoystickInit 2B4E                        _SendSPI1 2B7C  
                    _EECON1bits 000FA6                        _SetAngle 003C                        _OpenSPI1 2736  
        ReadRTDpos@FullPosition 0020                        __Hrparam 0000               ZeroMotors@average 0093  
                   _EEWriteChar 2CE0                        __Lrparam 0000                __size_of_SaveAll 00B8  
                  _JSEnableFlag 00C4                __size_of___ftadd 01C4                __size_of___ftdiv 0100  
              __size_of___ftneg 0024                __size_of___ftmul 015C                __size_of___ftsub 0044  
              __size_of___fttol 0132                __size_of___lwdiv 005C                    ??_initialize 0035  
                      ___ftpack 20C6                    ?_Write_b_eep 0018               calculatePID@angle 0084  
                ??_calculatePID 0035                        ___lwtoft 2C28                      _EEPROMInit 2DB2  
               ___lwdiv@divisor 001A                 ___lwdiv@counter 001E                        __ptext10 2628  
                      __ptext11 2A06                        __ptext20 2DC6                        __ptext12 2C28  
                      __ptext21 2DD8                        __ptext13 19D0                        __ptext30 2D46  
                      __ptext22 2878                        __ptext14 20C6                        __ptext31 2D80  
                      __ptext23 2C98                        __ptext15 22FC                        __ptext40 1FE6  
                      __ptext32 2B7C                        __ptext24 2B4E                        __ptext16 2D66  
                      __ptext41 2C00                        __ptext33 218C                        __ptext25 2E08  
                      __ptext17 2E1E                        __ptext50 25BA                        __ptext42 2684  
                      __ptext34 278C                        __ptext26 2DB2                        __ptext18 2B1E  
                      __ptext51 2D02                        __ptext43 2A44                        __ptext35 2A80  
                      __ptext27 254A                        __ptext19 2DFC                        __ptext60 2C4E  
                      __ptext44 2944                        __ptext36 2CE0                        __ptext28 26E0  
                      __ptext61 2CBC                        __ptext53 2244                        __ptext45 2BD6  
                      __ptext37 2986                        __ptext29 28BC                        __ptext62 2E14  
                      __ptext54 27E0                        __ptext46 2D9A                        __ptext38 2E26  
                      __ptext55 2AB6                        __ptext47 2736                        __ptext39 2900  
                      __ptext56 2D24                        __ptext48 1C80                        __ptext57 29C6  
                      __ptext49 2BAA                        __ptext58 2E2E                        __ptext59 2DEA  
                  _SSP1CON1bits 000FC6              _ImplementPIDMotion 22FC                   __size_of_main 055C  
           _EEDisassembleDouble 2A80                  Delay1TCYx@unit 0018             ?_ImplementPIDMotion 0088  
            __end_of_initialize 2B1E                        _loopTime 00CA                      _EEReadChar 2D46  
                 ??_Delay10TCYx 0018                ?i2_EEWriteDouble 0005                   ??_Delay1KTCYx 0018  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0018            ??_ImplementPIDMotion 008A  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 2A44                        intlevel2 0000  
          __end_of_DataLodeSize 1003                      _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B  
             _ImplementJSMotion 1C80      __end_of_SPIDisassembleLode 20C6           __end_ofi2_EEWriteChar 2D46  
   __end_of_SPIReassembleDouble 2944              ?_ImplementJSMotion 0088         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 006E           ??_EEDisassembleDouble 001B             __end_of_Delay10TCYx 2DEA  
           ??_ImplementJSMotion 008A          EEDisassembleDouble@dub 0018                     ?_EEPROMInit 0001  
                  _TransmitLode 07D5             __end_of_Delay1KTCYx 2DD8           ?_SPIDisassembleDouble 001A  
      __end_of_GenerateChecksum 2986                      i2_Busy_eep 2E2E         SPIDisassembleDouble@dub 001A  
     __end_of_ImplementJSMotion 1DB4            __end_of_calculatePID 180C                   ?_EEReadDouble 001E  
                   ?_EEReadChar 0001              _EEReassembleDouble 28BC  
