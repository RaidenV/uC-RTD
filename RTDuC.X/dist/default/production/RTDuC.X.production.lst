

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 21 02:36:26 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    64  0000                     
    65 ;; Function _ReadRTDpos is unused but had its address taken
    66  0000                     _ADCON0	set	4034
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _ADCON1	set	4033
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADRESH	set	4036
    71  0000                     _ADRESL	set	4035
    72  0000                     _CCP3CON	set	4023
    73  0000                     _CCP3CONbits	set	4023
    74  0000                     _CCPR3L	set	4024
    75  0000                     _EEADR	set	4009
    76  0000                     _EEADRH	set	4010
    77  0000                     _EECON1bits	set	4006
    78  0000                     _EECON2	set	4007
    79  0000                     _EEDATA	set	4008
    80  0000                     _HLVDCON	set	4050
    81  0000                     _INTCON	set	4082
    82  0000                     _INTCON2bits	set	4081
    83  0000                     _INTCONbits	set	4082
    84  0000                     _IPR1bits	set	3999
    85  0000                     _IPR2bits	set	4002
    86  0000                     _OSCCONbits	set	4051
    87  0000                     _PIE1bits	set	3997
    88  0000                     _PIE2bits	set	4000
    89  0000                     _PIR1bits	set	3998
    90  0000                     _PIR2bits	set	4001
    91  0000                     _PORTA	set	3968
    92  0000                     _PORTAbits	set	3968
    93  0000                     _PORTB	set	3969
    94  0000                     _PORTBbits	set	3969
    95  0000                     _PORTC	set	3970
    96  0000                     _PORTCbits	set	3970
    97  0000                     _PORTD	set	3971
    98  0000                     _PORTE	set	3972
    99  0000                     _PORTEbits	set	3972
   100  0000                     _PORTF	set	3973
   101  0000                     _PORTG	set	3974
   102  0000                     _PORTH	set	3975
   103  0000                     _PORTJ	set	3976
   104  0000                     _PORTJbits	set	3976
   105  0000                     _PR2	set	4043
   106  0000                     _RCONbits	set	4048
   107  0000                     _SSP1BUF	set	4041
   108  0000                     _SSP1CON1	set	4038
   109  0000                     _SSP1CON1bits	set	4038
   110  0000                     _SSP1STAT	set	4039
   111  0000                     _SSP1STATbits	set	4039
   112  0000                     _SSP2BUF	set	3942
   113  0000                     _SSP2CON1bits	set	3939
   114  0000                     _T0CON	set	4053
   115  0000                     _T2CON	set	4042
   116  0000                     _T3CON	set	4017
   117  0000                     _TMR0H	set	4055
   118  0000                     _TMR0L	set	4054
   119  0000                     _TRISAbits	set	3986
   120  0000                     _TRISBbits	set	3987
   121  0000                     _TRISCbits	set	3988
   122  0000                     _TRISD	set	3989
   123  0000                     _TRISDbits	set	3989
   124  0000                     _TRISEbits	set	3990
   125  0000                     _TRISFbits	set	3991
   126  0000                     _TRISGbits	set	3992
   127  0000                     _TRISH	set	3993
   128  0000                     _TRISJbits	set	3994
   129                           
   130                           ; 0 bytes @ 0x49
   131 ;;
   132 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   133 ;;
   134 ;; *************** function _main *****************
   135 ;; Defined at:
   136 ;;		line 19 in file "RTDuC.c"
   137 ;; Parameters:    Size  Location     Type
   138 ;;		None
   139 ;; Auto vars:     Size  Location     Type
   140 ;;  x               1   59[BANK0 ] unsigned char 
   141 ;;  temporary       1   58[BANK0 ] unsigned char 
   142 ;; Return value:  Size  Location     Type
   143 ;;		None               void
   144 ;; Registers used:
   145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   146 ;; Tracked objects:
   147 ;;		On entry : 0/0
   148 ;;		On exit  : 0/0
   149 ;;		Unchanged: 0/0
   150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   155 ;;Total ram usage:        2 bytes
   156 ;; Hardware stack levels required when called:   12
   157 ;; This function calls:
   158 ;;		_DetectJoystick
   159 ;;		_DetectMovement
   160 ;;		_ImplementJSMotion
   161 ;;		_ReceiveSPI1
   162 ;;		_SPIDisassembleDouble
   163 ;;		_SPIReassembleDouble
   164 ;;		_SendSPI1
   165 ;;		_initialize
   166 ;; This function is called by:
   167 ;;		Startup code after reset
   168 ;; This function uses a non-reentrant model
   169 ;;
   170                           
   171                           	psect	text0
   172  000800                     __ptext0:
   173                           	opt stack 0
   174  000800                     _main:
   175                           	opt stack 19
   176                           
   177                           ;RTDuC.c: 21: unsigned char temporary, x;
   178                           ;RTDuC.c: 23: initialize();
   179                           
   180                           ; BSR set to: 0
   181                           ;incstack = 0
   182  000800  EC02  F00C         	call	_initialize	;wreg free
   183                           
   184                           ;RTDuC.c: 25: PORTCbits.RC6 = 0;
   185  000804  9C82               	bcf	3970,6,c	;volatile
   186                           
   187                           ;RTDuC.c: 26: SSP2BUF = dummy_byte;
   188  000806  C0C6  FF66         	movff	_dummy_byte,3942	;volatile
   189  00080A  D000               	goto	l2950
   190  00080C                     l2950:
   191                           
   192                           ;RTDuC.c: 29: {
   193                           ;RTDuC.c: 30: if (SPIflag == 1)
   194  00080C  0100               	movlb	0	; () banked
   195  00080E  05C5               	decf	_SPIflag& (0+255),w,b
   196  000810  A4D8               	btfss	status,2,c
   197  000812  D0EA               	goto	l3042
   198                           
   199                           ; BSR set to: 0
   200                           ;RTDuC.c: 31: {
   201                           ;RTDuC.c: 32: SPIflag = 0;
   202  000814  0E00               	movlw	0
   203  000816  0100               	movlb	0	; () banked
   204  000818  6FC5               	movwf	_SPIflag& (0+255),b
   205                           
   206                           ; BSR set to: 0
   207                           ;RTDuC.c: 33: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   208  00081A  0E02               	movlw	2
   209  00081C  0100               	movlb	0	; () banked
   210  00081E  19C2               	xorwf	_Command& (0+255),w,b
   211  000820  B4D8               	btfsc	status,2,c
   212  000822  D014               	goto	l2964
   213                           
   214                           ; BSR set to: 0
   215  000824  0E03               	movlw	3
   216  000826  0100               	movlb	0	; () banked
   217  000828  19C2               	xorwf	_Command& (0+255),w,b
   218  00082A  B4D8               	btfsc	status,2,c
   219  00082C  D00F               	goto	l2964
   220                           
   221                           ; BSR set to: 0
   222  00082E  0E04               	movlw	4
   223  000830  0100               	movlb	0	; () banked
   224  000832  19C2               	xorwf	_Command& (0+255),w,b
   225  000834  B4D8               	btfsc	status,2,c
   226  000836  D00A               	goto	l2964
   227                           
   228                           ; BSR set to: 0
   229  000838  0E06               	movlw	6
   230  00083A  0100               	movlb	0	; () banked
   231  00083C  19C2               	xorwf	_Command& (0+255),w,b
   232  00083E  B4D8               	btfsc	status,2,c
   233  000840  D005               	goto	l2964
   234                           
   235                           ; BSR set to: 0
   236  000842  0E08               	movlw	8
   237  000844  0100               	movlb	0	; () banked
   238  000846  19C2               	xorwf	_Command& (0+255),w,b
   239  000848  A4D8               	btfss	status,2,c
   240  00084A  D05F               	goto	l2998
   241  00084C                     l2964:
   242                           
   243                           ; BSR set to: 0
   244                           ;RTDuC.c: 34: {
   245                           ;RTDuC.c: 35: if (Command == 0x02)
   246  00084C  0E02               	movlw	2
   247  00084E  0100               	movlb	0	; () banked
   248  000850  19C2               	xorwf	_Command& (0+255),w,b
   249  000852  A4D8               	btfss	status,2,c
   250  000854  D009               	goto	l2968
   251                           
   252                           ; BSR set to: 0
   253                           ;RTDuC.c: 36: SPIDisassembleDouble(CurrentAngle);
   254  000856  C0A0  F08F         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   255  00085A  C0A1  F090         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   256  00085E  C0A2  F091         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   257  000862  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   258  000866  D038               	goto	l2984
   259  000868                     l2968:
   260                           
   261                           ;RTDuC.c: 37: else if (Command == 0x03)
   262  000868  0E03               	movlw	3
   263  00086A  0100               	movlb	0	; () banked
   264  00086C  19C2               	xorwf	_Command& (0+255),w,b
   265  00086E  A4D8               	btfss	status,2,c
   266  000870  D009               	goto	l2972
   267                           
   268                           ; BSR set to: 0
   269                           ;RTDuC.c: 38: SPIDisassembleDouble(CurrentVelocity);
   270  000872  C0A3  F08F         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   271  000876  C0A4  F090         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   272  00087A  C0A5  F091         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   273  00087E  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   274  000882  D02A               	goto	l2984
   275  000884                     l2972:
   276                           
   277                           ;RTDuC.c: 39: else if (Command == 0x04)
   278  000884  0E04               	movlw	4
   279  000886  0100               	movlb	0	; () banked
   280  000888  19C2               	xorwf	_Command& (0+255),w,b
   281  00088A  A4D8               	btfss	status,2,c
   282  00088C  D009               	goto	l2976
   283                           
   284                           ; BSR set to: 0
   285                           ;RTDuC.c: 40: SPIDisassembleDouble(Kp);
   286  00088E  C0AC  F08F         	movff	_Kp,SPIDisassembleDouble@dub
   287  000892  C0AD  F090         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   288  000896  C0AE  F091         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   289  00089A  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   290  00089E  D01C               	goto	l2984
   291  0008A0                     l2976:
   292                           
   293                           ;RTDuC.c: 41: else if (Command == 0x06)
   294  0008A0  0E06               	movlw	6
   295  0008A2  0100               	movlb	0	; () banked
   296  0008A4  19C2               	xorwf	_Command& (0+255),w,b
   297  0008A6  A4D8               	btfss	status,2,c
   298  0008A8  D009               	goto	l2980
   299                           
   300                           ; BSR set to: 0
   301                           ;RTDuC.c: 42: SPIDisassembleDouble(Ki);
   302  0008AA  C0A9  F08F         	movff	_Ki,SPIDisassembleDouble@dub
   303  0008AE  C0AA  F090         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   304  0008B2  C0AB  F091         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   305  0008B6  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   306  0008BA  D00E               	goto	l2984
   307  0008BC                     l2980:
   308                           
   309                           ;RTDuC.c: 43: else if (Command == 0x08)
   310  0008BC  0E08               	movlw	8
   311  0008BE  0100               	movlb	0	; () banked
   312  0008C0  19C2               	xorwf	_Command& (0+255),w,b
   313  0008C2  A4D8               	btfss	status,2,c
   314  0008C4  D009               	goto	l2984
   315                           
   316                           ; BSR set to: 0
   317                           ;RTDuC.c: 44: SPIDisassembleDouble(Kd);
   318  0008C6  C0A6  F08F         	movff	_Kd,SPIDisassembleDouble@dub
   319  0008CA  C0A7  F090         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   320  0008CE  C0A8  F091         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   321  0008D2  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   322  0008D6  D000               	goto	l2984
   323  0008D8                     l2984:
   324                           
   325                           ;RTDuC.c: 45: PORTCbits.RC6 = 0;
   326  0008D8  9C82               	bcf	3970,6,c	;volatile
   327                           
   328                           ;RTDuC.c: 46: for (x = 0; x < 4; x++)
   329  0008DA  0E00               	movlw	0
   330  0008DC  0100               	movlb	0	; () banked
   331  0008DE  6F9B               	movwf	main@x& (0+255),b
   332  0008E0  D00F               	goto	l2996
   333                           
   334                           ; BSR set to: 0
   335                           
   336                           ; BSR set to: 0
   337  0008E2  D07D               	goto	l3038
   338  0008E4                     l2992:
   339                           
   340                           ; BSR set to: 0
   341                           ;RTDuC.c: 47: SendSPI1(DoubleSPIS[x]);
   342  0008E4  0100               	movlb	0	; () banked
   343  0008E6  519B               	movf	main@x& (0+255),w,b
   344  0008E8  0D01               	mullw	1
   345  0008EA  0E9C               	movlw	low _DoubleSPIS
   346  0008EC  24F3               	addwf	prodl,w,c
   347  0008EE  6ED9               	movwf	fsr2l,c
   348  0008F0  0E00               	movlw	high _DoubleSPIS
   349  0008F2  20F4               	addwfc	prodh,w,c
   350  0008F4  6EDA               	movwf	fsr2h,c
   351  0008F6  50DF               	movf	indf2,w,c
   352  0008F8  ECBF  F00C         	call	_SendSPI1
   353  0008FC  0100               	movlb	0	; () banked
   354  0008FE  2B9B               	incf	main@x& (0+255),f,b
   355  000900                     l2996:
   356                           
   357                           ; BSR set to: 0
   358  000900  0E03               	movlw	3
   359  000902  0100               	movlb	0	; () banked
   360  000904  659B               	cpfsgt	main@x& (0+255),b
   361  000906  D7EE               	goto	l2992
   362  000908  D06A               	goto	l3038
   363  00090A                     l2998:
   364                           
   365                           ; BSR set to: 0
   366                           ;RTDuC.c: 50: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   367  00090A  0100               	movlb	0	; () banked
   368  00090C  05C2               	decf	_Command& (0+255),w,b
   369  00090E  B4D8               	btfsc	status,2,c
   370  000910  D00F               	goto	l324
   371                           
   372                           ; BSR set to: 0
   373  000912  0E05               	movlw	5
   374  000914  0100               	movlb	0	; () banked
   375  000916  19C2               	xorwf	_Command& (0+255),w,b
   376  000918  B4D8               	btfsc	status,2,c
   377  00091A  D00A               	goto	l324
   378                           
   379                           ; BSR set to: 0
   380  00091C  0E07               	movlw	7
   381  00091E  0100               	movlb	0	; () banked
   382  000920  19C2               	xorwf	_Command& (0+255),w,b
   383  000922  B4D8               	btfsc	status,2,c
   384  000924  D005               	goto	l324
   385                           
   386                           ; BSR set to: 0
   387  000926  0E09               	movlw	9
   388  000928  0100               	movlb	0	; () banked
   389  00092A  19C2               	xorwf	_Command& (0+255),w,b
   390  00092C  A4D8               	btfss	status,2,c
   391  00092E  D05A               	goto	l3040
   392  000930                     l324:
   393                           
   394                           ; BSR set to: 0
   395                           ;RTDuC.c: 51: {
   396                           ;RTDuC.c: 52: PORTCbits.RC6 = 0;
   397  000930  9C82               	bcf	3970,6,c	;volatile
   398                           
   399                           ; BSR set to: 0
   400                           ;RTDuC.c: 53: for (x = 0; x != 4; x++)
   401  000932  0E00               	movlw	0
   402  000934  0100               	movlb	0	; () banked
   403  000936  6F9B               	movwf	main@x& (0+255),b
   404  000938                     l3008:
   405                           
   406                           ; BSR set to: 0
   407  000938  0E04               	movlw	4
   408  00093A  0100               	movlb	0	; () banked
   409  00093C  199B               	xorwf	main@x& (0+255),w,b
   410  00093E  B4D8               	btfsc	status,2,c
   411  000940  D011               	goto	l3018
   412  000942  D001               	goto	l3012
   413                           
   414                           ; BSR set to: 0
   415  000944  D00F               	goto	l3018
   416  000946                     l3012:
   417                           
   418                           ; BSR set to: 0
   419                           ;RTDuC.c: 54: DoubleSPIS[x] = ReceiveSPI1();
   420  000946  0100               	movlb	0	; () banked
   421  000948  519B               	movf	main@x& (0+255),w,b
   422  00094A  0D01               	mullw	1
   423  00094C  0E9C               	movlw	low _DoubleSPIS
   424  00094E  24F3               	addwf	prodl,w,c
   425  000950  6ED9               	movwf	fsr2l,c
   426  000952  0E00               	movlw	high _DoubleSPIS
   427  000954  20F4               	addwfc	prodh,w,c
   428  000956  6EDA               	movwf	fsr2h,c
   429  000958  ECFE  F00C         	call	_ReceiveSPI1	;wreg free
   430  00095C  6EDF               	movwf	indf2,c
   431  00095E  0100               	movlb	0	; () banked
   432  000960  2B9B               	incf	main@x& (0+255),f,b
   433  000962  D7EA               	goto	l3008
   434  000964                     l3018:
   435                           
   436                           ; BSR set to: 0
   437                           ;RTDuC.c: 55: if (Command == 0x01)
   438  000964  0100               	movlb	0	; () banked
   439  000966  05C2               	decf	_Command& (0+255),w,b
   440  000968  A4D8               	btfss	status,2,c
   441  00096A  D00F               	goto	l3026
   442                           
   443                           ; BSR set to: 0
   444                           ;RTDuC.c: 56: {
   445                           ;RTDuC.c: 57: SetAngle = SPIReassembleDouble();
   446  00096C  ECAD  F00A         	call	_SPIReassembleDouble	;wreg free
   447  000970  C08D  F0AF         	movff	?_SPIReassembleDouble,_SetAngle
   448  000974  C08E  F0B0         	movff	?_SPIReassembleDouble+1,_SetAngle+1
   449  000978  C08F  F0B1         	movff	?_SPIReassembleDouble+2,_SetAngle+2
   450                           
   451                           ;RTDuC.c: 58: PIDEnableFlag = 0x03;
   452  00097C  0E03               	movlw	3
   453  00097E  0100               	movlb	0	; () banked
   454  000980  6FC4               	movwf	_PIDEnableFlag& (0+255),b
   455                           
   456                           ; BSR set to: 0
   457                           ;RTDuC.c: 59: JSEnableFlag = 0;
   458  000982  0E00               	movlw	0
   459  000984  0100               	movlb	0	; () banked
   460  000986  6FC3               	movwf	_JSEnableFlag& (0+255),b
   461                           
   462                           ;RTDuC.c: 60: }
   463  000988  D02A               	goto	l3038
   464  00098A                     l3026:
   465                           
   466                           ; BSR set to: 0
   467                           ;RTDuC.c: 61: else if (Command == 0x05)
   468  00098A  0E05               	movlw	5
   469  00098C  0100               	movlb	0	; () banked
   470  00098E  19C2               	xorwf	_Command& (0+255),w,b
   471  000990  A4D8               	btfss	status,2,c
   472  000992  D009               	goto	l3030
   473                           
   474                           ; BSR set to: 0
   475                           ;RTDuC.c: 62: {
   476                           ;RTDuC.c: 63: Kp = SPIReassembleDouble();
   477  000994  ECAD  F00A         	call	_SPIReassembleDouble	;wreg free
   478  000998  C08D  F0AC         	movff	?_SPIReassembleDouble,_Kp
   479  00099C  C08E  F0AD         	movff	?_SPIReassembleDouble+1,_Kp+1
   480  0009A0  C08F  F0AE         	movff	?_SPIReassembleDouble+2,_Kp+2
   481                           
   482                           ;RTDuC.c: 64: }
   483  0009A4  D01C               	goto	l3038
   484  0009A6                     l3030:
   485                           
   486                           ;RTDuC.c: 65: else if (Command == 0x07)
   487  0009A6  0E07               	movlw	7
   488  0009A8  0100               	movlb	0	; () banked
   489  0009AA  19C2               	xorwf	_Command& (0+255),w,b
   490  0009AC  A4D8               	btfss	status,2,c
   491  0009AE  D009               	goto	l3034
   492                           
   493                           ; BSR set to: 0
   494                           ;RTDuC.c: 66: {
   495                           ;RTDuC.c: 67: Ki = SPIReassembleDouble();
   496  0009B0  ECAD  F00A         	call	_SPIReassembleDouble	;wreg free
   497  0009B4  C08D  F0A9         	movff	?_SPIReassembleDouble,_Ki
   498  0009B8  C08E  F0AA         	movff	?_SPIReassembleDouble+1,_Ki+1
   499  0009BC  C08F  F0AB         	movff	?_SPIReassembleDouble+2,_Ki+2
   500                           
   501                           ;RTDuC.c: 68: }
   502  0009C0  D00E               	goto	l3038
   503  0009C2                     l3034:
   504                           
   505                           ;RTDuC.c: 69: else if (Command == 0x09)
   506  0009C2  0E09               	movlw	9
   507  0009C4  0100               	movlb	0	; () banked
   508  0009C6  19C2               	xorwf	_Command& (0+255),w,b
   509  0009C8  A4D8               	btfss	status,2,c
   510  0009CA  D009               	goto	l3038
   511                           
   512                           ; BSR set to: 0
   513                           ;RTDuC.c: 70: {
   514                           ;RTDuC.c: 71: Kd = SPIReassembleDouble();
   515  0009CC  ECAD  F00A         	call	_SPIReassembleDouble	;wreg free
   516  0009D0  C08D  F0A6         	movff	?_SPIReassembleDouble,_Kd
   517  0009D4  C08E  F0A7         	movff	?_SPIReassembleDouble+1,_Kd+1
   518  0009D8  C08F  F0A8         	movff	?_SPIReassembleDouble+2,_Kd+2
   519  0009DC  D000               	goto	l3038
   520  0009DE                     l3038:
   521                           
   522                           ;RTDuC.c: 72: }
   523                           ;RTDuC.c: 73: temporary = SSP1BUF;
   524  0009DE  CFC9 F09A          	movff	4041,main@temporary	;volatile
   525  0009E2  D000               	goto	l3040
   526  0009E4                     l3040:
   527                           
   528                           ;RTDuC.c: 74: }
   529                           ;RTDuC.c: 75: PIE1bits.SSP1IE = 1;
   530  0009E4  869D               	bsf	3997,3,c	;volatile
   531  0009E6  D000               	goto	l3042
   532  0009E8                     l3042:
   533                           
   534                           ;RTDuC.c: 76: }
   535                           ;RTDuC.c: 78: DetectJoystick();
   536  0009E8  EC64  F00C         	call	_DetectJoystick	;wreg free
   537                           
   538                           ;RTDuC.c: 79: if(JSEnableFlag == 1)
   539  0009EC  0100               	movlb	0	; () banked
   540  0009EE  05C3               	decf	_JSEnableFlag& (0+255),w,b
   541  0009F0  A4D8               	btfss	status,2,c
   542  0009F2  D009               	goto	l334
   543                           
   544                           ; BSR set to: 0
   545                           ;RTDuC.c: 80: {
   546                           ;RTDuC.c: 81: ImplementJSMotion(DetectMovement());
   547  0009F4  EC41  F009         	call	_DetectMovement	;wreg free
   548  0009F8  C08D  F093         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
   549  0009FC  C08E  F094         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
   550  000A00  EC6C  F007         	call	_ImplementJSMotion	;wreg free
   551                           
   552                           ;RTDuC.c: 82: }
   553  000A04  D703               	goto	l2950
   554  000A06                     l334:
   555                           
   556                           ; BSR set to: 0
   557                           ;RTDuC.c: 84: else if((PIDEnableFlag & 0x02) == 0x02)
   558  000A06  0100               	movlb	0	; () banked
   559  000A08  A3C4               	btfss	_PIDEnableFlag& (0+255),1,b
   560  000A0A  D700               	goto	l2950
   561                           
   562                           ; BSR set to: 0
   563                           ;RTDuC.c: 85: {
   564                           ;RTDuC.c: 86: INTCONbits.TMR0IE = 1;
   565  000A0C  8AF2               	bsf	intcon,5,c	;volatile
   566                           
   567                           ; BSR set to: 0
   568                           ;RTDuC.c: 87: JSEnableFlag = 0;
   569  000A0E  0E00               	movlw	0
   570  000A10  0100               	movlb	0	; () banked
   571  000A12  6FC3               	movwf	_JSEnableFlag& (0+255),b
   572                           
   573                           ; BSR set to: 0
   574                           
   575                           ; BSR set to: 0
   576                           
   577                           ; BSR set to: 0
   578  000A14  D6FB               	goto	l2950
   579                           
   580                           ; BSR set to: 0
   581                           
   582                           ; BSR set to: 0
   583  000A16  EF56  F000         	goto	start
   584  000A1A                     __end_of_main:
   585                           	opt stack 0
   586                           prodh	equ	0xFF4
   587                           prodl	equ	0xFF3
   588                           intcon	equ	0xFF2
   589                           indf2	equ	0xFDF
   590                           fsr2h	equ	0xFDA
   591                           fsr2l	equ	0xFD9
   592                           status	equ	0xFD8
   593                           
   594                           	psect	cinit
   595  001964                     __pcinit:
   596                           	opt stack 0
   597  001964                     start_initialization:
   598                           	opt stack 0
   599  001964                     __initialization:
   600                           	opt stack 0
   601                           
   602                           ; Clear objects allocated to BANK0 (43 bytes)
   603  001964  EE00  F09C         	lfsr	0,__pbssBANK0
   604  001968  0E2B               	movlw	43
   605  00196A                     clear_0:
   606  00196A  6AEE               	clrf	postinc0,c
   607  00196C  06E8               	decf	wreg,f,c
   608  00196E  E1FD               	bnz	clear_0
   609                           
   610                           ; Clear objects allocated to COMRAM (4 bytes)
   611  001970  6A4D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   612  001972  6A4C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   613  001974  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   614  001976  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   615  001978                     end_of_initialization:
   616                           	opt stack 0
   617  001978                     __end_of__initialization:
   618                           	opt stack 0
   619  001978  0100               	movlb	0
   620  00197A  EF00  F004         	goto	_main	;jump to C main() function
   621                           prodh	equ	0xFF4
   622                           prodl	equ	0xFF3
   623                           intcon	equ	0xFF2
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           indf2	equ	0xFDF
   627                           fsr2h	equ	0xFDA
   628                           fsr2l	equ	0xFD9
   629                           status	equ	0xFD8
   630                           
   631                           	psect	bssCOMRAM
   632  00004A                     __pbssCOMRAM:
   633                           	opt stack 0
   634  00004A                     _DDouble:
   635                           	opt stack 0
   636  00004A                     	ds	3
   637  00004D                     _MotorFailFlag:
   638                           	opt stack 0
   639  00004D                     	ds	1
   640                           prodh	equ	0xFF4
   641                           prodl	equ	0xFF3
   642                           intcon	equ	0xFF2
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           indf2	equ	0xFDF
   646                           fsr2h	equ	0xFDA
   647                           fsr2l	equ	0xFD9
   648                           status	equ	0xFD8
   649                           
   650                           	psect	bssBANK0
   651  00009C                     __pbssBANK0:
   652                           	opt stack 0
   653  00009C                     _DoubleSPIS:
   654                           	opt stack 0
   655  00009C                     	ds	4
   656  0000A0                     _CurrentAngle:
   657                           	opt stack 0
   658  0000A0                     	ds	3
   659  0000A3                     _CurrentVelocity:
   660                           	opt stack 0
   661  0000A3                     	ds	3
   662  0000A6                     _Kd:
   663                           	opt stack 0
   664  0000A6                     	ds	3
   665  0000A9                     _Ki:
   666                           	opt stack 0
   667  0000A9                     	ds	3
   668  0000AC                     _Kp:
   669                           	opt stack 0
   670  0000AC                     	ds	3
   671  0000AF                     _SetAngle:
   672                           	opt stack 0
   673  0000AF                     	ds	3
   674  0000B2                     _StartAngle:
   675                           	opt stack 0
   676  0000B2                     	ds	3
   677  0000B5                     _err:
   678                           	opt stack 0
   679  0000B5                     	ds	3
   680  0000B8                     _intErr:
   681                           	opt stack 0
   682  0000B8                     	ds	3
   683  0000BB                     _prevErr:
   684                           	opt stack 0
   685  0000BB                     	ds	3
   686  0000BE                     _DoublePtr:
   687                           	opt stack 0
   688  0000BE                     	ds	2
   689  0000C0                     _motorInput:
   690                           	opt stack 0
   691  0000C0                     	ds	2
   692  0000C2                     _Command:
   693                           	opt stack 0
   694  0000C2                     	ds	1
   695  0000C3                     _JSEnableFlag:
   696                           	opt stack 0
   697  0000C3                     	ds	1
   698  0000C4                     _PIDEnableFlag:
   699                           	opt stack 0
   700  0000C4                     	ds	1
   701  0000C5                     _SPIflag:
   702                           	opt stack 0
   703  0000C5                     	ds	1
   704  0000C6                     _dummy_byte:
   705                           	opt stack 0
   706  0000C6                     	ds	1
   707                           prodh	equ	0xFF4
   708                           prodl	equ	0xFF3
   709                           intcon	equ	0xFF2
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           indf2	equ	0xFDF
   713                           fsr2h	equ	0xFDA
   714                           fsr2l	equ	0xFD9
   715                           status	equ	0xFD8
   716                           
   717                           	psect	cstackBANK0
   718  000060                     __pcstackBANK0:
   719                           	opt stack 0
   720  000060                     ??___ftge:
   721  000060                     ??___fttol:
   722                           
   723                           ; 0 bytes @ 0x0
   724  000060                     	ds	5
   725  000065                     ___fttol@sign1:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x5
   729  000065                     	ds	1
   730  000066                     ___fttol@lval:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x6
   734  000066                     	ds	4
   735  00006A                     ___fttol@exp1:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0xA
   739  00006A                     	ds	1
   740  00006B                     calculatePID@angle:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0xB
   744  00006B                     	ds	3
   745  00006E                     calculatePID@setpoint:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0xE
   749  00006E                     	ds	3
   750  000071                     calculatePID@derErr:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x11
   754  000071                     	ds	3
   755  000074                     _calculatePID$3535:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x14
   759  000074                     	ds	3
   760  000077                     _calculatePID$3536:
   761                           	opt stack 0
   762                           
   763                           ; 3 bytes @ 0x17
   764  000077                     	ds	3
   765  00007A                     _calculatePID$3534:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x1A
   769  00007A                     	ds	3
   770  00007D                     ??_hISR:
   771                           
   772                           ; 0 bytes @ 0x1D
   773  00007D                     	ds	16
   774  00008D                     ?_abs:
   775                           	opt stack 0
   776  00008D                     ?_DetectMovement:
   777                           	opt stack 0
   778  00008D                     ?_SPIReassembleDouble:
   779                           	opt stack 0
   780  00008D                     ?_EEReassembleDouble:
   781                           	opt stack 0
   782  00008D                     SendSPI1@temp:
   783                           	opt stack 0
   784  00008D                     GenerateChecksum@sum:
   785                           	opt stack 0
   786  00008D                     OpenSPI1@bus_mode:
   787                           	opt stack 0
   788  00008D                     Delay10TCYx@unit:
   789                           	opt stack 0
   790  00008D                     Delay1KTCYx@unit:
   791                           	opt stack 0
   792  00008D                     Delay1TCYx@unit:
   793                           	opt stack 0
   794  00008D                     Read_b_eep@badd:
   795                           	opt stack 0
   796  00008D                     abs@a:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x2D
   800  00008D                     	ds	1
   801  00008E                     SendSPI1@data:
   802                           	opt stack 0
   803  00008E                     GenerateChecksum@y:
   804                           	opt stack 0
   805  00008E                     OpenSPI1@smp_phase:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x2E
   809  00008E                     	ds	1
   810  00008F                     ??_abs:
   811  00008F                     EEReadChar@location:
   812                           	opt stack 0
   813  00008F                     OpenSPI1@sync_mode:
   814                           	opt stack 0
   815  00008F                     DetectMovement@JoystickResult:
   816                           	opt stack 0
   817  00008F                     SPIDisassembleDouble@dub:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x2F
   821  00008F                     	ds	1
   822  000090                     EEReadChar@ch:
   823                           	opt stack 0
   824  000090                     SPIReassembleDouble@dub:
   825                           	opt stack 0
   826  000090                     EEReassembleDouble@dub:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x30
   830  000090                     	ds	1
   831  000091                     DetectMovement@ADCresult:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x31
   835  000091                     	ds	1
   836  000092                     
   837                           ; 0 bytes @ 0x32
   838  000092                     	ds	1
   839  000093                     ?_EEReadDouble:
   840                           	opt stack 0
   841  000093                     ImplementJSMotion@JoystickValue:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x33
   845  000093                     	ds	2
   846  000095                     ??_ImplementJSMotion:
   847                           
   848                           ; 0 bytes @ 0x35
   849  000095                     	ds	1
   850  000096                     EEReadDouble@location:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x36
   854  000096                     	ds	1
   855  000097                     EEReadDouble@x:
   856                           	opt stack 0
   857  000097                     ImplementJSMotion@CCPinput:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x37
   861  000097                     	ds	1
   862  000098                     ??_EEBootUp:
   863                           
   864                           ; 0 bytes @ 0x38
   865  000098                     	ds	2
   866  00009A                     main@temporary:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x3A
   870  00009A                     	ds	1
   871  00009B                     main@x:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x3B
   875  00009B                     	ds	1
   876                           prodh	equ	0xFF4
   877                           prodl	equ	0xFF3
   878                           intcon	equ	0xFF2
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           indf2	equ	0xFDF
   882                           fsr2h	equ	0xFDA
   883                           fsr2l	equ	0xFD9
   884                           status	equ	0xFD8
   885                           
   886                           	psect	cstackCOMRAM
   887  000001                     __pcstackCOMRAM:
   888                           	opt stack 0
   889  000001                     ??_lISR:
   890  000001                     
   891                           ; 1 bytes @ 0x0
   892  000001                     	ds	17
   893  000012                     ?i2_abs:
   894                           	opt stack 0
   895  000012                     ?___ftpack:
   896                           	opt stack 0
   897  000012                     ?___ftneg:
   898                           	opt stack 0
   899  000012                     Write_b_eep@badd:
   900                           	opt stack 0
   901  000012                     i2abs@a:
   902                           	opt stack 0
   903  000012                     EEDisassembleDouble@dub:
   904                           	opt stack 0
   905  000012                     ___ftpack@arg:
   906                           	opt stack 0
   907  000012                     ___ftneg@f1:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x11
   911  000012                     	ds	2
   912  000014                     ??i2_abs:
   913  000014                     Write_b_eep@bdat:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x13
   917  000014                     	ds	1
   918  000015                     Write_b_eep@GIE_BIT_VAL:
   919                           	opt stack 0
   920  000015                     ___ftpack@exp:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x14
   924  000015                     	ds	1
   925  000016                     EEWriteChar@ch:
   926                           	opt stack 0
   927  000016                     ___ftpack@sign:
   928                           	opt stack 0
   929  000016                     ImplementPIDMotion@PIDValue:
   930                           	opt stack 0
   931  000016                     EEWriteDouble@dub:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x15
   935  000016                     	ds	1
   936  000017                     ??___ftpack:
   937  000017                     EEWriteChar@location:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x16
   941  000017                     	ds	1
   942  000018                     ??_ImplementPIDMotion:
   943                           
   944                           ; 0 bytes @ 0x17
   945  000018                     	ds	1
   946  000019                     EEWriteDouble@location:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x18
   950  000019                     	ds	1
   951  00001A                     ?___ftdiv:
   952                           	opt stack 0
   953  00001A                     ?___lwtoft:
   954                           	opt stack 0
   955  00001A                     EEWriteDouble@x:
   956                           	opt stack 0
   957  00001A                     ___lwtoft@c:
   958                           	opt stack 0
   959  00001A                     ___ftdiv@f1:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x19
   963  00001A                     	ds	1
   964  00001B                     
   965                           ; 0 bytes @ 0x1A
   966  00001B                     	ds	2
   967  00001D                     ___ftdiv@f2:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x1C
   971  00001D                     	ds	3
   972  000020                     ??___ftdiv:
   973                           
   974                           ; 0 bytes @ 0x1F
   975  000020                     	ds	3
   976  000023                     ___ftdiv@cntr:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x22
   980  000023                     	ds	1
   981  000024                     ___ftdiv@f3:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x23
   985  000024                     	ds	3
   986  000027                     ___ftdiv@exp:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x26
   990  000027                     	ds	1
   991  000028                     ___ftdiv@sign:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x27
   995  000028                     	ds	1
   996  000029                     ?___ftmul:
   997                           	opt stack 0
   998  000029                     ___ftmul@f1:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x28
  1002  000029                     	ds	3
  1003  00002C                     ___ftmul@f2:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x2B
  1007  00002C                     	ds	3
  1008  00002F                     ??___ftmul:
  1009                           
  1010                           ; 0 bytes @ 0x2E
  1011  00002F                     	ds	3
  1012  000032                     ___ftmul@exp:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x31
  1016  000032                     	ds	1
  1017  000033                     ___ftmul@f3_as_product:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x32
  1021  000033                     	ds	3
  1022  000036                     ___ftmul@cntr:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x35
  1026  000036                     	ds	1
  1027  000037                     ___ftmul@sign:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x36
  1031  000037                     	ds	1
  1032  000038                     ?_RTD2Angle:
  1033                           	opt stack 0
  1034  000038                     ?___ftadd:
  1035                           	opt stack 0
  1036  000038                     RTD2Angle@RTDAngle:
  1037                           	opt stack 0
  1038  000038                     ___ftadd@f1:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x37
  1042  000038                     	ds	3
  1043  00003B                     ___ftadd@f2:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x3A
  1047  00003B                     	ds	3
  1048  00003E                     ??___ftadd:
  1049                           
  1050                           ; 0 bytes @ 0x3D
  1051  00003E                     	ds	3
  1052  000041                     ___ftadd@sign:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x40
  1056  000041                     	ds	1
  1057  000042                     ___ftadd@exp2:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x41
  1061  000042                     	ds	1
  1062  000043                     ___ftadd@exp1:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x42
  1066  000043                     	ds	1
  1067  000044                     ?___fttol:
  1068                           	opt stack 0
  1069  000044                     ___ftge@ff1:
  1070                           	opt stack 0
  1071  000044                     ___fttol@f1:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0x43
  1075  000044                     	ds	3
  1076  000047                     ___ftge@ff2:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x46
  1080  000047                     	ds	3
  1081  00004A                     prodh	equ	0xFF4
  1082                           prodl	equ	0xFF3
  1083                           intcon	equ	0xFF2
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           indf2	equ	0xFDF
  1087                           fsr2h	equ	0xFDA
  1088                           fsr2l	equ	0xFD9
  1089                           status	equ	0xFD8
  1090                           
  1091 ;; *************** function _initialize *****************
  1092 ;; Defined at:
  1093 ;;		line 93 in file "RTDuC.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;		None               void
  1100 ;; Registers used:
  1101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;Total ram usage:        0 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:   11
  1114 ;; This function calls:
  1115 ;;		_EEPROMInit
  1116 ;;		_JoystickInit
  1117 ;;		_MotorDriverInit
  1118 ;;		_PIDInit
  1119 ;;		_RTDInit
  1120 ;;		_SPIInit
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text1
  1127  001804                     __ptext1:
  1128                           	opt stack 0
  1129  001804                     _initialize:
  1130                           	opt stack 19
  1131                           
  1132                           ;RTDuC.c: 95: while (OSCCONbits.OSTS == 0);
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;incstack = 0
  1136  001804  D000               	goto	l342
  1137  001806                     l342:
  1138  001806  A6D3               	btfss	4051,3,c	;volatile
  1139  001808  D7FE               	goto	l342
  1140                           
  1141                           ;RTDuC.c: 97: RTDInit();
  1142  00180A  ECBD  F00B         	call	_RTDInit	;wreg free
  1143                           
  1144                           ;RTDuC.c: 98: JoystickInit();
  1145  00180E  ECD5  F00B         	call	_JoystickInit	;wreg free
  1146                           
  1147                           ;RTDuC.c: 99: MotorDriverInit();
  1148  001812  EC86  F00C         	call	_MotorDriverInit	;wreg free
  1149                           
  1150                           ;RTDuC.c: 100: PIDInit();
  1151  001816  EC1F  F00B         	call	_PIDInit	;wreg free
  1152                           
  1153                           ;RTDuC.c: 101: SPIInit();
  1154  00181A  EC96  F00C         	call	_SPIInit	;wreg free
  1155                           
  1156                           ;RTDuC.c: 102: EEPROMInit();
  1157  00181E  ECE2  F00C         	call	_EEPROMInit	;wreg free
  1158                           
  1159                           ;RTDuC.c: 104: INTCONbits.GIE = 1;
  1160  001822  8EF2               	bsf	intcon,7,c	;volatile
  1161                           
  1162                           ;RTDuC.c: 105: INTCONbits.PEIE = 1;
  1163  001824  8CF2               	bsf	intcon,6,c	;volatile
  1164                           
  1165                           ;RTDuC.c: 106: RCONbits.IPEN = 1;
  1166  001826  8ED0               	bsf	4048,7,c	;volatile
  1167                           
  1168                           ;RTDuC.c: 108: PIE2bits.OSCFIE = 1;
  1169  001828  8EA0               	bsf	4000,7,c	;volatile
  1170                           
  1171                           ;RTDuC.c: 109: IPR2bits.OSCFIP = 1;
  1172  00182A  8EA2               	bsf	4002,7,c	;volatile
  1173  00182C  0012               	return		;funcret
  1174  00182E                     __end_of_initialize:
  1175                           	opt stack 0
  1176                           prodh	equ	0xFF4
  1177                           prodl	equ	0xFF3
  1178                           intcon	equ	0xFF2
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           indf2	equ	0xFDF
  1182                           fsr2h	equ	0xFDA
  1183                           fsr2l	equ	0xFD9
  1184                           status	equ	0xFD8
  1185                           
  1186 ;; *************** function _SPIInit *****************
  1187 ;; Defined at:
  1188 ;;		line 16 in file "SPISlave.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;		None               void
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;Total ram usage:        0 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    8
  1209 ;; This function calls:
  1210 ;;		_OpenSPI1
  1211 ;; This function is called by:
  1212 ;;		_initialize
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text2
  1217  00192C                     __ptext2:
  1218                           	opt stack 0
  1219  00192C                     _SPIInit:
  1220                           	opt stack 21
  1221                           
  1222                           ;SPISlave.c: 18: TRISCbits.RC6 = 0;
  1223                           
  1224                           ;incstack = 0
  1225  00192C  9C94               	bcf	3988,6,c	;volatile
  1226                           
  1227                           ;SPISlave.c: 19: TRISDbits.RD7 = 1;
  1228  00192E  8E95               	bsf	3989,7,c	;volatile
  1229                           
  1230                           ;SPISlave.c: 20: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  1231  001930  0E00               	movlw	0
  1232  001932  0100               	movlb	0	; () banked
  1233  001934  6F8D               	movwf	OpenSPI1@bus_mode& (0+255),b
  1234  001936  0E00               	movlw	0
  1235  001938  0100               	movlb	0	; () banked
  1236  00193A  6F8E               	movwf	OpenSPI1@smp_phase& (0+255),b
  1237  00193C  0E04               	movlw	4
  1238  00193E  ECFF  F009         	call	_OpenSPI1
  1239                           
  1240                           ;SPISlave.c: 21: PIE1bits.SSP1IE = 1;
  1241  001942  869D               	bsf	3997,3,c	;volatile
  1242                           
  1243                           ;SPISlave.c: 22: IPR1bits.SSP1IP = 0;
  1244  001944  969F               	bcf	3999,3,c	;volatile
  1245  001946  0012               	return		;funcret
  1246  001948                     __end_of_SPIInit:
  1247                           	opt stack 0
  1248                           prodh	equ	0xFF4
  1249                           prodl	equ	0xFF3
  1250                           intcon	equ	0xFF2
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           indf2	equ	0xFDF
  1254                           fsr2h	equ	0xFDA
  1255                           fsr2l	equ	0xFD9
  1256                           status	equ	0xFD8
  1257                           
  1258 ;; *************** function _OpenSPI1 *****************
  1259 ;; Defined at:
  1260 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  sync_mode       1    wreg     unsigned char 
  1263 ;;  bus_mode        1   45[BANK0 ] unsigned char 
  1264 ;;  smp_phase       1   46[BANK0 ] unsigned char 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  sync_mode       1   47[BANK0 ] unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1276 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;Total ram usage:        3 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    7
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_SPIInit
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text3
  1291  0013FE                     __ptext3:
  1292                           	opt stack 0
  1293  0013FE                     _OpenSPI1:
  1294                           	opt stack 21
  1295                           
  1296                           ;incstack = 0
  1297                           ;OpenSPI1@sync_mode stored from wreg
  1298  0013FE  0100               	movlb	0	; () banked
  1299  001400  6F8F               	movwf	OpenSPI1@sync_mode& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302  001402  0E3F               	movlw	63
  1303  001404  16C7               	andwf	4039,f,c	;volatile
  1304                           
  1305                           ; BSR set to: 0
  1306  001406  0E00               	movlw	0
  1307  001408  6EC6               	movwf	4038,c	;volatile
  1308                           
  1309                           ; BSR set to: 0
  1310  00140A  0100               	movlb	0	; () banked
  1311  00140C  518F               	movf	OpenSPI1@sync_mode& (0+255),w,b
  1312  00140E  12C6               	iorwf	4038,f,c	;volatile
  1313                           
  1314                           ; BSR set to: 0
  1315  001410  0100               	movlb	0	; () banked
  1316  001412  518E               	movf	OpenSPI1@smp_phase& (0+255),w,b
  1317  001414  12C7               	iorwf	4039,f,c	;volatile
  1318  001416  D005               	goto	l2278
  1319  001418                     l579:
  1320                           
  1321                           ; BSR set to: 0
  1322  001418  8CC7               	bsf	4039,6,c	;volatile
  1323  00141A  D014               	goto	l2282
  1324  00141C                     l581:
  1325                           
  1326                           ; BSR set to: 0
  1327  00141C  8CC7               	bsf	4039,6,c	;volatile
  1328  00141E                     l582:
  1329                           
  1330                           ; BSR set to: 0
  1331  00141E  88C6               	bsf	4038,4,c	;volatile
  1332                           
  1333                           ; BSR set to: 0
  1334                           
  1335                           ; BSR set to: 0
  1336  001420  D011               	goto	l2282
  1337  001422                     l2278:
  1338                           
  1339                           ; BSR set to: 0
  1340  001422  0100               	movlb	0	; () banked
  1341  001424  518D               	movf	OpenSPI1@bus_mode& (0+255),w,b
  1342                           
  1343                           ; Switch size 1, requested type "space"
  1344                           ; Number of cases is 3, Range of values is 0 to 3
  1345                           ; switch strategies available:
  1346                           ; Name         Instructions Cycles
  1347                           ; simple_byte           10     6 (average)
  1348                           ;	Chosen strategy is simple_byte
  1349  001426  0A00               	xorlw	0	; case 0
  1350  001428  B4D8               	btfsc	status,2,c
  1351  00142A  D7F6               	goto	l579
  1352  00142C  0A02               	xorlw	2	; case 2
  1353  00142E  B4D8               	btfsc	status,2,c
  1354  001430  D7F5               	goto	l581
  1355  001432  0A01               	xorlw	1	; case 3
  1356  001434  B4D8               	btfsc	status,2,c
  1357  001436  D7F3               	goto	l582
  1358                           
  1359                           ; BSR set to: 0
  1360  001438  D005               	goto	l2282
  1361  00143A                     l585:
  1362                           
  1363                           ; BSR set to: 0
  1364  00143A  8E97               	bsf	3991,7,c	;volatile
  1365  00143C                     l587:
  1366                           
  1367                           ; BSR set to: 0
  1368  00143C  8694               	bsf	3988,3,c	;volatile
  1369  00143E  D00B               	goto	l586
  1370  001440                     l588:
  1371                           
  1372                           ; BSR set to: 0
  1373  001440  9694               	bcf	3988,3,c	;volatile
  1374                           
  1375                           ; BSR set to: 0
  1376  001442  D009               	goto	l586
  1377  001444                     l2282:
  1378                           
  1379                           ; BSR set to: 0
  1380  001444  0100               	movlb	0	; () banked
  1381  001446  518F               	movf	OpenSPI1@sync_mode& (0+255),w,b
  1382                           
  1383                           ; Switch size 1, requested type "space"
  1384                           ; Number of cases is 2, Range of values is 4 to 5
  1385                           ; switch strategies available:
  1386                           ; Name         Instructions Cycles
  1387                           ; simple_byte            7     4 (average)
  1388                           ;	Chosen strategy is simple_byte
  1389  001448  0A04               	xorlw	4	; case 4
  1390  00144A  B4D8               	btfsc	status,2,c
  1391  00144C  D7F6               	goto	l585
  1392  00144E  0A01               	xorlw	1	; case 5
  1393  001450  B4D8               	btfsc	status,2,c
  1394  001452  D7F4               	goto	l587
  1395  001454  D7F5               	goto	l588
  1396  001456                     l586:
  1397                           
  1398                           ; BSR set to: 0
  1399  001456  8894               	bsf	3988,4,c	;volatile
  1400  001458  9A94               	bcf	3988,5,c	;volatile
  1401                           
  1402                           ; BSR set to: 0
  1403  00145A  8AC6               	bsf	4038,5,c	;volatile
  1404                           
  1405                           ; BSR set to: 0
  1406  00145C  0012               	return		;funcret
  1407  00145E                     __end_of_OpenSPI1:
  1408                           	opt stack 0
  1409                           prodh	equ	0xFF4
  1410                           prodl	equ	0xFF3
  1411                           intcon	equ	0xFF2
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           indf2	equ	0xFDF
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _RTDInit *****************
  1420 ;; Defined at:
  1421 ;;		line 3 in file "ResolverToDigital.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;		None               void
  1428 ;; Registers used:
  1429 ;;		wreg, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    8
  1442 ;; This function calls:
  1443 ;;		_Delay10TCYx
  1444 ;;		_Delay1KTCYx
  1445 ;;		_Delay1TCYx
  1446 ;; This function is called by:
  1447 ;;		_initialize
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text4
  1452  00177A                     __ptext4:
  1453                           	opt stack 0
  1454  00177A                     _RTDInit:
  1455                           	opt stack 21
  1456                           
  1457                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;incstack = 0
  1461  00177A  6895               	setf	3989,c	;volatile
  1462                           
  1463                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1464  00177C  6899               	setf	3993,c	;volatile
  1465                           
  1466                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1467  00177E  9096               	bcf	3990,0,c	;volatile
  1468                           
  1469                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1470  001780  9296               	bcf	3990,1,c	;volatile
  1471                           
  1472                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1473  001782  9496               	bcf	3990,2,c	;volatile
  1474                           
  1475                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1476  001784  909A               	bcf	3994,0,c	;volatile
  1477                           
  1478                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1479  001786  8A96               	bsf	3990,5,c	;volatile
  1480                           
  1481                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1482  001788  8C96               	bsf	3990,6,c	;volatile
  1483                           
  1484                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1485  00178A  8E96               	bsf	3990,7,c	;volatile
  1486                           
  1487                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  1488  00178C  9088               	bcf	3976,0,c	;volatile
  1489                           
  1490                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  1491  00178E  0E0A               	movlw	10
  1492  001790  ECD7  F00C         	call	_Delay10TCYx
  1493                           
  1494                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  1495  001794  8088               	bsf	3976,0,c	;volatile
  1496                           
  1497                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  1498  001796  0E14               	movlw	20
  1499  001798  ECCC  F00C         	call	_Delay1KTCYx
  1500                           
  1501                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  1502  00179C  9084               	bcf	3972,0,c	;volatile
  1503                           
  1504                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  1505  00179E  0E01               	movlw	1
  1506  0017A0  ECF6  F00C         	call	_Delay1TCYx
  1507                           
  1508                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  1509  0017A4  8084               	bsf	3972,0,c	;volatile
  1510                           
  1511                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  1512  0017A6  9484               	bcf	3972,2,c	;volatile
  1513  0017A8  0012               	return		;funcret
  1514  0017AA                     __end_of_RTDInit:
  1515                           	opt stack 0
  1516                           prodh	equ	0xFF4
  1517                           prodl	equ	0xFF3
  1518                           intcon	equ	0xFF2
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           indf2	equ	0xFDF
  1522                           fsr2h	equ	0xFDA
  1523                           fsr2l	equ	0xFD9
  1524                           status	equ	0xFD8
  1525                           
  1526 ;; *************** function _Delay1TCYx *****************
  1527 ;; Defined at:
  1528 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  unit            1    wreg     unsigned char 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  unit            1   45[BANK0 ] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;		None               void
  1535 ;; Registers used:
  1536 ;;		wreg
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    7
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_RTDInit
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text5
  1557  0019EC                     __ptext5:
  1558                           	opt stack 0
  1559  0019EC                     _Delay1TCYx:
  1560                           	opt stack 21
  1561                           
  1562                           ;incstack = 0
  1563                           ;Delay1TCYx@unit stored from wreg
  1564  0019EC  0100               	movlb	0	; () banked
  1565  0019EE  6F8D               	movwf	Delay1TCYx@unit& (0+255),b
  1566  0019F0                     l833:
  1567                           
  1568                           ; BSR set to: 0
  1569  0019F0  F000               	nop	
  1570  0019F2  0100               	movlb	0	; () banked
  1571  0019F4  2F8D               	decfsz	Delay1TCYx@unit& (0+255),f,b
  1572  0019F6  D7FC               	goto	l833
  1573  0019F8  D000               	goto	l835
  1574  0019FA                     l835:
  1575                           
  1576                           ; BSR set to: 0
  1577  0019FA  0012               	return		;funcret
  1578  0019FC                     __end_of_Delay1TCYx:
  1579                           	opt stack 0
  1580                           prodh	equ	0xFF4
  1581                           prodl	equ	0xFF3
  1582                           intcon	equ	0xFF2
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           indf2	equ	0xFDF
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _Delay1KTCYx *****************
  1591 ;; Defined at:
  1592 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  unit            1    wreg     unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  unit            1   45[BANK0 ] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;		None               void
  1599 ;; Registers used:
  1600 ;;		wreg
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;Total ram usage:        1 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    7
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_RTDInit
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text6
  1621  001998                     __ptext6:
  1622                           	opt stack 0
  1623  001998                     _Delay1KTCYx:
  1624                           	opt stack 21
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;incstack = 0
  1628                           ;Delay1KTCYx@unit stored from wreg
  1629  001998  0100               	movlb	0	; () banked
  1630  00199A  6F8D               	movwf	Delay1KTCYx@unit& (0+255),b
  1631  00199C                     
  1632                           ; BSR set to: 0
  1633  00199C  0EFA               	movlw	250
  1634  00199E                     u3027:
  1635  00199E  F000               	nop	
  1636  0019A0  2EE8               	decfsz	wreg,f,c
  1637  0019A2  D7FD               	goto	u3027
  1638  0019A4  0100               	movlb	0	; () banked
  1639  0019A6  2F8D               	decfsz	Delay1KTCYx@unit& (0+255),f,b
  1640  0019A8  D7F9               	goto	l2262
  1641  0019AA  D000               	goto	l828
  1642  0019AC                     l828:
  1643                           
  1644                           ; BSR set to: 0
  1645  0019AC  0012               	return		;funcret
  1646  0019AE                     __end_of_Delay1KTCYx:
  1647                           	opt stack 0
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           intcon	equ	0xFF2
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           indf2	equ	0xFDF
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function _Delay10TCYx *****************
  1659 ;; Defined at:
  1660 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  unit            1    wreg     unsigned char 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  unit            1   45[BANK0 ] unsigned char 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;		None               void
  1667 ;; Registers used:
  1668 ;;		wreg
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;Total ram usage:        1 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    7
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_RTDInit
  1685 ;;		_ReadRTDpos
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text7
  1690  0019AE                     __ptext7:
  1691                           	opt stack 0
  1692  0019AE                     _Delay10TCYx:
  1693                           	opt stack 21
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;incstack = 0
  1697                           ;Delay10TCYx@unit stored from wreg
  1698  0019AE  0100               	movlb	0	; () banked
  1699  0019B0  6F8D               	movwf	Delay10TCYx@unit& (0+255),b
  1700  0019B2                     
  1701                           ; BSR set to: 0
  1702  0019B2  0E03               	movlw	3
  1703  0019B4                     u3037:
  1704  0019B4  2EE8               	decfsz	wreg,f,c
  1705  0019B6  D7FE               	goto	u3037
  1706  0019B8  F000               	nop	
  1707  0019BA  0100               	movlb	0	; () banked
  1708  0019BC  2F8D               	decfsz	Delay10TCYx@unit& (0+255),f,b
  1709  0019BE  D7F9               	goto	l2258
  1710  0019C0  D000               	goto	l821
  1711  0019C2                     l821:
  1712                           
  1713                           ; BSR set to: 0
  1714  0019C2  0012               	return		;funcret
  1715  0019C4                     __end_of_Delay10TCYx:
  1716                           	opt stack 0
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           indf2	equ	0xFDF
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _PIDInit *****************
  1728 ;; Defined at:
  1729 ;;		line 15 in file "PID.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;		None               void
  1736 ;; Registers used:
  1737 ;;		wreg, status,2
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    7
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_initialize
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text8
  1758  00163E                     __ptext8:
  1759                           	opt stack 0
  1760  00163E                     _PIDInit:
  1761                           	opt stack 22
  1762                           
  1763                           ;PID.c: 18: err = 0;
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;incstack = 0
  1767  00163E  0E00               	movlw	0
  1768  001640  0100               	movlb	0	; () banked
  1769  001642  6FB5               	movwf	_err& (0+255),b
  1770  001644  0E00               	movlw	0
  1771  001646  0100               	movlb	0	; () banked
  1772  001648  6FB6               	movwf	(_err+1)& (0+255),b
  1773  00164A  0E00               	movlw	0
  1774  00164C  0100               	movlb	0	; () banked
  1775  00164E  6FB7               	movwf	(_err+2)& (0+255),b
  1776                           
  1777                           ;PID.c: 19: prevErr = 0;
  1778  001650  0E00               	movlw	0
  1779  001652  0100               	movlb	0	; () banked
  1780  001654  6FBB               	movwf	_prevErr& (0+255),b
  1781  001656  0E00               	movlw	0
  1782  001658  0100               	movlb	0	; () banked
  1783  00165A  6FBC               	movwf	(_prevErr+1)& (0+255),b
  1784  00165C  0E00               	movlw	0
  1785  00165E  0100               	movlb	0	; () banked
  1786  001660  6FBD               	movwf	(_prevErr+2)& (0+255),b
  1787                           
  1788                           ;PID.c: 20: intErr = 0;
  1789  001662  0E00               	movlw	0
  1790  001664  0100               	movlb	0	; () banked
  1791  001666  6FB8               	movwf	_intErr& (0+255),b
  1792  001668  0E00               	movlw	0
  1793  00166A  0100               	movlb	0	; () banked
  1794  00166C  6FB9               	movwf	(_intErr+1)& (0+255),b
  1795  00166E  0E00               	movlw	0
  1796  001670  0100               	movlb	0	; () banked
  1797  001672  6FBA               	movwf	(_intErr+2)& (0+255),b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;PID.c: 23: INTCON2bits.TMR0IP = 1;
  1801  001674  84F1               	bsf	intcon2,2,c	;volatile
  1802                           
  1803                           ;PID.c: 24: T0CON = 0x84;
  1804  001676  0E84               	movlw	132
  1805  001678  6ED5               	movwf	4053,c	;volatile
  1806                           
  1807                           ;PID.c: 25: TMR0H = 0xDB;
  1808  00167A  0EDB               	movlw	219
  1809  00167C  6ED7               	movwf	4055,c	;volatile
  1810                           
  1811                           ;PID.c: 26: TMR0L = 0x60;
  1812  00167E  0E60               	movlw	96
  1813  001680  6ED6               	movwf	4054,c	;volatile
  1814                           
  1815                           ; BSR set to: 0
  1816  001682  0012               	return		;funcret
  1817  001684                     __end_of_PIDInit:
  1818                           	opt stack 0
  1819                           prodh	equ	0xFF4
  1820                           prodl	equ	0xFF3
  1821                           intcon	equ	0xFF2
  1822                           intcon2	equ	0xFF1
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           indf2	equ	0xFDF
  1826                           fsr2h	equ	0xFDA
  1827                           fsr2l	equ	0xFD9
  1828                           status	equ	0xFD8
  1829                           
  1830 ;; *************** function _MotorDriverInit *****************
  1831 ;; Defined at:
  1832 ;;		line 6 in file "MotorControl.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;		None
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;		None
  1837 ;; Return value:  Size  Location     Type
  1838 ;;		None               void
  1839 ;; Registers used:
  1840 ;;		wreg, status,2
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;Total ram usage:        0 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; Hardware stack levels required when called:    7
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_initialize
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text9
  1861  00190C                     __ptext9:
  1862                           	opt stack 0
  1863  00190C                     _MotorDriverInit:
  1864                           	opt stack 22
  1865                           
  1866                           ;MotorControl.c: 8: TRISGbits.RG0 = 0;
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;incstack = 0
  1870  00190C  9098               	bcf	3992,0,c	;volatile
  1871                           
  1872                           ;MotorControl.c: 9: TRISGbits.RG3 = 0;
  1873  00190E  9698               	bcf	3992,3,c	;volatile
  1874                           
  1875                           ;MotorControl.c: 10: TRISEbits.RE3 = 0;
  1876  001910  9696               	bcf	3990,3,c	;volatile
  1877                           
  1878                           ;MotorControl.c: 11: TRISEbits.RE4 = 0;
  1879  001912  9896               	bcf	3990,4,c	;volatile
  1880                           
  1881                           ;MotorControl.c: 12: TRISBbits.RB0 = 1;
  1882  001914  8093               	bsf	3987,0,c	;volatile
  1883                           
  1884                           ;MotorControl.c: 14: TRISAbits.RA4 = 0;
  1885  001916  9892               	bcf	3986,4,c	;volatile
  1886                           
  1887                           ;MotorControl.c: 16: INTCONbits.INT0IE = 1;
  1888  001918  88F2               	bsf	intcon,4,c	;volatile
  1889                           
  1890                           ;MotorControl.c: 17: INTCON2bits.INTEDG0 = 0;
  1891  00191A  9CF1               	bcf	intcon2,6,c	;volatile
  1892                           
  1893                           ;MotorControl.c: 20: CCP3CON = 0x4C;
  1894  00191C  0E4C               	movlw	76
  1895  00191E  6EB7               	movwf	4023,c	;volatile
  1896                           
  1897                           ;MotorControl.c: 21: PR2 = 0xFF;
  1898  001920  68CB               	setf	4043,c	;volatile
  1899                           
  1900                           ;MotorControl.c: 22: T3CON = 0x00;
  1901  001922  0E00               	movlw	0
  1902  001924  6EB1               	movwf	4017,c	;volatile
  1903                           
  1904                           ;MotorControl.c: 23: T2CON = 0x04;
  1905  001926  0E04               	movlw	4
  1906  001928  6ECA               	movwf	4042,c	;volatile
  1907  00192A  0012               	return		;funcret
  1908  00192C                     __end_of_MotorDriverInit:
  1909                           	opt stack 0
  1910                           prodh	equ	0xFF4
  1911                           prodl	equ	0xFF3
  1912                           intcon	equ	0xFF2
  1913                           intcon2	equ	0xFF1
  1914                           postinc0	equ	0xFEE
  1915                           wreg	equ	0xFE8
  1916                           indf2	equ	0xFDF
  1917                           fsr2h	equ	0xFDA
  1918                           fsr2l	equ	0xFD9
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _JoystickInit *****************
  1922 ;; Defined at:
  1923 ;;		line 6 in file "Joystick.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;		None
  1928 ;; Return value:  Size  Location     Type
  1929 ;;		None               void
  1930 ;; Registers used:
  1931 ;;		wreg, status,2, status,0
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;Total ram usage:        0 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    7
  1944 ;; This function calls:
  1945 ;;		Nothing
  1946 ;; This function is called by:
  1947 ;;		_initialize
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text10
  1952  0017AA                     __ptext10:
  1953                           	opt stack 0
  1954  0017AA                     _JoystickInit:
  1955                           	opt stack 22
  1956                           
  1957                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  1958                           
  1959                           ;incstack = 0
  1960  0017AA  9492               	bcf	3986,2,c	;volatile
  1961                           
  1962                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  1963  0017AC  8293               	bsf	3987,1,c	;volatile
  1964                           
  1965                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  1966  0017AE  A281               	btfss	3969,1,c	;volatile
  1967  0017B0  D003               	goto	l27
  1968                           
  1969                           ;Joystick.c: 11: {
  1970                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  1971  0017B2  8480               	bsf	3968,2,c	;volatile
  1972                           
  1973                           ;Joystick.c: 13: JSEnableFlag = 1;
  1974  0017B4  0E01               	movlw	1
  1975  0017B6  D004               	goto	L1
  1976  0017B8                     l27:
  1977                           
  1978                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  1979  0017B8  B281               	btfsc	3969,1,c	;volatile
  1980  0017BA  D005               	goto	l2580
  1981                           
  1982                           ;Joystick.c: 16: {
  1983                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  1984  0017BC  9480               	bcf	3968,2,c	;volatile
  1985                           
  1986                           ;Joystick.c: 18: JSEnableFlag = 0;
  1987  0017BE  0E00               	movlw	0
  1988  0017C0                     L1:
  1989  0017C0  0100               	movlb	0	; () banked
  1990  0017C2  6FC3               	movwf	_JSEnableFlag& (0+255),b
  1991                           
  1992                           ; BSR set to: 0
  1993  0017C4  D000               	goto	l2580
  1994  0017C6                     l2580:
  1995                           
  1996                           ;Joystick.c: 19: }
  1997                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  1998  0017C6  80C2               	bsf	4034,0,c	;volatile
  1999                           
  2000                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  2001  0017C8  50C2               	movf	4034,w,c	;volatile
  2002  0017CA  0B01               	andlw	1
  2003  0017CC  6EC2               	movwf	4034,c	;volatile
  2004                           
  2005                           ;Joystick.c: 23: ADCON1 = 0x0D;
  2006  0017CE  0E0D               	movlw	13
  2007  0017D0  6EC1               	movwf	4033,c	;volatile
  2008                           
  2009                           ;Joystick.c: 24: ADCON2 = 0xB4;
  2010  0017D2  0EB4               	movlw	180
  2011  0017D4  6EC0               	movwf	4032,c	;volatile
  2012  0017D6  0012               	return		;funcret
  2013  0017D8                     __end_of_JoystickInit:
  2014                           	opt stack 0
  2015                           prodh	equ	0xFF4
  2016                           prodl	equ	0xFF3
  2017                           intcon	equ	0xFF2
  2018                           intcon2	equ	0xFF1
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           indf2	equ	0xFDF
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _EEPROMInit *****************
  2027 ;; Defined at:
  2028 ;;		line 13 in file "EEPROM.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;		None               void
  2035 ;; Registers used:
  2036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;Total ram usage:        0 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:   10
  2049 ;; This function calls:
  2050 ;;		_EEBootUp
  2051 ;; This function is called by:
  2052 ;;		_initialize
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text11
  2057  0019C4                     __ptext11:
  2058                           	opt stack 0
  2059  0019C4                     _EEPROMInit:
  2060                           	opt stack 19
  2061                           
  2062                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  2063                           
  2064                           ;incstack = 0
  2065  0019C4  9EA6               	bcf	4006,7,c	;volatile
  2066                           
  2067                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  2068  0019C6  9CA6               	bcf	4006,6,c	;volatile
  2069                           
  2070                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  2071  0019C8  84A6               	bsf	4006,2,c	;volatile
  2072                           
  2073                           ;EEPROM.c: 19: EEBootUp();
  2074  0019CA  EC86  F009         	call	_EEBootUp	;wreg free
  2075                           
  2076                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  2077  0019CE  0E3D               	movlw	61
  2078  0019D0  6ED2               	movwf	4050,c	;volatile
  2079                           
  2080                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  2081  0019D2  84A0               	bsf	4000,2,c	;volatile
  2082                           
  2083                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  2084  0019D4  84A2               	bsf	4002,2,c	;volatile
  2085  0019D6  0012               	return		;funcret
  2086  0019D8                     __end_of_EEPROMInit:
  2087                           	opt stack 0
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon	equ	0xFF2
  2091                           intcon2	equ	0xFF1
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           indf2	equ	0xFDF
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function _EEBootUp *****************
  2100 ;; Defined at:
  2101 ;;		line 27 in file "EEPROM.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;		None               void
  2108 ;; Registers used:
  2109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;Total ram usage:        2 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    9
  2122 ;; This function calls:
  2123 ;;		_EEReadChar
  2124 ;;		_EEReadDouble
  2125 ;; This function is called by:
  2126 ;;		_EEPROMInit
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text12
  2131  00130C                     __ptext12:
  2132                           	opt stack 0
  2133  00130C                     _EEBootUp:
  2134                           	opt stack 19
  2135                           
  2136                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  2137                           
  2138                           ;incstack = 0
  2139  00130C  0E16               	movlw	22
  2140  00130E  EC17  F00C         	call	_EEReadChar
  2141  001312  0900               	iorlw	0
  2142  001314  B4D8               	btfsc	status,2,c
  2143  001316  D03D               	goto	l499
  2144                           
  2145                           ;EEPROM.c: 30: {
  2146                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  2147  001318  0E00               	movlw	0
  2148  00131A  ECCA  F009         	call	_EEReadDouble
  2149  00131E  C093  F0AF         	movff	?_EEReadDouble,_SetAngle
  2150  001322  C094  F0B0         	movff	?_EEReadDouble+1,_SetAngle+1
  2151  001326  C095  F0B1         	movff	?_EEReadDouble+2,_SetAngle+2
  2152                           
  2153                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  2154  00132A  0E03               	movlw	3
  2155  00132C  ECCA  F009         	call	_EEReadDouble
  2156  001330  C093  F0AC         	movff	?_EEReadDouble,_Kp
  2157  001334  C094  F0AD         	movff	?_EEReadDouble+1,_Kp+1
  2158  001338  C095  F0AE         	movff	?_EEReadDouble+2,_Kp+2
  2159                           
  2160                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  2161  00133C  0E06               	movlw	6
  2162  00133E  ECCA  F009         	call	_EEReadDouble
  2163  001342  C093  F0A9         	movff	?_EEReadDouble,_Ki
  2164  001346  C094  F0AA         	movff	?_EEReadDouble+1,_Ki+1
  2165  00134A  C095  F0AB         	movff	?_EEReadDouble+2,_Ki+2
  2166                           
  2167                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  2168  00134E  0E09               	movlw	9
  2169  001350  ECCA  F009         	call	_EEReadDouble
  2170  001354  C093  F0A6         	movff	?_EEReadDouble,_Kd
  2171  001358  C094  F0A7         	movff	?_EEReadDouble+1,_Kd+1
  2172  00135C  C095  F0A8         	movff	?_EEReadDouble+2,_Kd+2
  2173                           
  2174                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  2175  001360  0E15               	movlw	21
  2176  001362  EC17  F00C         	call	_EEReadChar
  2177  001366  0100               	movlb	0	; () banked
  2178  001368  6FC4               	movwf	_PIDEnableFlag& (0+255),b
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  2182  00136A  0100               	movlb	0	; () banked
  2183  00136C  51C4               	movf	_PIDEnableFlag& (0+255),w,b
  2184  00136E  0100               	movlb	0	; () banked
  2185  001370  6F98               	movwf	??_EEBootUp& (0+255),b
  2186  001372  6B99               	clrf	(??_EEBootUp+1)& (0+255),b
  2187  001374  0E01               	movlw	1
  2188  001376  0100               	movlb	0	; () banked
  2189  001378  1398               	iorwf	??_EEBootUp& (0+255),f,b
  2190  00137A  0E00               	movlw	0
  2191  00137C  1399               	iorwf	(??_EEBootUp+1)& (0+255),f,b
  2192  00137E  0100               	movlb	0	; () banked
  2193  001380  0598               	decf	??_EEBootUp& (0+255),w,b
  2194  001382  0100               	movlb	0	; () banked
  2195  001384  1199               	iorwf	(??_EEBootUp+1)& (0+255),w,b
  2196  001386  A4D8               	btfss	status,2,c
  2197  001388  D004               	goto	l499
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;EEPROM.c: 37: {
  2201                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  2202  00138A  0E03               	movlw	3
  2203  00138C  0100               	movlb	0	; () banked
  2204  00138E  6FC4               	movwf	_PIDEnableFlag& (0+255),b
  2205                           
  2206                           ; BSR set to: 0
  2207  001390  D000               	goto	l499
  2208  001392                     l499:
  2209  001392  0012               	return		;funcret
  2210  001394                     __end_of_EEBootUp:
  2211                           	opt stack 0
  2212                           prodh	equ	0xFF4
  2213                           prodl	equ	0xFF3
  2214                           intcon	equ	0xFF2
  2215                           intcon2	equ	0xFF1
  2216                           postinc0	equ	0xFEE
  2217                           wreg	equ	0xFE8
  2218                           indf2	equ	0xFDF
  2219                           fsr2h	equ	0xFDA
  2220                           fsr2l	equ	0xFD9
  2221                           status	equ	0xFD8
  2222                           
  2223 ;; *************** function _EEReadDouble *****************
  2224 ;; Defined at:
  2225 ;;		line 100 in file "EEPROM.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  location        1    wreg     unsigned char 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  location        1   54[BANK0 ] unsigned char 
  2230 ;;  x               1   55[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  3   51[BANK0 ] unsigned char 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2240 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;Total ram usage:        5 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    8
  2247 ;; This function calls:
  2248 ;;		_Busy_eep
  2249 ;;		_EEReassembleDouble
  2250 ;;		_Read_b_eep
  2251 ;; This function is called by:
  2252 ;;		_EEBootUp
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text13
  2257  001394                     __ptext13:
  2258                           	opt stack 0
  2259  001394                     _EEReadDouble:
  2260                           	opt stack 19
  2261                           
  2262                           ;incstack = 0
  2263                           ;EEReadDouble@location stored from wreg
  2264  001394  0100               	movlb	0	; () banked
  2265  001396  6F96               	movwf	EEReadDouble@location& (0+255),b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;EEPROM.c: 102: unsigned char x;
  2269                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  2270  001398  50F2               	movf	intcon,w,c	;volatile
  2271  00139A  0B3F               	andlw	63
  2272  00139C  6EF2               	movwf	intcon,c	;volatile
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  2276  00139E  0E00               	movlw	0
  2277  0013A0  0100               	movlb	0	; () banked
  2278  0013A2  6F97               	movwf	EEReadDouble@x& (0+255),b
  2279  0013A4                     l2204:
  2280                           
  2281                           ; BSR set to: 0
  2282  0013A4  0E02               	movlw	2
  2283  0013A6  0100               	movlb	0	; () banked
  2284  0013A8  6597               	cpfsgt	EEReadDouble@x& (0+255),b
  2285  0013AA  D001               	goto	l2208
  2286                           
  2287                           ; BSR set to: 0
  2288  0013AC  D01B               	goto	l2216
  2289  0013AE                     l2208:
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;EEPROM.c: 107: {
  2293                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  2294  0013AE  0100               	movlb	0	; () banked
  2295  0013B0  5197               	movf	EEReadDouble@x& (0+255),w,b
  2296  0013B2  0D01               	mullw	1
  2297  0013B4  0E4A               	movlw	low _DDouble
  2298  0013B6  24F3               	addwf	prodl,w,c
  2299  0013B8  6ED9               	movwf	fsr2l,c
  2300  0013BA  0E00               	movlw	high _DDouble
  2301  0013BC  20F4               	addwfc	prodh,w,c
  2302  0013BE  6EDA               	movwf	fsr2h,c
  2303  0013C0  0100               	movlb	0	; () banked
  2304  0013C2  5196               	movf	EEReadDouble@location& (0+255),w,b
  2305  0013C4  0100               	movlb	0	; () banked
  2306  0013C6  2597               	addwf	EEReadDouble@x& (0+255),w,b
  2307  0013C8  0100               	movlb	0	; () banked
  2308  0013CA  6F8D               	movwf	Read_b_eep@badd& (0+255),b
  2309  0013CC  0100               	movlb	0	; () banked
  2310  0013CE  6B8E               	clrf	(Read_b_eep@badd+1)& (0+255),b
  2311  0013D0  0100               	movlb	0	; () banked
  2312  0013D2  378E               	rlcf	(Read_b_eep@badd+1)& (0+255),f,b
  2313  0013D4  ECA4  F00C         	call	_Read_b_eep	;wreg free
  2314  0013D8  6EDF               	movwf	indf2,c
  2315                           
  2316                           ;EEPROM.c: 109: Busy_eep();
  2317  0013DA  EC0B  F00D         	call	_Busy_eep	;wreg free
  2318  0013DE  0100               	movlb	0	; () banked
  2319  0013E0  2B97               	incf	EEReadDouble@x& (0+255),f,b
  2320  0013E2  D7E0               	goto	l2204
  2321  0013E4                     l2216:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;EEPROM.c: 110: }
  2325                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  2326  0013E4  50F2               	movf	intcon,w,c	;volatile
  2327  0013E6  09C0               	iorlw	192
  2328  0013E8  6EF2               	movwf	intcon,c	;volatile
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;EEPROM.c: 114: return EEReassembleDouble();
  2332  0013EA  EC87  F00A         	call	_EEReassembleDouble	;wreg free
  2333  0013EE  C08D  F093         	movff	?_EEReassembleDouble,?_EEReadDouble
  2334  0013F2  C08E  F094         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  2335  0013F6  C08F  F095         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  2336  0013FA  D000               	goto	l515
  2337  0013FC                     l515:
  2338  0013FC  0012               	return		;funcret
  2339  0013FE                     __end_of_EEReadDouble:
  2340                           	opt stack 0
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           intcon	equ	0xFF2
  2344                           intcon2	equ	0xFF1
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           indf2	equ	0xFDF
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _EEReassembleDouble *****************
  2353 ;; Defined at:
  2354 ;;		line 62 in file "EEPROM.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  dub             3   48[BANK0 ] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  3   45[BANK0 ] unsigned char 
  2361 ;; Registers used:
  2362 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2368 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;Total ram usage:        6 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    7
  2375 ;; This function calls:
  2376 ;;		Nothing
  2377 ;; This function is called by:
  2378 ;;		_EEReadDouble
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text14
  2383  00150E                     __ptext14:
  2384                           	opt stack 0
  2385  00150E                     _EEReassembleDouble:
  2386                           	opt stack 19
  2387                           
  2388                           ;EEPROM.c: 64: double dub;
  2389                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  2390                           
  2391                           ;incstack = 0
  2392  00150E  0E90               	movlw	low EEReassembleDouble@dub
  2393  001510  0100               	movlb	0	; () banked
  2394  001512  6FBE               	movwf	_DoublePtr& (0+255),b
  2395  001514  0E00               	movlw	high EEReassembleDouble@dub
  2396  001516  0100               	movlb	0	; () banked
  2397  001518  6FBF               	movwf	(_DoublePtr+1)& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  2401  00151A  C0BE  FFD9         	movff	_DoublePtr,fsr2l
  2402  00151E  C0BF  FFDA         	movff	_DoublePtr+1,fsr2h
  2403  001522  C04A  FFDF         	movff	_DDouble,indf2
  2404                           
  2405                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  2406  001526  0100               	movlb	0	; () banked
  2407  001528  EE20 F001          	lfsr	2,1
  2408  00152C  51BE               	movf	_DoublePtr& (0+255),w,b
  2409  00152E  26D9               	addwf	fsr2l,f,c
  2410  001530  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  2411  001532  22DA               	addwfc	fsr2h,f,c
  2412  001534  C04B  FFDF         	movff	_DDouble+1,indf2
  2413                           
  2414                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  2415  001538  0100               	movlb	0	; () banked
  2416  00153A  EE20 F002          	lfsr	2,2
  2417  00153E  51BE               	movf	_DoublePtr& (0+255),w,b
  2418  001540  26D9               	addwf	fsr2l,f,c
  2419  001542  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  2420  001544  22DA               	addwfc	fsr2h,f,c
  2421  001546  C04C  FFDF         	movff	_DDouble+2,indf2
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;EEPROM.c: 69: return dub;
  2425  00154A  C090  F08D         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  2426  00154E  C091  F08E         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  2427  001552  C092  F08F         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  2428  001556  D000               	goto	l505
  2429  001558                     l505:
  2430                           
  2431                           ; BSR set to: 0
  2432  001558  0012               	return		;funcret
  2433  00155A                     __end_of_EEReassembleDouble:
  2434                           	opt stack 0
  2435                           prodh	equ	0xFF4
  2436                           prodl	equ	0xFF3
  2437                           intcon	equ	0xFF2
  2438                           intcon2	equ	0xFF1
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           indf2	equ	0xFDF
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _Busy_eep *****************
  2447 ;; Defined at:
  2448 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;		None               void
  2455 ;; Registers used:
  2456 ;;		None
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    7
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_EEReadDouble
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text15
  2477  001A16                     __ptext15:
  2478                           	opt stack 0
  2479  001A16                     _Busy_eep:
  2480                           	opt stack 19
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;incstack = 0
  2484  001A16  D000               	goto	l529
  2485  001A18                     l529:
  2486  001A18  B2A6               	btfsc	4006,1,c	;volatile
  2487  001A1A  D7FE               	goto	l529
  2488  001A1C  0012               	return		;funcret
  2489  001A1E                     __end_of_Busy_eep:
  2490                           	opt stack 0
  2491                           prodh	equ	0xFF4
  2492                           prodl	equ	0xFF3
  2493                           intcon	equ	0xFF2
  2494                           intcon2	equ	0xFF1
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           indf2	equ	0xFDF
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _EEReadChar *****************
  2503 ;; Defined at:
  2504 ;;		line 136 in file "EEPROM.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  location        1    wreg     unsigned char 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  location        1   47[BANK0 ] unsigned char 
  2509 ;;  ch              1   48[BANK0 ] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      unsigned char 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:        2 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    8
  2526 ;; This function calls:
  2527 ;;		_Read_b_eep
  2528 ;; This function is called by:
  2529 ;;		_EEBootUp
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text16
  2534  00182E                     __ptext16:
  2535                           	opt stack 0
  2536  00182E                     _EEReadChar:
  2537                           	opt stack 19
  2538                           
  2539                           ;incstack = 0
  2540                           ;EEReadChar@location stored from wreg
  2541  00182E  0100               	movlb	0	; () banked
  2542  001830  6F8F               	movwf	EEReadChar@location& (0+255),b
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;EEPROM.c: 138: unsigned char ch;
  2546                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  2547  001832  50F2               	movf	intcon,w,c	;volatile
  2548  001834  0B3F               	andlw	63
  2549  001836  6EF2               	movwf	intcon,c	;volatile
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  2553  001838  C08F  F08D         	movff	EEReadChar@location,Read_b_eep@badd
  2554  00183C  0100               	movlb	0	; () banked
  2555  00183E  6B8E               	clrf	(Read_b_eep@badd+1)& (0+255),b
  2556  001840  ECA4  F00C         	call	_Read_b_eep	;wreg free
  2557  001844  0100               	movlb	0	; () banked
  2558  001846  6F90               	movwf	EEReadChar@ch& (0+255),b
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  2562  001848  50F2               	movf	intcon,w,c	;volatile
  2563  00184A  09C0               	iorlw	192
  2564  00184C  6EF2               	movwf	intcon,c	;volatile
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;EEPROM.c: 146: return ch;
  2568  00184E  0100               	movlb	0	; () banked
  2569  001850  5190               	movf	EEReadChar@ch& (0+255),w,b
  2570  001852  D000               	goto	l521
  2571  001854                     l521:
  2572                           
  2573                           ; BSR set to: 0
  2574  001854  0012               	return		;funcret
  2575  001856                     __end_of_EEReadChar:
  2576                           	opt stack 0
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           intcon	equ	0xFF2
  2580                           intcon2	equ	0xFF1
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           indf2	equ	0xFDF
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _Read_b_eep *****************
  2589 ;; Defined at:
  2590 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  badd            2   45[BANK0 ] unsigned int 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      unsigned char 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2604 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;Total ram usage:        2 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    7
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_EEReadDouble
  2615 ;;		_EEReadChar
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text17
  2620  001948                     __ptext17:
  2621                           	opt stack 0
  2622  001948                     _Read_b_eep:
  2623                           	opt stack 19
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;incstack = 0
  2627  001948  0100               	movlb	0	; () banked
  2628  00194A  518E               	movf	(Read_b_eep@badd+1)& (0+255),w,b
  2629  00194C  0B03               	andlw	3
  2630  00194E  6EAA               	movwf	4010,c	;volatile
  2631                           
  2632                           ; BSR set to: 0
  2633  001950  C08D  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  2634                           
  2635                           ; BSR set to: 0
  2636  001954  9CA6               	bcf	4006,6,c	;volatile
  2637                           
  2638                           ; BSR set to: 0
  2639  001956  9EA6               	bcf	4006,7,c	;volatile
  2640                           
  2641                           ; BSR set to: 0
  2642  001958  80A6               	bsf	4006,0,c	;volatile
  2643                           
  2644                           ; BSR set to: 0
  2645  00195A  F000               	nop	
  2646  00195C  F000               	nop	
  2647  00195E  50A8               	movf	4008,w,c	;volatile
  2648  001960  D000               	goto	l545
  2649  001962                     l545:
  2650  001962  0012               	return		;funcret
  2651  001964                     __end_of_Read_b_eep:
  2652                           	opt stack 0
  2653                           prodh	equ	0xFF4
  2654                           prodl	equ	0xFF3
  2655                           intcon	equ	0xFF2
  2656                           intcon2	equ	0xFF1
  2657                           postinc0	equ	0xFEE
  2658                           wreg	equ	0xFE8
  2659                           indf2	equ	0xFDF
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function _SendSPI1 *****************
  2665 ;; Defined at:
  2666 ;;		line 35 in file "SPISlave.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  data            1    wreg     unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  data            1   46[BANK0 ] unsigned char 
  2671 ;;  temp            1   45[BANK0 ] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		wreg
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;Total ram usage:        2 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    7
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text18
  2696  00197E                     __ptext18:
  2697                           	opt stack 0
  2698  00197E                     _SendSPI1:
  2699                           	opt stack 23
  2700                           
  2701                           ;incstack = 0
  2702                           ;SendSPI1@data stored from wreg
  2703  00197E  0100               	movlb	0	; () banked
  2704  001980  6F8E               	movwf	SendSPI1@data& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;SPISlave.c: 37: SSP1BUF = data;
  2708  001982  C08E  FFC9         	movff	SendSPI1@data,4041	;volatile
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;SPISlave.c: 38: unsigned char temp;
  2712                           ;SPISlave.c: 39: PIR1bits.SSP1IF = 0;
  2713  001986  969E               	bcf	3998,3,c	;volatile
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;SPISlave.c: 40: temp = SSP2BUF;
  2717  001988  CF66 F08D          	movff	3942,SendSPI1@temp	;volatile
  2718                           
  2719                           ;SPISlave.c: 41: while (!PIR1bits.SSP1IF);
  2720  00198C  D000               	goto	l413
  2721  00198E                     l413:
  2722  00198E  A69E               	btfss	3998,3,c	;volatile
  2723  001990  D7FE               	goto	l413
  2724                           
  2725                           ;SPISlave.c: 42: SSP2CON1bits.SSPOV2 = 0;
  2726  001992  9C63               	bcf	3939,6,c	;volatile
  2727                           
  2728                           ;SPISlave.c: 43: PIR1bits.SSP1IF = 0;
  2729  001994  969E               	bcf	3998,3,c	;volatile
  2730  001996  0012               	return		;funcret
  2731  001998                     __end_of_SendSPI1:
  2732                           	opt stack 0
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           intcon2	equ	0xFF1
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           indf2	equ	0xFDF
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _SPIReassembleDouble *****************
  2745 ;; Defined at:
  2746 ;;		line 70 in file "SPISlave.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  dub             3   48[BANK0 ] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  3   45[BANK0 ] unsigned char 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        6 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    7
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_main
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text19
  2775  00155A                     __ptext19:
  2776                           	opt stack 0
  2777  00155A                     _SPIReassembleDouble:
  2778                           	opt stack 23
  2779                           
  2780                           ;SPISlave.c: 72: double dub;
  2781                           ;SPISlave.c: 73: DoublePtr = (unsigned char*) &dub;
  2782                           
  2783                           ;incstack = 0
  2784  00155A  0E90               	movlw	low SPIReassembleDouble@dub
  2785  00155C  0100               	movlb	0	; () banked
  2786  00155E  6FBE               	movwf	_DoublePtr& (0+255),b
  2787  001560  0E00               	movlw	high SPIReassembleDouble@dub
  2788  001562  0100               	movlb	0	; () banked
  2789  001564  6FBF               	movwf	(_DoublePtr+1)& (0+255),b
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;SPISlave.c: 74: DoublePtr[0] = DoubleSPIS[0];
  2793  001566  C0BE  FFD9         	movff	_DoublePtr,fsr2l
  2794  00156A  C0BF  FFDA         	movff	_DoublePtr+1,fsr2h
  2795  00156E  C09C  FFDF         	movff	_DoubleSPIS,indf2
  2796                           
  2797                           ;SPISlave.c: 75: DoublePtr[1] = DoubleSPIS[1];
  2798  001572  0100               	movlb	0	; () banked
  2799  001574  EE20 F001          	lfsr	2,1
  2800  001578  51BE               	movf	_DoublePtr& (0+255),w,b
  2801  00157A  26D9               	addwf	fsr2l,f,c
  2802  00157C  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  2803  00157E  22DA               	addwfc	fsr2h,f,c
  2804  001580  C09D  FFDF         	movff	_DoubleSPIS+1,indf2
  2805                           
  2806                           ;SPISlave.c: 76: DoublePtr[2] = DoubleSPIS[2];
  2807  001584  0100               	movlb	0	; () banked
  2808  001586  EE20 F002          	lfsr	2,2
  2809  00158A  51BE               	movf	_DoublePtr& (0+255),w,b
  2810  00158C  26D9               	addwf	fsr2l,f,c
  2811  00158E  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  2812  001590  22DA               	addwfc	fsr2h,f,c
  2813  001592  C09E  FFDF         	movff	_DoubleSPIS+2,indf2
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;SPISlave.c: 78: return dub;
  2817  001596  C090  F08D         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  2818  00159A  C091  F08E         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  2819  00159E  C092  F08F         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  2820  0015A2  D000               	goto	l433
  2821  0015A4                     l433:
  2822                           
  2823                           ; BSR set to: 0
  2824  0015A4  0012               	return		;funcret
  2825  0015A6                     __end_of_SPIReassembleDouble:
  2826                           	opt stack 0
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           intcon	equ	0xFF2
  2830                           intcon2	equ	0xFF1
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           indf2	equ	0xFDF
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _SPIDisassembleDouble *****************
  2839 ;; Defined at:
  2840 ;;		line 53 in file "SPISlave.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  dub             3   47[BANK0 ] unsigned char 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;		None               void
  2847 ;; Registers used:
  2848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        3 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    8
  2861 ;; This function calls:
  2862 ;;		_GenerateChecksum
  2863 ;; This function is called by:
  2864 ;;		_main
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text20
  2869  0015A6                     __ptext20:
  2870                           	opt stack 0
  2871  0015A6                     _SPIDisassembleDouble:
  2872                           	opt stack 22
  2873                           
  2874                           ;SPISlave.c: 55: DoublePtr = (unsigned char*) &dub;
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;incstack = 0
  2878  0015A6  0E8F               	movlw	low SPIDisassembleDouble@dub
  2879  0015A8  0100               	movlb	0	; () banked
  2880  0015AA  6FBE               	movwf	_DoublePtr& (0+255),b
  2881  0015AC  0E00               	movlw	high SPIDisassembleDouble@dub
  2882  0015AE  0100               	movlb	0	; () banked
  2883  0015B0  6FBF               	movwf	(_DoublePtr+1)& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;SPISlave.c: 56: DoubleSPIS[0] = DoublePtr[0];
  2887  0015B2  C0BE  FFD9         	movff	_DoublePtr,fsr2l
  2888  0015B6  C0BF  FFDA         	movff	_DoublePtr+1,fsr2h
  2889  0015BA  50DF               	movf	indf2,w,c
  2890  0015BC  0100               	movlb	0	; () banked
  2891  0015BE  6F9C               	movwf	_DoubleSPIS& (0+255),b
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;SPISlave.c: 57: DoubleSPIS[1] = DoublePtr[1];
  2895  0015C0  0100               	movlb	0	; () banked
  2896  0015C2  EE20 F001          	lfsr	2,1
  2897  0015C6  51BE               	movf	_DoublePtr& (0+255),w,b
  2898  0015C8  26D9               	addwf	fsr2l,f,c
  2899  0015CA  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  2900  0015CC  22DA               	addwfc	fsr2h,f,c
  2901  0015CE  50DF               	movf	indf2,w,c
  2902  0015D0  0100               	movlb	0	; () banked
  2903  0015D2  6F9D               	movwf	(_DoubleSPIS+1)& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;SPISlave.c: 58: DoubleSPIS[2] = DoublePtr[2];
  2907  0015D4  0100               	movlb	0	; () banked
  2908  0015D6  EE20 F002          	lfsr	2,2
  2909  0015DA  51BE               	movf	_DoublePtr& (0+255),w,b
  2910  0015DC  26D9               	addwf	fsr2l,f,c
  2911  0015DE  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  2912  0015E0  22DA               	addwfc	fsr2h,f,c
  2913  0015E2  50DF               	movf	indf2,w,c
  2914  0015E4  0100               	movlb	0	; () banked
  2915  0015E6  6F9E               	movwf	(_DoubleSPIS+2)& (0+255),b
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;SPISlave.c: 59: DoubleSPIS[3] = GenerateChecksum();
  2919  0015E8  EC42  F00B         	call	_GenerateChecksum	;wreg free
  2920  0015EC  0100               	movlb	0	; () banked
  2921  0015EE  6F9F               	movwf	(_DoubleSPIS+3)& (0+255),b
  2922                           
  2923                           ; BSR set to: 0
  2924  0015F0  0012               	return		;funcret
  2925  0015F2                     __end_of_SPIDisassembleDouble:
  2926                           	opt stack 0
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           intcon2	equ	0xFF1
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           indf2	equ	0xFDF
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _GenerateChecksum *****************
  2939 ;; Defined at:
  2940 ;;		line 62 in file "SPISlave.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  y               1   46[BANK0 ] unsigned char 
  2945 ;;  sum             1   45[BANK0 ] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      unsigned char 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;Total ram usage:        2 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    7
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_SPIDisassembleDouble
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text21
  2970  001684                     __ptext21:
  2971                           	opt stack 0
  2972  001684                     _GenerateChecksum:
  2973                           	opt stack 22
  2974                           
  2975                           ;SPISlave.c: 64: unsigned char y, sum = 0;
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;incstack = 0
  2979  001684  0E00               	movlw	0
  2980  001686  0100               	movlb	0	; () banked
  2981  001688  6F8D               	movwf	GenerateChecksum@sum& (0+255),b
  2982                           
  2983                           ;SPISlave.c: 65: for (y = 0; y != 3; y++)
  2984  00168A  0E00               	movlw	0
  2985  00168C  0100               	movlb	0	; () banked
  2986  00168E  6F8E               	movwf	GenerateChecksum@y& (0+255),b
  2987  001690                     l2718:
  2988                           
  2989                           ; BSR set to: 0
  2990  001690  0E03               	movlw	3
  2991  001692  0100               	movlb	0	; () banked
  2992  001694  198E               	xorwf	GenerateChecksum@y& (0+255),w,b
  2993  001696  B4D8               	btfsc	status,2,c
  2994  001698  D011               	goto	l2728
  2995  00169A  D001               	goto	l2722
  2996                           
  2997                           ; BSR set to: 0
  2998  00169C  D00F               	goto	l2728
  2999  00169E                     l2722:
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;SPISlave.c: 66: sum += DoubleSPIS[y];
  3003  00169E  0100               	movlb	0	; () banked
  3004  0016A0  518E               	movf	GenerateChecksum@y& (0+255),w,b
  3005  0016A2  0D01               	mullw	1
  3006  0016A4  0E9C               	movlw	low _DoubleSPIS
  3007  0016A6  24F3               	addwf	prodl,w,c
  3008  0016A8  6ED9               	movwf	fsr2l,c
  3009  0016AA  0E00               	movlw	high _DoubleSPIS
  3010  0016AC  20F4               	addwfc	prodh,w,c
  3011  0016AE  6EDA               	movwf	fsr2h,c
  3012  0016B0  50DF               	movf	indf2,w,c
  3013  0016B2  0100               	movlb	0	; () banked
  3014  0016B4  278D               	addwf	GenerateChecksum@sum& (0+255),f,b
  3015                           
  3016                           ; BSR set to: 0
  3017  0016B6  0100               	movlb	0	; () banked
  3018  0016B8  2B8E               	incf	GenerateChecksum@y& (0+255),f,b
  3019  0016BA  D7EA               	goto	l2718
  3020  0016BC                     l2728:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;SPISlave.c: 67: return sum;
  3024  0016BC  0100               	movlb	0	; () banked
  3025  0016BE  518D               	movf	GenerateChecksum@sum& (0+255),w,b
  3026  0016C0  D000               	goto	l430
  3027  0016C2                     l430:
  3028                           
  3029                           ; BSR set to: 0
  3030  0016C2  0012               	return		;funcret
  3031  0016C4                     __end_of_GenerateChecksum:
  3032                           	opt stack 0
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           intcon	equ	0xFF2
  3036                           intcon2	equ	0xFF1
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           indf2	equ	0xFDF
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function _ReceiveSPI1 *****************
  3045 ;; Defined at:
  3046 ;;		line 46 in file "SPISlave.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;		None
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;		None
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      unsigned char 
  3053 ;; Registers used:
  3054 ;;		wreg, status,2
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;Total ram usage:        0 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    7
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		_main
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text22
  3075  0019FC                     __ptext22:
  3076                           	opt stack 0
  3077  0019FC                     _ReceiveSPI1:
  3078                           	opt stack 23
  3079                           
  3080                           ;SPISlave.c: 48: SSP1BUF = 0x00;
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;incstack = 0
  3084  0019FC  0E00               	movlw	0
  3085  0019FE  6EC9               	movwf	4041,c	;volatile
  3086                           
  3087                           ;SPISlave.c: 49: while (SSP1STATbits.BF == 0);
  3088  001A00  D000               	goto	l419
  3089  001A02                     l419:
  3090  001A02  A0C7               	btfss	4039,0,c	;volatile
  3091  001A04  D7FE               	goto	l419
  3092                           
  3093                           ;SPISlave.c: 50: return SSP1BUF;
  3094  001A06  50C9               	movf	4041,w,c	;volatile
  3095  001A08  D000               	goto	l422
  3096  001A0A                     l422:
  3097  001A0A  0012               	return		;funcret
  3098  001A0C                     __end_of_ReceiveSPI1:
  3099                           	opt stack 0
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           intcon	equ	0xFF2
  3103                           intcon2	equ	0xFF1
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           indf2	equ	0xFDF
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _ImplementJSMotion *****************
  3112 ;; Defined at:
  3113 ;;		line 45 in file "MotorControl.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  JoystickValu    2   51[BANK0 ] int 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  CCPinput        2   55[BANK0 ] unsigned int 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        6 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    8
  3134 ;; This function calls:
  3135 ;;		_abs
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text23
  3142  000ED8                     __ptext23:
  3143                           	opt stack 0
  3144  000ED8                     _ImplementJSMotion:
  3145                           	opt stack 22
  3146                           
  3147                           ;MotorControl.c: 47: unsigned int CCPinput;
  3148                           ;MotorControl.c: 48: PIDEnableFlag = 0;
  3149                           
  3150                           ;incstack = 0
  3151  000ED8  0E00               	movlw	0
  3152  000EDA  0100               	movlb	0	; () banked
  3153  000EDC  6FC4               	movwf	_PIDEnableFlag& (0+255),b
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;MotorControl.c: 49: if (JoystickValue < -5)
  3157  000EDE  0100               	movlb	0	; () banked
  3158  000EE0  AF94               	btfss	(ImplementJSMotion@JoystickValue+1)& (0+255),7,b
  3159  000EE2  D00A               	goto	l2802
  3160  000EE4  0EFB               	movlw	251
  3161  000EE6  0100               	movlb	0	; () banked
  3162  000EE8  5D93               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  3163  000EEA  0EFF               	movlw	255
  3164  000EEC  0100               	movlb	0	; () banked
  3165  000EEE  5994               	subwfb	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  3166  000EF0  B0D8               	btfsc	status,0,c
  3167  000EF2  D002               	goto	l2802
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;MotorControl.c: 50: {
  3171                           ;MotorControl.c: 51: CCP3CONbits.P3M1 = 1;
  3172  000EF4  8EB7               	bsf	4023,7,c	;volatile
  3173                           
  3174                           ;MotorControl.c: 52: }
  3175  000EF6  D029               	goto	l2812
  3176  000EF8                     l2802:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;MotorControl.c: 53: else if (JoystickValue > 5)
  3180  000EF8  0100               	movlb	0	; () banked
  3181  000EFA  BF94               	btfsc	(ImplementJSMotion@JoystickValue+1)& (0+255),7,b
  3182  000EFC  D00A               	goto	l2806
  3183  000EFE  0100               	movlb	0	; () banked
  3184  000F00  5194               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  3185  000F02  E105               	bnz	u2300
  3186  000F04  0E06               	movlw	6
  3187  000F06  0100               	movlb	0	; () banked
  3188  000F08  5D93               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  3189  000F0A  A0D8               	btfss	status,0,c
  3190  000F0C  D002               	goto	l2806
  3191  000F0E                     u2300:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;MotorControl.c: 54: {
  3195                           ;MotorControl.c: 55: CCP3CONbits.P3M1 = 0;
  3196  000F0E  9EB7               	bcf	4023,7,c	;volatile
  3197                           
  3198                           ;MotorControl.c: 56: }
  3199  000F10  D01C               	goto	l2812
  3200  000F12                     l2806:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;MotorControl.c: 57: else if (JoystickValue <= 5 && JoystickValue >= -5)
  3204  000F12  0100               	movlb	0	; () banked
  3205  000F14  BF94               	btfsc	(ImplementJSMotion@JoystickValue+1)& (0+255),7,b
  3206  000F16  D008               	goto	l2808
  3207  000F18  0100               	movlb	0	; () banked
  3208  000F1A  5194               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  3209  000F1C  E116               	bnz	l2812
  3210  000F1E  0E06               	movlw	6
  3211  000F20  0100               	movlb	0	; () banked
  3212  000F22  5D93               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  3213  000F24  B0D8               	btfsc	status,0,c
  3214  000F26  D011               	goto	l2812
  3215  000F28                     l2808:
  3216                           
  3217                           ; BSR set to: 0
  3218  000F28  0100               	movlb	0	; () banked
  3219  000F2A  AF94               	btfss	(ImplementJSMotion@JoystickValue+1)& (0+255),7,b
  3220  000F2C  D008               	goto	l2810
  3221  000F2E  0EFB               	movlw	251
  3222  000F30  0100               	movlb	0	; () banked
  3223  000F32  5D93               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  3224  000F34  0EFF               	movlw	255
  3225  000F36  0100               	movlb	0	; () banked
  3226  000F38  5994               	subwfb	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  3227  000F3A  A0D8               	btfss	status,0,c
  3228  000F3C  D006               	goto	l2812
  3229  000F3E                     l2810:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;MotorControl.c: 58: {
  3233                           ;MotorControl.c: 59: JoystickValue = 0;
  3234  000F3E  0E00               	movlw	0
  3235  000F40  0100               	movlb	0	; () banked
  3236  000F42  6F94               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  3237  000F44  0E00               	movlw	0
  3238  000F46  6F93               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           
  3242                           ; BSR set to: 0
  3243  000F48  D000               	goto	l2812
  3244  000F4A                     l2812:
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;MotorControl.c: 60: }
  3248                           ;MotorControl.c: 62: JoystickValue = abs(JoystickValue);
  3249  000F4A  C093  F08D         	movff	ImplementJSMotion@JoystickValue,abs@a
  3250  000F4E  C094  F08E         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  3251  000F52  ECEC  F00B         	call	_abs	;wreg free
  3252  000F56  C08D  F093         	movff	?_abs,ImplementJSMotion@JoystickValue
  3253  000F5A  C08E  F094         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  3254                           
  3255                           ;MotorControl.c: 63: CCPinput = JoystickValue * 2;
  3256  000F5E  90D8               	bcf	status,0,c
  3257  000F60  0100               	movlb	0	; () banked
  3258  000F62  3593               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  3259  000F64  0100               	movlb	0	; () banked
  3260  000F66  6F97               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  3261  000F68  0100               	movlb	0	; () banked
  3262  000F6A  3594               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  3263  000F6C  0100               	movlb	0	; () banked
  3264  000F6E  6F98               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;MotorControl.c: 64: CCPR3L = (CCPinput >> 2) & 0xFF;
  3268  000F70  C097  F095         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  3269  000F74  C098  F096         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  3270  000F78  0100               	movlb	0	; () banked
  3271  000F7A  90D8               	bcf	status,0,c
  3272  000F7C  3396               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  3273  000F7E  3395               	rrcf	??_ImplementJSMotion& (0+255),f,b
  3274  000F80  0100               	movlb	0	; () banked
  3275  000F82  90D8               	bcf	status,0,c
  3276  000F84  3396               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  3277  000F86  3395               	rrcf	??_ImplementJSMotion& (0+255),f,b
  3278  000F88  0100               	movlb	0	; () banked
  3279  000F8A  5195               	movf	??_ImplementJSMotion& (0+255),w,b
  3280  000F8C  6EB8               	movwf	4024,c	;volatile
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;MotorControl.c: 66: CCP3CONbits.DC3B = (CCPinput & 0x03);
  3284  000F8E  C097  F095         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  3285  000F92  0E03               	movlw	3
  3286  000F94  0100               	movlb	0	; () banked
  3287  000F96  1795               	andwf	??_ImplementJSMotion& (0+255),f,b
  3288  000F98  0100               	movlb	0	; () banked
  3289  000F9A  3B95               	swapf	??_ImplementJSMotion& (0+255),f,b
  3290  000F9C  50B7               	movf	4023,w,c	;volatile
  3291  000F9E  0100               	movlb	0	; () banked
  3292  000FA0  1995               	xorwf	??_ImplementJSMotion& (0+255),w,b
  3293  000FA2  0BCF               	andlw	-49
  3294  000FA4  1995               	xorwf	??_ImplementJSMotion& (0+255),w,b
  3295  000FA6  6EB7               	movwf	4023,c	;volatile
  3296                           
  3297                           ; BSR set to: 0
  3298  000FA8  0012               	return		;funcret
  3299  000FAA                     __end_of_ImplementJSMotion:
  3300                           	opt stack 0
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon2	equ	0xFF1
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           indf2	equ	0xFDF
  3308                           fsr2h	equ	0xFDA
  3309                           fsr2l	equ	0xFD9
  3310                           status	equ	0xFD8
  3311                           
  3312 ;; *************** function _abs *****************
  3313 ;; Defined at:
  3314 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  a               2   45[BANK0 ] int 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;		None
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  2   45[BANK0 ] int 
  3321 ;; Registers used:
  3322 ;;		wreg, status,2, status,0
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;Total ram usage:        4 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    7
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_ImplementJSMotion
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text24
  3343  0017D8                     __ptext24:
  3344                           	opt stack 0
  3345  0017D8                     _abs:
  3346                           	opt stack 22
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;incstack = 0
  3350  0017D8  0100               	movlb	0	; () banked
  3351  0017DA  AF8E               	btfss	(abs@a+1)& (0+255),7,b
  3352  0017DC  D00E               	goto	l639
  3353                           
  3354                           ; BSR set to: 0
  3355  0017DE  C08D  F08F         	movff	abs@a,??_abs
  3356  0017E2  C08E  F090         	movff	abs@a+1,??_abs+1
  3357  0017E6  0100               	movlb	0	; () banked
  3358  0017E8  1F8F               	comf	??_abs& (0+255),f,b
  3359  0017EA  1F90               	comf	(??_abs+1)& (0+255),f,b
  3360  0017EC  4B8F               	infsnz	??_abs& (0+255),f,b
  3361  0017EE  2B90               	incf	(??_abs+1)& (0+255),f,b
  3362  0017F0  C08F  F08D         	movff	??_abs,?_abs
  3363  0017F4  C090  F08E         	movff	??_abs+1,?_abs+1
  3364  0017F8  D004               	goto	l640
  3365  0017FA                     l639:
  3366                           
  3367                           ; BSR set to: 0
  3368  0017FA  C08D  F08D         	movff	abs@a,?_abs
  3369  0017FE  C08E  F08E         	movff	abs@a+1,?_abs+1
  3370  001802                     l640:
  3371                           
  3372                           ; BSR set to: 0
  3373  001802  0012               	return		;funcret
  3374  001804                     __end_of_abs:
  3375                           	opt stack 0
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           intcon2	equ	0xFF1
  3380                           postinc0	equ	0xFEE
  3381                           wreg	equ	0xFE8
  3382                           indf2	equ	0xFDF
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _DetectMovement *****************
  3388 ;; Defined at:
  3389 ;;		line 42 in file "Joystick.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  ADCresult       2   49[BANK0 ] unsigned int 
  3394 ;;  JoystickResu    2   47[BANK0 ] int 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  2   45[BANK0 ] int 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        6 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    7
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text25
  3419  001282                     __ptext25:
  3420                           	opt stack 0
  3421  001282                     _DetectMovement:
  3422                           	opt stack 23
  3423                           
  3424                           ;Joystick.c: 44: unsigned int ADCresult;
  3425                           ;Joystick.c: 45: int JoystickResult;
  3426                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;incstack = 0
  3430  001282  82C2               	bsf	4034,1,c	;volatile
  3431                           
  3432                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  3433  001284  D000               	goto	l39
  3434  001286                     l39:
  3435  001286  B2C2               	btfsc	4034,1,c	;volatile
  3436  001288  D7FE               	goto	l39
  3437                           
  3438                           ;Joystick.c: 50: ADCresult = ADRESH;
  3439  00128A  CFC4 F091          	movff	4036,DetectMovement@ADCresult	;volatile
  3440  00128E  0100               	movlb	0	; () banked
  3441  001290  6B92               	clrf	(DetectMovement@ADCresult+1)& (0+255),b
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  3445  001292  0100               	movlb	0	; () banked
  3446  001294  5191               	movf	DetectMovement@ADCresult& (0+255),w,b
  3447  001296  0100               	movlb	0	; () banked
  3448  001298  6F92               	movwf	(DetectMovement@ADCresult+1)& (0+255),b
  3449  00129A  6B91               	clrf	DetectMovement@ADCresult& (0+255),b
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  3453  00129C  0100               	movlb	0	; () banked
  3454  00129E  5191               	movf	DetectMovement@ADCresult& (0+255),w,b
  3455  0012A0  10C3               	iorwf	4035,w,c	;volatile
  3456  0012A2  0100               	movlb	0	; () banked
  3457  0012A4  6F91               	movwf	DetectMovement@ADCresult& (0+255),b
  3458  0012A6  0100               	movlb	0	; () banked
  3459  0012A8  5192               	movf	(DetectMovement@ADCresult+1)& (0+255),w,b
  3460  0012AA  0100               	movlb	0	; () banked
  3461  0012AC  6F92               	movwf	(DetectMovement@ADCresult+1)& (0+255),b
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  3465  0012AE  0E00               	movlw	0
  3466  0012B0  0100               	movlb	0	; () banked
  3467  0012B2  2591               	addwf	DetectMovement@ADCresult& (0+255),w,b
  3468  0012B4  0100               	movlb	0	; () banked
  3469  0012B6  6F8F               	movwf	DetectMovement@JoystickResult& (0+255),b
  3470  0012B8  0EFE               	movlw	254
  3471  0012BA  0100               	movlb	0	; () banked
  3472  0012BC  2192               	addwfc	(DetectMovement@ADCresult+1)& (0+255),w,b
  3473  0012BE  0100               	movlb	0	; () banked
  3474  0012C0  6F90               	movwf	(DetectMovement@JoystickResult+1)& (0+255),b
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;Joystick.c: 55: if ((JoystickResult > 5) || (JoystickResult < -5))
  3478  0012C2  0100               	movlb	0	; () banked
  3479  0012C4  BF90               	btfsc	(DetectMovement@JoystickResult+1)& (0+255),7,b
  3480  0012C6  D008               	goto	l2782
  3481  0012C8  0100               	movlb	0	; () banked
  3482  0012CA  5190               	movf	(DetectMovement@JoystickResult+1)& (0+255),w,b
  3483  0012CC  E110               	bnz	l2784
  3484  0012CE  0E06               	movlw	6
  3485  0012D0  0100               	movlb	0	; () banked
  3486  0012D2  5D8F               	subwf	DetectMovement@JoystickResult& (0+255),w,b
  3487  0012D4  B0D8               	btfsc	status,0,c
  3488  0012D6  D00B               	goto	l2784
  3489  0012D8                     l2782:
  3490                           
  3491                           ; BSR set to: 0
  3492  0012D8  0100               	movlb	0	; () banked
  3493  0012DA  AF90               	btfss	(DetectMovement@JoystickResult+1)& (0+255),7,b
  3494  0012DC  D010               	goto	l2792
  3495  0012DE  0EFB               	movlw	251
  3496  0012E0  0100               	movlb	0	; () banked
  3497  0012E2  5D8F               	subwf	DetectMovement@JoystickResult& (0+255),w,b
  3498  0012E4  0EFF               	movlw	255
  3499  0012E6  0100               	movlb	0	; () banked
  3500  0012E8  5990               	subwfb	(DetectMovement@JoystickResult+1)& (0+255),w,b
  3501  0012EA  B0D8               	btfsc	status,0,c
  3502  0012EC  D008               	goto	l2792
  3503  0012EE                     l2784:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;Joystick.c: 56: {
  3507                           ;Joystick.c: 57: PIDEnableFlag = 0;
  3508  0012EE  0E00               	movlw	0
  3509  0012F0  0100               	movlb	0	; () banked
  3510  0012F2  6FC4               	movwf	_PIDEnableFlag& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;Joystick.c: 58: return JoystickResult;
  3514  0012F4  C08F  F08D         	movff	DetectMovement@JoystickResult,?_DetectMovement
  3515  0012F8  C090  F08E         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;Joystick.c: 59: }
  3519                           
  3520                           ; BSR set to: 0
  3521  0012FC  D006               	goto	l45
  3522  0012FE                     l2792:
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;Joystick.c: 60: else
  3526                           ;Joystick.c: 61: return 0;
  3527  0012FE  0E00               	movlw	0
  3528  001300  0100               	movlb	0	; () banked
  3529  001302  6F8E               	movwf	(?_DetectMovement+1)& (0+255),b
  3530  001304  0E00               	movlw	0
  3531  001306  6F8D               	movwf	?_DetectMovement& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534  001308  D000               	goto	l45
  3535  00130A                     l45:
  3536                           
  3537                           ; BSR set to: 0
  3538  00130A  0012               	return		;funcret
  3539  00130C                     __end_of_DetectMovement:
  3540                           	opt stack 0
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           intcon	equ	0xFF2
  3544                           intcon2	equ	0xFF1
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           indf2	equ	0xFDF
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _DetectJoystick *****************
  3553 ;; Defined at:
  3554 ;;		line 27 in file "Joystick.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;		None               void
  3561 ;; Registers used:
  3562 ;;		wreg, status,2
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    7
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text26
  3583  0018C8                     __ptext26:
  3584                           	opt stack 0
  3585  0018C8                     _DetectJoystick:
  3586                           	opt stack 23
  3587                           
  3588                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;incstack = 0
  3592  0018C8  B281               	btfsc	3969,1,c	;volatile
  3593  0018CA  D003               	goto	l33
  3594                           
  3595                           ;Joystick.c: 30: {
  3596                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  3597  0018CC  9480               	bcf	3968,2,c	;volatile
  3598                           
  3599                           ;Joystick.c: 32: JSEnableFlag = 0;
  3600  0018CE  0E00               	movlw	0
  3601  0018D0  D008               	goto	L2
  3602  0018D2                     l33:
  3603                           
  3604                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  3605  0018D2  A281               	btfss	3969,1,c	;volatile
  3606  0018D4  D009               	goto	l36
  3607  0018D6  0100               	movlb	0	; () banked
  3608  0018D8  51C3               	movf	_JSEnableFlag& (0+255),w,b
  3609  0018DA  A4D8               	btfss	status,2,c
  3610  0018DC  D005               	goto	l36
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Joystick.c: 36: {
  3614                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  3615  0018DE  8480               	bsf	3968,2,c	;volatile
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;Joystick.c: 38: JSEnableFlag = 1;
  3619  0018E0  0E01               	movlw	1
  3620  0018E2                     L2:
  3621  0018E2  0100               	movlb	0	; () banked
  3622  0018E4  6FC3               	movwf	_JSEnableFlag& (0+255),b
  3623                           
  3624                           ; BSR set to: 0
  3625  0018E6  D000               	goto	l36
  3626  0018E8                     l36:
  3627  0018E8  0012               	return		;funcret
  3628  0018EA                     __end_of_DetectJoystick:
  3629                           	opt stack 0
  3630                           prodh	equ	0xFF4
  3631                           prodl	equ	0xFF3
  3632                           intcon	equ	0xFF2
  3633                           intcon2	equ	0xFF1
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           indf2	equ	0xFDF
  3637                           fsr2h	equ	0xFDA
  3638                           fsr2l	equ	0xFD9
  3639                           status	equ	0xFD8
  3640                           
  3641 ;; *************** function _lISR *****************
  3642 ;; Defined at:
  3643 ;;		line 150 in file "RTDuC.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;		None               void
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;Total ram usage:       17 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    6
  3664 ;; This function calls:
  3665 ;;		_SPIInt
  3666 ;; This function is called by:
  3667 ;;		Interrupt level 1
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	intcodelo
  3672  000018                     __pintcodelo:
  3673                           	opt stack 0
  3674  000018                     _lISR:
  3675                           	opt stack 19
  3676                           
  3677                           ;incstack = 0
  3678  000018  CFD8 F001          	movff	status,??_lISR
  3679  00001C  CFE8 F002          	movff	wreg,??_lISR+1
  3680  000020  CFE0 F003          	movff	bsr,??_lISR+2
  3681  000024  CFFA F004          	movff	pclath,??_lISR+3
  3682  000028  CFFB F005          	movff	pclatu,??_lISR+4
  3683  00002C  CFE9 F006          	movff	fsr0l,??_lISR+5
  3684  000030  CFEA F007          	movff	fsr0h,??_lISR+6
  3685  000034  CFE1 F008          	movff	fsr1l,??_lISR+7
  3686  000038  CFE2 F009          	movff	fsr1h,??_lISR+8
  3687  00003C  CFD9 F00A          	movff	fsr2l,??_lISR+9
  3688  000040  CFDA F00B          	movff	fsr2h,??_lISR+10
  3689  000044  CFF3 F00C          	movff	prodl,??_lISR+11
  3690  000048  CFF4 F00D          	movff	prodh,??_lISR+12
  3691  00004C  CFF6 F00E          	movff	tblptrl,??_lISR+13
  3692  000050  CFF7 F00F          	movff	tblptrh,??_lISR+14
  3693  000054  CFF8 F010          	movff	tblptru,??_lISR+15
  3694  000058  CFF5 F011          	movff	tablat,??_lISR+16
  3695                           
  3696                           ;RTDuC.c: 152: if (PIR1bits.SSP1IF == 1)
  3697  00005C  A69E               	btfss	3998,3,c	;volatile
  3698  00005E  D003               	goto	i1l356
  3699                           
  3700                           ;RTDuC.c: 153: {
  3701                           ;RTDuC.c: 154: SPIInt();
  3702  000060  ECEC  F00C         	call	_SPIInt	;wreg free
  3703  000064  D000               	goto	i1l356
  3704  000066                     i1l356:
  3705  000066  C011  FFF5         	movff	??_lISR+16,tablat
  3706  00006A  C010  FFF8         	movff	??_lISR+15,tblptru
  3707  00006E  C00F  FFF7         	movff	??_lISR+14,tblptrh
  3708  000072  C00E  FFF6         	movff	??_lISR+13,tblptrl
  3709  000076  C00D  FFF4         	movff	??_lISR+12,prodh
  3710  00007A  C00C  FFF3         	movff	??_lISR+11,prodl
  3711  00007E  C00B  FFDA         	movff	??_lISR+10,fsr2h
  3712  000082  C00A  FFD9         	movff	??_lISR+9,fsr2l
  3713  000086  C009  FFE2         	movff	??_lISR+8,fsr1h
  3714  00008A  C008  FFE1         	movff	??_lISR+7,fsr1l
  3715  00008E  C007  FFEA         	movff	??_lISR+6,fsr0h
  3716  000092  C006  FFE9         	movff	??_lISR+5,fsr0l
  3717  000096  C005  FFFB         	movff	??_lISR+4,pclatu
  3718  00009A  C004  FFFA         	movff	??_lISR+3,pclath
  3719  00009E  C003  FFE0         	movff	??_lISR+2,bsr
  3720  0000A2  C002  FFE8         	movff	??_lISR+1,wreg
  3721  0000A6  C001  FFD8         	movff	??_lISR,status
  3722  0000AA  0010               	retfie	
  3723  0000AC                     __end_of_lISR:
  3724                           	opt stack 0
  3725                           pclatu	equ	0xFFB
  3726                           pclath	equ	0xFFA
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           intcon2	equ	0xFF1
  3735                           postinc0	equ	0xFEE
  3736                           fsr0h	equ	0xFEA
  3737                           fsr0l	equ	0xFE9
  3738                           wreg	equ	0xFE8
  3739                           fsr1h	equ	0xFE2
  3740                           fsr1l	equ	0xFE1
  3741                           bsr	equ	0xFE0
  3742                           indf2	equ	0xFDF
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _SPIInt *****************
  3748 ;; Defined at:
  3749 ;;		line 25 in file "SPISlave.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		wreg, status,2
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        0 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    5
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_lISR
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text28
  3778  0019D8                     __ptext28:
  3779                           	opt stack 0
  3780  0019D8                     _SPIInt:
  3781                           	opt stack 19
  3782                           
  3783                           ;SPISlave.c: 27: Command = SSP2BUF;
  3784                           
  3785                           ;incstack = 0
  3786  0019D8  CF66 F0C2          	movff	3942,_Command	;volatile
  3787                           
  3788                           ;SPISlave.c: 28: PORTCbits.RC6 = 0;
  3789  0019DC  9C82               	bcf	3970,6,c	;volatile
  3790                           
  3791                           ;SPISlave.c: 29: PIR1bits.SSP1IF = 0;
  3792  0019DE  969E               	bcf	3998,3,c	;volatile
  3793                           
  3794                           ;SPISlave.c: 30: PIE1bits.SSP1IE = 0;
  3795  0019E0  969D               	bcf	3997,3,c	;volatile
  3796                           
  3797                           ;SPISlave.c: 31: SPIflag = 1;
  3798  0019E2  0E01               	movlw	1
  3799  0019E4  0100               	movlb	0	; () banked
  3800  0019E6  6FC5               	movwf	_SPIflag& (0+255),b
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;SPISlave.c: 32: PIR1bits.SSP1IF = 0;
  3804  0019E8  969E               	bcf	3998,3,c	;volatile
  3805                           
  3806                           ; BSR set to: 0
  3807  0019EA  0012               	return		;funcret
  3808  0019EC                     __end_of_SPIInt:
  3809                           	opt stack 0
  3810                           pclatu	equ	0xFFB
  3811                           pclath	equ	0xFFA
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           intcon2	equ	0xFF1
  3820                           postinc0	equ	0xFEE
  3821                           fsr0h	equ	0xFEA
  3822                           fsr0l	equ	0xFE9
  3823                           wreg	equ	0xFE8
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           bsr	equ	0xFE0
  3827                           indf2	equ	0xFDF
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _hISR *****************
  3833 ;; Defined at:
  3834 ;;		line 112 in file "RTDuC.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:       16 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    4
  3855 ;; This function calls:
  3856 ;;		_HLVDInt
  3857 ;;		_INT0Int
  3858 ;;		_TMR0Int
  3859 ;; This function is called by:
  3860 ;;		Interrupt level 2
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	intcode
  3865  000008                     __pintcode:
  3866                           	opt stack 0
  3867  000008                     _hISR:
  3868                           	opt stack 19
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;incstack = 0
  3872  000008  CFFA F07F          	movff	pclath,??_hISR+2
  3873  00000C  CFFB F080          	movff	pclatu,??_hISR+3
  3874  000010  CFE9 F081          	movff	fsr0l,??_hISR+4
  3875  000014  ED94  F008         	call	int_func,f	;refresh shadow registers
  3876                           pclatu	equ	0xFFB
  3877                           pclath	equ	0xFFA
  3878                           tblptru	equ	0xFF8
  3879                           tblptrh	equ	0xFF7
  3880                           tblptrl	equ	0xFF6
  3881                           tablat	equ	0xFF5
  3882                           prodh	equ	0xFF4
  3883                           prodl	equ	0xFF3
  3884                           intcon	equ	0xFF2
  3885                           intcon2	equ	0xFF1
  3886                           postinc0	equ	0xFEE
  3887                           fsr0h	equ	0xFEA
  3888                           fsr0l	equ	0xFE9
  3889                           wreg	equ	0xFE8
  3890                           fsr1h	equ	0xFE2
  3891                           fsr1l	equ	0xFE1
  3892                           bsr	equ	0xFE0
  3893                           indf2	equ	0xFDF
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898                           	psect	intcode_body
  3899  001128                     __pintcode_body:
  3900                           	opt stack 19
  3901  001128                     int_func:
  3902                           	opt stack 19
  3903  001128  0006               	pop		; remove dummy address from shadow register refresh
  3904  00112A  CFEA F082          	movff	fsr0h,??_hISR+5
  3905  00112E  CFE1 F083          	movff	fsr1l,??_hISR+6
  3906  001132  CFE2 F084          	movff	fsr1h,??_hISR+7
  3907  001136  CFD9 F085          	movff	fsr2l,??_hISR+8
  3908  00113A  CFDA F086          	movff	fsr2h,??_hISR+9
  3909  00113E  CFF3 F087          	movff	prodl,??_hISR+10
  3910  001142  CFF4 F088          	movff	prodh,??_hISR+11
  3911  001146  CFF6 F089          	movff	tblptrl,??_hISR+12
  3912  00114A  CFF7 F08A          	movff	tblptrh,??_hISR+13
  3913  00114E  CFF8 F08B          	movff	tblptru,??_hISR+14
  3914  001152  CFF5 F08C          	movff	tablat,??_hISR+15
  3915                           
  3916                           ;RTDuC.c: 114: if ((INTCONbits.TMR0IF == 1) && ((PIDEnableFlag | 0x01) == 0x01))
  3917  001156  A4F2               	btfss	intcon,2,c	;volatile
  3918  001158  D013               	goto	i2l3220
  3919  00115A  0100               	movlb	0	; () banked
  3920  00115C  51C4               	movf	_PIDEnableFlag& (0+255),w,b
  3921  00115E  0100               	movlb	0	; () banked
  3922  001160  6F7D               	movwf	??_hISR& (0+255),b
  3923  001162  6B7E               	clrf	(??_hISR+1)& (0+255),b
  3924  001164  0E01               	movlw	1
  3925  001166  0100               	movlb	0	; () banked
  3926  001168  137D               	iorwf	??_hISR& (0+255),f,b
  3927  00116A  0E00               	movlw	0
  3928  00116C  137E               	iorwf	(??_hISR+1)& (0+255),f,b
  3929  00116E  0100               	movlb	0	; () banked
  3930  001170  057D               	decf	??_hISR& (0+255),w,b
  3931  001172  0100               	movlb	0	; () banked
  3932  001174  117E               	iorwf	(??_hISR+1)& (0+255),w,b
  3933  001176  A4D8               	btfss	status,2,c
  3934  001178  D003               	goto	i2l3220
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;RTDuC.c: 115: {
  3938                           ;RTDuC.c: 116: TMR0Int();
  3939  00117A  ECF9  F00A         	call	_TMR0Int	;wreg free
  3940  00117E  D000               	goto	i2l3220
  3941  001180                     i2l3220:
  3942                           
  3943                           ;RTDuC.c: 117: }
  3944                           ;RTDuC.c: 119: if (INTCONbits.INT0IF == 1)
  3945  001180  A2F2               	btfss	intcon,1,c	;volatile
  3946  001182  D003               	goto	i2l3224
  3947                           
  3948                           ;RTDuC.c: 120: {
  3949                           ;RTDuC.c: 121: INT0Int();
  3950  001184  EC0F  F00D         	call	_INT0Int	;wreg free
  3951  001188  D000               	goto	i2l3224
  3952  00118A                     i2l3224:
  3953                           
  3954                           ;RTDuC.c: 122: }
  3955                           ;RTDuC.c: 124: if (PIR2bits.HLVDIF == 1)
  3956  00118A  A4A1               	btfss	4001,2,c	;volatile
  3957  00118C  D006               	goto	i2l3230
  3958                           
  3959                           ;RTDuC.c: 125: {
  3960                           ;RTDuC.c: 126: PORTAbits.RA4 = 0;
  3961  00118E  9880               	bcf	3968,4,c	;volatile
  3962                           
  3963                           ;RTDuC.c: 127: PORTAbits.RA3 = 0;
  3964  001190  9680               	bcf	3968,3,c	;volatile
  3965                           
  3966                           ;RTDuC.c: 128: PORTAbits.RA2 = 0;
  3967  001192  9480               	bcf	3968,2,c	;volatile
  3968                           
  3969                           ;RTDuC.c: 129: HLVDInt();
  3970  001194  EC38  F008         	call	_HLVDInt	;wreg free
  3971  001198  D000               	goto	i2l3230
  3972  00119A                     i2l3230:
  3973                           
  3974                           ;RTDuC.c: 130: }
  3975                           ;RTDuC.c: 132: if (PIR2bits.OSCFIF == 1)
  3976  00119A  AEA1               	btfss	4001,7,c	;volatile
  3977  00119C  D002               	goto	i2l352
  3978  00119E  00FF               	reset		;# 
  3979  0011A0  D000               	goto	i2l352
  3980  0011A2                     i2l352:
  3981  0011A2  C08C  FFF5         	movff	??_hISR+15,tablat
  3982  0011A6  C08B  FFF8         	movff	??_hISR+14,tblptru
  3983  0011AA  C08A  FFF7         	movff	??_hISR+13,tblptrh
  3984  0011AE  C089  FFF6         	movff	??_hISR+12,tblptrl
  3985  0011B2  C088  FFF4         	movff	??_hISR+11,prodh
  3986  0011B6  C087  FFF3         	movff	??_hISR+10,prodl
  3987  0011BA  C086  FFDA         	movff	??_hISR+9,fsr2h
  3988  0011BE  C085  FFD9         	movff	??_hISR+8,fsr2l
  3989  0011C2  C084  FFE2         	movff	??_hISR+7,fsr1h
  3990  0011C6  C083  FFE1         	movff	??_hISR+6,fsr1l
  3991  0011CA  C082  FFEA         	movff	??_hISR+5,fsr0h
  3992  0011CE  C081  FFE9         	movff	??_hISR+4,fsr0l
  3993  0011D2  C080  FFFB         	movff	??_hISR+3,pclatu
  3994  0011D6  C07F  FFFA         	movff	??_hISR+2,pclath
  3995  0011DA  0011               	retfie		f
  3996  0011DC                     __end_of_hISR:
  3997                           	opt stack 0
  3998                           pclatu	equ	0xFFB
  3999                           pclath	equ	0xFFA
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon2	equ	0xFF1
  4008                           postinc0	equ	0xFEE
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           bsr	equ	0xFE0
  4015                           indf2	equ	0xFDF
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _TMR0Int *****************
  4021 ;; Defined at:
  4022 ;;		line 89 in file "PID.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;		None               void
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;Total ram usage:        0 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    3
  4043 ;; This function calls:
  4044 ;;		_ImplementPIDMotion
  4045 ;;		_RTD2Angle
  4046 ;;		_calculatePID
  4047 ;; This function is called by:
  4048 ;;		_hISR
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text30
  4053  0015F2                     __ptext30:
  4054                           	opt stack 0
  4055  0015F2                     _TMR0Int:
  4056                           	opt stack 19
  4057                           
  4058                           ;PID.c: 91: CurrentAngle = RTD2Angle(ReadRTDpos);
  4059                           
  4060                           ;incstack = 0
  4061  0015F2  0E00               	movlw	0
  4062  0015F4  6E39               	movwf	RTD2Angle@RTDAngle+1,c
  4063  0015F6  0E00               	movlw	0
  4064  0015F8  6E38               	movwf	RTD2Angle@RTDAngle,c
  4065  0015FA  ECA1  F00B         	call	_RTD2Angle	;wreg free
  4066  0015FE  C038  F0A0         	movff	?_RTD2Angle,_CurrentAngle
  4067  001602  C039  F0A1         	movff	?_RTD2Angle+1,_CurrentAngle+1
  4068  001606  C03A  F0A2         	movff	?_RTD2Angle+2,_CurrentAngle+2
  4069                           
  4070                           ;PID.c: 92: calculatePID(CurrentAngle, SetAngle);
  4071  00160A  C0A0  F06B         	movff	_CurrentAngle,calculatePID@angle
  4072  00160E  C0A1  F06C         	movff	_CurrentAngle+1,calculatePID@angle+1
  4073  001612  C0A2  F06D         	movff	_CurrentAngle+2,calculatePID@angle+2
  4074  001616  C0AF  F06E         	movff	_SetAngle,calculatePID@setpoint
  4075  00161A  C0B0  F06F         	movff	_SetAngle+1,calculatePID@setpoint+1
  4076  00161E  C0B1  F070         	movff	_SetAngle+2,calculatePID@setpoint+2
  4077  001622  EC58  F000         	call	_calculatePID	;wreg free
  4078                           
  4079                           ;PID.c: 93: ImplementPIDMotion(motorInput);
  4080  001626  C0C0  F016         	movff	_motorInput,ImplementPIDMotion@PIDValue
  4081  00162A  C0C1  F017         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  4082  00162E  EC2F  F00A         	call	_ImplementPIDMotion	;wreg free
  4083                           
  4084                           ;PID.c: 94: TMR0H = 0xDB;
  4085  001632  0EDB               	movlw	219
  4086  001634  6ED7               	movwf	4055,c	;volatile
  4087                           
  4088                           ;PID.c: 95: TMR0L = 0x60;
  4089  001636  0E60               	movlw	96
  4090  001638  6ED6               	movwf	4054,c	;volatile
  4091                           
  4092                           ;PID.c: 97: INTCONbits.TMR0IF = 0;
  4093  00163A  94F2               	bcf	intcon,2,c	;volatile
  4094  00163C  0012               	return		;funcret
  4095  00163E                     __end_of_TMR0Int:
  4096                           	opt stack 0
  4097                           pclatu	equ	0xFFB
  4098                           pclath	equ	0xFFA
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           intcon	equ	0xFF2
  4106                           intcon2	equ	0xFF1
  4107                           postinc0	equ	0xFEE
  4108                           fsr0h	equ	0xFEA
  4109                           fsr0l	equ	0xFE9
  4110                           wreg	equ	0xFE8
  4111                           fsr1h	equ	0xFE2
  4112                           fsr1l	equ	0xFE1
  4113                           bsr	equ	0xFE0
  4114                           indf2	equ	0xFDF
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _calculatePID *****************
  4120 ;; Defined at:
  4121 ;;		line 29 in file "PID.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  angle           3   11[BANK0 ] int 
  4124 ;;  setpoint        3   14[BANK0 ] int 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  derErr          3   17[BANK0 ] int 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;		None               void
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4136 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;Total ram usage:       18 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    2
  4143 ;; This function calls:
  4144 ;;		___ftadd
  4145 ;;		___ftdiv
  4146 ;;		___ftge
  4147 ;;		___ftmul
  4148 ;;		___ftneg
  4149 ;;		___fttol
  4150 ;; This function is called by:
  4151 ;;		_TMR0Int
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text31
  4156  0000B0                     __ptext31:
  4157                           	opt stack 0
  4158  0000B0                     _calculatePID:
  4159                           	opt stack 19
  4160                           
  4161                           ;PID.c: 31: double derErr;
  4162                           ;PID.c: 32: if((PIDEnableFlag & 0x02) == 0x02)
  4163                           
  4164                           ;incstack = 0
  4165  0000B0  0100               	movlb	0	; () banked
  4166  0000B2  A3C4               	btfss	_PIDEnableFlag& (0+255),1,b
  4167  0000B4  D027               	goto	i2l3152
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;PID.c: 33: {
  4171                           ;PID.c: 34: StartAngle = angle;
  4172  0000B6  C06B  F0B2         	movff	calculatePID@angle,_StartAngle
  4173  0000BA  C06C  F0B3         	movff	calculatePID@angle+1,_StartAngle+1
  4174  0000BE  C06D  F0B4         	movff	calculatePID@angle+2,_StartAngle+2
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;PID.c: 35: err = 0;
  4178  0000C2  0E00               	movlw	0
  4179  0000C4  0100               	movlb	0	; () banked
  4180  0000C6  6FB5               	movwf	_err& (0+255),b
  4181  0000C8  0E00               	movlw	0
  4182  0000CA  0100               	movlb	0	; () banked
  4183  0000CC  6FB6               	movwf	(_err+1)& (0+255),b
  4184  0000CE  0E00               	movlw	0
  4185  0000D0  0100               	movlb	0	; () banked
  4186  0000D2  6FB7               	movwf	(_err+2)& (0+255),b
  4187                           
  4188                           ;PID.c: 36: prevErr = 0;
  4189  0000D4  0E00               	movlw	0
  4190  0000D6  0100               	movlb	0	; () banked
  4191  0000D8  6FBB               	movwf	_prevErr& (0+255),b
  4192  0000DA  0E00               	movlw	0
  4193  0000DC  0100               	movlb	0	; () banked
  4194  0000DE  6FBC               	movwf	(_prevErr+1)& (0+255),b
  4195  0000E0  0E00               	movlw	0
  4196  0000E2  0100               	movlb	0	; () banked
  4197  0000E4  6FBD               	movwf	(_prevErr+2)& (0+255),b
  4198                           
  4199                           ;PID.c: 37: intErr = 0;
  4200  0000E6  0E00               	movlw	0
  4201  0000E8  0100               	movlb	0	; () banked
  4202  0000EA  6FB8               	movwf	_intErr& (0+255),b
  4203  0000EC  0E00               	movlw	0
  4204  0000EE  0100               	movlb	0	; () banked
  4205  0000F0  6FB9               	movwf	(_intErr+1)& (0+255),b
  4206  0000F2  0E00               	movlw	0
  4207  0000F4  0100               	movlb	0	; () banked
  4208  0000F6  6FBA               	movwf	(_intErr+2)& (0+255),b
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;PID.c: 38: PIDEnableFlag = PIDEnableFlag & 0x01;
  4212  0000F8  0100               	movlb	0	; () banked
  4213  0000FA  51C4               	movf	_PIDEnableFlag& (0+255),w,b
  4214  0000FC  0B01               	andlw	1
  4215  0000FE  0100               	movlb	0	; () banked
  4216  000100  6FC4               	movwf	_PIDEnableFlag& (0+255),b
  4217  000102  D000               	goto	i2l3152
  4218  000104                     i2l3152:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;PID.c: 39: }
  4222                           ;PID.c: 41: if(((StartAngle - setpoint) > 180) || ((StartAngle - setpoint) < -180))
  4223  000104  0E00               	movlw	0
  4224  000106  6E44               	movwf	___ftge@ff1,c
  4225  000108  0E34               	movlw	52
  4226  00010A  6E45               	movwf	___ftge@ff1+1,c
  4227  00010C  0E43               	movlw	67
  4228  00010E  6E46               	movwf	___ftge@ff1+2,c
  4229  000110  C0B2  F03B         	movff	_StartAngle,___ftadd@f2
  4230  000114  C0B3  F03C         	movff	_StartAngle+1,___ftadd@f2+1
  4231  000118  C0B4  F03D         	movff	_StartAngle+2,___ftadd@f2+2
  4232  00011C  C06E  F012         	movff	calculatePID@setpoint,___ftneg@f1
  4233  000120  C06F  F013         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4234  000124  C070  F014         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4235  000128  EC52  F00C         	call	___ftneg	;wreg free
  4236  00012C  C012  F038         	movff	?___ftneg,___ftadd@f1
  4237  000130  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4238  000134  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4239  000138  EC0D  F005         	call	___ftadd	;wreg free
  4240  00013C  C038  F047         	movff	?___ftadd,___ftge@ff2
  4241  000140  C039  F048         	movff	?___ftadd+1,___ftge@ff2+1
  4242  000144  C03A  F049         	movff	?___ftadd+2,___ftge@ff2+2
  4243  000148  ECEE  F008         	call	___ftge	;wreg free
  4244  00014C  A0D8               	btfss	status,0,c
  4245  00014E  D026               	goto	i2l3156
  4246  000150  C0B2  F03B         	movff	_StartAngle,___ftadd@f2
  4247  000154  C0B3  F03C         	movff	_StartAngle+1,___ftadd@f2+1
  4248  000158  C0B4  F03D         	movff	_StartAngle+2,___ftadd@f2+2
  4249  00015C  C06E  F012         	movff	calculatePID@setpoint,___ftneg@f1
  4250  000160  C06F  F013         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4251  000164  C070  F014         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4252  000168  EC52  F00C         	call	___ftneg	;wreg free
  4253  00016C  C012  F038         	movff	?___ftneg,___ftadd@f1
  4254  000170  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4255  000174  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4256  000178  EC0D  F005         	call	___ftadd	;wreg free
  4257  00017C  C038  F044         	movff	?___ftadd,___ftge@ff1
  4258  000180  C039  F045         	movff	?___ftadd+1,___ftge@ff1+1
  4259  000184  C03A  F046         	movff	?___ftadd+2,___ftge@ff1+2
  4260  000188  0E00               	movlw	0
  4261  00018A  6E47               	movwf	___ftge@ff2,c
  4262  00018C  0E34               	movlw	52
  4263  00018E  6E48               	movwf	___ftge@ff2+1,c
  4264  000190  0EC3               	movlw	195
  4265  000192  6E49               	movwf	___ftge@ff2+2,c
  4266  000194  ECEE  F008         	call	___ftge	;wreg free
  4267  000198  B0D8               	btfsc	status,0,c
  4268  00019A  D0F2               	goto	i2l3172
  4269  00019C                     i2l3156:
  4270                           
  4271                           ;PID.c: 42: {
  4272                           ;PID.c: 43: if((StartAngle - setpoint) > 180)
  4273  00019C  0E00               	movlw	0
  4274  00019E  6E44               	movwf	___ftge@ff1,c
  4275  0001A0  0E34               	movlw	52
  4276  0001A2  6E45               	movwf	___ftge@ff1+1,c
  4277  0001A4  0E43               	movlw	67
  4278  0001A6  6E46               	movwf	___ftge@ff1+2,c
  4279  0001A8  C0B2  F03B         	movff	_StartAngle,___ftadd@f2
  4280  0001AC  C0B3  F03C         	movff	_StartAngle+1,___ftadd@f2+1
  4281  0001B0  C0B4  F03D         	movff	_StartAngle+2,___ftadd@f2+2
  4282  0001B4  C06E  F012         	movff	calculatePID@setpoint,___ftneg@f1
  4283  0001B8  C06F  F013         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4284  0001BC  C070  F014         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4285  0001C0  EC52  F00C         	call	___ftneg	;wreg free
  4286  0001C4  C012  F038         	movff	?___ftneg,___ftadd@f1
  4287  0001C8  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4288  0001CC  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4289  0001D0  EC0D  F005         	call	___ftadd	;wreg free
  4290  0001D4  C038  F047         	movff	?___ftadd,___ftge@ff2
  4291  0001D8  C039  F048         	movff	?___ftadd+1,___ftge@ff2+1
  4292  0001DC  C03A  F049         	movff	?___ftadd+2,___ftge@ff2+2
  4293  0001E0  ECEE  F008         	call	___ftge	;wreg free
  4294  0001E4  B0D8               	btfsc	status,0,c
  4295  0001E6  D053               	goto	i2l3164
  4296                           
  4297                           ;PID.c: 44: {
  4298                           ;PID.c: 45: if(angle > StartAngle)
  4299  0001E8  C0B2  F044         	movff	_StartAngle,___ftge@ff1
  4300  0001EC  C0B3  F045         	movff	_StartAngle+1,___ftge@ff1+1
  4301  0001F0  C0B4  F046         	movff	_StartAngle+2,___ftge@ff1+2
  4302  0001F4  C06B  F047         	movff	calculatePID@angle,___ftge@ff2
  4303  0001F8  C06C  F048         	movff	calculatePID@angle+1,___ftge@ff2+1
  4304  0001FC  C06D  F049         	movff	calculatePID@angle+2,___ftge@ff2+2
  4305  000200  ECEE  F008         	call	___ftge	;wreg free
  4306  000204  B0D8               	btfsc	status,0,c
  4307  000206  D02B               	goto	i2l3162
  4308                           
  4309                           ;PID.c: 46: err = 360 - angle + setpoint;
  4310  000208  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4311  00020C  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4312  000210  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4313  000214  C06B  F012         	movff	calculatePID@angle,___ftneg@f1
  4314  000218  C06C  F013         	movff	calculatePID@angle+1,___ftneg@f1+1
  4315  00021C  C06D  F014         	movff	calculatePID@angle+2,___ftneg@f1+2
  4316  000220  EC52  F00C         	call	___ftneg	;wreg free
  4317  000224  C012  F038         	movff	?___ftneg,___ftadd@f1
  4318  000228  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4319  00022C  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4320  000230  EC0D  F005         	call	___ftadd	;wreg free
  4321  000234  C038  F07A         	movff	?___ftadd,_calculatePID$3534
  4322  000238  C039  F07B         	movff	?___ftadd+1,_calculatePID$3534+1
  4323  00023C  C03A  F07C         	movff	?___ftadd+2,_calculatePID$3534+2
  4324                           
  4325                           ;PID.c: 46: err = 360 - angle + setpoint;
  4326  000240  C07A  F038         	movff	_calculatePID$3534,___ftadd@f1
  4327  000244  C07B  F039         	movff	_calculatePID$3534+1,___ftadd@f1+1
  4328  000248  C07C  F03A         	movff	_calculatePID$3534+2,___ftadd@f1+2
  4329  00024C  0E00               	movlw	0
  4330  00024E  6E3B               	movwf	___ftadd@f2,c
  4331  000250  0EB4               	movlw	180
  4332  000252  6E3C               	movwf	___ftadd@f2+1,c
  4333  000254  0E43               	movlw	67
  4334  000256  6E3D               	movwf	___ftadd@f2+2,c
  4335  000258  EC0D  F005         	call	___ftadd	;wreg free
  4336  00025C  D1FD               	goto	L9
  4337  00025E                     i2l3162:
  4338                           
  4339                           ;PID.c: 47: else
  4340                           ;PID.c: 48: err = setpoint - angle;
  4341  00025E  C06B  F012         	movff	calculatePID@angle,___ftneg@f1
  4342  000262  C06C  F013         	movff	calculatePID@angle+1,___ftneg@f1+1
  4343  000266  C06D  F014         	movff	calculatePID@angle+2,___ftneg@f1+2
  4344  00026A  EC52  F00C         	call	___ftneg	;wreg free
  4345  00026E  C012  F038         	movff	?___ftneg,___ftadd@f1
  4346  000272  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4347  000276  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4348  00027A  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4349  00027E  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4350  000282  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4351  000286  EC0D  F005         	call	___ftadd	;wreg free
  4352  00028A  D1E6               	goto	L9
  4353                           
  4354                           ;PID.c: 49: }
  4355  00028C  D1EC               	goto	i2l158
  4356  00028E                     i2l3164:
  4357                           
  4358                           ;PID.c: 50: else if((StartAngle - setpoint) < -180)
  4359  00028E  C0B2  F03B         	movff	_StartAngle,___ftadd@f2
  4360  000292  C0B3  F03C         	movff	_StartAngle+1,___ftadd@f2+1
  4361  000296  C0B4  F03D         	movff	_StartAngle+2,___ftadd@f2+2
  4362  00029A  C06E  F012         	movff	calculatePID@setpoint,___ftneg@f1
  4363  00029E  C06F  F013         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4364  0002A2  C070  F014         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4365  0002A6  EC52  F00C         	call	___ftneg	;wreg free
  4366  0002AA  C012  F038         	movff	?___ftneg,___ftadd@f1
  4367  0002AE  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4368  0002B2  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4369  0002B6  EC0D  F005         	call	___ftadd	;wreg free
  4370  0002BA  C038  F044         	movff	?___ftadd,___ftge@ff1
  4371  0002BE  C039  F045         	movff	?___ftadd+1,___ftge@ff1+1
  4372  0002C2  C03A  F046         	movff	?___ftadd+2,___ftge@ff1+2
  4373  0002C6  0E00               	movlw	0
  4374  0002C8  6E47               	movwf	___ftge@ff2,c
  4375  0002CA  0E34               	movlw	52
  4376  0002CC  6E48               	movwf	___ftge@ff2+1,c
  4377  0002CE  0EC3               	movlw	195
  4378  0002D0  6E49               	movwf	___ftge@ff2+2,c
  4379  0002D2  ECEE  F008         	call	___ftge	;wreg free
  4380  0002D6  B0D8               	btfsc	status,0,c
  4381  0002D8  D1C6               	goto	i2l158
  4382                           
  4383                           ;PID.c: 51: {
  4384                           ;PID.c: 52: if(angle < StartAngle)
  4385  0002DA  C06B  F044         	movff	calculatePID@angle,___ftge@ff1
  4386  0002DE  C06C  F045         	movff	calculatePID@angle+1,___ftge@ff1+1
  4387  0002E2  C06D  F046         	movff	calculatePID@angle+2,___ftge@ff1+2
  4388  0002E6  C0B2  F047         	movff	_StartAngle,___ftge@ff2
  4389  0002EA  C0B3  F048         	movff	_StartAngle+1,___ftge@ff2+1
  4390  0002EE  C0B4  F049         	movff	_StartAngle+2,___ftge@ff2+2
  4391  0002F2  ECEE  F008         	call	___ftge	;wreg free
  4392  0002F6  B0D8               	btfsc	status,0,c
  4393  0002F8  D02B               	goto	i2l3170
  4394                           
  4395                           ;PID.c: 53: err = setpoint - 360 - angle;
  4396  0002FA  0E00               	movlw	0
  4397  0002FC  6E3B               	movwf	___ftadd@f2,c
  4398  0002FE  0EB4               	movlw	180
  4399  000300  6E3C               	movwf	___ftadd@f2+1,c
  4400  000302  0E43               	movlw	67
  4401  000304  6E3D               	movwf	___ftadd@f2+2,c
  4402  000306  C06B  F038         	movff	calculatePID@angle,___ftadd@f1
  4403  00030A  C06C  F039         	movff	calculatePID@angle+1,___ftadd@f1+1
  4404  00030E  C06D  F03A         	movff	calculatePID@angle+2,___ftadd@f1+2
  4405  000312  EC0D  F005         	call	___ftadd	;wreg free
  4406  000316  C038  F012         	movff	?___ftadd,___ftneg@f1
  4407  00031A  C039  F013         	movff	?___ftadd+1,___ftneg@f1+1
  4408  00031E  C03A  F014         	movff	?___ftadd+2,___ftneg@f1+2
  4409  000322  EC52  F00C         	call	___ftneg	;wreg free
  4410  000326  C012  F07A         	movff	?___ftneg,_calculatePID$3534
  4411  00032A  C013  F07B         	movff	?___ftneg+1,_calculatePID$3534+1
  4412  00032E  C014  F07C         	movff	?___ftneg+2,_calculatePID$3534+2
  4413                           
  4414                           ;PID.c: 53: err = setpoint - 360 - angle;
  4415  000332  C07A  F038         	movff	_calculatePID$3534,___ftadd@f1
  4416  000336  C07B  F039         	movff	_calculatePID$3534+1,___ftadd@f1+1
  4417  00033A  C07C  F03A         	movff	_calculatePID$3534+2,___ftadd@f1+2
  4418  00033E  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4419  000342  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4420  000346  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4421  00034A  EC0D  F005         	call	___ftadd	;wreg free
  4422  00034E  D184               	goto	L9
  4423  000350                     i2l3170:
  4424                           
  4425                           ;PID.c: 54: else
  4426                           ;PID.c: 55: err = setpoint - angle;
  4427  000350  C06B  F012         	movff	calculatePID@angle,___ftneg@f1
  4428  000354  C06C  F013         	movff	calculatePID@angle+1,___ftneg@f1+1
  4429  000358  C06D  F014         	movff	calculatePID@angle+2,___ftneg@f1+2
  4430  00035C  EC52  F00C         	call	___ftneg	;wreg free
  4431  000360  C012  F038         	movff	?___ftneg,___ftadd@f1
  4432  000364  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4433  000368  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4434  00036C  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4435  000370  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4436  000374  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4437  000378  EC0D  F005         	call	___ftadd	;wreg free
  4438  00037C  D16D               	goto	L9
  4439                           
  4440                           ;PID.c: 56: }
  4441                           ;PID.c: 57: }
  4442  00037E  D173               	goto	i2l158
  4443  000380                     i2l3172:
  4444                           
  4445                           ;PID.c: 58: else if(((StartAngle - setpoint) <= 180) && ((StartAngle - setpoint) > -180)
      +                          )
  4446  000380  0E00               	movlw	0
  4447  000382  6E44               	movwf	___ftge@ff1,c
  4448  000384  0E34               	movlw	52
  4449  000386  6E45               	movwf	___ftge@ff1+1,c
  4450  000388  0E43               	movlw	67
  4451  00038A  6E46               	movwf	___ftge@ff1+2,c
  4452  00038C  C0B2  F03B         	movff	_StartAngle,___ftadd@f2
  4453  000390  C0B3  F03C         	movff	_StartAngle+1,___ftadd@f2+1
  4454  000394  C0B4  F03D         	movff	_StartAngle+2,___ftadd@f2+2
  4455  000398  C06E  F012         	movff	calculatePID@setpoint,___ftneg@f1
  4456  00039C  C06F  F013         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4457  0003A0  C070  F014         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4458  0003A4  EC52  F00C         	call	___ftneg	;wreg free
  4459  0003A8  C012  F038         	movff	?___ftneg,___ftadd@f1
  4460  0003AC  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4461  0003B0  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4462  0003B4  EC0D  F005         	call	___ftadd	;wreg free
  4463  0003B8  C038  F047         	movff	?___ftadd,___ftge@ff2
  4464  0003BC  C039  F048         	movff	?___ftadd+1,___ftge@ff2+1
  4465  0003C0  C03A  F049         	movff	?___ftadd+2,___ftge@ff2+2
  4466  0003C4  ECEE  F008         	call	___ftge	;wreg free
  4467  0003C8  A0D8               	btfss	status,0,c
  4468  0003CA  D14D               	goto	i2l158
  4469  0003CC  0E00               	movlw	0
  4470  0003CE  6E44               	movwf	___ftge@ff1,c
  4471  0003D0  0E34               	movlw	52
  4472  0003D2  6E45               	movwf	___ftge@ff1+1,c
  4473  0003D4  0EC3               	movlw	195
  4474  0003D6  6E46               	movwf	___ftge@ff1+2,c
  4475  0003D8  C0B2  F03B         	movff	_StartAngle,___ftadd@f2
  4476  0003DC  C0B3  F03C         	movff	_StartAngle+1,___ftadd@f2+1
  4477  0003E0  C0B4  F03D         	movff	_StartAngle+2,___ftadd@f2+2
  4478  0003E4  C06E  F012         	movff	calculatePID@setpoint,___ftneg@f1
  4479  0003E8  C06F  F013         	movff	calculatePID@setpoint+1,___ftneg@f1+1
  4480  0003EC  C070  F014         	movff	calculatePID@setpoint+2,___ftneg@f1+2
  4481  0003F0  EC52  F00C         	call	___ftneg	;wreg free
  4482  0003F4  C012  F038         	movff	?___ftneg,___ftadd@f1
  4483  0003F8  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4484  0003FC  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4485  000400  EC0D  F005         	call	___ftadd	;wreg free
  4486  000404  C038  F047         	movff	?___ftadd,___ftge@ff2
  4487  000408  C039  F048         	movff	?___ftadd+1,___ftge@ff2+1
  4488  00040C  C03A  F049         	movff	?___ftadd+2,___ftge@ff2+2
  4489  000410  ECEE  F008         	call	___ftge	;wreg free
  4490  000414  B0D8               	btfsc	status,0,c
  4491  000416  D127               	goto	i2l158
  4492                           
  4493                           ;PID.c: 59: {
  4494                           ;PID.c: 60: if(((setpoint - StartAngle) > -180) && (setpoint - StartAngle < 0))
  4495  000418  0E00               	movlw	0
  4496  00041A  6E44               	movwf	___ftge@ff1,c
  4497  00041C  0E34               	movlw	52
  4498  00041E  6E45               	movwf	___ftge@ff1+1,c
  4499  000420  0EC3               	movlw	195
  4500  000422  6E46               	movwf	___ftge@ff1+2,c
  4501  000424  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4502  000428  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4503  00042C  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4504  000430  C0B2  F012         	movff	_StartAngle,___ftneg@f1
  4505  000434  C0B3  F013         	movff	_StartAngle+1,___ftneg@f1+1
  4506  000438  C0B4  F014         	movff	_StartAngle+2,___ftneg@f1+2
  4507  00043C  EC52  F00C         	call	___ftneg	;wreg free
  4508  000440  C012  F038         	movff	?___ftneg,___ftadd@f1
  4509  000444  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4510  000448  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4511  00044C  EC0D  F005         	call	___ftadd	;wreg free
  4512  000450  C038  F047         	movff	?___ftadd,___ftge@ff2
  4513  000454  C039  F048         	movff	?___ftadd+1,___ftge@ff2+1
  4514  000458  C03A  F049         	movff	?___ftadd+2,___ftge@ff2+2
  4515  00045C  ECEE  F008         	call	___ftge	;wreg free
  4516  000460  B0D8               	btfsc	status,0,c
  4517  000462  D06B               	goto	i2l3186
  4518  000464  C0B2  F012         	movff	_StartAngle,___ftneg@f1
  4519  000468  C0B3  F013         	movff	_StartAngle+1,___ftneg@f1+1
  4520  00046C  C0B4  F014         	movff	_StartAngle+2,___ftneg@f1+2
  4521  000470  EC52  F00C         	call	___ftneg	;wreg free
  4522  000474  C012  F038         	movff	?___ftneg,___ftadd@f1
  4523  000478  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4524  00047C  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4525  000480  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4526  000484  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4527  000488  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4528  00048C  EC0D  F005         	call	___ftadd	;wreg free
  4529  000490  AE3A               	btfss	?___ftadd+2,7,c
  4530  000492  D053               	goto	i2l3186
  4531                           
  4532                           ;PID.c: 61: {
  4533                           ;PID.c: 62: if(angle <= StartAngle)
  4534  000494  C0B2  F044         	movff	_StartAngle,___ftge@ff1
  4535  000498  C0B3  F045         	movff	_StartAngle+1,___ftge@ff1+1
  4536  00049C  C0B4  F046         	movff	_StartAngle+2,___ftge@ff1+2
  4537  0004A0  C06B  F047         	movff	calculatePID@angle,___ftge@ff2
  4538  0004A4  C06C  F048         	movff	calculatePID@angle+1,___ftge@ff2+1
  4539  0004A8  C06D  F049         	movff	calculatePID@angle+2,___ftge@ff2+2
  4540  0004AC  ECEE  F008         	call	___ftge	;wreg free
  4541  0004B0  A0D8               	btfss	status,0,c
  4542  0004B2  D017               	goto	i2l3184
  4543                           
  4544                           ;PID.c: 63: err = setpoint - angle;
  4545  0004B4  C06B  F012         	movff	calculatePID@angle,___ftneg@f1
  4546  0004B8  C06C  F013         	movff	calculatePID@angle+1,___ftneg@f1+1
  4547  0004BC  C06D  F014         	movff	calculatePID@angle+2,___ftneg@f1+2
  4548  0004C0  EC52  F00C         	call	___ftneg	;wreg free
  4549  0004C4  C012  F038         	movff	?___ftneg,___ftadd@f1
  4550  0004C8  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4551  0004CC  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4552  0004D0  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4553  0004D4  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4554  0004D8  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4555  0004DC  EC0D  F005         	call	___ftadd	;wreg free
  4556  0004E0  D0BB               	goto	L9
  4557  0004E2                     i2l3184:
  4558                           
  4559                           ;PID.c: 64: else
  4560                           ;PID.c: 65: err = setpoint + 360 - angle;
  4561  0004E2  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4562  0004E6  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4563  0004EA  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4564  0004EE  C06B  F012         	movff	calculatePID@angle,___ftneg@f1
  4565  0004F2  C06C  F013         	movff	calculatePID@angle+1,___ftneg@f1+1
  4566  0004F6  C06D  F014         	movff	calculatePID@angle+2,___ftneg@f1+2
  4567  0004FA  EC52  F00C         	call	___ftneg	;wreg free
  4568  0004FE  C012  F038         	movff	?___ftneg,___ftadd@f1
  4569  000502  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4570  000506  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4571  00050A  EC0D  F005         	call	___ftadd	;wreg free
  4572  00050E  C038  F07A         	movff	?___ftadd,_calculatePID$3534
  4573  000512  C039  F07B         	movff	?___ftadd+1,_calculatePID$3534+1
  4574  000516  C03A  F07C         	movff	?___ftadd+2,_calculatePID$3534+2
  4575                           
  4576                           ;PID.c: 64: else
  4577                           ;PID.c: 65: err = setpoint + 360 - angle;
  4578  00051A  C07A  F038         	movff	_calculatePID$3534,___ftadd@f1
  4579  00051E  C07B  F039         	movff	_calculatePID$3534+1,___ftadd@f1+1
  4580  000522  C07C  F03A         	movff	_calculatePID$3534+2,___ftadd@f1+2
  4581  000526  0E00               	movlw	0
  4582  000528  6E3B               	movwf	___ftadd@f2,c
  4583  00052A  0EB4               	movlw	180
  4584  00052C  6E3C               	movwf	___ftadd@f2+1,c
  4585  00052E  0E43               	movlw	67
  4586  000530  6E3D               	movwf	___ftadd@f2+2,c
  4587  000532  EC0D  F005         	call	___ftadd	;wreg free
  4588  000536  D090               	goto	L9
  4589                           
  4590                           ;PID.c: 66: }
  4591  000538  D096               	goto	i2l158
  4592  00053A                     i2l3186:
  4593                           
  4594                           ;PID.c: 67: else if(((setpoint - StartAngle) < 180) && (setpoint - StartAngle >= 0))
  4595  00053A  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4596  00053E  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4597  000542  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4598  000546  C0B2  F012         	movff	_StartAngle,___ftneg@f1
  4599  00054A  C0B3  F013         	movff	_StartAngle+1,___ftneg@f1+1
  4600  00054E  C0B4  F014         	movff	_StartAngle+2,___ftneg@f1+2
  4601  000552  EC52  F00C         	call	___ftneg	;wreg free
  4602  000556  C012  F038         	movff	?___ftneg,___ftadd@f1
  4603  00055A  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4604  00055E  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4605  000562  EC0D  F005         	call	___ftadd	;wreg free
  4606  000566  C038  F044         	movff	?___ftadd,___ftge@ff1
  4607  00056A  C039  F045         	movff	?___ftadd+1,___ftge@ff1+1
  4608  00056E  C03A  F046         	movff	?___ftadd+2,___ftge@ff1+2
  4609  000572  0E00               	movlw	0
  4610  000574  6E47               	movwf	___ftge@ff2,c
  4611  000576  0E34               	movlw	52
  4612  000578  6E48               	movwf	___ftge@ff2+1,c
  4613  00057A  0E43               	movlw	67
  4614  00057C  6E49               	movwf	___ftge@ff2+2,c
  4615  00057E  ECEE  F008         	call	___ftge	;wreg free
  4616  000582  B0D8               	btfsc	status,0,c
  4617  000584  D070               	goto	i2l158
  4618  000586  C0B2  F012         	movff	_StartAngle,___ftneg@f1
  4619  00058A  C0B3  F013         	movff	_StartAngle+1,___ftneg@f1+1
  4620  00058E  C0B4  F014         	movff	_StartAngle+2,___ftneg@f1+2
  4621  000592  EC52  F00C         	call	___ftneg	;wreg free
  4622  000596  C012  F038         	movff	?___ftneg,___ftadd@f1
  4623  00059A  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4624  00059E  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4625  0005A2  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4626  0005A6  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4627  0005AA  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4628  0005AE  EC0D  F005         	call	___ftadd	;wreg free
  4629  0005B2  BE3A               	btfsc	?___ftadd+2,7,c
  4630  0005B4  D058               	goto	i2l158
  4631                           
  4632                           ;PID.c: 68: {
  4633                           ;PID.c: 69: if(angle <= StartAngle)
  4634  0005B6  C0B2  F044         	movff	_StartAngle,___ftge@ff1
  4635  0005BA  C0B3  F045         	movff	_StartAngle+1,___ftge@ff1+1
  4636  0005BE  C0B4  F046         	movff	_StartAngle+2,___ftge@ff1+2
  4637  0005C2  C06B  F047         	movff	calculatePID@angle,___ftge@ff2
  4638  0005C6  C06C  F048         	movff	calculatePID@angle+1,___ftge@ff2+1
  4639  0005CA  C06D  F049         	movff	calculatePID@angle+2,___ftge@ff2+2
  4640  0005CE  ECEE  F008         	call	___ftge	;wreg free
  4641  0005D2  A0D8               	btfss	status,0,c
  4642  0005D4  D017               	goto	i2l3194
  4643                           
  4644                           ;PID.c: 70: err = setpoint - angle;
  4645  0005D6  C06B  F012         	movff	calculatePID@angle,___ftneg@f1
  4646  0005DA  C06C  F013         	movff	calculatePID@angle+1,___ftneg@f1+1
  4647  0005DE  C06D  F014         	movff	calculatePID@angle+2,___ftneg@f1+2
  4648  0005E2  EC52  F00C         	call	___ftneg	;wreg free
  4649  0005E6  C012  F038         	movff	?___ftneg,___ftadd@f1
  4650  0005EA  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4651  0005EE  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4652  0005F2  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4653  0005F6  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4654  0005FA  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4655  0005FE  EC0D  F005         	call	___ftadd	;wreg free
  4656  000602  D02A               	goto	L9
  4657  000604                     i2l3194:
  4658                           
  4659                           ;PID.c: 71: else
  4660                           ;PID.c: 72: err = setpoint - 360 - angle;
  4661  000604  0E00               	movlw	0
  4662  000606  6E3B               	movwf	___ftadd@f2,c
  4663  000608  0EB4               	movlw	180
  4664  00060A  6E3C               	movwf	___ftadd@f2+1,c
  4665  00060C  0E43               	movlw	67
  4666  00060E  6E3D               	movwf	___ftadd@f2+2,c
  4667  000610  C06B  F038         	movff	calculatePID@angle,___ftadd@f1
  4668  000614  C06C  F039         	movff	calculatePID@angle+1,___ftadd@f1+1
  4669  000618  C06D  F03A         	movff	calculatePID@angle+2,___ftadd@f1+2
  4670  00061C  EC0D  F005         	call	___ftadd	;wreg free
  4671  000620  C038  F012         	movff	?___ftadd,___ftneg@f1
  4672  000624  C039  F013         	movff	?___ftadd+1,___ftneg@f1+1
  4673  000628  C03A  F014         	movff	?___ftadd+2,___ftneg@f1+2
  4674  00062C  EC52  F00C         	call	___ftneg	;wreg free
  4675  000630  C012  F07A         	movff	?___ftneg,_calculatePID$3534
  4676  000634  C013  F07B         	movff	?___ftneg+1,_calculatePID$3534+1
  4677  000638  C014  F07C         	movff	?___ftneg+2,_calculatePID$3534+2
  4678                           
  4679                           ;PID.c: 71: else
  4680                           ;PID.c: 72: err = setpoint - 360 - angle;
  4681  00063C  C07A  F038         	movff	_calculatePID$3534,___ftadd@f1
  4682  000640  C07B  F039         	movff	_calculatePID$3534+1,___ftadd@f1+1
  4683  000644  C07C  F03A         	movff	_calculatePID$3534+2,___ftadd@f1+2
  4684  000648  C06E  F03B         	movff	calculatePID@setpoint,___ftadd@f2
  4685  00064C  C06F  F03C         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  4686  000650  C070  F03D         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  4687  000654  EC0D  F005         	call	___ftadd	;wreg free
  4688  000658                     L9:
  4689  000658  C038  F0B5         	movff	?___ftadd,_err
  4690  00065C  C039  F0B6         	movff	?___ftadd+1,_err+1
  4691  000660  C03A  F0B7         	movff	?___ftadd+2,_err+2
  4692  000664  D000               	goto	i2l158
  4693  000666                     i2l158:
  4694                           
  4695                           ;PID.c: 73: }
  4696                           ;PID.c: 74: }
  4697                           ;PID.c: 76: intErr = err + prevErr;
  4698  000666  C0B5  F038         	movff	_err,___ftadd@f1
  4699  00066A  C0B6  F039         	movff	_err+1,___ftadd@f1+1
  4700  00066E  C0B7  F03A         	movff	_err+2,___ftadd@f1+2
  4701  000672  C0BB  F03B         	movff	_prevErr,___ftadd@f2
  4702  000676  C0BC  F03C         	movff	_prevErr+1,___ftadd@f2+1
  4703  00067A  C0BD  F03D         	movff	_prevErr+2,___ftadd@f2+2
  4704  00067E  EC0D  F005         	call	___ftadd	;wreg free
  4705  000682  C038  F0B8         	movff	?___ftadd,_intErr
  4706  000686  C039  F0B9         	movff	?___ftadd+1,_intErr+1
  4707  00068A  C03A  F0BA         	movff	?___ftadd+2,_intErr+2
  4708                           
  4709                           ;PID.c: 77: derErr = err - prevErr;
  4710  00068E  C0BB  F012         	movff	_prevErr,___ftneg@f1
  4711  000692  C0BC  F013         	movff	_prevErr+1,___ftneg@f1+1
  4712  000696  C0BD  F014         	movff	_prevErr+2,___ftneg@f1+2
  4713  00069A  EC52  F00C         	call	___ftneg	;wreg free
  4714  00069E  C012  F038         	movff	?___ftneg,___ftadd@f1
  4715  0006A2  C013  F039         	movff	?___ftneg+1,___ftadd@f1+1
  4716  0006A6  C014  F03A         	movff	?___ftneg+2,___ftadd@f1+2
  4717  0006AA  C0B5  F03B         	movff	_err,___ftadd@f2
  4718  0006AE  C0B6  F03C         	movff	_err+1,___ftadd@f2+1
  4719  0006B2  C0B7  F03D         	movff	_err+2,___ftadd@f2+2
  4720  0006B6  EC0D  F005         	call	___ftadd	;wreg free
  4721  0006BA  C038  F071         	movff	?___ftadd,calculatePID@derErr
  4722  0006BE  C039  F072         	movff	?___ftadd+1,calculatePID@derErr+1
  4723  0006C2  C03A  F073         	movff	?___ftadd+2,calculatePID@derErr+2
  4724                           
  4725                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  4726  0006C6  C0B8  F02C         	movff	_intErr,___ftmul@f2
  4727  0006CA  C0B9  F02D         	movff	_intErr+1,___ftmul@f2+1
  4728  0006CE  C0BA  F02E         	movff	_intErr+2,___ftmul@f2+2
  4729  0006D2  C0A9  F029         	movff	_Ki,___ftmul@f1
  4730  0006D6  C0AA  F02A         	movff	_Ki+1,___ftmul@f1+1
  4731  0006DA  C0AB  F02B         	movff	_Ki+2,___ftmul@f1+2
  4732  0006DE  EC7F  F006         	call	___ftmul	;wreg free
  4733  0006E2  C029  F074         	movff	?___ftmul,_calculatePID$3535
  4734  0006E6  C02A  F075         	movff	?___ftmul+1,_calculatePID$3535+1
  4735  0006EA  C02B  F076         	movff	?___ftmul+2,_calculatePID$3535+2
  4736                           
  4737                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  4738  0006EE  0EC3               	movlw	195
  4739  0006F0  6E2C               	movwf	___ftmul@f2,c
  4740  0006F2  0EF5               	movlw	245
  4741  0006F4  6E2D               	movwf	___ftmul@f2+1,c
  4742  0006F6  0E3C               	movlw	60
  4743  0006F8  6E2E               	movwf	___ftmul@f2+2,c
  4744  0006FA  C074  F029         	movff	_calculatePID$3535,___ftmul@f1
  4745  0006FE  C075  F02A         	movff	_calculatePID$3535+1,___ftmul@f1+1
  4746  000702  C076  F02B         	movff	_calculatePID$3535+2,___ftmul@f1+2
  4747  000706  EC7F  F006         	call	___ftmul	;wreg free
  4748  00070A  C029  F03B         	movff	?___ftmul,___ftadd@f2
  4749  00070E  C02A  F03C         	movff	?___ftmul+1,___ftadd@f2+1
  4750  000712  C02B  F03D         	movff	?___ftmul+2,___ftadd@f2+2
  4751  000716  C0B5  F02C         	movff	_err,___ftmul@f2
  4752  00071A  C0B6  F02D         	movff	_err+1,___ftmul@f2+1
  4753  00071E  C0B7  F02E         	movff	_err+2,___ftmul@f2+2
  4754  000722  C0AC  F029         	movff	_Kp,___ftmul@f1
  4755  000726  C0AD  F02A         	movff	_Kp+1,___ftmul@f1+1
  4756  00072A  C0AE  F02B         	movff	_Kp+2,___ftmul@f1+2
  4757  00072E  EC7F  F006         	call	___ftmul	;wreg free
  4758  000732  C029  F038         	movff	?___ftmul,___ftadd@f1
  4759  000736  C02A  F039         	movff	?___ftmul+1,___ftadd@f1+1
  4760  00073A  C02B  F03A         	movff	?___ftmul+2,___ftadd@f1+2
  4761  00073E  EC0D  F005         	call	___ftadd	;wreg free
  4762  000742  C038  F077         	movff	?___ftadd,_calculatePID$3536
  4763  000746  C039  F078         	movff	?___ftadd+1,_calculatePID$3536+1
  4764  00074A  C03A  F079         	movff	?___ftadd+2,_calculatePID$3536+2
  4765                           
  4766                           ;PID.c: 79: motorInput = Kp * err + (Ki * intErr * 0.03) + (Kd * (derErr/0.03));
  4767  00074E  C0A6  F02C         	movff	_Kd,___ftmul@f2
  4768  000752  C0A7  F02D         	movff	_Kd+1,___ftmul@f2+1
  4769  000756  C0A8  F02E         	movff	_Kd+2,___ftmul@f2+2
  4770  00075A  0EC3               	movlw	195
  4771  00075C  6E1D               	movwf	___ftdiv@f2,c
  4772  00075E  0EF5               	movlw	245
  4773  000760  6E1E               	movwf	___ftdiv@f2+1,c
  4774  000762  0E3C               	movlw	60
  4775  000764  6E1F               	movwf	___ftdiv@f2+2,c
  4776  000766  C071  F01A         	movff	calculatePID@derErr,___ftdiv@f1
  4777  00076A  C072  F01B         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  4778  00076E  C073  F01C         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  4779  000772  ECFB  F006         	call	___ftdiv	;wreg free
  4780  000776  C01A  F029         	movff	?___ftdiv,___ftmul@f1
  4781  00077A  C01B  F02A         	movff	?___ftdiv+1,___ftmul@f1+1
  4782  00077E  C01C  F02B         	movff	?___ftdiv+2,___ftmul@f1+2
  4783  000782  EC7F  F006         	call	___ftmul	;wreg free
  4784  000786  C029  F03B         	movff	?___ftmul,___ftadd@f2
  4785  00078A  C02A  F03C         	movff	?___ftmul+1,___ftadd@f2+1
  4786  00078E  C02B  F03D         	movff	?___ftmul+2,___ftadd@f2+2
  4787  000792  C077  F038         	movff	_calculatePID$3536,___ftadd@f1
  4788  000796  C078  F039         	movff	_calculatePID$3536+1,___ftadd@f1+1
  4789  00079A  C079  F03A         	movff	_calculatePID$3536+2,___ftadd@f1+2
  4790  00079E  EC0D  F005         	call	___ftadd	;wreg free
  4791  0007A2  C038  F044         	movff	?___ftadd,___fttol@f1
  4792  0007A6  C039  F045         	movff	?___ftadd+1,___fttol@f1+1
  4793  0007AA  C03A  F046         	movff	?___ftadd+2,___fttol@f1+2
  4794  0007AE  ECEF  F005         	call	___fttol	;wreg free
  4795  0007B2  C044  F0C0         	movff	?___fttol,_motorInput
  4796  0007B6  C045  F0C1         	movff	?___fttol+1,_motorInput+1
  4797                           
  4798                           ;PID.c: 81: if(motorInput > 255)
  4799  0007BA  0100               	movlb	0	; () banked
  4800  0007BC  BFC1               	btfsc	(_motorInput+1)& (0+255),7,b
  4801  0007BE  D009               	goto	i2l3200
  4802  0007C0  0100               	movlb	0	; () banked
  4803  0007C2  05C1               	decf	(_motorInput+1)& (0+255),w,b
  4804  0007C4  A0D8               	btfss	status,0,c
  4805  0007C6  D005               	goto	i2l3200
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;PID.c: 82: motorInput = 255;
  4809  0007C8  0E00               	movlw	0
  4810  0007CA  0100               	movlb	0	; () banked
  4811  0007CC  6FC1               	movwf	(_motorInput+1)& (0+255),b
  4812  0007CE  69C0               	setf	_motorInput& (0+255),b
  4813  0007D0  D010               	goto	i2l3204
  4814  0007D2                     i2l3200:
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;PID.c: 83: else if (motorInput < -255)
  4818  0007D2  0100               	movlb	0	; () banked
  4819  0007D4  AFC1               	btfss	(_motorInput+1)& (0+255),7,b
  4820  0007D6  D00D               	goto	i2l3204
  4821  0007D8  0100               	movlb	0	; () banked
  4822  0007DA  05C0               	decf	_motorInput& (0+255),w,b
  4823  0007DC  0EFF               	movlw	255
  4824  0007DE  0100               	movlb	0	; () banked
  4825  0007E0  59C1               	subwfb	(_motorInput+1)& (0+255),w,b
  4826  0007E2  B0D8               	btfsc	status,0,c
  4827  0007E4  D006               	goto	i2l3204
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;PID.c: 84: motorInput = -255;
  4831  0007E6  0EFF               	movlw	255
  4832  0007E8  0100               	movlb	0	; () banked
  4833  0007EA  6FC1               	movwf	(_motorInput+1)& (0+255),b
  4834  0007EC  0E01               	movlw	1
  4835  0007EE  6FC0               	movwf	_motorInput& (0+255),b
  4836                           
  4837                           ; BSR set to: 0
  4838  0007F0  D000               	goto	i2l3204
  4839  0007F2                     i2l3204:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;PID.c: 86: prevErr = err;
  4843  0007F2  C0B5  F0BB         	movff	_err,_prevErr
  4844  0007F6  C0B6  F0BC         	movff	_err+1,_prevErr+1
  4845  0007FA  C0B7  F0BD         	movff	_err+2,_prevErr+2
  4846                           
  4847                           ; BSR set to: 0
  4848  0007FE  0012               	return		;funcret
  4849  000800                     __end_of_calculatePID:
  4850                           	opt stack 0
  4851                           pclatu	equ	0xFFB
  4852                           pclath	equ	0xFFA
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           intcon	equ	0xFF2
  4860                           intcon2	equ	0xFF1
  4861                           postinc0	equ	0xFEE
  4862                           fsr0h	equ	0xFEA
  4863                           fsr0l	equ	0xFE9
  4864                           wreg	equ	0xFE8
  4865                           fsr1h	equ	0xFE2
  4866                           fsr1l	equ	0xFE1
  4867                           bsr	equ	0xFE0
  4868                           indf2	equ	0xFDF
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function ___fttol *****************
  4874 ;; Defined at:
  4875 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  f1              3   67[COMRAM] float 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  lval            4    6[BANK0 ] unsigned long 
  4880 ;;  exp1            1   10[BANK0 ] unsigned char 
  4881 ;;  sign1           1    5[BANK0 ] unsigned char 
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  4   67[COMRAM] long 
  4884 ;; Registers used:
  4885 ;;		wreg, status,2, status,0
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;Total ram usage:       15 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_calculatePID
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text32
  4905  000BDE                     __ptext32:
  4906                           	opt stack 0
  4907  000BDE                     ___fttol:
  4908                           	opt stack 20
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;incstack = 0
  4912  000BDE  C046  F060         	movff	___fttol@f1+2,??___fttol
  4913  000BE2  0100               	movlb	0	; () banked
  4914  000BE4  6B61               	clrf	(??___fttol+1)& (0+255),b
  4915  000BE6  6B62               	clrf	(??___fttol+2)& (0+255),b
  4916  000BE8  3445               	rlcf	___fttol@f1+1,w,c
  4917  000BEA  0100               	movlb	0	; () banked
  4918  000BEC  3760               	rlcf	??___fttol& (0+255),f,b
  4919  000BEE  E301               	bnc	u272_41
  4920  000BF0  8161               	bsf	(??___fttol+1)& (0+255),0,b
  4921  000BF2                     u272_41:
  4922  000BF2  0100               	movlb	0	; () banked
  4923  000BF4  5160               	movf	??___fttol& (0+255),w,b
  4924  000BF6  0100               	movlb	0	; () banked
  4925  000BF8  6F6A               	movwf	___fttol@exp1& (0+255),b
  4926  000BFA  0100               	movlb	0	; () banked
  4927  000BFC  516A               	movf	___fttol@exp1& (0+255),w,b
  4928  000BFE  A4D8               	btfss	status,2,c
  4929  000C00  D002               	goto	i2l3104
  4930  000C02  D04A               	goto	i2l3128
  4931                           
  4932                           ; BSR set to: 0
  4933                           
  4934                           ; BSR set to: 0
  4935  000C04  D07B               	goto	i2l1033
  4936  000C06                     i2l3104:
  4937                           
  4938                           ; BSR set to: 0
  4939  000C06  0E17               	movlw	23
  4940  000C08  0100               	movlb	0	; () banked
  4941  000C0A  6F60               	movwf	??___fttol& (0+255),b
  4942  000C0C  C044  F061         	movff	___fttol@f1,??___fttol+1
  4943  000C10  C045  F062         	movff	___fttol@f1+1,??___fttol+2
  4944  000C14  C046  F063         	movff	___fttol@f1+2,??___fttol+3
  4945  000C18  0100               	movlb	0	; () banked
  4946  000C1A  2960               	incf	??___fttol& (0+255),w,b
  4947  000C1C  0100               	movlb	0	; () banked
  4948  000C1E  6F64               	movwf	(??___fttol+4)& (0+255),b
  4949  000C20  D005               	goto	i2u274_40
  4950  000C22                     i2u274_45:
  4951  000C22  0100               	movlb	0	; () banked
  4952  000C24  90D8               	bcf	status,0,c
  4953  000C26  3363               	rrcf	(??___fttol+3)& (0+255),f,b
  4954  000C28  3362               	rrcf	(??___fttol+2)& (0+255),f,b
  4955  000C2A  3361               	rrcf	(??___fttol+1)& (0+255),f,b
  4956  000C2C                     i2u274_40:
  4957  000C2C  0100               	movlb	0	; () banked
  4958  000C2E  2F64               	decfsz	(??___fttol+4)& (0+255),f,b
  4959  000C30  D7F8               	goto	i2u274_45
  4960  000C32  0100               	movlb	0	; () banked
  4961  000C34  5161               	movf	(??___fttol+1)& (0+255),w,b
  4962  000C36  0100               	movlb	0	; () banked
  4963  000C38  6F65               	movwf	___fttol@sign1& (0+255),b
  4964                           
  4965                           ; BSR set to: 0
  4966  000C3A  8E45               	bsf	___fttol@f1+1,7,c
  4967                           
  4968                           ; BSR set to: 0
  4969  000C3C  0EFF               	movlw	255
  4970  000C3E  1644               	andwf	___fttol@f1,f,c
  4971  000C40  0EFF               	movlw	255
  4972  000C42  1645               	andwf	___fttol@f1+1,f,c
  4973  000C44  0E00               	movlw	0
  4974  000C46  1646               	andwf	___fttol@f1+2,f,c
  4975                           
  4976                           ; BSR set to: 0
  4977  000C48  5044               	movf	___fttol@f1,w,c
  4978  000C4A  0100               	movlb	0	; () banked
  4979  000C4C  6F66               	movwf	___fttol@lval& (0+255),b
  4980  000C4E  5045               	movf	___fttol@f1+1,w,c
  4981  000C50  0100               	movlb	0	; () banked
  4982  000C52  6F67               	movwf	(___fttol@lval+1)& (0+255),b
  4983  000C54  5046               	movf	___fttol@f1+2,w,c
  4984  000C56  0100               	movlb	0	; () banked
  4985  000C58  6F68               	movwf	(___fttol@lval+2)& (0+255),b
  4986  000C5A  0100               	movlb	0	; () banked
  4987  000C5C  6B69               	clrf	(___fttol@lval+3)& (0+255),b
  4988                           
  4989                           ; BSR set to: 0
  4990  000C5E  0E8E               	movlw	142
  4991  000C60  0100               	movlb	0	; () banked
  4992  000C62  5F6A               	subwf	___fttol@exp1& (0+255),f,b
  4993                           
  4994                           ; BSR set to: 0
  4995  000C64  0100               	movlb	0	; () banked
  4996  000C66  AF6A               	btfss	___fttol@exp1& (0+255),7,b
  4997  000C68  D013               	goto	i2l3126
  4998                           
  4999                           ; BSR set to: 0
  5000  000C6A  0100               	movlb	0	; () banked
  5001  000C6C  516A               	movf	___fttol@exp1& (0+255),w,b
  5002  000C6E  0A80               	xorlw	128
  5003  000C70  0F8F               	addlw	143
  5004  000C72  B0D8               	btfsc	status,0,c
  5005  000C74  D003               	goto	i2l3122
  5006  000C76  D010               	goto	i2l3128
  5007                           
  5008                           ; BSR set to: 0
  5009                           
  5010                           ; BSR set to: 0
  5011  000C78  D041               	goto	i2l1033
  5012                           
  5013                           ; BSR set to: 0
  5014  000C7A  D000               	goto	i2l3122
  5015  000C7C                     i2l3122:
  5016                           
  5017                           ; BSR set to: 0
  5018  000C7C  0100               	movlb	0	; () banked
  5019  000C7E  90D8               	bcf	status,0,c
  5020  000C80  3369               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5021  000C82  3368               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5022  000C84  3367               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5023  000C86  3366               	rrcf	___fttol@lval& (0+255),f,b
  5024                           
  5025                           ; BSR set to: 0
  5026  000C88  0100               	movlb	0	; () banked
  5027  000C8A  3F6A               	incfsz	___fttol@exp1& (0+255),f,b
  5028  000C8C  D7F7               	goto	i2l3122
  5029                           
  5030                           ; BSR set to: 0
  5031  000C8E  D01E               	goto	i2l3136
  5032  000C90                     i2l3126:
  5033                           
  5034                           ; BSR set to: 0
  5035  000C90  0E17               	movlw	23
  5036  000C92  0100               	movlb	0	; () banked
  5037  000C94  656A               	cpfsgt	___fttol@exp1& (0+255),b
  5038  000C96  D013               	goto	i2l3134
  5039  000C98                     i2l3128:
  5040                           
  5041                           ; BSR set to: 0
  5042  000C98  0E00               	movlw	0
  5043  000C9A  6E44               	movwf	?___fttol,c
  5044  000C9C  0E00               	movlw	0
  5045  000C9E  6E45               	movwf	?___fttol+1,c
  5046  000CA0  0E00               	movlw	0
  5047  000CA2  6E46               	movwf	?___fttol+2,c
  5048  000CA4  0E00               	movlw	0
  5049  000CA6  6E47               	movwf	?___fttol+3,c
  5050                           
  5051                           ; BSR set to: 0
  5052  000CA8  D029               	goto	i2l1033
  5053                           
  5054                           ; BSR set to: 0
  5055  000CAA  D009               	goto	i2l3134
  5056  000CAC                     i2l3132:
  5057                           
  5058                           ; BSR set to: 0
  5059  000CAC  0100               	movlb	0	; () banked
  5060  000CAE  90D8               	bcf	status,0,c
  5061  000CB0  3766               	rlcf	___fttol@lval& (0+255),f,b
  5062  000CB2  3767               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5063  000CB4  3768               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5064  000CB6  3769               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5065  000CB8  0100               	movlb	0	; () banked
  5066  000CBA  076A               	decf	___fttol@exp1& (0+255),f,b
  5067  000CBC  D000               	goto	i2l3134
  5068  000CBE                     i2l3134:
  5069                           
  5070                           ; BSR set to: 0
  5071  000CBE  0100               	movlb	0	; () banked
  5072  000CC0  516A               	movf	___fttol@exp1& (0+255),w,b
  5073  000CC2  0100               	movlb	0	; () banked
  5074  000CC4  B4D8               	btfsc	status,2,c
  5075  000CC6  D002               	goto	i2l3136
  5076  000CC8  D7F1               	goto	i2l3132
  5077                           
  5078                           ; BSR set to: 0
  5079  000CCA  D000               	goto	i2l3136
  5080  000CCC                     i2l3136:
  5081                           
  5082                           ; BSR set to: 0
  5083  000CCC  0100               	movlb	0	; () banked
  5084  000CCE  5165               	movf	___fttol@sign1& (0+255),w,b
  5085  000CD0  0100               	movlb	0	; () banked
  5086  000CD2  B4D8               	btfsc	status,2,c
  5087  000CD4  D00A               	goto	i2l3140
  5088                           
  5089                           ; BSR set to: 0
  5090  000CD6  0100               	movlb	0	; () banked
  5091  000CD8  1F69               	comf	(___fttol@lval+3)& (0+255),f,b
  5092  000CDA  1F68               	comf	(___fttol@lval+2)& (0+255),f,b
  5093  000CDC  1F67               	comf	(___fttol@lval+1)& (0+255),f,b
  5094  000CDE  6D66               	negf	___fttol@lval& (0+255),b
  5095  000CE0  0E00               	movlw	0
  5096  000CE2  2367               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5097  000CE4  2368               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5098  000CE6  2369               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5099  000CE8  D000               	goto	i2l3140
  5100  000CEA                     i2l3140:
  5101                           
  5102                           ; BSR set to: 0
  5103  000CEA  C066  F044         	movff	___fttol@lval,?___fttol
  5104  000CEE  C067  F045         	movff	___fttol@lval+1,?___fttol+1
  5105  000CF2  C068  F046         	movff	___fttol@lval+2,?___fttol+2
  5106  000CF6  C069  F047         	movff	___fttol@lval+3,?___fttol+3
  5107  000CFA  D000               	goto	i2l1033
  5108  000CFC                     i2l1033:
  5109                           
  5110                           ; BSR set to: 0
  5111  000CFC  0012               	return		;funcret
  5112  000CFE                     __end_of___fttol:
  5113                           	opt stack 0
  5114                           pclatu	equ	0xFFB
  5115                           pclath	equ	0xFFA
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           intcon	equ	0xFF2
  5123                           intcon2	equ	0xFF1
  5124                           postinc0	equ	0xFEE
  5125                           fsr0h	equ	0xFEA
  5126                           fsr0l	equ	0xFE9
  5127                           wreg	equ	0xFE8
  5128                           fsr1h	equ	0xFE2
  5129                           fsr1l	equ	0xFE1
  5130                           bsr	equ	0xFE0
  5131                           indf2	equ	0xFDF
  5132                           fsr2h	equ	0xFDA
  5133                           fsr2l	equ	0xFD9
  5134                           status	equ	0xFD8
  5135                           
  5136 ;; *************** function ___ftneg *****************
  5137 ;; Defined at:
  5138 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  f1              3   17[COMRAM] float 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;		None
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  3   17[COMRAM] float 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5152 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;Total ram usage:        3 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_calculatePID
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text33
  5166  0018A4                     __ptext33:
  5167                           	opt stack 0
  5168  0018A4                     ___ftneg:
  5169                           	opt stack 20
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;incstack = 0
  5173  0018A4  5012               	movf	___ftneg@f1,w,c
  5174  0018A6  1013               	iorwf	___ftneg@f1+1,w,c
  5175  0018A8  1014               	iorwf	___ftneg@f1+2,w,c
  5176  0018AA  B4D8               	btfsc	status,2,c
  5177  0018AC  D006               	goto	i2l1022
  5178  0018AE  0E00               	movlw	0
  5179  0018B0  1A12               	xorwf	___ftneg@f1,f,c
  5180  0018B2  0E00               	movlw	0
  5181  0018B4  1A13               	xorwf	___ftneg@f1+1,f,c
  5182  0018B6  0E80               	movlw	128
  5183  0018B8  1A14               	xorwf	___ftneg@f1+2,f,c
  5184  0018BA                     i2l1022:
  5185  0018BA  C012  F012         	movff	___ftneg@f1,?___ftneg
  5186  0018BE  C013  F013         	movff	___ftneg@f1+1,?___ftneg+1
  5187  0018C2  C014  F014         	movff	___ftneg@f1+2,?___ftneg+2
  5188  0018C6  0012               	return		;funcret
  5189  0018C8                     __end_of___ftneg:
  5190                           	opt stack 0
  5191                           pclatu	equ	0xFFB
  5192                           pclath	equ	0xFFA
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon2	equ	0xFF1
  5201                           postinc0	equ	0xFEE
  5202                           fsr0h	equ	0xFEA
  5203                           fsr0l	equ	0xFE9
  5204                           wreg	equ	0xFE8
  5205                           fsr1h	equ	0xFE2
  5206                           fsr1l	equ	0xFE1
  5207                           bsr	equ	0xFE0
  5208                           indf2	equ	0xFDF
  5209                           fsr2h	equ	0xFDA
  5210                           fsr2l	equ	0xFD9
  5211                           status	equ	0xFD8
  5212                           
  5213 ;; *************** function ___ftge *****************
  5214 ;; Defined at:
  5215 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;  ff1             3   67[COMRAM] float 
  5218 ;;  ff2             3   70[COMRAM] float 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;		None               void
  5223 ;; Registers used:
  5224 ;;		wreg, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5230 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Totals:         6       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;Total ram usage:        9 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_calculatePID
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text34
  5244  0011DC                     __ptext34:
  5245                           	opt stack 0
  5246  0011DC                     ___ftge:
  5247                           	opt stack 20
  5248                           
  5249                           ;incstack = 0
  5250  0011DC  AE46               	btfss	___ftge@ff1+2,7,c
  5251  0011DE  D01B               	goto	i2l3084
  5252  0011E0  C044  F060         	movff	___ftge@ff1,??___ftge
  5253  0011E4  C045  F061         	movff	___ftge@ff1+1,??___ftge+1
  5254  0011E8  C046  F062         	movff	___ftge@ff1+2,??___ftge+2
  5255  0011EC  0100               	movlb	0	; () banked
  5256  0011EE  1F60               	comf	??___ftge& (0+255),f,b
  5257  0011F0  1F61               	comf	(??___ftge+1)& (0+255),f,b
  5258  0011F2  1F62               	comf	(??___ftge+2)& (0+255),f,b
  5259  0011F4  2B60               	incf	??___ftge& (0+255),f,b
  5260  0011F6  0E00               	movlw	0
  5261  0011F8  2361               	addwfc	(??___ftge+1)& (0+255),f,b
  5262  0011FA  2362               	addwfc	(??___ftge+2)& (0+255),f,b
  5263  0011FC  0E00               	movlw	0
  5264  0011FE  0100               	movlb	0	; () banked
  5265  001200  2560               	addwf	??___ftge& (0+255),w,b
  5266  001202  6E44               	movwf	___ftge@ff1,c
  5267  001204  0E00               	movlw	0
  5268  001206  0100               	movlb	0	; () banked
  5269  001208  2161               	addwfc	(??___ftge+1)& (0+255),w,b
  5270  00120A  6E45               	movwf	___ftge@ff1+1,c
  5271  00120C  0E80               	movlw	128
  5272  00120E  0100               	movlb	0	; () banked
  5273  001210  2162               	addwfc	(??___ftge+2)& (0+255),w,b
  5274  001212  6E46               	movwf	___ftge@ff1+2,c
  5275  001214  D000               	goto	i2l3084
  5276  001216                     i2l3084:
  5277  001216  AE49               	btfss	___ftge@ff2+2,7,c
  5278  001218  D01B               	goto	i2l3088
  5279  00121A  C047  F060         	movff	___ftge@ff2,??___ftge
  5280  00121E  C048  F061         	movff	___ftge@ff2+1,??___ftge+1
  5281  001222  C049  F062         	movff	___ftge@ff2+2,??___ftge+2
  5282  001226  0100               	movlb	0	; () banked
  5283  001228  1F60               	comf	??___ftge& (0+255),f,b
  5284  00122A  1F61               	comf	(??___ftge+1)& (0+255),f,b
  5285  00122C  1F62               	comf	(??___ftge+2)& (0+255),f,b
  5286  00122E  2B60               	incf	??___ftge& (0+255),f,b
  5287  001230  0E00               	movlw	0
  5288  001232  2361               	addwfc	(??___ftge+1)& (0+255),f,b
  5289  001234  2362               	addwfc	(??___ftge+2)& (0+255),f,b
  5290  001236  0E00               	movlw	0
  5291  001238  0100               	movlb	0	; () banked
  5292  00123A  2560               	addwf	??___ftge& (0+255),w,b
  5293  00123C  6E47               	movwf	___ftge@ff2,c
  5294  00123E  0E00               	movlw	0
  5295  001240  0100               	movlb	0	; () banked
  5296  001242  2161               	addwfc	(??___ftge+1)& (0+255),w,b
  5297  001244  6E48               	movwf	___ftge@ff2+1,c
  5298  001246  0E80               	movlw	128
  5299  001248  0100               	movlb	0	; () banked
  5300  00124A  2162               	addwfc	(??___ftge+2)& (0+255),w,b
  5301  00124C  6E49               	movwf	___ftge@ff2+2,c
  5302  00124E  D000               	goto	i2l3088
  5303  001250                     i2l3088:
  5304  001250  0E00               	movlw	0
  5305  001252  1A44               	xorwf	___ftge@ff1,f,c
  5306  001254  0E00               	movlw	0
  5307  001256  1A45               	xorwf	___ftge@ff1+1,f,c
  5308  001258  0E80               	movlw	128
  5309  00125A  1A46               	xorwf	___ftge@ff1+2,f,c
  5310  00125C  0E00               	movlw	0
  5311  00125E  1A47               	xorwf	___ftge@ff2,f,c
  5312  001260  0E00               	movlw	0
  5313  001262  1A48               	xorwf	___ftge@ff2+1,f,c
  5314  001264  0E80               	movlw	128
  5315  001266  1A49               	xorwf	___ftge@ff2+2,f,c
  5316  001268  5047               	movf	___ftge@ff2,w,c
  5317  00126A  5C44               	subwf	___ftge@ff1,w,c
  5318  00126C  5048               	movf	___ftge@ff2+1,w,c
  5319  00126E  5845               	subwfb	___ftge@ff1+1,w,c
  5320  001270  5049               	movf	___ftge@ff2+2,w,c
  5321  001272  5846               	subwfb	___ftge@ff1+2,w,c
  5322  001274  B0D8               	btfsc	status,0,c
  5323  001276  D002               	goto	i2l3094
  5324  001278  90D8               	bcf	status,0,c
  5325  00127A  D002               	goto	i2l1006
  5326  00127C                     i2l3094:
  5327  00127C  80D8               	bsf	status,0,c
  5328  00127E  D000               	goto	i2l1006
  5329  001280                     i2l1006:
  5330  001280  0012               	return		;funcret
  5331  001282                     __end_of___ftge:
  5332                           	opt stack 0
  5333                           pclatu	equ	0xFFB
  5334                           pclath	equ	0xFFA
  5335                           tblptru	equ	0xFF8
  5336                           tblptrh	equ	0xFF7
  5337                           tblptrl	equ	0xFF6
  5338                           tablat	equ	0xFF5
  5339                           prodh	equ	0xFF4
  5340                           prodl	equ	0xFF3
  5341                           intcon	equ	0xFF2
  5342                           intcon2	equ	0xFF1
  5343                           postinc0	equ	0xFEE
  5344                           fsr0h	equ	0xFEA
  5345                           fsr0l	equ	0xFE9
  5346                           wreg	equ	0xFE8
  5347                           fsr1h	equ	0xFE2
  5348                           fsr1l	equ	0xFE1
  5349                           bsr	equ	0xFE0
  5350                           indf2	equ	0xFDF
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function ___ftdiv *****************
  5356 ;; Defined at:
  5357 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  f1              3   25[COMRAM] float 
  5360 ;;  f2              3   28[COMRAM] float 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  f3              3   35[COMRAM] float 
  5363 ;;  sign            1   39[COMRAM] unsigned char 
  5364 ;;  exp             1   38[COMRAM] unsigned char 
  5365 ;;  cntr            1   34[COMRAM] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  3   25[COMRAM] float 
  5368 ;; Registers used:
  5369 ;;		wreg, status,2, status,0, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5375 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;Total ram usage:       15 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    1
  5382 ;; This function calls:
  5383 ;;		___ftpack
  5384 ;; This function is called by:
  5385 ;;		_calculatePID
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           	psect	text35
  5390  000DF6                     __ptext35:
  5391                           	opt stack 0
  5392  000DF6                     ___ftdiv:
  5393                           	opt stack 19
  5394                           
  5395                           ;incstack = 0
  5396  000DF6  C01C  F020         	movff	___ftdiv@f1+2,??___ftdiv
  5397  000DFA  6A21               	clrf	(??___ftdiv+1)& (0+255),c
  5398  000DFC  6A22               	clrf	(??___ftdiv+2)& (0+255),c
  5399  000DFE  341B               	rlcf	___ftdiv@f1+1,w,c
  5400  000E00  3620               	rlcf	??___ftdiv& (0+255),f,c
  5401  000E02  E301               	bnc	u172_41
  5402  000E04  8021               	bsf	(??___ftdiv+1)& (0+255),0,c
  5403  000E06                     u172_41:
  5404  000E06  5020               	movf	??___ftdiv,w,c
  5405  000E08  6E27               	movwf	___ftdiv@exp,c
  5406  000E0A  5027               	movf	___ftdiv@exp,w,c
  5407  000E0C  A4D8               	btfss	status,2,c
  5408  000E0E  D002               	goto	i2l2404
  5409  000E10  D00E               	goto	i2l2406
  5410  000E12  D061               	goto	i2l997
  5411  000E14                     i2l2404:
  5412  000E14  C01F  F020         	movff	___ftdiv@f2+2,??___ftdiv
  5413  000E18  6A21               	clrf	(??___ftdiv+1)& (0+255),c
  5414  000E1A  6A22               	clrf	(??___ftdiv+2)& (0+255),c
  5415  000E1C  341E               	rlcf	___ftdiv@f2+1,w,c
  5416  000E1E  3620               	rlcf	??___ftdiv& (0+255),f,c
  5417  000E20  E301               	bnc	u174_41
  5418  000E22  8021               	bsf	(??___ftdiv+1)& (0+255),0,c
  5419  000E24                     u174_41:
  5420  000E24  5020               	movf	??___ftdiv,w,c
  5421  000E26  6E28               	movwf	___ftdiv@sign,c
  5422  000E28  5028               	movf	___ftdiv@sign,w,c
  5423  000E2A  A4D8               	btfss	status,2,c
  5424  000E2C  D007               	goto	i2l2410
  5425  000E2E                     i2l2406:
  5426  000E2E  0E00               	movlw	0
  5427  000E30  6E1A               	movwf	?___ftdiv,c
  5428  000E32  0E00               	movlw	0
  5429  000E34  6E1B               	movwf	?___ftdiv+1,c
  5430  000E36  0E00               	movlw	0
  5431  000E38  6E1C               	movwf	?___ftdiv+2,c
  5432  000E3A  D04D               	goto	i2l997
  5433  000E3C                     i2l2410:
  5434  000E3C  0E00               	movlw	0
  5435  000E3E  6E24               	movwf	___ftdiv@f3,c
  5436  000E40  0E00               	movlw	0
  5437  000E42  6E25               	movwf	___ftdiv@f3+1,c
  5438  000E44  0E00               	movlw	0
  5439  000E46  6E26               	movwf	___ftdiv@f3+2,c
  5440  000E48  5028               	movf	___ftdiv@sign,w,c
  5441  000E4A  0F89               	addlw	137
  5442  000E4C  5E27               	subwf	___ftdiv@exp,f,c
  5443  000E4E  C01C  F028         	movff	___ftdiv@f1+2,___ftdiv@sign
  5444  000E52  501F               	movf	___ftdiv@f2+2,w,c
  5445  000E54  1A28               	xorwf	___ftdiv@sign,f,c
  5446  000E56  0E80               	movlw	128
  5447  000E58  1628               	andwf	___ftdiv@sign,f,c
  5448  000E5A  8E1B               	bsf	___ftdiv@f1+1,7,c
  5449  000E5C  0EFF               	movlw	255
  5450  000E5E  161A               	andwf	___ftdiv@f1,f,c
  5451  000E60  0EFF               	movlw	255
  5452  000E62  161B               	andwf	___ftdiv@f1+1,f,c
  5453  000E64  0E00               	movlw	0
  5454  000E66  161C               	andwf	___ftdiv@f1+2,f,c
  5455  000E68  8E1E               	bsf	___ftdiv@f2+1,7,c
  5456  000E6A  0EFF               	movlw	255
  5457  000E6C  161D               	andwf	___ftdiv@f2,f,c
  5458  000E6E  0EFF               	movlw	255
  5459  000E70  161E               	andwf	___ftdiv@f2+1,f,c
  5460  000E72  0E00               	movlw	0
  5461  000E74  161F               	andwf	___ftdiv@f2+2,f,c
  5462  000E76  0E18               	movlw	24
  5463  000E78  6E23               	movwf	___ftdiv@cntr,c
  5464  000E7A  D000               	goto	i2l2430
  5465  000E7C                     i2l2430:
  5466  000E7C  90D8               	bcf	status,0,c
  5467  000E7E  3624               	rlcf	___ftdiv@f3,f,c
  5468  000E80  3625               	rlcf	___ftdiv@f3+1,f,c
  5469  000E82  3626               	rlcf	___ftdiv@f3+2,f,c
  5470  000E84  501D               	movf	___ftdiv@f2,w,c
  5471  000E86  5C1A               	subwf	___ftdiv@f1,w,c
  5472  000E88  501E               	movf	___ftdiv@f2+1,w,c
  5473  000E8A  581B               	subwfb	___ftdiv@f1+1,w,c
  5474  000E8C  501F               	movf	___ftdiv@f2+2,w,c
  5475  000E8E  581C               	subwfb	___ftdiv@f1+2,w,c
  5476  000E90  A0D8               	btfss	status,0,c
  5477  000E92  D007               	goto	i2l1000
  5478  000E94  501D               	movf	___ftdiv@f2,w,c
  5479  000E96  5E1A               	subwf	___ftdiv@f1,f,c
  5480  000E98  501E               	movf	___ftdiv@f2+1,w,c
  5481  000E9A  5A1B               	subwfb	___ftdiv@f1+1,f,c
  5482  000E9C  501F               	movf	___ftdiv@f2+2,w,c
  5483  000E9E  5A1C               	subwfb	___ftdiv@f1+2,f,c
  5484  000EA0  8024               	bsf	___ftdiv@f3,0,c
  5485  000EA2                     i2l1000:
  5486  000EA2  90D8               	bcf	status,0,c
  5487  000EA4  361A               	rlcf	___ftdiv@f1,f,c
  5488  000EA6  361B               	rlcf	___ftdiv@f1+1,f,c
  5489  000EA8  361C               	rlcf	___ftdiv@f1+2,f,c
  5490  000EAA  2E23               	decfsz	___ftdiv@cntr,f,c
  5491  000EAC  D7E7               	goto	i2l2430
  5492  000EAE  D000               	goto	i2l2440
  5493  000EB0                     i2l2440:
  5494  000EB0  C024  F012         	movff	___ftdiv@f3,___ftpack@arg
  5495  000EB4  C025  F013         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5496  000EB8  C026  F014         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5497  000EBC  C027  F015         	movff	___ftdiv@exp,___ftpack@exp
  5498  000EC0  C028  F016         	movff	___ftdiv@sign,___ftpack@sign
  5499  000EC4  ECD5  F007         	call	___ftpack	;wreg free
  5500  000EC8  C012  F01A         	movff	?___ftpack,?___ftdiv
  5501  000ECC  C013  F01B         	movff	?___ftpack+1,?___ftdiv+1
  5502  000ED0  C014  F01C         	movff	?___ftpack+2,?___ftdiv+2
  5503  000ED4  D000               	goto	i2l997
  5504  000ED6                     i2l997:
  5505  000ED6  0012               	return		;funcret
  5506  000ED8                     __end_of___ftdiv:
  5507                           	opt stack 0
  5508                           pclatu	equ	0xFFB
  5509                           pclath	equ	0xFFA
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           intcon2	equ	0xFF1
  5518                           postinc0	equ	0xFEE
  5519                           fsr0h	equ	0xFEA
  5520                           fsr0l	equ	0xFE9
  5521                           wreg	equ	0xFE8
  5522                           fsr1h	equ	0xFE2
  5523                           fsr1l	equ	0xFE1
  5524                           bsr	equ	0xFE0
  5525                           indf2	equ	0xFDF
  5526                           fsr2h	equ	0xFDA
  5527                           fsr2l	equ	0xFD9
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function ___ftadd *****************
  5531 ;; Defined at:
  5532 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  f1              3   55[COMRAM] float 
  5535 ;;  f2              3   58[COMRAM] float 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  exp1            1   66[COMRAM] unsigned char 
  5538 ;;  exp2            1   65[COMRAM] unsigned char 
  5539 ;;  sign            1   64[COMRAM] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  3   55[COMRAM] float 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5549 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;Total ram usage:       12 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    1
  5556 ;; This function calls:
  5557 ;;		___ftpack
  5558 ;; This function is called by:
  5559 ;;		_calculatePID
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text36
  5564  000A1A                     __ptext36:
  5565                           	opt stack 0
  5566  000A1A                     ___ftadd:
  5567                           	opt stack 19
  5568                           
  5569                           ;incstack = 0
  5570  000A1A  C03A  F03E         	movff	___ftadd@f1+2,??___ftadd
  5571  000A1E  6A3F               	clrf	(??___ftadd+1)& (0+255),c
  5572  000A20  6A40               	clrf	(??___ftadd+2)& (0+255),c
  5573  000A22  3439               	rlcf	___ftadd@f1+1,w,c
  5574  000A24  363E               	rlcf	??___ftadd& (0+255),f,c
  5575  000A26  E301               	bnc	u151_41
  5576  000A28  803F               	bsf	(??___ftadd+1)& (0+255),0,c
  5577  000A2A                     u151_41:
  5578  000A2A  503E               	movf	??___ftadd,w,c
  5579  000A2C  6E43               	movwf	___ftadd@exp1,c
  5580  000A2E  C03D  F03E         	movff	___ftadd@f2+2,??___ftadd
  5581  000A32  6A3F               	clrf	(??___ftadd+1)& (0+255),c
  5582  000A34  6A40               	clrf	(??___ftadd+2)& (0+255),c
  5583  000A36  343C               	rlcf	___ftadd@f2+1,w,c
  5584  000A38  363E               	rlcf	??___ftadd& (0+255),f,c
  5585  000A3A  E301               	bnc	u152_41
  5586  000A3C  803F               	bsf	(??___ftadd+1)& (0+255),0,c
  5587  000A3E                     u152_41:
  5588  000A3E  503E               	movf	??___ftadd,w,c
  5589  000A40  6E42               	movwf	___ftadd@exp2,c
  5590  000A42  5043               	movf	___ftadd@exp1,w,c
  5591  000A44  B4D8               	btfsc	status,2,c
  5592  000A46  D00B               	goto	i2l965
  5593  000A48  5042               	movf	___ftadd@exp2,w,c
  5594  000A4A  5C43               	subwf	___ftadd@exp1,w,c
  5595  000A4C  B0D8               	btfsc	status,0,c
  5596  000A4E  D00E               	goto	i2l2336
  5597  000A50  5043               	movf	___ftadd@exp1,w,c
  5598  000A52  0800               	sublw	0
  5599  000A54  2442               	addwf	___ftadd@exp2,w,c
  5600  000A56  6E3E               	movwf	??___ftadd& (0+255),c
  5601  000A58  0E18               	movlw	24
  5602  000A5A  643E               	cpfsgt	??___ftadd,c
  5603  000A5C  D007               	goto	i2l2336
  5604  000A5E                     i2l965:
  5605  000A5E  C03B  F038         	movff	___ftadd@f2,?___ftadd
  5606  000A62  C03C  F039         	movff	___ftadd@f2+1,?___ftadd+1
  5607  000A66  C03D  F03A         	movff	___ftadd@f2+2,?___ftadd+2
  5608  000A6A  D0B8               	goto	i2l966
  5609  000A6C                     i2l2336:
  5610  000A6C  5042               	movf	___ftadd@exp2,w,c
  5611  000A6E  B4D8               	btfsc	status,2,c
  5612  000A70  D00B               	goto	i2l969
  5613  000A72  5043               	movf	___ftadd@exp1,w,c
  5614  000A74  5C42               	subwf	___ftadd@exp2,w,c
  5615  000A76  B0D8               	btfsc	status,0,c
  5616  000A78  D00E               	goto	i2l2342
  5617  000A7A  5042               	movf	___ftadd@exp2,w,c
  5618  000A7C  0800               	sublw	0
  5619  000A7E  2443               	addwf	___ftadd@exp1,w,c
  5620  000A80  6E3E               	movwf	??___ftadd& (0+255),c
  5621  000A82  0E18               	movlw	24
  5622  000A84  643E               	cpfsgt	??___ftadd,c
  5623  000A86  D007               	goto	i2l2342
  5624  000A88                     i2l969:
  5625  000A88  C038  F038         	movff	___ftadd@f1,?___ftadd
  5626  000A8C  C039  F039         	movff	___ftadd@f1+1,?___ftadd+1
  5627  000A90  C03A  F03A         	movff	___ftadd@f1+2,?___ftadd+2
  5628  000A94  D0A3               	goto	i2l966
  5629  000A96                     i2l2342:
  5630  000A96  0E06               	movlw	6
  5631  000A98  6E41               	movwf	___ftadd@sign,c
  5632  000A9A  AE3A               	btfss	___ftadd@f1+2,7,c
  5633  000A9C  D002               	goto	i2l2348
  5634  000A9E  8E41               	bsf	___ftadd@sign,7,c
  5635  000AA0  D000               	goto	i2l2348
  5636  000AA2                     i2l2348:
  5637  000AA2  BE3D               	btfsc	___ftadd@f2+2,7,c
  5638  000AA4  8C41               	bsf	___ftadd@sign,6,c
  5639  000AA6  8E39               	bsf	___ftadd@f1+1,7,c
  5640  000AA8  0EFF               	movlw	255
  5641  000AAA  1638               	andwf	___ftadd@f1,f,c
  5642  000AAC  0EFF               	movlw	255
  5643  000AAE  1639               	andwf	___ftadd@f1+1,f,c
  5644  000AB0  0E00               	movlw	0
  5645  000AB2  163A               	andwf	___ftadd@f1+2,f,c
  5646  000AB4  8E3C               	bsf	___ftadd@f2+1,7,c
  5647  000AB6  0EFF               	movlw	255
  5648  000AB8  163B               	andwf	___ftadd@f2,f,c
  5649  000ABA  0EFF               	movlw	255
  5650  000ABC  163C               	andwf	___ftadd@f2+1,f,c
  5651  000ABE  0E00               	movlw	0
  5652  000AC0  163D               	andwf	___ftadd@f2+2,f,c
  5653  000AC2  5042               	movf	___ftadd@exp2,w,c
  5654  000AC4  5C43               	subwf	___ftadd@exp1,w,c
  5655  000AC6  B0D8               	btfsc	status,0,c
  5656  000AC8  D01E               	goto	i2l2368
  5657  000ACA                     i2l2358:
  5658  000ACA  90D8               	bcf	status,0,c
  5659  000ACC  363B               	rlcf	___ftadd@f2,f,c
  5660  000ACE  363C               	rlcf	___ftadd@f2+1,f,c
  5661  000AD0  363D               	rlcf	___ftadd@f2+2,f,c
  5662  000AD2  0642               	decf	___ftadd@exp2,f,c
  5663  000AD4  5043               	movf	___ftadd@exp1,w,c
  5664  000AD6  1842               	xorwf	___ftadd@exp2,w,c
  5665  000AD8  B4D8               	btfsc	status,2,c
  5666  000ADA  D00F               	goto	i2l2366
  5667  000ADC  0641               	decf	___ftadd@sign,f,c
  5668  000ADE  C041  F03E         	movff	___ftadd@sign,??___ftadd
  5669  000AE2  0E07               	movlw	7
  5670  000AE4  163E               	andwf	??___ftadd,f,c
  5671  000AE6  B4D8               	btfsc	status,2,c
  5672  000AE8  D008               	goto	i2l2366
  5673  000AEA  D7EF               	goto	i2l2358
  5674  000AEC  D006               	goto	i2l2366
  5675  000AEE                     i2l2364:
  5676  000AEE  90D8               	bcf	status,0,c
  5677  000AF0  323A               	rrcf	___ftadd@f1+2,f,c
  5678  000AF2  3239               	rrcf	___ftadd@f1+1,f,c
  5679  000AF4  3238               	rrcf	___ftadd@f1,f,c
  5680  000AF6  2A43               	incf	___ftadd@exp1,f,c
  5681  000AF8  D000               	goto	i2l2366
  5682  000AFA                     i2l2366:
  5683  000AFA  5042               	movf	___ftadd@exp2,w,c
  5684  000AFC  1843               	xorwf	___ftadd@exp1,w,c
  5685  000AFE  B4D8               	btfsc	status,2,c
  5686  000B00  D024               	goto	i2l980
  5687  000B02  D7F5               	goto	i2l2364
  5688  000B04  D022               	goto	i2l980
  5689  000B06                     i2l2368:
  5690  000B06  5043               	movf	___ftadd@exp1,w,c
  5691  000B08  5C42               	subwf	___ftadd@exp2,w,c
  5692  000B0A  B0D8               	btfsc	status,0,c
  5693  000B0C  D01E               	goto	i2l980
  5694  000B0E                     i2l2370:
  5695  000B0E  90D8               	bcf	status,0,c
  5696  000B10  3638               	rlcf	___ftadd@f1,f,c
  5697  000B12  3639               	rlcf	___ftadd@f1+1,f,c
  5698  000B14  363A               	rlcf	___ftadd@f1+2,f,c
  5699  000B16  0643               	decf	___ftadd@exp1,f,c
  5700  000B18  5043               	movf	___ftadd@exp1,w,c
  5701  000B1A  1842               	xorwf	___ftadd@exp2,w,c
  5702  000B1C  B4D8               	btfsc	status,2,c
  5703  000B1E  D00F               	goto	i2l2378
  5704  000B20  0641               	decf	___ftadd@sign,f,c
  5705  000B22  C041  F03E         	movff	___ftadd@sign,??___ftadd
  5706  000B26  0E07               	movlw	7
  5707  000B28  163E               	andwf	??___ftadd,f,c
  5708  000B2A  B4D8               	btfsc	status,2,c
  5709  000B2C  D008               	goto	i2l2378
  5710  000B2E  D7EF               	goto	i2l2370
  5711  000B30  D006               	goto	i2l2378
  5712  000B32                     i2l2376:
  5713  000B32  90D8               	bcf	status,0,c
  5714  000B34  323D               	rrcf	___ftadd@f2+2,f,c
  5715  000B36  323C               	rrcf	___ftadd@f2+1,f,c
  5716  000B38  323B               	rrcf	___ftadd@f2,f,c
  5717  000B3A  2A42               	incf	___ftadd@exp2,f,c
  5718  000B3C  D000               	goto	i2l2378
  5719  000B3E                     i2l2378:
  5720  000B3E  5042               	movf	___ftadd@exp2,w,c
  5721  000B40  1843               	xorwf	___ftadd@exp1,w,c
  5722  000B42  B4D8               	btfsc	status,2,c
  5723  000B44  D002               	goto	i2l980
  5724  000B46  D7F5               	goto	i2l2376
  5725  000B48  D000               	goto	i2l980
  5726  000B4A                     i2l980:
  5727  000B4A  AE41               	btfss	___ftadd@sign,7,c
  5728  000B4C  D00C               	goto	i2l989
  5729  000B4E  0EFF               	movlw	255
  5730  000B50  1A38               	xorwf	___ftadd@f1,f,c
  5731  000B52  0EFF               	movlw	255
  5732  000B54  1A39               	xorwf	___ftadd@f1+1,f,c
  5733  000B56  0EFF               	movlw	255
  5734  000B58  1A3A               	xorwf	___ftadd@f1+2,f,c
  5735  000B5A  0E01               	movlw	1
  5736  000B5C  2638               	addwf	___ftadd@f1,f,c
  5737  000B5E  0E00               	movlw	0
  5738  000B60  2239               	addwfc	___ftadd@f1+1,f,c
  5739  000B62  0E00               	movlw	0
  5740  000B64  223A               	addwfc	___ftadd@f1+2,f,c
  5741  000B66                     i2l989:
  5742  000B66  AC41               	btfss	___ftadd@sign,6,c
  5743  000B68  D00D               	goto	i2l2384
  5744  000B6A  0EFF               	movlw	255
  5745  000B6C  1A3B               	xorwf	___ftadd@f2,f,c
  5746  000B6E  0EFF               	movlw	255
  5747  000B70  1A3C               	xorwf	___ftadd@f2+1,f,c
  5748  000B72  0EFF               	movlw	255
  5749  000B74  1A3D               	xorwf	___ftadd@f2+2,f,c
  5750  000B76  0E01               	movlw	1
  5751  000B78  263B               	addwf	___ftadd@f2,f,c
  5752  000B7A  0E00               	movlw	0
  5753  000B7C  223C               	addwfc	___ftadd@f2+1,f,c
  5754  000B7E  0E00               	movlw	0
  5755  000B80  223D               	addwfc	___ftadd@f2+2,f,c
  5756  000B82  D000               	goto	i2l2384
  5757  000B84                     i2l2384:
  5758  000B84  0E00               	movlw	0
  5759  000B86  6E41               	movwf	___ftadd@sign,c
  5760  000B88  5038               	movf	___ftadd@f1,w,c
  5761  000B8A  263B               	addwf	___ftadd@f2,f,c
  5762  000B8C  5039               	movf	___ftadd@f1+1,w,c
  5763  000B8E  223C               	addwfc	___ftadd@f2+1,f,c
  5764  000B90  503A               	movf	___ftadd@f1+2,w,c
  5765  000B92  223D               	addwfc	___ftadd@f2+2,f,c
  5766  000B94  AE3D               	btfss	___ftadd@f2+2,7,c
  5767  000B96  D00F               	goto	i2l2394
  5768  000B98  0EFF               	movlw	255
  5769  000B9A  1A3B               	xorwf	___ftadd@f2,f,c
  5770  000B9C  0EFF               	movlw	255
  5771  000B9E  1A3C               	xorwf	___ftadd@f2+1,f,c
  5772  000BA0  0EFF               	movlw	255
  5773  000BA2  1A3D               	xorwf	___ftadd@f2+2,f,c
  5774  000BA4  0E01               	movlw	1
  5775  000BA6  263B               	addwf	___ftadd@f2,f,c
  5776  000BA8  0E00               	movlw	0
  5777  000BAA  223C               	addwfc	___ftadd@f2+1,f,c
  5778  000BAC  0E00               	movlw	0
  5779  000BAE  223D               	addwfc	___ftadd@f2+2,f,c
  5780  000BB0  0E01               	movlw	1
  5781  000BB2  6E41               	movwf	___ftadd@sign,c
  5782  000BB4  D000               	goto	i2l2394
  5783  000BB6                     i2l2394:
  5784  000BB6  C03B  F012         	movff	___ftadd@f2,___ftpack@arg
  5785  000BBA  C03C  F013         	movff	___ftadd@f2+1,___ftpack@arg+1
  5786  000BBE  C03D  F014         	movff	___ftadd@f2+2,___ftpack@arg+2
  5787  000BC2  C043  F015         	movff	___ftadd@exp1,___ftpack@exp
  5788  000BC6  C041  F016         	movff	___ftadd@sign,___ftpack@sign
  5789  000BCA  ECD5  F007         	call	___ftpack	;wreg free
  5790  000BCE  C012  F038         	movff	?___ftpack,?___ftadd
  5791  000BD2  C013  F039         	movff	?___ftpack+1,?___ftadd+1
  5792  000BD6  C014  F03A         	movff	?___ftpack+2,?___ftadd+2
  5793  000BDA  D000               	goto	i2l966
  5794  000BDC                     i2l966:
  5795  000BDC  0012               	return		;funcret
  5796  000BDE                     __end_of___ftadd:
  5797                           	opt stack 0
  5798                           pclatu	equ	0xFFB
  5799                           pclath	equ	0xFFA
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           intcon	equ	0xFF2
  5807                           intcon2	equ	0xFF1
  5808                           postinc0	equ	0xFEE
  5809                           fsr0h	equ	0xFEA
  5810                           fsr0l	equ	0xFE9
  5811                           wreg	equ	0xFE8
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           bsr	equ	0xFE0
  5815                           indf2	equ	0xFDF
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _RTD2Angle *****************
  5821 ;; Defined at:
  5822 ;;		line 97 in file "ResolverToDigital.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  RTDAngle        2   55[COMRAM] unsigned int 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  3   55[COMRAM] unsigned int 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5836 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;Total ram usage:        3 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    2
  5843 ;; This function calls:
  5844 ;;		___ftmul
  5845 ;;		___lwtoft
  5846 ;; This function is called by:
  5847 ;;		_TMR0Int
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text37
  5852  001742                     __ptext37:
  5853                           	opt stack 0
  5854  001742                     _RTD2Angle:
  5855                           	opt stack 19
  5856                           
  5857                           ;ResolverToDigital.c: 99: return 0.087890625 * RTDAngle;
  5858                           
  5859                           ;incstack = 0
  5860  001742  C038  F01A         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  5861  001746  C039  F01B         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  5862  00174A  EC3F  F00C         	call	___lwtoft	;wreg free
  5863  00174E  C01A  F029         	movff	?___lwtoft,___ftmul@f1
  5864  001752  C01B  F02A         	movff	?___lwtoft+1,___ftmul@f1+1
  5865  001756  C01C  F02B         	movff	?___lwtoft+2,___ftmul@f1+2
  5866  00175A  0E00               	movlw	0
  5867  00175C  6E2C               	movwf	___ftmul@f2,c
  5868  00175E  0EB4               	movlw	180
  5869  001760  6E2D               	movwf	___ftmul@f2+1,c
  5870  001762  0E3D               	movlw	61
  5871  001764  6E2E               	movwf	___ftmul@f2+2,c
  5872  001766  EC7F  F006         	call	___ftmul	;wreg free
  5873  00176A  C029  F038         	movff	?___ftmul,?_RTD2Angle
  5874  00176E  C02A  F039         	movff	?___ftmul+1,?_RTD2Angle+1
  5875  001772  C02B  F03A         	movff	?___ftmul+2,?_RTD2Angle+2
  5876  001776  D000               	goto	i2l213
  5877  001778                     i2l213:
  5878  001778  0012               	return		;funcret
  5879  00177A                     __end_of_RTD2Angle:
  5880                           	opt stack 0
  5881                           pclatu	equ	0xFFB
  5882                           pclath	equ	0xFFA
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           intcon2	equ	0xFF1
  5891                           postinc0	equ	0xFEE
  5892                           fsr0h	equ	0xFEA
  5893                           fsr0l	equ	0xFE9
  5894                           wreg	equ	0xFE8
  5895                           fsr1h	equ	0xFE2
  5896                           fsr1l	equ	0xFE1
  5897                           bsr	equ	0xFE0
  5898                           indf2	equ	0xFDF
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function ___lwtoft *****************
  5904 ;; Defined at:
  5905 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  c               2   25[COMRAM] unsigned int 
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  3   25[COMRAM] float 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5919 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;Total ram usage:        3 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    1
  5926 ;; This function calls:
  5927 ;;		___ftpack
  5928 ;; This function is called by:
  5929 ;;		_RTD2Angle
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text38
  5934  00187E                     __ptext38:
  5935                           	opt stack 0
  5936  00187E                     ___lwtoft:
  5937                           	opt stack 19
  5938                           
  5939                           ;incstack = 0
  5940  00187E  C01A  F012         	movff	___lwtoft@c,___ftpack@arg
  5941  001882  C01B  F013         	movff	___lwtoft@c+1,___ftpack@arg+1
  5942  001886  6A14               	clrf	___ftpack@arg+2,c
  5943  001888  0E8E               	movlw	142
  5944  00188A  6E15               	movwf	___ftpack@exp,c
  5945  00188C  0E00               	movlw	0
  5946  00188E  6E16               	movwf	___ftpack@sign,c
  5947  001890  ECD5  F007         	call	___ftpack	;wreg free
  5948  001894  C012  F01A         	movff	?___ftpack,?___lwtoft
  5949  001898  C013  F01B         	movff	?___ftpack+1,?___lwtoft+1
  5950  00189C  C014  F01C         	movff	?___ftpack+2,?___lwtoft+2
  5951  0018A0  D000               	goto	i2l1162
  5952  0018A2                     i2l1162:
  5953  0018A2  0012               	return		;funcret
  5954  0018A4                     __end_of___lwtoft:
  5955                           	opt stack 0
  5956                           pclatu	equ	0xFFB
  5957                           pclath	equ	0xFFA
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon	equ	0xFF2
  5965                           intcon2	equ	0xFF1
  5966                           postinc0	equ	0xFEE
  5967                           fsr0h	equ	0xFEA
  5968                           fsr0l	equ	0xFE9
  5969                           wreg	equ	0xFE8
  5970                           fsr1h	equ	0xFE2
  5971                           fsr1l	equ	0xFE1
  5972                           bsr	equ	0xFE0
  5973                           indf2	equ	0xFDF
  5974                           fsr2h	equ	0xFDA
  5975                           fsr2l	equ	0xFD9
  5976                           status	equ	0xFD8
  5977                           
  5978 ;; *************** function ___ftmul *****************
  5979 ;; Defined at:
  5980 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  f1              3   40[COMRAM] float 
  5983 ;;  f2              3   43[COMRAM] float 
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  f3_as_produc    3   50[COMRAM] unsigned um
  5986 ;;  sign            1   54[COMRAM] unsigned char 
  5987 ;;  cntr            1   53[COMRAM] unsigned char 
  5988 ;;  exp             1   49[COMRAM] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  3   40[COMRAM] float 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5998 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;Total ram usage:       15 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    1
  6005 ;; This function calls:
  6006 ;;		___ftpack
  6007 ;; This function is called by:
  6008 ;;		_calculatePID
  6009 ;;		_RTD2Angle
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text39
  6014  000CFE                     __ptext39:
  6015                           	opt stack 0
  6016  000CFE                     ___ftmul:
  6017                           	opt stack 19
  6018                           
  6019                           ;incstack = 0
  6020  000CFE  C02B  F02F         	movff	___ftmul@f1+2,??___ftmul
  6021  000D02  6A30               	clrf	(??___ftmul+1)& (0+255),c
  6022  000D04  6A31               	clrf	(??___ftmul+2)& (0+255),c
  6023  000D06  342A               	rlcf	___ftmul@f1+1,w,c
  6024  000D08  362F               	rlcf	??___ftmul& (0+255),f,c
  6025  000D0A  E301               	bnc	u177_41
  6026  000D0C  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  6027  000D0E                     u177_41:
  6028  000D0E  502F               	movf	??___ftmul,w,c
  6029  000D10  6E32               	movwf	___ftmul@exp,c
  6030  000D12  5032               	movf	___ftmul@exp,w,c
  6031  000D14  A4D8               	btfss	status,2,c
  6032  000D16  D002               	goto	i2l2450
  6033  000D18  D00E               	goto	i2l2452
  6034  000D1A  D06C               	goto	i2l1012
  6035  000D1C                     i2l2450:
  6036  000D1C  C02E  F02F         	movff	___ftmul@f2+2,??___ftmul
  6037  000D20  6A30               	clrf	(??___ftmul+1)& (0+255),c
  6038  000D22  6A31               	clrf	(??___ftmul+2)& (0+255),c
  6039  000D24  342D               	rlcf	___ftmul@f2+1,w,c
  6040  000D26  362F               	rlcf	??___ftmul& (0+255),f,c
  6041  000D28  E301               	bnc	u179_41
  6042  000D2A  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  6043  000D2C                     u179_41:
  6044  000D2C  502F               	movf	??___ftmul,w,c
  6045  000D2E  6E37               	movwf	___ftmul@sign,c
  6046  000D30  5037               	movf	___ftmul@sign,w,c
  6047  000D32  A4D8               	btfss	status,2,c
  6048  000D34  D007               	goto	i2l2456
  6049  000D36                     i2l2452:
  6050  000D36  0E00               	movlw	0
  6051  000D38  6E29               	movwf	?___ftmul,c
  6052  000D3A  0E00               	movlw	0
  6053  000D3C  6E2A               	movwf	?___ftmul+1,c
  6054  000D3E  0E00               	movlw	0
  6055  000D40  6E2B               	movwf	?___ftmul+2,c
  6056  000D42  D058               	goto	i2l1012
  6057  000D44                     i2l2456:
  6058  000D44  5037               	movf	___ftmul@sign,w,c
  6059  000D46  0F7B               	addlw	123
  6060  000D48  2632               	addwf	___ftmul@exp,f,c
  6061  000D4A  C02B  F037         	movff	___ftmul@f1+2,___ftmul@sign
  6062  000D4E  502E               	movf	___ftmul@f2+2,w,c
  6063  000D50  1A37               	xorwf	___ftmul@sign,f,c
  6064  000D52  0E80               	movlw	128
  6065  000D54  1637               	andwf	___ftmul@sign,f,c
  6066  000D56  8E2A               	bsf	___ftmul@f1+1,7,c
  6067  000D58  8E2D               	bsf	___ftmul@f2+1,7,c
  6068  000D5A  0EFF               	movlw	255
  6069  000D5C  162C               	andwf	___ftmul@f2,f,c
  6070  000D5E  0EFF               	movlw	255
  6071  000D60  162D               	andwf	___ftmul@f2+1,f,c
  6072  000D62  0E00               	movlw	0
  6073  000D64  162E               	andwf	___ftmul@f2+2,f,c
  6074  000D66  0E00               	movlw	0
  6075  000D68  6E33               	movwf	___ftmul@f3_as_product,c
  6076  000D6A  0E00               	movlw	0
  6077  000D6C  6E34               	movwf	___ftmul@f3_as_product+1,c
  6078  000D6E  0E00               	movlw	0
  6079  000D70  6E35               	movwf	___ftmul@f3_as_product+2,c
  6080  000D72  0E07               	movlw	7
  6081  000D74  6E36               	movwf	___ftmul@cntr,c
  6082  000D76  D000               	goto	i2l2470
  6083  000D78                     i2l2470:
  6084  000D78  A029               	btfss	___ftmul@f1,0,c
  6085  000D7A  D007               	goto	i2l2474
  6086  000D7C  502C               	movf	___ftmul@f2,w,c
  6087  000D7E  2633               	addwf	___ftmul@f3_as_product,f,c
  6088  000D80  502D               	movf	___ftmul@f2+1,w,c
  6089  000D82  2234               	addwfc	___ftmul@f3_as_product+1,f,c
  6090  000D84  502E               	movf	___ftmul@f2+2,w,c
  6091  000D86  2235               	addwfc	___ftmul@f3_as_product+2,f,c
  6092  000D88  D000               	goto	i2l2474
  6093  000D8A                     i2l2474:
  6094  000D8A  90D8               	bcf	status,0,c
  6095  000D8C  322B               	rrcf	___ftmul@f1+2,f,c
  6096  000D8E  322A               	rrcf	___ftmul@f1+1,f,c
  6097  000D90  3229               	rrcf	___ftmul@f1,f,c
  6098  000D92  90D8               	bcf	status,0,c
  6099  000D94  362C               	rlcf	___ftmul@f2,f,c
  6100  000D96  362D               	rlcf	___ftmul@f2+1,f,c
  6101  000D98  362E               	rlcf	___ftmul@f2+2,f,c
  6102  000D9A  2E36               	decfsz	___ftmul@cntr,f,c
  6103  000D9C  D7ED               	goto	i2l2470
  6104  000D9E  D000               	goto	i2l2478
  6105  000DA0                     i2l2478:
  6106  000DA0  0E09               	movlw	9
  6107  000DA2  6E36               	movwf	___ftmul@cntr,c
  6108  000DA4  D000               	goto	i2l2480
  6109  000DA6                     i2l2480:
  6110  000DA6  A029               	btfss	___ftmul@f1,0,c
  6111  000DA8  D007               	goto	i2l2484
  6112  000DAA  502C               	movf	___ftmul@f2,w,c
  6113  000DAC  2633               	addwf	___ftmul@f3_as_product,f,c
  6114  000DAE  502D               	movf	___ftmul@f2+1,w,c
  6115  000DB0  2234               	addwfc	___ftmul@f3_as_product+1,f,c
  6116  000DB2  502E               	movf	___ftmul@f2+2,w,c
  6117  000DB4  2235               	addwfc	___ftmul@f3_as_product+2,f,c
  6118  000DB6  D000               	goto	i2l2484
  6119  000DB8                     i2l2484:
  6120  000DB8  90D8               	bcf	status,0,c
  6121  000DBA  322B               	rrcf	___ftmul@f1+2,f,c
  6122  000DBC  322A               	rrcf	___ftmul@f1+1,f,c
  6123  000DBE  3229               	rrcf	___ftmul@f1,f,c
  6124  000DC0  90D8               	bcf	status,0,c
  6125  000DC2  3235               	rrcf	___ftmul@f3_as_product+2,f,c
  6126  000DC4  3234               	rrcf	___ftmul@f3_as_product+1,f,c
  6127  000DC6  3233               	rrcf	___ftmul@f3_as_product,f,c
  6128  000DC8  2E36               	decfsz	___ftmul@cntr,f,c
  6129  000DCA  D7ED               	goto	i2l2480
  6130  000DCC  D000               	goto	i2l2488
  6131  000DCE                     i2l2488:
  6132  000DCE  C033  F012         	movff	___ftmul@f3_as_product,___ftpack@arg
  6133  000DD2  C034  F013         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6134  000DD6  C035  F014         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6135  000DDA  C032  F015         	movff	___ftmul@exp,___ftpack@exp
  6136  000DDE  C037  F016         	movff	___ftmul@sign,___ftpack@sign
  6137  000DE2  ECD5  F007         	call	___ftpack	;wreg free
  6138  000DE6  C012  F029         	movff	?___ftpack,?___ftmul
  6139  000DEA  C013  F02A         	movff	?___ftpack+1,?___ftmul+1
  6140  000DEE  C014  F02B         	movff	?___ftpack+2,?___ftmul+2
  6141  000DF2  D000               	goto	i2l1012
  6142  000DF4                     i2l1012:
  6143  000DF4  0012               	return		;funcret
  6144  000DF6                     __end_of___ftmul:
  6145                           	opt stack 0
  6146                           pclatu	equ	0xFFB
  6147                           pclath	equ	0xFFA
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           intcon	equ	0xFF2
  6155                           intcon2	equ	0xFF1
  6156                           postinc0	equ	0xFEE
  6157                           fsr0h	equ	0xFEA
  6158                           fsr0l	equ	0xFE9
  6159                           wreg	equ	0xFE8
  6160                           fsr1h	equ	0xFE2
  6161                           fsr1l	equ	0xFE1
  6162                           bsr	equ	0xFE0
  6163                           indf2	equ	0xFDF
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function ___ftpack *****************
  6169 ;; Defined at:
  6170 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  arg             3   17[COMRAM] unsigned um
  6173 ;;  exp             1   20[COMRAM] unsigned char 
  6174 ;;  sign            1   21[COMRAM] unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  3   17[COMRAM] float 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6186 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;Total ram usage:        8 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; This function calls:
  6193 ;;		Nothing
  6194 ;; This function is called by:
  6195 ;;		___ftadd
  6196 ;;		___ftdiv
  6197 ;;		___ftmul
  6198 ;;		___lwtoft
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text40
  6203  000FAA                     __ptext40:
  6204                           	opt stack 0
  6205  000FAA                     ___ftpack:
  6206                           	opt stack 19
  6207                           
  6208                           ;incstack = 0
  6209  000FAA  5015               	movf	___ftpack@exp,w,c
  6210  000FAC  B4D8               	btfsc	status,2,c
  6211  000FAE  D005               	goto	i2l2226
  6212  000FB0  5012               	movf	___ftpack@arg,w,c
  6213  000FB2  1013               	iorwf	___ftpack@arg+1,w,c
  6214  000FB4  1014               	iorwf	___ftpack@arg+2,w,c
  6215  000FB6  A4D8               	btfss	status,2,c
  6216  000FB8  D00E               	goto	i2l2232
  6217  000FBA                     i2l2226:
  6218  000FBA  0E00               	movlw	0
  6219  000FBC  6E12               	movwf	?___ftpack,c
  6220  000FBE  0E00               	movlw	0
  6221  000FC0  6E13               	movwf	?___ftpack+1,c
  6222  000FC2  0E00               	movlw	0
  6223  000FC4  6E14               	movwf	?___ftpack+2,c
  6224  000FC6  D053               	goto	i2l925
  6225  000FC8  D006               	goto	i2l2232
  6226  000FCA                     i2l2230:
  6227  000FCA  2A15               	incf	___ftpack@exp,f,c
  6228  000FCC  90D8               	bcf	status,0,c
  6229  000FCE  3214               	rrcf	___ftpack@arg+2,f,c
  6230  000FD0  3213               	rrcf	___ftpack@arg+1,f,c
  6231  000FD2  3212               	rrcf	___ftpack@arg,f,c
  6232  000FD4  D000               	goto	i2l2232
  6233  000FD6                     i2l2232:
  6234  000FD6  0E00               	movlw	0
  6235  000FD8  1412               	andwf	___ftpack@arg,w,c
  6236  000FDA  6E17               	movwf	??___ftpack& (0+255),c
  6237  000FDC  0E00               	movlw	0
  6238  000FDE  1413               	andwf	___ftpack@arg+1,w,c
  6239  000FE0  6E18               	movwf	(??___ftpack+1)& (0+255),c
  6240  000FE2  0EFE               	movlw	254
  6241  000FE4  1414               	andwf	___ftpack@arg+2,w,c
  6242  000FE6  6E19               	movwf	(??___ftpack+2)& (0+255),c
  6243  000FE8  5017               	movf	??___ftpack,w,c
  6244  000FEA  1018               	iorwf	??___ftpack+1,w,c
  6245  000FEC  1019               	iorwf	??___ftpack+2,w,c
  6246  000FEE  B4D8               	btfsc	status,2,c
  6247  000FF0  D00E               	goto	i2l2238
  6248  000FF2  D7EB               	goto	i2l2230
  6249  000FF4  D00C               	goto	i2l2238
  6250  000FF6                     i2l2234:
  6251  000FF6  2A15               	incf	___ftpack@exp,f,c
  6252  000FF8  0E01               	movlw	1
  6253  000FFA  2612               	addwf	___ftpack@arg,f,c
  6254  000FFC  0E00               	movlw	0
  6255  000FFE  2213               	addwfc	___ftpack@arg+1,f,c
  6256  001000  0E00               	movlw	0
  6257  001002  2214               	addwfc	___ftpack@arg+2,f,c
  6258  001004  90D8               	bcf	status,0,c
  6259  001006  3214               	rrcf	___ftpack@arg+2,f,c
  6260  001008  3213               	rrcf	___ftpack@arg+1,f,c
  6261  00100A  3212               	rrcf	___ftpack@arg,f,c
  6262  00100C  D000               	goto	i2l2238
  6263  00100E                     i2l2238:
  6264  00100E  0E00               	movlw	0
  6265  001010  1412               	andwf	___ftpack@arg,w,c
  6266  001012  6E17               	movwf	??___ftpack& (0+255),c
  6267  001014  0E00               	movlw	0
  6268  001016  1413               	andwf	___ftpack@arg+1,w,c
  6269  001018  6E18               	movwf	(??___ftpack+1)& (0+255),c
  6270  00101A  0EFF               	movlw	255
  6271  00101C  1414               	andwf	___ftpack@arg+2,w,c
  6272  00101E  6E19               	movwf	(??___ftpack+2)& (0+255),c
  6273  001020  5017               	movf	??___ftpack,w,c
  6274  001022  1018               	iorwf	??___ftpack+1,w,c
  6275  001024  1019               	iorwf	??___ftpack+2,w,c
  6276  001026  B4D8               	btfsc	status,2,c
  6277  001028  D008               	goto	i2l2242
  6278  00102A  D7E5               	goto	i2l2234
  6279  00102C  D006               	goto	i2l2242
  6280  00102E                     i2l2240:
  6281  00102E  0615               	decf	___ftpack@exp,f,c
  6282  001030  90D8               	bcf	status,0,c
  6283  001032  3612               	rlcf	___ftpack@arg,f,c
  6284  001034  3613               	rlcf	___ftpack@arg+1,f,c
  6285  001036  3614               	rlcf	___ftpack@arg+2,f,c
  6286  001038  D000               	goto	i2l2242
  6287  00103A                     i2l2242:
  6288  00103A  BE13               	btfsc	___ftpack@arg+1,7,c
  6289  00103C  D004               	goto	i2l936
  6290  00103E  0E02               	movlw	2
  6291  001040  6015               	cpfslt	___ftpack@exp,c
  6292  001042  D7F5               	goto	i2l2240
  6293  001044  D000               	goto	i2l936
  6294  001046                     i2l936:
  6295  001046  B015               	btfsc	___ftpack@exp,0,c
  6296  001048  D002               	goto	i2l2248
  6297  00104A  9E13               	bcf	___ftpack@arg+1,7,c
  6298  00104C  D000               	goto	i2l2248
  6299  00104E                     i2l2248:
  6300  00104E  90D8               	bcf	status,0,c
  6301  001050  3215               	rrcf	___ftpack@exp,f,c
  6302  001052  5015               	movf	___ftpack@exp,w,c
  6303  001054  1214               	iorwf	___ftpack@arg+2,f,c
  6304  001056  5016               	movf	___ftpack@sign,w,c
  6305  001058  B4D8               	btfsc	status,2,c
  6306  00105A  D002               	goto	i2l2254
  6307  00105C  8E14               	bsf	___ftpack@arg+2,7,c
  6308  00105E  D000               	goto	i2l2254
  6309  001060                     i2l2254:
  6310  001060  C012  F012         	movff	___ftpack@arg,?___ftpack
  6311  001064  C013  F013         	movff	___ftpack@arg+1,?___ftpack+1
  6312  001068  C014  F014         	movff	___ftpack@arg+2,?___ftpack+2
  6313  00106C  D000               	goto	i2l925
  6314  00106E                     i2l925:
  6315  00106E  0012               	return		;funcret
  6316  001070                     __end_of___ftpack:
  6317                           	opt stack 0
  6318                           pclatu	equ	0xFFB
  6319                           pclath	equ	0xFFA
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           intcon2	equ	0xFF1
  6328                           postinc0	equ	0xFEE
  6329                           fsr0h	equ	0xFEA
  6330                           fsr0l	equ	0xFE9
  6331                           wreg	equ	0xFE8
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           bsr	equ	0xFE0
  6335                           indf2	equ	0xFDF
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _ImplementPIDMotion *****************
  6341 ;; Defined at:
  6342 ;;		line 33 in file "MotorControl.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  PIDValue        2   21[COMRAM] int 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;		None               void
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;Total ram usage:        4 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    1
  6363 ;; This function calls:
  6364 ;;		i2_abs
  6365 ;; This function is called by:
  6366 ;;		_TMR0Int
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text41
  6371  00145E                     __ptext41:
  6372                           	opt stack 0
  6373  00145E                     _ImplementPIDMotion:
  6374                           	opt stack 20
  6375                           
  6376                           ;MotorControl.c: 35: if (PIDValue < 0)
  6377                           
  6378                           ;incstack = 0
  6379  00145E  AE17               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  6380  001460  D002               	goto	i2l2602
  6381                           
  6382                           ;MotorControl.c: 36: CCP3CONbits.P3M1 = 1;
  6383  001462  8EB7               	bsf	4023,7,c	;volatile
  6384  001464  D009               	goto	i2l2606
  6385  001466                     i2l2602:
  6386                           
  6387                           ;MotorControl.c: 37: else if (PIDValue > 0)
  6388  001466  BE17               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  6389  001468  D007               	goto	i2l2606
  6390  00146A  5017               	movf	ImplementPIDMotion@PIDValue+1,w,c
  6391  00146C  E103               	bnz	i2u200_40
  6392  00146E  0416               	decf	ImplementPIDMotion@PIDValue,w,c
  6393  001470  A0D8               	btfss	status,0,c
  6394  001472  D002               	goto	i2l2606
  6395  001474                     i2u200_40:
  6396                           
  6397                           ;MotorControl.c: 38: CCP3CONbits.P3M1 = 0;
  6398  001474  9EB7               	bcf	4023,7,c	;volatile
  6399  001476  D000               	goto	i2l2606
  6400  001478                     i2l2606:
  6401                           
  6402                           ;MotorControl.c: 40: PIDValue = abs(PIDValue);
  6403  001478  C016  F012         	movff	ImplementPIDMotion@PIDValue,i2abs@a
  6404  00147C  C017  F013         	movff	ImplementPIDMotion@PIDValue+1,i2abs@a+1
  6405  001480  EC2B  F00C         	call	i2_abs	;wreg free
  6406  001484  C012  F016         	movff	?i2_abs,ImplementPIDMotion@PIDValue
  6407  001488  C013  F017         	movff	?i2_abs+1,ImplementPIDMotion@PIDValue+1
  6408                           
  6409                           ;MotorControl.c: 41: CCPR3L = (PIDValue >> 2) & 0xFF;
  6410  00148C  C016  F018         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  6411  001490  C017  F019         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  6412  001494  3419               	rlcf	??_ImplementPIDMotion+1,w,c
  6413  001496  3219               	rrcf	??_ImplementPIDMotion+1,f,c
  6414  001498  3218               	rrcf	??_ImplementPIDMotion,f,c
  6415  00149A  3419               	rlcf	??_ImplementPIDMotion+1,w,c
  6416  00149C  3219               	rrcf	??_ImplementPIDMotion+1,f,c
  6417  00149E  3218               	rrcf	??_ImplementPIDMotion,f,c
  6418  0014A0  5018               	movf	??_ImplementPIDMotion,w,c
  6419  0014A2  6EB8               	movwf	4024,c	;volatile
  6420                           
  6421                           ;MotorControl.c: 42: CCP3CONbits.DC3B = (PIDValue & 0x03);
  6422  0014A4  C016  F018         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  6423  0014A8  0E03               	movlw	3
  6424  0014AA  1618               	andwf	??_ImplementPIDMotion,f,c
  6425  0014AC  3A18               	swapf	??_ImplementPIDMotion,f,c
  6426  0014AE  50B7               	movf	4023,w,c	;volatile
  6427  0014B0  1818               	xorwf	??_ImplementPIDMotion,w,c
  6428  0014B2  0BCF               	andlw	-49
  6429  0014B4  1818               	xorwf	??_ImplementPIDMotion,w,c
  6430  0014B6  6EB7               	movwf	4023,c	;volatile
  6431  0014B8  0012               	return		;funcret
  6432  0014BA                     __end_of_ImplementPIDMotion:
  6433                           	opt stack 0
  6434                           pclatu	equ	0xFFB
  6435                           pclath	equ	0xFFA
  6436                           tblptru	equ	0xFF8
  6437                           tblptrh	equ	0xFF7
  6438                           tblptrl	equ	0xFF6
  6439                           tablat	equ	0xFF5
  6440                           prodh	equ	0xFF4
  6441                           prodl	equ	0xFF3
  6442                           intcon	equ	0xFF2
  6443                           intcon2	equ	0xFF1
  6444                           postinc0	equ	0xFEE
  6445                           fsr0h	equ	0xFEA
  6446                           fsr0l	equ	0xFE9
  6447                           wreg	equ	0xFE8
  6448                           fsr1h	equ	0xFE2
  6449                           fsr1l	equ	0xFE1
  6450                           bsr	equ	0xFE0
  6451                           indf2	equ	0xFDF
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456 ;; *************** function i2_abs *****************
  6457 ;; Defined at:
  6458 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  a               2   17[COMRAM] int 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  2   17[COMRAM] int 
  6465 ;; Registers used:
  6466 ;;		wreg, status,2, status,0
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;Total ram usage:        4 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; This function calls:
  6479 ;;		Nothing
  6480 ;; This function is called by:
  6481 ;;		_ImplementPIDMotion
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text42
  6486  001856                     __ptext42:
  6487                           	opt stack 0
  6488  001856                     i2_abs:
  6489                           	opt stack 20
  6490                           
  6491                           ;incstack = 0
  6492  001856  AE13               	btfss	i2abs@a+1,7,c
  6493  001858  D00D               	goto	i2l639
  6494  00185A  C012  F014         	movff	i2abs@a,??i2_abs
  6495  00185E  C013  F015         	movff	i2abs@a+1,??i2_abs+1
  6496  001862  1E14               	comf	??i2_abs,f,c
  6497  001864  1E15               	comf	??i2_abs+1,f,c
  6498  001866  4A14               	infsnz	??i2_abs,f,c
  6499  001868  2A15               	incf	??i2_abs+1,f,c
  6500  00186A  C014  F012         	movff	??i2_abs,?i2_abs
  6501  00186E  C015  F013         	movff	??i2_abs+1,?i2_abs+1
  6502  001872  D004               	goto	i2l640
  6503  001874                     i2l639:
  6504  001874  C012  F012         	movff	i2abs@a,?i2_abs
  6505  001878  C013  F013         	movff	i2abs@a+1,?i2_abs+1
  6506  00187C                     i2l640:
  6507  00187C  0012               	return		;funcret
  6508  00187E                     __end_ofi2_abs:
  6509                           	opt stack 0
  6510                           pclatu	equ	0xFFB
  6511                           pclath	equ	0xFFA
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           intcon2	equ	0xFF1
  6520                           postinc0	equ	0xFEE
  6521                           fsr0h	equ	0xFEA
  6522                           fsr0l	equ	0xFE9
  6523                           wreg	equ	0xFE8
  6524                           fsr1h	equ	0xFE2
  6525                           fsr1l	equ	0xFE1
  6526                           bsr	equ	0xFE0
  6527                           indf2	equ	0xFDF
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function _INT0Int *****************
  6533 ;; Defined at:
  6534 ;;		line 69 in file "MotorControl.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;		None               void
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;Total ram usage:        0 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    1
  6555 ;; This function calls:
  6556 ;;		_KillMotors
  6557 ;; This function is called by:
  6558 ;;		_hISR
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text43
  6563  001A1E                     __ptext43:
  6564                           	opt stack 0
  6565  001A1E                     _INT0Int:
  6566                           	opt stack 21
  6567                           
  6568                           ;MotorControl.c: 71: KillMotors();
  6569                           
  6570                           ;incstack = 0
  6571  001A1E  EC06  F00D         	call	_KillMotors	;wreg free
  6572                           
  6573                           ;MotorControl.c: 72: INTCONbits.INT0IF = 0;
  6574  001A22  92F2               	bcf	intcon,1,c	;volatile
  6575  001A24  0012               	return		;funcret
  6576  001A26                     __end_of_INT0Int:
  6577                           	opt stack 0
  6578                           pclatu	equ	0xFFB
  6579                           pclath	equ	0xFFA
  6580                           tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           prodh	equ	0xFF4
  6585                           prodl	equ	0xFF3
  6586                           intcon	equ	0xFF2
  6587                           intcon2	equ	0xFF1
  6588                           postinc0	equ	0xFEE
  6589                           fsr0h	equ	0xFEA
  6590                           fsr0l	equ	0xFE9
  6591                           wreg	equ	0xFE8
  6592                           fsr1h	equ	0xFE2
  6593                           fsr1l	equ	0xFE1
  6594                           bsr	equ	0xFE0
  6595                           indf2	equ	0xFDF
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function _KillMotors *****************
  6601 ;; Defined at:
  6602 ;;		line 27 in file "MotorControl.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;		None
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;		None
  6607 ;; Return value:  Size  Location     Type
  6608 ;;		None               void
  6609 ;; Registers used:
  6610 ;;		wreg, status,2, status,0
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;Total ram usage:        0 bytes
  6621 ;; Hardware stack levels used:    1
  6622 ;; This function calls:
  6623 ;;		Nothing
  6624 ;; This function is called by:
  6625 ;;		_INT0Int
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text44
  6630  001A0C                     __ptext44:
  6631                           	opt stack 0
  6632  001A0C                     _KillMotors:
  6633                           	opt stack 21
  6634                           
  6635                           ;MotorControl.c: 29: PORTAbits.RA4 = 1;
  6636                           
  6637                           ;incstack = 0
  6638  001A0C  8880               	bsf	3968,4,c	;volatile
  6639                           
  6640                           ;MotorControl.c: 30: CCP3CON = CCP3CON & 0xF0;
  6641  001A0E  50B7               	movf	4023,w,c	;volatile
  6642  001A10  0BF0               	andlw	240
  6643  001A12  6EB7               	movwf	4023,c	;volatile
  6644  001A14  0012               	return		;funcret
  6645  001A16                     __end_of_KillMotors:
  6646                           	opt stack 0
  6647                           pclatu	equ	0xFFB
  6648                           pclath	equ	0xFFA
  6649                           tblptru	equ	0xFF8
  6650                           tblptrh	equ	0xFF7
  6651                           tblptrl	equ	0xFF6
  6652                           tablat	equ	0xFF5
  6653                           prodh	equ	0xFF4
  6654                           prodl	equ	0xFF3
  6655                           intcon	equ	0xFF2
  6656                           intcon2	equ	0xFF1
  6657                           postinc0	equ	0xFEE
  6658                           fsr0h	equ	0xFEA
  6659                           fsr0l	equ	0xFE9
  6660                           wreg	equ	0xFE8
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           bsr	equ	0xFE0
  6664                           indf2	equ	0xFDF
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function _HLVDInt *****************
  6670 ;; Defined at:
  6671 ;;		line 150 in file "EEPROM.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;		None
  6676 ;; Return value:  Size  Location     Type
  6677 ;;		None               void
  6678 ;; Registers used:
  6679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:        0 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    2
  6692 ;; This function calls:
  6693 ;;		_EEWriteChar
  6694 ;;		_EEWriteDouble
  6695 ;; This function is called by:
  6696 ;;		_hISR
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text45
  6701  001070                     __ptext45:
  6702                           	opt stack 0
  6703  001070                     _HLVDInt:
  6704                           	opt stack 20
  6705                           
  6706                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  6707                           
  6708                           ;incstack = 0
  6709  001070  C0AF  F016         	movff	_SetAngle,EEWriteDouble@dub
  6710  001074  C0B0  F017         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6711  001078  C0B1  F018         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6712  00107C  0E00               	movlw	0
  6713  00107E  EC5D  F00A         	call	_EEWriteDouble
  6714                           
  6715                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  6716  001082  C0AC  F016         	movff	_Kp,EEWriteDouble@dub
  6717  001086  C0AD  F017         	movff	_Kp+1,EEWriteDouble@dub+1
  6718  00108A  C0AE  F018         	movff	_Kp+2,EEWriteDouble@dub+2
  6719  00108E  0E03               	movlw	3
  6720  001090  EC5D  F00A         	call	_EEWriteDouble
  6721                           
  6722                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  6723  001094  C0A9  F016         	movff	_Ki,EEWriteDouble@dub
  6724  001098  C0AA  F017         	movff	_Ki+1,EEWriteDouble@dub+1
  6725  00109C  C0AB  F018         	movff	_Ki+2,EEWriteDouble@dub+2
  6726  0010A0  0E06               	movlw	6
  6727  0010A2  EC5D  F00A         	call	_EEWriteDouble
  6728                           
  6729                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  6730  0010A6  C0A6  F016         	movff	_Kd,EEWriteDouble@dub
  6731  0010AA  C0A7  F017         	movff	_Kd+1,EEWriteDouble@dub+1
  6732  0010AE  C0A8  F018         	movff	_Kd+2,EEWriteDouble@dub+2
  6733  0010B2  0E09               	movlw	9
  6734  0010B4  EC5D  F00A         	call	_EEWriteDouble
  6735                           
  6736                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  6737  0010B8  CF80 F016          	movff	3968,EEWriteChar@ch	;volatile
  6738  0010BC  0E0C               	movlw	12
  6739  0010BE  EC75  F00C         	call	_EEWriteChar
  6740                           
  6741                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  6742  0010C2  CF81 F016          	movff	3969,EEWriteChar@ch	;volatile
  6743  0010C6  0E0D               	movlw	13
  6744  0010C8  EC75  F00C         	call	_EEWriteChar
  6745                           
  6746                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  6747  0010CC  CF82 F016          	movff	3970,EEWriteChar@ch	;volatile
  6748  0010D0  0E0E               	movlw	14
  6749  0010D2  EC75  F00C         	call	_EEWriteChar
  6750                           
  6751                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  6752  0010D6  CF83 F016          	movff	3971,EEWriteChar@ch	;volatile
  6753  0010DA  0E0F               	movlw	15
  6754  0010DC  EC75  F00C         	call	_EEWriteChar
  6755                           
  6756                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  6757  0010E0  CF84 F016          	movff	3972,EEWriteChar@ch	;volatile
  6758  0010E4  0E10               	movlw	16
  6759  0010E6  EC75  F00C         	call	_EEWriteChar
  6760                           
  6761                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  6762  0010EA  CF85 F016          	movff	3973,EEWriteChar@ch	;volatile
  6763  0010EE  0E11               	movlw	17
  6764  0010F0  EC75  F00C         	call	_EEWriteChar
  6765                           
  6766                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  6767  0010F4  CF86 F016          	movff	3974,EEWriteChar@ch	;volatile
  6768  0010F8  0E12               	movlw	18
  6769  0010FA  EC75  F00C         	call	_EEWriteChar
  6770                           
  6771                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  6772  0010FE  CF87 F016          	movff	3975,EEWriteChar@ch	;volatile
  6773  001102  0E13               	movlw	19
  6774  001104  EC75  F00C         	call	_EEWriteChar
  6775                           
  6776                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  6777  001108  CF88 F016          	movff	3976,EEWriteChar@ch	;volatile
  6778  00110C  0E14               	movlw	20
  6779  00110E  EC75  F00C         	call	_EEWriteChar
  6780                           
  6781                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  6782  001112  C0C4  F016         	movff	_PIDEnableFlag,EEWriteChar@ch
  6783  001116  0E15               	movlw	21
  6784  001118  EC75  F00C         	call	_EEWriteChar
  6785                           
  6786                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  6787  00111C  0E01               	movlw	1
  6788  00111E  6E16               	movwf	EEWriteChar@ch,c
  6789  001120  0E16               	movlw	22
  6790  001122  EC75  F00C         	call	_EEWriteChar
  6791  001126  0012               	return		;funcret
  6792  001128                     __end_of_HLVDInt:
  6793                           	opt stack 0
  6794                           pclatu	equ	0xFFB
  6795                           pclath	equ	0xFFA
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           intcon2	equ	0xFF1
  6804                           postinc0	equ	0xFEE
  6805                           fsr0h	equ	0xFEA
  6806                           fsr0l	equ	0xFE9
  6807                           wreg	equ	0xFE8
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           bsr	equ	0xFE0
  6811                           indf2	equ	0xFDF
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _EEWriteDouble *****************
  6817 ;; Defined at:
  6818 ;;		line 77 in file "EEPROM.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;  location        1    wreg     unsigned char 
  6821 ;;  dub             3   21[COMRAM] unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  location        1   24[COMRAM] unsigned char 
  6824 ;;  x               1   25[COMRAM] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;		None               void
  6827 ;; Registers used:
  6828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6834 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;Total ram usage:        5 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    1
  6841 ;; This function calls:
  6842 ;;		_EEDisassembleDouble
  6843 ;;		_Write_b_eep
  6844 ;;		i2_Busy_eep
  6845 ;; This function is called by:
  6846 ;;		_HLVDInt
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text46
  6851  0014BA                     __ptext46:
  6852                           	opt stack 0
  6853  0014BA                     _EEWriteDouble:
  6854                           	opt stack 20
  6855                           
  6856                           ;incstack = 0
  6857                           ;EEWriteDouble@location stored from wreg
  6858  0014BA  6E19               	movwf	EEWriteDouble@location,c
  6859                           
  6860                           ;EEPROM.c: 79: unsigned char x;
  6861                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  6862  0014BC  C016  F012         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6863  0014C0  C017  F013         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6864  0014C4  C018  F014         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6865  0014C8  EC82  F00B         	call	_EEDisassembleDouble	;wreg free
  6866                           
  6867                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  6868  0014CC  50F2               	movf	intcon,w,c	;volatile
  6869  0014CE  0B3F               	andlw	63
  6870  0014D0  6EF2               	movwf	intcon,c	;volatile
  6871                           
  6872                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  6873  0014D2  0E00               	movlw	0
  6874  0014D4  6E1A               	movwf	EEWriteDouble@x,c
  6875  0014D6                     i2l2738:
  6876  0014D6  0E02               	movlw	2
  6877  0014D8  641A               	cpfsgt	EEWriteDouble@x,c
  6878  0014DA  D001               	goto	i2l2742
  6879  0014DC  D014               	goto	i2l2752
  6880  0014DE                     i2l2742:
  6881                           
  6882                           ;EEPROM.c: 86: {
  6883                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  6884  0014DE  C019  F012         	movff	EEWriteDouble@location,Write_b_eep@badd
  6885  0014E2  6A13               	clrf	Write_b_eep@badd+1,c
  6886  0014E4  501A               	movf	EEWriteDouble@x,w,c
  6887  0014E6  0D01               	mullw	1
  6888  0014E8  0E4A               	movlw	low _DDouble
  6889  0014EA  24F3               	addwf	prodl,w,c
  6890  0014EC  6ED9               	movwf	fsr2l,c
  6891  0014EE  0E00               	movlw	high _DDouble
  6892  0014F0  20F4               	addwfc	prodh,w,c
  6893  0014F2  6EDA               	movwf	fsr2h,c
  6894  0014F4  50DF               	movf	indf2,w,c
  6895  0014F6  6E14               	movwf	Write_b_eep@bdat,c
  6896  0014F8  EC62  F00B         	call	_Write_b_eep	;wreg free
  6897                           
  6898                           ;EEPROM.c: 88: location++;
  6899  0014FC  2A19               	incf	EEWriteDouble@location,f,c
  6900                           
  6901                           ;EEPROM.c: 89: Busy_eep();
  6902  0014FE  EC13  F00D         	call	i2_Busy_eep	;wreg free
  6903  001502  2A1A               	incf	EEWriteDouble@x,f,c
  6904  001504  D7E8               	goto	i2l2738
  6905  001506                     i2l2752:
  6906                           
  6907                           ;EEPROM.c: 90: }
  6908                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  6909  001506  50F2               	movf	intcon,w,c	;volatile
  6910  001508  09C0               	iorlw	192
  6911  00150A  6EF2               	movwf	intcon,c	;volatile
  6912  00150C  0012               	return		;funcret
  6913  00150E                     __end_of_EEWriteDouble:
  6914                           	opt stack 0
  6915                           pclatu	equ	0xFFB
  6916                           pclath	equ	0xFFA
  6917                           tblptru	equ	0xFF8
  6918                           tblptrh	equ	0xFF7
  6919                           tblptrl	equ	0xFF6
  6920                           tablat	equ	0xFF5
  6921                           prodh	equ	0xFF4
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           intcon2	equ	0xFF1
  6925                           postinc0	equ	0xFEE
  6926                           fsr0h	equ	0xFEA
  6927                           fsr0l	equ	0xFE9
  6928                           wreg	equ	0xFE8
  6929                           fsr1h	equ	0xFE2
  6930                           fsr1l	equ	0xFE1
  6931                           bsr	equ	0xFE0
  6932                           indf2	equ	0xFDF
  6933                           fsr2h	equ	0xFDA
  6934                           fsr2l	equ	0xFD9
  6935                           status	equ	0xFD8
  6936                           
  6937 ;; *************** function _EEDisassembleDouble *****************
  6938 ;; Defined at:
  6939 ;;		line 48 in file "EEPROM.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  dub             3   17[COMRAM] unsigned char 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;		None               void
  6946 ;; Registers used:
  6947 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6953 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;Total ram usage:        3 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_EEWriteDouble
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text47
  6967  001704                     __ptext47:
  6968                           	opt stack 0
  6969  001704                     _EEDisassembleDouble:
  6970                           	opt stack 20
  6971                           
  6972                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  6973                           
  6974                           ;incstack = 0
  6975  001704  0E12               	movlw	low EEDisassembleDouble@dub
  6976  001706  0100               	movlb	0	; () banked
  6977  001708  6FBE               	movwf	_DoublePtr& (0+255),b
  6978  00170A  0E00               	movlw	high EEDisassembleDouble@dub
  6979  00170C  0100               	movlb	0	; () banked
  6980  00170E  6FBF               	movwf	(_DoublePtr+1)& (0+255),b
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  6984  001710  C0BE  FFD9         	movff	_DoublePtr,fsr2l
  6985  001714  C0BF  FFDA         	movff	_DoublePtr+1,fsr2h
  6986  001718  50DF               	movf	indf2,w,c
  6987  00171A  6E4A               	movwf	_DDouble,c
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  6991  00171C  0100               	movlb	0	; () banked
  6992  00171E  EE20 F001          	lfsr	2,1
  6993  001722  51BE               	movf	_DoublePtr& (0+255),w,b
  6994  001724  26D9               	addwf	fsr2l,f,c
  6995  001726  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  6996  001728  22DA               	addwfc	fsr2h,f,c
  6997  00172A  50DF               	movf	indf2,w,c
  6998  00172C  6E4B               	movwf	_DDouble+1,c
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7002  00172E  0100               	movlb	0	; () banked
  7003  001730  EE20 F002          	lfsr	2,2
  7004  001734  51BE               	movf	_DoublePtr& (0+255),w,b
  7005  001736  26D9               	addwf	fsr2l,f,c
  7006  001738  51BF               	movf	(_DoublePtr+1)& (0+255),w,b
  7007  00173A  22DA               	addwfc	fsr2h,f,c
  7008  00173C  50DF               	movf	indf2,w,c
  7009  00173E  6E4C               	movwf	_DDouble+2,c
  7010                           
  7011                           ; BSR set to: 0
  7012  001740  0012               	return		;funcret
  7013  001742                     __end_of_EEDisassembleDouble:
  7014                           	opt stack 0
  7015                           pclatu	equ	0xFFB
  7016                           pclath	equ	0xFFA
  7017                           tblptru	equ	0xFF8
  7018                           tblptrh	equ	0xFF7
  7019                           tblptrl	equ	0xFF6
  7020                           tablat	equ	0xFF5
  7021                           prodh	equ	0xFF4
  7022                           prodl	equ	0xFF3
  7023                           intcon	equ	0xFF2
  7024                           intcon2	equ	0xFF1
  7025                           postinc0	equ	0xFEE
  7026                           fsr0h	equ	0xFEA
  7027                           fsr0l	equ	0xFE9
  7028                           wreg	equ	0xFE8
  7029                           fsr1h	equ	0xFE2
  7030                           fsr1l	equ	0xFE1
  7031                           bsr	equ	0xFE0
  7032                           indf2	equ	0xFDF
  7033                           fsr2h	equ	0xFDA
  7034                           fsr2l	equ	0xFD9
  7035                           status	equ	0xFD8
  7036                           
  7037 ;; *************** function _EEWriteChar *****************
  7038 ;; Defined at:
  7039 ;;		line 122 in file "EEPROM.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  location        1    wreg     unsigned char 
  7042 ;;  ch              1   21[COMRAM] unsigned char 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  location        1   22[COMRAM] unsigned char 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;		None               void
  7047 ;; Registers used:
  7048 ;;		wreg, status,2, status,0, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;Total ram usage:        2 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    1
  7061 ;; This function calls:
  7062 ;;		_Write_b_eep
  7063 ;;		i2_Busy_eep
  7064 ;; This function is called by:
  7065 ;;		_HLVDInt
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text48
  7070  0018EA                     __ptext48:
  7071                           	opt stack 0
  7072  0018EA                     _EEWriteChar:
  7073                           	opt stack 20
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;incstack = 0
  7077                           ;EEWriteChar@location stored from wreg
  7078  0018EA  6E17               	movwf	EEWriteChar@location,c
  7079                           
  7080                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7081  0018EC  50F2               	movf	intcon,w,c	;volatile
  7082  0018EE  0B3F               	andlw	63
  7083  0018F0  6EF2               	movwf	intcon,c	;volatile
  7084                           
  7085                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7086  0018F2  C017  F012         	movff	EEWriteChar@location,Write_b_eep@badd
  7087  0018F6  6A13               	clrf	Write_b_eep@badd+1,c
  7088  0018F8  C016  F014         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7089  0018FC  EC62  F00B         	call	_Write_b_eep	;wreg free
  7090                           
  7091                           ;EEPROM.c: 127: Busy_eep();
  7092  001900  EC13  F00D         	call	i2_Busy_eep	;wreg free
  7093                           
  7094                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7095  001904  50F2               	movf	intcon,w,c	;volatile
  7096  001906  09C0               	iorlw	192
  7097  001908  6EF2               	movwf	intcon,c	;volatile
  7098  00190A  0012               	return		;funcret
  7099  00190C                     __end_of_EEWriteChar:
  7100                           	opt stack 0
  7101                           pclatu	equ	0xFFB
  7102                           pclath	equ	0xFFA
  7103                           tblptru	equ	0xFF8
  7104                           tblptrh	equ	0xFF7
  7105                           tblptrl	equ	0xFF6
  7106                           tablat	equ	0xFF5
  7107                           prodh	equ	0xFF4
  7108                           prodl	equ	0xFF3
  7109                           intcon	equ	0xFF2
  7110                           intcon2	equ	0xFF1
  7111                           postinc0	equ	0xFEE
  7112                           fsr0h	equ	0xFEA
  7113                           fsr0l	equ	0xFE9
  7114                           wreg	equ	0xFE8
  7115                           fsr1h	equ	0xFE2
  7116                           fsr1l	equ	0xFE1
  7117                           bsr	equ	0xFE0
  7118                           indf2	equ	0xFDF
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function i2_Busy_eep *****************
  7124 ;; Defined at:
  7125 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;		None               void
  7132 ;; Registers used:
  7133 ;;		None
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;Total ram usage:        0 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_EEWriteDouble
  7149 ;;		_EEWriteChar
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text49
  7154  001A26                     __ptext49:
  7155                           	opt stack 0
  7156  001A26                     i2_Busy_eep:
  7157                           	opt stack 20
  7158                           
  7159                           ;incstack = 0
  7160  001A26  D000               	goto	i2l529
  7161  001A28                     i2l529:
  7162  001A28  B2A6               	btfsc	4006,1,c	;volatile
  7163  001A2A  D7FE               	goto	i2l529
  7164  001A2C  0012               	return		;funcret
  7165  001A2E                     __end_ofi2_Busy_eep:
  7166                           	opt stack 0
  7167                           pclatu	equ	0xFFB
  7168                           pclath	equ	0xFFA
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           intcon	equ	0xFF2
  7176                           intcon2	equ	0xFF1
  7177                           postinc0	equ	0xFEE
  7178                           fsr0h	equ	0xFEA
  7179                           fsr0l	equ	0xFE9
  7180                           wreg	equ	0xFE8
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           bsr	equ	0xFE0
  7184                           indf2	equ	0xFDF
  7185                           fsr2h	equ	0xFDA
  7186                           fsr2l	equ	0xFD9
  7187                           status	equ	0xFD8
  7188                           
  7189 ;; *************** function _Write_b_eep *****************
  7190 ;; Defined at:
  7191 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  badd            2   17[COMRAM] unsigned int 
  7194 ;;  bdat            1   19[COMRAM] unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  GIE_BIT_VAL     1   20[COMRAM] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:        4 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_EEWriteDouble
  7216 ;;		_EEWriteChar
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	text50
  7221  0016C4                     __ptext50:
  7222                           	opt stack 0
  7223  0016C4                     _Write_b_eep:
  7224                           	opt stack 20
  7225                           
  7226                           ;incstack = 0
  7227  0016C4  0E00               	movlw	0
  7228  0016C6  6E15               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7229  0016C8  5013               	movf	Write_b_eep@badd+1,w,c
  7230  0016CA  0B03               	andlw	3
  7231  0016CC  6EAA               	movwf	4010,c	;volatile
  7232  0016CE  C012  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7233  0016D2  C014  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7234  0016D6  9EA6               	bcf	4006,7,c	;volatile
  7235  0016D8  9CA6               	bcf	4006,6,c	;volatile
  7236  0016DA  84A6               	bsf	4006,2,c	;volatile
  7237  0016DC  0E00               	movlw	0
  7238  0016DE  BEF2               	btfsc	intcon,7,c	;volatile
  7239  0016E0  0E01               	movlw	1
  7240  0016E2  6E15               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7241  0016E4  9EF2               	bcf	intcon,7,c	;volatile
  7242  0016E6  0E55               	movlw	85
  7243  0016E8  6EA7               	movwf	4007,c	;volatile
  7244  0016EA  0EAA               	movlw	170
  7245  0016EC  6EA7               	movwf	4007,c	;volatile
  7246  0016EE  82A6               	bsf	4006,1,c	;volatile
  7247  0016F0  D000               	goto	i2l560
  7248  0016F2                     i2l560:
  7249  0016F2  B2A6               	btfsc	4006,1,c	;volatile
  7250  0016F4  D7FE               	goto	i2l560
  7251  0016F6  B015               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7252  0016F8  D002               	bra	i2u150_45
  7253  0016FA  9EF2               	bcf	intcon,7,c	;volatile
  7254  0016FC  D001               	bra	i2u150_46
  7255  0016FE                     i2u150_45:
  7256  0016FE  8EF2               	bsf	intcon,7,c	;volatile
  7257  001700                     i2u150_46:
  7258  001700  94A6               	bcf	4006,2,c	;volatile
  7259  001702  0012               	return		;funcret
  7260  001704                     __end_of_Write_b_eep:
  7261                           	opt stack 0
  7262  0000                     pclatu	equ	0xFFB
  7263                           pclath	equ	0xFFA
  7264                           tblptru	equ	0xFF8
  7265                           tblptrh	equ	0xFF7
  7266                           tblptrl	equ	0xFF6
  7267                           tablat	equ	0xFF5
  7268                           prodh	equ	0xFF4
  7269                           prodl	equ	0xFF3
  7270                           intcon	equ	0xFF2
  7271                           intcon2	equ	0xFF1
  7272                           postinc0	equ	0xFEE
  7273                           fsr0h	equ	0xFEA
  7274                           fsr0l	equ	0xFE9
  7275                           wreg	equ	0xFE8
  7276                           fsr1h	equ	0xFE2
  7277                           fsr1l	equ	0xFE1
  7278                           bsr	equ	0xFE0
  7279                           indf2	equ	0xFDF
  7280                           fsr2h	equ	0xFDA
  7281                           fsr2l	equ	0xFD9
  7282                           status	equ	0xFD8
  7283                           pclatu	equ	0xFFB
  7284                           pclath	equ	0xFFA
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           intcon2	equ	0xFF1
  7293                           postinc0	equ	0xFEE
  7294                           fsr0h	equ	0xFEA
  7295                           fsr0l	equ	0xFE9
  7296                           wreg	equ	0xFE8
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           bsr	equ	0xFE0
  7300                           indf2	equ	0xFDF
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305                           	psect	rparam
  7306  0000                     pclatu	equ	0xFFB
  7307                           pclath	equ	0xFFA
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           intcon	equ	0xFF2
  7315                           intcon2	equ	0xFF1
  7316                           postinc0	equ	0xFEE
  7317                           fsr0h	equ	0xFEA
  7318                           fsr0l	equ	0xFE9
  7319                           wreg	equ	0xFE8
  7320                           fsr1h	equ	0xFE2
  7321                           fsr1l	equ	0xFE1
  7322                           bsr	equ	0xFE0
  7323                           indf2	equ	0xFDF
  7324                           fsr2h	equ	0xFDA
  7325                           fsr2l	equ	0xFD9
  7326                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     73      77
    BANK0           160     60     103
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(BANK0[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(BANK0[3]), 
		 -> SPIDisassembleDouble@dub(BANK0[3]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _hISR in COMRAM

    _calculatePID->___ftge
    ___fttol->___ftadd
    ___ftge->___ftadd
    ___ftdiv->___ftpack
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementPIDMotion->i2_abs
    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _lISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SPIDisassembleDouble->_GenerateChecksum
    _ImplementJSMotion->_DetectMovement

Critical Paths under _hISR in BANK0

    _TMR0Int->_calculatePID
    _calculatePID->___fttol

Critical Paths under _lISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _hISR in BANK1

    None.

Critical Paths under _lISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _hISR in BANK2

    None.

Critical Paths under _lISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _hISR in BANK3

    None.

Critical Paths under _lISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _hISR in BANK4

    None.

Critical Paths under _lISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _hISR in BANK5

    None.

Critical Paths under _lISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _hISR in BANK6

    None.

Critical Paths under _lISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _hISR in BANK7

    None.

Critical Paths under _lISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _hISR in BANK8

    None.

Critical Paths under _lISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _hISR in BANK9

    None.

Critical Paths under _lISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _hISR in BANK10

    None.

Critical Paths under _lISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _hISR in BANK11

    None.

Critical Paths under _lISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _hISR in BANK12

    None.

Critical Paths under _lISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _hISR in BANK13

    None.

Critical Paths under _lISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _hISR in BANK14

    None.

Critical Paths under _lISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _hISR in BANK15

    None.

Critical Paths under _lISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2067
                                             58 BANK0      2     2      0
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     845
                         _EEPROMInit
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     216
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             45 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             45 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             45 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      22
                                             45 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     563
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     563
                                             56 BANK0      2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     346
                                             51 BANK0      5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      62
                                             45 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             47 BANK0      2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             45 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      23
                                             45 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      62
                                             45 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     452
                                             47 BANK0      3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             45 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     411
                                             51 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     168
                                             45 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       6     4      2     136
                                             45 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _lISR                                                17    17      0       0
                                              0 COMRAM    17    17      0
                             _SPIInt
 ---------------------------------------------------------------------------------
 (7) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _hISR                                                16    16      0   25236
                                             29 BANK0     16    16      0
                            _HLVDInt
                            _INT0Int
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (9) _TMR0Int                                              0     0      0   23323
                 _ImplementPIDMotion
                          _RTD2Angle
                       _calculatePID
 ---------------------------------------------------------------------------------
 (10) _calculatePID                                       27    21      6   17676
                                             11 BANK0     18    12      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     448
                                             67 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftneg                                             3     0      3    1261
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (11) ___ftge                                              9     3      6    2046
                                             67 COMRAM     6     0      6
                                              0 BANK0      3     3      0
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            15     9      6    2580
                                             25 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            12     6      6    6442
                                             55 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) _RTD2Angle                                           3     0      3    5380
                                             55 COMRAM     3     0      3
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (11) ___lwtoft                                            3     0      3    2156
                                             25 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            15     9      6    3138
                                             40 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2070
                                             17 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) _ImplementPIDMotion                                  4     2      2     267
                                             21 COMRAM     4     2      2
                              i2_abs
 ---------------------------------------------------------------------------------
 (11) i2_abs                                               4     2      2      92
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (10) _KillMotors                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _HLVDInt                                              0     0      0    1913
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (10) _EEWriteDouble                                       5     2      3     819
                                             21 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (11) _EEDisassembleDouble                                 3     0      3     104
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) _EEWriteChar                                         2     1      1    1094
                                             21 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (11) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _Write_b_eep                                         4     1      3     346
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1

 _lISR (ROOT)
   _SPIInt

 _hISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _TMR0Int
     _ImplementPIDMotion
       i2_abs
     _RTD2Angle
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _calculatePID
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      67       5       64.4%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     49      4D       1       81.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4      32        0.0%
DATA                 0      0      B4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 21 02:36:26 2015

      __size_of_MotorDriverInit 0020                              l33 18D2                              l27 17B8  
                            l36 18E8                              l45 130A                              l39 1286  
                            _Kd 00A6                              _Ki 00A9                              _Kp 00AC  
                            bsr 000FE0             ?_EEReassembleDouble 008D                    ___ftadd@exp1 0043  
                  ___ftadd@exp2 0042       ImplementJSMotion@CCPinput 0097                    ___ftadd@sign 0041  
                           l324 0930                             l413 198E                             l422 1A0A  
                           l430 16C2                             l342 1806                             l334 0A06  
                           l433 15A4                             l521 1854                             l505 1558  
                           l419 1A02                             l515 13FC                             l640 1802  
                           l545 1962                             l529 1A18                             l821 19C2  
                           l581 141C                             l582 141E                             l639 17FA  
                           l833 19F0                             l585 143A                             l586 1456  
                           l499 1392                             l835 19FA                             l587 143C  
                           l579 1418                             l828 19AC                             l588 1440  
                           _PR2 000FCB                             _abs 17D8                             _err 00B5  
          __size_of_Write_b_eep 0040                             prod 000FF3                             wreg 000FE8  
               __end_of_INT0Int 1A26                    ___ftdiv@cntr 0023                 __end_of_HLVDInt 1128  
                    _Delay1TCYx 19EC                    ___ftdiv@sign 0028                    __CFG_WDT$OFF 000000  
                          ?_abs 008D                            l2204 13A4                            l3012 0946  
                          l3030 09A6                            l2216 13E4                            l2208 13AE  
                          l3008 0938                            l3040 09E4                            l3034 09C2  
                          l3026 098A                            l3018 0964                            l3042 09E8  
                          l2262 199C                            l3038 09DE                            l2258 19B2  
                          l2282 1444                            l2278 1422                            l2810 0F3E  
                          l2802 0EF8                            l2722 169E                            l2812 0F4A  
                          l2580 17C6                            l2806 0F12                            l2718 1690  
                          l2808 0F28                            l2728 16BC                            l2782 12D8  
                          l2950 080C                            l2792 12FE                            l2784 12EE  
                          l2980 08BC                            l2972 0884                            l2964 084C  
                          l2992 08E4                            l2976 08A0                            l2984 08D8  
                          l2968 0868                            l2996 0900                            l2998 090A  
                          u2300 0F0E                            u3027 199E                            u3037 19B4  
               __end_of_PIDInit 1684  ImplementJSMotion@JoystickValue 0093            ??_EEReassembleDouble 0090  
                          _hISR 0008                            _lISR 0018                    EEReadChar@ch 0090  
               __end_of_TMR0Int 163E                            abs@a 008D                            _main 0800  
                  ___ftpack@arg 0012                    ___ftpack@exp 0015                 __end_of_RTDInit 17AA  
               __end_of_SPIInit 1948                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            pclat 000FFA  
                ??_EEReadDouble 0096                            prodh 000FF4                            prodl 000FF3  
                          start 00AC             __size_of_EEPROMInit 0014                    ?_EEWriteChar 0016  
                  ___ftmul@cntr 0036                    ___param_bank 000010                    ___ftmul@sign 0037  
                   _Delay10TCYx 19AE                __end_of_EEBootUp 1394                    ___fttol@exp1 006A  
                         ??_abs 008F                    ___fttol@lval 0066                     _Delay1KTCYx 1998  
                         ?_hISR 0001                           ?_lISR 0001               RTD2Angle@RTDAngle 0038  
                         ?_main 0001                           _EEADR 000FA9                 __end_of___ftadd 0BDE  
               __end_of___ftdiv 0ED8                 __end_of___ftneg 18C8                 __end_of___ftmul 0DF6  
                         _T0CON 000FD5                 __end_of___fttol 0CFE                           _T2CON 000FCA  
                         _T3CON 000FB1                           i1l356 0066                           i2l213 1778  
                         i2l158 0666                           i2l352 11A2                           i2l560 16F2  
                         i2l640 187C                           i2l529 1A28                           i2l639 1874  
                         i2l925 106E                           i2l936 1046                           i2l980 0B4A  
                         i2l965 0A5E                           i2l966 0BDC                           i2l969 0A88  
                         i2l989 0B66                           i2l997 0ED6              __size_of_RTD2Angle 0038  
                         _TMR0H 000FD7                           _TMR0L 000FD6                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                         _PORTE 000F84                           _PORTF 000F85                           _PORTG 000F86  
                         _PORTH 000F87                           _PORTJ 000F88          ??_SPIDisassembleDouble 0092  
                         _TRISD 000F95                           _TRISH 000F99                           i2_abs 1856  
                __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 008D             __size_of_EEReadChar 0028  
        __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 0015                   ___ftpack@sign 0016  
                    _DoubleSPIS 009C                           main@x 009B                   ??_ReceiveSPI1 008D  
                         tablat 000FF5                     ?i2_Busy_eep 0001                           status 000FD8  
                 EEReadDouble@x 0097      __size_of_ImplementJSMotion 00D2           EEWriteDouble@location 0019  
           GenerateChecksum@sum 008D                      _ReadRTDpos 000000                      _KillMotors 1A0C  
               __initialization 1964                    __end_of_hISR 11DC                    __end_of_lISR 00AC  
                  __end_of_main 0A1A                  _DetectJoystick 18C8                  _DetectMovement 1282  
                    _Read_b_eep 1948                __end_of_Busy_eep 1A1E           EEReassembleDouble@dub 0090  
                __CFG_OSC$HSPLL 000000                          ??_hISR 007D                          ??_lISR 0001  
              __end_of_SendSPI1 1998                __end_of_OpenSPI1 145E                          ??_main 009A  
                 ___fttol@sign1 0065                   __activetblptr 000003               ??_MotorDriverInit 008D  
       DetectMovement@ADCresult 0091                       ??_INT0Int 0012                       ??_HLVDInt 001B  
                        ?i2_abs 0012                       ??_PIDInit 008D                       ??_TMR0Int 004A  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                     ??_RTDInit 008E                          _EEDATA 000FA8                     ?_Delay1TCYx 0001  
                     ??_SPIInit 0090                          _CCPR3L 000FB8                          _EECON2 000FA7  
              __end_of___ftpack 1070           __size_of_calculatePID 0750                          i2l1000 0EA2  
                        i2l1012 0DF4                          i2l1006 1280                          i2l1022 18BA  
                        i2l1033 0CFC                          i2l1162 18A2                          i2l2230 0FCA  
                        i2l2240 102E                          i2l2232 0FD6                          i2l3104 0C06  
                        i2l3200 07D2                          i2l2242 103A                          i2l2234 0FF6  
                        i2l2226 0FBA                          i2l2410 0E3C                          i2l3122 0C7C  
                        i2l2404 0E14                          i2l3140 0CEA                          i2l3132 0CAC  
                        i2l3204 07F2                          i2l3220 1180                          i2l2254 1060  
                        i2l2238 100E                          i2l2342 0A96                          i2l2430 0E7C  
                        i2l2406 0E2E                          i2l3134 0CBE                          i2l3126 0C90  
                        i2l3230 119A                          i2l2248 104E                          i2l2336 0A6C  
                        i2l2440 0EB0                          i2l3128 0C98                          i2l3136 0CCC  
                        i2l3152 0104                          i2l3224 118A                          i2l2602 1466  
                        i2l2450 0D1C                          i2l2370 0B0E                          i2l3170 0350  
                        i2l3162 025E                          i2l2452 0D36                          i2l2364 0AEE  
                        i2l2348 0AA2                          i2l3084 1216                          i2l3164 028E  
                        i2l3172 0380                          i2l3156 019C                          i2l2606 1478  
                        i2l2470 0D78                          i2l2366 0AFA                          i2l2358 0ACA  
                        i2l3094 127C                          i2l2480 0DA6                          i2l2456 0D44  
                        i2l2384 0B84                          i2l2376 0B32                          i2l2368 0B06  
                        i2l3088 1250                          i2l3184 04E2                          i2l2474 0D8A  
                        i2l2394 0BB6                          i2l2378 0B3E                          i2l3194 0604  
                        i2l3186 053A                          i2l2484 0DB8                          i2l2742 14DE  
                        i2l2478 0DA0                          i2l2752 1506                          i2l2488 0DCE  
                        i2l2738 14D6                          u151_41 0A2A                          u152_41 0A3E  
                        _INTCON 000FF2                          u172_41 0E06                          u174_41 0E24  
                        u272_41 0BF2                          u177_41 0D0E                __end_of___lwtoft 18A4  
                        u179_41 0D2C                          _SPIInt 19D8                          i2abs@a 0012  
             __end_of_RTD2Angle 177A             __end_of_ReceiveSPI1 1A0C          __end_of_DetectJoystick 18EA  
        __end_of_DetectMovement 130C                OpenSPI1@bus_mode 008D                   _EEWriteDouble 14BA  
                        ___ftge 11DC                       ??___ftadd 003E                       ??___ftdiv 0020  
                     ??___ftneg 0015                       ??___ftmul 002F                       ??___fttol 0060  
                        _intErr 00B8                          clear_0 196A             __size_ofi2_Busy_eep 0008  
         ___ftmul@f3_as_product 0033                   main@temporary 009A                    ??_EEPROMInit 009A  
   __size_of_ImplementPIDMotion 005C                    _calculatePID 00B0            __end_of_EEReadDouble 13FE  
             _calculatePID$3534 007A               _calculatePID$3535 0074               _calculatePID$3536 0077  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                    _StartAngle 00B2               ?_GenerateChecksum 0001                       ?_EEBootUp 0001  
                    __accesstop 0060         __end_of__initialization 1978              ??_GenerateChecksum 008D  
                    ___ftadd@f1 0038                      ___ftadd@f2 003B                      ___ftge@ff1 0044  
                    ___ftge@ff2 0047                   ___rparam_used 000001                      ___ftdiv@f1 001A  
                    ___ftdiv@f2 001D                      ___ftdiv@f3 0024              EEReadChar@location 008F  
                    ___ftneg@f1 0012                     ?_KillMotors 0001                    ??_EEReadChar 008F  
                ?_EEWriteDouble 0016                   __end_ofi2_abs 187E                      ___ftmul@f1 0029  
                    ___ftmul@f2 002C                 ?_DetectJoystick 0001                 ?_DetectMovement 008D  
            __end_of_EEPROMInit 19D8                      ___fttol@f1 0044                  __pcstackCOMRAM 0001  
   __end_of_EEDisassembleDouble 1742            __size_of_EEWriteChar 0022                     ?_Read_b_eep 008D  
           __size_of_Delay1TCYx 0010               GenerateChecksum@y 008E                      ___lwtoft@c 001A  
  __size_of_SPIReassembleDouble 004C                         ??i2_abs 0014              __end_of_EEReadChar 1856  
                    __pbssBANK0 009C                     _ReceiveSPI1 19FC                      ??_EEBootUp 0098  
                     ?_Busy_eep 0001                   ?_JoystickInit 0001                         ?_SPIInt 0001  
                     ?_SendSPI1 0001                       ?_OpenSPI1 008D                         ?___ftge 0044  
                  ?_Delay10TCYx 0001                  EEWriteDouble@x 001A                         _CCP3CON 000FB7  
                  ?_Delay1KTCYx 0001                       ?___ftpack 0012                   ??_Write_b_eep 0015  
                     ?___lwtoft 001A                         _HLVDCON 000FD2                         _INT0Int 1A1E  
                       _HLVDInt 1070                         _PIDInit 163E                         _DDouble 004A  
           __size_of_KillMotors 000A                   _PIDEnableFlag 00C4                         _SSP1BUF 000FC9  
                       _SSP2BUF 000F66                         _TMR0Int 15F2      ImplementPIDMotion@PIDValue 0016  
                       _RTDInit 177A                         _SPIInit 192C                         _SPIflag 00C5  
              EEWriteDouble@dub 0016             __size_of_Read_b_eep 001C                  ??_JoystickInit 008D  
                  ??i2_Busy_eep 0012     __size_of_EEReassembleDouble 004C                      ??_Busy_eep 008D  
                       _Command 00C2                 __size_of_SPIInt 0014                      ??_SendSPI1 008D  
               ??_EEWriteDouble 0019                      ??_OpenSPI1 008F             EEWriteChar@location 0017  
                       __Hparam 0000                         __Lparam 0000                 _MotorDriverInit 190C  
               __size_of___ftge 00A6                         ___ftadd 0A1A                         ___ftdiv 0DF6  
                       ___ftneg 18A4                         ___ftmul 0CFE                         ___fttol 0BDE  
                    _dummy_byte 00C6           __size_of_EEReadDouble 006A                    SendSPI1@data 008E  
                       __pcinit 1964                      ??___ftpack 0017                 Delay10TCYx@unit 008D  
                       __ramtop 1000                      _initialize 1804                    SendSPI1@temp 008D  
                       __ptext0 0800                         __ptext1 1804                         __ptext2 192C  
                       __ptext3 13FE                         __ptext4 177A                         __ptext5 19EC  
                       __ptext6 1998                         __ptext7 19AE                         __ptext8 163E  
                       __ptext9 190C                      ??___lwtoft 001D                    __size_of_abs 002C  
            __end_ofi2_Busy_eep 1A2E                         _prevErr 00BB   __size_of_SPIDisassembleDouble 004C  
           __end_of_Write_b_eep 1704                    ??_Delay1TCYx 008D                  __pintcode_body 1128  
          end_of_initialization 1978                         int_func 1128               OpenSPI1@smp_phase 008E  
                  _EEReadDouble 1394                      _motorInput 00C0                       _RTD2Angle 1742  
                       postinc0 000FEE               OpenSPI1@sync_mode 008F              __end_of_Delay1TCYx 19FC  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _PORTCbits 000F82  
                     _PORTEbits 000F84                       _PORTJbits 000F88                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISDbits 000F95  
                     _TRISEbits 000F96                       _TRISFbits 000F97                       _TRISGbits 000F98  
                     _TRISJbits 000F9A         __end_of_MotorDriverInit 192C                ??_DetectJoystick 008D  
              ??_DetectMovement 008F                     ___ftdiv@exp 0027               __size_of_EEBootUp 0088  
           _SPIReassembleDouble 155A                     _CCP3CONbits 000FB7                  __end_of_SPIInt 19EC  
                  ??_KillMotors 0012                     ___ftmul@exp 0032                      ?_RTD2Angle 0038  
     __size_of_GenerateChecksum 0040                    ??_Read_b_eep 008F                  __end_of___ftge 1282  
          __size_of_Delay10TCYx 0016      __end_of_ImplementPIDMotion 14BA                     ?_initialize 0001  
                   _Write_b_eep 16C4            __end_of_JoystickInit 17D8            __size_of_Delay1KTCYx 0016  
          ?_SPIReassembleDouble 008D                       _DoublePtr 00BE             start_initialization 1964  
               _CurrentVelocity 00A3                    _CurrentAngle 00A0                     __end_of_abs 1804  
            __end_of_KillMotors 1A16                    ?_ReceiveSPI1 0001                   _MotorFailFlag 004D  
            __end_of_Read_b_eep 1964            EEReadDouble@location 0096                        ??_SPIInt 0001  
             __size_of_Busy_eep 0008            calculatePID@setpoint 006E                   ??_EEWriteChar 0017  
             __size_of_SendSPI1 001A               __size_of_OpenSPI1 0060                        ??___ftge 0060  
         ??_SPIReassembleDouble 0090    __size_of_EEDisassembleDouble 003E               __size_of___ftpack 00C6  
                      ?_INT0Int 0001                        ?_HLVDInt 0001                     __pbssCOMRAM 004A  
             __size_of___lwtoft 0026                   __pcstackBANK0 0060                        ?_PIDInit 0001  
                      ?_TMR0Int 0001              calculatePID@derErr 0071                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 008D                ?_MotorDriverInit 0001  
           __size_of_initialize 002A          SPIReassembleDouble@dub 0090                   EEWriteChar@ch 0016  
                     __pintcode 0008                     ??_RTD2Angle 003B                        ?___ftadd 0038  
                      ?___ftdiv 001A                        ?___ftneg 0012                        ?___ftmul 0029  
                      ?___fttol 0044                     __pintcodelo 0018             __end_of_EEWriteChar 190C  
                __size_ofi2_abs 0028      __end_of_EEReassembleDouble 155A                        _EEBootUp 130C  
                      _IPR1bits 000F9F                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0                        i2u200_40 1474           __end_of_EEWriteDouble 150E  
                      i2u150_45 16FE                        i2u150_46 1700    __end_of_SPIDisassembleDouble 15F2  
                      _PIR1bits 000F9E                        i2u274_40 0C2C                        i2u274_45 0C22  
                      _PIR2bits 000FA1                        _RCONbits 000FD0           __size_of_JoystickInit 002E  
                      _SSP1CON1 000FC6                _GenerateChecksum 1684                        _SSP1STAT 000FC7  
                    _ADCON0bits 000FC2                 Write_b_eep@badd 0012                 Write_b_eep@bdat 0014  
                 ?_calculatePID 006B                __size_of_INT0Int 0008                __size_of_HLVDInt 00B8  
              __size_of_PIDInit 0046                     _INTCON2bits 000FF1                __size_of_TMR0Int 004C  
              __size_of_RTDInit 0030                __size_of_SPIInit 001C                        _Busy_eep 1A16  
          __size_of_ReceiveSPI1 0010                    _JoystickInit 17AA                        _SendSPI1 197E  
                    _EECON1bits 000FA6                        _SetAngle 00AF                        _OpenSPI1 13FE  
                      __Hrparam 0000                     _EEWriteChar 18EA                        __Lrparam 0000  
                  _JSEnableFlag 00C3                __size_of___ftadd 01C4                __size_of___ftdiv 00E2  
              __size_of___ftneg 0024                __size_of___ftmul 00F8                __size_of___fttol 0120  
                  ??_initialize 009A                        ___ftpack 0FAA                    ?_Write_b_eep 0012  
             calculatePID@angle 006B                  ??_calculatePID 004A                        ___lwtoft 187E  
                    _EEPROMInit 19C4                        __ptext10 17AA                        __ptext11 19C4  
                      __ptext20 15A6                        __ptext12 130C                        __ptext21 1684  
                      __ptext13 1394                        __ptext30 15F2                        __ptext22 19FC  
                      __ptext14 150E                        __ptext31 00B0                        __ptext23 0ED8  
                      __ptext15 1A16                        __ptext40 0FAA                        __ptext32 0BDE  
                      __ptext24 17D8                        __ptext16 182E                        __ptext41 145E  
                      __ptext33 18A4                        __ptext25 1282                        __ptext17 1948  
                      __ptext50 16C4                        __ptext42 1856                        __ptext34 11DC  
                      __ptext26 18C8                        __ptext18 197E                        __ptext43 1A1E  
                      __ptext35 0DF6                        __ptext19 155A                        __ptext44 1A0C  
                      __ptext36 0A1A                        __ptext28 19D8                        __ptext45 1070  
                      __ptext37 1742                        __ptext46 14BA                        __ptext38 187E  
                      __ptext47 1704                        __ptext39 0CFE                        __ptext48 18EA  
                      __ptext49 1A26                    _SSP1CON1bits 000FC6              _ImplementPIDMotion 145E  
                  _SSP2CON1bits 000F63                   __size_of_hISR 11D4                   __size_of_lISR 0094  
                 __size_of_main 021A             _EEDisassembleDouble 1704                  Delay1TCYx@unit 008D  
           ?_ImplementPIDMotion 0016              __end_of_initialize 182E                      _EEReadChar 182E  
                 ??_Delay10TCYx 008D                   ??_Delay1KTCYx 008D                    _SSP1STATbits 000FC7  
          ?_EEDisassembleDouble 0012            ??_ImplementPIDMotion 0018                      _INTCONbits 000FF2  
          _SPIDisassembleDouble 15A6                        intlevel1 0000                        intlevel2 0000  
                    _OSCCONbits 000FD3    DetectMovement@JoystickResult 008F               _ImplementJSMotion 0ED8  
   __end_of_SPIReassembleDouble 15A6              ?_ImplementJSMotion 0093         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 008A           ??_EEDisassembleDouble 0015             __end_of_Delay10TCYx 19C4  
           ??_ImplementJSMotion 0095          EEDisassembleDouble@dub 0012                     ?_EEPROMInit 0001  
           __end_of_Delay1KTCYx 19AE           ?_SPIDisassembleDouble 008F        __end_of_GenerateChecksum 16C4  
                    i2_Busy_eep 1A26         SPIDisassembleDouble@dub 008F       __end_of_ImplementJSMotion 0FAA  
          __end_of_calculatePID 0800                   ?_EEReadDouble 0093                     ?_EEReadChar 0001  
            _EEReassembleDouble 150E  
