

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 29 03:10:00 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  0016ED                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _DeadbandHigh
    75  0016ED  05                 	db	5
    76                           
    77                           ;initializer for _DeadbandLow
    78  0016EE  FB                 	db	251
    79                           
    80                           	psect	idataBANK0
    81  0016EA                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _loopTime
    85                           ;PID.c: 5: unsigned char PIDEnableFlag;
    86                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    87                           ;PID.c: 7: double Ki;
    88                           ;PID.c: 8: double Kp;
    89                           ;PID.c: 9: double Kd;
    90                           ;PID.c: 10: double SetAngle;
    91                           ;PID.c: 11: double CurrentAngle;
    92                           ;PID.c: 12: double error;
    93                           ;PID.c: 13: double prevErr;
    94                           ;PID.c: 14: double intErr;
    95                           ;PID.c: 15: int motorInput;
    96  0016EA  C3                 	db	195
    97  0016EB  F5                 	db	245
    98  0016EC  3C                 	db	60
    99  0000                     _ADCON0	set	4034
   100  0000                     _ADCON0bits	set	4034
   101  0000                     _ADCON1	set	4033
   102  0000                     _ADCON2	set	4032
   103  0000                     _ADRESH	set	4036
   104  0000                     _ADRESL	set	4035
   105  0000                     _CCP3CON	set	4023
   106  0000                     _CCP3CONbits	set	4023
   107  0000                     _CCPR3L	set	4024
   108  0000                     _EEADR	set	4009
   109  0000                     _EEADRH	set	4010
   110  0000                     _EECON1bits	set	4006
   111  0000                     _EECON2	set	4007
   112  0000                     _EEDATA	set	4008
   113  0000                     _HLVDCON	set	4050
   114  0000                     _INTCON	set	4082
   115  0000                     _INTCON2bits	set	4081
   116  0000                     _INTCONbits	set	4082
   117  0000                     _IPR2bits	set	4002
   118  0000                     _OSCCONbits	set	4051
   119  0000                     _PIE1bits	set	3997
   120  0000                     _PIE2bits	set	4000
   121  0000                     _PIR1bits	set	3998
   122  0000                     _PIR2bits	set	4001
   123  0000                     _PORTA	set	3968
   124  0000                     _PORTAbits	set	3968
   125  0000                     _PORTB	set	3969
   126  0000                     _PORTBbits	set	3969
   127  0000                     _PORTC	set	3970
   128  0000                     _PORTCbits	set	3970
   129  0000                     _PORTD	set	3971
   130  0000                     _PORTE	set	3972
   131  0000                     _PORTEbits	set	3972
   132  0000                     _PORTF	set	3973
   133  0000                     _PORTG	set	3974
   134  0000                     _PORTH	set	3975
   135  0000                     _PORTJ	set	3976
   136  0000                     _PORTJbits	set	3976
   137  0000                     _PR2	set	4043
   138  0000                     _SSP1BUF	set	4041
   139  0000                     _SSP1CON1	set	4038
   140  0000                     _SSP1CON1bits	set	4038
   141  0000                     _SSP1STAT	set	4039
   142  0000                     _SSP1STATbits	set	4039
   143  0000                     _T0CON	set	4053
   144  0000                     _T0CONbits	set	4053
   145  0000                     _T2CON	set	4042
   146  0000                     _T3CON	set	4017
   147  0000                     _TMR0H	set	4055
   148  0000                     _TMR0L	set	4054
   149  0000                     _TRISAbits	set	3986
   150  0000                     _TRISBbits	set	3987
   151  0000                     _TRISCbits	set	3988
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISEbits	set	3990
   154  0000                     _TRISFbits	set	3991
   155  0000                     _TRISGbits	set	3992
   156  0000                     _TRISH	set	3993
   157  0000                     _TRISJbits	set	3994
   158                           
   159                           ; #config settings
   160  0000                     
   161                           	psect	cinit
   162  00117E                     __pcinit:
   163                           	opt stack 0
   164  00117E                     start_initialization:
   165                           	opt stack 0
   166  00117E                     __initialization:
   167                           	opt stack 0
   168                           
   169                           ; Clear objects allocated to BANK0 (32 bytes)
   170  00117E  EE00  F093         	lfsr	0,__pbssBANK0
   171  001182  0E20               	movlw	32
   172  001184                     clear_0:
   173  001184  6AEE               	clrf	postinc0,c
   174  001186  06E8               	decf	wreg,f,c
   175  001188  E1FD               	bnz	clear_0
   176                           
   177                           ; Clear objects allocated to COMRAM (12 bytes)
   178  00118A  EE00  F039         	lfsr	0,__pbssCOMRAM
   179  00118E  0E0C               	movlw	12
   180  001190                     clear_1:
   181  001190  6AEE               	clrf	postinc0,c
   182  001192  06E8               	decf	wreg,f,c
   183  001194  E1FD               	bnz	clear_1
   184                           
   185                           ; Initialize objects allocated to BANK0 (3 bytes)
   186                           ; load TBLPTR registers with __pidataBANK0
   187  001196  0EEA               	movlw	low __pidataBANK0
   188  001198  6EF6               	movwf	tblptrl,c
   189  00119A  0E16               	movlw	high __pidataBANK0
   190  00119C  6EF7               	movwf	tblptrh,c
   191  00119E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   192  0011A0  6EF8               	movwf	tblptru,c
   193  0011A2  0009               	tblrd		*+	;fetch initializer
   194  0011A4  CFF5 F0B3          	movff	tablat,__pdataBANK0
   195  0011A8  0009               	tblrd		*+	;fetch initializer
   196  0011AA  CFF5 F0B4          	movff	tablat,__pdataBANK0+1
   197  0011AE  0009               	tblrd		*+	;fetch initializer
   198  0011B0  CFF5 F0B5          	movff	tablat,__pdataBANK0+2
   199                           
   200                           ; Initialize objects allocated to COMRAM (2 bytes)
   201                           ; load TBLPTR registers with __pidataCOMRAM
   202  0011B4  0EED               	movlw	low __pidataCOMRAM
   203  0011B6  6EF6               	movwf	tblptrl,c
   204  0011B8  0E16               	movlw	high __pidataCOMRAM
   205  0011BA  6EF7               	movwf	tblptrh,c
   206  0011BC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   207  0011BE  6EF8               	movwf	tblptru,c
   208  0011C0  0009               	tblrd		*+	;fetch initializer
   209  0011C2  CFF5 F045          	movff	tablat,__pdataCOMRAM
   210  0011C6  0009               	tblrd		*+	;fetch initializer
   211  0011C8  CFF5 F046          	movff	tablat,__pdataCOMRAM+1
   212  0011CC                     end_of_initialization:
   213                           	opt stack 0
   214  0011CC                     __end_of__initialization:
   215                           	opt stack 0
   216  0011CC  0100               	movlb	0
   217  0011CE  EF0E  F000         	goto	_main	;jump to C main() function
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           
   225                           	psect	bssCOMRAM
   226  000039                     __pbssCOMRAM:
   227                           	opt stack 0
   228  000039                     _DoubleSPIS:
   229                           	opt stack 0
   230  000039                     	ds	4
   231  00003D                     _DDouble:
   232                           	opt stack 0
   233  00003D                     	ds	3
   234  000040                     _SetAngle:
   235                           	opt stack 0
   236  000040                     	ds	3
   237  000043                     _DoublePtr:
   238                           	opt stack 0
   239  000043                     	ds	2
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           
   247                           	psect	dataCOMRAM
   248  000045                     __pdataCOMRAM:
   249                           	opt stack 0
   250  000045                     _DeadbandHigh:
   251                           	opt stack 0
   252  000045                     	ds	1
   253  000046                     _DeadbandLow:
   254                           	opt stack 0
   255  000046                     	ds	1
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bssBANK0
   264  000093                     __pbssBANK0:
   265                           	opt stack 0
   266  000093                     _CurrentAngle:
   267                           	opt stack 0
   268  000093                     	ds	3
   269  000096                     _CurrentVelocity:
   270                           	opt stack 0
   271  000096                     	ds	3
   272  000099                     _Kd:
   273                           	opt stack 0
   274  000099                     	ds	3
   275  00009C                     _Ki:
   276                           	opt stack 0
   277  00009C                     	ds	3
   278  00009F                     _Kp:
   279                           	opt stack 0
   280  00009F                     	ds	3
   281  0000A2                     _error:
   282                           	opt stack 0
   283  0000A2                     	ds	3
   284  0000A5                     _intErr:
   285                           	opt stack 0
   286  0000A5                     	ds	3
   287  0000A8                     _prevErr:
   288                           	opt stack 0
   289  0000A8                     	ds	3
   290  0000AB                     _motorInput:
   291                           	opt stack 0
   292  0000AB                     	ds	2
   293  0000AD                     _Command:
   294                           	opt stack 0
   295  0000AD                     	ds	1
   296  0000AE                     _JSEnableFlag:
   297                           	opt stack 0
   298  0000AE                     	ds	1
   299  0000AF                     _PIDEnableFlag:
   300                           	opt stack 0
   301  0000AF                     	ds	1
   302  0000B0                     _SPIflag:
   303                           	opt stack 0
   304  0000B0                     	ds	1
   305  0000B1                     _TMR0Flag:
   306                           	opt stack 0
   307  0000B1                     	ds	1
   308  0000B2                     _dummy_byte:
   309                           	opt stack 0
   310  0000B2                     	ds	1
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           
   318                           	psect	dataBANK0
   319  0000B3                     __pdataBANK0:
   320                           	opt stack 0
   321  0000B3                     _loopTime:
   322                           	opt stack 0
   323  0000B3                     	ds	3
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	cstackBANK0
   332  000060                     __pcstackBANK0:
   333                           	opt stack 0
   334  000060                     ??___ftmul:
   335                           
   336                           ; 0 bytes @ 0x0
   337  000060                     	ds	3
   338  000063                     ___ftmul@exp:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x3
   342  000063                     	ds	1
   343  000064                     ___ftmul@f3_as_product:
   344                           	opt stack 0
   345                           
   346                           ; 3 bytes @ 0x4
   347  000064                     	ds	3
   348  000067                     ___ftmul@cntr:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x7
   352  000067                     	ds	1
   353  000068                     ___ftmul@sign:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x8
   357  000068                     	ds	1
   358  000069                     ?___ftadd:
   359                           	opt stack 0
   360  000069                     ?_RTD2Angle:
   361                           	opt stack 0
   362  000069                     RTD2Angle@RTDAngle:
   363                           	opt stack 0
   364  000069                     ___ftadd@f1:
   365                           	opt stack 0
   366                           
   367                           ; 3 bytes @ 0x9
   368  000069                     	ds	3
   369  00006C                     ___ftadd@f2:
   370                           	opt stack 0
   371                           
   372                           ; 3 bytes @ 0xC
   373  00006C                     	ds	3
   374  00006F                     ??___ftadd:
   375                           
   376                           ; 0 bytes @ 0xF
   377  00006F                     	ds	3
   378  000072                     ___ftadd@sign:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x12
   382  000072                     	ds	1
   383  000073                     ___ftadd@exp2:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x13
   387  000073                     	ds	1
   388  000074                     ___ftadd@exp1:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x14
   392  000074                     	ds	1
   393  000075                     ?___ftsub:
   394                           	opt stack 0
   395  000075                     ?___fttol:
   396                           	opt stack 0
   397  000075                     ___ftsub@f1:
   398                           	opt stack 0
   399  000075                     ___fttol@f1:
   400                           	opt stack 0
   401                           
   402                           ; 3 bytes @ 0x15
   403  000075                     	ds	3
   404  000078                     ___ftsub@f2:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x18
   408  000078                     	ds	1
   409  000079                     ??___fttol:
   410                           
   411                           ; 0 bytes @ 0x19
   412  000079                     	ds	5
   413  00007E                     ___fttol@sign1:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x1E
   417  00007E                     	ds	1
   418  00007F                     ___fttol@lval:
   419                           	opt stack 0
   420                           
   421                           ; 4 bytes @ 0x1F
   422  00007F                     	ds	4
   423  000083                     ___fttol@exp1:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x23
   427  000083                     	ds	1
   428  000084                     calculatePID@angle:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x24
   432  000084                     	ds	3
   433  000087                     calculatePID@setpoint:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0x27
   437  000087                     	ds	3
   438  00008A                     calculatePID@derErr:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0x2A
   442  00008A                     	ds	3
   443  00008D                     _calculatePID$3367:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x2D
   447  00008D                     	ds	3
   448  000090                     _calculatePID$3368:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x30
   452  000090                     	ds	3
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           
   460                           	psect	cstackCOMRAM
   461  000001                     __pcstackCOMRAM:
   462                           	opt stack 0
   463  000001                     Write_b_eep@badd:
   464                           	opt stack 0
   465  000001                     EEDisassembleDouble@dub:
   466                           	opt stack 0
   467                           
   468                           ; 3 bytes @ 0x0
   469  000001                     	ds	2
   470  000003                     Write_b_eep@bdat:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x2
   474  000003                     	ds	1
   475  000004                     Write_b_eep@GIE_BIT_VAL:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x3
   479  000004                     	ds	1
   480  000005                     EEWriteChar@ch:
   481                           	opt stack 0
   482  000005                     EEWriteDouble@dub:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x4
   486  000005                     	ds	1
   487  000006                     EEWriteChar@location:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x5
   491  000006                     	ds	2
   492  000008                     EEWriteDouble@location:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x7
   496  000008                     	ds	1
   497  000009                     EEWriteDouble@x:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x8
   501  000009                     	ds	1
   502  00000A                     ??_ISR:
   503                           
   504                           ; 0 bytes @ 0x9
   505  00000A                     	ds	16
   506  00001A                     ?_abs:
   507                           	opt stack 0
   508  00001A                     ?_DetectMovement:
   509                           	opt stack 0
   510  00001A                     ?___ftpack:
   511                           	opt stack 0
   512  00001A                     ?_SPIReassembleDouble:
   513                           	opt stack 0
   514  00001A                     ?_EEReassembleDouble:
   515                           	opt stack 0
   516  00001A                     ?___ftneg:
   517                           	opt stack 0
   518  00001A                     SendSPI1@temp:
   519                           	opt stack 0
   520  00001A                     GenerateChecksum@sum:
   521                           	opt stack 0
   522  00001A                     OpenSPI1@bus_mode:
   523                           	opt stack 0
   524  00001A                     Delay10TCYx@unit:
   525                           	opt stack 0
   526  00001A                     Delay1KTCYx@unit:
   527                           	opt stack 0
   528  00001A                     Delay1TCYx@unit:
   529                           	opt stack 0
   530  00001A                     Read_b_eep@badd:
   531                           	opt stack 0
   532  00001A                     abs@a:
   533                           	opt stack 0
   534  00001A                     ___ftpack@arg:
   535                           	opt stack 0
   536  00001A                     ___ftge@ff1:
   537                           	opt stack 0
   538  00001A                     ___ftneg@f1:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x19
   542  00001A                     	ds	1
   543  00001B                     ?_ReadRTDpos:
   544                           	opt stack 0
   545  00001B                     SendSPI1@data:
   546                           	opt stack 0
   547  00001B                     GenerateChecksum@y:
   548                           	opt stack 0
   549  00001B                     OpenSPI1@smp_phase:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x1A
   553  00001B                     	ds	1
   554  00001C                     ??_abs:
   555  00001C                     ??_DetectMovement:
   556  00001C                     EEReadChar@location:
   557                           	opt stack 0
   558  00001C                     OpenSPI1@sync_mode:
   559                           	opt stack 0
   560  00001C                     SPIDisassembleDouble@dub:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x1B
   564  00001C                     	ds	1
   565  00001D                     ??_ReadRTDpos:
   566  00001D                     EEReadChar@ch:
   567                           	opt stack 0
   568  00001D                     ___ftpack@exp:
   569                           	opt stack 0
   570  00001D                     SPIReassembleDouble@dub:
   571                           	opt stack 0
   572  00001D                     EEReassembleDouble@dub:
   573                           	opt stack 0
   574  00001D                     ___ftge@ff2:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x1C
   578  00001D                     	ds	1
   579  00001E                     ___ftpack@sign:
   580                           	opt stack 0
   581  00001E                     ImplementPIDMotion@PIDValue:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x1D
   585  00001E                     	ds	1
   586  00001F                     ??___ftpack:
   587  00001F                     DetectMovement@JoystickResult:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x1E
   591  00001F                     	ds	1
   592  000020                     ??_ImplementPIDMotion:
   593  000020                     ??___ftge:
   594  000020                     ?_EEReadDouble:
   595                           	opt stack 0
   596  000020                     ReadRTDpos@HighPosition:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x1F
   600  000020                     	ds	1
   601  000021                     ReadRTDpos@LowPosition:
   602                           	opt stack 0
   603  000021                     DetectMovement@ADCresult:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x20
   607  000021                     	ds	1
   608  000022                     ?___ftdiv:
   609                           	opt stack 0
   610  000022                     ?___lwtoft:
   611                           	opt stack 0
   612  000022                     ReadRTDpos@FullPosition:
   613                           	opt stack 0
   614  000022                     ___lwtoft@c:
   615                           	opt stack 0
   616  000022                     ___ftdiv@f1:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x21
   620  000022                     	ds	1
   621  000023                     EEReadDouble@location:
   622                           	opt stack 0
   623  000023                     ImplementJSMotion@JoystickValue:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x22
   627  000023                     	ds	1
   628  000024                     ReadRTDpos@x:
   629                           	opt stack 0
   630  000024                     EEReadDouble@x:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x23
   634  000024                     	ds	1
   635  000025                     ??_EEBootUp:
   636  000025                     ??_ImplementJSMotion:
   637  000025                     ___ftdiv@f2:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x24
   641  000025                     	ds	2
   642  000027                     
   643                           ; 0 bytes @ 0x26
   644  000027                     	ds	1
   645  000028                     ??___ftdiv:
   646  000028                     ImplementJSMotion@CCPinput:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x27
   650  000028                     	ds	3
   651  00002B                     ___ftdiv@cntr:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x2A
   655  00002B                     	ds	1
   656  00002C                     ___ftdiv@f3:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0x2B
   660  00002C                     	ds	3
   661  00002F                     ___ftdiv@exp:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x2E
   665  00002F                     	ds	1
   666  000030                     ___ftdiv@sign:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x2F
   670  000030                     	ds	1
   671  000031                     ?___ftmul:
   672                           	opt stack 0
   673  000031                     ___ftmul@f1:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x30
   677  000031                     	ds	3
   678  000034                     ___ftmul@f2:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x33
   682  000034                     	ds	3
   683  000037                     main@temporary:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x36
   687  000037                     	ds	1
   688  000038                     main@x:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x37
   692  000038                     	ds	1
   693                           tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           
   700 ;;
   701 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   702 ;;
   703 ;; *************** function _main *****************
   704 ;; Defined at:
   705 ;;		line 20 in file "RTDuC.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  x               1   55[COMRAM] unsigned char 
   710 ;;  temporary       1   54[COMRAM] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;		None               void
   713 ;; Registers used:
   714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;Total ram usage:        2 bytes
   725 ;; Hardware stack levels required when called:    9
   726 ;; This function calls:
   727 ;;		_DetectJoystick
   728 ;;		_DetectMovement
   729 ;;		_ImplementJSMotion
   730 ;;		_ImplementPIDMotion
   731 ;;		_RTD2Angle
   732 ;;		_ReadRTDpos
   733 ;;		_ReceiveSPI1
   734 ;;		_SPIDisassembleDouble
   735 ;;		_SPIReassembleDouble
   736 ;;		_SendSPI1
   737 ;;		_calculatePID
   738 ;;		_initialize
   739 ;; This function is called by:
   740 ;;		Startup code after reset
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text0
   745  00001C                     __ptext0:
   746                           	opt stack 0
   747  00001C                     _main:
   748                           	opt stack 22
   749                           
   750                           ;RTDuC.c: 22: unsigned char temporary, x = 0;
   751                           
   752                           ;incstack = 0
   753  00001C  0E00               	movlw	0
   754  00001E  6E38               	movwf	main@x,c
   755                           
   756                           ;RTDuC.c: 24: initialize();
   757  000020  EC73  F00A         	call	_initialize	;wreg free
   758                           
   759                           ;RTDuC.c: 26: PORTCbits.RC6 = 0;
   760  000024  9C82               	bcf	3970,6,c	;volatile
   761                           
   762                           ;RTDuC.c: 27: SSP1BUF = dummy_byte;
   763  000026  C0B2  FFC9         	movff	_dummy_byte,4041	;volatile
   764  00002A  D000               	goto	l3771
   765  00002C                     l3771:
   766                           
   767                           ;RTDuC.c: 30: {
   768                           ;RTDuC.c: 31: if (SPIflag == 1)
   769  00002C  0100               	movlb	0	; () banked
   770  00002E  05B0               	decf	_SPIflag& (0+255),w,b
   771  000030  A4D8               	btfss	status,2,c
   772  000032  D0E8               	goto	l3865
   773                           
   774                           ; BSR set to: 0
   775                           ;RTDuC.c: 32: {
   776                           ;RTDuC.c: 33: SPIflag = 0;
   777  000034  0E00               	movlw	0
   778  000036  0100               	movlb	0	; () banked
   779  000038  6FB0               	movwf	_SPIflag& (0+255),b
   780                           
   781                           ; BSR set to: 0
   782                           ;RTDuC.c: 34: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   783  00003A  0E02               	movlw	2
   784  00003C  0100               	movlb	0	; () banked
   785  00003E  19AD               	xorwf	_Command& (0+255),w,b
   786  000040  B4D8               	btfsc	status,2,c
   787  000042  D014               	goto	l3785
   788                           
   789                           ; BSR set to: 0
   790  000044  0E03               	movlw	3
   791  000046  0100               	movlb	0	; () banked
   792  000048  19AD               	xorwf	_Command& (0+255),w,b
   793  00004A  B4D8               	btfsc	status,2,c
   794  00004C  D00F               	goto	l3785
   795                           
   796                           ; BSR set to: 0
   797  00004E  0E04               	movlw	4
   798  000050  0100               	movlb	0	; () banked
   799  000052  19AD               	xorwf	_Command& (0+255),w,b
   800  000054  B4D8               	btfsc	status,2,c
   801  000056  D00A               	goto	l3785
   802                           
   803                           ; BSR set to: 0
   804  000058  0E06               	movlw	6
   805  00005A  0100               	movlb	0	; () banked
   806  00005C  19AD               	xorwf	_Command& (0+255),w,b
   807  00005E  B4D8               	btfsc	status,2,c
   808  000060  D005               	goto	l3785
   809                           
   810                           ; BSR set to: 0
   811  000062  0E08               	movlw	8
   812  000064  0100               	movlb	0	; () banked
   813  000066  19AD               	xorwf	_Command& (0+255),w,b
   814  000068  A4D8               	btfss	status,2,c
   815  00006A  D05F               	goto	l3821
   816  00006C                     l3785:
   817                           
   818                           ; BSR set to: 0
   819                           ;RTDuC.c: 35: {
   820                           ;RTDuC.c: 36: if (Command == 0x02)
   821  00006C  0E02               	movlw	2
   822  00006E  0100               	movlb	0	; () banked
   823  000070  19AD               	xorwf	_Command& (0+255),w,b
   824  000072  A4D8               	btfss	status,2,c
   825  000074  D009               	goto	l3789
   826                           
   827                           ; BSR set to: 0
   828                           ;RTDuC.c: 37: SPIDisassembleDouble(CurrentAngle);
   829  000076  C093  F01C         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   830  00007A  C094  F01D         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   831  00007E  C095  F01E         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   832  000082  ECC2  F009         	call	_SPIDisassembleDouble	;wreg free
   833  000086  D038               	goto	l3805
   834  000088                     l3789:
   835                           
   836                           ;RTDuC.c: 38: else if (Command == 0x03)
   837  000088  0E03               	movlw	3
   838  00008A  0100               	movlb	0	; () banked
   839  00008C  19AD               	xorwf	_Command& (0+255),w,b
   840  00008E  A4D8               	btfss	status,2,c
   841  000090  D009               	goto	l3793
   842                           
   843                           ; BSR set to: 0
   844                           ;RTDuC.c: 39: SPIDisassembleDouble(CurrentVelocity);
   845  000092  C096  F01C         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   846  000096  C097  F01D         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   847  00009A  C098  F01E         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   848  00009E  ECC2  F009         	call	_SPIDisassembleDouble	;wreg free
   849  0000A2  D02A               	goto	l3805
   850  0000A4                     l3793:
   851                           
   852                           ;RTDuC.c: 40: else if (Command == 0x04)
   853  0000A4  0E04               	movlw	4
   854  0000A6  0100               	movlb	0	; () banked
   855  0000A8  19AD               	xorwf	_Command& (0+255),w,b
   856  0000AA  A4D8               	btfss	status,2,c
   857  0000AC  D009               	goto	l3797
   858                           
   859                           ; BSR set to: 0
   860                           ;RTDuC.c: 41: SPIDisassembleDouble(Kp);
   861  0000AE  C09F  F01C         	movff	_Kp,SPIDisassembleDouble@dub
   862  0000B2  C0A0  F01D         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   863  0000B6  C0A1  F01E         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   864  0000BA  ECC2  F009         	call	_SPIDisassembleDouble	;wreg free
   865  0000BE  D01C               	goto	l3805
   866  0000C0                     l3797:
   867                           
   868                           ;RTDuC.c: 42: else if (Command == 0x06)
   869  0000C0  0E06               	movlw	6
   870  0000C2  0100               	movlb	0	; () banked
   871  0000C4  19AD               	xorwf	_Command& (0+255),w,b
   872  0000C6  A4D8               	btfss	status,2,c
   873  0000C8  D009               	goto	l3801
   874                           
   875                           ; BSR set to: 0
   876                           ;RTDuC.c: 43: SPIDisassembleDouble(Ki);
   877  0000CA  C09C  F01C         	movff	_Ki,SPIDisassembleDouble@dub
   878  0000CE  C09D  F01D         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   879  0000D2  C09E  F01E         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   880  0000D6  ECC2  F009         	call	_SPIDisassembleDouble	;wreg free
   881  0000DA  D00E               	goto	l3805
   882  0000DC                     l3801:
   883                           
   884                           ;RTDuC.c: 44: else if (Command == 0x08)
   885  0000DC  0E08               	movlw	8
   886  0000DE  0100               	movlb	0	; () banked
   887  0000E0  19AD               	xorwf	_Command& (0+255),w,b
   888  0000E2  A4D8               	btfss	status,2,c
   889  0000E4  D009               	goto	l3805
   890                           
   891                           ; BSR set to: 0
   892                           ;RTDuC.c: 45: SPIDisassembleDouble(Kd);
   893  0000E6  C099  F01C         	movff	_Kd,SPIDisassembleDouble@dub
   894  0000EA  C09A  F01D         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   895  0000EE  C09B  F01E         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   896  0000F2  ECC2  F009         	call	_SPIDisassembleDouble	;wreg free
   897  0000F6  D000               	goto	l3805
   898  0000F8                     l3805:
   899                           
   900                           ;RTDuC.c: 46: INTCONbits.GIE = 0;
   901  0000F8  9EF2               	bcf	intcon,7,c	;volatile
   902                           
   903                           ;RTDuC.c: 47: PORTCbits.RC6 = 0;
   904  0000FA  9C82               	bcf	3970,6,c	;volatile
   905                           
   906                           ;RTDuC.c: 48: for (x = 0; x < 4; x++)
   907  0000FC  0E00               	movlw	0
   908  0000FE  6E38               	movwf	main@x,c
   909  000100  D00D               	goto	l3819
   910  000102  D00F               	goto	l481
   911  000104                     l3815:
   912                           
   913                           ;RTDuC.c: 49: SendSPI1(DoubleSPIS[x]);
   914  000104  5038               	movf	main@x,w,c
   915  000106  0D01               	mullw	1
   916  000108  0E39               	movlw	low _DoubleSPIS
   917  00010A  24F3               	addwf	prodl,w,c
   918  00010C  6ED9               	movwf	fsr2l,c
   919  00010E  0E00               	movlw	high _DoubleSPIS
   920  000110  20F4               	addwfc	prodh,w,c
   921  000112  6EDA               	movwf	fsr2h,c
   922  000114  50DF               	movf	indf2,w,c
   923  000116  EC1B  F00B         	call	_SendSPI1
   924  00011A  2A38               	incf	main@x,f,c
   925  00011C                     l3819:
   926  00011C  0E03               	movlw	3
   927  00011E  6438               	cpfsgt	main@x,c
   928  000120  D7F1               	goto	l3815
   929  000122                     l481:
   930                           
   931                           ;RTDuC.c: 50: temporary = SSP1BUF;
   932  000122  CFC9 F037          	movff	4041,main@temporary	;volatile
   933                           
   934                           ;RTDuC.c: 51: INTCONbits.GIE = 1;
   935  000126  8EF2               	bsf	intcon,7,c	;volatile
   936                           
   937                           ;RTDuC.c: 52: }
   938  000128  D06B               	goto	l3863
   939  00012A                     l3821:
   940                           
   941                           ;RTDuC.c: 53: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   942  00012A  0100               	movlb	0	; () banked
   943  00012C  05AD               	decf	_Command& (0+255),w,b
   944  00012E  B4D8               	btfsc	status,2,c
   945  000130  D00F               	goto	l485
   946                           
   947                           ; BSR set to: 0
   948  000132  0E05               	movlw	5
   949  000134  0100               	movlb	0	; () banked
   950  000136  19AD               	xorwf	_Command& (0+255),w,b
   951  000138  B4D8               	btfsc	status,2,c
   952  00013A  D00A               	goto	l485
   953                           
   954                           ; BSR set to: 0
   955  00013C  0E07               	movlw	7
   956  00013E  0100               	movlb	0	; () banked
   957  000140  19AD               	xorwf	_Command& (0+255),w,b
   958  000142  B4D8               	btfsc	status,2,c
   959  000144  D005               	goto	l485
   960                           
   961                           ; BSR set to: 0
   962  000146  0E09               	movlw	9
   963  000148  0100               	movlb	0	; () banked
   964  00014A  19AD               	xorwf	_Command& (0+255),w,b
   965  00014C  A4D8               	btfss	status,2,c
   966  00014E  D058               	goto	l3863
   967  000150                     l485:
   968                           
   969                           ; BSR set to: 0
   970                           ;RTDuC.c: 54: {
   971                           ;RTDuC.c: 55: INTCONbits.GIE = 0;
   972  000150  9EF2               	bcf	intcon,7,c	;volatile
   973                           
   974                           ;RTDuC.c: 56: PORTCbits.RC6 = 0;
   975  000152  9C82               	bcf	3970,6,c	;volatile
   976                           
   977                           ; BSR set to: 0
   978                           ;RTDuC.c: 57: for (x = 0; x != 4; x++)
   979  000154  0E00               	movlw	0
   980  000156  6E38               	movwf	main@x,c
   981  000158                     l3831:
   982                           
   983                           ; BSR set to: 0
   984  000158  0E04               	movlw	4
   985  00015A  1838               	xorwf	main@x,w,c
   986  00015C  B4D8               	btfsc	status,2,c
   987  00015E  D00F               	goto	l487
   988  000160  D001               	goto	l3835
   989                           
   990                           ; BSR set to: 0
   991  000162  D00D               	goto	l487
   992  000164                     l3835:
   993                           
   994                           ;RTDuC.c: 58: DoubleSPIS[x] = ReceiveSPI1();
   995  000164  5038               	movf	main@x,w,c
   996  000166  0D01               	mullw	1
   997  000168  0E39               	movlw	low _DoubleSPIS
   998  00016A  24F3               	addwf	prodl,w,c
   999  00016C  6ED9               	movwf	fsr2l,c
  1000  00016E  0E00               	movlw	high _DoubleSPIS
  1001  000170  20F4               	addwfc	prodh,w,c
  1002  000172  6EDA               	movwf	fsr2h,c
  1003  000174  EC55  F00B         	call	_ReceiveSPI1	;wreg free
  1004  000178  6EDF               	movwf	indf2,c
  1005  00017A  2A38               	incf	main@x,f,c
  1006  00017C  D7ED               	goto	l3831
  1007  00017E                     l487:
  1008                           
  1009                           ;RTDuC.c: 59: INTCONbits.GIE = 1;
  1010  00017E  8EF2               	bsf	intcon,7,c	;volatile
  1011                           
  1012                           ;RTDuC.c: 60: if (Command == 0x01)
  1013  000180  0100               	movlb	0	; () banked
  1014  000182  05AD               	decf	_Command& (0+255),w,b
  1015  000184  A4D8               	btfss	status,2,c
  1016  000186  D00F               	goto	l3849
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;RTDuC.c: 61: {
  1020                           ;RTDuC.c: 62: SetAngle = SPIReassembleDouble();
  1021  000188  EC80  F009         	call	_SPIReassembleDouble	;wreg free
  1022  00018C  C01A  F040         	movff	?_SPIReassembleDouble,_SetAngle
  1023  000190  C01B  F041         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1024  000194  C01C  F042         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1025                           
  1026                           ;RTDuC.c: 63: PIDEnableFlag = 3;
  1027  000198  0E03               	movlw	3
  1028  00019A  0100               	movlb	0	; () banked
  1029  00019C  6FAF               	movwf	_PIDEnableFlag& (0+255),b
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;RTDuC.c: 64: JSEnableFlag = 0;
  1033  00019E  0E00               	movlw	0
  1034  0001A0  0100               	movlb	0	; () banked
  1035  0001A2  6FAE               	movwf	_JSEnableFlag& (0+255),b
  1036                           
  1037                           ;RTDuC.c: 65: }
  1038  0001A4  D02A               	goto	l3861
  1039  0001A6                     l3849:
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;RTDuC.c: 66: else if (Command == 0x05)
  1043  0001A6  0E05               	movlw	5
  1044  0001A8  0100               	movlb	0	; () banked
  1045  0001AA  19AD               	xorwf	_Command& (0+255),w,b
  1046  0001AC  A4D8               	btfss	status,2,c
  1047  0001AE  D009               	goto	l3853
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;RTDuC.c: 67: {
  1051                           ;RTDuC.c: 68: Kp = SPIReassembleDouble();
  1052  0001B0  EC80  F009         	call	_SPIReassembleDouble	;wreg free
  1053  0001B4  C01A  F09F         	movff	?_SPIReassembleDouble,_Kp
  1054  0001B8  C01B  F0A0         	movff	?_SPIReassembleDouble+1,_Kp+1
  1055  0001BC  C01C  F0A1         	movff	?_SPIReassembleDouble+2,_Kp+2
  1056                           
  1057                           ;RTDuC.c: 69: }
  1058  0001C0  D01C               	goto	l3861
  1059  0001C2                     l3853:
  1060                           
  1061                           ;RTDuC.c: 70: else if (Command == 0x07)
  1062  0001C2  0E07               	movlw	7
  1063  0001C4  0100               	movlb	0	; () banked
  1064  0001C6  19AD               	xorwf	_Command& (0+255),w,b
  1065  0001C8  A4D8               	btfss	status,2,c
  1066  0001CA  D009               	goto	l3857
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;RTDuC.c: 71: {
  1070                           ;RTDuC.c: 72: Ki = SPIReassembleDouble();
  1071  0001CC  EC80  F009         	call	_SPIReassembleDouble	;wreg free
  1072  0001D0  C01A  F09C         	movff	?_SPIReassembleDouble,_Ki
  1073  0001D4  C01B  F09D         	movff	?_SPIReassembleDouble+1,_Ki+1
  1074  0001D8  C01C  F09E         	movff	?_SPIReassembleDouble+2,_Ki+2
  1075                           
  1076                           ;RTDuC.c: 73: }
  1077  0001DC  D00E               	goto	l3861
  1078  0001DE                     l3857:
  1079                           
  1080                           ;RTDuC.c: 74: else if (Command == 0x09)
  1081  0001DE  0E09               	movlw	9
  1082  0001E0  0100               	movlb	0	; () banked
  1083  0001E2  19AD               	xorwf	_Command& (0+255),w,b
  1084  0001E4  A4D8               	btfss	status,2,c
  1085  0001E6  D009               	goto	l3861
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;RTDuC.c: 75: {
  1089                           ;RTDuC.c: 76: Kd = SPIReassembleDouble();
  1090  0001E8  EC80  F009         	call	_SPIReassembleDouble	;wreg free
  1091  0001EC  C01A  F099         	movff	?_SPIReassembleDouble,_Kd
  1092  0001F0  C01B  F09A         	movff	?_SPIReassembleDouble+1,_Kd+1
  1093  0001F4  C01C  F09B         	movff	?_SPIReassembleDouble+2,_Kd+2
  1094  0001F8  D000               	goto	l3861
  1095  0001FA                     l3861:
  1096                           
  1097                           ;RTDuC.c: 77: }
  1098                           ;RTDuC.c: 78: temporary = SSP1BUF;
  1099  0001FA  CFC9 F037          	movff	4041,main@temporary	;volatile
  1100  0001FE  D000               	goto	l3863
  1101  000200                     l3863:
  1102                           
  1103                           ;RTDuC.c: 79: }
  1104                           ;RTDuC.c: 80: PIE1bits.SSP1IE = 1;
  1105  000200  869D               	bsf	3997,3,c	;volatile
  1106  000202  D000               	goto	l3865
  1107  000204                     l3865:
  1108                           
  1109                           ;RTDuC.c: 81: }
  1110                           ;RTDuC.c: 83: DetectJoystick();
  1111  000204  ECCF  F00A         	call	_DetectJoystick	;wreg free
  1112                           
  1113                           ;RTDuC.c: 84: if (JSEnableFlag == 1)
  1114  000208  0100               	movlb	0	; () banked
  1115  00020A  05AE               	decf	_JSEnableFlag& (0+255),w,b
  1116  00020C  A4D8               	btfss	status,2,c
  1117  00020E  D009               	goto	l3871
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;RTDuC.c: 85: {
  1121                           ;RTDuC.c: 86: ImplementJSMotion(DetectMovement());
  1122  000210  EC00  F008         	call	_DetectMovement	;wreg free
  1123  000214  C01A  F023         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1124  000218  C01B  F024         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1125  00021C  ECB2  F005         	call	_ImplementJSMotion	;wreg free
  1126  000220  D000               	goto	l3871
  1127  000222                     l3871:
  1128                           
  1129                           ;RTDuC.c: 87: }
  1130                           ;RTDuC.c: 89: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1131  000222  0100               	movlb	0	; () banked
  1132  000224  05AF               	decf	_PIDEnableFlag& (0+255),w,b
  1133  000226  A4D8               	btfss	status,2,c
  1134  000228  D02D               	goto	l3885
  1135                           
  1136                           ; BSR set to: 0
  1137  00022A  0100               	movlb	0	; () banked
  1138  00022C  05B1               	decf	_TMR0Flag& (0+255),w,b
  1139  00022E  A4D8               	btfss	status,2,c
  1140  000230  D029               	goto	l3885
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;RTDuC.c: 90: {
  1144                           ;RTDuC.c: 91: PORTCbits.RC6 = 1;
  1145  000232  8C82               	bsf	3970,6,c	;volatile
  1146                           
  1147                           ;RTDuC.c: 92: INTCONbits.GIE = 0;
  1148  000234  9EF2               	bcf	intcon,7,c	;volatile
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;RTDuC.c: 93: CurrentAngle = RTD2Angle(ReadRTDpos());
  1152  000236  EC3D  F008         	call	_ReadRTDpos	;wreg free
  1153  00023A  C01B  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1154  00023E  C01C  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1155  000242  ECE0  F009         	call	_RTD2Angle	;wreg free
  1156  000246  C069  F093         	movff	?_RTD2Angle,_CurrentAngle
  1157  00024A  C06A  F094         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1158  00024E  C06B  F095         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1159                           
  1160                           ;RTDuC.c: 94: calculatePID(CurrentAngle, SetAngle);
  1161  000252  C093  F084         	movff	_CurrentAngle,calculatePID@angle
  1162  000256  C094  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1163  00025A  C095  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1164  00025E  C040  F087         	movff	_SetAngle,calculatePID@setpoint
  1165  000262  C041  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1166  000266  C042  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1167  00026A  EC76  F001         	call	_calculatePID	;wreg free
  1168                           
  1169                           ;RTDuC.c: 95: ImplementPIDMotion(motorInput);
  1170  00026E  C0AB  F01E         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1171  000272  C0AC  F01F         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1172  000276  EC7D  F007         	call	_ImplementPIDMotion	;wreg free
  1173                           
  1174                           ;RTDuC.c: 96: TMR0Flag = 0;
  1175  00027A  0E00               	movlw	0
  1176  00027C  0100               	movlb	0	; () banked
  1177  00027E  6FB1               	movwf	_TMR0Flag& (0+255),b
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;RTDuC.c: 97: INTCONbits.GIE = 1;
  1181  000280  8EF2               	bsf	intcon,7,c	;volatile
  1182  000282  D030               	goto	l3903
  1183  000284                     l3885:
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;RTDuC.c: 101: else if (PIDEnableFlag == 3)
  1187  000284  0E03               	movlw	3
  1188  000286  0100               	movlb	0	; () banked
  1189  000288  19AF               	xorwf	_PIDEnableFlag& (0+255),w,b
  1190  00028A  A4D8               	btfss	status,2,c
  1191  00028C  D6CF               	goto	l3771
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;RTDuC.c: 102: {
  1195                           ;RTDuC.c: 103: PORTCbits.RC6 = 1;
  1196  00028E  8C82               	bsf	3970,6,c	;volatile
  1197                           
  1198                           ;RTDuC.c: 104: INTCONbits.GIE = 0;
  1199  000290  9EF2               	bcf	intcon,7,c	;volatile
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;RTDuC.c: 105: TMR0H = 0xDB;
  1203  000292  0EDB               	movlw	219
  1204  000294  6ED7               	movwf	4055,c	;volatile
  1205                           
  1206                           ;RTDuC.c: 106: TMR0L = 0x60;
  1207  000296  0E60               	movlw	96
  1208  000298  6ED6               	movwf	4054,c	;volatile
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;RTDuC.c: 107: CurrentAngle = RTD2Angle(ReadRTDpos());
  1212  00029A  EC3D  F008         	call	_ReadRTDpos	;wreg free
  1213  00029E  C01B  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1214  0002A2  C01C  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1215  0002A6  ECE0  F009         	call	_RTD2Angle	;wreg free
  1216  0002AA  C069  F093         	movff	?_RTD2Angle,_CurrentAngle
  1217  0002AE  C06A  F094         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1218  0002B2  C06B  F095         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1219                           
  1220                           ;RTDuC.c: 108: calculatePID(CurrentAngle, SetAngle);
  1221  0002B6  C093  F084         	movff	_CurrentAngle,calculatePID@angle
  1222  0002BA  C094  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1223  0002BE  C095  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1224  0002C2  C040  F087         	movff	_SetAngle,calculatePID@setpoint
  1225  0002C6  C041  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1226  0002CA  C042  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1227  0002CE  EC76  F001         	call	_calculatePID	;wreg free
  1228                           
  1229                           ;RTDuC.c: 109: ImplementPIDMotion(motorInput);
  1230  0002D2  C0AB  F01E         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1231  0002D6  C0AC  F01F         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1232  0002DA  EC7D  F007         	call	_ImplementPIDMotion	;wreg free
  1233                           
  1234                           ;RTDuC.c: 110: INTCONbits.GIE = 1;
  1235  0002DE  8EF2               	bsf	intcon,7,c	;volatile
  1236                           
  1237                           ;RTDuC.c: 111: INTCONbits.TMR0IE = 1;
  1238  0002E0  8AF2               	bsf	intcon,5,c	;volatile
  1239                           
  1240                           ;RTDuC.c: 112: T0CONbits.TMR0ON = 1;
  1241  0002E2  8ED5               	bsf	4053,7,c	;volatile
  1242  0002E4                     l3903:
  1243                           
  1244                           ;RTDuC.c: 113: PORTCbits.RC6 = 0;
  1245  0002E4  9C82               	bcf	3970,6,c	;volatile
  1246  0002E6  D6A2               	goto	l3771
  1247  0002E8  EF0C  F000         	goto	start
  1248  0002EC                     __end_of_main:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           prodh	equ	0xFF4
  1255                           prodl	equ	0xFF3
  1256                           intcon	equ	0xFF2
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           indf2	equ	0xFDF
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           status	equ	0xFD8
  1263                           
  1264 ;; *************** function _initialize *****************
  1265 ;; Defined at:
  1266 ;;		line 118 in file "RTDuC.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;		None
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;		None
  1271 ;; Return value:  Size  Location     Type
  1272 ;;		None               void
  1273 ;; Registers used:
  1274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;Total ram usage:        0 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    8
  1287 ;; This function calls:
  1288 ;;		_EEPROMInit
  1289 ;;		_InitializeInterrupts
  1290 ;;		_JoystickInit
  1291 ;;		_MotorDriverInit
  1292 ;;		_PIDInit
  1293 ;;		_RTDInit
  1294 ;;		_SPIInit
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text1
  1301  0014E6                     __ptext1:
  1302                           	opt stack 0
  1303  0014E6                     _initialize:
  1304                           	opt stack 22
  1305                           
  1306                           ;RTDuC.c: 120: while (OSCCONbits.OSTS == 0);
  1307                           
  1308                           ;incstack = 0
  1309  0014E6  D000               	goto	l504
  1310  0014E8                     l504:
  1311  0014E8  A6D3               	btfss	4051,3,c	;volatile
  1312  0014EA  D7FE               	goto	l504
  1313                           
  1314                           ;RTDuC.c: 122: RTDInit();
  1315  0014EC  EC30  F00A         	call	_RTDInit	;wreg free
  1316                           
  1317                           ;RTDuC.c: 123: SPIInit();
  1318  0014F0  EC01  F00B         	call	_SPIInit	;wreg free
  1319                           
  1320                           ;RTDuC.c: 124: JoystickInit();
  1321  0014F4  EC48  F00A         	call	_JoystickInit	;wreg free
  1322                           
  1323                           ;RTDuC.c: 125: MotorDriverInit();
  1324  0014F8  EC99  F00A         	call	_MotorDriverInit	;wreg free
  1325                           
  1326                           ;RTDuC.c: 126: PIDInit();
  1327  0014FC  EC3B  F009         	call	_PIDInit	;wreg free
  1328                           
  1329                           ;RTDuC.c: 127: EEPROMInit();
  1330  001500  EC27  F00B         	call	_EEPROMInit	;wreg free
  1331                           
  1332                           ;RTDuC.c: 129: InitializeInterrupts();
  1333  001504  EC63  F00B         	call	_InitializeInterrupts	;wreg free
  1334                           
  1335                           ;RTDuC.c: 131: PORTAbits.RA3 = 1;
  1336  001508  8680               	bsf	3968,3,c	;volatile
  1337  00150A  0012               	return		;funcret
  1338  00150C                     __end_of_initialize:
  1339                           	opt stack 0
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           prodh	equ	0xFF4
  1345                           prodl	equ	0xFF3
  1346                           intcon	equ	0xFF2
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           indf2	equ	0xFDF
  1350                           fsr2h	equ	0xFDA
  1351                           fsr2l	equ	0xFD9
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _SPIInit *****************
  1355 ;; Defined at:
  1356 ;;		line 16 in file "SPISlave.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, status,2, status,0, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;Total ram usage:        0 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    5
  1377 ;; This function calls:
  1378 ;;		_OpenSPI1
  1379 ;; This function is called by:
  1380 ;;		_initialize
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text2
  1385  001602                     __ptext2:
  1386                           	opt stack 0
  1387  001602                     _SPIInit:
  1388                           	opt stack 24
  1389                           
  1390                           ;SPISlave.c: 18: TRISCbits.RC4 = 1;
  1391                           
  1392                           ;incstack = 0
  1393  001602  8894               	bsf	3988,4,c	;volatile
  1394                           
  1395                           ;SPISlave.c: 19: TRISCbits.RC5 = 0;
  1396  001604  9A94               	bcf	3988,5,c	;volatile
  1397                           
  1398                           ;SPISlave.c: 20: TRISFbits.RF7 = 1;
  1399  001606  8E97               	bsf	3991,7,c	;volatile
  1400                           
  1401                           ;SPISlave.c: 21: TRISCbits.RC6 = 0;
  1402  001608  9C94               	bcf	3988,6,c	;volatile
  1403                           
  1404                           ;SPISlave.c: 22: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  1405  00160A  0E00               	movlw	0
  1406  00160C  6E1A               	movwf	OpenSPI1@bus_mode,c
  1407  00160E  0E00               	movlw	0
  1408  001610  6E1B               	movwf	OpenSPI1@smp_phase,c
  1409  001612  0E04               	movlw	4
  1410  001614  EC69  F008         	call	_OpenSPI1
  1411                           
  1412                           ;SPISlave.c: 23: PIE1bits.SSP1IE = 1;
  1413  001618  869D               	bsf	3997,3,c	;volatile
  1414  00161A  0012               	return		;funcret
  1415  00161C                     __end_of_SPIInit:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           prodh	equ	0xFF4
  1422                           prodl	equ	0xFF3
  1423                           intcon	equ	0xFF2
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           indf2	equ	0xFDF
  1427                           fsr2h	equ	0xFDA
  1428                           fsr2l	equ	0xFD9
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _OpenSPI1 *****************
  1432 ;; Defined at:
  1433 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  sync_mode       1    wreg     unsigned char 
  1436 ;;  bus_mode        1   25[COMRAM] unsigned char 
  1437 ;;  smp_phase       1   26[COMRAM] unsigned char 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  sync_mode       1   27[COMRAM] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;		None               void
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;Total ram usage:        3 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    4
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_SPIInit
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text3
  1464  0010D2                     __ptext3:
  1465                           	opt stack 0
  1466  0010D2                     _OpenSPI1:
  1467                           	opt stack 24
  1468                           
  1469                           ;incstack = 0
  1470                           ;OpenSPI1@sync_mode stored from wreg
  1471  0010D2  6E1C               	movwf	OpenSPI1@sync_mode,c
  1472  0010D4  0E3F               	movlw	63
  1473  0010D6  16C7               	andwf	4039,f,c	;volatile
  1474  0010D8  0E00               	movlw	0
  1475  0010DA  6EC6               	movwf	4038,c	;volatile
  1476  0010DC  501C               	movf	OpenSPI1@sync_mode,w,c
  1477  0010DE  12C6               	iorwf	4038,f,c	;volatile
  1478  0010E0  501B               	movf	OpenSPI1@smp_phase,w,c
  1479  0010E2  12C7               	iorwf	4039,f,c	;volatile
  1480  0010E4  D005               	goto	l3231
  1481  0010E6                     l582:
  1482  0010E6  8CC7               	bsf	4039,6,c	;volatile
  1483  0010E8  D013               	goto	l3235
  1484  0010EA                     l584:
  1485  0010EA  8CC7               	bsf	4039,6,c	;volatile
  1486  0010EC                     l585:
  1487  0010EC  88C6               	bsf	4038,4,c	;volatile
  1488  0010EE  D010               	goto	l3235
  1489  0010F0                     l3231:
  1490  0010F0  501A               	movf	OpenSPI1@bus_mode,w,c
  1491                           
  1492                           ; Switch size 1, requested type "space"
  1493                           ; Number of cases is 3, Range of values is 0 to 3
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte           10     6 (average)
  1497                           ;	Chosen strategy is simple_byte
  1498  0010F2  0A00               	xorlw	0	; case 0
  1499  0010F4  B4D8               	btfsc	status,2,c
  1500  0010F6  D7F7               	goto	l582
  1501  0010F8  0A02               	xorlw	2	; case 2
  1502  0010FA  B4D8               	btfsc	status,2,c
  1503  0010FC  D7F6               	goto	l584
  1504  0010FE  0A01               	xorlw	1	; case 3
  1505  001100  B4D8               	btfsc	status,2,c
  1506  001102  D7F4               	goto	l585
  1507  001104  D005               	goto	l3235
  1508  001106                     l588:
  1509  001106  8E97               	bsf	3991,7,c	;volatile
  1510  001108                     l590:
  1511  001108  8694               	bsf	3988,3,c	;volatile
  1512  00110A  D00A               	goto	l589
  1513  00110C                     l591:
  1514  00110C  9694               	bcf	3988,3,c	;volatile
  1515  00110E  D008               	goto	l589
  1516  001110                     l3235:
  1517  001110  501C               	movf	OpenSPI1@sync_mode,w,c
  1518                           
  1519                           ; Switch size 1, requested type "space"
  1520                           ; Number of cases is 2, Range of values is 4 to 5
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte            7     4 (average)
  1524                           ;	Chosen strategy is simple_byte
  1525  001112  0A04               	xorlw	4	; case 4
  1526  001114  B4D8               	btfsc	status,2,c
  1527  001116  D7F7               	goto	l588
  1528  001118  0A01               	xorlw	1	; case 5
  1529  00111A  B4D8               	btfsc	status,2,c
  1530  00111C  D7F5               	goto	l590
  1531  00111E  D7F6               	goto	l591
  1532  001120                     l589:
  1533  001120  8894               	bsf	3988,4,c	;volatile
  1534  001122  9A94               	bcf	3988,5,c	;volatile
  1535  001124  8AC6               	bsf	4038,5,c	;volatile
  1536  001126  0012               	return		;funcret
  1537  001128                     __end_of_OpenSPI1:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           prodh	equ	0xFF4
  1544                           prodl	equ	0xFF3
  1545                           intcon	equ	0xFF2
  1546                           postinc0	equ	0xFEE
  1547                           wreg	equ	0xFE8
  1548                           indf2	equ	0xFDF
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _RTDInit *****************
  1554 ;; Defined at:
  1555 ;;		line 3 in file "ResolverToDigital.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;		None
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;		None
  1560 ;; Return value:  Size  Location     Type
  1561 ;;		None               void
  1562 ;; Registers used:
  1563 ;;		wreg, cstack
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;Total ram usage:        0 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    5
  1576 ;; This function calls:
  1577 ;;		_Delay10TCYx
  1578 ;;		_Delay1KTCYx
  1579 ;;		_Delay1TCYx
  1580 ;; This function is called by:
  1581 ;;		_initialize
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text4
  1586  001460                     __ptext4:
  1587                           	opt stack 0
  1588  001460                     _RTDInit:
  1589                           	opt stack 24
  1590                           
  1591                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1592                           
  1593                           ;incstack = 0
  1594  001460  6895               	setf	3989,c	;volatile
  1595                           
  1596                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1597  001462  6899               	setf	3993,c	;volatile
  1598                           
  1599                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1600  001464  9096               	bcf	3990,0,c	;volatile
  1601                           
  1602                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1603  001466  9296               	bcf	3990,1,c	;volatile
  1604                           
  1605                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1606  001468  9496               	bcf	3990,2,c	;volatile
  1607                           
  1608                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1609  00146A  909A               	bcf	3994,0,c	;volatile
  1610                           
  1611                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1612  00146C  8A96               	bsf	3990,5,c	;volatile
  1613                           
  1614                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1615  00146E  8C96               	bsf	3990,6,c	;volatile
  1616                           
  1617                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1618  001470  8E96               	bsf	3990,7,c	;volatile
  1619                           
  1620                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  1621  001472  9088               	bcf	3976,0,c	;volatile
  1622                           
  1623                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  1624  001474  0E0A               	movlw	10
  1625  001476  EC3A  F00B         	call	_Delay10TCYx
  1626                           
  1627                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  1628  00147A  8088               	bsf	3976,0,c	;volatile
  1629                           
  1630                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  1631  00147C  0E14               	movlw	20
  1632  00147E  EC31  F00B         	call	_Delay1KTCYx
  1633                           
  1634                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  1635  001482  9084               	bcf	3972,0,c	;volatile
  1636                           
  1637                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  1638  001484  0E01               	movlw	1
  1639  001486  EC5D  F00B         	call	_Delay1TCYx
  1640                           
  1641                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  1642  00148A  8084               	bsf	3972,0,c	;volatile
  1643                           
  1644                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  1645  00148C  9484               	bcf	3972,2,c	;volatile
  1646  00148E  0012               	return		;funcret
  1647  001490                     __end_of_RTDInit:
  1648                           	opt stack 0
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           prodh	equ	0xFF4
  1654                           prodl	equ	0xFF3
  1655                           intcon	equ	0xFF2
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           indf2	equ	0xFDF
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _Delay1TCYx *****************
  1664 ;; Defined at:
  1665 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  unit            1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  unit            1   25[COMRAM] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;		None               void
  1672 ;; Registers used:
  1673 ;;		wreg
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;Total ram usage:        1 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    4
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_RTDInit
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text5
  1694  0016BA                     __ptext5:
  1695                           	opt stack 0
  1696  0016BA                     _Delay1TCYx:
  1697                           	opt stack 24
  1698                           
  1699                           ;incstack = 0
  1700                           ;Delay1TCYx@unit stored from wreg
  1701  0016BA  6E1A               	movwf	Delay1TCYx@unit,c
  1702  0016BC                     l836:
  1703  0016BC  F000               	nop	
  1704  0016BE  2E1A               	decfsz	Delay1TCYx@unit,f,c
  1705  0016C0  D7FD               	goto	l836
  1706  0016C2  D000               	goto	l838
  1707  0016C4                     l838:
  1708  0016C4  0012               	return		;funcret
  1709  0016C6                     __end_of_Delay1TCYx:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           intcon	equ	0xFF2
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           indf2	equ	0xFDF
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _Delay1KTCYx *****************
  1726 ;; Defined at:
  1727 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  unit            1    wreg     unsigned char 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  unit            1   25[COMRAM] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;		None               void
  1734 ;; Registers used:
  1735 ;;		wreg
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;Total ram usage:        1 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    4
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_RTDInit
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text6
  1756  001662                     __ptext6:
  1757                           	opt stack 0
  1758  001662                     _Delay1KTCYx:
  1759                           	opt stack 24
  1760                           
  1761                           ;incstack = 0
  1762                           ;Delay1KTCYx@unit stored from wreg
  1763  001662  6E1A               	movwf	Delay1KTCYx@unit,c
  1764  001664  0EFA               	movlw	250
  1765  001666                     u3667:
  1766  001666  F000               	nop	
  1767  001668  2EE8               	decfsz	wreg,f,c
  1768  00166A  D7FD               	goto	u3667
  1769  00166C  2E1A               	decfsz	Delay1KTCYx@unit,f,c
  1770  00166E  D7FA               	goto	l3215
  1771  001670  D000               	goto	l831
  1772  001672                     l831:
  1773  001672  0012               	return		;funcret
  1774  001674                     __end_of_Delay1KTCYx:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           prodh	equ	0xFF4
  1781                           prodl	equ	0xFF3
  1782                           intcon	equ	0xFF2
  1783                           postinc0	equ	0xFEE
  1784                           wreg	equ	0xFE8
  1785                           indf2	equ	0xFDF
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function _PIDInit *****************
  1791 ;; Defined at:
  1792 ;;		line 18 in file "PID.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;		None               void
  1799 ;; Registers used:
  1800 ;;		wreg, status,2
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;Total ram usage:        0 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    4
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_initialize
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text7
  1821  001276                     __ptext7:
  1822                           	opt stack 0
  1823  001276                     _PIDInit:
  1824                           	opt stack 25
  1825                           
  1826                           ;PID.c: 20: error = 0;
  1827                           
  1828                           ;incstack = 0
  1829  001276  0E00               	movlw	0
  1830  001278  0100               	movlb	0	; () banked
  1831  00127A  6FA2               	movwf	_error& (0+255),b
  1832  00127C  0E00               	movlw	0
  1833  00127E  0100               	movlb	0	; () banked
  1834  001280  6FA3               	movwf	(_error+1)& (0+255),b
  1835  001282  0E00               	movlw	0
  1836  001284  0100               	movlb	0	; () banked
  1837  001286  6FA4               	movwf	(_error+2)& (0+255),b
  1838                           
  1839                           ;PID.c: 21: prevErr = 0;
  1840  001288  0E00               	movlw	0
  1841  00128A  0100               	movlb	0	; () banked
  1842  00128C  6FA8               	movwf	_prevErr& (0+255),b
  1843  00128E  0E00               	movlw	0
  1844  001290  0100               	movlb	0	; () banked
  1845  001292  6FA9               	movwf	(_prevErr+1)& (0+255),b
  1846  001294  0E00               	movlw	0
  1847  001296  0100               	movlb	0	; () banked
  1848  001298  6FAA               	movwf	(_prevErr+2)& (0+255),b
  1849                           
  1850                           ;PID.c: 22: intErr = 0;
  1851  00129A  0E00               	movlw	0
  1852  00129C  0100               	movlb	0	; () banked
  1853  00129E  6FA5               	movwf	_intErr& (0+255),b
  1854  0012A0  0E00               	movlw	0
  1855  0012A2  0100               	movlb	0	; () banked
  1856  0012A4  6FA6               	movwf	(_intErr+1)& (0+255),b
  1857  0012A6  0E00               	movlw	0
  1858  0012A8  0100               	movlb	0	; () banked
  1859  0012AA  6FA7               	movwf	(_intErr+2)& (0+255),b
  1860                           
  1861                           ;PID.c: 24: T0CON = 0x04;
  1862  0012AC  0E04               	movlw	4
  1863  0012AE  6ED5               	movwf	4053,c	;volatile
  1864                           
  1865                           ;PID.c: 25: TMR0H = 0xDB;
  1866  0012B0  0EDB               	movlw	219
  1867  0012B2  6ED7               	movwf	4055,c	;volatile
  1868                           
  1869                           ;PID.c: 26: TMR0L = 0x60;
  1870  0012B4  0E60               	movlw	96
  1871  0012B6  6ED6               	movwf	4054,c	;volatile
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;PID.c: 27: INTCON2bits.TMR0IP = 1;
  1875  0012B8  84F1               	bsf	intcon2,2,c	;volatile
  1876                           
  1877                           ; BSR set to: 0
  1878  0012BA  0012               	return		;funcret
  1879  0012BC                     __end_of_PIDInit:
  1880                           	opt stack 0
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           prodh	equ	0xFF4
  1886                           prodl	equ	0xFF3
  1887                           intcon	equ	0xFF2
  1888                           intcon2	equ	0xFF1
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           indf2	equ	0xFDF
  1892                           fsr2h	equ	0xFDA
  1893                           fsr2l	equ	0xFD9
  1894                           status	equ	0xFD8
  1895                           
  1896 ;; *************** function _MotorDriverInit *****************
  1897 ;; Defined at:
  1898 ;;		line 7 in file "MotorControl.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;		None               void
  1905 ;; Registers used:
  1906 ;;		wreg, status,2
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    4
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_initialize
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text8
  1927  001532                     __ptext8:
  1928                           	opt stack 0
  1929  001532                     _MotorDriverInit:
  1930                           	opt stack 25
  1931                           
  1932                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;incstack = 0
  1936  001532  9098               	bcf	3992,0,c	;volatile
  1937                           
  1938                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  1939  001534  9896               	bcf	3990,4,c	;volatile
  1940                           
  1941                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  1942  001536  9696               	bcf	3990,3,c	;volatile
  1943                           
  1944                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  1945  001538  9698               	bcf	3992,3,c	;volatile
  1946                           
  1947                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  1948  00153A  8093               	bsf	3987,0,c	;volatile
  1949                           
  1950                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  1951  00153C  9892               	bcf	3986,4,c	;volatile
  1952                           
  1953                           ;MotorControl.c: 18: CCPR3L = 0x00;
  1954  00153E  0E00               	movlw	0
  1955  001540  6EB8               	movwf	4024,c	;volatile
  1956                           
  1957                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  1958  001542  98B7               	bcf	4023,4,c	;volatile
  1959                           
  1960                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  1961  001544  9AB7               	bcf	4023,5,c	;volatile
  1962                           
  1963                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  1964  001546  0E4C               	movlw	76
  1965  001548  6EB7               	movwf	4023,c	;volatile
  1966                           
  1967                           ;MotorControl.c: 22: PR2 = 0xFF;
  1968  00154A  68CB               	setf	4043,c	;volatile
  1969                           
  1970                           ;MotorControl.c: 23: T3CON = 0x00;
  1971  00154C  0E00               	movlw	0
  1972  00154E  6EB1               	movwf	4017,c	;volatile
  1973                           
  1974                           ;MotorControl.c: 24: T2CON = 0x04;
  1975  001550  0E04               	movlw	4
  1976  001552  6ECA               	movwf	4042,c	;volatile
  1977  001554  0012               	return		;funcret
  1978  001556                     __end_of_MotorDriverInit:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           prodh	equ	0xFF4
  1985                           prodl	equ	0xFF3
  1986                           intcon	equ	0xFF2
  1987                           intcon2	equ	0xFF1
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           indf2	equ	0xFDF
  1991                           fsr2h	equ	0xFDA
  1992                           fsr2l	equ	0xFD9
  1993                           status	equ	0xFD8
  1994                           
  1995 ;; *************** function _JoystickInit *****************
  1996 ;; Defined at:
  1997 ;;		line 6 in file "Joystick.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;		None               void
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:        0 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    4
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_initialize
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text9
  2026  001490                     __ptext9:
  2027                           	opt stack 0
  2028  001490                     _JoystickInit:
  2029                           	opt stack 25
  2030                           
  2031                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  2032                           
  2033                           ;incstack = 0
  2034  001490  9492               	bcf	3986,2,c	;volatile
  2035                           
  2036                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  2037  001492  8293               	bsf	3987,1,c	;volatile
  2038                           
  2039                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  2040  001494  A281               	btfss	3969,1,c	;volatile
  2041  001496  D003               	goto	l31
  2042                           
  2043                           ;Joystick.c: 11: {
  2044                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  2045  001498  8480               	bsf	3968,2,c	;volatile
  2046                           
  2047                           ;Joystick.c: 13: JSEnableFlag = 1;
  2048  00149A  0E01               	movlw	1
  2049  00149C  D004               	goto	L1
  2050  00149E                     l31:
  2051                           
  2052                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  2053  00149E  B281               	btfsc	3969,1,c	;volatile
  2054  0014A0  D005               	goto	l3329
  2055                           
  2056                           ;Joystick.c: 16: {
  2057                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  2058  0014A2  9480               	bcf	3968,2,c	;volatile
  2059                           
  2060                           ;Joystick.c: 18: JSEnableFlag = 0;
  2061  0014A4  0E00               	movlw	0
  2062  0014A6                     L1:
  2063  0014A6  0100               	movlb	0	; () banked
  2064  0014A8  6FAE               	movwf	_JSEnableFlag& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067  0014AA  D000               	goto	l3329
  2068  0014AC                     l3329:
  2069                           
  2070                           ;Joystick.c: 19: }
  2071                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  2072  0014AC  80C2               	bsf	4034,0,c	;volatile
  2073                           
  2074                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  2075  0014AE  50C2               	movf	4034,w,c	;volatile
  2076  0014B0  0B01               	andlw	1
  2077  0014B2  6EC2               	movwf	4034,c	;volatile
  2078                           
  2079                           ;Joystick.c: 23: ADCON1 = 0x0D;
  2080  0014B4  0E0D               	movlw	13
  2081  0014B6  6EC1               	movwf	4033,c	;volatile
  2082                           
  2083                           ;Joystick.c: 24: ADCON2 = 0xB4;
  2084  0014B8  0EB4               	movlw	180
  2085  0014BA  6EC0               	movwf	4032,c	;volatile
  2086  0014BC  0012               	return		;funcret
  2087  0014BE                     __end_of_JoystickInit:
  2088                           	opt stack 0
  2089                           tblptru	equ	0xFF8
  2090                           tblptrh	equ	0xFF7
  2091                           tblptrl	equ	0xFF6
  2092                           tablat	equ	0xFF5
  2093                           prodh	equ	0xFF4
  2094                           prodl	equ	0xFF3
  2095                           intcon	equ	0xFF2
  2096                           intcon2	equ	0xFF1
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           indf2	equ	0xFDF
  2100                           fsr2h	equ	0xFDA
  2101                           fsr2l	equ	0xFD9
  2102                           status	equ	0xFD8
  2103                           
  2104 ;; *************** function _InitializeInterrupts *****************
  2105 ;; Defined at:
  2106 ;;		line 196 in file "RTDuC.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;		None               void
  2113 ;; Registers used:
  2114 ;;		None
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;Total ram usage:        0 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    4
  2127 ;; This function calls:
  2128 ;;		Nothing
  2129 ;; This function is called by:
  2130 ;;		_initialize
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text10
  2135  0016C6                     __ptext10:
  2136                           	opt stack 0
  2137  0016C6                     _InitializeInterrupts:
  2138                           	opt stack 25
  2139                           
  2140                           ;RTDuC.c: 198: INTCONbits.GIE = 1;
  2141                           
  2142                           ;incstack = 0
  2143  0016C6  8EF2               	bsf	intcon,7,c	;volatile
  2144                           
  2145                           ;RTDuC.c: 199: INTCONbits.PEIE = 1;
  2146  0016C8  8CF2               	bsf	intcon,6,c	;volatile
  2147                           
  2148                           ;RTDuC.c: 201: PIE2bits.OSCFIE = 1;
  2149  0016CA  8EA0               	bsf	4000,7,c	;volatile
  2150                           
  2151                           ;RTDuC.c: 202: IPR2bits.OSCFIP = 1;
  2152  0016CC  8EA2               	bsf	4002,7,c	;volatile
  2153  0016CE  0012               	return		;funcret
  2154  0016D0                     __end_of_InitializeInterrupts:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           intcon	equ	0xFF2
  2163                           intcon2	equ	0xFF1
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           indf2	equ	0xFDF
  2167                           fsr2h	equ	0xFDA
  2168                           fsr2l	equ	0xFD9
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function _EEPROMInit *****************
  2172 ;; Defined at:
  2173 ;;		line 13 in file "EEPROM.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;		None               void
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;Total ram usage:        0 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    7
  2194 ;; This function calls:
  2195 ;;		_EEBootUp
  2196 ;; This function is called by:
  2197 ;;		_initialize
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text11
  2202  00164E                     __ptext11:
  2203                           	opt stack 0
  2204  00164E                     _EEPROMInit:
  2205                           	opt stack 22
  2206                           
  2207                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  2208                           
  2209                           ;incstack = 0
  2210  00164E  9EA6               	bcf	4006,7,c	;volatile
  2211                           
  2212                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  2213  001650  9CA6               	bcf	4006,6,c	;volatile
  2214                           
  2215                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  2216  001652  84A6               	bsf	4006,2,c	;volatile
  2217                           
  2218                           ;EEPROM.c: 19: EEBootUp();
  2219  001654  ECC0  F007         	call	_EEBootUp	;wreg free
  2220                           
  2221                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  2222  001658  0E3D               	movlw	61
  2223  00165A  6ED2               	movwf	4050,c	;volatile
  2224                           
  2225                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  2226  00165C  84A0               	bsf	4000,2,c	;volatile
  2227                           
  2228                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  2229  00165E  84A2               	bsf	4002,2,c	;volatile
  2230  001660  0012               	return		;funcret
  2231  001662                     __end_of_EEPROMInit:
  2232                           	opt stack 0
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           prodh	equ	0xFF4
  2238                           prodl	equ	0xFF3
  2239                           intcon	equ	0xFF2
  2240                           intcon2	equ	0xFF1
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           indf2	equ	0xFDF
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _EEBootUp *****************
  2249 ;; Defined at:
  2250 ;;		line 27 in file "EEPROM.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;		None
  2255 ;; Return value:  Size  Location     Type
  2256 ;;		None               void
  2257 ;; Registers used:
  2258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;Total ram usage:        2 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    6
  2271 ;; This function calls:
  2272 ;;		_EEReadChar
  2273 ;;		_EEReadDouble
  2274 ;; This function is called by:
  2275 ;;		_EEPROMInit
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text12
  2280  000F80                     __ptext12:
  2281                           	opt stack 0
  2282  000F80                     _EEBootUp:
  2283                           	opt stack 22
  2284                           
  2285                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  2286                           
  2287                           ;incstack = 0
  2288  000F80  0E16               	movlw	22
  2289  000F82  ECF1  F00A         	call	_EEReadChar
  2290  000F86  0900               	iorlw	0
  2291  000F88  B4D8               	btfsc	status,2,c
  2292  000F8A  D039               	goto	l336
  2293                           
  2294                           ;EEPROM.c: 30: {
  2295                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  2296  000F8C  0E00               	movlw	0
  2297  000F8E  EC94  F008         	call	_EEReadDouble
  2298  000F92  C020  F040         	movff	?_EEReadDouble,_SetAngle
  2299  000F96  C021  F041         	movff	?_EEReadDouble+1,_SetAngle+1
  2300  000F9A  C022  F042         	movff	?_EEReadDouble+2,_SetAngle+2
  2301                           
  2302                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  2303  000F9E  0E03               	movlw	3
  2304  000FA0  EC94  F008         	call	_EEReadDouble
  2305  000FA4  C020  F09F         	movff	?_EEReadDouble,_Kp
  2306  000FA8  C021  F0A0         	movff	?_EEReadDouble+1,_Kp+1
  2307  000FAC  C022  F0A1         	movff	?_EEReadDouble+2,_Kp+2
  2308                           
  2309                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  2310  000FB0  0E06               	movlw	6
  2311  000FB2  EC94  F008         	call	_EEReadDouble
  2312  000FB6  C020  F09C         	movff	?_EEReadDouble,_Ki
  2313  000FBA  C021  F09D         	movff	?_EEReadDouble+1,_Ki+1
  2314  000FBE  C022  F09E         	movff	?_EEReadDouble+2,_Ki+2
  2315                           
  2316                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  2317  000FC2  0E09               	movlw	9
  2318  000FC4  EC94  F008         	call	_EEReadDouble
  2319  000FC8  C020  F099         	movff	?_EEReadDouble,_Kd
  2320  000FCC  C021  F09A         	movff	?_EEReadDouble+1,_Kd+1
  2321  000FD0  C022  F09B         	movff	?_EEReadDouble+2,_Kd+2
  2322                           
  2323                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  2324  000FD4  0E15               	movlw	21
  2325  000FD6  ECF1  F00A         	call	_EEReadChar
  2326  000FDA  0100               	movlb	0	; () banked
  2327  000FDC  6FAF               	movwf	_PIDEnableFlag& (0+255),b
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  2331  000FDE  0100               	movlb	0	; () banked
  2332  000FE0  51AF               	movf	_PIDEnableFlag& (0+255),w,b
  2333  000FE2  6E25               	movwf	??_EEBootUp& (0+255),c
  2334  000FE4  6A26               	clrf	(??_EEBootUp+1)& (0+255),c
  2335  000FE6  0E01               	movlw	1
  2336  000FE8  1225               	iorwf	??_EEBootUp,f,c
  2337  000FEA  0E00               	movlw	0
  2338  000FEC  1226               	iorwf	??_EEBootUp+1,f,c
  2339  000FEE  0425               	decf	??_EEBootUp,w,c
  2340  000FF0  1026               	iorwf	??_EEBootUp+1,w,c
  2341  000FF2  A4D8               	btfss	status,2,c
  2342  000FF4  D004               	goto	l336
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;EEPROM.c: 37: {
  2346                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  2347  000FF6  0E03               	movlw	3
  2348  000FF8  0100               	movlb	0	; () banked
  2349  000FFA  6FAF               	movwf	_PIDEnableFlag& (0+255),b
  2350                           
  2351                           ; BSR set to: 0
  2352  000FFC  D000               	goto	l336
  2353  000FFE                     l336:
  2354  000FFE  0012               	return		;funcret
  2355  001000                     __end_of_EEBootUp:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           prodh	equ	0xFF4
  2362                           prodl	equ	0xFF3
  2363                           intcon	equ	0xFF2
  2364                           intcon2	equ	0xFF1
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           indf2	equ	0xFDF
  2368                           fsr2h	equ	0xFDA
  2369                           fsr2l	equ	0xFD9
  2370                           status	equ	0xFD8
  2371                           
  2372 ;; *************** function _EEReadDouble *****************
  2373 ;; Defined at:
  2374 ;;		line 100 in file "EEPROM.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  location        1    wreg     unsigned char 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  location        1   34[COMRAM] unsigned char 
  2379 ;;  x               1   35[COMRAM] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  3   31[COMRAM] unsigned char 
  2382 ;; Registers used:
  2383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2389 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;Total ram usage:        5 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    5
  2396 ;; This function calls:
  2397 ;;		_Busy_eep
  2398 ;;		_EEReassembleDouble
  2399 ;;		_Read_b_eep
  2400 ;; This function is called by:
  2401 ;;		_EEBootUp
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text13
  2406  001128                     __ptext13:
  2407                           	opt stack 0
  2408  001128                     _EEReadDouble:
  2409                           	opt stack 22
  2410                           
  2411                           ;incstack = 0
  2412                           ;EEReadDouble@location stored from wreg
  2413  001128  6E23               	movwf	EEReadDouble@location,c
  2414                           
  2415                           ;EEPROM.c: 102: unsigned char x;
  2416                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  2417  00112A  50F2               	movf	intcon,w,c	;volatile
  2418  00112C  0B3F               	andlw	63
  2419  00112E  6EF2               	movwf	intcon,c	;volatile
  2420                           
  2421                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  2422  001130  0E00               	movlw	0
  2423  001132  6E24               	movwf	EEReadDouble@x,c
  2424  001134                     l3157:
  2425  001134  0E02               	movlw	2
  2426  001136  6424               	cpfsgt	EEReadDouble@x,c
  2427  001138  D001               	goto	l3161
  2428  00113A  D014               	goto	l3169
  2429  00113C                     l3161:
  2430                           
  2431                           ;EEPROM.c: 107: {
  2432                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  2433  00113C  5024               	movf	EEReadDouble@x,w,c
  2434  00113E  0D01               	mullw	1
  2435  001140  0E3D               	movlw	low _DDouble
  2436  001142  24F3               	addwf	prodl,w,c
  2437  001144  6ED9               	movwf	fsr2l,c
  2438  001146  0E00               	movlw	high _DDouble
  2439  001148  20F4               	addwfc	prodh,w,c
  2440  00114A  6EDA               	movwf	fsr2h,c
  2441  00114C  5023               	movf	EEReadDouble@location,w,c
  2442  00114E  2424               	addwf	EEReadDouble@x,w,c
  2443  001150  6E1A               	movwf	Read_b_eep@badd,c
  2444  001152  6A1B               	clrf	Read_b_eep@badd+1,c
  2445  001154  361B               	rlcf	Read_b_eep@badd+1,f,c
  2446  001156  EC0E  F00B         	call	_Read_b_eep	;wreg free
  2447  00115A  6EDF               	movwf	indf2,c
  2448                           
  2449                           ;EEPROM.c: 109: Busy_eep();
  2450  00115C  EC6D  F00B         	call	_Busy_eep	;wreg free
  2451  001160  2A24               	incf	EEReadDouble@x,f,c
  2452  001162  D7E8               	goto	l3157
  2453  001164                     l3169:
  2454                           
  2455                           ;EEPROM.c: 110: }
  2456                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  2457  001164  50F2               	movf	intcon,w,c	;volatile
  2458  001166  09C0               	iorlw	192
  2459  001168  6EF2               	movwf	intcon,c	;volatile
  2460                           
  2461                           ;EEPROM.c: 114: return EEReassembleDouble();
  2462  00116A  EC5E  F009         	call	_EEReassembleDouble	;wreg free
  2463  00116E  C01A  F020         	movff	?_EEReassembleDouble,?_EEReadDouble
  2464  001172  C01B  F021         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  2465  001176  C01C  F022         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  2466  00117A  D000               	goto	l352
  2467  00117C                     l352:
  2468  00117C  0012               	return		;funcret
  2469  00117E                     __end_of_EEReadDouble:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           prodh	equ	0xFF4
  2476                           prodl	equ	0xFF3
  2477                           intcon	equ	0xFF2
  2478                           intcon2	equ	0xFF1
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           indf2	equ	0xFDF
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _EEReassembleDouble *****************
  2487 ;; Defined at:
  2488 ;;		line 62 in file "EEPROM.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  dub             3   28[COMRAM] unsigned char 
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  3   25[COMRAM] unsigned char 
  2495 ;; Registers used:
  2496 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2502 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;Total ram usage:        6 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    4
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		_EEReadDouble
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text14
  2517  0012BC                     __ptext14:
  2518                           	opt stack 0
  2519  0012BC                     _EEReassembleDouble:
  2520                           	opt stack 22
  2521                           
  2522                           ;EEPROM.c: 64: double dub;
  2523                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  2524                           
  2525                           ;incstack = 0
  2526  0012BC  0E1D               	movlw	low EEReassembleDouble@dub
  2527  0012BE  6E43               	movwf	_DoublePtr,c
  2528  0012C0  0E00               	movlw	high EEReassembleDouble@dub
  2529  0012C2  6E44               	movwf	_DoublePtr+1,c
  2530                           
  2531                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  2532  0012C4  C043  FFD9         	movff	_DoublePtr,fsr2l
  2533  0012C8  C044  FFDA         	movff	_DoublePtr+1,fsr2h
  2534  0012CC  C03D  FFDF         	movff	_DDouble,indf2
  2535                           
  2536                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  2537  0012D0  EE20 F001          	lfsr	2,1
  2538  0012D4  5043               	movf	_DoublePtr,w,c
  2539  0012D6  26D9               	addwf	fsr2l,f,c
  2540  0012D8  5044               	movf	_DoublePtr+1,w,c
  2541  0012DA  22DA               	addwfc	fsr2h,f,c
  2542  0012DC  C03E  FFDF         	movff	_DDouble+1,indf2
  2543                           
  2544                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  2545  0012E0  EE20 F002          	lfsr	2,2
  2546  0012E4  5043               	movf	_DoublePtr,w,c
  2547  0012E6  26D9               	addwf	fsr2l,f,c
  2548  0012E8  5044               	movf	_DoublePtr+1,w,c
  2549  0012EA  22DA               	addwfc	fsr2h,f,c
  2550  0012EC  C03F  FFDF         	movff	_DDouble+2,indf2
  2551                           
  2552                           ;EEPROM.c: 69: return dub;
  2553  0012F0  C01D  F01A         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  2554  0012F4  C01E  F01B         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  2555  0012F8  C01F  F01C         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  2556  0012FC  D000               	goto	l342
  2557  0012FE                     l342:
  2558  0012FE  0012               	return		;funcret
  2559  001300                     __end_of_EEReassembleDouble:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           intcon	equ	0xFF2
  2568                           intcon2	equ	0xFF1
  2569                           postinc0	equ	0xFEE
  2570                           wreg	equ	0xFE8
  2571                           indf2	equ	0xFDF
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _Busy_eep *****************
  2577 ;; Defined at:
  2578 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;		None               void
  2585 ;; Registers used:
  2586 ;;		None
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;Total ram usage:        0 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    4
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_EEReadDouble
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text15
  2607  0016DA                     __ptext15:
  2608                           	opt stack 0
  2609  0016DA                     _Busy_eep:
  2610                           	opt stack 22
  2611                           
  2612                           ;incstack = 0
  2613  0016DA  D000               	goto	l532
  2614  0016DC                     l532:
  2615  0016DC  B2A6               	btfsc	4006,1,c	;volatile
  2616  0016DE  D7FE               	goto	l532
  2617  0016E0  0012               	return		;funcret
  2618  0016E2                     __end_of_Busy_eep:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           prodh	equ	0xFF4
  2625                           prodl	equ	0xFF3
  2626                           intcon	equ	0xFF2
  2627                           intcon2	equ	0xFF1
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           indf2	equ	0xFDF
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _EEReadChar *****************
  2636 ;; Defined at:
  2637 ;;		line 136 in file "EEPROM.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  location        1    wreg     unsigned char 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  location        1   27[COMRAM] unsigned char 
  2642 ;;  ch              1   28[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      unsigned char 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:        2 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    5
  2659 ;; This function calls:
  2660 ;;		_Read_b_eep
  2661 ;; This function is called by:
  2662 ;;		_EEBootUp
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text16
  2667  0015E2                     __ptext16:
  2668                           	opt stack 0
  2669  0015E2                     _EEReadChar:
  2670                           	opt stack 22
  2671                           
  2672                           ;incstack = 0
  2673                           ;EEReadChar@location stored from wreg
  2674  0015E2  6E1C               	movwf	EEReadChar@location,c
  2675                           
  2676                           ;EEPROM.c: 138: unsigned char ch;
  2677                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  2678  0015E4  50F2               	movf	intcon,w,c	;volatile
  2679  0015E6  0B3F               	andlw	63
  2680  0015E8  6EF2               	movwf	intcon,c	;volatile
  2681                           
  2682                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  2683  0015EA  C01C  F01A         	movff	EEReadChar@location,Read_b_eep@badd
  2684  0015EE  6A1B               	clrf	Read_b_eep@badd+1,c
  2685  0015F0  EC0E  F00B         	call	_Read_b_eep	;wreg free
  2686  0015F4  6E1D               	movwf	EEReadChar@ch,c
  2687                           
  2688                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  2689  0015F6  50F2               	movf	intcon,w,c	;volatile
  2690  0015F8  09C0               	iorlw	192
  2691  0015FA  6EF2               	movwf	intcon,c	;volatile
  2692                           
  2693                           ;EEPROM.c: 146: return ch;
  2694  0015FC  501D               	movf	EEReadChar@ch,w,c
  2695  0015FE  D000               	goto	l358
  2696  001600                     l358:
  2697  001600  0012               	return		;funcret
  2698  001602                     __end_of_EEReadChar:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           intcon	equ	0xFF2
  2707                           intcon2	equ	0xFF1
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           indf2	equ	0xFDF
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _Read_b_eep *****************
  2716 ;; Defined at:
  2717 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  badd            2   25[COMRAM] unsigned int 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      unsigned char 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        2 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    4
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_EEReadDouble
  2742 ;;		_EEReadChar
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text17
  2747  00161C                     __ptext17:
  2748                           	opt stack 0
  2749  00161C                     _Read_b_eep:
  2750                           	opt stack 22
  2751                           
  2752                           ;incstack = 0
  2753  00161C  501B               	movf	Read_b_eep@badd+1,w,c
  2754  00161E  0B03               	andlw	3
  2755  001620  6EAA               	movwf	4010,c	;volatile
  2756  001622  C01A  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  2757  001626  9CA6               	bcf	4006,6,c	;volatile
  2758  001628  9EA6               	bcf	4006,7,c	;volatile
  2759  00162A  80A6               	bsf	4006,0,c	;volatile
  2760  00162C  F000               	nop	
  2761  00162E  F000               	nop	
  2762  001630  50A8               	movf	4008,w,c	;volatile
  2763  001632  D000               	goto	l548
  2764  001634                     l548:
  2765  001634  0012               	return		;funcret
  2766  001636                     __end_of_Read_b_eep:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           intcon2	equ	0xFF1
  2776                           postinc0	equ	0xFEE
  2777                           wreg	equ	0xFE8
  2778                           indf2	equ	0xFDF
  2779                           fsr2h	equ	0xFDA
  2780                           fsr2l	equ	0xFD9
  2781                           status	equ	0xFD8
  2782                           
  2783 ;; *************** function _calculatePID *****************
  2784 ;; Defined at:
  2785 ;;		line 30 in file "PID.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  angle           3   36[BANK0 ] unsigned char 
  2788 ;;  setpoint        3   39[BANK0 ] unsigned char 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  derErr          3   42[BANK0 ] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;		None               void
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2800 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;Total ram usage:       15 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    7
  2807 ;; This function calls:
  2808 ;;		___ftadd
  2809 ;;		___ftdiv
  2810 ;;		___ftge
  2811 ;;		___ftmul
  2812 ;;		___ftneg
  2813 ;;		___ftsub
  2814 ;;		___fttol
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text18
  2821  0002EC                     __ptext18:
  2822                           	opt stack 0
  2823  0002EC                     _calculatePID:
  2824                           	opt stack 23
  2825                           
  2826                           ;PID.c: 32: double derErr;
  2827                           ;PID.c: 33: if (PIDEnableFlag == 3)
  2828                           
  2829                           ;incstack = 0
  2830  0002EC  0E03               	movlw	3
  2831  0002EE  0100               	movlb	0	; () banked
  2832  0002F0  19AF               	xorwf	_PIDEnableFlag& (0+255),w,b
  2833  0002F2  A4D8               	btfss	status,2,c
  2834  0002F4  D01F               	goto	l3661
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;PID.c: 34: {
  2838                           ;PID.c: 35: error = 0;
  2839  0002F6  0E00               	movlw	0
  2840  0002F8  0100               	movlb	0	; () banked
  2841  0002FA  6FA2               	movwf	_error& (0+255),b
  2842  0002FC  0E00               	movlw	0
  2843  0002FE  0100               	movlb	0	; () banked
  2844  000300  6FA3               	movwf	(_error+1)& (0+255),b
  2845  000302  0E00               	movlw	0
  2846  000304  0100               	movlb	0	; () banked
  2847  000306  6FA4               	movwf	(_error+2)& (0+255),b
  2848                           
  2849                           ;PID.c: 36: prevErr = 0;
  2850  000308  0E00               	movlw	0
  2851  00030A  0100               	movlb	0	; () banked
  2852  00030C  6FA8               	movwf	_prevErr& (0+255),b
  2853  00030E  0E00               	movlw	0
  2854  000310  0100               	movlb	0	; () banked
  2855  000312  6FA9               	movwf	(_prevErr+1)& (0+255),b
  2856  000314  0E00               	movlw	0
  2857  000316  0100               	movlb	0	; () banked
  2858  000318  6FAA               	movwf	(_prevErr+2)& (0+255),b
  2859                           
  2860                           ;PID.c: 37: intErr = 0;
  2861  00031A  0E00               	movlw	0
  2862  00031C  0100               	movlb	0	; () banked
  2863  00031E  6FA5               	movwf	_intErr& (0+255),b
  2864  000320  0E00               	movlw	0
  2865  000322  0100               	movlb	0	; () banked
  2866  000324  6FA6               	movwf	(_intErr+1)& (0+255),b
  2867  000326  0E00               	movlw	0
  2868  000328  0100               	movlb	0	; () banked
  2869  00032A  6FA7               	movwf	(_intErr+2)& (0+255),b
  2870                           
  2871                           ;PID.c: 38: PIDEnableFlag = 1;
  2872  00032C  0E01               	movlw	1
  2873  00032E  0100               	movlb	0	; () banked
  2874  000330  6FAF               	movwf	_PIDEnableFlag& (0+255),b
  2875  000332  D000               	goto	l3661
  2876  000334                     l3661:
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;PID.c: 39: }
  2880                           ;PID.c: 41: error = setpoint - angle;
  2881  000334  C084  F01A         	movff	calculatePID@angle,___ftneg@f1
  2882  000338  C085  F01B         	movff	calculatePID@angle+1,___ftneg@f1+1
  2883  00033C  C086  F01C         	movff	calculatePID@angle+2,___ftneg@f1+2
  2884  000340  ECAB  F00A         	call	___ftneg	;wreg free
  2885  000344  C01A  F069         	movff	?___ftneg,___ftadd@f1
  2886  000348  C01B  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  2887  00034C  C01C  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  2888  000350  C087  F06C         	movff	calculatePID@setpoint,___ftadd@f2
  2889  000354  C088  F06D         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2890  000358  C089  F06E         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2891  00035C  ECD1  F002         	call	___ftadd	;wreg free
  2892  000360  C069  F0A2         	movff	?___ftadd,_error
  2893  000364  C06A  F0A3         	movff	?___ftadd+1,_error+1
  2894  000368  C06B  F0A4         	movff	?___ftadd+2,_error+2
  2895                           
  2896                           ;PID.c: 42: if (error > 180)
  2897  00036C  0E00               	movlw	0
  2898  00036E  6E1A               	movwf	___ftge@ff1,c
  2899  000370  0E34               	movlw	52
  2900  000372  6E1B               	movwf	___ftge@ff1+1,c
  2901  000374  0E43               	movlw	67
  2902  000376  6E1C               	movwf	___ftge@ff1+2,c
  2903  000378  C0A2  F01D         	movff	_error,___ftge@ff2
  2904  00037C  C0A3  F01E         	movff	_error+1,___ftge@ff2+1
  2905  000380  C0A4  F01F         	movff	_error+2,___ftge@ff2+2
  2906  000384  EC32  F007         	call	___ftge	;wreg free
  2907  000388  B0D8               	btfsc	status,0,c
  2908  00038A  D018               	goto	l3667
  2909                           
  2910                           ;PID.c: 43: error -= 360;
  2911  00038C  C0A2  F075         	movff	_error,___ftsub@f1
  2912  000390  C0A3  F076         	movff	_error+1,___ftsub@f1+1
  2913  000394  C0A4  F077         	movff	_error+2,___ftsub@f1+2
  2914  000398  0E00               	movlw	0
  2915  00039A  0100               	movlb	0	; () banked
  2916  00039C  6F78               	movwf	___ftsub@f2& (0+255),b
  2917  00039E  0EB4               	movlw	180
  2918  0003A0  0100               	movlb	0	; () banked
  2919  0003A2  6F79               	movwf	(___ftsub@f2+1)& (0+255),b
  2920  0003A4  0E43               	movlw	67
  2921  0003A6  0100               	movlb	0	; () banked
  2922  0003A8  6F7A               	movwf	(___ftsub@f2+2)& (0+255),b
  2923  0003AA  EC13  F009         	call	___ftsub	;wreg free
  2924  0003AE  C075  F0A2         	movff	?___ftsub,_error
  2925  0003B2  C076  F0A3         	movff	?___ftsub+1,_error+1
  2926  0003B6  C077  F0A4         	movff	?___ftsub+2,_error+2
  2927  0003BA  D028               	goto	l148
  2928  0003BC                     l3667:
  2929                           
  2930                           ;PID.c: 44: else if (error < -180)
  2931  0003BC  C0A2  F01A         	movff	_error,___ftge@ff1
  2932  0003C0  C0A3  F01B         	movff	_error+1,___ftge@ff1+1
  2933  0003C4  C0A4  F01C         	movff	_error+2,___ftge@ff1+2
  2934  0003C8  0E00               	movlw	0
  2935  0003CA  6E1D               	movwf	___ftge@ff2,c
  2936  0003CC  0E34               	movlw	52
  2937  0003CE  6E1E               	movwf	___ftge@ff2+1,c
  2938  0003D0  0EC3               	movlw	195
  2939  0003D2  6E1F               	movwf	___ftge@ff2+2,c
  2940  0003D4  EC32  F007         	call	___ftge	;wreg free
  2941  0003D8  B0D8               	btfsc	status,0,c
  2942  0003DA  D018               	goto	l148
  2943                           
  2944                           ;PID.c: 45: error += 360;
  2945  0003DC  C0A2  F069         	movff	_error,___ftadd@f1
  2946  0003E0  C0A3  F06A         	movff	_error+1,___ftadd@f1+1
  2947  0003E4  C0A4  F06B         	movff	_error+2,___ftadd@f1+2
  2948  0003E8  0E00               	movlw	0
  2949  0003EA  0100               	movlb	0	; () banked
  2950  0003EC  6F6C               	movwf	___ftadd@f2& (0+255),b
  2951  0003EE  0EB4               	movlw	180
  2952  0003F0  0100               	movlb	0	; () banked
  2953  0003F2  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
  2954  0003F4  0E43               	movlw	67
  2955  0003F6  0100               	movlb	0	; () banked
  2956  0003F8  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
  2957  0003FA  ECD1  F002         	call	___ftadd	;wreg free
  2958  0003FE  C069  F0A2         	movff	?___ftadd,_error
  2959  000402  C06A  F0A3         	movff	?___ftadd+1,_error+1
  2960  000406  C06B  F0A4         	movff	?___ftadd+2,_error+2
  2961  00040A  D000               	goto	l148
  2962  00040C                     l148:
  2963                           
  2964                           ;PID.c: 47: derErr = error - prevErr;
  2965  00040C  C0A8  F01A         	movff	_prevErr,___ftneg@f1
  2966  000410  C0A9  F01B         	movff	_prevErr+1,___ftneg@f1+1
  2967  000414  C0AA  F01C         	movff	_prevErr+2,___ftneg@f1+2
  2968  000418  ECAB  F00A         	call	___ftneg	;wreg free
  2969  00041C  C01A  F069         	movff	?___ftneg,___ftadd@f1
  2970  000420  C01B  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  2971  000424  C01C  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  2972  000428  C0A2  F06C         	movff	_error,___ftadd@f2
  2973  00042C  C0A3  F06D         	movff	_error+1,___ftadd@f2+1
  2974  000430  C0A4  F06E         	movff	_error+2,___ftadd@f2+2
  2975  000434  ECD1  F002         	call	___ftadd	;wreg free
  2976  000438  C069  F08A         	movff	?___ftadd,calculatePID@derErr
  2977  00043C  C06A  F08B         	movff	?___ftadd+1,calculatePID@derErr+1
  2978  000440  C06B  F08C         	movff	?___ftadd+2,calculatePID@derErr+2
  2979                           
  2980                           ;PID.c: 48: intErr += error;
  2981  000444  C0A5  F069         	movff	_intErr,___ftadd@f1
  2982  000448  C0A6  F06A         	movff	_intErr+1,___ftadd@f1+1
  2983  00044C  C0A7  F06B         	movff	_intErr+2,___ftadd@f1+2
  2984  000450  C0A2  F06C         	movff	_error,___ftadd@f2
  2985  000454  C0A3  F06D         	movff	_error+1,___ftadd@f2+1
  2986  000458  C0A4  F06E         	movff	_error+2,___ftadd@f2+2
  2987  00045C  ECD1  F002         	call	___ftadd	;wreg free
  2988  000460  C069  F0A5         	movff	?___ftadd,_intErr
  2989  000464  C06A  F0A6         	movff	?___ftadd+1,_intErr+1
  2990  000468  C06B  F0A7         	movff	?___ftadd+2,_intErr+2
  2991                           
  2992                           ;PID.c: 49: if (intErr > 2000)
  2993  00046C  0E00               	movlw	0
  2994  00046E  6E1A               	movwf	___ftge@ff1,c
  2995  000470  0EFA               	movlw	250
  2996  000472  6E1B               	movwf	___ftge@ff1+1,c
  2997  000474  0E44               	movlw	68
  2998  000476  6E1C               	movwf	___ftge@ff1+2,c
  2999  000478  C0A5  F01D         	movff	_intErr,___ftge@ff2
  3000  00047C  C0A6  F01E         	movff	_intErr+1,___ftge@ff2+1
  3001  000480  C0A7  F01F         	movff	_intErr+2,___ftge@ff2+2
  3002  000484  EC32  F007         	call	___ftge	;wreg free
  3003  000488  B0D8               	btfsc	status,0,c
  3004  00048A  D00A               	goto	l3673
  3005                           
  3006                           ;PID.c: 50: intErr = 2000;
  3007  00048C  0E00               	movlw	0
  3008  00048E  0100               	movlb	0	; () banked
  3009  000490  6FA5               	movwf	_intErr& (0+255),b
  3010  000492  0EFA               	movlw	250
  3011  000494  0100               	movlb	0	; () banked
  3012  000496  6FA6               	movwf	(_intErr+1)& (0+255),b
  3013  000498  0E44               	movlw	68
  3014  00049A  0100               	movlb	0	; () banked
  3015  00049C  6FA7               	movwf	(_intErr+2)& (0+255),b
  3016  00049E  D000               	goto	l3673
  3017  0004A0                     l3673:
  3018                           
  3019                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3020  0004A0  C0A5  F034         	movff	_intErr,___ftmul@f2
  3021  0004A4  C0A6  F035         	movff	_intErr+1,___ftmul@f2+1
  3022  0004A8  C0A7  F036         	movff	_intErr+2,___ftmul@f2+2
  3023  0004AC  C09C  F031         	movff	_Ki,___ftmul@f1
  3024  0004B0  C09D  F032         	movff	_Ki+1,___ftmul@f1+1
  3025  0004B4  C09E  F033         	movff	_Ki+2,___ftmul@f1+2
  3026  0004B8  ECA9  F004         	call	___ftmul	;wreg free
  3027  0004BC  C031  F08D         	movff	?___ftmul,_calculatePID$3367
  3028  0004C0  C032  F08E         	movff	?___ftmul+1,_calculatePID$3367+1
  3029  0004C4  C033  F08F         	movff	?___ftmul+2,_calculatePID$3367+2
  3030                           
  3031                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3032  0004C8  C0B3  F034         	movff	_loopTime,___ftmul@f2
  3033  0004CC  C0B4  F035         	movff	_loopTime+1,___ftmul@f2+1
  3034  0004D0  C0B5  F036         	movff	_loopTime+2,___ftmul@f2+2
  3035  0004D4  C08D  F031         	movff	_calculatePID$3367,___ftmul@f1
  3036  0004D8  C08E  F032         	movff	_calculatePID$3367+1,___ftmul@f1+1
  3037  0004DC  C08F  F033         	movff	_calculatePID$3367+2,___ftmul@f1+2
  3038  0004E0  ECA9  F004         	call	___ftmul	;wreg free
  3039  0004E4  C031  F06C         	movff	?___ftmul,___ftadd@f2
  3040  0004E8  C032  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  3041  0004EC  C033  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  3042  0004F0  C0A2  F034         	movff	_error,___ftmul@f2
  3043  0004F4  C0A3  F035         	movff	_error+1,___ftmul@f2+1
  3044  0004F8  C0A4  F036         	movff	_error+2,___ftmul@f2+2
  3045  0004FC  C09F  F031         	movff	_Kp,___ftmul@f1
  3046  000500  C0A0  F032         	movff	_Kp+1,___ftmul@f1+1
  3047  000504  C0A1  F033         	movff	_Kp+2,___ftmul@f1+2
  3048  000508  ECA9  F004         	call	___ftmul	;wreg free
  3049  00050C  C031  F069         	movff	?___ftmul,___ftadd@f1
  3050  000510  C032  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  3051  000514  C033  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  3052  000518  ECD1  F002         	call	___ftadd	;wreg free
  3053  00051C  C069  F090         	movff	?___ftadd,_calculatePID$3368
  3054  000520  C06A  F091         	movff	?___ftadd+1,_calculatePID$3368+1
  3055  000524  C06B  F092         	movff	?___ftadd+2,_calculatePID$3368+2
  3056                           
  3057                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3058  000528  C099  F034         	movff	_Kd,___ftmul@f2
  3059  00052C  C09A  F035         	movff	_Kd+1,___ftmul@f2+1
  3060  000530  C09B  F036         	movff	_Kd+2,___ftmul@f2+2
  3061  000534  C0B3  F025         	movff	_loopTime,___ftdiv@f2
  3062  000538  C0B4  F026         	movff	_loopTime+1,___ftdiv@f2+1
  3063  00053C  C0B5  F027         	movff	_loopTime+2,___ftdiv@f2+2
  3064  000540  C08A  F022         	movff	calculatePID@derErr,___ftdiv@f1
  3065  000544  C08B  F023         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  3066  000548  C08C  F024         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  3067  00054C  EC41  F005         	call	___ftdiv	;wreg free
  3068  000550  C022  F031         	movff	?___ftdiv,___ftmul@f1
  3069  000554  C023  F032         	movff	?___ftdiv+1,___ftmul@f1+1
  3070  000558  C024  F033         	movff	?___ftdiv+2,___ftmul@f1+2
  3071  00055C  ECA9  F004         	call	___ftmul	;wreg free
  3072  000560  C031  F06C         	movff	?___ftmul,___ftadd@f2
  3073  000564  C032  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  3074  000568  C033  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  3075  00056C  C090  F069         	movff	_calculatePID$3368,___ftadd@f1
  3076  000570  C091  F06A         	movff	_calculatePID$3368+1,___ftadd@f1+1
  3077  000574  C092  F06B         	movff	_calculatePID$3368+2,___ftadd@f1+2
  3078  000578  ECD1  F002         	call	___ftadd	;wreg free
  3079  00057C  C069  F075         	movff	?___ftadd,___fttol@f1
  3080  000580  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  3081  000584  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  3082  000588  EC10  F004         	call	___fttol	;wreg free
  3083  00058C  C075  F0AB         	movff	?___fttol,_motorInput
  3084  000590  C076  F0AC         	movff	?___fttol+1,_motorInput+1
  3085                           
  3086                           ;PID.c: 54: prevErr = error;
  3087  000594  C0A2  F0A8         	movff	_error,_prevErr
  3088  000598  C0A3  F0A9         	movff	_error+1,_prevErr+1
  3089  00059C  C0A4  F0AA         	movff	_error+2,_prevErr+2
  3090  0005A0  0012               	return		;funcret
  3091  0005A2                     __end_of_calculatePID:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           intcon	equ	0xFF2
  3100                           intcon2	equ	0xFF1
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           indf2	equ	0xFDF
  3104                           fsr2h	equ	0xFDA
  3105                           fsr2l	equ	0xFD9
  3106                           status	equ	0xFD8
  3107                           
  3108 ;; *************** function ___fttol *****************
  3109 ;; Defined at:
  3110 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  f1              3   21[BANK0 ] float 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  lval            4   31[BANK0 ] unsigned long 
  3115 ;;  exp1            1   35[BANK0 ] unsigned char 
  3116 ;;  sign1           1   30[BANK0 ] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  4   21[BANK0 ] long 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3126 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;Total ram usage:       15 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    4
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_calculatePID
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text19
  3141  000820                     __ptext19:
  3142                           	opt stack 0
  3143  000820                     ___fttol:
  3144                           	opt stack 25
  3145                           
  3146                           ;incstack = 0
  3147  000820  C077  F079         	movff	___fttol@f1+2,??___fttol
  3148  000824  0100               	movlb	0	; () banked
  3149  000826  6B7A               	clrf	(??___fttol+1)& (0+255),b
  3150  000828  6B7B               	clrf	(??___fttol+2)& (0+255),b
  3151  00082A  0100               	movlb	0	; () banked
  3152  00082C  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3153  00082E  0100               	movlb	0	; () banked
  3154  000830  3779               	rlcf	??___fttol& (0+255),f,b
  3155  000832  E301               	bnc	u3081
  3156  000834  817A               	bsf	(??___fttol+1)& (0+255),0,b
  3157  000836                     u3081:
  3158  000836  0100               	movlb	0	; () banked
  3159  000838  5179               	movf	??___fttol& (0+255),w,b
  3160  00083A  0100               	movlb	0	; () banked
  3161  00083C  6F83               	movwf	___fttol@exp1& (0+255),b
  3162  00083E  0100               	movlb	0	; () banked
  3163  000840  5183               	movf	___fttol@exp1& (0+255),w,b
  3164  000842  A4D8               	btfss	status,2,c
  3165  000844  D002               	goto	l3531
  3166  000846  D051               	goto	l3555
  3167                           
  3168                           ; BSR set to: 0
  3169                           
  3170                           ; BSR set to: 0
  3171  000848  D083               	goto	l1036
  3172  00084A                     l3531:
  3173                           
  3174                           ; BSR set to: 0
  3175  00084A  0E17               	movlw	23
  3176  00084C  0100               	movlb	0	; () banked
  3177  00084E  6F79               	movwf	??___fttol& (0+255),b
  3178  000850  C075  F07A         	movff	___fttol@f1,??___fttol+1
  3179  000854  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  3180  000858  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  3181  00085C  0100               	movlb	0	; () banked
  3182  00085E  2979               	incf	??___fttol& (0+255),w,b
  3183  000860  0100               	movlb	0	; () banked
  3184  000862  6F7D               	movwf	(??___fttol+4)& (0+255),b
  3185  000864  D005               	goto	u3100
  3186  000866                     u3105:
  3187  000866  0100               	movlb	0	; () banked
  3188  000868  90D8               	bcf	status,0,c
  3189  00086A  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  3190  00086C  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  3191  00086E  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  3192  000870                     u3100:
  3193  000870  0100               	movlb	0	; () banked
  3194  000872  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  3195  000874  D7F8               	goto	u3105
  3196  000876  0100               	movlb	0	; () banked
  3197  000878  517A               	movf	(??___fttol+1)& (0+255),w,b
  3198  00087A  0100               	movlb	0	; () banked
  3199  00087C  6F7E               	movwf	___fttol@sign1& (0+255),b
  3200                           
  3201                           ; BSR set to: 0
  3202  00087E  0100               	movlb	0	; () banked
  3203  000880  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  3204                           
  3205                           ; BSR set to: 0
  3206  000882  0EFF               	movlw	255
  3207  000884  0100               	movlb	0	; () banked
  3208  000886  1775               	andwf	___fttol@f1& (0+255),f,b
  3209  000888  0EFF               	movlw	255
  3210  00088A  0100               	movlb	0	; () banked
  3211  00088C  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  3212  00088E  0E00               	movlw	0
  3213  000890  0100               	movlb	0	; () banked
  3214  000892  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  3215                           
  3216                           ; BSR set to: 0
  3217  000894  0100               	movlb	0	; () banked
  3218  000896  5175               	movf	___fttol@f1& (0+255),w,b
  3219  000898  0100               	movlb	0	; () banked
  3220  00089A  6F7F               	movwf	___fttol@lval& (0+255),b
  3221  00089C  0100               	movlb	0	; () banked
  3222  00089E  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  3223  0008A0  0100               	movlb	0	; () banked
  3224  0008A2  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  3225  0008A4  0100               	movlb	0	; () banked
  3226  0008A6  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  3227  0008A8  0100               	movlb	0	; () banked
  3228  0008AA  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  3229  0008AC  0100               	movlb	0	; () banked
  3230  0008AE  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  3231                           
  3232                           ; BSR set to: 0
  3233  0008B0  0E8E               	movlw	142
  3234  0008B2  0100               	movlb	0	; () banked
  3235  0008B4  5F83               	subwf	___fttol@exp1& (0+255),f,b
  3236                           
  3237                           ; BSR set to: 0
  3238  0008B6  0100               	movlb	0	; () banked
  3239  0008B8  AF83               	btfss	___fttol@exp1& (0+255),7,b
  3240  0008BA  D013               	goto	l3553
  3241                           
  3242                           ; BSR set to: 0
  3243  0008BC  0100               	movlb	0	; () banked
  3244  0008BE  5183               	movf	___fttol@exp1& (0+255),w,b
  3245  0008C0  0A80               	xorlw	128
  3246  0008C2  0F8F               	addlw	143
  3247  0008C4  B0D8               	btfsc	status,0,c
  3248  0008C6  D003               	goto	l3549
  3249  0008C8  D010               	goto	l3555
  3250                           
  3251                           ; BSR set to: 0
  3252                           
  3253                           ; BSR set to: 0
  3254  0008CA  D042               	goto	l1036
  3255                           
  3256                           ; BSR set to: 0
  3257  0008CC  D000               	goto	l3549
  3258  0008CE                     l3549:
  3259                           
  3260                           ; BSR set to: 0
  3261  0008CE  0100               	movlb	0	; () banked
  3262  0008D0  90D8               	bcf	status,0,c
  3263  0008D2  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3264  0008D4  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3265  0008D6  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3266  0008D8  337F               	rrcf	___fttol@lval& (0+255),f,b
  3267                           
  3268                           ; BSR set to: 0
  3269  0008DA  0100               	movlb	0	; () banked
  3270  0008DC  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  3271  0008DE  D7F7               	goto	l3549
  3272                           
  3273                           ; BSR set to: 0
  3274  0008E0  D01F               	goto	l3563
  3275  0008E2                     l3553:
  3276                           
  3277                           ; BSR set to: 0
  3278  0008E2  0E17               	movlw	23
  3279  0008E4  0100               	movlb	0	; () banked
  3280  0008E6  6583               	cpfsgt	___fttol@exp1& (0+255),b
  3281  0008E8  D014               	goto	l3561
  3282  0008EA                     l3555:
  3283                           
  3284                           ; BSR set to: 0
  3285  0008EA  0E00               	movlw	0
  3286  0008EC  0100               	movlb	0	; () banked
  3287  0008EE  6F75               	movwf	?___fttol& (0+255),b
  3288  0008F0  0E00               	movlw	0
  3289  0008F2  6F76               	movwf	(?___fttol+1)& (0+255),b
  3290  0008F4  0E00               	movlw	0
  3291  0008F6  6F77               	movwf	(?___fttol+2)& (0+255),b
  3292  0008F8  0E00               	movlw	0
  3293  0008FA  6F78               	movwf	(?___fttol+3)& (0+255),b
  3294                           
  3295                           ; BSR set to: 0
  3296  0008FC  D029               	goto	l1036
  3297                           
  3298                           ; BSR set to: 0
  3299  0008FE  D009               	goto	l3561
  3300  000900                     l3559:
  3301                           
  3302                           ; BSR set to: 0
  3303  000900  0100               	movlb	0	; () banked
  3304  000902  90D8               	bcf	status,0,c
  3305  000904  377F               	rlcf	___fttol@lval& (0+255),f,b
  3306  000906  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3307  000908  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3308  00090A  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3309  00090C  0100               	movlb	0	; () banked
  3310  00090E  0783               	decf	___fttol@exp1& (0+255),f,b
  3311  000910  D000               	goto	l3561
  3312  000912                     l3561:
  3313                           
  3314                           ; BSR set to: 0
  3315  000912  0100               	movlb	0	; () banked
  3316  000914  5183               	movf	___fttol@exp1& (0+255),w,b
  3317  000916  0100               	movlb	0	; () banked
  3318  000918  B4D8               	btfsc	status,2,c
  3319  00091A  D002               	goto	l3563
  3320  00091C  D7F1               	goto	l3559
  3321                           
  3322                           ; BSR set to: 0
  3323  00091E  D000               	goto	l3563
  3324  000920                     l3563:
  3325                           
  3326                           ; BSR set to: 0
  3327  000920  0100               	movlb	0	; () banked
  3328  000922  517E               	movf	___fttol@sign1& (0+255),w,b
  3329  000924  0100               	movlb	0	; () banked
  3330  000926  B4D8               	btfsc	status,2,c
  3331  000928  D00A               	goto	l3567
  3332                           
  3333                           ; BSR set to: 0
  3334  00092A  0100               	movlb	0	; () banked
  3335  00092C  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  3336  00092E  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  3337  000930  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  3338  000932  6D7F               	negf	___fttol@lval& (0+255),b
  3339  000934  0E00               	movlw	0
  3340  000936  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3341  000938  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3342  00093A  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3343  00093C  D000               	goto	l3567
  3344  00093E                     l3567:
  3345                           
  3346                           ; BSR set to: 0
  3347  00093E  C07F  F075         	movff	___fttol@lval,?___fttol
  3348  000942  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  3349  000946  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  3350  00094A  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  3351  00094E  D000               	goto	l1036
  3352  000950                     l1036:
  3353                           
  3354                           ; BSR set to: 0
  3355  000950  0012               	return		;funcret
  3356  000952                     __end_of___fttol:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon2	equ	0xFF1
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           indf2	equ	0xFDF
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function ___ftsub *****************
  3374 ;; Defined at:
  3375 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  f1              3   21[BANK0 ] float 
  3378 ;;  f2              3   24[BANK0 ] float 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  3   21[BANK0 ] float 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        6 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    6
  3397 ;; This function calls:
  3398 ;;		___ftadd
  3399 ;; This function is called by:
  3400 ;;		_calculatePID
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text20
  3405  001226                     __ptext20:
  3406                           	opt stack 0
  3407  001226                     ___ftsub:
  3408                           	opt stack 23
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;incstack = 0
  3412  001226  0100               	movlb	0	; () banked
  3413  001228  5178               	movf	___ftsub@f2& (0+255),w,b
  3414  00122A  0100               	movlb	0	; () banked
  3415  00122C  1179               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  3416  00122E  0100               	movlb	0	; () banked
  3417  001230  117A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  3418  001232  B4D8               	btfsc	status,2,c
  3419  001234  D00A               	goto	l3499
  3420                           
  3421                           ; BSR set to: 0
  3422  001236  0E00               	movlw	0
  3423  001238  0100               	movlb	0	; () banked
  3424  00123A  1B78               	xorwf	___ftsub@f2& (0+255),f,b
  3425  00123C  0E00               	movlw	0
  3426  00123E  0100               	movlb	0	; () banked
  3427  001240  1B79               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  3428  001242  0E80               	movlw	128
  3429  001244  0100               	movlb	0	; () banked
  3430  001246  1B7A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  3431  001248  D000               	goto	l3499
  3432  00124A                     l3499:
  3433                           
  3434                           ; BSR set to: 0
  3435  00124A  C075  F069         	movff	___ftsub@f1,___ftadd@f1
  3436  00124E  C076  F06A         	movff	___ftsub@f1+1,___ftadd@f1+1
  3437  001252  C077  F06B         	movff	___ftsub@f1+2,___ftadd@f1+2
  3438  001256  C078  F06C         	movff	___ftsub@f2,___ftadd@f2
  3439  00125A  C079  F06D         	movff	___ftsub@f2+1,___ftadd@f2+1
  3440  00125E  C07A  F06E         	movff	___ftsub@f2+2,___ftadd@f2+2
  3441  001262  ECD1  F002         	call	___ftadd	;wreg free
  3442  001266  C069  F075         	movff	?___ftadd,?___ftsub
  3443  00126A  C06A  F076         	movff	?___ftadd+1,?___ftsub+1
  3444  00126E  C06B  F077         	movff	?___ftadd+2,?___ftsub+2
  3445  001272  D000               	goto	l1032
  3446  001274                     l1032:
  3447  001274  0012               	return		;funcret
  3448  001276                     __end_of___ftsub:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           intcon	equ	0xFF2
  3457                           intcon2	equ	0xFF1
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf2	equ	0xFDF
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function ___ftadd *****************
  3466 ;; Defined at:
  3467 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  f1              3    9[BANK0 ] float 
  3470 ;;  f2              3   12[BANK0 ] float 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  exp1            1   20[BANK0 ] unsigned char 
  3473 ;;  exp2            1   19[BANK0 ] unsigned char 
  3474 ;;  sign            1   18[BANK0 ] unsigned char 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  3    9[BANK0 ] float 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3484 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;Total ram usage:       12 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    5
  3491 ;; This function calls:
  3492 ;;		___ftpack
  3493 ;; This function is called by:
  3494 ;;		_calculatePID
  3495 ;;		___ftsub
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text21
  3500  0005A2                     __ptext21:
  3501                           	opt stack 0
  3502  0005A2                     ___ftadd:
  3503                           	opt stack 23
  3504                           
  3505                           ;incstack = 0
  3506  0005A2  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
  3507  0005A6  0100               	movlb	0	; () banked
  3508  0005A8  6B70               	clrf	(??___ftadd+1)& (0+255),b
  3509  0005AA  6B71               	clrf	(??___ftadd+2)& (0+255),b
  3510  0005AC  0100               	movlb	0	; () banked
  3511  0005AE  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3512  0005B0  0100               	movlb	0	; () banked
  3513  0005B2  376F               	rlcf	??___ftadd& (0+255),f,b
  3514  0005B4  E301               	bnc	u2661
  3515  0005B6  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  3516  0005B8                     u2661:
  3517  0005B8  0100               	movlb	0	; () banked
  3518  0005BA  516F               	movf	??___ftadd& (0+255),w,b
  3519  0005BC  0100               	movlb	0	; () banked
  3520  0005BE  6F74               	movwf	___ftadd@exp1& (0+255),b
  3521  0005C0  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
  3522  0005C4  0100               	movlb	0	; () banked
  3523  0005C6  6B70               	clrf	(??___ftadd+1)& (0+255),b
  3524  0005C8  6B71               	clrf	(??___ftadd+2)& (0+255),b
  3525  0005CA  0100               	movlb	0	; () banked
  3526  0005CC  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3527  0005CE  0100               	movlb	0	; () banked
  3528  0005D0  376F               	rlcf	??___ftadd& (0+255),f,b
  3529  0005D2  E301               	bnc	u2671
  3530  0005D4  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  3531  0005D6                     u2671:
  3532  0005D6  0100               	movlb	0	; () banked
  3533  0005D8  516F               	movf	??___ftadd& (0+255),w,b
  3534  0005DA  0100               	movlb	0	; () banked
  3535  0005DC  6F73               	movwf	___ftadd@exp2& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538  0005DE  0100               	movlb	0	; () banked
  3539  0005E0  5174               	movf	___ftadd@exp1& (0+255),w,b
  3540  0005E2  0100               	movlb	0	; () banked
  3541  0005E4  B4D8               	btfsc	status,2,c
  3542  0005E6  D011               	goto	l968
  3543                           
  3544                           ; BSR set to: 0
  3545  0005E8  0100               	movlb	0	; () banked
  3546  0005EA  5173               	movf	___ftadd@exp2& (0+255),w,b
  3547  0005EC  0100               	movlb	0	; () banked
  3548  0005EE  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  3549  0005F0  B0D8               	btfsc	status,0,c
  3550  0005F2  D012               	goto	l3257
  3551                           
  3552                           ; BSR set to: 0
  3553  0005F4  0100               	movlb	0	; () banked
  3554  0005F6  5174               	movf	___ftadd@exp1& (0+255),w,b
  3555  0005F8  0800               	sublw	0
  3556  0005FA  0100               	movlb	0	; () banked
  3557  0005FC  2573               	addwf	___ftadd@exp2& (0+255),w,b
  3558  0005FE  0100               	movlb	0	; () banked
  3559  000600  6F6F               	movwf	??___ftadd& (0+255),b
  3560  000602  0E18               	movlw	24
  3561  000604  0100               	movlb	0	; () banked
  3562  000606  656F               	cpfsgt	??___ftadd& (0+255),b
  3563  000608  D007               	goto	l3257
  3564  00060A                     l968:
  3565                           
  3566                           ; BSR set to: 0
  3567  00060A  C06C  F069         	movff	___ftadd@f2,?___ftadd
  3568  00060E  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
  3569  000612  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
  3570  000616  D103               	goto	l969
  3571  000618                     l3257:
  3572                           
  3573                           ; BSR set to: 0
  3574  000618  0100               	movlb	0	; () banked
  3575  00061A  5173               	movf	___ftadd@exp2& (0+255),w,b
  3576  00061C  0100               	movlb	0	; () banked
  3577  00061E  B4D8               	btfsc	status,2,c
  3578  000620  D011               	goto	l972
  3579                           
  3580                           ; BSR set to: 0
  3581  000622  0100               	movlb	0	; () banked
  3582  000624  5174               	movf	___ftadd@exp1& (0+255),w,b
  3583  000626  0100               	movlb	0	; () banked
  3584  000628  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  3585  00062A  B0D8               	btfsc	status,0,c
  3586  00062C  D012               	goto	l3263
  3587                           
  3588                           ; BSR set to: 0
  3589  00062E  0100               	movlb	0	; () banked
  3590  000630  5173               	movf	___ftadd@exp2& (0+255),w,b
  3591  000632  0800               	sublw	0
  3592  000634  0100               	movlb	0	; () banked
  3593  000636  2574               	addwf	___ftadd@exp1& (0+255),w,b
  3594  000638  0100               	movlb	0	; () banked
  3595  00063A  6F6F               	movwf	??___ftadd& (0+255),b
  3596  00063C  0E18               	movlw	24
  3597  00063E  0100               	movlb	0	; () banked
  3598  000640  656F               	cpfsgt	??___ftadd& (0+255),b
  3599  000642  D007               	goto	l3263
  3600  000644                     l972:
  3601                           
  3602                           ; BSR set to: 0
  3603  000644  C069  F069         	movff	___ftadd@f1,?___ftadd
  3604  000648  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
  3605  00064C  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
  3606  000650  D0E6               	goto	l969
  3607  000652                     l3263:
  3608                           
  3609                           ; BSR set to: 0
  3610  000652  0E06               	movlw	6
  3611  000654  0100               	movlb	0	; () banked
  3612  000656  6F72               	movwf	___ftadd@sign& (0+255),b
  3613                           
  3614                           ; BSR set to: 0
  3615  000658  0100               	movlb	0	; () banked
  3616  00065A  AF6B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3617  00065C  D003               	goto	l3269
  3618                           
  3619                           ; BSR set to: 0
  3620  00065E  0100               	movlb	0	; () banked
  3621  000660  8F72               	bsf	___ftadd@sign& (0+255),7,b
  3622  000662  D000               	goto	l3269
  3623  000664                     l3269:
  3624                           
  3625                           ; BSR set to: 0
  3626  000664  0100               	movlb	0	; () banked
  3627  000666  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3628  000668  D002               	goto	l974
  3629                           
  3630                           ; BSR set to: 0
  3631  00066A  0100               	movlb	0	; () banked
  3632  00066C  8D72               	bsf	___ftadd@sign& (0+255),6,b
  3633  00066E                     l974:
  3634                           
  3635                           ; BSR set to: 0
  3636  00066E  0100               	movlb	0	; () banked
  3637  000670  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3638                           
  3639                           ; BSR set to: 0
  3640  000672  0EFF               	movlw	255
  3641  000674  0100               	movlb	0	; () banked
  3642  000676  1769               	andwf	___ftadd@f1& (0+255),f,b
  3643  000678  0EFF               	movlw	255
  3644  00067A  0100               	movlb	0	; () banked
  3645  00067C  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3646  00067E  0E00               	movlw	0
  3647  000680  0100               	movlb	0	; () banked
  3648  000682  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3649  000684  0100               	movlb	0	; () banked
  3650  000686  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3651                           
  3652                           ; BSR set to: 0
  3653  000688  0EFF               	movlw	255
  3654  00068A  0100               	movlb	0	; () banked
  3655  00068C  176C               	andwf	___ftadd@f2& (0+255),f,b
  3656  00068E  0EFF               	movlw	255
  3657  000690  0100               	movlb	0	; () banked
  3658  000692  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3659  000694  0E00               	movlw	0
  3660  000696  0100               	movlb	0	; () banked
  3661  000698  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3662                           
  3663                           ; BSR set to: 0
  3664  00069A  0100               	movlb	0	; () banked
  3665  00069C  5173               	movf	___ftadd@exp2& (0+255),w,b
  3666  00069E  0100               	movlb	0	; () banked
  3667  0006A0  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  3668  0006A2  B0D8               	btfsc	status,0,c
  3669  0006A4  D028               	goto	l3289
  3670  0006A6                     l3279:
  3671                           
  3672                           ; BSR set to: 0
  3673  0006A6  0100               	movlb	0	; () banked
  3674  0006A8  90D8               	bcf	status,0,c
  3675  0006AA  376C               	rlcf	___ftadd@f2& (0+255),f,b
  3676  0006AC  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3677  0006AE  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3678  0006B0  0100               	movlb	0	; () banked
  3679  0006B2  0773               	decf	___ftadd@exp2& (0+255),f,b
  3680                           
  3681                           ; BSR set to: 0
  3682  0006B4  0100               	movlb	0	; () banked
  3683  0006B6  5174               	movf	___ftadd@exp1& (0+255),w,b
  3684  0006B8  0100               	movlb	0	; () banked
  3685  0006BA  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  3686  0006BC  B4D8               	btfsc	status,2,c
  3687  0006BE  D013               	goto	l3287
  3688                           
  3689                           ; BSR set to: 0
  3690  0006C0  0100               	movlb	0	; () banked
  3691  0006C2  0772               	decf	___ftadd@sign& (0+255),f,b
  3692  0006C4  C072  F06F         	movff	___ftadd@sign,??___ftadd
  3693  0006C8  0E07               	movlw	7
  3694  0006CA  0100               	movlb	0	; () banked
  3695  0006CC  176F               	andwf	??___ftadd& (0+255),f,b
  3696  0006CE  B4D8               	btfsc	status,2,c
  3697  0006D0  D00A               	goto	l3287
  3698  0006D2  D7E9               	goto	l3279
  3699                           
  3700                           ; BSR set to: 0
  3701                           
  3702                           ; BSR set to: 0
  3703  0006D4  D008               	goto	l3287
  3704  0006D6                     l3285:
  3705                           
  3706                           ; BSR set to: 0
  3707  0006D6  0100               	movlb	0	; () banked
  3708  0006D8  90D8               	bcf	status,0,c
  3709  0006DA  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3710  0006DC  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3711  0006DE  3369               	rrcf	___ftadd@f1& (0+255),f,b
  3712  0006E0  0100               	movlb	0	; () banked
  3713  0006E2  2B74               	incf	___ftadd@exp1& (0+255),f,b
  3714  0006E4  D000               	goto	l3287
  3715  0006E6                     l3287:
  3716                           
  3717                           ; BSR set to: 0
  3718  0006E6  0100               	movlb	0	; () banked
  3719  0006E8  5173               	movf	___ftadd@exp2& (0+255),w,b
  3720  0006EA  0100               	movlb	0	; () banked
  3721  0006EC  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  3722  0006EE  B4D8               	btfsc	status,2,c
  3723  0006F0  D030               	goto	l983
  3724  0006F2  D7F1               	goto	l3285
  3725                           
  3726                           ; BSR set to: 0
  3727  0006F4  D02E               	goto	l983
  3728  0006F6                     l3289:
  3729                           
  3730                           ; BSR set to: 0
  3731  0006F6  0100               	movlb	0	; () banked
  3732  0006F8  5174               	movf	___ftadd@exp1& (0+255),w,b
  3733  0006FA  0100               	movlb	0	; () banked
  3734  0006FC  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  3735  0006FE  B0D8               	btfsc	status,0,c
  3736  000700  D028               	goto	l983
  3737  000702                     l3291:
  3738                           
  3739                           ; BSR set to: 0
  3740  000702  0100               	movlb	0	; () banked
  3741  000704  90D8               	bcf	status,0,c
  3742  000706  3769               	rlcf	___ftadd@f1& (0+255),f,b
  3743  000708  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3744  00070A  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3745  00070C  0100               	movlb	0	; () banked
  3746  00070E  0774               	decf	___ftadd@exp1& (0+255),f,b
  3747                           
  3748                           ; BSR set to: 0
  3749  000710  0100               	movlb	0	; () banked
  3750  000712  5174               	movf	___ftadd@exp1& (0+255),w,b
  3751  000714  0100               	movlb	0	; () banked
  3752  000716  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  3753  000718  B4D8               	btfsc	status,2,c
  3754  00071A  D013               	goto	l3299
  3755                           
  3756                           ; BSR set to: 0
  3757  00071C  0100               	movlb	0	; () banked
  3758  00071E  0772               	decf	___ftadd@sign& (0+255),f,b
  3759  000720  C072  F06F         	movff	___ftadd@sign,??___ftadd
  3760  000724  0E07               	movlw	7
  3761  000726  0100               	movlb	0	; () banked
  3762  000728  176F               	andwf	??___ftadd& (0+255),f,b
  3763  00072A  B4D8               	btfsc	status,2,c
  3764  00072C  D00A               	goto	l3299
  3765  00072E  D7E9               	goto	l3291
  3766                           
  3767                           ; BSR set to: 0
  3768                           
  3769                           ; BSR set to: 0
  3770  000730  D008               	goto	l3299
  3771  000732                     l3297:
  3772                           
  3773                           ; BSR set to: 0
  3774  000732  0100               	movlb	0	; () banked
  3775  000734  90D8               	bcf	status,0,c
  3776  000736  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3777  000738  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3778  00073A  336C               	rrcf	___ftadd@f2& (0+255),f,b
  3779  00073C  0100               	movlb	0	; () banked
  3780  00073E  2B73               	incf	___ftadd@exp2& (0+255),f,b
  3781  000740  D000               	goto	l3299
  3782  000742                     l3299:
  3783                           
  3784                           ; BSR set to: 0
  3785  000742  0100               	movlb	0	; () banked
  3786  000744  5173               	movf	___ftadd@exp2& (0+255),w,b
  3787  000746  0100               	movlb	0	; () banked
  3788  000748  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  3789  00074A  B4D8               	btfsc	status,2,c
  3790  00074C  D002               	goto	l983
  3791  00074E  D7F1               	goto	l3297
  3792                           
  3793                           ; BSR set to: 0
  3794  000750  D000               	goto	l983
  3795  000752                     l983:
  3796                           
  3797                           ; BSR set to: 0
  3798  000752  0100               	movlb	0	; () banked
  3799  000754  AF72               	btfss	___ftadd@sign& (0+255),7,b
  3800  000756  D012               	goto	l992
  3801                           
  3802                           ; BSR set to: 0
  3803  000758  0EFF               	movlw	255
  3804  00075A  0100               	movlb	0	; () banked
  3805  00075C  1B69               	xorwf	___ftadd@f1& (0+255),f,b
  3806  00075E  0EFF               	movlw	255
  3807  000760  0100               	movlb	0	; () banked
  3808  000762  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3809  000764  0EFF               	movlw	255
  3810  000766  0100               	movlb	0	; () banked
  3811  000768  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3812  00076A  0E01               	movlw	1
  3813  00076C  0100               	movlb	0	; () banked
  3814  00076E  2769               	addwf	___ftadd@f1& (0+255),f,b
  3815  000770  0E00               	movlw	0
  3816  000772  0100               	movlb	0	; () banked
  3817  000774  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3818  000776  0E00               	movlw	0
  3819  000778  0100               	movlb	0	; () banked
  3820  00077A  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3821  00077C                     l992:
  3822                           
  3823                           ; BSR set to: 0
  3824  00077C  0100               	movlb	0	; () banked
  3825  00077E  AD72               	btfss	___ftadd@sign& (0+255),6,b
  3826  000780  D013               	goto	l3305
  3827                           
  3828                           ; BSR set to: 0
  3829  000782  0EFF               	movlw	255
  3830  000784  0100               	movlb	0	; () banked
  3831  000786  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3832  000788  0EFF               	movlw	255
  3833  00078A  0100               	movlb	0	; () banked
  3834  00078C  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3835  00078E  0EFF               	movlw	255
  3836  000790  0100               	movlb	0	; () banked
  3837  000792  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3838  000794  0E01               	movlw	1
  3839  000796  0100               	movlb	0	; () banked
  3840  000798  276C               	addwf	___ftadd@f2& (0+255),f,b
  3841  00079A  0E00               	movlw	0
  3842  00079C  0100               	movlb	0	; () banked
  3843  00079E  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3844  0007A0  0E00               	movlw	0
  3845  0007A2  0100               	movlb	0	; () banked
  3846  0007A4  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3847  0007A6  D000               	goto	l3305
  3848  0007A8                     l3305:
  3849                           
  3850                           ; BSR set to: 0
  3851  0007A8  0E00               	movlw	0
  3852  0007AA  0100               	movlb	0	; () banked
  3853  0007AC  6F72               	movwf	___ftadd@sign& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856  0007AE  0100               	movlb	0	; () banked
  3857  0007B0  5169               	movf	___ftadd@f1& (0+255),w,b
  3858  0007B2  0100               	movlb	0	; () banked
  3859  0007B4  276C               	addwf	___ftadd@f2& (0+255),f,b
  3860  0007B6  0100               	movlb	0	; () banked
  3861  0007B8  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
  3862  0007BA  0100               	movlb	0	; () banked
  3863  0007BC  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3864  0007BE  0100               	movlb	0	; () banked
  3865  0007C0  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
  3866  0007C2  0100               	movlb	0	; () banked
  3867  0007C4  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3868                           
  3869                           ; BSR set to: 0
  3870  0007C6  0100               	movlb	0	; () banked
  3871  0007C8  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3872  0007CA  D016               	goto	l3315
  3873                           
  3874                           ; BSR set to: 0
  3875  0007CC  0EFF               	movlw	255
  3876  0007CE  0100               	movlb	0	; () banked
  3877  0007D0  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3878  0007D2  0EFF               	movlw	255
  3879  0007D4  0100               	movlb	0	; () banked
  3880  0007D6  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3881  0007D8  0EFF               	movlw	255
  3882  0007DA  0100               	movlb	0	; () banked
  3883  0007DC  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3884  0007DE  0E01               	movlw	1
  3885  0007E0  0100               	movlb	0	; () banked
  3886  0007E2  276C               	addwf	___ftadd@f2& (0+255),f,b
  3887  0007E4  0E00               	movlw	0
  3888  0007E6  0100               	movlb	0	; () banked
  3889  0007E8  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3890  0007EA  0E00               	movlw	0
  3891  0007EC  0100               	movlb	0	; () banked
  3892  0007EE  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3893                           
  3894                           ; BSR set to: 0
  3895  0007F0  0E01               	movlw	1
  3896  0007F2  0100               	movlb	0	; () banked
  3897  0007F4  6F72               	movwf	___ftadd@sign& (0+255),b
  3898  0007F6  D000               	goto	l3315
  3899  0007F8                     l3315:
  3900                           
  3901                           ; BSR set to: 0
  3902  0007F8  C06C  F01A         	movff	___ftadd@f2,___ftpack@arg
  3903  0007FC  C06D  F01B         	movff	___ftadd@f2+1,___ftpack@arg+1
  3904  000800  C06E  F01C         	movff	___ftadd@f2+2,___ftpack@arg+2
  3905  000804  C074  F01D         	movff	___ftadd@exp1,___ftpack@exp
  3906  000808  C072  F01E         	movff	___ftadd@sign,___ftpack@sign
  3907  00080C  EC18  F006         	call	___ftpack	;wreg free
  3908  000810  C01A  F069         	movff	?___ftpack,?___ftadd
  3909  000814  C01B  F06A         	movff	?___ftpack+1,?___ftadd+1
  3910  000818  C01C  F06B         	movff	?___ftpack+2,?___ftadd+2
  3911  00081C  D000               	goto	l969
  3912  00081E                     l969:
  3913  00081E  0012               	return		;funcret
  3914  000820                     __end_of___ftadd:
  3915                           	opt stack 0
  3916                           tblptru	equ	0xFF8
  3917                           tblptrh	equ	0xFF7
  3918                           tblptrl	equ	0xFF6
  3919                           tablat	equ	0xFF5
  3920                           prodh	equ	0xFF4
  3921                           prodl	equ	0xFF3
  3922                           intcon	equ	0xFF2
  3923                           intcon2	equ	0xFF1
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           indf2	equ	0xFDF
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function ___ftneg *****************
  3932 ;; Defined at:
  3933 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  f1              3   25[COMRAM] float 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  3   25[COMRAM] float 
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3947 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;Total ram usage:        3 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    4
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_calculatePID
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text22
  3962  001556                     __ptext22:
  3963                           	opt stack 0
  3964  001556                     ___ftneg:
  3965                           	opt stack 25
  3966                           
  3967                           ;incstack = 0
  3968  001556  501A               	movf	___ftneg@f1,w,c
  3969  001558  101B               	iorwf	___ftneg@f1+1,w,c
  3970  00155A  101C               	iorwf	___ftneg@f1+2,w,c
  3971  00155C  B4D8               	btfsc	status,2,c
  3972  00155E  D006               	goto	l1025
  3973  001560  0E00               	movlw	0
  3974  001562  1A1A               	xorwf	___ftneg@f1,f,c
  3975  001564  0E00               	movlw	0
  3976  001566  1A1B               	xorwf	___ftneg@f1+1,f,c
  3977  001568  0E80               	movlw	128
  3978  00156A  1A1C               	xorwf	___ftneg@f1+2,f,c
  3979  00156C                     l1025:
  3980  00156C  C01A  F01A         	movff	___ftneg@f1,?___ftneg
  3981  001570  C01B  F01B         	movff	___ftneg@f1+1,?___ftneg+1
  3982  001574  C01C  F01C         	movff	___ftneg@f1+2,?___ftneg+2
  3983  001578  0012               	return		;funcret
  3984  00157A                     __end_of___ftneg:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           intcon	equ	0xFF2
  3993                           intcon2	equ	0xFF1
  3994                           postinc0	equ	0xFEE
  3995                           wreg	equ	0xFE8
  3996                           indf2	equ	0xFDF
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function ___ftge *****************
  4002 ;; Defined at:
  4003 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  ff1             3   25[COMRAM] float 
  4006 ;;  ff2             3   28[COMRAM] float 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;		None
  4009 ;; Return value:  Size  Location     Type
  4010 ;;		None               void
  4011 ;; Registers used:
  4012 ;;		wreg, status,2, status,0
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4018 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;Total ram usage:        9 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    4
  4025 ;; This function calls:
  4026 ;;		Nothing
  4027 ;; This function is called by:
  4028 ;;		_calculatePID
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text23
  4033  000E64                     __ptext23:
  4034                           	opt stack 0
  4035  000E64                     ___ftge:
  4036                           	opt stack 25
  4037                           
  4038                           ;incstack = 0
  4039  000E64  AE1C               	btfss	___ftge@ff1+2,7,c
  4040  000E66  D017               	goto	l3507
  4041  000E68  C01A  F020         	movff	___ftge@ff1,??___ftge
  4042  000E6C  C01B  F021         	movff	___ftge@ff1+1,??___ftge+1
  4043  000E70  C01C  F022         	movff	___ftge@ff1+2,??___ftge+2
  4044  000E74  1E20               	comf	??___ftge,f,c
  4045  000E76  1E21               	comf	??___ftge+1,f,c
  4046  000E78  1E22               	comf	??___ftge+2,f,c
  4047  000E7A  2A20               	incf	??___ftge,f,c
  4048  000E7C  0E00               	movlw	0
  4049  000E7E  2221               	addwfc	??___ftge+1,f,c
  4050  000E80  2222               	addwfc	??___ftge+2,f,c
  4051  000E82  0E00               	movlw	0
  4052  000E84  2420               	addwf	??___ftge,w,c
  4053  000E86  6E1A               	movwf	___ftge@ff1,c
  4054  000E88  0E00               	movlw	0
  4055  000E8A  2021               	addwfc	??___ftge+1,w,c
  4056  000E8C  6E1B               	movwf	___ftge@ff1+1,c
  4057  000E8E  0E80               	movlw	128
  4058  000E90  2022               	addwfc	??___ftge+2,w,c
  4059  000E92  6E1C               	movwf	___ftge@ff1+2,c
  4060  000E94  D000               	goto	l3507
  4061  000E96                     l3507:
  4062  000E96  AE1F               	btfss	___ftge@ff2+2,7,c
  4063  000E98  D017               	goto	l3511
  4064  000E9A  C01D  F020         	movff	___ftge@ff2,??___ftge
  4065  000E9E  C01E  F021         	movff	___ftge@ff2+1,??___ftge+1
  4066  000EA2  C01F  F022         	movff	___ftge@ff2+2,??___ftge+2
  4067  000EA6  1E20               	comf	??___ftge,f,c
  4068  000EA8  1E21               	comf	??___ftge+1,f,c
  4069  000EAA  1E22               	comf	??___ftge+2,f,c
  4070  000EAC  2A20               	incf	??___ftge,f,c
  4071  000EAE  0E00               	movlw	0
  4072  000EB0  2221               	addwfc	??___ftge+1,f,c
  4073  000EB2  2222               	addwfc	??___ftge+2,f,c
  4074  000EB4  0E00               	movlw	0
  4075  000EB6  2420               	addwf	??___ftge,w,c
  4076  000EB8  6E1D               	movwf	___ftge@ff2,c
  4077  000EBA  0E00               	movlw	0
  4078  000EBC  2021               	addwfc	??___ftge+1,w,c
  4079  000EBE  6E1E               	movwf	___ftge@ff2+1,c
  4080  000EC0  0E80               	movlw	128
  4081  000EC2  2022               	addwfc	??___ftge+2,w,c
  4082  000EC4  6E1F               	movwf	___ftge@ff2+2,c
  4083  000EC6  D000               	goto	l3511
  4084  000EC8                     l3511:
  4085  000EC8  0E00               	movlw	0
  4086  000ECA  1A1A               	xorwf	___ftge@ff1,f,c
  4087  000ECC  0E00               	movlw	0
  4088  000ECE  1A1B               	xorwf	___ftge@ff1+1,f,c
  4089  000ED0  0E80               	movlw	128
  4090  000ED2  1A1C               	xorwf	___ftge@ff1+2,f,c
  4091  000ED4  0E00               	movlw	0
  4092  000ED6  1A1D               	xorwf	___ftge@ff2,f,c
  4093  000ED8  0E00               	movlw	0
  4094  000EDA  1A1E               	xorwf	___ftge@ff2+1,f,c
  4095  000EDC  0E80               	movlw	128
  4096  000EDE  1A1F               	xorwf	___ftge@ff2+2,f,c
  4097  000EE0  501D               	movf	___ftge@ff2,w,c
  4098  000EE2  5C1A               	subwf	___ftge@ff1,w,c
  4099  000EE4  501E               	movf	___ftge@ff2+1,w,c
  4100  000EE6  581B               	subwfb	___ftge@ff1+1,w,c
  4101  000EE8  501F               	movf	___ftge@ff2+2,w,c
  4102  000EEA  581C               	subwfb	___ftge@ff1+2,w,c
  4103  000EEC  B0D8               	btfsc	status,0,c
  4104  000EEE  D002               	goto	l3517
  4105  000EF0  90D8               	bcf	status,0,c
  4106  000EF2  D002               	goto	l1009
  4107  000EF4                     l3517:
  4108  000EF4  80D8               	bsf	status,0,c
  4109  000EF6  D000               	goto	l1009
  4110  000EF8                     l1009:
  4111  000EF8  0012               	return		;funcret
  4112  000EFA                     __end_of___ftge:
  4113                           	opt stack 0
  4114                           tblptru	equ	0xFF8
  4115                           tblptrh	equ	0xFF7
  4116                           tblptrl	equ	0xFF6
  4117                           tablat	equ	0xFF5
  4118                           prodh	equ	0xFF4
  4119                           prodl	equ	0xFF3
  4120                           intcon	equ	0xFF2
  4121                           intcon2	equ	0xFF1
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           indf2	equ	0xFDF
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function ___ftdiv *****************
  4130 ;; Defined at:
  4131 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  f1              3   33[COMRAM] float 
  4134 ;;  f2              3   36[COMRAM] float 
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;  f3              3   43[COMRAM] float 
  4137 ;;  sign            1   47[COMRAM] unsigned char 
  4138 ;;  exp             1   46[COMRAM] unsigned char 
  4139 ;;  cntr            1   42[COMRAM] unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  3   33[COMRAM] float 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4149 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;Total ram usage:       15 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    5
  4156 ;; This function calls:
  4157 ;;		___ftpack
  4158 ;; This function is called by:
  4159 ;;		_calculatePID
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text24
  4164  000A82                     __ptext24:
  4165                           	opt stack 0
  4166  000A82                     ___ftdiv:
  4167                           	opt stack 24
  4168                           
  4169                           ;incstack = 0
  4170  000A82  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  4171  000A86  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  4172  000A88  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  4173  000A8A  3423               	rlcf	___ftdiv@f1+1,w,c
  4174  000A8C  3628               	rlcf	??___ftdiv& (0+255),f,c
  4175  000A8E  E301               	bnc	u2921
  4176  000A90  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  4177  000A92                     u2921:
  4178  000A92  5028               	movf	??___ftdiv,w,c
  4179  000A94  6E2F               	movwf	___ftdiv@exp,c
  4180  000A96  502F               	movf	___ftdiv@exp,w,c
  4181  000A98  A4D8               	btfss	status,2,c
  4182  000A9A  D002               	goto	l3407
  4183  000A9C  D00E               	goto	l3409
  4184  000A9E  D061               	goto	l1000
  4185  000AA0                     l3407:
  4186  000AA0  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  4187  000AA4  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  4188  000AA6  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  4189  000AA8  3426               	rlcf	___ftdiv@f2+1,w,c
  4190  000AAA  3628               	rlcf	??___ftdiv& (0+255),f,c
  4191  000AAC  E301               	bnc	u2941
  4192  000AAE  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  4193  000AB0                     u2941:
  4194  000AB0  5028               	movf	??___ftdiv,w,c
  4195  000AB2  6E30               	movwf	___ftdiv@sign,c
  4196  000AB4  5030               	movf	___ftdiv@sign,w,c
  4197  000AB6  A4D8               	btfss	status,2,c
  4198  000AB8  D007               	goto	l3413
  4199  000ABA                     l3409:
  4200  000ABA  0E00               	movlw	0
  4201  000ABC  6E22               	movwf	?___ftdiv,c
  4202  000ABE  0E00               	movlw	0
  4203  000AC0  6E23               	movwf	?___ftdiv+1,c
  4204  000AC2  0E00               	movlw	0
  4205  000AC4  6E24               	movwf	?___ftdiv+2,c
  4206  000AC6  D04D               	goto	l1000
  4207  000AC8                     l3413:
  4208  000AC8  0E00               	movlw	0
  4209  000ACA  6E2C               	movwf	___ftdiv@f3,c
  4210  000ACC  0E00               	movlw	0
  4211  000ACE  6E2D               	movwf	___ftdiv@f3+1,c
  4212  000AD0  0E00               	movlw	0
  4213  000AD2  6E2E               	movwf	___ftdiv@f3+2,c
  4214  000AD4  5030               	movf	___ftdiv@sign,w,c
  4215  000AD6  0F89               	addlw	137
  4216  000AD8  5E2F               	subwf	___ftdiv@exp,f,c
  4217  000ADA  C024  F030         	movff	___ftdiv@f1+2,___ftdiv@sign
  4218  000ADE  5027               	movf	___ftdiv@f2+2,w,c
  4219  000AE0  1A30               	xorwf	___ftdiv@sign,f,c
  4220  000AE2  0E80               	movlw	128
  4221  000AE4  1630               	andwf	___ftdiv@sign,f,c
  4222  000AE6  8E23               	bsf	___ftdiv@f1+1,7,c
  4223  000AE8  0EFF               	movlw	255
  4224  000AEA  1622               	andwf	___ftdiv@f1,f,c
  4225  000AEC  0EFF               	movlw	255
  4226  000AEE  1623               	andwf	___ftdiv@f1+1,f,c
  4227  000AF0  0E00               	movlw	0
  4228  000AF2  1624               	andwf	___ftdiv@f1+2,f,c
  4229  000AF4  8E26               	bsf	___ftdiv@f2+1,7,c
  4230  000AF6  0EFF               	movlw	255
  4231  000AF8  1625               	andwf	___ftdiv@f2,f,c
  4232  000AFA  0EFF               	movlw	255
  4233  000AFC  1626               	andwf	___ftdiv@f2+1,f,c
  4234  000AFE  0E00               	movlw	0
  4235  000B00  1627               	andwf	___ftdiv@f2+2,f,c
  4236  000B02  0E18               	movlw	24
  4237  000B04  6E2B               	movwf	___ftdiv@cntr,c
  4238  000B06  D000               	goto	l3433
  4239  000B08                     l3433:
  4240  000B08  90D8               	bcf	status,0,c
  4241  000B0A  362C               	rlcf	___ftdiv@f3,f,c
  4242  000B0C  362D               	rlcf	___ftdiv@f3+1,f,c
  4243  000B0E  362E               	rlcf	___ftdiv@f3+2,f,c
  4244  000B10  5025               	movf	___ftdiv@f2,w,c
  4245  000B12  5C22               	subwf	___ftdiv@f1,w,c
  4246  000B14  5026               	movf	___ftdiv@f2+1,w,c
  4247  000B16  5823               	subwfb	___ftdiv@f1+1,w,c
  4248  000B18  5027               	movf	___ftdiv@f2+2,w,c
  4249  000B1A  5824               	subwfb	___ftdiv@f1+2,w,c
  4250  000B1C  A0D8               	btfss	status,0,c
  4251  000B1E  D007               	goto	l1003
  4252  000B20  5025               	movf	___ftdiv@f2,w,c
  4253  000B22  5E22               	subwf	___ftdiv@f1,f,c
  4254  000B24  5026               	movf	___ftdiv@f2+1,w,c
  4255  000B26  5A23               	subwfb	___ftdiv@f1+1,f,c
  4256  000B28  5027               	movf	___ftdiv@f2+2,w,c
  4257  000B2A  5A24               	subwfb	___ftdiv@f1+2,f,c
  4258  000B2C  802C               	bsf	___ftdiv@f3,0,c
  4259  000B2E                     l1003:
  4260  000B2E  90D8               	bcf	status,0,c
  4261  000B30  3622               	rlcf	___ftdiv@f1,f,c
  4262  000B32  3623               	rlcf	___ftdiv@f1+1,f,c
  4263  000B34  3624               	rlcf	___ftdiv@f1+2,f,c
  4264  000B36  2E2B               	decfsz	___ftdiv@cntr,f,c
  4265  000B38  D7E7               	goto	l3433
  4266  000B3A  D000               	goto	l3443
  4267  000B3C                     l3443:
  4268  000B3C  C02C  F01A         	movff	___ftdiv@f3,___ftpack@arg
  4269  000B40  C02D  F01B         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4270  000B44  C02E  F01C         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4271  000B48  C02F  F01D         	movff	___ftdiv@exp,___ftpack@exp
  4272  000B4C  C030  F01E         	movff	___ftdiv@sign,___ftpack@sign
  4273  000B50  EC18  F006         	call	___ftpack	;wreg free
  4274  000B54  C01A  F022         	movff	?___ftpack,?___ftdiv
  4275  000B58  C01B  F023         	movff	?___ftpack+1,?___ftdiv+1
  4276  000B5C  C01C  F024         	movff	?___ftpack+2,?___ftdiv+2
  4277  000B60  D000               	goto	l1000
  4278  000B62                     l1000:
  4279  000B62  0012               	return		;funcret
  4280  000B64                     __end_of___ftdiv:
  4281                           	opt stack 0
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           intcon2	equ	0xFF1
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           indf2	equ	0xFDF
  4293                           fsr2h	equ	0xFDA
  4294                           fsr2l	equ	0xFD9
  4295                           status	equ	0xFD8
  4296                           
  4297 ;; *************** function _SendSPI1 *****************
  4298 ;; Defined at:
  4299 ;;		line 35 in file "SPISlave.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  data            1    wreg     unsigned char 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  data            1   26[COMRAM] unsigned char 
  4304 ;;  temp            1   25[COMRAM] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;		None               void
  4307 ;; Registers used:
  4308 ;;		wreg
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;Total ram usage:        2 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    4
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_main
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text25
  4329  001636                     __ptext25:
  4330                           	opt stack 0
  4331  001636                     _SendSPI1:
  4332                           	opt stack 26
  4333                           
  4334                           ;incstack = 0
  4335                           ;SendSPI1@data stored from wreg
  4336  001636  6E1B               	movwf	SendSPI1@data,c
  4337                           
  4338                           ;SPISlave.c: 37: SSP1BUF = data;
  4339  001638  C01B  FFC9         	movff	SendSPI1@data,4041	;volatile
  4340                           
  4341                           ;SPISlave.c: 38: unsigned char temp;
  4342                           ;SPISlave.c: 39: PIR1bits.SSP1IF = 0;
  4343  00163C  969E               	bcf	3998,3,c	;volatile
  4344                           
  4345                           ;SPISlave.c: 40: temp = SSP1BUF;
  4346  00163E  CFC9 F01A          	movff	4041,SendSPI1@temp	;volatile
  4347                           
  4348                           ;SPISlave.c: 41: while (!PIR1bits.SSP1IF);
  4349  001642  D000               	goto	l250
  4350  001644                     l250:
  4351  001644  A69E               	btfss	3998,3,c	;volatile
  4352  001646  D7FE               	goto	l250
  4353                           
  4354                           ;SPISlave.c: 42: SSP1CON1bits.SSPOV1 = 0;
  4355  001648  9CC6               	bcf	4038,6,c	;volatile
  4356                           
  4357                           ;SPISlave.c: 43: PIR1bits.SSP1IF = 0;
  4358  00164A  969E               	bcf	3998,3,c	;volatile
  4359  00164C  0012               	return		;funcret
  4360  00164E                     __end_of_SendSPI1:
  4361                           	opt stack 0
  4362                           tblptru	equ	0xFF8
  4363                           tblptrh	equ	0xFF7
  4364                           tblptrl	equ	0xFF6
  4365                           tablat	equ	0xFF5
  4366                           prodh	equ	0xFF4
  4367                           prodl	equ	0xFF3
  4368                           intcon	equ	0xFF2
  4369                           intcon2	equ	0xFF1
  4370                           postinc0	equ	0xFEE
  4371                           wreg	equ	0xFE8
  4372                           indf2	equ	0xFDF
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _SPIReassembleDouble *****************
  4378 ;; Defined at:
  4379 ;;		line 70 in file "SPISlave.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  dub             3   28[COMRAM] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  3   25[COMRAM] unsigned char 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4393 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;Total ram usage:        6 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    4
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_main
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text26
  4408  001300                     __ptext26:
  4409                           	opt stack 0
  4410  001300                     _SPIReassembleDouble:
  4411                           	opt stack 26
  4412                           
  4413                           ;SPISlave.c: 72: double dub;
  4414                           ;SPISlave.c: 73: DoublePtr = (unsigned char*) &dub;
  4415                           
  4416                           ;incstack = 0
  4417  001300  0E1D               	movlw	low SPIReassembleDouble@dub
  4418  001302  6E43               	movwf	_DoublePtr,c
  4419  001304  0E00               	movlw	high SPIReassembleDouble@dub
  4420  001306  6E44               	movwf	_DoublePtr+1,c
  4421                           
  4422                           ;SPISlave.c: 74: DoublePtr[0] = DoubleSPIS[0];
  4423  001308  C043  FFD9         	movff	_DoublePtr,fsr2l
  4424  00130C  C044  FFDA         	movff	_DoublePtr+1,fsr2h
  4425  001310  C039  FFDF         	movff	_DoubleSPIS,indf2
  4426                           
  4427                           ;SPISlave.c: 75: DoublePtr[1] = DoubleSPIS[1];
  4428  001314  EE20 F001          	lfsr	2,1
  4429  001318  5043               	movf	_DoublePtr,w,c
  4430  00131A  26D9               	addwf	fsr2l,f,c
  4431  00131C  5044               	movf	_DoublePtr+1,w,c
  4432  00131E  22DA               	addwfc	fsr2h,f,c
  4433  001320  C03A  FFDF         	movff	_DoubleSPIS+1,indf2
  4434                           
  4435                           ;SPISlave.c: 76: DoublePtr[2] = DoubleSPIS[2];
  4436  001324  EE20 F002          	lfsr	2,2
  4437  001328  5043               	movf	_DoublePtr,w,c
  4438  00132A  26D9               	addwf	fsr2l,f,c
  4439  00132C  5044               	movf	_DoublePtr+1,w,c
  4440  00132E  22DA               	addwfc	fsr2h,f,c
  4441  001330  C03B  FFDF         	movff	_DoubleSPIS+2,indf2
  4442                           
  4443                           ;SPISlave.c: 78: return dub;
  4444  001334  C01D  F01A         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  4445  001338  C01E  F01B         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  4446  00133C  C01F  F01C         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  4447  001340  D000               	goto	l270
  4448  001342                     l270:
  4449  001342  0012               	return		;funcret
  4450  001344                     __end_of_SPIReassembleDouble:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           intcon2	equ	0xFF1
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           indf2	equ	0xFDF
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _SPIDisassembleDouble *****************
  4468 ;; Defined at:
  4469 ;;		line 53 in file "SPISlave.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  dub             3   27[COMRAM] unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;		None               void
  4476 ;; Registers used:
  4477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4483 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;Total ram usage:        3 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    5
  4490 ;; This function calls:
  4491 ;;		_GenerateChecksum
  4492 ;; This function is called by:
  4493 ;;		_main
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text27
  4498  001384                     __ptext27:
  4499                           	opt stack 0
  4500  001384                     _SPIDisassembleDouble:
  4501                           	opt stack 25
  4502                           
  4503                           ;SPISlave.c: 55: DoublePtr = (unsigned char*) &dub;
  4504                           
  4505                           ;incstack = 0
  4506  001384  0E1C               	movlw	low SPIDisassembleDouble@dub
  4507  001386  6E43               	movwf	_DoublePtr,c
  4508  001388  0E00               	movlw	high SPIDisassembleDouble@dub
  4509  00138A  6E44               	movwf	_DoublePtr+1,c
  4510                           
  4511                           ;SPISlave.c: 56: DoubleSPIS[0] = DoublePtr[0];
  4512  00138C  C043  FFD9         	movff	_DoublePtr,fsr2l
  4513  001390  C044  FFDA         	movff	_DoublePtr+1,fsr2h
  4514  001394  50DF               	movf	indf2,w,c
  4515  001396  6E39               	movwf	_DoubleSPIS,c
  4516                           
  4517                           ;SPISlave.c: 57: DoubleSPIS[1] = DoublePtr[1];
  4518  001398  EE20 F001          	lfsr	2,1
  4519  00139C  5043               	movf	_DoublePtr,w,c
  4520  00139E  26D9               	addwf	fsr2l,f,c
  4521  0013A0  5044               	movf	_DoublePtr+1,w,c
  4522  0013A2  22DA               	addwfc	fsr2h,f,c
  4523  0013A4  50DF               	movf	indf2,w,c
  4524  0013A6  6E3A               	movwf	_DoubleSPIS+1,c
  4525                           
  4526                           ;SPISlave.c: 58: DoubleSPIS[2] = DoublePtr[2];
  4527  0013A8  EE20 F002          	lfsr	2,2
  4528  0013AC  5043               	movf	_DoublePtr,w,c
  4529  0013AE  26D9               	addwf	fsr2l,f,c
  4530  0013B0  5044               	movf	_DoublePtr+1,w,c
  4531  0013B2  22DA               	addwfc	fsr2h,f,c
  4532  0013B4  50DF               	movf	indf2,w,c
  4533  0013B6  6E3B               	movwf	_DoubleSPIS+2,c
  4534                           
  4535                           ;SPISlave.c: 59: DoubleSPIS[3] = GenerateChecksum();
  4536  0013B8  EC17  F00A         	call	_GenerateChecksum	;wreg free
  4537  0013BC  6E3C               	movwf	_DoubleSPIS+3,c
  4538  0013BE  0012               	return		;funcret
  4539  0013C0                     __end_of_SPIDisassembleDouble:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           intcon	equ	0xFF2
  4548                           intcon2	equ	0xFF1
  4549                           postinc0	equ	0xFEE
  4550                           wreg	equ	0xFE8
  4551                           indf2	equ	0xFDF
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _GenerateChecksum *****************
  4557 ;; Defined at:
  4558 ;;		line 62 in file "SPISlave.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  y               1   26[COMRAM] unsigned char 
  4563 ;;  sum             1   25[COMRAM] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      unsigned char 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:        2 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    4
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_SPIDisassembleDouble
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text28
  4588  00142E                     __ptext28:
  4589                           	opt stack 0
  4590  00142E                     _GenerateChecksum:
  4591                           	opt stack 25
  4592                           
  4593                           ;SPISlave.c: 64: unsigned char y, sum = 0;
  4594                           
  4595                           ;incstack = 0
  4596  00142E  0E00               	movlw	0
  4597  001430  6E1A               	movwf	GenerateChecksum@sum,c
  4598                           
  4599                           ;SPISlave.c: 65: for (y = 0; y != 3; y++)
  4600  001432  0E00               	movlw	0
  4601  001434  6E1B               	movwf	GenerateChecksum@y,c
  4602  001436                     l3375:
  4603  001436  0E03               	movlw	3
  4604  001438  181B               	xorwf	GenerateChecksum@y,w,c
  4605  00143A  B4D8               	btfsc	status,2,c
  4606  00143C  D00E               	goto	l3385
  4607  00143E  D001               	goto	l3379
  4608  001440  D00C               	goto	l3385
  4609  001442                     l3379:
  4610                           
  4611                           ;SPISlave.c: 66: sum += DoubleSPIS[y];
  4612  001442  501B               	movf	GenerateChecksum@y,w,c
  4613  001444  0D01               	mullw	1
  4614  001446  0E39               	movlw	low _DoubleSPIS
  4615  001448  24F3               	addwf	prodl,w,c
  4616  00144A  6ED9               	movwf	fsr2l,c
  4617  00144C  0E00               	movlw	high _DoubleSPIS
  4618  00144E  20F4               	addwfc	prodh,w,c
  4619  001450  6EDA               	movwf	fsr2h,c
  4620  001452  50DF               	movf	indf2,w,c
  4621  001454  261A               	addwf	GenerateChecksum@sum,f,c
  4622  001456  2A1B               	incf	GenerateChecksum@y,f,c
  4623  001458  D7EE               	goto	l3375
  4624  00145A                     l3385:
  4625                           
  4626                           ;SPISlave.c: 67: return sum;
  4627  00145A  501A               	movf	GenerateChecksum@sum,w,c
  4628  00145C  D000               	goto	l267
  4629  00145E                     l267:
  4630  00145E  0012               	return		;funcret
  4631  001460                     __end_of_GenerateChecksum:
  4632                           	opt stack 0
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           intcon2	equ	0xFF1
  4641                           postinc0	equ	0xFEE
  4642                           wreg	equ	0xFE8
  4643                           indf2	equ	0xFDF
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _ReceiveSPI1 *****************
  4649 ;; Defined at:
  4650 ;;		line 46 in file "SPISlave.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      unsigned char 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;Total ram usage:        0 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    4
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text29
  4679  0016AA                     __ptext29:
  4680                           	opt stack 0
  4681  0016AA                     _ReceiveSPI1:
  4682                           	opt stack 26
  4683                           
  4684                           ;SPISlave.c: 48: SSP1BUF = 0x00;
  4685                           
  4686                           ;incstack = 0
  4687  0016AA  0E00               	movlw	0
  4688  0016AC  6EC9               	movwf	4041,c	;volatile
  4689                           
  4690                           ;SPISlave.c: 49: while (SSP1STATbits.BF == 0);
  4691  0016AE  D000               	goto	l256
  4692  0016B0                     l256:
  4693  0016B0  A0C7               	btfss	4039,0,c	;volatile
  4694  0016B2  D7FE               	goto	l256
  4695                           
  4696                           ;SPISlave.c: 50: return SSP1BUF;
  4697  0016B4  50C9               	movf	4041,w,c	;volatile
  4698  0016B6  D000               	goto	l259
  4699  0016B8                     l259:
  4700  0016B8  0012               	return		;funcret
  4701  0016BA                     __end_of_ReceiveSPI1:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           indf2	equ	0xFDF
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _ReadRTDpos *****************
  4719 ;; Defined at:
  4720 ;;		line 39 in file "ResolverToDigital.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  FullPosition    2   33[COMRAM] unsigned int 
  4725 ;;  helloworld      2    0        unsigned int 
  4726 ;;  x               1   35[COMRAM] unsigned char 
  4727 ;;  LowPosition     1   32[COMRAM] unsigned char 
  4728 ;;  HighPosition    1   31[COMRAM] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  2   26[COMRAM] unsigned int 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;Total ram usage:       10 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    5
  4745 ;; This function calls:
  4746 ;;		_Delay10TCYx
  4747 ;; This function is called by:
  4748 ;;		_main
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           	psect	text30
  4753  00107A                     __ptext30:
  4754                           	opt stack 0
  4755  00107A                     _ReadRTDpos:
  4756                           	opt stack 25
  4757                           
  4758                           ;ResolverToDigital.c: 41: unsigned char x;
  4759                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  4760                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  4761                           ;ResolverToDigital.c: 48: {
  4762                           ;ResolverToDigital.c: 49: PORTEbits.RE1 = 1;
  4763                           
  4764                           ;incstack = 0
  4765  00107A  8284               	bsf	3972,1,c	;volatile
  4766                           
  4767                           ;ResolverToDigital.c: 50: PORTEbits.RE0 = 0;
  4768  00107C  9084               	bcf	3972,0,c	;volatile
  4769                           
  4770                           ;ResolverToDigital.c: 51: for (x = 0; x < 8; x++)
  4771  00107E  0E00               	movlw	0
  4772  001080  6E24               	movwf	ReadRTDpos@x,c
  4773  001082  D003               	goto	l3691
  4774  001084  D005               	goto	l185
  4775  001086                     l184:
  4776                           
  4777                           ;ResolverToDigital.c: 52: __nop();
  4778  001086  F000               	nop	
  4779  001088  2A24               	incf	ReadRTDpos@x,f,c
  4780  00108A                     l3691:
  4781  00108A  0E07               	movlw	7
  4782  00108C  6424               	cpfsgt	ReadRTDpos@x,c
  4783  00108E  D7FB               	goto	l184
  4784  001090                     l185:
  4785                           
  4786                           ;ResolverToDigital.c: 53: PORTEbits.RE2 = 1;
  4787  001090  8484               	bsf	3972,2,c	;volatile
  4788                           
  4789                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 0;
  4790  001092  9484               	bcf	3972,2,c	;volatile
  4791                           
  4792                           ;ResolverToDigital.c: 55: Delay10TCYx(1);
  4793  001094  0E01               	movlw	1
  4794  001096  EC3A  F00B         	call	_Delay10TCYx
  4795                           
  4796                           ;ResolverToDigital.c: 56: HighPosition = PORTH;
  4797  00109A  CF87 F020          	movff	3975,ReadRTDpos@HighPosition	;volatile
  4798                           
  4799                           ;ResolverToDigital.c: 57: LowPosition = PORTD;
  4800  00109E  CF83 F021          	movff	3971,ReadRTDpos@LowPosition	;volatile
  4801                           
  4802                           ;ResolverToDigital.c: 58: PORTEbits.RE2 = 1;
  4803  0010A2  8484               	bsf	3972,2,c	;volatile
  4804                           
  4805                           ;ResolverToDigital.c: 59: PORTEbits.RE0 = 1;
  4806  0010A4  8084               	bsf	3972,0,c	;volatile
  4807                           
  4808                           ;ResolverToDigital.c: 60: FullPosition = LowPosition;
  4809  0010A6  C021  F022         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  4810  0010AA  6A23               	clrf	ReadRTDpos@FullPosition+1,c
  4811                           
  4812                           ;ResolverToDigital.c: 61: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  4813  0010AC  C020  F01D         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  4814  0010B0  0E0F               	movlw	15
  4815  0010B2  161D               	andwf	??_ReadRTDpos,f,c
  4816  0010B4  501D               	movf	??_ReadRTDpos,w,c
  4817  0010B6  6E1F               	movwf	(??_ReadRTDpos+2)& (0+255),c
  4818  0010B8  6A1E               	clrf	(??_ReadRTDpos+1)& (0+255),c
  4819  0010BA  5022               	movf	ReadRTDpos@FullPosition,w,c
  4820  0010BC  101E               	iorwf	??_ReadRTDpos+1,w,c
  4821  0010BE  6E22               	movwf	ReadRTDpos@FullPosition,c
  4822  0010C0  5023               	movf	ReadRTDpos@FullPosition+1,w,c
  4823  0010C2  101F               	iorwf	??_ReadRTDpos+2,w,c
  4824  0010C4  6E23               	movwf	ReadRTDpos@FullPosition+1,c
  4825                           
  4826                           ;ResolverToDigital.c: 62: return FullPosition;
  4827  0010C6  C022  F01B         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  4828  0010CA  C023  F01C         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  4829  0010CE  D000               	goto	l186
  4830  0010D0                     l186:
  4831  0010D0  0012               	return		;funcret
  4832  0010D2                     __end_of_ReadRTDpos:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           indf2	equ	0xFDF
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function _Delay10TCYx *****************
  4850 ;; Defined at:
  4851 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  unit            1    wreg     unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  unit            1   25[COMRAM] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;		None               void
  4858 ;; Registers used:
  4859 ;;		wreg
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;Total ram usage:        1 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    4
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_RTDInit
  4876 ;;		_ReadRTDpos
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text31
  4881  001674                     __ptext31:
  4882                           	opt stack 0
  4883  001674                     _Delay10TCYx:
  4884                           	opt stack 24
  4885                           
  4886                           ;incstack = 0
  4887                           ;Delay10TCYx@unit stored from wreg
  4888  001674  6E1A               	movwf	Delay10TCYx@unit,c
  4889  001676  0E03               	movlw	3
  4890  001678                     u3677:
  4891  001678  2EE8               	decfsz	wreg,f,c
  4892  00167A  D7FE               	goto	u3677
  4893  00167C  F000               	nop	
  4894  00167E  2E1A               	decfsz	Delay10TCYx@unit,f,c
  4895  001680  D7FA               	goto	l3211
  4896  001682  D000               	goto	l824
  4897  001684                     l824:
  4898  001684  0012               	return		;funcret
  4899  001686                     __end_of_Delay10TCYx:
  4900                           	opt stack 0
  4901                           tblptru	equ	0xFF8
  4902                           tblptrh	equ	0xFF7
  4903                           tblptrl	equ	0xFF6
  4904                           tablat	equ	0xFF5
  4905                           prodh	equ	0xFF4
  4906                           prodl	equ	0xFF3
  4907                           intcon	equ	0xFF2
  4908                           intcon2	equ	0xFF1
  4909                           postinc0	equ	0xFEE
  4910                           wreg	equ	0xFE8
  4911                           indf2	equ	0xFDF
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _RTD2Angle *****************
  4917 ;; Defined at:
  4918 ;;		line 97 in file "ResolverToDigital.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  RTDAngle        2    9[BANK0 ] unsigned int 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  3    9[BANK0 ] unsigned int 
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4932 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;Total ram usage:        3 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    6
  4939 ;; This function calls:
  4940 ;;		___ftmul
  4941 ;;		___lwtoft
  4942 ;; This function is called by:
  4943 ;;		_main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text32
  4948  0013C0                     __ptext32:
  4949                           	opt stack 0
  4950  0013C0                     _RTD2Angle:
  4951                           	opt stack 24
  4952                           
  4953                           ;ResolverToDigital.c: 99: return 0.087890625 * RTDAngle;
  4954                           
  4955                           ;incstack = 0
  4956  0013C0  C069  F022         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  4957  0013C4  C06A  F023         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  4958  0013C8  EC86  F00A         	call	___lwtoft	;wreg free
  4959  0013CC  C022  F031         	movff	?___lwtoft,___ftmul@f1
  4960  0013D0  C023  F032         	movff	?___lwtoft+1,___ftmul@f1+1
  4961  0013D4  C024  F033         	movff	?___lwtoft+2,___ftmul@f1+2
  4962  0013D8  0E00               	movlw	0
  4963  0013DA  6E34               	movwf	___ftmul@f2,c
  4964  0013DC  0EB4               	movlw	180
  4965  0013DE  6E35               	movwf	___ftmul@f2+1,c
  4966  0013E0  0E3D               	movlw	61
  4967  0013E2  6E36               	movwf	___ftmul@f2+2,c
  4968  0013E4  ECA9  F004         	call	___ftmul	;wreg free
  4969  0013E8  C031  F069         	movff	?___ftmul,?_RTD2Angle
  4970  0013EC  C032  F06A         	movff	?___ftmul+1,?_RTD2Angle+1
  4971  0013F0  C033  F06B         	movff	?___ftmul+2,?_RTD2Angle+2
  4972  0013F4  D000               	goto	l194
  4973  0013F6                     l194:
  4974  0013F6  0012               	return		;funcret
  4975  0013F8                     __end_of_RTD2Angle:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           intcon2	equ	0xFF1
  4985                           postinc0	equ	0xFEE
  4986                           wreg	equ	0xFE8
  4987                           indf2	equ	0xFDF
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function ___lwtoft *****************
  4993 ;; Defined at:
  4994 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  c               2   33[COMRAM] unsigned int 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  3   33[COMRAM] float 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5008 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;Total ram usage:        3 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    5
  5015 ;; This function calls:
  5016 ;;		___ftpack
  5017 ;; This function is called by:
  5018 ;;		_RTD2Angle
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text33
  5023  00150C                     __ptext33:
  5024                           	opt stack 0
  5025  00150C                     ___lwtoft:
  5026                           	opt stack 24
  5027                           
  5028                           ;incstack = 0
  5029  00150C  C022  F01A         	movff	___lwtoft@c,___ftpack@arg
  5030  001510  C023  F01B         	movff	___lwtoft@c+1,___ftpack@arg+1
  5031  001514  6A1C               	clrf	___ftpack@arg+2,c
  5032  001516  0E8E               	movlw	142
  5033  001518  6E1D               	movwf	___ftpack@exp,c
  5034  00151A  0E00               	movlw	0
  5035  00151C  6E1E               	movwf	___ftpack@sign,c
  5036  00151E  EC18  F006         	call	___ftpack	;wreg free
  5037  001522  C01A  F022         	movff	?___ftpack,?___lwtoft
  5038  001526  C01B  F023         	movff	?___ftpack+1,?___lwtoft+1
  5039  00152A  C01C  F024         	movff	?___ftpack+2,?___lwtoft+2
  5040  00152E  D000               	goto	l1165
  5041  001530                     l1165:
  5042  001530  0012               	return		;funcret
  5043  001532                     __end_of___lwtoft:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           intcon	equ	0xFF2
  5052                           intcon2	equ	0xFF1
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           indf2	equ	0xFDF
  5056                           fsr2h	equ	0xFDA
  5057                           fsr2l	equ	0xFD9
  5058                           status	equ	0xFD8
  5059                           
  5060 ;; *************** function ___ftmul *****************
  5061 ;; Defined at:
  5062 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  f1              3   48[COMRAM] float 
  5065 ;;  f2              3   51[COMRAM] float 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  5068 ;;  sign            1    8[BANK0 ] unsigned char 
  5069 ;;  cntr            1    7[BANK0 ] unsigned char 
  5070 ;;  exp             1    3[BANK0 ] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  3   48[COMRAM] float 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5080 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;Total ram usage:       15 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    5
  5087 ;; This function calls:
  5088 ;;		___ftpack
  5089 ;; This function is called by:
  5090 ;;		_calculatePID
  5091 ;;		_RTD2Angle
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text34
  5096  000952                     __ptext34:
  5097                           	opt stack 0
  5098  000952                     ___ftmul:
  5099                           	opt stack 24
  5100                           
  5101                           ;incstack = 0
  5102  000952  C033  F060         	movff	___ftmul@f1+2,??___ftmul
  5103  000956  0100               	movlb	0	; () banked
  5104  000958  6B61               	clrf	(??___ftmul+1)& (0+255),b
  5105  00095A  6B62               	clrf	(??___ftmul+2)& (0+255),b
  5106  00095C  3432               	rlcf	___ftmul@f1+1,w,c
  5107  00095E  0100               	movlb	0	; () banked
  5108  000960  3760               	rlcf	??___ftmul& (0+255),f,b
  5109  000962  E301               	bnc	u2971
  5110  000964  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  5111  000966                     u2971:
  5112  000966  0100               	movlb	0	; () banked
  5113  000968  5160               	movf	??___ftmul& (0+255),w,b
  5114  00096A  0100               	movlb	0	; () banked
  5115  00096C  6F63               	movwf	___ftmul@exp& (0+255),b
  5116  00096E  0100               	movlb	0	; () banked
  5117  000970  5163               	movf	___ftmul@exp& (0+255),w,b
  5118  000972  A4D8               	btfss	status,2,c
  5119  000974  D002               	goto	l3453
  5120  000976  D013               	goto	l3455
  5121                           
  5122                           ; BSR set to: 0
  5123                           
  5124                           ; BSR set to: 0
  5125  000978  D083               	goto	l1015
  5126  00097A                     l3453:
  5127                           
  5128                           ; BSR set to: 0
  5129  00097A  C036  F060         	movff	___ftmul@f2+2,??___ftmul
  5130  00097E  0100               	movlb	0	; () banked
  5131  000980  6B61               	clrf	(??___ftmul+1)& (0+255),b
  5132  000982  6B62               	clrf	(??___ftmul+2)& (0+255),b
  5133  000984  3435               	rlcf	___ftmul@f2+1,w,c
  5134  000986  0100               	movlb	0	; () banked
  5135  000988  3760               	rlcf	??___ftmul& (0+255),f,b
  5136  00098A  E301               	bnc	u2991
  5137  00098C  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  5138  00098E                     u2991:
  5139  00098E  0100               	movlb	0	; () banked
  5140  000990  5160               	movf	??___ftmul& (0+255),w,b
  5141  000992  0100               	movlb	0	; () banked
  5142  000994  6F68               	movwf	___ftmul@sign& (0+255),b
  5143  000996  0100               	movlb	0	; () banked
  5144  000998  5168               	movf	___ftmul@sign& (0+255),w,b
  5145  00099A  A4D8               	btfss	status,2,c
  5146  00099C  D007               	goto	l3459
  5147  00099E                     l3455:
  5148                           
  5149                           ; BSR set to: 0
  5150  00099E  0E00               	movlw	0
  5151  0009A0  6E31               	movwf	?___ftmul,c
  5152  0009A2  0E00               	movlw	0
  5153  0009A4  6E32               	movwf	?___ftmul+1,c
  5154  0009A6  0E00               	movlw	0
  5155  0009A8  6E33               	movwf	?___ftmul+2,c
  5156                           
  5157                           ; BSR set to: 0
  5158  0009AA  D06A               	goto	l1015
  5159  0009AC                     l3459:
  5160                           
  5161                           ; BSR set to: 0
  5162  0009AC  0100               	movlb	0	; () banked
  5163  0009AE  5168               	movf	___ftmul@sign& (0+255),w,b
  5164  0009B0  0F7B               	addlw	123
  5165  0009B2  0100               	movlb	0	; () banked
  5166  0009B4  2763               	addwf	___ftmul@exp& (0+255),f,b
  5167                           
  5168                           ; BSR set to: 0
  5169  0009B6  C033  F068         	movff	___ftmul@f1+2,___ftmul@sign
  5170  0009BA  5036               	movf	___ftmul@f2+2,w,c
  5171  0009BC  0100               	movlb	0	; () banked
  5172  0009BE  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  5173  0009C0  0E80               	movlw	128
  5174  0009C2  0100               	movlb	0	; () banked
  5175  0009C4  1768               	andwf	___ftmul@sign& (0+255),f,b
  5176                           
  5177                           ; BSR set to: 0
  5178  0009C6  8E32               	bsf	___ftmul@f1+1,7,c
  5179                           
  5180                           ; BSR set to: 0
  5181  0009C8  8E35               	bsf	___ftmul@f2+1,7,c
  5182                           
  5183                           ; BSR set to: 0
  5184  0009CA  0EFF               	movlw	255
  5185  0009CC  1634               	andwf	___ftmul@f2,f,c
  5186  0009CE  0EFF               	movlw	255
  5187  0009D0  1635               	andwf	___ftmul@f2+1,f,c
  5188  0009D2  0E00               	movlw	0
  5189  0009D4  1636               	andwf	___ftmul@f2+2,f,c
  5190                           
  5191                           ; BSR set to: 0
  5192  0009D6  0E00               	movlw	0
  5193  0009D8  0100               	movlb	0	; () banked
  5194  0009DA  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  5195  0009DC  0E00               	movlw	0
  5196  0009DE  0100               	movlb	0	; () banked
  5197  0009E0  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5198  0009E2  0E00               	movlw	0
  5199  0009E4  0100               	movlb	0	; () banked
  5200  0009E6  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203  0009E8  0E07               	movlw	7
  5204  0009EA  0100               	movlb	0	; () banked
  5205  0009EC  6F67               	movwf	___ftmul@cntr& (0+255),b
  5206  0009EE  D000               	goto	l3473
  5207  0009F0                     l3473:
  5208                           
  5209                           ; BSR set to: 0
  5210  0009F0  A031               	btfss	___ftmul@f1,0,c
  5211  0009F2  D00A               	goto	l3477
  5212                           
  5213                           ; BSR set to: 0
  5214  0009F4  5034               	movf	___ftmul@f2,w,c
  5215  0009F6  0100               	movlb	0	; () banked
  5216  0009F8  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5217  0009FA  5035               	movf	___ftmul@f2+1,w,c
  5218  0009FC  0100               	movlb	0	; () banked
  5219  0009FE  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5220  000A00  5036               	movf	___ftmul@f2+2,w,c
  5221  000A02  0100               	movlb	0	; () banked
  5222  000A04  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5223  000A06  D000               	goto	l3477
  5224  000A08                     l3477:
  5225                           
  5226                           ; BSR set to: 0
  5227  000A08  90D8               	bcf	status,0,c
  5228  000A0A  3233               	rrcf	___ftmul@f1+2,f,c
  5229  000A0C  3232               	rrcf	___ftmul@f1+1,f,c
  5230  000A0E  3231               	rrcf	___ftmul@f1,f,c
  5231  000A10  90D8               	bcf	status,0,c
  5232  000A12  3634               	rlcf	___ftmul@f2,f,c
  5233  000A14  3635               	rlcf	___ftmul@f2+1,f,c
  5234  000A16  3636               	rlcf	___ftmul@f2+2,f,c
  5235                           
  5236                           ; BSR set to: 0
  5237  000A18  0100               	movlb	0	; () banked
  5238  000A1A  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  5239  000A1C  D7E9               	goto	l3473
  5240  000A1E  D000               	goto	l3481
  5241  000A20                     l3481:
  5242                           
  5243                           ; BSR set to: 0
  5244  000A20  0E09               	movlw	9
  5245  000A22  0100               	movlb	0	; () banked
  5246  000A24  6F67               	movwf	___ftmul@cntr& (0+255),b
  5247  000A26  D000               	goto	l3483
  5248  000A28                     l3483:
  5249                           
  5250                           ; BSR set to: 0
  5251  000A28  A031               	btfss	___ftmul@f1,0,c
  5252  000A2A  D00A               	goto	l3487
  5253                           
  5254                           ; BSR set to: 0
  5255  000A2C  5034               	movf	___ftmul@f2,w,c
  5256  000A2E  0100               	movlb	0	; () banked
  5257  000A30  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5258  000A32  5035               	movf	___ftmul@f2+1,w,c
  5259  000A34  0100               	movlb	0	; () banked
  5260  000A36  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5261  000A38  5036               	movf	___ftmul@f2+2,w,c
  5262  000A3A  0100               	movlb	0	; () banked
  5263  000A3C  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5264  000A3E  D000               	goto	l3487
  5265  000A40                     l3487:
  5266                           
  5267                           ; BSR set to: 0
  5268  000A40  90D8               	bcf	status,0,c
  5269  000A42  3233               	rrcf	___ftmul@f1+2,f,c
  5270  000A44  3232               	rrcf	___ftmul@f1+1,f,c
  5271  000A46  3231               	rrcf	___ftmul@f1,f,c
  5272  000A48  0100               	movlb	0	; () banked
  5273  000A4A  90D8               	bcf	status,0,c
  5274  000A4C  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5275  000A4E  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5276  000A50  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5277                           
  5278                           ; BSR set to: 0
  5279  000A52  0100               	movlb	0	; () banked
  5280  000A54  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  5281  000A56  D7E8               	goto	l3483
  5282  000A58  D000               	goto	l3491
  5283  000A5A                     l3491:
  5284                           
  5285                           ; BSR set to: 0
  5286  000A5A  C064  F01A         	movff	___ftmul@f3_as_product,___ftpack@arg
  5287  000A5E  C065  F01B         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5288  000A62  C066  F01C         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5289  000A66  C063  F01D         	movff	___ftmul@exp,___ftpack@exp
  5290  000A6A  C068  F01E         	movff	___ftmul@sign,___ftpack@sign
  5291  000A6E  EC18  F006         	call	___ftpack	;wreg free
  5292  000A72  C01A  F031         	movff	?___ftpack,?___ftmul
  5293  000A76  C01B  F032         	movff	?___ftpack+1,?___ftmul+1
  5294  000A7A  C01C  F033         	movff	?___ftpack+2,?___ftmul+2
  5295  000A7E  D000               	goto	l1015
  5296  000A80                     l1015:
  5297  000A80  0012               	return		;funcret
  5298  000A82                     __end_of___ftmul:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           intcon2	equ	0xFF1
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf2	equ	0xFDF
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function ___ftpack *****************
  5316 ;; Defined at:
  5317 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  arg             3   25[COMRAM] unsigned um
  5320 ;;  exp             1   28[COMRAM] unsigned char 
  5321 ;;  sign            1   29[COMRAM] unsigned char 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  3   25[COMRAM] float 
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5333 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;Total ram usage:        8 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    4
  5340 ;; This function calls:
  5341 ;;		Nothing
  5342 ;; This function is called by:
  5343 ;;		___ftadd
  5344 ;;		___ftdiv
  5345 ;;		___ftmul
  5346 ;;		___lwtoft
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text35
  5351  000C30                     __ptext35:
  5352                           	opt stack 0
  5353  000C30                     ___ftpack:
  5354                           	opt stack 23
  5355                           
  5356                           ;incstack = 0
  5357  000C30  501D               	movf	___ftpack@exp,w,c
  5358  000C32  B4D8               	btfsc	status,2,c
  5359  000C34  D005               	goto	l3179
  5360  000C36  501A               	movf	___ftpack@arg,w,c
  5361  000C38  101B               	iorwf	___ftpack@arg+1,w,c
  5362  000C3A  101C               	iorwf	___ftpack@arg+2,w,c
  5363  000C3C  A4D8               	btfss	status,2,c
  5364  000C3E  D00E               	goto	l3185
  5365  000C40                     l3179:
  5366  000C40  0E00               	movlw	0
  5367  000C42  6E1A               	movwf	?___ftpack,c
  5368  000C44  0E00               	movlw	0
  5369  000C46  6E1B               	movwf	?___ftpack+1,c
  5370  000C48  0E00               	movlw	0
  5371  000C4A  6E1C               	movwf	?___ftpack+2,c
  5372  000C4C  D053               	goto	l928
  5373  000C4E  D006               	goto	l3185
  5374  000C50                     l3183:
  5375  000C50  2A1D               	incf	___ftpack@exp,f,c
  5376  000C52  90D8               	bcf	status,0,c
  5377  000C54  321C               	rrcf	___ftpack@arg+2,f,c
  5378  000C56  321B               	rrcf	___ftpack@arg+1,f,c
  5379  000C58  321A               	rrcf	___ftpack@arg,f,c
  5380  000C5A  D000               	goto	l3185
  5381  000C5C                     l3185:
  5382  000C5C  0E00               	movlw	0
  5383  000C5E  141A               	andwf	___ftpack@arg,w,c
  5384  000C60  6E1F               	movwf	??___ftpack& (0+255),c
  5385  000C62  0E00               	movlw	0
  5386  000C64  141B               	andwf	___ftpack@arg+1,w,c
  5387  000C66  6E20               	movwf	(??___ftpack+1)& (0+255),c
  5388  000C68  0EFE               	movlw	254
  5389  000C6A  141C               	andwf	___ftpack@arg+2,w,c
  5390  000C6C  6E21               	movwf	(??___ftpack+2)& (0+255),c
  5391  000C6E  501F               	movf	??___ftpack,w,c
  5392  000C70  1020               	iorwf	??___ftpack+1,w,c
  5393  000C72  1021               	iorwf	??___ftpack+2,w,c
  5394  000C74  B4D8               	btfsc	status,2,c
  5395  000C76  D00E               	goto	l3191
  5396  000C78  D7EB               	goto	l3183
  5397  000C7A  D00C               	goto	l3191
  5398  000C7C                     l3187:
  5399  000C7C  2A1D               	incf	___ftpack@exp,f,c
  5400  000C7E  0E01               	movlw	1
  5401  000C80  261A               	addwf	___ftpack@arg,f,c
  5402  000C82  0E00               	movlw	0
  5403  000C84  221B               	addwfc	___ftpack@arg+1,f,c
  5404  000C86  0E00               	movlw	0
  5405  000C88  221C               	addwfc	___ftpack@arg+2,f,c
  5406  000C8A  90D8               	bcf	status,0,c
  5407  000C8C  321C               	rrcf	___ftpack@arg+2,f,c
  5408  000C8E  321B               	rrcf	___ftpack@arg+1,f,c
  5409  000C90  321A               	rrcf	___ftpack@arg,f,c
  5410  000C92  D000               	goto	l3191
  5411  000C94                     l3191:
  5412  000C94  0E00               	movlw	0
  5413  000C96  141A               	andwf	___ftpack@arg,w,c
  5414  000C98  6E1F               	movwf	??___ftpack& (0+255),c
  5415  000C9A  0E00               	movlw	0
  5416  000C9C  141B               	andwf	___ftpack@arg+1,w,c
  5417  000C9E  6E20               	movwf	(??___ftpack+1)& (0+255),c
  5418  000CA0  0EFF               	movlw	255
  5419  000CA2  141C               	andwf	___ftpack@arg+2,w,c
  5420  000CA4  6E21               	movwf	(??___ftpack+2)& (0+255),c
  5421  000CA6  501F               	movf	??___ftpack,w,c
  5422  000CA8  1020               	iorwf	??___ftpack+1,w,c
  5423  000CAA  1021               	iorwf	??___ftpack+2,w,c
  5424  000CAC  B4D8               	btfsc	status,2,c
  5425  000CAE  D008               	goto	l3195
  5426  000CB0  D7E5               	goto	l3187
  5427  000CB2  D006               	goto	l3195
  5428  000CB4                     l3193:
  5429  000CB4  061D               	decf	___ftpack@exp,f,c
  5430  000CB6  90D8               	bcf	status,0,c
  5431  000CB8  361A               	rlcf	___ftpack@arg,f,c
  5432  000CBA  361B               	rlcf	___ftpack@arg+1,f,c
  5433  000CBC  361C               	rlcf	___ftpack@arg+2,f,c
  5434  000CBE  D000               	goto	l3195
  5435  000CC0                     l3195:
  5436  000CC0  BE1B               	btfsc	___ftpack@arg+1,7,c
  5437  000CC2  D004               	goto	l939
  5438  000CC4  0E02               	movlw	2
  5439  000CC6  601D               	cpfslt	___ftpack@exp,c
  5440  000CC8  D7F5               	goto	l3193
  5441  000CCA  D000               	goto	l939
  5442  000CCC                     l939:
  5443  000CCC  B01D               	btfsc	___ftpack@exp,0,c
  5444  000CCE  D002               	goto	l3201
  5445  000CD0  9E1B               	bcf	___ftpack@arg+1,7,c
  5446  000CD2  D000               	goto	l3201
  5447  000CD4                     l3201:
  5448  000CD4  90D8               	bcf	status,0,c
  5449  000CD6  321D               	rrcf	___ftpack@exp,f,c
  5450  000CD8  501D               	movf	___ftpack@exp,w,c
  5451  000CDA  121C               	iorwf	___ftpack@arg+2,f,c
  5452  000CDC  501E               	movf	___ftpack@sign,w,c
  5453  000CDE  B4D8               	btfsc	status,2,c
  5454  000CE0  D002               	goto	l3207
  5455  000CE2  8E1C               	bsf	___ftpack@arg+2,7,c
  5456  000CE4  D000               	goto	l3207
  5457  000CE6                     l3207:
  5458  000CE6  C01A  F01A         	movff	___ftpack@arg,?___ftpack
  5459  000CEA  C01B  F01B         	movff	___ftpack@arg+1,?___ftpack+1
  5460  000CEE  C01C  F01C         	movff	___ftpack@arg+2,?___ftpack+2
  5461  000CF2  D000               	goto	l928
  5462  000CF4                     l928:
  5463  000CF4  0012               	return		;funcret
  5464  000CF6                     __end_of___ftpack:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           intcon2	equ	0xFF1
  5474                           postinc0	equ	0xFEE
  5475                           wreg	equ	0xFE8
  5476                           indf2	equ	0xFDF
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _ImplementPIDMotion *****************
  5482 ;; Defined at:
  5483 ;;		line 40 in file "MotorControl.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  PIDValue        2   29[COMRAM] int 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;		None               void
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:        4 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    5
  5504 ;; This function calls:
  5505 ;;		_abs
  5506 ;; This function is called by:
  5507 ;;		_main
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text36
  5512  000EFA                     __ptext36:
  5513                           	opt stack 0
  5514  000EFA                     _ImplementPIDMotion:
  5515                           	opt stack 25
  5516                           
  5517                           ;MotorControl.c: 42: if (PIDValue > 255)
  5518                           
  5519                           ;incstack = 0
  5520  000EFA  BE1F               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  5521  000EFC  D007               	goto	l3615
  5522  000EFE  041F               	decf	ImplementPIDMotion@PIDValue+1,w,c
  5523  000F00  A0D8               	btfss	status,0,c
  5524  000F02  D004               	goto	l3615
  5525                           
  5526                           ;MotorControl.c: 43: PIDValue = 255;
  5527  000F04  0E00               	movlw	0
  5528  000F06  6E1F               	movwf	ImplementPIDMotion@PIDValue+1,c
  5529  000F08  681E               	setf	ImplementPIDMotion@PIDValue,c
  5530  000F0A  D00C               	goto	l3619
  5531  000F0C                     l3615:
  5532                           
  5533                           ;MotorControl.c: 44: else if (PIDValue < -255)
  5534  000F0C  AE1F               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  5535  000F0E  D00A               	goto	l3619
  5536  000F10  041E               	decf	ImplementPIDMotion@PIDValue,w,c
  5537  000F12  0EFF               	movlw	255
  5538  000F14  581F               	subwfb	ImplementPIDMotion@PIDValue+1,w,c
  5539  000F16  B0D8               	btfsc	status,0,c
  5540  000F18  D005               	goto	l3619
  5541                           
  5542                           ;MotorControl.c: 45: PIDValue = -255;
  5543  000F1A  0EFF               	movlw	255
  5544  000F1C  6E1F               	movwf	ImplementPIDMotion@PIDValue+1,c
  5545  000F1E  0E01               	movlw	1
  5546  000F20  6E1E               	movwf	ImplementPIDMotion@PIDValue,c
  5547  000F22  D000               	goto	l3619
  5548  000F24                     l3619:
  5549                           
  5550                           ;MotorControl.c: 47: if (PIDValue < 0)
  5551  000F24  AE1F               	btfss	ImplementPIDMotion@PIDValue+1,7,c
  5552  000F26  D002               	goto	l3623
  5553                           
  5554                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  5555  000F28  8EB7               	bsf	4023,7,c	;volatile
  5556  000F2A  D009               	goto	l3627
  5557  000F2C                     l3623:
  5558                           
  5559                           ;MotorControl.c: 49: else if (PIDValue > 0)
  5560  000F2C  BE1F               	btfsc	ImplementPIDMotion@PIDValue+1,7,c
  5561  000F2E  D007               	goto	l3627
  5562  000F30  501F               	movf	ImplementPIDMotion@PIDValue+1,w,c
  5563  000F32  E103               	bnz	u3250
  5564  000F34  041E               	decf	ImplementPIDMotion@PIDValue,w,c
  5565  000F36  A0D8               	btfss	status,0,c
  5566  000F38  D002               	goto	l3627
  5567  000F3A                     u3250:
  5568                           
  5569                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  5570  000F3A  9EB7               	bcf	4023,7,c	;volatile
  5571  000F3C  D000               	goto	l3627
  5572  000F3E                     l3627:
  5573                           
  5574                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  5575  000F3E  C01E  F01A         	movff	ImplementPIDMotion@PIDValue,abs@a
  5576  000F42  C01F  F01B         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  5577  000F46  EC5F  F00A         	call	_abs	;wreg free
  5578  000F4A  C01A  F01E         	movff	?_abs,ImplementPIDMotion@PIDValue
  5579  000F4E  C01B  F01F         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  5580                           
  5581                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  5582  000F52  C01E  F020         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5583  000F56  C01F  F021         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  5584  000F5A  3421               	rlcf	??_ImplementPIDMotion+1,w,c
  5585  000F5C  3221               	rrcf	??_ImplementPIDMotion+1,f,c
  5586  000F5E  3220               	rrcf	??_ImplementPIDMotion,f,c
  5587  000F60  3421               	rlcf	??_ImplementPIDMotion+1,w,c
  5588  000F62  3221               	rrcf	??_ImplementPIDMotion+1,f,c
  5589  000F64  3220               	rrcf	??_ImplementPIDMotion,f,c
  5590  000F66  5020               	movf	??_ImplementPIDMotion,w,c
  5591  000F68  6EB8               	movwf	4024,c	;volatile
  5592                           
  5593                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  5594  000F6A  C01E  F020         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5595  000F6E  0E03               	movlw	3
  5596  000F70  1620               	andwf	??_ImplementPIDMotion,f,c
  5597  000F72  3A20               	swapf	??_ImplementPIDMotion,f,c
  5598  000F74  50B7               	movf	4023,w,c	;volatile
  5599  000F76  1820               	xorwf	??_ImplementPIDMotion,w,c
  5600  000F78  0BCF               	andlw	-49
  5601  000F7A  1820               	xorwf	??_ImplementPIDMotion,w,c
  5602  000F7C  6EB7               	movwf	4023,c	;volatile
  5603  000F7E  0012               	return		;funcret
  5604  000F80                     __end_of_ImplementPIDMotion:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           indf2	equ	0xFDF
  5617                           fsr2h	equ	0xFDA
  5618                           fsr2l	equ	0xFD9
  5619                           status	equ	0xFD8
  5620                           
  5621 ;; *************** function _ImplementJSMotion *****************
  5622 ;; Defined at:
  5623 ;;		line 58 in file "MotorControl.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;  JoystickValu    2   34[COMRAM] int 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  CCPinput        2   39[COMRAM] unsigned int 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;		None               void
  5630 ;; Registers used:
  5631 ;;		wreg, status,2, status,0, cstack
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;Total ram usage:        7 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    5
  5644 ;; This function calls:
  5645 ;;		_abs
  5646 ;; This function is called by:
  5647 ;;		_main
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text37
  5652  000B64                     __ptext37:
  5653                           	opt stack 0
  5654  000B64                     _ImplementJSMotion:
  5655                           	opt stack 25
  5656                           
  5657                           ;MotorControl.c: 60: unsigned int CCPinput;
  5658                           ;MotorControl.c: 61: PIDEnableFlag = 0;
  5659                           
  5660                           ;incstack = 0
  5661  000B64  0E00               	movlw	0
  5662  000B66  0100               	movlb	0	; () banked
  5663  000B68  6FAF               	movwf	_PIDEnableFlag& (0+255),b
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;MotorControl.c: 62: if (JoystickValue < DeadbandLow)
  5667  000B6A  5046               	movf	_DeadbandLow,w,c
  5668  000B6C  6E25               	movwf	??_ImplementJSMotion& (0+255),c
  5669  000B6E  6A26               	clrf	(??_ImplementJSMotion+1)& (0+255),c
  5670  000B70  5025               	movf	??_ImplementJSMotion,w,c
  5671  000B72  5C23               	subwf	ImplementJSMotion@JoystickValue,w,c
  5672  000B74  5024               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5673  000B76  0A80               	xorlw	128
  5674  000B78  6E27               	movwf	(??_ImplementJSMotion+2)& (0+255),c
  5675  000B7A  5026               	movf	??_ImplementJSMotion+1,w,c
  5676  000B7C  0A80               	xorlw	128
  5677  000B7E  5827               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,c
  5678  000B80  B0D8               	btfsc	status,0,c
  5679  000B82  D002               	goto	l3639
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;MotorControl.c: 63: {
  5683                           ;MotorControl.c: 64: CCP3CONbits.P3M1 = 1;
  5684  000B84  8EB7               	bsf	4023,7,c	;volatile
  5685                           
  5686                           ;MotorControl.c: 65: }
  5687  000B86  D02E               	goto	l3649
  5688  000B88                     l3639:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  5692  000B88  5045               	movf	_DeadbandHigh,w,c
  5693  000B8A  6E25               	movwf	??_ImplementJSMotion& (0+255),c
  5694  000B8C  6A26               	clrf	(??_ImplementJSMotion+1)& (0+255),c
  5695  000B8E  5023               	movf	ImplementJSMotion@JoystickValue,w,c
  5696  000B90  5C25               	subwf	??_ImplementJSMotion,w,c
  5697  000B92  5026               	movf	??_ImplementJSMotion+1,w,c
  5698  000B94  0A80               	xorlw	128
  5699  000B96  6E27               	movwf	(??_ImplementJSMotion+2)& (0+255),c
  5700  000B98  5024               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5701  000B9A  0A80               	xorlw	128
  5702  000B9C  5827               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,c
  5703  000B9E  B0D8               	btfsc	status,0,c
  5704  000BA0  D002               	goto	l3643
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;MotorControl.c: 67: {
  5708                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  5709  000BA2  9EB7               	bcf	4023,7,c	;volatile
  5710                           
  5711                           ;MotorControl.c: 69: }
  5712  000BA4  D01F               	goto	l3649
  5713  000BA6                     l3643:
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;MotorControl.c: 70: else if (JoystickValue <= DeadbandHigh && JoystickValue >= Deadband
      +                          Low)
  5717  000BA6  5045               	movf	_DeadbandHigh,w,c
  5718  000BA8  6E25               	movwf	??_ImplementJSMotion& (0+255),c
  5719  000BAA  6A26               	clrf	(??_ImplementJSMotion+1)& (0+255),c
  5720  000BAC  5023               	movf	ImplementJSMotion@JoystickValue,w,c
  5721  000BAE  5C25               	subwf	??_ImplementJSMotion,w,c
  5722  000BB0  5026               	movf	??_ImplementJSMotion+1,w,c
  5723  000BB2  0A80               	xorlw	128
  5724  000BB4  6E27               	movwf	(??_ImplementJSMotion+2)& (0+255),c
  5725  000BB6  5024               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5726  000BB8  0A80               	xorlw	128
  5727  000BBA  5827               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,c
  5728  000BBC  A0D8               	btfss	status,0,c
  5729  000BBE  D012               	goto	l3649
  5730                           
  5731                           ; BSR set to: 0
  5732  000BC0  5046               	movf	_DeadbandLow,w,c
  5733  000BC2  6E25               	movwf	??_ImplementJSMotion& (0+255),c
  5734  000BC4  6A26               	clrf	(??_ImplementJSMotion+1)& (0+255),c
  5735  000BC6  5025               	movf	??_ImplementJSMotion,w,c
  5736  000BC8  5C23               	subwf	ImplementJSMotion@JoystickValue,w,c
  5737  000BCA  5024               	movf	ImplementJSMotion@JoystickValue+1,w,c
  5738  000BCC  0A80               	xorlw	128
  5739  000BCE  6E27               	movwf	(??_ImplementJSMotion+2)& (0+255),c
  5740  000BD0  5026               	movf	??_ImplementJSMotion+1,w,c
  5741  000BD2  0A80               	xorlw	128
  5742  000BD4  5827               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,c
  5743  000BD6  A0D8               	btfss	status,0,c
  5744  000BD8  D005               	goto	l3649
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;MotorControl.c: 71: {
  5748                           ;MotorControl.c: 72: JoystickValue = 0;
  5749  000BDA  0E00               	movlw	0
  5750  000BDC  6E24               	movwf	ImplementJSMotion@JoystickValue+1,c
  5751  000BDE  0E00               	movlw	0
  5752  000BE0  6E23               	movwf	ImplementJSMotion@JoystickValue,c
  5753                           
  5754                           ; BSR set to: 0
  5755                           
  5756                           ; BSR set to: 0
  5757  000BE2  D000               	goto	l3649
  5758  000BE4                     l3649:
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;MotorControl.c: 73: }
  5762                           ;MotorControl.c: 75: JoystickValue = abs(JoystickValue);
  5763  000BE4  C023  F01A         	movff	ImplementJSMotion@JoystickValue,abs@a
  5764  000BE8  C024  F01B         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  5765  000BEC  EC5F  F00A         	call	_abs	;wreg free
  5766  000BF0  C01A  F023         	movff	?_abs,ImplementJSMotion@JoystickValue
  5767  000BF4  C01B  F024         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  5768                           
  5769                           ;MotorControl.c: 76: CCPinput = JoystickValue * 2;
  5770  000BF8  90D8               	bcf	status,0,c
  5771  000BFA  3423               	rlcf	ImplementJSMotion@JoystickValue,w,c
  5772  000BFC  6E28               	movwf	ImplementJSMotion@CCPinput,c
  5773  000BFE  3424               	rlcf	ImplementJSMotion@JoystickValue+1,w,c
  5774  000C00  6E29               	movwf	ImplementJSMotion@CCPinput+1,c
  5775                           
  5776                           ;MotorControl.c: 77: CCPR3L = (CCPinput >> 2) & 0xFF;
  5777  000C02  C028  F025         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  5778  000C06  C029  F026         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  5779  000C0A  90D8               	bcf	status,0,c
  5780  000C0C  3226               	rrcf	??_ImplementJSMotion+1,f,c
  5781  000C0E  3225               	rrcf	??_ImplementJSMotion,f,c
  5782  000C10  90D8               	bcf	status,0,c
  5783  000C12  3226               	rrcf	??_ImplementJSMotion+1,f,c
  5784  000C14  3225               	rrcf	??_ImplementJSMotion,f,c
  5785  000C16  5025               	movf	??_ImplementJSMotion,w,c
  5786  000C18  6EB8               	movwf	4024,c	;volatile
  5787                           
  5788                           ;MotorControl.c: 78: CCP3CONbits.DC3B = (CCPinput & 0x03);
  5789  000C1A  C028  F025         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  5790  000C1E  0E03               	movlw	3
  5791  000C20  1625               	andwf	??_ImplementJSMotion,f,c
  5792  000C22  3A25               	swapf	??_ImplementJSMotion,f,c
  5793  000C24  50B7               	movf	4023,w,c	;volatile
  5794  000C26  1825               	xorwf	??_ImplementJSMotion,w,c
  5795  000C28  0BCF               	andlw	-49
  5796  000C2A  1825               	xorwf	??_ImplementJSMotion,w,c
  5797  000C2C  6EB7               	movwf	4023,c	;volatile
  5798  000C2E  0012               	return		;funcret
  5799  000C30                     __end_of_ImplementJSMotion:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           intcon	equ	0xFF2
  5808                           intcon2	equ	0xFF1
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           indf2	equ	0xFDF
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function _abs *****************
  5817 ;; Defined at:
  5818 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;  a               2   25[COMRAM] int 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  2   25[COMRAM] int 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;Total ram usage:        4 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    4
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_ImplementPIDMotion
  5843 ;;		_ImplementJSMotion
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text38
  5848  0014BE                     __ptext38:
  5849                           	opt stack 0
  5850  0014BE                     _abs:
  5851                           	opt stack 25
  5852                           
  5853                           ;incstack = 0
  5854  0014BE  AE1B               	btfss	abs@a+1,7,c
  5855  0014C0  D00D               	goto	l642
  5856  0014C2  C01A  F01C         	movff	abs@a,??_abs
  5857  0014C6  C01B  F01D         	movff	abs@a+1,??_abs+1
  5858  0014CA  1E1C               	comf	??_abs,f,c
  5859  0014CC  1E1D               	comf	??_abs+1,f,c
  5860  0014CE  4A1C               	infsnz	??_abs,f,c
  5861  0014D0  2A1D               	incf	??_abs+1,f,c
  5862  0014D2  C01C  F01A         	movff	??_abs,?_abs
  5863  0014D6  C01D  F01B         	movff	??_abs+1,?_abs+1
  5864  0014DA  D004               	goto	l643
  5865  0014DC                     l642:
  5866  0014DC  C01A  F01A         	movff	abs@a,?_abs
  5867  0014E0  C01B  F01B         	movff	abs@a+1,?_abs+1
  5868  0014E4                     l643:
  5869  0014E4  0012               	return		;funcret
  5870  0014E6                     __end_of_abs:
  5871                           	opt stack 0
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           prodh	equ	0xFF4
  5877                           prodl	equ	0xFF3
  5878                           intcon	equ	0xFF2
  5879                           intcon2	equ	0xFF1
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           indf2	equ	0xFDF
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function _DetectMovement *****************
  5888 ;; Defined at:
  5889 ;;		line 42 in file "Joystick.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  ADCresult       2   32[COMRAM] unsigned int 
  5894 ;;  JoystickResu    2   30[COMRAM] int 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  2   25[COMRAM] int 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        9 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    4
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text39
  5919  001000                     __ptext39:
  5920                           	opt stack 0
  5921  001000                     _DetectMovement:
  5922                           	opt stack 26
  5923                           
  5924                           ;Joystick.c: 44: unsigned int ADCresult;
  5925                           ;Joystick.c: 45: int JoystickResult;
  5926                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  5927                           
  5928                           ;incstack = 0
  5929  001000  82C2               	bsf	4034,1,c	;volatile
  5930                           
  5931                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  5932  001002  D000               	goto	l43
  5933  001004                     l43:
  5934  001004  B2C2               	btfsc	4034,1,c	;volatile
  5935  001006  D7FE               	goto	l43
  5936                           
  5937                           ;Joystick.c: 50: ADCresult = ADRESH;
  5938  001008  CFC4 F021          	movff	4036,DetectMovement@ADCresult	;volatile
  5939  00100C  6A22               	clrf	DetectMovement@ADCresult+1,c
  5940                           
  5941                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  5942  00100E  5021               	movf	DetectMovement@ADCresult,w,c
  5943  001010  6E22               	movwf	DetectMovement@ADCresult+1,c
  5944  001012  6A21               	clrf	DetectMovement@ADCresult,c
  5945                           
  5946                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  5947  001014  5021               	movf	DetectMovement@ADCresult,w,c
  5948  001016  10C3               	iorwf	4035,w,c	;volatile
  5949  001018  6E21               	movwf	DetectMovement@ADCresult,c
  5950  00101A  5022               	movf	DetectMovement@ADCresult+1,w,c
  5951  00101C  6E22               	movwf	DetectMovement@ADCresult+1,c
  5952                           
  5953                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  5954  00101E  0E00               	movlw	0
  5955  001020  2421               	addwf	DetectMovement@ADCresult,w,c
  5956  001022  6E1F               	movwf	DetectMovement@JoystickResult,c
  5957  001024  0EFE               	movlw	254
  5958  001026  2022               	addwfc	DetectMovement@ADCresult+1,w,c
  5959  001028  6E20               	movwf	DetectMovement@JoystickResult+1,c
  5960                           
  5961                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  5962  00102A  5045               	movf	_DeadbandHigh,w,c
  5963  00102C  6E1C               	movwf	??_DetectMovement& (0+255),c
  5964  00102E  6A1D               	clrf	(??_DetectMovement+1)& (0+255),c
  5965  001030  501F               	movf	DetectMovement@JoystickResult,w,c
  5966  001032  5C1C               	subwf	??_DetectMovement,w,c
  5967  001034  501D               	movf	??_DetectMovement+1,w,c
  5968  001036  0A80               	xorlw	128
  5969  001038  6E1E               	movwf	(??_DetectMovement+2)& (0+255),c
  5970  00103A  5020               	movf	DetectMovement@JoystickResult+1,w,c
  5971  00103C  0A80               	xorlw	128
  5972  00103E  581E               	subwfb	(??_DetectMovement+2)& (0+255),w,c
  5973  001040  A0D8               	btfss	status,0,c
  5974  001042  D00D               	goto	l3599
  5975  001044  5046               	movf	_DeadbandLow,w,c
  5976  001046  6E1C               	movwf	??_DetectMovement& (0+255),c
  5977  001048  6A1D               	clrf	(??_DetectMovement+1)& (0+255),c
  5978  00104A  501C               	movf	??_DetectMovement,w,c
  5979  00104C  5C1F               	subwf	DetectMovement@JoystickResult,w,c
  5980  00104E  5020               	movf	DetectMovement@JoystickResult+1,w,c
  5981  001050  0A80               	xorlw	128
  5982  001052  6E1E               	movwf	(??_DetectMovement+2)& (0+255),c
  5983  001054  501D               	movf	??_DetectMovement+1,w,c
  5984  001056  0A80               	xorlw	128
  5985  001058  581E               	subwfb	(??_DetectMovement+2)& (0+255),w,c
  5986  00105A  B0D8               	btfsc	status,0,c
  5987  00105C  D008               	goto	l3607
  5988  00105E                     l3599:
  5989                           
  5990                           ;Joystick.c: 56: {
  5991                           ;Joystick.c: 57: PIDEnableFlag = 0;
  5992  00105E  0E00               	movlw	0
  5993  001060  0100               	movlb	0	; () banked
  5994  001062  6FAF               	movwf	_PIDEnableFlag& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;Joystick.c: 58: return JoystickResult;
  5998  001064  C01F  F01A         	movff	DetectMovement@JoystickResult,?_DetectMovement
  5999  001068  C020  F01B         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;Joystick.c: 59: }
  6003                           
  6004                           ; BSR set to: 0
  6005  00106C  D005               	goto	l49
  6006  00106E                     l3607:
  6007                           
  6008                           ;Joystick.c: 60: else
  6009                           ;Joystick.c: 61: return 0;
  6010  00106E  0E00               	movlw	0
  6011  001070  6E1B               	movwf	?_DetectMovement+1,c
  6012  001072  0E00               	movlw	0
  6013  001074  6E1A               	movwf	?_DetectMovement,c
  6014  001076  D000               	goto	l49
  6015  001078                     l49:
  6016  001078  0012               	return		;funcret
  6017  00107A                     __end_of_DetectMovement:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           indf2	equ	0xFDF
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _DetectJoystick *****************
  6035 ;; Defined at:
  6036 ;;		line 27 in file "Joystick.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;		None               void
  6043 ;; Registers used:
  6044 ;;		wreg, status,2
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;Total ram usage:        0 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    4
  6057 ;; This function calls:
  6058 ;;		Nothing
  6059 ;; This function is called by:
  6060 ;;		_main
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           	psect	text40
  6065  00159E                     __ptext40:
  6066                           	opt stack 0
  6067  00159E                     _DetectJoystick:
  6068                           	opt stack 26
  6069                           
  6070                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  6071                           
  6072                           ;incstack = 0
  6073  00159E  B281               	btfsc	3969,1,c	;volatile
  6074  0015A0  D003               	goto	l37
  6075                           
  6076                           ;Joystick.c: 30: {
  6077                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  6078  0015A2  9480               	bcf	3968,2,c	;volatile
  6079                           
  6080                           ;Joystick.c: 32: JSEnableFlag = 0;
  6081  0015A4  0E00               	movlw	0
  6082  0015A6  D008               	goto	L2
  6083  0015A8                     l37:
  6084                           
  6085                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  6086  0015A8  A281               	btfss	3969,1,c	;volatile
  6087  0015AA  D009               	goto	l40
  6088  0015AC  0100               	movlb	0	; () banked
  6089  0015AE  51AE               	movf	_JSEnableFlag& (0+255),w,b
  6090  0015B0  A4D8               	btfss	status,2,c
  6091  0015B2  D005               	goto	l40
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;Joystick.c: 36: {
  6095                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  6096  0015B4  8480               	bsf	3968,2,c	;volatile
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;Joystick.c: 38: JSEnableFlag = 1;
  6100  0015B6  0E01               	movlw	1
  6101  0015B8                     L2:
  6102  0015B8  0100               	movlb	0	; () banked
  6103  0015BA  6FAE               	movwf	_JSEnableFlag& (0+255),b
  6104                           
  6105                           ; BSR set to: 0
  6106  0015BC  D000               	goto	l40
  6107  0015BE                     l40:
  6108  0015BE  0012               	return		;funcret
  6109  0015C0                     __end_of_DetectJoystick:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           intcon2	equ	0xFF1
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           indf2	equ	0xFDF
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _ISR *****************
  6127 ;; Defined at:
  6128 ;;		line 134 in file "RTDuC.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;		None               void
  6135 ;; Registers used:
  6136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:       16 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    3
  6149 ;; This function calls:
  6150 ;;		_HLVDInt
  6151 ;;		_INT0Int
  6152 ;;		_SPIInt
  6153 ;;		_TMR0Int
  6154 ;; This function is called by:
  6155 ;;		Interrupt level 2
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	intcode
  6160  000008                     __pintcode:
  6161                           	opt stack 0
  6162  000008                     _ISR:
  6163                           	opt stack 22
  6164                           
  6165                           ;incstack = 0
  6166  000008  CFFA F00C          	movff	pclath,??_ISR+2
  6167  00000C  CFFB F00D          	movff	pclatu,??_ISR+3
  6168  000010  CFE9 F00E          	movff	fsr0l,??_ISR+4
  6169  000014  EDD7  F006         	call	int_func,f	;refresh shadow registers
  6170                           pclatu	equ	0xFFB
  6171                           pclath	equ	0xFFA
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           intcon2	equ	0xFF1
  6180                           postinc0	equ	0xFEE
  6181                           fsr0l	equ	0xFE9
  6182                           wreg	equ	0xFE8
  6183                           indf2	equ	0xFDF
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188                           	psect	intcode_body
  6189  000DAE                     __pintcode_body:
  6190                           	opt stack 22
  6191  000DAE                     int_func:
  6192                           	opt stack 22
  6193  000DAE  0006               	pop		; remove dummy address from shadow register refresh
  6194  000DB0  CFEA F00F          	movff	fsr0h,??_ISR+5
  6195  000DB4  CFE1 F010          	movff	fsr1l,??_ISR+6
  6196  000DB8  CFE2 F011          	movff	fsr1h,??_ISR+7
  6197  000DBC  CFD9 F012          	movff	fsr2l,??_ISR+8
  6198  000DC0  CFDA F013          	movff	fsr2h,??_ISR+9
  6199  000DC4  CFF3 F014          	movff	prodl,??_ISR+10
  6200  000DC8  CFF4 F015          	movff	prodh,??_ISR+11
  6201  000DCC  CFF6 F016          	movff	tblptrl,??_ISR+12
  6202  000DD0  CFF7 F017          	movff	tblptrh,??_ISR+13
  6203  000DD4  CFF8 F018          	movff	tblptru,??_ISR+14
  6204  000DD8  CFF5 F019          	movff	tablat,??_ISR+15
  6205                           
  6206                           ;RTDuC.c: 136: PORTCbits.RC6 = 1;
  6207  000DDC  8C82               	bsf	3970,6,c	;volatile
  6208                           
  6209                           ;RTDuC.c: 138: if ((INTCONbits.TMR0IF == 1) && ((PIDEnableFlag | 0x01) == 0x01))
  6210  000DDE  A4F2               	btfss	intcon,2,c	;volatile
  6211  000DE0  D010               	goto	i2l3095
  6212  000DE2  0100               	movlb	0	; () banked
  6213  000DE4  51AF               	movf	_PIDEnableFlag& (0+255),w,b
  6214  000DE6  6E0A               	movwf	??_ISR& (0+255),c
  6215  000DE8  6A0B               	clrf	(??_ISR+1)& (0+255),c
  6216  000DEA  0E01               	movlw	1
  6217  000DEC  120A               	iorwf	??_ISR,f,c
  6218  000DEE  0E00               	movlw	0
  6219  000DF0  120B               	iorwf	??_ISR+1,f,c
  6220  000DF2  040A               	decf	??_ISR,w,c
  6221  000DF4  100B               	iorwf	??_ISR+1,w,c
  6222  000DF6  A4D8               	btfss	status,2,c
  6223  000DF8  D004               	goto	i2l3095
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;RTDuC.c: 139: {
  6227                           ;RTDuC.c: 140: TMR0Int();
  6228  000DFA  EC43  F00B         	call	_TMR0Int	;wreg free
  6229                           
  6230                           ;RTDuC.c: 141: PORTCbits.RC6 = 0;
  6231  000DFE  9C82               	bcf	3970,6,c	;volatile
  6232  000E00  D000               	goto	i2l3095
  6233  000E02                     i2l3095:
  6234                           
  6235                           ;RTDuC.c: 142: }
  6236                           ;RTDuC.c: 144: if (INTCONbits.INT0IF == 1)
  6237  000E02  A2F2               	btfss	intcon,1,c	;volatile
  6238  000E04  D003               	goto	i2l3099
  6239                           
  6240                           ;RTDuC.c: 145: {
  6241                           ;RTDuC.c: 146: INT0Int();
  6242  000E06  ECBD  F00A         	call	_INT0Int	;wreg free
  6243  000E0A  D000               	goto	i2l3099
  6244  000E0C                     i2l3099:
  6245                           
  6246                           ;RTDuC.c: 147: }
  6247                           ;RTDuC.c: 149: if (PIR2bits.HLVDIF == 1)
  6248  000E0C  A4A1               	btfss	4001,2,c	;volatile
  6249  000E0E  D006               	goto	i2l3105
  6250                           
  6251                           ;RTDuC.c: 150: {
  6252                           ;RTDuC.c: 151: PORTAbits.RA4 = 0;
  6253  000E10  9880               	bcf	3968,4,c	;volatile
  6254                           
  6255                           ;RTDuC.c: 152: PORTAbits.RA3 = 0;
  6256  000E12  9680               	bcf	3968,3,c	;volatile
  6257                           
  6258                           ;RTDuC.c: 153: PORTAbits.RA2 = 0;
  6259  000E14  9480               	bcf	3968,2,c	;volatile
  6260                           
  6261                           ;RTDuC.c: 154: HLVDInt();
  6262  000E16  EC7B  F006         	call	_HLVDInt	;wreg free
  6263  000E1A  D000               	goto	i2l3105
  6264  000E1C                     i2l3105:
  6265                           
  6266                           ;RTDuC.c: 155: }
  6267                           ;RTDuC.c: 157: if (PIR2bits.OSCFIF == 1)
  6268  000E1C  BEA1               	btfsc	4001,7,c	;volatile
  6269  000E1E  00FF               	reset		;# 
  6270                           
  6271                           ;RTDuC.c: 172: }
  6272                           ;RTDuC.c: 173: if (PIR1bits.SSP1IF == 1)
  6273  000E20  A69E               	btfss	3998,3,c	;volatile
  6274  000E22  D003               	goto	i2l515
  6275                           
  6276                           ;RTDuC.c: 174: {
  6277                           ;RTDuC.c: 175: SPIInt();
  6278  000E24  EC4C  F00B         	call	_SPIInt	;wreg free
  6279  000E28  D000               	goto	i2l515
  6280  000E2A                     i2l515:
  6281  000E2A  C019  FFF5         	movff	??_ISR+15,tablat
  6282  000E2E  C018  FFF8         	movff	??_ISR+14,tblptru
  6283  000E32  C017  FFF7         	movff	??_ISR+13,tblptrh
  6284  000E36  C016  FFF6         	movff	??_ISR+12,tblptrl
  6285  000E3A  C015  FFF4         	movff	??_ISR+11,prodh
  6286  000E3E  C014  FFF3         	movff	??_ISR+10,prodl
  6287  000E42  C013  FFDA         	movff	??_ISR+9,fsr2h
  6288  000E46  C012  FFD9         	movff	??_ISR+8,fsr2l
  6289  000E4A  C011  FFE2         	movff	??_ISR+7,fsr1h
  6290  000E4E  C010  FFE1         	movff	??_ISR+6,fsr1l
  6291  000E52  C00F  FFEA         	movff	??_ISR+5,fsr0h
  6292  000E56  C00E  FFE9         	movff	??_ISR+4,fsr0l
  6293  000E5A  C00D  FFFB         	movff	??_ISR+3,pclatu
  6294  000E5E  C00C  FFFA         	movff	??_ISR+2,pclath
  6295  000E62  0011               	retfie		f
  6296  000E64                     __end_of_ISR:
  6297                           	opt stack 0
  6298                           pclatu	equ	0xFFB
  6299                           pclath	equ	0xFFA
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           intcon2	equ	0xFF1
  6308                           postinc0	equ	0xFEE
  6309                           fsr0h	equ	0xFEA
  6310                           fsr0l	equ	0xFE9
  6311                           wreg	equ	0xFE8
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           fsr2h	equ	0xFDA
  6316                           fsr2l	equ	0xFD9
  6317                           status	equ	0xFD8
  6318                           
  6319 ;; *************** function _TMR0Int *****************
  6320 ;; Defined at:
  6321 ;;		line 57 in file "PID.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;		None
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;		None               void
  6328 ;; Registers used:
  6329 ;;		wreg, status,2
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;Total ram usage:        0 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_ISR
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text42
  6349  001686                     __ptext42:
  6350                           	opt stack 0
  6351  001686                     _TMR0Int:
  6352                           	opt stack 24
  6353                           
  6354                           ;PID.c: 59: TMR0H = 0xDB;
  6355                           
  6356                           ;incstack = 0
  6357  001686  0EDB               	movlw	219
  6358  001688  6ED7               	movwf	4055,c	;volatile
  6359                           
  6360                           ;PID.c: 60: TMR0L = 0x60;
  6361  00168A  0E60               	movlw	96
  6362  00168C  6ED6               	movwf	4054,c	;volatile
  6363                           
  6364                           ;PID.c: 61: TMR0Flag = 1;
  6365  00168E  0E01               	movlw	1
  6366  001690  0100               	movlb	0	; () banked
  6367  001692  6FB1               	movwf	_TMR0Flag& (0+255),b
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;PID.c: 62: INTCONbits.TMR0IF = 0;
  6371  001694  94F2               	bcf	intcon,2,c	;volatile
  6372                           
  6373                           ; BSR set to: 0
  6374  001696  0012               	return		;funcret
  6375  001698                     __end_of_TMR0Int:
  6376                           	opt stack 0
  6377                           pclatu	equ	0xFFB
  6378                           pclath	equ	0xFFA
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           prodh	equ	0xFF4
  6384                           prodl	equ	0xFF3
  6385                           intcon	equ	0xFF2
  6386                           intcon2	equ	0xFF1
  6387                           postinc0	equ	0xFEE
  6388                           fsr0h	equ	0xFEA
  6389                           fsr0l	equ	0xFE9
  6390                           wreg	equ	0xFE8
  6391                           fsr1h	equ	0xFE2
  6392                           fsr1l	equ	0xFE1
  6393                           indf2	equ	0xFDF
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8
  6397                           
  6398 ;; *************** function _SPIInt *****************
  6399 ;; Defined at:
  6400 ;;		line 26 in file "SPISlave.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;		None
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;		None
  6405 ;; Return value:  Size  Location     Type
  6406 ;;		None               void
  6407 ;; Registers used:
  6408 ;;		wreg, status,2
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;Total ram usage:        0 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_ISR
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text43
  6428  001698                     __ptext43:
  6429                           	opt stack 0
  6430  001698                     _SPIInt:
  6431                           	opt stack 24
  6432                           
  6433                           ;SPISlave.c: 28: Command = SSP1BUF;
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;incstack = 0
  6437  001698  CFC9 F0AD          	movff	4041,_Command	;volatile
  6438                           
  6439                           ;SPISlave.c: 29: PORTCbits.RC6 = 1;
  6440  00169C  8C82               	bsf	3970,6,c	;volatile
  6441                           
  6442                           ;SPISlave.c: 30: PIR1bits.SSP1IF = 0;
  6443  00169E  969E               	bcf	3998,3,c	;volatile
  6444                           
  6445                           ;SPISlave.c: 31: PIE1bits.SSP1IE = 0;
  6446  0016A0  969D               	bcf	3997,3,c	;volatile
  6447                           
  6448                           ;SPISlave.c: 32: SPIflag = 1;
  6449  0016A2  0E01               	movlw	1
  6450  0016A4  0100               	movlb	0	; () banked
  6451  0016A6  6FB0               	movwf	_SPIflag& (0+255),b
  6452                           
  6453                           ; BSR set to: 0
  6454  0016A8  0012               	return		;funcret
  6455  0016AA                     __end_of_SPIInt:
  6456                           	opt stack 0
  6457                           pclatu	equ	0xFFB
  6458                           pclath	equ	0xFFA
  6459                           tblptru	equ	0xFF8
  6460                           tblptrh	equ	0xFF7
  6461                           tblptrl	equ	0xFF6
  6462                           tablat	equ	0xFF5
  6463                           prodh	equ	0xFF4
  6464                           prodl	equ	0xFF3
  6465                           intcon	equ	0xFF2
  6466                           intcon2	equ	0xFF1
  6467                           postinc0	equ	0xFEE
  6468                           fsr0h	equ	0xFEA
  6469                           fsr0l	equ	0xFE9
  6470                           wreg	equ	0xFE8
  6471                           fsr1h	equ	0xFE2
  6472                           fsr1l	equ	0xFE1
  6473                           indf2	equ	0xFDF
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function _INT0Int *****************
  6479 ;; Defined at:
  6480 ;;		line 179 in file "RTDuC.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    1
  6501 ;; This function calls:
  6502 ;;		_KillMotors
  6503 ;; This function is called by:
  6504 ;;		_ISR
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text44
  6509  00157A                     __ptext44:
  6510                           	opt stack 0
  6511  00157A                     _INT0Int:
  6512                           	opt stack 23
  6513                           
  6514                           ;RTDuC.c: 181: KillMotors();
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;incstack = 0
  6518  00157A  EC68  F00B         	call	_KillMotors	;wreg free
  6519                           
  6520                           ;RTDuC.c: 182: PORTAbits.RA3 = 0;
  6521  00157E  9680               	bcf	3968,3,c	;volatile
  6522                           
  6523                           ;RTDuC.c: 183: T0CONbits.TMR0ON = 1;
  6524  001580  8ED5               	bsf	4053,7,c	;volatile
  6525                           
  6526                           ;RTDuC.c: 184: INTCONbits.GIE = 0;
  6527  001582  9EF2               	bcf	intcon,7,c	;volatile
  6528                           
  6529                           ;RTDuC.c: 185: PORTAbits.RA4 = 1;
  6530  001584  8880               	bsf	3968,4,c	;volatile
  6531  001586  D000               	goto	i2l2939
  6532  001588                     i2l2939:
  6533                           
  6534                           ;RTDuC.c: 187: {
  6535                           ;RTDuC.c: 188: TMR0H = 0x00;
  6536  001588  0E00               	movlw	0
  6537  00158A  6ED7               	movwf	4055,c	;volatile
  6538                           
  6539                           ;RTDuC.c: 189: TMR0L = 0x00;
  6540  00158C  0E00               	movlw	0
  6541  00158E  6ED6               	movwf	4054,c	;volatile
  6542                           
  6543                           ;RTDuC.c: 190: while (!INTCONbits.TMR0IF);
  6544  001590  D000               	goto	i2l519
  6545  001592                     i2l519:
  6546  001592  A4F2               	btfss	intcon,2,c	;volatile
  6547  001594  D7FE               	goto	i2l519
  6548                           
  6549                           ;RTDuC.c: 191: INTCONbits.TMR0IF = 0;
  6550  001596  94F2               	bcf	intcon,2,c	;volatile
  6551                           
  6552                           ;RTDuC.c: 192: ~PORTAbits.RA4;
  6553  001598  5080               	movf	3968,w,c	;volatile
  6554  00159A  D7F6               	goto	i2l2939
  6555  00159C  0012               	return		;funcret
  6556  00159E                     __end_of_INT0Int:
  6557                           	opt stack 0
  6558                           pclatu	equ	0xFFB
  6559                           pclath	equ	0xFFA
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon2	equ	0xFF1
  6568                           postinc0	equ	0xFEE
  6569                           fsr0h	equ	0xFEA
  6570                           fsr0l	equ	0xFE9
  6571                           wreg	equ	0xFE8
  6572                           fsr1h	equ	0xFE2
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           fsr2h	equ	0xFDA
  6576                           fsr2l	equ	0xFD9
  6577                           status	equ	0xFD8
  6578                           
  6579 ;; *************** function _KillMotors *****************
  6580 ;; Defined at:
  6581 ;;		line 28 in file "MotorControl.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, status,2, status,0
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_INT0Int
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text45
  6609  0016D0                     __ptext45:
  6610                           	opt stack 0
  6611  0016D0                     _KillMotors:
  6612                           	opt stack 23
  6613                           
  6614                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  6615                           
  6616                           ;incstack = 0
  6617  0016D0  8880               	bsf	3968,4,c	;volatile
  6618                           
  6619                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  6620  0016D2  50B7               	movf	4023,w,c	;volatile
  6621  0016D4  0BF0               	andlw	240
  6622  0016D6  6EB7               	movwf	4023,c	;volatile
  6623  0016D8  0012               	return		;funcret
  6624  0016DA                     __end_of_KillMotors:
  6625                           	opt stack 0
  6626                           pclatu	equ	0xFFB
  6627                           pclath	equ	0xFFA
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           intcon2	equ	0xFF1
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           indf2	equ	0xFDF
  6643                           fsr2h	equ	0xFDA
  6644                           fsr2l	equ	0xFD9
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _HLVDInt *****************
  6648 ;; Defined at:
  6649 ;;		line 150 in file "EEPROM.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;		None
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;		None
  6654 ;; Return value:  Size  Location     Type
  6655 ;;		None               void
  6656 ;; Registers used:
  6657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;Total ram usage:        0 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    2
  6670 ;; This function calls:
  6671 ;;		_EEWriteChar
  6672 ;;		_EEWriteDouble
  6673 ;; This function is called by:
  6674 ;;		_ISR
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text46
  6679  000CF6                     __ptext46:
  6680                           	opt stack 0
  6681  000CF6                     _HLVDInt:
  6682                           	opt stack 22
  6683                           
  6684                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  6685                           
  6686                           ;incstack = 0
  6687  000CF6  C040  F005         	movff	_SetAngle,EEWriteDouble@dub
  6688  000CFA  C041  F006         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6689  000CFE  C042  F007         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6690  000D02  0E00               	movlw	0
  6691  000D04  ECE9  F008         	call	_EEWriteDouble
  6692                           
  6693                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  6694  000D08  C09F  F005         	movff	_Kp,EEWriteDouble@dub
  6695  000D0C  C0A0  F006         	movff	_Kp+1,EEWriteDouble@dub+1
  6696  000D10  C0A1  F007         	movff	_Kp+2,EEWriteDouble@dub+2
  6697  000D14  0E03               	movlw	3
  6698  000D16  ECE9  F008         	call	_EEWriteDouble
  6699                           
  6700                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  6701  000D1A  C09C  F005         	movff	_Ki,EEWriteDouble@dub
  6702  000D1E  C09D  F006         	movff	_Ki+1,EEWriteDouble@dub+1
  6703  000D22  C09E  F007         	movff	_Ki+2,EEWriteDouble@dub+2
  6704  000D26  0E06               	movlw	6
  6705  000D28  ECE9  F008         	call	_EEWriteDouble
  6706                           
  6707                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  6708  000D2C  C099  F005         	movff	_Kd,EEWriteDouble@dub
  6709  000D30  C09A  F006         	movff	_Kd+1,EEWriteDouble@dub+1
  6710  000D34  C09B  F007         	movff	_Kd+2,EEWriteDouble@dub+2
  6711  000D38  0E09               	movlw	9
  6712  000D3A  ECE9  F008         	call	_EEWriteDouble
  6713                           
  6714                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  6715  000D3E  CF80 F005          	movff	3968,EEWriteChar@ch	;volatile
  6716  000D42  0E0C               	movlw	12
  6717  000D44  ECE0  F00A         	call	_EEWriteChar
  6718                           
  6719                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  6720  000D48  CF81 F005          	movff	3969,EEWriteChar@ch	;volatile
  6721  000D4C  0E0D               	movlw	13
  6722  000D4E  ECE0  F00A         	call	_EEWriteChar
  6723                           
  6724                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  6725  000D52  CF82 F005          	movff	3970,EEWriteChar@ch	;volatile
  6726  000D56  0E0E               	movlw	14
  6727  000D58  ECE0  F00A         	call	_EEWriteChar
  6728                           
  6729                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  6730  000D5C  CF83 F005          	movff	3971,EEWriteChar@ch	;volatile
  6731  000D60  0E0F               	movlw	15
  6732  000D62  ECE0  F00A         	call	_EEWriteChar
  6733                           
  6734                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  6735  000D66  CF84 F005          	movff	3972,EEWriteChar@ch	;volatile
  6736  000D6A  0E10               	movlw	16
  6737  000D6C  ECE0  F00A         	call	_EEWriteChar
  6738                           
  6739                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  6740  000D70  CF85 F005          	movff	3973,EEWriteChar@ch	;volatile
  6741  000D74  0E11               	movlw	17
  6742  000D76  ECE0  F00A         	call	_EEWriteChar
  6743                           
  6744                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  6745  000D7A  CF86 F005          	movff	3974,EEWriteChar@ch	;volatile
  6746  000D7E  0E12               	movlw	18
  6747  000D80  ECE0  F00A         	call	_EEWriteChar
  6748                           
  6749                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  6750  000D84  CF87 F005          	movff	3975,EEWriteChar@ch	;volatile
  6751  000D88  0E13               	movlw	19
  6752  000D8A  ECE0  F00A         	call	_EEWriteChar
  6753                           
  6754                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  6755  000D8E  CF88 F005          	movff	3976,EEWriteChar@ch	;volatile
  6756  000D92  0E14               	movlw	20
  6757  000D94  ECE0  F00A         	call	_EEWriteChar
  6758                           
  6759                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  6760  000D98  C0AF  F005         	movff	_PIDEnableFlag,EEWriteChar@ch
  6761  000D9C  0E15               	movlw	21
  6762  000D9E  ECE0  F00A         	call	_EEWriteChar
  6763                           
  6764                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  6765  000DA2  0E01               	movlw	1
  6766  000DA4  6E05               	movwf	EEWriteChar@ch,c
  6767  000DA6  0E16               	movlw	22
  6768  000DA8  ECE0  F00A         	call	_EEWriteChar
  6769  000DAC  0012               	return		;funcret
  6770  000DAE                     __end_of_HLVDInt:
  6771                           	opt stack 0
  6772                           pclatu	equ	0xFFB
  6773                           pclath	equ	0xFFA
  6774                           tblptru	equ	0xFF8
  6775                           tblptrh	equ	0xFF7
  6776                           tblptrl	equ	0xFF6
  6777                           tablat	equ	0xFF5
  6778                           prodh	equ	0xFF4
  6779                           prodl	equ	0xFF3
  6780                           intcon	equ	0xFF2
  6781                           intcon2	equ	0xFF1
  6782                           postinc0	equ	0xFEE
  6783                           fsr0h	equ	0xFEA
  6784                           fsr0l	equ	0xFE9
  6785                           wreg	equ	0xFE8
  6786                           fsr1h	equ	0xFE2
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           fsr2h	equ	0xFDA
  6790                           fsr2l	equ	0xFD9
  6791                           status	equ	0xFD8
  6792                           
  6793 ;; *************** function _EEWriteDouble *****************
  6794 ;; Defined at:
  6795 ;;		line 77 in file "EEPROM.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;  location        1    wreg     unsigned char 
  6798 ;;  dub             3    4[COMRAM] unsigned char 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  location        1    7[COMRAM] unsigned char 
  6801 ;;  x               1    8[COMRAM] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:        5 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    1
  6818 ;; This function calls:
  6819 ;;		_EEDisassembleDouble
  6820 ;;		_Write_b_eep
  6821 ;;		i2_Busy_eep
  6822 ;; This function is called by:
  6823 ;;		_HLVDInt
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text47
  6828  0011D2                     __ptext47:
  6829                           	opt stack 0
  6830  0011D2                     _EEWriteDouble:
  6831                           	opt stack 22
  6832                           
  6833                           ;incstack = 0
  6834                           ;EEWriteDouble@location stored from wreg
  6835  0011D2  6E08               	movwf	EEWriteDouble@location,c
  6836                           
  6837                           ;EEPROM.c: 79: unsigned char x;
  6838                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  6839  0011D4  C005  F001         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6840  0011D8  C006  F002         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6841  0011DC  C007  F003         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6842  0011E0  ECFC  F009         	call	_EEDisassembleDouble	;wreg free
  6843                           
  6844                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  6845  0011E4  50F2               	movf	intcon,w,c	;volatile
  6846  0011E6  0B3F               	andlw	63
  6847  0011E8  6EF2               	movwf	intcon,c	;volatile
  6848                           
  6849                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  6850  0011EA  0E00               	movlw	0
  6851  0011EC  6E09               	movwf	EEWriteDouble@x,c
  6852  0011EE                     i2l2511:
  6853  0011EE  0E02               	movlw	2
  6854  0011F0  6409               	cpfsgt	EEWriteDouble@x,c
  6855  0011F2  D001               	goto	i2l2515
  6856  0011F4  D014               	goto	i2l2525
  6857  0011F6                     i2l2515:
  6858                           
  6859                           ;EEPROM.c: 86: {
  6860                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  6861  0011F6  C008  F001         	movff	EEWriteDouble@location,Write_b_eep@badd
  6862  0011FA  6A02               	clrf	Write_b_eep@badd+1,c
  6863  0011FC  5009               	movf	EEWriteDouble@x,w,c
  6864  0011FE  0D01               	mullw	1
  6865  001200  0E3D               	movlw	low _DDouble
  6866  001202  24F3               	addwf	prodl,w,c
  6867  001204  6ED9               	movwf	fsr2l,c
  6868  001206  0E00               	movlw	high _DDouble
  6869  001208  20F4               	addwfc	prodh,w,c
  6870  00120A  6EDA               	movwf	fsr2h,c
  6871  00120C  50DF               	movf	indf2,w,c
  6872  00120E  6E03               	movwf	Write_b_eep@bdat,c
  6873  001210  ECA2  F009         	call	_Write_b_eep	;wreg free
  6874                           
  6875                           ;EEPROM.c: 88: location++;
  6876  001214  2A08               	incf	EEWriteDouble@location,f,c
  6877                           
  6878                           ;EEPROM.c: 89: Busy_eep();
  6879  001216  EC71  F00B         	call	i2_Busy_eep	;wreg free
  6880  00121A  2A09               	incf	EEWriteDouble@x,f,c
  6881  00121C  D7E8               	goto	i2l2511
  6882  00121E                     i2l2525:
  6883                           
  6884                           ;EEPROM.c: 90: }
  6885                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  6886  00121E  50F2               	movf	intcon,w,c	;volatile
  6887  001220  09C0               	iorlw	192
  6888  001222  6EF2               	movwf	intcon,c	;volatile
  6889  001224  0012               	return		;funcret
  6890  001226                     __end_of_EEWriteDouble:
  6891                           	opt stack 0
  6892                           pclatu	equ	0xFFB
  6893                           pclath	equ	0xFFA
  6894                           tblptru	equ	0xFF8
  6895                           tblptrh	equ	0xFF7
  6896                           tblptrl	equ	0xFF6
  6897                           tablat	equ	0xFF5
  6898                           prodh	equ	0xFF4
  6899                           prodl	equ	0xFF3
  6900                           intcon	equ	0xFF2
  6901                           intcon2	equ	0xFF1
  6902                           postinc0	equ	0xFEE
  6903                           fsr0h	equ	0xFEA
  6904                           fsr0l	equ	0xFE9
  6905                           wreg	equ	0xFE8
  6906                           fsr1h	equ	0xFE2
  6907                           fsr1l	equ	0xFE1
  6908                           indf2	equ	0xFDF
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _EEDisassembleDouble *****************
  6914 ;; Defined at:
  6915 ;;		line 48 in file "EEPROM.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  dub             3    0[COMRAM] unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6929 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;Total ram usage:        3 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; This function calls:
  6936 ;;		Nothing
  6937 ;; This function is called by:
  6938 ;;		_EEWriteDouble
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text48
  6943  0013F8                     __ptext48:
  6944                           	opt stack 0
  6945  0013F8                     _EEDisassembleDouble:
  6946                           	opt stack 22
  6947                           
  6948                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  6949                           
  6950                           ;incstack = 0
  6951  0013F8  0E01               	movlw	low EEDisassembleDouble@dub
  6952  0013FA  6E43               	movwf	_DoublePtr,c
  6953  0013FC  0E00               	movlw	high EEDisassembleDouble@dub
  6954  0013FE  6E44               	movwf	_DoublePtr+1,c
  6955                           
  6956                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  6957  001400  C043  FFD9         	movff	_DoublePtr,fsr2l
  6958  001404  C044  FFDA         	movff	_DoublePtr+1,fsr2h
  6959  001408  50DF               	movf	indf2,w,c
  6960  00140A  6E3D               	movwf	_DDouble,c
  6961                           
  6962                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  6963  00140C  EE20 F001          	lfsr	2,1
  6964  001410  5043               	movf	_DoublePtr,w,c
  6965  001412  26D9               	addwf	fsr2l,f,c
  6966  001414  5044               	movf	_DoublePtr+1,w,c
  6967  001416  22DA               	addwfc	fsr2h,f,c
  6968  001418  50DF               	movf	indf2,w,c
  6969  00141A  6E3E               	movwf	_DDouble+1,c
  6970                           
  6971                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  6972  00141C  EE20 F002          	lfsr	2,2
  6973  001420  5043               	movf	_DoublePtr,w,c
  6974  001422  26D9               	addwf	fsr2l,f,c
  6975  001424  5044               	movf	_DoublePtr+1,w,c
  6976  001426  22DA               	addwfc	fsr2h,f,c
  6977  001428  50DF               	movf	indf2,w,c
  6978  00142A  6E3F               	movwf	_DDouble+2,c
  6979  00142C  0012               	return		;funcret
  6980  00142E                     __end_of_EEDisassembleDouble:
  6981                           	opt stack 0
  6982                           pclatu	equ	0xFFB
  6983                           pclath	equ	0xFFA
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           intcon2	equ	0xFF1
  6992                           postinc0	equ	0xFEE
  6993                           fsr0h	equ	0xFEA
  6994                           fsr0l	equ	0xFE9
  6995                           wreg	equ	0xFE8
  6996                           fsr1h	equ	0xFE2
  6997                           fsr1l	equ	0xFE1
  6998                           indf2	equ	0xFDF
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function _EEWriteChar *****************
  7004 ;; Defined at:
  7005 ;;		line 122 in file "EEPROM.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  location        1    wreg     unsigned char 
  7008 ;;  ch              1    4[COMRAM] unsigned char 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  location        1    5[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        2 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    1
  7027 ;; This function calls:
  7028 ;;		_Write_b_eep
  7029 ;;		i2_Busy_eep
  7030 ;; This function is called by:
  7031 ;;		_HLVDInt
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text49
  7036  0015C0                     __ptext49:
  7037                           	opt stack 0
  7038  0015C0                     _EEWriteChar:
  7039                           	opt stack 22
  7040                           
  7041                           ;incstack = 0
  7042                           ;EEWriteChar@location stored from wreg
  7043  0015C0  6E06               	movwf	EEWriteChar@location,c
  7044                           
  7045                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7046  0015C2  50F2               	movf	intcon,w,c	;volatile
  7047  0015C4  0B3F               	andlw	63
  7048  0015C6  6EF2               	movwf	intcon,c	;volatile
  7049                           
  7050                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7051  0015C8  C006  F001         	movff	EEWriteChar@location,Write_b_eep@badd
  7052  0015CC  6A02               	clrf	Write_b_eep@badd+1,c
  7053  0015CE  C005  F003         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7054  0015D2  ECA2  F009         	call	_Write_b_eep	;wreg free
  7055                           
  7056                           ;EEPROM.c: 127: Busy_eep();
  7057  0015D6  EC71  F00B         	call	i2_Busy_eep	;wreg free
  7058                           
  7059                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7060  0015DA  50F2               	movf	intcon,w,c	;volatile
  7061  0015DC  09C0               	iorlw	192
  7062  0015DE  6EF2               	movwf	intcon,c	;volatile
  7063  0015E0  0012               	return		;funcret
  7064  0015E2                     __end_of_EEWriteChar:
  7065                           	opt stack 0
  7066                           pclatu	equ	0xFFB
  7067                           pclath	equ	0xFFA
  7068                           tblptru	equ	0xFF8
  7069                           tblptrh	equ	0xFF7
  7070                           tblptrl	equ	0xFF6
  7071                           tablat	equ	0xFF5
  7072                           prodh	equ	0xFF4
  7073                           prodl	equ	0xFF3
  7074                           intcon	equ	0xFF2
  7075                           intcon2	equ	0xFF1
  7076                           postinc0	equ	0xFEE
  7077                           fsr0h	equ	0xFEA
  7078                           fsr0l	equ	0xFE9
  7079                           wreg	equ	0xFE8
  7080                           fsr1h	equ	0xFE2
  7081                           fsr1l	equ	0xFE1
  7082                           indf2	equ	0xFDF
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function i2_Busy_eep *****************
  7088 ;; Defined at:
  7089 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;		None
  7092 ;; Auto vars:     Size  Location     Type
  7093 ;;		None
  7094 ;; Return value:  Size  Location     Type
  7095 ;;		None               void
  7096 ;; Registers used:
  7097 ;;		None
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/0
  7100 ;;		On exit  : 0/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;Total ram usage:        0 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		_EEWriteDouble
  7113 ;;		_EEWriteChar
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text50
  7118  0016E2                     __ptext50:
  7119                           	opt stack 0
  7120  0016E2                     i2_Busy_eep:
  7121                           	opt stack 22
  7122                           
  7123                           ;incstack = 0
  7124  0016E2  D000               	goto	i2l532
  7125  0016E4                     i2l532:
  7126  0016E4  B2A6               	btfsc	4006,1,c	;volatile
  7127  0016E6  D7FE               	goto	i2l532
  7128  0016E8  0012               	return		;funcret
  7129  0016EA                     __end_ofi2_Busy_eep:
  7130                           	opt stack 0
  7131                           pclatu	equ	0xFFB
  7132                           pclath	equ	0xFFA
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           intcon2	equ	0xFF1
  7141                           postinc0	equ	0xFEE
  7142                           fsr0h	equ	0xFEA
  7143                           fsr0l	equ	0xFE9
  7144                           wreg	equ	0xFE8
  7145                           fsr1h	equ	0xFE2
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           fsr2h	equ	0xFDA
  7149                           fsr2l	equ	0xFD9
  7150                           status	equ	0xFD8
  7151                           
  7152 ;; *************** function _Write_b_eep *****************
  7153 ;; Defined at:
  7154 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  badd            2    0[COMRAM] unsigned int 
  7157 ;;  bdat            1    2[COMRAM] unsigned char 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  GIE_BIT_VAL     1    3[COMRAM] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7169 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;Total ram usage:        4 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_EEWriteDouble
  7179 ;;		_EEWriteChar
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text51
  7184  001344                     __ptext51:
  7185                           	opt stack 0
  7186  001344                     _Write_b_eep:
  7187                           	opt stack 22
  7188                           
  7189                           ;incstack = 0
  7190  001344  0E00               	movlw	0
  7191  001346  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7192  001348  5002               	movf	Write_b_eep@badd+1,w,c
  7193  00134A  0B03               	andlw	3
  7194  00134C  6EAA               	movwf	4010,c	;volatile
  7195  00134E  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7196  001352  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7197  001356  9EA6               	bcf	4006,7,c	;volatile
  7198  001358  9CA6               	bcf	4006,6,c	;volatile
  7199  00135A  84A6               	bsf	4006,2,c	;volatile
  7200  00135C  0E00               	movlw	0
  7201  00135E  BEF2               	btfsc	intcon,7,c	;volatile
  7202  001360  0E01               	movlw	1
  7203  001362  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7204  001364  9EF2               	bcf	intcon,7,c	;volatile
  7205  001366  0E55               	movlw	85
  7206  001368  6EA7               	movwf	4007,c	;volatile
  7207  00136A  0EAA               	movlw	170
  7208  00136C  6EA7               	movwf	4007,c	;volatile
  7209  00136E  82A6               	bsf	4006,1,c	;volatile
  7210  001370  D000               	goto	i2l563
  7211  001372                     i2l563:
  7212  001372  B2A6               	btfsc	4006,1,c	;volatile
  7213  001374  D7FE               	goto	i2l563
  7214  001376  B004               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7215  001378  D002               	bra	i2u142_45
  7216  00137A  9EF2               	bcf	intcon,7,c	;volatile
  7217  00137C  D001               	bra	i2u142_46
  7218  00137E                     i2u142_45:
  7219  00137E  8EF2               	bsf	intcon,7,c	;volatile
  7220  001380                     i2u142_46:
  7221  001380  94A6               	bcf	4006,2,c	;volatile
  7222  001382  0012               	return		;funcret
  7223  001384                     __end_of_Write_b_eep:
  7224                           	opt stack 0
  7225  0000                     pclatu	equ	0xFFB
  7226                           pclath	equ	0xFFA
  7227                           tblptru	equ	0xFF8
  7228                           tblptrh	equ	0xFF7
  7229                           tblptrl	equ	0xFF6
  7230                           tablat	equ	0xFF5
  7231                           prodh	equ	0xFF4
  7232                           prodl	equ	0xFF3
  7233                           intcon	equ	0xFF2
  7234                           intcon2	equ	0xFF1
  7235                           postinc0	equ	0xFEE
  7236                           fsr0h	equ	0xFEA
  7237                           fsr0l	equ	0xFE9
  7238                           wreg	equ	0xFE8
  7239                           fsr1h	equ	0xFE2
  7240                           fsr1l	equ	0xFE1
  7241                           indf2	equ	0xFDF
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           pclatu	equ	0xFFB
  7246                           pclath	equ	0xFFA
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           intcon2	equ	0xFF1
  7255                           postinc0	equ	0xFEE
  7256                           fsr0h	equ	0xFEA
  7257                           fsr0l	equ	0xFE9
  7258                           wreg	equ	0xFE8
  7259                           fsr1h	equ	0xFE2
  7260                           fsr1l	equ	0xFE1
  7261                           indf2	equ	0xFDF
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266                           	psect	rparam
  7267  0000                     pclatu	equ	0xFFB
  7268                           pclath	equ	0xFFA
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           intcon	equ	0xFF2
  7276                           intcon2	equ	0xFF1
  7277                           postinc0	equ	0xFEE
  7278                           fsr0h	equ	0xFEA
  7279                           fsr0l	equ	0xFE9
  7280                           wreg	equ	0xFE8
  7281                           fsr1h	equ	0xFE2
  7282                           fsr1l	equ	0xFE1
  7283                           indf2	equ	0xFDF
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      70
    BANK0           160     51      86
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _SPIDisassembleDouble->_GenerateChecksum
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_DetectMovement

Critical Paths under _ISR in COMRAM

    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   29255
                                             54 COMRAM     2     2      0
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    1145
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     278
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     278
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      93
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     774
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     774
                                             36 COMRAM     2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     493
                                             31 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3     116
                                             25 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     281
                                             27 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     216
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _calculatePID                                        15     9      6   18913
                                             36 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     448
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5245
                                             21 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4881
                                              9 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     219
                                             25 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     660
                                             25 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3152
                                             33 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3     116
                                             25 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     606
                                             27 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRTDpos                                          12    10      2     235
                                             26 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTD2Angle                                            3     0      3    6593
                                              9 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2572
                                             33 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3836
                                             48 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                             25 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ImplementPIDMotion                                   4     2      2     627
                                             29 COMRAM     4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    7     5      2     581
                                             34 COMRAM     7     5      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     247
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       9     7      2     198
                                             25 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0    1913
                                              9 COMRAM    16    16      0
                            _HLVDInt
                            _INT0Int
                             _SPIInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (7) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (8) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _HLVDInt                                              0     0      0    1913
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (8) _EEWriteDouble                                        5     2      3     819
                                              4 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (9) _EEDisassembleDouble                                  3     0      3     104
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) _EEWriteChar                                          2     1      1    1094
                                              4 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (9) i2_Busy_eep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Write_b_eep                                          4     1      3     346
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
   _ImplementPIDMotion
     _abs
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1

 _ISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     33      56       5       53.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     38      46       1       73.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      32        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 29 03:10:00 2015

      __size_of_MotorDriverInit 0024                              l31 149E                              l40 15BE  
                            l43 1004                              l37 15A8                              l49 1078  
                            _Kd 0099                              _Ki 009C                              _Kp 009F  
           ?_EEReassembleDouble 001A                    ___ftadd@exp1 0074                    ___ftadd@exp2 0073  
     ImplementJSMotion@CCPinput 0028                    ___ftadd@sign 0072                             l250 1644  
                           l148 040C                             l270 1342                             l342 12FE  
                           l184 1086                             l256 16B0                             l352 117C  
                           l336 0FFE                             l504 14E8                             l185 1090  
                           l194 13F6                             l186 10D0                             l259 16B8  
                           l267 145E                             l532 16DC                             l358 1600  
                           l481 0122                             l642 14DC                             l643 14E4  
                           l548 1634                             l485 0150                             l590 1108  
                           l582 10E6                             l831 1672                             l591 110C  
                           l487 017E                             l824 1684                             l584 10EA  
                           l585 10EC                             l836 16BC                             l588 1106  
                           l589 1120                             l838 16C4                             l928 0CF4  
                           l939 0CCC                             l972 0644                             l974 066E  
                           l983 0752                             l992 077C                             l968 060A  
                           l969 081E                             _PR2 000FCB                             _ISR 0008  
                           _abs 14BE            __size_of_Write_b_eep 0040                             prod 000FF3  
                           wreg 000FE8                            ?_ISR 0001                 __end_of_INT0Int 159E  
                  ___ftdiv@cntr 002B                 __end_of_HLVDInt 0DAE                      _Delay1TCYx 16BA  
                  ___ftdiv@sign 0030                    __CFG_WDT$OFF 000000                            l1000 0B62  
                          l1003 0B2E                            l1015 0A80                            l1032 1274  
                          l1009 0EF8                            l1025 156C                            ?_abs 001A  
                          l1036 0950                            l1165 1530                            l3201 0CD4  
                          l3211 1676                            l3207 0CE6                            l3215 1664  
                          l3231 10F0                            l3305 07A8                            l3161 113C  
                          l3315 07F8                            l3235 1110                            l3413 0AC8  
                          l3157 1134                            l3191 0C94                            l3183 0C50  
                          l3407 0AA0                            l3511 0EC8                            l3263 0652  
                          l3193 0CB4                            l3185 0C5C                            l3433 0B08  
                          l3409 0ABA                            l3257 0618                            l3169 1164  
                          l3329 14AC                            l3195 0CC0                            l3187 0C7C  
                          l3179 0C40                            l3443 0B3C                            l3507 0E96  
                          l3291 0702                            l3531 084A                            l3453 097A  
                          l3517 0EF4                            l3285 06D6                            l3269 0664  
                          l3607 106E                            l3623 0F2C                            l3615 0F0C  
                          l3455 099E                            l3375 1436                            l3287 06E6  
                          l3279 06A6                            l3481 0A20                            l3473 09F0  
                          l3385 145A                            l3297 0732                            l3289 06F6  
                          l3561 0912                            l3553 08E2                            l3801 00DC  
                          l3643 0BA6                            l3627 0F3E                            l3619 0F24  
                          l3491 0A5A                            l3483 0A28                            l3459 09AC  
                          l3379 1442                            l3299 0742                            l3555 08EA  
                          l3563 0920                            l3477 0A08                            l3549 08CE  
                          l3661 0334                            l3805 00F8                            l3821 012A  
                          l3639 0B88                            l3487 0A40                            l3567 093E  
                          l3559 0900                            l3903 02E4                            l3831 0158  
                          l3815 0104                            l3649 0BE4                            l3673 04A0  
                          l3691 108A                            l3499 124A                            l3667 03BC  
                          l3835 0164                            l3819 011C                            l3771 002C  
                          l3853 01C2                            l3861 01FA                            l3599 105E  
                          l3871 0222                            l3863 0200                            l3857 01DE  
                          l3849 01A6                            l3793 00A4                            l3785 006C  
                          l3865 0204                            l3885 0284                            l3797 00C0  
                          l3789 0088                            u3100 0870                            u3105 0866  
                          u3081 0836                            u3250 0F3A                            u2661 05B8  
                          u2671 05D6                            u2921 0A92                            u2941 0AB0  
                          u2971 0966                            u3667 1666                            u3677 1678  
                          u2991 098E                 __end_of_PIDInit 12BC  ImplementJSMotion@JoystickValue 0023  
          ??_EEReassembleDouble 001D                    EEReadChar@ch 001D                 __end_of_TMR0Int 1698  
                          abs@a 001A                            _main 001C                    ___ftpack@arg 001A  
                   _DeadbandLow 0046                    ___ftpack@exp 001D                 __end_of_RTDInit 1490  
               __end_of_SPIInit 161C                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            pclat 000FFA  
                ??_EEReadDouble 0023                            prodh 000FF4                            prodl 000FF3  
                          start 0018             __size_of_EEPROMInit 0014                    ?_EEWriteChar 0005  
                  ___ftmul@cntr 0067                    ___param_bank 000010                    ___ftmul@sign 0068  
 __size_of_InitializeInterrupts 000A                           ??_ISR 000A                     _Delay10TCYx 1674  
              __end_of_EEBootUp 1000                    ___fttol@exp1 0083                           ??_abs 001C  
                  ___fttol@lval 007F                     _Delay1KTCYx 1662                     ReadRTDpos@x 0024  
             RTD2Angle@RTDAngle 0069                           ?_main 0001                           _EEADR 000FA9  
               __end_of___ftadd 0820                 __end_of___ftdiv 0B64                 __end_of___ftneg 157A  
               __end_of___ftmul 0A82                           _T0CON 000FD5                 __end_of___ftsub 1276  
               __end_of___fttol 0952                           _T2CON 000FCA                           _T3CON 000FB1  
                         i2l515 0E2A                           i2l532 16E4                           i2l519 1592  
                         i2l563 1372              __size_of_RTD2Angle 0038                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001F                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 001A  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 0004  
                  _DeadbandHigh 0045                           _error 00A2                   ___ftpack@sign 001E  
                    _DoubleSPIS 0039                           main@x 0038                   ??_ReceiveSPI1 001A  
                         tablat 000FF5                     ?i2_Busy_eep 0001                           status 000FD8  
                 EEReadDouble@x 0024      __size_of_ImplementJSMotion 00CC           EEWriteDouble@location 0008  
           GenerateChecksum@sum 001A                      _ReadRTDpos 107A                      _KillMotors 16D0  
               __initialization 117E                    __end_of_main 02EC                  _DetectJoystick 159E  
                _DetectMovement 1000                      _Read_b_eep 161C                __end_of_Busy_eep 16E2  
         EEReassembleDouble@dub 001D                  __CFG_OSC$HSPLL 000000                __end_of_SendSPI1 164E  
              __end_of_OpenSPI1 1128                          ??_main 0037                   ___fttol@sign1 007E  
                 __activetblptr 000003               ??_MotorDriverInit 001A         DetectMovement@ADCresult 0021  
                     ??_INT0Int 0001                       ??_HLVDInt 000A                       ??_PIDInit 001A  
                     ??_TMR0Int 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                       ??_RTDInit 001B                          _EEDATA 000FA8  
                   ?_Delay1TCYx 0001                       ??_SPIInit 001D                          _CCPR3L 000FB8  
                        _EECON2 000FA7                __end_of___ftpack 0CF6           __size_of_calculatePID 02B6  
                        i2l3105 0E1C                          i2l2511 11EE                          i2l2515 11F6  
                        i2l2525 121E                          i2l3095 0E02                          i2l3099 0E0C  
                        i2l2939 1588                          _INTCON 000FF2                __end_of___lwtoft 1532  
                        _SPIInt 1698               __end_of_RTD2Angle 13F8             __end_of_ReceiveSPI1 16BA  
        __end_of_DetectJoystick 15C0          __end_of_DetectMovement 107A                OpenSPI1@bus_mode 001A  
                 _EEWriteDouble 11D2                          ___ftge 0E64                       ??___ftadd 006F  
                     ??___ftdiv 0028                       ??___ftneg 001D                       ??___ftmul 0060  
                     ??___ftsub 0037                       ??___fttol 0079                          _intErr 00A5  
                        clear_0 1184                          clear_1 1190             __size_ofi2_Busy_eep 0008  
         ___ftmul@f3_as_product 0064                   main@temporary 0037                    ??_EEPROMInit 0027  
   __size_of_ImplementPIDMotion 0086                    __pdataCOMRAM 0045                    _calculatePID 02EC  
          __end_of_EEReadDouble 117E               _calculatePID$3367 008D               _calculatePID$3368 0090  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
             ?_GenerateChecksum 0001                       ?_EEBootUp 0001                      __accesstop 0060  
       __end_of__initialization 11CC              ??_GenerateChecksum 001A                      ___ftadd@f1 0069  
                    ___ftadd@f2 006C                      ___ftge@ff1 001A                      ___ftge@ff2 001D  
                 ___rparam_used 000001                      ___ftdiv@f1 0022                      ___ftdiv@f2 0025  
                    ___ftdiv@f3 002C              EEReadChar@location 001C                      ___ftneg@f1 001A  
                   ?_ReadRTDpos 001B                     ?_KillMotors 0001                    ??_EEReadChar 001C  
                ?_EEWriteDouble 0005                      ___ftmul@f1 0031                      ___ftmul@f2 0034  
               ?_DetectJoystick 0001                 ?_DetectMovement 001A              __end_of_EEPROMInit 1662  
                    ___ftsub@f1 0075                      ___ftsub@f2 0078                      ___fttol@f1 0075  
                __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 142E                    __pidataBANK0 16EA  
          __size_of_EEWriteChar 0022                     ?_Read_b_eep 001A             __size_of_Delay1TCYx 000C  
             GenerateChecksum@y 001B                      ___lwtoft@c 0022    __size_of_SPIReassembleDouble 0044  
            __end_of_EEReadChar 1602                      __pbssBANK0 0093                     _ReceiveSPI1 16AA  
                    ??_EEBootUp 0025                       ?_Busy_eep 0001                   ?_JoystickInit 0001  
                       ?_SPIInt 0001                       ?_SendSPI1 0001                       ?_OpenSPI1 001A  
                       ?___ftge 001A                    ?_Delay10TCYx 0001                  EEWriteDouble@x 0009  
                       _CCP3CON 000FB7                    ?_Delay1KTCYx 0001                       ?___ftpack 001A  
                 ??_Write_b_eep 0004                       ?___lwtoft 0022                         _HLVDCON 000FD2  
                       _INT0Int 157A                         _HLVDInt 0CF6    __end_of_InitializeInterrupts 16D0  
                       _PIDInit 1276                         _DDouble 003D             __size_of_ReadRTDpos 0058  
           __size_of_KillMotors 000A                   _PIDEnableFlag 00AF                         _SSP1BUF 000FC9  
                       _TMR0Int 1686      ImplementPIDMotion@PIDValue 001E                         _RTDInit 1460  
                       _SPIInit 1602                         _SPIflag 00B0                EEWriteDouble@dub 0005  
           __size_of_Read_b_eep 001A                  ??_JoystickInit 001A                    ??i2_Busy_eep 0001  
   __size_of_EEReassembleDouble 0044                      ??_Busy_eep 001A                         _Command 00AD  
               __size_of_SPIInt 0012                      ??_SendSPI1 001A                 ??_EEWriteDouble 0008  
                    ??_OpenSPI1 001C             EEWriteChar@location 0006                         __Hparam 0000  
                       __Lparam 0000                 _MotorDriverInit 1532                 __size_of___ftge 0096  
                       ___ftadd 05A2                         ___ftdiv 0A82                         ___ftneg 1556  
                       ___ftmul 0952                         ___ftsub 1226                         ___fttol 0820  
                    _dummy_byte 00B2           __size_of_EEReadDouble 0056                    SendSPI1@data 001B  
                       __pcinit 117E                      ??___ftpack 001F                 Delay10TCYx@unit 001A  
                       __ramtop 1000                      _initialize 14E6                    SendSPI1@temp 001A  
                       __ptext0 001C                         __ptext1 14E6                         __ptext2 1602  
                       __ptext3 10D2                         __ptext4 1460                         __ptext5 16BA  
                       __ptext6 1662                         __ptext7 1276                         __ptext8 1532  
                       __ptext9 1490                      ??___lwtoft 0025                       _T0CONbits 000FD5  
                  __size_of_ISR 0E5C                    __size_of_abs 0028              __end_ofi2_Busy_eep 16EA  
                       _prevErr 00A8   __size_of_SPIDisassembleDouble 003C             __end_of_Write_b_eep 1384  
                  ??_Delay1TCYx 001A                  __pintcode_body 0DAE            end_of_initialization 11CC  
                       int_func 0DAE               OpenSPI1@smp_phase 001B                    _EEReadDouble 1128  
         ReadRTDpos@LowPosition 0021                      _motorInput 00AB                       _RTD2Angle 13C0  
                       postinc0 000FEE               OpenSPI1@sync_mode 001C              __end_of_Delay1TCYx 16C6  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _PORTCbits 000F82  
                     _PORTEbits 000F84                       _PORTJbits 000F88                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISEbits 000F96  
                     _TRISFbits 000F97                       _TRISGbits 000F98                       _TRISJbits 000F9A  
       __end_of_MotorDriverInit 1556                ??_DetectJoystick 001A                ??_DetectMovement 001C  
                   ___ftdiv@exp 002F               __size_of_EEBootUp 0080             _SPIReassembleDouble 1300  
                   _CCP3CONbits 000FB7                  __end_of_SPIInt 16AA                    ??_ReadRTDpos 001D  
                  ??_KillMotors 0001                     ___ftmul@exp 0063            _InitializeInterrupts 16C6  
                    ?_RTD2Angle 0069       __size_of_GenerateChecksum 0032                    ??_Read_b_eep 001C  
                __end_of___ftge 0EFA            __size_of_Delay10TCYx 0012                   __pidataCOMRAM 16ED  
    __end_of_ImplementPIDMotion 0F80                     ?_initialize 0001                     _Write_b_eep 1344  
          __end_of_JoystickInit 14BE            __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 001A  
                     _DoublePtr 0043             start_initialization 117E                 _CurrentVelocity 0096  
                  _CurrentAngle 0093                     __end_of_ISR 0E64                     __end_of_abs 14E6  
            __end_of_ReadRTDpos 10D2              __end_of_KillMotors 16DA                    ?_ReceiveSPI1 0001  
            __end_of_Read_b_eep 1636            EEReadDouble@location 0023                        ??_SPIInt 0001  
             __size_of_Busy_eep 0008            calculatePID@setpoint 0087                   ??_EEWriteChar 0006  
        ReadRTDpos@HighPosition 0020               __size_of_SendSPI1 0018               __size_of_OpenSPI1 0056  
         ?_InitializeInterrupts 0001                        ??___ftge 0020                     __pdataBANK0 00B3  
         ??_SPIReassembleDouble 001D    __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6  
                      ?_INT0Int 0001                        ?_HLVDInt 0001                     __pbssCOMRAM 0039  
             __size_of___lwtoft 0026                   __pcstackBANK0 0060                        ?_PIDInit 0001  
                      ?_TMR0Int 0001              calculatePID@derErr 008A                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 001A                ?_MotorDriverInit 0001  
           __size_of_initialize 0026          SPIReassembleDouble@dub 001D                   EEWriteChar@ch 0005  
                     __pintcode 0008                     ??_RTD2Angle 0037                        ?___ftadd 0069  
                      ?___ftdiv 0022                        ?___ftneg 001A                        ?___ftmul 0031  
                      ?___ftsub 0075                        ?___fttol 0075             __end_of_EEWriteChar 15E2  
    __end_of_EEReassembleDouble 1300                        _EEBootUp 0F80                        _IPR2bits 000FA2  
                      _PIE1bits 000F9D                        _PIE2bits 000FA0          ??_InitializeInterrupts 001A  
         __end_of_EEWriteDouble 1226                        i2u142_45 137E                        i2u142_46 1380  
  __end_of_SPIDisassembleDouble 13C0                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
         __size_of_JoystickInit 002E                        _SSP1CON1 000FC6                        _TMR0Flag 00B1  
              _GenerateChecksum 142E                        _SSP1STAT 000FC7                      _ADCON0bits 000FC2  
               Write_b_eep@badd 0001                 Write_b_eep@bdat 0003                   ?_calculatePID 0084  
              __size_of_INT0Int 0024                __size_of_HLVDInt 00B8                __size_of_PIDInit 0046  
                   _INTCON2bits 000FF1                __size_of_TMR0Int 0012                __size_of_RTDInit 0030  
              __size_of_SPIInit 001A                        _Busy_eep 16DA            __size_of_ReceiveSPI1 0010  
                  _JoystickInit 1490                        _SendSPI1 1636                      _EECON1bits 000FA6  
                      _SetAngle 0040                        _OpenSPI1 10D2          ReadRTDpos@FullPosition 0022  
                      __Hrparam 0000                     _EEWriteChar 15C0                        __Lrparam 0000  
                  _JSEnableFlag 00AE                __size_of___ftadd 027E                __size_of___ftdiv 00E2  
              __size_of___ftneg 0024                __size_of___ftmul 0130                __size_of___ftsub 0050  
              __size_of___fttol 0132                    ??_initialize 0027                        ___ftpack 0C30  
                  ?_Write_b_eep 0001               calculatePID@angle 0084                  ??_calculatePID 0037  
                      ___lwtoft 150C                      _EEPROMInit 164E                        __ptext10 16C6  
                      __ptext11 164E                        __ptext20 1226                        __ptext12 0F80  
                      __ptext21 05A2                        __ptext13 1128                        __ptext30 107A  
                      __ptext22 1556                        __ptext14 12BC                        __ptext31 1674  
                      __ptext23 0E64                        __ptext15 16DA                        __ptext40 159E  
                      __ptext32 13C0                        __ptext24 0A82                        __ptext16 15E2  
                      __ptext33 150C                        __ptext25 1636                        __ptext17 161C  
                      __ptext50 16E2                        __ptext42 1686                        __ptext34 0952  
                      __ptext26 1300                        __ptext18 02EC                        __ptext51 1344  
                      __ptext43 1698                        __ptext35 0C30                        __ptext27 1384  
                      __ptext19 0820                        __ptext44 157A                        __ptext36 0EFA  
                      __ptext28 142E                        __ptext45 16D0                        __ptext37 0B64  
                      __ptext29 16AA                        __ptext46 0CF6                        __ptext38 14BE  
                      __ptext47 11D2                        __ptext39 1000                        __ptext48 13F8  
                      __ptext49 15C0                    _SSP1CON1bits 000FC6              _ImplementPIDMotion 0EFA  
                 __size_of_main 02D0             _EEDisassembleDouble 13F8                  Delay1TCYx@unit 001A  
           ?_ImplementPIDMotion 001E              __end_of_initialize 150C                        _loopTime 00B3  
                    _EEReadChar 15E2                   ??_Delay10TCYx 001A                   ??_Delay1KTCYx 001A  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0001            ??_ImplementPIDMotion 0020  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 1384                        intlevel2 0000  
                    _OSCCONbits 000FD3    DetectMovement@JoystickResult 001F               _ImplementJSMotion 0B64  
   __end_of_SPIReassembleDouble 1344              ?_ImplementJSMotion 0023         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 007A           ??_EEDisassembleDouble 0004             __end_of_Delay10TCYx 1686  
           ??_ImplementJSMotion 0025          EEDisassembleDouble@dub 0001                     ?_EEPROMInit 0001  
           __end_of_Delay1KTCYx 1674           ?_SPIDisassembleDouble 001C        __end_of_GenerateChecksum 1460  
                    i2_Busy_eep 16E2         SPIDisassembleDouble@dub 001C       __end_of_ImplementJSMotion 0C30  
          __end_of_calculatePID 05A2                   ?_EEReadDouble 0020                     ?_EEReadChar 0001  
            _EEReassembleDouble 12BC  
