

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Nov  9 02:57:16 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  002E84                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _DeadbandHigh
    88  002E84  00C8               	dw	200
    89                           
    90                           ;initializer for _DeadbandLow
    91  002E86  FF38               	dw	65336
    92                           
    93                           	psect	idataBANK0
    94  002E88                     __pidataBANK0:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _loopTime
    98                           ;PID.c: 5: unsigned char PIDEnableFlag;
    99                           ;PID.c: 6: unsigned char TMR0Flag = 0;
   100                           ;PID.c: 7: double Ki;
   101                           ;PID.c: 8: double Kp;
   102                           ;PID.c: 9: double Kd;
   103                           ;PID.c: 10: double SetAngle;
   104                           ;PID.c: 11: double CurrentAngle;
   105                           ;PID.c: 12: double error;
   106                           ;PID.c: 13: double prevErr;
   107                           ;PID.c: 14: double intErr;
   108                           ;PID.c: 15: int motorInput;
   109  002E88  C3                 	db	195
   110  002E89  F5                 	db	245
   111  002E8A  3C                 	db	60
   112                           
   113                           	psect	smallconst
   114  001000                     __psmallconst:
   115                           	opt stack 0
   116  001000  00                 	db	0
   117  001001                     _DataLodeSize:
   118                           	opt stack 0
   119  001001  025B               	dw	603
   120  001003                     __end_of_DataLodeSize:
   121                           	opt stack 0
   122  001003                     _TransmitLodeSize:
   123                           	opt stack 0
   124  001003  0711               	dw	1809
   125  001005                     __end_of_TransmitLodeSize:
   126                           	opt stack 0
   127  0000                     _ADCON0	set	4034
   128  0000                     _ADCON0bits	set	4034
   129  0000                     _ADCON1	set	4033
   130  0000                     _ADCON2	set	4032
   131  0000                     _ADRESH	set	4036
   132  0000                     _ADRESL	set	4035
   133  0000                     _CCP3CON	set	4023
   134  0000                     _CCP3CONbits	set	4023
   135  0000                     _CCPR3L	set	4024
   136  0000                     _EEADR	set	4009
   137  0000                     _EEADRH	set	4010
   138  0000                     _EECON1bits	set	4006
   139  0000                     _EECON2	set	4007
   140  0000                     _EEDATA	set	4008
   141  0000                     _HLVDCON	set	4050
   142  0000                     _INTCON	set	4082
   143  0000                     _INTCONbits	set	4082
   144  0000                     _IPR2bits	set	4002
   145  0000                     _OSCCONbits	set	4051
   146  0000                     _PIE1bits	set	3997
   147  0000                     _PIE2bits	set	4000
   148  0000                     _PIR1bits	set	3998
   149  0000                     _PIR2bits	set	4001
   150  0000                     _PIR3bits	set	4004
   151  0000                     _PORTA	set	3968
   152  0000                     _PORTAbits	set	3968
   153  0000                     _PORTB	set	3969
   154  0000                     _PORTBbits	set	3969
   155  0000                     _PORTC	set	3970
   156  0000                     _PORTCbits	set	3970
   157  0000                     _PORTD	set	3971
   158  0000                     _PORTE	set	3972
   159  0000                     _PORTEbits	set	3972
   160  0000                     _PORTF	set	3973
   161  0000                     _PORTG	set	3974
   162  0000                     _PORTH	set	3975
   163  0000                     _PORTJ	set	3976
   164  0000                     _PORTJbits	set	3976
   165  0000                     _PR2	set	4043
   166  0000                     _SSP1BUF	set	4041
   167  0000                     _SSP1CON1	set	4038
   168  0000                     _SSP1CON1bits	set	4038
   169  0000                     _SSP1STAT	set	4039
   170  0000                     _SSP1STATbits	set	4039
   171  0000                     _T0CON	set	4053
   172  0000                     _T0CONbits	set	4053
   173  0000                     _T2CON	set	4042
   174  0000                     _T3CON	set	4017
   175  0000                     _T3CONbits	set	4017
   176  0000                     _T4CONbits	set	3958
   177  0000                     _TMR0H	set	4055
   178  0000                     _TMR0L	set	4054
   179  0000                     _TMR3H	set	4019
   180  0000                     _TMR3L	set	4018
   181  0000                     _TMR4	set	3960
   182  0000                     _TRISAbits	set	3986
   183  0000                     _TRISBbits	set	3987
   184  0000                     _TRISCbits	set	3988
   185  0000                     _TRISD	set	3989
   186  0000                     _TRISEbits	set	3990
   187  0000                     _TRISFbits	set	3991
   188  0000                     _TRISGbits	set	3992
   189  0000                     _TRISH	set	3993
   190  0000                     _TRISJbits	set	3994
   191                           
   192                           ; #config settings
   193  001005  00                 	db	0	; dummy byte at the end
   194  0000                     
   195                           	psect	cinit
   196  00252E                     __pcinit:
   197                           	opt stack 0
   198  00252E                     start_initialization:
   199                           	opt stack 0
   200  00252E                     __initialization:
   201                           	opt stack 0
   202                           
   203                           ; Clear objects allocated to BIGRAM (3618 bytes)
   204  00252E  EE00  F0CD         	lfsr	0,__pbssBIGRAM
   205  002532  EE1E F022          	lfsr	1,3618
   206  002536                     clear_0:
   207  002536  6AEE               	clrf	postinc0,c
   208  002538  50E5               	movf	postdec1,w,c
   209  00253A  50E1               	movf	fsr1l,w,c
   210  00253C  E1FC               	bnz	clear_0
   211  00253E  50E2               	movf	fsr1h,w,c
   212  002540  E1FA               	bnz	clear_0
   213                           
   214                           ; Clear objects allocated to BANK0 (32 bytes)
   215  002542  EE00  F0AA         	lfsr	0,__pbssBANK0
   216  002546  0E20               	movlw	32
   217  002548                     clear_1:
   218  002548  6AEE               	clrf	postinc0,c
   219  00254A  06E8               	decf	wreg,f,c
   220  00254C  E1FD               	bnz	clear_1
   221                           
   222                           ; Clear objects allocated to COMRAM (14 bytes)
   223  00254E  EE00  F037         	lfsr	0,__pbssCOMRAM
   224  002552  0E0E               	movlw	14
   225  002554                     clear_2:
   226  002554  6AEE               	clrf	postinc0,c
   227  002556  06E8               	decf	wreg,f,c
   228  002558  E1FD               	bnz	clear_2
   229                           
   230                           ; Initialize objects allocated to BANK0 (3 bytes)
   231                           ; load TBLPTR registers with __pidataBANK0
   232  00255A  0E88               	movlw	low __pidataBANK0
   233  00255C  6EF6               	movwf	tblptrl,c
   234  00255E  0E2E               	movlw	high __pidataBANK0
   235  002560  6EF7               	movwf	tblptrh,c
   236  002562  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   237  002564  6EF8               	movwf	tblptru,c
   238  002566  0009               	tblrd		*+	;fetch initializer
   239  002568  CFF5 F0CA          	movff	tablat,__pdataBANK0
   240  00256C  0009               	tblrd		*+	;fetch initializer
   241  00256E  CFF5 F0CB          	movff	tablat,__pdataBANK0+1
   242  002572  0009               	tblrd		*+	;fetch initializer
   243  002574  CFF5 F0CC          	movff	tablat,__pdataBANK0+2
   244                           
   245                           ; Initialize objects allocated to COMRAM (4 bytes)
   246                           ; load TBLPTR registers with __pidataCOMRAM
   247  002578  0E84               	movlw	low __pidataCOMRAM
   248  00257A  6EF6               	movwf	tblptrl,c
   249  00257C  0E2E               	movlw	high __pidataCOMRAM
   250  00257E  6EF7               	movwf	tblptrh,c
   251  002580  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   252  002582  6EF8               	movwf	tblptru,c
   253  002584  EE00  F045         	lfsr	0,__pdataCOMRAM
   254  002588  EE10 F004          	lfsr	1,4
   255  00258C                     copy_data0:
   256  00258C  0009               	tblrd		*+
   257  00258E  CFF5 FFEE          	movff	tablat,postinc0
   258  002592  50E5               	movf	postdec1,w,c
   259  002594  50E1               	movf	fsr1l,w,c
   260  002596  E1FA               	bnz	copy_data0
   261  002598                     end_of_initialization:
   262                           	opt stack 0
   263  002598                     __end_of__initialization:
   264                           	opt stack 0
   265  002598  0100               	movlb	0
   266  00259A  EF03  F008         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1h	equ	0xFE2
   275                           fsr1l	equ	0xFE1
   276                           
   277                           	psect	bssCOMRAM
   278  000037                     __pbssCOMRAM:
   279                           	opt stack 0
   280  000037                     _DoubleSPIS:
   281                           	opt stack 0
   282  000037                     	ds	4
   283  00003B                     _DDouble:
   284                           	opt stack 0
   285  00003B                     	ds	3
   286  00003E                     _SetAngle:
   287                           	opt stack 0
   288  00003E                     	ds	3
   289  000041                     _DoublePtr:
   290                           	opt stack 0
   291  000041                     	ds	2
   292  000043                     _Command:
   293                           	opt stack 0
   294  000043                     	ds	1
   295  000044                     _timer4:
   296                           	opt stack 0
   297  000044                     	ds	1
   298                           tblptru	equ	0xFF8
   299                           tblptrh	equ	0xFF7
   300                           tblptrl	equ	0xFF6
   301                           tablat	equ	0xFF5
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           postdec1	equ	0xFE5
   305                           fsr1h	equ	0xFE2
   306                           fsr1l	equ	0xFE1
   307                           
   308                           	psect	dataCOMRAM
   309  000045                     __pdataCOMRAM:
   310                           	opt stack 0
   311  000045                     _DeadbandHigh:
   312                           	opt stack 0
   313  000045                     	ds	2
   314  000047                     _DeadbandLow:
   315                           	opt stack 0
   316  000047                     	ds	2
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1h	equ	0xFE2
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	bssBANK0
   328  0000AA                     __pbssBANK0:
   329                           	opt stack 0
   330  0000AA                     _CurrentAngle:
   331                           	opt stack 0
   332  0000AA                     	ds	3
   333  0000AD                     _CurrentVelocity:
   334                           	opt stack 0
   335  0000AD                     	ds	3
   336  0000B0                     _Kd:
   337                           	opt stack 0
   338  0000B0                     	ds	3
   339  0000B3                     _Ki:
   340                           	opt stack 0
   341  0000B3                     	ds	3
   342  0000B6                     _Kp:
   343                           	opt stack 0
   344  0000B6                     	ds	3
   345  0000B9                     _error:
   346                           	opt stack 0
   347  0000B9                     	ds	3
   348  0000BC                     _intErr:
   349                           	opt stack 0
   350  0000BC                     	ds	3
   351  0000BF                     _prevErr:
   352                           	opt stack 0
   353  0000BF                     	ds	3
   354  0000C2                     _motorInput:
   355                           	opt stack 0
   356  0000C2                     	ds	2
   357  0000C4                     _JSEnableFlag:
   358                           	opt stack 0
   359  0000C4                     	ds	1
   360  0000C5                     _PIDEnableFlag:
   361                           	opt stack 0
   362  0000C5                     	ds	1
   363  0000C6                     _RECFlag:
   364                           	opt stack 0
   365  0000C6                     	ds	1
   366  0000C7                     _SPIflag:
   367                           	opt stack 0
   368  0000C7                     	ds	1
   369  0000C8                     _TMR0Flag:
   370                           	opt stack 0
   371  0000C8                     	ds	1
   372  0000C9                     _dummy_byte:
   373                           	opt stack 0
   374  0000C9                     	ds	1
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1h	equ	0xFE2
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	dataBANK0
   386  0000CA                     __pdataBANK0:
   387                           	opt stack 0
   388  0000CA                     _loopTime:
   389                           	opt stack 0
   390  0000CA                     	ds	3
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1h	equ	0xFE2
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	bssBIGRAM
   402  0000CD                     __pbssBIGRAM:
   403                           	opt stack 0
   404  0000CD                     _DataLode:
   405                           	opt stack 0
   406  0000CD                     	ds	1809
   407  0007DE                     _TransmitLode:
   408                           	opt stack 0
   409  0007DE                     	ds	1809
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1h	equ	0xFE2
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	cstackBANK0
   421  000060                     __pcstackBANK0:
   422                           	opt stack 0
   423  000060                     ___ftdiv@cntr:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x0
   427  000060                     	ds	1
   428  000061                     ___ftdiv@f3:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x1
   432  000061                     	ds	3
   433  000064                     ___ftdiv@exp:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x4
   437  000064                     	ds	1
   438  000065                     ___ftdiv@sign:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x5
   442  000065                     	ds	1
   443  000066                     ?___ftmul:
   444                           	opt stack 0
   445  000066                     ___ftmul@f1:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0x6
   449  000066                     	ds	3
   450  000069                     ___ftmul@f2:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x9
   454  000069                     	ds	3
   455  00006C                     ??___ftmul:
   456                           
   457                           ; 0 bytes @ 0xC
   458  00006C                     	ds	3
   459  00006F                     ___ftmul@exp:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xF
   463  00006F                     	ds	1
   464  000070                     ___ftmul@f3_as_product:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0x10
   468  000070                     	ds	3
   469  000073                     ___ftmul@cntr:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x13
   473  000073                     	ds	1
   474  000074                     ___ftmul@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x14
   478  000074                     	ds	1
   479  000075                     ?_RTD2Angle:
   480                           	opt stack 0
   481  000075                     ?___fttol:
   482                           	opt stack 0
   483  000075                     RTD2Angle@RTDAngle:
   484                           	opt stack 0
   485  000075                     ___fttol@f1:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x15
   489  000075                     	ds	4
   490  000079                     ??___fttol:
   491                           
   492                           ; 0 bytes @ 0x19
   493  000079                     	ds	5
   494  00007E                     ___fttol@sign1:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x1E
   498  00007E                     	ds	1
   499  00007F                     ___fttol@lval:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x1F
   503  00007F                     	ds	4
   504  000083                     ___fttol@exp1:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x23
   508  000083                     	ds	1
   509  000084                     ?_abs:
   510                           	opt stack 0
   511  000084                     abs@a:
   512                           	opt stack 0
   513  000084                     calculatePID@angle:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x24
   517  000084                     	ds	2
   518  000086                     ImplementPIDMotion@PIDValue:
   519                           	opt stack 0
   520  000086                     ImplementJSMotion@JoystickValue:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x26
   524  000086                     	ds	1
   525  000087                     calculatePID@setpoint:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x27
   529  000087                     	ds	1
   530  000088                     ??_ImplementPIDMotion:
   531  000088                     ??_ImplementJSMotion:
   532                           
   533                           ; 0 bytes @ 0x28
   534  000088                     	ds	2
   535  00008A                     ImplementJSMotion@CCPinput:
   536                           	opt stack 0
   537  00008A                     calculatePID@derErr:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x2A
   541  00008A                     	ds	3
   542  00008D                     _calculatePID$3489:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x2D
   546  00008D                     	ds	3
   547  000090                     _calculatePID$3490:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x30
   551  000090                     	ds	3
   552  000093                     ZeroMotors@average:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x33
   556  000093                     	ds	3
   557  000096                     ZeroMotors@PrevAngle:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x36
   561  000096                     	ds	3
   562  000099                     main@trash:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x39
   566  000099                     	ds	1
   567  00009A                     main@saveKp:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x3A
   571  00009A                     	ds	3
   572  00009D                     main@saveKi:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x3D
   576  00009D                     	ds	3
   577  0000A0                     main@saveKd:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x40
   581  0000A0                     	ds	3
   582  0000A3                     main@saveSP:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x43
   586  0000A3                     	ds	3
   587  0000A6                     main@dtime:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x46
   591  0000A6                     	ds	1
   592  0000A7                     main@counter:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x47
   596  0000A7                     	ds	2
   597  0000A9                     main@x:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x49
   601  0000A9                     	ds	1
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1h	equ	0xFE2
   610                           fsr1l	equ	0xFE1
   611                           
   612                           	psect	cstackCOMRAM
   613  000001                     __pcstackCOMRAM:
   614                           	opt stack 0
   615  000001                     i2Write_b_eep@badd:
   616                           	opt stack 0
   617  000001                     i2EEDisassembleDouble@dub:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x0
   621  000001                     	ds	2
   622  000003                     i2Write_b_eep@bdat:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x2
   626  000003                     	ds	1
   627  000004                     i2Write_b_eep@GIE_BIT_VAL:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x3
   631  000004                     	ds	1
   632  000005                     i2EEWriteChar@ch:
   633                           	opt stack 0
   634  000005                     i2EEWriteDouble@dub:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x4
   638  000005                     	ds	1
   639  000006                     i2EEWriteChar@location:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x5
   643  000006                     	ds	2
   644  000008                     i2EEWriteDouble@location:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x7
   648  000008                     	ds	1
   649  000009                     i2EEWriteDouble@x:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x8
   653  000009                     	ds	1
   654  00000A                     ??_ISR:
   655  00000A                     
   656                           ; 0 bytes @ 0x9
   657  00000A                     	ds	14
   658  000018                     ?_DetectMovement:
   659                           	opt stack 0
   660  000018                     ?___lwdiv:
   661                           	opt stack 0
   662  000018                     ?___ftpack:
   663                           	opt stack 0
   664  000018                     ?_SPIReassembleDouble:
   665                           	opt stack 0
   666  000018                     ?_EEReassembleDouble:
   667                           	opt stack 0
   668  000018                     ?___ftneg:
   669                           	opt stack 0
   670  000018                     GenerateChecksum@sum:
   671                           	opt stack 0
   672  000018                     OpenSPI1@bus_mode:
   673                           	opt stack 0
   674  000018                     Delay10TCYx@unit:
   675                           	opt stack 0
   676  000018                     Delay1KTCYx@unit:
   677                           	opt stack 0
   678  000018                     Delay1TCYx@unit:
   679                           	opt stack 0
   680  000018                     Read_b_eep@badd:
   681                           	opt stack 0
   682  000018                     Write_b_eep@badd:
   683                           	opt stack 0
   684  000018                     ___lwdiv@dividend:
   685                           	opt stack 0
   686  000018                     EEDisassembleDouble@dub:
   687                           	opt stack 0
   688  000018                     ___ftpack@arg:
   689                           	opt stack 0
   690  000018                     ___ftge@ff1:
   691                           	opt stack 0
   692  000018                     ___ftneg@f1:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x17
   696  000018                     	ds	1
   697  000019                     ?_ReadRTDpos:
   698                           	opt stack 0
   699  000019                     GenerateChecksum@y:
   700                           	opt stack 0
   701  000019                     OpenSPI1@smp_phase:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x18
   705  000019                     	ds	1
   706  00001A                     ??_DetectMovement:
   707  00001A                     EEReadChar@location:
   708                           	opt stack 0
   709  00001A                     Write_b_eep@bdat:
   710                           	opt stack 0
   711  00001A                     OpenSPI1@sync_mode:
   712                           	opt stack 0
   713  00001A                     ___lwdiv@divisor:
   714                           	opt stack 0
   715  00001A                     SPIDisassembleDouble@dub:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x19
   719  00001A                     	ds	1
   720  00001B                     ??_ReadRTDpos:
   721  00001B                     SPIRestart@temp:
   722                           	opt stack 0
   723  00001B                     EEReadChar@ch:
   724                           	opt stack 0
   725  00001B                     Write_b_eep@GIE_BIT_VAL:
   726                           	opt stack 0
   727  00001B                     ___ftpack@exp:
   728                           	opt stack 0
   729  00001B                     DetectMovement@JoystickResult:
   730                           	opt stack 0
   731  00001B                     SPIReassembleDouble@dub:
   732                           	opt stack 0
   733  00001B                     EEReassembleDouble@dub:
   734                           	opt stack 0
   735  00001B                     ___ftge@ff2:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x1A
   739  00001B                     	ds	1
   740  00001C                     SendSPI1@temp:
   741                           	opt stack 0
   742  00001C                     EEWriteChar@ch:
   743                           	opt stack 0
   744  00001C                     ___ftpack@sign:
   745                           	opt stack 0
   746  00001C                     ___lwdiv@quotient:
   747                           	opt stack 0
   748  00001C                     EEWriteDouble@dub:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x1B
   752  00001C                     	ds	1
   753  00001D                     ??___ftpack:
   754  00001D                     SendSPI1@data:
   755                           	opt stack 0
   756  00001D                     EEWriteChar@location:
   757                           	opt stack 0
   758  00001D                     DetectMovement@ADCresult:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x1C
   762  00001D                     	ds	1
   763  00001E                     ??___ftge:
   764  00001E                     ?_EEReadDouble:
   765                           	opt stack 0
   766  00001E                     ReadRTDpos@HighPosition:
   767                           	opt stack 0
   768  00001E                     ___lwdiv@counter:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x1D
   772  00001E                     	ds	1
   773  00001F                     ?___wmul:
   774                           	opt stack 0
   775  00001F                     ReadRTDpos@LowPosition:
   776                           	opt stack 0
   777  00001F                     EEWriteDouble@location:
   778                           	opt stack 0
   779  00001F                     ___wmul@multiplier:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x1E
   783  00001F                     	ds	1
   784  000020                     ?___ftadd:
   785                           	opt stack 0
   786  000020                     ?___lwtoft:
   787                           	opt stack 0
   788  000020                     EEWriteDouble@x:
   789                           	opt stack 0
   790  000020                     ReadRTDpos@FullPosition:
   791                           	opt stack 0
   792  000020                     ___lwtoft@c:
   793                           	opt stack 0
   794  000020                     ___ftadd@f1:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x1F
   798  000020                     	ds	1
   799  000021                     EEReadDouble@location:
   800                           	opt stack 0
   801  000021                     ___wmul@multiplicand:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x20
   805  000021                     	ds	1
   806  000022                     ReadRTDpos@x:
   807                           	opt stack 0
   808  000022                     EEReadDouble@x:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x21
   812  000022                     	ds	1
   813  000023                     ___wmul@product:
   814                           	opt stack 0
   815  000023                     ___ftadd@f2:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x22
   819  000023                     	ds	2
   820  000025                     SPIDisassembleLode@Data:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x24
   824  000025                     	ds	1
   825  000026                     ??___ftadd:
   826                           
   827                           ; 0 bytes @ 0x25
   828  000026                     	ds	1
   829  000027                     SPIDisassembleLode@Transmit:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x26
   833  000027                     	ds	2
   834  000029                     ??_SPIDisassembleLode:
   835  000029                     ___ftadd@sign:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x28
   839  000029                     	ds	1
   840  00002A                     ___ftadd@exp2:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x29
   844  00002A                     	ds	1
   845  00002B                     ___ftadd@exp1:
   846                           	opt stack 0
   847  00002B                     SPIDisassembleLode@y:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x2A
   851  00002B                     	ds	1
   852  00002C                     ?___ftdiv:
   853                           	opt stack 0
   854  00002C                     ?___ftsub:
   855                           	opt stack 0
   856  00002C                     ___ftdiv@f1:
   857                           	opt stack 0
   858  00002C                     ___ftsub@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x2B
   862  00002C                     	ds	1
   863  00002D                     SPIDisassembleLode@dub:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x2C
   867  00002D                     	ds	2
   868  00002F                     ___ftdiv@f2:
   869                           	opt stack 0
   870  00002F                     ___ftsub@f2:
   871                           	opt stack 0
   872                           
   873                           ; 3 bytes @ 0x2E
   874  00002F                     	ds	3
   875  000032                     ??___ftdiv:
   876  000032                     
   877                           ; 0 bytes @ 0x31
   878  000032                     	ds	3
   879  000035                     ??_abs:
   880  000035                     
   881                           ; 0 bytes @ 0x34
   882  000035                     	ds	2
   883  000037                     tblptru	equ	0xFF8
   884                           tblptrh	equ	0xFF7
   885                           tblptrl	equ	0xFF6
   886                           tablat	equ	0xFF5
   887                           postinc0	equ	0xFEE
   888                           wreg	equ	0xFE8
   889                           postdec1	equ	0xFE5
   890                           fsr1h	equ	0xFE2
   891                           fsr1l	equ	0xFE1
   892                           
   893                           ; 0 bytes @ 0x36
   894 ;;
   895 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   896 ;;
   897 ;; *************** function _main *****************
   898 ;; Defined at:
   899 ;;		line 29 in file "RTDuC.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  saveSP          3   67[BANK0 ] PTR unsigned char 
   904 ;;  saveKd          3   64[BANK0 ] PTR unsigned char 
   905 ;;  saveKi          3   61[BANK0 ] PTR unsigned char 
   906 ;;  saveKp          3   58[BANK0 ] PTR unsigned char 
   907 ;;  counter         2   71[BANK0 ] unsigned int 
   908 ;;  x               1   73[BANK0 ] unsigned char 
   909 ;;  dtime           1   70[BANK0 ] const unsigned char 
   910 ;;  trash           1   57[BANK0 ] unsigned char 
   911 ;; Return value:  Size  Location     Type
   912 ;;		None               void
   913 ;; Registers used:
   914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;Total ram usage:       17 bytes
   925 ;; Hardware stack levels required when called:   10
   926 ;; This function calls:
   927 ;;		_Delay10TCYx
   928 ;;		_DetectJoystick
   929 ;;		_DetectMovement
   930 ;;		_ImplementJSMotion
   931 ;;		_ImplementPIDMotion
   932 ;;		_RTD2Angle
   933 ;;		_ReadRTDpos
   934 ;;		_ReceiveSPI1
   935 ;;		_SPIDisassembleDouble
   936 ;;		_SPIDisassembleLode
   937 ;;		_SPIReassembleDouble
   938 ;;		_SPIRestart
   939 ;;		_SaveAll
   940 ;;		_SendSPI1
   941 ;;		_ZeroMotors
   942 ;;		___wmul
   943 ;;		_calculatePID
   944 ;;		_initialize
   945 ;; This function is called by:
   946 ;;		Startup code after reset
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text0
   951  001006                     __ptext0:
   952                           	opt stack 0
   953  001006                     _main:
   954                           	opt stack 21
   955                           
   956                           ;RTDuC.c: 31: const unsigned char dtime = 10;
   957                           
   958                           ;incstack = 0
   959  001006  0E0A               	movlw	10
   960  001008  0100               	movlb	0	; () banked
   961  00100A  6FA6               	movwf	main@dtime& (0+255),b
   962                           
   963                           ;RTDuC.c: 32: unsigned char trash, x = 0;
   964  00100C  0E00               	movlw	0
   965  00100E  0100               	movlb	0	; () banked
   966  001010  6FA9               	movwf	main@x& (0+255),b
   967                           
   968                           ;RTDuC.c: 33: unsigned int counter = 0;
   969  001012  0E00               	movlw	0
   970  001014  0100               	movlb	0	; () banked
   971  001016  6FA8               	movwf	(main@counter+1)& (0+255),b
   972  001018  0E00               	movlw	0
   973  00101A  6FA7               	movwf	main@counter& (0+255),b
   974                           
   975                           ; BSR set to: 0
   976                           ;RTDuC.c: 35: initialize();
   977  00101C  ECA0  F015         	call	_initialize	;wreg free
   978                           
   979                           ;RTDuC.c: 37: SSP1BUF = dummy_byte;
   980  001020  C0C9  FFC9         	movff	_dummy_byte,4041	;volatile
   981                           
   982                           ;RTDuC.c: 38: PORTCbits.RC6 = 0;
   983  001024  9C82               	bcf	3970,6,c	;volatile
   984  001026  D000               	goto	l4311
   985  001028                     l4311:
   986                           
   987                           ;RTDuC.c: 41: {
   988                           ;RTDuC.c: 42: if (SPIflag == 1)
   989  001028  0100               	movlb	0	; () banked
   990  00102A  05C7               	decf	_SPIflag& (0+255),w,b
   991  00102C  A4D8               	btfss	status,2,c
   992  00102E  D0E9               	goto	l4411
   993                           
   994                           ; BSR set to: 0
   995                           ;RTDuC.c: 43: {
   996                           ;RTDuC.c: 44: SPIflag = 0;
   997  001030  0E00               	movlw	0
   998  001032  0100               	movlb	0	; () banked
   999  001034  6FC7               	movwf	_SPIflag& (0+255),b
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;RTDuC.c: 45: INTCONbits.GIE = 0;
  1003  001036  9EF2               	bcf	intcon,7,c	;volatile
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;RTDuC.c: 46: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
  1007  001038  0E02               	movlw	2
  1008  00103A  1843               	xorwf	_Command,w,c
  1009  00103C  B4D8               	btfsc	status,2,c
  1010  00103E  D010               	goto	l4327
  1011                           
  1012                           ; BSR set to: 0
  1013  001040  0E03               	movlw	3
  1014  001042  1843               	xorwf	_Command,w,c
  1015  001044  B4D8               	btfsc	status,2,c
  1016  001046  D00C               	goto	l4327
  1017                           
  1018                           ; BSR set to: 0
  1019  001048  0E04               	movlw	4
  1020  00104A  1843               	xorwf	_Command,w,c
  1021  00104C  B4D8               	btfsc	status,2,c
  1022  00104E  D008               	goto	l4327
  1023                           
  1024                           ; BSR set to: 0
  1025  001050  0E06               	movlw	6
  1026  001052  1843               	xorwf	_Command,w,c
  1027  001054  B4D8               	btfsc	status,2,c
  1028  001056  D004               	goto	l4327
  1029                           
  1030                           ; BSR set to: 0
  1031  001058  0E08               	movlw	8
  1032  00105A  1843               	xorwf	_Command,w,c
  1033  00105C  A4D8               	btfss	status,2,c
  1034  00105E  D05D               	goto	l4365
  1035  001060                     l4327:
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;RTDuC.c: 47: {
  1039                           ;RTDuC.c: 48: if (Command == 0x02)
  1040  001060  0E02               	movlw	2
  1041  001062  1843               	xorwf	_Command,w,c
  1042  001064  A4D8               	btfss	status,2,c
  1043  001066  D009               	goto	l4331
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;RTDuC.c: 49: SPIDisassembleDouble(CurrentAngle);
  1047  001068  C0AA  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
  1048  00106C  C0AB  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
  1049  001070  C0AC  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
  1050  001074  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1051  001078  D034               	goto	l4347
  1052  00107A                     l4331:
  1053                           
  1054                           ;RTDuC.c: 50: else if (Command == 0x03)
  1055  00107A  0E03               	movlw	3
  1056  00107C  1843               	xorwf	_Command,w,c
  1057  00107E  A4D8               	btfss	status,2,c
  1058  001080  D009               	goto	l4335
  1059                           
  1060                           ;RTDuC.c: 51: SPIDisassembleDouble(CurrentVelocity);
  1061  001082  C0AD  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
  1062  001086  C0AE  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
  1063  00108A  C0AF  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
  1064  00108E  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1065  001092  D027               	goto	l4347
  1066  001094                     l4335:
  1067                           
  1068                           ;RTDuC.c: 52: else if (Command == 0x04)
  1069  001094  0E04               	movlw	4
  1070  001096  1843               	xorwf	_Command,w,c
  1071  001098  A4D8               	btfss	status,2,c
  1072  00109A  D009               	goto	l4339
  1073                           
  1074                           ;RTDuC.c: 53: SPIDisassembleDouble(Kp);
  1075  00109C  C0B6  F01A         	movff	_Kp,SPIDisassembleDouble@dub
  1076  0010A0  C0B7  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
  1077  0010A4  C0B8  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
  1078  0010A8  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1079  0010AC  D01A               	goto	l4347
  1080  0010AE                     l4339:
  1081                           
  1082                           ;RTDuC.c: 54: else if (Command == 0x06)
  1083  0010AE  0E06               	movlw	6
  1084  0010B0  1843               	xorwf	_Command,w,c
  1085  0010B2  A4D8               	btfss	status,2,c
  1086  0010B4  D009               	goto	l4343
  1087                           
  1088                           ;RTDuC.c: 55: SPIDisassembleDouble(Ki);
  1089  0010B6  C0B3  F01A         	movff	_Ki,SPIDisassembleDouble@dub
  1090  0010BA  C0B4  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
  1091  0010BE  C0B5  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
  1092  0010C2  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1093  0010C6  D00D               	goto	l4347
  1094  0010C8                     l4343:
  1095                           
  1096                           ;RTDuC.c: 56: else if (Command == 0x08)
  1097  0010C8  0E08               	movlw	8
  1098  0010CA  1843               	xorwf	_Command,w,c
  1099  0010CC  A4D8               	btfss	status,2,c
  1100  0010CE  D009               	goto	l4347
  1101                           
  1102                           ;RTDuC.c: 57: SPIDisassembleDouble(Kd);
  1103  0010D0  C0B0  F01A         	movff	_Kd,SPIDisassembleDouble@dub
  1104  0010D4  C0B1  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
  1105  0010D8  C0B2  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
  1106  0010DC  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1107  0010E0  D000               	goto	l4347
  1108  0010E2                     l4347:
  1109                           
  1110                           ;RTDuC.c: 59: PORTCbits.RC6 = 0;
  1111  0010E2  9C82               	bcf	3970,6,c	;volatile
  1112                           
  1113                           ;RTDuC.c: 60: for (x = 0; x < 4; x++)
  1114  0010E4  0E00               	movlw	0
  1115  0010E6  0100               	movlb	0	; () banked
  1116  0010E8  6FA9               	movwf	main@x& (0+255),b
  1117  0010EA                     l4351:
  1118                           
  1119                           ; BSR set to: 0
  1120  0010EA  0E03               	movlw	3
  1121  0010EC  0100               	movlb	0	; () banked
  1122  0010EE  65A9               	cpfsgt	main@x& (0+255),b
  1123  0010F0  D001               	goto	l4355
  1124                           
  1125                           ; BSR set to: 0
  1126  0010F2  D00F               	goto	l4361
  1127  0010F4                     l4355:
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;RTDuC.c: 61: SendSPI1(DoubleSPIS[x]);
  1131  0010F4  0100               	movlb	0	; () banked
  1132  0010F6  51A9               	movf	main@x& (0+255),w,b
  1133  0010F8  0D01               	mullw	1
  1134  0010FA  0E37               	movlw	low _DoubleSPIS
  1135  0010FC  24F3               	addwf	prodl,w,c
  1136  0010FE  6ED9               	movwf	fsr2l,c
  1137  001100  0E00               	movlw	high _DoubleSPIS
  1138  001102  20F4               	addwfc	prodh,w,c
  1139  001104  6EDA               	movwf	fsr2h,c
  1140  001106  50DF               	movf	indf2,w,c
  1141  001108  ECE8  F015         	call	_SendSPI1
  1142  00110C  0100               	movlb	0	; () banked
  1143  00110E  2BA9               	incf	main@x& (0+255),f,b
  1144  001110  D7EC               	goto	l4351
  1145  001112                     l4361:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;RTDuC.c: 62: SPIRestart();
  1149  001112  ECF4  F016         	call	_SPIRestart	;wreg free
  1150                           
  1151                           ;RTDuC.c: 63: PORTCbits.RC6 = 1;
  1152  001116  8C82               	bsf	3970,6,c	;volatile
  1153                           
  1154                           ;RTDuC.c: 64: }
  1155  001118  D06C               	goto	l543
  1156  00111A                     l4365:
  1157                           
  1158                           ;RTDuC.c: 65: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
  1159  00111A  0443               	decf	_Command,w,c
  1160  00111C  B4D8               	btfsc	status,2,c
  1161  00111E  D00C               	goto	l546
  1162  001120  0E05               	movlw	5
  1163  001122  1843               	xorwf	_Command,w,c
  1164  001124  B4D8               	btfsc	status,2,c
  1165  001126  D008               	goto	l546
  1166  001128  0E07               	movlw	7
  1167  00112A  1843               	xorwf	_Command,w,c
  1168  00112C  B4D8               	btfsc	status,2,c
  1169  00112E  D004               	goto	l546
  1170  001130  0E09               	movlw	9
  1171  001132  1843               	xorwf	_Command,w,c
  1172  001134  A4D8               	btfss	status,2,c
  1173  001136  D059               	goto	l544
  1174  001138                     l546:
  1175                           
  1176                           ;RTDuC.c: 66: {
  1177                           ;RTDuC.c: 67: PORTCbits.RC6 = 0;
  1178  001138  9C82               	bcf	3970,6,c	;volatile
  1179                           
  1180                           ;RTDuC.c: 68: for (x = 0; x != 4; x++)
  1181  00113A  0E00               	movlw	0
  1182  00113C  0100               	movlb	0	; () banked
  1183  00113E  6FA9               	movwf	main@x& (0+255),b
  1184  001140                     l4375:
  1185                           
  1186                           ; BSR set to: 0
  1187  001140  0E04               	movlw	4
  1188  001142  0100               	movlb	0	; () banked
  1189  001144  19A9               	xorwf	main@x& (0+255),w,b
  1190  001146  B4D8               	btfsc	status,2,c
  1191  001148  D011               	goto	l548
  1192  00114A  D001               	goto	l4379
  1193                           
  1194                           ; BSR set to: 0
  1195  00114C  D00F               	goto	l548
  1196  00114E                     l4379:
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;RTDuC.c: 69: DoubleSPIS[x] = ReceiveSPI1();
  1200  00114E  0100               	movlb	0	; () banked
  1201  001150  51A9               	movf	main@x& (0+255),w,b
  1202  001152  0D01               	mullw	1
  1203  001154  0E37               	movlw	low _DoubleSPIS
  1204  001156  24F3               	addwf	prodl,w,c
  1205  001158  6ED9               	movwf	fsr2l,c
  1206  00115A  0E00               	movlw	high _DoubleSPIS
  1207  00115C  20F4               	addwfc	prodh,w,c
  1208  00115E  6EDA               	movwf	fsr2h,c
  1209  001160  EC39  F016         	call	_ReceiveSPI1	;wreg free
  1210  001164  6EDF               	movwf	indf2,c
  1211  001166  0100               	movlb	0	; () banked
  1212  001168  2BA9               	incf	main@x& (0+255),f,b
  1213  00116A  D7EA               	goto	l4375
  1214  00116C                     l548:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;RTDuC.c: 71: PORTCbits.RC6 = 1;
  1218  00116C  8C82               	bsf	3970,6,c	;volatile
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;RTDuC.c: 73: if (Command == 0x01)
  1222  00116E  0443               	decf	_Command,w,c
  1223  001170  A4D8               	btfss	status,2,c
  1224  001172  D00F               	goto	l4393
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;RTDuC.c: 74: {
  1228                           ;RTDuC.c: 75: SetAngle = SPIReassembleDouble();
  1229  001174  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1230  001178  C018  F03E         	movff	?_SPIReassembleDouble,_SetAngle
  1231  00117C  C019  F03F         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1232  001180  C01A  F040         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1233                           
  1234                           ;RTDuC.c: 76: PIDEnableFlag = 3;
  1235  001184  0E03               	movlw	3
  1236  001186  0100               	movlb	0	; () banked
  1237  001188  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;RTDuC.c: 77: JSEnableFlag = 0;
  1241  00118A  0E00               	movlw	0
  1242  00118C  0100               	movlb	0	; () banked
  1243  00118E  6FC4               	movwf	_JSEnableFlag& (0+255),b
  1244                           
  1245                           ;RTDuC.c: 78: }
  1246  001190  D027               	goto	l4405
  1247  001192                     l4393:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;RTDuC.c: 79: else if (Command == 0x05)
  1251  001192  0E05               	movlw	5
  1252  001194  1843               	xorwf	_Command,w,c
  1253  001196  A4D8               	btfss	status,2,c
  1254  001198  D009               	goto	l4397
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;RTDuC.c: 80: {
  1258                           ;RTDuC.c: 81: Kp = SPIReassembleDouble();
  1259  00119A  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1260  00119E  C018  F0B6         	movff	?_SPIReassembleDouble,_Kp
  1261  0011A2  C019  F0B7         	movff	?_SPIReassembleDouble+1,_Kp+1
  1262  0011A6  C01A  F0B8         	movff	?_SPIReassembleDouble+2,_Kp+2
  1263                           
  1264                           ;RTDuC.c: 82: }
  1265  0011AA  D01A               	goto	l4405
  1266  0011AC                     l4397:
  1267                           
  1268                           ;RTDuC.c: 83: else if (Command == 0x07)
  1269  0011AC  0E07               	movlw	7
  1270  0011AE  1843               	xorwf	_Command,w,c
  1271  0011B0  A4D8               	btfss	status,2,c
  1272  0011B2  D009               	goto	l4401
  1273                           
  1274                           ;RTDuC.c: 84: {
  1275                           ;RTDuC.c: 85: Ki = SPIReassembleDouble();
  1276  0011B4  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1277  0011B8  C018  F0B3         	movff	?_SPIReassembleDouble,_Ki
  1278  0011BC  C019  F0B4         	movff	?_SPIReassembleDouble+1,_Ki+1
  1279  0011C0  C01A  F0B5         	movff	?_SPIReassembleDouble+2,_Ki+2
  1280                           
  1281                           ;RTDuC.c: 86: }
  1282  0011C4  D00D               	goto	l4405
  1283  0011C6                     l4401:
  1284                           
  1285                           ;RTDuC.c: 87: else if (Command == 0x09)
  1286  0011C6  0E09               	movlw	9
  1287  0011C8  1843               	xorwf	_Command,w,c
  1288  0011CA  A4D8               	btfss	status,2,c
  1289  0011CC  D009               	goto	l4405
  1290                           
  1291                           ;RTDuC.c: 88: {
  1292                           ;RTDuC.c: 89: Kd = SPIReassembleDouble();
  1293  0011CE  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1294  0011D2  C018  F0B0         	movff	?_SPIReassembleDouble,_Kd
  1295  0011D6  C019  F0B1         	movff	?_SPIReassembleDouble+1,_Kd+1
  1296  0011DA  C01A  F0B2         	movff	?_SPIReassembleDouble+2,_Kd+2
  1297  0011DE  D000               	goto	l4405
  1298  0011E0                     l4405:
  1299                           
  1300                           ;RTDuC.c: 90: }
  1301                           ;RTDuC.c: 91: SPIRestart();
  1302  0011E0  ECF4  F016         	call	_SPIRestart	;wreg free
  1303                           
  1304                           ;RTDuC.c: 92: SaveAll();
  1305  0011E4  ECF0  F010         	call	_SaveAll	;wreg free
  1306                           
  1307                           ;RTDuC.c: 93: }
  1308  0011E8  D004               	goto	l543
  1309  0011EA                     l544:
  1310                           
  1311                           ;RTDuC.c: 94: else
  1312                           ;RTDuC.c: 95: {
  1313                           ;RTDuC.c: 96: trash = SSP1BUF;
  1314  0011EA  CFC9 F099          	movff	4041,main@trash	;volatile
  1315                           
  1316                           ;RTDuC.c: 97: PIR1bits.SSP1IF = 0;
  1317  0011EE  969E               	bcf	3998,3,c	;volatile
  1318  0011F0  D000               	goto	l543
  1319  0011F2                     l543:
  1320                           
  1321                           ;RTDuC.c: 98: }
  1322                           ;RTDuC.c: 100: INTCONbits.GIE = 1;
  1323  0011F2  8EF2               	bsf	intcon,7,c	;volatile
  1324                           
  1325                           ;RTDuC.c: 101: PIE1bits.SSP1IE = 1;
  1326  0011F4  869D               	bsf	3997,3,c	;volatile
  1327                           
  1328                           ;RTDuC.c: 102: PORTCbits.RC6 = 0;
  1329  0011F6  9C82               	bcf	3970,6,c	;volatile
  1330                           
  1331                           ;RTDuC.c: 103: Delay10TCYx(dtime);
  1332  0011F8  0100               	movlb	0	; () banked
  1333  0011FA  51A6               	movf	main@dtime& (0+255),w,b
  1334  0011FC  EC13  F017         	call	_Delay10TCYx
  1335  001200  D000               	goto	l4411
  1336  001202                     l4411:
  1337                           
  1338                           ;RTDuC.c: 104: }
  1339                           ;RTDuC.c: 105: PORTCbits.RC6 = 1;
  1340  001202  8C82               	bsf	3970,6,c	;volatile
  1341                           
  1342                           ;RTDuC.c: 106: DetectJoystick();
  1343  001204  ECA6  F016         	call	_DetectJoystick	;wreg free
  1344                           
  1345                           ;RTDuC.c: 107: PORTCbits.RC6 = 0;
  1346  001208  9C82               	bcf	3970,6,c	;volatile
  1347                           
  1348                           ;RTDuC.c: 108: Delay10TCYx(10);
  1349  00120A  0E0A               	movlw	10
  1350  00120C  EC13  F017         	call	_Delay10TCYx
  1351                           
  1352                           ;RTDuC.c: 109: if (JSEnableFlag == 1)
  1353  001210  0100               	movlb	0	; () banked
  1354  001212  05C4               	decf	_JSEnableFlag& (0+255),w,b
  1355  001214  A4D8               	btfss	status,2,c
  1356  001216  D011               	goto	l4429
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;RTDuC.c: 110: {
  1360                           ;RTDuC.c: 111: PORTCbits.RC6 = 1;
  1361  001218  8C82               	bsf	3970,6,c	;volatile
  1362                           
  1363                           ;RTDuC.c: 112: INTCONbits.GIE = 0;
  1364  00121A  9EF2               	bcf	intcon,7,c	;volatile
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;RTDuC.c: 113: ImplementJSMotion(DetectMovement());
  1368  00121C  EC07  F013         	call	_DetectMovement	;wreg free
  1369  001220  C018  F086         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1370  001224  C019  F087         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1371  001228  EC6A  F00E         	call	_ImplementJSMotion	;wreg free
  1372                           
  1373                           ;RTDuC.c: 114: INTCONbits.GIE = 1;
  1374  00122C  8EF2               	bsf	intcon,7,c	;volatile
  1375                           
  1376                           ;RTDuC.c: 115: PORTCbits.RC6 = 0;
  1377  00122E  9C82               	bcf	3970,6,c	;volatile
  1378                           
  1379                           ;RTDuC.c: 116: Delay10TCYx(dtime);
  1380  001230  0100               	movlb	0	; () banked
  1381  001232  51A6               	movf	main@dtime& (0+255),w,b
  1382  001234  EC13  F017         	call	_Delay10TCYx
  1383  001238  D000               	goto	l4429
  1384  00123A                     l4429:
  1385                           
  1386                           ;RTDuC.c: 117: }
  1387                           ;RTDuC.c: 119: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1388  00123A  0100               	movlb	0	; () banked
  1389  00123C  05C5               	decf	_PIDEnableFlag& (0+255),w,b
  1390  00123E  A4D8               	btfss	status,2,c
  1391  001240  D032               	goto	l4445
  1392                           
  1393                           ; BSR set to: 0
  1394  001242  0100               	movlb	0	; () banked
  1395  001244  05C8               	decf	_TMR0Flag& (0+255),w,b
  1396  001246  A4D8               	btfss	status,2,c
  1397  001248  D02E               	goto	l4445
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;RTDuC.c: 120: {
  1401                           ;RTDuC.c: 121: PORTCbits.RC6 = 1;
  1402  00124A  8C82               	bsf	3970,6,c	;volatile
  1403                           
  1404                           ;RTDuC.c: 122: INTCONbits.GIE = 0;
  1405  00124C  9EF2               	bcf	intcon,7,c	;volatile
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;RTDuC.c: 123: CurrentAngle = RTD2Angle(ReadRTDpos());
  1409  00124E  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1410  001252  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1411  001256  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1412  00125A  EC2D  F015         	call	_RTD2Angle	;wreg free
  1413  00125E  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1414  001262  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1415  001266  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1416                           
  1417                           ;RTDuC.c: 124: calculatePID(CurrentAngle, SetAngle);
  1418  00126A  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1419  00126E  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1420  001272  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1421  001276  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  1422  00127A  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1423  00127E  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1424  001282  ECC0  F00A         	call	_calculatePID	;wreg free
  1425                           
  1426                           ;RTDuC.c: 125: ImplementPIDMotion(motorInput);
  1427  001286  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1428  00128A  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1429  00128E  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  1430                           
  1431                           ;RTDuC.c: 126: TMR0Flag = 0;
  1432  001292  0E00               	movlw	0
  1433  001294  0100               	movlb	0	; () banked
  1434  001296  6FC8               	movwf	_TMR0Flag& (0+255),b
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;RTDuC.c: 127: INTCONbits.GIE = 1;
  1438  001298  8EF2               	bsf	intcon,7,c	;volatile
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;RTDuC.c: 128: PORTCbits.RC6 = 0;
  1442  00129A  9C82               	bcf	3970,6,c	;volatile
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;RTDuC.c: 129: Delay10TCYx(dtime);
  1446  00129C  0100               	movlb	0	; () banked
  1447  00129E  51A6               	movf	main@dtime& (0+255),w,b
  1448  0012A0  EC13  F017         	call	_Delay10TCYx
  1449                           
  1450                           ;RTDuC.c: 130: }
  1451  0012A4  D053               	goto	l559
  1452  0012A6                     l4445:
  1453                           
  1454                           ;RTDuC.c: 132: else if (PIDEnableFlag == 3)
  1455  0012A6  0E03               	movlw	3
  1456  0012A8  0100               	movlb	0	; () banked
  1457  0012AA  19C5               	xorwf	_PIDEnableFlag& (0+255),w,b
  1458  0012AC  A4D8               	btfss	status,2,c
  1459  0012AE  D030               	goto	l4465
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;RTDuC.c: 133: {
  1463                           ;RTDuC.c: 134: PORTCbits.RC6 = 1;
  1464  0012B0  8C82               	bsf	3970,6,c	;volatile
  1465                           
  1466                           ;RTDuC.c: 135: INTCONbits.GIE = 0;
  1467  0012B2  9EF2               	bcf	intcon,7,c	;volatile
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;RTDuC.c: 136: TMR0H = 0xDB;
  1471  0012B4  0EDB               	movlw	219
  1472  0012B6  6ED7               	movwf	4055,c	;volatile
  1473                           
  1474                           ;RTDuC.c: 137: TMR0L = 0x60;
  1475  0012B8  0E60               	movlw	96
  1476  0012BA  6ED6               	movwf	4054,c	;volatile
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;RTDuC.c: 138: CurrentAngle = RTD2Angle(ReadRTDpos());
  1480  0012BC  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1481  0012C0  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1482  0012C4  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1483  0012C8  EC2D  F015         	call	_RTD2Angle	;wreg free
  1484  0012CC  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1485  0012D0  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1486  0012D4  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1487                           
  1488                           ;RTDuC.c: 139: calculatePID(CurrentAngle, SetAngle);
  1489  0012D8  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1490  0012DC  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1491  0012E0  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1492  0012E4  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  1493  0012E8  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1494  0012EC  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1495  0012F0  ECC0  F00A         	call	_calculatePID	;wreg free
  1496                           
  1497                           ;RTDuC.c: 140: ImplementPIDMotion(motorInput);
  1498  0012F4  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1499  0012F8  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1500  0012FC  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  1501                           
  1502                           ;RTDuC.c: 141: INTCONbits.GIE = 1;
  1503  001300  8EF2               	bsf	intcon,7,c	;volatile
  1504                           
  1505                           ;RTDuC.c: 143: T0CONbits.TMR0ON = 1;
  1506  001302  8ED5               	bsf	4053,7,c	;volatile
  1507                           
  1508                           ;RTDuC.c: 144: PORTCbits.RC6 = 0;
  1509  001304  9C82               	bcf	3970,6,c	;volatile
  1510                           
  1511                           ;RTDuC.c: 145: Delay10TCYx(dtime);
  1512  001306  0100               	movlb	0	; () banked
  1513  001308  51A6               	movf	main@dtime& (0+255),w,b
  1514  00130A  EC13  F017         	call	_Delay10TCYx
  1515                           
  1516                           ;RTDuC.c: 146: }
  1517  00130E  D01E               	goto	l559
  1518  001310                     l4465:
  1519                           
  1520                           ;RTDuC.c: 148: else if (TMR0Flag == 1)
  1521  001310  0100               	movlb	0	; () banked
  1522  001312  05C8               	decf	_TMR0Flag& (0+255),w,b
  1523  001314  A4D8               	btfss	status,2,c
  1524  001316  D01A               	goto	l559
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;RTDuC.c: 149: {
  1528                           ;RTDuC.c: 150: PORTCbits.RC6 = 1;
  1529  001318  8C82               	bsf	3970,6,c	;volatile
  1530                           
  1531                           ;RTDuC.c: 151: INTCONbits.GIE = 0;
  1532  00131A  9EF2               	bcf	intcon,7,c	;volatile
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;RTDuC.c: 152: CurrentAngle = RTD2Angle(ReadRTDpos());
  1536  00131C  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1537  001320  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1538  001324  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1539  001328  EC2D  F015         	call	_RTD2Angle	;wreg free
  1540  00132C  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1541  001330  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1542  001334  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1543                           
  1544                           ;RTDuC.c: 153: INTCONbits.GIE = 1;
  1545  001338  8EF2               	bsf	intcon,7,c	;volatile
  1546                           
  1547                           ;RTDuC.c: 154: TMR0Flag = 0;
  1548  00133A  0E00               	movlw	0
  1549  00133C  0100               	movlb	0	; () banked
  1550  00133E  6FC8               	movwf	_TMR0Flag& (0+255),b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;RTDuC.c: 155: PORTCbits.RC6 = 0;
  1554  001340  9C82               	bcf	3970,6,c	;volatile
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;RTDuC.c: 156: Delay10TCYx(dtime);
  1558  001342  0100               	movlb	0	; () banked
  1559  001344  51A6               	movf	main@dtime& (0+255),w,b
  1560  001346  EC13  F017         	call	_Delay10TCYx
  1561  00134A  D000               	goto	l559
  1562  00134C                     l559:
  1563                           
  1564                           ;RTDuC.c: 157: }
  1565                           ;RTDuC.c: 159: if (RECFlag == 1)
  1566  00134C  0100               	movlb	0	; () banked
  1567  00134E  05C6               	decf	_RECFlag& (0+255),w,b
  1568  001350  A4D8               	btfss	status,2,c
  1569  001352  D66A               	goto	l4311
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;RTDuC.c: 160: {
  1573                           ;RTDuC.c: 161: PORTCbits.RC6 = 1;
  1574  001354  8C82               	bsf	3970,6,c	;volatile
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;RTDuC.c: 162: RECFlag = 0;
  1578  001356  0E00               	movlw	0
  1579  001358  0100               	movlb	0	; () banked
  1580  00135A  6FC6               	movwf	_RECFlag& (0+255),b
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;RTDuC.c: 164: double saveKp = Kp,
  1584  00135C  C0B6  F09A         	movff	_Kp,main@saveKp
  1585  001360  C0B7  F09B         	movff	_Kp+1,main@saveKp+1
  1586  001364  C0B8  F09C         	movff	_Kp+2,main@saveKp+2
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;RTDuC.c: 165: saveKi = Ki,
  1590  001368  C0B3  F09D         	movff	_Ki,main@saveKi
  1591  00136C  C0B4  F09E         	movff	_Ki+1,main@saveKi+1
  1592  001370  C0B5  F09F         	movff	_Ki+2,main@saveKi+2
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;RTDuC.c: 166: saveKd = Kd,
  1596  001374  C0B0  F0A0         	movff	_Kd,main@saveKd
  1597  001378  C0B1  F0A1         	movff	_Kd+1,main@saveKd+1
  1598  00137C  C0B2  F0A2         	movff	_Kd+2,main@saveKd+2
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;RTDuC.c: 167: saveSP = SetAngle;
  1602  001380  C03E  F0A3         	movff	_SetAngle,main@saveSP
  1603  001384  C03F  F0A4         	movff	_SetAngle+1,main@saveSP+1
  1604  001388  C040  F0A5         	movff	_SetAngle+2,main@saveSP+2
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;RTDuC.c: 169: INTCONbits.GIE = 0;
  1608  00138C  9EF2               	bcf	intcon,7,c	;volatile
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;RTDuC.c: 170: INTCONbits.TMR0IE = 0;
  1612  00138E  9AF2               	bcf	intcon,5,c	;volatile
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;RTDuC.c: 171: T0CONbits.TMR0ON = 0;
  1616  001390  9ED5               	bcf	4053,7,c	;volatile
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;RTDuC.c: 173: ZeroMotors();
  1620  001392  ECF7  F00C         	call	_ZeroMotors	;wreg free
  1621                           
  1622                           ;RTDuC.c: 174: Kp = saveKp;
  1623  001396  C09A  F0B6         	movff	main@saveKp,_Kp
  1624  00139A  C09B  F0B7         	movff	main@saveKp+1,_Kp+1
  1625  00139E  C09C  F0B8         	movff	main@saveKp+2,_Kp+2
  1626                           
  1627                           ;RTDuC.c: 175: Ki = saveKi;
  1628  0013A2  C09D  F0B3         	movff	main@saveKi,_Ki
  1629  0013A6  C09E  F0B4         	movff	main@saveKi+1,_Ki+1
  1630  0013AA  C09F  F0B5         	movff	main@saveKi+2,_Ki+2
  1631                           
  1632                           ;RTDuC.c: 176: Kd = saveKd;
  1633  0013AE  C0A0  F0B0         	movff	main@saveKd,_Kd
  1634  0013B2  C0A1  F0B1         	movff	main@saveKd+1,_Kd+1
  1635  0013B6  C0A2  F0B2         	movff	main@saveKd+2,_Kd+2
  1636                           
  1637                           ;RTDuC.c: 178: TMR0H = 0xDB;
  1638  0013BA  0EDB               	movlw	219
  1639  0013BC  6ED7               	movwf	4055,c	;volatile
  1640                           
  1641                           ;RTDuC.c: 179: TMR0L = 0x60;
  1642  0013BE  0E60               	movlw	96
  1643  0013C0  6ED6               	movwf	4054,c	;volatile
  1644                           
  1645                           ;RTDuC.c: 181: PIDEnableFlag = 3;
  1646  0013C2  0E03               	movlw	3
  1647  0013C4  0100               	movlb	0	; () banked
  1648  0013C6  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;RTDuC.c: 182: SetAngle = 60;
  1652  0013C8  0E00               	movlw	0
  1653  0013CA  6E3E               	movwf	_SetAngle,c
  1654  0013CC  0E70               	movlw	112
  1655  0013CE  6E3F               	movwf	_SetAngle+1,c
  1656  0013D0  0E42               	movlw	66
  1657  0013D2  6E40               	movwf	_SetAngle+2,c
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;RTDuC.c: 183: counter = 0;
  1661  0013D4  0E00               	movlw	0
  1662  0013D6  0100               	movlb	0	; () banked
  1663  0013D8  6FA8               	movwf	(main@counter+1)& (0+255),b
  1664  0013DA  0E00               	movlw	0
  1665  0013DC  6FA7               	movwf	main@counter& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;RTDuC.c: 185: T0CONbits.TMR0ON = 1;
  1669  0013DE  8ED5               	bsf	4053,7,c	;volatile
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;RTDuC.c: 186: T3CONbits.TMR3ON = 1;
  1673  0013E0  80B1               	bsf	4017,0,c	;volatile
  1674                           
  1675                           ;RTDuC.c: 188: while (counter < DataLodeSize)
  1676  0013E2  D065               	goto	l4533
  1677  0013E4                     l4519:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;RTDuC.c: 189: {
  1681                           ;RTDuC.c: 190: CurrentAngle = RTD2Angle(ReadRTDpos());
  1682  0013E4  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1683  0013E8  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1684  0013EC  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1685  0013F0  EC2D  F015         	call	_RTD2Angle	;wreg free
  1686  0013F4  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1687  0013F8  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1688  0013FC  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1689                           
  1690                           ;RTDuC.c: 191: calculatePID(CurrentAngle, SetAngle);
  1691  001400  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1692  001404  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1693  001408  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1694  00140C  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  1695  001410  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1696  001414  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1697  001418  ECC0  F00A         	call	_calculatePID	;wreg free
  1698                           
  1699                           ;RTDuC.c: 192: ImplementPIDMotion(motorInput);
  1700  00141C  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1701  001420  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1702  001424  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  1703                           
  1704                           ;RTDuC.c: 193: while (INTCONbits.TMR0IF == 0)
  1705  001428  D03A               	goto	l4529
  1706  00142A                     l4521:
  1707                           
  1708                           ;RTDuC.c: 194: {
  1709                           ;RTDuC.c: 195: TMR3H = 0xF6;
  1710  00142A  0EF6               	movlw	246
  1711  00142C  6EB3               	movwf	4019,c	;volatile
  1712                           
  1713                           ;RTDuC.c: 196: TMR3L = 0x3C;
  1714  00142E  0E3C               	movlw	60
  1715  001430  6EB2               	movwf	4018,c	;volatile
  1716                           
  1717                           ;RTDuC.c: 197: DataLode[counter] = RTD2Angle(ReadRTDpos());
  1718  001432  C0A7  F01F         	movff	main@counter,___wmul@multiplier
  1719  001436  C0A8  F020         	movff	main@counter+1,___wmul@multiplier+1
  1720  00143A  0E00               	movlw	0
  1721  00143C  6E22               	movwf	___wmul@multiplicand+1,c
  1722  00143E  0E03               	movlw	3
  1723  001440  6E21               	movwf	___wmul@multiplicand,c
  1724  001442  EC12  F016         	call	___wmul	;wreg free
  1725  001446  0ECD               	movlw	low _DataLode
  1726  001448  241F               	addwf	?___wmul,w,c
  1727  00144A  6ED9               	movwf	fsr2l,c
  1728  00144C  0E00               	movlw	high _DataLode
  1729  00144E  2020               	addwfc	?___wmul+1,w,c
  1730  001450  6EDA               	movwf	fsr2h,c
  1731  001452  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1732  001456  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1733  00145A  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1734  00145E  EC2D  F015         	call	_RTD2Angle	;wreg free
  1735  001462  C075  FFDE         	movff	?_RTD2Angle,postinc2
  1736  001466  C076  FFDE         	movff	?_RTD2Angle+1,postinc2
  1737  00146A  C077  FFDE         	movff	?_RTD2Angle+2,postinc2
  1738                           
  1739                           ;RTDuC.c: 198: while (PIR2bits.TMR3IF == 0);
  1740  00146E  D000               	goto	l568
  1741  001470                     l568:
  1742  001470  A2A1               	btfss	4001,1,c	;volatile
  1743  001472  D7FE               	goto	l568
  1744                           
  1745                           ;RTDuC.c: 199: PIR2bits.TMR3IF = 0;
  1746  001474  92A1               	bcf	4001,1,c	;volatile
  1747                           
  1748                           ;RTDuC.c: 200: if (counter < DataLodeSize)
  1749  001476  0E01               	movlw	low _DataLodeSize
  1750  001478  6EF6               	movwf	tblptrl,c
  1751  00147A                     	if	1	;There is more than 1 active tblptr byte
  1752  00147A  0E10               	movlw	high _DataLodeSize
  1753  00147C  6EF7               	movwf	tblptrh,c
  1754  00147E                     	endif
  1755  00147E                     	if	1	;There are 3 active tblptr bytes
  1756  00147E  0E00               	movlw	low (_DataLodeSize shr (0+16))
  1757  001480  6EF8               	movwf	tblptru,c
  1758  001482                     	endif
  1759  001482  0009               	tblrd		*+
  1760  001484  50F5               	movf	tablat,w,c
  1761  001486  0100               	movlb	0	; () banked
  1762  001488  5DA7               	subwf	main@counter& (0+255),w,b
  1763  00148A  0009               	tblrd		*+
  1764  00148C  50F5               	movf	tablat,w,c
  1765  00148E  0100               	movlb	0	; () banked
  1766  001490  59A8               	subwfb	(main@counter+1)& (0+255),w,b
  1767  001492  B0D8               	btfsc	status,0,c
  1768  001494  D004               	goto	l4529
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;RTDuC.c: 201: counter++;
  1772  001496  0100               	movlb	0	; () banked
  1773  001498  4BA7               	infsnz	main@counter& (0+255),f,b
  1774  00149A  2BA8               	incf	(main@counter+1)& (0+255),f,b
  1775                           
  1776                           ; BSR set to: 0
  1777  00149C  D000               	goto	l4529
  1778  00149E                     l4529:
  1779  00149E  A4F2               	btfss	intcon,2,c	;volatile
  1780  0014A0  D7C4               	goto	l4521
  1781                           
  1782                           ;RTDuC.c: 202: }
  1783                           ;RTDuC.c: 203: INTCONbits.TMR0IF = 0;
  1784  0014A2  94F2               	bcf	intcon,2,c	;volatile
  1785                           
  1786                           ;RTDuC.c: 204: TMR0H = 0xDB;
  1787  0014A4  0EDB               	movlw	219
  1788  0014A6  6ED7               	movwf	4055,c	;volatile
  1789                           
  1790                           ;RTDuC.c: 205: TMR0L = 0x60;
  1791  0014A8  0E60               	movlw	96
  1792  0014AA  6ED6               	movwf	4054,c	;volatile
  1793  0014AC  D000               	goto	l4533
  1794  0014AE                     l4533:
  1795  0014AE  0E01               	movlw	low _DataLodeSize
  1796  0014B0  6EF6               	movwf	tblptrl,c
  1797  0014B2                     	if	1	;There is more than 1 active tblptr byte
  1798  0014B2  0E10               	movlw	high _DataLodeSize
  1799  0014B4  6EF7               	movwf	tblptrh,c
  1800  0014B6                     	endif
  1801  0014B6                     	if	1	;There are 3 active tblptr bytes
  1802  0014B6  0E00               	movlw	low (_DataLodeSize shr (0+16))
  1803  0014B8  6EF8               	movwf	tblptru,c
  1804  0014BA                     	endif
  1805  0014BA  0009               	tblrd		*+
  1806  0014BC  50F5               	movf	tablat,w,c
  1807  0014BE  0100               	movlb	0	; () banked
  1808  0014C0  5DA7               	subwf	main@counter& (0+255),w,b
  1809  0014C2  0009               	tblrd		*+
  1810  0014C4  50F5               	movf	tablat,w,c
  1811  0014C6  0100               	movlb	0	; () banked
  1812  0014C8  59A8               	subwfb	(main@counter+1)& (0+255),w,b
  1813  0014CA  A0D8               	btfss	status,0,c
  1814  0014CC  D78B               	goto	l4519
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;RTDuC.c: 206: }
  1818                           ;RTDuC.c: 207: DataLode[600] = Kp;
  1819  0014CE  C0B6  F7D5         	movff	_Kp,_DataLode+1800
  1820  0014D2  C0B7  F7D6         	movff	_Kp+1,_DataLode+1801
  1821  0014D6  C0B8  F7D7         	movff	_Kp+2,_DataLode+1802
  1822                           
  1823                           ;RTDuC.c: 208: DataLode[601] = Ki;
  1824  0014DA  C0B3  F7D8         	movff	_Ki,_DataLode+1803
  1825  0014DE  C0B4  F7D9         	movff	_Ki+1,_DataLode+1804
  1826  0014E2  C0B5  F7DA         	movff	_Ki+2,_DataLode+1805
  1827                           
  1828                           ;RTDuC.c: 209: DataLode[602] = Kd;
  1829  0014E6  C0B0  F7DB         	movff	_Kd,_DataLode+1806
  1830  0014EA  C0B1  F7DC         	movff	_Kd+1,_DataLode+1807
  1831  0014EE  C0B2  F7DD         	movff	_Kd+2,_DataLode+1808
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;RTDuC.c: 210: SPIDisassembleLode(DataLode, TransmitLode);
  1835  0014F2  0ECD               	movlw	low _DataLode
  1836  0014F4  6E25               	movwf	SPIDisassembleLode@Data,c
  1837  0014F6  0E00               	movlw	high _DataLode
  1838  0014F8  6E26               	movwf	SPIDisassembleLode@Data+1,c
  1839  0014FA  0EDE               	movlw	low _TransmitLode
  1840  0014FC  6E27               	movwf	SPIDisassembleLode@Transmit,c
  1841  0014FE  0E07               	movlw	high _TransmitLode
  1842  001500  6E28               	movwf	SPIDisassembleLode@Transmit+1,c
  1843  001502  EC1D  F010         	call	_SPIDisassembleLode	;wreg free
  1844                           
  1845                           ;RTDuC.c: 211: SPIRestart();
  1846  001506  ECF4  F016         	call	_SPIRestart	;wreg free
  1847                           
  1848                           ;RTDuC.c: 212: PORTCbits.RC6 = 0;
  1849  00150A  9C82               	bcf	3970,6,c	;volatile
  1850                           
  1851                           ;RTDuC.c: 213: for (counter = 0; counter != TransmitLodeSize; counter++)
  1852  00150C  0E00               	movlw	0
  1853  00150E  0100               	movlb	0	; () banked
  1854  001510  6FA8               	movwf	(main@counter+1)& (0+255),b
  1855  001512  0E00               	movlw	0
  1856  001514  6FA7               	movwf	main@counter& (0+255),b
  1857  001516                     l4543:
  1858                           
  1859                           ; BSR set to: 0
  1860  001516  0E03               	movlw	low _TransmitLodeSize
  1861  001518  6EF6               	movwf	tblptrl,c
  1862  00151A                     	if	1	;There is more than 1 active tblptr byte
  1863  00151A  0E10               	movlw	high _TransmitLodeSize
  1864  00151C  6EF7               	movwf	tblptrh,c
  1865  00151E                     	endif
  1866  00151E                     	if	1	;There are 3 active tblptr bytes
  1867  00151E  0E00               	movlw	low (_TransmitLodeSize shr (0+16))
  1868  001520  6EF8               	movwf	tblptru,c
  1869  001522                     	endif
  1870  001522  0009               	tblrd		*+
  1871  001524  50F5               	movf	tablat,w,c
  1872  001526  0100               	movlb	0	; () banked
  1873  001528  19A7               	xorwf	main@counter& (0+255),w,b
  1874  00152A  E108               	bnz	l4547
  1875  00152C  0009               	tblrd		*+
  1876  00152E  50F5               	movf	tablat,w,c
  1877  001530  0100               	movlb	0	; () banked
  1878  001532  19A8               	xorwf	(main@counter+1)& (0+255),w,b
  1879  001534  B4D8               	btfsc	status,2,c
  1880  001536  D012               	goto	l575
  1881  001538  D001               	goto	l4547
  1882                           
  1883                           ; BSR set to: 0
  1884  00153A  D010               	goto	l575
  1885  00153C                     l4547:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;RTDuC.c: 214: SendSPI1(TransmitLode[counter]);
  1889  00153C  0EDE               	movlw	low _TransmitLode
  1890  00153E  0100               	movlb	0	; () banked
  1891  001540  25A7               	addwf	main@counter& (0+255),w,b
  1892  001542  6ED9               	movwf	fsr2l,c
  1893  001544  0E07               	movlw	high _TransmitLode
  1894  001546  0100               	movlb	0	; () banked
  1895  001548  21A8               	addwfc	(main@counter+1)& (0+255),w,b
  1896  00154A  6EDA               	movwf	fsr2h,c
  1897  00154C  50DF               	movf	indf2,w,c
  1898  00154E  ECE8  F015         	call	_SendSPI1
  1899  001552  0100               	movlb	0	; () banked
  1900  001554  4BA7               	infsnz	main@counter& (0+255),f,b
  1901  001556  2BA8               	incf	(main@counter+1)& (0+255),f,b
  1902  001558  D7DE               	goto	l4543
  1903                           
  1904                           ; BSR set to: 0
  1905  00155A  D7F0               	goto	l4547
  1906  00155C                     l575:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;RTDuC.c: 215: PORTCbits.RC6 = 1;
  1910  00155C  8C82               	bsf	3970,6,c	;volatile
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;RTDuC.c: 216: SPIRestart();
  1914  00155E  ECF4  F016         	call	_SPIRestart	;wreg free
  1915                           
  1916                           ;RTDuC.c: 217: INTCONbits.TMR0IE = 1;
  1917  001562  8AF2               	bsf	intcon,5,c	;volatile
  1918                           
  1919                           ;RTDuC.c: 218: INTCONbits.PEIE = 1;
  1920  001564  8CF2               	bsf	intcon,6,c	;volatile
  1921                           
  1922                           ;RTDuC.c: 219: INTCONbits.GIE = 1;
  1923  001566  8EF2               	bsf	intcon,7,c	;volatile
  1924                           
  1925                           ;RTDuC.c: 220: SetAngle = saveSP;
  1926  001568  C0A3  F03E         	movff	main@saveSP,_SetAngle
  1927  00156C  C0A4  F03F         	movff	main@saveSP+1,_SetAngle+1
  1928  001570  C0A5  F040         	movff	main@saveSP+2,_SetAngle+2
  1929                           
  1930                           ;RTDuC.c: 221: PIDEnableFlag = 3;
  1931  001574  0E03               	movlw	3
  1932  001576  0100               	movlb	0	; () banked
  1933  001578  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1934                           
  1935                           ; BSR set to: 0
  1936                           
  1937                           ; BSR set to: 0
  1938  00157A  D556               	goto	l4311
  1939                           
  1940                           ; BSR set to: 0
  1941                           
  1942                           ; BSR set to: 0
  1943  00157C  EF0C  F000         	goto	start
  1944  001580                     __end_of_main:
  1945                           	opt stack 0
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           intcon	equ	0xFF2
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postdec1	equ	0xFE5
  1956                           fsr1h	equ	0xFE2
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _initialize *****************
  1965 ;; Defined at:
  1966 ;;		line 226 in file "RTDuC.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    9
  1987 ;; This function calls:
  1988 ;;		_EEPROMInit
  1989 ;;		_InitializeInterrupts
  1990 ;;		_JoystickInit
  1991 ;;		_MotorDriverInit
  1992 ;;		_PIDInit
  1993 ;;		_RTDInit
  1994 ;;		_RecTmrInit
  1995 ;;		_SPIInit
  1996 ;;		_ZeroMotors
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text1
  2003  002B40                     __ptext1:
  2004                           	opt stack 0
  2005  002B40                     _initialize:
  2006                           	opt stack 21
  2007                           
  2008                           ;RTDuC.c: 228: while (OSCCONbits.OSTS == 0);
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;incstack = 0
  2012  002B40  D000               	goto	l581
  2013  002B42                     l581:
  2014  002B42  A6D3               	btfss	4051,3,c	;volatile
  2015  002B44  D7FE               	goto	l581
  2016                           
  2017                           ;RTDuC.c: 229: PORTCbits.RC6 = 1;
  2018  002B46  8C82               	bsf	3970,6,c	;volatile
  2019                           
  2020                           ;RTDuC.c: 231: RTDInit();
  2021  002B48  ECB9  F015         	call	_RTDInit	;wreg free
  2022                           
  2023                           ;RTDuC.c: 232: SPIInit();
  2024  002B4C  ECD8  F016         	call	_SPIInit	;wreg free
  2025                           
  2026                           ;RTDuC.c: 233: JoystickInit();
  2027  002B50  ECD1  F015         	call	_JoystickInit	;wreg free
  2028                           
  2029                           ;RTDuC.c: 234: MotorDriverInit();
  2030  002B54  EC71  F016         	call	_MotorDriverInit	;wreg free
  2031                           
  2032                           ;RTDuC.c: 235: PIDInit();
  2033  002B58  EC66  F014         	call	_PIDInit	;wreg free
  2034                           
  2035                           ;RTDuC.c: 236: ZeroMotors();
  2036  002B5C  ECF7  F00C         	call	_ZeroMotors	;wreg free
  2037                           
  2038                           ;RTDuC.c: 237: EEPROMInit();
  2039  002B60  EC00  F017         	call	_EEPROMInit	;wreg free
  2040                           
  2041                           ;RTDuC.c: 238: RecTmrInit();
  2042  002B64  EC36  F017         	call	_RecTmrInit	;wreg free
  2043                           
  2044                           ;RTDuC.c: 240: InitializeInterrupts();
  2045  002B68  EC2B  F017         	call	_InitializeInterrupts	;wreg free
  2046                           
  2047                           ;RTDuC.c: 241: TRISAbits.RA3 = 0;
  2048  002B6C  9692               	bcf	3986,3,c	;volatile
  2049                           
  2050                           ;RTDuC.c: 242: PORTAbits.RA3 = 1;
  2051  002B6E  8680               	bsf	3968,3,c	;volatile
  2052  002B70  0012               	return		;funcret
  2053  002B72                     __end_of_initialize:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           intcon	equ	0xFF2
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           postdec1	equ	0xFE5
  2065                           fsr1h	equ	0xFE2
  2066                           fsr1l	equ	0xFE1
  2067                           indf2	equ	0xFDF
  2068                           postinc2	equ	0xFDE
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _ZeroMotors *****************
  2074 ;; Defined at:
  2075 ;;		line 311 in file "RTDuC.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  PrevAngle       3   54[BANK0 ] unsigned char 
  2080 ;;  average         3   51[BANK0 ] unsigned char 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;		None               void
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;Total ram usage:        6 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    8
  2097 ;; This function calls:
  2098 ;;		_ImplementPIDMotion
  2099 ;;		_RTD2Angle
  2100 ;;		_ReadRTDpos
  2101 ;;		___ftadd
  2102 ;;		___ftdiv
  2103 ;;		___ftge
  2104 ;;		___fttol
  2105 ;;		_abs
  2106 ;;		_calculatePID
  2107 ;; This function is called by:
  2108 ;;		_main
  2109 ;;		_initialize
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text2
  2114  0019EE                     __ptext2:
  2115                           	opt stack 0
  2116  0019EE                     _ZeroMotors:
  2117                           	opt stack 21
  2118                           
  2119                           ;RTDuC.c: 313: double average, PrevAngle;
  2120                           ;RTDuC.c: 314: Ki = 2;
  2121                           
  2122                           ;incstack = 0
  2123  0019EE  0E00               	movlw	0
  2124  0019F0  0100               	movlb	0	; () banked
  2125  0019F2  6FB3               	movwf	_Ki& (0+255),b
  2126  0019F4  0E00               	movlw	0
  2127  0019F6  0100               	movlb	0	; () banked
  2128  0019F8  6FB4               	movwf	(_Ki+1)& (0+255),b
  2129  0019FA  0E40               	movlw	64
  2130  0019FC  0100               	movlb	0	; () banked
  2131  0019FE  6FB5               	movwf	(_Ki+2)& (0+255),b
  2132                           
  2133                           ;RTDuC.c: 315: Kp = 0.65;
  2134  001A00  0E66               	movlw	102
  2135  001A02  0100               	movlb	0	; () banked
  2136  001A04  6FB6               	movwf	_Kp& (0+255),b
  2137  001A06  0E26               	movlw	38
  2138  001A08  0100               	movlb	0	; () banked
  2139  001A0A  6FB7               	movwf	(_Kp+1)& (0+255),b
  2140  001A0C  0E3F               	movlw	63
  2141  001A0E  0100               	movlb	0	; () banked
  2142  001A10  6FB8               	movwf	(_Kp+2)& (0+255),b
  2143                           
  2144                           ;RTDuC.c: 316: Kd = 0;
  2145  001A12  0E00               	movlw	0
  2146  001A14  0100               	movlb	0	; () banked
  2147  001A16  6FB0               	movwf	_Kd& (0+255),b
  2148  001A18  0E00               	movlw	0
  2149  001A1A  0100               	movlb	0	; () banked
  2150  001A1C  6FB1               	movwf	(_Kd+1)& (0+255),b
  2151  001A1E  0E00               	movlw	0
  2152  001A20  0100               	movlb	0	; () banked
  2153  001A22  6FB2               	movwf	(_Kd+2)& (0+255),b
  2154                           
  2155                           ;RTDuC.c: 317: TMR0H = 0xDB;
  2156  001A24  0EDB               	movlw	219
  2157  001A26  6ED7               	movwf	4055,c	;volatile
  2158                           
  2159                           ;RTDuC.c: 318: TMR0L = 0x60;
  2160  001A28  0E60               	movlw	96
  2161  001A2A  6ED6               	movwf	4054,c	;volatile
  2162                           
  2163                           ;RTDuC.c: 319: PIDEnableFlag = 3;
  2164  001A2C  0E03               	movlw	3
  2165  001A2E  0100               	movlb	0	; () banked
  2166  001A30  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  2167                           
  2168                           ;RTDuC.c: 320: SetAngle = 0;
  2169  001A32  0E00               	movlw	0
  2170  001A34  6E3E               	movwf	_SetAngle,c
  2171  001A36  0E00               	movlw	0
  2172  001A38  6E3F               	movwf	_SetAngle+1,c
  2173  001A3A  0E00               	movlw	0
  2174  001A3C  6E40               	movwf	_SetAngle+2,c
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;RTDuC.c: 321: INTCONbits.GIE = 0;
  2178  001A3E  9EF2               	bcf	intcon,7,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;RTDuC.c: 322: INTCONbits.PEIE = 0;
  2182  001A40  9CF2               	bcf	intcon,6,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;RTDuC.c: 323: T0CONbits.TMR0ON = 1;
  2186  001A42  8ED5               	bsf	4053,7,c	;volatile
  2187  001A44  D000               	goto	l4225
  2188  001A46                     l4225:
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;RTDuC.c: 325: {
  2192                           ;RTDuC.c: 326: CurrentAngle = RTD2Angle(ReadRTDpos());
  2193  001A46  EC3E  F013         	call	_ReadRTDpos	;wreg free
  2194  001A4A  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  2195  001A4E  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  2196  001A52  EC2D  F015         	call	_RTD2Angle	;wreg free
  2197  001A56  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  2198  001A5A  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  2199  001A5E  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  2200                           
  2201                           ;RTDuC.c: 327: calculatePID(CurrentAngle, SetAngle);
  2202  001A62  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  2203  001A66  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  2204  001A6A  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  2205  001A6E  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  2206  001A72  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  2207  001A76  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  2208  001A7A  ECC0  F00A         	call	_calculatePID	;wreg free
  2209                           
  2210                           ;RTDuC.c: 328: ImplementPIDMotion(motorInput);
  2211  001A7E  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  2212  001A82  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  2213  001A86  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  2214                           
  2215                           ;RTDuC.c: 329: while (INTCONbits.TMR0IF == 0);
  2216  001A8A  D000               	goto	l611
  2217  001A8C                     l611:
  2218  001A8C  A4F2               	btfss	intcon,2,c	;volatile
  2219  001A8E  D7FE               	goto	l611
  2220                           
  2221                           ;RTDuC.c: 330: INTCONbits.TMR0IF = 0;
  2222  001A90  94F2               	bcf	intcon,2,c	;volatile
  2223                           
  2224                           ;RTDuC.c: 331: TMR0H = 0xDB;
  2225  001A92  0EDB               	movlw	219
  2226  001A94  6ED7               	movwf	4055,c	;volatile
  2227                           
  2228                           ;RTDuC.c: 332: TMR0L = 0x60;
  2229  001A96  0E60               	movlw	96
  2230  001A98  6ED6               	movwf	4054,c	;volatile
  2231                           
  2232                           ;RTDuC.c: 333: average = (PrevAngle + CurrentAngle) / 2;
  2233  001A9A  C0AA  F023         	movff	_CurrentAngle,___ftadd@f2
  2234  001A9E  C0AB  F024         	movff	_CurrentAngle+1,___ftadd@f2+1
  2235  001AA2  C0AC  F025         	movff	_CurrentAngle+2,___ftadd@f2+2
  2236  001AA6  C096  F020         	movff	ZeroMotors@PrevAngle,___ftadd@f1
  2237  001AAA  C097  F021         	movff	ZeroMotors@PrevAngle+1,___ftadd@f1+1
  2238  001AAE  C098  F022         	movff	ZeroMotors@PrevAngle+2,___ftadd@f1+2
  2239  001AB2  EC15  F00C         	call	___ftadd	;wreg free
  2240  001AB6  C020  F02C         	movff	?___ftadd,___ftdiv@f1
  2241  001ABA  C021  F02D         	movff	?___ftadd+1,___ftdiv@f1+1
  2242  001ABE  C022  F02E         	movff	?___ftadd+2,___ftdiv@f1+2
  2243  001AC2  0E00               	movlw	0
  2244  001AC4  6E2F               	movwf	___ftdiv@f2,c
  2245  001AC6  0E00               	movlw	0
  2246  001AC8  6E30               	movwf	___ftdiv@f2+1,c
  2247  001ACA  0E40               	movlw	64
  2248  001ACC  6E31               	movwf	___ftdiv@f2+2,c
  2249  001ACE  EC9D  F00F         	call	___ftdiv	;wreg free
  2250  001AD2  C02C  F093         	movff	?___ftdiv,ZeroMotors@average
  2251  001AD6  C02D  F094         	movff	?___ftdiv+1,ZeroMotors@average+1
  2252  001ADA  C02E  F095         	movff	?___ftdiv+2,ZeroMotors@average+2
  2253                           
  2254                           ;RTDuC.c: 334: PrevAngle = CurrentAngle;
  2255  001ADE  C0AA  F096         	movff	_CurrentAngle,ZeroMotors@PrevAngle
  2256  001AE2  C0AB  F097         	movff	_CurrentAngle+1,ZeroMotors@PrevAngle+1
  2257  001AE6  C0AC  F098         	movff	_CurrentAngle+2,ZeroMotors@PrevAngle+2
  2258                           
  2259                           ;RTDuC.c: 335: }
  2260                           ;RTDuC.c: 336: while ((average > 1) && (abs(error) > 1));
  2261  001AEA  0E00               	movlw	0
  2262  001AEC  6E18               	movwf	___ftge@ff1,c
  2263  001AEE  0E80               	movlw	128
  2264  001AF0  6E19               	movwf	___ftge@ff1+1,c
  2265  001AF2  0E3F               	movlw	63
  2266  001AF4  6E1A               	movwf	___ftge@ff1+2,c
  2267  001AF6  C093  F01B         	movff	ZeroMotors@average,___ftge@ff2
  2268  001AFA  C094  F01C         	movff	ZeroMotors@average+1,___ftge@ff2+1
  2269  001AFE  C095  F01D         	movff	ZeroMotors@average+2,___ftge@ff2+2
  2270  001B02  EC4C  F012         	call	___ftge	;wreg free
  2271  001B06  B0D8               	btfsc	status,0,c
  2272  001B08  D01B               	goto	l4241
  2273  001B0A  C0B9  F075         	movff	_error,___fttol@f1
  2274  001B0E  C0BA  F076         	movff	_error+1,___fttol@f1+1
  2275  001B12  C0BB  F077         	movff	_error+2,___fttol@f1+2
  2276  001B16  EC04  F00F         	call	___fttol	;wreg free
  2277  001B1A  C075  F084         	movff	?___fttol,abs@a
  2278  001B1E  C076  F085         	movff	?___fttol+1,abs@a+1
  2279  001B22  ECFD  F015         	call	_abs	;wreg free
  2280  001B26  0100               	movlb	0	; () banked
  2281  001B28  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  2282  001B2A  D00A               	goto	l4241
  2283  001B2C  0100               	movlb	0	; () banked
  2284  001B2E  5185               	movf	(?_abs+1)& (0+255),w,b
  2285  001B30  E18A               	bnz	l4225
  2286  001B32  0E02               	movlw	2
  2287  001B34  0100               	movlb	0	; () banked
  2288  001B36  5D84               	subwf	?_abs& (0+255),w,b
  2289  001B38  A0D8               	btfss	status,0,c
  2290  001B3A  D002               	goto	l4241
  2291  001B3C  D784               	goto	l4225
  2292                           
  2293                           ; BSR set to: 0
  2294  001B3E  D000               	goto	l4241
  2295  001B40                     l4241:
  2296                           
  2297                           ;RTDuC.c: 338: Kp = 0;
  2298  001B40  0E00               	movlw	0
  2299  001B42  0100               	movlb	0	; () banked
  2300  001B44  6FB6               	movwf	_Kp& (0+255),b
  2301  001B46  0E00               	movlw	0
  2302  001B48  0100               	movlb	0	; () banked
  2303  001B4A  6FB7               	movwf	(_Kp+1)& (0+255),b
  2304  001B4C  0E00               	movlw	0
  2305  001B4E  0100               	movlb	0	; () banked
  2306  001B50  6FB8               	movwf	(_Kp+2)& (0+255),b
  2307                           
  2308                           ;RTDuC.c: 339: Ki = 0;
  2309  001B52  0E00               	movlw	0
  2310  001B54  0100               	movlb	0	; () banked
  2311  001B56  6FB3               	movwf	_Ki& (0+255),b
  2312  001B58  0E00               	movlw	0
  2313  001B5A  0100               	movlb	0	; () banked
  2314  001B5C  6FB4               	movwf	(_Ki+1)& (0+255),b
  2315  001B5E  0E00               	movlw	0
  2316  001B60  0100               	movlb	0	; () banked
  2317  001B62  6FB5               	movwf	(_Ki+2)& (0+255),b
  2318                           
  2319                           ;RTDuC.c: 340: Kd = 0;
  2320  001B64  0E00               	movlw	0
  2321  001B66  0100               	movlb	0	; () banked
  2322  001B68  6FB0               	movwf	_Kd& (0+255),b
  2323  001B6A  0E00               	movlw	0
  2324  001B6C  0100               	movlb	0	; () banked
  2325  001B6E  6FB1               	movwf	(_Kd+1)& (0+255),b
  2326  001B70  0E00               	movlw	0
  2327  001B72  0100               	movlb	0	; () banked
  2328  001B74  6FB2               	movwf	(_Kd+2)& (0+255),b
  2329                           
  2330                           ; BSR set to: 0
  2331  001B76  0012               	return		;funcret
  2332  001B78                     __end_of_ZeroMotors:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           prodh	equ	0xFF4
  2339                           prodl	equ	0xFF3
  2340                           intcon	equ	0xFF2
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postdec1	equ	0xFE5
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _calculatePID *****************
  2353 ;; Defined at:
  2354 ;;		line 33 in file "PID.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  angle           3   36[BANK0 ] unsigned char 
  2357 ;;  setpoint        3   39[BANK0 ] unsigned char 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  derErr          3   42[BANK0 ] unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;		None               void
  2362 ;; Registers used:
  2363 ;;		wreg, status,2, status,0, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2369 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2373 ;;Total ram usage:       15 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    7
  2376 ;; This function calls:
  2377 ;;		___ftadd
  2378 ;;		___ftdiv
  2379 ;;		___ftge
  2380 ;;		___ftmul
  2381 ;;		___ftneg
  2382 ;;		___ftsub
  2383 ;;		___fttol
  2384 ;; This function is called by:
  2385 ;;		_main
  2386 ;;		_ZeroMotors
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text3
  2391  001580                     __ptext3:
  2392                           	opt stack 0
  2393  001580                     _calculatePID:
  2394                           	opt stack 21
  2395                           
  2396                           ;PID.c: 35: double derErr;
  2397                           ;PID.c: 36: if (PIDEnableFlag == 3)
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;incstack = 0
  2401  001580  0E03               	movlw	3
  2402  001582  0100               	movlb	0	; () banked
  2403  001584  19C5               	xorwf	_PIDEnableFlag& (0+255),w,b
  2404  001586  A4D8               	btfss	status,2,c
  2405  001588  D01F               	goto	l4193
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;PID.c: 37: {
  2409                           ;PID.c: 38: error = 0;
  2410  00158A  0E00               	movlw	0
  2411  00158C  0100               	movlb	0	; () banked
  2412  00158E  6FB9               	movwf	_error& (0+255),b
  2413  001590  0E00               	movlw	0
  2414  001592  0100               	movlb	0	; () banked
  2415  001594  6FBA               	movwf	(_error+1)& (0+255),b
  2416  001596  0E00               	movlw	0
  2417  001598  0100               	movlb	0	; () banked
  2418  00159A  6FBB               	movwf	(_error+2)& (0+255),b
  2419                           
  2420                           ;PID.c: 39: prevErr = 0;
  2421  00159C  0E00               	movlw	0
  2422  00159E  0100               	movlb	0	; () banked
  2423  0015A0  6FBF               	movwf	_prevErr& (0+255),b
  2424  0015A2  0E00               	movlw	0
  2425  0015A4  0100               	movlb	0	; () banked
  2426  0015A6  6FC0               	movwf	(_prevErr+1)& (0+255),b
  2427  0015A8  0E00               	movlw	0
  2428  0015AA  0100               	movlb	0	; () banked
  2429  0015AC  6FC1               	movwf	(_prevErr+2)& (0+255),b
  2430                           
  2431                           ;PID.c: 40: intErr = 0;
  2432  0015AE  0E00               	movlw	0
  2433  0015B0  0100               	movlb	0	; () banked
  2434  0015B2  6FBC               	movwf	_intErr& (0+255),b
  2435  0015B4  0E00               	movlw	0
  2436  0015B6  0100               	movlb	0	; () banked
  2437  0015B8  6FBD               	movwf	(_intErr+1)& (0+255),b
  2438  0015BA  0E00               	movlw	0
  2439  0015BC  0100               	movlb	0	; () banked
  2440  0015BE  6FBE               	movwf	(_intErr+2)& (0+255),b
  2441                           
  2442                           ;PID.c: 41: PIDEnableFlag = 1;
  2443  0015C0  0E01               	movlw	1
  2444  0015C2  0100               	movlb	0	; () banked
  2445  0015C4  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  2446  0015C6  D000               	goto	l4193
  2447  0015C8                     l4193:
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;PID.c: 42: }
  2451                           ;PID.c: 44: error = setpoint - angle;
  2452  0015C8  C084  F018         	movff	calculatePID@angle,___ftneg@f1
  2453  0015CC  C085  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  2454  0015D0  C086  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  2455  0015D4  EC5F  F016         	call	___ftneg	;wreg free
  2456  0015D8  C018  F020         	movff	?___ftneg,___ftadd@f1
  2457  0015DC  C019  F021         	movff	?___ftneg+1,___ftadd@f1+1
  2458  0015E0  C01A  F022         	movff	?___ftneg+2,___ftadd@f1+2
  2459  0015E4  C087  F023         	movff	calculatePID@setpoint,___ftadd@f2
  2460  0015E8  C088  F024         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2461  0015EC  C089  F025         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2462  0015F0  EC15  F00C         	call	___ftadd	;wreg free
  2463  0015F4  C020  F0B9         	movff	?___ftadd,_error
  2464  0015F8  C021  F0BA         	movff	?___ftadd+1,_error+1
  2465  0015FC  C022  F0BB         	movff	?___ftadd+2,_error+2
  2466                           
  2467                           ;PID.c: 45: if (error > 180)
  2468  001600  0E00               	movlw	0
  2469  001602  6E18               	movwf	___ftge@ff1,c
  2470  001604  0E34               	movlw	52
  2471  001606  6E19               	movwf	___ftge@ff1+1,c
  2472  001608  0E43               	movlw	67
  2473  00160A  6E1A               	movwf	___ftge@ff1+2,c
  2474  00160C  C0B9  F01B         	movff	_error,___ftge@ff2
  2475  001610  C0BA  F01C         	movff	_error+1,___ftge@ff2+1
  2476  001614  C0BB  F01D         	movff	_error+2,___ftge@ff2+2
  2477  001618  EC4C  F012         	call	___ftge	;wreg free
  2478  00161C  B0D8               	btfsc	status,0,c
  2479  00161E  D015               	goto	l4199
  2480                           
  2481                           ;PID.c: 46: error -= 360;
  2482  001620  C0B9  F02C         	movff	_error,___ftsub@f1
  2483  001624  C0BA  F02D         	movff	_error+1,___ftsub@f1+1
  2484  001628  C0BB  F02E         	movff	_error+2,___ftsub@f1+2
  2485  00162C  0E00               	movlw	0
  2486  00162E  6E2F               	movwf	___ftsub@f2,c
  2487  001630  0EB4               	movlw	180
  2488  001632  6E30               	movwf	___ftsub@f2+1,c
  2489  001634  0E43               	movlw	67
  2490  001636  6E31               	movwf	___ftsub@f2+2,c
  2491  001638  EC44  F014         	call	___ftsub	;wreg free
  2492  00163C  C02C  F0B9         	movff	?___ftsub,_error
  2493  001640  C02D  F0BA         	movff	?___ftsub+1,_error+1
  2494  001644  C02E  F0BB         	movff	?___ftsub+2,_error+2
  2495  001648  D025               	goto	l149
  2496  00164A                     l4199:
  2497                           
  2498                           ;PID.c: 47: else if (error < -180)
  2499  00164A  C0B9  F018         	movff	_error,___ftge@ff1
  2500  00164E  C0BA  F019         	movff	_error+1,___ftge@ff1+1
  2501  001652  C0BB  F01A         	movff	_error+2,___ftge@ff1+2
  2502  001656  0E00               	movlw	0
  2503  001658  6E1B               	movwf	___ftge@ff2,c
  2504  00165A  0E34               	movlw	52
  2505  00165C  6E1C               	movwf	___ftge@ff2+1,c
  2506  00165E  0EC3               	movlw	195
  2507  001660  6E1D               	movwf	___ftge@ff2+2,c
  2508  001662  EC4C  F012         	call	___ftge	;wreg free
  2509  001666  B0D8               	btfsc	status,0,c
  2510  001668  D015               	goto	l149
  2511                           
  2512                           ;PID.c: 48: error += 360;
  2513  00166A  C0B9  F020         	movff	_error,___ftadd@f1
  2514  00166E  C0BA  F021         	movff	_error+1,___ftadd@f1+1
  2515  001672  C0BB  F022         	movff	_error+2,___ftadd@f1+2
  2516  001676  0E00               	movlw	0
  2517  001678  6E23               	movwf	___ftadd@f2,c
  2518  00167A  0EB4               	movlw	180
  2519  00167C  6E24               	movwf	___ftadd@f2+1,c
  2520  00167E  0E43               	movlw	67
  2521  001680  6E25               	movwf	___ftadd@f2+2,c
  2522  001682  EC15  F00C         	call	___ftadd	;wreg free
  2523  001686  C020  F0B9         	movff	?___ftadd,_error
  2524  00168A  C021  F0BA         	movff	?___ftadd+1,_error+1
  2525  00168E  C022  F0BB         	movff	?___ftadd+2,_error+2
  2526  001692  D000               	goto	l149
  2527  001694                     l149:
  2528                           
  2529                           ;PID.c: 50: derErr = error - prevErr;
  2530  001694  C0BF  F018         	movff	_prevErr,___ftneg@f1
  2531  001698  C0C0  F019         	movff	_prevErr+1,___ftneg@f1+1
  2532  00169C  C0C1  F01A         	movff	_prevErr+2,___ftneg@f1+2
  2533  0016A0  EC5F  F016         	call	___ftneg	;wreg free
  2534  0016A4  C018  F020         	movff	?___ftneg,___ftadd@f1
  2535  0016A8  C019  F021         	movff	?___ftneg+1,___ftadd@f1+1
  2536  0016AC  C01A  F022         	movff	?___ftneg+2,___ftadd@f1+2
  2537  0016B0  C0B9  F023         	movff	_error,___ftadd@f2
  2538  0016B4  C0BA  F024         	movff	_error+1,___ftadd@f2+1
  2539  0016B8  C0BB  F025         	movff	_error+2,___ftadd@f2+2
  2540  0016BC  EC15  F00C         	call	___ftadd	;wreg free
  2541  0016C0  C020  F08A         	movff	?___ftadd,calculatePID@derErr
  2542  0016C4  C021  F08B         	movff	?___ftadd+1,calculatePID@derErr+1
  2543  0016C8  C022  F08C         	movff	?___ftadd+2,calculatePID@derErr+2
  2544                           
  2545                           ;PID.c: 51: intErr += error;
  2546  0016CC  C0BC  F020         	movff	_intErr,___ftadd@f1
  2547  0016D0  C0BD  F021         	movff	_intErr+1,___ftadd@f1+1
  2548  0016D4  C0BE  F022         	movff	_intErr+2,___ftadd@f1+2
  2549  0016D8  C0B9  F023         	movff	_error,___ftadd@f2
  2550  0016DC  C0BA  F024         	movff	_error+1,___ftadd@f2+1
  2551  0016E0  C0BB  F025         	movff	_error+2,___ftadd@f2+2
  2552  0016E4  EC15  F00C         	call	___ftadd	;wreg free
  2553  0016E8  C020  F0BC         	movff	?___ftadd,_intErr
  2554  0016EC  C021  F0BD         	movff	?___ftadd+1,_intErr+1
  2555  0016F0  C022  F0BE         	movff	?___ftadd+2,_intErr+2
  2556                           
  2557                           ;PID.c: 52: if (intErr > 2000)
  2558  0016F4  0E00               	movlw	0
  2559  0016F6  6E18               	movwf	___ftge@ff1,c
  2560  0016F8  0EFA               	movlw	250
  2561  0016FA  6E19               	movwf	___ftge@ff1+1,c
  2562  0016FC  0E44               	movlw	68
  2563  0016FE  6E1A               	movwf	___ftge@ff1+2,c
  2564  001700  C0BC  F01B         	movff	_intErr,___ftge@ff2
  2565  001704  C0BD  F01C         	movff	_intErr+1,___ftge@ff2+1
  2566  001708  C0BE  F01D         	movff	_intErr+2,___ftge@ff2+2
  2567  00170C  EC4C  F012         	call	___ftge	;wreg free
  2568  001710  B0D8               	btfsc	status,0,c
  2569  001712  D00A               	goto	l4205
  2570                           
  2571                           ;PID.c: 53: intErr = 2000;
  2572  001714  0E00               	movlw	0
  2573  001716  0100               	movlb	0	; () banked
  2574  001718  6FBC               	movwf	_intErr& (0+255),b
  2575  00171A  0EFA               	movlw	250
  2576  00171C  0100               	movlb	0	; () banked
  2577  00171E  6FBD               	movwf	(_intErr+1)& (0+255),b
  2578  001720  0E44               	movlw	68
  2579  001722  0100               	movlb	0	; () banked
  2580  001724  6FBE               	movwf	(_intErr+2)& (0+255),b
  2581  001726  D000               	goto	l4205
  2582  001728                     l4205:
  2583                           
  2584                           ;PID.c: 55: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2585  001728  C0BC  F069         	movff	_intErr,___ftmul@f2
  2586  00172C  C0BD  F06A         	movff	_intErr+1,___ftmul@f2+1
  2587  001730  C0BE  F06B         	movff	_intErr+2,___ftmul@f2+2
  2588  001734  C0B3  F066         	movff	_Ki,___ftmul@f1
  2589  001738  C0B4  F067         	movff	_Ki+1,___ftmul@f1+1
  2590  00173C  C0B5  F068         	movff	_Ki+2,___ftmul@f1+2
  2591  001740  ECBC  F00D         	call	___ftmul	;wreg free
  2592  001744  C066  F08D         	movff	?___ftmul,_calculatePID$3489
  2593  001748  C067  F08E         	movff	?___ftmul+1,_calculatePID$3489+1
  2594  00174C  C068  F08F         	movff	?___ftmul+2,_calculatePID$3489+2
  2595                           
  2596                           ;PID.c: 55: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2597  001750  C0CA  F069         	movff	_loopTime,___ftmul@f2
  2598  001754  C0CB  F06A         	movff	_loopTime+1,___ftmul@f2+1
  2599  001758  C0CC  F06B         	movff	_loopTime+2,___ftmul@f2+2
  2600  00175C  C08D  F066         	movff	_calculatePID$3489,___ftmul@f1
  2601  001760  C08E  F067         	movff	_calculatePID$3489+1,___ftmul@f1+1
  2602  001764  C08F  F068         	movff	_calculatePID$3489+2,___ftmul@f1+2
  2603  001768  ECBC  F00D         	call	___ftmul	;wreg free
  2604  00176C  C066  F023         	movff	?___ftmul,___ftadd@f2
  2605  001770  C067  F024         	movff	?___ftmul+1,___ftadd@f2+1
  2606  001774  C068  F025         	movff	?___ftmul+2,___ftadd@f2+2
  2607  001778  C0B9  F069         	movff	_error,___ftmul@f2
  2608  00177C  C0BA  F06A         	movff	_error+1,___ftmul@f2+1
  2609  001780  C0BB  F06B         	movff	_error+2,___ftmul@f2+2
  2610  001784  C0B6  F066         	movff	_Kp,___ftmul@f1
  2611  001788  C0B7  F067         	movff	_Kp+1,___ftmul@f1+1
  2612  00178C  C0B8  F068         	movff	_Kp+2,___ftmul@f1+2
  2613  001790  ECBC  F00D         	call	___ftmul	;wreg free
  2614  001794  C066  F020         	movff	?___ftmul,___ftadd@f1
  2615  001798  C067  F021         	movff	?___ftmul+1,___ftadd@f1+1
  2616  00179C  C068  F022         	movff	?___ftmul+2,___ftadd@f1+2
  2617  0017A0  EC15  F00C         	call	___ftadd	;wreg free
  2618  0017A4  C020  F090         	movff	?___ftadd,_calculatePID$3490
  2619  0017A8  C021  F091         	movff	?___ftadd+1,_calculatePID$3490+1
  2620  0017AC  C022  F092         	movff	?___ftadd+2,_calculatePID$3490+2
  2621                           
  2622                           ;PID.c: 55: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2623  0017B0  C0B0  F069         	movff	_Kd,___ftmul@f2
  2624  0017B4  C0B1  F06A         	movff	_Kd+1,___ftmul@f2+1
  2625  0017B8  C0B2  F06B         	movff	_Kd+2,___ftmul@f2+2
  2626  0017BC  C0CA  F02F         	movff	_loopTime,___ftdiv@f2
  2627  0017C0  C0CB  F030         	movff	_loopTime+1,___ftdiv@f2+1
  2628  0017C4  C0CC  F031         	movff	_loopTime+2,___ftdiv@f2+2
  2629  0017C8  C08A  F02C         	movff	calculatePID@derErr,___ftdiv@f1
  2630  0017CC  C08B  F02D         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2631  0017D0  C08C  F02E         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2632  0017D4  EC9D  F00F         	call	___ftdiv	;wreg free
  2633  0017D8  C02C  F066         	movff	?___ftdiv,___ftmul@f1
  2634  0017DC  C02D  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  2635  0017E0  C02E  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  2636  0017E4  ECBC  F00D         	call	___ftmul	;wreg free
  2637  0017E8  C066  F023         	movff	?___ftmul,___ftadd@f2
  2638  0017EC  C067  F024         	movff	?___ftmul+1,___ftadd@f2+1
  2639  0017F0  C068  F025         	movff	?___ftmul+2,___ftadd@f2+2
  2640  0017F4  C090  F020         	movff	_calculatePID$3490,___ftadd@f1
  2641  0017F8  C091  F021         	movff	_calculatePID$3490+1,___ftadd@f1+1
  2642  0017FC  C092  F022         	movff	_calculatePID$3490+2,___ftadd@f1+2
  2643  001800  EC15  F00C         	call	___ftadd	;wreg free
  2644  001804  C020  F075         	movff	?___ftadd,___fttol@f1
  2645  001808  C021  F076         	movff	?___ftadd+1,___fttol@f1+1
  2646  00180C  C022  F077         	movff	?___ftadd+2,___fttol@f1+2
  2647  001810  EC04  F00F         	call	___fttol	;wreg free
  2648  001814  C075  F0C2         	movff	?___fttol,_motorInput
  2649  001818  C076  F0C3         	movff	?___fttol+1,_motorInput+1
  2650                           
  2651                           ;PID.c: 57: prevErr = error;
  2652  00181C  C0B9  F0BF         	movff	_error,_prevErr
  2653  001820  C0BA  F0C0         	movff	_error+1,_prevErr+1
  2654  001824  C0BB  F0C1         	movff	_error+2,_prevErr+2
  2655  001828  0012               	return		;funcret
  2656  00182A                     __end_of_calculatePID:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           intcon	equ	0xFF2
  2665                           postinc0	equ	0xFEE
  2666                           wreg	equ	0xFE8
  2667                           postdec1	equ	0xFE5
  2668                           fsr1h	equ	0xFE2
  2669                           fsr1l	equ	0xFE1
  2670                           indf2	equ	0xFDF
  2671                           postinc2	equ	0xFDE
  2672                           fsr2h	equ	0xFDA
  2673                           fsr2l	equ	0xFD9
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function ___fttol *****************
  2677 ;; Defined at:
  2678 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  f1              3   21[BANK0 ] float 
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;  lval            4   31[BANK0 ] unsigned long 
  2683 ;;  exp1            1   35[BANK0 ] unsigned char 
  2684 ;;  sign1           1   30[BANK0 ] unsigned char 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  4   21[BANK0 ] long 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;Total ram usage:       15 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    4
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_calculatePID
  2705 ;;		_ZeroMotors
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text4
  2710  001E08                     __ptext4:
  2711                           	opt stack 0
  2712  001E08                     ___fttol:
  2713                           	opt stack 23
  2714                           
  2715                           ;incstack = 0
  2716  001E08  C077  F079         	movff	___fttol@f1+2,??___fttol
  2717  001E0C  0100               	movlb	0	; () banked
  2718  001E0E  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2719  001E10  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2720  001E12  0100               	movlb	0	; () banked
  2721  001E14  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2722  001E16  0100               	movlb	0	; () banked
  2723  001E18  3779               	rlcf	??___fttol& (0+255),f,b
  2724  001E1A  E301               	bnc	u3501
  2725  001E1C  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2726  001E1E                     u3501:
  2727  001E1E  0100               	movlb	0	; () banked
  2728  001E20  5179               	movf	??___fttol& (0+255),w,b
  2729  001E22  0100               	movlb	0	; () banked
  2730  001E24  6F83               	movwf	___fttol@exp1& (0+255),b
  2731  001E26  0100               	movlb	0	; () banked
  2732  001E28  5183               	movf	___fttol@exp1& (0+255),w,b
  2733  001E2A  A4D8               	btfss	status,2,c
  2734  001E2C  D002               	goto	l4123
  2735  001E2E  D051               	goto	l4147
  2736                           
  2737                           ; BSR set to: 0
  2738                           
  2739                           ; BSR set to: 0
  2740  001E30  D083               	goto	l1126
  2741  001E32                     l4123:
  2742                           
  2743                           ; BSR set to: 0
  2744  001E32  0E17               	movlw	23
  2745  001E34  0100               	movlb	0	; () banked
  2746  001E36  6F79               	movwf	??___fttol& (0+255),b
  2747  001E38  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2748  001E3C  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2749  001E40  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2750  001E44  0100               	movlb	0	; () banked
  2751  001E46  2979               	incf	??___fttol& (0+255),w,b
  2752  001E48  0100               	movlb	0	; () banked
  2753  001E4A  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2754  001E4C  D005               	goto	u3520
  2755  001E4E                     u3525:
  2756  001E4E  0100               	movlb	0	; () banked
  2757  001E50  90D8               	bcf	status,0,c
  2758  001E52  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2759  001E54  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2760  001E56  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2761  001E58                     u3520:
  2762  001E58  0100               	movlb	0	; () banked
  2763  001E5A  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2764  001E5C  D7F8               	goto	u3525
  2765  001E5E  0100               	movlb	0	; () banked
  2766  001E60  517A               	movf	(??___fttol+1)& (0+255),w,b
  2767  001E62  0100               	movlb	0	; () banked
  2768  001E64  6F7E               	movwf	___fttol@sign1& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771  001E66  0100               	movlb	0	; () banked
  2772  001E68  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2773                           
  2774                           ; BSR set to: 0
  2775  001E6A  0EFF               	movlw	255
  2776  001E6C  0100               	movlb	0	; () banked
  2777  001E6E  1775               	andwf	___fttol@f1& (0+255),f,b
  2778  001E70  0EFF               	movlw	255
  2779  001E72  0100               	movlb	0	; () banked
  2780  001E74  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2781  001E76  0E00               	movlw	0
  2782  001E78  0100               	movlb	0	; () banked
  2783  001E7A  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2784                           
  2785                           ; BSR set to: 0
  2786  001E7C  0100               	movlb	0	; () banked
  2787  001E7E  5175               	movf	___fttol@f1& (0+255),w,b
  2788  001E80  0100               	movlb	0	; () banked
  2789  001E82  6F7F               	movwf	___fttol@lval& (0+255),b
  2790  001E84  0100               	movlb	0	; () banked
  2791  001E86  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2792  001E88  0100               	movlb	0	; () banked
  2793  001E8A  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2794  001E8C  0100               	movlb	0	; () banked
  2795  001E8E  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2796  001E90  0100               	movlb	0	; () banked
  2797  001E92  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2798  001E94  0100               	movlb	0	; () banked
  2799  001E96  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802  001E98  0E8E               	movlw	142
  2803  001E9A  0100               	movlb	0	; () banked
  2804  001E9C  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2805                           
  2806                           ; BSR set to: 0
  2807  001E9E  0100               	movlb	0	; () banked
  2808  001EA0  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2809  001EA2  D013               	goto	l4145
  2810                           
  2811                           ; BSR set to: 0
  2812  001EA4  0100               	movlb	0	; () banked
  2813  001EA6  5183               	movf	___fttol@exp1& (0+255),w,b
  2814  001EA8  0A80               	xorlw	128
  2815  001EAA  0F8F               	addlw	143
  2816  001EAC  B0D8               	btfsc	status,0,c
  2817  001EAE  D003               	goto	l4141
  2818  001EB0  D010               	goto	l4147
  2819                           
  2820                           ; BSR set to: 0
  2821                           
  2822                           ; BSR set to: 0
  2823  001EB2  D042               	goto	l1126
  2824                           
  2825                           ; BSR set to: 0
  2826  001EB4  D000               	goto	l4141
  2827  001EB6                     l4141:
  2828                           
  2829                           ; BSR set to: 0
  2830  001EB6  0100               	movlb	0	; () banked
  2831  001EB8  90D8               	bcf	status,0,c
  2832  001EBA  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2833  001EBC  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2834  001EBE  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2835  001EC0  337F               	rrcf	___fttol@lval& (0+255),f,b
  2836                           
  2837                           ; BSR set to: 0
  2838  001EC2  0100               	movlb	0	; () banked
  2839  001EC4  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2840  001EC6  D7F7               	goto	l4141
  2841                           
  2842                           ; BSR set to: 0
  2843  001EC8  D01F               	goto	l4155
  2844  001ECA                     l4145:
  2845                           
  2846                           ; BSR set to: 0
  2847  001ECA  0E17               	movlw	23
  2848  001ECC  0100               	movlb	0	; () banked
  2849  001ECE  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2850  001ED0  D014               	goto	l4153
  2851  001ED2                     l4147:
  2852                           
  2853                           ; BSR set to: 0
  2854  001ED2  0E00               	movlw	0
  2855  001ED4  0100               	movlb	0	; () banked
  2856  001ED6  6F75               	movwf	?___fttol& (0+255),b
  2857  001ED8  0E00               	movlw	0
  2858  001EDA  6F76               	movwf	(?___fttol+1)& (0+255),b
  2859  001EDC  0E00               	movlw	0
  2860  001EDE  6F77               	movwf	(?___fttol+2)& (0+255),b
  2861  001EE0  0E00               	movlw	0
  2862  001EE2  6F78               	movwf	(?___fttol+3)& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865  001EE4  D029               	goto	l1126
  2866                           
  2867                           ; BSR set to: 0
  2868  001EE6  D009               	goto	l4153
  2869  001EE8                     l4151:
  2870                           
  2871                           ; BSR set to: 0
  2872  001EE8  0100               	movlb	0	; () banked
  2873  001EEA  90D8               	bcf	status,0,c
  2874  001EEC  377F               	rlcf	___fttol@lval& (0+255),f,b
  2875  001EEE  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2876  001EF0  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2877  001EF2  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2878  001EF4  0100               	movlb	0	; () banked
  2879  001EF6  0783               	decf	___fttol@exp1& (0+255),f,b
  2880  001EF8  D000               	goto	l4153
  2881  001EFA                     l4153:
  2882                           
  2883                           ; BSR set to: 0
  2884  001EFA  0100               	movlb	0	; () banked
  2885  001EFC  5183               	movf	___fttol@exp1& (0+255),w,b
  2886  001EFE  0100               	movlb	0	; () banked
  2887  001F00  B4D8               	btfsc	status,2,c
  2888  001F02  D002               	goto	l4155
  2889  001F04  D7F1               	goto	l4151
  2890                           
  2891                           ; BSR set to: 0
  2892  001F06  D000               	goto	l4155
  2893  001F08                     l4155:
  2894                           
  2895                           ; BSR set to: 0
  2896  001F08  0100               	movlb	0	; () banked
  2897  001F0A  517E               	movf	___fttol@sign1& (0+255),w,b
  2898  001F0C  0100               	movlb	0	; () banked
  2899  001F0E  B4D8               	btfsc	status,2,c
  2900  001F10  D00A               	goto	l4159
  2901                           
  2902                           ; BSR set to: 0
  2903  001F12  0100               	movlb	0	; () banked
  2904  001F14  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2905  001F16  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2906  001F18  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2907  001F1A  6D7F               	negf	___fttol@lval& (0+255),b
  2908  001F1C  0E00               	movlw	0
  2909  001F1E  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2910  001F20  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2911  001F22  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2912  001F24  D000               	goto	l4159
  2913  001F26                     l4159:
  2914                           
  2915                           ; BSR set to: 0
  2916  001F26  C07F  F075         	movff	___fttol@lval,?___fttol
  2917  001F2A  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2918  001F2E  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2919  001F32  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2920  001F36  D000               	goto	l1126
  2921  001F38                     l1126:
  2922                           
  2923                           ; BSR set to: 0
  2924  001F38  0012               	return		;funcret
  2925  001F3A                     __end_of___fttol:
  2926                           	opt stack 0
  2927                           tblptru	equ	0xFF8
  2928                           tblptrh	equ	0xFF7
  2929                           tblptrl	equ	0xFF6
  2930                           tablat	equ	0xFF5
  2931                           prodh	equ	0xFF4
  2932                           prodl	equ	0xFF3
  2933                           intcon	equ	0xFF2
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           indf2	equ	0xFDF
  2940                           postinc2	equ	0xFDE
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function ___ftsub *****************
  2946 ;; Defined at:
  2947 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  f1              3   43[COMRAM] float 
  2950 ;;  f2              3   46[COMRAM] float 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  3   43[COMRAM] float 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:        6 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    6
  2969 ;; This function calls:
  2970 ;;		___ftadd
  2971 ;; This function is called by:
  2972 ;;		_calculatePID
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text5
  2977  002888                     __ptext5:
  2978                           	opt stack 0
  2979  002888                     ___ftsub:
  2980                           	opt stack 21
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;incstack = 0
  2984  002888  502F               	movf	___ftsub@f2,w,c
  2985  00288A  1030               	iorwf	___ftsub@f2+1,w,c
  2986  00288C  1031               	iorwf	___ftsub@f2+2,w,c
  2987  00288E  B4D8               	btfsc	status,2,c
  2988  002890  D007               	goto	l4113
  2989  002892  0E00               	movlw	0
  2990  002894  1A2F               	xorwf	___ftsub@f2,f,c
  2991  002896  0E00               	movlw	0
  2992  002898  1A30               	xorwf	___ftsub@f2+1,f,c
  2993  00289A  0E80               	movlw	128
  2994  00289C  1A31               	xorwf	___ftsub@f2+2,f,c
  2995  00289E  D000               	goto	l4113
  2996  0028A0                     l4113:
  2997  0028A0  C02C  F020         	movff	___ftsub@f1,___ftadd@f1
  2998  0028A4  C02D  F021         	movff	___ftsub@f1+1,___ftadd@f1+1
  2999  0028A8  C02E  F022         	movff	___ftsub@f1+2,___ftadd@f1+2
  3000  0028AC  C02F  F023         	movff	___ftsub@f2,___ftadd@f2
  3001  0028B0  C030  F024         	movff	___ftsub@f2+1,___ftadd@f2+1
  3002  0028B4  C031  F025         	movff	___ftsub@f2+2,___ftadd@f2+2
  3003  0028B8  EC15  F00C         	call	___ftadd	;wreg free
  3004  0028BC  C020  F02C         	movff	?___ftadd,?___ftsub
  3005  0028C0  C021  F02D         	movff	?___ftadd+1,?___ftsub+1
  3006  0028C4  C022  F02E         	movff	?___ftadd+2,?___ftsub+2
  3007  0028C8  D000               	goto	l1122
  3008  0028CA                     l1122:
  3009  0028CA  0012               	return		;funcret
  3010  0028CC                     __end_of___ftsub:
  3011                           	opt stack 0
  3012                           tblptru	equ	0xFF8
  3013                           tblptrh	equ	0xFF7
  3014                           tblptrl	equ	0xFF6
  3015                           tablat	equ	0xFF5
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           intcon	equ	0xFF2
  3019                           postinc0	equ	0xFEE
  3020                           wreg	equ	0xFE8
  3021                           postdec1	equ	0xFE5
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function ___ftadd *****************
  3031 ;; Defined at:
  3032 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  f1              3   31[COMRAM] float 
  3035 ;;  f2              3   34[COMRAM] float 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  exp1            1   42[COMRAM] unsigned char 
  3038 ;;  exp2            1   41[COMRAM] unsigned char 
  3039 ;;  sign            1   40[COMRAM] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  3   31[COMRAM] float 
  3042 ;; Registers used:
  3043 ;;		wreg, status,2, status,0, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3049 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;Total ram usage:       12 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    5
  3056 ;; This function calls:
  3057 ;;		___ftpack
  3058 ;; This function is called by:
  3059 ;;		_calculatePID
  3060 ;;		_ZeroMotors
  3061 ;;		___ftsub
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text6
  3066  00182A                     __ptext6:
  3067                           	opt stack 0
  3068  00182A                     ___ftadd:
  3069                           	opt stack 21
  3070                           
  3071                           ;incstack = 0
  3072  00182A  C022  F026         	movff	___ftadd@f1+2,??___ftadd
  3073  00182E  6A27               	clrf	(??___ftadd+1)& (0+255),c
  3074  001830  6A28               	clrf	(??___ftadd+2)& (0+255),c
  3075  001832  3421               	rlcf	___ftadd@f1+1,w,c
  3076  001834  3626               	rlcf	??___ftadd& (0+255),f,c
  3077  001836  E301               	bnc	u3161
  3078  001838  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  3079  00183A                     u3161:
  3080  00183A  5026               	movf	??___ftadd,w,c
  3081  00183C  6E2B               	movwf	___ftadd@exp1,c
  3082  00183E  C025  F026         	movff	___ftadd@f2+2,??___ftadd
  3083  001842  6A27               	clrf	(??___ftadd+1)& (0+255),c
  3084  001844  6A28               	clrf	(??___ftadd+2)& (0+255),c
  3085  001846  3424               	rlcf	___ftadd@f2+1,w,c
  3086  001848  3626               	rlcf	??___ftadd& (0+255),f,c
  3087  00184A  E301               	bnc	u3171
  3088  00184C  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  3089  00184E                     u3171:
  3090  00184E  5026               	movf	??___ftadd,w,c
  3091  001850  6E2A               	movwf	___ftadd@exp2,c
  3092  001852  502B               	movf	___ftadd@exp1,w,c
  3093  001854  B4D8               	btfsc	status,2,c
  3094  001856  D00B               	goto	l1058
  3095  001858  502A               	movf	___ftadd@exp2,w,c
  3096  00185A  5C2B               	subwf	___ftadd@exp1,w,c
  3097  00185C  B0D8               	btfsc	status,0,c
  3098  00185E  D00E               	goto	l3949
  3099  001860  502B               	movf	___ftadd@exp1,w,c
  3100  001862  0800               	sublw	0
  3101  001864  242A               	addwf	___ftadd@exp2,w,c
  3102  001866  6E26               	movwf	??___ftadd& (0+255),c
  3103  001868  0E18               	movlw	24
  3104  00186A  6426               	cpfsgt	??___ftadd,c
  3105  00186C  D007               	goto	l3949
  3106  00186E                     l1058:
  3107  00186E  C023  F020         	movff	___ftadd@f2,?___ftadd
  3108  001872  C024  F021         	movff	___ftadd@f2+1,?___ftadd+1
  3109  001876  C025  F022         	movff	___ftadd@f2+2,?___ftadd+2
  3110  00187A  D0B8               	goto	l1059
  3111  00187C                     l3949:
  3112  00187C  502A               	movf	___ftadd@exp2,w,c
  3113  00187E  B4D8               	btfsc	status,2,c
  3114  001880  D00B               	goto	l1062
  3115  001882  502B               	movf	___ftadd@exp1,w,c
  3116  001884  5C2A               	subwf	___ftadd@exp2,w,c
  3117  001886  B0D8               	btfsc	status,0,c
  3118  001888  D00E               	goto	l3955
  3119  00188A  502A               	movf	___ftadd@exp2,w,c
  3120  00188C  0800               	sublw	0
  3121  00188E  242B               	addwf	___ftadd@exp1,w,c
  3122  001890  6E26               	movwf	??___ftadd& (0+255),c
  3123  001892  0E18               	movlw	24
  3124  001894  6426               	cpfsgt	??___ftadd,c
  3125  001896  D007               	goto	l3955
  3126  001898                     l1062:
  3127  001898  C020  F020         	movff	___ftadd@f1,?___ftadd
  3128  00189C  C021  F021         	movff	___ftadd@f1+1,?___ftadd+1
  3129  0018A0  C022  F022         	movff	___ftadd@f1+2,?___ftadd+2
  3130  0018A4  D0A3               	goto	l1059
  3131  0018A6                     l3955:
  3132  0018A6  0E06               	movlw	6
  3133  0018A8  6E29               	movwf	___ftadd@sign,c
  3134  0018AA  AE22               	btfss	___ftadd@f1+2,7,c
  3135  0018AC  D002               	goto	l3961
  3136  0018AE  8E29               	bsf	___ftadd@sign,7,c
  3137  0018B0  D000               	goto	l3961
  3138  0018B2                     l3961:
  3139  0018B2  BE25               	btfsc	___ftadd@f2+2,7,c
  3140  0018B4  8C29               	bsf	___ftadd@sign,6,c
  3141  0018B6  8E21               	bsf	___ftadd@f1+1,7,c
  3142  0018B8  0EFF               	movlw	255
  3143  0018BA  1620               	andwf	___ftadd@f1,f,c
  3144  0018BC  0EFF               	movlw	255
  3145  0018BE  1621               	andwf	___ftadd@f1+1,f,c
  3146  0018C0  0E00               	movlw	0
  3147  0018C2  1622               	andwf	___ftadd@f1+2,f,c
  3148  0018C4  8E24               	bsf	___ftadd@f2+1,7,c
  3149  0018C6  0EFF               	movlw	255
  3150  0018C8  1623               	andwf	___ftadd@f2,f,c
  3151  0018CA  0EFF               	movlw	255
  3152  0018CC  1624               	andwf	___ftadd@f2+1,f,c
  3153  0018CE  0E00               	movlw	0
  3154  0018D0  1625               	andwf	___ftadd@f2+2,f,c
  3155  0018D2  502A               	movf	___ftadd@exp2,w,c
  3156  0018D4  5C2B               	subwf	___ftadd@exp1,w,c
  3157  0018D6  B0D8               	btfsc	status,0,c
  3158  0018D8  D01E               	goto	l3981
  3159  0018DA                     l3971:
  3160  0018DA  90D8               	bcf	status,0,c
  3161  0018DC  3623               	rlcf	___ftadd@f2,f,c
  3162  0018DE  3624               	rlcf	___ftadd@f2+1,f,c
  3163  0018E0  3625               	rlcf	___ftadd@f2+2,f,c
  3164  0018E2  062A               	decf	___ftadd@exp2,f,c
  3165  0018E4  502B               	movf	___ftadd@exp1,w,c
  3166  0018E6  182A               	xorwf	___ftadd@exp2,w,c
  3167  0018E8  B4D8               	btfsc	status,2,c
  3168  0018EA  D00F               	goto	l3979
  3169  0018EC  0629               	decf	___ftadd@sign,f,c
  3170  0018EE  C029  F026         	movff	___ftadd@sign,??___ftadd
  3171  0018F2  0E07               	movlw	7
  3172  0018F4  1626               	andwf	??___ftadd,f,c
  3173  0018F6  B4D8               	btfsc	status,2,c
  3174  0018F8  D008               	goto	l3979
  3175  0018FA  D7EF               	goto	l3971
  3176  0018FC  D006               	goto	l3979
  3177  0018FE                     l3977:
  3178  0018FE  90D8               	bcf	status,0,c
  3179  001900  3222               	rrcf	___ftadd@f1+2,f,c
  3180  001902  3221               	rrcf	___ftadd@f1+1,f,c
  3181  001904  3220               	rrcf	___ftadd@f1,f,c
  3182  001906  2A2B               	incf	___ftadd@exp1,f,c
  3183  001908  D000               	goto	l3979
  3184  00190A                     l3979:
  3185  00190A  502A               	movf	___ftadd@exp2,w,c
  3186  00190C  182B               	xorwf	___ftadd@exp1,w,c
  3187  00190E  B4D8               	btfsc	status,2,c
  3188  001910  D024               	goto	l1073
  3189  001912  D7F5               	goto	l3977
  3190  001914  D022               	goto	l1073
  3191  001916                     l3981:
  3192  001916  502B               	movf	___ftadd@exp1,w,c
  3193  001918  5C2A               	subwf	___ftadd@exp2,w,c
  3194  00191A  B0D8               	btfsc	status,0,c
  3195  00191C  D01E               	goto	l1073
  3196  00191E                     l3983:
  3197  00191E  90D8               	bcf	status,0,c
  3198  001920  3620               	rlcf	___ftadd@f1,f,c
  3199  001922  3621               	rlcf	___ftadd@f1+1,f,c
  3200  001924  3622               	rlcf	___ftadd@f1+2,f,c
  3201  001926  062B               	decf	___ftadd@exp1,f,c
  3202  001928  502B               	movf	___ftadd@exp1,w,c
  3203  00192A  182A               	xorwf	___ftadd@exp2,w,c
  3204  00192C  B4D8               	btfsc	status,2,c
  3205  00192E  D00F               	goto	l3991
  3206  001930  0629               	decf	___ftadd@sign,f,c
  3207  001932  C029  F026         	movff	___ftadd@sign,??___ftadd
  3208  001936  0E07               	movlw	7
  3209  001938  1626               	andwf	??___ftadd,f,c
  3210  00193A  B4D8               	btfsc	status,2,c
  3211  00193C  D008               	goto	l3991
  3212  00193E  D7EF               	goto	l3983
  3213  001940  D006               	goto	l3991
  3214  001942                     l3989:
  3215  001942  90D8               	bcf	status,0,c
  3216  001944  3225               	rrcf	___ftadd@f2+2,f,c
  3217  001946  3224               	rrcf	___ftadd@f2+1,f,c
  3218  001948  3223               	rrcf	___ftadd@f2,f,c
  3219  00194A  2A2A               	incf	___ftadd@exp2,f,c
  3220  00194C  D000               	goto	l3991
  3221  00194E                     l3991:
  3222  00194E  502A               	movf	___ftadd@exp2,w,c
  3223  001950  182B               	xorwf	___ftadd@exp1,w,c
  3224  001952  B4D8               	btfsc	status,2,c
  3225  001954  D002               	goto	l1073
  3226  001956  D7F5               	goto	l3989
  3227  001958  D000               	goto	l1073
  3228  00195A                     l1073:
  3229  00195A  AE29               	btfss	___ftadd@sign,7,c
  3230  00195C  D00C               	goto	l1082
  3231  00195E  0EFF               	movlw	255
  3232  001960  1A20               	xorwf	___ftadd@f1,f,c
  3233  001962  0EFF               	movlw	255
  3234  001964  1A21               	xorwf	___ftadd@f1+1,f,c
  3235  001966  0EFF               	movlw	255
  3236  001968  1A22               	xorwf	___ftadd@f1+2,f,c
  3237  00196A  0E01               	movlw	1
  3238  00196C  2620               	addwf	___ftadd@f1,f,c
  3239  00196E  0E00               	movlw	0
  3240  001970  2221               	addwfc	___ftadd@f1+1,f,c
  3241  001972  0E00               	movlw	0
  3242  001974  2222               	addwfc	___ftadd@f1+2,f,c
  3243  001976                     l1082:
  3244  001976  AC29               	btfss	___ftadd@sign,6,c
  3245  001978  D00D               	goto	l3997
  3246  00197A  0EFF               	movlw	255
  3247  00197C  1A23               	xorwf	___ftadd@f2,f,c
  3248  00197E  0EFF               	movlw	255
  3249  001980  1A24               	xorwf	___ftadd@f2+1,f,c
  3250  001982  0EFF               	movlw	255
  3251  001984  1A25               	xorwf	___ftadd@f2+2,f,c
  3252  001986  0E01               	movlw	1
  3253  001988  2623               	addwf	___ftadd@f2,f,c
  3254  00198A  0E00               	movlw	0
  3255  00198C  2224               	addwfc	___ftadd@f2+1,f,c
  3256  00198E  0E00               	movlw	0
  3257  001990  2225               	addwfc	___ftadd@f2+2,f,c
  3258  001992  D000               	goto	l3997
  3259  001994                     l3997:
  3260  001994  0E00               	movlw	0
  3261  001996  6E29               	movwf	___ftadd@sign,c
  3262  001998  5020               	movf	___ftadd@f1,w,c
  3263  00199A  2623               	addwf	___ftadd@f2,f,c
  3264  00199C  5021               	movf	___ftadd@f1+1,w,c
  3265  00199E  2224               	addwfc	___ftadd@f2+1,f,c
  3266  0019A0  5022               	movf	___ftadd@f1+2,w,c
  3267  0019A2  2225               	addwfc	___ftadd@f2+2,f,c
  3268  0019A4  AE25               	btfss	___ftadd@f2+2,7,c
  3269  0019A6  D00F               	goto	l4007
  3270  0019A8  0EFF               	movlw	255
  3271  0019AA  1A23               	xorwf	___ftadd@f2,f,c
  3272  0019AC  0EFF               	movlw	255
  3273  0019AE  1A24               	xorwf	___ftadd@f2+1,f,c
  3274  0019B0  0EFF               	movlw	255
  3275  0019B2  1A25               	xorwf	___ftadd@f2+2,f,c
  3276  0019B4  0E01               	movlw	1
  3277  0019B6  2623               	addwf	___ftadd@f2,f,c
  3278  0019B8  0E00               	movlw	0
  3279  0019BA  2224               	addwfc	___ftadd@f2+1,f,c
  3280  0019BC  0E00               	movlw	0
  3281  0019BE  2225               	addwfc	___ftadd@f2+2,f,c
  3282  0019C0  0E01               	movlw	1
  3283  0019C2  6E29               	movwf	___ftadd@sign,c
  3284  0019C4  D000               	goto	l4007
  3285  0019C6                     l4007:
  3286  0019C6  C023  F018         	movff	___ftadd@f2,___ftpack@arg
  3287  0019CA  C024  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  3288  0019CE  C025  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  3289  0019D2  C02B  F01B         	movff	___ftadd@exp1,___ftpack@exp
  3290  0019D6  C029  F01C         	movff	___ftadd@sign,___ftpack@sign
  3291  0019DA  EC8D  F010         	call	___ftpack	;wreg free
  3292  0019DE  C018  F020         	movff	?___ftpack,?___ftadd
  3293  0019E2  C019  F021         	movff	?___ftpack+1,?___ftadd+1
  3294  0019E6  C01A  F022         	movff	?___ftpack+2,?___ftadd+2
  3295  0019EA  D000               	goto	l1059
  3296  0019EC                     l1059:
  3297  0019EC  0012               	return		;funcret
  3298  0019EE                     __end_of___ftadd:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1h	equ	0xFE2
  3311                           fsr1l	equ	0xFE1
  3312                           indf2	equ	0xFDF
  3313                           postinc2	equ	0xFDE
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function ___ftneg *****************
  3319 ;; Defined at:
  3320 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  f1              3   23[COMRAM] float 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;		None
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  3   23[COMRAM] float 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3334 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;Total ram usage:        3 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    4
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_calculatePID
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text7
  3349  002CBE                     __ptext7:
  3350                           	opt stack 0
  3351  002CBE                     ___ftneg:
  3352                           	opt stack 23
  3353                           
  3354                           ;incstack = 0
  3355  002CBE  5018               	movf	___ftneg@f1,w,c
  3356  002CC0  1019               	iorwf	___ftneg@f1+1,w,c
  3357  002CC2  101A               	iorwf	___ftneg@f1+2,w,c
  3358  002CC4  B4D8               	btfsc	status,2,c
  3359  002CC6  D006               	goto	l1115
  3360  002CC8  0E00               	movlw	0
  3361  002CCA  1A18               	xorwf	___ftneg@f1,f,c
  3362  002CCC  0E00               	movlw	0
  3363  002CCE  1A19               	xorwf	___ftneg@f1+1,f,c
  3364  002CD0  0E80               	movlw	128
  3365  002CD2  1A1A               	xorwf	___ftneg@f1+2,f,c
  3366  002CD4                     l1115:
  3367  002CD4  C018  F018         	movff	___ftneg@f1,?___ftneg
  3368  002CD8  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  3369  002CDC  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  3370  002CE0  0012               	return		;funcret
  3371  002CE2                     __end_of___ftneg:
  3372                           	opt stack 0
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           prodh	equ	0xFF4
  3378                           prodl	equ	0xFF3
  3379                           intcon	equ	0xFF2
  3380                           postinc0	equ	0xFEE
  3381                           wreg	equ	0xFE8
  3382                           postdec1	equ	0xFE5
  3383                           fsr1h	equ	0xFE2
  3384                           fsr1l	equ	0xFE1
  3385                           indf2	equ	0xFDF
  3386                           postinc2	equ	0xFDE
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function ___ftge *****************
  3392 ;; Defined at:
  3393 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  ff1             3   23[COMRAM] float 
  3396 ;;  ff2             3   26[COMRAM] float 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;		None
  3399 ;; Return value:  Size  Location     Type
  3400 ;;		None               void
  3401 ;; Registers used:
  3402 ;;		wreg, status,2, status,0
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3408 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;Total ram usage:        9 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    4
  3415 ;; This function calls:
  3416 ;;		Nothing
  3417 ;; This function is called by:
  3418 ;;		_calculatePID
  3419 ;;		_ZeroMotors
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text8
  3424  002498                     __ptext8:
  3425                           	opt stack 0
  3426  002498                     ___ftge:
  3427                           	opt stack 23
  3428                           
  3429                           ;incstack = 0
  3430  002498  AE1A               	btfss	___ftge@ff1+2,7,c
  3431  00249A  D017               	goto	l2907
  3432  00249C  C018  F01E         	movff	___ftge@ff1,??___ftge
  3433  0024A0  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3434  0024A4  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3435  0024A8  1E1E               	comf	??___ftge,f,c
  3436  0024AA  1E1F               	comf	??___ftge+1,f,c
  3437  0024AC  1E20               	comf	??___ftge+2,f,c
  3438  0024AE  2A1E               	incf	??___ftge,f,c
  3439  0024B0  0E00               	movlw	0
  3440  0024B2  221F               	addwfc	??___ftge+1,f,c
  3441  0024B4  2220               	addwfc	??___ftge+2,f,c
  3442  0024B6  0E00               	movlw	0
  3443  0024B8  241E               	addwf	??___ftge,w,c
  3444  0024BA  6E18               	movwf	___ftge@ff1,c
  3445  0024BC  0E00               	movlw	0
  3446  0024BE  201F               	addwfc	??___ftge+1,w,c
  3447  0024C0  6E19               	movwf	___ftge@ff1+1,c
  3448  0024C2  0E80               	movlw	128
  3449  0024C4  2020               	addwfc	??___ftge+2,w,c
  3450  0024C6  6E1A               	movwf	___ftge@ff1+2,c
  3451  0024C8  D000               	goto	l2907
  3452  0024CA                     l2907:
  3453  0024CA  AE1D               	btfss	___ftge@ff2+2,7,c
  3454  0024CC  D017               	goto	l2911
  3455  0024CE  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3456  0024D2  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3457  0024D6  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3458  0024DA  1E1E               	comf	??___ftge,f,c
  3459  0024DC  1E1F               	comf	??___ftge+1,f,c
  3460  0024DE  1E20               	comf	??___ftge+2,f,c
  3461  0024E0  2A1E               	incf	??___ftge,f,c
  3462  0024E2  0E00               	movlw	0
  3463  0024E4  221F               	addwfc	??___ftge+1,f,c
  3464  0024E6  2220               	addwfc	??___ftge+2,f,c
  3465  0024E8  0E00               	movlw	0
  3466  0024EA  241E               	addwf	??___ftge,w,c
  3467  0024EC  6E1B               	movwf	___ftge@ff2,c
  3468  0024EE  0E00               	movlw	0
  3469  0024F0  201F               	addwfc	??___ftge+1,w,c
  3470  0024F2  6E1C               	movwf	___ftge@ff2+1,c
  3471  0024F4  0E80               	movlw	128
  3472  0024F6  2020               	addwfc	??___ftge+2,w,c
  3473  0024F8  6E1D               	movwf	___ftge@ff2+2,c
  3474  0024FA  D000               	goto	l2911
  3475  0024FC                     l2911:
  3476  0024FC  0E00               	movlw	0
  3477  0024FE  1A18               	xorwf	___ftge@ff1,f,c
  3478  002500  0E00               	movlw	0
  3479  002502  1A19               	xorwf	___ftge@ff1+1,f,c
  3480  002504  0E80               	movlw	128
  3481  002506  1A1A               	xorwf	___ftge@ff1+2,f,c
  3482  002508  0E00               	movlw	0
  3483  00250A  1A1B               	xorwf	___ftge@ff2,f,c
  3484  00250C  0E00               	movlw	0
  3485  00250E  1A1C               	xorwf	___ftge@ff2+1,f,c
  3486  002510  0E80               	movlw	128
  3487  002512  1A1D               	xorwf	___ftge@ff2+2,f,c
  3488  002514  501B               	movf	___ftge@ff2,w,c
  3489  002516  5C18               	subwf	___ftge@ff1,w,c
  3490  002518  501C               	movf	___ftge@ff2+1,w,c
  3491  00251A  5819               	subwfb	___ftge@ff1+1,w,c
  3492  00251C  501D               	movf	___ftge@ff2+2,w,c
  3493  00251E  581A               	subwfb	___ftge@ff1+2,w,c
  3494  002520  B0D8               	btfsc	status,0,c
  3495  002522  D002               	goto	l2917
  3496  002524  90D8               	bcf	status,0,c
  3497  002526  D002               	goto	l1099
  3498  002528                     l2917:
  3499  002528  80D8               	bsf	status,0,c
  3500  00252A  D000               	goto	l1099
  3501  00252C                     l1099:
  3502  00252C  0012               	return		;funcret
  3503  00252E                     __end_of___ftge:
  3504                           	opt stack 0
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon	equ	0xFF2
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1h	equ	0xFE2
  3516                           fsr1l	equ	0xFE1
  3517                           indf2	equ	0xFDF
  3518                           postinc2	equ	0xFDE
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function ___ftdiv *****************
  3524 ;; Defined at:
  3525 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  f1              3   43[COMRAM] float 
  3528 ;;  f2              3   46[COMRAM] float 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  f3              3    1[BANK0 ] float 
  3531 ;;  sign            1    5[BANK0 ] unsigned char 
  3532 ;;  exp             1    4[BANK0 ] unsigned char 
  3533 ;;  cntr            1    0[BANK0 ] unsigned char 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  3   43[COMRAM] float 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:       15 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    5
  3550 ;; This function calls:
  3551 ;;		___ftpack
  3552 ;; This function is called by:
  3553 ;;		_calculatePID
  3554 ;;		_ZeroMotors
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text9
  3559  001F3A                     __ptext9:
  3560                           	opt stack 0
  3561  001F3A                     ___ftdiv:
  3562                           	opt stack 22
  3563                           
  3564                           ;incstack = 0
  3565  001F3A  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  3566  001F3E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  3567  001F40  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  3568  001F42  342D               	rlcf	___ftdiv@f1+1,w,c
  3569  001F44  3632               	rlcf	??___ftdiv& (0+255),f,c
  3570  001F46  E301               	bnc	u3381
  3571  001F48  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  3572  001F4A                     u3381:
  3573  001F4A  5032               	movf	??___ftdiv,w,c
  3574  001F4C  0100               	movlb	0	; () banked
  3575  001F4E  6F64               	movwf	___ftdiv@exp& (0+255),b
  3576  001F50  0100               	movlb	0	; () banked
  3577  001F52  5164               	movf	___ftdiv@exp& (0+255),w,b
  3578  001F54  A4D8               	btfss	status,2,c
  3579  001F56  D002               	goto	l4021
  3580  001F58  D010               	goto	l4023
  3581                           
  3582                           ; BSR set to: 0
  3583                           
  3584                           ; BSR set to: 0
  3585  001F5A  D06E               	goto	l1090
  3586  001F5C                     l4021:
  3587                           
  3588                           ; BSR set to: 0
  3589  001F5C  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  3590  001F60  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  3591  001F62  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  3592  001F64  3430               	rlcf	___ftdiv@f2+1,w,c
  3593  001F66  3632               	rlcf	??___ftdiv& (0+255),f,c
  3594  001F68  E301               	bnc	u3401
  3595  001F6A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  3596  001F6C                     u3401:
  3597  001F6C  5032               	movf	??___ftdiv,w,c
  3598  001F6E  0100               	movlb	0	; () banked
  3599  001F70  6F65               	movwf	___ftdiv@sign& (0+255),b
  3600  001F72  0100               	movlb	0	; () banked
  3601  001F74  5165               	movf	___ftdiv@sign& (0+255),w,b
  3602  001F76  A4D8               	btfss	status,2,c
  3603  001F78  D007               	goto	l4027
  3604  001F7A                     l4023:
  3605                           
  3606                           ; BSR set to: 0
  3607  001F7A  0E00               	movlw	0
  3608  001F7C  6E2C               	movwf	?___ftdiv,c
  3609  001F7E  0E00               	movlw	0
  3610  001F80  6E2D               	movwf	?___ftdiv+1,c
  3611  001F82  0E00               	movlw	0
  3612  001F84  6E2E               	movwf	?___ftdiv+2,c
  3613                           
  3614                           ; BSR set to: 0
  3615  001F86  D058               	goto	l1090
  3616  001F88                     l4027:
  3617                           
  3618                           ; BSR set to: 0
  3619  001F88  0E00               	movlw	0
  3620  001F8A  0100               	movlb	0	; () banked
  3621  001F8C  6F61               	movwf	___ftdiv@f3& (0+255),b
  3622  001F8E  0E00               	movlw	0
  3623  001F90  0100               	movlb	0	; () banked
  3624  001F92  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
  3625  001F94  0E00               	movlw	0
  3626  001F96  0100               	movlb	0	; () banked
  3627  001F98  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
  3628                           
  3629                           ; BSR set to: 0
  3630  001F9A  0100               	movlb	0	; () banked
  3631  001F9C  5165               	movf	___ftdiv@sign& (0+255),w,b
  3632  001F9E  0F89               	addlw	137
  3633  001FA0  0100               	movlb	0	; () banked
  3634  001FA2  5F64               	subwf	___ftdiv@exp& (0+255),f,b
  3635                           
  3636                           ; BSR set to: 0
  3637  001FA4  C02E  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
  3638                           
  3639                           ; BSR set to: 0
  3640  001FA8  5031               	movf	___ftdiv@f2+2,w,c
  3641  001FAA  0100               	movlb	0	; () banked
  3642  001FAC  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
  3643                           
  3644                           ; BSR set to: 0
  3645  001FAE  0E80               	movlw	128
  3646  001FB0  0100               	movlb	0	; () banked
  3647  001FB2  1765               	andwf	___ftdiv@sign& (0+255),f,b
  3648                           
  3649                           ; BSR set to: 0
  3650  001FB4  8E2D               	bsf	___ftdiv@f1+1,7,c
  3651                           
  3652                           ; BSR set to: 0
  3653  001FB6  0EFF               	movlw	255
  3654  001FB8  162C               	andwf	___ftdiv@f1,f,c
  3655  001FBA  0EFF               	movlw	255
  3656  001FBC  162D               	andwf	___ftdiv@f1+1,f,c
  3657  001FBE  0E00               	movlw	0
  3658  001FC0  162E               	andwf	___ftdiv@f1+2,f,c
  3659                           
  3660                           ; BSR set to: 0
  3661  001FC2  8E30               	bsf	___ftdiv@f2+1,7,c
  3662                           
  3663                           ; BSR set to: 0
  3664  001FC4  0EFF               	movlw	255
  3665  001FC6  162F               	andwf	___ftdiv@f2,f,c
  3666  001FC8  0EFF               	movlw	255
  3667  001FCA  1630               	andwf	___ftdiv@f2+1,f,c
  3668  001FCC  0E00               	movlw	0
  3669  001FCE  1631               	andwf	___ftdiv@f2+2,f,c
  3670                           
  3671                           ; BSR set to: 0
  3672  001FD0  0E18               	movlw	24
  3673  001FD2  0100               	movlb	0	; () banked
  3674  001FD4  6F60               	movwf	___ftdiv@cntr& (0+255),b
  3675  001FD6  D000               	goto	l4047
  3676  001FD8                     l4047:
  3677                           
  3678                           ; BSR set to: 0
  3679  001FD8  0100               	movlb	0	; () banked
  3680  001FDA  90D8               	bcf	status,0,c
  3681  001FDC  3761               	rlcf	___ftdiv@f3& (0+255),f,b
  3682  001FDE  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3683  001FE0  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3684                           
  3685                           ; BSR set to: 0
  3686  001FE2  502F               	movf	___ftdiv@f2,w,c
  3687  001FE4  5C2C               	subwf	___ftdiv@f1,w,c
  3688  001FE6  5030               	movf	___ftdiv@f2+1,w,c
  3689  001FE8  582D               	subwfb	___ftdiv@f1+1,w,c
  3690  001FEA  5031               	movf	___ftdiv@f2+2,w,c
  3691  001FEC  582E               	subwfb	___ftdiv@f1+2,w,c
  3692  001FEE  A0D8               	btfss	status,0,c
  3693  001FF0  D008               	goto	l1093
  3694                           
  3695                           ; BSR set to: 0
  3696  001FF2  502F               	movf	___ftdiv@f2,w,c
  3697  001FF4  5E2C               	subwf	___ftdiv@f1,f,c
  3698  001FF6  5030               	movf	___ftdiv@f2+1,w,c
  3699  001FF8  5A2D               	subwfb	___ftdiv@f1+1,f,c
  3700  001FFA  5031               	movf	___ftdiv@f2+2,w,c
  3701  001FFC  5A2E               	subwfb	___ftdiv@f1+2,f,c
  3702                           
  3703                           ; BSR set to: 0
  3704  001FFE  0100               	movlb	0	; () banked
  3705  002000  8161               	bsf	___ftdiv@f3& (0+255),0,b
  3706  002002                     l1093:
  3707                           
  3708                           ; BSR set to: 0
  3709  002002  90D8               	bcf	status,0,c
  3710  002004  362C               	rlcf	___ftdiv@f1,f,c
  3711  002006  362D               	rlcf	___ftdiv@f1+1,f,c
  3712  002008  362E               	rlcf	___ftdiv@f1+2,f,c
  3713                           
  3714                           ; BSR set to: 0
  3715  00200A  0100               	movlb	0	; () banked
  3716  00200C  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
  3717  00200E  D7E4               	goto	l4047
  3718  002010  D000               	goto	l4057
  3719  002012                     l4057:
  3720                           
  3721                           ; BSR set to: 0
  3722  002012  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
  3723  002016  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3724  00201A  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3725  00201E  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3726  002022  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3727  002026  EC8D  F010         	call	___ftpack	;wreg free
  3728  00202A  C018  F02C         	movff	?___ftpack,?___ftdiv
  3729  00202E  C019  F02D         	movff	?___ftpack+1,?___ftdiv+1
  3730  002032  C01A  F02E         	movff	?___ftpack+2,?___ftdiv+2
  3731  002036  D000               	goto	l1090
  3732  002038                     l1090:
  3733  002038  0012               	return		;funcret
  3734  00203A                     __end_of___ftdiv:
  3735                           	opt stack 0
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           postinc0	equ	0xFEE
  3744                           wreg	equ	0xFE8
  3745                           postdec1	equ	0xFE5
  3746                           fsr1h	equ	0xFE2
  3747                           fsr1l	equ	0xFE1
  3748                           indf2	equ	0xFDF
  3749                           postinc2	equ	0xFDE
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _ReadRTDpos *****************
  3755 ;; Defined at:
  3756 ;;		line 33 in file "ResolverToDigital.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3761 ;;  helloworld      2    0        unsigned int 
  3762 ;;  x               1   33[COMRAM] unsigned char 
  3763 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3764 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  2   24[COMRAM] unsigned int 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;Total ram usage:       10 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    5
  3781 ;; This function calls:
  3782 ;;		_Delay10TCYx
  3783 ;; This function is called by:
  3784 ;;		_main
  3785 ;;		_ZeroMotors
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text10
  3790  00267C                     __ptext10:
  3791                           	opt stack 0
  3792  00267C                     _ReadRTDpos:
  3793                           	opt stack 23
  3794                           
  3795                           ;ResolverToDigital.c: 35: unsigned char x;
  3796                           ;ResolverToDigital.c: 36: unsigned int FullPosition, helloworld;
  3797                           ;ResolverToDigital.c: 37: unsigned char HighPosition, LowPosition;
  3798                           ;ResolverToDigital.c: 39: INTCONbits.GIE = 0;
  3799                           
  3800                           ;incstack = 0
  3801  00267C  9EF2               	bcf	intcon,7,c	;volatile
  3802                           
  3803                           ;ResolverToDigital.c: 40: PORTEbits.RE1 = 1;
  3804  00267E  8284               	bsf	3972,1,c	;volatile
  3805                           
  3806                           ;ResolverToDigital.c: 41: PORTEbits.RE0 = 0;
  3807  002680  9084               	bcf	3972,0,c	;volatile
  3808                           
  3809                           ;ResolverToDigital.c: 42: for (x = 0; x < 8; x++)
  3810  002682  0E00               	movlw	0
  3811  002684  6E22               	movwf	ReadRTDpos@x,c
  3812  002686  D003               	goto	l3037
  3813  002688  D005               	goto	l188
  3814  00268A                     l187:
  3815                           
  3816                           ;ResolverToDigital.c: 43: __nop();
  3817  00268A  F000               	nop	
  3818  00268C  2A22               	incf	ReadRTDpos@x,f,c
  3819  00268E                     l3037:
  3820  00268E  0E07               	movlw	7
  3821  002690  6422               	cpfsgt	ReadRTDpos@x,c
  3822  002692  D7FB               	goto	l187
  3823  002694                     l188:
  3824                           
  3825                           ;ResolverToDigital.c: 44: PORTEbits.RE2 = 1;
  3826  002694  8484               	bsf	3972,2,c	;volatile
  3827                           
  3828                           ;ResolverToDigital.c: 45: PORTEbits.RE2 = 0;
  3829  002696  9484               	bcf	3972,2,c	;volatile
  3830                           
  3831                           ;ResolverToDigital.c: 46: Delay10TCYx(1);
  3832  002698  0E01               	movlw	1
  3833  00269A  EC13  F017         	call	_Delay10TCYx
  3834                           
  3835                           ;ResolverToDigital.c: 47: HighPosition = PORTH;
  3836  00269E  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3837                           
  3838                           ;ResolverToDigital.c: 48: LowPosition = PORTD;
  3839  0026A2  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3840                           
  3841                           ;ResolverToDigital.c: 49: PORTEbits.RE2 = 1;
  3842  0026A6  8484               	bsf	3972,2,c	;volatile
  3843                           
  3844                           ;ResolverToDigital.c: 50: PORTEbits.RE0 = 1;
  3845  0026A8  8084               	bsf	3972,0,c	;volatile
  3846                           
  3847                           ;ResolverToDigital.c: 51: FullPosition = LowPosition;
  3848  0026AA  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3849  0026AE  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3850                           
  3851                           ;ResolverToDigital.c: 52: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3852  0026B0  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3853  0026B4  0E0F               	movlw	15
  3854  0026B6  161B               	andwf	??_ReadRTDpos,f,c
  3855  0026B8  501B               	movf	??_ReadRTDpos,w,c
  3856  0026BA  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3857  0026BC  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3858  0026BE  5020               	movf	ReadRTDpos@FullPosition,w,c
  3859  0026C0  101C               	iorwf	??_ReadRTDpos+1,w,c
  3860  0026C2  6E20               	movwf	ReadRTDpos@FullPosition,c
  3861  0026C4  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3862  0026C6  101D               	iorwf	??_ReadRTDpos+2,w,c
  3863  0026C8  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3864                           
  3865                           ;ResolverToDigital.c: 53: INTCONbits.GIE = 1;
  3866  0026CA  8EF2               	bsf	intcon,7,c	;volatile
  3867                           
  3868                           ;ResolverToDigital.c: 54: return FullPosition;
  3869  0026CC  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3870  0026D0  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3871  0026D4  D000               	goto	l189
  3872  0026D6                     l189:
  3873  0026D6  0012               	return		;funcret
  3874  0026D8                     __end_of_ReadRTDpos:
  3875                           	opt stack 0
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           prodh	equ	0xFF4
  3881                           prodl	equ	0xFF3
  3882                           intcon	equ	0xFF2
  3883                           postinc0	equ	0xFEE
  3884                           wreg	equ	0xFE8
  3885                           postdec1	equ	0xFE5
  3886                           fsr1h	equ	0xFE2
  3887                           fsr1l	equ	0xFE1
  3888                           indf2	equ	0xFDF
  3889                           postinc2	equ	0xFDE
  3890                           fsr2h	equ	0xFDA
  3891                           fsr2l	equ	0xFD9
  3892                           status	equ	0xFD8
  3893                           
  3894 ;; *************** function _RTD2Angle *****************
  3895 ;; Defined at:
  3896 ;;		line 92 in file "ResolverToDigital.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  RTDAngle        2   21[BANK0 ] unsigned int 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  3   21[BANK0 ] unsigned int 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3910 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;Total ram usage:        3 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    6
  3917 ;; This function calls:
  3918 ;;		___ftmul
  3919 ;;		___lwtoft
  3920 ;; This function is called by:
  3921 ;;		_main
  3922 ;;		_ZeroMotors
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text11
  3927  002A5A                     __ptext11:
  3928                           	opt stack 0
  3929  002A5A                     _RTD2Angle:
  3930                           	opt stack 22
  3931                           
  3932                           ;ResolverToDigital.c: 94: return 0.087890625 * RTDAngle;
  3933                           
  3934                           ;incstack = 0
  3935  002A5A  C075  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3936  002A5E  C076  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3937  002A62  EC26  F016         	call	___lwtoft	;wreg free
  3938  002A66  C020  F066         	movff	?___lwtoft,___ftmul@f1
  3939  002A6A  C021  F067         	movff	?___lwtoft+1,___ftmul@f1+1
  3940  002A6E  C022  F068         	movff	?___lwtoft+2,___ftmul@f1+2
  3941  002A72  0E00               	movlw	0
  3942  002A74  0100               	movlb	0	; () banked
  3943  002A76  6F69               	movwf	___ftmul@f2& (0+255),b
  3944  002A78  0EB4               	movlw	180
  3945  002A7A  0100               	movlb	0	; () banked
  3946  002A7C  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  3947  002A7E  0E3D               	movlw	61
  3948  002A80  0100               	movlb	0	; () banked
  3949  002A82  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  3950  002A84  ECBC  F00D         	call	___ftmul	;wreg free
  3951  002A88  C066  F075         	movff	?___ftmul,?_RTD2Angle
  3952  002A8C  C067  F076         	movff	?___ftmul+1,?_RTD2Angle+1
  3953  002A90  C068  F077         	movff	?___ftmul+2,?_RTD2Angle+2
  3954  002A94  D000               	goto	l197
  3955  002A96                     l197:
  3956  002A96  0012               	return		;funcret
  3957  002A98                     __end_of_RTD2Angle:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodh	equ	0xFF4
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           postdec1	equ	0xFE5
  3969                           fsr1h	equ	0xFE2
  3970                           fsr1l	equ	0xFE1
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           fsr2h	equ	0xFDA
  3974                           fsr2l	equ	0xFD9
  3975                           status	equ	0xFD8
  3976                           
  3977 ;; *************** function ___lwtoft *****************
  3978 ;; Defined at:
  3979 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  c               2   31[COMRAM] unsigned int 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  3   31[COMRAM] float 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3993 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;Total ram usage:        3 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    5
  4000 ;; This function calls:
  4001 ;;		___ftpack
  4002 ;; This function is called by:
  4003 ;;		_RTD2Angle
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text12
  4008  002C4C                     __ptext12:
  4009                           	opt stack 0
  4010  002C4C                     ___lwtoft:
  4011                           	opt stack 22
  4012                           
  4013                           ;incstack = 0
  4014  002C4C  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  4015  002C50  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  4016  002C54  6A1A               	clrf	___ftpack@arg+2,c
  4017  002C56  0E8E               	movlw	142
  4018  002C58  6E1B               	movwf	___ftpack@exp,c
  4019  002C5A  0E00               	movlw	0
  4020  002C5C  6E1C               	movwf	___ftpack@sign,c
  4021  002C5E  EC8D  F010         	call	___ftpack	;wreg free
  4022  002C62  C018  F020         	movff	?___ftpack,?___lwtoft
  4023  002C66  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  4024  002C6A  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  4025  002C6E  D000               	goto	l1255
  4026  002C70                     l1255:
  4027  002C70  0012               	return		;funcret
  4028  002C72                     __end_of___lwtoft:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           postinc0	equ	0xFEE
  4038                           wreg	equ	0xFE8
  4039                           postdec1	equ	0xFE5
  4040                           fsr1h	equ	0xFE2
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           fsr2h	equ	0xFDA
  4045                           fsr2l	equ	0xFD9
  4046                           status	equ	0xFD8
  4047                           
  4048 ;; *************** function ___ftmul *****************
  4049 ;; Defined at:
  4050 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  f1              3    6[BANK0 ] float 
  4053 ;;  f2              3    9[BANK0 ] float 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  4056 ;;  sign            1   20[BANK0 ] unsigned char 
  4057 ;;  cntr            1   19[BANK0 ] unsigned char 
  4058 ;;  exp             1   15[BANK0 ] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  3    6[BANK0 ] float 
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4068 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;Total ram usage:       15 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    5
  4075 ;; This function calls:
  4076 ;;		___ftpack
  4077 ;; This function is called by:
  4078 ;;		_calculatePID
  4079 ;;		_RTD2Angle
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text13
  4084  001B78                     __ptext13:
  4085                           	opt stack 0
  4086  001B78                     ___ftmul:
  4087                           	opt stack 22
  4088                           
  4089                           ;incstack = 0
  4090  001B78  C068  F06C         	movff	___ftmul@f1+2,??___ftmul
  4091  001B7C  0100               	movlb	0	; () banked
  4092  001B7E  6B6D               	clrf	(??___ftmul+1)& (0+255),b
  4093  001B80  6B6E               	clrf	(??___ftmul+2)& (0+255),b
  4094  001B82  0100               	movlb	0	; () banked
  4095  001B84  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4096  001B86  0100               	movlb	0	; () banked
  4097  001B88  376C               	rlcf	??___ftmul& (0+255),f,b
  4098  001B8A  E301               	bnc	u3431
  4099  001B8C  816D               	bsf	(??___ftmul+1)& (0+255),0,b
  4100  001B8E                     u3431:
  4101  001B8E  0100               	movlb	0	; () banked
  4102  001B90  516C               	movf	??___ftmul& (0+255),w,b
  4103  001B92  0100               	movlb	0	; () banked
  4104  001B94  6F6F               	movwf	___ftmul@exp& (0+255),b
  4105  001B96  0100               	movlb	0	; () banked
  4106  001B98  516F               	movf	___ftmul@exp& (0+255),w,b
  4107  001B9A  A4D8               	btfss	status,2,c
  4108  001B9C  D002               	goto	l4067
  4109  001B9E  D014               	goto	l4069
  4110                           
  4111                           ; BSR set to: 0
  4112                           
  4113                           ; BSR set to: 0
  4114  001BA0  D098               	goto	l1105
  4115  001BA2                     l4067:
  4116                           
  4117                           ; BSR set to: 0
  4118  001BA2  C06B  F06C         	movff	___ftmul@f2+2,??___ftmul
  4119  001BA6  0100               	movlb	0	; () banked
  4120  001BA8  6B6D               	clrf	(??___ftmul+1)& (0+255),b
  4121  001BAA  6B6E               	clrf	(??___ftmul+2)& (0+255),b
  4122  001BAC  0100               	movlb	0	; () banked
  4123  001BAE  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4124  001BB0  0100               	movlb	0	; () banked
  4125  001BB2  376C               	rlcf	??___ftmul& (0+255),f,b
  4126  001BB4  E301               	bnc	u3451
  4127  001BB6  816D               	bsf	(??___ftmul+1)& (0+255),0,b
  4128  001BB8                     u3451:
  4129  001BB8  0100               	movlb	0	; () banked
  4130  001BBA  516C               	movf	??___ftmul& (0+255),w,b
  4131  001BBC  0100               	movlb	0	; () banked
  4132  001BBE  6F74               	movwf	___ftmul@sign& (0+255),b
  4133  001BC0  0100               	movlb	0	; () banked
  4134  001BC2  5174               	movf	___ftmul@sign& (0+255),w,b
  4135  001BC4  A4D8               	btfss	status,2,c
  4136  001BC6  D00A               	goto	l4073
  4137  001BC8                     l4069:
  4138                           
  4139                           ; BSR set to: 0
  4140  001BC8  0E00               	movlw	0
  4141  001BCA  0100               	movlb	0	; () banked
  4142  001BCC  6F66               	movwf	?___ftmul& (0+255),b
  4143  001BCE  0E00               	movlw	0
  4144  001BD0  0100               	movlb	0	; () banked
  4145  001BD2  6F67               	movwf	(?___ftmul+1)& (0+255),b
  4146  001BD4  0E00               	movlw	0
  4147  001BD6  0100               	movlb	0	; () banked
  4148  001BD8  6F68               	movwf	(?___ftmul+2)& (0+255),b
  4149                           
  4150                           ; BSR set to: 0
  4151  001BDA  D07B               	goto	l1105
  4152  001BDC                     l4073:
  4153                           
  4154                           ; BSR set to: 0
  4155  001BDC  0100               	movlb	0	; () banked
  4156  001BDE  5174               	movf	___ftmul@sign& (0+255),w,b
  4157  001BE0  0F7B               	addlw	123
  4158  001BE2  0100               	movlb	0	; () banked
  4159  001BE4  276F               	addwf	___ftmul@exp& (0+255),f,b
  4160                           
  4161                           ; BSR set to: 0
  4162  001BE6  C068  F074         	movff	___ftmul@f1+2,___ftmul@sign
  4163  001BEA  0100               	movlb	0	; () banked
  4164  001BEC  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4165  001BEE  0100               	movlb	0	; () banked
  4166  001BF0  1B74               	xorwf	___ftmul@sign& (0+255),f,b
  4167  001BF2  0E80               	movlw	128
  4168  001BF4  0100               	movlb	0	; () banked
  4169  001BF6  1774               	andwf	___ftmul@sign& (0+255),f,b
  4170                           
  4171                           ; BSR set to: 0
  4172  001BF8  0100               	movlb	0	; () banked
  4173  001BFA  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4174                           
  4175                           ; BSR set to: 0
  4176  001BFC  0100               	movlb	0	; () banked
  4177  001BFE  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4178                           
  4179                           ; BSR set to: 0
  4180  001C00  0EFF               	movlw	255
  4181  001C02  0100               	movlb	0	; () banked
  4182  001C04  1769               	andwf	___ftmul@f2& (0+255),f,b
  4183  001C06  0EFF               	movlw	255
  4184  001C08  0100               	movlb	0	; () banked
  4185  001C0A  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4186  001C0C  0E00               	movlw	0
  4187  001C0E  0100               	movlb	0	; () banked
  4188  001C10  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4189                           
  4190                           ; BSR set to: 0
  4191  001C12  0E00               	movlw	0
  4192  001C14  0100               	movlb	0	; () banked
  4193  001C16  6F70               	movwf	___ftmul@f3_as_product& (0+255),b
  4194  001C18  0E00               	movlw	0
  4195  001C1A  0100               	movlb	0	; () banked
  4196  001C1C  6F71               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4197  001C1E  0E00               	movlw	0
  4198  001C20  0100               	movlb	0	; () banked
  4199  001C22  6F72               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4200                           
  4201                           ; BSR set to: 0
  4202  001C24  0E07               	movlw	7
  4203  001C26  0100               	movlb	0	; () banked
  4204  001C28  6F73               	movwf	___ftmul@cntr& (0+255),b
  4205  001C2A  D000               	goto	l4087
  4206  001C2C                     l4087:
  4207                           
  4208                           ; BSR set to: 0
  4209  001C2C  0100               	movlb	0	; () banked
  4210  001C2E  A166               	btfss	___ftmul@f1& (0+255),0,b
  4211  001C30  D00D               	goto	l4091
  4212                           
  4213                           ; BSR set to: 0
  4214  001C32  0100               	movlb	0	; () banked
  4215  001C34  5169               	movf	___ftmul@f2& (0+255),w,b
  4216  001C36  0100               	movlb	0	; () banked
  4217  001C38  2770               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4218  001C3A  0100               	movlb	0	; () banked
  4219  001C3C  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4220  001C3E  0100               	movlb	0	; () banked
  4221  001C40  2371               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4222  001C42  0100               	movlb	0	; () banked
  4223  001C44  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4224  001C46  0100               	movlb	0	; () banked
  4225  001C48  2372               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4226  001C4A  D000               	goto	l4091
  4227  001C4C                     l4091:
  4228                           
  4229                           ; BSR set to: 0
  4230  001C4C  0100               	movlb	0	; () banked
  4231  001C4E  90D8               	bcf	status,0,c
  4232  001C50  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4233  001C52  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4234  001C54  3366               	rrcf	___ftmul@f1& (0+255),f,b
  4235  001C56  0100               	movlb	0	; () banked
  4236  001C58  90D8               	bcf	status,0,c
  4237  001C5A  3769               	rlcf	___ftmul@f2& (0+255),f,b
  4238  001C5C  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4239  001C5E  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4240                           
  4241                           ; BSR set to: 0
  4242  001C60  0100               	movlb	0	; () banked
  4243  001C62  2F73               	decfsz	___ftmul@cntr& (0+255),f,b
  4244  001C64  D7E3               	goto	l4087
  4245  001C66  D000               	goto	l4095
  4246  001C68                     l4095:
  4247                           
  4248                           ; BSR set to: 0
  4249  001C68  0E09               	movlw	9
  4250  001C6A  0100               	movlb	0	; () banked
  4251  001C6C  6F73               	movwf	___ftmul@cntr& (0+255),b
  4252  001C6E  D000               	goto	l4097
  4253  001C70                     l4097:
  4254                           
  4255                           ; BSR set to: 0
  4256  001C70  0100               	movlb	0	; () banked
  4257  001C72  A166               	btfss	___ftmul@f1& (0+255),0,b
  4258  001C74  D00D               	goto	l4101
  4259                           
  4260                           ; BSR set to: 0
  4261  001C76  0100               	movlb	0	; () banked
  4262  001C78  5169               	movf	___ftmul@f2& (0+255),w,b
  4263  001C7A  0100               	movlb	0	; () banked
  4264  001C7C  2770               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4265  001C7E  0100               	movlb	0	; () banked
  4266  001C80  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4267  001C82  0100               	movlb	0	; () banked
  4268  001C84  2371               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4269  001C86  0100               	movlb	0	; () banked
  4270  001C88  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4271  001C8A  0100               	movlb	0	; () banked
  4272  001C8C  2372               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4273  001C8E  D000               	goto	l4101
  4274  001C90                     l4101:
  4275                           
  4276                           ; BSR set to: 0
  4277  001C90  0100               	movlb	0	; () banked
  4278  001C92  90D8               	bcf	status,0,c
  4279  001C94  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4280  001C96  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4281  001C98  3366               	rrcf	___ftmul@f1& (0+255),f,b
  4282  001C9A  0100               	movlb	0	; () banked
  4283  001C9C  90D8               	bcf	status,0,c
  4284  001C9E  3372               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4285  001CA0  3371               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4286  001CA2  3370               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4287                           
  4288                           ; BSR set to: 0
  4289  001CA4  0100               	movlb	0	; () banked
  4290  001CA6  2F73               	decfsz	___ftmul@cntr& (0+255),f,b
  4291  001CA8  D7E3               	goto	l4097
  4292  001CAA  D000               	goto	l4105
  4293  001CAC                     l4105:
  4294                           
  4295                           ; BSR set to: 0
  4296  001CAC  C070  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  4297  001CB0  C071  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4298  001CB4  C072  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4299  001CB8  C06F  F01B         	movff	___ftmul@exp,___ftpack@exp
  4300  001CBC  C074  F01C         	movff	___ftmul@sign,___ftpack@sign
  4301  001CC0  EC8D  F010         	call	___ftpack	;wreg free
  4302  001CC4  C018  F066         	movff	?___ftpack,?___ftmul
  4303  001CC8  C019  F067         	movff	?___ftpack+1,?___ftmul+1
  4304  001CCC  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
  4305  001CD0  D000               	goto	l1105
  4306  001CD2                     l1105:
  4307  001CD2  0012               	return		;funcret
  4308  001CD4                     __end_of___ftmul:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           prodh	equ	0xFF4
  4315                           prodl	equ	0xFF3
  4316                           intcon	equ	0xFF2
  4317                           postinc0	equ	0xFEE
  4318                           wreg	equ	0xFE8
  4319                           postdec1	equ	0xFE5
  4320                           fsr1h	equ	0xFE2
  4321                           fsr1l	equ	0xFE1
  4322                           indf2	equ	0xFDF
  4323                           postinc2	equ	0xFDE
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function ___ftpack *****************
  4329 ;; Defined at:
  4330 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  arg             3   23[COMRAM] unsigned um
  4333 ;;  exp             1   26[COMRAM] unsigned char 
  4334 ;;  sign            1   27[COMRAM] unsigned char 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;		None
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  3   23[COMRAM] float 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        8 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    4
  4353 ;; This function calls:
  4354 ;;		Nothing
  4355 ;; This function is called by:
  4356 ;;		___ftadd
  4357 ;;		___ftdiv
  4358 ;;		___ftmul
  4359 ;;		___lwtoft
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text14
  4364  00211A                     __ptext14:
  4365                           	opt stack 0
  4366  00211A                     ___ftpack:
  4367                           	opt stack 21
  4368                           
  4369                           ;incstack = 0
  4370  00211A  501B               	movf	___ftpack@exp,w,c
  4371  00211C  B4D8               	btfsc	status,2,c
  4372  00211E  D005               	goto	l3909
  4373  002120  5018               	movf	___ftpack@arg,w,c
  4374  002122  1019               	iorwf	___ftpack@arg+1,w,c
  4375  002124  101A               	iorwf	___ftpack@arg+2,w,c
  4376  002126  A4D8               	btfss	status,2,c
  4377  002128  D00E               	goto	l3915
  4378  00212A                     l3909:
  4379  00212A  0E00               	movlw	0
  4380  00212C  6E18               	movwf	?___ftpack,c
  4381  00212E  0E00               	movlw	0
  4382  002130  6E19               	movwf	?___ftpack+1,c
  4383  002132  0E00               	movlw	0
  4384  002134  6E1A               	movwf	?___ftpack+2,c
  4385  002136  D053               	goto	l1018
  4386  002138  D006               	goto	l3915
  4387  00213A                     l3913:
  4388  00213A  2A1B               	incf	___ftpack@exp,f,c
  4389  00213C  90D8               	bcf	status,0,c
  4390  00213E  321A               	rrcf	___ftpack@arg+2,f,c
  4391  002140  3219               	rrcf	___ftpack@arg+1,f,c
  4392  002142  3218               	rrcf	___ftpack@arg,f,c
  4393  002144  D000               	goto	l3915
  4394  002146                     l3915:
  4395  002146  0E00               	movlw	0
  4396  002148  1418               	andwf	___ftpack@arg,w,c
  4397  00214A  6E1D               	movwf	??___ftpack& (0+255),c
  4398  00214C  0E00               	movlw	0
  4399  00214E  1419               	andwf	___ftpack@arg+1,w,c
  4400  002150  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4401  002152  0EFE               	movlw	254
  4402  002154  141A               	andwf	___ftpack@arg+2,w,c
  4403  002156  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4404  002158  501D               	movf	??___ftpack,w,c
  4405  00215A  101E               	iorwf	??___ftpack+1,w,c
  4406  00215C  101F               	iorwf	??___ftpack+2,w,c
  4407  00215E  B4D8               	btfsc	status,2,c
  4408  002160  D00E               	goto	l3921
  4409  002162  D7EB               	goto	l3913
  4410  002164  D00C               	goto	l3921
  4411  002166                     l3917:
  4412  002166  2A1B               	incf	___ftpack@exp,f,c
  4413  002168  0E01               	movlw	1
  4414  00216A  2618               	addwf	___ftpack@arg,f,c
  4415  00216C  0E00               	movlw	0
  4416  00216E  2219               	addwfc	___ftpack@arg+1,f,c
  4417  002170  0E00               	movlw	0
  4418  002172  221A               	addwfc	___ftpack@arg+2,f,c
  4419  002174  90D8               	bcf	status,0,c
  4420  002176  321A               	rrcf	___ftpack@arg+2,f,c
  4421  002178  3219               	rrcf	___ftpack@arg+1,f,c
  4422  00217A  3218               	rrcf	___ftpack@arg,f,c
  4423  00217C  D000               	goto	l3921
  4424  00217E                     l3921:
  4425  00217E  0E00               	movlw	0
  4426  002180  1418               	andwf	___ftpack@arg,w,c
  4427  002182  6E1D               	movwf	??___ftpack& (0+255),c
  4428  002184  0E00               	movlw	0
  4429  002186  1419               	andwf	___ftpack@arg+1,w,c
  4430  002188  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4431  00218A  0EFF               	movlw	255
  4432  00218C  141A               	andwf	___ftpack@arg+2,w,c
  4433  00218E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4434  002190  501D               	movf	??___ftpack,w,c
  4435  002192  101E               	iorwf	??___ftpack+1,w,c
  4436  002194  101F               	iorwf	??___ftpack+2,w,c
  4437  002196  B4D8               	btfsc	status,2,c
  4438  002198  D008               	goto	l3925
  4439  00219A  D7E5               	goto	l3917
  4440  00219C  D006               	goto	l3925
  4441  00219E                     l3923:
  4442  00219E  061B               	decf	___ftpack@exp,f,c
  4443  0021A0  90D8               	bcf	status,0,c
  4444  0021A2  3618               	rlcf	___ftpack@arg,f,c
  4445  0021A4  3619               	rlcf	___ftpack@arg+1,f,c
  4446  0021A6  361A               	rlcf	___ftpack@arg+2,f,c
  4447  0021A8  D000               	goto	l3925
  4448  0021AA                     l3925:
  4449  0021AA  BE19               	btfsc	___ftpack@arg+1,7,c
  4450  0021AC  D004               	goto	l1029
  4451  0021AE  0E02               	movlw	2
  4452  0021B0  601B               	cpfslt	___ftpack@exp,c
  4453  0021B2  D7F5               	goto	l3923
  4454  0021B4  D000               	goto	l1029
  4455  0021B6                     l1029:
  4456  0021B6  B01B               	btfsc	___ftpack@exp,0,c
  4457  0021B8  D002               	goto	l3931
  4458  0021BA  9E19               	bcf	___ftpack@arg+1,7,c
  4459  0021BC  D000               	goto	l3931
  4460  0021BE                     l3931:
  4461  0021BE  90D8               	bcf	status,0,c
  4462  0021C0  321B               	rrcf	___ftpack@exp,f,c
  4463  0021C2  501B               	movf	___ftpack@exp,w,c
  4464  0021C4  121A               	iorwf	___ftpack@arg+2,f,c
  4465  0021C6  501C               	movf	___ftpack@sign,w,c
  4466  0021C8  B4D8               	btfsc	status,2,c
  4467  0021CA  D002               	goto	l3937
  4468  0021CC  8E1A               	bsf	___ftpack@arg+2,7,c
  4469  0021CE  D000               	goto	l3937
  4470  0021D0                     l3937:
  4471  0021D0  C018  F018         	movff	___ftpack@arg,?___ftpack
  4472  0021D4  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  4473  0021D8  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  4474  0021DC  D000               	goto	l1018
  4475  0021DE                     l1018:
  4476  0021DE  0012               	return		;funcret
  4477  0021E0                     __end_of___ftpack:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           intcon	equ	0xFF2
  4486                           postinc0	equ	0xFEE
  4487                           wreg	equ	0xFE8
  4488                           postdec1	equ	0xFE5
  4489                           fsr1h	equ	0xFE2
  4490                           fsr1l	equ	0xFE1
  4491                           indf2	equ	0xFDF
  4492                           postinc2	equ	0xFDE
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function _ImplementPIDMotion *****************
  4498 ;; Defined at:
  4499 ;;		line 50 in file "MotorControl.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  PIDValue        2   38[BANK0 ] int 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;		None
  4504 ;; Return value:  Size  Location     Type
  4505 ;;		None               void
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0, cstack
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4513 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;Total ram usage:        4 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    5
  4520 ;; This function calls:
  4521 ;;		_abs
  4522 ;; This function is called by:
  4523 ;;		_main
  4524 ;;		_ZeroMotors
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text15
  4529  002350                     __ptext15:
  4530                           	opt stack 0
  4531  002350                     _ImplementPIDMotion:
  4532                           	opt stack 23
  4533                           
  4534                           ;MotorControl.c: 52: if (PIDValue > 255)
  4535                           
  4536                           ;incstack = 0
  4537  002350  0100               	movlb	0	; () banked
  4538  002352  BF87               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4539  002354  D009               	goto	l4171
  4540  002356  0100               	movlb	0	; () banked
  4541  002358  0587               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4542  00235A  A0D8               	btfss	status,0,c
  4543  00235C  D005               	goto	l4171
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;MotorControl.c: 53: PIDValue = 255;
  4547  00235E  0E00               	movlw	0
  4548  002360  0100               	movlb	0	; () banked
  4549  002362  6F87               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4550  002364  6986               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4551  002366  D010               	goto	l4175
  4552  002368                     l4171:
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;MotorControl.c: 54: else if (PIDValue < -255)
  4556  002368  0100               	movlb	0	; () banked
  4557  00236A  AF87               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4558  00236C  D00D               	goto	l4175
  4559  00236E  0100               	movlb	0	; () banked
  4560  002370  0586               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4561  002372  0EFF               	movlw	255
  4562  002374  0100               	movlb	0	; () banked
  4563  002376  5987               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4564  002378  B0D8               	btfsc	status,0,c
  4565  00237A  D006               	goto	l4175
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;MotorControl.c: 55: PIDValue = -255;
  4569  00237C  0EFF               	movlw	255
  4570  00237E  0100               	movlb	0	; () banked
  4571  002380  6F87               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4572  002382  0E01               	movlw	1
  4573  002384  6F86               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4574                           
  4575                           ; BSR set to: 0
  4576  002386  D000               	goto	l4175
  4577  002388                     l4175:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;MotorControl.c: 57: if (PIDValue < 0)
  4581  002388  0100               	movlb	0	; () banked
  4582  00238A  AF87               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4583  00238C  D002               	goto	l4179
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;MotorControl.c: 58: CCP3CONbits.P3M1 = 1;
  4587  00238E  8EB7               	bsf	4023,7,c	;volatile
  4588  002390  D00C               	goto	l4183
  4589  002392                     l4179:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;MotorControl.c: 59: else if (PIDValue > 0)
  4593  002392  0100               	movlb	0	; () banked
  4594  002394  BF87               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4595  002396  D009               	goto	l4183
  4596  002398  0100               	movlb	0	; () banked
  4597  00239A  5187               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4598  00239C  E104               	bnz	u3610
  4599  00239E  0100               	movlb	0	; () banked
  4600  0023A0  0586               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4601  0023A2  A0D8               	btfss	status,0,c
  4602  0023A4  D002               	goto	l4183
  4603  0023A6                     u3610:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;MotorControl.c: 60: CCP3CONbits.P3M1 = 0;
  4607  0023A6  9EB7               	bcf	4023,7,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610  0023A8  D000               	goto	l4183
  4611  0023AA                     l4183:
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;MotorControl.c: 62: PIDValue = abs(PIDValue);
  4615  0023AA  C086  F084         	movff	ImplementPIDMotion@PIDValue,abs@a
  4616  0023AE  C087  F085         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4617  0023B2  ECFD  F015         	call	_abs	;wreg free
  4618  0023B6  C084  F086         	movff	?_abs,ImplementPIDMotion@PIDValue
  4619  0023BA  C085  F087         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4620                           
  4621                           ;MotorControl.c: 63: CCPR3L = (PIDValue >> 2) & 0xFF;
  4622  0023BE  C086  F088         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4623  0023C2  C087  F089         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4624  0023C6  0100               	movlb	0	; () banked
  4625  0023C8  3589               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4626  0023CA  3389               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4627  0023CC  3388               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4628  0023CE  0100               	movlb	0	; () banked
  4629  0023D0  3589               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4630  0023D2  3389               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4631  0023D4  3388               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4632  0023D6  0100               	movlb	0	; () banked
  4633  0023D8  5188               	movf	??_ImplementPIDMotion& (0+255),w,b
  4634  0023DA  6EB8               	movwf	4024,c	;volatile
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;MotorControl.c: 64: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4638  0023DC  C086  F088         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4639  0023E0  0E03               	movlw	3
  4640  0023E2  0100               	movlb	0	; () banked
  4641  0023E4  1788               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4642  0023E6  0100               	movlb	0	; () banked
  4643  0023E8  3B88               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4644  0023EA  50B7               	movf	4023,w,c	;volatile
  4645  0023EC  0100               	movlb	0	; () banked
  4646  0023EE  1988               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4647  0023F0  0BCF               	andlw	-49
  4648  0023F2  1988               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4649  0023F4  6EB7               	movwf	4023,c	;volatile
  4650                           
  4651                           ; BSR set to: 0
  4652  0023F6  0012               	return		;funcret
  4653  0023F8                     __end_of_ImplementPIDMotion:
  4654                           	opt stack 0
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           postinc0	equ	0xFEE
  4663                           wreg	equ	0xFE8
  4664                           postdec1	equ	0xFE5
  4665                           fsr1h	equ	0xFE2
  4666                           fsr1l	equ	0xFE1
  4667                           indf2	equ	0xFDF
  4668                           postinc2	equ	0xFDE
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _SPIInit *****************
  4674 ;; Defined at:
  4675 ;;		line 20 in file "SPISlave.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;		None               void
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:        0 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    5
  4696 ;; This function calls:
  4697 ;;		_OpenSPI1
  4698 ;; This function is called by:
  4699 ;;		_initialize
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text16
  4704  002DB0                     __ptext16:
  4705                           	opt stack 0
  4706  002DB0                     _SPIInit:
  4707                           	opt stack 24
  4708                           
  4709                           ;SPISlave.c: 22: TRISCbits.RC4 = 1;
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;incstack = 0
  4713  002DB0  8894               	bsf	3988,4,c	;volatile
  4714                           
  4715                           ;SPISlave.c: 23: TRISCbits.RC5 = 0;
  4716  002DB2  9A94               	bcf	3988,5,c	;volatile
  4717                           
  4718                           ;SPISlave.c: 24: TRISFbits.RF7 = 1;
  4719  002DB4  8E97               	bsf	3991,7,c	;volatile
  4720                           
  4721                           ;SPISlave.c: 25: TRISCbits.RC6 = 0;
  4722  002DB6  9C94               	bcf	3988,6,c	;volatile
  4723                           
  4724                           ;SPISlave.c: 26: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4725  002DB8  0E00               	movlw	0
  4726  002DBA  6E18               	movwf	OpenSPI1@bus_mode,c
  4727  002DBC  0E00               	movlw	0
  4728  002DBE  6E19               	movwf	OpenSPI1@smp_phase,c
  4729  002DC0  0E04               	movlw	4
  4730  002DC2  ECC5  F013         	call	_OpenSPI1
  4731                           
  4732                           ;SPISlave.c: 27: PIE1bits.SSP1IE = 1;
  4733  002DC6  869D               	bsf	3997,3,c	;volatile
  4734                           
  4735                           ;SPISlave.c: 28: T4CONbits.T4CKPS = 0x3;
  4736  002DC8  0E03               	movlw	3
  4737  002DCA  1276               	iorwf	3958,f,c	;volatile
  4738  002DCC  0012               	return		;funcret
  4739  002DCE                     __end_of_SPIInit:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           postdec1	equ	0xFE5
  4751                           fsr1h	equ	0xFE2
  4752                           fsr1l	equ	0xFE1
  4753                           indf2	equ	0xFDF
  4754                           postinc2	equ	0xFDE
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _RecTmrInit *****************
  4760 ;; Defined at:
  4761 ;;		line 294 in file "RTDuC.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;		None               void
  4768 ;; Registers used:
  4769 ;;		wreg, status,2
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;Total ram usage:        0 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    4
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_initialize
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text17
  4790  002E6C                     __ptext17:
  4791                           	opt stack 0
  4792  002E6C                     _RecTmrInit:
  4793                           	opt stack 25
  4794                           
  4795                           ;RTDuC.c: 296: T3CONbits.T3CKPS = 0x3;
  4796                           
  4797                           ;incstack = 0
  4798  002E6C  0E30               	movlw	48
  4799  002E6E  12B1               	iorwf	4017,f,c	;volatile
  4800                           
  4801                           ;RTDuC.c: 297: T3CONbits.TMR3CS = 0;
  4802  002E70  92B1               	bcf	4017,1,c	;volatile
  4803  002E72  0012               	return		;funcret
  4804  002E74                     __end_of_RecTmrInit:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           intcon	equ	0xFF2
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _RTDInit *****************
  4825 ;; Defined at:
  4826 ;;		line 3 in file "ResolverToDigital.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;Total ram usage:        0 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    5
  4847 ;; This function calls:
  4848 ;;		_Delay10TCYx
  4849 ;;		_Delay1KTCYx
  4850 ;;		_Delay1TCYx
  4851 ;; This function is called by:
  4852 ;;		_initialize
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text18
  4857  002B72                     __ptext18:
  4858                           	opt stack 0
  4859  002B72                     _RTDInit:
  4860                           	opt stack 24
  4861                           
  4862                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4863                           
  4864                           ;incstack = 0
  4865  002B72  6895               	setf	3989,c	;volatile
  4866                           
  4867                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4868  002B74  6899               	setf	3993,c	;volatile
  4869                           
  4870                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4871  002B76  9096               	bcf	3990,0,c	;volatile
  4872                           
  4873                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4874  002B78  9296               	bcf	3990,1,c	;volatile
  4875                           
  4876                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4877  002B7A  9496               	bcf	3990,2,c	;volatile
  4878                           
  4879                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4880  002B7C  909A               	bcf	3994,0,c	;volatile
  4881                           
  4882                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4883  002B7E  8A96               	bsf	3990,5,c	;volatile
  4884                           
  4885                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4886  002B80  8C96               	bsf	3990,6,c	;volatile
  4887                           
  4888                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4889  002B82  8E96               	bsf	3990,7,c	;volatile
  4890                           
  4891                           ;ResolverToDigital.c: 15: PORTJbits.RJ0 = 0;
  4892  002B84  9088               	bcf	3976,0,c	;volatile
  4893                           
  4894                           ;ResolverToDigital.c: 16: Delay10TCYx(10);
  4895  002B86  0E0A               	movlw	10
  4896  002B88  EC13  F017         	call	_Delay10TCYx
  4897                           
  4898                           ;ResolverToDigital.c: 17: PORTJbits.RJ0 = 1;
  4899  002B8C  8088               	bsf	3976,0,c	;volatile
  4900                           
  4901                           ;ResolverToDigital.c: 18: Delay1KTCYx(20);
  4902  002B8E  0E14               	movlw	20
  4903  002B90  EC0A  F017         	call	_Delay1KTCYx
  4904                           
  4905                           ;ResolverToDigital.c: 19: PORTEbits.RE0 = 0;
  4906  002B94  9084               	bcf	3972,0,c	;volatile
  4907                           
  4908                           ;ResolverToDigital.c: 20: Delay1TCYx(1);
  4909  002B96  0E01               	movlw	1
  4910  002B98  EC25  F017         	call	_Delay1TCYx
  4911                           
  4912                           ;ResolverToDigital.c: 21: PORTEbits.RE0 = 1;
  4913  002B9C  8084               	bsf	3972,0,c	;volatile
  4914                           
  4915                           ;ResolverToDigital.c: 22: PORTEbits.RE2 = 0;
  4916  002B9E  9484               	bcf	3972,2,c	;volatile
  4917  002BA0  0012               	return		;funcret
  4918  002BA2                     __end_of_RTDInit:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           intcon	equ	0xFF2
  4927                           postinc0	equ	0xFEE
  4928                           wreg	equ	0xFE8
  4929                           postdec1	equ	0xFE5
  4930                           fsr1h	equ	0xFE2
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           fsr2h	equ	0xFDA
  4935                           fsr2l	equ	0xFD9
  4936                           status	equ	0xFD8
  4937                           
  4938 ;; *************** function _Delay1TCYx *****************
  4939 ;; Defined at:
  4940 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  unit            1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  unit            1   23[COMRAM] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;		None               void
  4947 ;; Registers used:
  4948 ;;		wreg
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;Total ram usage:        1 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    4
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_RTDInit
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text19
  4969  002E4A                     __ptext19:
  4970                           	opt stack 0
  4971  002E4A                     _Delay1TCYx:
  4972                           	opt stack 24
  4973                           
  4974                           ;incstack = 0
  4975                           ;Delay1TCYx@unit stored from wreg
  4976  002E4A  6E18               	movwf	Delay1TCYx@unit,c
  4977  002E4C                     l926:
  4978  002E4C  F000               	nop	
  4979  002E4E  2E18               	decfsz	Delay1TCYx@unit,f,c
  4980  002E50  D7FD               	goto	l926
  4981  002E52  D000               	goto	l928
  4982  002E54                     l928:
  4983  002E54  0012               	return		;funcret
  4984  002E56                     __end_of_Delay1TCYx:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _Delay1KTCYx *****************
  5005 ;; Defined at:
  5006 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  unit            1    wreg     unsigned char 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  unit            1   23[COMRAM] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;		None               void
  5013 ;; Registers used:
  5014 ;;		wreg
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;Total ram usage:        1 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    4
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_RTDInit
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text20
  5035  002E14                     __ptext20:
  5036                           	opt stack 0
  5037  002E14                     _Delay1KTCYx:
  5038                           	opt stack 24
  5039                           
  5040                           ;incstack = 0
  5041                           ;Delay1KTCYx@unit stored from wreg
  5042  002E14  6E18               	movwf	Delay1KTCYx@unit,c
  5043  002E16  0EFA               	movlw	250
  5044  002E18                     u4127:
  5045  002E18  F000               	nop	
  5046  002E1A  2EE8               	decfsz	wreg,f,c
  5047  002E1C  D7FD               	goto	u4127
  5048  002E1E  2E18               	decfsz	Delay1KTCYx@unit,f,c
  5049  002E20  D7FA               	goto	l3021
  5050  002E22  D000               	goto	l921
  5051  002E24                     l921:
  5052  002E24  0012               	return		;funcret
  5053  002E26                     __end_of_Delay1KTCYx:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postdec1	equ	0xFE5
  5065                           fsr1h	equ	0xFE2
  5066                           fsr1l	equ	0xFE1
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _Delay10TCYx *****************
  5074 ;; Defined at:
  5075 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  unit            1    wreg     unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  unit            1   23[COMRAM] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;		None               void
  5082 ;; Registers used:
  5083 ;;		wreg
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        1 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    4
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_RTDInit
  5100 ;;		_ReadRTDpos
  5101 ;;		_main
  5102 ;;		_ReadRTDvel
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text21
  5107  002E26                     __ptext21:
  5108                           	opt stack 0
  5109  002E26                     _Delay10TCYx:
  5110                           	opt stack 23
  5111                           
  5112                           ;incstack = 0
  5113                           ;Delay10TCYx@unit stored from wreg
  5114  002E26  6E18               	movwf	Delay10TCYx@unit,c
  5115  002E28  0E03               	movlw	3
  5116  002E2A                     u4137:
  5117  002E2A  2EE8               	decfsz	wreg,f,c
  5118  002E2C  D7FE               	goto	u4137
  5119  002E2E  F000               	nop	
  5120  002E30  2E18               	decfsz	Delay10TCYx@unit,f,c
  5121  002E32  D7FA               	goto	l2765
  5122  002E34  D000               	goto	l914
  5123  002E36                     l914:
  5124  002E36  0012               	return		;funcret
  5125  002E38                     __end_of_Delay10TCYx:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           prodh	equ	0xFF4
  5132                           prodl	equ	0xFF3
  5133                           intcon	equ	0xFF2
  5134                           postinc0	equ	0xFEE
  5135                           wreg	equ	0xFE8
  5136                           postdec1	equ	0xFE5
  5137                           fsr1h	equ	0xFE2
  5138                           fsr1l	equ	0xFE1
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _PIDInit *****************
  5146 ;; Defined at:
  5147 ;;		line 18 in file "PID.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		wreg, status,2
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    4
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_initialize
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text22
  5176  0028CC                     __ptext22:
  5177                           	opt stack 0
  5178  0028CC                     _PIDInit:
  5179                           	opt stack 25
  5180                           
  5181                           ;PID.c: 20: error = 0;
  5182                           
  5183                           ;incstack = 0
  5184  0028CC  0E00               	movlw	0
  5185  0028CE  0100               	movlb	0	; () banked
  5186  0028D0  6FB9               	movwf	_error& (0+255),b
  5187  0028D2  0E00               	movlw	0
  5188  0028D4  0100               	movlb	0	; () banked
  5189  0028D6  6FBA               	movwf	(_error+1)& (0+255),b
  5190  0028D8  0E00               	movlw	0
  5191  0028DA  0100               	movlb	0	; () banked
  5192  0028DC  6FBB               	movwf	(_error+2)& (0+255),b
  5193                           
  5194                           ;PID.c: 21: prevErr = 0;
  5195  0028DE  0E00               	movlw	0
  5196  0028E0  0100               	movlb	0	; () banked
  5197  0028E2  6FBF               	movwf	_prevErr& (0+255),b
  5198  0028E4  0E00               	movlw	0
  5199  0028E6  0100               	movlb	0	; () banked
  5200  0028E8  6FC0               	movwf	(_prevErr+1)& (0+255),b
  5201  0028EA  0E00               	movlw	0
  5202  0028EC  0100               	movlb	0	; () banked
  5203  0028EE  6FC1               	movwf	(_prevErr+2)& (0+255),b
  5204                           
  5205                           ;PID.c: 22: intErr = 0;
  5206  0028F0  0E00               	movlw	0
  5207  0028F2  0100               	movlb	0	; () banked
  5208  0028F4  6FBC               	movwf	_intErr& (0+255),b
  5209  0028F6  0E00               	movlw	0
  5210  0028F8  0100               	movlb	0	; () banked
  5211  0028FA  6FBD               	movwf	(_intErr+1)& (0+255),b
  5212  0028FC  0E00               	movlw	0
  5213  0028FE  0100               	movlb	0	; () banked
  5214  002900  6FBE               	movwf	(_intErr+2)& (0+255),b
  5215                           
  5216                           ;PID.c: 24: T0CON = 0x04;
  5217  002902  0E04               	movlw	4
  5218  002904  6ED5               	movwf	4053,c	;volatile
  5219                           
  5220                           ;PID.c: 25: TMR0H = 0xDB;
  5221  002906  0EDB               	movlw	219
  5222  002908  6ED7               	movwf	4055,c	;volatile
  5223                           
  5224                           ;PID.c: 26: TMR0L = 0x60;
  5225  00290A  0E60               	movlw	96
  5226  00290C  6ED6               	movwf	4054,c	;volatile
  5227                           
  5228                           ; BSR set to: 0
  5229  00290E  0012               	return		;funcret
  5230  002910                     __end_of_PIDInit:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           postdec1	equ	0xFE5
  5242                           fsr1h	equ	0xFE2
  5243                           fsr1l	equ	0xFE1
  5244                           indf2	equ	0xFDF
  5245                           postinc2	equ	0xFDE
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function _MotorDriverInit *****************
  5251 ;; Defined at:
  5252 ;;		line 7 in file "MotorControl.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;		None
  5257 ;; Return value:  Size  Location     Type
  5258 ;;		None               void
  5259 ;; Registers used:
  5260 ;;		wreg, status,2
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;Total ram usage:        0 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    4
  5273 ;; This function calls:
  5274 ;;		Nothing
  5275 ;; This function is called by:
  5276 ;;		_initialize
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text23
  5281  002CE2                     __ptext23:
  5282                           	opt stack 0
  5283  002CE2                     _MotorDriverInit:
  5284                           	opt stack 25
  5285                           
  5286                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;incstack = 0
  5290  002CE2  9098               	bcf	3992,0,c	;volatile
  5291                           
  5292                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  5293  002CE4  9896               	bcf	3990,4,c	;volatile
  5294                           
  5295                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  5296  002CE6  9696               	bcf	3990,3,c	;volatile
  5297                           
  5298                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  5299  002CE8  9698               	bcf	3992,3,c	;volatile
  5300                           
  5301                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  5302  002CEA  8093               	bsf	3987,0,c	;volatile
  5303                           
  5304                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  5305  002CEC  9892               	bcf	3986,4,c	;volatile
  5306                           
  5307                           ;MotorControl.c: 18: CCPR3L = 0x00;
  5308  002CEE  0E00               	movlw	0
  5309  002CF0  6EB8               	movwf	4024,c	;volatile
  5310                           
  5311                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  5312  002CF2  98B7               	bcf	4023,4,c	;volatile
  5313                           
  5314                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  5315  002CF4  9AB7               	bcf	4023,5,c	;volatile
  5316                           
  5317                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  5318  002CF6  0E4C               	movlw	76
  5319  002CF8  6EB7               	movwf	4023,c	;volatile
  5320                           
  5321                           ;MotorControl.c: 22: PR2 = 0xFF;
  5322  002CFA  68CB               	setf	4043,c	;volatile
  5323                           
  5324                           ;MotorControl.c: 23: T3CON = 0x00;
  5325  002CFC  0E00               	movlw	0
  5326  002CFE  6EB1               	movwf	4017,c	;volatile
  5327                           
  5328                           ;MotorControl.c: 24: T2CON = 0x04;
  5329  002D00  0E04               	movlw	4
  5330  002D02  6ECA               	movwf	4042,c	;volatile
  5331  002D04  0012               	return		;funcret
  5332  002D06                     __end_of_MotorDriverInit:
  5333                           	opt stack 0
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           postinc0	equ	0xFEE
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           fsr1h	equ	0xFE2
  5345                           fsr1l	equ	0xFE1
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function _JoystickInit *****************
  5353 ;; Defined at:
  5354 ;;		line 6 in file "Joystick.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;		None               void
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;Total ram usage:        0 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    4
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_initialize
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text24
  5383  002BA2                     __ptext24:
  5384                           	opt stack 0
  5385  002BA2                     _JoystickInit:
  5386                           	opt stack 25
  5387                           
  5388                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  5389                           
  5390                           ;incstack = 0
  5391  002BA2  9492               	bcf	3986,2,c	;volatile
  5392                           
  5393                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  5394  002BA4  8293               	bsf	3987,1,c	;volatile
  5395                           
  5396                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  5397  002BA6  A281               	btfss	3969,1,c	;volatile
  5398  002BA8  D003               	goto	l31
  5399                           
  5400                           ;Joystick.c: 11: {
  5401                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  5402  002BAA  8480               	bsf	3968,2,c	;volatile
  5403                           
  5404                           ;Joystick.c: 13: JSEnableFlag = 1;
  5405  002BAC  0E01               	movlw	1
  5406  002BAE  D004               	goto	L1
  5407  002BB0                     l31:
  5408                           
  5409                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  5410  002BB0  B281               	btfsc	3969,1,c	;volatile
  5411  002BB2  D005               	goto	l3167
  5412                           
  5413                           ;Joystick.c: 16: {
  5414                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  5415  002BB4  9480               	bcf	3968,2,c	;volatile
  5416                           
  5417                           ;Joystick.c: 18: JSEnableFlag = 0;
  5418  002BB6  0E00               	movlw	0
  5419  002BB8                     L1:
  5420  002BB8  0100               	movlb	0	; () banked
  5421  002BBA  6FC4               	movwf	_JSEnableFlag& (0+255),b
  5422                           
  5423                           ; BSR set to: 0
  5424  002BBC  D000               	goto	l3167
  5425  002BBE                     l3167:
  5426                           
  5427                           ;Joystick.c: 19: }
  5428                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  5429  002BBE  80C2               	bsf	4034,0,c	;volatile
  5430                           
  5431                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  5432  002BC0  50C2               	movf	4034,w,c	;volatile
  5433  002BC2  0B01               	andlw	1
  5434  002BC4  6EC2               	movwf	4034,c	;volatile
  5435                           
  5436                           ;Joystick.c: 23: ADCON1 = 0x0D;
  5437  002BC6  0E0D               	movlw	13
  5438  002BC8  6EC1               	movwf	4033,c	;volatile
  5439                           
  5440                           ;Joystick.c: 24: ADCON2 = 0xB4;
  5441  002BCA  0EB4               	movlw	180
  5442  002BCC  6EC0               	movwf	4032,c	;volatile
  5443  002BCE  0012               	return		;funcret
  5444  002BD0                     __end_of_JoystickInit:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           postdec1	equ	0xFE5
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function _InitializeInterrupts *****************
  5465 ;; Defined at:
  5466 ;;		line 300 in file "RTDuC.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		None
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    4
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_initialize
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text25
  5495  002E56                     __ptext25:
  5496                           	opt stack 0
  5497  002E56                     _InitializeInterrupts:
  5498                           	opt stack 25
  5499                           
  5500                           ;RTDuC.c: 302: INTCONbits.GIE = 1;
  5501                           
  5502                           ;incstack = 0
  5503  002E56  8EF2               	bsf	intcon,7,c	;volatile
  5504                           
  5505                           ;RTDuC.c: 303: INTCONbits.PEIE = 1;
  5506  002E58  8CF2               	bsf	intcon,6,c	;volatile
  5507                           
  5508                           ;RTDuC.c: 305: INTCONbits.TMR0IE = 1;
  5509  002E5A  8AF2               	bsf	intcon,5,c	;volatile
  5510                           
  5511                           ;RTDuC.c: 306: T0CONbits.TMR0ON = 1;
  5512  002E5C  8ED5               	bsf	4053,7,c	;volatile
  5513                           
  5514                           ;RTDuC.c: 308: PIE2bits.OSCFIE = 1;
  5515  002E5E  8EA0               	bsf	4000,7,c	;volatile
  5516  002E60  0012               	return		;funcret
  5517  002E62                     __end_of_InitializeInterrupts:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           intcon	equ	0xFF2
  5526                           postinc0	equ	0xFEE
  5527                           wreg	equ	0xFE8
  5528                           postdec1	equ	0xFE5
  5529                           fsr1h	equ	0xFE2
  5530                           fsr1l	equ	0xFE1
  5531                           indf2	equ	0xFDF
  5532                           postinc2	equ	0xFDE
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function _EEPROMInit *****************
  5538 ;; Defined at:
  5539 ;;		line 13 in file "EEPROM.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;		None               void
  5546 ;; Registers used:
  5547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;Total ram usage:        0 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    7
  5560 ;; This function calls:
  5561 ;;		_EEBootUp
  5562 ;; This function is called by:
  5563 ;;		_initialize
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text26
  5568  002E00                     __ptext26:
  5569                           	opt stack 0
  5570  002E00                     _EEPROMInit:
  5571                           	opt stack 22
  5572                           
  5573                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5574                           
  5575                           ;incstack = 0
  5576  002E00  9EA6               	bcf	4006,7,c	;volatile
  5577                           
  5578                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5579  002E02  9CA6               	bcf	4006,6,c	;volatile
  5580                           
  5581                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5582  002E04  84A6               	bsf	4006,2,c	;volatile
  5583                           
  5584                           ;EEPROM.c: 19: EEBootUp();
  5585  002E06  ECCF  F012         	call	_EEBootUp	;wreg free
  5586                           
  5587                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5588  002E0A  0E3D               	movlw	61
  5589  002E0C  6ED2               	movwf	4050,c	;volatile
  5590                           
  5591                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5592  002E0E  84A0               	bsf	4000,2,c	;volatile
  5593                           
  5594                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5595  002E10  84A2               	bsf	4002,2,c	;volatile
  5596  002E12  0012               	return		;funcret
  5597  002E14                     __end_of_EEPROMInit:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           postinc0	equ	0xFEE
  5607                           wreg	equ	0xFE8
  5608                           postdec1	equ	0xFE5
  5609                           fsr1h	equ	0xFE2
  5610                           fsr1l	equ	0xFE1
  5611                           indf2	equ	0xFDF
  5612                           postinc2	equ	0xFDE
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _EEBootUp *****************
  5618 ;; Defined at:
  5619 ;;		line 32 in file "EEPROM.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;		None               void
  5626 ;; Registers used:
  5627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    6
  5640 ;; This function calls:
  5641 ;;		_EEReadChar
  5642 ;;		_EEReadDouble
  5643 ;; This function is called by:
  5644 ;;		_EEPROMInit
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text27
  5649  00259E                     __ptext27:
  5650                           	opt stack 0
  5651  00259E                     _EEBootUp:
  5652                           	opt stack 22
  5653                           
  5654                           ;EEPROM.c: 34: if (EEReadChar(0x16))
  5655                           
  5656                           ;incstack = 0
  5657  00259E  0E16               	movlw	22
  5658  0025A0  ECC8  F016         	call	_EEReadChar
  5659  0025A4  0900               	iorlw	0
  5660  0025A6  B4D8               	btfsc	status,2,c
  5661  0025A8  D031               	goto	l367
  5662                           
  5663                           ;EEPROM.c: 35: {
  5664                           ;EEPROM.c: 36: SetAngle = EEReadDouble(0x00);
  5665  0025AA  0E00               	movlw	0
  5666  0025AC  EC9A  F013         	call	_EEReadDouble
  5667  0025B0  C01E  F03E         	movff	?_EEReadDouble,_SetAngle
  5668  0025B4  C01F  F03F         	movff	?_EEReadDouble+1,_SetAngle+1
  5669  0025B8  C020  F040         	movff	?_EEReadDouble+2,_SetAngle+2
  5670                           
  5671                           ;EEPROM.c: 37: Kp = EEReadDouble(0x03);
  5672  0025BC  0E03               	movlw	3
  5673  0025BE  EC9A  F013         	call	_EEReadDouble
  5674  0025C2  C01E  F0B6         	movff	?_EEReadDouble,_Kp
  5675  0025C6  C01F  F0B7         	movff	?_EEReadDouble+1,_Kp+1
  5676  0025CA  C020  F0B8         	movff	?_EEReadDouble+2,_Kp+2
  5677                           
  5678                           ;EEPROM.c: 38: Ki = EEReadDouble(0x06);
  5679  0025CE  0E06               	movlw	6
  5680  0025D0  EC9A  F013         	call	_EEReadDouble
  5681  0025D4  C01E  F0B3         	movff	?_EEReadDouble,_Ki
  5682  0025D8  C01F  F0B4         	movff	?_EEReadDouble+1,_Ki+1
  5683  0025DC  C020  F0B5         	movff	?_EEReadDouble+2,_Ki+2
  5684                           
  5685                           ;EEPROM.c: 39: Kd = EEReadDouble(0x09);
  5686  0025E0  0E09               	movlw	9
  5687  0025E2  EC9A  F013         	call	_EEReadDouble
  5688  0025E6  C01E  F0B0         	movff	?_EEReadDouble,_Kd
  5689  0025EA  C01F  F0B1         	movff	?_EEReadDouble+1,_Kd+1
  5690  0025EE  C020  F0B2         	movff	?_EEReadDouble+2,_Kd+2
  5691                           
  5692                           ;EEPROM.c: 40: PIDEnableFlag = EEReadChar(0x15);
  5693  0025F2  0E15               	movlw	21
  5694  0025F4  ECC8  F016         	call	_EEReadChar
  5695  0025F8  0100               	movlb	0	; () banked
  5696  0025FA  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;EEPROM.c: 41: if(PIDEnableFlag == 1)
  5700  0025FC  0100               	movlb	0	; () banked
  5701  0025FE  05C5               	decf	_PIDEnableFlag& (0+255),w,b
  5702  002600  A4D8               	btfss	status,2,c
  5703  002602  D004               	goto	l367
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;EEPROM.c: 42: {
  5707                           ;EEPROM.c: 43: PIDEnableFlag = 3;
  5708  002604  0E03               	movlw	3
  5709  002606  0100               	movlb	0	; () banked
  5710  002608  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713  00260A  D000               	goto	l367
  5714  00260C                     l367:
  5715  00260C  0012               	return		;funcret
  5716  00260E                     __end_of_EEBootUp:
  5717                           	opt stack 0
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           intcon	equ	0xFF2
  5725                           postinc0	equ	0xFEE
  5726                           wreg	equ	0xFE8
  5727                           postdec1	equ	0xFE5
  5728                           fsr1h	equ	0xFE2
  5729                           fsr1l	equ	0xFE1
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _EEReadDouble *****************
  5737 ;; Defined at:
  5738 ;;		line 105 in file "EEPROM.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  location        1    wreg     unsigned char 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  location        1   32[COMRAM] unsigned char 
  5743 ;;  x               1   33[COMRAM] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  3   29[COMRAM] unsigned char 
  5746 ;; Registers used:
  5747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5753 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;Total ram usage:        5 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    5
  5760 ;; This function calls:
  5761 ;;		_Busy_eep
  5762 ;;		_EEReassembleDouble
  5763 ;;		_Read_b_eep
  5764 ;; This function is called by:
  5765 ;;		_EEBootUp
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text28
  5770  002734                     __ptext28:
  5771                           	opt stack 0
  5772  002734                     _EEReadDouble:
  5773                           	opt stack 22
  5774                           
  5775                           ;incstack = 0
  5776                           ;EEReadDouble@location stored from wreg
  5777  002734  6E21               	movwf	EEReadDouble@location,c
  5778                           
  5779                           ;EEPROM.c: 107: unsigned char x;
  5780                           ;EEPROM.c: 109: INTCON = INTCON & 0x3F;
  5781  002736  50F2               	movf	intcon,w,c	;volatile
  5782  002738  0B3F               	andlw	63
  5783  00273A  6EF2               	movwf	intcon,c	;volatile
  5784                           
  5785                           ;EEPROM.c: 111: for (x = 0; x < 3; x++)
  5786  00273C  0E00               	movlw	0
  5787  00273E  6E22               	movwf	EEReadDouble@x,c
  5788  002740                     l2783:
  5789  002740  0E02               	movlw	2
  5790  002742  6422               	cpfsgt	EEReadDouble@x,c
  5791  002744  D001               	goto	l2787
  5792  002746  D014               	goto	l2795
  5793  002748                     l2787:
  5794                           
  5795                           ;EEPROM.c: 112: {
  5796                           ;EEPROM.c: 113: DDouble[x] = Read_b_eep(location + x);
  5797  002748  5022               	movf	EEReadDouble@x,w,c
  5798  00274A  0D01               	mullw	1
  5799  00274C  0E3B               	movlw	low _DDouble
  5800  00274E  24F3               	addwf	prodl,w,c
  5801  002750  6ED9               	movwf	fsr2l,c
  5802  002752  0E00               	movlw	high _DDouble
  5803  002754  20F4               	addwfc	prodh,w,c
  5804  002756  6EDA               	movwf	fsr2h,c
  5805  002758  5021               	movf	EEReadDouble@location,w,c
  5806  00275A  2422               	addwf	EEReadDouble@x,w,c
  5807  00275C  6E18               	movwf	Read_b_eep@badd,c
  5808  00275E  6A19               	clrf	Read_b_eep@badd+1,c
  5809  002760  3619               	rlcf	Read_b_eep@badd+1,f,c
  5810  002762  ECE7  F016         	call	_Read_b_eep	;wreg free
  5811  002766  6EDF               	movwf	indf2,c
  5812                           
  5813                           ;EEPROM.c: 114: Busy_eep();
  5814  002768  EC3A  F017         	call	_Busy_eep	;wreg free
  5815  00276C  2A22               	incf	EEReadDouble@x,f,c
  5816  00276E  D7E8               	goto	l2783
  5817  002770                     l2795:
  5818                           
  5819                           ;EEPROM.c: 115: }
  5820                           ;EEPROM.c: 117: INTCON = INTCON | 0xC0;
  5821  002770  50F2               	movf	intcon,w,c	;volatile
  5822  002772  09C0               	iorlw	192
  5823  002774  6EF2               	movwf	intcon,c	;volatile
  5824                           
  5825                           ;EEPROM.c: 119: return EEReassembleDouble();
  5826  002776  EC88  F014         	call	_EEReassembleDouble	;wreg free
  5827  00277A  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5828  00277E  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5829  002782  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5830  002786  D000               	goto	l383
  5831  002788                     l383:
  5832  002788  0012               	return		;funcret
  5833  00278A                     __end_of_EEReadDouble:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           postdec1	equ	0xFE5
  5845                           fsr1h	equ	0xFE2
  5846                           fsr1l	equ	0xFE1
  5847                           indf2	equ	0xFDF
  5848                           postinc2	equ	0xFDE
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853 ;; *************** function _EEReassembleDouble *****************
  5854 ;; Defined at:
  5855 ;;		line 67 in file "EEPROM.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  dub             3   26[COMRAM] unsigned char 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  3   23[COMRAM] unsigned char 
  5862 ;; Registers used:
  5863 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5869 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;Total ram usage:        6 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    4
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		_EEReadDouble
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text29
  5884  002910                     __ptext29:
  5885                           	opt stack 0
  5886  002910                     _EEReassembleDouble:
  5887                           	opt stack 22
  5888                           
  5889                           ;EEPROM.c: 69: double dub;
  5890                           ;EEPROM.c: 70: DoublePtr = (unsigned char*) &dub;
  5891                           
  5892                           ;incstack = 0
  5893  002910  0E1B               	movlw	low EEReassembleDouble@dub
  5894  002912  6E41               	movwf	_DoublePtr,c
  5895  002914  0E00               	movlw	high EEReassembleDouble@dub
  5896  002916  6E42               	movwf	_DoublePtr+1,c
  5897                           
  5898                           ;EEPROM.c: 71: DoublePtr[0] = DDouble[0];
  5899  002918  C041  FFD9         	movff	_DoublePtr,fsr2l
  5900  00291C  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  5901  002920  C03B  FFDF         	movff	_DDouble,indf2
  5902                           
  5903                           ;EEPROM.c: 72: DoublePtr[1] = DDouble[1];
  5904  002924  EE20 F001          	lfsr	2,1
  5905  002928  5041               	movf	_DoublePtr,w,c
  5906  00292A  26D9               	addwf	fsr2l,f,c
  5907  00292C  5042               	movf	_DoublePtr+1,w,c
  5908  00292E  22DA               	addwfc	fsr2h,f,c
  5909  002930  C03C  FFDF         	movff	_DDouble+1,indf2
  5910                           
  5911                           ;EEPROM.c: 73: DoublePtr[2] = DDouble[2];
  5912  002934  EE20 F002          	lfsr	2,2
  5913  002938  5041               	movf	_DoublePtr,w,c
  5914  00293A  26D9               	addwf	fsr2l,f,c
  5915  00293C  5042               	movf	_DoublePtr+1,w,c
  5916  00293E  22DA               	addwfc	fsr2h,f,c
  5917  002940  C03D  FFDF         	movff	_DDouble+2,indf2
  5918                           
  5919                           ;EEPROM.c: 74: return dub;
  5920  002944  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5921  002948  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5922  00294C  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5923  002950  D000               	goto	l373
  5924  002952                     l373:
  5925  002952  0012               	return		;funcret
  5926  002954                     __end_of_EEReassembleDouble:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           intcon	equ	0xFF2
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1h	equ	0xFE2
  5939                           fsr1l	equ	0xFE1
  5940                           indf2	equ	0xFDF
  5941                           postinc2	equ	0xFDE
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _EEReadChar *****************
  5947 ;; Defined at:
  5948 ;;		line 141 in file "EEPROM.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  location        1    wreg     unsigned char 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  location        1   25[COMRAM] unsigned char 
  5953 ;;  ch              1   26[COMRAM] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      unsigned char 
  5956 ;; Registers used:
  5957 ;;		wreg, status,2, status,0, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;Total ram usage:        2 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    5
  5970 ;; This function calls:
  5971 ;;		_Read_b_eep
  5972 ;; This function is called by:
  5973 ;;		_EEBootUp
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text30
  5978  002D90                     __ptext30:
  5979                           	opt stack 0
  5980  002D90                     _EEReadChar:
  5981                           	opt stack 22
  5982                           
  5983                           ;incstack = 0
  5984                           ;EEReadChar@location stored from wreg
  5985  002D90  6E1A               	movwf	EEReadChar@location,c
  5986                           
  5987                           ;EEPROM.c: 143: unsigned char ch;
  5988                           ;EEPROM.c: 145: INTCON = INTCON & 0x3F;
  5989  002D92  50F2               	movf	intcon,w,c	;volatile
  5990  002D94  0B3F               	andlw	63
  5991  002D96  6EF2               	movwf	intcon,c	;volatile
  5992                           
  5993                           ;EEPROM.c: 147: ch = Read_b_eep(location);
  5994  002D98  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  5995  002D9C  6A19               	clrf	Read_b_eep@badd+1,c
  5996  002D9E  ECE7  F016         	call	_Read_b_eep	;wreg free
  5997  002DA2  6E1B               	movwf	EEReadChar@ch,c
  5998                           
  5999                           ;EEPROM.c: 149: INTCON = INTCON | 0xC0;
  6000  002DA4  50F2               	movf	intcon,w,c	;volatile
  6001  002DA6  09C0               	iorlw	192
  6002  002DA8  6EF2               	movwf	intcon,c	;volatile
  6003                           
  6004                           ;EEPROM.c: 151: return ch;
  6005  002DAA  501B               	movf	EEReadChar@ch,w,c
  6006  002DAC  D000               	goto	l389
  6007  002DAE                     l389:
  6008  002DAE  0012               	return		;funcret
  6009  002DB0                     __end_of_EEReadChar:
  6010                           	opt stack 0
  6011                           tblptru	equ	0xFF8
  6012                           tblptrh	equ	0xFF7
  6013                           tblptrl	equ	0xFF6
  6014                           tablat	equ	0xFF5
  6015                           prodh	equ	0xFF4
  6016                           prodl	equ	0xFF3
  6017                           intcon	equ	0xFF2
  6018                           postinc0	equ	0xFEE
  6019                           wreg	equ	0xFE8
  6020                           postdec1	equ	0xFE5
  6021                           fsr1h	equ	0xFE2
  6022                           fsr1l	equ	0xFE1
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           fsr2h	equ	0xFDA
  6026                           fsr2l	equ	0xFD9
  6027                           status	equ	0xFD8
  6028                           
  6029 ;; *************** function _Read_b_eep *****************
  6030 ;; Defined at:
  6031 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  badd            2   23[COMRAM] unsigned int 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      unsigned char 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:        2 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    4
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_EEReadDouble
  6056 ;;		_EEReadChar
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text31
  6061  002DCE                     __ptext31:
  6062                           	opt stack 0
  6063  002DCE                     _Read_b_eep:
  6064                           	opt stack 22
  6065                           
  6066                           ;incstack = 0
  6067  002DCE  5019               	movf	Read_b_eep@badd+1,w,c
  6068  002DD0  0B03               	andlw	3
  6069  002DD2  6EAA               	movwf	4010,c	;volatile
  6070  002DD4  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  6071  002DD8  9CA6               	bcf	4006,6,c	;volatile
  6072  002DDA  9EA6               	bcf	4006,7,c	;volatile
  6073  002DDC  80A6               	bsf	4006,0,c	;volatile
  6074  002DDE  F000               	nop	
  6075  002DE0  F000               	nop	
  6076  002DE2  50A8               	movf	4008,w,c	;volatile
  6077  002DE4  D000               	goto	l638
  6078  002DE6                     l638:
  6079  002DE6  0012               	return		;funcret
  6080  002DE8                     __end_of_Read_b_eep:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           postdec1	equ	0xFE5
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _SendSPI1 *****************
  6101 ;; Defined at:
  6102 ;;		line 50 in file "SPISlave.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  data            1    wreg     unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  data            1   28[COMRAM] unsigned char 
  6107 ;;  temp            1   27[COMRAM] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;		None               void
  6110 ;; Registers used:
  6111 ;;		wreg, status,2, status,0, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;Total ram usage:        2 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    6
  6124 ;; This function calls:
  6125 ;;		_SPIRestart
  6126 ;; This function is called by:
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text32
  6132  002BD0                     __ptext32:
  6133                           	opt stack 0
  6134  002BD0                     _SendSPI1:
  6135                           	opt stack 24
  6136                           
  6137                           ;incstack = 0
  6138                           ;SendSPI1@data stored from wreg
  6139  002BD0  6E1D               	movwf	SendSPI1@data,c
  6140                           
  6141                           ;SPISlave.c: 52: SSP1BUF = data;
  6142  002BD2  C01D  FFC9         	movff	SendSPI1@data,4041	;volatile
  6143                           
  6144                           ;SPISlave.c: 53: unsigned char temp;
  6145                           ;SPISlave.c: 54: PIR1bits.SSP1IF = 0;
  6146  002BD6  969E               	bcf	3998,3,c	;volatile
  6147                           
  6148                           ;SPISlave.c: 55: temp = SSP1BUF;
  6149  002BD8  CFC9 F01C          	movff	4041,SendSPI1@temp	;volatile
  6150                           
  6151                           ;SPISlave.c: 56: PIR3bits.TMR4IF = 0;
  6152  002BDC  96A4               	bcf	4004,3,c	;volatile
  6153                           
  6154                           ;SPISlave.c: 57: T4CONbits.TMR4ON = 1;
  6155  002BDE  8476               	bsf	3958,2,c	;volatile
  6156                           
  6157                           ;SPISlave.c: 58: TMR4 = timer4;
  6158  002BE0  C044  FF78         	movff	_timer4,3960	;volatile
  6159                           
  6160                           ;SPISlave.c: 59: while (!PIR1bits.SSP1IF)
  6161  002BE4  D005               	goto	l3463
  6162  002BE6                     l270:
  6163                           
  6164                           ;SPISlave.c: 60: {
  6165                           ;SPISlave.c: 61: if (PIR3bits.TMR4IF == 1)
  6166  002BE6  A6A4               	btfss	4004,3,c	;volatile
  6167  002BE8  D003               	goto	l3463
  6168                           
  6169                           ;SPISlave.c: 62: {
  6170                           ;SPISlave.c: 63: SPIRestart();
  6171  002BEA  ECF4  F016         	call	_SPIRestart	;wreg free
  6172  002BEE  D000               	goto	l3463
  6173  002BF0                     l3463:
  6174  002BF0  A69E               	btfss	3998,3,c	;volatile
  6175  002BF2  D7F9               	goto	l270
  6176                           
  6177                           ;SPISlave.c: 64: }
  6178                           ;SPISlave.c: 65: }
  6179                           ;SPISlave.c: 66: SSP1CON1bits.SSPOV1 = 0;
  6180  002BF4  9CC6               	bcf	4038,6,c	;volatile
  6181                           
  6182                           ;SPISlave.c: 67: PIR1bits.SSP1IF = 0;
  6183  002BF6  969E               	bcf	3998,3,c	;volatile
  6184  002BF8  0012               	return		;funcret
  6185  002BFA                     __end_of_SendSPI1:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           postinc0	equ	0xFEE
  6195                           wreg	equ	0xFE8
  6196                           postdec1	equ	0xFE5
  6197                           fsr1h	equ	0xFE2
  6198                           fsr1l	equ	0xFE1
  6199                           indf2	equ	0xFDF
  6200                           postinc2	equ	0xFDE
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function _SaveAll *****************
  6206 ;; Defined at:
  6207 ;;		line 161 in file "EEPROM.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;		None               void
  6214 ;; Registers used:
  6215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;Total ram usage:        0 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    6
  6228 ;; This function calls:
  6229 ;;		_EEWriteChar
  6230 ;;		_EEWriteDouble
  6231 ;; This function is called by:
  6232 ;;		_main
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           	psect	text33
  6237  0021E0                     __ptext33:
  6238                           	opt stack 0
  6239  0021E0                     _SaveAll:
  6240                           	opt stack 24
  6241                           
  6242                           ;EEPROM.c: 163: EEWriteDouble(0x00, SetAngle);
  6243                           
  6244                           ;incstack = 0
  6245  0021E0  C03E  F01C         	movff	_SetAngle,EEWriteDouble@dub
  6246  0021E4  C03F  F01D         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6247  0021E8  C040  F01E         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6248  0021EC  0E00               	movlw	0
  6249  0021EE  ECF0  F013         	call	_EEWriteDouble
  6250                           
  6251                           ;EEPROM.c: 164: EEWriteDouble(0x03, Kp);
  6252  0021F2  C0B6  F01C         	movff	_Kp,EEWriteDouble@dub
  6253  0021F6  C0B7  F01D         	movff	_Kp+1,EEWriteDouble@dub+1
  6254  0021FA  C0B8  F01E         	movff	_Kp+2,EEWriteDouble@dub+2
  6255  0021FE  0E03               	movlw	3
  6256  002200  ECF0  F013         	call	_EEWriteDouble
  6257                           
  6258                           ;EEPROM.c: 165: EEWriteDouble(0x06, Ki);
  6259  002204  C0B3  F01C         	movff	_Ki,EEWriteDouble@dub
  6260  002208  C0B4  F01D         	movff	_Ki+1,EEWriteDouble@dub+1
  6261  00220C  C0B5  F01E         	movff	_Ki+2,EEWriteDouble@dub+2
  6262  002210  0E06               	movlw	6
  6263  002212  ECF0  F013         	call	_EEWriteDouble
  6264                           
  6265                           ;EEPROM.c: 166: EEWriteDouble(0x09, Kd);
  6266  002216  C0B0  F01C         	movff	_Kd,EEWriteDouble@dub
  6267  00221A  C0B1  F01D         	movff	_Kd+1,EEWriteDouble@dub+1
  6268  00221E  C0B2  F01E         	movff	_Kd+2,EEWriteDouble@dub+2
  6269  002222  0E09               	movlw	9
  6270  002224  ECF0  F013         	call	_EEWriteDouble
  6271                           
  6272                           ;EEPROM.c: 167: EEWriteChar(0x0C, PORTA);
  6273  002228  CF80 F01C          	movff	3968,EEWriteChar@ch	;volatile
  6274  00222C  0E0C               	movlw	12
  6275  00222E  EC95  F016         	call	_EEWriteChar
  6276                           
  6277                           ;EEPROM.c: 168: EEWriteChar(0x0D, PORTB);
  6278  002232  CF81 F01C          	movff	3969,EEWriteChar@ch	;volatile
  6279  002236  0E0D               	movlw	13
  6280  002238  EC95  F016         	call	_EEWriteChar
  6281                           
  6282                           ;EEPROM.c: 169: EEWriteChar(0x0E, PORTC);
  6283  00223C  CF82 F01C          	movff	3970,EEWriteChar@ch	;volatile
  6284  002240  0E0E               	movlw	14
  6285  002242  EC95  F016         	call	_EEWriteChar
  6286                           
  6287                           ;EEPROM.c: 170: EEWriteChar(0x0F, PORTD);
  6288  002246  CF83 F01C          	movff	3971,EEWriteChar@ch	;volatile
  6289  00224A  0E0F               	movlw	15
  6290  00224C  EC95  F016         	call	_EEWriteChar
  6291                           
  6292                           ;EEPROM.c: 171: EEWriteChar(0x10, PORTE);
  6293  002250  CF84 F01C          	movff	3972,EEWriteChar@ch	;volatile
  6294  002254  0E10               	movlw	16
  6295  002256  EC95  F016         	call	_EEWriteChar
  6296                           
  6297                           ;EEPROM.c: 172: EEWriteChar(0x11, PORTF);
  6298  00225A  CF85 F01C          	movff	3973,EEWriteChar@ch	;volatile
  6299  00225E  0E11               	movlw	17
  6300  002260  EC95  F016         	call	_EEWriteChar
  6301                           
  6302                           ;EEPROM.c: 173: EEWriteChar(0x12, PORTG);
  6303  002264  CF86 F01C          	movff	3974,EEWriteChar@ch	;volatile
  6304  002268  0E12               	movlw	18
  6305  00226A  EC95  F016         	call	_EEWriteChar
  6306                           
  6307                           ;EEPROM.c: 174: EEWriteChar(0x13, PORTH);
  6308  00226E  CF87 F01C          	movff	3975,EEWriteChar@ch	;volatile
  6309  002272  0E13               	movlw	19
  6310  002274  EC95  F016         	call	_EEWriteChar
  6311                           
  6312                           ;EEPROM.c: 175: EEWriteChar(0x14, PORTJ);
  6313  002278  CF88 F01C          	movff	3976,EEWriteChar@ch	;volatile
  6314  00227C  0E14               	movlw	20
  6315  00227E  EC95  F016         	call	_EEWriteChar
  6316                           
  6317                           ;EEPROM.c: 176: EEWriteChar(0x15, PIDEnableFlag);
  6318  002282  C0C5  F01C         	movff	_PIDEnableFlag,EEWriteChar@ch
  6319  002286  0E15               	movlw	21
  6320  002288  EC95  F016         	call	_EEWriteChar
  6321                           
  6322                           ;EEPROM.c: 177: EEWriteChar(0x16, 0x01);
  6323  00228C  0E01               	movlw	1
  6324  00228E  6E1C               	movwf	EEWriteChar@ch,c
  6325  002290  0E16               	movlw	22
  6326  002292  EC95  F016         	call	_EEWriteChar
  6327  002296  0012               	return		;funcret
  6328  002298                     __end_of_SaveAll:
  6329                           	opt stack 0
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           postinc0	equ	0xFEE
  6338                           wreg	equ	0xFE8
  6339                           postdec1	equ	0xFE5
  6340                           fsr1h	equ	0xFE2
  6341                           fsr1l	equ	0xFE1
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _EEWriteDouble *****************
  6349 ;; Defined at:
  6350 ;;		line 82 in file "EEPROM.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  location        1    wreg     unsigned char 
  6353 ;;  dub             3   27[COMRAM] unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  location        1   30[COMRAM] unsigned char 
  6356 ;;  x               1   31[COMRAM] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;		None               void
  6359 ;; Registers used:
  6360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:        5 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    5
  6373 ;; This function calls:
  6374 ;;		_Busy_eep
  6375 ;;		_EEDisassembleDouble
  6376 ;;		_Write_b_eep
  6377 ;; This function is called by:
  6378 ;;		_SaveAll
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text34
  6383  0027E0                     __ptext34:
  6384                           	opt stack 0
  6385  0027E0                     _EEWriteDouble:
  6386                           	opt stack 24
  6387                           
  6388                           ;incstack = 0
  6389                           ;EEWriteDouble@location stored from wreg
  6390  0027E0  6E1F               	movwf	EEWriteDouble@location,c
  6391                           
  6392                           ;EEPROM.c: 84: unsigned char x;
  6393                           ;EEPROM.c: 86: EEDisassembleDouble(dub);
  6394  0027E2  C01C  F018         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6395  0027E6  C01D  F019         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6396  0027EA  C01E  F01A         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6397  0027EE  EC6A  F015         	call	_EEDisassembleDouble	;wreg free
  6398                           
  6399                           ;EEPROM.c: 88: INTCON = INTCON & 0x3F;
  6400  0027F2  50F2               	movf	intcon,w,c	;volatile
  6401  0027F4  0B3F               	andlw	63
  6402  0027F6  6EF2               	movwf	intcon,c	;volatile
  6403                           
  6404                           ;EEPROM.c: 90: for (x = 0; x < 3; x++)
  6405  0027F8  0E00               	movlw	0
  6406  0027FA  6E20               	movwf	EEWriteDouble@x,c
  6407  0027FC                     l3255:
  6408  0027FC  0E02               	movlw	2
  6409  0027FE  6420               	cpfsgt	EEWriteDouble@x,c
  6410  002800  D001               	goto	l3259
  6411  002802  D014               	goto	l3269
  6412  002804                     l3259:
  6413                           
  6414                           ;EEPROM.c: 91: {
  6415                           ;EEPROM.c: 92: Write_b_eep(location, DDouble[x]);
  6416  002804  C01F  F018         	movff	EEWriteDouble@location,Write_b_eep@badd
  6417  002808  6A19               	clrf	Write_b_eep@badd+1,c
  6418  00280A  5020               	movf	EEWriteDouble@x,w,c
  6419  00280C  0D01               	mullw	1
  6420  00280E  0E3B               	movlw	low _DDouble
  6421  002810  24F3               	addwf	prodl,w,c
  6422  002812  6ED9               	movwf	fsr2l,c
  6423  002814  0E00               	movlw	high _DDouble
  6424  002816  20F4               	addwfc	prodh,w,c
  6425  002818  6EDA               	movwf	fsr2h,c
  6426  00281A  50DF               	movf	indf2,w,c
  6427  00281C  6E1A               	movwf	Write_b_eep@bdat,c
  6428  00281E  ECED  F014         	call	_Write_b_eep	;wreg free
  6429                           
  6430                           ;EEPROM.c: 93: location++;
  6431  002822  2A1F               	incf	EEWriteDouble@location,f,c
  6432                           
  6433                           ;EEPROM.c: 94: Busy_eep();
  6434  002824  EC3A  F017         	call	_Busy_eep	;wreg free
  6435  002828  2A20               	incf	EEWriteDouble@x,f,c
  6436  00282A  D7E8               	goto	l3255
  6437  00282C                     l3269:
  6438                           
  6439                           ;EEPROM.c: 95: }
  6440                           ;EEPROM.c: 97: INTCON = INTCON | 0xC0;
  6441  00282C  50F2               	movf	intcon,w,c	;volatile
  6442  00282E  09C0               	iorlw	192
  6443  002830  6EF2               	movwf	intcon,c	;volatile
  6444  002832  0012               	return		;funcret
  6445  002834                     __end_of_EEWriteDouble:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           intcon	equ	0xFF2
  6454                           postinc0	equ	0xFEE
  6455                           wreg	equ	0xFE8
  6456                           postdec1	equ	0xFE5
  6457                           fsr1h	equ	0xFE2
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _EEDisassembleDouble *****************
  6466 ;; Defined at:
  6467 ;;		line 53 in file "EEPROM.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  dub             3   23[COMRAM] unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;		None               void
  6474 ;; Registers used:
  6475 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6481 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;Total ram usage:        3 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    4
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_EEWriteDouble
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text35
  6496  002AD4                     __ptext35:
  6497                           	opt stack 0
  6498  002AD4                     _EEDisassembleDouble:
  6499                           	opt stack 24
  6500                           
  6501                           ;EEPROM.c: 55: DoublePtr = (unsigned char*) &dub;
  6502                           
  6503                           ;incstack = 0
  6504  002AD4  0E18               	movlw	low EEDisassembleDouble@dub
  6505  002AD6  6E41               	movwf	_DoublePtr,c
  6506  002AD8  0E00               	movlw	high EEDisassembleDouble@dub
  6507  002ADA  6E42               	movwf	_DoublePtr+1,c
  6508                           
  6509                           ;EEPROM.c: 56: DDouble[0] = DoublePtr[0];
  6510  002ADC  C041  FFD9         	movff	_DoublePtr,fsr2l
  6511  002AE0  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  6512  002AE4  50DF               	movf	indf2,w,c
  6513  002AE6  6E3B               	movwf	_DDouble,c
  6514                           
  6515                           ;EEPROM.c: 57: DDouble[1] = DoublePtr[1];
  6516  002AE8  EE20 F001          	lfsr	2,1
  6517  002AEC  5041               	movf	_DoublePtr,w,c
  6518  002AEE  26D9               	addwf	fsr2l,f,c
  6519  002AF0  5042               	movf	_DoublePtr+1,w,c
  6520  002AF2  22DA               	addwfc	fsr2h,f,c
  6521  002AF4  50DF               	movf	indf2,w,c
  6522  002AF6  6E3C               	movwf	_DDouble+1,c
  6523                           
  6524                           ;EEPROM.c: 58: DDouble[2] = DoublePtr[2];
  6525  002AF8  EE20 F002          	lfsr	2,2
  6526  002AFC  5041               	movf	_DoublePtr,w,c
  6527  002AFE  26D9               	addwf	fsr2l,f,c
  6528  002B00  5042               	movf	_DoublePtr+1,w,c
  6529  002B02  22DA               	addwfc	fsr2h,f,c
  6530  002B04  50DF               	movf	indf2,w,c
  6531  002B06  6E3D               	movwf	_DDouble+2,c
  6532  002B08  0012               	return		;funcret
  6533  002B0A                     __end_of_EEDisassembleDouble:
  6534                           	opt stack 0
  6535                           tblptru	equ	0xFF8
  6536                           tblptrh	equ	0xFF7
  6537                           tblptrl	equ	0xFF6
  6538                           tablat	equ	0xFF5
  6539                           prodh	equ	0xFF4
  6540                           prodl	equ	0xFF3
  6541                           intcon	equ	0xFF2
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           postdec1	equ	0xFE5
  6545                           fsr1h	equ	0xFE2
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function _EEWriteChar *****************
  6554 ;; Defined at:
  6555 ;;		line 127 in file "EEPROM.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;  location        1    wreg     unsigned char 
  6558 ;;  ch              1   27[COMRAM] unsigned char 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  location        1   28[COMRAM] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;		None               void
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6570 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;Total ram usage:        2 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    5
  6577 ;; This function calls:
  6578 ;;		_Busy_eep
  6579 ;;		_Write_b_eep
  6580 ;; This function is called by:
  6581 ;;		_SaveAll
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text36
  6586  002D2A                     __ptext36:
  6587                           	opt stack 0
  6588  002D2A                     _EEWriteChar:
  6589                           	opt stack 24
  6590                           
  6591                           ;incstack = 0
  6592                           ;EEWriteChar@location stored from wreg
  6593  002D2A  6E1D               	movwf	EEWriteChar@location,c
  6594                           
  6595                           ;EEPROM.c: 129: INTCON = INTCON & 0x3F;
  6596  002D2C  50F2               	movf	intcon,w,c	;volatile
  6597  002D2E  0B3F               	andlw	63
  6598  002D30  6EF2               	movwf	intcon,c	;volatile
  6599                           
  6600                           ;EEPROM.c: 131: Write_b_eep(location, ch);
  6601  002D32  C01D  F018         	movff	EEWriteChar@location,Write_b_eep@badd
  6602  002D36  6A19               	clrf	Write_b_eep@badd+1,c
  6603  002D38  C01C  F01A         	movff	EEWriteChar@ch,Write_b_eep@bdat
  6604  002D3C  ECED  F014         	call	_Write_b_eep	;wreg free
  6605                           
  6606                           ;EEPROM.c: 132: Busy_eep();
  6607  002D40  EC3A  F017         	call	_Busy_eep	;wreg free
  6608                           
  6609                           ;EEPROM.c: 134: INTCON = INTCON | 0xC0;
  6610  002D44  50F2               	movf	intcon,w,c	;volatile
  6611  002D46  09C0               	iorlw	192
  6612  002D48  6EF2               	movwf	intcon,c	;volatile
  6613  002D4A  0012               	return		;funcret
  6614  002D4C                     __end_of_EEWriteChar:
  6615                           	opt stack 0
  6616                           tblptru	equ	0xFF8
  6617                           tblptrh	equ	0xFF7
  6618                           tblptrl	equ	0xFF6
  6619                           tablat	equ	0xFF5
  6620                           prodh	equ	0xFF4
  6621                           prodl	equ	0xFF3
  6622                           intcon	equ	0xFF2
  6623                           postinc0	equ	0xFEE
  6624                           wreg	equ	0xFE8
  6625                           postdec1	equ	0xFE5
  6626                           fsr1h	equ	0xFE2
  6627                           fsr1l	equ	0xFE1
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function _Write_b_eep *****************
  6635 ;; Defined at:
  6636 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  badd            2   23[COMRAM] unsigned int 
  6639 ;;  bdat            1   25[COMRAM] unsigned char 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  GIE_BIT_VAL     1   26[COMRAM] unsigned char 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6651 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;Total ram usage:        4 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    4
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_EEWriteDouble
  6662 ;;		_EEWriteChar
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text37
  6667  0029DA                     __ptext37:
  6668                           	opt stack 0
  6669  0029DA                     _Write_b_eep:
  6670                           	opt stack 24
  6671                           
  6672                           ;incstack = 0
  6673  0029DA  0E00               	movlw	0
  6674  0029DC  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6675  0029DE  5019               	movf	Write_b_eep@badd+1,w,c
  6676  0029E0  0B03               	andlw	3
  6677  0029E2  6EAA               	movwf	4010,c	;volatile
  6678  0029E4  C018  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6679  0029E8  C01A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6680  0029EC  9EA6               	bcf	4006,7,c	;volatile
  6681  0029EE  9CA6               	bcf	4006,6,c	;volatile
  6682  0029F0  84A6               	bsf	4006,2,c	;volatile
  6683  0029F2  0E00               	movlw	0
  6684  0029F4  BEF2               	btfsc	intcon,7,c	;volatile
  6685  0029F6  0E01               	movlw	1
  6686  0029F8  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6687  0029FA  9EF2               	bcf	intcon,7,c	;volatile
  6688  0029FC  0E55               	movlw	85
  6689  0029FE  6EA7               	movwf	4007,c	;volatile
  6690  002A00  0EAA               	movlw	170
  6691  002A02  6EA7               	movwf	4007,c	;volatile
  6692  002A04  82A6               	bsf	4006,1,c	;volatile
  6693  002A06  D000               	goto	l653
  6694  002A08                     l653:
  6695  002A08  B2A6               	btfsc	4006,1,c	;volatile
  6696  002A0A  D7FE               	goto	l653
  6697  002A0C  B01B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  6698  002A0E  D002               	bra	u2255
  6699  002A10  9EF2               	bcf	intcon,7,c	;volatile
  6700  002A12  D001               	bra	u2256
  6701  002A14                     u2255:
  6702  002A14  8EF2               	bsf	intcon,7,c	;volatile
  6703  002A16                     u2256:
  6704  002A16  94A6               	bcf	4006,2,c	;volatile
  6705  002A18  0012               	return		;funcret
  6706  002A1A                     __end_of_Write_b_eep:
  6707                           	opt stack 0
  6708                           tblptru	equ	0xFF8
  6709                           tblptrh	equ	0xFF7
  6710                           tblptrl	equ	0xFF6
  6711                           tablat	equ	0xFF5
  6712                           prodh	equ	0xFF4
  6713                           prodl	equ	0xFF3
  6714                           intcon	equ	0xFF2
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postdec1	equ	0xFE5
  6718                           fsr1h	equ	0xFE2
  6719                           fsr1l	equ	0xFE1
  6720                           indf2	equ	0xFDF
  6721                           postinc2	equ	0xFDE
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function _Busy_eep *****************
  6727 ;; Defined at:
  6728 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;		None
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;		None               void
  6735 ;; Registers used:
  6736 ;;		None
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;Total ram usage:        0 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    4
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_EEWriteDouble
  6753 ;;		_EEReadDouble
  6754 ;;		_EEWriteChar
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text38
  6759  002E74                     __ptext38:
  6760                           	opt stack 0
  6761  002E74                     _Busy_eep:
  6762                           	opt stack 22
  6763                           
  6764                           ;incstack = 0
  6765  002E74  D000               	goto	l622
  6766  002E76                     l622:
  6767  002E76  B2A6               	btfsc	4006,1,c	;volatile
  6768  002E78  D7FE               	goto	l622
  6769  002E7A  0012               	return		;funcret
  6770  002E7C                     __end_of_Busy_eep:
  6771                           	opt stack 0
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           postinc0	equ	0xFEE
  6780                           wreg	equ	0xFE8
  6781                           postdec1	equ	0xFE5
  6782                           fsr1h	equ	0xFE2
  6783                           fsr1l	equ	0xFE1
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function _SPIReassembleDouble *****************
  6791 ;; Defined at:
  6792 ;;		line 127 in file "SPISlave.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  dub             3   26[COMRAM] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  3   23[COMRAM] unsigned char 
  6799 ;; Registers used:
  6800 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6806 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;Total ram usage:        6 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    4
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		_main
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text39
  6821  002954                     __ptext39:
  6822                           	opt stack 0
  6823  002954                     _SPIReassembleDouble:
  6824                           	opt stack 26
  6825                           
  6826                           ;SPISlave.c: 129: double dub;
  6827                           ;SPISlave.c: 130: DoublePtr = (unsigned char*) &dub;
  6828                           
  6829                           ;incstack = 0
  6830  002954  0E1B               	movlw	low SPIReassembleDouble@dub
  6831  002956  6E41               	movwf	_DoublePtr,c
  6832  002958  0E00               	movlw	high SPIReassembleDouble@dub
  6833  00295A  6E42               	movwf	_DoublePtr+1,c
  6834                           
  6835                           ;SPISlave.c: 131: DoublePtr[0] = DoubleSPIS[0];
  6836  00295C  C041  FFD9         	movff	_DoublePtr,fsr2l
  6837  002960  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  6838  002964  C037  FFDF         	movff	_DoubleSPIS,indf2
  6839                           
  6840                           ;SPISlave.c: 132: DoublePtr[1] = DoubleSPIS[1];
  6841  002968  EE20 F001          	lfsr	2,1
  6842  00296C  5041               	movf	_DoublePtr,w,c
  6843  00296E  26D9               	addwf	fsr2l,f,c
  6844  002970  5042               	movf	_DoublePtr+1,w,c
  6845  002972  22DA               	addwfc	fsr2h,f,c
  6846  002974  C038  FFDF         	movff	_DoubleSPIS+1,indf2
  6847                           
  6848                           ;SPISlave.c: 133: DoublePtr[2] = DoubleSPIS[2];
  6849  002978  EE20 F002          	lfsr	2,2
  6850  00297C  5041               	movf	_DoublePtr,w,c
  6851  00297E  26D9               	addwf	fsr2l,f,c
  6852  002980  5042               	movf	_DoublePtr+1,w,c
  6853  002982  22DA               	addwfc	fsr2h,f,c
  6854  002984  C039  FFDF         	movff	_DoubleSPIS+2,indf2
  6855                           
  6856                           ;SPISlave.c: 135: return dub;
  6857  002988  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  6858  00298C  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  6859  002990  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  6860  002994  D000               	goto	l298
  6861  002996                     l298:
  6862  002996  0012               	return		;funcret
  6863  002998                     __end_of_SPIReassembleDouble:
  6864                           	opt stack 0
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           postinc0	equ	0xFEE
  6873                           wreg	equ	0xFE8
  6874                           postdec1	equ	0xFE5
  6875                           fsr1h	equ	0xFE2
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function _SPIDisassembleLode *****************
  6884 ;; Defined at:
  6885 ;;		line 100 in file "SPISlave.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  Data            2   36[COMRAM] PTR 
  6888 ;;		 -> DataLode(1809), 
  6889 ;;  Transmit        2   38[COMRAM] PTR unsigned char 
  6890 ;;		 -> TransmitLode(1809), 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;  dub             3   44[COMRAM] PTR unsigned char 
  6893 ;;  y               2   42[COMRAM] unsigned int 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;		None               void
  6896 ;; Registers used:
  6897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;Total ram usage:       11 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    5
  6910 ;; This function calls:
  6911 ;;		___lwdiv
  6912 ;;		___wmul
  6913 ;; This function is called by:
  6914 ;;		_main
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text40
  6919  00203A                     __ptext40:
  6920                           	opt stack 0
  6921  00203A                     _SPIDisassembleLode:
  6922                           	opt stack 25
  6923                           
  6924                           ;SPISlave.c: 102: unsigned int y = 0;
  6925                           
  6926                           ;incstack = 0
  6927  00203A  0E00               	movlw	0
  6928  00203C  6E2C               	movwf	SPIDisassembleLode@y+1,c
  6929  00203E  0E00               	movlw	0
  6930  002040  6E2B               	movwf	SPIDisassembleLode@y,c
  6931                           
  6932                           ;SPISlave.c: 103: double dub;
  6933                           ;SPISlave.c: 104: DoublePtr = (unsigned char*) &dub;
  6934  002042  0E2D               	movlw	low SPIDisassembleLode@dub
  6935  002044  6E41               	movwf	_DoublePtr,c
  6936  002046  0E00               	movlw	high SPIDisassembleLode@dub
  6937  002048  6E42               	movwf	_DoublePtr+1,c
  6938                           
  6939                           ;SPISlave.c: 105: for (y = 0; y != 1809; y += 3)
  6940  00204A  0E00               	movlw	0
  6941  00204C  6E2C               	movwf	SPIDisassembleLode@y+1,c
  6942  00204E  0E00               	movlw	0
  6943  002050  6E2B               	movwf	SPIDisassembleLode@y,c
  6944  002052  0E11               	movlw	17
  6945  002054  182B               	xorwf	SPIDisassembleLode@y,w,c
  6946  002056  E106               	bnz	l3499
  6947  002058  0E07               	movlw	7
  6948  00205A  182C               	xorwf	SPIDisassembleLode@y+1,w,c
  6949  00205C  B4D8               	btfsc	status,2,c
  6950  00205E  D05C               	goto	l288
  6951  002060  D001               	goto	l3499
  6952  002062  D05A               	goto	l288
  6953  002064                     l3499:
  6954                           
  6955                           ;SPISlave.c: 106: {
  6956                           ;SPISlave.c: 107: dub = Data[y / 3];
  6957  002064  0E00               	movlw	0
  6958  002066  6E1B               	movwf	___lwdiv@divisor+1,c
  6959  002068  0E03               	movlw	3
  6960  00206A  6E1A               	movwf	___lwdiv@divisor,c
  6961  00206C  C02B  F018         	movff	SPIDisassembleLode@y,___lwdiv@dividend
  6962  002070  C02C  F019         	movff	SPIDisassembleLode@y+1,___lwdiv@dividend+1
  6963  002074  EC6C  F013         	call	___lwdiv	;wreg free
  6964  002078  C018  F01F         	movff	?___lwdiv,___wmul@multiplier
  6965  00207C  C019  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
  6966  002080  0E00               	movlw	0
  6967  002082  6E22               	movwf	___wmul@multiplicand+1,c
  6968  002084  0E03               	movlw	3
  6969  002086  6E21               	movwf	___wmul@multiplicand,c
  6970  002088  EC12  F016         	call	___wmul	;wreg free
  6971  00208C  501F               	movf	?___wmul,w,c
  6972  00208E  2425               	addwf	SPIDisassembleLode@Data,w,c
  6973  002090  6ED9               	movwf	fsr2l,c
  6974  002092  5020               	movf	?___wmul+1,w,c
  6975  002094  2026               	addwfc	SPIDisassembleLode@Data+1,w,c
  6976  002096  6EDA               	movwf	fsr2h,c
  6977  002098  CFDE F02D          	movff	postinc2,SPIDisassembleLode@dub
  6978  00209C  CFDE F02E          	movff	postinc2,SPIDisassembleLode@dub+1
  6979  0020A0  CFDD F02F          	movff	postdec2,SPIDisassembleLode@dub+2
  6980                           
  6981                           ;SPISlave.c: 108: Transmit[y] = DoublePtr[0];
  6982  0020A4  C041  FFD9         	movff	_DoublePtr,fsr2l
  6983  0020A8  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  6984  0020AC  502B               	movf	SPIDisassembleLode@y,w,c
  6985  0020AE  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  6986  0020B0  6EE1               	movwf	fsr1l,c
  6987  0020B2  502C               	movf	SPIDisassembleLode@y+1,w,c
  6988  0020B4  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  6989  0020B6  6EE2               	movwf	fsr1h,c
  6990  0020B8  CFDF FFE7          	movff	indf2,indf1
  6991                           
  6992                           ;SPISlave.c: 109: Transmit[y + 1] = DoublePtr[1];
  6993  0020BC  EE20 F001          	lfsr	2,1
  6994  0020C0  5041               	movf	_DoublePtr,w,c
  6995  0020C2  26D9               	addwf	fsr2l,f,c
  6996  0020C4  5042               	movf	_DoublePtr+1,w,c
  6997  0020C6  22DA               	addwfc	fsr2h,f,c
  6998  0020C8  0E01               	movlw	1
  6999  0020CA  242B               	addwf	SPIDisassembleLode@y,w,c
  7000  0020CC  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  7001  0020CE  0E00               	movlw	0
  7002  0020D0  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  7003  0020D2  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  7004  0020D4  5029               	movf	??_SPIDisassembleLode,w,c
  7005  0020D6  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7006  0020D8  6EE1               	movwf	fsr1l,c
  7007  0020DA  502A               	movf	??_SPIDisassembleLode+1,w,c
  7008  0020DC  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7009  0020DE  6EE2               	movwf	fsr1h,c
  7010  0020E0  CFDF FFE7          	movff	indf2,indf1
  7011                           
  7012                           ;SPISlave.c: 110: Transmit[y + 2] = DoublePtr[2];
  7013  0020E4  EE20 F002          	lfsr	2,2
  7014  0020E8  5041               	movf	_DoublePtr,w,c
  7015  0020EA  26D9               	addwf	fsr2l,f,c
  7016  0020EC  5042               	movf	_DoublePtr+1,w,c
  7017  0020EE  22DA               	addwfc	fsr2h,f,c
  7018  0020F0  0E02               	movlw	2
  7019  0020F2  242B               	addwf	SPIDisassembleLode@y,w,c
  7020  0020F4  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  7021  0020F6  0E00               	movlw	0
  7022  0020F8  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  7023  0020FA  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  7024  0020FC  5029               	movf	??_SPIDisassembleLode,w,c
  7025  0020FE  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7026  002100  6EE1               	movwf	fsr1l,c
  7027  002102  502A               	movf	??_SPIDisassembleLode+1,w,c
  7028  002104  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7029  002106  6EE2               	movwf	fsr1h,c
  7030  002108  CFDF FFE7          	movff	indf2,indf1
  7031  00210C  0E03               	movlw	3
  7032  00210E  262B               	addwf	SPIDisassembleLode@y,f,c
  7033  002110  0E00               	movlw	0
  7034  002112  222C               	addwfc	SPIDisassembleLode@y+1,f,c
  7035  002114  D79E               	goto	L2
  7036  002116  D7A6               	goto	l3499
  7037  002118                     l288:
  7038  002118  0012               	return		;funcret
  7039  00211A                     __end_of_SPIDisassembleLode:
  7040                           	opt stack 0
  7041                           tblptru	equ	0xFF8
  7042                           tblptrh	equ	0xFF7
  7043                           tblptrl	equ	0xFF6
  7044                           tablat	equ	0xFF5
  7045                           prodh	equ	0xFF4
  7046                           prodl	equ	0xFF3
  7047                           intcon	equ	0xFF2
  7048                           postinc0	equ	0xFEE
  7049                           wreg	equ	0xFE8
  7050                           indf1	equ	0xFE7
  7051                           postdec1	equ	0xFE5
  7052                           fsr1h	equ	0xFE2
  7053                           fsr1l	equ	0xFE1
  7054                           indf2	equ	0xFDF
  7055                           postinc2	equ	0xFDE
  7056                           postdec2	equ	0xFDD
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061 ;; *************** function ___wmul *****************
  7062 ;; Defined at:
  7063 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  multiplier      2   30[COMRAM] unsigned int 
  7066 ;;  multiplicand    2   32[COMRAM] unsigned int 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  product         2   34[COMRAM] unsigned int 
  7069 ;; Return value:  Size  Location     Type
  7070 ;;                  2   30[COMRAM] unsigned int 
  7071 ;; Registers used:
  7072 ;;		wreg, status,2, status,0, prodl, prodh
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;Total ram usage:        6 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; Hardware stack levels required when called:    4
  7085 ;; This function calls:
  7086 ;;		Nothing
  7087 ;; This function is called by:
  7088 ;;		_SPIDisassembleLode
  7089 ;;		_main
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text41
  7094  002C24                     __ptext41:
  7095                           	opt stack 0
  7096  002C24                     ___wmul:
  7097                           	opt stack 26
  7098                           
  7099                           ;incstack = 0
  7100  002C24  501F               	movf	___wmul@multiplier,w,c
  7101  002C26  0221               	mulwf	___wmul@multiplicand,c
  7102  002C28  CFF3 F023          	movff	prodl,___wmul@product
  7103  002C2C  CFF4 F024          	movff	prodh,___wmul@product+1
  7104  002C30  501F               	movf	___wmul@multiplier,w,c
  7105  002C32  0222               	mulwf	___wmul@multiplicand+1,c
  7106  002C34  50F3               	movf	prodl,w,c
  7107  002C36  2624               	addwf	___wmul@product+1,f,c
  7108  002C38  5020               	movf	___wmul@multiplier+1,w,c
  7109  002C3A  0221               	mulwf	___wmul@multiplicand,c
  7110  002C3C  50F3               	movf	prodl,w,c
  7111  002C3E  2624               	addwf	___wmul@product+1,f,c
  7112  002C40  C023  F01F         	movff	___wmul@product,?___wmul
  7113  002C44  C024  F020         	movff	___wmul@product+1,?___wmul+1
  7114  002C48  D000               	goto	l685
  7115  002C4A                     l685:
  7116  002C4A  0012               	return		;funcret
  7117  002C4C                     __end_of___wmul:
  7118                           	opt stack 0
  7119                           tblptru	equ	0xFF8
  7120                           tblptrh	equ	0xFF7
  7121                           tblptrl	equ	0xFF6
  7122                           tablat	equ	0xFF5
  7123                           prodh	equ	0xFF4
  7124                           prodl	equ	0xFF3
  7125                           intcon	equ	0xFF2
  7126                           postinc0	equ	0xFEE
  7127                           wreg	equ	0xFE8
  7128                           indf1	equ	0xFE7
  7129                           postdec1	equ	0xFE5
  7130                           fsr1h	equ	0xFE2
  7131                           fsr1l	equ	0xFE1
  7132                           indf2	equ	0xFDF
  7133                           postinc2	equ	0xFDE
  7134                           postdec2	equ	0xFDD
  7135                           fsr2h	equ	0xFDA
  7136                           fsr2l	equ	0xFD9
  7137                           status	equ	0xFD8
  7138                           
  7139 ;; *************** function ___lwdiv *****************
  7140 ;; Defined at:
  7141 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  dividend        2   23[COMRAM] unsigned int 
  7144 ;;  divisor         2   25[COMRAM] unsigned int 
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  quotient        2   27[COMRAM] unsigned int 
  7147 ;;  counter         1   29[COMRAM] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  2   23[COMRAM] unsigned int 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7157 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;Total ram usage:        7 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    4
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_SPIDisassembleLode
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text42
  7172  0026D8                     __ptext42:
  7173                           	opt stack 0
  7174  0026D8                     ___lwdiv:
  7175                           	opt stack 25
  7176                           
  7177                           ;incstack = 0
  7178  0026D8  0E00               	movlw	0
  7179  0026DA  6E1D               	movwf	___lwdiv@quotient+1,c
  7180  0026DC  0E00               	movlw	0
  7181  0026DE  6E1C               	movwf	___lwdiv@quotient,c
  7182  0026E0  501A               	movf	___lwdiv@divisor,w,c
  7183  0026E2  101B               	iorwf	___lwdiv@divisor+1,w,c
  7184  0026E4  B4D8               	btfsc	status,2,c
  7185  0026E6  D021               	goto	l1228
  7186  0026E8  0E01               	movlw	1
  7187  0026EA  6E1E               	movwf	___lwdiv@counter,c
  7188  0026EC  D005               	goto	l3323
  7189  0026EE                     l3321:
  7190  0026EE  90D8               	bcf	status,0,c
  7191  0026F0  361A               	rlcf	___lwdiv@divisor,f,c
  7192  0026F2  361B               	rlcf	___lwdiv@divisor+1,f,c
  7193  0026F4  2A1E               	incf	___lwdiv@counter,f,c
  7194  0026F6  D000               	goto	l3323
  7195  0026F8                     l3323:
  7196  0026F8  BE1B               	btfsc	___lwdiv@divisor+1,7,c
  7197  0026FA  D002               	goto	l3325
  7198  0026FC  D7F8               	goto	l3321
  7199  0026FE  D000               	goto	l3325
  7200  002700                     l3325:
  7201  002700  90D8               	bcf	status,0,c
  7202  002702  361C               	rlcf	___lwdiv@quotient,f,c
  7203  002704  361D               	rlcf	___lwdiv@quotient+1,f,c
  7204  002706  501A               	movf	___lwdiv@divisor,w,c
  7205  002708  5C18               	subwf	___lwdiv@dividend,w,c
  7206  00270A  501B               	movf	___lwdiv@divisor+1,w,c
  7207  00270C  5819               	subwfb	___lwdiv@dividend+1,w,c
  7208  00270E  A0D8               	btfss	status,0,c
  7209  002710  D006               	goto	l3333
  7210  002712  501A               	movf	___lwdiv@divisor,w,c
  7211  002714  5E18               	subwf	___lwdiv@dividend,f,c
  7212  002716  501B               	movf	___lwdiv@divisor+1,w,c
  7213  002718  5A19               	subwfb	___lwdiv@dividend+1,f,c
  7214  00271A  801C               	bsf	___lwdiv@quotient,0,c
  7215  00271C  D000               	goto	l3333
  7216  00271E                     l3333:
  7217  00271E  90D8               	bcf	status,0,c
  7218  002720  321B               	rrcf	___lwdiv@divisor+1,f,c
  7219  002722  321A               	rrcf	___lwdiv@divisor,f,c
  7220  002724  2E1E               	decfsz	___lwdiv@counter,f,c
  7221  002726  D7EC               	goto	l3325
  7222  002728  D000               	goto	l1228
  7223  00272A                     l1228:
  7224  00272A  C01C  F018         	movff	___lwdiv@quotient,?___lwdiv
  7225  00272E  C01D  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7226  002732  0012               	return		;funcret
  7227  002734                     __end_of___lwdiv:
  7228                           	opt stack 0
  7229                           tblptru	equ	0xFF8
  7230                           tblptrh	equ	0xFF7
  7231                           tblptrl	equ	0xFF6
  7232                           tablat	equ	0xFF5
  7233                           prodh	equ	0xFF4
  7234                           prodl	equ	0xFF3
  7235                           intcon	equ	0xFF2
  7236                           postinc0	equ	0xFEE
  7237                           wreg	equ	0xFE8
  7238                           indf1	equ	0xFE7
  7239                           postdec1	equ	0xFE5
  7240                           fsr1h	equ	0xFE2
  7241                           fsr1l	equ	0xFE1
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _SPIDisassembleDouble *****************
  7250 ;; Defined at:
  7251 ;;		line 91 in file "SPISlave.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  dub             3   25[COMRAM] unsigned int 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;		None
  7256 ;; Return value:  Size  Location     Type
  7257 ;;		None               void
  7258 ;; Registers used:
  7259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7265 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;Total ram usage:        3 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    5
  7272 ;; This function calls:
  7273 ;;		_GenerateChecksum
  7274 ;; This function is called by:
  7275 ;;		_main
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           	psect	text43
  7280  002A98                     __ptext43:
  7281                           	opt stack 0
  7282  002A98                     _SPIDisassembleDouble:
  7283                           	opt stack 25
  7284                           
  7285                           ;SPISlave.c: 93: DoublePtr = (unsigned char*) &dub;
  7286                           
  7287                           ;incstack = 0
  7288  002A98  0E1A               	movlw	low SPIDisassembleDouble@dub
  7289  002A9A  6E41               	movwf	_DoublePtr,c
  7290  002A9C  0E00               	movlw	high SPIDisassembleDouble@dub
  7291  002A9E  6E42               	movwf	_DoublePtr+1,c
  7292                           
  7293                           ;SPISlave.c: 94: DoubleSPIS[0] = DoublePtr[0];
  7294  002AA0  C041  FFD9         	movff	_DoublePtr,fsr2l
  7295  002AA4  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  7296  002AA8  50DF               	movf	indf2,w,c
  7297  002AAA  6E37               	movwf	_DoubleSPIS,c
  7298                           
  7299                           ;SPISlave.c: 95: DoubleSPIS[1] = DoublePtr[1];
  7300  002AAC  EE20 F001          	lfsr	2,1
  7301  002AB0  5041               	movf	_DoublePtr,w,c
  7302  002AB2  26D9               	addwf	fsr2l,f,c
  7303  002AB4  5042               	movf	_DoublePtr+1,w,c
  7304  002AB6  22DA               	addwfc	fsr2h,f,c
  7305  002AB8  50DF               	movf	indf2,w,c
  7306  002ABA  6E38               	movwf	_DoubleSPIS+1,c
  7307                           
  7308                           ;SPISlave.c: 96: DoubleSPIS[2] = DoublePtr[2];
  7309  002ABC  EE20 F002          	lfsr	2,2
  7310  002AC0  5041               	movf	_DoublePtr,w,c
  7311  002AC2  26D9               	addwf	fsr2l,f,c
  7312  002AC4  5042               	movf	_DoublePtr+1,w,c
  7313  002AC6  22DA               	addwfc	fsr2h,f,c
  7314  002AC8  50DF               	movf	indf2,w,c
  7315  002ACA  6E39               	movwf	_DoubleSPIS+2,c
  7316                           
  7317                           ;SPISlave.c: 97: DoubleSPIS[3] = GenerateChecksum();
  7318  002ACC  ECCC  F014         	call	_GenerateChecksum	;wreg free
  7319  002AD0  6E3A               	movwf	_DoubleSPIS+3,c
  7320  002AD2  0012               	return		;funcret
  7321  002AD4                     __end_of_SPIDisassembleDouble:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           postinc0	equ	0xFEE
  7331                           wreg	equ	0xFE8
  7332                           indf1	equ	0xFE7
  7333                           postdec1	equ	0xFE5
  7334                           fsr1h	equ	0xFE2
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function _GenerateChecksum *****************
  7344 ;; Defined at:
  7345 ;;		line 114 in file "SPISlave.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;		None
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  y               1   24[COMRAM] unsigned char 
  7350 ;;  sum             1   23[COMRAM] unsigned char 
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      unsigned char 
  7353 ;; Registers used:
  7354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;Total ram usage:        2 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    4
  7367 ;; This function calls:
  7368 ;;		Nothing
  7369 ;; This function is called by:
  7370 ;;		_SPIDisassembleDouble
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text44
  7375  002998                     __ptext44:
  7376                           	opt stack 0
  7377  002998                     _GenerateChecksum:
  7378                           	opt stack 25
  7379                           
  7380                           ;SPISlave.c: 116: if ((Command > 0x00) && (Command < 0x0B))
  7381                           
  7382                           ;incstack = 0
  7383  002998  5043               	movf	_Command,w,c
  7384  00299A  B4D8               	btfsc	status,2,c
  7385  00299C  D01B               	goto	l3235
  7386  00299E  0E0B               	movlw	11
  7387  0029A0  6043               	cpfslt	_Command,c
  7388  0029A2  D018               	goto	l3235
  7389                           
  7390                           ;SPISlave.c: 117: {
  7391                           ;SPISlave.c: 118: unsigned char y, sum = 0;
  7392  0029A4  0E00               	movlw	0
  7393  0029A6  6E18               	movwf	GenerateChecksum@sum,c
  7394                           
  7395                           ;SPISlave.c: 119: for (y = 0; y != 3; y++)
  7396  0029A8  0E00               	movlw	0
  7397  0029AA  6E19               	movwf	GenerateChecksum@y,c
  7398  0029AC                     l3219:
  7399  0029AC  0E03               	movlw	3
  7400  0029AE  1819               	xorwf	GenerateChecksum@y,w,c
  7401  0029B0  B4D8               	btfsc	status,2,c
  7402  0029B2  D00E               	goto	l3229
  7403  0029B4  D001               	goto	l3223
  7404  0029B6  D00C               	goto	l3229
  7405  0029B8                     l3223:
  7406                           
  7407                           ;SPISlave.c: 120: sum += DoubleSPIS[y];
  7408  0029B8  5019               	movf	GenerateChecksum@y,w,c
  7409  0029BA  0D01               	mullw	1
  7410  0029BC  0E37               	movlw	low _DoubleSPIS
  7411  0029BE  24F3               	addwf	prodl,w,c
  7412  0029C0  6ED9               	movwf	fsr2l,c
  7413  0029C2  0E00               	movlw	high _DoubleSPIS
  7414  0029C4  20F4               	addwfc	prodh,w,c
  7415  0029C6  6EDA               	movwf	fsr2h,c
  7416  0029C8  50DF               	movf	indf2,w,c
  7417  0029CA  2618               	addwf	GenerateChecksum@sum,f,c
  7418  0029CC  2A19               	incf	GenerateChecksum@y,f,c
  7419  0029CE  D7EE               	goto	l3219
  7420  0029D0                     l3229:
  7421                           
  7422                           ;SPISlave.c: 121: return sum;
  7423  0029D0  5018               	movf	GenerateChecksum@sum,w,c
  7424                           
  7425                           ;SPISlave.c: 122: }
  7426  0029D2  D002               	goto	l294
  7427  0029D4                     l3235:
  7428                           
  7429                           ;SPISlave.c: 123: else
  7430                           ;SPISlave.c: 124: return 0xFF;
  7431  0029D4  0EFF               	movlw	255
  7432  0029D6  D000               	goto	l294
  7433  0029D8                     l294:
  7434  0029D8  0012               	return		;funcret
  7435  0029DA                     __end_of_GenerateChecksum:
  7436                           	opt stack 0
  7437                           tblptru	equ	0xFF8
  7438                           tblptrh	equ	0xFF7
  7439                           tblptrl	equ	0xFF6
  7440                           tablat	equ	0xFF5
  7441                           prodh	equ	0xFF4
  7442                           prodl	equ	0xFF3
  7443                           intcon	equ	0xFF2
  7444                           postinc0	equ	0xFEE
  7445                           wreg	equ	0xFE8
  7446                           indf1	equ	0xFE7
  7447                           postdec1	equ	0xFE5
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _ReceiveSPI1 *****************
  7458 ;; Defined at:
  7459 ;;		line 73 in file "SPISlave.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      unsigned char 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    6
  7480 ;; This function calls:
  7481 ;;		_SPIRestart
  7482 ;; This function is called by:
  7483 ;;		_main
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text45
  7488  002C72                     __ptext45:
  7489                           	opt stack 0
  7490  002C72                     _ReceiveSPI1:
  7491                           	opt stack 24
  7492                           
  7493                           ;SPISlave.c: 75: SSP1BUF = 0x00;
  7494                           
  7495                           ;incstack = 0
  7496  002C72  0E00               	movlw	0
  7497  002C74  6EC9               	movwf	4041,c	;volatile
  7498                           
  7499                           ;SPISlave.c: 76: PIR3bits.TMR4IF = 0;
  7500  002C76  96A4               	bcf	4004,3,c	;volatile
  7501                           
  7502                           ;SPISlave.c: 77: T4CONbits.TMR4ON = 1;
  7503  002C78  8476               	bsf	3958,2,c	;volatile
  7504                           
  7505                           ;SPISlave.c: 78: TMR4 = timer4;
  7506  002C7A  C044  FF78         	movff	_timer4,3960	;volatile
  7507                           
  7508                           ;SPISlave.c: 79: while (!PIR1bits.SSP1IF)
  7509  002C7E  D005               	goto	l3475
  7510  002C80                     l277:
  7511                           
  7512                           ;SPISlave.c: 80: {
  7513                           ;SPISlave.c: 81: if (PIR3bits.TMR4IF == 1)
  7514  002C80  A6A4               	btfss	4004,3,c	;volatile
  7515  002C82  D003               	goto	l3475
  7516                           
  7517                           ;SPISlave.c: 82: {
  7518                           ;SPISlave.c: 83: SPIRestart();
  7519  002C84  ECF4  F016         	call	_SPIRestart	;wreg free
  7520  002C88  D000               	goto	l3475
  7521  002C8A                     l3475:
  7522  002C8A  A69E               	btfss	3998,3,c	;volatile
  7523  002C8C  D7F9               	goto	l277
  7524                           
  7525                           ;SPISlave.c: 84: }
  7526                           ;SPISlave.c: 85: }
  7527                           ;SPISlave.c: 86: PIR1bits.SSP1IF = 0;
  7528  002C8E  969E               	bcf	3998,3,c	;volatile
  7529                           
  7530                           ;SPISlave.c: 87: SSP1CON1bits.SSPOV1 = 0;
  7531  002C90  9CC6               	bcf	4038,6,c	;volatile
  7532                           
  7533                           ;SPISlave.c: 88: return SSP1BUF;
  7534  002C92  50C9               	movf	4041,w,c	;volatile
  7535  002C94  D000               	goto	l280
  7536  002C96                     l280:
  7537  002C96  0012               	return		;funcret
  7538  002C98                     __end_of_ReceiveSPI1:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           indf1	equ	0xFE7
  7550                           postdec1	equ	0xFE5
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _SPIRestart *****************
  7561 ;; Defined at:
  7562 ;;		line 138 in file "SPISlave.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;  temp            1   26[COMRAM] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;Total ram usage:        1 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    5
  7583 ;; This function calls:
  7584 ;;		_OpenSPI1
  7585 ;; This function is called by:
  7586 ;;		_SendSPI1
  7587 ;;		_ReceiveSPI1
  7588 ;;		_main
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text46
  7593  002DE8                     __ptext46:
  7594                           	opt stack 0
  7595  002DE8                     _SPIRestart:
  7596                           	opt stack 24
  7597                           
  7598                           ;SPISlave.c: 140: unsigned char temp;
  7599                           ;SPISlave.c: 141: PIR1bits.SSPIF = 1;
  7600                           
  7601                           ;incstack = 0
  7602  002DE8  869E               	bsf	3998,3,c	;volatile
  7603                           
  7604                           ;SPISlave.c: 142: temp = SSP1BUF;
  7605  002DEA  CFC9 F01B          	movff	4041,SPIRestart@temp	;volatile
  7606                           
  7607                           ;SPISlave.c: 143: (SSP1CON1 &=0xDF);
  7608  002DEE  9AC6               	bcf	4038,5,c	;volatile
  7609                           
  7610                           ;SPISlave.c: 144: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  7611  002DF0  0E00               	movlw	0
  7612  002DF2  6E18               	movwf	OpenSPI1@bus_mode,c
  7613  002DF4  0E00               	movlw	0
  7614  002DF6  6E19               	movwf	OpenSPI1@smp_phase,c
  7615  002DF8  0E04               	movlw	4
  7616  002DFA  ECC5  F013         	call	_OpenSPI1
  7617  002DFE  0012               	return		;funcret
  7618  002E00                     __end_of_SPIRestart:
  7619                           	opt stack 0
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodh	equ	0xFF4
  7625                           prodl	equ	0xFF3
  7626                           intcon	equ	0xFF2
  7627                           postinc0	equ	0xFEE
  7628                           wreg	equ	0xFE8
  7629                           indf1	equ	0xFE7
  7630                           postdec1	equ	0xFE5
  7631                           fsr1h	equ	0xFE2
  7632                           fsr1l	equ	0xFE1
  7633                           indf2	equ	0xFDF
  7634                           postinc2	equ	0xFDE
  7635                           postdec2	equ	0xFDD
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function _OpenSPI1 *****************
  7641 ;; Defined at:
  7642 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  sync_mode       1    wreg     unsigned char 
  7645 ;;  bus_mode        1   23[COMRAM] unsigned char 
  7646 ;;  smp_phase       1   24[COMRAM] unsigned char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  sync_mode       1   25[COMRAM] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg, status,2, status,0
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;Total ram usage:        3 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    4
  7665 ;; This function calls:
  7666 ;;		Nothing
  7667 ;; This function is called by:
  7668 ;;		_SPIInit
  7669 ;;		_SPIRestart
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text47
  7674  00278A                     __ptext47:
  7675                           	opt stack 0
  7676  00278A                     _OpenSPI1:
  7677                           	opt stack 24
  7678                           
  7679                           ;incstack = 0
  7680                           ;OpenSPI1@sync_mode stored from wreg
  7681  00278A  6E1A               	movwf	OpenSPI1@sync_mode,c
  7682  00278C  0E3F               	movlw	63
  7683  00278E  16C7               	andwf	4039,f,c	;volatile
  7684  002790  0E00               	movlw	0
  7685  002792  6EC6               	movwf	4038,c	;volatile
  7686  002794  501A               	movf	OpenSPI1@sync_mode,w,c
  7687  002796  12C6               	iorwf	4038,f,c	;volatile
  7688  002798  5019               	movf	OpenSPI1@smp_phase,w,c
  7689  00279A  12C7               	iorwf	4039,f,c	;volatile
  7690  00279C  D005               	goto	l3073
  7691  00279E                     l672:
  7692  00279E  8CC7               	bsf	4039,6,c	;volatile
  7693  0027A0  D013               	goto	l3077
  7694  0027A2                     l674:
  7695  0027A2  8CC7               	bsf	4039,6,c	;volatile
  7696  0027A4                     l675:
  7697  0027A4  88C6               	bsf	4038,4,c	;volatile
  7698  0027A6  D010               	goto	l3077
  7699  0027A8                     l3073:
  7700  0027A8  5018               	movf	OpenSPI1@bus_mode,w,c
  7701                           
  7702                           ; Switch size 1, requested type "space"
  7703                           ; Number of cases is 3, Range of values is 0 to 3
  7704                           ; switch strategies available:
  7705                           ; Name         Instructions Cycles
  7706                           ; simple_byte           10     6 (average)
  7707                           ;	Chosen strategy is simple_byte
  7708  0027AA  0A00               	xorlw	0	; case 0
  7709  0027AC  B4D8               	btfsc	status,2,c
  7710  0027AE  D7F7               	goto	l672
  7711  0027B0  0A02               	xorlw	2	; case 2
  7712  0027B2  B4D8               	btfsc	status,2,c
  7713  0027B4  D7F6               	goto	l674
  7714  0027B6  0A01               	xorlw	1	; case 3
  7715  0027B8  B4D8               	btfsc	status,2,c
  7716  0027BA  D7F4               	goto	l675
  7717  0027BC  D005               	goto	l3077
  7718  0027BE                     l678:
  7719  0027BE  8E97               	bsf	3991,7,c	;volatile
  7720  0027C0                     l680:
  7721  0027C0  8694               	bsf	3988,3,c	;volatile
  7722  0027C2  D00A               	goto	l679
  7723  0027C4                     l681:
  7724  0027C4  9694               	bcf	3988,3,c	;volatile
  7725  0027C6  D008               	goto	l679
  7726  0027C8                     l3077:
  7727  0027C8  501A               	movf	OpenSPI1@sync_mode,w,c
  7728                           
  7729                           ; Switch size 1, requested type "space"
  7730                           ; Number of cases is 2, Range of values is 4 to 5
  7731                           ; switch strategies available:
  7732                           ; Name         Instructions Cycles
  7733                           ; simple_byte            7     4 (average)
  7734                           ;	Chosen strategy is simple_byte
  7735  0027CA  0A04               	xorlw	4	; case 4
  7736  0027CC  B4D8               	btfsc	status,2,c
  7737  0027CE  D7F7               	goto	l678
  7738  0027D0  0A01               	xorlw	1	; case 5
  7739  0027D2  B4D8               	btfsc	status,2,c
  7740  0027D4  D7F5               	goto	l680
  7741  0027D6  D7F6               	goto	l681
  7742  0027D8                     l679:
  7743  0027D8  8894               	bsf	3988,4,c	;volatile
  7744  0027DA  9A94               	bcf	3988,5,c	;volatile
  7745  0027DC  8AC6               	bsf	4038,5,c	;volatile
  7746  0027DE  0012               	return		;funcret
  7747  0027E0                     __end_of_OpenSPI1:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodh	equ	0xFF4
  7754                           prodl	equ	0xFF3
  7755                           intcon	equ	0xFF2
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           indf1	equ	0xFE7
  7759                           postdec1	equ	0xFE5
  7760                           fsr1h	equ	0xFE2
  7761                           fsr1l	equ	0xFE1
  7762                           indf2	equ	0xFDF
  7763                           postinc2	equ	0xFDE
  7764                           postdec2	equ	0xFDD
  7765                           fsr2h	equ	0xFDA
  7766                           fsr2l	equ	0xFD9
  7767                           status	equ	0xFD8
  7768                           
  7769 ;; *************** function _ImplementJSMotion *****************
  7770 ;; Defined at:
  7771 ;;		line 71 in file "MotorControl.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  JoystickValu    2   38[BANK0 ] int 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  CCPinput        2   42[BANK0 ] unsigned int 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;		None               void
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        6 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    5
  7792 ;; This function calls:
  7793 ;;		_abs
  7794 ;; This function is called by:
  7795 ;;		_main
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           	psect	text48
  7800  001CD4                     __ptext48:
  7801                           	opt stack 0
  7802  001CD4                     _ImplementJSMotion:
  7803                           	opt stack 25
  7804                           
  7805                           ;MotorControl.c: 73: unsigned int CCPinput;
  7806                           ;MotorControl.c: 74: if (JoystickValue < DeadbandLow)
  7807                           
  7808                           ;incstack = 0
  7809  001CD4  5047               	movf	_DeadbandLow,w,c
  7810  001CD6  0100               	movlb	0	; () banked
  7811  001CD8  5D86               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7812  001CDA  0100               	movlb	0	; () banked
  7813  001CDC  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7814  001CDE  0A80               	xorlw	128
  7815  001CE0  0100               	movlb	0	; () banked
  7816  001CE2  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7817  001CE4  5048               	movf	_DeadbandLow+1,w,c
  7818  001CE6  0A80               	xorlw	128
  7819  001CE8  0100               	movlb	0	; () banked
  7820  001CEA  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7821  001CEC  B0D8               	btfsc	status,0,c
  7822  001CEE  D002               	goto	l4249
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;MotorControl.c: 75: {
  7826                           ;MotorControl.c: 76: CCP3CONbits.P3M1 = 1;
  7827  001CF0  8EB7               	bsf	4023,7,c	;volatile
  7828  001CF2  D00F               	goto	l4253
  7829  001CF4                     l4249:
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;MotorControl.c: 79: else if (JoystickValue > DeadbandHigh)
  7833  001CF4  0100               	movlb	0	; () banked
  7834  001CF6  5186               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7835  001CF8  5C45               	subwf	_DeadbandHigh,w,c
  7836  001CFA  5046               	movf	_DeadbandHigh+1,w,c
  7837  001CFC  0A80               	xorlw	128
  7838  001CFE  0100               	movlb	0	; () banked
  7839  001D00  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7840  001D02  0100               	movlb	0	; () banked
  7841  001D04  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7842  001D06  0A80               	xorlw	128
  7843  001D08  0100               	movlb	0	; () banked
  7844  001D0A  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7845  001D0C  B0D8               	btfsc	status,0,c
  7846  001D0E  D005               	goto	l4255
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;MotorControl.c: 80: {
  7850                           ;MotorControl.c: 81: CCP3CONbits.P3M1 = 0;
  7851  001D10  9EB7               	bcf	4023,7,c	;volatile
  7852  001D12                     l4253:
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;MotorControl.c: 82: PIDEnableFlag = 0;
  7856  001D12  0E00               	movlw	0
  7857  001D14  0100               	movlb	0	; () banked
  7858  001D16  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  7859                           
  7860                           ;MotorControl.c: 83: }
  7861  001D18  D02A               	goto	l4267
  7862  001D1A                     l4255:
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;MotorControl.c: 84: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  7866  001D1A  0100               	movlb	0	; () banked
  7867  001D1C  5186               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7868  001D1E  5C45               	subwf	_DeadbandHigh,w,c
  7869  001D20  5046               	movf	_DeadbandHigh+1,w,c
  7870  001D22  0A80               	xorlw	128
  7871  001D24  0100               	movlb	0	; () banked
  7872  001D26  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7873  001D28  0100               	movlb	0	; () banked
  7874  001D2A  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7875  001D2C  0A80               	xorlw	128
  7876  001D2E  0100               	movlb	0	; () banked
  7877  001D30  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7878  001D32  A0D8               	btfss	status,0,c
  7879  001D34  D01C               	goto	l4267
  7880                           
  7881                           ; BSR set to: 0
  7882  001D36  5047               	movf	_DeadbandLow,w,c
  7883  001D38  0100               	movlb	0	; () banked
  7884  001D3A  5D86               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7885  001D3C  0100               	movlb	0	; () banked
  7886  001D3E  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7887  001D40  0A80               	xorlw	128
  7888  001D42  0100               	movlb	0	; () banked
  7889  001D44  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7890  001D46  5048               	movf	_DeadbandLow+1,w,c
  7891  001D48  0A80               	xorlw	128
  7892  001D4A  0100               	movlb	0	; () banked
  7893  001D4C  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7894  001D4E  A0D8               	btfss	status,0,c
  7895  001D50  D00E               	goto	l4267
  7896                           
  7897                           ; BSR set to: 0
  7898  001D52  0100               	movlb	0	; () banked
  7899  001D54  51C5               	movf	_PIDEnableFlag& (0+255),w,b
  7900  001D56  A4D8               	btfss	status,2,c
  7901  001D58  D00A               	goto	l4267
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;MotorControl.c: 85: {
  7905                           ;MotorControl.c: 86: JoystickValue = 0;
  7906  001D5A  0E00               	movlw	0
  7907  001D5C  0100               	movlb	0	; () banked
  7908  001D5E  6F87               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  7909  001D60  0E00               	movlw	0
  7910  001D62  6F86               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  7911                           
  7912                           ;MotorControl.c: 87: CCPR3L = 0x00;
  7913  001D64  0E00               	movlw	0
  7914  001D66  6EB8               	movwf	4024,c	;volatile
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;MotorControl.c: 88: CCP3CONbits.DC3B1 = 0;
  7918  001D68  9AB7               	bcf	4023,5,c	;volatile
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;MotorControl.c: 89: CCP3CONbits.DC3B0 = 0;
  7922  001D6A  98B7               	bcf	4023,4,c	;volatile
  7923                           
  7924                           ; BSR set to: 0
  7925                           
  7926                           ; BSR set to: 0
  7927  001D6C  D000               	goto	l4267
  7928  001D6E                     l4267:
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;MotorControl.c: 90: }
  7932                           ;MotorControl.c: 92: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  7933  001D6E  5047               	movf	_DeadbandLow,w,c
  7934  001D70  0100               	movlb	0	; () banked
  7935  001D72  5D86               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7936  001D74  0100               	movlb	0	; () banked
  7937  001D76  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7938  001D78  0A80               	xorlw	128
  7939  001D7A  0100               	movlb	0	; () banked
  7940  001D7C  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7941  001D7E  5048               	movf	_DeadbandLow+1,w,c
  7942  001D80  0A80               	xorlw	128
  7943  001D82  0100               	movlb	0	; () banked
  7944  001D84  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7945  001D86  A0D8               	btfss	status,0,c
  7946  001D88  D00E               	goto	l4271
  7947                           
  7948                           ; BSR set to: 0
  7949  001D8A  0100               	movlb	0	; () banked
  7950  001D8C  5186               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7951  001D8E  5C45               	subwf	_DeadbandHigh,w,c
  7952  001D90  5046               	movf	_DeadbandHigh+1,w,c
  7953  001D92  0A80               	xorlw	128
  7954  001D94  0100               	movlb	0	; () banked
  7955  001D96  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7956  001D98  0100               	movlb	0	; () banked
  7957  001D9A  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7958  001D9C  0A80               	xorlw	128
  7959  001D9E  0100               	movlb	0	; () banked
  7960  001DA0  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7961  001DA2  B0D8               	btfsc	status,0,c
  7962  001DA4  D030               	goto	l109
  7963  001DA6                     l4271:
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;MotorControl.c: 93: {
  7967                           ;MotorControl.c: 94: JoystickValue = abs(JoystickValue);
  7968  001DA6  C086  F084         	movff	ImplementJSMotion@JoystickValue,abs@a
  7969  001DAA  C087  F085         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  7970  001DAE  ECFD  F015         	call	_abs	;wreg free
  7971  001DB2  C084  F086         	movff	?_abs,ImplementJSMotion@JoystickValue
  7972  001DB6  C085  F087         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  7973                           
  7974                           ;MotorControl.c: 95: CCPinput = JoystickValue * 2;
  7975  001DBA  90D8               	bcf	status,0,c
  7976  001DBC  0100               	movlb	0	; () banked
  7977  001DBE  3586               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7978  001DC0  0100               	movlb	0	; () banked
  7979  001DC2  6F8A               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  7980  001DC4  0100               	movlb	0	; () banked
  7981  001DC6  3587               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7982  001DC8  0100               	movlb	0	; () banked
  7983  001DCA  6F8B               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;MotorControl.c: 96: CCPR3L = (CCPinput >> 2) & 0xFF;
  7987  001DCC  C08A  F088         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7988  001DD0  C08B  F089         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  7989  001DD4  0100               	movlb	0	; () banked
  7990  001DD6  90D8               	bcf	status,0,c
  7991  001DD8  3389               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7992  001DDA  3388               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7993  001DDC  0100               	movlb	0	; () banked
  7994  001DDE  90D8               	bcf	status,0,c
  7995  001DE0  3389               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7996  001DE2  3388               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7997  001DE4  0100               	movlb	0	; () banked
  7998  001DE6  5188               	movf	??_ImplementJSMotion& (0+255),w,b
  7999  001DE8  6EB8               	movwf	4024,c	;volatile
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;MotorControl.c: 97: CCP3CONbits.DC3B = (CCPinput & 0x03);
  8003  001DEA  C08A  F088         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  8004  001DEE  0E03               	movlw	3
  8005  001DF0  0100               	movlb	0	; () banked
  8006  001DF2  1788               	andwf	??_ImplementJSMotion& (0+255),f,b
  8007  001DF4  0100               	movlb	0	; () banked
  8008  001DF6  3B88               	swapf	??_ImplementJSMotion& (0+255),f,b
  8009  001DF8  50B7               	movf	4023,w,c	;volatile
  8010  001DFA  0100               	movlb	0	; () banked
  8011  001DFC  1988               	xorwf	??_ImplementJSMotion& (0+255),w,b
  8012  001DFE  0BCF               	andlw	-49
  8013  001E00  1988               	xorwf	??_ImplementJSMotion& (0+255),w,b
  8014  001E02  6EB7               	movwf	4023,c	;volatile
  8015  001E04  D000               	goto	l109
  8016  001E06                     l109:
  8017                           
  8018                           ; BSR set to: 0
  8019  001E06  0012               	return		;funcret
  8020  001E08                     __end_of_ImplementJSMotion:
  8021                           	opt stack 0
  8022                           tblptru	equ	0xFF8
  8023                           tblptrh	equ	0xFF7
  8024                           tblptrl	equ	0xFF6
  8025                           tablat	equ	0xFF5
  8026                           prodh	equ	0xFF4
  8027                           prodl	equ	0xFF3
  8028                           intcon	equ	0xFF2
  8029                           postinc0	equ	0xFEE
  8030                           wreg	equ	0xFE8
  8031                           indf1	equ	0xFE7
  8032                           postdec1	equ	0xFE5
  8033                           fsr1h	equ	0xFE2
  8034                           fsr1l	equ	0xFE1
  8035                           indf2	equ	0xFDF
  8036                           postinc2	equ	0xFDE
  8037                           postdec2	equ	0xFDD
  8038                           fsr2h	equ	0xFDA
  8039                           fsr2l	equ	0xFD9
  8040                           status	equ	0xFD8
  8041                           
  8042 ;; *************** function _abs *****************
  8043 ;; Defined at:
  8044 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  a               2   36[BANK0 ] int 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;		None
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  2   36[BANK0 ] int 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8058 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;Total ram usage:        4 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:    4
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_ImplementPIDMotion
  8069 ;;		_ImplementJSMotion
  8070 ;;		_ZeroMotors
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text49
  8075  002BFA                     __ptext49:
  8076                           	opt stack 0
  8077  002BFA                     _abs:
  8078                           	opt stack 24
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;incstack = 0
  8082  002BFA  0100               	movlb	0	; () banked
  8083  002BFC  AF85               	btfss	(abs@a+1)& (0+255),7,b
  8084  002BFE  D00D               	goto	l732
  8085                           
  8086                           ; BSR set to: 0
  8087  002C00  C084  F035         	movff	abs@a,??_abs
  8088  002C04  C085  F036         	movff	abs@a+1,??_abs+1
  8089  002C08  1E35               	comf	??_abs,f,c
  8090  002C0A  1E36               	comf	??_abs+1,f,c
  8091  002C0C  4A35               	infsnz	??_abs,f,c
  8092  002C0E  2A36               	incf	??_abs+1,f,c
  8093  002C10  C035  F084         	movff	??_abs,?_abs
  8094  002C14  C036  F085         	movff	??_abs+1,?_abs+1
  8095  002C18  D004               	goto	l733
  8096  002C1A                     l732:
  8097                           
  8098                           ; BSR set to: 0
  8099  002C1A  C084  F084         	movff	abs@a,?_abs
  8100  002C1E  C085  F085         	movff	abs@a+1,?_abs+1
  8101  002C22                     l733:
  8102                           
  8103                           ; BSR set to: 0
  8104  002C22  0012               	return		;funcret
  8105  002C24                     __end_of_abs:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           postinc0	equ	0xFEE
  8115                           wreg	equ	0xFE8
  8116                           indf1	equ	0xFE7
  8117                           postdec1	equ	0xFE5
  8118                           fsr1h	equ	0xFE2
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function _DetectMovement *****************
  8128 ;; Defined at:
  8129 ;;		line 52 in file "Joystick.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  ADCresult       2   28[COMRAM] unsigned int 
  8134 ;;  JoystickResu    2   26[COMRAM] int 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  2   23[COMRAM] int 
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;Total ram usage:        7 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    4
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_main
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           	psect	text50
  8159  00260E                     __ptext50:
  8160                           	opt stack 0
  8161  00260E                     _DetectMovement:
  8162                           	opt stack 26
  8163                           
  8164                           ;Joystick.c: 54: unsigned int ADCresult;
  8165                           ;Joystick.c: 55: int JoystickResult;
  8166                           ;Joystick.c: 57: ADCON0bits.GODONE = 1;
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;incstack = 0
  8170  00260E  82C2               	bsf	4034,1,c	;volatile
  8171                           
  8172                           ;Joystick.c: 58: while (ADCON0bits.GO_NOT_DONE == 1);
  8173  002610  D000               	goto	l43
  8174  002612                     l43:
  8175  002612  B2C2               	btfsc	4034,1,c	;volatile
  8176  002614  D7FE               	goto	l43
  8177                           
  8178                           ;Joystick.c: 60: ADCresult = ADRESH;
  8179  002616  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  8180  00261A  6A1E               	clrf	DetectMovement@ADCresult+1,c
  8181                           
  8182                           ;Joystick.c: 61: ADCresult = ADCresult << 8;
  8183  00261C  501D               	movf	DetectMovement@ADCresult,w,c
  8184  00261E  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8185  002620  6A1D               	clrf	DetectMovement@ADCresult,c
  8186                           
  8187                           ;Joystick.c: 62: ADCresult = ADCresult | ADRESL;
  8188  002622  501D               	movf	DetectMovement@ADCresult,w,c
  8189  002624  10C3               	iorwf	4035,w,c	;volatile
  8190  002626  6E1D               	movwf	DetectMovement@ADCresult,c
  8191  002628  501E               	movf	DetectMovement@ADCresult+1,w,c
  8192  00262A  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8193                           
  8194                           ;Joystick.c: 63: JoystickResult = (ADCresult - 512);
  8195  00262C  0E00               	movlw	0
  8196  00262E  241D               	addwf	DetectMovement@ADCresult,w,c
  8197  002630  6E1B               	movwf	DetectMovement@JoystickResult,c
  8198  002632  0EFE               	movlw	254
  8199  002634  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  8200  002636  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  8201                           
  8202                           ;Joystick.c: 65: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  8203  002638  501B               	movf	DetectMovement@JoystickResult,w,c
  8204  00263A  5C45               	subwf	_DeadbandHigh,w,c
  8205  00263C  5046               	movf	_DeadbandHigh+1,w,c
  8206  00263E  0A80               	xorlw	128
  8207  002640  6E1A               	movwf	??_DetectMovement& (0+255),c
  8208  002642  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8209  002644  0A80               	xorlw	128
  8210  002646  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8211  002648  A0D8               	btfss	status,0,c
  8212  00264A  D00A               	goto	l3389
  8213  00264C  5047               	movf	_DeadbandLow,w,c
  8214  00264E  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  8215  002650  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8216  002652  0A80               	xorlw	128
  8217  002654  6E1A               	movwf	??_DetectMovement& (0+255),c
  8218  002656  5048               	movf	_DeadbandLow+1,w,c
  8219  002658  0A80               	xorlw	128
  8220  00265A  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8221  00265C  B0D8               	btfsc	status,0,c
  8222  00265E  D008               	goto	l3397
  8223  002660                     l3389:
  8224                           
  8225                           ;Joystick.c: 66: {
  8226                           ;Joystick.c: 67: PIDEnableFlag = 0;
  8227  002660  0E00               	movlw	0
  8228  002662  0100               	movlb	0	; () banked
  8229  002664  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;Joystick.c: 68: return JoystickResult;
  8233  002666  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  8234  00266A  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;Joystick.c: 69: }
  8238                           
  8239                           ; BSR set to: 0
  8240  00266E  D005               	goto	l49
  8241  002670                     l3397:
  8242                           
  8243                           ;Joystick.c: 70: else
  8244                           ;Joystick.c: 71: return 0;
  8245  002670  0E00               	movlw	0
  8246  002672  6E19               	movwf	?_DetectMovement+1,c
  8247  002674  0E00               	movlw	0
  8248  002676  6E18               	movwf	?_DetectMovement,c
  8249  002678  D000               	goto	l49
  8250  00267A                     l49:
  8251  00267A  0012               	return		;funcret
  8252  00267C                     __end_of_DetectMovement:
  8253                           	opt stack 0
  8254                           tblptru	equ	0xFF8
  8255                           tblptrh	equ	0xFF7
  8256                           tblptrl	equ	0xFF6
  8257                           tablat	equ	0xFF5
  8258                           prodh	equ	0xFF4
  8259                           prodl	equ	0xFF3
  8260                           intcon	equ	0xFF2
  8261                           postinc0	equ	0xFEE
  8262                           wreg	equ	0xFE8
  8263                           indf1	equ	0xFE7
  8264                           postdec1	equ	0xFE5
  8265                           fsr1h	equ	0xFE2
  8266                           fsr1l	equ	0xFE1
  8267                           indf2	equ	0xFDF
  8268                           postinc2	equ	0xFDE
  8269                           postdec2	equ	0xFDD
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function _DetectJoystick *****************
  8275 ;; Defined at:
  8276 ;;		line 31 in file "Joystick.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;		None
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;		None
  8281 ;; Return value:  Size  Location     Type
  8282 ;;		None               void
  8283 ;; Registers used:
  8284 ;;		wreg, status,2
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;Total ram usage:        0 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    4
  8297 ;; This function calls:
  8298 ;;		Nothing
  8299 ;; This function is called by:
  8300 ;;		_main
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text51
  8305  002D4C                     __ptext51:
  8306                           	opt stack 0
  8307  002D4C                     _DetectJoystick:
  8308                           	opt stack 26
  8309                           
  8310                           ;Joystick.c: 33: if (PORTBbits.RB1 == 0)
  8311                           
  8312                           ;incstack = 0
  8313  002D4C  B281               	btfsc	3969,1,c	;volatile
  8314  002D4E  D003               	goto	l37
  8315                           
  8316                           ;Joystick.c: 34: {
  8317                           ;Joystick.c: 35: PORTAbits.RA2 = 0;
  8318  002D50  9480               	bcf	3968,2,c	;volatile
  8319                           
  8320                           ;Joystick.c: 36: JSEnableFlag = 0;
  8321  002D52  0E00               	movlw	0
  8322  002D54  D008               	goto	L3
  8323  002D56                     l37:
  8324                           
  8325                           ;Joystick.c: 39: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  8326  002D56  A281               	btfss	3969,1,c	;volatile
  8327  002D58  D009               	goto	l40
  8328  002D5A  0100               	movlb	0	; () banked
  8329  002D5C  51C4               	movf	_JSEnableFlag& (0+255),w,b
  8330  002D5E  A4D8               	btfss	status,2,c
  8331  002D60  D005               	goto	l40
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;Joystick.c: 40: {
  8335                           ;Joystick.c: 41: PORTAbits.RA2 = 1;
  8336  002D62  8480               	bsf	3968,2,c	;volatile
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;Joystick.c: 42: JSEnableFlag = 1;
  8340  002D64  0E01               	movlw	1
  8341  002D66                     L3:
  8342  002D66  0100               	movlb	0	; () banked
  8343  002D68  6FC4               	movwf	_JSEnableFlag& (0+255),b
  8344                           
  8345                           ; BSR set to: 0
  8346  002D6A  D000               	goto	l40
  8347  002D6C                     l40:
  8348  002D6C  0012               	return		;funcret
  8349  002D6E                     __end_of_DetectJoystick:
  8350                           	opt stack 0
  8351                           tblptru	equ	0xFF8
  8352                           tblptrh	equ	0xFF7
  8353                           tblptrl	equ	0xFF6
  8354                           tablat	equ	0xFF5
  8355                           prodh	equ	0xFF4
  8356                           prodl	equ	0xFF3
  8357                           intcon	equ	0xFF2
  8358                           postinc0	equ	0xFEE
  8359                           wreg	equ	0xFE8
  8360                           indf1	equ	0xFE7
  8361                           postdec1	equ	0xFE5
  8362                           fsr1h	equ	0xFE2
  8363                           fsr1l	equ	0xFE1
  8364                           indf2	equ	0xFDF
  8365                           postinc2	equ	0xFDE
  8366                           postdec2	equ	0xFDD
  8367                           fsr2h	equ	0xFDA
  8368                           fsr2l	equ	0xFD9
  8369                           status	equ	0xFD8
  8370                           
  8371 ;; *************** function _ISR *****************
  8372 ;; Defined at:
  8373 ;;		line 245 in file "RTDuC.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;		None
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;		None               void
  8380 ;; Registers used:
  8381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;Total ram usage:       14 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    3
  8394 ;; This function calls:
  8395 ;;		_INT0Int
  8396 ;;		_SPIInt
  8397 ;;		_TMR0Int
  8398 ;;		i2_SaveAll
  8399 ;; This function is called by:
  8400 ;;		Interrupt level 2
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           	psect	intcode
  8405  000008                     __pintcode:
  8406                           	opt stack 0
  8407  000008                     _ISR:
  8408                           	opt stack 21
  8409                           
  8410                           ;incstack = 0
  8411  000008  CFFA F00A          	movff	pclath,??_ISR
  8412  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  8413  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  8414  000014  EDFC  F011         	call	int_func,f	;refresh shadow registers
  8415                           pclatu	equ	0xFFB
  8416                           pclath	equ	0xFFA
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           intcon	equ	0xFF2
  8424                           postinc0	equ	0xFEE
  8425                           fsr0l	equ	0xFE9
  8426                           wreg	equ	0xFE8
  8427                           indf1	equ	0xFE7
  8428                           postdec1	equ	0xFE5
  8429                           fsr1h	equ	0xFE2
  8430                           fsr1l	equ	0xFE1
  8431                           indf2	equ	0xFDF
  8432                           postinc2	equ	0xFDE
  8433                           postdec2	equ	0xFDD
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438                           	psect	intcode_body
  8439  0023F8                     __pintcode_body:
  8440                           	opt stack 21
  8441  0023F8                     int_func:
  8442                           	opt stack 21
  8443  0023F8  0006               	pop		; remove dummy address from shadow register refresh
  8444  0023FA  CFEA F00D          	movff	fsr0h,??_ISR+3
  8445  0023FE  CFE1 F00E          	movff	fsr1l,??_ISR+4
  8446  002402  CFE2 F00F          	movff	fsr1h,??_ISR+5
  8447  002406  CFD9 F010          	movff	fsr2l,??_ISR+6
  8448  00240A  CFDA F011          	movff	fsr2h,??_ISR+7
  8449  00240E  CFF3 F012          	movff	prodl,??_ISR+8
  8450  002412  CFF4 F013          	movff	prodh,??_ISR+9
  8451  002416  CFF6 F014          	movff	tblptrl,??_ISR+10
  8452  00241A  CFF7 F015          	movff	tblptrh,??_ISR+11
  8453  00241E  CFF8 F016          	movff	tblptru,??_ISR+12
  8454  002422  CFF5 F017          	movff	tablat,??_ISR+13
  8455                           
  8456                           ;RTDuC.c: 247: PORTCbits.RC6 = 1;
  8457  002426  8C82               	bsf	3970,6,c	;volatile
  8458                           
  8459                           ;RTDuC.c: 248: if (PIR1bits.SSP1IF == 1)
  8460  002428  A69E               	btfss	3998,3,c	;volatile
  8461  00242A  D003               	goto	i2l3887
  8462                           
  8463                           ;RTDuC.c: 249: {
  8464                           ;RTDuC.c: 250: SPIInt();
  8465  00242C  EC4C  F016         	call	_SPIInt	;wreg free
  8466  002430  D000               	goto	i2l3887
  8467  002432                     i2l3887:
  8468                           
  8469                           ;RTDuC.c: 251: }
  8470                           ;RTDuC.c: 253: if (INTCONbits.TMR0IF == 1)
  8471  002432  A4F2               	btfss	intcon,2,c	;volatile
  8472  002434  D003               	goto	i2l3891
  8473                           
  8474                           ;RTDuC.c: 254: {
  8475                           ;RTDuC.c: 255: TMR0Int();
  8476  002436  EC1C  F017         	call	_TMR0Int	;wreg free
  8477  00243A  D000               	goto	i2l3891
  8478  00243C                     i2l3891:
  8479                           
  8480                           ;RTDuC.c: 256: }
  8481                           ;RTDuC.c: 258: if (INTCONbits.INT0IF == 1)
  8482  00243C  A2F2               	btfss	intcon,1,c	;volatile
  8483  00243E  D003               	goto	i2l3895
  8484                           
  8485                           ;RTDuC.c: 259: {
  8486                           ;RTDuC.c: 260: INT0Int();
  8487  002440  EC83  F016         	call	_INT0Int	;wreg free
  8488  002444  D000               	goto	i2l3895
  8489  002446                     i2l3895:
  8490                           
  8491                           ;RTDuC.c: 261: }
  8492                           ;RTDuC.c: 263: if (PIR2bits.HLVDIF == 1)
  8493  002446  A4A1               	btfss	4001,2,c	;volatile
  8494  002448  D006               	goto	i2l3901
  8495                           
  8496                           ;RTDuC.c: 264: {
  8497                           ;RTDuC.c: 265: PORTAbits.RA4 = 0;
  8498  00244A  9880               	bcf	3968,4,c	;volatile
  8499                           
  8500                           ;RTDuC.c: 266: PORTAbits.RA3 = 0;
  8501  00244C  9680               	bcf	3968,3,c	;volatile
  8502                           
  8503                           ;RTDuC.c: 267: PORTAbits.RA2 = 0;
  8504  00244E  9480               	bcf	3968,2,c	;volatile
  8505                           
  8506                           ;RTDuC.c: 268: SaveAll();
  8507  002450  EC4C  F011         	call	i2_SaveAll	;wreg free
  8508  002454  D000               	goto	i2l3901
  8509  002456                     i2l3901:
  8510                           
  8511                           ;RTDuC.c: 269: }
  8512                           ;RTDuC.c: 271: if (PIR2bits.OSCFIF == 1)
  8513  002456  AEA1               	btfss	4001,7,c	;volatile
  8514  002458  D002               	goto	i2l592
  8515  00245A  00FF               	reset		;# 
  8516  00245C  D000               	goto	i2l592
  8517  00245E                     i2l592:
  8518  00245E  C017  FFF5         	movff	??_ISR+13,tablat
  8519  002462  C016  FFF8         	movff	??_ISR+12,tblptru
  8520  002466  C015  FFF7         	movff	??_ISR+11,tblptrh
  8521  00246A  C014  FFF6         	movff	??_ISR+10,tblptrl
  8522  00246E  C013  FFF4         	movff	??_ISR+9,prodh
  8523  002472  C012  FFF3         	movff	??_ISR+8,prodl
  8524  002476  C011  FFDA         	movff	??_ISR+7,fsr2h
  8525  00247A  C010  FFD9         	movff	??_ISR+6,fsr2l
  8526  00247E  C00F  FFE2         	movff	??_ISR+5,fsr1h
  8527  002482  C00E  FFE1         	movff	??_ISR+4,fsr1l
  8528  002486  C00D  FFEA         	movff	??_ISR+3,fsr0h
  8529  00248A  C00C  FFE9         	movff	??_ISR+2,fsr0l
  8530  00248E  C00B  FFFB         	movff	??_ISR+1,pclatu
  8531  002492  C00A  FFFA         	movff	??_ISR,pclath
  8532  002496  0011               	retfie		f
  8533  002498                     __end_of_ISR:
  8534                           	opt stack 0
  8535                           pclatu	equ	0xFFB
  8536                           pclath	equ	0xFFA
  8537                           tblptru	equ	0xFF8
  8538                           tblptrh	equ	0xFF7
  8539                           tblptrl	equ	0xFF6
  8540                           tablat	equ	0xFF5
  8541                           prodh	equ	0xFF4
  8542                           prodl	equ	0xFF3
  8543                           intcon	equ	0xFF2
  8544                           postinc0	equ	0xFEE
  8545                           fsr0h	equ	0xFEA
  8546                           fsr0l	equ	0xFE9
  8547                           wreg	equ	0xFE8
  8548                           indf1	equ	0xFE7
  8549                           postdec1	equ	0xFE5
  8550                           fsr1h	equ	0xFE2
  8551                           fsr1l	equ	0xFE1
  8552                           indf2	equ	0xFDF
  8553                           postinc2	equ	0xFDE
  8554                           postdec2	equ	0xFDD
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559 ;; *************** function i2_SaveAll *****************
  8560 ;; Defined at:
  8561 ;;		line 161 in file "EEPROM.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;		None               void
  8568 ;; Registers used:
  8569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;Total ram usage:        0 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    2
  8582 ;; This function calls:
  8583 ;;		i2_EEWriteChar
  8584 ;;		i2_EEWriteDouble
  8585 ;; This function is called by:
  8586 ;;		_ISR
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text53
  8591  002298                     __ptext53:
  8592                           	opt stack 0
  8593  002298                     i2_SaveAll:
  8594                           	opt stack 21
  8595                           
  8596                           ;EEPROM.c: 163: EEWriteDouble(0x00, SetAngle);
  8597                           
  8598                           ;incstack = 0
  8599  002298  C03E  F005         	movff	_SetAngle,i2EEWriteDouble@dub
  8600  00229C  C03F  F006         	movff	_SetAngle+1,i2EEWriteDouble@dub+1
  8601  0022A0  C040  F007         	movff	_SetAngle+2,i2EEWriteDouble@dub+2
  8602  0022A4  0E00               	movlw	0
  8603  0022A6  EC1A  F014         	call	i2_EEWriteDouble
  8604                           
  8605                           ;EEPROM.c: 164: EEWriteDouble(0x03, Kp);
  8606  0022AA  C0B6  F005         	movff	_Kp,i2EEWriteDouble@dub
  8607  0022AE  C0B7  F006         	movff	_Kp+1,i2EEWriteDouble@dub+1
  8608  0022B2  C0B8  F007         	movff	_Kp+2,i2EEWriteDouble@dub+2
  8609  0022B6  0E03               	movlw	3
  8610  0022B8  EC1A  F014         	call	i2_EEWriteDouble
  8611                           
  8612                           ;EEPROM.c: 165: EEWriteDouble(0x06, Ki);
  8613  0022BC  C0B3  F005         	movff	_Ki,i2EEWriteDouble@dub
  8614  0022C0  C0B4  F006         	movff	_Ki+1,i2EEWriteDouble@dub+1
  8615  0022C4  C0B5  F007         	movff	_Ki+2,i2EEWriteDouble@dub+2
  8616  0022C8  0E06               	movlw	6
  8617  0022CA  EC1A  F014         	call	i2_EEWriteDouble
  8618                           
  8619                           ;EEPROM.c: 166: EEWriteDouble(0x09, Kd);
  8620  0022CE  C0B0  F005         	movff	_Kd,i2EEWriteDouble@dub
  8621  0022D2  C0B1  F006         	movff	_Kd+1,i2EEWriteDouble@dub+1
  8622  0022D6  C0B2  F007         	movff	_Kd+2,i2EEWriteDouble@dub+2
  8623  0022DA  0E09               	movlw	9
  8624  0022DC  EC1A  F014         	call	i2_EEWriteDouble
  8625                           
  8626                           ;EEPROM.c: 167: EEWriteChar(0x0C, PORTA);
  8627  0022E0  CF80 F005          	movff	3968,i2EEWriteChar@ch	;volatile
  8628  0022E4  0E0C               	movlw	12
  8629  0022E6  ECB7  F016         	call	i2_EEWriteChar
  8630                           
  8631                           ;EEPROM.c: 168: EEWriteChar(0x0D, PORTB);
  8632  0022EA  CF81 F005          	movff	3969,i2EEWriteChar@ch	;volatile
  8633  0022EE  0E0D               	movlw	13
  8634  0022F0  ECB7  F016         	call	i2_EEWriteChar
  8635                           
  8636                           ;EEPROM.c: 169: EEWriteChar(0x0E, PORTC);
  8637  0022F4  CF82 F005          	movff	3970,i2EEWriteChar@ch	;volatile
  8638  0022F8  0E0E               	movlw	14
  8639  0022FA  ECB7  F016         	call	i2_EEWriteChar
  8640                           
  8641                           ;EEPROM.c: 170: EEWriteChar(0x0F, PORTD);
  8642  0022FE  CF83 F005          	movff	3971,i2EEWriteChar@ch	;volatile
  8643  002302  0E0F               	movlw	15
  8644  002304  ECB7  F016         	call	i2_EEWriteChar
  8645                           
  8646                           ;EEPROM.c: 171: EEWriteChar(0x10, PORTE);
  8647  002308  CF84 F005          	movff	3972,i2EEWriteChar@ch	;volatile
  8648  00230C  0E10               	movlw	16
  8649  00230E  ECB7  F016         	call	i2_EEWriteChar
  8650                           
  8651                           ;EEPROM.c: 172: EEWriteChar(0x11, PORTF);
  8652  002312  CF85 F005          	movff	3973,i2EEWriteChar@ch	;volatile
  8653  002316  0E11               	movlw	17
  8654  002318  ECB7  F016         	call	i2_EEWriteChar
  8655                           
  8656                           ;EEPROM.c: 173: EEWriteChar(0x12, PORTG);
  8657  00231C  CF86 F005          	movff	3974,i2EEWriteChar@ch	;volatile
  8658  002320  0E12               	movlw	18
  8659  002322  ECB7  F016         	call	i2_EEWriteChar
  8660                           
  8661                           ;EEPROM.c: 174: EEWriteChar(0x13, PORTH);
  8662  002326  CF87 F005          	movff	3975,i2EEWriteChar@ch	;volatile
  8663  00232A  0E13               	movlw	19
  8664  00232C  ECB7  F016         	call	i2_EEWriteChar
  8665                           
  8666                           ;EEPROM.c: 175: EEWriteChar(0x14, PORTJ);
  8667  002330  CF88 F005          	movff	3976,i2EEWriteChar@ch	;volatile
  8668  002334  0E14               	movlw	20
  8669  002336  ECB7  F016         	call	i2_EEWriteChar
  8670                           
  8671                           ;EEPROM.c: 176: EEWriteChar(0x15, PIDEnableFlag);
  8672  00233A  C0C5  F005         	movff	_PIDEnableFlag,i2EEWriteChar@ch
  8673  00233E  0E15               	movlw	21
  8674  002340  ECB7  F016         	call	i2_EEWriteChar
  8675                           
  8676                           ;EEPROM.c: 177: EEWriteChar(0x16, 0x01);
  8677  002344  0E01               	movlw	1
  8678  002346  6E05               	movwf	i2EEWriteChar@ch,c
  8679  002348  0E16               	movlw	22
  8680  00234A  ECB7  F016         	call	i2_EEWriteChar
  8681  00234E  0012               	return		;funcret
  8682  002350                     __end_ofi2_SaveAll:
  8683                           	opt stack 0
  8684                           pclatu	equ	0xFFB
  8685                           pclath	equ	0xFFA
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           postinc0	equ	0xFEE
  8694                           fsr0h	equ	0xFEA
  8695                           fsr0l	equ	0xFE9
  8696                           wreg	equ	0xFE8
  8697                           indf1	equ	0xFE7
  8698                           postdec1	equ	0xFE5
  8699                           fsr1h	equ	0xFE2
  8700                           fsr1l	equ	0xFE1
  8701                           indf2	equ	0xFDF
  8702                           postinc2	equ	0xFDE
  8703                           postdec2	equ	0xFDD
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function i2_EEWriteDouble *****************
  8709 ;; Defined at:
  8710 ;;		line 82 in file "EEPROM.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;  location        1    wreg     unsigned char 
  8713 ;;  dub             3    4[COMRAM] unsigned char 
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  location        1    7[COMRAM] unsigned char 
  8716 ;;  EEWriteDoubl    1    8[COMRAM] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;		None               void
  8719 ;; Registers used:
  8720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8726 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;Total ram usage:        5 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    1
  8733 ;; This function calls:
  8734 ;;		i2_Busy_eep
  8735 ;;		i2_EEDisassembleDouble
  8736 ;;		i2_Write_b_eep
  8737 ;; This function is called by:
  8738 ;;		i2_SaveAll
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text54
  8743  002834                     __ptext54:
  8744                           	opt stack 0
  8745  002834                     i2_EEWriteDouble:
  8746                           	opt stack 21
  8747                           
  8748                           ;incstack = 0
  8749                           ;i2EEWriteDouble@location stored from wreg
  8750  002834  6E08               	movwf	i2EEWriteDouble@location,c
  8751                           
  8752                           ;EEPROM.c: 84: unsigned char x;
  8753                           ;EEPROM.c: 86: EEDisassembleDouble(dub);
  8754  002836  C005  F001         	movff	i2EEWriteDouble@dub,i2EEDisassembleDouble@dub
  8755  00283A  C006  F002         	movff	i2EEWriteDouble@dub+1,i2EEDisassembleDouble@dub+1
  8756  00283E  C007  F003         	movff	i2EEWriteDouble@dub+2,i2EEDisassembleDouble@dub+2
  8757  002842  EC85  F015         	call	i2_EEDisassembleDouble	;wreg free
  8758                           
  8759                           ;EEPROM.c: 88: INTCON = INTCON & 0x3F;
  8760  002846  50F2               	movf	intcon,w,c	;volatile
  8761  002848  0B3F               	andlw	63
  8762  00284A  6EF2               	movwf	intcon,c	;volatile
  8763                           
  8764                           ;EEPROM.c: 90: for (x = 0; x < 3; x++)
  8765  00284C  0E00               	movlw	0
  8766  00284E  6E09               	movwf	i2EEWriteDouble@x,c
  8767  002850                     i2l3343:
  8768  002850  0E02               	movlw	2
  8769  002852  6409               	cpfsgt	i2EEWriteDouble@x,c
  8770  002854  D001               	goto	i2l3347
  8771  002856  D014               	goto	i2l3357
  8772  002858                     i2l3347:
  8773                           
  8774                           ;EEPROM.c: 91: {
  8775                           ;EEPROM.c: 92: Write_b_eep(location, DDouble[x]);
  8776  002858  C008  F001         	movff	i2EEWriteDouble@location,i2Write_b_eep@badd
  8777  00285C  6A02               	clrf	i2Write_b_eep@badd+1,c
  8778  00285E  5009               	movf	i2EEWriteDouble@x,w,c
  8779  002860  0D01               	mullw	1
  8780  002862  0E3B               	movlw	low _DDouble
  8781  002864  24F3               	addwf	prodl,w,c
  8782  002866  6ED9               	movwf	fsr2l,c
  8783  002868  0E00               	movlw	high _DDouble
  8784  00286A  20F4               	addwfc	prodh,w,c
  8785  00286C  6EDA               	movwf	fsr2h,c
  8786  00286E  50DF               	movf	indf2,w,c
  8787  002870  6E03               	movwf	i2Write_b_eep@bdat,c
  8788  002872  EC0D  F015         	call	i2_Write_b_eep	;wreg free
  8789                           
  8790                           ;EEPROM.c: 93: location++;
  8791  002876  2A08               	incf	i2EEWriteDouble@location,f,c
  8792                           
  8793                           ;EEPROM.c: 94: Busy_eep();
  8794  002878  EC3E  F017         	call	i2_Busy_eep	;wreg free
  8795  00287C  2A09               	incf	i2EEWriteDouble@x,f,c
  8796  00287E  D7E8               	goto	i2l3343
  8797  002880                     i2l3357:
  8798                           
  8799                           ;EEPROM.c: 95: }
  8800                           ;EEPROM.c: 97: INTCON = INTCON | 0xC0;
  8801  002880  50F2               	movf	intcon,w,c	;volatile
  8802  002882  09C0               	iorlw	192
  8803  002884  6EF2               	movwf	intcon,c	;volatile
  8804  002886  0012               	return		;funcret
  8805  002888                     __end_ofi2_EEWriteDouble:
  8806                           	opt stack 0
  8807                           pclatu	equ	0xFFB
  8808                           pclath	equ	0xFFA
  8809                           tblptru	equ	0xFF8
  8810                           tblptrh	equ	0xFF7
  8811                           tblptrl	equ	0xFF6
  8812                           tablat	equ	0xFF5
  8813                           prodh	equ	0xFF4
  8814                           prodl	equ	0xFF3
  8815                           intcon	equ	0xFF2
  8816                           postinc0	equ	0xFEE
  8817                           fsr0h	equ	0xFEA
  8818                           fsr0l	equ	0xFE9
  8819                           wreg	equ	0xFE8
  8820                           indf1	equ	0xFE7
  8821                           postdec1	equ	0xFE5
  8822                           fsr1h	equ	0xFE2
  8823                           fsr1l	equ	0xFE1
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           fsr2h	equ	0xFDA
  8828                           fsr2l	equ	0xFD9
  8829                           status	equ	0xFD8
  8830                           
  8831 ;; *************** function i2_EEDisassembleDouble *****************
  8832 ;; Defined at:
  8833 ;;		line 53 in file "EEPROM.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  dub             3    0[COMRAM] unsigned char 
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;		None
  8838 ;; Return value:  Size  Location     Type
  8839 ;;		None               void
  8840 ;; Registers used:
  8841 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8847 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;Total ram usage:        3 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		i2_EEWriteDouble
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text55
  8861  002B0A                     __ptext55:
  8862                           	opt stack 0
  8863  002B0A                     i2_EEDisassembleDouble:
  8864                           	opt stack 21
  8865                           
  8866                           ;EEPROM.c: 55: DoublePtr = (unsigned char*) &dub;
  8867                           
  8868                           ;incstack = 0
  8869  002B0A  0E01               	movlw	low i2EEDisassembleDouble@dub
  8870  002B0C  6E41               	movwf	_DoublePtr,c
  8871  002B0E  0E00               	movlw	high i2EEDisassembleDouble@dub
  8872  002B10  6E42               	movwf	_DoublePtr+1,c
  8873                           
  8874                           ;EEPROM.c: 56: DDouble[0] = DoublePtr[0];
  8875  002B12  C041  FFD9         	movff	_DoublePtr,fsr2l
  8876  002B16  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  8877  002B1A  50DF               	movf	indf2,w,c
  8878  002B1C  6E3B               	movwf	_DDouble,c
  8879                           
  8880                           ;EEPROM.c: 57: DDouble[1] = DoublePtr[1];
  8881  002B1E  EE20 F001          	lfsr	2,1
  8882  002B22  5041               	movf	_DoublePtr,w,c
  8883  002B24  26D9               	addwf	fsr2l,f,c
  8884  002B26  5042               	movf	_DoublePtr+1,w,c
  8885  002B28  22DA               	addwfc	fsr2h,f,c
  8886  002B2A  50DF               	movf	indf2,w,c
  8887  002B2C  6E3C               	movwf	_DDouble+1,c
  8888                           
  8889                           ;EEPROM.c: 58: DDouble[2] = DoublePtr[2];
  8890  002B2E  EE20 F002          	lfsr	2,2
  8891  002B32  5041               	movf	_DoublePtr,w,c
  8892  002B34  26D9               	addwf	fsr2l,f,c
  8893  002B36  5042               	movf	_DoublePtr+1,w,c
  8894  002B38  22DA               	addwfc	fsr2h,f,c
  8895  002B3A  50DF               	movf	indf2,w,c
  8896  002B3C  6E3D               	movwf	_DDouble+2,c
  8897  002B3E  0012               	return		;funcret
  8898  002B40                     __end_ofi2_EEDisassembleDouble:
  8899                           	opt stack 0
  8900                           pclatu	equ	0xFFB
  8901                           pclath	equ	0xFFA
  8902                           tblptru	equ	0xFF8
  8903                           tblptrh	equ	0xFF7
  8904                           tblptrl	equ	0xFF6
  8905                           tablat	equ	0xFF5
  8906                           prodh	equ	0xFF4
  8907                           prodl	equ	0xFF3
  8908                           intcon	equ	0xFF2
  8909                           postinc0	equ	0xFEE
  8910                           fsr0h	equ	0xFEA
  8911                           fsr0l	equ	0xFE9
  8912                           wreg	equ	0xFE8
  8913                           indf1	equ	0xFE7
  8914                           postdec1	equ	0xFE5
  8915                           fsr1h	equ	0xFE2
  8916                           fsr1l	equ	0xFE1
  8917                           indf2	equ	0xFDF
  8918                           postinc2	equ	0xFDE
  8919                           postdec2	equ	0xFDD
  8920                           fsr2h	equ	0xFDA
  8921                           fsr2l	equ	0xFD9
  8922                           status	equ	0xFD8
  8923                           
  8924 ;; *************** function i2_EEWriteChar *****************
  8925 ;; Defined at:
  8926 ;;		line 127 in file "EEPROM.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;  location        1    wreg     unsigned char 
  8929 ;;  ch              1    4[COMRAM] unsigned char 
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;  location        1    5[COMRAM] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;		None               void
  8934 ;; Registers used:
  8935 ;;		wreg, status,2, status,0, cstack
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8941 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;Total ram usage:        2 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    1
  8948 ;; This function calls:
  8949 ;;		i2_Busy_eep
  8950 ;;		i2_Write_b_eep
  8951 ;; This function is called by:
  8952 ;;		i2_SaveAll
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text56
  8957  002D6E                     __ptext56:
  8958                           	opt stack 0
  8959  002D6E                     i2_EEWriteChar:
  8960                           	opt stack 21
  8961                           
  8962                           ;incstack = 0
  8963                           ;i2EEWriteChar@location stored from wreg
  8964  002D6E  6E06               	movwf	i2EEWriteChar@location,c
  8965                           
  8966                           ;EEPROM.c: 129: INTCON = INTCON & 0x3F;
  8967  002D70  50F2               	movf	intcon,w,c	;volatile
  8968  002D72  0B3F               	andlw	63
  8969  002D74  6EF2               	movwf	intcon,c	;volatile
  8970                           
  8971                           ;EEPROM.c: 131: Write_b_eep(location, ch);
  8972  002D76  C006  F001         	movff	i2EEWriteChar@location,i2Write_b_eep@badd
  8973  002D7A  6A02               	clrf	i2Write_b_eep@badd+1,c
  8974  002D7C  C005  F003         	movff	i2EEWriteChar@ch,i2Write_b_eep@bdat
  8975  002D80  EC0D  F015         	call	i2_Write_b_eep	;wreg free
  8976                           
  8977                           ;EEPROM.c: 132: Busy_eep();
  8978  002D84  EC3E  F017         	call	i2_Busy_eep	;wreg free
  8979                           
  8980                           ;EEPROM.c: 134: INTCON = INTCON | 0xC0;
  8981  002D88  50F2               	movf	intcon,w,c	;volatile
  8982  002D8A  09C0               	iorlw	192
  8983  002D8C  6EF2               	movwf	intcon,c	;volatile
  8984  002D8E  0012               	return		;funcret
  8985  002D90                     __end_ofi2_EEWriteChar:
  8986                           	opt stack 0
  8987                           pclatu	equ	0xFFB
  8988                           pclath	equ	0xFFA
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           postinc0	equ	0xFEE
  8997                           fsr0h	equ	0xFEA
  8998                           fsr0l	equ	0xFE9
  8999                           wreg	equ	0xFE8
  9000                           indf1	equ	0xFE7
  9001                           postdec1	equ	0xFE5
  9002                           fsr1h	equ	0xFE2
  9003                           fsr1l	equ	0xFE1
  9004                           indf2	equ	0xFDF
  9005                           postinc2	equ	0xFDE
  9006                           postdec2	equ	0xFDD
  9007                           fsr2h	equ	0xFDA
  9008                           fsr2l	equ	0xFD9
  9009                           status	equ	0xFD8
  9010                           
  9011 ;; *************** function i2_Write_b_eep *****************
  9012 ;; Defined at:
  9013 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;  badd            2    0[COMRAM] unsigned int 
  9016 ;;  bdat            1    2[COMRAM] unsigned char 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  Write_b_eep     1    3[COMRAM] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, status,2, status,0
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9028 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;Total ram usage:        4 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; This function calls:
  9035 ;;		Nothing
  9036 ;; This function is called by:
  9037 ;;		i2_EEWriteDouble
  9038 ;;		i2_EEWriteChar
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text57
  9043  002A1A                     __ptext57:
  9044                           	opt stack 0
  9045  002A1A                     i2_Write_b_eep:
  9046                           	opt stack 21
  9047                           
  9048                           ;incstack = 0
  9049  002A1A  0E00               	movlw	0
  9050  002A1C  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  9051  002A1E  5002               	movf	i2Write_b_eep@badd+1,w,c
  9052  002A20  0B03               	andlw	3
  9053  002A22  6EAA               	movwf	4010,c	;volatile
  9054  002A24  C001  FFA9         	movff	i2Write_b_eep@badd,4009	;volatile
  9055  002A28  C003  FFA8         	movff	i2Write_b_eep@bdat,4008	;volatile
  9056  002A2C  9EA6               	bcf	4006,7,c	;volatile
  9057  002A2E  9CA6               	bcf	4006,6,c	;volatile
  9058  002A30  84A6               	bsf	4006,2,c	;volatile
  9059  002A32  0E00               	movlw	0
  9060  002A34  BEF2               	btfsc	intcon,7,c	;volatile
  9061  002A36  0E01               	movlw	1
  9062  002A38  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  9063  002A3A  9EF2               	bcf	intcon,7,c	;volatile
  9064  002A3C  0E55               	movlw	85
  9065  002A3E  6EA7               	movwf	4007,c	;volatile
  9066  002A40  0EAA               	movlw	170
  9067  002A42  6EA7               	movwf	4007,c	;volatile
  9068  002A44  82A6               	bsf	4006,1,c	;volatile
  9069  002A46  D000               	goto	i2l653
  9070  002A48                     i2l653:
  9071  002A48  B2A6               	btfsc	4006,1,c	;volatile
  9072  002A4A  D7FE               	goto	i2l653
  9073  002A4C  B004               	btfsc	i2Write_b_eep@GIE_BIT_VAL,0,c
  9074  002A4E  D002               	bra	i2u228_45
  9075  002A50  9EF2               	bcf	intcon,7,c	;volatile
  9076  002A52  D001               	bra	i2u228_46
  9077  002A54                     i2u228_45:
  9078  002A54  8EF2               	bsf	intcon,7,c	;volatile
  9079  002A56                     i2u228_46:
  9080  002A56  94A6               	bcf	4006,2,c	;volatile
  9081  002A58  0012               	return		;funcret
  9082  002A5A                     __end_ofi2_Write_b_eep:
  9083                           	opt stack 0
  9084                           pclatu	equ	0xFFB
  9085                           pclath	equ	0xFFA
  9086                           tblptru	equ	0xFF8
  9087                           tblptrh	equ	0xFF7
  9088                           tblptrl	equ	0xFF6
  9089                           tablat	equ	0xFF5
  9090                           prodh	equ	0xFF4
  9091                           prodl	equ	0xFF3
  9092                           intcon	equ	0xFF2
  9093                           postinc0	equ	0xFEE
  9094                           fsr0h	equ	0xFEA
  9095                           fsr0l	equ	0xFE9
  9096                           wreg	equ	0xFE8
  9097                           indf1	equ	0xFE7
  9098                           postdec1	equ	0xFE5
  9099                           fsr1h	equ	0xFE2
  9100                           fsr1l	equ	0xFE1
  9101                           indf2	equ	0xFDF
  9102                           postinc2	equ	0xFDE
  9103                           postdec2	equ	0xFDD
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function i2_Busy_eep *****************
  9109 ;; Defined at:
  9110 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;		None
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;		None
  9115 ;; Return value:  Size  Location     Type
  9116 ;;		None               void
  9117 ;; Registers used:
  9118 ;;		None
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;Total ram usage:        0 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; This function calls:
  9131 ;;		Nothing
  9132 ;; This function is called by:
  9133 ;;		i2_EEWriteDouble
  9134 ;;		i2_EEWriteChar
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text58
  9139  002E7C                     __ptext58:
  9140                           	opt stack 0
  9141  002E7C                     i2_Busy_eep:
  9142                           	opt stack 21
  9143                           
  9144                           ;incstack = 0
  9145  002E7C  D000               	goto	i2l622
  9146  002E7E                     i2l622:
  9147  002E7E  B2A6               	btfsc	4006,1,c	;volatile
  9148  002E80  D7FE               	goto	i2l622
  9149  002E82  0012               	return		;funcret
  9150  002E84                     __end_ofi2_Busy_eep:
  9151                           	opt stack 0
  9152                           pclatu	equ	0xFFB
  9153                           pclath	equ	0xFFA
  9154                           tblptru	equ	0xFF8
  9155                           tblptrh	equ	0xFF7
  9156                           tblptrl	equ	0xFF6
  9157                           tablat	equ	0xFF5
  9158                           prodh	equ	0xFF4
  9159                           prodl	equ	0xFF3
  9160                           intcon	equ	0xFF2
  9161                           postinc0	equ	0xFEE
  9162                           fsr0h	equ	0xFEA
  9163                           fsr0l	equ	0xFE9
  9164                           wreg	equ	0xFE8
  9165                           indf1	equ	0xFE7
  9166                           postdec1	equ	0xFE5
  9167                           fsr1h	equ	0xFE2
  9168                           fsr1l	equ	0xFE1
  9169                           indf2	equ	0xFDF
  9170                           postinc2	equ	0xFDE
  9171                           postdec2	equ	0xFDD
  9172                           fsr2h	equ	0xFDA
  9173                           fsr2l	equ	0xFD9
  9174                           status	equ	0xFD8
  9175                           
  9176 ;; *************** function _TMR0Int *****************
  9177 ;; Defined at:
  9178 ;;		line 63 in file "PID.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;		None
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;		None
  9183 ;; Return value:  Size  Location     Type
  9184 ;;		None               void
  9185 ;; Registers used:
  9186 ;;		wreg, status,2
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;Total ram usage:        0 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; This function calls:
  9199 ;;		Nothing
  9200 ;; This function is called by:
  9201 ;;		_ISR
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           	psect	text59
  9206  002E38                     __ptext59:
  9207                           	opt stack 0
  9208  002E38                     _TMR0Int:
  9209                           	opt stack 23
  9210                           
  9211                           ;PID.c: 65: TMR0H = 0xDB;
  9212                           
  9213                           ;incstack = 0
  9214  002E38  0EDB               	movlw	219
  9215  002E3A  6ED7               	movwf	4055,c	;volatile
  9216                           
  9217                           ;PID.c: 66: TMR0L = 0x60;
  9218  002E3C  0E60               	movlw	96
  9219  002E3E  6ED6               	movwf	4054,c	;volatile
  9220                           
  9221                           ;PID.c: 67: TMR0Flag = 1;
  9222  002E40  0E01               	movlw	1
  9223  002E42  0100               	movlb	0	; () banked
  9224  002E44  6FC8               	movwf	_TMR0Flag& (0+255),b
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;PID.c: 68: INTCONbits.TMR0IF = 0;
  9228  002E46  94F2               	bcf	intcon,2,c	;volatile
  9229                           
  9230                           ; BSR set to: 0
  9231  002E48  0012               	return		;funcret
  9232  002E4A                     __end_of_TMR0Int:
  9233                           	opt stack 0
  9234                           pclatu	equ	0xFFB
  9235                           pclath	equ	0xFFA
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           postinc0	equ	0xFEE
  9244                           fsr0h	equ	0xFEA
  9245                           fsr0l	equ	0xFE9
  9246                           wreg	equ	0xFE8
  9247                           indf1	equ	0xFE7
  9248                           postdec1	equ	0xFE5
  9249                           fsr1h	equ	0xFE2
  9250                           fsr1l	equ	0xFE1
  9251                           indf2	equ	0xFDF
  9252                           postinc2	equ	0xFDE
  9253                           postdec2	equ	0xFDD
  9254                           fsr2h	equ	0xFDA
  9255                           fsr2l	equ	0xFD9
  9256                           status	equ	0xFD8
  9257                           
  9258 ;; *************** function _SPIInt *****************
  9259 ;; Defined at:
  9260 ;;		line 34 in file "SPISlave.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;		None               void
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;Total ram usage:        0 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; This function calls:
  9281 ;;		Nothing
  9282 ;; This function is called by:
  9283 ;;		_ISR
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text60
  9288  002C98                     __ptext60:
  9289                           	opt stack 0
  9290  002C98                     _SPIInt:
  9291                           	opt stack 23
  9292                           
  9293                           ;SPISlave.c: 36: PORTCbits.RC6 = 1;
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;incstack = 0
  9297  002C98  8C82               	bsf	3970,6,c	;volatile
  9298                           
  9299                           ;SPISlave.c: 37: INTCONbits.GIE = 0;
  9300  002C9A  9EF2               	bcf	intcon,7,c	;volatile
  9301                           
  9302                           ;SPISlave.c: 38: Command = SSP1BUF;
  9303  002C9C  CFC9 F043          	movff	4041,_Command	;volatile
  9304                           
  9305                           ;SPISlave.c: 39: PIR1bits.SSP1IF = 0;
  9306  002CA0  969E               	bcf	3998,3,c	;volatile
  9307                           
  9308                           ;SPISlave.c: 40: PIE1bits.SSP1IE = 0;
  9309  002CA2  969D               	bcf	3997,3,c	;volatile
  9310                           
  9311                           ;SPISlave.c: 41: if (Command == 0x0A)
  9312  002CA4  0E0A               	movlw	10
  9313  002CA6  1843               	xorwf	_Command,w,c
  9314  002CA8  A4D8               	btfss	status,2,c
  9315  002CAA  D004               	goto	i2l3447
  9316                           
  9317                           ;SPISlave.c: 42: RECFlag = 1;
  9318  002CAC  0E01               	movlw	1
  9319  002CAE  0100               	movlb	0	; () banked
  9320  002CB0  6FC6               	movwf	_RECFlag& (0+255),b
  9321  002CB2  D004               	goto	i2l266
  9322  002CB4                     i2l3447:
  9323                           
  9324                           ;SPISlave.c: 43: else
  9325                           ;SPISlave.c: 44: SPIflag = 1;
  9326  002CB4  0E01               	movlw	1
  9327  002CB6  0100               	movlb	0	; () banked
  9328  002CB8  6FC7               	movwf	_SPIflag& (0+255),b
  9329  002CBA  D000               	goto	i2l266
  9330  002CBC                     i2l266:
  9331                           
  9332                           ; BSR set to: 0
  9333  002CBC  0012               	return		;funcret
  9334  002CBE                     __end_of_SPIInt:
  9335                           	opt stack 0
  9336                           pclatu	equ	0xFFB
  9337                           pclath	equ	0xFFA
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           postinc0	equ	0xFEE
  9346                           fsr0h	equ	0xFEA
  9347                           fsr0l	equ	0xFE9
  9348                           wreg	equ	0xFE8
  9349                           indf1	equ	0xFE7
  9350                           postdec1	equ	0xFE5
  9351                           fsr1h	equ	0xFE2
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _INT0Int *****************
  9361 ;; Defined at:
  9362 ;;		line 277 in file "RTDuC.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;		None
  9367 ;; Return value:  Size  Location     Type
  9368 ;;		None               void
  9369 ;; Registers used:
  9370 ;;		wreg, status,2, status,0, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;Total ram usage:        0 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    1
  9383 ;; This function calls:
  9384 ;;		_KillMotors
  9385 ;; This function is called by:
  9386 ;;		_ISR
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text61
  9391  002D06                     __ptext61:
  9392                           	opt stack 0
  9393  002D06                     _INT0Int:
  9394                           	opt stack 22
  9395                           
  9396                           ;RTDuC.c: 279: KillMotors();
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;incstack = 0
  9400  002D06  EC31  F017         	call	_KillMotors	;wreg free
  9401                           
  9402                           ;RTDuC.c: 280: PORTAbits.RA3 = 0;
  9403  002D0A  9680               	bcf	3968,3,c	;volatile
  9404                           
  9405                           ;RTDuC.c: 281: T0CONbits.TMR0ON = 1;
  9406  002D0C  8ED5               	bsf	4053,7,c	;volatile
  9407                           
  9408                           ;RTDuC.c: 282: INTCONbits.GIE = 0;
  9409  002D0E  9EF2               	bcf	intcon,7,c	;volatile
  9410                           
  9411                           ;RTDuC.c: 283: PORTAbits.RA4 = 1;
  9412  002D10  8880               	bsf	3968,4,c	;volatile
  9413  002D12  D000               	goto	i2l2271
  9414  002D14                     i2l2271:
  9415                           
  9416                           ;RTDuC.c: 285: {
  9417                           ;RTDuC.c: 286: TMR0H = 0x00;
  9418  002D14  0E00               	movlw	0
  9419  002D16  6ED7               	movwf	4055,c	;volatile
  9420                           
  9421                           ;RTDuC.c: 287: TMR0L = 0x00;
  9422  002D18  0E00               	movlw	0
  9423  002D1A  6ED6               	movwf	4054,c	;volatile
  9424                           
  9425                           ;RTDuC.c: 288: while (!INTCONbits.TMR0IF);
  9426  002D1C  D000               	goto	i2l596
  9427  002D1E                     i2l596:
  9428  002D1E  A4F2               	btfss	intcon,2,c	;volatile
  9429  002D20  D7FE               	goto	i2l596
  9430                           
  9431                           ;RTDuC.c: 289: INTCONbits.TMR0IF = 0;
  9432  002D22  94F2               	bcf	intcon,2,c	;volatile
  9433                           
  9434                           ;RTDuC.c: 290: ~PORTAbits.RA4;
  9435  002D24  5080               	movf	3968,w,c	;volatile
  9436  002D26  D7F6               	goto	i2l2271
  9437  002D28  0012               	return		;funcret
  9438  002D2A                     __end_of_INT0Int:
  9439                           	opt stack 0
  9440                           pclatu	equ	0xFFB
  9441                           pclath	equ	0xFFA
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           postinc0	equ	0xFEE
  9450                           fsr0h	equ	0xFEA
  9451                           fsr0l	equ	0xFE9
  9452                           wreg	equ	0xFE8
  9453                           indf1	equ	0xFE7
  9454                           postdec1	equ	0xFE5
  9455                           fsr1h	equ	0xFE2
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _KillMotors *****************
  9465 ;; Defined at:
  9466 ;;		line 31 in file "MotorControl.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;		None               void
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;Total ram usage:        0 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_INT0Int
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text62
  9494  002E62                     __ptext62:
  9495                           	opt stack 0
  9496  002E62                     _KillMotors:
  9497                           	opt stack 22
  9498                           
  9499                           ;MotorControl.c: 33: PORTAbits.RA4 = 1;
  9500                           
  9501                           ;incstack = 0
  9502  002E62  8880               	bsf	3968,4,c	;volatile
  9503                           
  9504                           ;MotorControl.c: 34: CCP3CON = CCP3CON & 0xF0;
  9505  002E64  50B7               	movf	4023,w,c	;volatile
  9506  002E66  0BF0               	andlw	240
  9507  002E68  6EB7               	movwf	4023,c	;volatile
  9508  002E6A  0012               	return		;funcret
  9509  002E6C                     __end_of_KillMotors:
  9510                           	opt stack 0
  9511                           pclatu	equ	0xFFB
  9512                           pclath	equ	0xFFA
  9513                           tblptru	equ	0xFF8
  9514                           tblptrh	equ	0xFF7
  9515                           tblptrl	equ	0xFF6
  9516                           tablat	equ	0xFF5
  9517                           prodh	equ	0xFF4
  9518                           prodl	equ	0xFF3
  9519                           intcon	equ	0xFF2
  9520                           postinc0	equ	0xFEE
  9521                           fsr0h	equ	0xFEA
  9522                           fsr0l	equ	0xFE9
  9523                           wreg	equ	0xFE8
  9524                           indf1	equ	0xFE7
  9525                           postdec1	equ	0xFE5
  9526                           fsr1h	equ	0xFE2
  9527                           fsr1l	equ	0xFE1
  9528                           indf2	equ	0xFDF
  9529                           postinc2	equ	0xFDE
  9530                           postdec2	equ	0xFDD
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           pclatu	equ	0xFFB
  9535                           pclath	equ	0xFFA
  9536                           tblptru	equ	0xFF8
  9537                           tblptrh	equ	0xFF7
  9538                           tblptrl	equ	0xFF6
  9539                           tablat	equ	0xFF5
  9540                           prodh	equ	0xFF4
  9541                           prodl	equ	0xFF3
  9542                           intcon	equ	0xFF2
  9543                           postinc0	equ	0xFEE
  9544                           fsr0h	equ	0xFEA
  9545                           fsr0l	equ	0xFE9
  9546                           wreg	equ	0xFE8
  9547                           indf1	equ	0xFE7
  9548                           postdec1	equ	0xFE5
  9549                           fsr1h	equ	0xFE2
  9550                           fsr1l	equ	0xFE1
  9551                           indf2	equ	0xFDF
  9552                           postinc2	equ	0xFDE
  9553                           postdec2	equ	0xFDD
  9554                           fsr2h	equ	0xFDA
  9555                           fsr2l	equ	0xFD9
  9556                           status	equ	0xFD8
  9557                           
  9558                           	psect	rparam
  9559  0000                     pclatu	equ	0xFFB
  9560                           pclath	equ	0xFFA
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           postinc0	equ	0xFEE
  9569                           fsr0h	equ	0xFEA
  9570                           fsr0l	equ	0xFE9
  9571                           wreg	equ	0xFE8
  9572                           indf1	equ	0xFE7
  9573                           postdec1	equ	0xFE5
  9574                           fsr1h	equ	0xFE2
  9575                           fsr1l	equ	0xFE1
  9576                           indf2	equ	0xFDF
  9577                           postinc2	equ	0xFDE
  9578                           postdec2	equ	0xFDD
  9579                           fsr2h	equ	0xFDA
  9580                           fsr2l	equ	0xFD9
  9581                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        7
    BSS         3664
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      72
    BANK0           160     74     109
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    SPIDisassembleLode@Transmit	PTR unsigned char  size(2) Largest target is 1809
		 -> TransmitLode(BIGRAM[1809]), 

    SPIDisassembleLode@Data	PTR  size(2) Largest target is 1809
		 -> DataLode(BIGRAM[1809]), 

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleLode@dub(COMRAM[3]), SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _ZeroMotors->_abs
    _calculatePID->___ftdiv
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftdiv->___ftadd
    _ReadRTDpos->_Delay10TCYx
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SendSPI1->_SPIRestart
    _SaveAll->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep
    _SPIDisassembleLode->___wmul
    ___wmul->___lwdiv
    _SPIDisassembleDouble->_GenerateChecksum
    _ReceiveSPI1->_SPIRestart
    _SPIRestart->_OpenSPI1
    _ImplementJSMotion->_abs

Critical Paths under _ISR in COMRAM

    i2_SaveAll->i2_EEWriteDouble
    i2_EEWriteDouble->i2_Write_b_eep
    i2_EEWriteChar->i2_Write_b_eep

Critical Paths under _main in BANK0

    _main->_ZeroMotors
    _initialize->_ZeroMotors
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftmul
    _RTD2Angle->___ftmul
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  110252
                                             57 BANK0     17    17      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                 _SPIDisassembleLode
                _SPIReassembleDouble
                         _SPIRestart
                            _SaveAll
                           _SendSPI1
                         _ZeroMotors
                             ___wmul
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   38506
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                         _RecTmrInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           6     6      0   37527
                                             51 BANK0      6     6      0
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   19702
                                             36 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     525
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5399
                                             43 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5035
                                             31 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3306
                                             43 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6901
                                             21 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                              6 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     858
                                             38 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     344
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (2) _RecTmrInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     569
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             0     0      0     569
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     352
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0     368
                                             27 COMRAM     2     2      0
                         _SPIRestart
 ---------------------------------------------------------------------------------
 (1) _SaveAll                                              0     0      0    1919
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (2) _EEWriteDouble                                        5     2      3     825
                                             27 COMRAM     5     2      3
                           _Busy_eep
                _EEDisassembleDouble
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _EEDisassembleDouble                                  3     0      3     110
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEWriteChar                                          2     1      1    1094
                                             27 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     346
                                             23 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleLode                                  11     7      4    1103
                                             36 COMRAM    11     7      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     415
                                             30 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     458
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0     345
                         _SPIRestart
 ---------------------------------------------------------------------------------
 (2) _SPIRestart                                           1     1      0     345
                                             26 COMRAM     1     1      0
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     344
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     720
                                             38 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     324
                                             52 COMRAM     2     2      0
                                             36 BANK0      2     0      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     983
                                              9 COMRAM    14    14      0
                            _INT0Int
                             _SPIInt
                            _TMR0Int
                          i2_SaveAll
 ---------------------------------------------------------------------------------
 (8) i2_SaveAll                                            0     0      0     983
                      i2_EEWriteChar
                    i2_EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteDouble                                      5     2      3     459
                                              4 COMRAM     5     2      3
                         i2_Busy_eep
              i2_EEDisassembleDouble
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_EEDisassembleDouble                               3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteChar                                        2     1      1     524
                                              4 COMRAM     2     1      1
                         i2_Busy_eep
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_Write_b_eep                                       4     1      3     194
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
     _SPIRestart
       _OpenSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIDisassembleLode
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _SPIReassembleDouble
   _SPIRestart
     _OpenSPI1
   _SaveAll
     _EEWriteChar
       _Busy_eep
       _Write_b_eep
     _EEWriteDouble
       _Busy_eep
       _EEDisassembleDouble
       _Write_b_eep
   _SendSPI1
     _SPIRestart
       _OpenSPI1
   _ZeroMotors
     _ImplementPIDMotion
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _RTD2Angle
       _ReadRTDpos (ARG)
         _Delay10TCYx
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _ReadRTDpos
       _Delay10TCYx
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___fttol
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _calculatePID
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   ___wmul
     ___lwdiv (ARG)
   _calculatePID
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _RecTmrInit
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int
   i2_SaveAll
     i2_EEWriteChar
       i2_Busy_eep
       i2_Write_b_eep
     i2_EEWriteDouble
       i2_Busy_eep
       i2_EEDisassembleDouble
       i2_Write_b_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     E22      37       91.9%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4A      6D       5       68.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      48       1       75.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B5      32        0.0%
DATA                 0      0     ED7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Nov  9 02:57:16 2015

                    _SPIRestart 2DE8        __size_of_MotorDriverInit 0024                              l31 2BB0  
                            l40 2D6C                              l43 2612                              l37 2D56  
                            l49 267A                              _Kd 00B0                              _Ki 00B3  
                            _Kp 00B6             ___wmul@multiplicand 0021             ?_EEReassembleDouble 0018  
                  ___ftadd@exp1 002B                    ___ftadd@exp2 002A       ImplementJSMotion@CCPinput 008A  
                  ___ftadd@sign 0029                             l109 1E06                             l149 1694  
                           l270 2BE6                             l280 2C96                             l187 268A  
                           l611 1A8C                             l188 2694                             l277 2C80  
                           l373 2952                             l197 2A96                             l189 26D6  
                           l294 29D8                             l622 2E76                             l383 2788  
                           l367 260C                             l543 11F2                             l288 2118  
                           l544 11EA                             l298 2996                             l546 1138  
                           l732 2C1A                             l548 116C                             l733 2C22  
                           l653 2A08                             l389 2DAE                             l581 2B42  
                           l638 2DE6                             l575 155C                             l559 134C  
                           l680 27C0                             l672 279E                             l568 1470  
                           l681 27C4                             l921 2E24                             l674 27A2  
                           l914 2E36                             l675 27A4                             l685 2C4A  
                           l678 27BE                             l926 2E4C                             l679 27D8  
                           l928 2E54                             _PR2 000FCB                             _ISR 0008  
                           _abs 2BFA            __size_of_Write_b_eep 0040                             prod 000FF3  
                           wreg 000FE8         ??i2_EEDisassembleDouble 0004                            ?_ISR 0001  
               __end_of_INT0Int 2D2A                    ___ftdiv@cntr 0060                      _Delay1TCYx 2E4A  
                  ___ftdiv@sign 0065                    __CFG_WDT$OFF 000000                            l1105 1CD2  
                          l1018 21DE                            l1122 28CA                            l1115 2CD4  
                          ?_abs 0084                            l1029 21B6                            l1062 1898  
                          l1126 1F38                            l1073 195A                            l1090 2038  
                          l1082 1976                            l1058 186E                            l1059 19EC  
                          l1228 272A                            l3021 2E16                            l1093 2002  
                          l1255 2C70                            l1099 252C                            l4101 1C90  
                          l3037 268E                            l4021 1F5C                            l3223 29B8  
                          l4023 1F7A                            l4007 19C6                            l3073 27A8  
                          l3321 26EE                            l4105 1CAC                            l4113 28A0  
                          l3219 29AC                            l3235 29D4                            l3323 26F8  
                          l4027 1F88                            l4123 1E32                            l3077 27C8  
                          l3229 29D0                            l3333 271E                            l3325 2700  
                          l4141 1EB6                            l4205 1728                            l3255 27FC  
                          l3167 2BBE                            l4047 1FD8                            l4151 1EE8  
                          l4311 1028                            l4073 1BDC                            l4057 2012  
                          l4153 1EFA                            l4145 1ECA                            l4241 1B40  
                          l4225 1A46                            l4401 11C6                            l3259 2804  
                          l4171 2368                            l4091 1C4C                            l4067 1BA2  
                          l4147 1ED2                            l4155 1F08                            l4331 107A  
                          l4411 1202                            l4253 1D12                            l3269 282C  
                          l4069 1BC8                            l4405 11E0                            l4271 1DA6  
                          l4255 1D1A                            l3463 2BF0                            l4183 23AA  
                          l4175 2388                            l4095 1C68                            l4087 1C2C  
                          l2911 24FC                            l4159 1F26                            l4351 10EA  
                          l4343 10C8                            l4335 1094                            l4327 1060  
                          l4249 1CF4                            l4097 1C70                            l4193 15C8  
                          l4521 142A                            l4361 1112                            l4267 1D6E  
                          l3475 2C8A                            l4179 2392                            l2907 24CA  
                          l4355 10F4                            l4339 10AE                            l4347 10E2  
                          l3397 2670                            l3389 2660                            l2765 2E28  
                          l2917 2528                            l4533 14AE                            l4445 12A6  
                          l4429 123A                            l4365 111A                            l2783 2740  
                          l4199 164A                            l4543 1516                            l4519 13E4  
                          l4375 1140                            l3921 217E                            l3913 213A  
                          l4529 149E                            l4465 1310                            l4393 1192  
                          l3499 2064                            l2795 2770                            l2787 2748  
                          l3931 21BE                            l3923 219E                            l3915 2146  
                          l4547 153C                            l4379 114E                            l3925 21AA  
                          l3917 2166                            l3909 212A                            l4397 11AC  
                          l3937 21D0                            l3961 18B2                            l3971 18DA  
                          l3955 18A6                            l3981 1916                            l3949 187C  
                          l3991 194E                            l3983 191E                            l3977 18FE  
                          l3979 190A                            l3997 1994                            l3989 1942  
                          u2255 2A14                            u2256 2A16                            u3401 1F6C  
                          u3161 183A                            u3171 184E                            u3501 1E1E  
                          u4127 2E18                            u3431 1B8E                            u3520 1E58  
                          u4137 2E2A                     main@counter 00A7                            u3610 23A6  
                          u3451 1BB8                            u3381 1F4A                            u3525 1E4E  
               __end_of_PIDInit 2910                            _TMR4 000F78  ImplementJSMotion@JoystickValue 0086  
          ??_EEReassembleDouble 001B                    EEReadChar@ch 001B                 __end_of_TMR0Int 2E4A  
                          abs@a 0084                            _main 1006                    ___ftpack@arg 0018  
                   _DeadbandLow 0047                    ___ftpack@exp 001B                 __end_of_RTDInit 2BA2  
               __end_of_SPIInit 2DCE                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            indf1 000FE7  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          pclat 000FFA                  ??_EEReadDouble 0021          __size_ofi2_Write_b_eep 0040  
                          prodh 000FF4                            prodl 000FF3                            start 0018  
           __size_of_EEPROMInit 0014                    ?_EEWriteChar 001C                    ___ftmul@cntr 0073  
                  ___param_bank 000010                    ___ftmul@sign 0074   __size_of_InitializeInterrupts 000C  
                         ??_ISR 000A                     _Delay10TCYx 2E26                __end_of_EEBootUp 260E  
                  ___fttol@exp1 0083                           ??_abs 0035                 __end_of_SaveAll 2298  
                  ___fttol@lval 007F                     _Delay1KTCYx 2E14                 i2EEWriteChar@ch 0005  
                   ReadRTDpos@x 0022               RTD2Angle@RTDAngle 0075                           ?_main 0001  
                         _EEADR 000FA9                 __end_of___ftadd 19EE                 __end_of___ftdiv 203A  
               __end_of___ftneg 2CE2                 __end_of___ftmul 1CD4                           _T0CON 000FD5  
               __end_of___ftsub 28CC                 __end_of___fttol 1F3A                           _T2CON 000FCA  
                         _T3CON 000FB1                 __end_of___lwdiv 2734                           i2l266 2CBC  
                         i2l622 2E7E                           i2l653 2A48                           i2l592 245E  
                         i2l596 2D1E              __size_of_RTD2Angle 003E                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _PORTE 000F84                           _PORTF 000F85  
                         _PORTG 000F86                           _PORTH 000F87                           _PORTJ 000F88  
        ??_SPIDisassembleDouble 001D                           _TRISD 000F95                           _TRISH 000F99  
                __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018             __size_of_EEReadChar 0020  
        __size_of_EEWriteDouble 0054             ZeroMotors@PrevAngle 0096          Write_b_eep@GIE_BIT_VAL 001B  
                  _DeadbandHigh 0045                           _error 00B9                   ___ftpack@sign 001C  
                    _DoubleSPIS 0037                           main@x 00A9                   ??_ReceiveSPI1 001C  
                         tablat 000FF5              __size_ofi2_SaveAll 00B8                     ?i2_Busy_eep 0001  
                         status 000FD8                   EEReadDouble@x 0022      __size_of_ImplementJSMotion 0134  
         EEWriteDouble@location 001F             GenerateChecksum@sum 0018                      _ReadRTDpos 267C  
                    _KillMotors 2E62                 __initialization 252E                     ?_SPIRestart 0001  
                  __end_of_main 1580                      _RecTmrInit 2E6C                  _DetectJoystick 2D4C  
                _DetectMovement 260E                      _Read_b_eep 2DCE                __end_of_Busy_eep 2E7C  
         EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000                __end_of_SendSPI1 2BFA  
              __end_of_OpenSPI1 27E0                    _DataLodeSize 1001                          ??_main 0037  
                 ___fttol@sign1 007E                   __activetblptr 000003               ??_MotorDriverInit 0018  
       DetectMovement@ADCresult 001D                   i2_Write_b_eep 2A1A                       ??_INT0Int 0001  
                     ??_PIDInit 0018                       ??_TMR0Int 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                       ??_RTDInit 0019  
                        _EEDATA 000FA8                     ?_Delay1TCYx 0001                       ??_SPIInit 001B  
                        _CCPR3L 000FB8                          _EECON2 000FA7                __end_of___ftpack 21E0  
         __size_of_calculatePID 02AA                          i2l2271 2D14                          i2l3343 2850  
                        i2l3347 2858                          i2l3357 2880                          i2l3447 2CB4  
                        i2l3901 2456                          _INTCON 000FF2                          i2l3891 243C  
                        i2l3895 2446                          i2l3887 2432                __end_of___lwtoft 2C72  
              i2EEWriteDouble@x 0009                          _SPIInt 2C98             SPIDisassembleLode@y 002B  
             __end_of_RTD2Angle 2A98           i2EEWriteChar@location 0006             __end_of_ReceiveSPI1 2C98  
                     ??_SaveAll 0021      SPIDisassembleLode@Transmit 0027          __end_of_DetectJoystick 2D6E  
        __end_of_DetectMovement 267C                OpenSPI1@bus_mode 0018                   _EEWriteDouble 27E0  
                        ___ftge 2498                          ___wmul 2C24                       ??___ftadd 0026  
                     ??___ftdiv 0032                       ??___ftneg 001B                       ??___ftmul 006C  
                     ??___ftsub 0032                       ??___fttol 0079                       ??___lwdiv 001C  
                        _intErr 00BC                          clear_0 2536                          clear_1 2548  
                        clear_2 2554               __end_ofi2_SaveAll 2350                          _timer4 0044  
                ?i2_Write_b_eep 0001             __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0070  
                  ??_EEPROMInit 0023     __size_of_ImplementPIDMotion 00A8        __size_ofi2_EEWriteDouble 0054  
            _SPIDisassembleLode 203A                    __pdataCOMRAM 0045                    _calculatePID 1580  
          __end_of_EEReadDouble 278A               _calculatePID$3490 0090               _calculatePID$3489 008D  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8             __size_of_SPIRestart 0018             ?_SPIDisassembleLode 0025  
             ?_GenerateChecksum 0001                       ?_EEBootUp 0001                      __accesstop 0060  
       __end_of__initialization 2598              ??_GenerateChecksum 0018                      ___ftadd@f1 0020  
                    ___ftadd@f2 0023                      ___ftge@ff1 0018                      ___ftge@ff2 001B  
                    _ZeroMotors 19EE                   ___rparam_used 000001                      ___ftdiv@f1 002C  
                    ___ftdiv@f2 002F                      ___ftdiv@f3 0061              EEReadChar@location 001A  
                    ___ftneg@f1 0018                     ?_ReadRTDpos 0019                     ?_KillMotors 0001  
                  ??_EEReadChar 001A                  ?_EEWriteDouble 001C                      ___ftmul@f1 0066  
                    ___ftmul@f2 0069                 ?_DetectJoystick 0001                 ?_DetectMovement 0018  
            __end_of_EEPROMInit 2E14                      ___ftsub@f1 002C                      ___ftsub@f2 002F  
                    ___fttol@f1 0075                  __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 2B0A  
                  __pidataBANK0 2E88                     ?_RecTmrInit 0001            ??_SPIDisassembleLode 0029  
          __size_of_EEWriteChar 0022                     ?_Read_b_eep 0018             __size_of_Delay1TCYx 000C  
             GenerateChecksum@y 0019                      ___lwtoft@c 0020    __size_of_SPIReassembleDouble 0044  
        __size_ofi2_EEWriteChar 0022              __end_of_EEReadChar 2DB0  __size_ofi2_EEDisassembleDouble 0036  
 __end_ofi2_EEDisassembleDouble 2B40                      __pbssBANK0 00AA                     _ReceiveSPI1 2C72  
                    ??_EEBootUp 0023                       ?_Busy_eep 0001         i2EEWriteDouble@location 0008  
                 ?_JoystickInit 0001                         ?_SPIInt 0001                       ?_SendSPI1 0001  
                     ?_OpenSPI1 0018                         ?___ftge 0018                    ?_Delay10TCYx 0001  
                       ?___wmul 001F                  EEWriteDouble@x 0020                         _CCP3CON 000FB7  
                  ?_Delay1KTCYx 0001                 ??i2_Write_b_eep 0004        i2EEDisassembleDouble@dub 0001  
                     ?___ftpack 0018                   ??_Write_b_eep 001B                       ?___lwtoft 0020  
                       _HLVDCON 000FD2                         _INT0Int 2D06                         _RECFlag 00C6  
  __end_of_InitializeInterrupts 2E62                         _PIDInit 28CC                         _DDouble 003B  
           __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A                   _PIDEnableFlag 00C5  
                       _SSP1BUF 000FC9                         _TMR0Int 2E38      ImplementPIDMotion@PIDValue 0086  
                       _RTDInit 2B72                         _SPIInit 2DB0               ??i2_EEWriteDouble 0008  
           __size_of_RecTmrInit 0008                         _SPIflag 00C7                EEWriteDouble@dub 001C  
           __size_of_Read_b_eep 001A                _TransmitLodeSize 1003                  ??_JoystickInit 0018  
                  ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044                      ??_Busy_eep 0018  
                       _Command 0043                     ?_ZeroMotors 0001                 __size_of_SPIInt 0026  
                    ??_SendSPI1 001C                 ??_EEWriteDouble 001F                      ??_OpenSPI1 001A  
           EEWriteChar@location 001D                         _SaveAll 21E0                         __Hparam 0000  
                       __Lparam 0000                 _MotorDriverInit 2CE2                    ??_SPIRestart 001B  
                 i2_EEWriteChar 2D6E                 __size_of___ftge 0096                         ___ftadd 182A  
                       ___ftdiv 1F3A                         ___ftneg 2CBE                 __size_of___wmul 0028  
                       ___ftmul 1B78                         ___ftsub 2888                         ___fttol 1E08  
                       ___lwdiv 26D8                    __psmallconst 1000                      _dummy_byte 00C9  
         __size_of_EEReadDouble 0056                    SendSPI1@data 001D                         __pcinit 252E  
                    ??___ftpack 001D                 Delay10TCYx@unit 0018                         __ramtop 1000  
                    _initialize 2B40                    SendSPI1@temp 001C                         __ptext0 1006  
                       __ptext1 2B40                         __ptext2 19EE                         __ptext3 1580  
                       __ptext4 1E08                         __ptext5 2888                         __ptext6 182A  
                       __ptext7 2CBE                         __ptext8 2498                         __ptext9 1F3A  
                    ??___lwtoft 0023                       _T0CONbits 000FD5                    __size_of_ISR 2490  
                  __size_of_abs 002A              __end_ofi2_Busy_eep 2E84                       _T3CONbits 000FB1  
                     _T4CONbits 000F76               i2Write_b_eep@badd 0001               i2Write_b_eep@bdat 0003  
                       _prevErr 00BF   __size_of_SPIDisassembleDouble 003C             __end_of_Write_b_eep 2A1A  
                  ??_Delay1TCYx 0018                  __pintcode_body 23F8            end_of_initialization 2598  
            __end_of_SPIRestart 2E00                         int_func 23F8               OpenSPI1@smp_phase 0019  
                  _EEReadDouble 2734                  ?i2_EEWriteChar 0005           ReadRTDpos@LowPosition 001F  
                       postdec1 000FE5                         postdec2 000FDD                      _motorInput 00C2  
                     _RTD2Angle 2A5A                         postinc0 000FEE                         postinc2 000FDE  
             OpenSPI1@sync_mode 001A              __end_of_Delay1TCYx 2E56                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _PORTCbits 000F82                       _PORTEbits 000F84  
                     _PORTJbits 000F88        i2Write_b_eep@GIE_BIT_VAL 0004             __size_of_ZeroMotors 018A  
                     i2_SaveAll 2298          SPIDisassembleLode@Data 0025                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISEbits 000F96  
                     _TRISFbits 000F97                       _TRISGbits 000F98                       _TRISJbits 000F9A  
       __end_of_MotorDriverInit 2D06                ??_DetectJoystick 0018                ??_DetectMovement 001A  
                   ___ftdiv@exp 0064               __size_of_EEBootUp 0070             _SPIReassembleDouble 2954  
                   _CCP3CONbits 000FB7                      main@saveSP 00A3                      main@saveKd 00A0  
                    main@saveKi 009D                      main@saveKp 009A                  __end_of_SPIInt 2CBE  
                  ??_ReadRTDpos 001B                    ??_KillMotors 0001                     ___ftmul@exp 006F  
          _InitializeInterrupts 2E56                    ??_RecTmrInit 0018                      ?_RTD2Angle 0075  
     __size_of_GenerateChecksum 0042                    ??_Read_b_eep 001A                  __end_of___ftge 252E  
                __end_of___wmul 2C4C            __size_of_Delay10TCYx 0012                   __pidataCOMRAM 2E84  
    __end_of_ImplementPIDMotion 23F8                     ?_initialize 0001                     _Write_b_eep 29DA  
          __end_of_JoystickInit 2BD0            __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 0018  
                     _DoublePtr 0041                      ?i2_SaveAll 0001             start_initialization 252E  
               _CurrentVelocity 00AD                    _CurrentAngle 00AA                     __end_of_ISR 2498  
                   __end_of_abs 2C24              __end_of_ReadRTDpos 26D8              __end_of_KillMotors 2E6C  
                  ?_ReceiveSPI1 0001              __end_of_RecTmrInit 2E74              __end_of_Read_b_eep 2DE8  
          EEReadDouble@location 0021                        ??_SPIInt 0001                 ??i2_EEWriteChar 0006  
             __size_of_Busy_eep 0008            calculatePID@setpoint 0087                   ??_EEWriteChar 001D  
        ReadRTDpos@HighPosition 001E               __size_of_SendSPI1 002A               __size_of_OpenSPI1 0056  
         ?_InitializeInterrupts 0001                        ??___ftge 001E                        ??___wmul 0023  
   __size_of_SPIDisassembleLode 00E0                     __pdataBANK0 00CA        __end_of_TransmitLodeSize 1005  
         ??_SPIReassembleDouble 001B                 i2_EEWriteDouble 2834    __size_of_EEDisassembleDouble 0036  
             __size_of___ftpack 00C6                     __pbssBIGRAM 00CD                        ?_INT0Int 0001  
                   __pbssCOMRAM 0037               __size_of___lwtoft 0026                   __pcstackBANK0 0060  
                      ?_PIDInit 0001                        ?_TMR0Int 0001              calculatePID@derErr 008A  
                SPIRestart@temp 001B                        ?_RTDInit 0001                        ?_SPIInit 0001  
               Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001           i2_EEDisassembleDouble 2B0A  
                  ??_ZeroMotors 0037             __size_of_initialize 0032          SPIReassembleDouble@dub 001B  
                 EEWriteChar@ch 001C                        ?_SaveAll 0001                ___lwdiv@dividend 0018  
                     __pintcode 0008                     ??_RTD2Angle 0035                        ?___ftadd 0020  
                      ?___ftdiv 002C                        ?___ftneg 0018                        ?___ftmul 0066  
                      ?___ftsub 002C                        ?___fttol 0075                        ?___lwdiv 0018  
           __end_of_EEWriteChar 2D4C           __end_ofi2_Write_b_eep 2A5A                     __smallconst 1000  
                   ??i2_SaveAll 000A              __end_of_ZeroMotors 1B78                ___lwdiv@quotient 001C  
    __end_of_EEReassembleDouble 2954                        _EEBootUp 259E                  ___wmul@product 0023  
                      _IPR2bits 000FA2                        _PIE1bits 000F9D                        _PIE2bits 000FA0  
            i2EEWriteDouble@dub 0005          ??_InitializeInterrupts 0018           __end_of_EEWriteDouble 2834  
  __end_of_SPIDisassembleDouble 2AD4                        i2u228_45 2A54                        i2u228_46 2A56  
                      _PIR1bits 000F9E                        _PIR2bits 000FA1                        _PIR3bits 000FA4  
       __end_ofi2_EEWriteDouble 2888           __size_of_JoystickInit 002E                        _SSP1CON1 000FC6  
                      _TMR0Flag 00C8                _GenerateChecksum 2998                        _SSP1STAT 000FC7  
         SPIDisassembleLode@dub 002D                      _ADCON0bits 000FC2               ___wmul@multiplier 001F  
               Write_b_eep@badd 0018                 Write_b_eep@bdat 001A                   ?_calculatePID 0084  
                      _DataLode 00CD                       main@dtime 00A6                       main@trash 0099  
              __size_of_INT0Int 0024                __size_of_PIDInit 0044                __size_of_TMR0Int 0012  
                     copy_data0 258C                __size_of_RTDInit 0030                __size_of_SPIInit 001E  
        ?i2_EEDisassembleDouble 0001                        _Busy_eep 2E74            __size_of_ReceiveSPI1 0026  
                  _JoystickInit 2BA2                        _SendSPI1 2BD0                      _EECON1bits 000FA6  
                      _SetAngle 003E                        _OpenSPI1 278A          ReadRTDpos@FullPosition 0020  
                      __Hrparam 0000               ZeroMotors@average 0093                     _EEWriteChar 2D2A  
                      __Lrparam 0000                __size_of_SaveAll 00B8                    _JSEnableFlag 00C4  
              __size_of___ftadd 01C4                __size_of___ftdiv 0100                __size_of___ftneg 0024  
              __size_of___ftmul 015C                __size_of___ftsub 0044                __size_of___fttol 0132  
              __size_of___lwdiv 005C                    ??_initialize 0037                        ___ftpack 211A  
                  ?_Write_b_eep 0018               calculatePID@angle 0084                  ??_calculatePID 0035  
                      ___lwtoft 2C4C                      _EEPROMInit 2E00                 ___lwdiv@divisor 001A  
               ___lwdiv@counter 001E                        __ptext10 267C                        __ptext11 2A5A  
                      __ptext20 2E14                        __ptext12 2C4C                        __ptext21 2E26  
                      __ptext13 1B78                        __ptext30 2D90                        __ptext22 28CC  
                      __ptext14 211A                        __ptext31 2DCE                        __ptext23 2CE2  
                      __ptext15 2350                        __ptext40 203A                        __ptext32 2BD0  
                      __ptext24 2BA2                        __ptext16 2DB0                        __ptext41 2C24  
                      __ptext33 21E0                        __ptext25 2E56                        __ptext17 2E6C  
                      __ptext50 260E                        __ptext42 26D8                        __ptext34 27E0  
                      __ptext26 2E00                        __ptext18 2B72                        __ptext51 2D4C  
                      __ptext43 2A98                        __ptext35 2AD4                        __ptext27 259E  
                      __ptext19 2E4A                        __ptext60 2C98                        __ptext44 2998  
                      __ptext36 2D2A                        __ptext28 2734                        __ptext61 2D06  
                      __ptext53 2298                        __ptext45 2C72                        __ptext37 29DA  
                      __ptext29 2910                        __ptext62 2E62                        __ptext54 2834  
                      __ptext46 2DE8                        __ptext38 2E74                        __ptext55 2B0A  
                      __ptext47 278A                        __ptext39 2954                        __ptext56 2D6E  
                      __ptext48 1CD4                        __ptext57 2A1A                        __ptext49 2BFA  
                      __ptext58 2E7C                        __ptext59 2E38                    _SSP1CON1bits 000FC6  
            _ImplementPIDMotion 2350                   __size_of_main 057A             _EEDisassembleDouble 2AD4  
                Delay1TCYx@unit 0018             ?_ImplementPIDMotion 0086              __end_of_initialize 2B72  
                      _loopTime 00CA                      _EEReadChar 2D90                   ??_Delay10TCYx 0018  
              ?i2_EEWriteDouble 0005                   ??_Delay1KTCYx 0018                    _SSP1STATbits 000FC7  
          ?_EEDisassembleDouble 0018            ??_ImplementPIDMotion 0088                      _INTCONbits 000FF2  
          _SPIDisassembleDouble 2A98                        intlevel2 0000            __end_of_DataLodeSize 1003  
                    _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B               _ImplementJSMotion 1CD4  
    __end_of_SPIDisassembleLode 211A           __end_ofi2_EEWriteChar 2D90     __end_of_SPIReassembleDouble 2998  
            ?_ImplementJSMotion 0086         __size_of_DetectJoystick 0022         __size_of_DetectMovement 006E  
         ??_EEDisassembleDouble 001B             __end_of_Delay10TCYx 2E38             ??_ImplementJSMotion 0088  
        EEDisassembleDouble@dub 0018                     ?_EEPROMInit 0001                    _TransmitLode 07DE  
           __end_of_Delay1KTCYx 2E26           ?_SPIDisassembleDouble 001A        __end_of_GenerateChecksum 29DA  
                    i2_Busy_eep 2E7C         SPIDisassembleDouble@dub 001A       __end_of_ImplementJSMotion 1E08  
          __end_of_calculatePID 182A                   ?_EEReadDouble 001E                     ?_EEReadChar 0001  
            _EEReassembleDouble 2910  
