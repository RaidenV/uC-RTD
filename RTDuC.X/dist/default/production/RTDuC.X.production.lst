

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 27 01:33:00 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  001959                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _DeadbandHigh
    75  001959  05                 	db	5
    76                           
    77                           ;initializer for _DeadbandLow
    78  00195A  FB                 	db	251
    79                           
    80                           	psect	idataBANK0
    81  001956                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _loopTime
    85                           ;PID.c: 5: unsigned char PIDEnableFlag;
    86                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    87                           ;PID.c: 7: double Ki;
    88                           ;PID.c: 8: double Kp;
    89                           ;PID.c: 9: double Kd;
    90                           ;PID.c: 10: double SetAngle;
    91                           ;PID.c: 11: double CurrentAngle;
    92                           ;PID.c: 12: double error;
    93                           ;PID.c: 13: double prevErr;
    94                           ;PID.c: 14: double intErr;
    95                           ;PID.c: 15: int motorInput;
    96  001956  C3                 	db	195
    97  001957  F5                 	db	245
    98  001958  3C                 	db	60
    99  0000                     _ADCON0	set	4034
   100  0000                     _ADCON0bits	set	4034
   101  0000                     _ADCON1	set	4033
   102  0000                     _ADCON2	set	4032
   103  0000                     _ADRESH	set	4036
   104  0000                     _ADRESL	set	4035
   105  0000                     _CCP3CON	set	4023
   106  0000                     _CCP3CONbits	set	4023
   107  0000                     _CCPR3L	set	4024
   108  0000                     _EEADR	set	4009
   109  0000                     _EEADRH	set	4010
   110  0000                     _EECON1bits	set	4006
   111  0000                     _EECON2	set	4007
   112  0000                     _EEDATA	set	4008
   113  0000                     _HLVDCON	set	4050
   114  0000                     _INTCON	set	4082
   115  0000                     _INTCON2bits	set	4081
   116  0000                     _INTCONbits	set	4082
   117  0000                     _IPR1bits	set	3999
   118  0000                     _IPR2bits	set	4002
   119  0000                     _OSCCONbits	set	4051
   120  0000                     _PIE1bits	set	3997
   121  0000                     _PIE2bits	set	4000
   122  0000                     _PIR1bits	set	3998
   123  0000                     _PIR2bits	set	4001
   124  0000                     _PORTA	set	3968
   125  0000                     _PORTAbits	set	3968
   126  0000                     _PORTB	set	3969
   127  0000                     _PORTBbits	set	3969
   128  0000                     _PORTC	set	3970
   129  0000                     _PORTCbits	set	3970
   130  0000                     _PORTD	set	3971
   131  0000                     _PORTE	set	3972
   132  0000                     _PORTEbits	set	3972
   133  0000                     _PORTF	set	3973
   134  0000                     _PORTG	set	3974
   135  0000                     _PORTH	set	3975
   136  0000                     _PORTJ	set	3976
   137  0000                     _PORTJbits	set	3976
   138  0000                     _PR2	set	4043
   139  0000                     _RCONbits	set	4048
   140  0000                     _SSP1BUF	set	4041
   141  0000                     _SSP1CON1	set	4038
   142  0000                     _SSP1CON1bits	set	4038
   143  0000                     _SSP1STAT	set	4039
   144  0000                     _SSP1STATbits	set	4039
   145  0000                     _SSP2BUF	set	3942
   146  0000                     _SSP2CON1bits	set	3939
   147  0000                     _T0CON	set	4053
   148  0000                     _T0CONbits	set	4053
   149  0000                     _T2CON	set	4042
   150  0000                     _T3CON	set	4017
   151  0000                     _TMR0H	set	4055
   152  0000                     _TMR0L	set	4054
   153  0000                     _TRISAbits	set	3986
   154  0000                     _TRISBbits	set	3987
   155  0000                     _TRISCbits	set	3988
   156  0000                     _TRISD	set	3989
   157  0000                     _TRISDbits	set	3989
   158  0000                     _TRISEbits	set	3990
   159  0000                     _TRISFbits	set	3991
   160  0000                     _TRISGbits	set	3992
   161  0000                     _TRISH	set	3993
   162  0000                     _TRISJbits	set	3994
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  001436                     __pcinit:
   168                           	opt stack 0
   169  001436                     start_initialization:
   170                           	opt stack 0
   171  001436                     __initialization:
   172                           	opt stack 0
   173                           
   174                           ; Clear objects allocated to BANK0 (39 bytes)
   175  001436  EE00  F0AF         	lfsr	0,__pbssBANK0
   176  00143A  0E27               	movlw	39
   177  00143C                     clear_0:
   178  00143C  6AEE               	clrf	postinc0,c
   179  00143E  06E8               	decf	wreg,f,c
   180  001440  E1FD               	bnz	clear_0
   181                           
   182                           ; Clear objects allocated to COMRAM (5 bytes)
   183  001442  6A33               	clrf	(__pbssCOMRAM+4)& (0+255),c
   184  001444  6A32               	clrf	(__pbssCOMRAM+3)& (0+255),c
   185  001446  6A31               	clrf	(__pbssCOMRAM+2)& (0+255),c
   186  001448  6A30               	clrf	(__pbssCOMRAM+1)& (0+255),c
   187  00144A  6A2F               	clrf	__pbssCOMRAM& (0+255),c
   188                           
   189                           ; Initialize objects allocated to BANK0 (3 bytes)
   190                           ; load TBLPTR registers with __pidataBANK0
   191  00144C  0E56               	movlw	low __pidataBANK0
   192  00144E  6EF6               	movwf	tblptrl,c
   193  001450  0E19               	movlw	high __pidataBANK0
   194  001452  6EF7               	movwf	tblptrh,c
   195  001454  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   196  001456  6EF8               	movwf	tblptru,c
   197  001458  0009               	tblrd		*+	;fetch initializer
   198  00145A  CFF5 F0D6          	movff	tablat,__pdataBANK0
   199  00145E  0009               	tblrd		*+	;fetch initializer
   200  001460  CFF5 F0D7          	movff	tablat,__pdataBANK0+1
   201  001464  0009               	tblrd		*+	;fetch initializer
   202  001466  CFF5 F0D8          	movff	tablat,__pdataBANK0+2
   203                           
   204                           ; Initialize objects allocated to COMRAM (2 bytes)
   205                           ; load TBLPTR registers with __pidataCOMRAM
   206  00146A  0E59               	movlw	low __pidataCOMRAM
   207  00146C  6EF6               	movwf	tblptrl,c
   208  00146E  0E19               	movlw	high __pidataCOMRAM
   209  001470  6EF7               	movwf	tblptrh,c
   210  001472  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   211  001474  6EF8               	movwf	tblptru,c
   212  001476  0009               	tblrd		*+	;fetch initializer
   213  001478  CFF5 F034          	movff	tablat,__pdataCOMRAM
   214  00147C  0009               	tblrd		*+	;fetch initializer
   215  00147E  CFF5 F035          	movff	tablat,__pdataCOMRAM+1
   216  001482                     end_of_initialization:
   217                           	opt stack 0
   218  001482                     __end_of__initialization:
   219                           	opt stack 0
   220  001482  0100               	movlb	0
   221  001484  EFBF  F001         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	bssCOMRAM
   230  00002F                     __pbssCOMRAM:
   231                           	opt stack 0
   232  00002F                     _DDouble:
   233                           	opt stack 0
   234  00002F                     	ds	3
   235  000032                     _DoublePtr:
   236                           	opt stack 0
   237  000032                     	ds	2
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           wreg	equ	0xFE8
   244                           
   245                           	psect	dataCOMRAM
   246  000034                     __pdataCOMRAM:
   247                           	opt stack 0
   248  000034                     _DeadbandHigh:
   249                           	opt stack 0
   250  000034                     	ds	1
   251  000035                     _DeadbandLow:
   252                           	opt stack 0
   253  000035                     	ds	1
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssBANK0
   262  0000AF                     __pbssBANK0:
   263                           	opt stack 0
   264  0000AF                     _DoubleSPIS:
   265                           	opt stack 0
   266  0000AF                     	ds	4
   267  0000B3                     _CurrentAngle:
   268                           	opt stack 0
   269  0000B3                     	ds	3
   270  0000B6                     _CurrentVelocity:
   271                           	opt stack 0
   272  0000B6                     	ds	3
   273  0000B9                     _Kd:
   274                           	opt stack 0
   275  0000B9                     	ds	3
   276  0000BC                     _Ki:
   277                           	opt stack 0
   278  0000BC                     	ds	3
   279  0000BF                     _Kp:
   280                           	opt stack 0
   281  0000BF                     	ds	3
   282  0000C2                     _SetAngle:
   283                           	opt stack 0
   284  0000C2                     	ds	3
   285  0000C5                     _error:
   286                           	opt stack 0
   287  0000C5                     	ds	3
   288  0000C8                     _intErr:
   289                           	opt stack 0
   290  0000C8                     	ds	3
   291  0000CB                     _prevErr:
   292                           	opt stack 0
   293  0000CB                     	ds	3
   294  0000CE                     _motorInput:
   295                           	opt stack 0
   296  0000CE                     	ds	2
   297  0000D0                     _Command:
   298                           	opt stack 0
   299  0000D0                     	ds	1
   300  0000D1                     _JSEnableFlag:
   301                           	opt stack 0
   302  0000D1                     	ds	1
   303  0000D2                     _PIDEnableFlag:
   304                           	opt stack 0
   305  0000D2                     	ds	1
   306  0000D3                     _SPIflag:
   307                           	opt stack 0
   308  0000D3                     	ds	1
   309  0000D4                     _TMR0Flag:
   310                           	opt stack 0
   311  0000D4                     	ds	1
   312  0000D5                     _dummy_byte:
   313                           	opt stack 0
   314  0000D5                     	ds	1
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           	psect	dataBANK0
   323  0000D6                     __pdataBANK0:
   324                           	opt stack 0
   325  0000D6                     _loopTime:
   326                           	opt stack 0
   327  0000D6                     	ds	3
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	cstackBANK0
   336  000060                     __pcstackBANK0:
   337                           	opt stack 0
   338  000060                     ??_DetectMovement:
   339  000060                     ??_ReadRTDpos:
   340  000060                     ?___ftpack:
   341                           	opt stack 0
   342  000060                     ImplementPIDMotion@PIDValue:
   343                           	opt stack 0
   344  000060                     SPIDisassembleDouble@dub:
   345                           	opt stack 0
   346  000060                     SPIReassembleDouble@dub:
   347                           	opt stack 0
   348  000060                     EEReassembleDouble@dub:
   349                           	opt stack 0
   350  000060                     ___ftpack@arg:
   351                           	opt stack 0
   352  000060                     ___ftge@ff1:
   353                           	opt stack 0
   354                           
   355                           ; 3 bytes @ 0x0
   356  000060                     	ds	2
   357  000062                     ??_ImplementPIDMotion:
   358                           
   359                           ; 0 bytes @ 0x2
   360  000062                     	ds	1
   361  000063                     ?_EEReadDouble:
   362                           	opt stack 0
   363  000063                     ReadRTDpos@HighPosition:
   364                           	opt stack 0
   365  000063                     ___ftpack@exp:
   366                           	opt stack 0
   367  000063                     DetectMovement@JoystickResult:
   368                           	opt stack 0
   369  000063                     ___ftge@ff2:
   370                           	opt stack 0
   371                           
   372                           ; 3 bytes @ 0x3
   373  000063                     	ds	1
   374  000064                     ReadRTDpos@LowPosition:
   375                           	opt stack 0
   376  000064                     ___ftpack@sign:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x4
   380  000064                     	ds	1
   381  000065                     ?___ftdiv:
   382                           	opt stack 0
   383  000065                     ?___lwtoft:
   384                           	opt stack 0
   385  000065                     DetectMovement@ADCresult:
   386                           	opt stack 0
   387  000065                     ReadRTDpos@FullPosition:
   388                           	opt stack 0
   389  000065                     ___lwtoft@c:
   390                           	opt stack 0
   391  000065                     ___ftdiv@f1:
   392                           	opt stack 0
   393                           
   394                           ; 3 bytes @ 0x5
   395  000065                     	ds	1
   396  000066                     EEReadDouble@location:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x6
   400  000066                     	ds	1
   401  000067                     ReadRTDpos@x:
   402                           	opt stack 0
   403  000067                     EEReadDouble@x:
   404                           	opt stack 0
   405  000067                     ImplementJSMotion@JoystickValue:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x7
   409  000067                     	ds	1
   410  000068                     ??_EEBootUp:
   411  000068                     ___ftdiv@f2:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0x8
   415  000068                     	ds	1
   416  000069                     ??_ImplementJSMotion:
   417                           
   418                           ; 0 bytes @ 0x9
   419  000069                     	ds	2
   420  00006B                     ??___ftdiv:
   421                           
   422                           ; 0 bytes @ 0xB
   423  00006B                     	ds	1
   424  00006C                     ImplementJSMotion@CCPinput:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0xC
   428  00006C                     	ds	2
   429  00006E                     ___ftdiv@cntr:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0xE
   433  00006E                     	ds	1
   434  00006F                     ___ftdiv@f3:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0xF
   438  00006F                     	ds	3
   439  000072                     ___ftdiv@exp:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x12
   443  000072                     	ds	1
   444  000073                     ___ftdiv@sign:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x13
   448  000073                     	ds	1
   449  000074                     ?___ftmul:
   450                           	opt stack 0
   451  000074                     ___ftmul@f1:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0x14
   455  000074                     	ds	3
   456  000077                     ___ftmul@f2:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0x17
   460  000077                     	ds	3
   461  00007A                     ??___ftmul:
   462                           
   463                           ; 0 bytes @ 0x1A
   464  00007A                     	ds	3
   465  00007D                     ___ftmul@exp:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x1D
   469  00007D                     	ds	1
   470  00007E                     ___ftmul@f3_as_product:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x1E
   474  00007E                     	ds	3
   475  000081                     ___ftmul@cntr:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x21
   479  000081                     	ds	1
   480  000082                     ___ftmul@sign:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x22
   484  000082                     	ds	1
   485  000083                     ?___ftadd:
   486                           	opt stack 0
   487  000083                     ?_RTD2Angle:
   488                           	opt stack 0
   489  000083                     RTD2Angle@RTDAngle:
   490                           	opt stack 0
   491  000083                     ___ftadd@f1:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x23
   495  000083                     	ds	3
   496  000086                     ___ftadd@f2:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x26
   500  000086                     	ds	3
   501  000089                     ??___ftadd:
   502                           
   503                           ; 0 bytes @ 0x29
   504  000089                     	ds	3
   505  00008C                     ___ftadd@sign:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x2C
   509  00008C                     	ds	1
   510  00008D                     ___ftadd@exp2:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x2D
   514  00008D                     	ds	1
   515  00008E                     ___ftadd@exp1:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x2E
   519  00008E                     	ds	1
   520  00008F                     ?___ftsub:
   521                           	opt stack 0
   522  00008F                     ?___fttol:
   523                           	opt stack 0
   524  00008F                     ___ftsub@f1:
   525                           	opt stack 0
   526  00008F                     ___fttol@f1:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x2F
   530  00008F                     	ds	3
   531  000092                     ___ftsub@f2:
   532                           	opt stack 0
   533                           
   534                           ; 3 bytes @ 0x32
   535  000092                     	ds	1
   536  000093                     ??___fttol:
   537                           
   538                           ; 0 bytes @ 0x33
   539  000093                     	ds	5
   540  000098                     ___fttol@sign1:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x38
   544  000098                     	ds	1
   545  000099                     ___fttol@lval:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x39
   549  000099                     	ds	4
   550  00009D                     ___fttol@exp1:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x3D
   554  00009D                     	ds	1
   555  00009E                     calculatePID@angle:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x3E
   559  00009E                     	ds	3
   560  0000A1                     calculatePID@setpoint:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x41
   564  0000A1                     	ds	3
   565  0000A4                     calculatePID@derErr:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x44
   569  0000A4                     	ds	3
   570  0000A7                     _calculatePID$3509:
   571                           	opt stack 0
   572                           
   573                           ; 3 bytes @ 0x47
   574  0000A7                     	ds	3
   575  0000AA                     _calculatePID$3510:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0x4A
   579  0000AA                     	ds	3
   580  0000AD                     main@temporary:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x4D
   584  0000AD                     	ds	1
   585  0000AE                     main@x:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x4E
   589  0000AE                     	ds	1
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           
   597                           	psect	cstackCOMRAM
   598  000001                     __pcstackCOMRAM:
   599                           	opt stack 0
   600  000001                     ??_lISR:
   601  000001                     
   602                           ; 1 bytes @ 0x0
   603  000001                     	ds	17
   604  000012                     Write_b_eep@badd:
   605                           	opt stack 0
   606  000012                     EEDisassembleDouble@dub:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x11
   610  000012                     	ds	2
   611  000014                     Write_b_eep@bdat:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x13
   615  000014                     	ds	1
   616  000015                     Write_b_eep@GIE_BIT_VAL:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x14
   620  000015                     	ds	1
   621  000016                     EEWriteChar@ch:
   622                           	opt stack 0
   623  000016                     EEWriteDouble@dub:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x15
   627  000016                     	ds	1
   628  000017                     EEWriteChar@location:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x16
   632  000017                     	ds	2
   633  000019                     EEWriteDouble@location:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x18
   637  000019                     	ds	1
   638  00001A                     EEWriteDouble@x:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x19
   642  00001A                     	ds	1
   643  00001B                     ??_hISR:
   644                           
   645                           ; 0 bytes @ 0x1A
   646  00001B                     	ds	16
   647  00002B                     ??___ftpack:
   648  00002B                     ??___ftge:
   649  00002B                     ?_abs:
   650                           	opt stack 0
   651  00002B                     ?_DetectMovement:
   652                           	opt stack 0
   653  00002B                     ?_SPIReassembleDouble:
   654                           	opt stack 0
   655  00002B                     ?_EEReassembleDouble:
   656                           	opt stack 0
   657  00002B                     ?___ftneg:
   658                           	opt stack 0
   659  00002B                     SendSPI1@temp:
   660                           	opt stack 0
   661  00002B                     GenerateChecksum@sum:
   662                           	opt stack 0
   663  00002B                     OpenSPI1@bus_mode:
   664                           	opt stack 0
   665  00002B                     Delay10TCYx@unit:
   666                           	opt stack 0
   667  00002B                     Delay1KTCYx@unit:
   668                           	opt stack 0
   669  00002B                     Delay1TCYx@unit:
   670                           	opt stack 0
   671  00002B                     Read_b_eep@badd:
   672                           	opt stack 0
   673  00002B                     abs@a:
   674                           	opt stack 0
   675  00002B                     ___ftneg@f1:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x2A
   679  00002B                     	ds	1
   680  00002C                     ?_ReadRTDpos:
   681                           	opt stack 0
   682  00002C                     SendSPI1@data:
   683                           	opt stack 0
   684  00002C                     GenerateChecksum@y:
   685                           	opt stack 0
   686  00002C                     OpenSPI1@smp_phase:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x2B
   690  00002C                     	ds	1
   691  00002D                     ??_abs:
   692  00002D                     EEReadChar@location:
   693                           	opt stack 0
   694  00002D                     OpenSPI1@sync_mode:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x2C
   698  00002D                     	ds	1
   699  00002E                     EEReadChar@ch:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x2D
   703  00002E                     	ds	1
   704  00002F                     tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           
   711                           ; 0 bytes @ 0x2E
   712 ;;
   713 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   714 ;;
   715 ;; *************** function _main *****************
   716 ;; Defined at:
   717 ;;		line 20 in file "RTDuC.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  x               1   78[BANK0 ] unsigned char 
   722 ;;  temporary       1   77[BANK0 ] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;		None               void
   725 ;; Registers used:
   726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   736 ;;Total ram usage:        2 bytes
   737 ;; Hardware stack levels required when called:   11
   738 ;; This function calls:
   739 ;;		_DetectJoystick
   740 ;;		_DetectMovement
   741 ;;		_ImplementJSMotion
   742 ;;		_ImplementPIDMotion
   743 ;;		_RTD2Angle
   744 ;;		_ReadRTDpos
   745 ;;		_ReceiveSPI1
   746 ;;		_SPIDisassembleDouble
   747 ;;		_SPIReassembleDouble
   748 ;;		_SendSPI1
   749 ;;		_calculatePID
   750 ;;		_initialize
   751 ;; This function is called by:
   752 ;;		Startup code after reset
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text0
   757  00037E                     __ptext0:
   758                           	opt stack 0
   759  00037E                     _main:
   760                           	opt stack 20
   761                           
   762                           ;RTDuC.c: 22: unsigned char temporary, x;
   763                           ;RTDuC.c: 24: initialize();
   764                           
   765                           ; BSR set to: 0
   766                           ;incstack = 0
   767  00037E  EC97  F00B         	call	_initialize	;wreg free
   768                           
   769                           ;RTDuC.c: 26: PORTCbits.RC6 = 0;
   770  000382  9C82               	bcf	3970,6,c	;volatile
   771                           
   772                           ;RTDuC.c: 27: SSP2BUF = dummy_byte;
   773  000384  C0D5  FF66         	movff	_dummy_byte,3942	;volatile
   774  000388  D000               	goto	l3691
   775  00038A                     l3691:
   776                           
   777                           ;RTDuC.c: 30: {
   778                           ;RTDuC.c: 31: if (SPIflag == 1)
   779  00038A  0100               	movlb	0	; () banked
   780  00038C  05D3               	decf	_SPIflag& (0+255),w,b
   781  00038E  A4D8               	btfss	status,2,c
   782  000390  D0EA               	goto	l3783
   783                           
   784                           ; BSR set to: 0
   785                           ;RTDuC.c: 32: {
   786                           ;RTDuC.c: 33: SPIflag = 0;
   787  000392  0E00               	movlw	0
   788  000394  0100               	movlb	0	; () banked
   789  000396  6FD3               	movwf	_SPIflag& (0+255),b
   790                           
   791                           ; BSR set to: 0
   792                           ;RTDuC.c: 34: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   793  000398  0E02               	movlw	2
   794  00039A  0100               	movlb	0	; () banked
   795  00039C  19D0               	xorwf	_Command& (0+255),w,b
   796  00039E  B4D8               	btfsc	status,2,c
   797  0003A0  D014               	goto	l3705
   798                           
   799                           ; BSR set to: 0
   800  0003A2  0E03               	movlw	3
   801  0003A4  0100               	movlb	0	; () banked
   802  0003A6  19D0               	xorwf	_Command& (0+255),w,b
   803  0003A8  B4D8               	btfsc	status,2,c
   804  0003AA  D00F               	goto	l3705
   805                           
   806                           ; BSR set to: 0
   807  0003AC  0E04               	movlw	4
   808  0003AE  0100               	movlb	0	; () banked
   809  0003B0  19D0               	xorwf	_Command& (0+255),w,b
   810  0003B2  B4D8               	btfsc	status,2,c
   811  0003B4  D00A               	goto	l3705
   812                           
   813                           ; BSR set to: 0
   814  0003B6  0E06               	movlw	6
   815  0003B8  0100               	movlb	0	; () banked
   816  0003BA  19D0               	xorwf	_Command& (0+255),w,b
   817  0003BC  B4D8               	btfsc	status,2,c
   818  0003BE  D005               	goto	l3705
   819                           
   820                           ; BSR set to: 0
   821  0003C0  0E08               	movlw	8
   822  0003C2  0100               	movlb	0	; () banked
   823  0003C4  19D0               	xorwf	_Command& (0+255),w,b
   824  0003C6  A4D8               	btfss	status,2,c
   825  0003C8  D05F               	goto	l3739
   826  0003CA                     l3705:
   827                           
   828                           ; BSR set to: 0
   829                           ;RTDuC.c: 35: {
   830                           ;RTDuC.c: 36: if (Command == 0x02)
   831  0003CA  0E02               	movlw	2
   832  0003CC  0100               	movlb	0	; () banked
   833  0003CE  19D0               	xorwf	_Command& (0+255),w,b
   834  0003D0  A4D8               	btfss	status,2,c
   835  0003D2  D009               	goto	l3709
   836                           
   837                           ; BSR set to: 0
   838                           ;RTDuC.c: 37: SPIDisassembleDouble(CurrentAngle);
   839  0003D4  C0B3  F060         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   840  0003D8  C0B4  F061         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   841  0003DC  C0B5  F062         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   842  0003E0  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   843  0003E4  D038               	goto	l3725
   844  0003E6                     l3709:
   845                           
   846                           ;RTDuC.c: 38: else if (Command == 0x03)
   847  0003E6  0E03               	movlw	3
   848  0003E8  0100               	movlb	0	; () banked
   849  0003EA  19D0               	xorwf	_Command& (0+255),w,b
   850  0003EC  A4D8               	btfss	status,2,c
   851  0003EE  D009               	goto	l3713
   852                           
   853                           ; BSR set to: 0
   854                           ;RTDuC.c: 39: SPIDisassembleDouble(CurrentVelocity);
   855  0003F0  C0B6  F060         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   856  0003F4  C0B7  F061         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   857  0003F8  C0B8  F062         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   858  0003FC  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   859  000400  D02A               	goto	l3725
   860  000402                     l3713:
   861                           
   862                           ;RTDuC.c: 40: else if (Command == 0x04)
   863  000402  0E04               	movlw	4
   864  000404  0100               	movlb	0	; () banked
   865  000406  19D0               	xorwf	_Command& (0+255),w,b
   866  000408  A4D8               	btfss	status,2,c
   867  00040A  D009               	goto	l3717
   868                           
   869                           ; BSR set to: 0
   870                           ;RTDuC.c: 41: SPIDisassembleDouble(Kp);
   871  00040C  C0BF  F060         	movff	_Kp,SPIDisassembleDouble@dub
   872  000410  C0C0  F061         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   873  000414  C0C1  F062         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   874  000418  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   875  00041C  D01C               	goto	l3725
   876  00041E                     l3717:
   877                           
   878                           ;RTDuC.c: 42: else if (Command == 0x06)
   879  00041E  0E06               	movlw	6
   880  000420  0100               	movlb	0	; () banked
   881  000422  19D0               	xorwf	_Command& (0+255),w,b
   882  000424  A4D8               	btfss	status,2,c
   883  000426  D009               	goto	l3721
   884                           
   885                           ; BSR set to: 0
   886                           ;RTDuC.c: 43: SPIDisassembleDouble(Ki);
   887  000428  C0BC  F060         	movff	_Ki,SPIDisassembleDouble@dub
   888  00042C  C0BD  F061         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   889  000430  C0BE  F062         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   890  000434  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   891  000438  D00E               	goto	l3725
   892  00043A                     l3721:
   893                           
   894                           ;RTDuC.c: 44: else if (Command == 0x08)
   895  00043A  0E08               	movlw	8
   896  00043C  0100               	movlb	0	; () banked
   897  00043E  19D0               	xorwf	_Command& (0+255),w,b
   898  000440  A4D8               	btfss	status,2,c
   899  000442  D009               	goto	l3725
   900                           
   901                           ; BSR set to: 0
   902                           ;RTDuC.c: 45: SPIDisassembleDouble(Kd);
   903  000444  C0B9  F060         	movff	_Kd,SPIDisassembleDouble@dub
   904  000448  C0BA  F061         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   905  00044C  C0BB  F062         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   906  000450  ECD3  F00A         	call	_SPIDisassembleDouble	;wreg free
   907  000454  D000               	goto	l3725
   908  000456                     l3725:
   909                           
   910                           ;RTDuC.c: 46: PORTCbits.RC6 = 0;
   911  000456  9C82               	bcf	3970,6,c	;volatile
   912                           
   913                           ;RTDuC.c: 47: for (x = 0; x < 4; x++)
   914  000458  0E00               	movlw	0
   915  00045A  0100               	movlb	0	; () banked
   916  00045C  6FAE               	movwf	main@x& (0+255),b
   917  00045E  D00F               	goto	l3737
   918                           
   919                           ; BSR set to: 0
   920                           
   921                           ; BSR set to: 0
   922  000460  D07D               	goto	l3779
   923  000462                     l3733:
   924                           
   925                           ; BSR set to: 0
   926                           ;RTDuC.c: 48: SendSPI1(DoubleSPIS[x]);
   927  000462  0100               	movlb	0	; () banked
   928  000464  51AE               	movf	main@x& (0+255),w,b
   929  000466  0D01               	mullw	1
   930  000468  0EAF               	movlw	low _DoubleSPIS
   931  00046A  24F3               	addwf	prodl,w,c
   932  00046C  6ED9               	movwf	fsr2l,c
   933  00046E  0E00               	movlw	high _DoubleSPIS
   934  000470  20F4               	addwfc	prodh,w,c
   935  000472  6EDA               	movwf	fsr2h,c
   936  000474  50DF               	movf	indf2,w,c
   937  000476  EC55  F00C         	call	_SendSPI1
   938  00047A  0100               	movlb	0	; () banked
   939  00047C  2BAE               	incf	main@x& (0+255),f,b
   940  00047E                     l3737:
   941                           
   942                           ; BSR set to: 0
   943  00047E  0E03               	movlw	3
   944  000480  0100               	movlb	0	; () banked
   945  000482  65AE               	cpfsgt	main@x& (0+255),b
   946  000484  D7EE               	goto	l3733
   947  000486  D06A               	goto	l3779
   948  000488                     l3739:
   949                           
   950                           ; BSR set to: 0
   951                           ;RTDuC.c: 51: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   952  000488  0100               	movlb	0	; () banked
   953  00048A  05D0               	decf	_Command& (0+255),w,b
   954  00048C  B4D8               	btfsc	status,2,c
   955  00048E  D00F               	goto	l323
   956                           
   957                           ; BSR set to: 0
   958  000490  0E05               	movlw	5
   959  000492  0100               	movlb	0	; () banked
   960  000494  19D0               	xorwf	_Command& (0+255),w,b
   961  000496  B4D8               	btfsc	status,2,c
   962  000498  D00A               	goto	l323
   963                           
   964                           ; BSR set to: 0
   965  00049A  0E07               	movlw	7
   966  00049C  0100               	movlb	0	; () banked
   967  00049E  19D0               	xorwf	_Command& (0+255),w,b
   968  0004A0  B4D8               	btfsc	status,2,c
   969  0004A2  D005               	goto	l323
   970                           
   971                           ; BSR set to: 0
   972  0004A4  0E09               	movlw	9
   973  0004A6  0100               	movlb	0	; () banked
   974  0004A8  19D0               	xorwf	_Command& (0+255),w,b
   975  0004AA  A4D8               	btfss	status,2,c
   976  0004AC  D05A               	goto	l3781
   977  0004AE                     l323:
   978                           
   979                           ; BSR set to: 0
   980                           ;RTDuC.c: 52: {
   981                           ;RTDuC.c: 53: PORTCbits.RC6 = 0;
   982  0004AE  9C82               	bcf	3970,6,c	;volatile
   983                           
   984                           ; BSR set to: 0
   985                           ;RTDuC.c: 54: for (x = 0; x != 4; x++)
   986  0004B0  0E00               	movlw	0
   987  0004B2  0100               	movlb	0	; () banked
   988  0004B4  6FAE               	movwf	main@x& (0+255),b
   989  0004B6                     l3749:
   990                           
   991                           ; BSR set to: 0
   992  0004B6  0E04               	movlw	4
   993  0004B8  0100               	movlb	0	; () banked
   994  0004BA  19AE               	xorwf	main@x& (0+255),w,b
   995  0004BC  B4D8               	btfsc	status,2,c
   996  0004BE  D011               	goto	l3759
   997  0004C0  D001               	goto	l3753
   998                           
   999                           ; BSR set to: 0
  1000  0004C2  D00F               	goto	l3759
  1001  0004C4                     l3753:
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;RTDuC.c: 55: DoubleSPIS[x] = ReceiveSPI1();
  1005  0004C4  0100               	movlb	0	; () banked
  1006  0004C6  51AE               	movf	main@x& (0+255),w,b
  1007  0004C8  0D01               	mullw	1
  1008  0004CA  0EAF               	movlw	low _DoubleSPIS
  1009  0004CC  24F3               	addwf	prodl,w,c
  1010  0004CE  6ED9               	movwf	fsr2l,c
  1011  0004D0  0E00               	movlw	high _DoubleSPIS
  1012  0004D2  20F4               	addwfc	prodh,w,c
  1013  0004D4  6EDA               	movwf	fsr2h,c
  1014  0004D6  EC90  F00C         	call	_ReceiveSPI1	;wreg free
  1015  0004DA  6EDF               	movwf	indf2,c
  1016  0004DC  0100               	movlb	0	; () banked
  1017  0004DE  2BAE               	incf	main@x& (0+255),f,b
  1018  0004E0  D7EA               	goto	l3749
  1019  0004E2                     l3759:
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;RTDuC.c: 56: if (Command == 0x01)
  1023  0004E2  0100               	movlb	0	; () banked
  1024  0004E4  05D0               	decf	_Command& (0+255),w,b
  1025  0004E6  A4D8               	btfss	status,2,c
  1026  0004E8  D00F               	goto	l3767
  1027                           
  1028                           ; BSR set to: 0
  1029                           ;RTDuC.c: 57: {
  1030                           ;RTDuC.c: 58: SetAngle = SPIReassembleDouble();
  1031  0004EA  ECB1  F00A         	call	_SPIReassembleDouble	;wreg free
  1032  0004EE  C02B  F0C2         	movff	?_SPIReassembleDouble,_SetAngle
  1033  0004F2  C02C  F0C3         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1034  0004F6  C02D  F0C4         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1035                           
  1036                           ;RTDuC.c: 59: PIDEnableFlag = 0x03;
  1037  0004FA  0E03               	movlw	3
  1038  0004FC  0100               	movlb	0	; () banked
  1039  0004FE  6FD2               	movwf	_PIDEnableFlag& (0+255),b
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;RTDuC.c: 60: JSEnableFlag = 0;
  1043  000500  0E00               	movlw	0
  1044  000502  0100               	movlb	0	; () banked
  1045  000504  6FD1               	movwf	_JSEnableFlag& (0+255),b
  1046                           
  1047                           ;RTDuC.c: 61: }
  1048  000506  D02A               	goto	l3779
  1049  000508                     l3767:
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;RTDuC.c: 62: else if (Command == 0x05)
  1053  000508  0E05               	movlw	5
  1054  00050A  0100               	movlb	0	; () banked
  1055  00050C  19D0               	xorwf	_Command& (0+255),w,b
  1056  00050E  A4D8               	btfss	status,2,c
  1057  000510  D009               	goto	l3771
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;RTDuC.c: 63: {
  1061                           ;RTDuC.c: 64: Kp = SPIReassembleDouble();
  1062  000512  ECB1  F00A         	call	_SPIReassembleDouble	;wreg free
  1063  000516  C02B  F0BF         	movff	?_SPIReassembleDouble,_Kp
  1064  00051A  C02C  F0C0         	movff	?_SPIReassembleDouble+1,_Kp+1
  1065  00051E  C02D  F0C1         	movff	?_SPIReassembleDouble+2,_Kp+2
  1066                           
  1067                           ;RTDuC.c: 65: }
  1068  000522  D01C               	goto	l3779
  1069  000524                     l3771:
  1070                           
  1071                           ;RTDuC.c: 66: else if (Command == 0x07)
  1072  000524  0E07               	movlw	7
  1073  000526  0100               	movlb	0	; () banked
  1074  000528  19D0               	xorwf	_Command& (0+255),w,b
  1075  00052A  A4D8               	btfss	status,2,c
  1076  00052C  D009               	goto	l3775
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;RTDuC.c: 67: {
  1080                           ;RTDuC.c: 68: Ki = SPIReassembleDouble();
  1081  00052E  ECB1  F00A         	call	_SPIReassembleDouble	;wreg free
  1082  000532  C02B  F0BC         	movff	?_SPIReassembleDouble,_Ki
  1083  000536  C02C  F0BD         	movff	?_SPIReassembleDouble+1,_Ki+1
  1084  00053A  C02D  F0BE         	movff	?_SPIReassembleDouble+2,_Ki+2
  1085                           
  1086                           ;RTDuC.c: 69: }
  1087  00053E  D00E               	goto	l3779
  1088  000540                     l3775:
  1089                           
  1090                           ;RTDuC.c: 70: else if (Command == 0x09)
  1091  000540  0E09               	movlw	9
  1092  000542  0100               	movlb	0	; () banked
  1093  000544  19D0               	xorwf	_Command& (0+255),w,b
  1094  000546  A4D8               	btfss	status,2,c
  1095  000548  D009               	goto	l3779
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;RTDuC.c: 71: {
  1099                           ;RTDuC.c: 72: Kd = SPIReassembleDouble();
  1100  00054A  ECB1  F00A         	call	_SPIReassembleDouble	;wreg free
  1101  00054E  C02B  F0B9         	movff	?_SPIReassembleDouble,_Kd
  1102  000552  C02C  F0BA         	movff	?_SPIReassembleDouble+1,_Kd+1
  1103  000556  C02D  F0BB         	movff	?_SPIReassembleDouble+2,_Kd+2
  1104  00055A  D000               	goto	l3779
  1105  00055C                     l3779:
  1106                           
  1107                           ;RTDuC.c: 73: }
  1108                           ;RTDuC.c: 74: temporary = SSP1BUF;
  1109  00055C  CFC9 F0AD          	movff	4041,main@temporary	;volatile
  1110  000560  D000               	goto	l3781
  1111  000562                     l3781:
  1112                           
  1113                           ;RTDuC.c: 75: }
  1114                           ;RTDuC.c: 76: PIE1bits.SSP1IE = 1;
  1115  000562  869D               	bsf	3997,3,c	;volatile
  1116  000564  D000               	goto	l3783
  1117  000566                     l3783:
  1118                           
  1119                           ;RTDuC.c: 77: }
  1120                           ;RTDuC.c: 79: DetectJoystick();
  1121  000566  ECFB  F00B         	call	_DetectJoystick	;wreg free
  1122                           
  1123                           ;RTDuC.c: 80: if (JSEnableFlag == 1)
  1124  00056A  0100               	movlb	0	; () banked
  1125  00056C  05D1               	decf	_JSEnableFlag& (0+255),w,b
  1126  00056E  A4D8               	btfss	status,2,c
  1127  000570  D009               	goto	l3789
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;RTDuC.c: 81: {
  1131                           ;RTDuC.c: 82: ImplementJSMotion(DetectMovement());
  1132  000572  EC17  F008         	call	_DetectMovement	;wreg free
  1133  000576  C02B  F067         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1134  00057A  C02C  F068         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1135  00057E  EC4B  F006         	call	_ImplementJSMotion	;wreg free
  1136  000582  D000               	goto	l3789
  1137  000584                     l3789:
  1138                           
  1139                           ;RTDuC.c: 83: }
  1140                           ;RTDuC.c: 85: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1141  000584  0100               	movlb	0	; () banked
  1142  000586  05D2               	decf	_PIDEnableFlag& (0+255),w,b
  1143  000588  A4D8               	btfss	status,2,c
  1144  00058A  D02C               	goto	l3801
  1145                           
  1146                           ; BSR set to: 0
  1147  00058C  0100               	movlb	0	; () banked
  1148  00058E  05D4               	decf	_TMR0Flag& (0+255),w,b
  1149  000590  A4D8               	btfss	status,2,c
  1150  000592  D028               	goto	l3801
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;RTDuC.c: 86: {
  1154                           ;RTDuC.c: 87: INTCONbits.GIE = 0;
  1155  000594  9EF2               	bcf	intcon,7,c	;volatile
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;RTDuC.c: 88: CurrentAngle = RTD2Angle(ReadRTDpos());
  1159  000596  EC5B  F009         	call	_ReadRTDpos	;wreg free
  1160  00059A  C02C  F083         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1161  00059E  C02D  F084         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1162  0005A2  EC15  F00B         	call	_RTD2Angle	;wreg free
  1163  0005A6  C083  F0B3         	movff	?_RTD2Angle,_CurrentAngle
  1164  0005AA  C084  F0B4         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1165  0005AE  C085  F0B5         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1166                           
  1167                           ;RTDuC.c: 89: calculatePID(CurrentAngle, SetAngle);
  1168  0005B2  C0B3  F09E         	movff	_CurrentAngle,calculatePID@angle
  1169  0005B6  C0B4  F09F         	movff	_CurrentAngle+1,calculatePID@angle+1
  1170  0005BA  C0B5  F0A0         	movff	_CurrentAngle+2,calculatePID@angle+2
  1171  0005BE  C0C2  F0A1         	movff	_SetAngle,calculatePID@setpoint
  1172  0005C2  C0C3  F0A2         	movff	_SetAngle+1,calculatePID@setpoint+1
  1173  0005C6  C0C4  F0A3         	movff	_SetAngle+2,calculatePID@setpoint+2
  1174  0005CA  EC58  F000         	call	_calculatePID	;wreg free
  1175                           
  1176                           ;RTDuC.c: 90: ImplementPIDMotion(motorInput);
  1177  0005CE  C0CE  F060         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1178  0005D2  C0CF  F061         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1179  0005D6  ECC3  F008         	call	_ImplementPIDMotion	;wreg free
  1180                           
  1181                           ;RTDuC.c: 91: TMR0Flag = 0;
  1182  0005DA  0E00               	movlw	0
  1183  0005DC  0100               	movlb	0	; () banked
  1184  0005DE  6FD4               	movwf	_TMR0Flag& (0+255),b
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;RTDuC.c: 92: INTCONbits.GIE = 1;
  1188  0005E0  8EF2               	bsf	intcon,7,c	;volatile
  1189                           
  1190                           ;RTDuC.c: 93: }
  1191  0005E2  D6D3               	goto	l3691
  1192  0005E4                     l3801:
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;RTDuC.c: 95: else if (PIDEnableFlag == 3)
  1196  0005E4  0E03               	movlw	3
  1197  0005E6  0100               	movlb	0	; () banked
  1198  0005E8  19D2               	xorwf	_PIDEnableFlag& (0+255),w,b
  1199  0005EA  A4D8               	btfss	status,2,c
  1200  0005EC  D6CE               	goto	l3691
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;RTDuC.c: 96: {
  1204                           ;RTDuC.c: 97: INTCONbits.GIE = 0;
  1205  0005EE  9EF2               	bcf	intcon,7,c	;volatile
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;RTDuC.c: 98: TMR0H = 0xDB;
  1209  0005F0  0EDB               	movlw	219
  1210  0005F2  6ED7               	movwf	4055,c	;volatile
  1211                           
  1212                           ;RTDuC.c: 99: TMR0L = 0x60;
  1213  0005F4  0E60               	movlw	96
  1214  0005F6  6ED6               	movwf	4054,c	;volatile
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;RTDuC.c: 100: CurrentAngle = RTD2Angle(ReadRTDpos());
  1218  0005F8  EC5B  F009         	call	_ReadRTDpos	;wreg free
  1219  0005FC  C02C  F083         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1220  000600  C02D  F084         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1221  000604  EC15  F00B         	call	_RTD2Angle	;wreg free
  1222  000608  C083  F0B3         	movff	?_RTD2Angle,_CurrentAngle
  1223  00060C  C084  F0B4         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1224  000610  C085  F0B5         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1225                           
  1226                           ;RTDuC.c: 101: calculatePID(CurrentAngle, SetAngle);
  1227  000614  C0B3  F09E         	movff	_CurrentAngle,calculatePID@angle
  1228  000618  C0B4  F09F         	movff	_CurrentAngle+1,calculatePID@angle+1
  1229  00061C  C0B5  F0A0         	movff	_CurrentAngle+2,calculatePID@angle+2
  1230  000620  C0C2  F0A1         	movff	_SetAngle,calculatePID@setpoint
  1231  000624  C0C3  F0A2         	movff	_SetAngle+1,calculatePID@setpoint+1
  1232  000628  C0C4  F0A3         	movff	_SetAngle+2,calculatePID@setpoint+2
  1233  00062C  EC58  F000         	call	_calculatePID	;wreg free
  1234                           
  1235                           ;RTDuC.c: 102: ImplementPIDMotion(motorInput);
  1236  000630  C0CE  F060         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1237  000634  C0CF  F061         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1238  000638  ECC3  F008         	call	_ImplementPIDMotion	;wreg free
  1239                           
  1240                           ;RTDuC.c: 103: INTCONbits.GIE = 1;
  1241  00063C  8EF2               	bsf	intcon,7,c	;volatile
  1242                           
  1243                           ;RTDuC.c: 104: INTCONbits.TMR0IE = 1;
  1244  00063E  8AF2               	bsf	intcon,5,c	;volatile
  1245                           
  1246                           ;RTDuC.c: 105: T0CONbits.TMR0ON = 1;
  1247  000640  8ED5               	bsf	4053,7,c	;volatile
  1248  000642  D6A3               	goto	l3691
  1249  000644  EF56  F000         	goto	start
  1250  000648                     __end_of_main:
  1251                           	opt stack 0
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           prodh	equ	0xFF4
  1257                           prodl	equ	0xFF3
  1258                           intcon	equ	0xFF2
  1259                           postinc0	equ	0xFEE
  1260                           wreg	equ	0xFE8
  1261                           indf2	equ	0xFDF
  1262                           fsr2h	equ	0xFDA
  1263                           fsr2l	equ	0xFD9
  1264                           status	equ	0xFD8
  1265                           
  1266 ;; *************** function _initialize *****************
  1267 ;; Defined at:
  1268 ;;		line 110 in file "RTDuC.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;		None               void
  1275 ;; Registers used:
  1276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:   10
  1289 ;; This function calls:
  1290 ;;		_EEPROMInit
  1291 ;;		_JoystickInit
  1292 ;;		_MotorDriverInit
  1293 ;;		_PIDInit
  1294 ;;		_RTDInit
  1295 ;;		_SPIInit
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text1
  1302  00172E                     __ptext1:
  1303                           	opt stack 0
  1304  00172E                     _initialize:
  1305                           	opt stack 20
  1306                           
  1307                           ;RTDuC.c: 112: while (OSCCONbits.OSTS == 0);
  1308                           
  1309                           ;incstack = 0
  1310  00172E  D000               	goto	l342
  1311  001730                     l342:
  1312  001730  A6D3               	btfss	4051,3,c	;volatile
  1313  001732  D7FE               	goto	l342
  1314                           
  1315                           ;RTDuC.c: 114: RTDInit();
  1316  001734  EC68  F00B         	call	_RTDInit	;wreg free
  1317                           
  1318                           ;RTDuC.c: 115: SPIInit();
  1319  001738  EC3B  F00C         	call	_SPIInit	;wreg free
  1320                           
  1321                           ;RTDuC.c: 116: JoystickInit();
  1322  00173C  EC80  F00B         	call	_JoystickInit	;wreg free
  1323                           
  1324                           ;RTDuC.c: 117: MotorDriverInit();
  1325  001740  EC2D  F00C         	call	_MotorDriverInit	;wreg free
  1326                           
  1327                           ;RTDuC.c: 118: PIDInit();
  1328  001744  EC6C  F00A         	call	_PIDInit	;wreg free
  1329                           
  1330                           ;RTDuC.c: 119: EEPROMInit();
  1331  001748  EC61  F00C         	call	_EEPROMInit	;wreg free
  1332                           
  1333                           ;RTDuC.c: 121: PORTAbits.RA3 = 1;
  1334  00174C  8680               	bsf	3968,3,c	;volatile
  1335                           
  1336                           ;RTDuC.c: 123: INTCONbits.GIE = 1;
  1337  00174E  8EF2               	bsf	intcon,7,c	;volatile
  1338                           
  1339                           ;RTDuC.c: 124: INTCONbits.PEIE = 1;
  1340  001750  8CF2               	bsf	intcon,6,c	;volatile
  1341                           
  1342                           ;RTDuC.c: 125: RCONbits.IPEN = 1;
  1343  001752  8ED0               	bsf	4048,7,c	;volatile
  1344                           
  1345                           ;RTDuC.c: 127: PIE2bits.OSCFIE = 1;
  1346  001754  8EA0               	bsf	4000,7,c	;volatile
  1347                           
  1348                           ;RTDuC.c: 128: IPR2bits.OSCFIP = 1;
  1349  001756  8EA2               	bsf	4002,7,c	;volatile
  1350  001758  0012               	return		;funcret
  1351  00175A                     __end_of_initialize:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           prodh	equ	0xFF4
  1358                           prodl	equ	0xFF3
  1359                           intcon	equ	0xFF2
  1360                           postinc0	equ	0xFEE
  1361                           wreg	equ	0xFE8
  1362                           indf2	equ	0xFDF
  1363                           fsr2h	equ	0xFDA
  1364                           fsr2l	equ	0xFD9
  1365                           status	equ	0xFD8
  1366                           
  1367 ;; *************** function _SPIInit *****************
  1368 ;; Defined at:
  1369 ;;		line 16 in file "SPISlave.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;		None               void
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0, cstack
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;Total ram usage:        0 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    7
  1390 ;; This function calls:
  1391 ;;		_OpenSPI1
  1392 ;; This function is called by:
  1393 ;;		_initialize
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text2
  1398  001876                     __ptext2:
  1399                           	opt stack 0
  1400  001876                     _SPIInit:
  1401                           	opt stack 22
  1402                           
  1403                           ;SPISlave.c: 18: TRISCbits.RC6 = 0;
  1404                           
  1405                           ;incstack = 0
  1406  001876  9C94               	bcf	3988,6,c	;volatile
  1407                           
  1408                           ;SPISlave.c: 19: PORTCbits.RC6 = 1;
  1409  001878  8C82               	bsf	3970,6,c	;volatile
  1410                           
  1411                           ;SPISlave.c: 20: TRISDbits.RD7 = 1;
  1412  00187A  8E95               	bsf	3989,7,c	;volatile
  1413                           
  1414                           ;SPISlave.c: 21: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  1415  00187C  0E00               	movlw	0
  1416  00187E  6E2B               	movwf	OpenSPI1@bus_mode,c
  1417  001880  0E00               	movlw	0
  1418  001882  6E2C               	movwf	OpenSPI1@smp_phase,c
  1419  001884  0E04               	movlw	4
  1420  001886  ECC6  F009         	call	_OpenSPI1
  1421                           
  1422                           ;SPISlave.c: 22: PIE1bits.SSP1IE = 1;
  1423  00188A  869D               	bsf	3997,3,c	;volatile
  1424                           
  1425                           ;SPISlave.c: 23: IPR1bits.SSP1IP = 0;
  1426  00188C  969F               	bcf	3999,3,c	;volatile
  1427  00188E  0012               	return		;funcret
  1428  001890                     __end_of_SPIInit:
  1429                           	opt stack 0
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           prodh	equ	0xFF4
  1435                           prodl	equ	0xFF3
  1436                           intcon	equ	0xFF2
  1437                           postinc0	equ	0xFEE
  1438                           wreg	equ	0xFE8
  1439                           indf2	equ	0xFDF
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _OpenSPI1 *****************
  1445 ;; Defined at:
  1446 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  sync_mode       1    wreg     unsigned char 
  1449 ;;  bus_mode        1   42[COMRAM] unsigned char 
  1450 ;;  smp_phase       1   43[COMRAM] unsigned char 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  sync_mode       1   44[COMRAM] unsigned char 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;		None               void
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;Total ram usage:        3 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    6
  1469 ;; This function calls:
  1470 ;;		Nothing
  1471 ;; This function is called by:
  1472 ;;		_SPIInit
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text3
  1477  00138C                     __ptext3:
  1478                           	opt stack 0
  1479  00138C                     _OpenSPI1:
  1480                           	opt stack 22
  1481                           
  1482                           ;incstack = 0
  1483                           ;OpenSPI1@sync_mode stored from wreg
  1484  00138C  6E2D               	movwf	OpenSPI1@sync_mode,c
  1485  00138E  0E3F               	movlw	63
  1486  001390  16C7               	andwf	4039,f,c	;volatile
  1487  001392  0E00               	movlw	0
  1488  001394  6EC6               	movwf	4038,c	;volatile
  1489  001396  502D               	movf	OpenSPI1@sync_mode,w,c
  1490  001398  12C6               	iorwf	4038,f,c	;volatile
  1491  00139A  502C               	movf	OpenSPI1@smp_phase,w,c
  1492  00139C  12C7               	iorwf	4039,f,c	;volatile
  1493  00139E  D005               	goto	l2303
  1494  0013A0                     l588:
  1495  0013A0  8CC7               	bsf	4039,6,c	;volatile
  1496  0013A2  D013               	goto	l2307
  1497  0013A4                     l590:
  1498  0013A4  8CC7               	bsf	4039,6,c	;volatile
  1499  0013A6                     l591:
  1500  0013A6  88C6               	bsf	4038,4,c	;volatile
  1501  0013A8  D010               	goto	l2307
  1502  0013AA                     l2303:
  1503  0013AA  502B               	movf	OpenSPI1@bus_mode,w,c
  1504                           
  1505                           ; Switch size 1, requested type "space"
  1506                           ; Number of cases is 3, Range of values is 0 to 3
  1507                           ; switch strategies available:
  1508                           ; Name         Instructions Cycles
  1509                           ; simple_byte           10     6 (average)
  1510                           ;	Chosen strategy is simple_byte
  1511  0013AC  0A00               	xorlw	0	; case 0
  1512  0013AE  B4D8               	btfsc	status,2,c
  1513  0013B0  D7F7               	goto	l588
  1514  0013B2  0A02               	xorlw	2	; case 2
  1515  0013B4  B4D8               	btfsc	status,2,c
  1516  0013B6  D7F6               	goto	l590
  1517  0013B8  0A01               	xorlw	1	; case 3
  1518  0013BA  B4D8               	btfsc	status,2,c
  1519  0013BC  D7F4               	goto	l591
  1520  0013BE  D005               	goto	l2307
  1521  0013C0                     l594:
  1522  0013C0  8E97               	bsf	3991,7,c	;volatile
  1523  0013C2                     l596:
  1524  0013C2  8694               	bsf	3988,3,c	;volatile
  1525  0013C4  D00A               	goto	l595
  1526  0013C6                     l597:
  1527  0013C6  9694               	bcf	3988,3,c	;volatile
  1528  0013C8  D008               	goto	l595
  1529  0013CA                     l2307:
  1530  0013CA  502D               	movf	OpenSPI1@sync_mode,w,c
  1531                           
  1532                           ; Switch size 1, requested type "space"
  1533                           ; Number of cases is 2, Range of values is 4 to 5
  1534                           ; switch strategies available:
  1535                           ; Name         Instructions Cycles
  1536                           ; simple_byte            7     4 (average)
  1537                           ;	Chosen strategy is simple_byte
  1538  0013CC  0A04               	xorlw	4	; case 4
  1539  0013CE  B4D8               	btfsc	status,2,c
  1540  0013D0  D7F7               	goto	l594
  1541  0013D2  0A01               	xorlw	1	; case 5
  1542  0013D4  B4D8               	btfsc	status,2,c
  1543  0013D6  D7F5               	goto	l596
  1544  0013D8  D7F6               	goto	l597
  1545  0013DA                     l595:
  1546  0013DA  8894               	bsf	3988,4,c	;volatile
  1547  0013DC  9A94               	bcf	3988,5,c	;volatile
  1548  0013DE  8AC6               	bsf	4038,5,c	;volatile
  1549  0013E0  0012               	return		;funcret
  1550  0013E2                     __end_of_OpenSPI1:
  1551                           	opt stack 0
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           prodh	equ	0xFF4
  1557                           prodl	equ	0xFF3
  1558                           intcon	equ	0xFF2
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           indf2	equ	0xFDF
  1562                           fsr2h	equ	0xFDA
  1563                           fsr2l	equ	0xFD9
  1564                           status	equ	0xFD8
  1565                           
  1566 ;; *************** function _RTDInit *****************
  1567 ;; Defined at:
  1568 ;;		line 3 in file "ResolverToDigital.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;		None               void
  1575 ;; Registers used:
  1576 ;;		wreg, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;Total ram usage:        0 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    7
  1589 ;; This function calls:
  1590 ;;		_Delay10TCYx
  1591 ;;		_Delay1KTCYx
  1592 ;;		_Delay1TCYx
  1593 ;; This function is called by:
  1594 ;;		_initialize
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           	psect	text4
  1599  0016D0                     __ptext4:
  1600                           	opt stack 0
  1601  0016D0                     _RTDInit:
  1602                           	opt stack 22
  1603                           
  1604                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1605                           
  1606                           ;incstack = 0
  1607  0016D0  6895               	setf	3989,c	;volatile
  1608                           
  1609                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1610  0016D2  6899               	setf	3993,c	;volatile
  1611                           
  1612                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1613  0016D4  9096               	bcf	3990,0,c	;volatile
  1614                           
  1615                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1616  0016D6  9296               	bcf	3990,1,c	;volatile
  1617                           
  1618                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1619  0016D8  9496               	bcf	3990,2,c	;volatile
  1620                           
  1621                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1622  0016DA  909A               	bcf	3994,0,c	;volatile
  1623                           
  1624                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1625  0016DC  8A96               	bsf	3990,5,c	;volatile
  1626                           
  1627                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1628  0016DE  8C96               	bsf	3990,6,c	;volatile
  1629                           
  1630                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1631  0016E0  8E96               	bsf	3990,7,c	;volatile
  1632                           
  1633                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  1634  0016E2  9088               	bcf	3976,0,c	;volatile
  1635                           
  1636                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  1637  0016E4  0E0A               	movlw	10
  1638  0016E6  EC7E  F00C         	call	_Delay10TCYx
  1639                           
  1640                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  1641  0016EA  8088               	bsf	3976,0,c	;volatile
  1642                           
  1643                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  1644  0016EC  0E14               	movlw	20
  1645  0016EE  EC75  F00C         	call	_Delay1KTCYx
  1646                           
  1647                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  1648  0016F2  9084               	bcf	3972,0,c	;volatile
  1649                           
  1650                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  1651  0016F4  0E01               	movlw	1
  1652  0016F6  EC98  F00C         	call	_Delay1TCYx
  1653                           
  1654                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  1655  0016FA  8084               	bsf	3972,0,c	;volatile
  1656                           
  1657                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  1658  0016FC  9484               	bcf	3972,2,c	;volatile
  1659  0016FE  0012               	return		;funcret
  1660  001700                     __end_of_RTDInit:
  1661                           	opt stack 0
  1662                           tblptru	equ	0xFF8
  1663                           tblptrh	equ	0xFF7
  1664                           tblptrl	equ	0xFF6
  1665                           tablat	equ	0xFF5
  1666                           prodh	equ	0xFF4
  1667                           prodl	equ	0xFF3
  1668                           intcon	equ	0xFF2
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           indf2	equ	0xFDF
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8
  1675                           
  1676 ;; *************** function _Delay1TCYx *****************
  1677 ;; Defined at:
  1678 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  unit            1    wreg     unsigned char 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  unit            1   42[COMRAM] unsigned char 
  1683 ;; Return value:  Size  Location     Type
  1684 ;;		None               void
  1685 ;; Registers used:
  1686 ;;		wreg
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;Total ram usage:        1 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    6
  1699 ;; This function calls:
  1700 ;;		Nothing
  1701 ;; This function is called by:
  1702 ;;		_RTDInit
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text5
  1707  001930                     __ptext5:
  1708                           	opt stack 0
  1709  001930                     _Delay1TCYx:
  1710                           	opt stack 22
  1711                           
  1712                           ;incstack = 0
  1713                           ;Delay1TCYx@unit stored from wreg
  1714  001930  6E2B               	movwf	Delay1TCYx@unit,c
  1715  001932                     l842:
  1716  001932  F000               	nop	
  1717  001934  2E2B               	decfsz	Delay1TCYx@unit,f,c
  1718  001936  D7FD               	goto	l842
  1719  001938  D000               	goto	l844
  1720  00193A                     l844:
  1721  00193A  0012               	return		;funcret
  1722  00193C                     __end_of_Delay1TCYx:
  1723                           	opt stack 0
  1724                           tblptru	equ	0xFF8
  1725                           tblptrh	equ	0xFF7
  1726                           tblptrl	equ	0xFF6
  1727                           tablat	equ	0xFF5
  1728                           prodh	equ	0xFF4
  1729                           prodl	equ	0xFF3
  1730                           intcon	equ	0xFF2
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           indf2	equ	0xFDF
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _Delay1KTCYx *****************
  1739 ;; Defined at:
  1740 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  unit            1    wreg     unsigned char 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  unit            1   42[COMRAM] unsigned char 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;		None               void
  1747 ;; Registers used:
  1748 ;;		wreg
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        1 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    6
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_RTDInit
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text6
  1769  0018EA                     __ptext6:
  1770                           	opt stack 0
  1771  0018EA                     _Delay1KTCYx:
  1772                           	opt stack 22
  1773                           
  1774                           ;incstack = 0
  1775                           ;Delay1KTCYx@unit stored from wreg
  1776  0018EA  6E2B               	movwf	Delay1KTCYx@unit,c
  1777  0018EC  0EFA               	movlw	250
  1778  0018EE                     u3567:
  1779  0018EE  F000               	nop	
  1780  0018F0  2EE8               	decfsz	wreg,f,c
  1781  0018F2  D7FD               	goto	u3567
  1782  0018F4  2E2B               	decfsz	Delay1KTCYx@unit,f,c
  1783  0018F6  D7FA               	goto	l2287
  1784  0018F8  D000               	goto	l837
  1785  0018FA                     l837:
  1786  0018FA  0012               	return		;funcret
  1787  0018FC                     __end_of_Delay1KTCYx:
  1788                           	opt stack 0
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           indf2	equ	0xFDF
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function _PIDInit *****************
  1804 ;; Defined at:
  1805 ;;		line 18 in file "PID.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;		None               void
  1812 ;; Registers used:
  1813 ;;		wreg, status,2
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;Total ram usage:        0 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    6
  1826 ;; This function calls:
  1827 ;;		Nothing
  1828 ;; This function is called by:
  1829 ;;		_initialize
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text7
  1834  0014D8                     __ptext7:
  1835                           	opt stack 0
  1836  0014D8                     _PIDInit:
  1837                           	opt stack 23
  1838                           
  1839                           ;PID.c: 21: error = 0;
  1840                           
  1841                           ;incstack = 0
  1842  0014D8  0E00               	movlw	0
  1843  0014DA  0100               	movlb	0	; () banked
  1844  0014DC  6FC5               	movwf	_error& (0+255),b
  1845  0014DE  0E00               	movlw	0
  1846  0014E0  0100               	movlb	0	; () banked
  1847  0014E2  6FC6               	movwf	(_error+1)& (0+255),b
  1848  0014E4  0E00               	movlw	0
  1849  0014E6  0100               	movlb	0	; () banked
  1850  0014E8  6FC7               	movwf	(_error+2)& (0+255),b
  1851                           
  1852                           ;PID.c: 22: prevErr = 0;
  1853  0014EA  0E00               	movlw	0
  1854  0014EC  0100               	movlb	0	; () banked
  1855  0014EE  6FCB               	movwf	_prevErr& (0+255),b
  1856  0014F0  0E00               	movlw	0
  1857  0014F2  0100               	movlb	0	; () banked
  1858  0014F4  6FCC               	movwf	(_prevErr+1)& (0+255),b
  1859  0014F6  0E00               	movlw	0
  1860  0014F8  0100               	movlb	0	; () banked
  1861  0014FA  6FCD               	movwf	(_prevErr+2)& (0+255),b
  1862                           
  1863                           ;PID.c: 23: intErr = 0;
  1864  0014FC  0E00               	movlw	0
  1865  0014FE  0100               	movlb	0	; () banked
  1866  001500  6FC8               	movwf	_intErr& (0+255),b
  1867  001502  0E00               	movlw	0
  1868  001504  0100               	movlb	0	; () banked
  1869  001506  6FC9               	movwf	(_intErr+1)& (0+255),b
  1870  001508  0E00               	movlw	0
  1871  00150A  0100               	movlb	0	; () banked
  1872  00150C  6FCA               	movwf	(_intErr+2)& (0+255),b
  1873                           
  1874                           ;PID.c: 27: T0CON = 0x04;
  1875  00150E  0E04               	movlw	4
  1876  001510  6ED5               	movwf	4053,c	;volatile
  1877                           
  1878                           ;PID.c: 28: TMR0H = 0xDB;
  1879  001512  0EDB               	movlw	219
  1880  001514  6ED7               	movwf	4055,c	;volatile
  1881                           
  1882                           ;PID.c: 29: TMR0L = 0x60;
  1883  001516  0E60               	movlw	96
  1884  001518  6ED6               	movwf	4054,c	;volatile
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;PID.c: 30: INTCON2bits.TMR0IP = 1;
  1888  00151A  84F1               	bsf	intcon2,2,c	;volatile
  1889                           
  1890                           ; BSR set to: 0
  1891  00151C  0012               	return		;funcret
  1892  00151E                     __end_of_PIDInit:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           intcon	equ	0xFF2
  1901                           intcon2	equ	0xFF1
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           indf2	equ	0xFDF
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _MotorDriverInit *****************
  1910 ;; Defined at:
  1911 ;;		line 7 in file "MotorControl.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;		None               void
  1918 ;; Registers used:
  1919 ;;		wreg, status,2
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;Total ram usage:        0 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    6
  1932 ;; This function calls:
  1933 ;;		Nothing
  1934 ;; This function is called by:
  1935 ;;		_initialize
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text8
  1940  00185A                     __ptext8:
  1941                           	opt stack 0
  1942  00185A                     _MotorDriverInit:
  1943                           	opt stack 23
  1944                           
  1945                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;incstack = 0
  1949  00185A  9098               	bcf	3992,0,c	;volatile
  1950                           
  1951                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  1952  00185C  9896               	bcf	3990,4,c	;volatile
  1953                           
  1954                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  1955  00185E  9696               	bcf	3990,3,c	;volatile
  1956                           
  1957                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  1958  001860  9698               	bcf	3992,3,c	;volatile
  1959                           
  1960                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  1961  001862  8093               	bsf	3987,0,c	;volatile
  1962                           
  1963                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  1964  001864  9892               	bcf	3986,4,c	;volatile
  1965                           
  1966                           ;MotorControl.c: 18: CCP3CON = 0x4C;
  1967  001866  0E4C               	movlw	76
  1968  001868  6EB7               	movwf	4023,c	;volatile
  1969                           
  1970                           ;MotorControl.c: 19: PR2 = 0xFF;
  1971  00186A  68CB               	setf	4043,c	;volatile
  1972                           
  1973                           ;MotorControl.c: 20: T3CON = 0x00;
  1974  00186C  0E00               	movlw	0
  1975  00186E  6EB1               	movwf	4017,c	;volatile
  1976                           
  1977                           ;MotorControl.c: 21: T2CON = 0x04;
  1978  001870  0E04               	movlw	4
  1979  001872  6ECA               	movwf	4042,c	;volatile
  1980  001874  0012               	return		;funcret
  1981  001876                     __end_of_MotorDriverInit:
  1982                           	opt stack 0
  1983                           tblptru	equ	0xFF8
  1984                           tblptrh	equ	0xFF7
  1985                           tblptrl	equ	0xFF6
  1986                           tablat	equ	0xFF5
  1987                           prodh	equ	0xFF4
  1988                           prodl	equ	0xFF3
  1989                           intcon	equ	0xFF2
  1990                           intcon2	equ	0xFF1
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           indf2	equ	0xFDF
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _JoystickInit *****************
  1999 ;; Defined at:
  2000 ;;		line 6 in file "Joystick.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;		None               void
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;Total ram usage:        0 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    6
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_initialize
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text9
  2029  001700                     __ptext9:
  2030                           	opt stack 0
  2031  001700                     _JoystickInit:
  2032                           	opt stack 23
  2033                           
  2034                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  2035                           
  2036                           ;incstack = 0
  2037  001700  9492               	bcf	3986,2,c	;volatile
  2038                           
  2039                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  2040  001702  8293               	bsf	3987,1,c	;volatile
  2041                           
  2042                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  2043  001704  A281               	btfss	3969,1,c	;volatile
  2044  001706  D003               	goto	l31
  2045                           
  2046                           ;Joystick.c: 11: {
  2047                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  2048  001708  8480               	bsf	3968,2,c	;volatile
  2049                           
  2050                           ;Joystick.c: 13: JSEnableFlag = 1;
  2051  00170A  0E01               	movlw	1
  2052  00170C  D004               	goto	L1
  2053  00170E                     l31:
  2054                           
  2055                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  2056  00170E  B281               	btfsc	3969,1,c	;volatile
  2057  001710  D005               	goto	l2435
  2058                           
  2059                           ;Joystick.c: 16: {
  2060                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  2061  001712  9480               	bcf	3968,2,c	;volatile
  2062                           
  2063                           ;Joystick.c: 18: JSEnableFlag = 0;
  2064  001714  0E00               	movlw	0
  2065  001716                     L1:
  2066  001716  0100               	movlb	0	; () banked
  2067  001718  6FD1               	movwf	_JSEnableFlag& (0+255),b
  2068                           
  2069                           ; BSR set to: 0
  2070  00171A  D000               	goto	l2435
  2071  00171C                     l2435:
  2072                           
  2073                           ;Joystick.c: 19: }
  2074                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  2075  00171C  80C2               	bsf	4034,0,c	;volatile
  2076                           
  2077                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  2078  00171E  50C2               	movf	4034,w,c	;volatile
  2079  001720  0B01               	andlw	1
  2080  001722  6EC2               	movwf	4034,c	;volatile
  2081                           
  2082                           ;Joystick.c: 23: ADCON1 = 0x0D;
  2083  001724  0E0D               	movlw	13
  2084  001726  6EC1               	movwf	4033,c	;volatile
  2085                           
  2086                           ;Joystick.c: 24: ADCON2 = 0xB4;
  2087  001728  0EB4               	movlw	180
  2088  00172A  6EC0               	movwf	4032,c	;volatile
  2089  00172C  0012               	return		;funcret
  2090  00172E                     __end_of_JoystickInit:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           prodh	equ	0xFF4
  2097                           prodl	equ	0xFF3
  2098                           intcon	equ	0xFF2
  2099                           intcon2	equ	0xFF1
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           indf2	equ	0xFDF
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _EEPROMInit *****************
  2108 ;; Defined at:
  2109 ;;		line 13 in file "EEPROM.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;		None               void
  2116 ;; Registers used:
  2117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;Total ram usage:        0 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    9
  2130 ;; This function calls:
  2131 ;;		_EEBootUp
  2132 ;; This function is called by:
  2133 ;;		_initialize
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text10
  2138  0018C2                     __ptext10:
  2139                           	opt stack 0
  2140  0018C2                     _EEPROMInit:
  2141                           	opt stack 20
  2142                           
  2143                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  2144                           
  2145                           ;incstack = 0
  2146  0018C2  9EA6               	bcf	4006,7,c	;volatile
  2147                           
  2148                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  2149  0018C4  9CA6               	bcf	4006,6,c	;volatile
  2150                           
  2151                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  2152  0018C6  84A6               	bsf	4006,2,c	;volatile
  2153                           
  2154                           ;EEPROM.c: 19: EEBootUp();
  2155  0018C8  EC17  F009         	call	_EEBootUp	;wreg free
  2156                           
  2157                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  2158  0018CC  0E3D               	movlw	61
  2159  0018CE  6ED2               	movwf	4050,c	;volatile
  2160                           
  2161                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  2162  0018D0  84A0               	bsf	4000,2,c	;volatile
  2163                           
  2164                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  2165  0018D2  84A2               	bsf	4002,2,c	;volatile
  2166  0018D4  0012               	return		;funcret
  2167  0018D6                     __end_of_EEPROMInit:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           prodh	equ	0xFF4
  2174                           prodl	equ	0xFF3
  2175                           intcon	equ	0xFF2
  2176                           intcon2	equ	0xFF1
  2177                           postinc0	equ	0xFEE
  2178                           wreg	equ	0xFE8
  2179                           indf2	equ	0xFDF
  2180                           fsr2h	equ	0xFDA
  2181                           fsr2l	equ	0xFD9
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _EEBootUp *****************
  2185 ;; Defined at:
  2186 ;;		line 27 in file "EEPROM.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;		None
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;		None
  2191 ;; Return value:  Size  Location     Type
  2192 ;;		None               void
  2193 ;; Registers used:
  2194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;Total ram usage:        2 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    8
  2207 ;; This function calls:
  2208 ;;		_EEReadChar
  2209 ;;		_EEReadDouble
  2210 ;; This function is called by:
  2211 ;;		_EEPROMInit
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text11
  2216  00122E                     __ptext11:
  2217                           	opt stack 0
  2218  00122E                     _EEBootUp:
  2219                           	opt stack 20
  2220                           
  2221                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  2222                           
  2223                           ;incstack = 0
  2224  00122E  0E16               	movlw	22
  2225  001230  EC1D  F00C         	call	_EEReadChar
  2226  001234  0900               	iorlw	0
  2227  001236  B4D8               	btfsc	status,2,c
  2228  001238  D03D               	goto	l508
  2229                           
  2230                           ;EEPROM.c: 30: {
  2231                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  2232  00123A  0E00               	movlw	0
  2233  00123C  EC94  F009         	call	_EEReadDouble
  2234  001240  C063  F0C2         	movff	?_EEReadDouble,_SetAngle
  2235  001244  C064  F0C3         	movff	?_EEReadDouble+1,_SetAngle+1
  2236  001248  C065  F0C4         	movff	?_EEReadDouble+2,_SetAngle+2
  2237                           
  2238                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  2239  00124C  0E03               	movlw	3
  2240  00124E  EC94  F009         	call	_EEReadDouble
  2241  001252  C063  F0BF         	movff	?_EEReadDouble,_Kp
  2242  001256  C064  F0C0         	movff	?_EEReadDouble+1,_Kp+1
  2243  00125A  C065  F0C1         	movff	?_EEReadDouble+2,_Kp+2
  2244                           
  2245                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  2246  00125E  0E06               	movlw	6
  2247  001260  EC94  F009         	call	_EEReadDouble
  2248  001264  C063  F0BC         	movff	?_EEReadDouble,_Ki
  2249  001268  C064  F0BD         	movff	?_EEReadDouble+1,_Ki+1
  2250  00126C  C065  F0BE         	movff	?_EEReadDouble+2,_Ki+2
  2251                           
  2252                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  2253  001270  0E09               	movlw	9
  2254  001272  EC94  F009         	call	_EEReadDouble
  2255  001276  C063  F0B9         	movff	?_EEReadDouble,_Kd
  2256  00127A  C064  F0BA         	movff	?_EEReadDouble+1,_Kd+1
  2257  00127E  C065  F0BB         	movff	?_EEReadDouble+2,_Kd+2
  2258                           
  2259                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  2260  001282  0E15               	movlw	21
  2261  001284  EC1D  F00C         	call	_EEReadChar
  2262  001288  0100               	movlb	0	; () banked
  2263  00128A  6FD2               	movwf	_PIDEnableFlag& (0+255),b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  2267  00128C  0100               	movlb	0	; () banked
  2268  00128E  51D2               	movf	_PIDEnableFlag& (0+255),w,b
  2269  001290  0100               	movlb	0	; () banked
  2270  001292  6F68               	movwf	??_EEBootUp& (0+255),b
  2271  001294  6B69               	clrf	(??_EEBootUp+1)& (0+255),b
  2272  001296  0E01               	movlw	1
  2273  001298  0100               	movlb	0	; () banked
  2274  00129A  1368               	iorwf	??_EEBootUp& (0+255),f,b
  2275  00129C  0E00               	movlw	0
  2276  00129E  1369               	iorwf	(??_EEBootUp+1)& (0+255),f,b
  2277  0012A0  0100               	movlb	0	; () banked
  2278  0012A2  0568               	decf	??_EEBootUp& (0+255),w,b
  2279  0012A4  0100               	movlb	0	; () banked
  2280  0012A6  1169               	iorwf	(??_EEBootUp+1)& (0+255),w,b
  2281  0012A8  A4D8               	btfss	status,2,c
  2282  0012AA  D004               	goto	l508
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;EEPROM.c: 37: {
  2286                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  2287  0012AC  0E03               	movlw	3
  2288  0012AE  0100               	movlb	0	; () banked
  2289  0012B0  6FD2               	movwf	_PIDEnableFlag& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292  0012B2  D000               	goto	l508
  2293  0012B4                     l508:
  2294  0012B4  0012               	return		;funcret
  2295  0012B6                     __end_of_EEBootUp:
  2296                           	opt stack 0
  2297                           tblptru	equ	0xFF8
  2298                           tblptrh	equ	0xFF7
  2299                           tblptrl	equ	0xFF6
  2300                           tablat	equ	0xFF5
  2301                           prodh	equ	0xFF4
  2302                           prodl	equ	0xFF3
  2303                           intcon	equ	0xFF2
  2304                           intcon2	equ	0xFF1
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           indf2	equ	0xFDF
  2308                           fsr2h	equ	0xFDA
  2309                           fsr2l	equ	0xFD9
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _EEReadDouble *****************
  2313 ;; Defined at:
  2314 ;;		line 100 in file "EEPROM.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;  location        1    wreg     unsigned char 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  location        1    6[BANK0 ] unsigned char 
  2319 ;;  x               1    7[BANK0 ] unsigned char 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  3    3[BANK0 ] unsigned char 
  2322 ;; Registers used:
  2323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2329 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;Total ram usage:        5 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    7
  2336 ;; This function calls:
  2337 ;;		_Busy_eep
  2338 ;;		_EEReassembleDouble
  2339 ;;		_Read_b_eep
  2340 ;; This function is called by:
  2341 ;;		_EEBootUp
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text12
  2346  001328                     __ptext12:
  2347                           	opt stack 0
  2348  001328                     _EEReadDouble:
  2349                           	opt stack 20
  2350                           
  2351                           ;incstack = 0
  2352                           ;EEReadDouble@location stored from wreg
  2353  001328  0100               	movlb	0	; () banked
  2354  00132A  6F66               	movwf	EEReadDouble@location& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;EEPROM.c: 102: unsigned char x;
  2358                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  2359  00132C  50F2               	movf	intcon,w,c	;volatile
  2360  00132E  0B3F               	andlw	63
  2361  001330  6EF2               	movwf	intcon,c	;volatile
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  2365  001332  0E00               	movlw	0
  2366  001334  0100               	movlb	0	; () banked
  2367  001336  6F67               	movwf	EEReadDouble@x& (0+255),b
  2368  001338                     l3159:
  2369                           
  2370                           ; BSR set to: 0
  2371  001338  0E02               	movlw	2
  2372  00133A  0100               	movlb	0	; () banked
  2373  00133C  6567               	cpfsgt	EEReadDouble@x& (0+255),b
  2374  00133E  D001               	goto	l3163
  2375                           
  2376                           ; BSR set to: 0
  2377  001340  D018               	goto	l3171
  2378  001342                     l3163:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;EEPROM.c: 107: {
  2382                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  2383  001342  0100               	movlb	0	; () banked
  2384  001344  5167               	movf	EEReadDouble@x& (0+255),w,b
  2385  001346  0D01               	mullw	1
  2386  001348  0E2F               	movlw	low _DDouble
  2387  00134A  24F3               	addwf	prodl,w,c
  2388  00134C  6ED9               	movwf	fsr2l,c
  2389  00134E  0E00               	movlw	high _DDouble
  2390  001350  20F4               	addwfc	prodh,w,c
  2391  001352  6EDA               	movwf	fsr2h,c
  2392  001354  0100               	movlb	0	; () banked
  2393  001356  5166               	movf	EEReadDouble@location& (0+255),w,b
  2394  001358  0100               	movlb	0	; () banked
  2395  00135A  2567               	addwf	EEReadDouble@x& (0+255),w,b
  2396  00135C  6E2B               	movwf	Read_b_eep@badd,c
  2397  00135E  6A2C               	clrf	Read_b_eep@badd+1,c
  2398  001360  362C               	rlcf	Read_b_eep@badd+1,f,c
  2399  001362  EC48  F00C         	call	_Read_b_eep	;wreg free
  2400  001366  6EDF               	movwf	indf2,c
  2401                           
  2402                           ;EEPROM.c: 109: Busy_eep();
  2403  001368  ECA3  F00C         	call	_Busy_eep	;wreg free
  2404  00136C  0100               	movlb	0	; () banked
  2405  00136E  2B67               	incf	EEReadDouble@x& (0+255),f,b
  2406  001370  D7E3               	goto	l3159
  2407  001372                     l3171:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;EEPROM.c: 110: }
  2411                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  2412  001372  50F2               	movf	intcon,w,c	;volatile
  2413  001374  09C0               	iorlw	192
  2414  001376  6EF2               	movwf	intcon,c	;volatile
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;EEPROM.c: 114: return EEReassembleDouble();
  2418  001378  EC8F  F00A         	call	_EEReassembleDouble	;wreg free
  2419  00137C  C02B  F063         	movff	?_EEReassembleDouble,?_EEReadDouble
  2420  001380  C02C  F064         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  2421  001384  C02D  F065         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  2422  001388  D000               	goto	l524
  2423  00138A                     l524:
  2424  00138A  0012               	return		;funcret
  2425  00138C                     __end_of_EEReadDouble:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           intcon	equ	0xFF2
  2434                           intcon2	equ	0xFF1
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           indf2	equ	0xFDF
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _EEReassembleDouble *****************
  2443 ;; Defined at:
  2444 ;;		line 62 in file "EEPROM.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;		None
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  dub             3    0[BANK0 ] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  3   42[COMRAM] unsigned char 
  2451 ;; Registers used:
  2452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2458 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;Total ram usage:        6 bytes
  2463 ;; Hardware stack levels used:    1
  2464 ;; Hardware stack levels required when called:    6
  2465 ;; This function calls:
  2466 ;;		Nothing
  2467 ;; This function is called by:
  2468 ;;		_EEReadDouble
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text13
  2473  00151E                     __ptext13:
  2474                           	opt stack 0
  2475  00151E                     _EEReassembleDouble:
  2476                           	opt stack 20
  2477                           
  2478                           ;EEPROM.c: 64: double dub;
  2479                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  2480                           
  2481                           ;incstack = 0
  2482  00151E  0E60               	movlw	low EEReassembleDouble@dub
  2483  001520  6E32               	movwf	_DoublePtr,c
  2484  001522  0E00               	movlw	high EEReassembleDouble@dub
  2485  001524  6E33               	movwf	_DoublePtr+1,c
  2486                           
  2487                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  2488  001526  C032  FFD9         	movff	_DoublePtr,fsr2l
  2489  00152A  C033  FFDA         	movff	_DoublePtr+1,fsr2h
  2490  00152E  C02F  FFDF         	movff	_DDouble,indf2
  2491                           
  2492                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  2493  001532  EE20 F001          	lfsr	2,1
  2494  001536  5032               	movf	_DoublePtr,w,c
  2495  001538  26D9               	addwf	fsr2l,f,c
  2496  00153A  5033               	movf	_DoublePtr+1,w,c
  2497  00153C  22DA               	addwfc	fsr2h,f,c
  2498  00153E  C030  FFDF         	movff	_DDouble+1,indf2
  2499                           
  2500                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  2501  001542  EE20 F002          	lfsr	2,2
  2502  001546  5032               	movf	_DoublePtr,w,c
  2503  001548  26D9               	addwf	fsr2l,f,c
  2504  00154A  5033               	movf	_DoublePtr+1,w,c
  2505  00154C  22DA               	addwfc	fsr2h,f,c
  2506  00154E  C031  FFDF         	movff	_DDouble+2,indf2
  2507                           
  2508                           ;EEPROM.c: 69: return dub;
  2509  001552  C060  F02B         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  2510  001556  C061  F02C         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  2511  00155A  C062  F02D         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  2512  00155E  D000               	goto	l514
  2513  001560                     l514:
  2514  001560  0012               	return		;funcret
  2515  001562                     __end_of_EEReassembleDouble:
  2516                           	opt stack 0
  2517                           tblptru	equ	0xFF8
  2518                           tblptrh	equ	0xFF7
  2519                           tblptrl	equ	0xFF6
  2520                           tablat	equ	0xFF5
  2521                           prodh	equ	0xFF4
  2522                           prodl	equ	0xFF3
  2523                           intcon	equ	0xFF2
  2524                           intcon2	equ	0xFF1
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           indf2	equ	0xFDF
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _Busy_eep *****************
  2533 ;; Defined at:
  2534 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;		None               void
  2541 ;; Registers used:
  2542 ;;		None
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    6
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_EEReadDouble
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text14
  2563  001946                     __ptext14:
  2564                           	opt stack 0
  2565  001946                     _Busy_eep:
  2566                           	opt stack 20
  2567                           
  2568                           ;incstack = 0
  2569  001946  D000               	goto	l538
  2570  001948                     l538:
  2571  001948  B2A6               	btfsc	4006,1,c	;volatile
  2572  00194A  D7FE               	goto	l538
  2573  00194C  0012               	return		;funcret
  2574  00194E                     __end_of_Busy_eep:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           prodh	equ	0xFF4
  2581                           prodl	equ	0xFF3
  2582                           intcon	equ	0xFF2
  2583                           intcon2	equ	0xFF1
  2584                           postinc0	equ	0xFEE
  2585                           wreg	equ	0xFE8
  2586                           indf2	equ	0xFDF
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _EEReadChar *****************
  2592 ;; Defined at:
  2593 ;;		line 136 in file "EEPROM.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  location        1    wreg     unsigned char 
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  location        1   44[COMRAM] unsigned char 
  2598 ;;  ch              1   45[COMRAM] unsigned char 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      unsigned char 
  2601 ;; Registers used:
  2602 ;;		wreg, status,2, status,0, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;Total ram usage:        2 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    7
  2615 ;; This function calls:
  2616 ;;		_Read_b_eep
  2617 ;; This function is called by:
  2618 ;;		_EEBootUp
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text15
  2623  00183A                     __ptext15:
  2624                           	opt stack 0
  2625  00183A                     _EEReadChar:
  2626                           	opt stack 20
  2627                           
  2628                           ;incstack = 0
  2629                           ;EEReadChar@location stored from wreg
  2630  00183A  6E2D               	movwf	EEReadChar@location,c
  2631                           
  2632                           ;EEPROM.c: 138: unsigned char ch;
  2633                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  2634  00183C  50F2               	movf	intcon,w,c	;volatile
  2635  00183E  0B3F               	andlw	63
  2636  001840  6EF2               	movwf	intcon,c	;volatile
  2637                           
  2638                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  2639  001842  C02D  F02B         	movff	EEReadChar@location,Read_b_eep@badd
  2640  001846  6A2C               	clrf	Read_b_eep@badd+1,c
  2641  001848  EC48  F00C         	call	_Read_b_eep	;wreg free
  2642  00184C  6E2E               	movwf	EEReadChar@ch,c
  2643                           
  2644                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  2645  00184E  50F2               	movf	intcon,w,c	;volatile
  2646  001850  09C0               	iorlw	192
  2647  001852  6EF2               	movwf	intcon,c	;volatile
  2648                           
  2649                           ;EEPROM.c: 146: return ch;
  2650  001854  502E               	movf	EEReadChar@ch,w,c
  2651  001856  D000               	goto	l530
  2652  001858                     l530:
  2653  001858  0012               	return		;funcret
  2654  00185A                     __end_of_EEReadChar:
  2655                           	opt stack 0
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           intcon	equ	0xFF2
  2663                           intcon2	equ	0xFF1
  2664                           postinc0	equ	0xFEE
  2665                           wreg	equ	0xFE8
  2666                           indf2	equ	0xFDF
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _Read_b_eep *****************
  2672 ;; Defined at:
  2673 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  badd            2   42[COMRAM] unsigned int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      unsigned char 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2687 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;Total ram usage:        2 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    6
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_EEReadDouble
  2698 ;;		_EEReadChar
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text16
  2703  001890                     __ptext16:
  2704                           	opt stack 0
  2705  001890                     _Read_b_eep:
  2706                           	opt stack 20
  2707                           
  2708                           ;incstack = 0
  2709  001890  502C               	movf	Read_b_eep@badd+1,w,c
  2710  001892  0B03               	andlw	3
  2711  001894  6EAA               	movwf	4010,c	;volatile
  2712  001896  C02B  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  2713  00189A  9CA6               	bcf	4006,6,c	;volatile
  2714  00189C  9EA6               	bcf	4006,7,c	;volatile
  2715  00189E  80A6               	bsf	4006,0,c	;volatile
  2716  0018A0  F000               	nop	
  2717  0018A2  F000               	nop	
  2718  0018A4  50A8               	movf	4008,w,c	;volatile
  2719  0018A6  D000               	goto	l554
  2720  0018A8                     l554:
  2721  0018A8  0012               	return		;funcret
  2722  0018AA                     __end_of_Read_b_eep:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodh	equ	0xFF4
  2729                           prodl	equ	0xFF3
  2730                           intcon	equ	0xFF2
  2731                           intcon2	equ	0xFF1
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           indf2	equ	0xFDF
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _calculatePID *****************
  2740 ;; Defined at:
  2741 ;;		line 34 in file "PID.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  angle           3   62[BANK0 ] unsigned char 
  2744 ;;  setpoint        3   65[BANK0 ] unsigned char 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  derErr          3   68[BANK0 ] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;		None               void
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2756 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;Total ram usage:       15 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    9
  2763 ;; This function calls:
  2764 ;;		___ftadd
  2765 ;;		___ftdiv
  2766 ;;		___ftge
  2767 ;;		___ftmul
  2768 ;;		___ftneg
  2769 ;;		___ftsub
  2770 ;;		___fttol
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text17
  2777  0000B0                     __ptext17:
  2778                           	opt stack 0
  2779  0000B0                     _calculatePID:
  2780                           	opt stack 21
  2781                           
  2782                           ;PID.c: 36: double derErr;
  2783                           ;PID.c: 37: if (PIDEnableFlag == 3)
  2784                           
  2785                           ;incstack = 0
  2786  0000B0  0E03               	movlw	3
  2787  0000B2  0100               	movlb	0	; () banked
  2788  0000B4  19D2               	xorwf	_PIDEnableFlag& (0+255),w,b
  2789  0000B6  A4D8               	btfss	status,2,c
  2790  0000B8  D01F               	goto	l3563
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;PID.c: 38: {
  2794                           ;PID.c: 39: error = 0;
  2795  0000BA  0E00               	movlw	0
  2796  0000BC  0100               	movlb	0	; () banked
  2797  0000BE  6FC5               	movwf	_error& (0+255),b
  2798  0000C0  0E00               	movlw	0
  2799  0000C2  0100               	movlb	0	; () banked
  2800  0000C4  6FC6               	movwf	(_error+1)& (0+255),b
  2801  0000C6  0E00               	movlw	0
  2802  0000C8  0100               	movlb	0	; () banked
  2803  0000CA  6FC7               	movwf	(_error+2)& (0+255),b
  2804                           
  2805                           ;PID.c: 40: prevErr = 0;
  2806  0000CC  0E00               	movlw	0
  2807  0000CE  0100               	movlb	0	; () banked
  2808  0000D0  6FCB               	movwf	_prevErr& (0+255),b
  2809  0000D2  0E00               	movlw	0
  2810  0000D4  0100               	movlb	0	; () banked
  2811  0000D6  6FCC               	movwf	(_prevErr+1)& (0+255),b
  2812  0000D8  0E00               	movlw	0
  2813  0000DA  0100               	movlb	0	; () banked
  2814  0000DC  6FCD               	movwf	(_prevErr+2)& (0+255),b
  2815                           
  2816                           ;PID.c: 41: intErr = 0;
  2817  0000DE  0E00               	movlw	0
  2818  0000E0  0100               	movlb	0	; () banked
  2819  0000E2  6FC8               	movwf	_intErr& (0+255),b
  2820  0000E4  0E00               	movlw	0
  2821  0000E6  0100               	movlb	0	; () banked
  2822  0000E8  6FC9               	movwf	(_intErr+1)& (0+255),b
  2823  0000EA  0E00               	movlw	0
  2824  0000EC  0100               	movlb	0	; () banked
  2825  0000EE  6FCA               	movwf	(_intErr+2)& (0+255),b
  2826                           
  2827                           ;PID.c: 42: PIDEnableFlag = 1;
  2828  0000F0  0E01               	movlw	1
  2829  0000F2  0100               	movlb	0	; () banked
  2830  0000F4  6FD2               	movwf	_PIDEnableFlag& (0+255),b
  2831  0000F6  D000               	goto	l3563
  2832  0000F8                     l3563:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;PID.c: 43: }
  2836                           ;PID.c: 45: error = setpoint - angle;
  2837  0000F8  C09E  F02B         	movff	calculatePID@angle,___ftneg@f1
  2838  0000FC  C09F  F02C         	movff	calculatePID@angle+1,___ftneg@f1+1
  2839  000100  C0A0  F02D         	movff	calculatePID@angle+2,___ftneg@f1+2
  2840  000104  ECD7  F00B         	call	___ftneg	;wreg free
  2841  000108  C02B  F083         	movff	?___ftneg,___ftadd@f1
  2842  00010C  C02C  F084         	movff	?___ftneg+1,___ftadd@f1+1
  2843  000110  C02D  F085         	movff	?___ftneg+2,___ftadd@f1+2
  2844  000114  C0A1  F086         	movff	calculatePID@setpoint,___ftadd@f2
  2845  000118  C0A2  F087         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2846  00011C  C0A3  F088         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2847  000120  EC24  F003         	call	___ftadd	;wreg free
  2848  000124  C083  F0C5         	movff	?___ftadd,_error
  2849  000128  C084  F0C6         	movff	?___ftadd+1,_error+1
  2850  00012C  C085  F0C7         	movff	?___ftadd+2,_error+2
  2851                           
  2852                           ;PID.c: 46: if (error > 180)
  2853  000130  0E00               	movlw	0
  2854  000132  0100               	movlb	0	; () banked
  2855  000134  6F60               	movwf	___ftge@ff1& (0+255),b
  2856  000136  0E34               	movlw	52
  2857  000138  0100               	movlb	0	; () banked
  2858  00013A  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  2859  00013C  0E43               	movlw	67
  2860  00013E  0100               	movlb	0	; () banked
  2861  000140  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  2862  000142  C0C5  F063         	movff	_error,___ftge@ff2
  2863  000146  C0C6  F064         	movff	_error+1,___ftge@ff2+1
  2864  00014A  C0C7  F065         	movff	_error+2,___ftge@ff2+2
  2865  00014E  EC5C  F007         	call	___ftge	;wreg free
  2866  000152  0100               	movlb	0	; () banked
  2867  000154  B0D8               	btfsc	status,0,c
  2868  000156  D018               	goto	l3569
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;PID.c: 47: error -= 360;
  2872  000158  C0C5  F08F         	movff	_error,___ftsub@f1
  2873  00015C  C0C6  F090         	movff	_error+1,___ftsub@f1+1
  2874  000160  C0C7  F091         	movff	_error+2,___ftsub@f1+2
  2875  000164  0E00               	movlw	0
  2876  000166  0100               	movlb	0	; () banked
  2877  000168  6F92               	movwf	___ftsub@f2& (0+255),b
  2878  00016A  0EB4               	movlw	180
  2879  00016C  0100               	movlb	0	; () banked
  2880  00016E  6F93               	movwf	(___ftsub@f2+1)& (0+255),b
  2881  000170  0E43               	movlw	67
  2882  000172  0100               	movlb	0	; () banked
  2883  000174  6F94               	movwf	(___ftsub@f2+2)& (0+255),b
  2884  000176  EC44  F00A         	call	___ftsub	;wreg free
  2885  00017A  C08F  F0C5         	movff	?___ftsub,_error
  2886  00017E  C090  F0C6         	movff	?___ftsub+1,_error+1
  2887  000182  C091  F0C7         	movff	?___ftsub+2,_error+2
  2888  000186  D02C               	goto	l148
  2889  000188                     l3569:
  2890                           
  2891                           ;PID.c: 48: else if (error < -180)
  2892  000188  C0C5  F060         	movff	_error,___ftge@ff1
  2893  00018C  C0C6  F061         	movff	_error+1,___ftge@ff1+1
  2894  000190  C0C7  F062         	movff	_error+2,___ftge@ff1+2
  2895  000194  0E00               	movlw	0
  2896  000196  0100               	movlb	0	; () banked
  2897  000198  6F63               	movwf	___ftge@ff2& (0+255),b
  2898  00019A  0E34               	movlw	52
  2899  00019C  0100               	movlb	0	; () banked
  2900  00019E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2901  0001A0  0EC3               	movlw	195
  2902  0001A2  0100               	movlb	0	; () banked
  2903  0001A4  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2904  0001A6  EC5C  F007         	call	___ftge	;wreg free
  2905  0001AA  0100               	movlb	0	; () banked
  2906  0001AC  B0D8               	btfsc	status,0,c
  2907  0001AE  D018               	goto	l148
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;PID.c: 49: error += 360;
  2911  0001B0  C0C5  F083         	movff	_error,___ftadd@f1
  2912  0001B4  C0C6  F084         	movff	_error+1,___ftadd@f1+1
  2913  0001B8  C0C7  F085         	movff	_error+2,___ftadd@f1+2
  2914  0001BC  0E00               	movlw	0
  2915  0001BE  0100               	movlb	0	; () banked
  2916  0001C0  6F86               	movwf	___ftadd@f2& (0+255),b
  2917  0001C2  0EB4               	movlw	180
  2918  0001C4  0100               	movlb	0	; () banked
  2919  0001C6  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  2920  0001C8  0E43               	movlw	67
  2921  0001CA  0100               	movlb	0	; () banked
  2922  0001CC  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  2923  0001CE  EC24  F003         	call	___ftadd	;wreg free
  2924  0001D2  C083  F0C5         	movff	?___ftadd,_error
  2925  0001D6  C084  F0C6         	movff	?___ftadd+1,_error+1
  2926  0001DA  C085  F0C7         	movff	?___ftadd+2,_error+2
  2927  0001DE  D000               	goto	l148
  2928  0001E0                     l148:
  2929                           
  2930                           ;PID.c: 51: derErr = error - prevErr;
  2931  0001E0  C0CB  F02B         	movff	_prevErr,___ftneg@f1
  2932  0001E4  C0CC  F02C         	movff	_prevErr+1,___ftneg@f1+1
  2933  0001E8  C0CD  F02D         	movff	_prevErr+2,___ftneg@f1+2
  2934  0001EC  ECD7  F00B         	call	___ftneg	;wreg free
  2935  0001F0  C02B  F083         	movff	?___ftneg,___ftadd@f1
  2936  0001F4  C02C  F084         	movff	?___ftneg+1,___ftadd@f1+1
  2937  0001F8  C02D  F085         	movff	?___ftneg+2,___ftadd@f1+2
  2938  0001FC  C0C5  F086         	movff	_error,___ftadd@f2
  2939  000200  C0C6  F087         	movff	_error+1,___ftadd@f2+1
  2940  000204  C0C7  F088         	movff	_error+2,___ftadd@f2+2
  2941  000208  EC24  F003         	call	___ftadd	;wreg free
  2942  00020C  C083  F0A4         	movff	?___ftadd,calculatePID@derErr
  2943  000210  C084  F0A5         	movff	?___ftadd+1,calculatePID@derErr+1
  2944  000214  C085  F0A6         	movff	?___ftadd+2,calculatePID@derErr+2
  2945                           
  2946                           ;PID.c: 52: intErr += error;
  2947  000218  C0C8  F083         	movff	_intErr,___ftadd@f1
  2948  00021C  C0C9  F084         	movff	_intErr+1,___ftadd@f1+1
  2949  000220  C0CA  F085         	movff	_intErr+2,___ftadd@f1+2
  2950  000224  C0C5  F086         	movff	_error,___ftadd@f2
  2951  000228  C0C6  F087         	movff	_error+1,___ftadd@f2+1
  2952  00022C  C0C7  F088         	movff	_error+2,___ftadd@f2+2
  2953  000230  EC24  F003         	call	___ftadd	;wreg free
  2954  000234  C083  F0C8         	movff	?___ftadd,_intErr
  2955  000238  C084  F0C9         	movff	?___ftadd+1,_intErr+1
  2956  00023C  C085  F0CA         	movff	?___ftadd+2,_intErr+2
  2957                           
  2958                           ;PID.c: 53: if (intErr > 2000)
  2959  000240  0E00               	movlw	0
  2960  000242  0100               	movlb	0	; () banked
  2961  000244  6F60               	movwf	___ftge@ff1& (0+255),b
  2962  000246  0EFA               	movlw	250
  2963  000248  0100               	movlb	0	; () banked
  2964  00024A  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  2965  00024C  0E44               	movlw	68
  2966  00024E  0100               	movlb	0	; () banked
  2967  000250  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  2968  000252  C0C8  F063         	movff	_intErr,___ftge@ff2
  2969  000256  C0C9  F064         	movff	_intErr+1,___ftge@ff2+1
  2970  00025A  C0CA  F065         	movff	_intErr+2,___ftge@ff2+2
  2971  00025E  EC5C  F007         	call	___ftge	;wreg free
  2972  000262  0100               	movlb	0	; () banked
  2973  000264  B0D8               	btfsc	status,0,c
  2974  000266  D00A               	goto	l3575
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;PID.c: 54: intErr = 2000;
  2978  000268  0E00               	movlw	0
  2979  00026A  0100               	movlb	0	; () banked
  2980  00026C  6FC8               	movwf	_intErr& (0+255),b
  2981  00026E  0EFA               	movlw	250
  2982  000270  0100               	movlb	0	; () banked
  2983  000272  6FC9               	movwf	(_intErr+1)& (0+255),b
  2984  000274  0E44               	movlw	68
  2985  000276  0100               	movlb	0	; () banked
  2986  000278  6FCA               	movwf	(_intErr+2)& (0+255),b
  2987  00027A  D000               	goto	l3575
  2988  00027C                     l3575:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;PID.c: 56: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2992  00027C  C0C8  F077         	movff	_intErr,___ftmul@f2
  2993  000280  C0C9  F078         	movff	_intErr+1,___ftmul@f2+1
  2994  000284  C0CA  F079         	movff	_intErr+2,___ftmul@f2+2
  2995  000288  C0BC  F074         	movff	_Ki,___ftmul@f1
  2996  00028C  C0BD  F075         	movff	_Ki+1,___ftmul@f1+1
  2997  000290  C0BE  F076         	movff	_Ki+2,___ftmul@f1+2
  2998  000294  EC63  F004         	call	___ftmul	;wreg free
  2999  000298  C074  F0A7         	movff	?___ftmul,_calculatePID$3509
  3000  00029C  C075  F0A8         	movff	?___ftmul+1,_calculatePID$3509+1
  3001  0002A0  C076  F0A9         	movff	?___ftmul+2,_calculatePID$3509+2
  3002                           
  3003                           ;PID.c: 56: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3004  0002A4  C0D6  F077         	movff	_loopTime,___ftmul@f2
  3005  0002A8  C0D7  F078         	movff	_loopTime+1,___ftmul@f2+1
  3006  0002AC  C0D8  F079         	movff	_loopTime+2,___ftmul@f2+2
  3007  0002B0  C0A7  F074         	movff	_calculatePID$3509,___ftmul@f1
  3008  0002B4  C0A8  F075         	movff	_calculatePID$3509+1,___ftmul@f1+1
  3009  0002B8  C0A9  F076         	movff	_calculatePID$3509+2,___ftmul@f1+2
  3010  0002BC  EC63  F004         	call	___ftmul	;wreg free
  3011  0002C0  C074  F086         	movff	?___ftmul,___ftadd@f2
  3012  0002C4  C075  F087         	movff	?___ftmul+1,___ftadd@f2+1
  3013  0002C8  C076  F088         	movff	?___ftmul+2,___ftadd@f2+2
  3014  0002CC  C0C5  F077         	movff	_error,___ftmul@f2
  3015  0002D0  C0C6  F078         	movff	_error+1,___ftmul@f2+1
  3016  0002D4  C0C7  F079         	movff	_error+2,___ftmul@f2+2
  3017  0002D8  C0BF  F074         	movff	_Kp,___ftmul@f1
  3018  0002DC  C0C0  F075         	movff	_Kp+1,___ftmul@f1+1
  3019  0002E0  C0C1  F076         	movff	_Kp+2,___ftmul@f1+2
  3020  0002E4  EC63  F004         	call	___ftmul	;wreg free
  3021  0002E8  C074  F083         	movff	?___ftmul,___ftadd@f1
  3022  0002EC  C075  F084         	movff	?___ftmul+1,___ftadd@f1+1
  3023  0002F0  C076  F085         	movff	?___ftmul+2,___ftadd@f1+2
  3024  0002F4  EC24  F003         	call	___ftadd	;wreg free
  3025  0002F8  C083  F0AA         	movff	?___ftadd,_calculatePID$3510
  3026  0002FC  C084  F0AB         	movff	?___ftadd+1,_calculatePID$3510+1
  3027  000300  C085  F0AC         	movff	?___ftadd+2,_calculatePID$3510+2
  3028                           
  3029                           ;PID.c: 56: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3030  000304  C0B9  F077         	movff	_Kd,___ftmul@f2
  3031  000308  C0BA  F078         	movff	_Kd+1,___ftmul@f2+1
  3032  00030C  C0BB  F079         	movff	_Kd+2,___ftmul@f2+2
  3033  000310  C0D6  F068         	movff	_loopTime,___ftdiv@f2
  3034  000314  C0D7  F069         	movff	_loopTime+1,___ftdiv@f2+1
  3035  000318  C0D8  F06A         	movff	_loopTime+2,___ftdiv@f2+2
  3036  00031C  C0A4  F065         	movff	calculatePID@derErr,___ftdiv@f1
  3037  000320  C0A5  F066         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  3038  000324  C0A6  F067         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  3039  000328  EC11  F005         	call	___ftdiv	;wreg free
  3040  00032C  C065  F074         	movff	?___ftdiv,___ftmul@f1
  3041  000330  C066  F075         	movff	?___ftdiv+1,___ftmul@f1+1
  3042  000334  C067  F076         	movff	?___ftdiv+2,___ftmul@f1+2
  3043  000338  EC63  F004         	call	___ftmul	;wreg free
  3044  00033C  C074  F086         	movff	?___ftmul,___ftadd@f2
  3045  000340  C075  F087         	movff	?___ftmul+1,___ftadd@f2+1
  3046  000344  C076  F088         	movff	?___ftmul+2,___ftadd@f2+2
  3047  000348  C0AA  F083         	movff	_calculatePID$3510,___ftadd@f1
  3048  00034C  C0AB  F084         	movff	_calculatePID$3510+1,___ftadd@f1+1
  3049  000350  C0AC  F085         	movff	_calculatePID$3510+2,___ftadd@f1+2
  3050  000354  EC24  F003         	call	___ftadd	;wreg free
  3051  000358  C083  F08F         	movff	?___ftadd,___fttol@f1
  3052  00035C  C084  F090         	movff	?___ftadd+1,___fttol@f1+1
  3053  000360  C085  F091         	movff	?___ftadd+2,___fttol@f1+2
  3054  000364  ECB2  F005         	call	___fttol	;wreg free
  3055  000368  C08F  F0CE         	movff	?___fttol,_motorInput
  3056  00036C  C090  F0CF         	movff	?___fttol+1,_motorInput+1
  3057                           
  3058                           ;PID.c: 58: prevErr = error;
  3059  000370  C0C5  F0CB         	movff	_error,_prevErr
  3060  000374  C0C6  F0CC         	movff	_error+1,_prevErr+1
  3061  000378  C0C7  F0CD         	movff	_error+2,_prevErr+2
  3062  00037C  0012               	return		;funcret
  3063  00037E                     __end_of_calculatePID:
  3064                           	opt stack 0
  3065                           tblptru	equ	0xFF8
  3066                           tblptrh	equ	0xFF7
  3067                           tblptrl	equ	0xFF6
  3068                           tablat	equ	0xFF5
  3069                           prodh	equ	0xFF4
  3070                           prodl	equ	0xFF3
  3071                           intcon	equ	0xFF2
  3072                           intcon2	equ	0xFF1
  3073                           postinc0	equ	0xFEE
  3074                           wreg	equ	0xFE8
  3075                           indf2	equ	0xFDF
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function ___fttol *****************
  3081 ;; Defined at:
  3082 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  f1              3   47[BANK0 ] float 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  lval            4   57[BANK0 ] unsigned long 
  3087 ;;  exp1            1   61[BANK0 ] unsigned char 
  3088 ;;  sign1           1   56[BANK0 ] unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  4   47[BANK0 ] long 
  3091 ;; Registers used:
  3092 ;;		wreg, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3098 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;Total ram usage:       15 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    6
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_calculatePID
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           	psect	text18
  3113  000B64                     __ptext18:
  3114                           	opt stack 0
  3115  000B64                     ___fttol:
  3116                           	opt stack 23
  3117                           
  3118                           ;incstack = 0
  3119  000B64  C091  F093         	movff	___fttol@f1+2,??___fttol
  3120  000B68  0100               	movlb	0	; () banked
  3121  000B6A  6B94               	clrf	(??___fttol+1)& (0+255),b
  3122  000B6C  6B95               	clrf	(??___fttol+2)& (0+255),b
  3123  000B6E  0100               	movlb	0	; () banked
  3124  000B70  3590               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3125  000B72  0100               	movlb	0	; () banked
  3126  000B74  3793               	rlcf	??___fttol& (0+255),f,b
  3127  000B76  E301               	bnc	u1881
  3128  000B78  8194               	bsf	(??___fttol+1)& (0+255),0,b
  3129  000B7A                     u1881:
  3130  000B7A  0100               	movlb	0	; () banked
  3131  000B7C  5193               	movf	??___fttol& (0+255),w,b
  3132  000B7E  0100               	movlb	0	; () banked
  3133  000B80  6F9D               	movwf	___fttol@exp1& (0+255),b
  3134  000B82  0100               	movlb	0	; () banked
  3135  000B84  519D               	movf	___fttol@exp1& (0+255),w,b
  3136  000B86  A4D8               	btfss	status,2,c
  3137  000B88  D002               	goto	l2665
  3138  000B8A  D051               	goto	l2689
  3139                           
  3140                           ; BSR set to: 0
  3141                           
  3142                           ; BSR set to: 0
  3143  000B8C  D083               	goto	l1042
  3144  000B8E                     l2665:
  3145                           
  3146                           ; BSR set to: 0
  3147  000B8E  0E17               	movlw	23
  3148  000B90  0100               	movlb	0	; () banked
  3149  000B92  6F93               	movwf	??___fttol& (0+255),b
  3150  000B94  C08F  F094         	movff	___fttol@f1,??___fttol+1
  3151  000B98  C090  F095         	movff	___fttol@f1+1,??___fttol+2
  3152  000B9C  C091  F096         	movff	___fttol@f1+2,??___fttol+3
  3153  000BA0  0100               	movlb	0	; () banked
  3154  000BA2  2993               	incf	??___fttol& (0+255),w,b
  3155  000BA4  0100               	movlb	0	; () banked
  3156  000BA6  6F97               	movwf	(??___fttol+4)& (0+255),b
  3157  000BA8  D005               	goto	u1900
  3158  000BAA                     u1905:
  3159  000BAA  0100               	movlb	0	; () banked
  3160  000BAC  90D8               	bcf	status,0,c
  3161  000BAE  3396               	rrcf	(??___fttol+3)& (0+255),f,b
  3162  000BB0  3395               	rrcf	(??___fttol+2)& (0+255),f,b
  3163  000BB2  3394               	rrcf	(??___fttol+1)& (0+255),f,b
  3164  000BB4                     u1900:
  3165  000BB4  0100               	movlb	0	; () banked
  3166  000BB6  2F97               	decfsz	(??___fttol+4)& (0+255),f,b
  3167  000BB8  D7F8               	goto	u1905
  3168  000BBA  0100               	movlb	0	; () banked
  3169  000BBC  5194               	movf	(??___fttol+1)& (0+255),w,b
  3170  000BBE  0100               	movlb	0	; () banked
  3171  000BC0  6F98               	movwf	___fttol@sign1& (0+255),b
  3172                           
  3173                           ; BSR set to: 0
  3174  000BC2  0100               	movlb	0	; () banked
  3175  000BC4  8F90               	bsf	(___fttol@f1+1)& (0+255),7,b
  3176                           
  3177                           ; BSR set to: 0
  3178  000BC6  0EFF               	movlw	255
  3179  000BC8  0100               	movlb	0	; () banked
  3180  000BCA  178F               	andwf	___fttol@f1& (0+255),f,b
  3181  000BCC  0EFF               	movlw	255
  3182  000BCE  0100               	movlb	0	; () banked
  3183  000BD0  1790               	andwf	(___fttol@f1+1)& (0+255),f,b
  3184  000BD2  0E00               	movlw	0
  3185  000BD4  0100               	movlb	0	; () banked
  3186  000BD6  1791               	andwf	(___fttol@f1+2)& (0+255),f,b
  3187                           
  3188                           ; BSR set to: 0
  3189  000BD8  0100               	movlb	0	; () banked
  3190  000BDA  518F               	movf	___fttol@f1& (0+255),w,b
  3191  000BDC  0100               	movlb	0	; () banked
  3192  000BDE  6F99               	movwf	___fttol@lval& (0+255),b
  3193  000BE0  0100               	movlb	0	; () banked
  3194  000BE2  5190               	movf	(___fttol@f1+1)& (0+255),w,b
  3195  000BE4  0100               	movlb	0	; () banked
  3196  000BE6  6F9A               	movwf	(___fttol@lval+1)& (0+255),b
  3197  000BE8  0100               	movlb	0	; () banked
  3198  000BEA  5191               	movf	(___fttol@f1+2)& (0+255),w,b
  3199  000BEC  0100               	movlb	0	; () banked
  3200  000BEE  6F9B               	movwf	(___fttol@lval+2)& (0+255),b
  3201  000BF0  0100               	movlb	0	; () banked
  3202  000BF2  6B9C               	clrf	(___fttol@lval+3)& (0+255),b
  3203                           
  3204                           ; BSR set to: 0
  3205  000BF4  0E8E               	movlw	142
  3206  000BF6  0100               	movlb	0	; () banked
  3207  000BF8  5F9D               	subwf	___fttol@exp1& (0+255),f,b
  3208                           
  3209                           ; BSR set to: 0
  3210  000BFA  0100               	movlb	0	; () banked
  3211  000BFC  AF9D               	btfss	___fttol@exp1& (0+255),7,b
  3212  000BFE  D013               	goto	l2687
  3213                           
  3214                           ; BSR set to: 0
  3215  000C00  0100               	movlb	0	; () banked
  3216  000C02  519D               	movf	___fttol@exp1& (0+255),w,b
  3217  000C04  0A80               	xorlw	128
  3218  000C06  0F8F               	addlw	143
  3219  000C08  B0D8               	btfsc	status,0,c
  3220  000C0A  D003               	goto	l2683
  3221  000C0C  D010               	goto	l2689
  3222                           
  3223                           ; BSR set to: 0
  3224                           
  3225                           ; BSR set to: 0
  3226  000C0E  D042               	goto	l1042
  3227                           
  3228                           ; BSR set to: 0
  3229  000C10  D000               	goto	l2683
  3230  000C12                     l2683:
  3231                           
  3232                           ; BSR set to: 0
  3233  000C12  0100               	movlb	0	; () banked
  3234  000C14  90D8               	bcf	status,0,c
  3235  000C16  339C               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3236  000C18  339B               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3237  000C1A  339A               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3238  000C1C  3399               	rrcf	___fttol@lval& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 0
  3241  000C1E  0100               	movlb	0	; () banked
  3242  000C20  3F9D               	incfsz	___fttol@exp1& (0+255),f,b
  3243  000C22  D7F7               	goto	l2683
  3244                           
  3245                           ; BSR set to: 0
  3246  000C24  D01F               	goto	l2697
  3247  000C26                     l2687:
  3248                           
  3249                           ; BSR set to: 0
  3250  000C26  0E17               	movlw	23
  3251  000C28  0100               	movlb	0	; () banked
  3252  000C2A  659D               	cpfsgt	___fttol@exp1& (0+255),b
  3253  000C2C  D014               	goto	l2695
  3254  000C2E                     l2689:
  3255                           
  3256                           ; BSR set to: 0
  3257  000C2E  0E00               	movlw	0
  3258  000C30  0100               	movlb	0	; () banked
  3259  000C32  6F8F               	movwf	?___fttol& (0+255),b
  3260  000C34  0E00               	movlw	0
  3261  000C36  6F90               	movwf	(?___fttol+1)& (0+255),b
  3262  000C38  0E00               	movlw	0
  3263  000C3A  6F91               	movwf	(?___fttol+2)& (0+255),b
  3264  000C3C  0E00               	movlw	0
  3265  000C3E  6F92               	movwf	(?___fttol+3)& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268  000C40  D029               	goto	l1042
  3269                           
  3270                           ; BSR set to: 0
  3271  000C42  D009               	goto	l2695
  3272  000C44                     l2693:
  3273                           
  3274                           ; BSR set to: 0
  3275  000C44  0100               	movlb	0	; () banked
  3276  000C46  90D8               	bcf	status,0,c
  3277  000C48  3799               	rlcf	___fttol@lval& (0+255),f,b
  3278  000C4A  379A               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3279  000C4C  379B               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3280  000C4E  379C               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3281  000C50  0100               	movlb	0	; () banked
  3282  000C52  079D               	decf	___fttol@exp1& (0+255),f,b
  3283  000C54  D000               	goto	l2695
  3284  000C56                     l2695:
  3285                           
  3286                           ; BSR set to: 0
  3287  000C56  0100               	movlb	0	; () banked
  3288  000C58  519D               	movf	___fttol@exp1& (0+255),w,b
  3289  000C5A  0100               	movlb	0	; () banked
  3290  000C5C  B4D8               	btfsc	status,2,c
  3291  000C5E  D002               	goto	l2697
  3292  000C60  D7F1               	goto	l2693
  3293                           
  3294                           ; BSR set to: 0
  3295  000C62  D000               	goto	l2697
  3296  000C64                     l2697:
  3297                           
  3298                           ; BSR set to: 0
  3299  000C64  0100               	movlb	0	; () banked
  3300  000C66  5198               	movf	___fttol@sign1& (0+255),w,b
  3301  000C68  0100               	movlb	0	; () banked
  3302  000C6A  B4D8               	btfsc	status,2,c
  3303  000C6C  D00A               	goto	l2701
  3304                           
  3305                           ; BSR set to: 0
  3306  000C6E  0100               	movlb	0	; () banked
  3307  000C70  1F9C               	comf	(___fttol@lval+3)& (0+255),f,b
  3308  000C72  1F9B               	comf	(___fttol@lval+2)& (0+255),f,b
  3309  000C74  1F9A               	comf	(___fttol@lval+1)& (0+255),f,b
  3310  000C76  6D99               	negf	___fttol@lval& (0+255),b
  3311  000C78  0E00               	movlw	0
  3312  000C7A  239A               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3313  000C7C  239B               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3314  000C7E  239C               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3315  000C80  D000               	goto	l2701
  3316  000C82                     l2701:
  3317                           
  3318                           ; BSR set to: 0
  3319  000C82  C099  F08F         	movff	___fttol@lval,?___fttol
  3320  000C86  C09A  F090         	movff	___fttol@lval+1,?___fttol+1
  3321  000C8A  C09B  F091         	movff	___fttol@lval+2,?___fttol+2
  3322  000C8E  C09C  F092         	movff	___fttol@lval+3,?___fttol+3
  3323  000C92  D000               	goto	l1042
  3324  000C94                     l1042:
  3325                           
  3326                           ; BSR set to: 0
  3327  000C94  0012               	return		;funcret
  3328  000C96                     __end_of___fttol:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon2	equ	0xFF1
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           indf2	equ	0xFDF
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function ___ftsub *****************
  3346 ;; Defined at:
  3347 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  f1              3   47[BANK0 ] float 
  3350 ;;  f2              3   50[BANK0 ] float 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;		None
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  3   47[BANK0 ] float 
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3362 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;Total ram usage:        6 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    8
  3369 ;; This function calls:
  3370 ;;		___ftadd
  3371 ;; This function is called by:
  3372 ;;		_calculatePID
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text19
  3377  001488                     __ptext19:
  3378                           	opt stack 0
  3379  001488                     ___ftsub:
  3380                           	opt stack 21
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;incstack = 0
  3384  001488  0100               	movlb	0	; () banked
  3385  00148A  5192               	movf	___ftsub@f2& (0+255),w,b
  3386  00148C  0100               	movlb	0	; () banked
  3387  00148E  1193               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  3388  001490  0100               	movlb	0	; () banked
  3389  001492  1194               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  3390  001494  B4D8               	btfsc	status,2,c
  3391  001496  D00A               	goto	l3463
  3392                           
  3393                           ; BSR set to: 0
  3394  001498  0E00               	movlw	0
  3395  00149A  0100               	movlb	0	; () banked
  3396  00149C  1B92               	xorwf	___ftsub@f2& (0+255),f,b
  3397  00149E  0E00               	movlw	0
  3398  0014A0  0100               	movlb	0	; () banked
  3399  0014A2  1B93               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  3400  0014A4  0E80               	movlw	128
  3401  0014A6  0100               	movlb	0	; () banked
  3402  0014A8  1B94               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  3403  0014AA  D000               	goto	l3463
  3404  0014AC                     l3463:
  3405                           
  3406                           ; BSR set to: 0
  3407  0014AC  C08F  F083         	movff	___ftsub@f1,___ftadd@f1
  3408  0014B0  C090  F084         	movff	___ftsub@f1+1,___ftadd@f1+1
  3409  0014B4  C091  F085         	movff	___ftsub@f1+2,___ftadd@f1+2
  3410  0014B8  C092  F086         	movff	___ftsub@f2,___ftadd@f2
  3411  0014BC  C093  F087         	movff	___ftsub@f2+1,___ftadd@f2+1
  3412  0014C0  C094  F088         	movff	___ftsub@f2+2,___ftadd@f2+2
  3413  0014C4  EC24  F003         	call	___ftadd	;wreg free
  3414  0014C8  C083  F08F         	movff	?___ftadd,?___ftsub
  3415  0014CC  C084  F090         	movff	?___ftadd+1,?___ftsub+1
  3416  0014D0  C085  F091         	movff	?___ftadd+2,?___ftsub+2
  3417  0014D4  D000               	goto	l1038
  3418  0014D6                     l1038:
  3419  0014D6  0012               	return		;funcret
  3420  0014D8                     __end_of___ftsub:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon2	equ	0xFF1
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           indf2	equ	0xFDF
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function ___ftadd *****************
  3438 ;; Defined at:
  3439 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  f1              3   35[BANK0 ] float 
  3442 ;;  f2              3   38[BANK0 ] float 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  exp1            1   46[BANK0 ] unsigned char 
  3445 ;;  exp2            1   45[BANK0 ] unsigned char 
  3446 ;;  sign            1   44[BANK0 ] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  3   35[BANK0 ] float 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3456 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;Total ram usage:       12 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    7
  3463 ;; This function calls:
  3464 ;;		___ftpack
  3465 ;; This function is called by:
  3466 ;;		_calculatePID
  3467 ;;		___ftsub
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           	psect	text20
  3472  000648                     __ptext20:
  3473                           	opt stack 0
  3474  000648                     ___ftadd:
  3475                           	opt stack 21
  3476                           
  3477                           ;incstack = 0
  3478  000648  C085  F089         	movff	___ftadd@f1+2,??___ftadd
  3479  00064C  0100               	movlb	0	; () banked
  3480  00064E  6B8A               	clrf	(??___ftadd+1)& (0+255),b
  3481  000650  6B8B               	clrf	(??___ftadd+2)& (0+255),b
  3482  000652  0100               	movlb	0	; () banked
  3483  000654  3584               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3484  000656  0100               	movlb	0	; () banked
  3485  000658  3789               	rlcf	??___ftadd& (0+255),f,b
  3486  00065A  E301               	bnc	u2661
  3487  00065C  818A               	bsf	(??___ftadd+1)& (0+255),0,b
  3488  00065E                     u2661:
  3489  00065E  0100               	movlb	0	; () banked
  3490  000660  5189               	movf	??___ftadd& (0+255),w,b
  3491  000662  0100               	movlb	0	; () banked
  3492  000664  6F8E               	movwf	___ftadd@exp1& (0+255),b
  3493  000666  C088  F089         	movff	___ftadd@f2+2,??___ftadd
  3494  00066A  0100               	movlb	0	; () banked
  3495  00066C  6B8A               	clrf	(??___ftadd+1)& (0+255),b
  3496  00066E  6B8B               	clrf	(??___ftadd+2)& (0+255),b
  3497  000670  0100               	movlb	0	; () banked
  3498  000672  3587               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3499  000674  0100               	movlb	0	; () banked
  3500  000676  3789               	rlcf	??___ftadd& (0+255),f,b
  3501  000678  E301               	bnc	u2671
  3502  00067A  818A               	bsf	(??___ftadd+1)& (0+255),0,b
  3503  00067C                     u2671:
  3504  00067C  0100               	movlb	0	; () banked
  3505  00067E  5189               	movf	??___ftadd& (0+255),w,b
  3506  000680  0100               	movlb	0	; () banked
  3507  000682  6F8D               	movwf	___ftadd@exp2& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510  000684  0100               	movlb	0	; () banked
  3511  000686  518E               	movf	___ftadd@exp1& (0+255),w,b
  3512  000688  0100               	movlb	0	; () banked
  3513  00068A  B4D8               	btfsc	status,2,c
  3514  00068C  D011               	goto	l974
  3515                           
  3516                           ; BSR set to: 0
  3517  00068E  0100               	movlb	0	; () banked
  3518  000690  518D               	movf	___ftadd@exp2& (0+255),w,b
  3519  000692  0100               	movlb	0	; () banked
  3520  000694  5D8E               	subwf	___ftadd@exp1& (0+255),w,b
  3521  000696  B0D8               	btfsc	status,0,c
  3522  000698  D012               	goto	l3243
  3523                           
  3524                           ; BSR set to: 0
  3525  00069A  0100               	movlb	0	; () banked
  3526  00069C  518E               	movf	___ftadd@exp1& (0+255),w,b
  3527  00069E  0800               	sublw	0
  3528  0006A0  0100               	movlb	0	; () banked
  3529  0006A2  258D               	addwf	___ftadd@exp2& (0+255),w,b
  3530  0006A4  0100               	movlb	0	; () banked
  3531  0006A6  6F89               	movwf	??___ftadd& (0+255),b
  3532  0006A8  0E18               	movlw	24
  3533  0006AA  0100               	movlb	0	; () banked
  3534  0006AC  6589               	cpfsgt	??___ftadd& (0+255),b
  3535  0006AE  D007               	goto	l3243
  3536  0006B0                     l974:
  3537                           
  3538                           ; BSR set to: 0
  3539  0006B0  C086  F083         	movff	___ftadd@f2,?___ftadd
  3540  0006B4  C087  F084         	movff	___ftadd@f2+1,?___ftadd+1
  3541  0006B8  C088  F085         	movff	___ftadd@f2+2,?___ftadd+2
  3542  0006BC  D103               	goto	l975
  3543  0006BE                     l3243:
  3544                           
  3545                           ; BSR set to: 0
  3546  0006BE  0100               	movlb	0	; () banked
  3547  0006C0  518D               	movf	___ftadd@exp2& (0+255),w,b
  3548  0006C2  0100               	movlb	0	; () banked
  3549  0006C4  B4D8               	btfsc	status,2,c
  3550  0006C6  D011               	goto	l978
  3551                           
  3552                           ; BSR set to: 0
  3553  0006C8  0100               	movlb	0	; () banked
  3554  0006CA  518E               	movf	___ftadd@exp1& (0+255),w,b
  3555  0006CC  0100               	movlb	0	; () banked
  3556  0006CE  5D8D               	subwf	___ftadd@exp2& (0+255),w,b
  3557  0006D0  B0D8               	btfsc	status,0,c
  3558  0006D2  D012               	goto	l3249
  3559                           
  3560                           ; BSR set to: 0
  3561  0006D4  0100               	movlb	0	; () banked
  3562  0006D6  518D               	movf	___ftadd@exp2& (0+255),w,b
  3563  0006D8  0800               	sublw	0
  3564  0006DA  0100               	movlb	0	; () banked
  3565  0006DC  258E               	addwf	___ftadd@exp1& (0+255),w,b
  3566  0006DE  0100               	movlb	0	; () banked
  3567  0006E0  6F89               	movwf	??___ftadd& (0+255),b
  3568  0006E2  0E18               	movlw	24
  3569  0006E4  0100               	movlb	0	; () banked
  3570  0006E6  6589               	cpfsgt	??___ftadd& (0+255),b
  3571  0006E8  D007               	goto	l3249
  3572  0006EA                     l978:
  3573                           
  3574                           ; BSR set to: 0
  3575  0006EA  C083  F083         	movff	___ftadd@f1,?___ftadd
  3576  0006EE  C084  F084         	movff	___ftadd@f1+1,?___ftadd+1
  3577  0006F2  C085  F085         	movff	___ftadd@f1+2,?___ftadd+2
  3578  0006F6  D0E6               	goto	l975
  3579  0006F8                     l3249:
  3580                           
  3581                           ; BSR set to: 0
  3582  0006F8  0E06               	movlw	6
  3583  0006FA  0100               	movlb	0	; () banked
  3584  0006FC  6F8C               	movwf	___ftadd@sign& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587  0006FE  0100               	movlb	0	; () banked
  3588  000700  AF85               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3589  000702  D003               	goto	l3255
  3590                           
  3591                           ; BSR set to: 0
  3592  000704  0100               	movlb	0	; () banked
  3593  000706  8F8C               	bsf	___ftadd@sign& (0+255),7,b
  3594  000708  D000               	goto	l3255
  3595  00070A                     l3255:
  3596                           
  3597                           ; BSR set to: 0
  3598  00070A  0100               	movlb	0	; () banked
  3599  00070C  AF88               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3600  00070E  D002               	goto	l980
  3601                           
  3602                           ; BSR set to: 0
  3603  000710  0100               	movlb	0	; () banked
  3604  000712  8D8C               	bsf	___ftadd@sign& (0+255),6,b
  3605  000714                     l980:
  3606                           
  3607                           ; BSR set to: 0
  3608  000714  0100               	movlb	0	; () banked
  3609  000716  8F84               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3610                           
  3611                           ; BSR set to: 0
  3612  000718  0EFF               	movlw	255
  3613  00071A  0100               	movlb	0	; () banked
  3614  00071C  1783               	andwf	___ftadd@f1& (0+255),f,b
  3615  00071E  0EFF               	movlw	255
  3616  000720  0100               	movlb	0	; () banked
  3617  000722  1784               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3618  000724  0E00               	movlw	0
  3619  000726  0100               	movlb	0	; () banked
  3620  000728  1785               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3621  00072A  0100               	movlb	0	; () banked
  3622  00072C  8F87               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3623                           
  3624                           ; BSR set to: 0
  3625  00072E  0EFF               	movlw	255
  3626  000730  0100               	movlb	0	; () banked
  3627  000732  1786               	andwf	___ftadd@f2& (0+255),f,b
  3628  000734  0EFF               	movlw	255
  3629  000736  0100               	movlb	0	; () banked
  3630  000738  1787               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3631  00073A  0E00               	movlw	0
  3632  00073C  0100               	movlb	0	; () banked
  3633  00073E  1788               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3634                           
  3635                           ; BSR set to: 0
  3636  000740  0100               	movlb	0	; () banked
  3637  000742  518D               	movf	___ftadd@exp2& (0+255),w,b
  3638  000744  0100               	movlb	0	; () banked
  3639  000746  5D8E               	subwf	___ftadd@exp1& (0+255),w,b
  3640  000748  B0D8               	btfsc	status,0,c
  3641  00074A  D028               	goto	l3275
  3642  00074C                     l3265:
  3643                           
  3644                           ; BSR set to: 0
  3645  00074C  0100               	movlb	0	; () banked
  3646  00074E  90D8               	bcf	status,0,c
  3647  000750  3786               	rlcf	___ftadd@f2& (0+255),f,b
  3648  000752  3787               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3649  000754  3788               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3650  000756  0100               	movlb	0	; () banked
  3651  000758  078D               	decf	___ftadd@exp2& (0+255),f,b
  3652                           
  3653                           ; BSR set to: 0
  3654  00075A  0100               	movlb	0	; () banked
  3655  00075C  518E               	movf	___ftadd@exp1& (0+255),w,b
  3656  00075E  0100               	movlb	0	; () banked
  3657  000760  198D               	xorwf	___ftadd@exp2& (0+255),w,b
  3658  000762  B4D8               	btfsc	status,2,c
  3659  000764  D013               	goto	l3273
  3660                           
  3661                           ; BSR set to: 0
  3662  000766  0100               	movlb	0	; () banked
  3663  000768  078C               	decf	___ftadd@sign& (0+255),f,b
  3664  00076A  C08C  F089         	movff	___ftadd@sign,??___ftadd
  3665  00076E  0E07               	movlw	7
  3666  000770  0100               	movlb	0	; () banked
  3667  000772  1789               	andwf	??___ftadd& (0+255),f,b
  3668  000774  B4D8               	btfsc	status,2,c
  3669  000776  D00A               	goto	l3273
  3670  000778  D7E9               	goto	l3265
  3671                           
  3672                           ; BSR set to: 0
  3673                           
  3674                           ; BSR set to: 0
  3675  00077A  D008               	goto	l3273
  3676  00077C                     l3271:
  3677                           
  3678                           ; BSR set to: 0
  3679  00077C  0100               	movlb	0	; () banked
  3680  00077E  90D8               	bcf	status,0,c
  3681  000780  3385               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3682  000782  3384               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3683  000784  3383               	rrcf	___ftadd@f1& (0+255),f,b
  3684  000786  0100               	movlb	0	; () banked
  3685  000788  2B8E               	incf	___ftadd@exp1& (0+255),f,b
  3686  00078A  D000               	goto	l3273
  3687  00078C                     l3273:
  3688                           
  3689                           ; BSR set to: 0
  3690  00078C  0100               	movlb	0	; () banked
  3691  00078E  518D               	movf	___ftadd@exp2& (0+255),w,b
  3692  000790  0100               	movlb	0	; () banked
  3693  000792  198E               	xorwf	___ftadd@exp1& (0+255),w,b
  3694  000794  B4D8               	btfsc	status,2,c
  3695  000796  D030               	goto	l989
  3696  000798  D7F1               	goto	l3271
  3697                           
  3698                           ; BSR set to: 0
  3699  00079A  D02E               	goto	l989
  3700  00079C                     l3275:
  3701                           
  3702                           ; BSR set to: 0
  3703  00079C  0100               	movlb	0	; () banked
  3704  00079E  518E               	movf	___ftadd@exp1& (0+255),w,b
  3705  0007A0  0100               	movlb	0	; () banked
  3706  0007A2  5D8D               	subwf	___ftadd@exp2& (0+255),w,b
  3707  0007A4  B0D8               	btfsc	status,0,c
  3708  0007A6  D028               	goto	l989
  3709  0007A8                     l3277:
  3710                           
  3711                           ; BSR set to: 0
  3712  0007A8  0100               	movlb	0	; () banked
  3713  0007AA  90D8               	bcf	status,0,c
  3714  0007AC  3783               	rlcf	___ftadd@f1& (0+255),f,b
  3715  0007AE  3784               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3716  0007B0  3785               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3717  0007B2  0100               	movlb	0	; () banked
  3718  0007B4  078E               	decf	___ftadd@exp1& (0+255),f,b
  3719                           
  3720                           ; BSR set to: 0
  3721  0007B6  0100               	movlb	0	; () banked
  3722  0007B8  518E               	movf	___ftadd@exp1& (0+255),w,b
  3723  0007BA  0100               	movlb	0	; () banked
  3724  0007BC  198D               	xorwf	___ftadd@exp2& (0+255),w,b
  3725  0007BE  B4D8               	btfsc	status,2,c
  3726  0007C0  D013               	goto	l3285
  3727                           
  3728                           ; BSR set to: 0
  3729  0007C2  0100               	movlb	0	; () banked
  3730  0007C4  078C               	decf	___ftadd@sign& (0+255),f,b
  3731  0007C6  C08C  F089         	movff	___ftadd@sign,??___ftadd
  3732  0007CA  0E07               	movlw	7
  3733  0007CC  0100               	movlb	0	; () banked
  3734  0007CE  1789               	andwf	??___ftadd& (0+255),f,b
  3735  0007D0  B4D8               	btfsc	status,2,c
  3736  0007D2  D00A               	goto	l3285
  3737  0007D4  D7E9               	goto	l3277
  3738                           
  3739                           ; BSR set to: 0
  3740                           
  3741                           ; BSR set to: 0
  3742  0007D6  D008               	goto	l3285
  3743  0007D8                     l3283:
  3744                           
  3745                           ; BSR set to: 0
  3746  0007D8  0100               	movlb	0	; () banked
  3747  0007DA  90D8               	bcf	status,0,c
  3748  0007DC  3388               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3749  0007DE  3387               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3750  0007E0  3386               	rrcf	___ftadd@f2& (0+255),f,b
  3751  0007E2  0100               	movlb	0	; () banked
  3752  0007E4  2B8D               	incf	___ftadd@exp2& (0+255),f,b
  3753  0007E6  D000               	goto	l3285
  3754  0007E8                     l3285:
  3755                           
  3756                           ; BSR set to: 0
  3757  0007E8  0100               	movlb	0	; () banked
  3758  0007EA  518D               	movf	___ftadd@exp2& (0+255),w,b
  3759  0007EC  0100               	movlb	0	; () banked
  3760  0007EE  198E               	xorwf	___ftadd@exp1& (0+255),w,b
  3761  0007F0  B4D8               	btfsc	status,2,c
  3762  0007F2  D002               	goto	l989
  3763  0007F4  D7F1               	goto	l3283
  3764                           
  3765                           ; BSR set to: 0
  3766  0007F6  D000               	goto	l989
  3767  0007F8                     l989:
  3768                           
  3769                           ; BSR set to: 0
  3770  0007F8  0100               	movlb	0	; () banked
  3771  0007FA  AF8C               	btfss	___ftadd@sign& (0+255),7,b
  3772  0007FC  D012               	goto	l998
  3773                           
  3774                           ; BSR set to: 0
  3775  0007FE  0EFF               	movlw	255
  3776  000800  0100               	movlb	0	; () banked
  3777  000802  1B83               	xorwf	___ftadd@f1& (0+255),f,b
  3778  000804  0EFF               	movlw	255
  3779  000806  0100               	movlb	0	; () banked
  3780  000808  1B84               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3781  00080A  0EFF               	movlw	255
  3782  00080C  0100               	movlb	0	; () banked
  3783  00080E  1B85               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3784  000810  0E01               	movlw	1
  3785  000812  0100               	movlb	0	; () banked
  3786  000814  2783               	addwf	___ftadd@f1& (0+255),f,b
  3787  000816  0E00               	movlw	0
  3788  000818  0100               	movlb	0	; () banked
  3789  00081A  2384               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3790  00081C  0E00               	movlw	0
  3791  00081E  0100               	movlb	0	; () banked
  3792  000820  2385               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3793  000822                     l998:
  3794                           
  3795                           ; BSR set to: 0
  3796  000822  0100               	movlb	0	; () banked
  3797  000824  AD8C               	btfss	___ftadd@sign& (0+255),6,b
  3798  000826  D013               	goto	l3291
  3799                           
  3800                           ; BSR set to: 0
  3801  000828  0EFF               	movlw	255
  3802  00082A  0100               	movlb	0	; () banked
  3803  00082C  1B86               	xorwf	___ftadd@f2& (0+255),f,b
  3804  00082E  0EFF               	movlw	255
  3805  000830  0100               	movlb	0	; () banked
  3806  000832  1B87               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3807  000834  0EFF               	movlw	255
  3808  000836  0100               	movlb	0	; () banked
  3809  000838  1B88               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3810  00083A  0E01               	movlw	1
  3811  00083C  0100               	movlb	0	; () banked
  3812  00083E  2786               	addwf	___ftadd@f2& (0+255),f,b
  3813  000840  0E00               	movlw	0
  3814  000842  0100               	movlb	0	; () banked
  3815  000844  2387               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3816  000846  0E00               	movlw	0
  3817  000848  0100               	movlb	0	; () banked
  3818  00084A  2388               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3819  00084C  D000               	goto	l3291
  3820  00084E                     l3291:
  3821                           
  3822                           ; BSR set to: 0
  3823  00084E  0E00               	movlw	0
  3824  000850  0100               	movlb	0	; () banked
  3825  000852  6F8C               	movwf	___ftadd@sign& (0+255),b
  3826                           
  3827                           ; BSR set to: 0
  3828  000854  0100               	movlb	0	; () banked
  3829  000856  5183               	movf	___ftadd@f1& (0+255),w,b
  3830  000858  0100               	movlb	0	; () banked
  3831  00085A  2786               	addwf	___ftadd@f2& (0+255),f,b
  3832  00085C  0100               	movlb	0	; () banked
  3833  00085E  5184               	movf	(___ftadd@f1+1)& (0+255),w,b
  3834  000860  0100               	movlb	0	; () banked
  3835  000862  2387               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3836  000864  0100               	movlb	0	; () banked
  3837  000866  5185               	movf	(___ftadd@f1+2)& (0+255),w,b
  3838  000868  0100               	movlb	0	; () banked
  3839  00086A  2388               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3840                           
  3841                           ; BSR set to: 0
  3842  00086C  0100               	movlb	0	; () banked
  3843  00086E  AF88               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3844  000870  D016               	goto	l3301
  3845                           
  3846                           ; BSR set to: 0
  3847  000872  0EFF               	movlw	255
  3848  000874  0100               	movlb	0	; () banked
  3849  000876  1B86               	xorwf	___ftadd@f2& (0+255),f,b
  3850  000878  0EFF               	movlw	255
  3851  00087A  0100               	movlb	0	; () banked
  3852  00087C  1B87               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3853  00087E  0EFF               	movlw	255
  3854  000880  0100               	movlb	0	; () banked
  3855  000882  1B88               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3856  000884  0E01               	movlw	1
  3857  000886  0100               	movlb	0	; () banked
  3858  000888  2786               	addwf	___ftadd@f2& (0+255),f,b
  3859  00088A  0E00               	movlw	0
  3860  00088C  0100               	movlb	0	; () banked
  3861  00088E  2387               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3862  000890  0E00               	movlw	0
  3863  000892  0100               	movlb	0	; () banked
  3864  000894  2388               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3865                           
  3866                           ; BSR set to: 0
  3867  000896  0E01               	movlw	1
  3868  000898  0100               	movlb	0	; () banked
  3869  00089A  6F8C               	movwf	___ftadd@sign& (0+255),b
  3870  00089C  D000               	goto	l3301
  3871  00089E                     l3301:
  3872                           
  3873                           ; BSR set to: 0
  3874  00089E  C086  F060         	movff	___ftadd@f2,___ftpack@arg
  3875  0008A2  C087  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  3876  0008A6  C088  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  3877  0008AA  C08E  F063         	movff	___ftadd@exp1,___ftpack@exp
  3878  0008AE  C08C  F064         	movff	___ftadd@sign,___ftpack@sign
  3879  0008B2  ECD8  F006         	call	___ftpack	;wreg free
  3880  0008B6  C060  F083         	movff	?___ftpack,?___ftadd
  3881  0008BA  C061  F084         	movff	?___ftpack+1,?___ftadd+1
  3882  0008BE  C062  F085         	movff	?___ftpack+2,?___ftadd+2
  3883  0008C2  D000               	goto	l975
  3884  0008C4                     l975:
  3885  0008C4  0012               	return		;funcret
  3886  0008C6                     __end_of___ftadd:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           intcon2	equ	0xFF1
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           indf2	equ	0xFDF
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903 ;; *************** function ___ftneg *****************
  3904 ;; Defined at:
  3905 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;  f1              3   42[COMRAM] float 
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  3   42[COMRAM] float 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3919 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;Total ram usage:        3 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    6
  3926 ;; This function calls:
  3927 ;;		Nothing
  3928 ;; This function is called by:
  3929 ;;		_calculatePID
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text21
  3934  0017AE                     __ptext21:
  3935                           	opt stack 0
  3936  0017AE                     ___ftneg:
  3937                           	opt stack 23
  3938                           
  3939                           ;incstack = 0
  3940  0017AE  502B               	movf	___ftneg@f1,w,c
  3941  0017B0  102C               	iorwf	___ftneg@f1+1,w,c
  3942  0017B2  102D               	iorwf	___ftneg@f1+2,w,c
  3943  0017B4  B4D8               	btfsc	status,2,c
  3944  0017B6  D006               	goto	l1031
  3945  0017B8  0E00               	movlw	0
  3946  0017BA  1A2B               	xorwf	___ftneg@f1,f,c
  3947  0017BC  0E00               	movlw	0
  3948  0017BE  1A2C               	xorwf	___ftneg@f1+1,f,c
  3949  0017C0  0E80               	movlw	128
  3950  0017C2  1A2D               	xorwf	___ftneg@f1+2,f,c
  3951  0017C4                     l1031:
  3952  0017C4  C02B  F02B         	movff	___ftneg@f1,?___ftneg
  3953  0017C8  C02C  F02C         	movff	___ftneg@f1+1,?___ftneg+1
  3954  0017CC  C02D  F02D         	movff	___ftneg@f1+2,?___ftneg+2
  3955  0017D0  0012               	return		;funcret
  3956  0017D2                     __end_of___ftneg:
  3957                           	opt stack 0
  3958                           tblptru	equ	0xFF8
  3959                           tblptrh	equ	0xFF7
  3960                           tblptrl	equ	0xFF6
  3961                           tablat	equ	0xFF5
  3962                           prodh	equ	0xFF4
  3963                           prodl	equ	0xFF3
  3964                           intcon	equ	0xFF2
  3965                           intcon2	equ	0xFF1
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           indf2	equ	0xFDF
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function ___ftge *****************
  3974 ;; Defined at:
  3975 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  ff1             3    0[BANK0 ] float 
  3978 ;;  ff2             3    3[BANK0 ] float 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:        9 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    6
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_calculatePID
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text22
  4005  000EB8                     __ptext22:
  4006                           	opt stack 0
  4007  000EB8                     ___ftge:
  4008                           	opt stack 23
  4009                           
  4010                           ;incstack = 0
  4011  000EB8  0100               	movlb	0	; () banked
  4012  000EBA  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4013  000EBC  D01A               	goto	l3471
  4014                           
  4015                           ; BSR set to: 0
  4016  000EBE  C060  F02B         	movff	___ftge@ff1,??___ftge
  4017  000EC2  C061  F02C         	movff	___ftge@ff1+1,??___ftge+1
  4018  000EC6  C062  F02D         	movff	___ftge@ff1+2,??___ftge+2
  4019  000ECA  1E2B               	comf	??___ftge,f,c
  4020  000ECC  1E2C               	comf	??___ftge+1,f,c
  4021  000ECE  1E2D               	comf	??___ftge+2,f,c
  4022  000ED0  2A2B               	incf	??___ftge,f,c
  4023  000ED2  0E00               	movlw	0
  4024  000ED4  222C               	addwfc	??___ftge+1,f,c
  4025  000ED6  222D               	addwfc	??___ftge+2,f,c
  4026  000ED8  0E00               	movlw	0
  4027  000EDA  242B               	addwf	??___ftge,w,c
  4028  000EDC  0100               	movlb	0	; () banked
  4029  000EDE  6F60               	movwf	___ftge@ff1& (0+255),b
  4030  000EE0  0E00               	movlw	0
  4031  000EE2  202C               	addwfc	??___ftge+1,w,c
  4032  000EE4  0100               	movlb	0	; () banked
  4033  000EE6  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  4034  000EE8  0E80               	movlw	128
  4035  000EEA  202D               	addwfc	??___ftge+2,w,c
  4036  000EEC  0100               	movlb	0	; () banked
  4037  000EEE  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  4038  000EF0  D000               	goto	l3471
  4039  000EF2                     l3471:
  4040                           
  4041                           ; BSR set to: 0
  4042  000EF2  0100               	movlb	0	; () banked
  4043  000EF4  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4044  000EF6  D01A               	goto	l3475
  4045                           
  4046                           ; BSR set to: 0
  4047  000EF8  C063  F02B         	movff	___ftge@ff2,??___ftge
  4048  000EFC  C064  F02C         	movff	___ftge@ff2+1,??___ftge+1
  4049  000F00  C065  F02D         	movff	___ftge@ff2+2,??___ftge+2
  4050  000F04  1E2B               	comf	??___ftge,f,c
  4051  000F06  1E2C               	comf	??___ftge+1,f,c
  4052  000F08  1E2D               	comf	??___ftge+2,f,c
  4053  000F0A  2A2B               	incf	??___ftge,f,c
  4054  000F0C  0E00               	movlw	0
  4055  000F0E  222C               	addwfc	??___ftge+1,f,c
  4056  000F10  222D               	addwfc	??___ftge+2,f,c
  4057  000F12  0E00               	movlw	0
  4058  000F14  242B               	addwf	??___ftge,w,c
  4059  000F16  0100               	movlb	0	; () banked
  4060  000F18  6F63               	movwf	___ftge@ff2& (0+255),b
  4061  000F1A  0E00               	movlw	0
  4062  000F1C  202C               	addwfc	??___ftge+1,w,c
  4063  000F1E  0100               	movlb	0	; () banked
  4064  000F20  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  4065  000F22  0E80               	movlw	128
  4066  000F24  202D               	addwfc	??___ftge+2,w,c
  4067  000F26  0100               	movlb	0	; () banked
  4068  000F28  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  4069  000F2A  D000               	goto	l3475
  4070  000F2C                     l3475:
  4071                           
  4072                           ; BSR set to: 0
  4073  000F2C  0E00               	movlw	0
  4074  000F2E  0100               	movlb	0	; () banked
  4075  000F30  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  4076  000F32  0E00               	movlw	0
  4077  000F34  0100               	movlb	0	; () banked
  4078  000F36  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4079  000F38  0E80               	movlw	128
  4080  000F3A  0100               	movlb	0	; () banked
  4081  000F3C  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4082                           
  4083                           ; BSR set to: 0
  4084  000F3E  0E00               	movlw	0
  4085  000F40  0100               	movlb	0	; () banked
  4086  000F42  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  4087  000F44  0E00               	movlw	0
  4088  000F46  0100               	movlb	0	; () banked
  4089  000F48  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4090  000F4A  0E80               	movlw	128
  4091  000F4C  0100               	movlb	0	; () banked
  4092  000F4E  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4093  000F50  0100               	movlb	0	; () banked
  4094  000F52  5163               	movf	___ftge@ff2& (0+255),w,b
  4095  000F54  0100               	movlb	0	; () banked
  4096  000F56  5D60               	subwf	___ftge@ff1& (0+255),w,b
  4097  000F58  0100               	movlb	0	; () banked
  4098  000F5A  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  4099  000F5C  0100               	movlb	0	; () banked
  4100  000F5E  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4101  000F60  0100               	movlb	0	; () banked
  4102  000F62  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  4103  000F64  0100               	movlb	0	; () banked
  4104  000F66  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4105  000F68  B0D8               	btfsc	status,0,c
  4106  000F6A  D002               	goto	l3481
  4107                           
  4108                           ; BSR set to: 0
  4109  000F6C  90D8               	bcf	status,0,c
  4110  000F6E  D002               	goto	l1015
  4111  000F70                     l3481:
  4112                           
  4113                           ; BSR set to: 0
  4114  000F70  80D8               	bsf	status,0,c
  4115                           
  4116                           ; BSR set to: 0
  4117  000F72  D000               	goto	l1015
  4118  000F74                     l1015:
  4119                           
  4120                           ; BSR set to: 0
  4121  000F74  0012               	return		;funcret
  4122  000F76                     __end_of___ftge:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           intcon2	equ	0xFF1
  4132                           postinc0	equ	0xFEE
  4133                           wreg	equ	0xFE8
  4134                           indf2	equ	0xFDF
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function ___ftdiv *****************
  4140 ;; Defined at:
  4141 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  f1              3    5[BANK0 ] float 
  4144 ;;  f2              3    8[BANK0 ] float 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  f3              3   15[BANK0 ] float 
  4147 ;;  sign            1   19[BANK0 ] unsigned char 
  4148 ;;  exp             1   18[BANK0 ] unsigned char 
  4149 ;;  cntr            1   14[BANK0 ] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  3    5[BANK0 ] float 
  4152 ;; Registers used:
  4153 ;;		wreg, status,2, status,0, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4159 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;Total ram usage:       15 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    7
  4166 ;; This function calls:
  4167 ;;		___ftpack
  4168 ;; This function is called by:
  4169 ;;		_calculatePID
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text23
  4174  000A22                     __ptext23:
  4175                           	opt stack 0
  4176  000A22                     ___ftdiv:
  4177                           	opt stack 22
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;incstack = 0
  4181  000A22  C067  F06B         	movff	___ftdiv@f1+2,??___ftdiv
  4182  000A26  0100               	movlb	0	; () banked
  4183  000A28  6B6C               	clrf	(??___ftdiv+1)& (0+255),b
  4184  000A2A  6B6D               	clrf	(??___ftdiv+2)& (0+255),b
  4185  000A2C  0100               	movlb	0	; () banked
  4186  000A2E  3566               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  4187  000A30  0100               	movlb	0	; () banked
  4188  000A32  376B               	rlcf	??___ftdiv& (0+255),f,b
  4189  000A34  E301               	bnc	u2911
  4190  000A36  816C               	bsf	(??___ftdiv+1)& (0+255),0,b
  4191  000A38                     u2911:
  4192  000A38  0100               	movlb	0	; () banked
  4193  000A3A  516B               	movf	??___ftdiv& (0+255),w,b
  4194  000A3C  0100               	movlb	0	; () banked
  4195  000A3E  6F72               	movwf	___ftdiv@exp& (0+255),b
  4196  000A40  0100               	movlb	0	; () banked
  4197  000A42  5172               	movf	___ftdiv@exp& (0+255),w,b
  4198  000A44  A4D8               	btfss	status,2,c
  4199  000A46  D002               	goto	l3371
  4200  000A48  D014               	goto	l3373
  4201                           
  4202                           ; BSR set to: 0
  4203                           
  4204                           ; BSR set to: 0
  4205  000A4A  D08B               	goto	l1006
  4206  000A4C                     l3371:
  4207                           
  4208                           ; BSR set to: 0
  4209  000A4C  C06A  F06B         	movff	___ftdiv@f2+2,??___ftdiv
  4210  000A50  0100               	movlb	0	; () banked
  4211  000A52  6B6C               	clrf	(??___ftdiv+1)& (0+255),b
  4212  000A54  6B6D               	clrf	(??___ftdiv+2)& (0+255),b
  4213  000A56  0100               	movlb	0	; () banked
  4214  000A58  3569               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  4215  000A5A  0100               	movlb	0	; () banked
  4216  000A5C  376B               	rlcf	??___ftdiv& (0+255),f,b
  4217  000A5E  E301               	bnc	u2931
  4218  000A60  816C               	bsf	(??___ftdiv+1)& (0+255),0,b
  4219  000A62                     u2931:
  4220  000A62  0100               	movlb	0	; () banked
  4221  000A64  516B               	movf	??___ftdiv& (0+255),w,b
  4222  000A66  0100               	movlb	0	; () banked
  4223  000A68  6F73               	movwf	___ftdiv@sign& (0+255),b
  4224  000A6A  0100               	movlb	0	; () banked
  4225  000A6C  5173               	movf	___ftdiv@sign& (0+255),w,b
  4226  000A6E  A4D8               	btfss	status,2,c
  4227  000A70  D00A               	goto	l3377
  4228  000A72                     l3373:
  4229                           
  4230                           ; BSR set to: 0
  4231  000A72  0E00               	movlw	0
  4232  000A74  0100               	movlb	0	; () banked
  4233  000A76  6F65               	movwf	?___ftdiv& (0+255),b
  4234  000A78  0E00               	movlw	0
  4235  000A7A  0100               	movlb	0	; () banked
  4236  000A7C  6F66               	movwf	(?___ftdiv+1)& (0+255),b
  4237  000A7E  0E00               	movlw	0
  4238  000A80  0100               	movlb	0	; () banked
  4239  000A82  6F67               	movwf	(?___ftdiv+2)& (0+255),b
  4240                           
  4241                           ; BSR set to: 0
  4242  000A84  D06E               	goto	l1006
  4243  000A86                     l3377:
  4244                           
  4245                           ; BSR set to: 0
  4246  000A86  0E00               	movlw	0
  4247  000A88  0100               	movlb	0	; () banked
  4248  000A8A  6F6F               	movwf	___ftdiv@f3& (0+255),b
  4249  000A8C  0E00               	movlw	0
  4250  000A8E  0100               	movlb	0	; () banked
  4251  000A90  6F70               	movwf	(___ftdiv@f3+1)& (0+255),b
  4252  000A92  0E00               	movlw	0
  4253  000A94  0100               	movlb	0	; () banked
  4254  000A96  6F71               	movwf	(___ftdiv@f3+2)& (0+255),b
  4255                           
  4256                           ; BSR set to: 0
  4257  000A98  0100               	movlb	0	; () banked
  4258  000A9A  5173               	movf	___ftdiv@sign& (0+255),w,b
  4259  000A9C  0F89               	addlw	137
  4260  000A9E  0100               	movlb	0	; () banked
  4261  000AA0  5F72               	subwf	___ftdiv@exp& (0+255),f,b
  4262                           
  4263                           ; BSR set to: 0
  4264  000AA2  C067  F073         	movff	___ftdiv@f1+2,___ftdiv@sign
  4265                           
  4266                           ; BSR set to: 0
  4267  000AA6  0100               	movlb	0	; () banked
  4268  000AA8  516A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4269  000AAA  0100               	movlb	0	; () banked
  4270  000AAC  1B73               	xorwf	___ftdiv@sign& (0+255),f,b
  4271                           
  4272                           ; BSR set to: 0
  4273  000AAE  0E80               	movlw	128
  4274  000AB0  0100               	movlb	0	; () banked
  4275  000AB2  1773               	andwf	___ftdiv@sign& (0+255),f,b
  4276                           
  4277                           ; BSR set to: 0
  4278  000AB4  0100               	movlb	0	; () banked
  4279  000AB6  8F66               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  4280                           
  4281                           ; BSR set to: 0
  4282  000AB8  0EFF               	movlw	255
  4283  000ABA  0100               	movlb	0	; () banked
  4284  000ABC  1765               	andwf	___ftdiv@f1& (0+255),f,b
  4285  000ABE  0EFF               	movlw	255
  4286  000AC0  0100               	movlb	0	; () banked
  4287  000AC2  1766               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  4288  000AC4  0E00               	movlw	0
  4289  000AC6  0100               	movlb	0	; () banked
  4290  000AC8  1767               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  4291                           
  4292                           ; BSR set to: 0
  4293  000ACA  0100               	movlb	0	; () banked
  4294  000ACC  8F69               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  4295                           
  4296                           ; BSR set to: 0
  4297  000ACE  0EFF               	movlw	255
  4298  000AD0  0100               	movlb	0	; () banked
  4299  000AD2  1768               	andwf	___ftdiv@f2& (0+255),f,b
  4300  000AD4  0EFF               	movlw	255
  4301  000AD6  0100               	movlb	0	; () banked
  4302  000AD8  1769               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  4303  000ADA  0E00               	movlw	0
  4304  000ADC  0100               	movlb	0	; () banked
  4305  000ADE  176A               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  4306                           
  4307                           ; BSR set to: 0
  4308  000AE0  0E18               	movlw	24
  4309  000AE2  0100               	movlb	0	; () banked
  4310  000AE4  6F6E               	movwf	___ftdiv@cntr& (0+255),b
  4311  000AE6  D000               	goto	l3397
  4312  000AE8                     l3397:
  4313                           
  4314                           ; BSR set to: 0
  4315  000AE8  0100               	movlb	0	; () banked
  4316  000AEA  90D8               	bcf	status,0,c
  4317  000AEC  376F               	rlcf	___ftdiv@f3& (0+255),f,b
  4318  000AEE  3770               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  4319  000AF0  3771               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  4320                           
  4321                           ; BSR set to: 0
  4322  000AF2  0100               	movlb	0	; () banked
  4323  000AF4  5168               	movf	___ftdiv@f2& (0+255),w,b
  4324  000AF6  0100               	movlb	0	; () banked
  4325  000AF8  5D65               	subwf	___ftdiv@f1& (0+255),w,b
  4326  000AFA  0100               	movlb	0	; () banked
  4327  000AFC  5169               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4328  000AFE  0100               	movlb	0	; () banked
  4329  000B00  5966               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  4330  000B02  0100               	movlb	0	; () banked
  4331  000B04  516A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4332  000B06  0100               	movlb	0	; () banked
  4333  000B08  5967               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  4334  000B0A  A0D8               	btfss	status,0,c
  4335  000B0C  D00E               	goto	l1009
  4336                           
  4337                           ; BSR set to: 0
  4338  000B0E  0100               	movlb	0	; () banked
  4339  000B10  5168               	movf	___ftdiv@f2& (0+255),w,b
  4340  000B12  0100               	movlb	0	; () banked
  4341  000B14  5F65               	subwf	___ftdiv@f1& (0+255),f,b
  4342  000B16  0100               	movlb	0	; () banked
  4343  000B18  5169               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4344  000B1A  0100               	movlb	0	; () banked
  4345  000B1C  5B66               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  4346  000B1E  0100               	movlb	0	; () banked
  4347  000B20  516A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4348  000B22  0100               	movlb	0	; () banked
  4349  000B24  5B67               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  4350                           
  4351                           ; BSR set to: 0
  4352  000B26  0100               	movlb	0	; () banked
  4353  000B28  816F               	bsf	___ftdiv@f3& (0+255),0,b
  4354  000B2A                     l1009:
  4355                           
  4356                           ; BSR set to: 0
  4357  000B2A  0100               	movlb	0	; () banked
  4358  000B2C  90D8               	bcf	status,0,c
  4359  000B2E  3765               	rlcf	___ftdiv@f1& (0+255),f,b
  4360  000B30  3766               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  4361  000B32  3767               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  4362                           
  4363                           ; BSR set to: 0
  4364  000B34  0100               	movlb	0	; () banked
  4365  000B36  2F6E               	decfsz	___ftdiv@cntr& (0+255),f,b
  4366  000B38  D7D7               	goto	l3397
  4367  000B3A  D000               	goto	l3407
  4368  000B3C                     l3407:
  4369                           
  4370                           ; BSR set to: 0
  4371  000B3C  C06F  F060         	movff	___ftdiv@f3,___ftpack@arg
  4372  000B40  C070  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4373  000B44  C071  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4374  000B48  C072  F063         	movff	___ftdiv@exp,___ftpack@exp
  4375  000B4C  C073  F064         	movff	___ftdiv@sign,___ftpack@sign
  4376  000B50  ECD8  F006         	call	___ftpack	;wreg free
  4377  000B54  C060  F065         	movff	?___ftpack,?___ftdiv
  4378  000B58  C061  F066         	movff	?___ftpack+1,?___ftdiv+1
  4379  000B5C  C062  F067         	movff	?___ftpack+2,?___ftdiv+2
  4380  000B60  D000               	goto	l1006
  4381  000B62                     l1006:
  4382  000B62  0012               	return		;funcret
  4383  000B64                     __end_of___ftdiv:
  4384                           	opt stack 0
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           intcon	equ	0xFF2
  4392                           intcon2	equ	0xFF1
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           indf2	equ	0xFDF
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _SendSPI1 *****************
  4401 ;; Defined at:
  4402 ;;		line 36 in file "SPISlave.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  data            1    wreg     unsigned char 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  data            1   43[COMRAM] unsigned char 
  4407 ;;  temp            1   42[COMRAM] unsigned char 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;		None               void
  4410 ;; Registers used:
  4411 ;;		wreg
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;Total ram usage:        2 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    6
  4424 ;; This function calls:
  4425 ;;		Nothing
  4426 ;; This function is called by:
  4427 ;;		_main
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           	psect	text24
  4432  0018AA                     __ptext24:
  4433                           	opt stack 0
  4434  0018AA                     _SendSPI1:
  4435                           	opt stack 24
  4436                           
  4437                           ;incstack = 0
  4438                           ;SendSPI1@data stored from wreg
  4439  0018AA  6E2C               	movwf	SendSPI1@data,c
  4440                           
  4441                           ;SPISlave.c: 38: SSP1BUF = data;
  4442  0018AC  C02C  FFC9         	movff	SendSPI1@data,4041	;volatile
  4443                           
  4444                           ;SPISlave.c: 39: unsigned char temp;
  4445                           ;SPISlave.c: 40: PIR1bits.SSP1IF = 0;
  4446  0018B0  969E               	bcf	3998,3,c	;volatile
  4447                           
  4448                           ;SPISlave.c: 41: temp = SSP2BUF;
  4449  0018B2  CF66 F02B          	movff	3942,SendSPI1@temp	;volatile
  4450                           
  4451                           ;SPISlave.c: 42: while (!PIR1bits.SSP1IF);
  4452  0018B6  D000               	goto	l422
  4453  0018B8                     l422:
  4454  0018B8  A69E               	btfss	3998,3,c	;volatile
  4455  0018BA  D7FE               	goto	l422
  4456                           
  4457                           ;SPISlave.c: 43: SSP2CON1bits.SSPOV2 = 0;
  4458  0018BC  9C63               	bcf	3939,6,c	;volatile
  4459                           
  4460                           ;SPISlave.c: 44: PIR1bits.SSP1IF = 0;
  4461  0018BE  969E               	bcf	3998,3,c	;volatile
  4462  0018C0  0012               	return		;funcret
  4463  0018C2                     __end_of_SendSPI1:
  4464                           	opt stack 0
  4465                           tblptru	equ	0xFF8
  4466                           tblptrh	equ	0xFF7
  4467                           tblptrl	equ	0xFF6
  4468                           tablat	equ	0xFF5
  4469                           prodh	equ	0xFF4
  4470                           prodl	equ	0xFF3
  4471                           intcon	equ	0xFF2
  4472                           intcon2	equ	0xFF1
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           indf2	equ	0xFDF
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function _SPIReassembleDouble *****************
  4481 ;; Defined at:
  4482 ;;		line 71 in file "SPISlave.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  dub             3    0[BANK0 ] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  3   42[COMRAM] unsigned char 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4496 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;Total ram usage:        6 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    6
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_main
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text25
  4511  001562                     __ptext25:
  4512                           	opt stack 0
  4513  001562                     _SPIReassembleDouble:
  4514                           	opt stack 24
  4515                           
  4516                           ;SPISlave.c: 73: double dub;
  4517                           ;SPISlave.c: 74: DoublePtr = (unsigned char*) &dub;
  4518                           
  4519                           ;incstack = 0
  4520  001562  0E60               	movlw	low SPIReassembleDouble@dub
  4521  001564  6E32               	movwf	_DoublePtr,c
  4522  001566  0E00               	movlw	high SPIReassembleDouble@dub
  4523  001568  6E33               	movwf	_DoublePtr+1,c
  4524                           
  4525                           ;SPISlave.c: 75: DoublePtr[0] = DoubleSPIS[0];
  4526  00156A  C032  FFD9         	movff	_DoublePtr,fsr2l
  4527  00156E  C033  FFDA         	movff	_DoublePtr+1,fsr2h
  4528  001572  C0AF  FFDF         	movff	_DoubleSPIS,indf2
  4529                           
  4530                           ;SPISlave.c: 76: DoublePtr[1] = DoubleSPIS[1];
  4531  001576  EE20 F001          	lfsr	2,1
  4532  00157A  5032               	movf	_DoublePtr,w,c
  4533  00157C  26D9               	addwf	fsr2l,f,c
  4534  00157E  5033               	movf	_DoublePtr+1,w,c
  4535  001580  22DA               	addwfc	fsr2h,f,c
  4536  001582  C0B0  FFDF         	movff	_DoubleSPIS+1,indf2
  4537                           
  4538                           ;SPISlave.c: 77: DoublePtr[2] = DoubleSPIS[2];
  4539  001586  EE20 F002          	lfsr	2,2
  4540  00158A  5032               	movf	_DoublePtr,w,c
  4541  00158C  26D9               	addwf	fsr2l,f,c
  4542  00158E  5033               	movf	_DoublePtr+1,w,c
  4543  001590  22DA               	addwfc	fsr2h,f,c
  4544  001592  C0B1  FFDF         	movff	_DoubleSPIS+2,indf2
  4545                           
  4546                           ;SPISlave.c: 79: return dub;
  4547  001596  C060  F02B         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  4548  00159A  C061  F02C         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  4549  00159E  C062  F02D         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  4550  0015A2  D000               	goto	l442
  4551  0015A4                     l442:
  4552  0015A4  0012               	return		;funcret
  4553  0015A6                     __end_of_SPIReassembleDouble:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           intcon2	equ	0xFF1
  4563                           postinc0	equ	0xFEE
  4564                           wreg	equ	0xFE8
  4565                           indf2	equ	0xFDF
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _SPIDisassembleDouble *****************
  4571 ;; Defined at:
  4572 ;;		line 54 in file "SPISlave.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  dub             3    0[BANK0 ] unsigned char 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;		None               void
  4579 ;; Registers used:
  4580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:        3 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    7
  4593 ;; This function calls:
  4594 ;;		_GenerateChecksum
  4595 ;; This function is called by:
  4596 ;;		_main
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text26
  4601  0015A6                     __ptext26:
  4602                           	opt stack 0
  4603  0015A6                     _SPIDisassembleDouble:
  4604                           	opt stack 23
  4605                           
  4606                           ;SPISlave.c: 56: DoublePtr = (unsigned char*) &dub;
  4607                           
  4608                           ;incstack = 0
  4609  0015A6  0E60               	movlw	low SPIDisassembleDouble@dub
  4610  0015A8  6E32               	movwf	_DoublePtr,c
  4611  0015AA  0E00               	movlw	high SPIDisassembleDouble@dub
  4612  0015AC  6E33               	movwf	_DoublePtr+1,c
  4613                           
  4614                           ;SPISlave.c: 57: DoubleSPIS[0] = DoublePtr[0];
  4615  0015AE  C032  FFD9         	movff	_DoublePtr,fsr2l
  4616  0015B2  C033  FFDA         	movff	_DoublePtr+1,fsr2h
  4617  0015B6  50DF               	movf	indf2,w,c
  4618  0015B8  0100               	movlb	0	; () banked
  4619  0015BA  6FAF               	movwf	_DoubleSPIS& (0+255),b
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;SPISlave.c: 58: DoubleSPIS[1] = DoublePtr[1];
  4623  0015BC  EE20 F001          	lfsr	2,1
  4624  0015C0  5032               	movf	_DoublePtr,w,c
  4625  0015C2  26D9               	addwf	fsr2l,f,c
  4626  0015C4  5033               	movf	_DoublePtr+1,w,c
  4627  0015C6  22DA               	addwfc	fsr2h,f,c
  4628  0015C8  50DF               	movf	indf2,w,c
  4629  0015CA  0100               	movlb	0	; () banked
  4630  0015CC  6FB0               	movwf	(_DoubleSPIS+1)& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;SPISlave.c: 59: DoubleSPIS[2] = DoublePtr[2];
  4634  0015CE  EE20 F002          	lfsr	2,2
  4635  0015D2  5032               	movf	_DoublePtr,w,c
  4636  0015D4  26D9               	addwf	fsr2l,f,c
  4637  0015D6  5033               	movf	_DoublePtr+1,w,c
  4638  0015D8  22DA               	addwfc	fsr2h,f,c
  4639  0015DA  50DF               	movf	indf2,w,c
  4640  0015DC  0100               	movlb	0	; () banked
  4641  0015DE  6FB1               	movwf	(_DoubleSPIS+2)& (0+255),b
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;SPISlave.c: 60: DoubleSPIS[3] = GenerateChecksum();
  4645  0015E0  EC4F  F00B         	call	_GenerateChecksum	;wreg free
  4646  0015E4  0100               	movlb	0	; () banked
  4647  0015E6  6FB2               	movwf	(_DoubleSPIS+3)& (0+255),b
  4648                           
  4649                           ; BSR set to: 0
  4650  0015E8  0012               	return		;funcret
  4651  0015EA                     __end_of_SPIDisassembleDouble:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           intcon2	equ	0xFF1
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           indf2	equ	0xFDF
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _GenerateChecksum *****************
  4669 ;; Defined at:
  4670 ;;		line 63 in file "SPISlave.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  y               1   43[COMRAM] unsigned char 
  4675 ;;  sum             1   42[COMRAM] unsigned char 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      unsigned char 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;Total ram usage:        2 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    6
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_SPIDisassembleDouble
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text27
  4700  00169E                     __ptext27:
  4701                           	opt stack 0
  4702  00169E                     _GenerateChecksum:
  4703                           	opt stack 23
  4704                           
  4705                           ;SPISlave.c: 65: unsigned char y, sum = 0;
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;incstack = 0
  4709  00169E  0E00               	movlw	0
  4710  0016A0  6E2B               	movwf	GenerateChecksum@sum,c
  4711                           
  4712                           ;SPISlave.c: 66: for (y = 0; y != 3; y++)
  4713  0016A2  0E00               	movlw	0
  4714  0016A4  6E2C               	movwf	GenerateChecksum@y,c
  4715  0016A6                     l3329:
  4716  0016A6  0E03               	movlw	3
  4717  0016A8  182C               	xorwf	GenerateChecksum@y,w,c
  4718  0016AA  B4D8               	btfsc	status,2,c
  4719  0016AC  D00E               	goto	l3339
  4720  0016AE  D001               	goto	l3333
  4721  0016B0  D00C               	goto	l3339
  4722  0016B2                     l3333:
  4723                           
  4724                           ;SPISlave.c: 67: sum += DoubleSPIS[y];
  4725  0016B2  502C               	movf	GenerateChecksum@y,w,c
  4726  0016B4  0D01               	mullw	1
  4727  0016B6  0EAF               	movlw	low _DoubleSPIS
  4728  0016B8  24F3               	addwf	prodl,w,c
  4729  0016BA  6ED9               	movwf	fsr2l,c
  4730  0016BC  0E00               	movlw	high _DoubleSPIS
  4731  0016BE  20F4               	addwfc	prodh,w,c
  4732  0016C0  6EDA               	movwf	fsr2h,c
  4733  0016C2  50DF               	movf	indf2,w,c
  4734  0016C4  262B               	addwf	GenerateChecksum@sum,f,c
  4735  0016C6  2A2C               	incf	GenerateChecksum@y,f,c
  4736  0016C8  D7EE               	goto	l3329
  4737  0016CA                     l3339:
  4738                           
  4739                           ;SPISlave.c: 68: return sum;
  4740  0016CA  502B               	movf	GenerateChecksum@sum,w,c
  4741  0016CC  D000               	goto	l439
  4742  0016CE                     l439:
  4743  0016CE  0012               	return		;funcret
  4744  0016D0                     __end_of_GenerateChecksum:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           intcon	equ	0xFF2
  4753                           intcon2	equ	0xFF1
  4754                           postinc0	equ	0xFEE
  4755                           wreg	equ	0xFE8
  4756                           indf2	equ	0xFDF
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function _ReceiveSPI1 *****************
  4762 ;; Defined at:
  4763 ;;		line 47 in file "SPISlave.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      unsigned char 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    6
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_main
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text28
  4792  001920                     __ptext28:
  4793                           	opt stack 0
  4794  001920                     _ReceiveSPI1:
  4795                           	opt stack 24
  4796                           
  4797                           ;SPISlave.c: 49: SSP1BUF = 0x00;
  4798                           
  4799                           ;incstack = 0
  4800  001920  0E00               	movlw	0
  4801  001922  6EC9               	movwf	4041,c	;volatile
  4802                           
  4803                           ;SPISlave.c: 50: while (SSP1STATbits.BF == 0);
  4804  001924  D000               	goto	l428
  4805  001926                     l428:
  4806  001926  A0C7               	btfss	4039,0,c	;volatile
  4807  001928  D7FE               	goto	l428
  4808                           
  4809                           ;SPISlave.c: 51: return SSP1BUF;
  4810  00192A  50C9               	movf	4041,w,c	;volatile
  4811  00192C  D000               	goto	l431
  4812  00192E                     l431:
  4813  00192E  0012               	return		;funcret
  4814  001930                     __end_of_ReceiveSPI1:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           indf2	equ	0xFDF
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _ReadRTDpos *****************
  4832 ;; Defined at:
  4833 ;;		line 39 in file "ResolverToDigital.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  FullPosition    2    5[BANK0 ] unsigned int 
  4838 ;;  helloworld      2    0        unsigned int 
  4839 ;;  x               1    7[BANK0 ] unsigned char 
  4840 ;;  LowPosition     1    4[BANK0 ] unsigned char 
  4841 ;;  HighPosition    1    3[BANK0 ] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  2   43[COMRAM] unsigned int 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;Total ram usage:       10 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    7
  4858 ;; This function calls:
  4859 ;;		_Delay10TCYx
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text29
  4866  0012B6                     __ptext29:
  4867                           	opt stack 0
  4868  0012B6                     _ReadRTDpos:
  4869                           	opt stack 23
  4870                           
  4871                           ;ResolverToDigital.c: 41: unsigned char x;
  4872                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  4873                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  4874                           ;ResolverToDigital.c: 48: {
  4875                           ;ResolverToDigital.c: 49: PORTEbits.RE1 = 1;
  4876                           
  4877                           ;incstack = 0
  4878  0012B6  8284               	bsf	3972,1,c	;volatile
  4879                           
  4880                           ;ResolverToDigital.c: 50: PORTEbits.RE0 = 0;
  4881  0012B8  9084               	bcf	3972,0,c	;volatile
  4882                           
  4883                           ;ResolverToDigital.c: 51: for (x = 0; x < 8; x++)
  4884  0012BA  0E00               	movlw	0
  4885  0012BC  0100               	movlb	0	; () banked
  4886  0012BE  6F67               	movwf	ReadRTDpos@x& (0+255),b
  4887  0012C0  D004               	goto	l3593
  4888                           
  4889                           ; BSR set to: 0
  4890                           
  4891                           ; BSR set to: 0
  4892  0012C2  D007               	goto	l185
  4893  0012C4                     l184:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;ResolverToDigital.c: 52: __nop();
  4897  0012C4  F000               	nop	
  4898  0012C6  0100               	movlb	0	; () banked
  4899  0012C8  2B67               	incf	ReadRTDpos@x& (0+255),f,b
  4900  0012CA                     l3593:
  4901                           
  4902                           ; BSR set to: 0
  4903  0012CA  0E07               	movlw	7
  4904  0012CC  0100               	movlb	0	; () banked
  4905  0012CE  6567               	cpfsgt	ReadRTDpos@x& (0+255),b
  4906  0012D0  D7F9               	goto	l184
  4907  0012D2                     l185:
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;ResolverToDigital.c: 53: PORTEbits.RE2 = 1;
  4911  0012D2  8484               	bsf	3972,2,c	;volatile
  4912                           
  4913                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 0;
  4914  0012D4  9484               	bcf	3972,2,c	;volatile
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;ResolverToDigital.c: 55: Delay10TCYx(1);
  4918  0012D6  0E01               	movlw	1
  4919  0012D8  EC7E  F00C         	call	_Delay10TCYx
  4920                           
  4921                           ;ResolverToDigital.c: 56: HighPosition = PORTH;
  4922  0012DC  CF87 F063          	movff	3975,ReadRTDpos@HighPosition	;volatile
  4923                           
  4924                           ;ResolverToDigital.c: 57: LowPosition = PORTD;
  4925  0012E0  CF83 F064          	movff	3971,ReadRTDpos@LowPosition	;volatile
  4926                           
  4927                           ;ResolverToDigital.c: 58: PORTEbits.RE2 = 1;
  4928  0012E4  8484               	bsf	3972,2,c	;volatile
  4929                           
  4930                           ;ResolverToDigital.c: 59: PORTEbits.RE0 = 1;
  4931  0012E6  8084               	bsf	3972,0,c	;volatile
  4932                           
  4933                           ;ResolverToDigital.c: 60: FullPosition = LowPosition;
  4934  0012E8  C064  F065         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  4935  0012EC  0100               	movlb	0	; () banked
  4936  0012EE  6B66               	clrf	(ReadRTDpos@FullPosition+1)& (0+255),b
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;ResolverToDigital.c: 61: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  4940  0012F0  C063  F060         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  4941  0012F4  0E0F               	movlw	15
  4942  0012F6  0100               	movlb	0	; () banked
  4943  0012F8  1760               	andwf	??_ReadRTDpos& (0+255),f,b
  4944  0012FA  0100               	movlb	0	; () banked
  4945  0012FC  5160               	movf	??_ReadRTDpos& (0+255),w,b
  4946  0012FE  0100               	movlb	0	; () banked
  4947  001300  6F62               	movwf	(??_ReadRTDpos+2)& (0+255),b
  4948  001302  6B61               	clrf	(??_ReadRTDpos+1)& (0+255),b
  4949  001304  0100               	movlb	0	; () banked
  4950  001306  5165               	movf	ReadRTDpos@FullPosition& (0+255),w,b
  4951  001308  0100               	movlb	0	; () banked
  4952  00130A  1161               	iorwf	(??_ReadRTDpos+1)& (0+255),w,b
  4953  00130C  0100               	movlb	0	; () banked
  4954  00130E  6F65               	movwf	ReadRTDpos@FullPosition& (0+255),b
  4955  001310  0100               	movlb	0	; () banked
  4956  001312  5166               	movf	(ReadRTDpos@FullPosition+1)& (0+255),w,b
  4957  001314  0100               	movlb	0	; () banked
  4958  001316  1162               	iorwf	(??_ReadRTDpos+2)& (0+255),w,b
  4959  001318  0100               	movlb	0	; () banked
  4960  00131A  6F66               	movwf	(ReadRTDpos@FullPosition+1)& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;ResolverToDigital.c: 62: return FullPosition;
  4964  00131C  C065  F02C         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  4965  001320  C066  F02D         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  4966  001324  D000               	goto	l186
  4967  001326                     l186:
  4968                           
  4969                           ; BSR set to: 0
  4970  001326  0012               	return		;funcret
  4971  001328                     __end_of_ReadRTDpos:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           intcon2	equ	0xFF1
  4981                           postinc0	equ	0xFEE
  4982                           wreg	equ	0xFE8
  4983                           indf2	equ	0xFDF
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function _Delay10TCYx *****************
  4989 ;; Defined at:
  4990 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  unit            1    wreg     unsigned char 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  unit            1   42[COMRAM] unsigned char 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;Total ram usage:        1 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    6
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_RTDInit
  5015 ;;		_ReadRTDpos
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text30
  5020  0018FC                     __ptext30:
  5021                           	opt stack 0
  5022  0018FC                     _Delay10TCYx:
  5023                           	opt stack 22
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027                           ;Delay10TCYx@unit stored from wreg
  5028  0018FC  6E2B               	movwf	Delay10TCYx@unit,c
  5029  0018FE  0E03               	movlw	3
  5030  001900                     u3577:
  5031  001900  2EE8               	decfsz	wreg,f,c
  5032  001902  D7FE               	goto	u3577
  5033  001904  F000               	nop	
  5034  001906  2E2B               	decfsz	Delay10TCYx@unit,f,c
  5035  001908  D7FA               	goto	l3213
  5036  00190A  D000               	goto	l830
  5037  00190C                     l830:
  5038  00190C  0012               	return		;funcret
  5039  00190E                     __end_of_Delay10TCYx:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           intcon2	equ	0xFF1
  5049                           postinc0	equ	0xFEE
  5050                           wreg	equ	0xFE8
  5051                           indf2	equ	0xFDF
  5052                           fsr2h	equ	0xFDA
  5053                           fsr2l	equ	0xFD9
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function _RTD2Angle *****************
  5057 ;; Defined at:
  5058 ;;		line 97 in file "ResolverToDigital.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  RTDAngle        2   35[BANK0 ] unsigned int 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;		None
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  3   35[BANK0 ] unsigned int 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5072 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;Total ram usage:        3 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    8
  5079 ;; This function calls:
  5080 ;;		___ftmul
  5081 ;;		___lwtoft
  5082 ;; This function is called by:
  5083 ;;		_main
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text31
  5088  00162A                     __ptext31:
  5089                           	opt stack 0
  5090  00162A                     _RTD2Angle:
  5091                           	opt stack 22
  5092                           
  5093                           ;ResolverToDigital.c: 99: return 0.087890625 * RTDAngle;
  5094                           
  5095                           ;incstack = 0
  5096  00162A  C083  F065         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  5097  00162E  C084  F066         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  5098  001632  ECAD  F00B         	call	___lwtoft	;wreg free
  5099  001636  C065  F074         	movff	?___lwtoft,___ftmul@f1
  5100  00163A  C066  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  5101  00163E  C067  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  5102  001642  0E00               	movlw	0
  5103  001644  0100               	movlb	0	; () banked
  5104  001646  6F77               	movwf	___ftmul@f2& (0+255),b
  5105  001648  0EB4               	movlw	180
  5106  00164A  0100               	movlb	0	; () banked
  5107  00164C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5108  00164E  0E3D               	movlw	61
  5109  001650  0100               	movlb	0	; () banked
  5110  001652  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5111  001654  EC63  F004         	call	___ftmul	;wreg free
  5112  001658  C074  F083         	movff	?___ftmul,?_RTD2Angle
  5113  00165C  C075  F084         	movff	?___ftmul+1,?_RTD2Angle+1
  5114  001660  C076  F085         	movff	?___ftmul+2,?_RTD2Angle+2
  5115  001664  D000               	goto	l194
  5116  001666                     l194:
  5117  001666  0012               	return		;funcret
  5118  001668                     __end_of_RTD2Angle:
  5119                           	opt stack 0
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           intcon2	equ	0xFF1
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           indf2	equ	0xFDF
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function ___lwtoft *****************
  5136 ;; Defined at:
  5137 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  c               2    5[BANK0 ] unsigned int 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  3    5[BANK0 ] float 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5151 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;Total ram usage:        3 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    7
  5158 ;; This function calls:
  5159 ;;		___ftpack
  5160 ;; This function is called by:
  5161 ;;		_RTD2Angle
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text32
  5166  00175A                     __ptext32:
  5167                           	opt stack 0
  5168  00175A                     ___lwtoft:
  5169                           	opt stack 22
  5170                           
  5171                           ;incstack = 0
  5172  00175A  C065  F060         	movff	___lwtoft@c,___ftpack@arg
  5173  00175E  C066  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  5174  001762  0100               	movlb	0	; () banked
  5175  001764  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  5176  001766  0E8E               	movlw	142
  5177  001768  0100               	movlb	0	; () banked
  5178  00176A  6F63               	movwf	___ftpack@exp& (0+255),b
  5179  00176C  0E00               	movlw	0
  5180  00176E  0100               	movlb	0	; () banked
  5181  001770  6F64               	movwf	___ftpack@sign& (0+255),b
  5182  001772  ECD8  F006         	call	___ftpack	;wreg free
  5183  001776  C060  F065         	movff	?___ftpack,?___lwtoft
  5184  00177A  C061  F066         	movff	?___ftpack+1,?___lwtoft+1
  5185  00177E  C062  F067         	movff	?___ftpack+2,?___lwtoft+2
  5186  001782  D000               	goto	l1171
  5187  001784                     l1171:
  5188  001784  0012               	return		;funcret
  5189  001786                     __end_of___lwtoft:
  5190                           	opt stack 0
  5191                           tblptru	equ	0xFF8
  5192                           tblptrh	equ	0xFF7
  5193                           tblptrl	equ	0xFF6
  5194                           tablat	equ	0xFF5
  5195                           prodh	equ	0xFF4
  5196                           prodl	equ	0xFF3
  5197                           intcon	equ	0xFF2
  5198                           intcon2	equ	0xFF1
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           indf2	equ	0xFDF
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function ___ftmul *****************
  5207 ;; Defined at:
  5208 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  f1              3   20[BANK0 ] float 
  5211 ;;  f2              3   23[BANK0 ] float 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  5214 ;;  sign            1   34[BANK0 ] unsigned char 
  5215 ;;  cntr            1   33[BANK0 ] unsigned char 
  5216 ;;  exp             1   29[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  3   20[BANK0 ] float 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:       15 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    7
  5233 ;; This function calls:
  5234 ;;		___ftpack
  5235 ;; This function is called by:
  5236 ;;		_calculatePID
  5237 ;;		_RTD2Angle
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           	psect	text33
  5242  0008C6                     __ptext33:
  5243                           	opt stack 0
  5244  0008C6                     ___ftmul:
  5245                           	opt stack 22
  5246                           
  5247                           ;incstack = 0
  5248  0008C6  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  5249  0008CA  0100               	movlb	0	; () banked
  5250  0008CC  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  5251  0008CE  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  5252  0008D0  0100               	movlb	0	; () banked
  5253  0008D2  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5254  0008D4  0100               	movlb	0	; () banked
  5255  0008D6  377A               	rlcf	??___ftmul& (0+255),f,b
  5256  0008D8  E301               	bnc	u2961
  5257  0008DA  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  5258  0008DC                     u2961:
  5259  0008DC  0100               	movlb	0	; () banked
  5260  0008DE  517A               	movf	??___ftmul& (0+255),w,b
  5261  0008E0  0100               	movlb	0	; () banked
  5262  0008E2  6F7D               	movwf	___ftmul@exp& (0+255),b
  5263  0008E4  0100               	movlb	0	; () banked
  5264  0008E6  517D               	movf	___ftmul@exp& (0+255),w,b
  5265  0008E8  A4D8               	btfss	status,2,c
  5266  0008EA  D002               	goto	l3417
  5267  0008EC  D014               	goto	l3419
  5268                           
  5269                           ; BSR set to: 0
  5270                           
  5271                           ; BSR set to: 0
  5272  0008EE  D098               	goto	l1021
  5273  0008F0                     l3417:
  5274                           
  5275                           ; BSR set to: 0
  5276  0008F0  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  5277  0008F4  0100               	movlb	0	; () banked
  5278  0008F6  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  5279  0008F8  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  5280  0008FA  0100               	movlb	0	; () banked
  5281  0008FC  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5282  0008FE  0100               	movlb	0	; () banked
  5283  000900  377A               	rlcf	??___ftmul& (0+255),f,b
  5284  000902  E301               	bnc	u2981
  5285  000904  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  5286  000906                     u2981:
  5287  000906  0100               	movlb	0	; () banked
  5288  000908  517A               	movf	??___ftmul& (0+255),w,b
  5289  00090A  0100               	movlb	0	; () banked
  5290  00090C  6F82               	movwf	___ftmul@sign& (0+255),b
  5291  00090E  0100               	movlb	0	; () banked
  5292  000910  5182               	movf	___ftmul@sign& (0+255),w,b
  5293  000912  A4D8               	btfss	status,2,c
  5294  000914  D00A               	goto	l3423
  5295  000916                     l3419:
  5296                           
  5297                           ; BSR set to: 0
  5298  000916  0E00               	movlw	0
  5299  000918  0100               	movlb	0	; () banked
  5300  00091A  6F74               	movwf	?___ftmul& (0+255),b
  5301  00091C  0E00               	movlw	0
  5302  00091E  0100               	movlb	0	; () banked
  5303  000920  6F75               	movwf	(?___ftmul+1)& (0+255),b
  5304  000922  0E00               	movlw	0
  5305  000924  0100               	movlb	0	; () banked
  5306  000926  6F76               	movwf	(?___ftmul+2)& (0+255),b
  5307                           
  5308                           ; BSR set to: 0
  5309  000928  D07B               	goto	l1021
  5310  00092A                     l3423:
  5311                           
  5312                           ; BSR set to: 0
  5313  00092A  0100               	movlb	0	; () banked
  5314  00092C  5182               	movf	___ftmul@sign& (0+255),w,b
  5315  00092E  0F7B               	addlw	123
  5316  000930  0100               	movlb	0	; () banked
  5317  000932  277D               	addwf	___ftmul@exp& (0+255),f,b
  5318                           
  5319                           ; BSR set to: 0
  5320  000934  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  5321  000938  0100               	movlb	0	; () banked
  5322  00093A  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5323  00093C  0100               	movlb	0	; () banked
  5324  00093E  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  5325  000940  0E80               	movlw	128
  5326  000942  0100               	movlb	0	; () banked
  5327  000944  1782               	andwf	___ftmul@sign& (0+255),f,b
  5328                           
  5329                           ; BSR set to: 0
  5330  000946  0100               	movlb	0	; () banked
  5331  000948  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5332                           
  5333                           ; BSR set to: 0
  5334  00094A  0100               	movlb	0	; () banked
  5335  00094C  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5336                           
  5337                           ; BSR set to: 0
  5338  00094E  0EFF               	movlw	255
  5339  000950  0100               	movlb	0	; () banked
  5340  000952  1777               	andwf	___ftmul@f2& (0+255),f,b
  5341  000954  0EFF               	movlw	255
  5342  000956  0100               	movlb	0	; () banked
  5343  000958  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5344  00095A  0E00               	movlw	0
  5345  00095C  0100               	movlb	0	; () banked
  5346  00095E  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5347                           
  5348                           ; BSR set to: 0
  5349  000960  0E00               	movlw	0
  5350  000962  0100               	movlb	0	; () banked
  5351  000964  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  5352  000966  0E00               	movlw	0
  5353  000968  0100               	movlb	0	; () banked
  5354  00096A  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5355  00096C  0E00               	movlw	0
  5356  00096E  0100               	movlb	0	; () banked
  5357  000970  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5358                           
  5359                           ; BSR set to: 0
  5360  000972  0E07               	movlw	7
  5361  000974  0100               	movlb	0	; () banked
  5362  000976  6F81               	movwf	___ftmul@cntr& (0+255),b
  5363  000978  D000               	goto	l3437
  5364  00097A                     l3437:
  5365                           
  5366                           ; BSR set to: 0
  5367  00097A  0100               	movlb	0	; () banked
  5368  00097C  A174               	btfss	___ftmul@f1& (0+255),0,b
  5369  00097E  D00D               	goto	l3441
  5370                           
  5371                           ; BSR set to: 0
  5372  000980  0100               	movlb	0	; () banked
  5373  000982  5177               	movf	___ftmul@f2& (0+255),w,b
  5374  000984  0100               	movlb	0	; () banked
  5375  000986  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5376  000988  0100               	movlb	0	; () banked
  5377  00098A  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  5378  00098C  0100               	movlb	0	; () banked
  5379  00098E  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5380  000990  0100               	movlb	0	; () banked
  5381  000992  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5382  000994  0100               	movlb	0	; () banked
  5383  000996  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5384  000998  D000               	goto	l3441
  5385  00099A                     l3441:
  5386                           
  5387                           ; BSR set to: 0
  5388  00099A  0100               	movlb	0	; () banked
  5389  00099C  90D8               	bcf	status,0,c
  5390  00099E  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5391  0009A0  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5392  0009A2  3374               	rrcf	___ftmul@f1& (0+255),f,b
  5393  0009A4  0100               	movlb	0	; () banked
  5394  0009A6  90D8               	bcf	status,0,c
  5395  0009A8  3777               	rlcf	___ftmul@f2& (0+255),f,b
  5396  0009AA  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5397  0009AC  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5398                           
  5399                           ; BSR set to: 0
  5400  0009AE  0100               	movlb	0	; () banked
  5401  0009B0  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  5402  0009B2  D7E3               	goto	l3437
  5403  0009B4  D000               	goto	l3445
  5404  0009B6                     l3445:
  5405                           
  5406                           ; BSR set to: 0
  5407  0009B6  0E09               	movlw	9
  5408  0009B8  0100               	movlb	0	; () banked
  5409  0009BA  6F81               	movwf	___ftmul@cntr& (0+255),b
  5410  0009BC  D000               	goto	l3447
  5411  0009BE                     l3447:
  5412                           
  5413                           ; BSR set to: 0
  5414  0009BE  0100               	movlb	0	; () banked
  5415  0009C0  A174               	btfss	___ftmul@f1& (0+255),0,b
  5416  0009C2  D00D               	goto	l3451
  5417                           
  5418                           ; BSR set to: 0
  5419  0009C4  0100               	movlb	0	; () banked
  5420  0009C6  5177               	movf	___ftmul@f2& (0+255),w,b
  5421  0009C8  0100               	movlb	0	; () banked
  5422  0009CA  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5423  0009CC  0100               	movlb	0	; () banked
  5424  0009CE  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  5425  0009D0  0100               	movlb	0	; () banked
  5426  0009D2  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5427  0009D4  0100               	movlb	0	; () banked
  5428  0009D6  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  5429  0009D8  0100               	movlb	0	; () banked
  5430  0009DA  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5431  0009DC  D000               	goto	l3451
  5432  0009DE                     l3451:
  5433                           
  5434                           ; BSR set to: 0
  5435  0009DE  0100               	movlb	0	; () banked
  5436  0009E0  90D8               	bcf	status,0,c
  5437  0009E2  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5438  0009E4  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5439  0009E6  3374               	rrcf	___ftmul@f1& (0+255),f,b
  5440  0009E8  0100               	movlb	0	; () banked
  5441  0009EA  90D8               	bcf	status,0,c
  5442  0009EC  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5443  0009EE  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5444  0009F0  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5445                           
  5446                           ; BSR set to: 0
  5447  0009F2  0100               	movlb	0	; () banked
  5448  0009F4  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  5449  0009F6  D7E3               	goto	l3447
  5450  0009F8  D000               	goto	l3455
  5451  0009FA                     l3455:
  5452                           
  5453                           ; BSR set to: 0
  5454  0009FA  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  5455  0009FE  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5456  000A02  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5457  000A06  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  5458  000A0A  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  5459  000A0E  ECD8  F006         	call	___ftpack	;wreg free
  5460  000A12  C060  F074         	movff	?___ftpack,?___ftmul
  5461  000A16  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  5462  000A1A  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  5463  000A1E  D000               	goto	l1021
  5464  000A20                     l1021:
  5465  000A20  0012               	return		;funcret
  5466  000A22                     __end_of___ftmul:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           intcon2	equ	0xFF1
  5476                           postinc0	equ	0xFEE
  5477                           wreg	equ	0xFE8
  5478                           indf2	equ	0xFDF
  5479                           fsr2h	equ	0xFDA
  5480                           fsr2l	equ	0xFD9
  5481                           status	equ	0xFD8
  5482                           
  5483 ;; *************** function ___ftpack *****************
  5484 ;; Defined at:
  5485 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  arg             3    0[BANK0 ] unsigned um
  5488 ;;  exp             1    3[BANK0 ] unsigned char 
  5489 ;;  sign            1    4[BANK0 ] unsigned char 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  3    0[BANK0 ] float 
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5501 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;Total ram usage:        8 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    6
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		___ftadd
  5512 ;;		___ftdiv
  5513 ;;		___ftmul
  5514 ;;		___lwtoft
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text34
  5519  000DB0                     __ptext34:
  5520                           	opt stack 0
  5521  000DB0                     ___ftpack:
  5522                           	opt stack 21
  5523                           
  5524                           ;incstack = 0
  5525  000DB0  0100               	movlb	0	; () banked
  5526  000DB2  5163               	movf	___ftpack@exp& (0+255),w,b
  5527  000DB4  0100               	movlb	0	; () banked
  5528  000DB6  B4D8               	btfsc	status,2,c
  5529  000DB8  D008               	goto	l3181
  5530                           
  5531                           ; BSR set to: 0
  5532  000DBA  0100               	movlb	0	; () banked
  5533  000DBC  5160               	movf	___ftpack@arg& (0+255),w,b
  5534  000DBE  0100               	movlb	0	; () banked
  5535  000DC0  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5536  000DC2  0100               	movlb	0	; () banked
  5537  000DC4  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5538  000DC6  A4D8               	btfss	status,2,c
  5539  000DC8  D013               	goto	l3187
  5540  000DCA                     l3181:
  5541                           
  5542                           ; BSR set to: 0
  5543  000DCA  0E00               	movlw	0
  5544  000DCC  0100               	movlb	0	; () banked
  5545  000DCE  6F60               	movwf	?___ftpack& (0+255),b
  5546  000DD0  0E00               	movlw	0
  5547  000DD2  0100               	movlb	0	; () banked
  5548  000DD4  6F61               	movwf	(?___ftpack+1)& (0+255),b
  5549  000DD6  0E00               	movlw	0
  5550  000DD8  0100               	movlb	0	; () banked
  5551  000DDA  6F62               	movwf	(?___ftpack+2)& (0+255),b
  5552                           
  5553                           ; BSR set to: 0
  5554  000DDC  D06C               	goto	l934
  5555                           
  5556                           ; BSR set to: 0
  5557  000DDE  D008               	goto	l3187
  5558  000DE0                     l3185:
  5559                           
  5560                           ; BSR set to: 0
  5561  000DE0  0100               	movlb	0	; () banked
  5562  000DE2  2B63               	incf	___ftpack@exp& (0+255),f,b
  5563  000DE4  0100               	movlb	0	; () banked
  5564  000DE6  90D8               	bcf	status,0,c
  5565  000DE8  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5566  000DEA  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5567  000DEC  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5568  000DEE  D000               	goto	l3187
  5569  000DF0                     l3187:
  5570                           
  5571                           ; BSR set to: 0
  5572  000DF0  0E00               	movlw	0
  5573  000DF2  0100               	movlb	0	; () banked
  5574  000DF4  1560               	andwf	___ftpack@arg& (0+255),w,b
  5575  000DF6  6E2B               	movwf	??___ftpack& (0+255),c
  5576  000DF8  0E00               	movlw	0
  5577  000DFA  0100               	movlb	0	; () banked
  5578  000DFC  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5579  000DFE  6E2C               	movwf	(??___ftpack+1)& (0+255),c
  5580  000E00  0EFE               	movlw	254
  5581  000E02  0100               	movlb	0	; () banked
  5582  000E04  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5583  000E06  6E2D               	movwf	(??___ftpack+2)& (0+255),c
  5584  000E08  502B               	movf	??___ftpack,w,c
  5585  000E0A  102C               	iorwf	??___ftpack+1,w,c
  5586  000E0C  102D               	iorwf	??___ftpack+2,w,c
  5587  000E0E  B4D8               	btfsc	status,2,c
  5588  000E10  D013               	goto	l3193
  5589  000E12  D7E6               	goto	l3185
  5590                           
  5591                           ; BSR set to: 0
  5592  000E14  D011               	goto	l3193
  5593  000E16                     l3189:
  5594                           
  5595                           ; BSR set to: 0
  5596  000E16  0100               	movlb	0	; () banked
  5597  000E18  2B63               	incf	___ftpack@exp& (0+255),f,b
  5598                           
  5599                           ; BSR set to: 0
  5600  000E1A  0E01               	movlw	1
  5601  000E1C  0100               	movlb	0	; () banked
  5602  000E1E  2760               	addwf	___ftpack@arg& (0+255),f,b
  5603  000E20  0E00               	movlw	0
  5604  000E22  0100               	movlb	0	; () banked
  5605  000E24  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  5606  000E26  0E00               	movlw	0
  5607  000E28  0100               	movlb	0	; () banked
  5608  000E2A  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  5609  000E2C  0100               	movlb	0	; () banked
  5610  000E2E  90D8               	bcf	status,0,c
  5611  000E30  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5612  000E32  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5613  000E34  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5614  000E36  D000               	goto	l3193
  5615  000E38                     l3193:
  5616                           
  5617                           ; BSR set to: 0
  5618  000E38  0E00               	movlw	0
  5619  000E3A  0100               	movlb	0	; () banked
  5620  000E3C  1560               	andwf	___ftpack@arg& (0+255),w,b
  5621  000E3E  6E2B               	movwf	??___ftpack& (0+255),c
  5622  000E40  0E00               	movlw	0
  5623  000E42  0100               	movlb	0	; () banked
  5624  000E44  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5625  000E46  6E2C               	movwf	(??___ftpack+1)& (0+255),c
  5626  000E48  0EFF               	movlw	255
  5627  000E4A  0100               	movlb	0	; () banked
  5628  000E4C  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5629  000E4E  6E2D               	movwf	(??___ftpack+2)& (0+255),c
  5630  000E50  502B               	movf	??___ftpack,w,c
  5631  000E52  102C               	iorwf	??___ftpack+1,w,c
  5632  000E54  102D               	iorwf	??___ftpack+2,w,c
  5633  000E56  B4D8               	btfsc	status,2,c
  5634  000E58  D00A               	goto	l3197
  5635  000E5A  D7DD               	goto	l3189
  5636                           
  5637                           ; BSR set to: 0
  5638  000E5C  D008               	goto	l3197
  5639  000E5E                     l3195:
  5640                           
  5641                           ; BSR set to: 0
  5642  000E5E  0100               	movlb	0	; () banked
  5643  000E60  0763               	decf	___ftpack@exp& (0+255),f,b
  5644  000E62  0100               	movlb	0	; () banked
  5645  000E64  90D8               	bcf	status,0,c
  5646  000E66  3760               	rlcf	___ftpack@arg& (0+255),f,b
  5647  000E68  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  5648  000E6A  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  5649  000E6C  D000               	goto	l3197
  5650  000E6E                     l3197:
  5651                           
  5652                           ; BSR set to: 0
  5653  000E6E  0100               	movlb	0	; () banked
  5654  000E70  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  5655  000E72  D005               	goto	l945
  5656                           
  5657                           ; BSR set to: 0
  5658  000E74  0E02               	movlw	2
  5659  000E76  0100               	movlb	0	; () banked
  5660  000E78  6163               	cpfslt	___ftpack@exp& (0+255),b
  5661  000E7A  D7F1               	goto	l3195
  5662  000E7C  D000               	goto	l945
  5663  000E7E                     l945:
  5664                           
  5665                           ; BSR set to: 0
  5666  000E7E  0100               	movlb	0	; () banked
  5667  000E80  B163               	btfsc	___ftpack@exp& (0+255),0,b
  5668  000E82  D003               	goto	l3203
  5669                           
  5670                           ; BSR set to: 0
  5671  000E84  0100               	movlb	0	; () banked
  5672  000E86  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  5673  000E88  D000               	goto	l3203
  5674  000E8A                     l3203:
  5675                           
  5676                           ; BSR set to: 0
  5677  000E8A  0100               	movlb	0	; () banked
  5678  000E8C  90D8               	bcf	status,0,c
  5679  000E8E  3363               	rrcf	___ftpack@exp& (0+255),f,b
  5680  000E90  0100               	movlb	0	; () banked
  5681  000E92  5163               	movf	___ftpack@exp& (0+255),w,b
  5682  000E94  0100               	movlb	0	; () banked
  5683  000E96  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  5684                           
  5685                           ; BSR set to: 0
  5686  000E98  0100               	movlb	0	; () banked
  5687  000E9A  5164               	movf	___ftpack@sign& (0+255),w,b
  5688  000E9C  0100               	movlb	0	; () banked
  5689  000E9E  B4D8               	btfsc	status,2,c
  5690  000EA0  D003               	goto	l3209
  5691                           
  5692                           ; BSR set to: 0
  5693  000EA2  0100               	movlb	0	; () banked
  5694  000EA4  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  5695  000EA6  D000               	goto	l3209
  5696  000EA8                     l3209:
  5697                           
  5698                           ; BSR set to: 0
  5699  000EA8  C060  F060         	movff	___ftpack@arg,?___ftpack
  5700  000EAC  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  5701  000EB0  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  5702  000EB4  D000               	goto	l934
  5703  000EB6                     l934:
  5704                           
  5705                           ; BSR set to: 0
  5706  000EB6  0012               	return		;funcret
  5707  000EB8                     __end_of___ftpack:
  5708                           	opt stack 0
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           intcon	equ	0xFF2
  5716                           intcon2	equ	0xFF1
  5717                           postinc0	equ	0xFEE
  5718                           wreg	equ	0xFE8
  5719                           indf2	equ	0xFDF
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function _ImplementPIDMotion *****************
  5725 ;; Defined at:
  5726 ;;		line 37 in file "MotorControl.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  PIDValue        2    0[BANK0 ] int 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;		None
  5731 ;; Return value:  Size  Location     Type
  5732 ;;		None               void
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5740 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;Total ram usage:        4 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    7
  5747 ;; This function calls:
  5748 ;;		_abs
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text35
  5755  001186                     __ptext35:
  5756                           	opt stack 0
  5757  001186                     _ImplementPIDMotion:
  5758                           	opt stack 23
  5759                           
  5760                           ;MotorControl.c: 39: if (PIDValue > 255)
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;incstack = 0
  5764  001186  0100               	movlb	0	; () banked
  5765  001188  BF61               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  5766  00118A  D009               	goto	l3517
  5767  00118C  0100               	movlb	0	; () banked
  5768  00118E  0561               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  5769  001190  A0D8               	btfss	status,0,c
  5770  001192  D005               	goto	l3517
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;MotorControl.c: 40: PIDValue = 255;
  5774  001194  0E00               	movlw	0
  5775  001196  0100               	movlb	0	; () banked
  5776  001198  6F61               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  5777  00119A  6960               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  5778  00119C  D010               	goto	l3521
  5779  00119E                     l3517:
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;MotorControl.c: 41: else if (PIDValue < -255)
  5783  00119E  0100               	movlb	0	; () banked
  5784  0011A0  AF61               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  5785  0011A2  D00D               	goto	l3521
  5786  0011A4  0100               	movlb	0	; () banked
  5787  0011A6  0560               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  5788  0011A8  0EFF               	movlw	255
  5789  0011AA  0100               	movlb	0	; () banked
  5790  0011AC  5961               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  5791  0011AE  B0D8               	btfsc	status,0,c
  5792  0011B0  D006               	goto	l3521
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;MotorControl.c: 42: PIDValue = -255;
  5796  0011B2  0EFF               	movlw	255
  5797  0011B4  0100               	movlb	0	; () banked
  5798  0011B6  6F61               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  5799  0011B8  0E01               	movlw	1
  5800  0011BA  6F60               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  5801                           
  5802                           ; BSR set to: 0
  5803  0011BC  D000               	goto	l3521
  5804  0011BE                     l3521:
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;MotorControl.c: 44: if (PIDValue < 0)
  5808  0011BE  0100               	movlb	0	; () banked
  5809  0011C0  AF61               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  5810  0011C2  D002               	goto	l3525
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;MotorControl.c: 45: CCP3CONbits.P3M1 = 1;
  5814  0011C4  8EB7               	bsf	4023,7,c	;volatile
  5815  0011C6  D00C               	goto	l3529
  5816  0011C8                     l3525:
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;MotorControl.c: 46: else if (PIDValue > 0)
  5820  0011C8  0100               	movlb	0	; () banked
  5821  0011CA  BF61               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  5822  0011CC  D009               	goto	l3529
  5823  0011CE  0100               	movlb	0	; () banked
  5824  0011D0  5161               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  5825  0011D2  E104               	bnz	u3120
  5826  0011D4  0100               	movlb	0	; () banked
  5827  0011D6  0560               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  5828  0011D8  A0D8               	btfss	status,0,c
  5829  0011DA  D002               	goto	l3529
  5830  0011DC                     u3120:
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;MotorControl.c: 47: CCP3CONbits.P3M1 = 0;
  5834  0011DC  9EB7               	bcf	4023,7,c	;volatile
  5835                           
  5836                           ; BSR set to: 0
  5837  0011DE  D000               	goto	l3529
  5838  0011E0                     l3529:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;MotorControl.c: 49: PIDValue = abs(PIDValue);
  5842  0011E0  C060  F02B         	movff	ImplementPIDMotion@PIDValue,abs@a
  5843  0011E4  C061  F02C         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  5844  0011E8  ECC3  F00B         	call	_abs	;wreg free
  5845  0011EC  C02B  F060         	movff	?_abs,ImplementPIDMotion@PIDValue
  5846  0011F0  C02C  F061         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  5847                           
  5848                           ;MotorControl.c: 50: CCPR3L = (PIDValue >> 2) & 0xFF;
  5849  0011F4  C060  F062         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5850  0011F8  C061  F063         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  5851  0011FC  0100               	movlb	0	; () banked
  5852  0011FE  3563               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  5853  001200  3363               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  5854  001202  3362               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  5855  001204  0100               	movlb	0	; () banked
  5856  001206  3563               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  5857  001208  3363               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  5858  00120A  3362               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  5859  00120C  0100               	movlb	0	; () banked
  5860  00120E  5162               	movf	??_ImplementPIDMotion& (0+255),w,b
  5861  001210  6EB8               	movwf	4024,c	;volatile
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;MotorControl.c: 51: CCP3CONbits.DC3B = (PIDValue & 0x03);
  5865  001212  C060  F062         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  5866  001216  0E03               	movlw	3
  5867  001218  0100               	movlb	0	; () banked
  5868  00121A  1762               	andwf	??_ImplementPIDMotion& (0+255),f,b
  5869  00121C  0100               	movlb	0	; () banked
  5870  00121E  3B62               	swapf	??_ImplementPIDMotion& (0+255),f,b
  5871  001220  50B7               	movf	4023,w,c	;volatile
  5872  001222  0100               	movlb	0	; () banked
  5873  001224  1962               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  5874  001226  0BCF               	andlw	-49
  5875  001228  1962               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  5876  00122A  6EB7               	movwf	4023,c	;volatile
  5877                           
  5878                           ; BSR set to: 0
  5879  00122C  0012               	return		;funcret
  5880  00122E                     __end_of_ImplementPIDMotion:
  5881                           	opt stack 0
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           intcon	equ	0xFF2
  5889                           intcon2	equ	0xFF1
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           indf2	equ	0xFDF
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _ImplementJSMotion *****************
  5898 ;; Defined at:
  5899 ;;		line 55 in file "MotorControl.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  JoystickValu    2    7[BANK0 ] int 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  CCPinput        2   12[BANK0 ] unsigned int 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;		None               void
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5913 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;Total ram usage:        7 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    7
  5920 ;; This function calls:
  5921 ;;		_abs
  5922 ;; This function is called by:
  5923 ;;		_main
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text36
  5928  000C96                     __ptext36:
  5929                           	opt stack 0
  5930  000C96                     _ImplementJSMotion:
  5931                           	opt stack 23
  5932                           
  5933                           ;MotorControl.c: 57: unsigned int CCPinput;
  5934                           ;MotorControl.c: 58: PIDEnableFlag = 0;
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;incstack = 0
  5938  000C96  0E00               	movlw	0
  5939  000C98  0100               	movlb	0	; () banked
  5940  000C9A  6FD2               	movwf	_PIDEnableFlag& (0+255),b
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;MotorControl.c: 59: if (JoystickValue < DeadbandLow)
  5944  000C9C  5035               	movf	_DeadbandLow,w,c
  5945  000C9E  0100               	movlb	0	; () banked
  5946  000CA0  6F69               	movwf	??_ImplementJSMotion& (0+255),b
  5947  000CA2  6B6A               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  5948  000CA4  0100               	movlb	0	; () banked
  5949  000CA6  5169               	movf	??_ImplementJSMotion& (0+255),w,b
  5950  000CA8  0100               	movlb	0	; () banked
  5951  000CAA  5D67               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  5952  000CAC  0100               	movlb	0	; () banked
  5953  000CAE  5168               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  5954  000CB0  0A80               	xorlw	128
  5955  000CB2  0100               	movlb	0	; () banked
  5956  000CB4  6F6B               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  5957  000CB6  0100               	movlb	0	; () banked
  5958  000CB8  516A               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  5959  000CBA  0A80               	xorlw	128
  5960  000CBC  0100               	movlb	0	; () banked
  5961  000CBE  596B               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  5962  000CC0  B0D8               	btfsc	status,0,c
  5963  000CC2  D002               	goto	l3541
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;MotorControl.c: 60: {
  5967                           ;MotorControl.c: 61: CCP3CONbits.P3M1 = 1;
  5968  000CC4  8EB7               	bsf	4023,7,c	;volatile
  5969                           
  5970                           ;MotorControl.c: 62: }
  5971  000CC6  D044               	goto	l3551
  5972  000CC8                     l3541:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;MotorControl.c: 63: else if (JoystickValue > DeadbandHigh)
  5976  000CC8  5034               	movf	_DeadbandHigh,w,c
  5977  000CCA  0100               	movlb	0	; () banked
  5978  000CCC  6F69               	movwf	??_ImplementJSMotion& (0+255),b
  5979  000CCE  6B6A               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  5980  000CD0  0100               	movlb	0	; () banked
  5981  000CD2  5167               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  5982  000CD4  0100               	movlb	0	; () banked
  5983  000CD6  5D69               	subwf	??_ImplementJSMotion& (0+255),w,b
  5984  000CD8  0100               	movlb	0	; () banked
  5985  000CDA  516A               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  5986  000CDC  0A80               	xorlw	128
  5987  000CDE  0100               	movlb	0	; () banked
  5988  000CE0  6F6B               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  5989  000CE2  0100               	movlb	0	; () banked
  5990  000CE4  5168               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  5991  000CE6  0A80               	xorlw	128
  5992  000CE8  0100               	movlb	0	; () banked
  5993  000CEA  596B               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  5994  000CEC  B0D8               	btfsc	status,0,c
  5995  000CEE  D002               	goto	l3545
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;MotorControl.c: 64: {
  5999                           ;MotorControl.c: 65: CCP3CONbits.P3M1 = 0;
  6000  000CF0  9EB7               	bcf	4023,7,c	;volatile
  6001                           
  6002                           ;MotorControl.c: 66: }
  6003  000CF2  D02E               	goto	l3551
  6004  000CF4                     l3545:
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;MotorControl.c: 67: else if (JoystickValue <= DeadbandHigh && JoystickValue >= Deadband
      +                          Low)
  6008  000CF4  5034               	movf	_DeadbandHigh,w,c
  6009  000CF6  0100               	movlb	0	; () banked
  6010  000CF8  6F69               	movwf	??_ImplementJSMotion& (0+255),b
  6011  000CFA  6B6A               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  6012  000CFC  0100               	movlb	0	; () banked
  6013  000CFE  5167               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6014  000D00  0100               	movlb	0	; () banked
  6015  000D02  5D69               	subwf	??_ImplementJSMotion& (0+255),w,b
  6016  000D04  0100               	movlb	0	; () banked
  6017  000D06  516A               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  6018  000D08  0A80               	xorlw	128
  6019  000D0A  0100               	movlb	0	; () banked
  6020  000D0C  6F6B               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  6021  000D0E  0100               	movlb	0	; () banked
  6022  000D10  5168               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6023  000D12  0A80               	xorlw	128
  6024  000D14  0100               	movlb	0	; () banked
  6025  000D16  596B               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  6026  000D18  A0D8               	btfss	status,0,c
  6027  000D1A  D01A               	goto	l3551
  6028                           
  6029                           ; BSR set to: 0
  6030  000D1C  5035               	movf	_DeadbandLow,w,c
  6031  000D1E  0100               	movlb	0	; () banked
  6032  000D20  6F69               	movwf	??_ImplementJSMotion& (0+255),b
  6033  000D22  6B6A               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  6034  000D24  0100               	movlb	0	; () banked
  6035  000D26  5169               	movf	??_ImplementJSMotion& (0+255),w,b
  6036  000D28  0100               	movlb	0	; () banked
  6037  000D2A  5D67               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6038  000D2C  0100               	movlb	0	; () banked
  6039  000D2E  5168               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6040  000D30  0A80               	xorlw	128
  6041  000D32  0100               	movlb	0	; () banked
  6042  000D34  6F6B               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  6043  000D36  0100               	movlb	0	; () banked
  6044  000D38  516A               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  6045  000D3A  0A80               	xorlw	128
  6046  000D3C  0100               	movlb	0	; () banked
  6047  000D3E  596B               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  6048  000D40  A0D8               	btfss	status,0,c
  6049  000D42  D006               	goto	l3551
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;MotorControl.c: 68: {
  6053                           ;MotorControl.c: 69: JoystickValue = 0;
  6054  000D44  0E00               	movlw	0
  6055  000D46  0100               	movlb	0	; () banked
  6056  000D48  6F68               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  6057  000D4A  0E00               	movlw	0
  6058  000D4C  6F67               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  6059                           
  6060                           ; BSR set to: 0
  6061                           
  6062                           ; BSR set to: 0
  6063  000D4E  D000               	goto	l3551
  6064  000D50                     l3551:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;MotorControl.c: 70: }
  6068                           ;MotorControl.c: 72: JoystickValue = abs(JoystickValue);
  6069  000D50  C067  F02B         	movff	ImplementJSMotion@JoystickValue,abs@a
  6070  000D54  C068  F02C         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  6071  000D58  ECC3  F00B         	call	_abs	;wreg free
  6072  000D5C  C02B  F067         	movff	?_abs,ImplementJSMotion@JoystickValue
  6073  000D60  C02C  F068         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  6074                           
  6075                           ;MotorControl.c: 73: CCPinput = JoystickValue * 2;
  6076  000D64  90D8               	bcf	status,0,c
  6077  000D66  0100               	movlb	0	; () banked
  6078  000D68  3567               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6079  000D6A  0100               	movlb	0	; () banked
  6080  000D6C  6F6C               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  6081  000D6E  0100               	movlb	0	; () banked
  6082  000D70  3568               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6083  000D72  0100               	movlb	0	; () banked
  6084  000D74  6F6D               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;MotorControl.c: 74: CCPR3L = (CCPinput >> 2) & 0xFF;
  6088  000D76  C06C  F069         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6089  000D7A  C06D  F06A         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  6090  000D7E  0100               	movlb	0	; () banked
  6091  000D80  90D8               	bcf	status,0,c
  6092  000D82  336A               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6093  000D84  3369               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6094  000D86  0100               	movlb	0	; () banked
  6095  000D88  90D8               	bcf	status,0,c
  6096  000D8A  336A               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6097  000D8C  3369               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6098  000D8E  0100               	movlb	0	; () banked
  6099  000D90  5169               	movf	??_ImplementJSMotion& (0+255),w,b
  6100  000D92  6EB8               	movwf	4024,c	;volatile
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;MotorControl.c: 75: CCP3CONbits.DC3B = (CCPinput & 0x03);
  6104  000D94  C06C  F069         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6105  000D98  0E03               	movlw	3
  6106  000D9A  0100               	movlb	0	; () banked
  6107  000D9C  1769               	andwf	??_ImplementJSMotion& (0+255),f,b
  6108  000D9E  0100               	movlb	0	; () banked
  6109  000DA0  3B69               	swapf	??_ImplementJSMotion& (0+255),f,b
  6110  000DA2  50B7               	movf	4023,w,c	;volatile
  6111  000DA4  0100               	movlb	0	; () banked
  6112  000DA6  1969               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6113  000DA8  0BCF               	andlw	-49
  6114  000DAA  1969               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6115  000DAC  6EB7               	movwf	4023,c	;volatile
  6116                           
  6117                           ; BSR set to: 0
  6118  000DAE  0012               	return		;funcret
  6119  000DB0                     __end_of_ImplementJSMotion:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           prodh	equ	0xFF4
  6126                           prodl	equ	0xFF3
  6127                           intcon	equ	0xFF2
  6128                           intcon2	equ	0xFF1
  6129                           postinc0	equ	0xFEE
  6130                           wreg	equ	0xFE8
  6131                           indf2	equ	0xFDF
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function _abs *****************
  6137 ;; Defined at:
  6138 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  a               2   42[COMRAM] int 
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;		None
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  2   42[COMRAM] int 
  6145 ;; Registers used:
  6146 ;;		wreg, status,2, status,0
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;Total ram usage:        4 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    6
  6159 ;; This function calls:
  6160 ;;		Nothing
  6161 ;; This function is called by:
  6162 ;;		_ImplementPIDMotion
  6163 ;;		_ImplementJSMotion
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text37
  6168  001786                     __ptext37:
  6169                           	opt stack 0
  6170  001786                     _abs:
  6171                           	opt stack 23
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;incstack = 0
  6175  001786  AE2C               	btfss	abs@a+1,7,c
  6176  001788  D00D               	goto	l648
  6177  00178A  C02B  F02D         	movff	abs@a,??_abs
  6178  00178E  C02C  F02E         	movff	abs@a+1,??_abs+1
  6179  001792  1E2D               	comf	??_abs,f,c
  6180  001794  1E2E               	comf	??_abs+1,f,c
  6181  001796  4A2D               	infsnz	??_abs,f,c
  6182  001798  2A2E               	incf	??_abs+1,f,c
  6183  00179A  C02D  F02B         	movff	??_abs,?_abs
  6184  00179E  C02E  F02C         	movff	??_abs+1,?_abs+1
  6185  0017A2  D004               	goto	l649
  6186  0017A4                     l648:
  6187  0017A4  C02B  F02B         	movff	abs@a,?_abs
  6188  0017A8  C02C  F02C         	movff	abs@a+1,?_abs+1
  6189  0017AC                     l649:
  6190  0017AC  0012               	return		;funcret
  6191  0017AE                     __end_of_abs:
  6192                           	opt stack 0
  6193                           tblptru	equ	0xFF8
  6194                           tblptrh	equ	0xFF7
  6195                           tblptrl	equ	0xFF6
  6196                           tablat	equ	0xFF5
  6197                           prodh	equ	0xFF4
  6198                           prodl	equ	0xFF3
  6199                           intcon	equ	0xFF2
  6200                           intcon2	equ	0xFF1
  6201                           postinc0	equ	0xFEE
  6202                           wreg	equ	0xFE8
  6203                           indf2	equ	0xFDF
  6204                           fsr2h	equ	0xFDA
  6205                           fsr2l	equ	0xFD9
  6206                           status	equ	0xFD8
  6207                           
  6208 ;; *************** function _DetectMovement *****************
  6209 ;; Defined at:
  6210 ;;		line 42 in file "Joystick.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;		None
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;  ADCresult       2    5[BANK0 ] unsigned int 
  6215 ;;  JoystickResu    2    3[BANK0 ] int 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  2   42[COMRAM] int 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:        9 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    6
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_main
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text38
  6240  00102E                     __ptext38:
  6241                           	opt stack 0
  6242  00102E                     _DetectMovement:
  6243                           	opt stack 24
  6244                           
  6245                           ;Joystick.c: 44: unsigned int ADCresult;
  6246                           ;Joystick.c: 45: int JoystickResult;
  6247                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  6248                           
  6249                           ;incstack = 0
  6250  00102E  82C2               	bsf	4034,1,c	;volatile
  6251                           
  6252                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  6253  001030  D000               	goto	l43
  6254  001032                     l43:
  6255  001032  B2C2               	btfsc	4034,1,c	;volatile
  6256  001034  D7FE               	goto	l43
  6257                           
  6258                           ;Joystick.c: 50: ADCresult = ADRESH;
  6259  001036  CFC4 F065          	movff	4036,DetectMovement@ADCresult	;volatile
  6260  00103A  0100               	movlb	0	; () banked
  6261  00103C  6B66               	clrf	(DetectMovement@ADCresult+1)& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  6265  00103E  0100               	movlb	0	; () banked
  6266  001040  5165               	movf	DetectMovement@ADCresult& (0+255),w,b
  6267  001042  0100               	movlb	0	; () banked
  6268  001044  6F66               	movwf	(DetectMovement@ADCresult+1)& (0+255),b
  6269  001046  6B65               	clrf	DetectMovement@ADCresult& (0+255),b
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  6273  001048  0100               	movlb	0	; () banked
  6274  00104A  5165               	movf	DetectMovement@ADCresult& (0+255),w,b
  6275  00104C  10C3               	iorwf	4035,w,c	;volatile
  6276  00104E  0100               	movlb	0	; () banked
  6277  001050  6F65               	movwf	DetectMovement@ADCresult& (0+255),b
  6278  001052  0100               	movlb	0	; () banked
  6279  001054  5166               	movf	(DetectMovement@ADCresult+1)& (0+255),w,b
  6280  001056  0100               	movlb	0	; () banked
  6281  001058  6F66               	movwf	(DetectMovement@ADCresult+1)& (0+255),b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  6285  00105A  0E00               	movlw	0
  6286  00105C  0100               	movlb	0	; () banked
  6287  00105E  2565               	addwf	DetectMovement@ADCresult& (0+255),w,b
  6288  001060  0100               	movlb	0	; () banked
  6289  001062  6F63               	movwf	DetectMovement@JoystickResult& (0+255),b
  6290  001064  0EFE               	movlw	254
  6291  001066  0100               	movlb	0	; () banked
  6292  001068  2166               	addwfc	(DetectMovement@ADCresult+1)& (0+255),w,b
  6293  00106A  0100               	movlb	0	; () banked
  6294  00106C  6F64               	movwf	(DetectMovement@JoystickResult+1)& (0+255),b
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  6298  00106E  5034               	movf	_DeadbandHigh,w,c
  6299  001070  0100               	movlb	0	; () banked
  6300  001072  6F60               	movwf	??_DetectMovement& (0+255),b
  6301  001074  6B61               	clrf	(??_DetectMovement+1)& (0+255),b
  6302  001076  0100               	movlb	0	; () banked
  6303  001078  5163               	movf	DetectMovement@JoystickResult& (0+255),w,b
  6304  00107A  0100               	movlb	0	; () banked
  6305  00107C  5D60               	subwf	??_DetectMovement& (0+255),w,b
  6306  00107E  0100               	movlb	0	; () banked
  6307  001080  5161               	movf	(??_DetectMovement+1)& (0+255),w,b
  6308  001082  0A80               	xorlw	128
  6309  001084  0100               	movlb	0	; () banked
  6310  001086  6F62               	movwf	(??_DetectMovement+2)& (0+255),b
  6311  001088  0100               	movlb	0	; () banked
  6312  00108A  5164               	movf	(DetectMovement@JoystickResult+1)& (0+255),w,b
  6313  00108C  0A80               	xorlw	128
  6314  00108E  0100               	movlb	0	; () banked
  6315  001090  5962               	subwfb	(??_DetectMovement+2)& (0+255),w,b
  6316  001092  A0D8               	btfss	status,0,c
  6317  001094  D014               	goto	l3501
  6318                           
  6319                           ; BSR set to: 0
  6320  001096  5035               	movf	_DeadbandLow,w,c
  6321  001098  0100               	movlb	0	; () banked
  6322  00109A  6F60               	movwf	??_DetectMovement& (0+255),b
  6323  00109C  6B61               	clrf	(??_DetectMovement+1)& (0+255),b
  6324  00109E  0100               	movlb	0	; () banked
  6325  0010A0  5160               	movf	??_DetectMovement& (0+255),w,b
  6326  0010A2  0100               	movlb	0	; () banked
  6327  0010A4  5D63               	subwf	DetectMovement@JoystickResult& (0+255),w,b
  6328  0010A6  0100               	movlb	0	; () banked
  6329  0010A8  5164               	movf	(DetectMovement@JoystickResult+1)& (0+255),w,b
  6330  0010AA  0A80               	xorlw	128
  6331  0010AC  0100               	movlb	0	; () banked
  6332  0010AE  6F62               	movwf	(??_DetectMovement+2)& (0+255),b
  6333  0010B0  0100               	movlb	0	; () banked
  6334  0010B2  5161               	movf	(??_DetectMovement+1)& (0+255),w,b
  6335  0010B4  0A80               	xorlw	128
  6336  0010B6  0100               	movlb	0	; () banked
  6337  0010B8  5962               	subwfb	(??_DetectMovement+2)& (0+255),w,b
  6338  0010BA  B0D8               	btfsc	status,0,c
  6339  0010BC  D008               	goto	l3509
  6340  0010BE                     l3501:
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;Joystick.c: 56: {
  6344                           ;Joystick.c: 57: PIDEnableFlag = 0;
  6345  0010BE  0E00               	movlw	0
  6346  0010C0  0100               	movlb	0	; () banked
  6347  0010C2  6FD2               	movwf	_PIDEnableFlag& (0+255),b
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;Joystick.c: 58: return JoystickResult;
  6351  0010C4  C063  F02B         	movff	DetectMovement@JoystickResult,?_DetectMovement
  6352  0010C8  C064  F02C         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;Joystick.c: 59: }
  6356                           
  6357                           ; BSR set to: 0
  6358  0010CC  D005               	goto	l49
  6359  0010CE                     l3509:
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;Joystick.c: 60: else
  6363                           ;Joystick.c: 61: return 0;
  6364  0010CE  0E00               	movlw	0
  6365  0010D0  6E2C               	movwf	?_DetectMovement+1,c
  6366  0010D2  0E00               	movlw	0
  6367  0010D4  6E2B               	movwf	?_DetectMovement,c
  6368                           
  6369                           ; BSR set to: 0
  6370  0010D6  D000               	goto	l49
  6371  0010D8                     l49:
  6372                           
  6373                           ; BSR set to: 0
  6374  0010D8  0012               	return		;funcret
  6375  0010DA                     __end_of_DetectMovement:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           intcon	equ	0xFF2
  6384                           intcon2	equ	0xFF1
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           indf2	equ	0xFDF
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function _DetectJoystick *****************
  6393 ;; Defined at:
  6394 ;;		line 27 in file "Joystick.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;		None
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;		None
  6399 ;; Return value:  Size  Location     Type
  6400 ;;		None               void
  6401 ;; Registers used:
  6402 ;;		wreg, status,2
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;Total ram usage:        0 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    6
  6415 ;; This function calls:
  6416 ;;		Nothing
  6417 ;; This function is called by:
  6418 ;;		_main
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text39
  6423  0017F6                     __ptext39:
  6424                           	opt stack 0
  6425  0017F6                     _DetectJoystick:
  6426                           	opt stack 24
  6427                           
  6428                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;incstack = 0
  6432  0017F6  B281               	btfsc	3969,1,c	;volatile
  6433  0017F8  D003               	goto	l37
  6434                           
  6435                           ;Joystick.c: 30: {
  6436                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  6437  0017FA  9480               	bcf	3968,2,c	;volatile
  6438                           
  6439                           ;Joystick.c: 32: JSEnableFlag = 0;
  6440  0017FC  0E00               	movlw	0
  6441  0017FE  D008               	goto	L2
  6442  001800                     l37:
  6443                           
  6444                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  6445  001800  A281               	btfss	3969,1,c	;volatile
  6446  001802  D009               	goto	l40
  6447  001804  0100               	movlb	0	; () banked
  6448  001806  51D1               	movf	_JSEnableFlag& (0+255),w,b
  6449  001808  A4D8               	btfss	status,2,c
  6450  00180A  D005               	goto	l40
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;Joystick.c: 36: {
  6454                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  6455  00180C  8480               	bsf	3968,2,c	;volatile
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;Joystick.c: 38: JSEnableFlag = 1;
  6459  00180E  0E01               	movlw	1
  6460  001810                     L2:
  6461  001810  0100               	movlb	0	; () banked
  6462  001812  6FD1               	movwf	_JSEnableFlag& (0+255),b
  6463                           
  6464                           ; BSR set to: 0
  6465  001814  D000               	goto	l40
  6466  001816                     l40:
  6467  001816  0012               	return		;funcret
  6468  001818                     __end_of_DetectJoystick:
  6469                           	opt stack 0
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           intcon	equ	0xFF2
  6477                           intcon2	equ	0xFF1
  6478                           postinc0	equ	0xFEE
  6479                           wreg	equ	0xFE8
  6480                           indf2	equ	0xFDF
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _lISR *****************
  6486 ;; Defined at:
  6487 ;;		line 174 in file "RTDuC.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, status,2, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;Total ram usage:       17 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    5
  6508 ;; This function calls:
  6509 ;;		_SPIInt
  6510 ;; This function is called by:
  6511 ;;		Interrupt level 1
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	intcodelo
  6516  000018                     __pintcodelo:
  6517                           	opt stack 0
  6518  000018                     _lISR:
  6519                           	opt stack 20
  6520                           
  6521                           ;incstack = 0
  6522  000018  CFD8 F001          	movff	status,??_lISR
  6523  00001C  CFE8 F002          	movff	wreg,??_lISR+1
  6524  000020  CFE0 F003          	movff	bsr,??_lISR+2
  6525  000024  CFFA F004          	movff	pclath,??_lISR+3
  6526  000028  CFFB F005          	movff	pclatu,??_lISR+4
  6527  00002C  CFE9 F006          	movff	fsr0l,??_lISR+5
  6528  000030  CFEA F007          	movff	fsr0h,??_lISR+6
  6529  000034  CFE1 F008          	movff	fsr1l,??_lISR+7
  6530  000038  CFE2 F009          	movff	fsr1h,??_lISR+8
  6531  00003C  CFD9 F00A          	movff	fsr2l,??_lISR+9
  6532  000040  CFDA F00B          	movff	fsr2h,??_lISR+10
  6533  000044  CFF3 F00C          	movff	prodl,??_lISR+11
  6534  000048  CFF4 F00D          	movff	prodh,??_lISR+12
  6535  00004C  CFF6 F00E          	movff	tblptrl,??_lISR+13
  6536  000050  CFF7 F00F          	movff	tblptrh,??_lISR+14
  6537  000054  CFF8 F010          	movff	tblptru,??_lISR+15
  6538  000058  CFF5 F011          	movff	tablat,??_lISR+16
  6539                           
  6540                           ;RTDuC.c: 176: if (PIR1bits.SSP1IF == 1)
  6541  00005C  A69E               	btfss	3998,3,c	;volatile
  6542  00005E  D003               	goto	i1l356
  6543                           
  6544                           ;RTDuC.c: 177: {
  6545                           ;RTDuC.c: 178: SPIInt();
  6546  000060  EC6B  F00C         	call	_SPIInt	;wreg free
  6547  000064  D000               	goto	i1l356
  6548  000066                     i1l356:
  6549  000066  C011  FFF5         	movff	??_lISR+16,tablat
  6550  00006A  C010  FFF8         	movff	??_lISR+15,tblptru
  6551  00006E  C00F  FFF7         	movff	??_lISR+14,tblptrh
  6552  000072  C00E  FFF6         	movff	??_lISR+13,tblptrl
  6553  000076  C00D  FFF4         	movff	??_lISR+12,prodh
  6554  00007A  C00C  FFF3         	movff	??_lISR+11,prodl
  6555  00007E  C00B  FFDA         	movff	??_lISR+10,fsr2h
  6556  000082  C00A  FFD9         	movff	??_lISR+9,fsr2l
  6557  000086  C009  FFE2         	movff	??_lISR+8,fsr1h
  6558  00008A  C008  FFE1         	movff	??_lISR+7,fsr1l
  6559  00008E  C007  FFEA         	movff	??_lISR+6,fsr0h
  6560  000092  C006  FFE9         	movff	??_lISR+5,fsr0l
  6561  000096  C005  FFFB         	movff	??_lISR+4,pclatu
  6562  00009A  C004  FFFA         	movff	??_lISR+3,pclath
  6563  00009E  C003  FFE0         	movff	??_lISR+2,bsr
  6564  0000A2  C002  FFE8         	movff	??_lISR+1,wreg
  6565  0000A6  C001  FFD8         	movff	??_lISR,status
  6566  0000AA  0010               	retfie	
  6567  0000AC                     __end_of_lISR:
  6568                           	opt stack 0
  6569                           pclatu	equ	0xFFB
  6570                           pclath	equ	0xFFA
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           intcon	equ	0xFF2
  6578                           intcon2	equ	0xFF1
  6579                           postinc0	equ	0xFEE
  6580                           fsr0h	equ	0xFEA
  6581                           fsr0l	equ	0xFE9
  6582                           wreg	equ	0xFE8
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           bsr	equ	0xFE0
  6586                           indf2	equ	0xFDF
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _SPIInt *****************
  6592 ;; Defined at:
  6593 ;;		line 26 in file "SPISlave.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;		None               void
  6600 ;; Registers used:
  6601 ;;		wreg, status,2
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;Total ram usage:        0 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    4
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_lISR
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text41
  6622  0018D6                     __ptext41:
  6623                           	opt stack 0
  6624  0018D6                     _SPIInt:
  6625                           	opt stack 20
  6626                           
  6627                           ;SPISlave.c: 28: Command = SSP2BUF;
  6628                           
  6629                           ;incstack = 0
  6630  0018D6  CF66 F0D0          	movff	3942,_Command	;volatile
  6631                           
  6632                           ;SPISlave.c: 29: PORTCbits.RC6 = 1;
  6633  0018DA  8C82               	bsf	3970,6,c	;volatile
  6634                           
  6635                           ;SPISlave.c: 30: PIR1bits.SSP1IF = 0;
  6636  0018DC  969E               	bcf	3998,3,c	;volatile
  6637                           
  6638                           ;SPISlave.c: 31: PIE1bits.SSP1IE = 0;
  6639  0018DE  969D               	bcf	3997,3,c	;volatile
  6640                           
  6641                           ;SPISlave.c: 32: SPIflag = 1;
  6642  0018E0  0E01               	movlw	1
  6643  0018E2  0100               	movlb	0	; () banked
  6644  0018E4  6FD3               	movwf	_SPIflag& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;SPISlave.c: 33: PIR1bits.SSP1IF = 0;
  6648  0018E6  969E               	bcf	3998,3,c	;volatile
  6649                           
  6650                           ; BSR set to: 0
  6651  0018E8  0012               	return		;funcret
  6652  0018EA                     __end_of_SPIInt:
  6653                           	opt stack 0
  6654                           pclatu	equ	0xFFB
  6655                           pclath	equ	0xFFA
  6656                           tblptru	equ	0xFF8
  6657                           tblptrh	equ	0xFF7
  6658                           tblptrl	equ	0xFF6
  6659                           tablat	equ	0xFF5
  6660                           prodh	equ	0xFF4
  6661                           prodl	equ	0xFF3
  6662                           intcon	equ	0xFF2
  6663                           intcon2	equ	0xFF1
  6664                           postinc0	equ	0xFEE
  6665                           fsr0h	equ	0xFEA
  6666                           fsr0l	equ	0xFE9
  6667                           wreg	equ	0xFE8
  6668                           fsr1h	equ	0xFE2
  6669                           fsr1l	equ	0xFE1
  6670                           bsr	equ	0xFE0
  6671                           indf2	equ	0xFDF
  6672                           fsr2h	equ	0xFDA
  6673                           fsr2l	equ	0xFD9
  6674                           status	equ	0xFD8
  6675                           
  6676 ;; *************** function _hISR *****************
  6677 ;; Defined at:
  6678 ;;		line 132 in file "RTDuC.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;		None
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;		None
  6683 ;; Return value:  Size  Location     Type
  6684 ;;		None               void
  6685 ;; Registers used:
  6686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;Total ram usage:       16 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    3
  6699 ;; This function calls:
  6700 ;;		_HLVDInt
  6701 ;;		_INT0Int
  6702 ;;		_TMR0Int
  6703 ;; This function is called by:
  6704 ;;		Interrupt level 2
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           	psect	intcode
  6709  000008                     __pintcode:
  6710                           	opt stack 0
  6711  000008                     _hISR:
  6712                           	opt stack 20
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;incstack = 0
  6716  000008  CFFA F01D          	movff	pclath,??_hISR+2
  6717  00000C  CFFB F01E          	movff	pclatu,??_hISR+3
  6718  000010  CFE9 F01F          	movff	fsr0l,??_hISR+4
  6719  000014  ED6D  F008         	call	int_func,f	;refresh shadow registers
  6720                           pclatu	equ	0xFFB
  6721                           pclath	equ	0xFFA
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           intcon2	equ	0xFF1
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           fsr1h	equ	0xFE2
  6735                           fsr1l	equ	0xFE1
  6736                           bsr	equ	0xFE0
  6737                           indf2	equ	0xFDF
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742                           	psect	intcode_body
  6743  0010DA                     __pintcode_body:
  6744                           	opt stack 20
  6745  0010DA                     int_func:
  6746                           	opt stack 20
  6747  0010DA  0006               	pop		; remove dummy address from shadow register refresh
  6748  0010DC  CFEA F020          	movff	fsr0h,??_hISR+5
  6749  0010E0  CFE1 F021          	movff	fsr1l,??_hISR+6
  6750  0010E4  CFE2 F022          	movff	fsr1h,??_hISR+7
  6751  0010E8  CFD9 F023          	movff	fsr2l,??_hISR+8
  6752  0010EC  CFDA F024          	movff	fsr2h,??_hISR+9
  6753  0010F0  CFF3 F025          	movff	prodl,??_hISR+10
  6754  0010F4  CFF4 F026          	movff	prodh,??_hISR+11
  6755  0010F8  CFF6 F027          	movff	tblptrl,??_hISR+12
  6756  0010FC  CFF7 F028          	movff	tblptrh,??_hISR+13
  6757  001100  CFF8 F029          	movff	tblptru,??_hISR+14
  6758  001104  CFF5 F02A          	movff	tablat,??_hISR+15
  6759                           
  6760                           ;RTDuC.c: 134: PORTCbits.RC6 = 1;
  6761  001108  8C82               	bsf	3970,6,c	;volatile
  6762                           
  6763                           ;RTDuC.c: 136: if ((INTCONbits.TMR0IF == 1) && ((PIDEnableFlag | 0x01) == 0x01))
  6764  00110A  A4F2               	btfss	intcon,2,c	;volatile
  6765  00110C  D00F               	goto	i2l3825
  6766  00110E  0100               	movlb	0	; () banked
  6767  001110  51D2               	movf	_PIDEnableFlag& (0+255),w,b
  6768  001112  6E1B               	movwf	??_hISR& (0+255),c
  6769  001114  6A1C               	clrf	(??_hISR+1)& (0+255),c
  6770  001116  0E01               	movlw	1
  6771  001118  121B               	iorwf	??_hISR,f,c
  6772  00111A  0E00               	movlw	0
  6773  00111C  121C               	iorwf	??_hISR+1,f,c
  6774  00111E  041B               	decf	??_hISR,w,c
  6775  001120  101C               	iorwf	??_hISR+1,w,c
  6776  001122  A4D8               	btfss	status,2,c
  6777  001124  D003               	goto	i2l3825
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;RTDuC.c: 137: {
  6781                           ;RTDuC.c: 138: TMR0Int();
  6782  001126  EC87  F00C         	call	_TMR0Int	;wreg free
  6783  00112A  D000               	goto	i2l3825
  6784  00112C                     i2l3825:
  6785                           
  6786                           ;RTDuC.c: 139: }
  6787                           ;RTDuC.c: 141: if (INTCONbits.INT0IF == 1)
  6788  00112C  A2F2               	btfss	intcon,1,c	;volatile
  6789  00112E  D003               	goto	i2l3829
  6790                           
  6791                           ;RTDuC.c: 142: {
  6792                           ;RTDuC.c: 143: INT0Int();
  6793  001130  ECE9  F00B         	call	_INT0Int	;wreg free
  6794  001134  D000               	goto	i2l3829
  6795  001136                     i2l3829:
  6796                           
  6797                           ;RTDuC.c: 144: }
  6798                           ;RTDuC.c: 146: if (PIR2bits.HLVDIF == 1)
  6799  001136  A4A1               	btfss	4001,2,c	;volatile
  6800  001138  D006               	goto	i2l3835
  6801                           
  6802                           ;RTDuC.c: 147: {
  6803                           ;RTDuC.c: 148: PORTAbits.RA4 = 0;
  6804  00113A  9880               	bcf	3968,4,c	;volatile
  6805                           
  6806                           ;RTDuC.c: 149: PORTAbits.RA3 = 0;
  6807  00113C  9680               	bcf	3968,3,c	;volatile
  6808                           
  6809                           ;RTDuC.c: 150: PORTAbits.RA2 = 0;
  6810  00113E  9480               	bcf	3968,2,c	;volatile
  6811                           
  6812                           ;RTDuC.c: 151: HLVDInt();
  6813  001140  ECBB  F007         	call	_HLVDInt	;wreg free
  6814  001144  D000               	goto	i2l3835
  6815  001146                     i2l3835:
  6816                           
  6817                           ;RTDuC.c: 152: }
  6818                           ;RTDuC.c: 154: if (PIR2bits.OSCFIF == 1)
  6819  001146  BEA1               	btfsc	4001,7,c	;volatile
  6820  001148  00FF               	reset		;# 
  6821                           
  6822                           ;RTDuC.c: 169: }
  6823                           ;RTDuC.c: 171: PORTCbits.RC6 = 0;
  6824  00114A  9C82               	bcf	3970,6,c	;volatile
  6825  00114C  C02A  FFF5         	movff	??_hISR+15,tablat
  6826  001150  C029  FFF8         	movff	??_hISR+14,tblptru
  6827  001154  C028  FFF7         	movff	??_hISR+13,tblptrh
  6828  001158  C027  FFF6         	movff	??_hISR+12,tblptrl
  6829  00115C  C026  FFF4         	movff	??_hISR+11,prodh
  6830  001160  C025  FFF3         	movff	??_hISR+10,prodl
  6831  001164  C024  FFDA         	movff	??_hISR+9,fsr2h
  6832  001168  C023  FFD9         	movff	??_hISR+8,fsr2l
  6833  00116C  C022  FFE2         	movff	??_hISR+7,fsr1h
  6834  001170  C021  FFE1         	movff	??_hISR+6,fsr1l
  6835  001174  C020  FFEA         	movff	??_hISR+5,fsr0h
  6836  001178  C01F  FFE9         	movff	??_hISR+4,fsr0l
  6837  00117C  C01E  FFFB         	movff	??_hISR+3,pclatu
  6838  001180  C01D  FFFA         	movff	??_hISR+2,pclath
  6839  001184  0011               	retfie		f
  6840  001186                     __end_of_hISR:
  6841                           	opt stack 0
  6842                           pclatu	equ	0xFFB
  6843                           pclath	equ	0xFFA
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon2	equ	0xFF1
  6852                           postinc0	equ	0xFEE
  6853                           fsr0h	equ	0xFEA
  6854                           fsr0l	equ	0xFE9
  6855                           wreg	equ	0xFE8
  6856                           fsr1h	equ	0xFE2
  6857                           fsr1l	equ	0xFE1
  6858                           bsr	equ	0xFE0
  6859                           indf2	equ	0xFDF
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _TMR0Int *****************
  6865 ;; Defined at:
  6866 ;;		line 61 in file "PID.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, status,2
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; This function calls:
  6887 ;;		Nothing
  6888 ;; This function is called by:
  6889 ;;		_hISR
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text43
  6894  00190E                     __ptext43:
  6895                           	opt stack 0
  6896  00190E                     _TMR0Int:
  6897                           	opt stack 22
  6898                           
  6899                           ;PID.c: 63: TMR0H = 0xDB;
  6900                           
  6901                           ;incstack = 0
  6902  00190E  0EDB               	movlw	219
  6903  001910  6ED7               	movwf	4055,c	;volatile
  6904                           
  6905                           ;PID.c: 64: TMR0L = 0x60;
  6906  001912  0E60               	movlw	96
  6907  001914  6ED6               	movwf	4054,c	;volatile
  6908                           
  6909                           ;PID.c: 65: TMR0Flag = 1;
  6910  001916  0E01               	movlw	1
  6911  001918  0100               	movlb	0	; () banked
  6912  00191A  6FD4               	movwf	_TMR0Flag& (0+255),b
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;PID.c: 66: INTCONbits.TMR0IF = 0;
  6916  00191C  94F2               	bcf	intcon,2,c	;volatile
  6917                           
  6918                           ; BSR set to: 0
  6919  00191E  0012               	return		;funcret
  6920  001920                     __end_of_TMR0Int:
  6921                           	opt stack 0
  6922                           pclatu	equ	0xFFB
  6923                           pclath	equ	0xFFA
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           intcon2	equ	0xFF1
  6932                           postinc0	equ	0xFEE
  6933                           fsr0h	equ	0xFEA
  6934                           fsr0l	equ	0xFE9
  6935                           wreg	equ	0xFE8
  6936                           fsr1h	equ	0xFE2
  6937                           fsr1l	equ	0xFE1
  6938                           bsr	equ	0xFE0
  6939                           indf2	equ	0xFDF
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _INT0Int *****************
  6945 ;; Defined at:
  6946 ;;		line 182 in file "RTDuC.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;		None
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;		None
  6951 ;; Return value:  Size  Location     Type
  6952 ;;		None               void
  6953 ;; Registers used:
  6954 ;;		wreg, status,2, status,0, cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;Total ram usage:        0 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    1
  6967 ;; This function calls:
  6968 ;;		_KillMotors
  6969 ;; This function is called by:
  6970 ;;		_hISR
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text44
  6975  0017D2                     __ptext44:
  6976                           	opt stack 0
  6977  0017D2                     _INT0Int:
  6978                           	opt stack 21
  6979                           
  6980                           ;RTDuC.c: 184: KillMotors();
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;incstack = 0
  6984  0017D2  EC9E  F00C         	call	_KillMotors	;wreg free
  6985                           
  6986                           ;RTDuC.c: 185: PORTAbits.RA3 = 0;
  6987  0017D6  9680               	bcf	3968,3,c	;volatile
  6988                           
  6989                           ;RTDuC.c: 186: T0CONbits.TMR0ON = 1;
  6990  0017D8  8ED5               	bsf	4053,7,c	;volatile
  6991                           
  6992                           ;RTDuC.c: 187: INTCONbits.GIE = 0;
  6993  0017DA  9EF2               	bcf	intcon,7,c	;volatile
  6994                           
  6995                           ;RTDuC.c: 188: PORTAbits.RA4 = 1;
  6996  0017DC  8880               	bsf	3968,4,c	;volatile
  6997  0017DE  D000               	goto	i2l2919
  6998  0017E0                     i2l2919:
  6999                           
  7000                           ;RTDuC.c: 190: {
  7001                           ;RTDuC.c: 191: TMR0H = 0x00;
  7002  0017E0  0E00               	movlw	0
  7003  0017E2  6ED7               	movwf	4055,c	;volatile
  7004                           
  7005                           ;RTDuC.c: 192: TMR0L = 0x00;
  7006  0017E4  0E00               	movlw	0
  7007  0017E6  6ED6               	movwf	4054,c	;volatile
  7008                           
  7009                           ;RTDuC.c: 193: while (!INTCONbits.TMR0IF);
  7010  0017E8  D000               	goto	i2l360
  7011  0017EA                     i2l360:
  7012  0017EA  A4F2               	btfss	intcon,2,c	;volatile
  7013  0017EC  D7FE               	goto	i2l360
  7014                           
  7015                           ;RTDuC.c: 194: INTCONbits.TMR0IF = 0;
  7016  0017EE  94F2               	bcf	intcon,2,c	;volatile
  7017                           
  7018                           ;RTDuC.c: 195: ~PORTAbits.RA4;
  7019  0017F0  5080               	movf	3968,w,c	;volatile
  7020  0017F2  D7F6               	goto	i2l2919
  7021  0017F4  0012               	return		;funcret
  7022  0017F6                     __end_of_INT0Int:
  7023                           	opt stack 0
  7024                           pclatu	equ	0xFFB
  7025                           pclath	equ	0xFFA
  7026                           tblptru	equ	0xFF8
  7027                           tblptrh	equ	0xFF7
  7028                           tblptrl	equ	0xFF6
  7029                           tablat	equ	0xFF5
  7030                           prodh	equ	0xFF4
  7031                           prodl	equ	0xFF3
  7032                           intcon	equ	0xFF2
  7033                           intcon2	equ	0xFF1
  7034                           postinc0	equ	0xFEE
  7035                           fsr0h	equ	0xFEA
  7036                           fsr0l	equ	0xFE9
  7037                           wreg	equ	0xFE8
  7038                           fsr1h	equ	0xFE2
  7039                           fsr1l	equ	0xFE1
  7040                           bsr	equ	0xFE0
  7041                           indf2	equ	0xFDF
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _KillMotors *****************
  7047 ;; Defined at:
  7048 ;;		line 25 in file "MotorControl.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_INT0Int
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text45
  7076  00193C                     __ptext45:
  7077                           	opt stack 0
  7078  00193C                     _KillMotors:
  7079                           	opt stack 21
  7080                           
  7081                           ;MotorControl.c: 27: PORTAbits.RA4 = 1;
  7082                           
  7083                           ;incstack = 0
  7084  00193C  8880               	bsf	3968,4,c	;volatile
  7085                           
  7086                           ;MotorControl.c: 28: CCP3CON = CCP3CON & 0xF0;
  7087  00193E  50B7               	movf	4023,w,c	;volatile
  7088  001940  0BF0               	andlw	240
  7089  001942  6EB7               	movwf	4023,c	;volatile
  7090  001944  0012               	return		;funcret
  7091  001946                     __end_of_KillMotors:
  7092                           	opt stack 0
  7093                           pclatu	equ	0xFFB
  7094                           pclath	equ	0xFFA
  7095                           tblptru	equ	0xFF8
  7096                           tblptrh	equ	0xFF7
  7097                           tblptrl	equ	0xFF6
  7098                           tablat	equ	0xFF5
  7099                           prodh	equ	0xFF4
  7100                           prodl	equ	0xFF3
  7101                           intcon	equ	0xFF2
  7102                           intcon2	equ	0xFF1
  7103                           postinc0	equ	0xFEE
  7104                           fsr0h	equ	0xFEA
  7105                           fsr0l	equ	0xFE9
  7106                           wreg	equ	0xFE8
  7107                           fsr1h	equ	0xFE2
  7108                           fsr1l	equ	0xFE1
  7109                           bsr	equ	0xFE0
  7110                           indf2	equ	0xFDF
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _HLVDInt *****************
  7116 ;; Defined at:
  7117 ;;		line 150 in file "EEPROM.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;		None               void
  7124 ;; Registers used:
  7125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    2
  7138 ;; This function calls:
  7139 ;;		_EEWriteChar
  7140 ;;		_EEWriteDouble
  7141 ;; This function is called by:
  7142 ;;		_hISR
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text46
  7147  000F76                     __ptext46:
  7148                           	opt stack 0
  7149  000F76                     _HLVDInt:
  7150                           	opt stack 20
  7151                           
  7152                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  7153                           
  7154                           ;incstack = 0
  7155  000F76  C0C2  F016         	movff	_SetAngle,EEWriteDouble@dub
  7156  000F7A  C0C3  F017         	movff	_SetAngle+1,EEWriteDouble@dub+1
  7157  000F7E  C0C4  F018         	movff	_SetAngle+2,EEWriteDouble@dub+2
  7158  000F82  0E00               	movlw	0
  7159  000F84  ECF1  F009         	call	_EEWriteDouble
  7160                           
  7161                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  7162  000F88  C0BF  F016         	movff	_Kp,EEWriteDouble@dub
  7163  000F8C  C0C0  F017         	movff	_Kp+1,EEWriteDouble@dub+1
  7164  000F90  C0C1  F018         	movff	_Kp+2,EEWriteDouble@dub+2
  7165  000F94  0E03               	movlw	3
  7166  000F96  ECF1  F009         	call	_EEWriteDouble
  7167                           
  7168                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  7169  000F9A  C0BC  F016         	movff	_Ki,EEWriteDouble@dub
  7170  000F9E  C0BD  F017         	movff	_Ki+1,EEWriteDouble@dub+1
  7171  000FA2  C0BE  F018         	movff	_Ki+2,EEWriteDouble@dub+2
  7172  000FA6  0E06               	movlw	6
  7173  000FA8  ECF1  F009         	call	_EEWriteDouble
  7174                           
  7175                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  7176  000FAC  C0B9  F016         	movff	_Kd,EEWriteDouble@dub
  7177  000FB0  C0BA  F017         	movff	_Kd+1,EEWriteDouble@dub+1
  7178  000FB4  C0BB  F018         	movff	_Kd+2,EEWriteDouble@dub+2
  7179  000FB8  0E09               	movlw	9
  7180  000FBA  ECF1  F009         	call	_EEWriteDouble
  7181                           
  7182                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  7183  000FBE  CF80 F016          	movff	3968,EEWriteChar@ch	;volatile
  7184  000FC2  0E0C               	movlw	12
  7185  000FC4  EC0C  F00C         	call	_EEWriteChar
  7186                           
  7187                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  7188  000FC8  CF81 F016          	movff	3969,EEWriteChar@ch	;volatile
  7189  000FCC  0E0D               	movlw	13
  7190  000FCE  EC0C  F00C         	call	_EEWriteChar
  7191                           
  7192                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  7193  000FD2  CF82 F016          	movff	3970,EEWriteChar@ch	;volatile
  7194  000FD6  0E0E               	movlw	14
  7195  000FD8  EC0C  F00C         	call	_EEWriteChar
  7196                           
  7197                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  7198  000FDC  CF83 F016          	movff	3971,EEWriteChar@ch	;volatile
  7199  000FE0  0E0F               	movlw	15
  7200  000FE2  EC0C  F00C         	call	_EEWriteChar
  7201                           
  7202                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  7203  000FE6  CF84 F016          	movff	3972,EEWriteChar@ch	;volatile
  7204  000FEA  0E10               	movlw	16
  7205  000FEC  EC0C  F00C         	call	_EEWriteChar
  7206                           
  7207                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  7208  000FF0  CF85 F016          	movff	3973,EEWriteChar@ch	;volatile
  7209  000FF4  0E11               	movlw	17
  7210  000FF6  EC0C  F00C         	call	_EEWriteChar
  7211                           
  7212                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  7213  000FFA  CF86 F016          	movff	3974,EEWriteChar@ch	;volatile
  7214  000FFE  0E12               	movlw	18
  7215  001000  EC0C  F00C         	call	_EEWriteChar
  7216                           
  7217                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  7218  001004  CF87 F016          	movff	3975,EEWriteChar@ch	;volatile
  7219  001008  0E13               	movlw	19
  7220  00100A  EC0C  F00C         	call	_EEWriteChar
  7221                           
  7222                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  7223  00100E  CF88 F016          	movff	3976,EEWriteChar@ch	;volatile
  7224  001012  0E14               	movlw	20
  7225  001014  EC0C  F00C         	call	_EEWriteChar
  7226                           
  7227                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  7228  001018  C0D2  F016         	movff	_PIDEnableFlag,EEWriteChar@ch
  7229  00101C  0E15               	movlw	21
  7230  00101E  EC0C  F00C         	call	_EEWriteChar
  7231                           
  7232                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  7233  001022  0E01               	movlw	1
  7234  001024  6E16               	movwf	EEWriteChar@ch,c
  7235  001026  0E16               	movlw	22
  7236  001028  EC0C  F00C         	call	_EEWriteChar
  7237  00102C  0012               	return		;funcret
  7238  00102E                     __end_of_HLVDInt:
  7239                           	opt stack 0
  7240                           pclatu	equ	0xFFB
  7241                           pclath	equ	0xFFA
  7242                           tblptru	equ	0xFF8
  7243                           tblptrh	equ	0xFF7
  7244                           tblptrl	equ	0xFF6
  7245                           tablat	equ	0xFF5
  7246                           prodh	equ	0xFF4
  7247                           prodl	equ	0xFF3
  7248                           intcon	equ	0xFF2
  7249                           intcon2	equ	0xFF1
  7250                           postinc0	equ	0xFEE
  7251                           fsr0h	equ	0xFEA
  7252                           fsr0l	equ	0xFE9
  7253                           wreg	equ	0xFE8
  7254                           fsr1h	equ	0xFE2
  7255                           fsr1l	equ	0xFE1
  7256                           bsr	equ	0xFE0
  7257                           indf2	equ	0xFDF
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _EEWriteDouble *****************
  7263 ;; Defined at:
  7264 ;;		line 77 in file "EEPROM.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  location        1    wreg     unsigned char 
  7267 ;;  dub             3   21[COMRAM] unsigned char 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  location        1   24[COMRAM] unsigned char 
  7270 ;;  x               1   25[COMRAM] unsigned char 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;		None               void
  7273 ;; Registers used:
  7274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7280 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;Total ram usage:        5 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    1
  7287 ;; This function calls:
  7288 ;;		_EEDisassembleDouble
  7289 ;;		_Write_b_eep
  7290 ;;		i2_Busy_eep
  7291 ;; This function is called by:
  7292 ;;		_HLVDInt
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text47
  7297  0013E2                     __ptext47:
  7298                           	opt stack 0
  7299  0013E2                     _EEWriteDouble:
  7300                           	opt stack 20
  7301                           
  7302                           ;incstack = 0
  7303                           ;EEWriteDouble@location stored from wreg
  7304  0013E2  6E19               	movwf	EEWriteDouble@location,c
  7305                           
  7306                           ;EEPROM.c: 79: unsigned char x;
  7307                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  7308  0013E4  C016  F012         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  7309  0013E8  C017  F013         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  7310  0013EC  C018  F014         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  7311  0013F0  EC34  F00B         	call	_EEDisassembleDouble	;wreg free
  7312                           
  7313                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  7314  0013F4  50F2               	movf	intcon,w,c	;volatile
  7315  0013F6  0B3F               	andlw	63
  7316  0013F8  6EF2               	movwf	intcon,c	;volatile
  7317                           
  7318                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  7319  0013FA  0E00               	movlw	0
  7320  0013FC  6E1A               	movwf	EEWriteDouble@x,c
  7321  0013FE                     i2l3349:
  7322  0013FE  0E02               	movlw	2
  7323  001400  641A               	cpfsgt	EEWriteDouble@x,c
  7324  001402  D001               	goto	i2l3353
  7325  001404  D014               	goto	i2l3363
  7326  001406                     i2l3353:
  7327                           
  7328                           ;EEPROM.c: 86: {
  7329                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  7330  001406  C019  F012         	movff	EEWriteDouble@location,Write_b_eep@badd
  7331  00140A  6A13               	clrf	Write_b_eep@badd+1,c
  7332  00140C  501A               	movf	EEWriteDouble@x,w,c
  7333  00140E  0D01               	mullw	1
  7334  001410  0E2F               	movlw	low _DDouble
  7335  001412  24F3               	addwf	prodl,w,c
  7336  001414  6ED9               	movwf	fsr2l,c
  7337  001416  0E00               	movlw	high _DDouble
  7338  001418  20F4               	addwfc	prodh,w,c
  7339  00141A  6EDA               	movwf	fsr2h,c
  7340  00141C  50DF               	movf	indf2,w,c
  7341  00141E  6E14               	movwf	Write_b_eep@bdat,c
  7342  001420  ECF5  F00A         	call	_Write_b_eep	;wreg free
  7343                           
  7344                           ;EEPROM.c: 88: location++;
  7345  001424  2A19               	incf	EEWriteDouble@location,f,c
  7346                           
  7347                           ;EEPROM.c: 89: Busy_eep();
  7348  001426  ECA7  F00C         	call	i2_Busy_eep	;wreg free
  7349  00142A  2A1A               	incf	EEWriteDouble@x,f,c
  7350  00142C  D7E8               	goto	i2l3349
  7351  00142E                     i2l3363:
  7352                           
  7353                           ;EEPROM.c: 90: }
  7354                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7355  00142E  50F2               	movf	intcon,w,c	;volatile
  7356  001430  09C0               	iorlw	192
  7357  001432  6EF2               	movwf	intcon,c	;volatile
  7358  001434  0012               	return		;funcret
  7359  001436                     __end_of_EEWriteDouble:
  7360                           	opt stack 0
  7361                           pclatu	equ	0xFFB
  7362                           pclath	equ	0xFFA
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           prodh	equ	0xFF4
  7368                           prodl	equ	0xFF3
  7369                           intcon	equ	0xFF2
  7370                           intcon2	equ	0xFF1
  7371                           postinc0	equ	0xFEE
  7372                           fsr0h	equ	0xFEA
  7373                           fsr0l	equ	0xFE9
  7374                           wreg	equ	0xFE8
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           bsr	equ	0xFE0
  7378                           indf2	equ	0xFDF
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _EEDisassembleDouble *****************
  7384 ;; Defined at:
  7385 ;;		line 48 in file "EEPROM.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  dub             3   17[COMRAM] unsigned char 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;		None               void
  7392 ;; Registers used:
  7393 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7399 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;Total ram usage:        3 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; This function calls:
  7406 ;;		Nothing
  7407 ;; This function is called by:
  7408 ;;		_EEWriteDouble
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text48
  7413  001668                     __ptext48:
  7414                           	opt stack 0
  7415  001668                     _EEDisassembleDouble:
  7416                           	opt stack 20
  7417                           
  7418                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7419                           
  7420                           ;incstack = 0
  7421  001668  0E12               	movlw	low EEDisassembleDouble@dub
  7422  00166A  6E32               	movwf	_DoublePtr,c
  7423  00166C  0E00               	movlw	high EEDisassembleDouble@dub
  7424  00166E  6E33               	movwf	_DoublePtr+1,c
  7425                           
  7426                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7427  001670  C032  FFD9         	movff	_DoublePtr,fsr2l
  7428  001674  C033  FFDA         	movff	_DoublePtr+1,fsr2h
  7429  001678  50DF               	movf	indf2,w,c
  7430  00167A  6E2F               	movwf	_DDouble,c
  7431                           
  7432                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7433  00167C  EE20 F001          	lfsr	2,1
  7434  001680  5032               	movf	_DoublePtr,w,c
  7435  001682  26D9               	addwf	fsr2l,f,c
  7436  001684  5033               	movf	_DoublePtr+1,w,c
  7437  001686  22DA               	addwfc	fsr2h,f,c
  7438  001688  50DF               	movf	indf2,w,c
  7439  00168A  6E30               	movwf	_DDouble+1,c
  7440                           
  7441                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7442  00168C  EE20 F002          	lfsr	2,2
  7443  001690  5032               	movf	_DoublePtr,w,c
  7444  001692  26D9               	addwf	fsr2l,f,c
  7445  001694  5033               	movf	_DoublePtr+1,w,c
  7446  001696  22DA               	addwfc	fsr2h,f,c
  7447  001698  50DF               	movf	indf2,w,c
  7448  00169A  6E31               	movwf	_DDouble+2,c
  7449  00169C  0012               	return		;funcret
  7450  00169E                     __end_of_EEDisassembleDouble:
  7451                           	opt stack 0
  7452                           pclatu	equ	0xFFB
  7453                           pclath	equ	0xFFA
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           intcon2	equ	0xFF1
  7462                           postinc0	equ	0xFEE
  7463                           fsr0h	equ	0xFEA
  7464                           fsr0l	equ	0xFE9
  7465                           wreg	equ	0xFE8
  7466                           fsr1h	equ	0xFE2
  7467                           fsr1l	equ	0xFE1
  7468                           bsr	equ	0xFE0
  7469                           indf2	equ	0xFDF
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _EEWriteChar *****************
  7475 ;; Defined at:
  7476 ;;		line 122 in file "EEPROM.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  location        1    wreg     unsigned char 
  7479 ;;  ch              1   21[COMRAM] unsigned char 
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;  location        1   22[COMRAM] unsigned char 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;		None               void
  7484 ;; Registers used:
  7485 ;;		wreg, status,2, status,0, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7491 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;Total ram usage:        2 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    1
  7498 ;; This function calls:
  7499 ;;		_Write_b_eep
  7500 ;;		i2_Busy_eep
  7501 ;; This function is called by:
  7502 ;;		_HLVDInt
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text49
  7507  001818                     __ptext49:
  7508                           	opt stack 0
  7509  001818                     _EEWriteChar:
  7510                           	opt stack 20
  7511                           
  7512                           ;incstack = 0
  7513                           ;EEWriteChar@location stored from wreg
  7514  001818  6E17               	movwf	EEWriteChar@location,c
  7515                           
  7516                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7517  00181A  50F2               	movf	intcon,w,c	;volatile
  7518  00181C  0B3F               	andlw	63
  7519  00181E  6EF2               	movwf	intcon,c	;volatile
  7520                           
  7521                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7522  001820  C017  F012         	movff	EEWriteChar@location,Write_b_eep@badd
  7523  001824  6A13               	clrf	Write_b_eep@badd+1,c
  7524  001826  C016  F014         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7525  00182A  ECF5  F00A         	call	_Write_b_eep	;wreg free
  7526                           
  7527                           ;EEPROM.c: 127: Busy_eep();
  7528  00182E  ECA7  F00C         	call	i2_Busy_eep	;wreg free
  7529                           
  7530                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7531  001832  50F2               	movf	intcon,w,c	;volatile
  7532  001834  09C0               	iorlw	192
  7533  001836  6EF2               	movwf	intcon,c	;volatile
  7534  001838  0012               	return		;funcret
  7535  00183A                     __end_of_EEWriteChar:
  7536                           	opt stack 0
  7537                           pclatu	equ	0xFFB
  7538                           pclath	equ	0xFFA
  7539                           tblptru	equ	0xFF8
  7540                           tblptrh	equ	0xFF7
  7541                           tblptrl	equ	0xFF6
  7542                           tablat	equ	0xFF5
  7543                           prodh	equ	0xFF4
  7544                           prodl	equ	0xFF3
  7545                           intcon	equ	0xFF2
  7546                           intcon2	equ	0xFF1
  7547                           postinc0	equ	0xFEE
  7548                           fsr0h	equ	0xFEA
  7549                           fsr0l	equ	0xFE9
  7550                           wreg	equ	0xFE8
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           bsr	equ	0xFE0
  7554                           indf2	equ	0xFDF
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function i2_Busy_eep *****************
  7560 ;; Defined at:
  7561 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;		None               void
  7568 ;; Registers used:
  7569 ;;		None
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:        0 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_EEWriteDouble
  7585 ;;		_EEWriteChar
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text50
  7590  00194E                     __ptext50:
  7591                           	opt stack 0
  7592  00194E                     i2_Busy_eep:
  7593                           	opt stack 20
  7594                           
  7595                           ;incstack = 0
  7596  00194E  D000               	goto	i2l538
  7597  001950                     i2l538:
  7598  001950  B2A6               	btfsc	4006,1,c	;volatile
  7599  001952  D7FE               	goto	i2l538
  7600  001954  0012               	return		;funcret
  7601  001956                     __end_ofi2_Busy_eep:
  7602                           	opt stack 0
  7603                           pclatu	equ	0xFFB
  7604                           pclath	equ	0xFFA
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodh	equ	0xFF4
  7610                           prodl	equ	0xFF3
  7611                           intcon	equ	0xFF2
  7612                           intcon2	equ	0xFF1
  7613                           postinc0	equ	0xFEE
  7614                           fsr0h	equ	0xFEA
  7615                           fsr0l	equ	0xFE9
  7616                           wreg	equ	0xFE8
  7617                           fsr1h	equ	0xFE2
  7618                           fsr1l	equ	0xFE1
  7619                           bsr	equ	0xFE0
  7620                           indf2	equ	0xFDF
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _Write_b_eep *****************
  7626 ;; Defined at:
  7627 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  badd            2   17[COMRAM] unsigned int 
  7630 ;;  bdat            1   19[COMRAM] unsigned char 
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;  GIE_BIT_VAL     1   20[COMRAM] unsigned char 
  7633 ;; Return value:  Size  Location     Type
  7634 ;;		None               void
  7635 ;; Registers used:
  7636 ;;		wreg, status,2, status,0
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7642 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;Total ram usage:        4 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_EEWriteDouble
  7652 ;;		_EEWriteChar
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text51
  7657  0015EA                     __ptext51:
  7658                           	opt stack 0
  7659  0015EA                     _Write_b_eep:
  7660                           	opt stack 20
  7661                           
  7662                           ;incstack = 0
  7663  0015EA  0E00               	movlw	0
  7664  0015EC  6E15               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7665  0015EE  5013               	movf	Write_b_eep@badd+1,w,c
  7666  0015F0  0B03               	andlw	3
  7667  0015F2  6EAA               	movwf	4010,c	;volatile
  7668  0015F4  C012  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7669  0015F8  C014  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7670  0015FC  9EA6               	bcf	4006,7,c	;volatile
  7671  0015FE  9CA6               	bcf	4006,6,c	;volatile
  7672  001600  84A6               	bsf	4006,2,c	;volatile
  7673  001602  0E00               	movlw	0
  7674  001604  BEF2               	btfsc	intcon,7,c	;volatile
  7675  001606  0E01               	movlw	1
  7676  001608  6E15               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7677  00160A  9EF2               	bcf	intcon,7,c	;volatile
  7678  00160C  0E55               	movlw	85
  7679  00160E  6EA7               	movwf	4007,c	;volatile
  7680  001610  0EAA               	movlw	170
  7681  001612  6EA7               	movwf	4007,c	;volatile
  7682  001614  82A6               	bsf	4006,1,c	;volatile
  7683  001616  D000               	goto	i2l569
  7684  001618                     i2l569:
  7685  001618  B2A6               	btfsc	4006,1,c	;volatile
  7686  00161A  D7FE               	goto	i2l569
  7687  00161C  B015               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7688  00161E  D002               	bra	i2u142_45
  7689  001620  9EF2               	bcf	intcon,7,c	;volatile
  7690  001622  D001               	bra	i2u142_46
  7691  001624                     i2u142_45:
  7692  001624  8EF2               	bsf	intcon,7,c	;volatile
  7693  001626                     i2u142_46:
  7694  001626  94A6               	bcf	4006,2,c	;volatile
  7695  001628  0012               	return		;funcret
  7696  00162A                     __end_of_Write_b_eep:
  7697                           	opt stack 0
  7698  0000                     pclatu	equ	0xFFB
  7699                           pclath	equ	0xFFA
  7700                           tblptru	equ	0xFF8
  7701                           tblptrh	equ	0xFF7
  7702                           tblptrl	equ	0xFF6
  7703                           tablat	equ	0xFF5
  7704                           prodh	equ	0xFF4
  7705                           prodl	equ	0xFF3
  7706                           intcon	equ	0xFF2
  7707                           intcon2	equ	0xFF1
  7708                           postinc0	equ	0xFEE
  7709                           fsr0h	equ	0xFEA
  7710                           fsr0l	equ	0xFE9
  7711                           wreg	equ	0xFE8
  7712                           fsr1h	equ	0xFE2
  7713                           fsr1l	equ	0xFE1
  7714                           bsr	equ	0xFE0
  7715                           indf2	equ	0xFDF
  7716                           fsr2h	equ	0xFDA
  7717                           fsr2l	equ	0xFD9
  7718                           status	equ	0xFD8
  7719                           pclatu	equ	0xFFB
  7720                           pclath	equ	0xFFA
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           intcon2	equ	0xFF1
  7729                           postinc0	equ	0xFEE
  7730                           fsr0h	equ	0xFEA
  7731                           fsr0l	equ	0xFE9
  7732                           wreg	equ	0xFE8
  7733                           fsr1h	equ	0xFE2
  7734                           fsr1l	equ	0xFE1
  7735                           bsr	equ	0xFE0
  7736                           indf2	equ	0xFDF
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741                           	psect	rparam
  7742  0000                     pclatu	equ	0xFFB
  7743                           pclath	equ	0xFFA
  7744                           tblptru	equ	0xFF8
  7745                           tblptrh	equ	0xFF7
  7746                           tblptrl	equ	0xFF6
  7747                           tablat	equ	0xFF5
  7748                           prodh	equ	0xFF4
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           intcon2	equ	0xFF1
  7752                           postinc0	equ	0xFEE
  7753                           fsr0h	equ	0xFEA
  7754                           fsr0l	equ	0xFE9
  7755                           wreg	equ	0xFE8
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           bsr	equ	0xFE0
  7759                           indf2	equ	0xFDF
  7760                           fsr2h	equ	0xFDA
  7761                           fsr2l	equ	0xFD9
  7762                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     46      53
    BANK0           160     79     121
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(BANK0[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(BANK0[3]), 
		 -> SPIDisassembleDouble@dub(BANK0[3]), 


Critical Paths under _main in COMRAM

    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadChar
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _calculatePID->___ftge
    _calculatePID->___ftneg
    ___ftadd->___ftneg
    ___ftadd->___ftpack
    ___ftdiv->___ftpack
    _SPIDisassembleDouble->_GenerateChecksum
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->_ReadRTDpos
    ___lwtoft->___ftpack
    ___ftmul->___ftpack
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs

Critical Paths under _hISR in COMRAM

    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _lISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_calculatePID
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementJSMotion->_DetectMovement

Critical Paths under _hISR in BANK0

    None.

Critical Paths under _lISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _hISR in BANK1

    None.

Critical Paths under _lISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _hISR in BANK2

    None.

Critical Paths under _lISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _hISR in BANK3

    None.

Critical Paths under _lISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _hISR in BANK4

    None.

Critical Paths under _lISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _hISR in BANK5

    None.

Critical Paths under _lISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _hISR in BANK6

    None.

Critical Paths under _lISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _hISR in BANK7

    None.

Critical Paths under _lISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _hISR in BANK8

    None.

Critical Paths under _lISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _hISR in BANK9

    None.

Critical Paths under _lISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _hISR in BANK10

    None.

Critical Paths under _lISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _hISR in BANK11

    None.

Critical Paths under _lISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _hISR in BANK12

    None.

Critical Paths under _lISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _hISR in BANK13

    None.

Critical Paths under _lISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _hISR in BANK14

    None.

Critical Paths under _lISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _hISR in BANK15

    None.

Critical Paths under _lISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   28877
                                             77 BANK0      2     2      0
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    1065
                         _EEPROMInit
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     216
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             42 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      75
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             42 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             42 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     774
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     774
                                              8 BANK0      2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     493
                                              3 BANK0      5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3     116
                                             42 COMRAM     3     0      3
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     281
                                             44 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     216
                                             42 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _calculatePID                                        15     9      6   18735
                                             62 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     316
                                             47 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5245
                                             47 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4881
                                             35 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     173
                                             42 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     660
                                             42 COMRAM     3     3      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3152
                                              5 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      23
                                             42 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3     116
                                             42 COMRAM     3     0      3
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     606
                                              0 BANK0      3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0     136
                                             42 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRTDpos                                          12    10      2     235
                                             43 COMRAM     2     0      2
                                              0 BANK0      8     8      0
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      31
                                             42 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTD2Angle                                            3     0      3    6593
                                             35 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2572
                                              5 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3836
                                             20 BANK0     15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                             42 COMRAM     3     3      0
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _ImplementPIDMotion                                   4     2      2     574
                                              0 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    7     5      2     528
                                              7 BANK0      7     5      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     194
                                             42 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       9     7      2     198
                                             42 COMRAM     2     0      2
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _lISR                                                17    17      0       0
                                              0 COMRAM    17    17      0
                             _SPIInt
 ---------------------------------------------------------------------------------
 (7) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _hISR                                                16    16      0    2074
                                             26 COMRAM    16    16      0
                            _HLVDInt
                            _INT0Int
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (9) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (10) _KillMotors                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _HLVDInt                                              0     0      0    2074
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (10) _EEWriteDouble                                       5     2      3     980
                                             21 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (11) _EEDisassembleDouble                                 3     0      3     162
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) _EEWriteChar                                         2     1      1    1094
                                             21 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (11) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _Write_b_eep                                         4     1      3     346
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
   _ImplementPIDMotion
     _abs
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1

 _lISR (ROOT)
   _SPIInt

 _hISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _TMR0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      79       5       75.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2E      35       1       55.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AE      32        0.0%
DATA                 0      0      AE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 27 01:33:00 2015

      __size_of_MotorDriverInit 001C                              l31 170E                              l40 1816  
                            l43 1032                              l37 1800                              l49 10D8  
                            _Kd 00B9                              _Ki 00BC                              _Kp 00BF  
                            bsr 000FE0             ?_EEReassembleDouble 002B                    ___ftadd@exp1 008E  
                  ___ftadd@exp2 008D       ImplementJSMotion@CCPinput 006C                    ___ftadd@sign 008C  
                           l323 04AE                             l148 01E0                             l422 18B8  
                           l342 1730                             l431 192E                             l184 12C4  
                           l185 12D2                             l194 1666                             l186 1326  
                           l442 15A4                             l530 1858                             l514 1560  
                           l428 1926                             l524 138A                             l508 12B4  
                           l439 16CE                             l554 18A8                             l538 1948  
                           l830 190C                             l590 13A4                             l591 13A6  
                           l648 17A4                             l649 17AC                             l842 1932  
                           l594 13C0                             l595 13DA                             l844 193A  
                           l596 13C2                             l588 13A0                             l837 18FA  
                           l597 13C6                             l934 0EB6                             l945 0E7E  
                           l980 0714                             l974 06B0                             l975 08C4  
                           l978 06EA                             l989 07F8                             l998 0822  
                           _PR2 000FCB                             _abs 1786            __size_of_Write_b_eep 0040  
                           prod 000FF3                             wreg 000FE8                 __end_of_INT0Int 17F6  
                  ___ftdiv@cntr 006E                 __end_of_HLVDInt 102E                      _Delay1TCYx 1930  
                  ___ftdiv@sign 0073                    __CFG_WDT$OFF 000000                            l1021 0A20  
                          l1006 0B62                            l1015 0F74                            l1031 17C4  
                          l1009 0B2A                            l1042 0C94                            ?_abs 002B  
                          l1038 14D6                            l1171 1784                            l2303 13AA  
                          l3203 0E8A                            l2307 13CA                            l3213 18FE  
                          l3301 089E                            l3209 0EA8                            l3243 06BE  
                          l3171 1372                            l3163 1342                            l2435 171C  
                          l3501 10BE                            l3181 0DCA                            l3333 16B2  
                          l2701 0C82                            l3423 092A                            l3407 0B3C  
                          l3271 077C                            l3255 070A                            l3159 1338  
                          l2287 18EC                            l3521 11BE                            l3193 0E38  
                          l3185 0DE0                            l3441 099A                            l3417 08F0  
                          l3329 16A6                            l3273 078C                            l3265 074C  
                          l3249 06F8                            l3195 0E5E                            l3187 0DF0  
                          l3451 09DE                            l3419 0916                            l3339 16CA  
                          l3371 0A4C                            l3291 084E                            l3283 07D8  
                          l3275 079C                            l3509 10CE                            l3541 0CC8  
                          l3525 11C8                            l3517 119E                            l3197 0E6E  
                          l3189 0E16                            l3445 09B6                            l3437 097A  
                          l3373 0A72                            l3285 07E8                            l3277 07A8  
                          l3551 0D50                            l3455 09FA                            l3447 09BE  
                          l3471 0EF2                            l3463 14AC                            l3545 0CF4  
                          l3529 11E0                            l3377 0A86                            l3481 0F70  
                          l2665 0B8E                            l3801 05E4                            l3721 043A  
                          l3713 0402                            l3705 03CA                            l3475 0F2C  
                          l2683 0C12                            l3563 00F8                            l3397 0AE8  
                          l2693 0C44                            l3733 0462                            l3717 041E  
                          l3725 0456                            l3709 03E6                            l2695 0C56  
                          l2687 0C26                            l3575 027C                            l3593 12CA  
                          l2689 0C2E                            l2697 0C64                            l3569 0188  
                          l3753 04C4                            l3737 047E                            l3771 0524  
                          l3739 0488                            l3691 038A                            l3749 04B6  
                          l3781 0562                            l3775 0540                            l3767 0508  
                          l3759 04E2                            l3783 0566                            l3779 055C  
                          l3789 0584                            u3120 11DC                            u1900 0BB4  
                          u1905 0BAA                            u2661 065E                            u2911 0A38  
                          u2671 067C                            u1881 0B7A                            u2931 0A62  
                          u3567 18EE                            u2961 08DC                            u3577 1900  
                          u2981 0906                 __end_of_PIDInit 151E  ImplementJSMotion@JoystickValue 0067  
          ??_EEReassembleDouble 002E                            _hISR 0008                            _lISR 0018  
                  EEReadChar@ch 002E                 __end_of_TMR0Int 1920                            abs@a 002B  
                          _main 037E                    ___ftpack@arg 0060                     _DeadbandLow 0035  
                  ___ftpack@exp 0063                 __end_of_RTDInit 1700                 __end_of_SPIInit 1890  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            pclat 000FFA                  ??_EEReadDouble 002E  
                          prodh 000FF4                            prodl 000FF3                            start 00AC  
           __size_of_EEPROMInit 0014                    ?_EEWriteChar 0016                    ___ftmul@cntr 0081  
                  ___param_bank 000010                    ___ftmul@sign 0082                     _Delay10TCYx 18FC  
              __end_of_EEBootUp 12B6                    ___fttol@exp1 009D                           ??_abs 002D  
                  ___fttol@lval 0099                     _Delay1KTCYx 18EA                           ?_hISR 0001  
                         ?_lISR 0001                     ReadRTDpos@x 0067               RTD2Angle@RTDAngle 0083  
                         ?_main 0001                           _EEADR 000FA9                 __end_of___ftadd 08C6  
               __end_of___ftdiv 0B64                 __end_of___ftneg 17D2                 __end_of___ftmul 0A22  
                         _T0CON 000FD5                 __end_of___ftsub 14D8                 __end_of___fttol 0C96  
                         _T2CON 000FCA                           _T3CON 000FB1                           i1l356 0066  
                         i2l360 17EA                           i2l538 1950                           i2l569 1618  
            __size_of_RTD2Angle 003E                           _TMR0H 000FD7                           _TMR0L 000FD6  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _PORTE 000F84                           _PORTF 000F85  
                         _PORTG 000F86                           _PORTH 000F87                           _PORTJ 000F88  
        ??_SPIDisassembleDouble 002D                           _TRISD 000F95                           _TRISH 000F99  
                __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 002B             __size_of_EEReadChar 0020  
        __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 0015                    _DeadbandHigh 0034  
                         _error 00C5                   ___ftpack@sign 0064                      _DoubleSPIS 00AF  
                         main@x 00AE                   ??_ReceiveSPI1 002B                           tablat 000FF5  
                   ?i2_Busy_eep 0001                           status 000FD8                   EEReadDouble@x 0067  
    __size_of_ImplementJSMotion 011A           EEWriteDouble@location 0019             GenerateChecksum@sum 002B  
                    _ReadRTDpos 12B6                      _KillMotors 193C                 __initialization 1436  
                  __end_of_hISR 1186                    __end_of_lISR 00AC                    __end_of_main 0648  
                _DetectJoystick 17F6                  _DetectMovement 102E                      _Read_b_eep 1890  
              __end_of_Busy_eep 194E           EEReassembleDouble@dub 0060                  __CFG_OSC$HSPLL 000000  
                        ??_hISR 001B                          ??_lISR 0001                __end_of_SendSPI1 18C2  
              __end_of_OpenSPI1 13E2                          ??_main 002F                   ___fttol@sign1 0098  
                 __activetblptr 000003               ??_MotorDriverInit 002B         DetectMovement@ADCresult 0065  
                     ??_INT0Int 0012                       ??_HLVDInt 001B                       ??_PIDInit 002B  
                     ??_TMR0Int 0012                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                       ??_RTDInit 002C                          _EEDATA 000FA8  
                   ?_Delay1TCYx 0001                       ??_SPIInit 002E                          _CCPR3L 000FB8  
                        _EECON2 000FA7                __end_of___ftpack 0EB8           __size_of_calculatePID 02CE  
                        i2l3353 1406                          i2l3363 142E                          i2l3349 13FE  
                        i2l2919 17E0                          i2l3825 112C                          i2l3835 1146  
                        i2l3829 1136                          _INTCON 000FF2                __end_of___lwtoft 1786  
                        _SPIInt 18D6               __end_of_RTD2Angle 1668             __end_of_ReceiveSPI1 1930  
        __end_of_DetectJoystick 1818          __end_of_DetectMovement 10DA                OpenSPI1@bus_mode 002B  
                 _EEWriteDouble 13E2                          ___ftge 0EB8                       ??___ftadd 0089  
                     ??___ftdiv 006B                       ??___ftneg 002E                       ??___ftmul 007A  
                     ??___ftsub 002E                       ??___fttol 0093                          _intErr 00C8  
                        clear_0 143C             __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 007E  
                 main@temporary 00AD                    ??_EEPROMInit 002F     __size_of_ImplementPIDMotion 00A8  
                  __pdataCOMRAM 0034                    _calculatePID 00B0            __end_of_EEReadDouble 138C  
             _calculatePID$3510 00AA               _calculatePID$3509 00A7                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8               ?_GenerateChecksum 0001  
                     ?_EEBootUp 0001                      __accesstop 0060         __end_of__initialization 1482  
            ??_GenerateChecksum 002B                      ___ftadd@f1 0083                      ___ftadd@f2 0086  
                    ___ftge@ff1 0060                      ___ftge@ff2 0063                   ___rparam_used 000001  
                    ___ftdiv@f1 0065                      ___ftdiv@f2 0068                      ___ftdiv@f3 006F  
            EEReadChar@location 002D                      ___ftneg@f1 002B                     ?_ReadRTDpos 002C  
                   ?_KillMotors 0001                    ??_EEReadChar 002D                  ?_EEWriteDouble 0016  
                    ___ftmul@f1 0074                      ___ftmul@f2 0077                 ?_DetectJoystick 0001  
               ?_DetectMovement 002B              __end_of_EEPROMInit 18D6                      ___ftsub@f1 008F  
                    ___ftsub@f2 0092                      ___fttol@f1 008F                  __pcstackCOMRAM 0001  
   __end_of_EEDisassembleDouble 169E                    __pidataBANK0 1956            __size_of_EEWriteChar 0022  
                   ?_Read_b_eep 002B             __size_of_Delay1TCYx 000C               GenerateChecksum@y 002C  
                    ___lwtoft@c 0065    __size_of_SPIReassembleDouble 0044              __end_of_EEReadChar 185A  
                    __pbssBANK0 00AF                     _ReceiveSPI1 1920                      ??_EEBootUp 0068  
                     ?_Busy_eep 0001                   ?_JoystickInit 0001                         ?_SPIInt 0001  
                     ?_SendSPI1 0001                       ?_OpenSPI1 002B                         ?___ftge 0060  
                  ?_Delay10TCYx 0001                  EEWriteDouble@x 001A                         _CCP3CON 000FB7  
                  ?_Delay1KTCYx 0001                       ?___ftpack 0060                   ??_Write_b_eep 0015  
                     ?___lwtoft 0065                         _HLVDCON 000FD2                         _INT0Int 17D2  
                       _HLVDInt 0F76                         _PIDInit 14D8                         _DDouble 002F  
           __size_of_ReadRTDpos 0072             __size_of_KillMotors 000A                   _PIDEnableFlag 00D2  
                       _SSP1BUF 000FC9                         _SSP2BUF 000F66                         _TMR0Int 190E  
    ImplementPIDMotion@PIDValue 0060                         _RTDInit 16D0                         _SPIInit 1876  
                       _SPIflag 00D3                EEWriteDouble@dub 0016             __size_of_Read_b_eep 001A  
                ??_JoystickInit 002B                    ??i2_Busy_eep 0012     __size_of_EEReassembleDouble 0044  
                    ??_Busy_eep 002B                         _Command 00D0                 __size_of_SPIInt 0014  
                    ??_SendSPI1 002B                 ??_EEWriteDouble 0019                      ??_OpenSPI1 002D  
           EEWriteChar@location 0017                         __Hparam 0000                         __Lparam 0000  
               _MotorDriverInit 185A                 __size_of___ftge 00BE                         ___ftadd 0648  
                       ___ftdiv 0A22                         ___ftneg 17AE                         ___ftmul 08C6  
                       ___ftsub 1488                         ___fttol 0B64                      _dummy_byte 00D5  
         __size_of_EEReadDouble 0064                    SendSPI1@data 002C                         __pcinit 1436  
                    ??___ftpack 002B                 Delay10TCYx@unit 002B                         __ramtop 1000  
                    _initialize 172E                    SendSPI1@temp 002B                         __ptext0 037E  
                       __ptext1 172E                         __ptext2 1876                         __ptext3 138C  
                       __ptext4 16D0                         __ptext5 1930                         __ptext6 18EA  
                       __ptext7 14D8                         __ptext8 185A                         __ptext9 1700  
                    ??___lwtoft 002E                       _T0CONbits 000FD5                    __size_of_abs 0028  
            __end_ofi2_Busy_eep 1956                         _prevErr 00CB   __size_of_SPIDisassembleDouble 0044  
           __end_of_Write_b_eep 162A                    ??_Delay1TCYx 002B                  __pintcode_body 10DA  
          end_of_initialization 1482                         int_func 10DA               OpenSPI1@smp_phase 002C  
                  _EEReadDouble 1328           ReadRTDpos@LowPosition 0064                      _motorInput 00CE  
                     _RTD2Angle 162A                         postinc0 000FEE               OpenSPI1@sync_mode 002D  
            __end_of_Delay1TCYx 193C                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTEbits 000F84                       _PORTJbits 000F88  
                     _TRISAbits 000F92                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISDbits 000F95                       _TRISEbits 000F96                       _TRISFbits 000F97  
                     _TRISGbits 000F98                       _TRISJbits 000F9A         __end_of_MotorDriverInit 1876  
              ??_DetectJoystick 002B                ??_DetectMovement 0060                     ___ftdiv@exp 0072  
             __size_of_EEBootUp 0088             _SPIReassembleDouble 1562                     _CCP3CONbits 000FB7  
                __end_of_SPIInt 18EA                    ??_ReadRTDpos 0060                    ??_KillMotors 0012  
                   ___ftmul@exp 007D                      ?_RTD2Angle 0083       __size_of_GenerateChecksum 0032  
                  ??_Read_b_eep 002D                  __end_of___ftge 0F76            __size_of_Delay10TCYx 0012  
                 __pidataCOMRAM 1959      __end_of_ImplementPIDMotion 122E                     ?_initialize 0001  
                   _Write_b_eep 15EA            __end_of_JoystickInit 172E            __size_of_Delay1KTCYx 0012  
          ?_SPIReassembleDouble 002B                       _DoublePtr 0032             start_initialization 1436  
               _CurrentVelocity 00B6                    _CurrentAngle 00B3                     __end_of_abs 17AE  
            __end_of_ReadRTDpos 1328              __end_of_KillMotors 1946                    ?_ReceiveSPI1 0001  
            __end_of_Read_b_eep 18AA            EEReadDouble@location 0066                        ??_SPIInt 0001  
             __size_of_Busy_eep 0008            calculatePID@setpoint 00A1                   ??_EEWriteChar 0017  
        ReadRTDpos@HighPosition 0063               __size_of_SendSPI1 0018               __size_of_OpenSPI1 0056  
                      ??___ftge 002B                     __pdataBANK0 00D6           ??_SPIReassembleDouble 002E  
  __size_of_EEDisassembleDouble 0036               __size_of___ftpack 0108                        ?_INT0Int 0001  
                      ?_HLVDInt 0001                     __pbssCOMRAM 002F               __size_of___lwtoft 002C  
                 __pcstackBANK0 0060                        ?_PIDInit 0001                        ?_TMR0Int 0001  
            calculatePID@derErr 00A4                        ?_RTDInit 0001                        ?_SPIInit 0001  
               Delay1KTCYx@unit 002B                ?_MotorDriverInit 0001             __size_of_initialize 002C  
        SPIReassembleDouble@dub 0060                   EEWriteChar@ch 0016                       __pintcode 0008  
                   ??_RTD2Angle 002E                        ?___ftadd 0083                        ?___ftdiv 0065  
                      ?___ftneg 002B                        ?___ftmul 0074                        ?___ftsub 008F  
                      ?___fttol 008F                     __pintcodelo 0018             __end_of_EEWriteChar 183A  
    __end_of_EEReassembleDouble 1562                        _EEBootUp 122E                        _IPR1bits 000F9F  
                      _IPR2bits 000FA2                        _PIE1bits 000F9D                        _PIE2bits 000FA0  
         __end_of_EEWriteDouble 1436                        i2u142_45 1624                        i2u142_46 1626  
  __end_of_SPIDisassembleDouble 15EA                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                      _RCONbits 000FD0           __size_of_JoystickInit 002E                        _SSP1CON1 000FC6  
                      _TMR0Flag 00D4                _GenerateChecksum 169E                        _SSP1STAT 000FC7  
                    _ADCON0bits 000FC2                 Write_b_eep@badd 0012                 Write_b_eep@bdat 0014  
                 ?_calculatePID 009E                __size_of_INT0Int 0024                __size_of_HLVDInt 00B8  
              __size_of_PIDInit 0046                     _INTCON2bits 000FF1                __size_of_TMR0Int 0012  
              __size_of_RTDInit 0030                __size_of_SPIInit 001A                        _Busy_eep 1946  
          __size_of_ReceiveSPI1 0010                    _JoystickInit 1700                        _SendSPI1 18AA  
                    _EECON1bits 000FA6                        _SetAngle 00C2                        _OpenSPI1 138C  
        ReadRTDpos@FullPosition 0065                        __Hrparam 0000                     _EEWriteChar 1818  
                      __Lrparam 0000                    _JSEnableFlag 00D1                __size_of___ftadd 027E  
              __size_of___ftdiv 0142                __size_of___ftneg 0024                __size_of___ftmul 015C  
              __size_of___ftsub 0050                __size_of___fttol 0132                    ??_initialize 002F  
                      ___ftpack 0DB0                    ?_Write_b_eep 0012               calculatePID@angle 009E  
                ??_calculatePID 002E                        ___lwtoft 175A                      _EEPROMInit 18C2  
                      __ptext10 18C2                        __ptext11 122E                        __ptext20 0648  
                      __ptext12 1328                        __ptext21 17AE                        __ptext13 151E  
                      __ptext30 18FC                        __ptext22 0EB8                        __ptext14 1946  
                      __ptext31 162A                        __ptext23 0A22                        __ptext15 183A  
                      __ptext32 175A                        __ptext24 18AA                        __ptext16 1890  
                      __ptext41 18D6                        __ptext33 08C6                        __ptext25 1562  
                      __ptext17 00B0                        __ptext50 194E                        __ptext34 0DB0  
                      __ptext26 15A6                        __ptext18 0B64                        __ptext51 15EA  
                      __ptext43 190E                        __ptext35 1186                        __ptext27 169E  
                      __ptext19 1488                        __ptext44 17D2                        __ptext36 0C96  
                      __ptext28 1920                        __ptext45 193C                        __ptext37 1786  
                      __ptext29 12B6                        __ptext46 0F76                        __ptext38 102E  
                      __ptext47 13E2                        __ptext39 17F6                        __ptext48 1668  
                      __ptext49 1818                    _SSP1CON1bits 000FC6              _ImplementPIDMotion 1186  
                  _SSP2CON1bits 000F63                   __size_of_hISR 117E                   __size_of_lISR 0094  
                 __size_of_main 02CA             _EEDisassembleDouble 1668                  Delay1TCYx@unit 002B  
           ?_ImplementPIDMotion 0060              __end_of_initialize 175A                        _loopTime 00D6  
                    _EEReadChar 183A                   ??_Delay10TCYx 002B                   ??_Delay1KTCYx 002B  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0012            ??_ImplementPIDMotion 0062  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 15A6                        intlevel1 0000  
                      intlevel2 0000                      _OSCCONbits 000FD3    DetectMovement@JoystickResult 0063  
             _ImplementJSMotion 0C96     __end_of_SPIReassembleDouble 15A6              ?_ImplementJSMotion 0067  
       __size_of_DetectJoystick 0022         __size_of_DetectMovement 00AC           ??_EEDisassembleDouble 0015  
           __end_of_Delay10TCYx 190E             ??_ImplementJSMotion 0069          EEDisassembleDouble@dub 0012  
                   ?_EEPROMInit 0001             __end_of_Delay1KTCYx 18FC           ?_SPIDisassembleDouble 0060  
      __end_of_GenerateChecksum 16D0                      i2_Busy_eep 194E         SPIDisassembleDouble@dub 0060  
     __end_of_ImplementJSMotion 0DB0            __end_of_calculatePID 037E                   ?_EEReadDouble 0063  
                   ?_EEReadChar 0001              _EEReassembleDouble 151E  
