

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Oct 30 22:44:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0018C6                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _DeadbandHigh
    76  0018C6  00C8               	dw	200
    77                           
    78                           ;initializer for _DeadbandLow
    79  0018C8  FF38               	dw	65336
    80                           
    81                           	psect	idataBANK0
    82  0018CA                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _loopTime
    86                           ;PID.c: 5: unsigned char PIDEnableFlag;
    87                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    88                           ;PID.c: 7: double Ki;
    89                           ;PID.c: 8: double Kp;
    90                           ;PID.c: 9: double Kd;
    91                           ;PID.c: 10: double SetAngle;
    92                           ;PID.c: 11: double CurrentAngle;
    93                           ;PID.c: 12: double error;
    94                           ;PID.c: 13: double prevErr;
    95                           ;PID.c: 14: double intErr;
    96                           ;PID.c: 15: int motorInput;
    97  0018CA  C3                 	db	195
    98  0018CB  F5                 	db	245
    99  0018CC  3C                 	db	60
   100  0000                     _ADCON0	set	4034
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON1	set	4033
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADRESH	set	4036
   105  0000                     _ADRESL	set	4035
   106  0000                     _CCP3CON	set	4023
   107  0000                     _CCP3CONbits	set	4023
   108  0000                     _CCPR3L	set	4024
   109  0000                     _EEADR	set	4009
   110  0000                     _EEADRH	set	4010
   111  0000                     _EECON1bits	set	4006
   112  0000                     _EECON2	set	4007
   113  0000                     _EEDATA	set	4008
   114  0000                     _HLVDCON	set	4050
   115  0000                     _INTCON	set	4082
   116  0000                     _INTCON2bits	set	4081
   117  0000                     _INTCONbits	set	4082
   118  0000                     _IPR2bits	set	4002
   119  0000                     _OSCCONbits	set	4051
   120  0000                     _PIE1bits	set	3997
   121  0000                     _PIE2bits	set	4000
   122  0000                     _PIR1bits	set	3998
   123  0000                     _PIR2bits	set	4001
   124  0000                     _PORTA	set	3968
   125  0000                     _PORTAbits	set	3968
   126  0000                     _PORTB	set	3969
   127  0000                     _PORTBbits	set	3969
   128  0000                     _PORTC	set	3970
   129  0000                     _PORTCbits	set	3970
   130  0000                     _PORTD	set	3971
   131  0000                     _PORTE	set	3972
   132  0000                     _PORTEbits	set	3972
   133  0000                     _PORTF	set	3973
   134  0000                     _PORTG	set	3974
   135  0000                     _PORTH	set	3975
   136  0000                     _PORTJ	set	3976
   137  0000                     _PORTJbits	set	3976
   138  0000                     _PR2	set	4043
   139  0000                     _SSP1BUF	set	4041
   140  0000                     _SSP1CON1	set	4038
   141  0000                     _SSP1CON1bits	set	4038
   142  0000                     _SSP1STAT	set	4039
   143  0000                     _SSP1STATbits	set	4039
   144  0000                     _T0CON	set	4053
   145  0000                     _T0CONbits	set	4053
   146  0000                     _T2CON	set	4042
   147  0000                     _T3CON	set	4017
   148  0000                     _TMR0H	set	4055
   149  0000                     _TMR0L	set	4054
   150  0000                     _TRISAbits	set	3986
   151  0000                     _TRISBbits	set	3987
   152  0000                     _TRISCbits	set	3988
   153  0000                     _TRISD	set	3989
   154  0000                     _TRISEbits	set	3990
   155  0000                     _TRISFbits	set	3991
   156  0000                     _TRISGbits	set	3992
   157  0000                     _TRISH	set	3993
   158  0000                     _TRISJbits	set	3994
   159                           
   160                           ; #config settings
   161  0000                     
   162                           	psect	cinit
   163  00123C                     __pcinit:
   164                           	opt stack 0
   165  00123C                     start_initialization:
   166                           	opt stack 0
   167  00123C                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Clear objects allocated to BANK0 (32 bytes)
   171  00123C  EE00  F092         	lfsr	0,__pbssBANK0
   172  001240  0E20               	movlw	32
   173  001242                     clear_0:
   174  001242  6AEE               	clrf	postinc0,c
   175  001244  06E8               	decf	wreg,f,c
   176  001246  E1FD               	bnz	clear_0
   177                           
   178                           ; Clear objects allocated to COMRAM (12 bytes)
   179  001248  EE00  F038         	lfsr	0,__pbssCOMRAM
   180  00124C  0E0C               	movlw	12
   181  00124E                     clear_1:
   182  00124E  6AEE               	clrf	postinc0,c
   183  001250  06E8               	decf	wreg,f,c
   184  001252  E1FD               	bnz	clear_1
   185                           
   186                           ; Initialize objects allocated to BANK0 (3 bytes)
   187                           ; load TBLPTR registers with __pidataBANK0
   188  001254  0ECA               	movlw	low __pidataBANK0
   189  001256  6EF6               	movwf	tblptrl,c
   190  001258  0E18               	movlw	high __pidataBANK0
   191  00125A  6EF7               	movwf	tblptrh,c
   192  00125C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   193  00125E  6EF8               	movwf	tblptru,c
   194  001260  0009               	tblrd		*+	;fetch initializer
   195  001262  CFF5 F0B2          	movff	tablat,__pdataBANK0
   196  001266  0009               	tblrd		*+	;fetch initializer
   197  001268  CFF5 F0B3          	movff	tablat,__pdataBANK0+1
   198  00126C  0009               	tblrd		*+	;fetch initializer
   199  00126E  CFF5 F0B4          	movff	tablat,__pdataBANK0+2
   200                           
   201                           ; Initialize objects allocated to COMRAM (4 bytes)
   202                           ; load TBLPTR registers with __pidataCOMRAM
   203  001272  0EC6               	movlw	low __pidataCOMRAM
   204  001274  6EF6               	movwf	tblptrl,c
   205  001276  0E18               	movlw	high __pidataCOMRAM
   206  001278  6EF7               	movwf	tblptrh,c
   207  00127A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   208  00127C  6EF8               	movwf	tblptru,c
   209  00127E  EE00  F044         	lfsr	0,__pdataCOMRAM
   210  001282  EE10 F004          	lfsr	1,4
   211  001286                     copy_data0:
   212  001286  0009               	tblrd		*+
   213  001288  CFF5 FFEE          	movff	tablat,postinc0
   214  00128C  50E5               	movf	postdec1,w,c
   215  00128E  50E1               	movf	fsr1l,w,c
   216  001290  E1FA               	bnz	copy_data0
   217  001292                     end_of_initialization:
   218                           	opt stack 0
   219  001292                     __end_of__initialization:
   220                           	opt stack 0
   221  001292  0100               	movlb	0
   222  001294  EF0E  F000         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1l	equ	0xFE1
   231                           
   232                           	psect	bssCOMRAM
   233  000038                     __pbssCOMRAM:
   234                           	opt stack 0
   235  000038                     _DoubleSPIS:
   236                           	opt stack 0
   237  000038                     	ds	4
   238  00003C                     _DDouble:
   239                           	opt stack 0
   240  00003C                     	ds	3
   241  00003F                     _SetAngle:
   242                           	opt stack 0
   243  00003F                     	ds	3
   244  000042                     _DoublePtr:
   245                           	opt stack 0
   246  000042                     	ds	2
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           postdec1	equ	0xFE5
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	dataCOMRAM
   257  000044                     __pdataCOMRAM:
   258                           	opt stack 0
   259  000044                     _DeadbandHigh:
   260                           	opt stack 0
   261  000044                     	ds	2
   262  000046                     _DeadbandLow:
   263                           	opt stack 0
   264  000046                     	ds	2
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	bssBANK0
   275  000092                     __pbssBANK0:
   276                           	opt stack 0
   277  000092                     _CurrentAngle:
   278                           	opt stack 0
   279  000092                     	ds	3
   280  000095                     _CurrentVelocity:
   281                           	opt stack 0
   282  000095                     	ds	3
   283  000098                     _Kd:
   284                           	opt stack 0
   285  000098                     	ds	3
   286  00009B                     _Ki:
   287                           	opt stack 0
   288  00009B                     	ds	3
   289  00009E                     _Kp:
   290                           	opt stack 0
   291  00009E                     	ds	3
   292  0000A1                     _error:
   293                           	opt stack 0
   294  0000A1                     	ds	3
   295  0000A4                     _intErr:
   296                           	opt stack 0
   297  0000A4                     	ds	3
   298  0000A7                     _prevErr:
   299                           	opt stack 0
   300  0000A7                     	ds	3
   301  0000AA                     _motorInput:
   302                           	opt stack 0
   303  0000AA                     	ds	2
   304  0000AC                     _Command:
   305                           	opt stack 0
   306  0000AC                     	ds	1
   307  0000AD                     _JSEnableFlag:
   308                           	opt stack 0
   309  0000AD                     	ds	1
   310  0000AE                     _PIDEnableFlag:
   311                           	opt stack 0
   312  0000AE                     	ds	1
   313  0000AF                     _SPIflag:
   314                           	opt stack 0
   315  0000AF                     	ds	1
   316  0000B0                     _TMR0Flag:
   317                           	opt stack 0
   318  0000B0                     	ds	1
   319  0000B1                     _dummy_byte:
   320                           	opt stack 0
   321  0000B1                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           postdec1	equ	0xFE5
   329                           fsr1l	equ	0xFE1
   330                           
   331                           	psect	dataBANK0
   332  0000B2                     __pdataBANK0:
   333                           	opt stack 0
   334  0000B2                     _loopTime:
   335                           	opt stack 0
   336  0000B2                     	ds	3
   337                           tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           tblptrl	equ	0xFF6
   340                           tablat	equ	0xFF5
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           postdec1	equ	0xFE5
   344                           fsr1l	equ	0xFE1
   345                           
   346                           	psect	cstackBANK0
   347  000060                     __pcstackBANK0:
   348                           	opt stack 0
   349  000060                     ___ftmul@exp:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x0
   353  000060                     	ds	1
   354  000061                     ___ftmul@f3_as_product:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x1
   358  000061                     	ds	3
   359  000064                     ___ftmul@cntr:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x4
   363  000064                     	ds	1
   364  000065                     ___ftmul@sign:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x5
   368  000065                     	ds	1
   369  000066                     ?___ftadd:
   370                           	opt stack 0
   371  000066                     ?_RTD2Angle:
   372                           	opt stack 0
   373  000066                     RTD2Angle@RTDAngle:
   374                           	opt stack 0
   375  000066                     ___ftadd@f1:
   376                           	opt stack 0
   377                           
   378                           ; 3 bytes @ 0x6
   379  000066                     	ds	3
   380  000069                     ___ftadd@f2:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x9
   384  000069                     	ds	3
   385  00006C                     ??___ftadd:
   386                           
   387                           ; 0 bytes @ 0xC
   388  00006C                     	ds	3
   389  00006F                     ___ftadd@sign:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0xF
   393  00006F                     	ds	1
   394  000070                     ___ftadd@exp2:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x10
   398  000070                     	ds	1
   399  000071                     ___ftadd@exp1:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x11
   403  000071                     	ds	1
   404  000072                     ?___ftsub:
   405                           	opt stack 0
   406  000072                     ?___fttol:
   407                           	opt stack 0
   408  000072                     ___ftsub@f1:
   409                           	opt stack 0
   410  000072                     ___fttol@f1:
   411                           	opt stack 0
   412                           
   413                           ; 3 bytes @ 0x12
   414  000072                     	ds	3
   415  000075                     ___ftsub@f2:
   416                           	opt stack 0
   417                           
   418                           ; 3 bytes @ 0x15
   419  000075                     	ds	1
   420  000076                     ??___fttol:
   421                           
   422                           ; 0 bytes @ 0x16
   423  000076                     	ds	5
   424  00007B                     ___fttol@sign1:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x1B
   428  00007B                     	ds	1
   429  00007C                     ___fttol@lval:
   430                           	opt stack 0
   431                           
   432                           ; 4 bytes @ 0x1C
   433  00007C                     	ds	4
   434  000080                     ___fttol@exp1:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x20
   438  000080                     	ds	1
   439  000081                     ?_abs:
   440                           	opt stack 0
   441  000081                     abs@a:
   442                           	opt stack 0
   443  000081                     calculatePID@angle:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x21
   447  000081                     	ds	2
   448  000083                     ??_abs:
   449                           
   450                           ; 0 bytes @ 0x23
   451  000083                     	ds	1
   452  000084                     calculatePID@setpoint:
   453                           	opt stack 0
   454                           
   455                           ; 3 bytes @ 0x24
   456  000084                     	ds	1
   457  000085                     ImplementPIDMotion@PIDValue:
   458                           	opt stack 0
   459  000085                     ImplementJSMotion@JoystickValue:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x25
   463  000085                     	ds	2
   464  000087                     ??_ImplementPIDMotion:
   465  000087                     ??_ImplementJSMotion:
   466  000087                     calculatePID@derErr:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x27
   470  000087                     	ds	2
   471  000089                     ImplementJSMotion@CCPinput:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x29
   475  000089                     	ds	1
   476  00008A                     _calculatePID$3293:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0x2A
   480  00008A                     	ds	3
   481  00008D                     _calculatePID$3294:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x2D
   485  00008D                     	ds	3
   486  000090                     main@temporary:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x30
   490  000090                     	ds	1
   491  000091                     main@x:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x31
   495  000091                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	cstackCOMRAM
   506  000001                     __pcstackCOMRAM:
   507                           	opt stack 0
   508  000001                     Write_b_eep@badd:
   509                           	opt stack 0
   510  000001                     EEDisassembleDouble@dub:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x0
   514  000001                     	ds	2
   515  000003                     Write_b_eep@bdat:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x2
   519  000003                     	ds	1
   520  000004                     Write_b_eep@GIE_BIT_VAL:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x3
   524  000004                     	ds	1
   525  000005                     EEWriteChar@ch:
   526                           	opt stack 0
   527  000005                     EEWriteDouble@dub:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x4
   531  000005                     	ds	1
   532  000006                     EEWriteChar@location:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x5
   536  000006                     	ds	2
   537  000008                     EEWriteDouble@location:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x7
   541  000008                     	ds	1
   542  000009                     EEWriteDouble@x:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x8
   546  000009                     	ds	1
   547  00000A                     ??_ISR:
   548                           
   549                           ; 0 bytes @ 0x9
   550  00000A                     	ds	14
   551  000018                     ?_DetectMovement:
   552                           	opt stack 0
   553  000018                     ?___ftpack:
   554                           	opt stack 0
   555  000018                     ?_SPIReassembleDouble:
   556                           	opt stack 0
   557  000018                     ?_EEReassembleDouble:
   558                           	opt stack 0
   559  000018                     ?___ftneg:
   560                           	opt stack 0
   561  000018                     SendSPI1@temp:
   562                           	opt stack 0
   563  000018                     GenerateChecksum@sum:
   564                           	opt stack 0
   565  000018                     OpenSPI1@bus_mode:
   566                           	opt stack 0
   567  000018                     Delay10TCYx@unit:
   568                           	opt stack 0
   569  000018                     Delay1KTCYx@unit:
   570                           	opt stack 0
   571  000018                     Delay1TCYx@unit:
   572                           	opt stack 0
   573  000018                     Read_b_eep@badd:
   574                           	opt stack 0
   575  000018                     ___ftpack@arg:
   576                           	opt stack 0
   577  000018                     ___ftge@ff1:
   578                           	opt stack 0
   579  000018                     ___ftneg@f1:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x17
   583  000018                     	ds	1
   584  000019                     ?_ReadRTDpos:
   585                           	opt stack 0
   586  000019                     SendSPI1@data:
   587                           	opt stack 0
   588  000019                     GenerateChecksum@y:
   589                           	opt stack 0
   590  000019                     OpenSPI1@smp_phase:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x18
   594  000019                     	ds	1
   595  00001A                     ??_DetectMovement:
   596  00001A                     EEReadChar@location:
   597                           	opt stack 0
   598  00001A                     OpenSPI1@sync_mode:
   599                           	opt stack 0
   600  00001A                     SPIDisassembleDouble@dub:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x19
   604  00001A                     	ds	1
   605  00001B                     ??_ReadRTDpos:
   606  00001B                     EEReadChar@ch:
   607                           	opt stack 0
   608  00001B                     ___ftpack@exp:
   609                           	opt stack 0
   610  00001B                     DetectMovement@JoystickResult:
   611                           	opt stack 0
   612  00001B                     SPIReassembleDouble@dub:
   613                           	opt stack 0
   614  00001B                     EEReassembleDouble@dub:
   615                           	opt stack 0
   616  00001B                     ___ftge@ff2:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x1A
   620  00001B                     	ds	1
   621  00001C                     ___ftpack@sign:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x1B
   625  00001C                     	ds	1
   626  00001D                     ??___ftpack:
   627  00001D                     DetectMovement@ADCresult:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x1C
   631  00001D                     	ds	1
   632  00001E                     ??___ftge:
   633  00001E                     ?_EEReadDouble:
   634                           	opt stack 0
   635  00001E                     ReadRTDpos@HighPosition:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x1D
   639  00001E                     	ds	1
   640  00001F                     ReadRTDpos@LowPosition:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1E
   644  00001F                     	ds	1
   645  000020                     ?___ftdiv:
   646                           	opt stack 0
   647  000020                     ?___lwtoft:
   648                           	opt stack 0
   649  000020                     ReadRTDpos@FullPosition:
   650                           	opt stack 0
   651  000020                     ___lwtoft@c:
   652                           	opt stack 0
   653  000020                     ___ftdiv@f1:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x1F
   657  000020                     	ds	1
   658  000021                     EEReadDouble@location:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x20
   662  000021                     	ds	1
   663  000022                     ReadRTDpos@x:
   664                           	opt stack 0
   665  000022                     EEReadDouble@x:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x21
   669  000022                     	ds	1
   670  000023                     ??_EEBootUp:
   671  000023                     ___ftdiv@f2:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x22
   675  000023                     	ds	2
   676  000025                     
   677                           ; 0 bytes @ 0x24
   678  000025                     	ds	1
   679  000026                     ??___ftdiv:
   680                           
   681                           ; 0 bytes @ 0x25
   682  000026                     	ds	3
   683  000029                     ___ftdiv@cntr:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x28
   687  000029                     	ds	1
   688  00002A                     ___ftdiv@f3:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x29
   692  00002A                     	ds	3
   693  00002D                     ___ftdiv@exp:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x2C
   697  00002D                     	ds	1
   698  00002E                     ___ftdiv@sign:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x2D
   702  00002E                     	ds	1
   703  00002F                     ?___ftmul:
   704                           	opt stack 0
   705  00002F                     ___ftmul@f1:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x2E
   709  00002F                     	ds	3
   710  000032                     ___ftmul@f2:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x31
   714  000032                     	ds	3
   715  000035                     ??___ftmul:
   716                           
   717                           ; 0 bytes @ 0x34
   718  000035                     	ds	3
   719  000038                     tblptru	equ	0xFF8
   720                           tblptrh	equ	0xFF7
   721                           tblptrl	equ	0xFF6
   722                           tablat	equ	0xFF5
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postdec1	equ	0xFE5
   726                           fsr1l	equ	0xFE1
   727                           
   728                           ; 0 bytes @ 0x37
   729 ;;
   730 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   731 ;;
   732 ;; *************** function _main *****************
   733 ;; Defined at:
   734 ;;		line 21 in file "RTDuC.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  x               1   49[BANK0 ] unsigned char 
   739 ;;  temporary       1   48[BANK0 ] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;		None               void
   742 ;; Registers used:
   743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;Total ram usage:        2 bytes
   754 ;; Hardware stack levels required when called:   10
   755 ;; This function calls:
   756 ;;		_DetectJoystick
   757 ;;		_DetectMovement
   758 ;;		_ImplementJSMotion
   759 ;;		_ImplementPIDMotion
   760 ;;		_RTD2Angle
   761 ;;		_ReadRTDpos
   762 ;;		_ReceiveSPI1
   763 ;;		_SPIDisassembleDouble
   764 ;;		_SPIReassembleDouble
   765 ;;		_SendSPI1
   766 ;;		_calculatePID
   767 ;;		_initialize
   768 ;; This function is called by:
   769 ;;		Startup code after reset
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text0
   774  00001C                     __ptext0:
   775                           	opt stack 0
   776  00001C                     _main:
   777                           	opt stack 21
   778                           
   779                           ;RTDuC.c: 23: unsigned char temporary, x = 0;
   780                           
   781                           ;incstack = 0
   782  00001C  0E00               	movlw	0
   783  00001E  0100               	movlb	0	; () banked
   784  000020  6F91               	movwf	main@x& (0+255),b
   785                           
   786                           ; BSR set to: 0
   787                           ;RTDuC.c: 25: initialize();
   788  000022  EC5C  F00B         	call	_initialize	;wreg free
   789                           
   790                           ;RTDuC.c: 27: PORTCbits.RC6 = 0;
   791  000026  9C82               	bcf	3970,6,c	;volatile
   792                           
   793                           ;RTDuC.c: 28: SSP1BUF = dummy_byte;
   794  000028  C0B1  FFC9         	movff	_dummy_byte,4041	;volatile
   795  00002C  D000               	goto	l3536
   796  00002E                     l3536:
   797                           
   798                           ;RTDuC.c: 31: {
   799                           ;RTDuC.c: 32: if (SPIflag == 1)
   800  00002E  0100               	movlb	0	; () banked
   801  000030  05AF               	decf	_SPIflag& (0+255),w,b
   802  000032  A4D8               	btfss	status,2,c
   803  000034  D0F0               	goto	l3630
   804                           
   805                           ; BSR set to: 0
   806                           ;RTDuC.c: 33: {
   807                           ;RTDuC.c: 34: SPIflag = 0;
   808  000036  0E00               	movlw	0
   809  000038  0100               	movlb	0	; () banked
   810  00003A  6FAF               	movwf	_SPIflag& (0+255),b
   811                           
   812                           ; BSR set to: 0
   813                           ;RTDuC.c: 35: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   814  00003C  0E02               	movlw	2
   815  00003E  0100               	movlb	0	; () banked
   816  000040  19AC               	xorwf	_Command& (0+255),w,b
   817  000042  B4D8               	btfsc	status,2,c
   818  000044  D014               	goto	l3550
   819                           
   820                           ; BSR set to: 0
   821  000046  0E03               	movlw	3
   822  000048  0100               	movlb	0	; () banked
   823  00004A  19AC               	xorwf	_Command& (0+255),w,b
   824  00004C  B4D8               	btfsc	status,2,c
   825  00004E  D00F               	goto	l3550
   826                           
   827                           ; BSR set to: 0
   828  000050  0E04               	movlw	4
   829  000052  0100               	movlb	0	; () banked
   830  000054  19AC               	xorwf	_Command& (0+255),w,b
   831  000056  B4D8               	btfsc	status,2,c
   832  000058  D00A               	goto	l3550
   833                           
   834                           ; BSR set to: 0
   835  00005A  0E06               	movlw	6
   836  00005C  0100               	movlb	0	; () banked
   837  00005E  19AC               	xorwf	_Command& (0+255),w,b
   838  000060  B4D8               	btfsc	status,2,c
   839  000062  D005               	goto	l3550
   840                           
   841                           ; BSR set to: 0
   842  000064  0E08               	movlw	8
   843  000066  0100               	movlb	0	; () banked
   844  000068  19AC               	xorwf	_Command& (0+255),w,b
   845  00006A  A4D8               	btfss	status,2,c
   846  00006C  D063               	goto	l3586
   847  00006E                     l3550:
   848                           
   849                           ; BSR set to: 0
   850                           ;RTDuC.c: 36: {
   851                           ;RTDuC.c: 37: if (Command == 0x02)
   852  00006E  0E02               	movlw	2
   853  000070  0100               	movlb	0	; () banked
   854  000072  19AC               	xorwf	_Command& (0+255),w,b
   855  000074  A4D8               	btfss	status,2,c
   856  000076  D009               	goto	l3554
   857                           
   858                           ; BSR set to: 0
   859                           ;RTDuC.c: 38: SPIDisassembleDouble(CurrentAngle);
   860  000078  C092  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   861  00007C  C093  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   862  000080  C094  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   863  000084  ECA9  F00A         	call	_SPIDisassembleDouble	;wreg free
   864  000088  D038               	goto	l3570
   865  00008A                     l3554:
   866                           
   867                           ;RTDuC.c: 39: else if (Command == 0x03)
   868  00008A  0E03               	movlw	3
   869  00008C  0100               	movlb	0	; () banked
   870  00008E  19AC               	xorwf	_Command& (0+255),w,b
   871  000090  A4D8               	btfss	status,2,c
   872  000092  D009               	goto	l3558
   873                           
   874                           ; BSR set to: 0
   875                           ;RTDuC.c: 40: SPIDisassembleDouble(CurrentVelocity);
   876  000094  C095  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   877  000098  C096  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   878  00009C  C097  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   879  0000A0  ECA9  F00A         	call	_SPIDisassembleDouble	;wreg free
   880  0000A4  D02A               	goto	l3570
   881  0000A6                     l3558:
   882                           
   883                           ;RTDuC.c: 41: else if (Command == 0x04)
   884  0000A6  0E04               	movlw	4
   885  0000A8  0100               	movlb	0	; () banked
   886  0000AA  19AC               	xorwf	_Command& (0+255),w,b
   887  0000AC  A4D8               	btfss	status,2,c
   888  0000AE  D009               	goto	l3562
   889                           
   890                           ; BSR set to: 0
   891                           ;RTDuC.c: 42: SPIDisassembleDouble(Kp);
   892  0000B0  C09E  F01A         	movff	_Kp,SPIDisassembleDouble@dub
   893  0000B4  C09F  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   894  0000B8  C0A0  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   895  0000BC  ECA9  F00A         	call	_SPIDisassembleDouble	;wreg free
   896  0000C0  D01C               	goto	l3570
   897  0000C2                     l3562:
   898                           
   899                           ;RTDuC.c: 43: else if (Command == 0x06)
   900  0000C2  0E06               	movlw	6
   901  0000C4  0100               	movlb	0	; () banked
   902  0000C6  19AC               	xorwf	_Command& (0+255),w,b
   903  0000C8  A4D8               	btfss	status,2,c
   904  0000CA  D009               	goto	l3566
   905                           
   906                           ; BSR set to: 0
   907                           ;RTDuC.c: 44: SPIDisassembleDouble(Ki);
   908  0000CC  C09B  F01A         	movff	_Ki,SPIDisassembleDouble@dub
   909  0000D0  C09C  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   910  0000D4  C09D  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   911  0000D8  ECA9  F00A         	call	_SPIDisassembleDouble	;wreg free
   912  0000DC  D00E               	goto	l3570
   913  0000DE                     l3566:
   914                           
   915                           ;RTDuC.c: 45: else if (Command == 0x08)
   916  0000DE  0E08               	movlw	8
   917  0000E0  0100               	movlb	0	; () banked
   918  0000E2  19AC               	xorwf	_Command& (0+255),w,b
   919  0000E4  A4D8               	btfss	status,2,c
   920  0000E6  D009               	goto	l3570
   921                           
   922                           ; BSR set to: 0
   923                           ;RTDuC.c: 46: SPIDisassembleDouble(Kd);
   924  0000E8  C098  F01A         	movff	_Kd,SPIDisassembleDouble@dub
   925  0000EC  C099  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   926  0000F0  C09A  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   927  0000F4  ECA9  F00A         	call	_SPIDisassembleDouble	;wreg free
   928  0000F8  D000               	goto	l3570
   929  0000FA                     l3570:
   930                           
   931                           ;RTDuC.c: 47: INTCONbits.GIE = 0;
   932  0000FA  9EF2               	bcf	intcon,7,c	;volatile
   933                           
   934                           ;RTDuC.c: 48: PORTCbits.RC6 = 0;
   935  0000FC  9C82               	bcf	3970,6,c	;volatile
   936                           
   937                           ;RTDuC.c: 49: for (x = 0; x < 4; x++)
   938  0000FE  0E00               	movlw	0
   939  000100  0100               	movlb	0	; () banked
   940  000102  6F91               	movwf	main@x& (0+255),b
   941  000104  D00F               	goto	l3584
   942                           
   943                           ; BSR set to: 0
   944                           
   945                           ; BSR set to: 0
   946  000106  D012               	goto	l490
   947  000108                     l3580:
   948                           
   949                           ; BSR set to: 0
   950                           ;RTDuC.c: 50: SendSPI1(DoubleSPIS[x]);
   951  000108  0100               	movlb	0	; () banked
   952  00010A  5191               	movf	main@x& (0+255),w,b
   953  00010C  0D01               	mullw	1
   954  00010E  0E38               	movlw	low _DoubleSPIS
   955  000110  24F3               	addwf	prodl,w,c
   956  000112  6ED9               	movwf	fsr2l,c
   957  000114  0E00               	movlw	high _DoubleSPIS
   958  000116  20F4               	addwfc	prodh,w,c
   959  000118  6EDA               	movwf	fsr2h,c
   960  00011A  50DF               	movf	indf2,w,c
   961  00011C  EC06  F00C         	call	_SendSPI1
   962  000120  0100               	movlb	0	; () banked
   963  000122  2B91               	incf	main@x& (0+255),f,b
   964  000124                     l3584:
   965                           
   966                           ; BSR set to: 0
   967  000124  0E03               	movlw	3
   968  000126  0100               	movlb	0	; () banked
   969  000128  6591               	cpfsgt	main@x& (0+255),b
   970  00012A  D7EE               	goto	l3580
   971  00012C                     l490:
   972                           
   973                           ; BSR set to: 0
   974                           ;RTDuC.c: 51: temporary = SSP1BUF;
   975  00012C  CFC9 F090          	movff	4041,main@temporary	;volatile
   976                           
   977                           ;RTDuC.c: 52: INTCONbits.GIE = 1;
   978  000130  8EF2               	bsf	intcon,7,c	;volatile
   979                           
   980                           ;RTDuC.c: 53: }
   981  000132  D06F               	goto	l3628
   982  000134                     l3586:
   983                           
   984                           ; BSR set to: 0
   985                           ;RTDuC.c: 54: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   986  000134  0100               	movlb	0	; () banked
   987  000136  05AC               	decf	_Command& (0+255),w,b
   988  000138  B4D8               	btfsc	status,2,c
   989  00013A  D00F               	goto	l494
   990                           
   991                           ; BSR set to: 0
   992  00013C  0E05               	movlw	5
   993  00013E  0100               	movlb	0	; () banked
   994  000140  19AC               	xorwf	_Command& (0+255),w,b
   995  000142  B4D8               	btfsc	status,2,c
   996  000144  D00A               	goto	l494
   997                           
   998                           ; BSR set to: 0
   999  000146  0E07               	movlw	7
  1000  000148  0100               	movlb	0	; () banked
  1001  00014A  19AC               	xorwf	_Command& (0+255),w,b
  1002  00014C  B4D8               	btfsc	status,2,c
  1003  00014E  D005               	goto	l494
  1004                           
  1005                           ; BSR set to: 0
  1006  000150  0E09               	movlw	9
  1007  000152  0100               	movlb	0	; () banked
  1008  000154  19AC               	xorwf	_Command& (0+255),w,b
  1009  000156  A4D8               	btfss	status,2,c
  1010  000158  D05C               	goto	l3628
  1011  00015A                     l494:
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;RTDuC.c: 55: {
  1015                           ;RTDuC.c: 56: INTCONbits.GIE = 0;
  1016  00015A  9EF2               	bcf	intcon,7,c	;volatile
  1017                           
  1018                           ;RTDuC.c: 57: PORTCbits.RC6 = 0;
  1019  00015C  9C82               	bcf	3970,6,c	;volatile
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;RTDuC.c: 58: for (x = 0; x != 4; x++)
  1023  00015E  0E00               	movlw	0
  1024  000160  0100               	movlb	0	; () banked
  1025  000162  6F91               	movwf	main@x& (0+255),b
  1026  000164                     l3596:
  1027                           
  1028                           ; BSR set to: 0
  1029  000164  0E04               	movlw	4
  1030  000166  0100               	movlb	0	; () banked
  1031  000168  1991               	xorwf	main@x& (0+255),w,b
  1032  00016A  B4D8               	btfsc	status,2,c
  1033  00016C  D011               	goto	l496
  1034  00016E  D001               	goto	l3600
  1035                           
  1036                           ; BSR set to: 0
  1037  000170  D00F               	goto	l496
  1038  000172                     l3600:
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;RTDuC.c: 59: DoubleSPIS[x] = ReceiveSPI1();
  1042  000172  0100               	movlb	0	; () banked
  1043  000174  5191               	movf	main@x& (0+255),w,b
  1044  000176  0D01               	mullw	1
  1045  000178  0E38               	movlw	low _DoubleSPIS
  1046  00017A  24F3               	addwf	prodl,w,c
  1047  00017C  6ED9               	movwf	fsr2l,c
  1048  00017E  0E00               	movlw	high _DoubleSPIS
  1049  000180  20F4               	addwfc	prodh,w,c
  1050  000182  6EDA               	movwf	fsr2h,c
  1051  000184  EC2E  F00C         	call	_ReceiveSPI1	;wreg free
  1052  000188  6EDF               	movwf	indf2,c
  1053  00018A  0100               	movlb	0	; () banked
  1054  00018C  2B91               	incf	main@x& (0+255),f,b
  1055  00018E  D7EA               	goto	l3596
  1056  000190                     l496:
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;RTDuC.c: 60: INTCONbits.GIE = 1;
  1060  000190  8EF2               	bsf	intcon,7,c	;volatile
  1061                           
  1062                           ; BSR set to: 0
  1063                           ;RTDuC.c: 61: if (Command == 0x01)
  1064  000192  0100               	movlb	0	; () banked
  1065  000194  05AC               	decf	_Command& (0+255),w,b
  1066  000196  A4D8               	btfss	status,2,c
  1067  000198  D00F               	goto	l3614
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;RTDuC.c: 62: {
  1071                           ;RTDuC.c: 63: SetAngle = SPIReassembleDouble();
  1072  00019A  EC67  F00A         	call	_SPIReassembleDouble	;wreg free
  1073  00019E  C018  F03F         	movff	?_SPIReassembleDouble,_SetAngle
  1074  0001A2  C019  F040         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1075  0001A6  C01A  F041         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1076                           
  1077                           ;RTDuC.c: 64: PIDEnableFlag = 3;
  1078  0001AA  0E03               	movlw	3
  1079  0001AC  0100               	movlb	0	; () banked
  1080  0001AE  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;RTDuC.c: 65: JSEnableFlag = 0;
  1084  0001B0  0E00               	movlw	0
  1085  0001B2  0100               	movlb	0	; () banked
  1086  0001B4  6FAD               	movwf	_JSEnableFlag& (0+255),b
  1087                           
  1088                           ;RTDuC.c: 66: }
  1089  0001B6  D02A               	goto	l3626
  1090  0001B8                     l3614:
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;RTDuC.c: 67: else if (Command == 0x05)
  1094  0001B8  0E05               	movlw	5
  1095  0001BA  0100               	movlb	0	; () banked
  1096  0001BC  19AC               	xorwf	_Command& (0+255),w,b
  1097  0001BE  A4D8               	btfss	status,2,c
  1098  0001C0  D009               	goto	l3618
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;RTDuC.c: 68: {
  1102                           ;RTDuC.c: 69: Kp = SPIReassembleDouble();
  1103  0001C2  EC67  F00A         	call	_SPIReassembleDouble	;wreg free
  1104  0001C6  C018  F09E         	movff	?_SPIReassembleDouble,_Kp
  1105  0001CA  C019  F09F         	movff	?_SPIReassembleDouble+1,_Kp+1
  1106  0001CE  C01A  F0A0         	movff	?_SPIReassembleDouble+2,_Kp+2
  1107                           
  1108                           ;RTDuC.c: 70: }
  1109  0001D2  D01C               	goto	l3626
  1110  0001D4                     l3618:
  1111                           
  1112                           ;RTDuC.c: 71: else if (Command == 0x07)
  1113  0001D4  0E07               	movlw	7
  1114  0001D6  0100               	movlb	0	; () banked
  1115  0001D8  19AC               	xorwf	_Command& (0+255),w,b
  1116  0001DA  A4D8               	btfss	status,2,c
  1117  0001DC  D009               	goto	l3622
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;RTDuC.c: 72: {
  1121                           ;RTDuC.c: 73: Ki = SPIReassembleDouble();
  1122  0001DE  EC67  F00A         	call	_SPIReassembleDouble	;wreg free
  1123  0001E2  C018  F09B         	movff	?_SPIReassembleDouble,_Ki
  1124  0001E6  C019  F09C         	movff	?_SPIReassembleDouble+1,_Ki+1
  1125  0001EA  C01A  F09D         	movff	?_SPIReassembleDouble+2,_Ki+2
  1126                           
  1127                           ;RTDuC.c: 74: }
  1128  0001EE  D00E               	goto	l3626
  1129  0001F0                     l3622:
  1130                           
  1131                           ;RTDuC.c: 75: else if (Command == 0x09)
  1132  0001F0  0E09               	movlw	9
  1133  0001F2  0100               	movlb	0	; () banked
  1134  0001F4  19AC               	xorwf	_Command& (0+255),w,b
  1135  0001F6  A4D8               	btfss	status,2,c
  1136  0001F8  D009               	goto	l3626
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;RTDuC.c: 76: {
  1140                           ;RTDuC.c: 77: Kd = SPIReassembleDouble();
  1141  0001FA  EC67  F00A         	call	_SPIReassembleDouble	;wreg free
  1142  0001FE  C018  F098         	movff	?_SPIReassembleDouble,_Kd
  1143  000202  C019  F099         	movff	?_SPIReassembleDouble+1,_Kd+1
  1144  000206  C01A  F09A         	movff	?_SPIReassembleDouble+2,_Kd+2
  1145  00020A  D000               	goto	l3626
  1146  00020C                     l3626:
  1147                           
  1148                           ;RTDuC.c: 78: }
  1149                           ;RTDuC.c: 79: temporary = SSP1BUF;
  1150  00020C  CFC9 F090          	movff	4041,main@temporary	;volatile
  1151  000210  D000               	goto	l3628
  1152  000212                     l3628:
  1153                           
  1154                           ;RTDuC.c: 80: }
  1155                           ;RTDuC.c: 81: PIE1bits.SSP1IE = 1;
  1156  000212  869D               	bsf	3997,3,c	;volatile
  1157  000214  D000               	goto	l3630
  1158  000216                     l3630:
  1159                           
  1160                           ;RTDuC.c: 82: }
  1161                           ;RTDuC.c: 84: DetectJoystick();
  1162  000216  ECBA  F00B         	call	_DetectJoystick	;wreg free
  1163                           
  1164                           ;RTDuC.c: 85: if (JSEnableFlag == 1)
  1165  00021A  0100               	movlb	0	; () banked
  1166  00021C  05AD               	decf	_JSEnableFlag& (0+255),w,b
  1167  00021E  A4D8               	btfss	status,2,c
  1168  000220  D009               	goto	l3636
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;RTDuC.c: 86: {
  1172                           ;RTDuC.c: 87: ImplementJSMotion(DetectMovement());
  1173  000222  ECE7  F008         	call	_DetectMovement	;wreg free
  1174  000226  C018  F085         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1175  00022A  C019  F086         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1176  00022E  EC30  F004         	call	_ImplementJSMotion	;wreg free
  1177  000232  D000               	goto	l3636
  1178  000234                     l3636:
  1179                           
  1180                           ;RTDuC.c: 88: }
  1181                           ;RTDuC.c: 90: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1182  000234  0100               	movlb	0	; () banked
  1183  000236  05AE               	decf	_PIDEnableFlag& (0+255),w,b
  1184  000238  A4D8               	btfss	status,2,c
  1185  00023A  D02D               	goto	l3650
  1186                           
  1187                           ; BSR set to: 0
  1188  00023C  0100               	movlb	0	; () banked
  1189  00023E  05B0               	decf	_TMR0Flag& (0+255),w,b
  1190  000240  A4D8               	btfss	status,2,c
  1191  000242  D029               	goto	l3650
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;RTDuC.c: 91: {
  1195                           ;RTDuC.c: 92: PORTCbits.RC6 = 1;
  1196  000244  8C82               	bsf	3970,6,c	;volatile
  1197                           
  1198                           ;RTDuC.c: 93: INTCONbits.GIE = 0;
  1199  000246  9EF2               	bcf	intcon,7,c	;volatile
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;RTDuC.c: 94: CurrentAngle = RTD2Angle(ReadRTDpos());
  1203  000248  EC4C  F009         	call	_ReadRTDpos	;wreg free
  1204  00024C  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1205  000250  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1206  000254  ECC7  F00A         	call	_RTD2Angle	;wreg free
  1207  000258  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1208  00025C  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1209  000260  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1210                           
  1211                           ;RTDuC.c: 95: calculatePID(CurrentAngle, SetAngle);
  1212  000264  C092  F081         	movff	_CurrentAngle,calculatePID@angle
  1213  000268  C093  F082         	movff	_CurrentAngle+1,calculatePID@angle+1
  1214  00026C  C094  F083         	movff	_CurrentAngle+2,calculatePID@angle+2
  1215  000270  C03F  F084         	movff	_SetAngle,calculatePID@setpoint
  1216  000274  C040  F085         	movff	_SetAngle+1,calculatePID@setpoint+1
  1217  000278  C041  F086         	movff	_SetAngle+2,calculatePID@setpoint+2
  1218  00027C  EC96  F001         	call	_calculatePID	;wreg free
  1219                           
  1220                           ;RTDuC.c: 96: ImplementPIDMotion(motorInput);
  1221  000280  C0AA  F085         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1222  000284  C0AB  F086         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1223  000288  ECB7  F007         	call	_ImplementPIDMotion	;wreg free
  1224                           
  1225                           ;RTDuC.c: 97: TMR0Flag = 0;
  1226  00028C  0E00               	movlw	0
  1227  00028E  0100               	movlb	0	; () banked
  1228  000290  6FB0               	movwf	_TMR0Flag& (0+255),b
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;RTDuC.c: 98: INTCONbits.GIE = 1;
  1232  000292  8EF2               	bsf	intcon,7,c	;volatile
  1233  000294  D02F               	goto	l3666
  1234  000296                     l3650:
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;RTDuC.c: 102: else if (PIDEnableFlag == 3)
  1238  000296  0E03               	movlw	3
  1239  000298  0100               	movlb	0	; () banked
  1240  00029A  19AE               	xorwf	_PIDEnableFlag& (0+255),w,b
  1241  00029C  A4D8               	btfss	status,2,c
  1242  00029E  D02C               	goto	l3668
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;RTDuC.c: 103: {
  1246                           ;RTDuC.c: 104: PORTCbits.RC6 = 1;
  1247  0002A0  8C82               	bsf	3970,6,c	;volatile
  1248                           
  1249                           ;RTDuC.c: 105: INTCONbits.GIE = 0;
  1250  0002A2  9EF2               	bcf	intcon,7,c	;volatile
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;RTDuC.c: 106: TMR0H = 0xDB;
  1254  0002A4  0EDB               	movlw	219
  1255  0002A6  6ED7               	movwf	4055,c	;volatile
  1256                           
  1257                           ;RTDuC.c: 107: TMR0L = 0x60;
  1258  0002A8  0E60               	movlw	96
  1259  0002AA  6ED6               	movwf	4054,c	;volatile
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;RTDuC.c: 108: CurrentAngle = RTD2Angle(ReadRTDpos());
  1263  0002AC  EC4C  F009         	call	_ReadRTDpos	;wreg free
  1264  0002B0  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1265  0002B4  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1266  0002B8  ECC7  F00A         	call	_RTD2Angle	;wreg free
  1267  0002BC  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1268  0002C0  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1269  0002C4  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1270                           
  1271                           ;RTDuC.c: 109: calculatePID(CurrentAngle, SetAngle);
  1272  0002C8  C092  F081         	movff	_CurrentAngle,calculatePID@angle
  1273  0002CC  C093  F082         	movff	_CurrentAngle+1,calculatePID@angle+1
  1274  0002D0  C094  F083         	movff	_CurrentAngle+2,calculatePID@angle+2
  1275  0002D4  C03F  F084         	movff	_SetAngle,calculatePID@setpoint
  1276  0002D8  C040  F085         	movff	_SetAngle+1,calculatePID@setpoint+1
  1277  0002DC  C041  F086         	movff	_SetAngle+2,calculatePID@setpoint+2
  1278  0002E0  EC96  F001         	call	_calculatePID	;wreg free
  1279                           
  1280                           ;RTDuC.c: 110: ImplementPIDMotion(motorInput);
  1281  0002E4  C0AA  F085         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1282  0002E8  C0AB  F086         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1283  0002EC  ECB7  F007         	call	_ImplementPIDMotion	;wreg free
  1284                           
  1285                           ;RTDuC.c: 111: INTCONbits.GIE = 1;
  1286  0002F0  8EF2               	bsf	intcon,7,c	;volatile
  1287                           
  1288                           ;RTDuC.c: 113: T0CONbits.TMR0ON = 1;
  1289  0002F2  8ED5               	bsf	4053,7,c	;volatile
  1290  0002F4                     l3666:
  1291                           
  1292                           ;RTDuC.c: 114: PORTCbits.RC6 = 0;
  1293  0002F4  9C82               	bcf	3970,6,c	;volatile
  1294                           
  1295                           ;RTDuC.c: 115: }
  1296  0002F6  D69B               	goto	l3536
  1297  0002F8                     l3668:
  1298                           
  1299                           ;RTDuC.c: 117: else if (TMR0Flag == 1)
  1300  0002F8  0100               	movlb	0	; () banked
  1301  0002FA  05B0               	decf	_TMR0Flag& (0+255),w,b
  1302  0002FC  A4D8               	btfss	status,2,c
  1303  0002FE  D697               	goto	l3536
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;RTDuC.c: 118: {
  1307                           ;RTDuC.c: 119: INTCONbits.GIE = 0;
  1308  000300  9EF2               	bcf	intcon,7,c	;volatile
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;RTDuC.c: 120: CurrentAngle = RTD2Angle(ReadRTDpos());
  1312  000302  EC4C  F009         	call	_ReadRTDpos	;wreg free
  1313  000306  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1314  00030A  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1315  00030E  ECC7  F00A         	call	_RTD2Angle	;wreg free
  1316  000312  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1317  000316  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1318  00031A  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1319                           
  1320                           ;RTDuC.c: 121: INTCONbits.GIE = 1;
  1321  00031E  8EF2               	bsf	intcon,7,c	;volatile
  1322                           
  1323                           ;RTDuC.c: 122: TMR0Flag = 0;
  1324  000320  0E00               	movlw	0
  1325  000322  0100               	movlb	0	; () banked
  1326  000324  6FB0               	movwf	_TMR0Flag& (0+255),b
  1327                           
  1328                           ; BSR set to: 0
  1329                           
  1330                           ; BSR set to: 0
  1331                           
  1332                           ; BSR set to: 0
  1333                           
  1334                           ; BSR set to: 0
  1335  000326  D683               	goto	l3536
  1336                           
  1337                           ; BSR set to: 0
  1338                           
  1339                           ; BSR set to: 0
  1340  000328  EF0C  F000         	goto	start
  1341  00032C                     __end_of_main:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           prodh	equ	0xFF4
  1348                           prodl	equ	0xFF3
  1349                           intcon	equ	0xFF2
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1l	equ	0xFE1
  1354                           indf2	equ	0xFDF
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _initialize *****************
  1360 ;; Defined at:
  1361 ;;		line 127 in file "RTDuC.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;		None               void
  1368 ;; Registers used:
  1369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    9
  1382 ;; This function calls:
  1383 ;;		_EEPROMInit
  1384 ;;		_InitializeInterrupts
  1385 ;;		_JoystickInit
  1386 ;;		_MotorDriverInit
  1387 ;;		_PIDInit
  1388 ;;		_RTDInit
  1389 ;;		_SPIInit
  1390 ;;		_ZeroMotors
  1391 ;; This function is called by:
  1392 ;;		_main
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text1
  1397  0016B8                     __ptext1:
  1398                           	opt stack 0
  1399  0016B8                     _initialize:
  1400                           	opt stack 21
  1401                           
  1402                           ;RTDuC.c: 129: while (OSCCONbits.OSTS == 0);
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;incstack = 0
  1406  0016B8  D000               	goto	l515
  1407  0016BA                     l515:
  1408  0016BA  A6D3               	btfss	4051,3,c	;volatile
  1409  0016BC  D7FE               	goto	l515
  1410                           
  1411                           ;RTDuC.c: 131: RTDInit();
  1412  0016BE  EC17  F00B         	call	_RTDInit	;wreg free
  1413                           
  1414                           ;RTDuC.c: 132: SPIInit();
  1415  0016C2  ECEC  F00B         	call	_SPIInit	;wreg free
  1416                           
  1417                           ;RTDuC.c: 133: JoystickInit();
  1418  0016C6  EC2F  F00B         	call	_JoystickInit	;wreg free
  1419                           
  1420                           ;RTDuC.c: 134: MotorDriverInit();
  1421  0016CA  EC96  F00B         	call	_MotorDriverInit	;wreg free
  1422                           
  1423                           ;RTDuC.c: 135: PIDInit();
  1424  0016CE  EC22  F00A         	call	_PIDInit	;wreg free
  1425                           
  1426                           ;RTDuC.c: 136: EEPROMInit();
  1427  0016D2  EC12  F00C         	call	_EEPROMInit	;wreg free
  1428                           
  1429                           ;RTDuC.c: 137: ZeroMotors();
  1430  0016D6  EC63  F005         	call	_ZeroMotors	;wreg free
  1431                           
  1432                           ;RTDuC.c: 139: InitializeInterrupts();
  1433  0016DA  EC49  F00C         	call	_InitializeInterrupts	;wreg free
  1434                           
  1435                           ;RTDuC.c: 141: PORTAbits.RA3 = 1;
  1436  0016DE  8680               	bsf	3968,3,c	;volatile
  1437  0016E0  0012               	return		;funcret
  1438  0016E2                     __end_of_initialize:
  1439                           	opt stack 0
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           prodh	equ	0xFF4
  1445                           prodl	equ	0xFF3
  1446                           intcon	equ	0xFF2
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           postdec1	equ	0xFE5
  1450                           fsr1l	equ	0xFE1
  1451                           indf2	equ	0xFDF
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8
  1455                           
  1456 ;; *************** function _ZeroMotors *****************
  1457 ;; Defined at:
  1458 ;;		line 218 in file "RTDuC.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;		None               void
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;Total ram usage:        0 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    8
  1479 ;; This function calls:
  1480 ;;		_ImplementPIDMotion
  1481 ;;		_RTD2Angle
  1482 ;;		_ReadRTDpos
  1483 ;;		___fttol
  1484 ;;		_abs
  1485 ;;		_calculatePID
  1486 ;; This function is called by:
  1487 ;;		_initialize
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text2
  1492  000AC6                     __ptext2:
  1493                           	opt stack 0
  1494  000AC6                     _ZeroMotors:
  1495                           	opt stack 21
  1496                           
  1497                           ;RTDuC.c: 220: CurrentAngle = 2;
  1498                           
  1499                           ;incstack = 0
  1500  000AC6  0E00               	movlw	0
  1501  000AC8  0100               	movlb	0	; () banked
  1502  000ACA  6F92               	movwf	_CurrentAngle& (0+255),b
  1503  000ACC  0E00               	movlw	0
  1504  000ACE  0100               	movlb	0	; () banked
  1505  000AD0  6F93               	movwf	(_CurrentAngle+1)& (0+255),b
  1506  000AD2  0E40               	movlw	64
  1507  000AD4  0100               	movlb	0	; () banked
  1508  000AD6  6F94               	movwf	(_CurrentAngle+2)& (0+255),b
  1509                           
  1510                           ;RTDuC.c: 221: Ki = 1;
  1511  000AD8  0E00               	movlw	0
  1512  000ADA  0100               	movlb	0	; () banked
  1513  000ADC  6F9B               	movwf	_Ki& (0+255),b
  1514  000ADE  0E80               	movlw	128
  1515  000AE0  0100               	movlb	0	; () banked
  1516  000AE2  6F9C               	movwf	(_Ki+1)& (0+255),b
  1517  000AE4  0E3F               	movlw	63
  1518  000AE6  0100               	movlb	0	; () banked
  1519  000AE8  6F9D               	movwf	(_Ki+2)& (0+255),b
  1520                           
  1521                           ;RTDuC.c: 222: Kp = 2;
  1522  000AEA  0E00               	movlw	0
  1523  000AEC  0100               	movlb	0	; () banked
  1524  000AEE  6F9E               	movwf	_Kp& (0+255),b
  1525  000AF0  0E00               	movlw	0
  1526  000AF2  0100               	movlb	0	; () banked
  1527  000AF4  6F9F               	movwf	(_Kp+1)& (0+255),b
  1528  000AF6  0E40               	movlw	64
  1529  000AF8  0100               	movlb	0	; () banked
  1530  000AFA  6FA0               	movwf	(_Kp+2)& (0+255),b
  1531                           
  1532                           ;RTDuC.c: 223: Kd = 0.05;
  1533  000AFC  0ECD               	movlw	205
  1534  000AFE  0100               	movlb	0	; () banked
  1535  000B00  6F98               	movwf	_Kd& (0+255),b
  1536  000B02  0E4C               	movlw	76
  1537  000B04  0100               	movlb	0	; () banked
  1538  000B06  6F99               	movwf	(_Kd+1)& (0+255),b
  1539  000B08  0E3D               	movlw	61
  1540  000B0A  0100               	movlb	0	; () banked
  1541  000B0C  6F9A               	movwf	(_Kd+2)& (0+255),b
  1542                           
  1543                           ;RTDuC.c: 224: TMR0H = 0xDB;
  1544  000B0E  0EDB               	movlw	219
  1545  000B10  6ED7               	movwf	4055,c	;volatile
  1546                           
  1547                           ;RTDuC.c: 225: TMR0L = 0x60;
  1548  000B12  0E60               	movlw	96
  1549  000B14  6ED6               	movwf	4054,c	;volatile
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;RTDuC.c: 226: T0CONbits.TMR0ON = 1;
  1553  000B16  8ED5               	bsf	4053,7,c	;volatile
  1554                           
  1555                           ;RTDuC.c: 227: PIDEnableFlag = 3;
  1556  000B18  0E03               	movlw	3
  1557  000B1A  0100               	movlb	0	; () banked
  1558  000B1C  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  1559                           
  1560                           ;RTDuC.c: 228: SetAngle = 0;
  1561  000B1E  0E00               	movlw	0
  1562  000B20  6E3F               	movwf	_SetAngle,c
  1563  000B22  0E00               	movlw	0
  1564  000B24  6E40               	movwf	_SetAngle+1,c
  1565  000B26  0E00               	movlw	0
  1566  000B28  6E41               	movwf	_SetAngle+2,c
  1567  000B2A  D000               	goto	l3460
  1568  000B2C                     l3460:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;RTDuC.c: 230: {
  1572                           ;RTDuC.c: 231: CurrentAngle = RTD2Angle(ReadRTDpos());
  1573  000B2C  EC4C  F009         	call	_ReadRTDpos	;wreg free
  1574  000B30  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1575  000B34  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1576  000B38  ECC7  F00A         	call	_RTD2Angle	;wreg free
  1577  000B3C  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1578  000B40  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1579  000B44  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1580                           
  1581                           ;RTDuC.c: 232: calculatePID(CurrentAngle, SetAngle);
  1582  000B48  C092  F081         	movff	_CurrentAngle,calculatePID@angle
  1583  000B4C  C093  F082         	movff	_CurrentAngle+1,calculatePID@angle+1
  1584  000B50  C094  F083         	movff	_CurrentAngle+2,calculatePID@angle+2
  1585  000B54  C03F  F084         	movff	_SetAngle,calculatePID@setpoint
  1586  000B58  C040  F085         	movff	_SetAngle+1,calculatePID@setpoint+1
  1587  000B5C  C041  F086         	movff	_SetAngle+2,calculatePID@setpoint+2
  1588  000B60  EC96  F001         	call	_calculatePID	;wreg free
  1589                           
  1590                           ;RTDuC.c: 233: ImplementPIDMotion(motorInput);
  1591  000B64  C0AA  F085         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1592  000B68  C0AB  F086         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1593  000B6C  ECB7  F007         	call	_ImplementPIDMotion	;wreg free
  1594                           
  1595                           ;RTDuC.c: 234: while (INTCONbits.TMR0IF == 0);
  1596  000B70  D000               	goto	l542
  1597  000B72                     l542:
  1598  000B72  A4F2               	btfss	intcon,2,c	;volatile
  1599  000B74  D7FE               	goto	l542
  1600                           
  1601                           ;RTDuC.c: 235: INTCONbits.TMR0IF = 0;
  1602  000B76  94F2               	bcf	intcon,2,c	;volatile
  1603                           
  1604                           ;RTDuC.c: 236: TMR0H = 0xDB;
  1605  000B78  0EDB               	movlw	219
  1606  000B7A  6ED7               	movwf	4055,c	;volatile
  1607                           
  1608                           ;RTDuC.c: 237: TMR0L = 0x60;
  1609  000B7C  0E60               	movlw	96
  1610  000B7E  6ED6               	movwf	4054,c	;volatile
  1611                           
  1612                           ;RTDuC.c: 238: }
  1613                           ;RTDuC.c: 239: while (abs(error) > 1);
  1614  000B80  C0A1  F072         	movff	_error,___fttol@f1
  1615  000B84  C0A2  F073         	movff	_error+1,___fttol@f1+1
  1616  000B88  C0A3  F074         	movff	_error+2,___fttol@f1+2
  1617  000B8C  ECCA  F004         	call	___fttol	;wreg free
  1618  000B90  C072  F081         	movff	?___fttol,abs@a
  1619  000B94  C073  F082         	movff	?___fttol+1,abs@a+1
  1620  000B98  EC46  F00B         	call	_abs	;wreg free
  1621  000B9C  0100               	movlb	0	; () banked
  1622  000B9E  BF82               	btfsc	(?_abs+1)& (0+255),7,b
  1623  000BA0  D008               	goto	l3470
  1624  000BA2  0100               	movlb	0	; () banked
  1625  000BA4  5182               	movf	(?_abs+1)& (0+255),w,b
  1626  000BA6  E1C2               	bnz	l3460
  1627  000BA8  0E02               	movlw	2
  1628  000BAA  0100               	movlb	0	; () banked
  1629  000BAC  5D81               	subwf	?_abs& (0+255),w,b
  1630  000BAE  B0D8               	btfsc	status,0,c
  1631  000BB0  D7BD               	goto	l3460
  1632  000BB2                     l3470:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;RTDuC.c: 241: Ki = 0;
  1636  000BB2  0E00               	movlw	0
  1637  000BB4  0100               	movlb	0	; () banked
  1638  000BB6  6F9B               	movwf	_Ki& (0+255),b
  1639  000BB8  0E00               	movlw	0
  1640  000BBA  0100               	movlb	0	; () banked
  1641  000BBC  6F9C               	movwf	(_Ki+1)& (0+255),b
  1642  000BBE  0E00               	movlw	0
  1643  000BC0  0100               	movlb	0	; () banked
  1644  000BC2  6F9D               	movwf	(_Ki+2)& (0+255),b
  1645                           
  1646                           ;RTDuC.c: 242: Kp = 0;
  1647  000BC4  0E00               	movlw	0
  1648  000BC6  0100               	movlb	0	; () banked
  1649  000BC8  6F9E               	movwf	_Kp& (0+255),b
  1650  000BCA  0E00               	movlw	0
  1651  000BCC  0100               	movlb	0	; () banked
  1652  000BCE  6F9F               	movwf	(_Kp+1)& (0+255),b
  1653  000BD0  0E00               	movlw	0
  1654  000BD2  0100               	movlb	0	; () banked
  1655  000BD4  6FA0               	movwf	(_Kp+2)& (0+255),b
  1656                           
  1657                           ;RTDuC.c: 243: Kd = 0;
  1658  000BD6  0E00               	movlw	0
  1659  000BD8  0100               	movlb	0	; () banked
  1660  000BDA  6F98               	movwf	_Kd& (0+255),b
  1661  000BDC  0E00               	movlw	0
  1662  000BDE  0100               	movlb	0	; () banked
  1663  000BE0  6F99               	movwf	(_Kd+1)& (0+255),b
  1664  000BE2  0E00               	movlw	0
  1665  000BE4  0100               	movlb	0	; () banked
  1666  000BE6  6F9A               	movwf	(_Kd+2)& (0+255),b
  1667                           
  1668                           ; BSR set to: 0
  1669  000BE8  0012               	return		;funcret
  1670  000BEA                     __end_of_ZeroMotors:
  1671                           	opt stack 0
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           prodh	equ	0xFF4
  1677                           prodl	equ	0xFF3
  1678                           intcon	equ	0xFF2
  1679                           postinc0	equ	0xFEE
  1680                           wreg	equ	0xFE8
  1681                           postdec1	equ	0xFE5
  1682                           fsr1l	equ	0xFE1
  1683                           indf2	equ	0xFDF
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function _calculatePID *****************
  1689 ;; Defined at:
  1690 ;;		line 30 in file "PID.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  angle           3   33[BANK0 ] unsigned char 
  1693 ;;  setpoint        3   36[BANK0 ] unsigned char 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  derErr          3   39[BANK0 ] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;		None               void
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1705 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;Total ram usage:       15 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    7
  1712 ;; This function calls:
  1713 ;;		___ftadd
  1714 ;;		___ftdiv
  1715 ;;		___ftge
  1716 ;;		___ftmul
  1717 ;;		___ftneg
  1718 ;;		___ftsub
  1719 ;;		___fttol
  1720 ;; This function is called by:
  1721 ;;		_main
  1722 ;;		_ZeroMotors
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text3
  1727  00032C                     __ptext3:
  1728                           	opt stack 0
  1729  00032C                     _calculatePID:
  1730                           	opt stack 21
  1731                           
  1732                           ;PID.c: 32: double derErr;
  1733                           ;PID.c: 33: if (PIDEnableFlag == 3)
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;incstack = 0
  1737  00032C  0E03               	movlw	3
  1738  00032E  0100               	movlb	0	; () banked
  1739  000330  19AE               	xorwf	_PIDEnableFlag& (0+255),w,b
  1740  000332  A4D8               	btfss	status,2,c
  1741  000334  D01F               	goto	l3432
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;PID.c: 34: {
  1745                           ;PID.c: 35: error = 0;
  1746  000336  0E00               	movlw	0
  1747  000338  0100               	movlb	0	; () banked
  1748  00033A  6FA1               	movwf	_error& (0+255),b
  1749  00033C  0E00               	movlw	0
  1750  00033E  0100               	movlb	0	; () banked
  1751  000340  6FA2               	movwf	(_error+1)& (0+255),b
  1752  000342  0E00               	movlw	0
  1753  000344  0100               	movlb	0	; () banked
  1754  000346  6FA3               	movwf	(_error+2)& (0+255),b
  1755                           
  1756                           ;PID.c: 36: prevErr = 0;
  1757  000348  0E00               	movlw	0
  1758  00034A  0100               	movlb	0	; () banked
  1759  00034C  6FA7               	movwf	_prevErr& (0+255),b
  1760  00034E  0E00               	movlw	0
  1761  000350  0100               	movlb	0	; () banked
  1762  000352  6FA8               	movwf	(_prevErr+1)& (0+255),b
  1763  000354  0E00               	movlw	0
  1764  000356  0100               	movlb	0	; () banked
  1765  000358  6FA9               	movwf	(_prevErr+2)& (0+255),b
  1766                           
  1767                           ;PID.c: 37: intErr = 0;
  1768  00035A  0E00               	movlw	0
  1769  00035C  0100               	movlb	0	; () banked
  1770  00035E  6FA4               	movwf	_intErr& (0+255),b
  1771  000360  0E00               	movlw	0
  1772  000362  0100               	movlb	0	; () banked
  1773  000364  6FA5               	movwf	(_intErr+1)& (0+255),b
  1774  000366  0E00               	movlw	0
  1775  000368  0100               	movlb	0	; () banked
  1776  00036A  6FA6               	movwf	(_intErr+2)& (0+255),b
  1777                           
  1778                           ;PID.c: 38: PIDEnableFlag = 1;
  1779  00036C  0E01               	movlw	1
  1780  00036E  0100               	movlb	0	; () banked
  1781  000370  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  1782  000372  D000               	goto	l3432
  1783  000374                     l3432:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;PID.c: 39: }
  1787                           ;PID.c: 41: error = setpoint - angle;
  1788  000374  C081  F018         	movff	calculatePID@angle,___ftneg@f1
  1789  000378  C082  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  1790  00037C  C083  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  1791  000380  EC84  F00B         	call	___ftneg	;wreg free
  1792  000384  C018  F066         	movff	?___ftneg,___ftadd@f1
  1793  000388  C019  F067         	movff	?___ftneg+1,___ftadd@f1+1
  1794  00038C  C01A  F068         	movff	?___ftneg+2,___ftadd@f1+2
  1795  000390  C084  F069         	movff	calculatePID@setpoint,___ftadd@f2
  1796  000394  C085  F06A         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  1797  000398  C086  F06B         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  1798  00039C  ECF1  F002         	call	___ftadd	;wreg free
  1799  0003A0  C066  F0A1         	movff	?___ftadd,_error
  1800  0003A4  C067  F0A2         	movff	?___ftadd+1,_error+1
  1801  0003A8  C068  F0A3         	movff	?___ftadd+2,_error+2
  1802                           
  1803                           ;PID.c: 42: if (error > 180)
  1804  0003AC  0E00               	movlw	0
  1805  0003AE  6E18               	movwf	___ftge@ff1,c
  1806  0003B0  0E34               	movlw	52
  1807  0003B2  6E19               	movwf	___ftge@ff1+1,c
  1808  0003B4  0E43               	movlw	67
  1809  0003B6  6E1A               	movwf	___ftge@ff1+2,c
  1810  0003B8  C0A1  F01B         	movff	_error,___ftge@ff2
  1811  0003BC  C0A2  F01C         	movff	_error+1,___ftge@ff2+1
  1812  0003C0  C0A3  F01D         	movff	_error+2,___ftge@ff2+2
  1813  0003C4  EC5C  F008         	call	___ftge	;wreg free
  1814  0003C8  B0D8               	btfsc	status,0,c
  1815  0003CA  D018               	goto	l3438
  1816                           
  1817                           ;PID.c: 43: error -= 360;
  1818  0003CC  C0A1  F072         	movff	_error,___ftsub@f1
  1819  0003D0  C0A2  F073         	movff	_error+1,___ftsub@f1+1
  1820  0003D4  C0A3  F074         	movff	_error+2,___ftsub@f1+2
  1821  0003D8  0E00               	movlw	0
  1822  0003DA  0100               	movlb	0	; () banked
  1823  0003DC  6F75               	movwf	___ftsub@f2& (0+255),b
  1824  0003DE  0EB4               	movlw	180
  1825  0003E0  0100               	movlb	0	; () banked
  1826  0003E2  6F76               	movwf	(___ftsub@f2+1)& (0+255),b
  1827  0003E4  0E43               	movlw	67
  1828  0003E6  0100               	movlb	0	; () banked
  1829  0003E8  6F77               	movwf	(___ftsub@f2+2)& (0+255),b
  1830  0003EA  ECFA  F009         	call	___ftsub	;wreg free
  1831  0003EE  C072  F0A1         	movff	?___ftsub,_error
  1832  0003F2  C073  F0A2         	movff	?___ftsub+1,_error+1
  1833  0003F6  C074  F0A3         	movff	?___ftsub+2,_error+2
  1834  0003FA  D028               	goto	l151
  1835  0003FC                     l3438:
  1836                           
  1837                           ;PID.c: 44: else if (error < -180)
  1838  0003FC  C0A1  F018         	movff	_error,___ftge@ff1
  1839  000400  C0A2  F019         	movff	_error+1,___ftge@ff1+1
  1840  000404  C0A3  F01A         	movff	_error+2,___ftge@ff1+2
  1841  000408  0E00               	movlw	0
  1842  00040A  6E1B               	movwf	___ftge@ff2,c
  1843  00040C  0E34               	movlw	52
  1844  00040E  6E1C               	movwf	___ftge@ff2+1,c
  1845  000410  0EC3               	movlw	195
  1846  000412  6E1D               	movwf	___ftge@ff2+2,c
  1847  000414  EC5C  F008         	call	___ftge	;wreg free
  1848  000418  B0D8               	btfsc	status,0,c
  1849  00041A  D018               	goto	l151
  1850                           
  1851                           ;PID.c: 45: error += 360;
  1852  00041C  C0A1  F066         	movff	_error,___ftadd@f1
  1853  000420  C0A2  F067         	movff	_error+1,___ftadd@f1+1
  1854  000424  C0A3  F068         	movff	_error+2,___ftadd@f1+2
  1855  000428  0E00               	movlw	0
  1856  00042A  0100               	movlb	0	; () banked
  1857  00042C  6F69               	movwf	___ftadd@f2& (0+255),b
  1858  00042E  0EB4               	movlw	180
  1859  000430  0100               	movlb	0	; () banked
  1860  000432  6F6A               	movwf	(___ftadd@f2+1)& (0+255),b
  1861  000434  0E43               	movlw	67
  1862  000436  0100               	movlb	0	; () banked
  1863  000438  6F6B               	movwf	(___ftadd@f2+2)& (0+255),b
  1864  00043A  ECF1  F002         	call	___ftadd	;wreg free
  1865  00043E  C066  F0A1         	movff	?___ftadd,_error
  1866  000442  C067  F0A2         	movff	?___ftadd+1,_error+1
  1867  000446  C068  F0A3         	movff	?___ftadd+2,_error+2
  1868  00044A  D000               	goto	l151
  1869  00044C                     l151:
  1870                           
  1871                           ;PID.c: 47: derErr = error - prevErr;
  1872  00044C  C0A7  F018         	movff	_prevErr,___ftneg@f1
  1873  000450  C0A8  F019         	movff	_prevErr+1,___ftneg@f1+1
  1874  000454  C0A9  F01A         	movff	_prevErr+2,___ftneg@f1+2
  1875  000458  EC84  F00B         	call	___ftneg	;wreg free
  1876  00045C  C018  F066         	movff	?___ftneg,___ftadd@f1
  1877  000460  C019  F067         	movff	?___ftneg+1,___ftadd@f1+1
  1878  000464  C01A  F068         	movff	?___ftneg+2,___ftadd@f1+2
  1879  000468  C0A1  F069         	movff	_error,___ftadd@f2
  1880  00046C  C0A2  F06A         	movff	_error+1,___ftadd@f2+1
  1881  000470  C0A3  F06B         	movff	_error+2,___ftadd@f2+2
  1882  000474  ECF1  F002         	call	___ftadd	;wreg free
  1883  000478  C066  F087         	movff	?___ftadd,calculatePID@derErr
  1884  00047C  C067  F088         	movff	?___ftadd+1,calculatePID@derErr+1
  1885  000480  C068  F089         	movff	?___ftadd+2,calculatePID@derErr+2
  1886                           
  1887                           ;PID.c: 48: intErr += error;
  1888  000484  C0A4  F066         	movff	_intErr,___ftadd@f1
  1889  000488  C0A5  F067         	movff	_intErr+1,___ftadd@f1+1
  1890  00048C  C0A6  F068         	movff	_intErr+2,___ftadd@f1+2
  1891  000490  C0A1  F069         	movff	_error,___ftadd@f2
  1892  000494  C0A2  F06A         	movff	_error+1,___ftadd@f2+1
  1893  000498  C0A3  F06B         	movff	_error+2,___ftadd@f2+2
  1894  00049C  ECF1  F002         	call	___ftadd	;wreg free
  1895  0004A0  C066  F0A4         	movff	?___ftadd,_intErr
  1896  0004A4  C067  F0A5         	movff	?___ftadd+1,_intErr+1
  1897  0004A8  C068  F0A6         	movff	?___ftadd+2,_intErr+2
  1898                           
  1899                           ;PID.c: 49: if (intErr > 2000)
  1900  0004AC  0E00               	movlw	0
  1901  0004AE  6E18               	movwf	___ftge@ff1,c
  1902  0004B0  0EFA               	movlw	250
  1903  0004B2  6E19               	movwf	___ftge@ff1+1,c
  1904  0004B4  0E44               	movlw	68
  1905  0004B6  6E1A               	movwf	___ftge@ff1+2,c
  1906  0004B8  C0A4  F01B         	movff	_intErr,___ftge@ff2
  1907  0004BC  C0A5  F01C         	movff	_intErr+1,___ftge@ff2+1
  1908  0004C0  C0A6  F01D         	movff	_intErr+2,___ftge@ff2+2
  1909  0004C4  EC5C  F008         	call	___ftge	;wreg free
  1910  0004C8  B0D8               	btfsc	status,0,c
  1911  0004CA  D00A               	goto	l3444
  1912                           
  1913                           ;PID.c: 50: intErr = 2000;
  1914  0004CC  0E00               	movlw	0
  1915  0004CE  0100               	movlb	0	; () banked
  1916  0004D0  6FA4               	movwf	_intErr& (0+255),b
  1917  0004D2  0EFA               	movlw	250
  1918  0004D4  0100               	movlb	0	; () banked
  1919  0004D6  6FA5               	movwf	(_intErr+1)& (0+255),b
  1920  0004D8  0E44               	movlw	68
  1921  0004DA  0100               	movlb	0	; () banked
  1922  0004DC  6FA6               	movwf	(_intErr+2)& (0+255),b
  1923  0004DE  D000               	goto	l3444
  1924  0004E0                     l3444:
  1925                           
  1926                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  1927  0004E0  C0A4  F032         	movff	_intErr,___ftmul@f2
  1928  0004E4  C0A5  F033         	movff	_intErr+1,___ftmul@f2+1
  1929  0004E8  C0A6  F034         	movff	_intErr+2,___ftmul@f2+2
  1930  0004EC  C09B  F02F         	movff	_Ki,___ftmul@f1
  1931  0004F0  C09C  F030         	movff	_Ki+1,___ftmul@f1+1
  1932  0004F4  C09D  F031         	movff	_Ki+2,___ftmul@f1+2
  1933  0004F8  ECF5  F005         	call	___ftmul	;wreg free
  1934  0004FC  C02F  F08A         	movff	?___ftmul,_calculatePID$3293
  1935  000500  C030  F08B         	movff	?___ftmul+1,_calculatePID$3293+1
  1936  000504  C031  F08C         	movff	?___ftmul+2,_calculatePID$3293+2
  1937                           
  1938                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  1939  000508  C0B2  F032         	movff	_loopTime,___ftmul@f2
  1940  00050C  C0B3  F033         	movff	_loopTime+1,___ftmul@f2+1
  1941  000510  C0B4  F034         	movff	_loopTime+2,___ftmul@f2+2
  1942  000514  C08A  F02F         	movff	_calculatePID$3293,___ftmul@f1
  1943  000518  C08B  F030         	movff	_calculatePID$3293+1,___ftmul@f1+1
  1944  00051C  C08C  F031         	movff	_calculatePID$3293+2,___ftmul@f1+2
  1945  000520  ECF5  F005         	call	___ftmul	;wreg free
  1946  000524  C02F  F069         	movff	?___ftmul,___ftadd@f2
  1947  000528  C030  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  1948  00052C  C031  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  1949  000530  C0A1  F032         	movff	_error,___ftmul@f2
  1950  000534  C0A2  F033         	movff	_error+1,___ftmul@f2+1
  1951  000538  C0A3  F034         	movff	_error+2,___ftmul@f2+2
  1952  00053C  C09E  F02F         	movff	_Kp,___ftmul@f1
  1953  000540  C09F  F030         	movff	_Kp+1,___ftmul@f1+1
  1954  000544  C0A0  F031         	movff	_Kp+2,___ftmul@f1+2
  1955  000548  ECF5  F005         	call	___ftmul	;wreg free
  1956  00054C  C02F  F066         	movff	?___ftmul,___ftadd@f1
  1957  000550  C030  F067         	movff	?___ftmul+1,___ftadd@f1+1
  1958  000554  C031  F068         	movff	?___ftmul+2,___ftadd@f1+2
  1959  000558  ECF1  F002         	call	___ftadd	;wreg free
  1960  00055C  C066  F08D         	movff	?___ftadd,_calculatePID$3294
  1961  000560  C067  F08E         	movff	?___ftadd+1,_calculatePID$3294+1
  1962  000564  C068  F08F         	movff	?___ftadd+2,_calculatePID$3294+2
  1963                           
  1964                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  1965  000568  C098  F032         	movff	_Kd,___ftmul@f2
  1966  00056C  C099  F033         	movff	_Kd+1,___ftmul@f2+1
  1967  000570  C09A  F034         	movff	_Kd+2,___ftmul@f2+2
  1968  000574  C0B2  F023         	movff	_loopTime,___ftdiv@f2
  1969  000578  C0B3  F024         	movff	_loopTime+1,___ftdiv@f2+1
  1970  00057C  C0B4  F025         	movff	_loopTime+2,___ftdiv@f2+2
  1971  000580  C087  F020         	movff	calculatePID@derErr,___ftdiv@f1
  1972  000584  C088  F021         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  1973  000588  C089  F022         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  1974  00058C  EC87  F006         	call	___ftdiv	;wreg free
  1975  000590  C020  F02F         	movff	?___ftdiv,___ftmul@f1
  1976  000594  C021  F030         	movff	?___ftdiv+1,___ftmul@f1+1
  1977  000598  C022  F031         	movff	?___ftdiv+2,___ftmul@f1+2
  1978  00059C  ECF5  F005         	call	___ftmul	;wreg free
  1979  0005A0  C02F  F069         	movff	?___ftmul,___ftadd@f2
  1980  0005A4  C030  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  1981  0005A8  C031  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  1982  0005AC  C08D  F066         	movff	_calculatePID$3294,___ftadd@f1
  1983  0005B0  C08E  F067         	movff	_calculatePID$3294+1,___ftadd@f1+1
  1984  0005B4  C08F  F068         	movff	_calculatePID$3294+2,___ftadd@f1+2
  1985  0005B8  ECF1  F002         	call	___ftadd	;wreg free
  1986  0005BC  C066  F072         	movff	?___ftadd,___fttol@f1
  1987  0005C0  C067  F073         	movff	?___ftadd+1,___fttol@f1+1
  1988  0005C4  C068  F074         	movff	?___ftadd+2,___fttol@f1+2
  1989  0005C8  ECCA  F004         	call	___fttol	;wreg free
  1990  0005CC  C072  F0AA         	movff	?___fttol,_motorInput
  1991  0005D0  C073  F0AB         	movff	?___fttol+1,_motorInput+1
  1992                           
  1993                           ;PID.c: 54: prevErr = error;
  1994  0005D4  C0A1  F0A7         	movff	_error,_prevErr
  1995  0005D8  C0A2  F0A8         	movff	_error+1,_prevErr+1
  1996  0005DC  C0A3  F0A9         	movff	_error+2,_prevErr+2
  1997  0005E0  0012               	return		;funcret
  1998  0005E2                     __end_of_calculatePID:
  1999                           	opt stack 0
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           prodh	equ	0xFF4
  2005                           prodl	equ	0xFF3
  2006                           intcon	equ	0xFF2
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1l	equ	0xFE1
  2011                           indf2	equ	0xFDF
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function ___fttol *****************
  2017 ;; Defined at:
  2018 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  f1              3   18[BANK0 ] float 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  lval            4   28[BANK0 ] unsigned long 
  2023 ;;  exp1            1   32[BANK0 ] unsigned char 
  2024 ;;  sign1           1   27[BANK0 ] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  4   18[BANK0 ] long 
  2027 ;; Registers used:
  2028 ;;		wreg, status,2, status,0
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2034 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;Total ram usage:       15 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    4
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_calculatePID
  2045 ;;		_ZeroMotors
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text4
  2050  000994                     __ptext4:
  2051                           	opt stack 0
  2052  000994                     ___fttol:
  2053                           	opt stack 23
  2054                           
  2055                           ;incstack = 0
  2056  000994  C074  F076         	movff	___fttol@f1+2,??___fttol
  2057  000998  0100               	movlb	0	; () banked
  2058  00099A  6B77               	clrf	(??___fttol+1)& (0+255),b
  2059  00099C  6B78               	clrf	(??___fttol+2)& (0+255),b
  2060  00099E  0100               	movlb	0	; () banked
  2061  0009A0  3573               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2062  0009A2  0100               	movlb	0	; () banked
  2063  0009A4  3776               	rlcf	??___fttol& (0+255),f,b
  2064  0009A6  E301               	bnc	u1821
  2065  0009A8  8177               	bsf	(??___fttol+1)& (0+255),0,b
  2066  0009AA                     u1821:
  2067  0009AA  0100               	movlb	0	; () banked
  2068  0009AC  5176               	movf	??___fttol& (0+255),w,b
  2069  0009AE  0100               	movlb	0	; () banked
  2070  0009B0  6F80               	movwf	___fttol@exp1& (0+255),b
  2071  0009B2  0100               	movlb	0	; () banked
  2072  0009B4  5180               	movf	___fttol@exp1& (0+255),w,b
  2073  0009B6  A4D8               	btfss	status,2,c
  2074  0009B8  D002               	goto	l2546
  2075  0009BA  D051               	goto	l2570
  2076                           
  2077                           ; BSR set to: 0
  2078                           
  2079                           ; BSR set to: 0
  2080  0009BC  D083               	goto	l1055
  2081  0009BE                     l2546:
  2082                           
  2083                           ; BSR set to: 0
  2084  0009BE  0E17               	movlw	23
  2085  0009C0  0100               	movlb	0	; () banked
  2086  0009C2  6F76               	movwf	??___fttol& (0+255),b
  2087  0009C4  C072  F077         	movff	___fttol@f1,??___fttol+1
  2088  0009C8  C073  F078         	movff	___fttol@f1+1,??___fttol+2
  2089  0009CC  C074  F079         	movff	___fttol@f1+2,??___fttol+3
  2090  0009D0  0100               	movlb	0	; () banked
  2091  0009D2  2976               	incf	??___fttol& (0+255),w,b
  2092  0009D4  0100               	movlb	0	; () banked
  2093  0009D6  6F7A               	movwf	(??___fttol+4)& (0+255),b
  2094  0009D8  D005               	goto	u1840
  2095  0009DA                     u1845:
  2096  0009DA  0100               	movlb	0	; () banked
  2097  0009DC  90D8               	bcf	status,0,c
  2098  0009DE  3379               	rrcf	(??___fttol+3)& (0+255),f,b
  2099  0009E0  3378               	rrcf	(??___fttol+2)& (0+255),f,b
  2100  0009E2  3377               	rrcf	(??___fttol+1)& (0+255),f,b
  2101  0009E4                     u1840:
  2102  0009E4  0100               	movlb	0	; () banked
  2103  0009E6  2F7A               	decfsz	(??___fttol+4)& (0+255),f,b
  2104  0009E8  D7F8               	goto	u1845
  2105  0009EA  0100               	movlb	0	; () banked
  2106  0009EC  5177               	movf	(??___fttol+1)& (0+255),w,b
  2107  0009EE  0100               	movlb	0	; () banked
  2108  0009F0  6F7B               	movwf	___fttol@sign1& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111  0009F2  0100               	movlb	0	; () banked
  2112  0009F4  8F73               	bsf	(___fttol@f1+1)& (0+255),7,b
  2113                           
  2114                           ; BSR set to: 0
  2115  0009F6  0EFF               	movlw	255
  2116  0009F8  0100               	movlb	0	; () banked
  2117  0009FA  1772               	andwf	___fttol@f1& (0+255),f,b
  2118  0009FC  0EFF               	movlw	255
  2119  0009FE  0100               	movlb	0	; () banked
  2120  000A00  1773               	andwf	(___fttol@f1+1)& (0+255),f,b
  2121  000A02  0E00               	movlw	0
  2122  000A04  0100               	movlb	0	; () banked
  2123  000A06  1774               	andwf	(___fttol@f1+2)& (0+255),f,b
  2124                           
  2125                           ; BSR set to: 0
  2126  000A08  0100               	movlb	0	; () banked
  2127  000A0A  5172               	movf	___fttol@f1& (0+255),w,b
  2128  000A0C  0100               	movlb	0	; () banked
  2129  000A0E  6F7C               	movwf	___fttol@lval& (0+255),b
  2130  000A10  0100               	movlb	0	; () banked
  2131  000A12  5173               	movf	(___fttol@f1+1)& (0+255),w,b
  2132  000A14  0100               	movlb	0	; () banked
  2133  000A16  6F7D               	movwf	(___fttol@lval+1)& (0+255),b
  2134  000A18  0100               	movlb	0	; () banked
  2135  000A1A  5174               	movf	(___fttol@f1+2)& (0+255),w,b
  2136  000A1C  0100               	movlb	0	; () banked
  2137  000A1E  6F7E               	movwf	(___fttol@lval+2)& (0+255),b
  2138  000A20  0100               	movlb	0	; () banked
  2139  000A22  6B7F               	clrf	(___fttol@lval+3)& (0+255),b
  2140                           
  2141                           ; BSR set to: 0
  2142  000A24  0E8E               	movlw	142
  2143  000A26  0100               	movlb	0	; () banked
  2144  000A28  5F80               	subwf	___fttol@exp1& (0+255),f,b
  2145                           
  2146                           ; BSR set to: 0
  2147  000A2A  0100               	movlb	0	; () banked
  2148  000A2C  AF80               	btfss	___fttol@exp1& (0+255),7,b
  2149  000A2E  D013               	goto	l2568
  2150                           
  2151                           ; BSR set to: 0
  2152  000A30  0100               	movlb	0	; () banked
  2153  000A32  5180               	movf	___fttol@exp1& (0+255),w,b
  2154  000A34  0A80               	xorlw	128
  2155  000A36  0F8F               	addlw	143
  2156  000A38  B0D8               	btfsc	status,0,c
  2157  000A3A  D003               	goto	l2564
  2158  000A3C  D010               	goto	l2570
  2159                           
  2160                           ; BSR set to: 0
  2161                           
  2162                           ; BSR set to: 0
  2163  000A3E  D042               	goto	l1055
  2164                           
  2165                           ; BSR set to: 0
  2166  000A40  D000               	goto	l2564
  2167  000A42                     l2564:
  2168                           
  2169                           ; BSR set to: 0
  2170  000A42  0100               	movlb	0	; () banked
  2171  000A44  90D8               	bcf	status,0,c
  2172  000A46  337F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2173  000A48  337E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2174  000A4A  337D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2175  000A4C  337C               	rrcf	___fttol@lval& (0+255),f,b
  2176                           
  2177                           ; BSR set to: 0
  2178  000A4E  0100               	movlb	0	; () banked
  2179  000A50  3F80               	incfsz	___fttol@exp1& (0+255),f,b
  2180  000A52  D7F7               	goto	l2564
  2181                           
  2182                           ; BSR set to: 0
  2183  000A54  D01F               	goto	l2578
  2184  000A56                     l2568:
  2185                           
  2186                           ; BSR set to: 0
  2187  000A56  0E17               	movlw	23
  2188  000A58  0100               	movlb	0	; () banked
  2189  000A5A  6580               	cpfsgt	___fttol@exp1& (0+255),b
  2190  000A5C  D014               	goto	l2576
  2191  000A5E                     l2570:
  2192                           
  2193                           ; BSR set to: 0
  2194  000A5E  0E00               	movlw	0
  2195  000A60  0100               	movlb	0	; () banked
  2196  000A62  6F72               	movwf	?___fttol& (0+255),b
  2197  000A64  0E00               	movlw	0
  2198  000A66  6F73               	movwf	(?___fttol+1)& (0+255),b
  2199  000A68  0E00               	movlw	0
  2200  000A6A  6F74               	movwf	(?___fttol+2)& (0+255),b
  2201  000A6C  0E00               	movlw	0
  2202  000A6E  6F75               	movwf	(?___fttol+3)& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205  000A70  D029               	goto	l1055
  2206                           
  2207                           ; BSR set to: 0
  2208  000A72  D009               	goto	l2576
  2209  000A74                     l2574:
  2210                           
  2211                           ; BSR set to: 0
  2212  000A74  0100               	movlb	0	; () banked
  2213  000A76  90D8               	bcf	status,0,c
  2214  000A78  377C               	rlcf	___fttol@lval& (0+255),f,b
  2215  000A7A  377D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2216  000A7C  377E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2217  000A7E  377F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2218  000A80  0100               	movlb	0	; () banked
  2219  000A82  0780               	decf	___fttol@exp1& (0+255),f,b
  2220  000A84  D000               	goto	l2576
  2221  000A86                     l2576:
  2222                           
  2223                           ; BSR set to: 0
  2224  000A86  0100               	movlb	0	; () banked
  2225  000A88  5180               	movf	___fttol@exp1& (0+255),w,b
  2226  000A8A  0100               	movlb	0	; () banked
  2227  000A8C  B4D8               	btfsc	status,2,c
  2228  000A8E  D002               	goto	l2578
  2229  000A90  D7F1               	goto	l2574
  2230                           
  2231                           ; BSR set to: 0
  2232  000A92  D000               	goto	l2578
  2233  000A94                     l2578:
  2234                           
  2235                           ; BSR set to: 0
  2236  000A94  0100               	movlb	0	; () banked
  2237  000A96  517B               	movf	___fttol@sign1& (0+255),w,b
  2238  000A98  0100               	movlb	0	; () banked
  2239  000A9A  B4D8               	btfsc	status,2,c
  2240  000A9C  D00A               	goto	l2582
  2241                           
  2242                           ; BSR set to: 0
  2243  000A9E  0100               	movlb	0	; () banked
  2244  000AA0  1F7F               	comf	(___fttol@lval+3)& (0+255),f,b
  2245  000AA2  1F7E               	comf	(___fttol@lval+2)& (0+255),f,b
  2246  000AA4  1F7D               	comf	(___fttol@lval+1)& (0+255),f,b
  2247  000AA6  6D7C               	negf	___fttol@lval& (0+255),b
  2248  000AA8  0E00               	movlw	0
  2249  000AAA  237D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2250  000AAC  237E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2251  000AAE  237F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2252  000AB0  D000               	goto	l2582
  2253  000AB2                     l2582:
  2254                           
  2255                           ; BSR set to: 0
  2256  000AB2  C07C  F072         	movff	___fttol@lval,?___fttol
  2257  000AB6  C07D  F073         	movff	___fttol@lval+1,?___fttol+1
  2258  000ABA  C07E  F074         	movff	___fttol@lval+2,?___fttol+2
  2259  000ABE  C07F  F075         	movff	___fttol@lval+3,?___fttol+3
  2260  000AC2  D000               	goto	l1055
  2261  000AC4                     l1055:
  2262                           
  2263                           ; BSR set to: 0
  2264  000AC4  0012               	return		;funcret
  2265  000AC6                     __end_of___fttol:
  2266                           	opt stack 0
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           prodh	equ	0xFF4
  2272                           prodl	equ	0xFF3
  2273                           intcon	equ	0xFF2
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           postdec1	equ	0xFE5
  2277                           fsr1l	equ	0xFE1
  2278                           indf2	equ	0xFDF
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function ___ftsub *****************
  2284 ;; Defined at:
  2285 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  f1              3   18[BANK0 ] float 
  2288 ;;  f2              3   21[BANK0 ] float 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;		None
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  3   18[BANK0 ] float 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2300 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;Total ram usage:        6 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    6
  2307 ;; This function calls:
  2308 ;;		___ftadd
  2309 ;; This function is called by:
  2310 ;;		_calculatePID
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text5
  2315  0013F4                     __ptext5:
  2316                           	opt stack 0
  2317  0013F4                     ___ftsub:
  2318                           	opt stack 21
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;incstack = 0
  2322  0013F4  0100               	movlb	0	; () banked
  2323  0013F6  5175               	movf	___ftsub@f2& (0+255),w,b
  2324  0013F8  0100               	movlb	0	; () banked
  2325  0013FA  1176               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  2326  0013FC  0100               	movlb	0	; () banked
  2327  0013FE  1177               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  2328  001400  B4D8               	btfsc	status,2,c
  2329  001402  D00A               	goto	l3398
  2330                           
  2331                           ; BSR set to: 0
  2332  001404  0E00               	movlw	0
  2333  001406  0100               	movlb	0	; () banked
  2334  001408  1B75               	xorwf	___ftsub@f2& (0+255),f,b
  2335  00140A  0E00               	movlw	0
  2336  00140C  0100               	movlb	0	; () banked
  2337  00140E  1B76               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2338  001410  0E80               	movlw	128
  2339  001412  0100               	movlb	0	; () banked
  2340  001414  1B77               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2341  001416  D000               	goto	l3398
  2342  001418                     l3398:
  2343                           
  2344                           ; BSR set to: 0
  2345  001418  C072  F066         	movff	___ftsub@f1,___ftadd@f1
  2346  00141C  C073  F067         	movff	___ftsub@f1+1,___ftadd@f1+1
  2347  001420  C074  F068         	movff	___ftsub@f1+2,___ftadd@f1+2
  2348  001424  C075  F069         	movff	___ftsub@f2,___ftadd@f2
  2349  001428  C076  F06A         	movff	___ftsub@f2+1,___ftadd@f2+1
  2350  00142C  C077  F06B         	movff	___ftsub@f2+2,___ftadd@f2+2
  2351  001430  ECF1  F002         	call	___ftadd	;wreg free
  2352  001434  C066  F072         	movff	?___ftadd,?___ftsub
  2353  001438  C067  F073         	movff	?___ftadd+1,?___ftsub+1
  2354  00143C  C068  F074         	movff	?___ftadd+2,?___ftsub+2
  2355  001440  D000               	goto	l1051
  2356  001442                     l1051:
  2357  001442  0012               	return		;funcret
  2358  001444                     __end_of___ftsub:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           intcon	equ	0xFF2
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           fsr1l	equ	0xFE1
  2371                           indf2	equ	0xFDF
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function ___ftadd *****************
  2377 ;; Defined at:
  2378 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  f1              3    6[BANK0 ] float 
  2381 ;;  f2              3    9[BANK0 ] float 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  exp1            1   17[BANK0 ] unsigned char 
  2384 ;;  exp2            1   16[BANK0 ] unsigned char 
  2385 ;;  sign            1   15[BANK0 ] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  3    6[BANK0 ] float 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2395 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;Total ram usage:       12 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    5
  2402 ;; This function calls:
  2403 ;;		___ftpack
  2404 ;; This function is called by:
  2405 ;;		_calculatePID
  2406 ;;		___ftsub
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text6
  2411  0005E2                     __ptext6:
  2412                           	opt stack 0
  2413  0005E2                     ___ftadd:
  2414                           	opt stack 21
  2415                           
  2416                           ;incstack = 0
  2417  0005E2  C068  F06C         	movff	___ftadd@f1+2,??___ftadd
  2418  0005E6  0100               	movlb	0	; () banked
  2419  0005E8  6B6D               	clrf	(??___ftadd+1)& (0+255),b
  2420  0005EA  6B6E               	clrf	(??___ftadd+2)& (0+255),b
  2421  0005EC  0100               	movlb	0	; () banked
  2422  0005EE  3567               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2423  0005F0  0100               	movlb	0	; () banked
  2424  0005F2  376C               	rlcf	??___ftadd& (0+255),f,b
  2425  0005F4  E301               	bnc	u2701
  2426  0005F6  816D               	bsf	(??___ftadd+1)& (0+255),0,b
  2427  0005F8                     u2701:
  2428  0005F8  0100               	movlb	0	; () banked
  2429  0005FA  516C               	movf	??___ftadd& (0+255),w,b
  2430  0005FC  0100               	movlb	0	; () banked
  2431  0005FE  6F71               	movwf	___ftadd@exp1& (0+255),b
  2432  000600  C06B  F06C         	movff	___ftadd@f2+2,??___ftadd
  2433  000604  0100               	movlb	0	; () banked
  2434  000606  6B6D               	clrf	(??___ftadd+1)& (0+255),b
  2435  000608  6B6E               	clrf	(??___ftadd+2)& (0+255),b
  2436  00060A  0100               	movlb	0	; () banked
  2437  00060C  356A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2438  00060E  0100               	movlb	0	; () banked
  2439  000610  376C               	rlcf	??___ftadd& (0+255),f,b
  2440  000612  E301               	bnc	u2711
  2441  000614  816D               	bsf	(??___ftadd+1)& (0+255),0,b
  2442  000616                     u2711:
  2443  000616  0100               	movlb	0	; () banked
  2444  000618  516C               	movf	??___ftadd& (0+255),w,b
  2445  00061A  0100               	movlb	0	; () banked
  2446  00061C  6F70               	movwf	___ftadd@exp2& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449  00061E  0100               	movlb	0	; () banked
  2450  000620  5171               	movf	___ftadd@exp1& (0+255),w,b
  2451  000622  0100               	movlb	0	; () banked
  2452  000624  B4D8               	btfsc	status,2,c
  2453  000626  D011               	goto	l987
  2454                           
  2455                           ; BSR set to: 0
  2456  000628  0100               	movlb	0	; () banked
  2457  00062A  5170               	movf	___ftadd@exp2& (0+255),w,b
  2458  00062C  0100               	movlb	0	; () banked
  2459  00062E  5D71               	subwf	___ftadd@exp1& (0+255),w,b
  2460  000630  B0D8               	btfsc	status,0,c
  2461  000632  D012               	goto	l3234
  2462                           
  2463                           ; BSR set to: 0
  2464  000634  0100               	movlb	0	; () banked
  2465  000636  5171               	movf	___ftadd@exp1& (0+255),w,b
  2466  000638  0800               	sublw	0
  2467  00063A  0100               	movlb	0	; () banked
  2468  00063C  2570               	addwf	___ftadd@exp2& (0+255),w,b
  2469  00063E  0100               	movlb	0	; () banked
  2470  000640  6F6C               	movwf	??___ftadd& (0+255),b
  2471  000642  0E18               	movlw	24
  2472  000644  0100               	movlb	0	; () banked
  2473  000646  656C               	cpfsgt	??___ftadd& (0+255),b
  2474  000648  D007               	goto	l3234
  2475  00064A                     l987:
  2476                           
  2477                           ; BSR set to: 0
  2478  00064A  C069  F066         	movff	___ftadd@f2,?___ftadd
  2479  00064E  C06A  F067         	movff	___ftadd@f2+1,?___ftadd+1
  2480  000652  C06B  F068         	movff	___ftadd@f2+2,?___ftadd+2
  2481  000656  D103               	goto	l988
  2482  000658                     l3234:
  2483                           
  2484                           ; BSR set to: 0
  2485  000658  0100               	movlb	0	; () banked
  2486  00065A  5170               	movf	___ftadd@exp2& (0+255),w,b
  2487  00065C  0100               	movlb	0	; () banked
  2488  00065E  B4D8               	btfsc	status,2,c
  2489  000660  D011               	goto	l991
  2490                           
  2491                           ; BSR set to: 0
  2492  000662  0100               	movlb	0	; () banked
  2493  000664  5171               	movf	___ftadd@exp1& (0+255),w,b
  2494  000666  0100               	movlb	0	; () banked
  2495  000668  5D70               	subwf	___ftadd@exp2& (0+255),w,b
  2496  00066A  B0D8               	btfsc	status,0,c
  2497  00066C  D012               	goto	l3240
  2498                           
  2499                           ; BSR set to: 0
  2500  00066E  0100               	movlb	0	; () banked
  2501  000670  5170               	movf	___ftadd@exp2& (0+255),w,b
  2502  000672  0800               	sublw	0
  2503  000674  0100               	movlb	0	; () banked
  2504  000676  2571               	addwf	___ftadd@exp1& (0+255),w,b
  2505  000678  0100               	movlb	0	; () banked
  2506  00067A  6F6C               	movwf	??___ftadd& (0+255),b
  2507  00067C  0E18               	movlw	24
  2508  00067E  0100               	movlb	0	; () banked
  2509  000680  656C               	cpfsgt	??___ftadd& (0+255),b
  2510  000682  D007               	goto	l3240
  2511  000684                     l991:
  2512                           
  2513                           ; BSR set to: 0
  2514  000684  C066  F066         	movff	___ftadd@f1,?___ftadd
  2515  000688  C067  F067         	movff	___ftadd@f1+1,?___ftadd+1
  2516  00068C  C068  F068         	movff	___ftadd@f1+2,?___ftadd+2
  2517  000690  D0E6               	goto	l988
  2518  000692                     l3240:
  2519                           
  2520                           ; BSR set to: 0
  2521  000692  0E06               	movlw	6
  2522  000694  0100               	movlb	0	; () banked
  2523  000696  6F6F               	movwf	___ftadd@sign& (0+255),b
  2524                           
  2525                           ; BSR set to: 0
  2526  000698  0100               	movlb	0	; () banked
  2527  00069A  AF68               	btfss	(___ftadd@f1+2)& (0+255),7,b
  2528  00069C  D003               	goto	l3246
  2529                           
  2530                           ; BSR set to: 0
  2531  00069E  0100               	movlb	0	; () banked
  2532  0006A0  8F6F               	bsf	___ftadd@sign& (0+255),7,b
  2533  0006A2  D000               	goto	l3246
  2534  0006A4                     l3246:
  2535                           
  2536                           ; BSR set to: 0
  2537  0006A4  0100               	movlb	0	; () banked
  2538  0006A6  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2539  0006A8  D002               	goto	l993
  2540                           
  2541                           ; BSR set to: 0
  2542  0006AA  0100               	movlb	0	; () banked
  2543  0006AC  8D6F               	bsf	___ftadd@sign& (0+255),6,b
  2544  0006AE                     l993:
  2545                           
  2546                           ; BSR set to: 0
  2547  0006AE  0100               	movlb	0	; () banked
  2548  0006B0  8F67               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2549                           
  2550                           ; BSR set to: 0
  2551  0006B2  0EFF               	movlw	255
  2552  0006B4  0100               	movlb	0	; () banked
  2553  0006B6  1766               	andwf	___ftadd@f1& (0+255),f,b
  2554  0006B8  0EFF               	movlw	255
  2555  0006BA  0100               	movlb	0	; () banked
  2556  0006BC  1767               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2557  0006BE  0E00               	movlw	0
  2558  0006C0  0100               	movlb	0	; () banked
  2559  0006C2  1768               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2560  0006C4  0100               	movlb	0	; () banked
  2561  0006C6  8F6A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2562                           
  2563                           ; BSR set to: 0
  2564  0006C8  0EFF               	movlw	255
  2565  0006CA  0100               	movlb	0	; () banked
  2566  0006CC  1769               	andwf	___ftadd@f2& (0+255),f,b
  2567  0006CE  0EFF               	movlw	255
  2568  0006D0  0100               	movlb	0	; () banked
  2569  0006D2  176A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2570  0006D4  0E00               	movlw	0
  2571  0006D6  0100               	movlb	0	; () banked
  2572  0006D8  176B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2573                           
  2574                           ; BSR set to: 0
  2575  0006DA  0100               	movlb	0	; () banked
  2576  0006DC  5170               	movf	___ftadd@exp2& (0+255),w,b
  2577  0006DE  0100               	movlb	0	; () banked
  2578  0006E0  5D71               	subwf	___ftadd@exp1& (0+255),w,b
  2579  0006E2  B0D8               	btfsc	status,0,c
  2580  0006E4  D028               	goto	l3266
  2581  0006E6                     l3256:
  2582                           
  2583                           ; BSR set to: 0
  2584  0006E6  0100               	movlb	0	; () banked
  2585  0006E8  90D8               	bcf	status,0,c
  2586  0006EA  3769               	rlcf	___ftadd@f2& (0+255),f,b
  2587  0006EC  376A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2588  0006EE  376B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2589  0006F0  0100               	movlb	0	; () banked
  2590  0006F2  0770               	decf	___ftadd@exp2& (0+255),f,b
  2591                           
  2592                           ; BSR set to: 0
  2593  0006F4  0100               	movlb	0	; () banked
  2594  0006F6  5171               	movf	___ftadd@exp1& (0+255),w,b
  2595  0006F8  0100               	movlb	0	; () banked
  2596  0006FA  1970               	xorwf	___ftadd@exp2& (0+255),w,b
  2597  0006FC  B4D8               	btfsc	status,2,c
  2598  0006FE  D013               	goto	l3264
  2599                           
  2600                           ; BSR set to: 0
  2601  000700  0100               	movlb	0	; () banked
  2602  000702  076F               	decf	___ftadd@sign& (0+255),f,b
  2603  000704  C06F  F06C         	movff	___ftadd@sign,??___ftadd
  2604  000708  0E07               	movlw	7
  2605  00070A  0100               	movlb	0	; () banked
  2606  00070C  176C               	andwf	??___ftadd& (0+255),f,b
  2607  00070E  B4D8               	btfsc	status,2,c
  2608  000710  D00A               	goto	l3264
  2609  000712  D7E9               	goto	l3256
  2610                           
  2611                           ; BSR set to: 0
  2612                           
  2613                           ; BSR set to: 0
  2614  000714  D008               	goto	l3264
  2615  000716                     l3262:
  2616                           
  2617                           ; BSR set to: 0
  2618  000716  0100               	movlb	0	; () banked
  2619  000718  90D8               	bcf	status,0,c
  2620  00071A  3368               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2621  00071C  3367               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2622  00071E  3366               	rrcf	___ftadd@f1& (0+255),f,b
  2623  000720  0100               	movlb	0	; () banked
  2624  000722  2B71               	incf	___ftadd@exp1& (0+255),f,b
  2625  000724  D000               	goto	l3264
  2626  000726                     l3264:
  2627                           
  2628                           ; BSR set to: 0
  2629  000726  0100               	movlb	0	; () banked
  2630  000728  5170               	movf	___ftadd@exp2& (0+255),w,b
  2631  00072A  0100               	movlb	0	; () banked
  2632  00072C  1971               	xorwf	___ftadd@exp1& (0+255),w,b
  2633  00072E  B4D8               	btfsc	status,2,c
  2634  000730  D030               	goto	l1002
  2635  000732  D7F1               	goto	l3262
  2636                           
  2637                           ; BSR set to: 0
  2638  000734  D02E               	goto	l1002
  2639  000736                     l3266:
  2640                           
  2641                           ; BSR set to: 0
  2642  000736  0100               	movlb	0	; () banked
  2643  000738  5171               	movf	___ftadd@exp1& (0+255),w,b
  2644  00073A  0100               	movlb	0	; () banked
  2645  00073C  5D70               	subwf	___ftadd@exp2& (0+255),w,b
  2646  00073E  B0D8               	btfsc	status,0,c
  2647  000740  D028               	goto	l1002
  2648  000742                     l3268:
  2649                           
  2650                           ; BSR set to: 0
  2651  000742  0100               	movlb	0	; () banked
  2652  000744  90D8               	bcf	status,0,c
  2653  000746  3766               	rlcf	___ftadd@f1& (0+255),f,b
  2654  000748  3767               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2655  00074A  3768               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2656  00074C  0100               	movlb	0	; () banked
  2657  00074E  0771               	decf	___ftadd@exp1& (0+255),f,b
  2658                           
  2659                           ; BSR set to: 0
  2660  000750  0100               	movlb	0	; () banked
  2661  000752  5171               	movf	___ftadd@exp1& (0+255),w,b
  2662  000754  0100               	movlb	0	; () banked
  2663  000756  1970               	xorwf	___ftadd@exp2& (0+255),w,b
  2664  000758  B4D8               	btfsc	status,2,c
  2665  00075A  D013               	goto	l3276
  2666                           
  2667                           ; BSR set to: 0
  2668  00075C  0100               	movlb	0	; () banked
  2669  00075E  076F               	decf	___ftadd@sign& (0+255),f,b
  2670  000760  C06F  F06C         	movff	___ftadd@sign,??___ftadd
  2671  000764  0E07               	movlw	7
  2672  000766  0100               	movlb	0	; () banked
  2673  000768  176C               	andwf	??___ftadd& (0+255),f,b
  2674  00076A  B4D8               	btfsc	status,2,c
  2675  00076C  D00A               	goto	l3276
  2676  00076E  D7E9               	goto	l3268
  2677                           
  2678                           ; BSR set to: 0
  2679                           
  2680                           ; BSR set to: 0
  2681  000770  D008               	goto	l3276
  2682  000772                     l3274:
  2683                           
  2684                           ; BSR set to: 0
  2685  000772  0100               	movlb	0	; () banked
  2686  000774  90D8               	bcf	status,0,c
  2687  000776  336B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2688  000778  336A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2689  00077A  3369               	rrcf	___ftadd@f2& (0+255),f,b
  2690  00077C  0100               	movlb	0	; () banked
  2691  00077E  2B70               	incf	___ftadd@exp2& (0+255),f,b
  2692  000780  D000               	goto	l3276
  2693  000782                     l3276:
  2694                           
  2695                           ; BSR set to: 0
  2696  000782  0100               	movlb	0	; () banked
  2697  000784  5170               	movf	___ftadd@exp2& (0+255),w,b
  2698  000786  0100               	movlb	0	; () banked
  2699  000788  1971               	xorwf	___ftadd@exp1& (0+255),w,b
  2700  00078A  B4D8               	btfsc	status,2,c
  2701  00078C  D002               	goto	l1002
  2702  00078E  D7F1               	goto	l3274
  2703                           
  2704                           ; BSR set to: 0
  2705  000790  D000               	goto	l1002
  2706  000792                     l1002:
  2707                           
  2708                           ; BSR set to: 0
  2709  000792  0100               	movlb	0	; () banked
  2710  000794  AF6F               	btfss	___ftadd@sign& (0+255),7,b
  2711  000796  D012               	goto	l1011
  2712                           
  2713                           ; BSR set to: 0
  2714  000798  0EFF               	movlw	255
  2715  00079A  0100               	movlb	0	; () banked
  2716  00079C  1B66               	xorwf	___ftadd@f1& (0+255),f,b
  2717  00079E  0EFF               	movlw	255
  2718  0007A0  0100               	movlb	0	; () banked
  2719  0007A2  1B67               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2720  0007A4  0EFF               	movlw	255
  2721  0007A6  0100               	movlb	0	; () banked
  2722  0007A8  1B68               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2723  0007AA  0E01               	movlw	1
  2724  0007AC  0100               	movlb	0	; () banked
  2725  0007AE  2766               	addwf	___ftadd@f1& (0+255),f,b
  2726  0007B0  0E00               	movlw	0
  2727  0007B2  0100               	movlb	0	; () banked
  2728  0007B4  2367               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2729  0007B6  0E00               	movlw	0
  2730  0007B8  0100               	movlb	0	; () banked
  2731  0007BA  2368               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2732  0007BC                     l1011:
  2733                           
  2734                           ; BSR set to: 0
  2735  0007BC  0100               	movlb	0	; () banked
  2736  0007BE  AD6F               	btfss	___ftadd@sign& (0+255),6,b
  2737  0007C0  D013               	goto	l3282
  2738                           
  2739                           ; BSR set to: 0
  2740  0007C2  0EFF               	movlw	255
  2741  0007C4  0100               	movlb	0	; () banked
  2742  0007C6  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  2743  0007C8  0EFF               	movlw	255
  2744  0007CA  0100               	movlb	0	; () banked
  2745  0007CC  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2746  0007CE  0EFF               	movlw	255
  2747  0007D0  0100               	movlb	0	; () banked
  2748  0007D2  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2749  0007D4  0E01               	movlw	1
  2750  0007D6  0100               	movlb	0	; () banked
  2751  0007D8  2769               	addwf	___ftadd@f2& (0+255),f,b
  2752  0007DA  0E00               	movlw	0
  2753  0007DC  0100               	movlb	0	; () banked
  2754  0007DE  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2755  0007E0  0E00               	movlw	0
  2756  0007E2  0100               	movlb	0	; () banked
  2757  0007E4  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2758  0007E6  D000               	goto	l3282
  2759  0007E8                     l3282:
  2760                           
  2761                           ; BSR set to: 0
  2762  0007E8  0E00               	movlw	0
  2763  0007EA  0100               	movlb	0	; () banked
  2764  0007EC  6F6F               	movwf	___ftadd@sign& (0+255),b
  2765                           
  2766                           ; BSR set to: 0
  2767  0007EE  0100               	movlb	0	; () banked
  2768  0007F0  5166               	movf	___ftadd@f1& (0+255),w,b
  2769  0007F2  0100               	movlb	0	; () banked
  2770  0007F4  2769               	addwf	___ftadd@f2& (0+255),f,b
  2771  0007F6  0100               	movlb	0	; () banked
  2772  0007F8  5167               	movf	(___ftadd@f1+1)& (0+255),w,b
  2773  0007FA  0100               	movlb	0	; () banked
  2774  0007FC  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2775  0007FE  0100               	movlb	0	; () banked
  2776  000800  5168               	movf	(___ftadd@f1+2)& (0+255),w,b
  2777  000802  0100               	movlb	0	; () banked
  2778  000804  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2779                           
  2780                           ; BSR set to: 0
  2781  000806  0100               	movlb	0	; () banked
  2782  000808  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2783  00080A  D016               	goto	l3292
  2784                           
  2785                           ; BSR set to: 0
  2786  00080C  0EFF               	movlw	255
  2787  00080E  0100               	movlb	0	; () banked
  2788  000810  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  2789  000812  0EFF               	movlw	255
  2790  000814  0100               	movlb	0	; () banked
  2791  000816  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2792  000818  0EFF               	movlw	255
  2793  00081A  0100               	movlb	0	; () banked
  2794  00081C  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2795  00081E  0E01               	movlw	1
  2796  000820  0100               	movlb	0	; () banked
  2797  000822  2769               	addwf	___ftadd@f2& (0+255),f,b
  2798  000824  0E00               	movlw	0
  2799  000826  0100               	movlb	0	; () banked
  2800  000828  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2801  00082A  0E00               	movlw	0
  2802  00082C  0100               	movlb	0	; () banked
  2803  00082E  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2804                           
  2805                           ; BSR set to: 0
  2806  000830  0E01               	movlw	1
  2807  000832  0100               	movlb	0	; () banked
  2808  000834  6F6F               	movwf	___ftadd@sign& (0+255),b
  2809  000836  D000               	goto	l3292
  2810  000838                     l3292:
  2811                           
  2812                           ; BSR set to: 0
  2813  000838  C069  F018         	movff	___ftadd@f2,___ftpack@arg
  2814  00083C  C06A  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  2815  000840  C06B  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  2816  000844  C071  F01B         	movff	___ftadd@exp1,___ftpack@exp
  2817  000848  C06F  F01C         	movff	___ftadd@sign,___ftpack@sign
  2818  00084C  ECF8  F006         	call	___ftpack	;wreg free
  2819  000850  C018  F066         	movff	?___ftpack,?___ftadd
  2820  000854  C019  F067         	movff	?___ftpack+1,?___ftadd+1
  2821  000858  C01A  F068         	movff	?___ftpack+2,?___ftadd+2
  2822  00085C  D000               	goto	l988
  2823  00085E                     l988:
  2824  00085E  0012               	return		;funcret
  2825  000860                     __end_of___ftadd:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function ___ftneg *****************
  2844 ;; Defined at:
  2845 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  f1              3   23[COMRAM] float 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  3   23[COMRAM] float 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2859 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;Total ram usage:        3 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    4
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_calculatePID
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text7
  2874  001708                     __ptext7:
  2875                           	opt stack 0
  2876  001708                     ___ftneg:
  2877                           	opt stack 23
  2878                           
  2879                           ;incstack = 0
  2880  001708  5018               	movf	___ftneg@f1,w,c
  2881  00170A  1019               	iorwf	___ftneg@f1+1,w,c
  2882  00170C  101A               	iorwf	___ftneg@f1+2,w,c
  2883  00170E  B4D8               	btfsc	status,2,c
  2884  001710  D006               	goto	l1044
  2885  001712  0E00               	movlw	0
  2886  001714  1A18               	xorwf	___ftneg@f1,f,c
  2887  001716  0E00               	movlw	0
  2888  001718  1A19               	xorwf	___ftneg@f1+1,f,c
  2889  00171A  0E80               	movlw	128
  2890  00171C  1A1A               	xorwf	___ftneg@f1+2,f,c
  2891  00171E                     l1044:
  2892  00171E  C018  F018         	movff	___ftneg@f1,?___ftneg
  2893  001722  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  2894  001726  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  2895  00172A  0012               	return		;funcret
  2896  00172C                     __end_of___ftneg:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           prodh	equ	0xFF4
  2903                           prodl	equ	0xFF3
  2904                           intcon	equ	0xFF2
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function ___ftge *****************
  2915 ;; Defined at:
  2916 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  ff1             3   23[COMRAM] float 
  2919 ;;  ff2             3   26[COMRAM] float 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;		None               void
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2931 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;Total ram usage:        9 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    4
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_calculatePID
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text8
  2946  0010B8                     __ptext8:
  2947                           	opt stack 0
  2948  0010B8                     ___ftge:
  2949                           	opt stack 23
  2950                           
  2951                           ;incstack = 0
  2952  0010B8  AE1A               	btfss	___ftge@ff1+2,7,c
  2953  0010BA  D017               	goto	l2522
  2954  0010BC  C018  F01E         	movff	___ftge@ff1,??___ftge
  2955  0010C0  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  2956  0010C4  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  2957  0010C8  1E1E               	comf	??___ftge,f,c
  2958  0010CA  1E1F               	comf	??___ftge+1,f,c
  2959  0010CC  1E20               	comf	??___ftge+2,f,c
  2960  0010CE  2A1E               	incf	??___ftge,f,c
  2961  0010D0  0E00               	movlw	0
  2962  0010D2  221F               	addwfc	??___ftge+1,f,c
  2963  0010D4  2220               	addwfc	??___ftge+2,f,c
  2964  0010D6  0E00               	movlw	0
  2965  0010D8  241E               	addwf	??___ftge,w,c
  2966  0010DA  6E18               	movwf	___ftge@ff1,c
  2967  0010DC  0E00               	movlw	0
  2968  0010DE  201F               	addwfc	??___ftge+1,w,c
  2969  0010E0  6E19               	movwf	___ftge@ff1+1,c
  2970  0010E2  0E80               	movlw	128
  2971  0010E4  2020               	addwfc	??___ftge+2,w,c
  2972  0010E6  6E1A               	movwf	___ftge@ff1+2,c
  2973  0010E8  D000               	goto	l2522
  2974  0010EA                     l2522:
  2975  0010EA  AE1D               	btfss	___ftge@ff2+2,7,c
  2976  0010EC  D017               	goto	l2526
  2977  0010EE  C01B  F01E         	movff	___ftge@ff2,??___ftge
  2978  0010F2  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  2979  0010F6  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  2980  0010FA  1E1E               	comf	??___ftge,f,c
  2981  0010FC  1E1F               	comf	??___ftge+1,f,c
  2982  0010FE  1E20               	comf	??___ftge+2,f,c
  2983  001100  2A1E               	incf	??___ftge,f,c
  2984  001102  0E00               	movlw	0
  2985  001104  221F               	addwfc	??___ftge+1,f,c
  2986  001106  2220               	addwfc	??___ftge+2,f,c
  2987  001108  0E00               	movlw	0
  2988  00110A  241E               	addwf	??___ftge,w,c
  2989  00110C  6E1B               	movwf	___ftge@ff2,c
  2990  00110E  0E00               	movlw	0
  2991  001110  201F               	addwfc	??___ftge+1,w,c
  2992  001112  6E1C               	movwf	___ftge@ff2+1,c
  2993  001114  0E80               	movlw	128
  2994  001116  2020               	addwfc	??___ftge+2,w,c
  2995  001118  6E1D               	movwf	___ftge@ff2+2,c
  2996  00111A  D000               	goto	l2526
  2997  00111C                     l2526:
  2998  00111C  0E00               	movlw	0
  2999  00111E  1A18               	xorwf	___ftge@ff1,f,c
  3000  001120  0E00               	movlw	0
  3001  001122  1A19               	xorwf	___ftge@ff1+1,f,c
  3002  001124  0E80               	movlw	128
  3003  001126  1A1A               	xorwf	___ftge@ff1+2,f,c
  3004  001128  0E00               	movlw	0
  3005  00112A  1A1B               	xorwf	___ftge@ff2,f,c
  3006  00112C  0E00               	movlw	0
  3007  00112E  1A1C               	xorwf	___ftge@ff2+1,f,c
  3008  001130  0E80               	movlw	128
  3009  001132  1A1D               	xorwf	___ftge@ff2+2,f,c
  3010  001134  501B               	movf	___ftge@ff2,w,c
  3011  001136  5C18               	subwf	___ftge@ff1,w,c
  3012  001138  501C               	movf	___ftge@ff2+1,w,c
  3013  00113A  5819               	subwfb	___ftge@ff1+1,w,c
  3014  00113C  501D               	movf	___ftge@ff2+2,w,c
  3015  00113E  581A               	subwfb	___ftge@ff1+2,w,c
  3016  001140  B0D8               	btfsc	status,0,c
  3017  001142  D002               	goto	l2532
  3018  001144  90D8               	bcf	status,0,c
  3019  001146  D002               	goto	l1028
  3020  001148                     l2532:
  3021  001148  80D8               	bsf	status,0,c
  3022  00114A  D000               	goto	l1028
  3023  00114C                     l1028:
  3024  00114C  0012               	return		;funcret
  3025  00114E                     __end_of___ftge:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           prodh	equ	0xFF4
  3032                           prodl	equ	0xFF3
  3033                           intcon	equ	0xFF2
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function ___ftdiv *****************
  3044 ;; Defined at:
  3045 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  f1              3   31[COMRAM] float 
  3048 ;;  f2              3   34[COMRAM] float 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  f3              3   41[COMRAM] float 
  3051 ;;  sign            1   45[COMRAM] unsigned char 
  3052 ;;  exp             1   44[COMRAM] unsigned char 
  3053 ;;  cntr            1   40[COMRAM] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  3   31[COMRAM] float 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3063 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;Total ram usage:       15 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    5
  3070 ;; This function calls:
  3071 ;;		___ftpack
  3072 ;; This function is called by:
  3073 ;;		_calculatePID
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text9
  3078  000D0E                     __ptext9:
  3079                           	opt stack 0
  3080  000D0E                     ___ftdiv:
  3081                           	opt stack 22
  3082                           
  3083                           ;incstack = 0
  3084  000D0E  C022  F026         	movff	___ftdiv@f1+2,??___ftdiv
  3085  000D12  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3086  000D14  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3087  000D16  3421               	rlcf	___ftdiv@f1+1,w,c
  3088  000D18  3626               	rlcf	??___ftdiv& (0+255),f,c
  3089  000D1A  E301               	bnc	u2921
  3090  000D1C  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3091  000D1E                     u2921:
  3092  000D1E  5026               	movf	??___ftdiv,w,c
  3093  000D20  6E2D               	movwf	___ftdiv@exp,c
  3094  000D22  502D               	movf	___ftdiv@exp,w,c
  3095  000D24  A4D8               	btfss	status,2,c
  3096  000D26  D002               	goto	l3306
  3097  000D28  D00E               	goto	l3308
  3098  000D2A  D061               	goto	l1019
  3099  000D2C                     l3306:
  3100  000D2C  C025  F026         	movff	___ftdiv@f2+2,??___ftdiv
  3101  000D30  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3102  000D32  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3103  000D34  3424               	rlcf	___ftdiv@f2+1,w,c
  3104  000D36  3626               	rlcf	??___ftdiv& (0+255),f,c
  3105  000D38  E301               	bnc	u2941
  3106  000D3A  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3107  000D3C                     u2941:
  3108  000D3C  5026               	movf	??___ftdiv,w,c
  3109  000D3E  6E2E               	movwf	___ftdiv@sign,c
  3110  000D40  502E               	movf	___ftdiv@sign,w,c
  3111  000D42  A4D8               	btfss	status,2,c
  3112  000D44  D007               	goto	l3312
  3113  000D46                     l3308:
  3114  000D46  0E00               	movlw	0
  3115  000D48  6E20               	movwf	?___ftdiv,c
  3116  000D4A  0E00               	movlw	0
  3117  000D4C  6E21               	movwf	?___ftdiv+1,c
  3118  000D4E  0E00               	movlw	0
  3119  000D50  6E22               	movwf	?___ftdiv+2,c
  3120  000D52  D04D               	goto	l1019
  3121  000D54                     l3312:
  3122  000D54  0E00               	movlw	0
  3123  000D56  6E2A               	movwf	___ftdiv@f3,c
  3124  000D58  0E00               	movlw	0
  3125  000D5A  6E2B               	movwf	___ftdiv@f3+1,c
  3126  000D5C  0E00               	movlw	0
  3127  000D5E  6E2C               	movwf	___ftdiv@f3+2,c
  3128  000D60  502E               	movf	___ftdiv@sign,w,c
  3129  000D62  0F89               	addlw	137
  3130  000D64  5E2D               	subwf	___ftdiv@exp,f,c
  3131  000D66  C022  F02E         	movff	___ftdiv@f1+2,___ftdiv@sign
  3132  000D6A  5025               	movf	___ftdiv@f2+2,w,c
  3133  000D6C  1A2E               	xorwf	___ftdiv@sign,f,c
  3134  000D6E  0E80               	movlw	128
  3135  000D70  162E               	andwf	___ftdiv@sign,f,c
  3136  000D72  8E21               	bsf	___ftdiv@f1+1,7,c
  3137  000D74  0EFF               	movlw	255
  3138  000D76  1620               	andwf	___ftdiv@f1,f,c
  3139  000D78  0EFF               	movlw	255
  3140  000D7A  1621               	andwf	___ftdiv@f1+1,f,c
  3141  000D7C  0E00               	movlw	0
  3142  000D7E  1622               	andwf	___ftdiv@f1+2,f,c
  3143  000D80  8E24               	bsf	___ftdiv@f2+1,7,c
  3144  000D82  0EFF               	movlw	255
  3145  000D84  1623               	andwf	___ftdiv@f2,f,c
  3146  000D86  0EFF               	movlw	255
  3147  000D88  1624               	andwf	___ftdiv@f2+1,f,c
  3148  000D8A  0E00               	movlw	0
  3149  000D8C  1625               	andwf	___ftdiv@f2+2,f,c
  3150  000D8E  0E18               	movlw	24
  3151  000D90  6E29               	movwf	___ftdiv@cntr,c
  3152  000D92  D000               	goto	l3332
  3153  000D94                     l3332:
  3154  000D94  90D8               	bcf	status,0,c
  3155  000D96  362A               	rlcf	___ftdiv@f3,f,c
  3156  000D98  362B               	rlcf	___ftdiv@f3+1,f,c
  3157  000D9A  362C               	rlcf	___ftdiv@f3+2,f,c
  3158  000D9C  5023               	movf	___ftdiv@f2,w,c
  3159  000D9E  5C20               	subwf	___ftdiv@f1,w,c
  3160  000DA0  5024               	movf	___ftdiv@f2+1,w,c
  3161  000DA2  5821               	subwfb	___ftdiv@f1+1,w,c
  3162  000DA4  5025               	movf	___ftdiv@f2+2,w,c
  3163  000DA6  5822               	subwfb	___ftdiv@f1+2,w,c
  3164  000DA8  A0D8               	btfss	status,0,c
  3165  000DAA  D007               	goto	l1022
  3166  000DAC  5023               	movf	___ftdiv@f2,w,c
  3167  000DAE  5E20               	subwf	___ftdiv@f1,f,c
  3168  000DB0  5024               	movf	___ftdiv@f2+1,w,c
  3169  000DB2  5A21               	subwfb	___ftdiv@f1+1,f,c
  3170  000DB4  5025               	movf	___ftdiv@f2+2,w,c
  3171  000DB6  5A22               	subwfb	___ftdiv@f1+2,f,c
  3172  000DB8  802A               	bsf	___ftdiv@f3,0,c
  3173  000DBA                     l1022:
  3174  000DBA  90D8               	bcf	status,0,c
  3175  000DBC  3620               	rlcf	___ftdiv@f1,f,c
  3176  000DBE  3621               	rlcf	___ftdiv@f1+1,f,c
  3177  000DC0  3622               	rlcf	___ftdiv@f1+2,f,c
  3178  000DC2  2E29               	decfsz	___ftdiv@cntr,f,c
  3179  000DC4  D7E7               	goto	l3332
  3180  000DC6  D000               	goto	l3342
  3181  000DC8                     l3342:
  3182  000DC8  C02A  F018         	movff	___ftdiv@f3,___ftpack@arg
  3183  000DCC  C02B  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3184  000DD0  C02C  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3185  000DD4  C02D  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3186  000DD8  C02E  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3187  000DDC  ECF8  F006         	call	___ftpack	;wreg free
  3188  000DE0  C018  F020         	movff	?___ftpack,?___ftdiv
  3189  000DE4  C019  F021         	movff	?___ftpack+1,?___ftdiv+1
  3190  000DE8  C01A  F022         	movff	?___ftpack+2,?___ftdiv+2
  3191  000DEC  D000               	goto	l1019
  3192  000DEE                     l1019:
  3193  000DEE  0012               	return		;funcret
  3194  000DF0                     __end_of___ftdiv:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           fsr1l	equ	0xFE1
  3207                           indf2	equ	0xFDF
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _ReadRTDpos *****************
  3213 ;; Defined at:
  3214 ;;		line 39 in file "ResolverToDigital.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3219 ;;  helloworld      2    0        unsigned int 
  3220 ;;  x               1   33[COMRAM] unsigned char 
  3221 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3222 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  2   24[COMRAM] unsigned int 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3232 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;Total ram usage:       10 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    5
  3239 ;; This function calls:
  3240 ;;		_Delay10TCYx
  3241 ;; This function is called by:
  3242 ;;		_main
  3243 ;;		_ZeroMotors
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text10
  3248  001298                     __ptext10:
  3249                           	opt stack 0
  3250  001298                     _ReadRTDpos:
  3251                           	opt stack 23
  3252                           
  3253                           ;ResolverToDigital.c: 41: unsigned char x;
  3254                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  3255                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  3256                           ;ResolverToDigital.c: 48: {
  3257                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  3258                           
  3259                           ;incstack = 0
  3260  001298  9EF2               	bcf	intcon,7,c	;volatile
  3261                           
  3262                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  3263  00129A  8284               	bsf	3972,1,c	;volatile
  3264                           
  3265                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  3266  00129C  9084               	bcf	3972,0,c	;volatile
  3267                           
  3268                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  3269  00129E  0E00               	movlw	0
  3270  0012A0  6E22               	movwf	ReadRTDpos@x,c
  3271  0012A2  D003               	goto	l2652
  3272  0012A4  D005               	goto	l190
  3273  0012A6                     l189:
  3274                           
  3275                           ;ResolverToDigital.c: 53: __nop();
  3276  0012A6  F000               	nop	
  3277  0012A8  2A22               	incf	ReadRTDpos@x,f,c
  3278  0012AA                     l2652:
  3279  0012AA  0E07               	movlw	7
  3280  0012AC  6422               	cpfsgt	ReadRTDpos@x,c
  3281  0012AE  D7FB               	goto	l189
  3282  0012B0                     l190:
  3283                           
  3284                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  3285  0012B0  8484               	bsf	3972,2,c	;volatile
  3286                           
  3287                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  3288  0012B2  9484               	bcf	3972,2,c	;volatile
  3289                           
  3290                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  3291  0012B4  0E01               	movlw	1
  3292  0012B6  EC25  F00C         	call	_Delay10TCYx
  3293                           
  3294                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  3295  0012BA  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3296                           
  3297                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  3298  0012BE  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3299                           
  3300                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  3301  0012C2  8484               	bsf	3972,2,c	;volatile
  3302                           
  3303                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  3304  0012C4  8084               	bsf	3972,0,c	;volatile
  3305                           
  3306                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  3307  0012C6  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3308  0012CA  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3309                           
  3310                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3311  0012CC  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3312  0012D0  0E0F               	movlw	15
  3313  0012D2  161B               	andwf	??_ReadRTDpos,f,c
  3314  0012D4  501B               	movf	??_ReadRTDpos,w,c
  3315  0012D6  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3316  0012D8  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3317  0012DA  5020               	movf	ReadRTDpos@FullPosition,w,c
  3318  0012DC  101C               	iorwf	??_ReadRTDpos+1,w,c
  3319  0012DE  6E20               	movwf	ReadRTDpos@FullPosition,c
  3320  0012E0  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3321  0012E2  101D               	iorwf	??_ReadRTDpos+2,w,c
  3322  0012E4  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3323                           
  3324                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  3325  0012E6  8EF2               	bsf	intcon,7,c	;volatile
  3326                           
  3327                           ;ResolverToDigital.c: 64: return FullPosition;
  3328  0012E8  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3329  0012EC  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3330  0012F0  D000               	goto	l191
  3331  0012F2                     l191:
  3332  0012F2  0012               	return		;funcret
  3333  0012F4                     __end_of_ReadRTDpos:
  3334                           	opt stack 0
  3335                           tblptru	equ	0xFF8
  3336                           tblptrh	equ	0xFF7
  3337                           tblptrl	equ	0xFF6
  3338                           tablat	equ	0xFF5
  3339                           prodh	equ	0xFF4
  3340                           prodl	equ	0xFF3
  3341                           intcon	equ	0xFF2
  3342                           postinc0	equ	0xFEE
  3343                           wreg	equ	0xFE8
  3344                           postdec1	equ	0xFE5
  3345                           fsr1l	equ	0xFE1
  3346                           indf2	equ	0xFDF
  3347                           fsr2h	equ	0xFDA
  3348                           fsr2l	equ	0xFD9
  3349                           status	equ	0xFD8
  3350                           
  3351 ;; *************** function _RTD2Angle *****************
  3352 ;; Defined at:
  3353 ;;		line 99 in file "ResolverToDigital.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  RTDAngle        2    6[BANK0 ] unsigned int 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  3    6[BANK0 ] unsigned int 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3367 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;Total ram usage:        3 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    6
  3374 ;; This function calls:
  3375 ;;		___ftmul
  3376 ;;		___lwtoft
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;;		_ZeroMotors
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text11
  3384  00158E                     __ptext11:
  3385                           	opt stack 0
  3386  00158E                     _RTD2Angle:
  3387                           	opt stack 22
  3388                           
  3389                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  3390                           
  3391                           ;incstack = 0
  3392  00158E  C066  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3393  001592  C067  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3394  001596  EC71  F00B         	call	___lwtoft	;wreg free
  3395  00159A  C020  F02F         	movff	?___lwtoft,___ftmul@f1
  3396  00159E  C021  F030         	movff	?___lwtoft+1,___ftmul@f1+1
  3397  0015A2  C022  F031         	movff	?___lwtoft+2,___ftmul@f1+2
  3398  0015A6  0E00               	movlw	0
  3399  0015A8  6E32               	movwf	___ftmul@f2,c
  3400  0015AA  0EB4               	movlw	180
  3401  0015AC  6E33               	movwf	___ftmul@f2+1,c
  3402  0015AE  0E3D               	movlw	61
  3403  0015B0  6E34               	movwf	___ftmul@f2+2,c
  3404  0015B2  ECF5  F005         	call	___ftmul	;wreg free
  3405  0015B6  C02F  F066         	movff	?___ftmul,?_RTD2Angle
  3406  0015BA  C030  F067         	movff	?___ftmul+1,?_RTD2Angle+1
  3407  0015BE  C031  F068         	movff	?___ftmul+2,?_RTD2Angle+2
  3408  0015C2  D000               	goto	l199
  3409  0015C4                     l199:
  3410  0015C4  0012               	return		;funcret
  3411  0015C6                     __end_of_RTD2Angle:
  3412                           	opt stack 0
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           postdec1	equ	0xFE5
  3423                           fsr1l	equ	0xFE1
  3424                           indf2	equ	0xFDF
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function ___lwtoft *****************
  3430 ;; Defined at:
  3431 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  c               2   31[COMRAM] unsigned int 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  3   31[COMRAM] float 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3445 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;Total ram usage:        3 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    5
  3452 ;; This function calls:
  3453 ;;		___ftpack
  3454 ;; This function is called by:
  3455 ;;		_RTD2Angle
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text12
  3460  0016E2                     __ptext12:
  3461                           	opt stack 0
  3462  0016E2                     ___lwtoft:
  3463                           	opt stack 22
  3464                           
  3465                           ;incstack = 0
  3466  0016E2  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  3467  0016E6  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  3468  0016EA  6A1A               	clrf	___ftpack@arg+2,c
  3469  0016EC  0E8E               	movlw	142
  3470  0016EE  6E1B               	movwf	___ftpack@exp,c
  3471  0016F0  0E00               	movlw	0
  3472  0016F2  6E1C               	movwf	___ftpack@sign,c
  3473  0016F4  ECF8  F006         	call	___ftpack	;wreg free
  3474  0016F8  C018  F020         	movff	?___ftpack,?___lwtoft
  3475  0016FC  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  3476  001700  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  3477  001704  D000               	goto	l1184
  3478  001706                     l1184:
  3479  001706  0012               	return		;funcret
  3480  001708                     __end_of___lwtoft:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon	equ	0xFF2
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           postdec1	equ	0xFE5
  3492                           fsr1l	equ	0xFE1
  3493                           indf2	equ	0xFDF
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function ___ftmul *****************
  3499 ;; Defined at:
  3500 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  f1              3   46[COMRAM] float 
  3503 ;;  f2              3   49[COMRAM] float 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3506 ;;  sign            1    5[BANK0 ] unsigned char 
  3507 ;;  cntr            1    4[BANK0 ] unsigned char 
  3508 ;;  exp             1    0[BANK0 ] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  3   46[COMRAM] float 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3518 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;Total ram usage:       15 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    5
  3525 ;; This function calls:
  3526 ;;		___ftpack
  3527 ;; This function is called by:
  3528 ;;		_calculatePID
  3529 ;;		_RTD2Angle
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text13
  3534  000BEA                     __ptext13:
  3535                           	opt stack 0
  3536  000BEA                     ___ftmul:
  3537                           	opt stack 22
  3538                           
  3539                           ;incstack = 0
  3540  000BEA  C031  F035         	movff	___ftmul@f1+2,??___ftmul
  3541  000BEE  6A36               	clrf	(??___ftmul+1)& (0+255),c
  3542  000BF0  6A37               	clrf	(??___ftmul+2)& (0+255),c
  3543  000BF2  3430               	rlcf	___ftmul@f1+1,w,c
  3544  000BF4  3635               	rlcf	??___ftmul& (0+255),f,c
  3545  000BF6  E301               	bnc	u2971
  3546  000BF8  8036               	bsf	(??___ftmul+1)& (0+255),0,c
  3547  000BFA                     u2971:
  3548  000BFA  5035               	movf	??___ftmul,w,c
  3549  000BFC  0100               	movlb	0	; () banked
  3550  000BFE  6F60               	movwf	___ftmul@exp& (0+255),b
  3551  000C00  0100               	movlb	0	; () banked
  3552  000C02  5160               	movf	___ftmul@exp& (0+255),w,b
  3553  000C04  A4D8               	btfss	status,2,c
  3554  000C06  D002               	goto	l3352
  3555  000C08  D010               	goto	l3354
  3556                           
  3557                           ; BSR set to: 0
  3558                           
  3559                           ; BSR set to: 0
  3560  000C0A  D080               	goto	l1034
  3561  000C0C                     l3352:
  3562                           
  3563                           ; BSR set to: 0
  3564  000C0C  C034  F035         	movff	___ftmul@f2+2,??___ftmul
  3565  000C10  6A36               	clrf	(??___ftmul+1)& (0+255),c
  3566  000C12  6A37               	clrf	(??___ftmul+2)& (0+255),c
  3567  000C14  3433               	rlcf	___ftmul@f2+1,w,c
  3568  000C16  3635               	rlcf	??___ftmul& (0+255),f,c
  3569  000C18  E301               	bnc	u2991
  3570  000C1A  8036               	bsf	(??___ftmul+1)& (0+255),0,c
  3571  000C1C                     u2991:
  3572  000C1C  5035               	movf	??___ftmul,w,c
  3573  000C1E  0100               	movlb	0	; () banked
  3574  000C20  6F65               	movwf	___ftmul@sign& (0+255),b
  3575  000C22  0100               	movlb	0	; () banked
  3576  000C24  5165               	movf	___ftmul@sign& (0+255),w,b
  3577  000C26  A4D8               	btfss	status,2,c
  3578  000C28  D007               	goto	l3358
  3579  000C2A                     l3354:
  3580                           
  3581                           ; BSR set to: 0
  3582  000C2A  0E00               	movlw	0
  3583  000C2C  6E2F               	movwf	?___ftmul,c
  3584  000C2E  0E00               	movlw	0
  3585  000C30  6E30               	movwf	?___ftmul+1,c
  3586  000C32  0E00               	movlw	0
  3587  000C34  6E31               	movwf	?___ftmul+2,c
  3588                           
  3589                           ; BSR set to: 0
  3590  000C36  D06A               	goto	l1034
  3591  000C38                     l3358:
  3592                           
  3593                           ; BSR set to: 0
  3594  000C38  0100               	movlb	0	; () banked
  3595  000C3A  5165               	movf	___ftmul@sign& (0+255),w,b
  3596  000C3C  0F7B               	addlw	123
  3597  000C3E  0100               	movlb	0	; () banked
  3598  000C40  2760               	addwf	___ftmul@exp& (0+255),f,b
  3599                           
  3600                           ; BSR set to: 0
  3601  000C42  C031  F065         	movff	___ftmul@f1+2,___ftmul@sign
  3602  000C46  5034               	movf	___ftmul@f2+2,w,c
  3603  000C48  0100               	movlb	0	; () banked
  3604  000C4A  1B65               	xorwf	___ftmul@sign& (0+255),f,b
  3605  000C4C  0E80               	movlw	128
  3606  000C4E  0100               	movlb	0	; () banked
  3607  000C50  1765               	andwf	___ftmul@sign& (0+255),f,b
  3608                           
  3609                           ; BSR set to: 0
  3610  000C52  8E30               	bsf	___ftmul@f1+1,7,c
  3611                           
  3612                           ; BSR set to: 0
  3613  000C54  8E33               	bsf	___ftmul@f2+1,7,c
  3614                           
  3615                           ; BSR set to: 0
  3616  000C56  0EFF               	movlw	255
  3617  000C58  1632               	andwf	___ftmul@f2,f,c
  3618  000C5A  0EFF               	movlw	255
  3619  000C5C  1633               	andwf	___ftmul@f2+1,f,c
  3620  000C5E  0E00               	movlw	0
  3621  000C60  1634               	andwf	___ftmul@f2+2,f,c
  3622                           
  3623                           ; BSR set to: 0
  3624  000C62  0E00               	movlw	0
  3625  000C64  0100               	movlb	0	; () banked
  3626  000C66  6F61               	movwf	___ftmul@f3_as_product& (0+255),b
  3627  000C68  0E00               	movlw	0
  3628  000C6A  0100               	movlb	0	; () banked
  3629  000C6C  6F62               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3630  000C6E  0E00               	movlw	0
  3631  000C70  0100               	movlb	0	; () banked
  3632  000C72  6F63               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3633                           
  3634                           ; BSR set to: 0
  3635  000C74  0E07               	movlw	7
  3636  000C76  0100               	movlb	0	; () banked
  3637  000C78  6F64               	movwf	___ftmul@cntr& (0+255),b
  3638  000C7A  D000               	goto	l3372
  3639  000C7C                     l3372:
  3640                           
  3641                           ; BSR set to: 0
  3642  000C7C  A02F               	btfss	___ftmul@f1,0,c
  3643  000C7E  D00A               	goto	l3376
  3644                           
  3645                           ; BSR set to: 0
  3646  000C80  5032               	movf	___ftmul@f2,w,c
  3647  000C82  0100               	movlb	0	; () banked
  3648  000C84  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3649  000C86  5033               	movf	___ftmul@f2+1,w,c
  3650  000C88  0100               	movlb	0	; () banked
  3651  000C8A  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3652  000C8C  5034               	movf	___ftmul@f2+2,w,c
  3653  000C8E  0100               	movlb	0	; () banked
  3654  000C90  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3655  000C92  D000               	goto	l3376
  3656  000C94                     l3376:
  3657                           
  3658                           ; BSR set to: 0
  3659  000C94  90D8               	bcf	status,0,c
  3660  000C96  3231               	rrcf	___ftmul@f1+2,f,c
  3661  000C98  3230               	rrcf	___ftmul@f1+1,f,c
  3662  000C9A  322F               	rrcf	___ftmul@f1,f,c
  3663  000C9C  90D8               	bcf	status,0,c
  3664  000C9E  3632               	rlcf	___ftmul@f2,f,c
  3665  000CA0  3633               	rlcf	___ftmul@f2+1,f,c
  3666  000CA2  3634               	rlcf	___ftmul@f2+2,f,c
  3667                           
  3668                           ; BSR set to: 0
  3669  000CA4  0100               	movlb	0	; () banked
  3670  000CA6  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3671  000CA8  D7E9               	goto	l3372
  3672  000CAA  D000               	goto	l3380
  3673  000CAC                     l3380:
  3674                           
  3675                           ; BSR set to: 0
  3676  000CAC  0E09               	movlw	9
  3677  000CAE  0100               	movlb	0	; () banked
  3678  000CB0  6F64               	movwf	___ftmul@cntr& (0+255),b
  3679  000CB2  D000               	goto	l3382
  3680  000CB4                     l3382:
  3681                           
  3682                           ; BSR set to: 0
  3683  000CB4  A02F               	btfss	___ftmul@f1,0,c
  3684  000CB6  D00A               	goto	l3386
  3685                           
  3686                           ; BSR set to: 0
  3687  000CB8  5032               	movf	___ftmul@f2,w,c
  3688  000CBA  0100               	movlb	0	; () banked
  3689  000CBC  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3690  000CBE  5033               	movf	___ftmul@f2+1,w,c
  3691  000CC0  0100               	movlb	0	; () banked
  3692  000CC2  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3693  000CC4  5034               	movf	___ftmul@f2+2,w,c
  3694  000CC6  0100               	movlb	0	; () banked
  3695  000CC8  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3696  000CCA  D000               	goto	l3386
  3697  000CCC                     l3386:
  3698                           
  3699                           ; BSR set to: 0
  3700  000CCC  90D8               	bcf	status,0,c
  3701  000CCE  3231               	rrcf	___ftmul@f1+2,f,c
  3702  000CD0  3230               	rrcf	___ftmul@f1+1,f,c
  3703  000CD2  322F               	rrcf	___ftmul@f1,f,c
  3704  000CD4  0100               	movlb	0	; () banked
  3705  000CD6  90D8               	bcf	status,0,c
  3706  000CD8  3363               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3707  000CDA  3362               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3708  000CDC  3361               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3709                           
  3710                           ; BSR set to: 0
  3711  000CDE  0100               	movlb	0	; () banked
  3712  000CE0  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3713  000CE2  D7E8               	goto	l3382
  3714  000CE4  D000               	goto	l3390
  3715  000CE6                     l3390:
  3716                           
  3717                           ; BSR set to: 0
  3718  000CE6  C061  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  3719  000CEA  C062  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3720  000CEE  C063  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3721  000CF2  C060  F01B         	movff	___ftmul@exp,___ftpack@exp
  3722  000CF6  C065  F01C         	movff	___ftmul@sign,___ftpack@sign
  3723  000CFA  ECF8  F006         	call	___ftpack	;wreg free
  3724  000CFE  C018  F02F         	movff	?___ftpack,?___ftmul
  3725  000D02  C019  F030         	movff	?___ftpack+1,?___ftmul+1
  3726  000D06  C01A  F031         	movff	?___ftpack+2,?___ftmul+2
  3727  000D0A  D000               	goto	l1034
  3728  000D0C                     l1034:
  3729  000D0C  0012               	return		;funcret
  3730  000D0E                     __end_of___ftmul:
  3731                           	opt stack 0
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           prodh	equ	0xFF4
  3737                           prodl	equ	0xFF3
  3738                           intcon	equ	0xFF2
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postdec1	equ	0xFE5
  3742                           fsr1l	equ	0xFE1
  3743                           indf2	equ	0xFDF
  3744                           fsr2h	equ	0xFDA
  3745                           fsr2l	equ	0xFD9
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function ___ftpack *****************
  3749 ;; Defined at:
  3750 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  arg             3   23[COMRAM] unsigned um
  3753 ;;  exp             1   26[COMRAM] unsigned char 
  3754 ;;  sign            1   27[COMRAM] unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  3   23[COMRAM] float 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:        8 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    4
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		___ftadd
  3777 ;;		___ftdiv
  3778 ;;		___ftmul
  3779 ;;		___lwtoft
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text14
  3784  000DF0                     __ptext14:
  3785                           	opt stack 0
  3786  000DF0                     ___ftpack:
  3787                           	opt stack 21
  3788                           
  3789                           ;incstack = 0
  3790  000DF0  501B               	movf	___ftpack@exp,w,c
  3791  000DF2  B4D8               	btfsc	status,2,c
  3792  000DF4  D005               	goto	l3194
  3793  000DF6  5018               	movf	___ftpack@arg,w,c
  3794  000DF8  1019               	iorwf	___ftpack@arg+1,w,c
  3795  000DFA  101A               	iorwf	___ftpack@arg+2,w,c
  3796  000DFC  A4D8               	btfss	status,2,c
  3797  000DFE  D00E               	goto	l3200
  3798  000E00                     l3194:
  3799  000E00  0E00               	movlw	0
  3800  000E02  6E18               	movwf	?___ftpack,c
  3801  000E04  0E00               	movlw	0
  3802  000E06  6E19               	movwf	?___ftpack+1,c
  3803  000E08  0E00               	movlw	0
  3804  000E0A  6E1A               	movwf	?___ftpack+2,c
  3805  000E0C  D053               	goto	l947
  3806  000E0E  D006               	goto	l3200
  3807  000E10                     l3198:
  3808  000E10  2A1B               	incf	___ftpack@exp,f,c
  3809  000E12  90D8               	bcf	status,0,c
  3810  000E14  321A               	rrcf	___ftpack@arg+2,f,c
  3811  000E16  3219               	rrcf	___ftpack@arg+1,f,c
  3812  000E18  3218               	rrcf	___ftpack@arg,f,c
  3813  000E1A  D000               	goto	l3200
  3814  000E1C                     l3200:
  3815  000E1C  0E00               	movlw	0
  3816  000E1E  1418               	andwf	___ftpack@arg,w,c
  3817  000E20  6E1D               	movwf	??___ftpack& (0+255),c
  3818  000E22  0E00               	movlw	0
  3819  000E24  1419               	andwf	___ftpack@arg+1,w,c
  3820  000E26  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  3821  000E28  0EFE               	movlw	254
  3822  000E2A  141A               	andwf	___ftpack@arg+2,w,c
  3823  000E2C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  3824  000E2E  501D               	movf	??___ftpack,w,c
  3825  000E30  101E               	iorwf	??___ftpack+1,w,c
  3826  000E32  101F               	iorwf	??___ftpack+2,w,c
  3827  000E34  B4D8               	btfsc	status,2,c
  3828  000E36  D00E               	goto	l3206
  3829  000E38  D7EB               	goto	l3198
  3830  000E3A  D00C               	goto	l3206
  3831  000E3C                     l3202:
  3832  000E3C  2A1B               	incf	___ftpack@exp,f,c
  3833  000E3E  0E01               	movlw	1
  3834  000E40  2618               	addwf	___ftpack@arg,f,c
  3835  000E42  0E00               	movlw	0
  3836  000E44  2219               	addwfc	___ftpack@arg+1,f,c
  3837  000E46  0E00               	movlw	0
  3838  000E48  221A               	addwfc	___ftpack@arg+2,f,c
  3839  000E4A  90D8               	bcf	status,0,c
  3840  000E4C  321A               	rrcf	___ftpack@arg+2,f,c
  3841  000E4E  3219               	rrcf	___ftpack@arg+1,f,c
  3842  000E50  3218               	rrcf	___ftpack@arg,f,c
  3843  000E52  D000               	goto	l3206
  3844  000E54                     l3206:
  3845  000E54  0E00               	movlw	0
  3846  000E56  1418               	andwf	___ftpack@arg,w,c
  3847  000E58  6E1D               	movwf	??___ftpack& (0+255),c
  3848  000E5A  0E00               	movlw	0
  3849  000E5C  1419               	andwf	___ftpack@arg+1,w,c
  3850  000E5E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  3851  000E60  0EFF               	movlw	255
  3852  000E62  141A               	andwf	___ftpack@arg+2,w,c
  3853  000E64  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  3854  000E66  501D               	movf	??___ftpack,w,c
  3855  000E68  101E               	iorwf	??___ftpack+1,w,c
  3856  000E6A  101F               	iorwf	??___ftpack+2,w,c
  3857  000E6C  B4D8               	btfsc	status,2,c
  3858  000E6E  D008               	goto	l3210
  3859  000E70  D7E5               	goto	l3202
  3860  000E72  D006               	goto	l3210
  3861  000E74                     l3208:
  3862  000E74  061B               	decf	___ftpack@exp,f,c
  3863  000E76  90D8               	bcf	status,0,c
  3864  000E78  3618               	rlcf	___ftpack@arg,f,c
  3865  000E7A  3619               	rlcf	___ftpack@arg+1,f,c
  3866  000E7C  361A               	rlcf	___ftpack@arg+2,f,c
  3867  000E7E  D000               	goto	l3210
  3868  000E80                     l3210:
  3869  000E80  BE19               	btfsc	___ftpack@arg+1,7,c
  3870  000E82  D004               	goto	l958
  3871  000E84  0E02               	movlw	2
  3872  000E86  601B               	cpfslt	___ftpack@exp,c
  3873  000E88  D7F5               	goto	l3208
  3874  000E8A  D000               	goto	l958
  3875  000E8C                     l958:
  3876  000E8C  B01B               	btfsc	___ftpack@exp,0,c
  3877  000E8E  D002               	goto	l3216
  3878  000E90  9E19               	bcf	___ftpack@arg+1,7,c
  3879  000E92  D000               	goto	l3216
  3880  000E94                     l3216:
  3881  000E94  90D8               	bcf	status,0,c
  3882  000E96  321B               	rrcf	___ftpack@exp,f,c
  3883  000E98  501B               	movf	___ftpack@exp,w,c
  3884  000E9A  121A               	iorwf	___ftpack@arg+2,f,c
  3885  000E9C  501C               	movf	___ftpack@sign,w,c
  3886  000E9E  B4D8               	btfsc	status,2,c
  3887  000EA0  D002               	goto	l3222
  3888  000EA2  8E1A               	bsf	___ftpack@arg+2,7,c
  3889  000EA4  D000               	goto	l3222
  3890  000EA6                     l3222:
  3891  000EA6  C018  F018         	movff	___ftpack@arg,?___ftpack
  3892  000EAA  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  3893  000EAE  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  3894  000EB2  D000               	goto	l947
  3895  000EB4                     l947:
  3896  000EB4  0012               	return		;funcret
  3897  000EB6                     __end_of___ftpack:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           intcon	equ	0xFF2
  3906                           postinc0	equ	0xFEE
  3907                           wreg	equ	0xFE8
  3908                           postdec1	equ	0xFE5
  3909                           fsr1l	equ	0xFE1
  3910                           indf2	equ	0xFDF
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _ImplementPIDMotion *****************
  3916 ;; Defined at:
  3917 ;;		line 40 in file "MotorControl.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  PIDValue        2   37[BANK0 ] int 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;		None               void
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;Total ram usage:        4 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    5
  3938 ;; This function calls:
  3939 ;;		_abs
  3940 ;; This function is called by:
  3941 ;;		_main
  3942 ;;		_ZeroMotors
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text15
  3947  000F6E                     __ptext15:
  3948                           	opt stack 0
  3949  000F6E                     _ImplementPIDMotion:
  3950                           	opt stack 23
  3951                           
  3952                           ;MotorControl.c: 42: if (PIDValue > 255)
  3953                           
  3954                           ;incstack = 0
  3955  000F6E  0100               	movlb	0	; () banked
  3956  000F70  BF86               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  3957  000F72  D009               	goto	l3410
  3958  000F74  0100               	movlb	0	; () banked
  3959  000F76  0586               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  3960  000F78  A0D8               	btfss	status,0,c
  3961  000F7A  D005               	goto	l3410
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;MotorControl.c: 43: PIDValue = 255;
  3965  000F7C  0E00               	movlw	0
  3966  000F7E  0100               	movlb	0	; () banked
  3967  000F80  6F86               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  3968  000F82  6985               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  3969  000F84  D010               	goto	l3414
  3970  000F86                     l3410:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;MotorControl.c: 44: else if (PIDValue < -255)
  3974  000F86  0100               	movlb	0	; () banked
  3975  000F88  AF86               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  3976  000F8A  D00D               	goto	l3414
  3977  000F8C  0100               	movlb	0	; () banked
  3978  000F8E  0585               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  3979  000F90  0EFF               	movlw	255
  3980  000F92  0100               	movlb	0	; () banked
  3981  000F94  5986               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  3982  000F96  B0D8               	btfsc	status,0,c
  3983  000F98  D006               	goto	l3414
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;MotorControl.c: 45: PIDValue = -255;
  3987  000F9A  0EFF               	movlw	255
  3988  000F9C  0100               	movlb	0	; () banked
  3989  000F9E  6F86               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  3990  000FA0  0E01               	movlw	1
  3991  000FA2  6F85               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  3992                           
  3993                           ; BSR set to: 0
  3994  000FA4  D000               	goto	l3414
  3995  000FA6                     l3414:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;MotorControl.c: 47: if (PIDValue < 0)
  3999  000FA6  0100               	movlb	0	; () banked
  4000  000FA8  AF86               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4001  000FAA  D002               	goto	l3418
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  4005  000FAC  8EB7               	bsf	4023,7,c	;volatile
  4006  000FAE  D00C               	goto	l3422
  4007  000FB0                     l3418:
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;MotorControl.c: 49: else if (PIDValue > 0)
  4011  000FB0  0100               	movlb	0	; () banked
  4012  000FB2  BF86               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4013  000FB4  D009               	goto	l3422
  4014  000FB6  0100               	movlb	0	; () banked
  4015  000FB8  5186               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4016  000FBA  E104               	bnz	u3070
  4017  000FBC  0100               	movlb	0	; () banked
  4018  000FBE  0585               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4019  000FC0  A0D8               	btfss	status,0,c
  4020  000FC2  D002               	goto	l3422
  4021  000FC4                     u3070:
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  4025  000FC4  9EB7               	bcf	4023,7,c	;volatile
  4026                           
  4027                           ; BSR set to: 0
  4028  000FC6  D000               	goto	l3422
  4029  000FC8                     l3422:
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  4033  000FC8  C085  F081         	movff	ImplementPIDMotion@PIDValue,abs@a
  4034  000FCC  C086  F082         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4035  000FD0  EC46  F00B         	call	_abs	;wreg free
  4036  000FD4  C081  F085         	movff	?_abs,ImplementPIDMotion@PIDValue
  4037  000FD8  C082  F086         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4038                           
  4039                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  4040  000FDC  C085  F087         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4041  000FE0  C086  F088         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4042  000FE4  0100               	movlb	0	; () banked
  4043  000FE6  3588               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4044  000FE8  3388               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4045  000FEA  3387               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4046  000FEC  0100               	movlb	0	; () banked
  4047  000FEE  3588               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4048  000FF0  3388               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4049  000FF2  3387               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4050  000FF4  0100               	movlb	0	; () banked
  4051  000FF6  5187               	movf	??_ImplementPIDMotion& (0+255),w,b
  4052  000FF8  6EB8               	movwf	4024,c	;volatile
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4056  000FFA  C085  F087         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4057  000FFE  0E03               	movlw	3
  4058  001000  0100               	movlb	0	; () banked
  4059  001002  1787               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4060  001004  0100               	movlb	0	; () banked
  4061  001006  3B87               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4062  001008  50B7               	movf	4023,w,c	;volatile
  4063  00100A  0100               	movlb	0	; () banked
  4064  00100C  1987               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4065  00100E  0BCF               	andlw	-49
  4066  001010  1987               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4067  001012  6EB7               	movwf	4023,c	;volatile
  4068                           
  4069                           ; BSR set to: 0
  4070  001014  0012               	return		;funcret
  4071  001016                     __end_of_ImplementPIDMotion:
  4072                           	opt stack 0
  4073                           tblptru	equ	0xFF8
  4074                           tblptrh	equ	0xFF7
  4075                           tblptrl	equ	0xFF6
  4076                           tablat	equ	0xFF5
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           intcon	equ	0xFF2
  4080                           postinc0	equ	0xFEE
  4081                           wreg	equ	0xFE8
  4082                           postdec1	equ	0xFE5
  4083                           fsr1l	equ	0xFE1
  4084                           indf2	equ	0xFDF
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _SPIInit *****************
  4090 ;; Defined at:
  4091 ;;		line 16 in file "SPISlave.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;		None
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;		None               void
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;Total ram usage:        0 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    5
  4112 ;; This function calls:
  4113 ;;		_OpenSPI1
  4114 ;; This function is called by:
  4115 ;;		_initialize
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text16
  4120  0017D8                     __ptext16:
  4121                           	opt stack 0
  4122  0017D8                     _SPIInit:
  4123                           	opt stack 24
  4124                           
  4125                           ;SPISlave.c: 18: TRISCbits.RC4 = 1;
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;incstack = 0
  4129  0017D8  8894               	bsf	3988,4,c	;volatile
  4130                           
  4131                           ;SPISlave.c: 19: TRISCbits.RC5 = 0;
  4132  0017DA  9A94               	bcf	3988,5,c	;volatile
  4133                           
  4134                           ;SPISlave.c: 20: TRISFbits.RF7 = 1;
  4135  0017DC  8E97               	bsf	3991,7,c	;volatile
  4136                           
  4137                           ;SPISlave.c: 21: TRISCbits.RC6 = 0;
  4138  0017DE  9C94               	bcf	3988,6,c	;volatile
  4139                           
  4140                           ;SPISlave.c: 22: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4141  0017E0  0E00               	movlw	0
  4142  0017E2  6E18               	movwf	OpenSPI1@bus_mode,c
  4143  0017E4  0E00               	movlw	0
  4144  0017E6  6E19               	movwf	OpenSPI1@smp_phase,c
  4145  0017E8  0E04               	movlw	4
  4146  0017EA  EC7A  F009         	call	_OpenSPI1
  4147                           
  4148                           ;SPISlave.c: 23: PIE1bits.SSP1IE = 1;
  4149  0017EE  869D               	bsf	3997,3,c	;volatile
  4150  0017F0  0012               	return		;funcret
  4151  0017F2                     __end_of_SPIInit:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           intcon	equ	0xFF2
  4160                           postinc0	equ	0xFEE
  4161                           wreg	equ	0xFE8
  4162                           postdec1	equ	0xFE5
  4163                           fsr1l	equ	0xFE1
  4164                           indf2	equ	0xFDF
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _OpenSPI1 *****************
  4170 ;; Defined at:
  4171 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  sync_mode       1    wreg     unsigned char 
  4174 ;;  bus_mode        1   23[COMRAM] unsigned char 
  4175 ;;  smp_phase       1   24[COMRAM] unsigned char 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;  sync_mode       1   25[COMRAM] unsigned char 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;		None               void
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        3 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    4
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_SPIInit
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text17
  4202  0012F4                     __ptext17:
  4203                           	opt stack 0
  4204  0012F4                     _OpenSPI1:
  4205                           	opt stack 24
  4206                           
  4207                           ;incstack = 0
  4208                           ;OpenSPI1@sync_mode stored from wreg
  4209  0012F4  6E1A               	movwf	OpenSPI1@sync_mode,c
  4210  0012F6  0E3F               	movlw	63
  4211  0012F8  16C7               	andwf	4039,f,c	;volatile
  4212  0012FA  0E00               	movlw	0
  4213  0012FC  6EC6               	movwf	4038,c	;volatile
  4214  0012FE  501A               	movf	OpenSPI1@sync_mode,w,c
  4215  001300  12C6               	iorwf	4038,f,c	;volatile
  4216  001302  5019               	movf	OpenSPI1@smp_phase,w,c
  4217  001304  12C7               	iorwf	4039,f,c	;volatile
  4218  001306  D005               	goto	l2688
  4219  001308                     l601:
  4220  001308  8CC7               	bsf	4039,6,c	;volatile
  4221  00130A  D013               	goto	l2692
  4222  00130C                     l603:
  4223  00130C  8CC7               	bsf	4039,6,c	;volatile
  4224  00130E                     l604:
  4225  00130E  88C6               	bsf	4038,4,c	;volatile
  4226  001310  D010               	goto	l2692
  4227  001312                     l2688:
  4228  001312  5018               	movf	OpenSPI1@bus_mode,w,c
  4229                           
  4230                           ; Switch size 1, requested type "space"
  4231                           ; Number of cases is 3, Range of values is 0 to 3
  4232                           ; switch strategies available:
  4233                           ; Name         Instructions Cycles
  4234                           ; simple_byte           10     6 (average)
  4235                           ;	Chosen strategy is simple_byte
  4236  001314  0A00               	xorlw	0	; case 0
  4237  001316  B4D8               	btfsc	status,2,c
  4238  001318  D7F7               	goto	l601
  4239  00131A  0A02               	xorlw	2	; case 2
  4240  00131C  B4D8               	btfsc	status,2,c
  4241  00131E  D7F6               	goto	l603
  4242  001320  0A01               	xorlw	1	; case 3
  4243  001322  B4D8               	btfsc	status,2,c
  4244  001324  D7F4               	goto	l604
  4245  001326  D005               	goto	l2692
  4246  001328                     l607:
  4247  001328  8E97               	bsf	3991,7,c	;volatile
  4248  00132A                     l609:
  4249  00132A  8694               	bsf	3988,3,c	;volatile
  4250  00132C  D00A               	goto	l608
  4251  00132E                     l610:
  4252  00132E  9694               	bcf	3988,3,c	;volatile
  4253  001330  D008               	goto	l608
  4254  001332                     l2692:
  4255  001332  501A               	movf	OpenSPI1@sync_mode,w,c
  4256                           
  4257                           ; Switch size 1, requested type "space"
  4258                           ; Number of cases is 2, Range of values is 4 to 5
  4259                           ; switch strategies available:
  4260                           ; Name         Instructions Cycles
  4261                           ; simple_byte            7     4 (average)
  4262                           ;	Chosen strategy is simple_byte
  4263  001334  0A04               	xorlw	4	; case 4
  4264  001336  B4D8               	btfsc	status,2,c
  4265  001338  D7F7               	goto	l607
  4266  00133A  0A01               	xorlw	1	; case 5
  4267  00133C  B4D8               	btfsc	status,2,c
  4268  00133E  D7F5               	goto	l609
  4269  001340  D7F6               	goto	l610
  4270  001342                     l608:
  4271  001342  8894               	bsf	3988,4,c	;volatile
  4272  001344  9A94               	bcf	3988,5,c	;volatile
  4273  001346  8AC6               	bsf	4038,5,c	;volatile
  4274  001348  0012               	return		;funcret
  4275  00134A                     __end_of_OpenSPI1:
  4276                           	opt stack 0
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           postinc0	equ	0xFEE
  4285                           wreg	equ	0xFE8
  4286                           postdec1	equ	0xFE5
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _RTDInit *****************
  4294 ;; Defined at:
  4295 ;;		line 3 in file "ResolverToDigital.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, cstack
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;Total ram usage:        0 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		_Delay10TCYx
  4318 ;;		_Delay1KTCYx
  4319 ;;		_Delay1TCYx
  4320 ;; This function is called by:
  4321 ;;		_initialize
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text18
  4326  00162E                     __ptext18:
  4327                           	opt stack 0
  4328  00162E                     _RTDInit:
  4329                           	opt stack 24
  4330                           
  4331                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4332                           
  4333                           ;incstack = 0
  4334  00162E  6895               	setf	3989,c	;volatile
  4335                           
  4336                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4337  001630  6899               	setf	3993,c	;volatile
  4338                           
  4339                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4340  001632  9096               	bcf	3990,0,c	;volatile
  4341                           
  4342                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4343  001634  9296               	bcf	3990,1,c	;volatile
  4344                           
  4345                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4346  001636  9496               	bcf	3990,2,c	;volatile
  4347                           
  4348                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4349  001638  909A               	bcf	3994,0,c	;volatile
  4350                           
  4351                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4352  00163A  8A96               	bsf	3990,5,c	;volatile
  4353                           
  4354                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4355  00163C  8C96               	bsf	3990,6,c	;volatile
  4356                           
  4357                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4358  00163E  8E96               	bsf	3990,7,c	;volatile
  4359                           
  4360                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  4361  001640  9088               	bcf	3976,0,c	;volatile
  4362                           
  4363                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  4364  001642  0E0A               	movlw	10
  4365  001644  EC25  F00C         	call	_Delay10TCYx
  4366                           
  4367                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  4368  001648  8088               	bsf	3976,0,c	;volatile
  4369                           
  4370                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  4371  00164A  0E14               	movlw	20
  4372  00164C  EC1C  F00C         	call	_Delay1KTCYx
  4373                           
  4374                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  4375  001650  9084               	bcf	3972,0,c	;volatile
  4376                           
  4377                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  4378  001652  0E01               	movlw	1
  4379  001654  EC50  F00C         	call	_Delay1TCYx
  4380                           
  4381                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  4382  001658  8084               	bsf	3972,0,c	;volatile
  4383                           
  4384                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  4385  00165A  9484               	bcf	3972,2,c	;volatile
  4386  00165C  0012               	return		;funcret
  4387  00165E                     __end_of_RTDInit:
  4388                           	opt stack 0
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           prodh	equ	0xFF4
  4394                           prodl	equ	0xFF3
  4395                           intcon	equ	0xFF2
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           postdec1	equ	0xFE5
  4399                           fsr1l	equ	0xFE1
  4400                           indf2	equ	0xFDF
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _Delay1TCYx *****************
  4406 ;; Defined at:
  4407 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;  unit            1    wreg     unsigned char 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  unit            1   23[COMRAM] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		wreg
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:        1 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    4
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_RTDInit
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text19
  4436  0018A0                     __ptext19:
  4437                           	opt stack 0
  4438  0018A0                     _Delay1TCYx:
  4439                           	opt stack 24
  4440                           
  4441                           ;incstack = 0
  4442                           ;Delay1TCYx@unit stored from wreg
  4443  0018A0  6E18               	movwf	Delay1TCYx@unit,c
  4444  0018A2                     l855:
  4445  0018A2  F000               	nop	
  4446  0018A4  2E18               	decfsz	Delay1TCYx@unit,f,c
  4447  0018A6  D7FD               	goto	l855
  4448  0018A8  D000               	goto	l857
  4449  0018AA                     l857:
  4450  0018AA  0012               	return		;funcret
  4451  0018AC                     __end_of_Delay1TCYx:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           prodh	equ	0xFF4
  4458                           prodl	equ	0xFF3
  4459                           intcon	equ	0xFF2
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           postdec1	equ	0xFE5
  4463                           fsr1l	equ	0xFE1
  4464                           indf2	equ	0xFDF
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function _Delay1KTCYx *****************
  4470 ;; Defined at:
  4471 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  unit            1    wreg     unsigned char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  unit            1   23[COMRAM] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;		None               void
  4478 ;; Registers used:
  4479 ;;		wreg
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;Total ram usage:        1 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    4
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_RTDInit
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text20
  4500  001838                     __ptext20:
  4501                           	opt stack 0
  4502  001838                     _Delay1KTCYx:
  4503                           	opt stack 24
  4504                           
  4505                           ;incstack = 0
  4506                           ;Delay1KTCYx@unit stored from wreg
  4507  001838  6E18               	movwf	Delay1KTCYx@unit,c
  4508  00183A  0EFA               	movlw	250
  4509  00183C                     u3507:
  4510  00183C  F000               	nop	
  4511  00183E  2EE8               	decfsz	wreg,f,c
  4512  001840  D7FD               	goto	u3507
  4513  001842  2E18               	decfsz	Delay1KTCYx@unit,f,c
  4514  001844  D7FA               	goto	l2636
  4515  001846  D000               	goto	l850
  4516  001848                     l850:
  4517  001848  0012               	return		;funcret
  4518  00184A                     __end_of_Delay1KTCYx:
  4519                           	opt stack 0
  4520                           tblptru	equ	0xFF8
  4521                           tblptrh	equ	0xFF7
  4522                           tblptrl	equ	0xFF6
  4523                           tablat	equ	0xFF5
  4524                           prodh	equ	0xFF4
  4525                           prodl	equ	0xFF3
  4526                           intcon	equ	0xFF2
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           postdec1	equ	0xFE5
  4530                           fsr1l	equ	0xFE1
  4531                           indf2	equ	0xFDF
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function _Delay10TCYx *****************
  4537 ;; Defined at:
  4538 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  unit            1    wreg     unsigned char 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  unit            1   23[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;		None               void
  4545 ;; Registers used:
  4546 ;;		wreg
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;Total ram usage:        1 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    4
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_RTDInit
  4563 ;;		_ReadRTDpos
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text21
  4568  00184A                     __ptext21:
  4569                           	opt stack 0
  4570  00184A                     _Delay10TCYx:
  4571                           	opt stack 23
  4572                           
  4573                           ;incstack = 0
  4574                           ;Delay10TCYx@unit stored from wreg
  4575  00184A  6E18               	movwf	Delay10TCYx@unit,c
  4576  00184C  0E03               	movlw	3
  4577  00184E                     u3517:
  4578  00184E  2EE8               	decfsz	wreg,f,c
  4579  001850  D7FE               	goto	u3517
  4580  001852  F000               	nop	
  4581  001854  2E18               	decfsz	Delay10TCYx@unit,f,c
  4582  001856  D7FA               	goto	l2380
  4583  001858  D000               	goto	l843
  4584  00185A                     l843:
  4585  00185A  0012               	return		;funcret
  4586  00185C                     __end_of_Delay10TCYx:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           intcon	equ	0xFF2
  4595                           postinc0	equ	0xFEE
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _PIDInit *****************
  4605 ;; Defined at:
  4606 ;;		line 18 in file "PID.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;		None
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;		None
  4611 ;; Return value:  Size  Location     Type
  4612 ;;		None               void
  4613 ;; Registers used:
  4614 ;;		wreg, status,2
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;Total ram usage:        0 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    4
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_initialize
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text22
  4635  001444                     __ptext22:
  4636                           	opt stack 0
  4637  001444                     _PIDInit:
  4638                           	opt stack 25
  4639                           
  4640                           ;PID.c: 20: error = 0;
  4641                           
  4642                           ;incstack = 0
  4643  001444  0E00               	movlw	0
  4644  001446  0100               	movlb	0	; () banked
  4645  001448  6FA1               	movwf	_error& (0+255),b
  4646  00144A  0E00               	movlw	0
  4647  00144C  0100               	movlb	0	; () banked
  4648  00144E  6FA2               	movwf	(_error+1)& (0+255),b
  4649  001450  0E00               	movlw	0
  4650  001452  0100               	movlb	0	; () banked
  4651  001454  6FA3               	movwf	(_error+2)& (0+255),b
  4652                           
  4653                           ;PID.c: 21: prevErr = 0;
  4654  001456  0E00               	movlw	0
  4655  001458  0100               	movlb	0	; () banked
  4656  00145A  6FA7               	movwf	_prevErr& (0+255),b
  4657  00145C  0E00               	movlw	0
  4658  00145E  0100               	movlb	0	; () banked
  4659  001460  6FA8               	movwf	(_prevErr+1)& (0+255),b
  4660  001462  0E00               	movlw	0
  4661  001464  0100               	movlb	0	; () banked
  4662  001466  6FA9               	movwf	(_prevErr+2)& (0+255),b
  4663                           
  4664                           ;PID.c: 22: intErr = 0;
  4665  001468  0E00               	movlw	0
  4666  00146A  0100               	movlb	0	; () banked
  4667  00146C  6FA4               	movwf	_intErr& (0+255),b
  4668  00146E  0E00               	movlw	0
  4669  001470  0100               	movlb	0	; () banked
  4670  001472  6FA5               	movwf	(_intErr+1)& (0+255),b
  4671  001474  0E00               	movlw	0
  4672  001476  0100               	movlb	0	; () banked
  4673  001478  6FA6               	movwf	(_intErr+2)& (0+255),b
  4674                           
  4675                           ;PID.c: 24: T0CON = 0x04;
  4676  00147A  0E04               	movlw	4
  4677  00147C  6ED5               	movwf	4053,c	;volatile
  4678                           
  4679                           ;PID.c: 25: TMR0H = 0xDB;
  4680  00147E  0EDB               	movlw	219
  4681  001480  6ED7               	movwf	4055,c	;volatile
  4682                           
  4683                           ;PID.c: 26: TMR0L = 0x60;
  4684  001482  0E60               	movlw	96
  4685  001484  6ED6               	movwf	4054,c	;volatile
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;PID.c: 27: INTCON2bits.TMR0IP = 1;
  4689  001486  84F1               	bsf	intcon2,2,c	;volatile
  4690                           
  4691                           ; BSR set to: 0
  4692  001488  0012               	return		;funcret
  4693  00148A                     __end_of_PIDInit:
  4694                           	opt stack 0
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           intcon	equ	0xFF2
  4702                           intcon2	equ	0xFF1
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           fsr1l	equ	0xFE1
  4707                           indf2	equ	0xFDF
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function _MotorDriverInit *****************
  4713 ;; Defined at:
  4714 ;;		line 7 in file "MotorControl.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;		None               void
  4721 ;; Registers used:
  4722 ;;		wreg, status,2
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;Total ram usage:        0 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    4
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_initialize
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text23
  4743  00172C                     __ptext23:
  4744                           	opt stack 0
  4745  00172C                     _MotorDriverInit:
  4746                           	opt stack 25
  4747                           
  4748                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;incstack = 0
  4752  00172C  9098               	bcf	3992,0,c	;volatile
  4753                           
  4754                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  4755  00172E  9896               	bcf	3990,4,c	;volatile
  4756                           
  4757                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  4758  001730  9696               	bcf	3990,3,c	;volatile
  4759                           
  4760                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  4761  001732  9698               	bcf	3992,3,c	;volatile
  4762                           
  4763                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  4764  001734  8093               	bsf	3987,0,c	;volatile
  4765                           
  4766                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  4767  001736  9892               	bcf	3986,4,c	;volatile
  4768                           
  4769                           ;MotorControl.c: 18: CCPR3L = 0x00;
  4770  001738  0E00               	movlw	0
  4771  00173A  6EB8               	movwf	4024,c	;volatile
  4772                           
  4773                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  4774  00173C  98B7               	bcf	4023,4,c	;volatile
  4775                           
  4776                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  4777  00173E  9AB7               	bcf	4023,5,c	;volatile
  4778                           
  4779                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  4780  001740  0E4C               	movlw	76
  4781  001742  6EB7               	movwf	4023,c	;volatile
  4782                           
  4783                           ;MotorControl.c: 22: PR2 = 0xFF;
  4784  001744  68CB               	setf	4043,c	;volatile
  4785                           
  4786                           ;MotorControl.c: 23: T3CON = 0x00;
  4787  001746  0E00               	movlw	0
  4788  001748  6EB1               	movwf	4017,c	;volatile
  4789                           
  4790                           ;MotorControl.c: 24: T2CON = 0x04;
  4791  00174A  0E04               	movlw	4
  4792  00174C  6ECA               	movwf	4042,c	;volatile
  4793  00174E  0012               	return		;funcret
  4794  001750                     __end_of_MotorDriverInit:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           intcon2	equ	0xFF1
  4804                           postinc0	equ	0xFEE
  4805                           wreg	equ	0xFE8
  4806                           postdec1	equ	0xFE5
  4807                           fsr1l	equ	0xFE1
  4808                           indf2	equ	0xFDF
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _JoystickInit *****************
  4814 ;; Defined at:
  4815 ;;		line 6 in file "Joystick.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;Total ram usage:        0 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    4
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_initialize
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text24
  4844  00165E                     __ptext24:
  4845                           	opt stack 0
  4846  00165E                     _JoystickInit:
  4847                           	opt stack 25
  4848                           
  4849                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  4850                           
  4851                           ;incstack = 0
  4852  00165E  9492               	bcf	3986,2,c	;volatile
  4853                           
  4854                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  4855  001660  8293               	bsf	3987,1,c	;volatile
  4856                           
  4857                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  4858  001662  A281               	btfss	3969,1,c	;volatile
  4859  001664  D003               	goto	l31
  4860                           
  4861                           ;Joystick.c: 11: {
  4862                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  4863  001666  8480               	bsf	3968,2,c	;volatile
  4864                           
  4865                           ;Joystick.c: 13: JSEnableFlag = 1;
  4866  001668  0E01               	movlw	1
  4867  00166A  D004               	goto	L1
  4868  00166C                     l31:
  4869                           
  4870                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  4871  00166C  B281               	btfsc	3969,1,c	;volatile
  4872  00166E  D005               	goto	l2750
  4873                           
  4874                           ;Joystick.c: 16: {
  4875                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  4876  001670  9480               	bcf	3968,2,c	;volatile
  4877                           
  4878                           ;Joystick.c: 18: JSEnableFlag = 0;
  4879  001672  0E00               	movlw	0
  4880  001674                     L1:
  4881  001674  0100               	movlb	0	; () banked
  4882  001676  6FAD               	movwf	_JSEnableFlag& (0+255),b
  4883                           
  4884                           ; BSR set to: 0
  4885  001678  D000               	goto	l2750
  4886  00167A                     l2750:
  4887                           
  4888                           ;Joystick.c: 19: }
  4889                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  4890  00167A  80C2               	bsf	4034,0,c	;volatile
  4891                           
  4892                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  4893  00167C  50C2               	movf	4034,w,c	;volatile
  4894  00167E  0B01               	andlw	1
  4895  001680  6EC2               	movwf	4034,c	;volatile
  4896                           
  4897                           ;Joystick.c: 23: ADCON1 = 0x0D;
  4898  001682  0E0D               	movlw	13
  4899  001684  6EC1               	movwf	4033,c	;volatile
  4900                           
  4901                           ;Joystick.c: 24: ADCON2 = 0xB4;
  4902  001686  0EB4               	movlw	180
  4903  001688  6EC0               	movwf	4032,c	;volatile
  4904  00168A  0012               	return		;funcret
  4905  00168C                     __end_of_JoystickInit:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           intcon2	equ	0xFF1
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           fsr1l	equ	0xFE1
  4919                           indf2	equ	0xFDF
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _InitializeInterrupts *****************
  4925 ;; Defined at:
  4926 ;;		line 206 in file "RTDuC.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;		None               void
  4933 ;; Registers used:
  4934 ;;		None
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        0 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    4
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_initialize
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text25
  4955  001892                     __ptext25:
  4956                           	opt stack 0
  4957  001892                     _InitializeInterrupts:
  4958                           	opt stack 25
  4959                           
  4960                           ;RTDuC.c: 208: INTCONbits.GIE = 1;
  4961                           
  4962                           ;incstack = 0
  4963  001892  8EF2               	bsf	intcon,7,c	;volatile
  4964                           
  4965                           ;RTDuC.c: 209: INTCONbits.PEIE = 1;
  4966  001894  8CF2               	bsf	intcon,6,c	;volatile
  4967                           
  4968                           ;RTDuC.c: 211: INTCONbits.TMR0IE = 1;
  4969  001896  8AF2               	bsf	intcon,5,c	;volatile
  4970                           
  4971                           ;RTDuC.c: 212: T0CONbits.TMR0ON = 1;
  4972  001898  8ED5               	bsf	4053,7,c	;volatile
  4973                           
  4974                           ;RTDuC.c: 214: PIE2bits.OSCFIE = 1;
  4975  00189A  8EA0               	bsf	4000,7,c	;volatile
  4976                           
  4977                           ;RTDuC.c: 215: IPR2bits.OSCFIP = 1;
  4978  00189C  8EA2               	bsf	4002,7,c	;volatile
  4979  00189E  0012               	return		;funcret
  4980  0018A0                     __end_of_InitializeInterrupts:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           intcon2	equ	0xFF1
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           postdec1	equ	0xFE5
  4993                           fsr1l	equ	0xFE1
  4994                           indf2	equ	0xFDF
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _EEPROMInit *****************
  5000 ;; Defined at:
  5001 ;;		line 13 in file "EEPROM.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;		None               void
  5008 ;; Registers used:
  5009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;Total ram usage:        0 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    7
  5022 ;; This function calls:
  5023 ;;		_EEBootUp
  5024 ;; This function is called by:
  5025 ;;		_initialize
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text26
  5030  001824                     __ptext26:
  5031                           	opt stack 0
  5032  001824                     _EEPROMInit:
  5033                           	opt stack 22
  5034                           
  5035                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5036                           
  5037                           ;incstack = 0
  5038  001824  9EA6               	bcf	4006,7,c	;volatile
  5039                           
  5040                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5041  001826  9CA6               	bcf	4006,6,c	;volatile
  5042                           
  5043                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5044  001828  84A6               	bsf	4006,2,c	;volatile
  5045                           
  5046                           ;EEPROM.c: 19: EEBootUp();
  5047  00182A  ECA7  F008         	call	_EEBootUp	;wreg free
  5048                           
  5049                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5050  00182E  0E3D               	movlw	61
  5051  001830  6ED2               	movwf	4050,c	;volatile
  5052                           
  5053                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5054  001832  84A0               	bsf	4000,2,c	;volatile
  5055                           
  5056                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5057  001834  84A2               	bsf	4002,2,c	;volatile
  5058  001836  0012               	return		;funcret
  5059  001838                     __end_of_EEPROMInit:
  5060                           	opt stack 0
  5061                           tblptru	equ	0xFF8
  5062                           tblptrh	equ	0xFF7
  5063                           tblptrl	equ	0xFF6
  5064                           tablat	equ	0xFF5
  5065                           prodh	equ	0xFF4
  5066                           prodl	equ	0xFF3
  5067                           intcon	equ	0xFF2
  5068                           intcon2	equ	0xFF1
  5069                           postinc0	equ	0xFEE
  5070                           wreg	equ	0xFE8
  5071                           postdec1	equ	0xFE5
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _EEBootUp *****************
  5079 ;; Defined at:
  5080 ;;		line 27 in file "EEPROM.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;		None               void
  5087 ;; Registers used:
  5088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;Total ram usage:        2 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    6
  5101 ;; This function calls:
  5102 ;;		_EEReadChar
  5103 ;;		_EEReadDouble
  5104 ;; This function is called by:
  5105 ;;		_EEPROMInit
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text27
  5110  00114E                     __ptext27:
  5111                           	opt stack 0
  5112  00114E                     _EEBootUp:
  5113                           	opt stack 22
  5114                           
  5115                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  5116                           
  5117                           ;incstack = 0
  5118  00114E  0E16               	movlw	22
  5119  001150  ECDC  F00B         	call	_EEReadChar
  5120  001154  0900               	iorlw	0
  5121  001156  B4D8               	btfsc	status,2,c
  5122  001158  D039               	goto	l339
  5123                           
  5124                           ;EEPROM.c: 30: {
  5125                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  5126  00115A  0E00               	movlw	0
  5127  00115C  ECA5  F009         	call	_EEReadDouble
  5128  001160  C01E  F03F         	movff	?_EEReadDouble,_SetAngle
  5129  001164  C01F  F040         	movff	?_EEReadDouble+1,_SetAngle+1
  5130  001168  C020  F041         	movff	?_EEReadDouble+2,_SetAngle+2
  5131                           
  5132                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  5133  00116C  0E03               	movlw	3
  5134  00116E  ECA5  F009         	call	_EEReadDouble
  5135  001172  C01E  F09E         	movff	?_EEReadDouble,_Kp
  5136  001176  C01F  F09F         	movff	?_EEReadDouble+1,_Kp+1
  5137  00117A  C020  F0A0         	movff	?_EEReadDouble+2,_Kp+2
  5138                           
  5139                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  5140  00117E  0E06               	movlw	6
  5141  001180  ECA5  F009         	call	_EEReadDouble
  5142  001184  C01E  F09B         	movff	?_EEReadDouble,_Ki
  5143  001188  C01F  F09C         	movff	?_EEReadDouble+1,_Ki+1
  5144  00118C  C020  F09D         	movff	?_EEReadDouble+2,_Ki+2
  5145                           
  5146                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  5147  001190  0E09               	movlw	9
  5148  001192  ECA5  F009         	call	_EEReadDouble
  5149  001196  C01E  F098         	movff	?_EEReadDouble,_Kd
  5150  00119A  C01F  F099         	movff	?_EEReadDouble+1,_Kd+1
  5151  00119E  C020  F09A         	movff	?_EEReadDouble+2,_Kd+2
  5152                           
  5153                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  5154  0011A2  0E15               	movlw	21
  5155  0011A4  ECDC  F00B         	call	_EEReadChar
  5156  0011A8  0100               	movlb	0	; () banked
  5157  0011AA  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  5161  0011AC  0100               	movlb	0	; () banked
  5162  0011AE  51AE               	movf	_PIDEnableFlag& (0+255),w,b
  5163  0011B0  6E23               	movwf	??_EEBootUp& (0+255),c
  5164  0011B2  6A24               	clrf	(??_EEBootUp+1)& (0+255),c
  5165  0011B4  0E01               	movlw	1
  5166  0011B6  1223               	iorwf	??_EEBootUp,f,c
  5167  0011B8  0E00               	movlw	0
  5168  0011BA  1224               	iorwf	??_EEBootUp+1,f,c
  5169  0011BC  0423               	decf	??_EEBootUp,w,c
  5170  0011BE  1024               	iorwf	??_EEBootUp+1,w,c
  5171  0011C0  A4D8               	btfss	status,2,c
  5172  0011C2  D004               	goto	l339
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;EEPROM.c: 37: {
  5176                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  5177  0011C4  0E03               	movlw	3
  5178  0011C6  0100               	movlb	0	; () banked
  5179  0011C8  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  5180                           
  5181                           ; BSR set to: 0
  5182  0011CA  D000               	goto	l339
  5183  0011CC                     l339:
  5184  0011CC  0012               	return		;funcret
  5185  0011CE                     __end_of_EEBootUp:
  5186                           	opt stack 0
  5187                           tblptru	equ	0xFF8
  5188                           tblptrh	equ	0xFF7
  5189                           tblptrl	equ	0xFF6
  5190                           tablat	equ	0xFF5
  5191                           prodh	equ	0xFF4
  5192                           prodl	equ	0xFF3
  5193                           intcon	equ	0xFF2
  5194                           intcon2	equ	0xFF1
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           postdec1	equ	0xFE5
  5198                           fsr1l	equ	0xFE1
  5199                           indf2	equ	0xFDF
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _EEReadDouble *****************
  5205 ;; Defined at:
  5206 ;;		line 100 in file "EEPROM.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  location        1    wreg     unsigned char 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  location        1   32[COMRAM] unsigned char 
  5211 ;;  x               1   33[COMRAM] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  3   29[COMRAM] unsigned char 
  5214 ;; Registers used:
  5215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5221 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;Total ram usage:        5 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    5
  5228 ;; This function calls:
  5229 ;;		_Busy_eep
  5230 ;;		_EEReassembleDouble
  5231 ;;		_Read_b_eep
  5232 ;; This function is called by:
  5233 ;;		_EEBootUp
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text28
  5238  00134A                     __ptext28:
  5239                           	opt stack 0
  5240  00134A                     _EEReadDouble:
  5241                           	opt stack 22
  5242                           
  5243                           ;incstack = 0
  5244                           ;EEReadDouble@location stored from wreg
  5245  00134A  6E21               	movwf	EEReadDouble@location,c
  5246                           
  5247                           ;EEPROM.c: 102: unsigned char x;
  5248                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  5249  00134C  50F2               	movf	intcon,w,c	;volatile
  5250  00134E  0B3F               	andlw	63
  5251  001350  6EF2               	movwf	intcon,c	;volatile
  5252                           
  5253                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  5254  001352  0E00               	movlw	0
  5255  001354  6E22               	movwf	EEReadDouble@x,c
  5256  001356                     l2398:
  5257  001356  0E02               	movlw	2
  5258  001358  6422               	cpfsgt	EEReadDouble@x,c
  5259  00135A  D001               	goto	l2402
  5260  00135C  D014               	goto	l2410
  5261  00135E                     l2402:
  5262                           
  5263                           ;EEPROM.c: 107: {
  5264                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  5265  00135E  5022               	movf	EEReadDouble@x,w,c
  5266  001360  0D01               	mullw	1
  5267  001362  0E3C               	movlw	low _DDouble
  5268  001364  24F3               	addwf	prodl,w,c
  5269  001366  6ED9               	movwf	fsr2l,c
  5270  001368  0E00               	movlw	high _DDouble
  5271  00136A  20F4               	addwfc	prodh,w,c
  5272  00136C  6EDA               	movwf	fsr2h,c
  5273  00136E  5021               	movf	EEReadDouble@location,w,c
  5274  001370  2422               	addwf	EEReadDouble@x,w,c
  5275  001372  6E18               	movwf	Read_b_eep@badd,c
  5276  001374  6A19               	clrf	Read_b_eep@badd+1,c
  5277  001376  3619               	rlcf	Read_b_eep@badd+1,f,c
  5278  001378  ECF9  F00B         	call	_Read_b_eep	;wreg free
  5279  00137C  6EDF               	movwf	indf2,c
  5280                           
  5281                           ;EEPROM.c: 109: Busy_eep();
  5282  00137E  EC5B  F00C         	call	_Busy_eep	;wreg free
  5283  001382  2A22               	incf	EEReadDouble@x,f,c
  5284  001384  D7E8               	goto	l2398
  5285  001386                     l2410:
  5286                           
  5287                           ;EEPROM.c: 110: }
  5288                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  5289  001386  50F2               	movf	intcon,w,c	;volatile
  5290  001388  09C0               	iorlw	192
  5291  00138A  6EF2               	movwf	intcon,c	;volatile
  5292                           
  5293                           ;EEPROM.c: 114: return EEReassembleDouble();
  5294  00138C  EC45  F00A         	call	_EEReassembleDouble	;wreg free
  5295  001390  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5296  001394  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5297  001398  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5298  00139C  D000               	goto	l355
  5299  00139E                     l355:
  5300  00139E  0012               	return		;funcret
  5301  0013A0                     __end_of_EEReadDouble:
  5302                           	opt stack 0
  5303                           tblptru	equ	0xFF8
  5304                           tblptrh	equ	0xFF7
  5305                           tblptrl	equ	0xFF6
  5306                           tablat	equ	0xFF5
  5307                           prodh	equ	0xFF4
  5308                           prodl	equ	0xFF3
  5309                           intcon	equ	0xFF2
  5310                           intcon2	equ	0xFF1
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           postdec1	equ	0xFE5
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _EEReassembleDouble *****************
  5321 ;; Defined at:
  5322 ;;		line 62 in file "EEPROM.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  dub             3   26[COMRAM] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  3   23[COMRAM] unsigned char 
  5329 ;; Registers used:
  5330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:        6 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    4
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_EEReadDouble
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text29
  5351  00148A                     __ptext29:
  5352                           	opt stack 0
  5353  00148A                     _EEReassembleDouble:
  5354                           	opt stack 22
  5355                           
  5356                           ;EEPROM.c: 64: double dub;
  5357                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  5358                           
  5359                           ;incstack = 0
  5360  00148A  0E1B               	movlw	low EEReassembleDouble@dub
  5361  00148C  6E42               	movwf	_DoublePtr,c
  5362  00148E  0E00               	movlw	high EEReassembleDouble@dub
  5363  001490  6E43               	movwf	_DoublePtr+1,c
  5364                           
  5365                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  5366  001492  C042  FFD9         	movff	_DoublePtr,fsr2l
  5367  001496  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  5368  00149A  C03C  FFDF         	movff	_DDouble,indf2
  5369                           
  5370                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  5371  00149E  EE20 F001          	lfsr	2,1
  5372  0014A2  5042               	movf	_DoublePtr,w,c
  5373  0014A4  26D9               	addwf	fsr2l,f,c
  5374  0014A6  5043               	movf	_DoublePtr+1,w,c
  5375  0014A8  22DA               	addwfc	fsr2h,f,c
  5376  0014AA  C03D  FFDF         	movff	_DDouble+1,indf2
  5377                           
  5378                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  5379  0014AE  EE20 F002          	lfsr	2,2
  5380  0014B2  5042               	movf	_DoublePtr,w,c
  5381  0014B4  26D9               	addwf	fsr2l,f,c
  5382  0014B6  5043               	movf	_DoublePtr+1,w,c
  5383  0014B8  22DA               	addwfc	fsr2h,f,c
  5384  0014BA  C03E  FFDF         	movff	_DDouble+2,indf2
  5385                           
  5386                           ;EEPROM.c: 69: return dub;
  5387  0014BE  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5388  0014C2  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5389  0014C6  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5390  0014CA  D000               	goto	l345
  5391  0014CC                     l345:
  5392  0014CC  0012               	return		;funcret
  5393  0014CE                     __end_of_EEReassembleDouble:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           intcon2	equ	0xFF1
  5403                           postinc0	equ	0xFEE
  5404                           wreg	equ	0xFE8
  5405                           postdec1	equ	0xFE5
  5406                           fsr1l	equ	0xFE1
  5407                           indf2	equ	0xFDF
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function _Busy_eep *****************
  5413 ;; Defined at:
  5414 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;		None               void
  5421 ;; Registers used:
  5422 ;;		None
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        0 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    4
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_EEReadDouble
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text30
  5443  0018B6                     __ptext30:
  5444                           	opt stack 0
  5445  0018B6                     _Busy_eep:
  5446                           	opt stack 22
  5447                           
  5448                           ;incstack = 0
  5449  0018B6  D000               	goto	l551
  5450  0018B8                     l551:
  5451  0018B8  B2A6               	btfsc	4006,1,c	;volatile
  5452  0018BA  D7FE               	goto	l551
  5453  0018BC  0012               	return		;funcret
  5454  0018BE                     __end_of_Busy_eep:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           intcon2	equ	0xFF1
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           fsr2h	equ	0xFDA
  5470                           fsr2l	equ	0xFD9
  5471                           status	equ	0xFD8
  5472                           
  5473 ;; *************** function _EEReadChar *****************
  5474 ;; Defined at:
  5475 ;;		line 136 in file "EEPROM.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  location        1    wreg     unsigned char 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  location        1   25[COMRAM] unsigned char 
  5480 ;;  ch              1   26[COMRAM] unsigned char 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      unsigned char 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, status,0, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;Total ram usage:        2 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    5
  5497 ;; This function calls:
  5498 ;;		_Read_b_eep
  5499 ;; This function is called by:
  5500 ;;		_EEBootUp
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text31
  5505  0017B8                     __ptext31:
  5506                           	opt stack 0
  5507  0017B8                     _EEReadChar:
  5508                           	opt stack 22
  5509                           
  5510                           ;incstack = 0
  5511                           ;EEReadChar@location stored from wreg
  5512  0017B8  6E1A               	movwf	EEReadChar@location,c
  5513                           
  5514                           ;EEPROM.c: 138: unsigned char ch;
  5515                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  5516  0017BA  50F2               	movf	intcon,w,c	;volatile
  5517  0017BC  0B3F               	andlw	63
  5518  0017BE  6EF2               	movwf	intcon,c	;volatile
  5519                           
  5520                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  5521  0017C0  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  5522  0017C4  6A19               	clrf	Read_b_eep@badd+1,c
  5523  0017C6  ECF9  F00B         	call	_Read_b_eep	;wreg free
  5524  0017CA  6E1B               	movwf	EEReadChar@ch,c
  5525                           
  5526                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  5527  0017CC  50F2               	movf	intcon,w,c	;volatile
  5528  0017CE  09C0               	iorlw	192
  5529  0017D0  6EF2               	movwf	intcon,c	;volatile
  5530                           
  5531                           ;EEPROM.c: 146: return ch;
  5532  0017D2  501B               	movf	EEReadChar@ch,w,c
  5533  0017D4  D000               	goto	l361
  5534  0017D6                     l361:
  5535  0017D6  0012               	return		;funcret
  5536  0017D8                     __end_of_EEReadChar:
  5537                           	opt stack 0
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           intcon2	equ	0xFF1
  5546                           postinc0	equ	0xFEE
  5547                           wreg	equ	0xFE8
  5548                           postdec1	equ	0xFE5
  5549                           fsr1l	equ	0xFE1
  5550                           indf2	equ	0xFDF
  5551                           fsr2h	equ	0xFDA
  5552                           fsr2l	equ	0xFD9
  5553                           status	equ	0xFD8
  5554                           
  5555 ;; *************** function _Read_b_eep *****************
  5556 ;; Defined at:
  5557 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  badd            2   23[COMRAM] unsigned int 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;		None
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  1    wreg      unsigned char 
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5571 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;Total ram usage:        2 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    4
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_EEReadDouble
  5582 ;;		_EEReadChar
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text32
  5587  0017F2                     __ptext32:
  5588                           	opt stack 0
  5589  0017F2                     _Read_b_eep:
  5590                           	opt stack 22
  5591                           
  5592                           ;incstack = 0
  5593  0017F2  5019               	movf	Read_b_eep@badd+1,w,c
  5594  0017F4  0B03               	andlw	3
  5595  0017F6  6EAA               	movwf	4010,c	;volatile
  5596  0017F8  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  5597  0017FC  9CA6               	bcf	4006,6,c	;volatile
  5598  0017FE  9EA6               	bcf	4006,7,c	;volatile
  5599  001800  80A6               	bsf	4006,0,c	;volatile
  5600  001802  F000               	nop	
  5601  001804  F000               	nop	
  5602  001806  50A8               	movf	4008,w,c	;volatile
  5603  001808  D000               	goto	l567
  5604  00180A                     l567:
  5605  00180A  0012               	return		;funcret
  5606  00180C                     __end_of_Read_b_eep:
  5607                           	opt stack 0
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           intcon	equ	0xFF2
  5615                           intcon2	equ	0xFF1
  5616                           postinc0	equ	0xFEE
  5617                           wreg	equ	0xFE8
  5618                           postdec1	equ	0xFE5
  5619                           fsr1l	equ	0xFE1
  5620                           indf2	equ	0xFDF
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _SendSPI1 *****************
  5626 ;; Defined at:
  5627 ;;		line 35 in file "SPISlave.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  data            1    wreg     unsigned char 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  data            1   24[COMRAM] unsigned char 
  5632 ;;  temp            1   23[COMRAM] unsigned char 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;		None               void
  5635 ;; Registers used:
  5636 ;;		wreg
  5637 ;; Tracked objects:
  5638 ;;		On entry : 0/0
  5639 ;;		On exit  : 0/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;Total ram usage:        2 bytes
  5647 ;; Hardware stack levels used:    1
  5648 ;; Hardware stack levels required when called:    4
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_main
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           	psect	text33
  5657  00180C                     __ptext33:
  5658                           	opt stack 0
  5659  00180C                     _SendSPI1:
  5660                           	opt stack 26
  5661                           
  5662                           ;incstack = 0
  5663                           ;SendSPI1@data stored from wreg
  5664  00180C  6E19               	movwf	SendSPI1@data,c
  5665                           
  5666                           ;SPISlave.c: 37: SSP1BUF = data;
  5667  00180E  C019  FFC9         	movff	SendSPI1@data,4041	;volatile
  5668                           
  5669                           ;SPISlave.c: 38: unsigned char temp;
  5670                           ;SPISlave.c: 39: PIR1bits.SSP1IF = 0;
  5671  001812  969E               	bcf	3998,3,c	;volatile
  5672                           
  5673                           ;SPISlave.c: 40: temp = SSP1BUF;
  5674  001814  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  5675                           
  5676                           ;SPISlave.c: 41: while (!PIR1bits.SSP1IF);
  5677  001818  D000               	goto	l253
  5678  00181A                     l253:
  5679  00181A  A69E               	btfss	3998,3,c	;volatile
  5680  00181C  D7FE               	goto	l253
  5681                           
  5682                           ;SPISlave.c: 42: SSP1CON1bits.SSPOV1 = 0;
  5683  00181E  9CC6               	bcf	4038,6,c	;volatile
  5684                           
  5685                           ;SPISlave.c: 43: PIR1bits.SSP1IF = 0;
  5686  001820  969E               	bcf	3998,3,c	;volatile
  5687  001822  0012               	return		;funcret
  5688  001824                     __end_of_SendSPI1:
  5689                           	opt stack 0
  5690                           tblptru	equ	0xFF8
  5691                           tblptrh	equ	0xFF7
  5692                           tblptrl	equ	0xFF6
  5693                           tablat	equ	0xFF5
  5694                           prodh	equ	0xFF4
  5695                           prodl	equ	0xFF3
  5696                           intcon	equ	0xFF2
  5697                           intcon2	equ	0xFF1
  5698                           postinc0	equ	0xFEE
  5699                           wreg	equ	0xFE8
  5700                           postdec1	equ	0xFE5
  5701                           fsr1l	equ	0xFE1
  5702                           indf2	equ	0xFDF
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _SPIReassembleDouble *****************
  5708 ;; Defined at:
  5709 ;;		line 71 in file "SPISlave.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  dub             3   26[COMRAM] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  3   23[COMRAM] unsigned char 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5723 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;Total ram usage:        6 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    4
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text34
  5738  0014CE                     __ptext34:
  5739                           	opt stack 0
  5740  0014CE                     _SPIReassembleDouble:
  5741                           	opt stack 26
  5742                           
  5743                           ;SPISlave.c: 73: double dub;
  5744                           ;SPISlave.c: 74: DoublePtr = (unsigned char*) &dub;
  5745                           
  5746                           ;incstack = 0
  5747  0014CE  0E1B               	movlw	low SPIReassembleDouble@dub
  5748  0014D0  6E42               	movwf	_DoublePtr,c
  5749  0014D2  0E00               	movlw	high SPIReassembleDouble@dub
  5750  0014D4  6E43               	movwf	_DoublePtr+1,c
  5751                           
  5752                           ;SPISlave.c: 75: DoublePtr[0] = DoubleSPIS[0];
  5753  0014D6  C042  FFD9         	movff	_DoublePtr,fsr2l
  5754  0014DA  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  5755  0014DE  C038  FFDF         	movff	_DoubleSPIS,indf2
  5756                           
  5757                           ;SPISlave.c: 76: DoublePtr[1] = DoubleSPIS[1];
  5758  0014E2  EE20 F001          	lfsr	2,1
  5759  0014E6  5042               	movf	_DoublePtr,w,c
  5760  0014E8  26D9               	addwf	fsr2l,f,c
  5761  0014EA  5043               	movf	_DoublePtr+1,w,c
  5762  0014EC  22DA               	addwfc	fsr2h,f,c
  5763  0014EE  C039  FFDF         	movff	_DoubleSPIS+1,indf2
  5764                           
  5765                           ;SPISlave.c: 77: DoublePtr[2] = DoubleSPIS[2];
  5766  0014F2  EE20 F002          	lfsr	2,2
  5767  0014F6  5042               	movf	_DoublePtr,w,c
  5768  0014F8  26D9               	addwf	fsr2l,f,c
  5769  0014FA  5043               	movf	_DoublePtr+1,w,c
  5770  0014FC  22DA               	addwfc	fsr2h,f,c
  5771  0014FE  C03A  FFDF         	movff	_DoubleSPIS+2,indf2
  5772                           
  5773                           ;SPISlave.c: 79: return dub;
  5774  001502  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  5775  001506  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  5776  00150A  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  5777  00150E  D000               	goto	l273
  5778  001510                     l273:
  5779  001510  0012               	return		;funcret
  5780  001512                     __end_of_SPIReassembleDouble:
  5781                           	opt stack 0
  5782                           tblptru	equ	0xFF8
  5783                           tblptrh	equ	0xFF7
  5784                           tblptrl	equ	0xFF6
  5785                           tablat	equ	0xFF5
  5786                           prodh	equ	0xFF4
  5787                           prodl	equ	0xFF3
  5788                           intcon	equ	0xFF2
  5789                           intcon2	equ	0xFF1
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           postdec1	equ	0xFE5
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _SPIDisassembleDouble *****************
  5800 ;; Defined at:
  5801 ;;		line 54 in file "SPISlave.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  dub             3   25[COMRAM] unsigned char 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;		None
  5806 ;; Return value:  Size  Location     Type
  5807 ;;		None               void
  5808 ;; Registers used:
  5809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:        3 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    5
  5822 ;; This function calls:
  5823 ;;		_GenerateChecksum
  5824 ;; This function is called by:
  5825 ;;		_main
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	text35
  5830  001552                     __ptext35:
  5831                           	opt stack 0
  5832  001552                     _SPIDisassembleDouble:
  5833                           	opt stack 25
  5834                           
  5835                           ;SPISlave.c: 56: DoublePtr = (unsigned char*) &dub;
  5836                           
  5837                           ;incstack = 0
  5838  001552  0E1A               	movlw	low SPIDisassembleDouble@dub
  5839  001554  6E42               	movwf	_DoublePtr,c
  5840  001556  0E00               	movlw	high SPIDisassembleDouble@dub
  5841  001558  6E43               	movwf	_DoublePtr+1,c
  5842                           
  5843                           ;SPISlave.c: 57: DoubleSPIS[0] = DoublePtr[0];
  5844  00155A  C042  FFD9         	movff	_DoublePtr,fsr2l
  5845  00155E  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  5846  001562  50DF               	movf	indf2,w,c
  5847  001564  6E38               	movwf	_DoubleSPIS,c
  5848                           
  5849                           ;SPISlave.c: 58: DoubleSPIS[1] = DoublePtr[1];
  5850  001566  EE20 F001          	lfsr	2,1
  5851  00156A  5042               	movf	_DoublePtr,w,c
  5852  00156C  26D9               	addwf	fsr2l,f,c
  5853  00156E  5043               	movf	_DoublePtr+1,w,c
  5854  001570  22DA               	addwfc	fsr2h,f,c
  5855  001572  50DF               	movf	indf2,w,c
  5856  001574  6E39               	movwf	_DoubleSPIS+1,c
  5857                           
  5858                           ;SPISlave.c: 59: DoubleSPIS[2] = DoublePtr[2];
  5859  001576  EE20 F002          	lfsr	2,2
  5860  00157A  5042               	movf	_DoublePtr,w,c
  5861  00157C  26D9               	addwf	fsr2l,f,c
  5862  00157E  5043               	movf	_DoublePtr+1,w,c
  5863  001580  22DA               	addwfc	fsr2h,f,c
  5864  001582  50DF               	movf	indf2,w,c
  5865  001584  6E3A               	movwf	_DoubleSPIS+2,c
  5866                           
  5867                           ;SPISlave.c: 60: DoubleSPIS[3] = GenerateChecksum();
  5868  001586  ECFE  F00A         	call	_GenerateChecksum	;wreg free
  5869  00158A  6E3B               	movwf	_DoubleSPIS+3,c
  5870  00158C  0012               	return		;funcret
  5871  00158E                     __end_of_SPIDisassembleDouble:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           intcon2	equ	0xFF1
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           postdec1	equ	0xFE5
  5884                           fsr1l	equ	0xFE1
  5885                           indf2	equ	0xFDF
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _GenerateChecksum *****************
  5891 ;; Defined at:
  5892 ;;		line 63 in file "SPISlave.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;		None
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  y               1   24[COMRAM] unsigned char 
  5897 ;;  sum             1   23[COMRAM] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      unsigned char 
  5900 ;; Registers used:
  5901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;Total ram usage:        2 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    4
  5914 ;; This function calls:
  5915 ;;		Nothing
  5916 ;; This function is called by:
  5917 ;;		_SPIDisassembleDouble
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           	psect	text36
  5922  0015FC                     __ptext36:
  5923                           	opt stack 0
  5924  0015FC                     _GenerateChecksum:
  5925                           	opt stack 25
  5926                           
  5927                           ;SPISlave.c: 65: unsigned char y, sum = 0;
  5928                           
  5929                           ;incstack = 0
  5930  0015FC  0E00               	movlw	0
  5931  0015FE  6E18               	movwf	GenerateChecksum@sum,c
  5932                           
  5933                           ;SPISlave.c: 66: for (y = 0; y != 3; y++)
  5934  001600  0E00               	movlw	0
  5935  001602  6E19               	movwf	GenerateChecksum@y,c
  5936  001604                     l2792:
  5937  001604  0E03               	movlw	3
  5938  001606  1819               	xorwf	GenerateChecksum@y,w,c
  5939  001608  B4D8               	btfsc	status,2,c
  5940  00160A  D00E               	goto	l2802
  5941  00160C  D001               	goto	l2796
  5942  00160E  D00C               	goto	l2802
  5943  001610                     l2796:
  5944                           
  5945                           ;SPISlave.c: 67: sum += DoubleSPIS[y];
  5946  001610  5019               	movf	GenerateChecksum@y,w,c
  5947  001612  0D01               	mullw	1
  5948  001614  0E38               	movlw	low _DoubleSPIS
  5949  001616  24F3               	addwf	prodl,w,c
  5950  001618  6ED9               	movwf	fsr2l,c
  5951  00161A  0E00               	movlw	high _DoubleSPIS
  5952  00161C  20F4               	addwfc	prodh,w,c
  5953  00161E  6EDA               	movwf	fsr2h,c
  5954  001620  50DF               	movf	indf2,w,c
  5955  001622  2618               	addwf	GenerateChecksum@sum,f,c
  5956  001624  2A19               	incf	GenerateChecksum@y,f,c
  5957  001626  D7EE               	goto	l2792
  5958  001628                     l2802:
  5959                           
  5960                           ;SPISlave.c: 68: return sum;
  5961  001628  5018               	movf	GenerateChecksum@sum,w,c
  5962  00162A  D000               	goto	l270
  5963  00162C                     l270:
  5964  00162C  0012               	return		;funcret
  5965  00162E                     __end_of_GenerateChecksum:
  5966                           	opt stack 0
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           intcon	equ	0xFF2
  5974                           intcon2	equ	0xFF1
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           postdec1	equ	0xFE5
  5978                           fsr1l	equ	0xFE1
  5979                           indf2	equ	0xFDF
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _ReceiveSPI1 *****************
  5985 ;; Defined at:
  5986 ;;		line 46 in file "SPISlave.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;		None
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;		None
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      unsigned char 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;Total ram usage:        0 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    4
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_main
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text37
  6015  00185C                     __ptext37:
  6016                           	opt stack 0
  6017  00185C                     _ReceiveSPI1:
  6018                           	opt stack 26
  6019                           
  6020                           ;SPISlave.c: 48: SSP1BUF = 0x00;
  6021                           
  6022                           ;incstack = 0
  6023  00185C  0E00               	movlw	0
  6024  00185E  6EC9               	movwf	4041,c	;volatile
  6025                           
  6026                           ;SPISlave.c: 49: while (!PIR1bits.SSP1IF);
  6027  001860  D000               	goto	l259
  6028  001862                     l259:
  6029  001862  A69E               	btfss	3998,3,c	;volatile
  6030  001864  D7FE               	goto	l259
  6031                           
  6032                           ;SPISlave.c: 50: PIR1bits.SSP1IF = 0;
  6033  001866  969E               	bcf	3998,3,c	;volatile
  6034                           
  6035                           ;SPISlave.c: 51: return SSP1BUF;
  6036  001868  50C9               	movf	4041,w,c	;volatile
  6037  00186A  D000               	goto	l262
  6038  00186C                     l262:
  6039  00186C  0012               	return		;funcret
  6040  00186E                     __end_of_ReceiveSPI1:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1l	equ	0xFE1
  6054                           indf2	equ	0xFDF
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _ImplementJSMotion *****************
  6060 ;; Defined at:
  6061 ;;		line 58 in file "MotorControl.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  JoystickValu    2   37[BANK0 ] int 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  CCPinput        2   41[BANK0 ] unsigned int 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;		None               void
  6068 ;; Registers used:
  6069 ;;		wreg, status,2, status,0, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;Total ram usage:        6 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    5
  6082 ;; This function calls:
  6083 ;;		_abs
  6084 ;; This function is called by:
  6085 ;;		_main
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           	psect	text38
  6090  000860                     __ptext38:
  6091                           	opt stack 0
  6092  000860                     _ImplementJSMotion:
  6093                           	opt stack 25
  6094                           
  6095                           ;MotorControl.c: 60: unsigned int CCPinput;
  6096                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  6097                           
  6098                           ;incstack = 0
  6099  000860  5046               	movf	_DeadbandLow,w,c
  6100  000862  0100               	movlb	0	; () banked
  6101  000864  5D85               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6102  000866  0100               	movlb	0	; () banked
  6103  000868  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6104  00086A  0A80               	xorlw	128
  6105  00086C  0100               	movlb	0	; () banked
  6106  00086E  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6107  000870  5047               	movf	_DeadbandLow+1,w,c
  6108  000872  0A80               	xorlw	128
  6109  000874  0100               	movlb	0	; () banked
  6110  000876  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6111  000878  B0D8               	btfsc	status,0,c
  6112  00087A  D002               	goto	l3478
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;MotorControl.c: 62: {
  6116                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  6117  00087C  8EB7               	bsf	4023,7,c	;volatile
  6118  00087E  D00F               	goto	l3482
  6119  000880                     l3478:
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  6123  000880  0100               	movlb	0	; () banked
  6124  000882  5185               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6125  000884  5C44               	subwf	_DeadbandHigh,w,c
  6126  000886  5045               	movf	_DeadbandHigh+1,w,c
  6127  000888  0A80               	xorlw	128
  6128  00088A  0100               	movlb	0	; () banked
  6129  00088C  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6130  00088E  0100               	movlb	0	; () banked
  6131  000890  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6132  000892  0A80               	xorlw	128
  6133  000894  0100               	movlb	0	; () banked
  6134  000896  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6135  000898  B0D8               	btfsc	status,0,c
  6136  00089A  D005               	goto	l3484
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;MotorControl.c: 67: {
  6140                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  6141  00089C  9EB7               	bcf	4023,7,c	;volatile
  6142  00089E                     l3482:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  6146  00089E  0E00               	movlw	0
  6147  0008A0  0100               	movlb	0	; () banked
  6148  0008A2  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  6149                           
  6150                           ;MotorControl.c: 70: }
  6151  0008A4  D02A               	goto	l3496
  6152  0008A6                     l3484:
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  6156  0008A6  0100               	movlb	0	; () banked
  6157  0008A8  5185               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6158  0008AA  5C44               	subwf	_DeadbandHigh,w,c
  6159  0008AC  5045               	movf	_DeadbandHigh+1,w,c
  6160  0008AE  0A80               	xorlw	128
  6161  0008B0  0100               	movlb	0	; () banked
  6162  0008B2  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6163  0008B4  0100               	movlb	0	; () banked
  6164  0008B6  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6165  0008B8  0A80               	xorlw	128
  6166  0008BA  0100               	movlb	0	; () banked
  6167  0008BC  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6168  0008BE  A0D8               	btfss	status,0,c
  6169  0008C0  D01C               	goto	l3496
  6170                           
  6171                           ; BSR set to: 0
  6172  0008C2  5046               	movf	_DeadbandLow,w,c
  6173  0008C4  0100               	movlb	0	; () banked
  6174  0008C6  5D85               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6175  0008C8  0100               	movlb	0	; () banked
  6176  0008CA  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6177  0008CC  0A80               	xorlw	128
  6178  0008CE  0100               	movlb	0	; () banked
  6179  0008D0  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6180  0008D2  5047               	movf	_DeadbandLow+1,w,c
  6181  0008D4  0A80               	xorlw	128
  6182  0008D6  0100               	movlb	0	; () banked
  6183  0008D8  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6184  0008DA  A0D8               	btfss	status,0,c
  6185  0008DC  D00E               	goto	l3496
  6186                           
  6187                           ; BSR set to: 0
  6188  0008DE  0100               	movlb	0	; () banked
  6189  0008E0  51AE               	movf	_PIDEnableFlag& (0+255),w,b
  6190  0008E2  A4D8               	btfss	status,2,c
  6191  0008E4  D00A               	goto	l3496
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;MotorControl.c: 72: {
  6195                           ;MotorControl.c: 73: JoystickValue = 0;
  6196  0008E6  0E00               	movlw	0
  6197  0008E8  0100               	movlb	0	; () banked
  6198  0008EA  6F86               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  6199  0008EC  0E00               	movlw	0
  6200  0008EE  6F85               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  6201                           
  6202                           ;MotorControl.c: 74: CCPR3L = 0x00;
  6203  0008F0  0E00               	movlw	0
  6204  0008F2  6EB8               	movwf	4024,c	;volatile
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  6208  0008F4  9AB7               	bcf	4023,5,c	;volatile
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  6212  0008F6  98B7               	bcf	4023,4,c	;volatile
  6213                           
  6214                           ; BSR set to: 0
  6215                           
  6216                           ; BSR set to: 0
  6217  0008F8  D000               	goto	l3496
  6218  0008FA                     l3496:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;MotorControl.c: 77: }
  6222                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  6223  0008FA  5046               	movf	_DeadbandLow,w,c
  6224  0008FC  0100               	movlb	0	; () banked
  6225  0008FE  5D85               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6226  000900  0100               	movlb	0	; () banked
  6227  000902  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6228  000904  0A80               	xorlw	128
  6229  000906  0100               	movlb	0	; () banked
  6230  000908  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6231  00090A  5047               	movf	_DeadbandLow+1,w,c
  6232  00090C  0A80               	xorlw	128
  6233  00090E  0100               	movlb	0	; () banked
  6234  000910  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6235  000912  A0D8               	btfss	status,0,c
  6236  000914  D00E               	goto	l3500
  6237                           
  6238                           ; BSR set to: 0
  6239  000916  0100               	movlb	0	; () banked
  6240  000918  5185               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6241  00091A  5C44               	subwf	_DeadbandHigh,w,c
  6242  00091C  5045               	movf	_DeadbandHigh+1,w,c
  6243  00091E  0A80               	xorlw	128
  6244  000920  0100               	movlb	0	; () banked
  6245  000922  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6246  000924  0100               	movlb	0	; () banked
  6247  000926  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6248  000928  0A80               	xorlw	128
  6249  00092A  0100               	movlb	0	; () banked
  6250  00092C  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6251  00092E  B0D8               	btfsc	status,0,c
  6252  000930  D030               	goto	l109
  6253  000932                     l3500:
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;MotorControl.c: 80: {
  6257                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  6258  000932  C085  F081         	movff	ImplementJSMotion@JoystickValue,abs@a
  6259  000936  C086  F082         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  6260  00093A  EC46  F00B         	call	_abs	;wreg free
  6261  00093E  C081  F085         	movff	?_abs,ImplementJSMotion@JoystickValue
  6262  000942  C082  F086         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  6263                           
  6264                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  6265  000946  90D8               	bcf	status,0,c
  6266  000948  0100               	movlb	0	; () banked
  6267  00094A  3585               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6268  00094C  0100               	movlb	0	; () banked
  6269  00094E  6F89               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  6270  000950  0100               	movlb	0	; () banked
  6271  000952  3586               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6272  000954  0100               	movlb	0	; () banked
  6273  000956  6F8A               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  6277  000958  C089  F087         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6278  00095C  C08A  F088         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  6279  000960  0100               	movlb	0	; () banked
  6280  000962  90D8               	bcf	status,0,c
  6281  000964  3388               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6282  000966  3387               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6283  000968  0100               	movlb	0	; () banked
  6284  00096A  90D8               	bcf	status,0,c
  6285  00096C  3388               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6286  00096E  3387               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6287  000970  0100               	movlb	0	; () banked
  6288  000972  5187               	movf	??_ImplementJSMotion& (0+255),w,b
  6289  000974  6EB8               	movwf	4024,c	;volatile
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  6293  000976  C089  F087         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6294  00097A  0E03               	movlw	3
  6295  00097C  0100               	movlb	0	; () banked
  6296  00097E  1787               	andwf	??_ImplementJSMotion& (0+255),f,b
  6297  000980  0100               	movlb	0	; () banked
  6298  000982  3B87               	swapf	??_ImplementJSMotion& (0+255),f,b
  6299  000984  50B7               	movf	4023,w,c	;volatile
  6300  000986  0100               	movlb	0	; () banked
  6301  000988  1987               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6302  00098A  0BCF               	andlw	-49
  6303  00098C  1987               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6304  00098E  6EB7               	movwf	4023,c	;volatile
  6305  000990  D000               	goto	l109
  6306  000992                     l109:
  6307                           
  6308                           ; BSR set to: 0
  6309  000992  0012               	return		;funcret
  6310  000994                     __end_of_ImplementJSMotion:
  6311                           	opt stack 0
  6312                           tblptru	equ	0xFF8
  6313                           tblptrh	equ	0xFF7
  6314                           tblptrl	equ	0xFF6
  6315                           tablat	equ	0xFF5
  6316                           prodh	equ	0xFF4
  6317                           prodl	equ	0xFF3
  6318                           intcon	equ	0xFF2
  6319                           intcon2	equ	0xFF1
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           postdec1	equ	0xFE5
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function _abs *****************
  6330 ;; Defined at:
  6331 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  a               2   33[BANK0 ] int 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;		None
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  2   33[BANK0 ] int 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6345 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;Total ram usage:        4 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    4
  6352 ;; This function calls:
  6353 ;;		Nothing
  6354 ;; This function is called by:
  6355 ;;		_ImplementPIDMotion
  6356 ;;		_ImplementJSMotion
  6357 ;;		_ZeroMotors
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text39
  6362  00168C                     __ptext39:
  6363                           	opt stack 0
  6364  00168C                     _abs:
  6365                           	opt stack 24
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;incstack = 0
  6369  00168C  0100               	movlb	0	; () banked
  6370  00168E  AF82               	btfss	(abs@a+1)& (0+255),7,b
  6371  001690  D00E               	goto	l661
  6372                           
  6373                           ; BSR set to: 0
  6374  001692  C081  F083         	movff	abs@a,??_abs
  6375  001696  C082  F084         	movff	abs@a+1,??_abs+1
  6376  00169A  0100               	movlb	0	; () banked
  6377  00169C  1F83               	comf	??_abs& (0+255),f,b
  6378  00169E  1F84               	comf	(??_abs+1)& (0+255),f,b
  6379  0016A0  4B83               	infsnz	??_abs& (0+255),f,b
  6380  0016A2  2B84               	incf	(??_abs+1)& (0+255),f,b
  6381  0016A4  C083  F081         	movff	??_abs,?_abs
  6382  0016A8  C084  F082         	movff	??_abs+1,?_abs+1
  6383  0016AC  D004               	goto	l662
  6384  0016AE                     l661:
  6385                           
  6386                           ; BSR set to: 0
  6387  0016AE  C081  F081         	movff	abs@a,?_abs
  6388  0016B2  C082  F082         	movff	abs@a+1,?_abs+1
  6389  0016B6                     l662:
  6390                           
  6391                           ; BSR set to: 0
  6392  0016B6  0012               	return		;funcret
  6393  0016B8                     __end_of_abs:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           intcon	equ	0xFF2
  6402                           intcon2	equ	0xFF1
  6403                           postinc0	equ	0xFEE
  6404                           wreg	equ	0xFE8
  6405                           postdec1	equ	0xFE5
  6406                           fsr1l	equ	0xFE1
  6407                           indf2	equ	0xFDF
  6408                           fsr2h	equ	0xFDA
  6409                           fsr2l	equ	0xFD9
  6410                           status	equ	0xFD8
  6411                           
  6412 ;; *************** function _DetectMovement *****************
  6413 ;; Defined at:
  6414 ;;		line 42 in file "Joystick.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;  ADCresult       2   28[COMRAM] unsigned int 
  6419 ;;  JoystickResu    2   26[COMRAM] int 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  2   23[COMRAM] int 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;Total ram usage:        7 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    4
  6436 ;; This function calls:
  6437 ;;		Nothing
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text40
  6444  0011CE                     __ptext40:
  6445                           	opt stack 0
  6446  0011CE                     _DetectMovement:
  6447                           	opt stack 26
  6448                           
  6449                           ;Joystick.c: 44: unsigned int ADCresult;
  6450                           ;Joystick.c: 45: int JoystickResult;
  6451                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;incstack = 0
  6455  0011CE  82C2               	bsf	4034,1,c	;volatile
  6456                           
  6457                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  6458  0011D0  D000               	goto	l43
  6459  0011D2                     l43:
  6460  0011D2  B2C2               	btfsc	4034,1,c	;volatile
  6461  0011D4  D7FE               	goto	l43
  6462                           
  6463                           ;Joystick.c: 50: ADCresult = ADRESH;
  6464  0011D6  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  6465  0011DA  6A1E               	clrf	DetectMovement@ADCresult+1,c
  6466                           
  6467                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  6468  0011DC  501D               	movf	DetectMovement@ADCresult,w,c
  6469  0011DE  6E1E               	movwf	DetectMovement@ADCresult+1,c
  6470  0011E0  6A1D               	clrf	DetectMovement@ADCresult,c
  6471                           
  6472                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  6473  0011E2  501D               	movf	DetectMovement@ADCresult,w,c
  6474  0011E4  10C3               	iorwf	4035,w,c	;volatile
  6475  0011E6  6E1D               	movwf	DetectMovement@ADCresult,c
  6476  0011E8  501E               	movf	DetectMovement@ADCresult+1,w,c
  6477  0011EA  6E1E               	movwf	DetectMovement@ADCresult+1,c
  6478                           
  6479                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  6480  0011EC  0E00               	movlw	0
  6481  0011EE  241D               	addwf	DetectMovement@ADCresult,w,c
  6482  0011F0  6E1B               	movwf	DetectMovement@JoystickResult,c
  6483  0011F2  0EFE               	movlw	254
  6484  0011F4  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  6485  0011F6  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  6486                           
  6487                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  6488  0011F8  501B               	movf	DetectMovement@JoystickResult,w,c
  6489  0011FA  5C44               	subwf	_DeadbandHigh,w,c
  6490  0011FC  5045               	movf	_DeadbandHigh+1,w,c
  6491  0011FE  0A80               	xorlw	128
  6492  001200  6E1A               	movwf	??_DetectMovement& (0+255),c
  6493  001202  501C               	movf	DetectMovement@JoystickResult+1,w,c
  6494  001204  0A80               	xorlw	128
  6495  001206  581A               	subwfb	??_DetectMovement& (0+255),w,c
  6496  001208  A0D8               	btfss	status,0,c
  6497  00120A  D00A               	goto	l2886
  6498  00120C  5046               	movf	_DeadbandLow,w,c
  6499  00120E  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  6500  001210  501C               	movf	DetectMovement@JoystickResult+1,w,c
  6501  001212  0A80               	xorlw	128
  6502  001214  6E1A               	movwf	??_DetectMovement& (0+255),c
  6503  001216  5047               	movf	_DeadbandLow+1,w,c
  6504  001218  0A80               	xorlw	128
  6505  00121A  581A               	subwfb	??_DetectMovement& (0+255),w,c
  6506  00121C  B0D8               	btfsc	status,0,c
  6507  00121E  D008               	goto	l2894
  6508  001220                     l2886:
  6509                           
  6510                           ;Joystick.c: 56: {
  6511                           ;Joystick.c: 57: PIDEnableFlag = 0;
  6512  001220  0E00               	movlw	0
  6513  001222  0100               	movlb	0	; () banked
  6514  001224  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;Joystick.c: 58: return JoystickResult;
  6518  001226  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  6519  00122A  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;Joystick.c: 59: }
  6523                           
  6524                           ; BSR set to: 0
  6525  00122E  D005               	goto	l49
  6526  001230                     l2894:
  6527                           
  6528                           ;Joystick.c: 60: else
  6529                           ;Joystick.c: 61: return 0;
  6530  001230  0E00               	movlw	0
  6531  001232  6E19               	movwf	?_DetectMovement+1,c
  6532  001234  0E00               	movlw	0
  6533  001236  6E18               	movwf	?_DetectMovement,c
  6534  001238  D000               	goto	l49
  6535  00123A                     l49:
  6536  00123A  0012               	return		;funcret
  6537  00123C                     __end_of_DetectMovement:
  6538                           	opt stack 0
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           prodh	equ	0xFF4
  6544                           prodl	equ	0xFF3
  6545                           intcon	equ	0xFF2
  6546                           intcon2	equ	0xFF1
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _DetectJoystick *****************
  6557 ;; Defined at:
  6558 ;;		line 27 in file "Joystick.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;		None               void
  6565 ;; Registers used:
  6566 ;;		wreg, status,2
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    4
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_main
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text41
  6587  001774                     __ptext41:
  6588                           	opt stack 0
  6589  001774                     _DetectJoystick:
  6590                           	opt stack 26
  6591                           
  6592                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  6593                           
  6594                           ;incstack = 0
  6595  001774  B281               	btfsc	3969,1,c	;volatile
  6596  001776  D003               	goto	l37
  6597                           
  6598                           ;Joystick.c: 30: {
  6599                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  6600  001778  9480               	bcf	3968,2,c	;volatile
  6601                           
  6602                           ;Joystick.c: 32: JSEnableFlag = 0;
  6603  00177A  0E00               	movlw	0
  6604  00177C  D008               	goto	L2
  6605  00177E                     l37:
  6606                           
  6607                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  6608  00177E  A281               	btfss	3969,1,c	;volatile
  6609  001780  D009               	goto	l40
  6610  001782  0100               	movlb	0	; () banked
  6611  001784  51AD               	movf	_JSEnableFlag& (0+255),w,b
  6612  001786  A4D8               	btfss	status,2,c
  6613  001788  D005               	goto	l40
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;Joystick.c: 36: {
  6617                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  6618  00178A  8480               	bsf	3968,2,c	;volatile
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;Joystick.c: 38: JSEnableFlag = 1;
  6622  00178C  0E01               	movlw	1
  6623  00178E                     L2:
  6624  00178E  0100               	movlb	0	; () banked
  6625  001790  6FAD               	movwf	_JSEnableFlag& (0+255),b
  6626                           
  6627                           ; BSR set to: 0
  6628  001792  D000               	goto	l40
  6629  001794                     l40:
  6630  001794  0012               	return		;funcret
  6631  001796                     __end_of_DetectJoystick:
  6632                           	opt stack 0
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           intcon2	equ	0xFF1
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postdec1	equ	0xFE5
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _ISR *****************
  6651 ;; Defined at:
  6652 ;;		line 144 in file "RTDuC.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;		None               void
  6659 ;; Registers used:
  6660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;Total ram usage:       14 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    3
  6673 ;; This function calls:
  6674 ;;		_HLVDInt
  6675 ;;		_INT0Int
  6676 ;;		_SPIInt
  6677 ;;		_TMR0Int
  6678 ;; This function is called by:
  6679 ;;		Interrupt level 2
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	intcode
  6684  000008                     __pintcode:
  6685                           	opt stack 0
  6686  000008                     _ISR:
  6687                           	opt stack 21
  6688                           
  6689                           ;incstack = 0
  6690  000008  CFFA F00A          	movff	pclath,??_ISR
  6691  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  6692  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  6693  000014  ED0B  F008         	call	int_func,f	;refresh shadow registers
  6694                           pclatu	equ	0xFFB
  6695                           pclath	equ	0xFFA
  6696                           tblptru	equ	0xFF8
  6697                           tblptrh	equ	0xFF7
  6698                           tblptrl	equ	0xFF6
  6699                           tablat	equ	0xFF5
  6700                           prodh	equ	0xFF4
  6701                           prodl	equ	0xFF3
  6702                           intcon	equ	0xFF2
  6703                           intcon2	equ	0xFF1
  6704                           postinc0	equ	0xFEE
  6705                           fsr0l	equ	0xFE9
  6706                           wreg	equ	0xFE8
  6707                           postdec1	equ	0xFE5
  6708                           fsr1l	equ	0xFE1
  6709                           indf2	equ	0xFDF
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714                           	psect	intcode_body
  6715  001016                     __pintcode_body:
  6716                           	opt stack 21
  6717  001016                     int_func:
  6718                           	opt stack 21
  6719  001016  0006               	pop		; remove dummy address from shadow register refresh
  6720  001018  CFEA F00D          	movff	fsr0h,??_ISR+3
  6721  00101C  CFE1 F00E          	movff	fsr1l,??_ISR+4
  6722  001020  CFE2 F00F          	movff	fsr1h,??_ISR+5
  6723  001024  CFD9 F010          	movff	fsr2l,??_ISR+6
  6724  001028  CFDA F011          	movff	fsr2h,??_ISR+7
  6725  00102C  CFF3 F012          	movff	prodl,??_ISR+8
  6726  001030  CFF4 F013          	movff	prodh,??_ISR+9
  6727  001034  CFF6 F014          	movff	tblptrl,??_ISR+10
  6728  001038  CFF7 F015          	movff	tblptrh,??_ISR+11
  6729  00103C  CFF8 F016          	movff	tblptru,??_ISR+12
  6730  001040  CFF5 F017          	movff	tablat,??_ISR+13
  6731                           
  6732                           ;RTDuC.c: 146: PORTCbits.RC6 = 1;
  6733  001044  8C82               	bsf	3970,6,c	;volatile
  6734                           
  6735                           ;RTDuC.c: 147: if (PIR1bits.SSP1IF == 1)
  6736  001046  A69E               	btfss	3998,3,c	;volatile
  6737  001048  D003               	goto	i2l3170
  6738                           
  6739                           ;RTDuC.c: 148: {
  6740                           ;RTDuC.c: 149: SPIInt();
  6741  00104A  EC40  F00C         	call	_SPIInt	;wreg free
  6742  00104E  D000               	goto	i2l3170
  6743  001050                     i2l3170:
  6744                           
  6745                           ;RTDuC.c: 150: }
  6746                           ;RTDuC.c: 152: if (INTCONbits.TMR0IF == 1)
  6747  001050  A4F2               	btfss	intcon,2,c	;volatile
  6748  001052  D004               	goto	i2l3176
  6749                           
  6750                           ;RTDuC.c: 153: {
  6751                           ;RTDuC.c: 154: TMR0Int();
  6752  001054  EC37  F00C         	call	_TMR0Int	;wreg free
  6753                           
  6754                           ;RTDuC.c: 155: PORTCbits.RC6 = 0;
  6755  001058  9C82               	bcf	3970,6,c	;volatile
  6756  00105A  D000               	goto	i2l3176
  6757  00105C                     i2l3176:
  6758                           
  6759                           ;RTDuC.c: 156: }
  6760                           ;RTDuC.c: 158: if (INTCONbits.INT0IF == 1)
  6761  00105C  A2F2               	btfss	intcon,1,c	;volatile
  6762  00105E  D003               	goto	i2l3180
  6763                           
  6764                           ;RTDuC.c: 159: {
  6765                           ;RTDuC.c: 160: INT0Int();
  6766  001060  ECA8  F00B         	call	_INT0Int	;wreg free
  6767  001064  D000               	goto	i2l3180
  6768  001066                     i2l3180:
  6769                           
  6770                           ;RTDuC.c: 161: }
  6771                           ;RTDuC.c: 163: if (PIR2bits.HLVDIF == 1)
  6772  001066  A4A1               	btfss	4001,2,c	;volatile
  6773  001068  D006               	goto	i2l3186
  6774                           
  6775                           ;RTDuC.c: 164: {
  6776                           ;RTDuC.c: 165: PORTAbits.RA4 = 0;
  6777  00106A  9880               	bcf	3968,4,c	;volatile
  6778                           
  6779                           ;RTDuC.c: 166: PORTAbits.RA3 = 0;
  6780  00106C  9680               	bcf	3968,3,c	;volatile
  6781                           
  6782                           ;RTDuC.c: 167: PORTAbits.RA2 = 0;
  6783  00106E  9480               	bcf	3968,2,c	;volatile
  6784                           
  6785                           ;RTDuC.c: 168: HLVDInt();
  6786  001070  EC5B  F007         	call	_HLVDInt	;wreg free
  6787  001074  D000               	goto	i2l3186
  6788  001076                     i2l3186:
  6789                           
  6790                           ;RTDuC.c: 169: }
  6791                           ;RTDuC.c: 171: if (PIR2bits.OSCFIF == 1)
  6792  001076  AEA1               	btfss	4001,7,c	;volatile
  6793  001078  D002               	goto	i2l526
  6794  00107A  00FF               	reset		;# 
  6795  00107C  D000               	goto	i2l526
  6796  00107E                     i2l526:
  6797  00107E  C017  FFF5         	movff	??_ISR+13,tablat
  6798  001082  C016  FFF8         	movff	??_ISR+12,tblptru
  6799  001086  C015  FFF7         	movff	??_ISR+11,tblptrh
  6800  00108A  C014  FFF6         	movff	??_ISR+10,tblptrl
  6801  00108E  C013  FFF4         	movff	??_ISR+9,prodh
  6802  001092  C012  FFF3         	movff	??_ISR+8,prodl
  6803  001096  C011  FFDA         	movff	??_ISR+7,fsr2h
  6804  00109A  C010  FFD9         	movff	??_ISR+6,fsr2l
  6805  00109E  C00F  FFE2         	movff	??_ISR+5,fsr1h
  6806  0010A2  C00E  FFE1         	movff	??_ISR+4,fsr1l
  6807  0010A6  C00D  FFEA         	movff	??_ISR+3,fsr0h
  6808  0010AA  C00C  FFE9         	movff	??_ISR+2,fsr0l
  6809  0010AE  C00B  FFFB         	movff	??_ISR+1,pclatu
  6810  0010B2  C00A  FFFA         	movff	??_ISR,pclath
  6811  0010B6  0011               	retfie		f
  6812  0010B8                     __end_of_ISR:
  6813                           	opt stack 0
  6814                           pclatu	equ	0xFFB
  6815                           pclath	equ	0xFFA
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon	equ	0xFF2
  6823                           intcon2	equ	0xFF1
  6824                           postinc0	equ	0xFEE
  6825                           fsr0h	equ	0xFEA
  6826                           fsr0l	equ	0xFE9
  6827                           wreg	equ	0xFE8
  6828                           postdec1	equ	0xFE5
  6829                           fsr1h	equ	0xFE2
  6830                           fsr1l	equ	0xFE1
  6831                           indf2	equ	0xFDF
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _TMR0Int *****************
  6837 ;; Defined at:
  6838 ;;		line 57 in file "PID.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;		None
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;		None
  6843 ;; Return value:  Size  Location     Type
  6844 ;;		None               void
  6845 ;; Registers used:
  6846 ;;		wreg, status,2
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;Total ram usage:        0 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; This function calls:
  6859 ;;		Nothing
  6860 ;; This function is called by:
  6861 ;;		_ISR
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text43
  6866  00186E                     __ptext43:
  6867                           	opt stack 0
  6868  00186E                     _TMR0Int:
  6869                           	opt stack 23
  6870                           
  6871                           ;PID.c: 59: TMR0H = 0xDB;
  6872                           
  6873                           ;incstack = 0
  6874  00186E  0EDB               	movlw	219
  6875  001870  6ED7               	movwf	4055,c	;volatile
  6876                           
  6877                           ;PID.c: 60: TMR0L = 0x60;
  6878  001872  0E60               	movlw	96
  6879  001874  6ED6               	movwf	4054,c	;volatile
  6880                           
  6881                           ;PID.c: 61: TMR0Flag = 1;
  6882  001876  0E01               	movlw	1
  6883  001878  0100               	movlb	0	; () banked
  6884  00187A  6FB0               	movwf	_TMR0Flag& (0+255),b
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;PID.c: 62: INTCONbits.TMR0IF = 0;
  6888  00187C  94F2               	bcf	intcon,2,c	;volatile
  6889                           
  6890                           ; BSR set to: 0
  6891  00187E  0012               	return		;funcret
  6892  001880                     __end_of_TMR0Int:
  6893                           	opt stack 0
  6894                           pclatu	equ	0xFFB
  6895                           pclath	equ	0xFFA
  6896                           tblptru	equ	0xFF8
  6897                           tblptrh	equ	0xFF7
  6898                           tblptrl	equ	0xFF6
  6899                           tablat	equ	0xFF5
  6900                           prodh	equ	0xFF4
  6901                           prodl	equ	0xFF3
  6902                           intcon	equ	0xFF2
  6903                           intcon2	equ	0xFF1
  6904                           postinc0	equ	0xFEE
  6905                           fsr0h	equ	0xFEA
  6906                           fsr0l	equ	0xFE9
  6907                           wreg	equ	0xFE8
  6908                           postdec1	equ	0xFE5
  6909                           fsr1h	equ	0xFE2
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           fsr2h	equ	0xFDA
  6913                           fsr2l	equ	0xFD9
  6914                           status	equ	0xFD8
  6915                           
  6916 ;; *************** function _SPIInt *****************
  6917 ;; Defined at:
  6918 ;;		line 26 in file "SPISlave.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;		None               void
  6925 ;; Registers used:
  6926 ;;		wreg, status,2
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6936 ;;Total ram usage:        0 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; This function calls:
  6939 ;;		Nothing
  6940 ;; This function is called by:
  6941 ;;		_ISR
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text44
  6946  001880                     __ptext44:
  6947                           	opt stack 0
  6948  001880                     _SPIInt:
  6949                           	opt stack 23
  6950                           
  6951                           ;SPISlave.c: 28: Command = SSP1BUF;
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;incstack = 0
  6955  001880  CFC9 F0AC          	movff	4041,_Command	;volatile
  6956                           
  6957                           ;SPISlave.c: 29: PORTCbits.RC6 = 1;
  6958  001884  8C82               	bsf	3970,6,c	;volatile
  6959                           
  6960                           ;SPISlave.c: 30: PIR1bits.SSP1IF = 0;
  6961  001886  969E               	bcf	3998,3,c	;volatile
  6962                           
  6963                           ;SPISlave.c: 31: PIE1bits.SSP1IE = 0;
  6964  001888  969D               	bcf	3997,3,c	;volatile
  6965                           
  6966                           ;SPISlave.c: 32: SPIflag = 1;
  6967  00188A  0E01               	movlw	1
  6968  00188C  0100               	movlb	0	; () banked
  6969  00188E  6FAF               	movwf	_SPIflag& (0+255),b
  6970                           
  6971                           ; BSR set to: 0
  6972  001890  0012               	return		;funcret
  6973  001892                     __end_of_SPIInt:
  6974                           	opt stack 0
  6975                           pclatu	equ	0xFFB
  6976                           pclath	equ	0xFFA
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           intcon2	equ	0xFF1
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1h	equ	0xFE2
  6991                           fsr1l	equ	0xFE1
  6992                           indf2	equ	0xFDF
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _INT0Int *****************
  6998 ;; Defined at:
  6999 ;;		line 189 in file "RTDuC.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        0 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    1
  7020 ;; This function calls:
  7021 ;;		_KillMotors
  7022 ;; This function is called by:
  7023 ;;		_ISR
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text45
  7028  001750                     __ptext45:
  7029                           	opt stack 0
  7030  001750                     _INT0Int:
  7031                           	opt stack 22
  7032                           
  7033                           ;RTDuC.c: 191: KillMotors();
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;incstack = 0
  7037  001750  EC56  F00C         	call	_KillMotors	;wreg free
  7038                           
  7039                           ;RTDuC.c: 192: PORTAbits.RA3 = 0;
  7040  001754  9680               	bcf	3968,3,c	;volatile
  7041                           
  7042                           ;RTDuC.c: 193: T0CONbits.TMR0ON = 1;
  7043  001756  8ED5               	bsf	4053,7,c	;volatile
  7044                           
  7045                           ;RTDuC.c: 194: INTCONbits.GIE = 0;
  7046  001758  9EF2               	bcf	intcon,7,c	;volatile
  7047                           
  7048                           ;RTDuC.c: 195: PORTAbits.RA4 = 1;
  7049  00175A  8880               	bsf	3968,4,c	;volatile
  7050  00175C  D000               	goto	i2l2034
  7051  00175E                     i2l2034:
  7052                           
  7053                           ;RTDuC.c: 197: {
  7054                           ;RTDuC.c: 198: TMR0H = 0x00;
  7055  00175E  0E00               	movlw	0
  7056  001760  6ED7               	movwf	4055,c	;volatile
  7057                           
  7058                           ;RTDuC.c: 199: TMR0L = 0x00;
  7059  001762  0E00               	movlw	0
  7060  001764  6ED6               	movwf	4054,c	;volatile
  7061                           
  7062                           ;RTDuC.c: 200: while (!INTCONbits.TMR0IF);
  7063  001766  D000               	goto	i2l530
  7064  001768                     i2l530:
  7065  001768  A4F2               	btfss	intcon,2,c	;volatile
  7066  00176A  D7FE               	goto	i2l530
  7067                           
  7068                           ;RTDuC.c: 201: INTCONbits.TMR0IF = 0;
  7069  00176C  94F2               	bcf	intcon,2,c	;volatile
  7070                           
  7071                           ;RTDuC.c: 202: ~PORTAbits.RA4;
  7072  00176E  5080               	movf	3968,w,c	;volatile
  7073  001770  D7F6               	goto	i2l2034
  7074  001772  0012               	return		;funcret
  7075  001774                     __end_of_INT0Int:
  7076                           	opt stack 0
  7077                           pclatu	equ	0xFFB
  7078                           pclath	equ	0xFFA
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           intcon2	equ	0xFF1
  7087                           postinc0	equ	0xFEE
  7088                           fsr0h	equ	0xFEA
  7089                           fsr0l	equ	0xFE9
  7090                           wreg	equ	0xFE8
  7091                           postdec1	equ	0xFE5
  7092                           fsr1h	equ	0xFE2
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _KillMotors *****************
  7100 ;; Defined at:
  7101 ;;		line 28 in file "MotorControl.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;		None               void
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		_INT0Int
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text46
  7129  0018AC                     __ptext46:
  7130                           	opt stack 0
  7131  0018AC                     _KillMotors:
  7132                           	opt stack 22
  7133                           
  7134                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  7135                           
  7136                           ;incstack = 0
  7137  0018AC  8880               	bsf	3968,4,c	;volatile
  7138                           
  7139                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  7140  0018AE  50B7               	movf	4023,w,c	;volatile
  7141  0018B0  0BF0               	andlw	240
  7142  0018B2  6EB7               	movwf	4023,c	;volatile
  7143  0018B4  0012               	return		;funcret
  7144  0018B6                     __end_of_KillMotors:
  7145                           	opt stack 0
  7146                           pclatu	equ	0xFFB
  7147                           pclath	equ	0xFFA
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           intcon	equ	0xFF2
  7155                           intcon2	equ	0xFF1
  7156                           postinc0	equ	0xFEE
  7157                           fsr0h	equ	0xFEA
  7158                           fsr0l	equ	0xFE9
  7159                           wreg	equ	0xFE8
  7160                           postdec1	equ	0xFE5
  7161                           fsr1h	equ	0xFE2
  7162                           fsr1l	equ	0xFE1
  7163                           indf2	equ	0xFDF
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8
  7167                           
  7168 ;; *************** function _HLVDInt *****************
  7169 ;; Defined at:
  7170 ;;		line 150 in file "EEPROM.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;		None
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;		None
  7175 ;; Return value:  Size  Location     Type
  7176 ;;		None               void
  7177 ;; Registers used:
  7178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;Total ram usage:        0 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; Hardware stack levels required when called:    2
  7191 ;; This function calls:
  7192 ;;		_EEWriteChar
  7193 ;;		_EEWriteDouble
  7194 ;; This function is called by:
  7195 ;;		_ISR
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text47
  7200  000EB6                     __ptext47:
  7201                           	opt stack 0
  7202  000EB6                     _HLVDInt:
  7203                           	opt stack 21
  7204                           
  7205                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  7206                           
  7207                           ;incstack = 0
  7208  000EB6  C03F  F005         	movff	_SetAngle,EEWriteDouble@dub
  7209  000EBA  C040  F006         	movff	_SetAngle+1,EEWriteDouble@dub+1
  7210  000EBE  C041  F007         	movff	_SetAngle+2,EEWriteDouble@dub+2
  7211  000EC2  0E00               	movlw	0
  7212  000EC4  ECD0  F009         	call	_EEWriteDouble
  7213                           
  7214                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  7215  000EC8  C09E  F005         	movff	_Kp,EEWriteDouble@dub
  7216  000ECC  C09F  F006         	movff	_Kp+1,EEWriteDouble@dub+1
  7217  000ED0  C0A0  F007         	movff	_Kp+2,EEWriteDouble@dub+2
  7218  000ED4  0E03               	movlw	3
  7219  000ED6  ECD0  F009         	call	_EEWriteDouble
  7220                           
  7221                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  7222  000EDA  C09B  F005         	movff	_Ki,EEWriteDouble@dub
  7223  000EDE  C09C  F006         	movff	_Ki+1,EEWriteDouble@dub+1
  7224  000EE2  C09D  F007         	movff	_Ki+2,EEWriteDouble@dub+2
  7225  000EE6  0E06               	movlw	6
  7226  000EE8  ECD0  F009         	call	_EEWriteDouble
  7227                           
  7228                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  7229  000EEC  C098  F005         	movff	_Kd,EEWriteDouble@dub
  7230  000EF0  C099  F006         	movff	_Kd+1,EEWriteDouble@dub+1
  7231  000EF4  C09A  F007         	movff	_Kd+2,EEWriteDouble@dub+2
  7232  000EF8  0E09               	movlw	9
  7233  000EFA  ECD0  F009         	call	_EEWriteDouble
  7234                           
  7235                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  7236  000EFE  CF80 F005          	movff	3968,EEWriteChar@ch	;volatile
  7237  000F02  0E0C               	movlw	12
  7238  000F04  ECCB  F00B         	call	_EEWriteChar
  7239                           
  7240                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  7241  000F08  CF81 F005          	movff	3969,EEWriteChar@ch	;volatile
  7242  000F0C  0E0D               	movlw	13
  7243  000F0E  ECCB  F00B         	call	_EEWriteChar
  7244                           
  7245                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  7246  000F12  CF82 F005          	movff	3970,EEWriteChar@ch	;volatile
  7247  000F16  0E0E               	movlw	14
  7248  000F18  ECCB  F00B         	call	_EEWriteChar
  7249                           
  7250                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  7251  000F1C  CF83 F005          	movff	3971,EEWriteChar@ch	;volatile
  7252  000F20  0E0F               	movlw	15
  7253  000F22  ECCB  F00B         	call	_EEWriteChar
  7254                           
  7255                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  7256  000F26  CF84 F005          	movff	3972,EEWriteChar@ch	;volatile
  7257  000F2A  0E10               	movlw	16
  7258  000F2C  ECCB  F00B         	call	_EEWriteChar
  7259                           
  7260                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  7261  000F30  CF85 F005          	movff	3973,EEWriteChar@ch	;volatile
  7262  000F34  0E11               	movlw	17
  7263  000F36  ECCB  F00B         	call	_EEWriteChar
  7264                           
  7265                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  7266  000F3A  CF86 F005          	movff	3974,EEWriteChar@ch	;volatile
  7267  000F3E  0E12               	movlw	18
  7268  000F40  ECCB  F00B         	call	_EEWriteChar
  7269                           
  7270                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  7271  000F44  CF87 F005          	movff	3975,EEWriteChar@ch	;volatile
  7272  000F48  0E13               	movlw	19
  7273  000F4A  ECCB  F00B         	call	_EEWriteChar
  7274                           
  7275                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  7276  000F4E  CF88 F005          	movff	3976,EEWriteChar@ch	;volatile
  7277  000F52  0E14               	movlw	20
  7278  000F54  ECCB  F00B         	call	_EEWriteChar
  7279                           
  7280                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  7281  000F58  C0AE  F005         	movff	_PIDEnableFlag,EEWriteChar@ch
  7282  000F5C  0E15               	movlw	21
  7283  000F5E  ECCB  F00B         	call	_EEWriteChar
  7284                           
  7285                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  7286  000F62  0E01               	movlw	1
  7287  000F64  6E05               	movwf	EEWriteChar@ch,c
  7288  000F66  0E16               	movlw	22
  7289  000F68  ECCB  F00B         	call	_EEWriteChar
  7290  000F6C  0012               	return		;funcret
  7291  000F6E                     __end_of_HLVDInt:
  7292                           	opt stack 0
  7293                           pclatu	equ	0xFFB
  7294                           pclath	equ	0xFFA
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           intcon	equ	0xFF2
  7302                           intcon2	equ	0xFF1
  7303                           postinc0	equ	0xFEE
  7304                           fsr0h	equ	0xFEA
  7305                           fsr0l	equ	0xFE9
  7306                           wreg	equ	0xFE8
  7307                           postdec1	equ	0xFE5
  7308                           fsr1h	equ	0xFE2
  7309                           fsr1l	equ	0xFE1
  7310                           indf2	equ	0xFDF
  7311                           fsr2h	equ	0xFDA
  7312                           fsr2l	equ	0xFD9
  7313                           status	equ	0xFD8
  7314                           
  7315 ;; *************** function _EEWriteDouble *****************
  7316 ;; Defined at:
  7317 ;;		line 77 in file "EEPROM.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  location        1    wreg     unsigned char 
  7320 ;;  dub             3    4[COMRAM] unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  location        1    7[COMRAM] unsigned char 
  7323 ;;  x               1    8[COMRAM] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;		None               void
  7326 ;; Registers used:
  7327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7333 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;Total ram usage:        5 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    1
  7340 ;; This function calls:
  7341 ;;		_EEDisassembleDouble
  7342 ;;		_Write_b_eep
  7343 ;;		i2_Busy_eep
  7344 ;; This function is called by:
  7345 ;;		_HLVDInt
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text48
  7350  0013A0                     __ptext48:
  7351                           	opt stack 0
  7352  0013A0                     _EEWriteDouble:
  7353                           	opt stack 21
  7354                           
  7355                           ;incstack = 0
  7356                           ;EEWriteDouble@location stored from wreg
  7357  0013A0  6E08               	movwf	EEWriteDouble@location,c
  7358                           
  7359                           ;EEPROM.c: 79: unsigned char x;
  7360                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  7361  0013A2  C005  F001         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  7362  0013A6  C006  F002         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  7363  0013AA  C007  F003         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  7364  0013AE  ECE3  F00A         	call	_EEDisassembleDouble	;wreg free
  7365                           
  7366                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  7367  0013B2  50F2               	movf	intcon,w,c	;volatile
  7368  0013B4  0B3F               	andlw	63
  7369  0013B6  6EF2               	movwf	intcon,c	;volatile
  7370                           
  7371                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  7372  0013B8  0E00               	movlw	0
  7373  0013BA  6E09               	movwf	EEWriteDouble@x,c
  7374  0013BC                     i2l2822:
  7375  0013BC  0E02               	movlw	2
  7376  0013BE  6409               	cpfsgt	EEWriteDouble@x,c
  7377  0013C0  D001               	goto	i2l2826
  7378  0013C2  D014               	goto	i2l2836
  7379  0013C4                     i2l2826:
  7380                           
  7381                           ;EEPROM.c: 86: {
  7382                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  7383  0013C4  C008  F001         	movff	EEWriteDouble@location,Write_b_eep@badd
  7384  0013C8  6A02               	clrf	Write_b_eep@badd+1,c
  7385  0013CA  5009               	movf	EEWriteDouble@x,w,c
  7386  0013CC  0D01               	mullw	1
  7387  0013CE  0E3C               	movlw	low _DDouble
  7388  0013D0  24F3               	addwf	prodl,w,c
  7389  0013D2  6ED9               	movwf	fsr2l,c
  7390  0013D4  0E00               	movlw	high _DDouble
  7391  0013D6  20F4               	addwfc	prodh,w,c
  7392  0013D8  6EDA               	movwf	fsr2h,c
  7393  0013DA  50DF               	movf	indf2,w,c
  7394  0013DC  6E03               	movwf	Write_b_eep@bdat,c
  7395  0013DE  EC89  F00A         	call	_Write_b_eep	;wreg free
  7396                           
  7397                           ;EEPROM.c: 88: location++;
  7398  0013E2  2A08               	incf	EEWriteDouble@location,f,c
  7399                           
  7400                           ;EEPROM.c: 89: Busy_eep();
  7401  0013E4  EC5F  F00C         	call	i2_Busy_eep	;wreg free
  7402  0013E8  2A09               	incf	EEWriteDouble@x,f,c
  7403  0013EA  D7E8               	goto	i2l2822
  7404  0013EC                     i2l2836:
  7405                           
  7406                           ;EEPROM.c: 90: }
  7407                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7408  0013EC  50F2               	movf	intcon,w,c	;volatile
  7409  0013EE  09C0               	iorlw	192
  7410  0013F0  6EF2               	movwf	intcon,c	;volatile
  7411  0013F2  0012               	return		;funcret
  7412  0013F4                     __end_of_EEWriteDouble:
  7413                           	opt stack 0
  7414                           pclatu	equ	0xFFB
  7415                           pclath	equ	0xFFA
  7416                           tblptru	equ	0xFF8
  7417                           tblptrh	equ	0xFF7
  7418                           tblptrl	equ	0xFF6
  7419                           tablat	equ	0xFF5
  7420                           prodh	equ	0xFF4
  7421                           prodl	equ	0xFF3
  7422                           intcon	equ	0xFF2
  7423                           intcon2	equ	0xFF1
  7424                           postinc0	equ	0xFEE
  7425                           fsr0h	equ	0xFEA
  7426                           fsr0l	equ	0xFE9
  7427                           wreg	equ	0xFE8
  7428                           postdec1	equ	0xFE5
  7429                           fsr1h	equ	0xFE2
  7430                           fsr1l	equ	0xFE1
  7431                           indf2	equ	0xFDF
  7432                           fsr2h	equ	0xFDA
  7433                           fsr2l	equ	0xFD9
  7434                           status	equ	0xFD8
  7435                           
  7436 ;; *************** function _EEDisassembleDouble *****************
  7437 ;; Defined at:
  7438 ;;		line 48 in file "EEPROM.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  dub             3    0[COMRAM] unsigned char 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;		None
  7443 ;; Return value:  Size  Location     Type
  7444 ;;		None               void
  7445 ;; Registers used:
  7446 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7452 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;Total ram usage:        3 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; This function calls:
  7459 ;;		Nothing
  7460 ;; This function is called by:
  7461 ;;		_EEWriteDouble
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           	psect	text49
  7466  0015C6                     __ptext49:
  7467                           	opt stack 0
  7468  0015C6                     _EEDisassembleDouble:
  7469                           	opt stack 21
  7470                           
  7471                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7472                           
  7473                           ;incstack = 0
  7474  0015C6  0E01               	movlw	low EEDisassembleDouble@dub
  7475  0015C8  6E42               	movwf	_DoublePtr,c
  7476  0015CA  0E00               	movlw	high EEDisassembleDouble@dub
  7477  0015CC  6E43               	movwf	_DoublePtr+1,c
  7478                           
  7479                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7480  0015CE  C042  FFD9         	movff	_DoublePtr,fsr2l
  7481  0015D2  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  7482  0015D6  50DF               	movf	indf2,w,c
  7483  0015D8  6E3C               	movwf	_DDouble,c
  7484                           
  7485                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7486  0015DA  EE20 F001          	lfsr	2,1
  7487  0015DE  5042               	movf	_DoublePtr,w,c
  7488  0015E0  26D9               	addwf	fsr2l,f,c
  7489  0015E2  5043               	movf	_DoublePtr+1,w,c
  7490  0015E4  22DA               	addwfc	fsr2h,f,c
  7491  0015E6  50DF               	movf	indf2,w,c
  7492  0015E8  6E3D               	movwf	_DDouble+1,c
  7493                           
  7494                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7495  0015EA  EE20 F002          	lfsr	2,2
  7496  0015EE  5042               	movf	_DoublePtr,w,c
  7497  0015F0  26D9               	addwf	fsr2l,f,c
  7498  0015F2  5043               	movf	_DoublePtr+1,w,c
  7499  0015F4  22DA               	addwfc	fsr2h,f,c
  7500  0015F6  50DF               	movf	indf2,w,c
  7501  0015F8  6E3E               	movwf	_DDouble+2,c
  7502  0015FA  0012               	return		;funcret
  7503  0015FC                     __end_of_EEDisassembleDouble:
  7504                           	opt stack 0
  7505                           pclatu	equ	0xFFB
  7506                           pclath	equ	0xFFA
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           postinc0	equ	0xFEE
  7516                           fsr0h	equ	0xFEA
  7517                           fsr0l	equ	0xFE9
  7518                           wreg	equ	0xFE8
  7519                           postdec1	equ	0xFE5
  7520                           fsr1h	equ	0xFE2
  7521                           fsr1l	equ	0xFE1
  7522                           indf2	equ	0xFDF
  7523                           fsr2h	equ	0xFDA
  7524                           fsr2l	equ	0xFD9
  7525                           status	equ	0xFD8
  7526                           
  7527 ;; *************** function _EEWriteChar *****************
  7528 ;; Defined at:
  7529 ;;		line 122 in file "EEPROM.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  location        1    wreg     unsigned char 
  7532 ;;  ch              1    4[COMRAM] unsigned char 
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  location        1    5[COMRAM] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;		None               void
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7544 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;Total ram usage:        2 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    1
  7551 ;; This function calls:
  7552 ;;		_Write_b_eep
  7553 ;;		i2_Busy_eep
  7554 ;; This function is called by:
  7555 ;;		_HLVDInt
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text50
  7560  001796                     __ptext50:
  7561                           	opt stack 0
  7562  001796                     _EEWriteChar:
  7563                           	opt stack 21
  7564                           
  7565                           ;incstack = 0
  7566                           ;EEWriteChar@location stored from wreg
  7567  001796  6E06               	movwf	EEWriteChar@location,c
  7568                           
  7569                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7570  001798  50F2               	movf	intcon,w,c	;volatile
  7571  00179A  0B3F               	andlw	63
  7572  00179C  6EF2               	movwf	intcon,c	;volatile
  7573                           
  7574                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7575  00179E  C006  F001         	movff	EEWriteChar@location,Write_b_eep@badd
  7576  0017A2  6A02               	clrf	Write_b_eep@badd+1,c
  7577  0017A4  C005  F003         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7578  0017A8  EC89  F00A         	call	_Write_b_eep	;wreg free
  7579                           
  7580                           ;EEPROM.c: 127: Busy_eep();
  7581  0017AC  EC5F  F00C         	call	i2_Busy_eep	;wreg free
  7582                           
  7583                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7584  0017B0  50F2               	movf	intcon,w,c	;volatile
  7585  0017B2  09C0               	iorlw	192
  7586  0017B4  6EF2               	movwf	intcon,c	;volatile
  7587  0017B6  0012               	return		;funcret
  7588  0017B8                     __end_of_EEWriteChar:
  7589                           	opt stack 0
  7590                           pclatu	equ	0xFFB
  7591                           pclath	equ	0xFFA
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           intcon	equ	0xFF2
  7599                           intcon2	equ	0xFF1
  7600                           postinc0	equ	0xFEE
  7601                           fsr0h	equ	0xFEA
  7602                           fsr0l	equ	0xFE9
  7603                           wreg	equ	0xFE8
  7604                           postdec1	equ	0xFE5
  7605                           fsr1h	equ	0xFE2
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function i2_Busy_eep *****************
  7613 ;; Defined at:
  7614 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;		None
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;		None
  7619 ;; Return value:  Size  Location     Type
  7620 ;;		None               void
  7621 ;; Registers used:
  7622 ;;		None
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;Total ram usage:        0 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_EEWriteDouble
  7638 ;;		_EEWriteChar
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           	psect	text51
  7643  0018BE                     __ptext51:
  7644                           	opt stack 0
  7645  0018BE                     i2_Busy_eep:
  7646                           	opt stack 21
  7647                           
  7648                           ;incstack = 0
  7649  0018BE  D000               	goto	i2l551
  7650  0018C0                     i2l551:
  7651  0018C0  B2A6               	btfsc	4006,1,c	;volatile
  7652  0018C2  D7FE               	goto	i2l551
  7653  0018C4  0012               	return		;funcret
  7654  0018C6                     __end_ofi2_Busy_eep:
  7655                           	opt stack 0
  7656                           pclatu	equ	0xFFB
  7657                           pclath	equ	0xFFA
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           intcon2	equ	0xFF1
  7666                           postinc0	equ	0xFEE
  7667                           fsr0h	equ	0xFEA
  7668                           fsr0l	equ	0xFE9
  7669                           wreg	equ	0xFE8
  7670                           postdec1	equ	0xFE5
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           fsr2h	equ	0xFDA
  7675                           fsr2l	equ	0xFD9
  7676                           status	equ	0xFD8
  7677                           
  7678 ;; *************** function _Write_b_eep *****************
  7679 ;; Defined at:
  7680 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  badd            2    0[COMRAM] unsigned int 
  7683 ;;  bdat            1    2[COMRAM] unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  GIE_BIT_VAL     1    3[COMRAM] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;		None               void
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7695 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;Total ram usage:        4 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_EEWriteDouble
  7705 ;;		_EEWriteChar
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           	psect	text52
  7710  001512                     __ptext52:
  7711                           	opt stack 0
  7712  001512                     _Write_b_eep:
  7713                           	opt stack 21
  7714                           
  7715                           ;incstack = 0
  7716  001512  0E00               	movlw	0
  7717  001514  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7718  001516  5002               	movf	Write_b_eep@badd+1,w,c
  7719  001518  0B03               	andlw	3
  7720  00151A  6EAA               	movwf	4010,c	;volatile
  7721  00151C  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7722  001520  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7723  001524  9EA6               	bcf	4006,7,c	;volatile
  7724  001526  9CA6               	bcf	4006,6,c	;volatile
  7725  001528  84A6               	bsf	4006,2,c	;volatile
  7726  00152A  0E00               	movlw	0
  7727  00152C  BEF2               	btfsc	intcon,7,c	;volatile
  7728  00152E  0E01               	movlw	1
  7729  001530  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7730  001532  9EF2               	bcf	intcon,7,c	;volatile
  7731  001534  0E55               	movlw	85
  7732  001536  6EA7               	movwf	4007,c	;volatile
  7733  001538  0EAA               	movlw	170
  7734  00153A  6EA7               	movwf	4007,c	;volatile
  7735  00153C  82A6               	bsf	4006,1,c	;volatile
  7736  00153E  D000               	goto	i2l582
  7737  001540                     i2l582:
  7738  001540  B2A6               	btfsc	4006,1,c	;volatile
  7739  001542  D7FE               	goto	i2l582
  7740  001544  B004               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7741  001546  D002               	bra	i2u203_45
  7742  001548  9EF2               	bcf	intcon,7,c	;volatile
  7743  00154A  D001               	bra	i2u203_46
  7744  00154C                     i2u203_45:
  7745  00154C  8EF2               	bsf	intcon,7,c	;volatile
  7746  00154E                     i2u203_46:
  7747  00154E  94A6               	bcf	4006,2,c	;volatile
  7748  001550  0012               	return		;funcret
  7749  001552                     __end_of_Write_b_eep:
  7750                           	opt stack 0
  7751  0000                     pclatu	equ	0xFFB
  7752                           pclath	equ	0xFFA
  7753                           tblptru	equ	0xFF8
  7754                           tblptrh	equ	0xFF7
  7755                           tblptrl	equ	0xFF6
  7756                           tablat	equ	0xFF5
  7757                           prodh	equ	0xFF4
  7758                           prodl	equ	0xFF3
  7759                           intcon	equ	0xFF2
  7760                           intcon2	equ	0xFF1
  7761                           postinc0	equ	0xFEE
  7762                           fsr0h	equ	0xFEA
  7763                           fsr0l	equ	0xFE9
  7764                           wreg	equ	0xFE8
  7765                           postdec1	equ	0xFE5
  7766                           fsr1h	equ	0xFE2
  7767                           fsr1l	equ	0xFE1
  7768                           indf2	equ	0xFDF
  7769                           fsr2h	equ	0xFDA
  7770                           fsr2l	equ	0xFD9
  7771                           status	equ	0xFD8
  7772                           pclatu	equ	0xFFB
  7773                           pclath	equ	0xFFA
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           postinc0	equ	0xFEE
  7783                           fsr0h	equ	0xFEA
  7784                           fsr0l	equ	0xFE9
  7785                           wreg	equ	0xFE8
  7786                           postdec1	equ	0xFE5
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794                           	psect	rparam
  7795  0000                     pclatu	equ	0xFFB
  7796                           pclath	equ	0xFFA
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon2	equ	0xFF1
  7805                           postinc0	equ	0xFEE
  7806                           fsr0h	equ	0xFEA
  7807                           fsr0l	equ	0xFE9
  7808                           wreg	equ	0xFE8
  7809                           postdec1	equ	0xFE5
  7810                           fsr1h	equ	0xFE2
  7811                           fsr1l	equ	0xFE1
  7812                           indf2	equ	0xFDF
  7813                           fsr2h	equ	0xFDA
  7814                           fsr2l	equ	0xFD9
  7815                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      71
    BANK0           160     50      85
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SPIDisassembleDouble->_GenerateChecksum

Critical Paths under _ISR in COMRAM

    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   56151
                                             48 BANK0      2     2      0
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   28050
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           0     0      0   27205
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   18813
                                             33 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     380
                                             18 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5245
                                             18 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4881
                                              6 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3152
                                             31 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6747
                                              6 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                             46 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     781
                                             37 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     216
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     563
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     563
                                             34 COMRAM     2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     346
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      62
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      23
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      62
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     452
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     720
                                             37 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     324
                                             33 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0    1913
                                              9 COMRAM    14    14      0
                            _HLVDInt
                            _INT0Int
                             _SPIInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _HLVDInt                                              0     0      0    1913
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) _EEWriteDouble                                        5     2      3     819
                                              4 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (10) _EEDisassembleDouble                                 3     0      3     104
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) _EEWriteChar                                          2     1      1    1094
                                              4 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Write_b_eep                                         4     1      3     346
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      55       5       53.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     37      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      32        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Oct 30 22:44:50 2015

      __size_of_MotorDriverInit 0024                              l31 166C                              l40 1794  
                            l43 11D2                              l37 177E                              l49 123A  
                            _Kd 0098                              _Ki 009B                              _Kp 009E  
           ?_EEReassembleDouble 0018                    ___ftadd@exp1 0071                    ___ftadd@exp2 0070  
     ImplementJSMotion@CCPinput 0089                    ___ftadd@sign 006F                             l109 0992  
                           l151 044C                             l253 181A                             l262 186C  
                           l270 162C                             l190 12B0                             l191 12F2  
                           l273 1510                             l361 17D6                             l345 14CC  
                           l601 1308                             l610 132E                             l259 1862  
                           l355 139E                             l339 11CC                             l603 130C  
                           l515 16BA                             l604 130E                             l189 12A6  
                           l542 0B72                             l551 18B8                             l607 1328  
                           l199 15C4                             l608 1342                             l609 132A  
                           l490 012C                             l661 16AE                             l662 16B6  
                           l494 015A                             l567 180A                             l496 0190  
                           l850 1848                             l843 185A                             l855 18A2  
                           l857 18AA                             l947 0EB4                             l958 0E8C  
                           l991 0684                             l993 06AE                             l987 064A  
                           l988 085E                             _PR2 000FCB                             _ISR 0008  
                           _abs 168C            __size_of_Write_b_eep 0040                             prod 000FF3  
                           wreg 000FE8                            ?_ISR 0001                 __end_of_INT0Int 1774  
                  ___ftdiv@cntr 0029                 __end_of_HLVDInt 0F6E                      _Delay1TCYx 18A0  
                  ___ftdiv@sign 002E                    __CFG_WDT$OFF 000000                            l1002 0792  
                          l1011 07BC                            l1022 0DBA                            l1034 0D0C  
                          l1019 0DEE                            l1051 1442                            ?_abs 0081  
                          l1028 114C                            l1044 171E                            l1055 0AC4  
                          l3200 0E1C                            l1184 1706                            l2410 1386  
                          l2402 135E                            l3210 0E80                            l3202 0E3C  
                          l3222 0EA6                            l3206 0E54                            l3216 0E94  
                          l3208 0E74                            l3312 0D54                            l3240 0692  
                          l3410 0F86                            l3306 0D2C                            l2522 10EA  
                          l3234 0658                            l3500 0932                            l2380 184C  
                          l3332 0D94                            l3308 0D46                            l2532 1148  
                          l3422 0FC8                            l3414 0FA6                            l3342 0DC8  
                          l2526 111C                            l3262 0716                            l3246 06A4  
                          l3352 0C0C                            l3264 0726                            l3256 06E6  
                          l3432 0374                            l3600 0172                            l2802 1628  
                          l3418 0FB0                            l3194 0E00                            l3354 0C2A  
                          l3282 07E8                            l3274 0772                            l3266 0736  
                          l2570 0A5E                            l2546 09BE                            l2636 183A  
                          l3380 0CAC                            l3372 0C7C                            l2652 12AA  
                          l3292 0838                            l3276 0782                            l3268 0742  
                          l2564 0A42                            l3444 04E0                            l3460 0B2C  
                          l2398 1356                            l2750 167A                            l3198 0E10  
                          l3390 0CE6                            l3382 0CB4                            l3358 0C38  
                          l2582 0AB2                            l2574 0A74                            l3438 03FC  
                          l3470 0BB2                            l3622 01F0                            l3614 01B8  
                          l3550 006E                            l3630 0216                            l3376 0C94  
                          l2576 0A86                            l2568 0A56                            l3536 002E  
                          l3482 089E                            l3386 0CCC                            l2578 0A94  
                          l3650 0296                            l3618 01D4                            l3626 020C  
                          l3562 00C2                            l3570 00FA                            l3554 008A  
                          l3484 08A6                            l2692 1332                            l3636 0234  
                          l3628 0212                            l3580 0108                            l3478 0880  
                          l3398 1418                            l3566 00DE                            l3558 00A6  
                          l3496 08FA                            l2792 1604                            l2688 1312  
                          l3584 0124                            l3666 02F4                            l3586 0134  
                          l2796 1610                            l3668 02F8                            l3596 0164  
                          l2894 1230                            l2886 1220                            u3070 0FC4  
                          u2701 05F8                            u1821 09AA                            u2711 0616  
                          u1840 09E4                            u3507 183C                            u3517 184E  
                          u1845 09DA                            u2921 0D1E                            u2941 0D3C  
                          u2971 0BFA                            u2991 0C1C                 __end_of_PIDInit 148A  
ImplementJSMotion@JoystickValue 0085            ??_EEReassembleDouble 001B                    EEReadChar@ch 001B  
               __end_of_TMR0Int 1880                            abs@a 0081                            _main 001C  
                  ___ftpack@arg 0018                     _DeadbandLow 0046                    ___ftpack@exp 001B  
               __end_of_RTDInit 165E                 __end_of_SPIInit 17F2                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          pclat 000FFA                  ??_EEReadDouble 0021                            prodh 000FF4  
                          prodl 000FF3                            start 0018             __size_of_EEPROMInit 0014  
                  ?_EEWriteChar 0005                    ___ftmul@cntr 0064                    ___param_bank 000010  
                  ___ftmul@sign 0065   __size_of_InitializeInterrupts 000E                           ??_ISR 000A  
                   _Delay10TCYx 184A                __end_of_EEBootUp 11CE                    ___fttol@exp1 0080  
                         ??_abs 0083                    ___fttol@lval 007C                     _Delay1KTCYx 1838  
                   ReadRTDpos@x 0022               RTD2Angle@RTDAngle 0066                           ?_main 0001  
                         _EEADR 000FA9                 __end_of___ftadd 0860                 __end_of___ftdiv 0DF0  
               __end_of___ftneg 172C                 __end_of___ftmul 0D0E                           _T0CON 000FD5  
               __end_of___ftsub 1444                 __end_of___fttol 0AC6                           _T2CON 000FCA  
                         _T3CON 000FB1                           i2l530 1768                           i2l526 107E  
                         i2l551 18C0                           i2l582 1540              __size_of_RTD2Angle 0038  
                         _TMR0H 000FD7                           _TMR0L 000FD6                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                         _PORTE 000F84                           _PORTF 000F85                           _PORTG 000F86  
                         _PORTH 000F87                           _PORTJ 000F88          ??_SPIDisassembleDouble 001D  
                         _TRISD 000F95                           _TRISH 000F99                  __CFG_FCMEN$OFF 000000  
                Read_b_eep@badd 0018             __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054  
        Write_b_eep@GIE_BIT_VAL 0004                    _DeadbandHigh 0044                           _error 00A1  
                 ___ftpack@sign 001C                      _DoubleSPIS 0038                           main@x 0091  
                 ??_ReceiveSPI1 0018                           tablat 000FF5                     ?i2_Busy_eep 0001  
                         status 000FD8                   EEReadDouble@x 0022      __size_of_ImplementJSMotion 0134  
         EEWriteDouble@location 0008             GenerateChecksum@sum 0018                      _ReadRTDpos 1298  
                    _KillMotors 18AC                 __initialization 123C                    __end_of_main 032C  
                _DetectJoystick 1774                  _DetectMovement 11CE                      _Read_b_eep 17F2  
              __end_of_Busy_eep 18BE           EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000  
              __end_of_SendSPI1 1824                __end_of_OpenSPI1 134A                          ??_main 0038  
                 ___fttol@sign1 007B                   __activetblptr 000003               ??_MotorDriverInit 0018  
       DetectMovement@ADCresult 001D                       ??_INT0Int 0001                       ??_HLVDInt 000A  
                     ??_PIDInit 0018                       ??_TMR0Int 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                       ??_RTDInit 0019  
                        _EEDATA 000FA8                     ?_Delay1TCYx 0001                       ??_SPIInit 001B  
                        _CCPR3L 000FB8                          _EECON2 000FA7                __end_of___ftpack 0EB6  
         __size_of_calculatePID 02B6                          i2l2034 175E                          i2l3170 1050  
                        i2l3180 1066                          i2l3176 105C                          i2l3186 1076  
                        i2l2822 13BC                          i2l2826 13C4                          i2l2836 13EC  
                        _INTCON 000FF2                __end_of___lwtoft 1708                          _SPIInt 1880  
             __end_of_RTD2Angle 15C6             __end_of_ReceiveSPI1 186E          __end_of_DetectJoystick 1796  
        __end_of_DetectMovement 123C                OpenSPI1@bus_mode 0018                   _EEWriteDouble 13A0  
                        ___ftge 10B8                       ??___ftadd 006C                       ??___ftdiv 0026  
                     ??___ftneg 001B                       ??___ftmul 0035                       ??___ftsub 0038  
                     ??___fttol 0076                          _intErr 00A4                          clear_0 1242  
                        clear_1 124E             __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0061  
                 main@temporary 0090                    ??_EEPROMInit 0025     __size_of_ImplementPIDMotion 00A8  
                  __pdataCOMRAM 0044                    _calculatePID 032C            __end_of_EEReadDouble 13A0  
             _calculatePID$3293 008A               _calculatePID$3294 008D                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8               ?_GenerateChecksum 0001  
                     ?_EEBootUp 0001                      __accesstop 0060         __end_of__initialization 1292  
            ??_GenerateChecksum 0018                      ___ftadd@f1 0066                      ___ftadd@f2 0069  
                    ___ftge@ff1 0018                      ___ftge@ff2 001B                      _ZeroMotors 0AC6  
                 ___rparam_used 000001                      ___ftdiv@f1 0020                      ___ftdiv@f2 0023  
                    ___ftdiv@f3 002A              EEReadChar@location 001A                      ___ftneg@f1 0018  
                   ?_ReadRTDpos 0019                     ?_KillMotors 0001                    ??_EEReadChar 001A  
                ?_EEWriteDouble 0005                      ___ftmul@f1 002F                      ___ftmul@f2 0032  
               ?_DetectJoystick 0001                 ?_DetectMovement 0018              __end_of_EEPROMInit 1838  
                    ___ftsub@f1 0072                      ___ftsub@f2 0075                      ___fttol@f1 0072  
                __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 15FC                    __pidataBANK0 18CA  
          __size_of_EEWriteChar 0022                     ?_Read_b_eep 0018             __size_of_Delay1TCYx 000C  
             GenerateChecksum@y 0019                      ___lwtoft@c 0020    __size_of_SPIReassembleDouble 0044  
            __end_of_EEReadChar 17D8                      __pbssBANK0 0092                     _ReceiveSPI1 185C  
                    ??_EEBootUp 0023                       ?_Busy_eep 0001                   ?_JoystickInit 0001  
                       ?_SPIInt 0001                       ?_SendSPI1 0001                       ?_OpenSPI1 0018  
                       ?___ftge 0018                    ?_Delay10TCYx 0001                  EEWriteDouble@x 0009  
                       _CCP3CON 000FB7                    ?_Delay1KTCYx 0001                       ?___ftpack 0018  
                 ??_Write_b_eep 0004                       ?___lwtoft 0020                         _HLVDCON 000FD2  
                       _INT0Int 1750                         _HLVDInt 0EB6    __end_of_InitializeInterrupts 18A0  
                       _PIDInit 1444                         _DDouble 003C             __size_of_ReadRTDpos 005C  
           __size_of_KillMotors 000A                   _PIDEnableFlag 00AE                         _SSP1BUF 000FC9  
                       _TMR0Int 186E      ImplementPIDMotion@PIDValue 0085                         _RTDInit 162E  
                       _SPIInit 17D8                         _SPIflag 00AF                EEWriteDouble@dub 0005  
           __size_of_Read_b_eep 001A                  ??_JoystickInit 0018                    ??i2_Busy_eep 0001  
   __size_of_EEReassembleDouble 0044                      ??_Busy_eep 0018                         _Command 00AC  
                   ?_ZeroMotors 0001                 __size_of_SPIInt 0012                      ??_SendSPI1 0018  
               ??_EEWriteDouble 0008                      ??_OpenSPI1 001A             EEWriteChar@location 0006  
                       __Hparam 0000                         __Lparam 0000                 _MotorDriverInit 172C  
               __size_of___ftge 0096                         ___ftadd 05E2                         ___ftdiv 0D0E  
                       ___ftneg 1708                         ___ftmul 0BEA                         ___ftsub 13F4  
                       ___fttol 0994                      _dummy_byte 00B1           __size_of_EEReadDouble 0056  
                  SendSPI1@data 0019                         __pcinit 123C                      ??___ftpack 001D  
               Delay10TCYx@unit 0018                         __ramtop 1000                      _initialize 16B8  
                  SendSPI1@temp 0018                         __ptext0 001C                         __ptext1 16B8  
                       __ptext2 0AC6                         __ptext3 032C                         __ptext4 0994  
                       __ptext5 13F4                         __ptext6 05E2                         __ptext7 1708  
                       __ptext8 10B8                         __ptext9 0D0E                      ??___lwtoft 0023  
                     _T0CONbits 000FD5                    __size_of_ISR 10B0                    __size_of_abs 002C  
            __end_ofi2_Busy_eep 18C6                         _prevErr 00A7   __size_of_SPIDisassembleDouble 003C  
           __end_of_Write_b_eep 1552                    ??_Delay1TCYx 0018                  __pintcode_body 1016  
          end_of_initialization 1292                         int_func 1016               OpenSPI1@smp_phase 0019  
                  _EEReadDouble 134A           ReadRTDpos@LowPosition 001F                         postdec1 000FE5  
                    _motorInput 00AA                       _RTD2Angle 158E                         postinc0 000FEE  
             OpenSPI1@sync_mode 001A              __end_of_Delay1TCYx 18AC                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _PORTCbits 000F82                       _PORTEbits 000F84  
                     _PORTJbits 000F88             __size_of_ZeroMotors 0124                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISEbits 000F96  
                     _TRISFbits 000F97                       _TRISGbits 000F98                       _TRISJbits 000F9A  
       __end_of_MotorDriverInit 1750                ??_DetectJoystick 0018                ??_DetectMovement 001A  
                   ___ftdiv@exp 002D               __size_of_EEBootUp 0080             _SPIReassembleDouble 14CE  
                   _CCP3CONbits 000FB7                  __end_of_SPIInt 1892                    ??_ReadRTDpos 001B  
                  ??_KillMotors 0001                     ___ftmul@exp 0060            _InitializeInterrupts 1892  
                    ?_RTD2Angle 0066       __size_of_GenerateChecksum 0032                    ??_Read_b_eep 001A  
                __end_of___ftge 114E            __size_of_Delay10TCYx 0012                   __pidataCOMRAM 18C6  
    __end_of_ImplementPIDMotion 1016                     ?_initialize 0001                     _Write_b_eep 1512  
          __end_of_JoystickInit 168C            __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 0018  
                     _DoublePtr 0042             start_initialization 123C                 _CurrentVelocity 0095  
                  _CurrentAngle 0092                     __end_of_ISR 10B8                     __end_of_abs 16B8  
            __end_of_ReadRTDpos 12F4              __end_of_KillMotors 18B6                    ?_ReceiveSPI1 0001  
            __end_of_Read_b_eep 180C            EEReadDouble@location 0021                        ??_SPIInt 0001  
             __size_of_Busy_eep 0008            calculatePID@setpoint 0084                   ??_EEWriteChar 0006  
        ReadRTDpos@HighPosition 001E               __size_of_SendSPI1 0018               __size_of_OpenSPI1 0056  
         ?_InitializeInterrupts 0001                        ??___ftge 001E                     __pdataBANK0 00B2  
         ??_SPIReassembleDouble 001B    __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6  
                      ?_INT0Int 0001                        ?_HLVDInt 0001                     __pbssCOMRAM 0038  
             __size_of___lwtoft 0026                   __pcstackBANK0 0060                        ?_PIDInit 0001  
                      ?_TMR0Int 0001              calculatePID@derErr 0087                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001  
                  ??_ZeroMotors 0038             __size_of_initialize 002A          SPIReassembleDouble@dub 001B  
                 EEWriteChar@ch 0005                       __pintcode 0008                     ??_RTD2Angle 0038  
                      ?___ftadd 0066                        ?___ftdiv 0020                        ?___ftneg 0018  
                      ?___ftmul 002F                        ?___ftsub 0072                        ?___fttol 0072  
           __end_of_EEWriteChar 17B8              __end_of_ZeroMotors 0BEA      __end_of_EEReassembleDouble 14CE  
                      _EEBootUp 114E                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0          ??_InitializeInterrupts 0018                        i2u203_45 154C  
                      i2u203_46 154E           __end_of_EEWriteDouble 13F4    __end_of_SPIDisassembleDouble 158E  
                      _PIR1bits 000F9E                        _PIR2bits 000FA1           __size_of_JoystickInit 002E  
                      _SSP1CON1 000FC6                        _TMR0Flag 00B0                _GenerateChecksum 15FC  
                      _SSP1STAT 000FC7                      _ADCON0bits 000FC2                 Write_b_eep@badd 0001  
               Write_b_eep@bdat 0003                   ?_calculatePID 0081                __size_of_INT0Int 0024  
              __size_of_HLVDInt 00B8                __size_of_PIDInit 0046                     _INTCON2bits 000FF1  
              __size_of_TMR0Int 0012                       copy_data0 1286                __size_of_RTDInit 0030  
              __size_of_SPIInit 001A                        _Busy_eep 18B6            __size_of_ReceiveSPI1 0012  
                  _JoystickInit 165E                        _SendSPI1 180C                      _EECON1bits 000FA6  
                      _SetAngle 003F                        _OpenSPI1 12F4          ReadRTDpos@FullPosition 0020  
                      __Hrparam 0000                     _EEWriteChar 1796                        __Lrparam 0000  
                  _JSEnableFlag 00AD                __size_of___ftadd 027E                __size_of___ftdiv 00E2  
              __size_of___ftneg 0024                __size_of___ftmul 0124                __size_of___ftsub 0050  
              __size_of___fttol 0132                    ??_initialize 0038                        ___ftpack 0DF0  
                  ?_Write_b_eep 0001               calculatePID@angle 0081                  ??_calculatePID 0038  
                      ___lwtoft 16E2                      _EEPROMInit 1824                        __ptext10 1298  
                      __ptext11 158E                        __ptext20 1838                        __ptext12 16E2  
                      __ptext21 184A                        __ptext13 0BEA                        __ptext30 18B6  
                      __ptext22 1444                        __ptext14 0DF0                        __ptext31 17B8  
                      __ptext23 172C                        __ptext15 0F6E                        __ptext40 11CE  
                      __ptext32 17F2                        __ptext24 165E                        __ptext16 17D8  
                      __ptext41 1774                        __ptext33 180C                        __ptext25 1892  
                      __ptext17 12F4                        __ptext50 1796                        __ptext34 14CE  
                      __ptext26 1824                        __ptext18 162E                        __ptext51 18BE  
                      __ptext43 186E                        __ptext35 1552                        __ptext27 114E  
                      __ptext19 18A0                        __ptext52 1512                        __ptext44 1880  
                      __ptext36 15FC                        __ptext28 134A                        __ptext45 1750  
                      __ptext37 185C                        __ptext29 148A                        __ptext46 18AC  
                      __ptext38 0860                        __ptext47 0EB6                        __ptext39 168C  
                      __ptext48 13A0                        __ptext49 15C6                    _SSP1CON1bits 000FC6  
            _ImplementPIDMotion 0F6E                   __size_of_main 0310             _EEDisassembleDouble 15C6  
                Delay1TCYx@unit 0018             ?_ImplementPIDMotion 0085              __end_of_initialize 16E2  
                      _loopTime 00B2                      _EEReadChar 17B8                   ??_Delay10TCYx 0018  
                 ??_Delay1KTCYx 0018                    _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0001  
          ??_ImplementPIDMotion 0087                      _INTCONbits 000FF2            _SPIDisassembleDouble 1552  
                      intlevel2 0000                      _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B  
             _ImplementJSMotion 0860     __end_of_SPIReassembleDouble 1512              ?_ImplementJSMotion 0085  
       __size_of_DetectJoystick 0022         __size_of_DetectMovement 006E           ??_EEDisassembleDouble 0004  
           __end_of_Delay10TCYx 185C             ??_ImplementJSMotion 0087          EEDisassembleDouble@dub 0001  
                   ?_EEPROMInit 0001             __end_of_Delay1KTCYx 184A           ?_SPIDisassembleDouble 001A  
      __end_of_GenerateChecksum 162E                      i2_Busy_eep 18BE         SPIDisassembleDouble@dub 001A  
     __end_of_ImplementJSMotion 0994            __end_of_calculatePID 05E2                   ?_EEReadDouble 001E  
                   ?_EEReadChar 0001              _EEReassembleDouble 148A  
