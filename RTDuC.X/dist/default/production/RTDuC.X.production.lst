

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov  4 04:17:02 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  001900                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _DeadbandHigh
    76  001900  00C8               	dw	200
    77                           
    78                           ;initializer for _DeadbandLow
    79  001902  FF38               	dw	65336
    80                           
    81                           	psect	idataBANK0
    82  001904                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _loopTime
    86                           ;PID.c: 5: unsigned char PIDEnableFlag;
    87                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    88                           ;PID.c: 7: double Ki;
    89                           ;PID.c: 8: double Kp;
    90                           ;PID.c: 9: double Kd;
    91                           ;PID.c: 10: double SetAngle;
    92                           ;PID.c: 11: double CurrentAngle;
    93                           ;PID.c: 12: double error;
    94                           ;PID.c: 13: double prevErr;
    95                           ;PID.c: 14: double intErr;
    96                           ;PID.c: 15: int motorInput;
    97  001904  C3                 	db	195
    98  001905  F5                 	db	245
    99  001906  3C                 	db	60
   100  0000                     _ADCON0	set	4034
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON1	set	4033
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADRESH	set	4036
   105  0000                     _ADRESL	set	4035
   106  0000                     _CCP3CON	set	4023
   107  0000                     _CCP3CONbits	set	4023
   108  0000                     _CCPR3L	set	4024
   109  0000                     _EEADR	set	4009
   110  0000                     _EEADRH	set	4010
   111  0000                     _EECON1bits	set	4006
   112  0000                     _EECON2	set	4007
   113  0000                     _EEDATA	set	4008
   114  0000                     _HLVDCON	set	4050
   115  0000                     _INTCON	set	4082
   116  0000                     _INTCON2bits	set	4081
   117  0000                     _INTCONbits	set	4082
   118  0000                     _IPR2bits	set	4002
   119  0000                     _OSCCONbits	set	4051
   120  0000                     _PIE1bits	set	3997
   121  0000                     _PIE2bits	set	4000
   122  0000                     _PIR1bits	set	3998
   123  0000                     _PIR2bits	set	4001
   124  0000                     _PORTA	set	3968
   125  0000                     _PORTAbits	set	3968
   126  0000                     _PORTB	set	3969
   127  0000                     _PORTBbits	set	3969
   128  0000                     _PORTC	set	3970
   129  0000                     _PORTCbits	set	3970
   130  0000                     _PORTD	set	3971
   131  0000                     _PORTE	set	3972
   132  0000                     _PORTEbits	set	3972
   133  0000                     _PORTF	set	3973
   134  0000                     _PORTG	set	3974
   135  0000                     _PORTH	set	3975
   136  0000                     _PORTJ	set	3976
   137  0000                     _PORTJbits	set	3976
   138  0000                     _PR2	set	4043
   139  0000                     _SSP1BUF	set	4041
   140  0000                     _SSP1CON1	set	4038
   141  0000                     _SSP1CON1bits	set	4038
   142  0000                     _SSP1STAT	set	4039
   143  0000                     _SSP1STATbits	set	4039
   144  0000                     _T0CON	set	4053
   145  0000                     _T0CONbits	set	4053
   146  0000                     _T2CON	set	4042
   147  0000                     _T3CON	set	4017
   148  0000                     _TMR0H	set	4055
   149  0000                     _TMR0L	set	4054
   150  0000                     _TRISAbits	set	3986
   151  0000                     _TRISBbits	set	3987
   152  0000                     _TRISCbits	set	3988
   153  0000                     _TRISD	set	3989
   154  0000                     _TRISEbits	set	3990
   155  0000                     _TRISFbits	set	3991
   156  0000                     _TRISGbits	set	3992
   157  0000                     _TRISH	set	3993
   158  0000                     _TRISJbits	set	3994
   159                           
   160                           ; #config settings
   161  0000                     
   162                           	psect	cinit
   163  001272                     __pcinit:
   164                           	opt stack 0
   165  001272                     start_initialization:
   166                           	opt stack 0
   167  001272                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Clear objects allocated to BANK0 (32 bytes)
   171  001272  EE00  F092         	lfsr	0,__pbssBANK0
   172  001276  0E20               	movlw	32
   173  001278                     clear_0:
   174  001278  6AEE               	clrf	postinc0,c
   175  00127A  06E8               	decf	wreg,f,c
   176  00127C  E1FD               	bnz	clear_0
   177                           
   178                           ; Clear objects allocated to COMRAM (12 bytes)
   179  00127E  EE00  F038         	lfsr	0,__pbssCOMRAM
   180  001282  0E0C               	movlw	12
   181  001284                     clear_1:
   182  001284  6AEE               	clrf	postinc0,c
   183  001286  06E8               	decf	wreg,f,c
   184  001288  E1FD               	bnz	clear_1
   185                           
   186                           ; Initialize objects allocated to BANK0 (3 bytes)
   187                           ; load TBLPTR registers with __pidataBANK0
   188  00128A  0E04               	movlw	low __pidataBANK0
   189  00128C  6EF6               	movwf	tblptrl,c
   190  00128E  0E19               	movlw	high __pidataBANK0
   191  001290  6EF7               	movwf	tblptrh,c
   192  001292  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   193  001294  6EF8               	movwf	tblptru,c
   194  001296  0009               	tblrd		*+	;fetch initializer
   195  001298  CFF5 F0B2          	movff	tablat,__pdataBANK0
   196  00129C  0009               	tblrd		*+	;fetch initializer
   197  00129E  CFF5 F0B3          	movff	tablat,__pdataBANK0+1
   198  0012A2  0009               	tblrd		*+	;fetch initializer
   199  0012A4  CFF5 F0B4          	movff	tablat,__pdataBANK0+2
   200                           
   201                           ; Initialize objects allocated to COMRAM (4 bytes)
   202                           ; load TBLPTR registers with __pidataCOMRAM
   203  0012A8  0E00               	movlw	low __pidataCOMRAM
   204  0012AA  6EF6               	movwf	tblptrl,c
   205  0012AC  0E19               	movlw	high __pidataCOMRAM
   206  0012AE  6EF7               	movwf	tblptrh,c
   207  0012B0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   208  0012B2  6EF8               	movwf	tblptru,c
   209  0012B4  EE00  F044         	lfsr	0,__pdataCOMRAM
   210  0012B8  EE10 F004          	lfsr	1,4
   211  0012BC                     copy_data0:
   212  0012BC  0009               	tblrd		*+
   213  0012BE  CFF5 FFEE          	movff	tablat,postinc0
   214  0012C2  50E5               	movf	postdec1,w,c
   215  0012C4  50E1               	movf	fsr1l,w,c
   216  0012C6  E1FA               	bnz	copy_data0
   217  0012C8                     end_of_initialization:
   218                           	opt stack 0
   219  0012C8                     __end_of__initialization:
   220                           	opt stack 0
   221  0012C8  0100               	movlb	0
   222  0012CA  EF0E  F000         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1l	equ	0xFE1
   231                           
   232                           	psect	bssCOMRAM
   233  000038                     __pbssCOMRAM:
   234                           	opt stack 0
   235  000038                     _DoubleSPIS:
   236                           	opt stack 0
   237  000038                     	ds	4
   238  00003C                     _DDouble:
   239                           	opt stack 0
   240  00003C                     	ds	3
   241  00003F                     _SetAngle:
   242                           	opt stack 0
   243  00003F                     	ds	3
   244  000042                     _DoublePtr:
   245                           	opt stack 0
   246  000042                     	ds	2
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           postdec1	equ	0xFE5
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	dataCOMRAM
   257  000044                     __pdataCOMRAM:
   258                           	opt stack 0
   259  000044                     _DeadbandHigh:
   260                           	opt stack 0
   261  000044                     	ds	2
   262  000046                     _DeadbandLow:
   263                           	opt stack 0
   264  000046                     	ds	2
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	bssBANK0
   275  000092                     __pbssBANK0:
   276                           	opt stack 0
   277  000092                     _CurrentAngle:
   278                           	opt stack 0
   279  000092                     	ds	3
   280  000095                     _CurrentVelocity:
   281                           	opt stack 0
   282  000095                     	ds	3
   283  000098                     _Kd:
   284                           	opt stack 0
   285  000098                     	ds	3
   286  00009B                     _Ki:
   287                           	opt stack 0
   288  00009B                     	ds	3
   289  00009E                     _Kp:
   290                           	opt stack 0
   291  00009E                     	ds	3
   292  0000A1                     _error:
   293                           	opt stack 0
   294  0000A1                     	ds	3
   295  0000A4                     _intErr:
   296                           	opt stack 0
   297  0000A4                     	ds	3
   298  0000A7                     _prevErr:
   299                           	opt stack 0
   300  0000A7                     	ds	3
   301  0000AA                     _motorInput:
   302                           	opt stack 0
   303  0000AA                     	ds	2
   304  0000AC                     _Command:
   305                           	opt stack 0
   306  0000AC                     	ds	1
   307  0000AD                     _JSEnableFlag:
   308                           	opt stack 0
   309  0000AD                     	ds	1
   310  0000AE                     _PIDEnableFlag:
   311                           	opt stack 0
   312  0000AE                     	ds	1
   313  0000AF                     _SPIflag:
   314                           	opt stack 0
   315  0000AF                     	ds	1
   316  0000B0                     _TMR0Flag:
   317                           	opt stack 0
   318  0000B0                     	ds	1
   319  0000B1                     _dummy_byte:
   320                           	opt stack 0
   321  0000B1                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           postdec1	equ	0xFE5
   329                           fsr1l	equ	0xFE1
   330                           
   331                           	psect	dataBANK0
   332  0000B2                     __pdataBANK0:
   333                           	opt stack 0
   334  0000B2                     _loopTime:
   335                           	opt stack 0
   336  0000B2                     	ds	3
   337                           tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           tblptrl	equ	0xFF6
   340                           tablat	equ	0xFF5
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           postdec1	equ	0xFE5
   344                           fsr1l	equ	0xFE1
   345                           
   346                           	psect	cstackBANK0
   347  000060                     __pcstackBANK0:
   348                           	opt stack 0
   349  000060                     ___ftmul@exp:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x0
   353  000060                     	ds	1
   354  000061                     ___ftmul@f3_as_product:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x1
   358  000061                     	ds	3
   359  000064                     ___ftmul@cntr:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x4
   363  000064                     	ds	1
   364  000065                     ___ftmul@sign:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x5
   368  000065                     	ds	1
   369  000066                     ?___ftadd:
   370                           	opt stack 0
   371  000066                     ?_RTD2Angle:
   372                           	opt stack 0
   373  000066                     RTD2Angle@RTDAngle:
   374                           	opt stack 0
   375  000066                     ___ftadd@f1:
   376                           	opt stack 0
   377                           
   378                           ; 3 bytes @ 0x6
   379  000066                     	ds	3
   380  000069                     ___ftadd@f2:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x9
   384  000069                     	ds	3
   385  00006C                     ??___ftadd:
   386                           
   387                           ; 0 bytes @ 0xC
   388  00006C                     	ds	3
   389  00006F                     ___ftadd@sign:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0xF
   393  00006F                     	ds	1
   394  000070                     ___ftadd@exp2:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x10
   398  000070                     	ds	1
   399  000071                     ___ftadd@exp1:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x11
   403  000071                     	ds	1
   404  000072                     ?___ftsub:
   405                           	opt stack 0
   406  000072                     ?___fttol:
   407                           	opt stack 0
   408  000072                     ___ftsub@f1:
   409                           	opt stack 0
   410  000072                     ___fttol@f1:
   411                           	opt stack 0
   412                           
   413                           ; 3 bytes @ 0x12
   414  000072                     	ds	3
   415  000075                     ___ftsub@f2:
   416                           	opt stack 0
   417                           
   418                           ; 3 bytes @ 0x15
   419  000075                     	ds	1
   420  000076                     ??___fttol:
   421                           
   422                           ; 0 bytes @ 0x16
   423  000076                     	ds	5
   424  00007B                     ___fttol@sign1:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x1B
   428  00007B                     	ds	1
   429  00007C                     ___fttol@lval:
   430                           	opt stack 0
   431                           
   432                           ; 4 bytes @ 0x1C
   433  00007C                     	ds	4
   434  000080                     ___fttol@exp1:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x20
   438  000080                     	ds	1
   439  000081                     ?_abs:
   440                           	opt stack 0
   441  000081                     abs@a:
   442                           	opt stack 0
   443  000081                     calculatePID@angle:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x21
   447  000081                     	ds	2
   448  000083                     ??_abs:
   449                           
   450                           ; 0 bytes @ 0x23
   451  000083                     	ds	1
   452  000084                     calculatePID@setpoint:
   453                           	opt stack 0
   454                           
   455                           ; 3 bytes @ 0x24
   456  000084                     	ds	1
   457  000085                     ImplementPIDMotion@PIDValue:
   458                           	opt stack 0
   459  000085                     ImplementJSMotion@JoystickValue:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x25
   463  000085                     	ds	2
   464  000087                     ??_ImplementPIDMotion:
   465  000087                     ??_ImplementJSMotion:
   466  000087                     calculatePID@derErr:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x27
   470  000087                     	ds	2
   471  000089                     ImplementJSMotion@CCPinput:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x29
   475  000089                     	ds	1
   476  00008A                     _calculatePID$3341:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0x2A
   480  00008A                     	ds	3
   481  00008D                     _calculatePID$3342:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x2D
   485  00008D                     	ds	3
   486  000090                     main@temporary:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x30
   490  000090                     	ds	1
   491  000091                     main@x:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x31
   495  000091                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	cstackCOMRAM
   506  000001                     __pcstackCOMRAM:
   507                           	opt stack 0
   508  000001                     Write_b_eep@badd:
   509                           	opt stack 0
   510  000001                     EEDisassembleDouble@dub:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x0
   514  000001                     	ds	2
   515  000003                     Write_b_eep@bdat:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x2
   519  000003                     	ds	1
   520  000004                     Write_b_eep@GIE_BIT_VAL:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x3
   524  000004                     	ds	1
   525  000005                     EEWriteChar@ch:
   526                           	opt stack 0
   527  000005                     EEWriteDouble@dub:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x4
   531  000005                     	ds	1
   532  000006                     EEWriteChar@location:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x5
   536  000006                     	ds	2
   537  000008                     EEWriteDouble@location:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x7
   541  000008                     	ds	1
   542  000009                     EEWriteDouble@x:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x8
   546  000009                     	ds	1
   547  00000A                     ??_ISR:
   548                           
   549                           ; 0 bytes @ 0x9
   550  00000A                     	ds	14
   551  000018                     ?_DetectMovement:
   552                           	opt stack 0
   553  000018                     ?___ftpack:
   554                           	opt stack 0
   555  000018                     ?_SPIReassembleDouble:
   556                           	opt stack 0
   557  000018                     ?_EEReassembleDouble:
   558                           	opt stack 0
   559  000018                     ?___ftneg:
   560                           	opt stack 0
   561  000018                     SendSPI1@temp:
   562                           	opt stack 0
   563  000018                     GenerateChecksum@sum:
   564                           	opt stack 0
   565  000018                     OpenSPI1@bus_mode:
   566                           	opt stack 0
   567  000018                     Delay10TCYx@unit:
   568                           	opt stack 0
   569  000018                     Delay1KTCYx@unit:
   570                           	opt stack 0
   571  000018                     Delay1TCYx@unit:
   572                           	opt stack 0
   573  000018                     Read_b_eep@badd:
   574                           	opt stack 0
   575  000018                     ___ftpack@arg:
   576                           	opt stack 0
   577  000018                     ___ftge@ff1:
   578                           	opt stack 0
   579  000018                     ___ftneg@f1:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x17
   583  000018                     	ds	1
   584  000019                     ?_ReadRTDpos:
   585                           	opt stack 0
   586  000019                     SendSPI1@data:
   587                           	opt stack 0
   588  000019                     GenerateChecksum@y:
   589                           	opt stack 0
   590  000019                     OpenSPI1@smp_phase:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x18
   594  000019                     	ds	1
   595  00001A                     ??_DetectMovement:
   596  00001A                     EEReadChar@location:
   597                           	opt stack 0
   598  00001A                     OpenSPI1@sync_mode:
   599                           	opt stack 0
   600  00001A                     SPIDisassembleDouble@dub:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x19
   604  00001A                     	ds	1
   605  00001B                     ??_ReadRTDpos:
   606  00001B                     EEReadChar@ch:
   607                           	opt stack 0
   608  00001B                     ___ftpack@exp:
   609                           	opt stack 0
   610  00001B                     DetectMovement@JoystickResult:
   611                           	opt stack 0
   612  00001B                     SPIReassembleDouble@dub:
   613                           	opt stack 0
   614  00001B                     EEReassembleDouble@dub:
   615                           	opt stack 0
   616  00001B                     ___ftge@ff2:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x1A
   620  00001B                     	ds	1
   621  00001C                     ___ftpack@sign:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x1B
   625  00001C                     	ds	1
   626  00001D                     ??___ftpack:
   627  00001D                     DetectMovement@ADCresult:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x1C
   631  00001D                     	ds	1
   632  00001E                     ??___ftge:
   633  00001E                     ?_EEReadDouble:
   634                           	opt stack 0
   635  00001E                     ReadRTDpos@HighPosition:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x1D
   639  00001E                     	ds	1
   640  00001F                     ReadRTDpos@LowPosition:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1E
   644  00001F                     	ds	1
   645  000020                     ?___ftdiv:
   646                           	opt stack 0
   647  000020                     ?___lwtoft:
   648                           	opt stack 0
   649  000020                     ReadRTDpos@FullPosition:
   650                           	opt stack 0
   651  000020                     ___lwtoft@c:
   652                           	opt stack 0
   653  000020                     ___ftdiv@f1:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x1F
   657  000020                     	ds	1
   658  000021                     EEReadDouble@location:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x20
   662  000021                     	ds	1
   663  000022                     ReadRTDpos@x:
   664                           	opt stack 0
   665  000022                     EEReadDouble@x:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x21
   669  000022                     	ds	1
   670  000023                     ??_EEBootUp:
   671  000023                     ___ftdiv@f2:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x22
   675  000023                     	ds	2
   676  000025                     
   677                           ; 0 bytes @ 0x24
   678  000025                     	ds	1
   679  000026                     ??___ftdiv:
   680                           
   681                           ; 0 bytes @ 0x25
   682  000026                     	ds	3
   683  000029                     ___ftdiv@cntr:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x28
   687  000029                     	ds	1
   688  00002A                     ___ftdiv@f3:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x29
   692  00002A                     	ds	3
   693  00002D                     ___ftdiv@exp:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x2C
   697  00002D                     	ds	1
   698  00002E                     ___ftdiv@sign:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x2D
   702  00002E                     	ds	1
   703  00002F                     ?___ftmul:
   704                           	opt stack 0
   705  00002F                     ___ftmul@f1:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x2E
   709  00002F                     	ds	3
   710  000032                     ___ftmul@f2:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x31
   714  000032                     	ds	3
   715  000035                     ??___ftmul:
   716                           
   717                           ; 0 bytes @ 0x34
   718  000035                     	ds	3
   719  000038                     tblptru	equ	0xFF8
   720                           tblptrh	equ	0xFF7
   721                           tblptrl	equ	0xFF6
   722                           tablat	equ	0xFF5
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postdec1	equ	0xFE5
   726                           fsr1l	equ	0xFE1
   727                           
   728                           ; 0 bytes @ 0x37
   729 ;;
   730 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   731 ;;
   732 ;; *************** function _main *****************
   733 ;; Defined at:
   734 ;;		line 22 in file "RTDuC.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  x               1   49[BANK0 ] unsigned char 
   739 ;;  temporary       1   48[BANK0 ] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;		None               void
   742 ;; Registers used:
   743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;Total ram usage:        2 bytes
   754 ;; Hardware stack levels required when called:   10
   755 ;; This function calls:
   756 ;;		_Delay10TCYx
   757 ;;		_DetectJoystick
   758 ;;		_DetectMovement
   759 ;;		_ImplementJSMotion
   760 ;;		_ImplementPIDMotion
   761 ;;		_RTD2Angle
   762 ;;		_ReadRTDpos
   763 ;;		_ReceiveSPI1
   764 ;;		_SPIDisassembleDouble
   765 ;;		_SPIReassembleDouble
   766 ;;		_SendSPI1
   767 ;;		_calculatePID
   768 ;;		_initialize
   769 ;; This function is called by:
   770 ;;		Startup code after reset
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text0
   775  00001C                     __ptext0:
   776                           	opt stack 0
   777  00001C                     _main:
   778                           	opt stack 21
   779                           
   780                           ;RTDuC.c: 24: unsigned char temporary, x = 0;
   781                           
   782                           ;incstack = 0
   783  00001C  0E00               	movlw	0
   784  00001E  0100               	movlb	0	; () banked
   785  000020  6F91               	movwf	main@x& (0+255),b
   786                           
   787                           ; BSR set to: 0
   788                           ;RTDuC.c: 26: initialize();
   789  000022  EC61  F00B         	call	_initialize	;wreg free
   790                           
   791                           ;RTDuC.c: 28: SSP1BUF = dummy_byte;
   792  000026  C0B1  FFC9         	movff	_dummy_byte,4041	;volatile
   793                           
   794                           ;RTDuC.c: 29: PORTCbits.RC6 = 0;
   795  00002A  9C82               	bcf	3970,6,c	;volatile
   796  00002C  D000               	goto	l3598
   797  00002E                     l3598:
   798                           
   799                           ;RTDuC.c: 32: {
   800                           ;RTDuC.c: 33: if (SPIflag == 1)
   801  00002E  0100               	movlb	0	; () banked
   802  000030  05AF               	decf	_SPIflag& (0+255),w,b
   803  000032  A4D8               	btfss	status,2,c
   804  000034  D0F4               	goto	l3698
   805                           
   806                           ; BSR set to: 0
   807                           ;RTDuC.c: 34: {
   808                           ;RTDuC.c: 35: SPIflag = 0;
   809  000036  0E00               	movlw	0
   810  000038  0100               	movlb	0	; () banked
   811  00003A  6FAF               	movwf	_SPIflag& (0+255),b
   812                           
   813                           ; BSR set to: 0
   814                           ;RTDuC.c: 36: INTCONbits.GIE = 0;
   815  00003C  9EF2               	bcf	intcon,7,c	;volatile
   816                           
   817                           ; BSR set to: 0
   818                           ;RTDuC.c: 37: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   819  00003E  0E02               	movlw	2
   820  000040  0100               	movlb	0	; () banked
   821  000042  19AC               	xorwf	_Command& (0+255),w,b
   822  000044  B4D8               	btfsc	status,2,c
   823  000046  D014               	goto	l3614
   824                           
   825                           ; BSR set to: 0
   826  000048  0E03               	movlw	3
   827  00004A  0100               	movlb	0	; () banked
   828  00004C  19AC               	xorwf	_Command& (0+255),w,b
   829  00004E  B4D8               	btfsc	status,2,c
   830  000050  D00F               	goto	l3614
   831                           
   832                           ; BSR set to: 0
   833  000052  0E04               	movlw	4
   834  000054  0100               	movlb	0	; () banked
   835  000056  19AC               	xorwf	_Command& (0+255),w,b
   836  000058  B4D8               	btfsc	status,2,c
   837  00005A  D00A               	goto	l3614
   838                           
   839                           ; BSR set to: 0
   840  00005C  0E06               	movlw	6
   841  00005E  0100               	movlb	0	; () banked
   842  000060  19AC               	xorwf	_Command& (0+255),w,b
   843  000062  B4D8               	btfsc	status,2,c
   844  000064  D005               	goto	l3614
   845                           
   846                           ; BSR set to: 0
   847  000066  0E08               	movlw	8
   848  000068  0100               	movlb	0	; () banked
   849  00006A  19AC               	xorwf	_Command& (0+255),w,b
   850  00006C  A4D8               	btfss	status,2,c
   851  00006E  D062               	goto	l3648
   852  000070                     l3614:
   853                           
   854                           ; BSR set to: 0
   855                           ;RTDuC.c: 38: {
   856                           ;RTDuC.c: 39: if (Command == 0x02)
   857  000070  0E02               	movlw	2
   858  000072  0100               	movlb	0	; () banked
   859  000074  19AC               	xorwf	_Command& (0+255),w,b
   860  000076  A4D8               	btfss	status,2,c
   861  000078  D009               	goto	l3618
   862                           
   863                           ; BSR set to: 0
   864                           ;RTDuC.c: 40: SPIDisassembleDouble(CurrentAngle);
   865  00007A  C092  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   866  00007E  C093  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   867  000082  C094  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   868  000086  ECC4  F00A         	call	_SPIDisassembleDouble	;wreg free
   869  00008A  D038               	goto	l3634
   870  00008C                     l3618:
   871                           
   872                           ;RTDuC.c: 41: else if (Command == 0x03)
   873  00008C  0E03               	movlw	3
   874  00008E  0100               	movlb	0	; () banked
   875  000090  19AC               	xorwf	_Command& (0+255),w,b
   876  000092  A4D8               	btfss	status,2,c
   877  000094  D009               	goto	l3622
   878                           
   879                           ; BSR set to: 0
   880                           ;RTDuC.c: 42: SPIDisassembleDouble(CurrentVelocity);
   881  000096  C095  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   882  00009A  C096  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   883  00009E  C097  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   884  0000A2  ECC4  F00A         	call	_SPIDisassembleDouble	;wreg free
   885  0000A6  D02A               	goto	l3634
   886  0000A8                     l3622:
   887                           
   888                           ;RTDuC.c: 43: else if (Command == 0x04)
   889  0000A8  0E04               	movlw	4
   890  0000AA  0100               	movlb	0	; () banked
   891  0000AC  19AC               	xorwf	_Command& (0+255),w,b
   892  0000AE  A4D8               	btfss	status,2,c
   893  0000B0  D009               	goto	l3626
   894                           
   895                           ; BSR set to: 0
   896                           ;RTDuC.c: 44: SPIDisassembleDouble(Kp);
   897  0000B2  C09E  F01A         	movff	_Kp,SPIDisassembleDouble@dub
   898  0000B6  C09F  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   899  0000BA  C0A0  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   900  0000BE  ECC4  F00A         	call	_SPIDisassembleDouble	;wreg free
   901  0000C2  D01C               	goto	l3634
   902  0000C4                     l3626:
   903                           
   904                           ;RTDuC.c: 45: else if (Command == 0x06)
   905  0000C4  0E06               	movlw	6
   906  0000C6  0100               	movlb	0	; () banked
   907  0000C8  19AC               	xorwf	_Command& (0+255),w,b
   908  0000CA  A4D8               	btfss	status,2,c
   909  0000CC  D009               	goto	l3630
   910                           
   911                           ; BSR set to: 0
   912                           ;RTDuC.c: 46: SPIDisassembleDouble(Ki);
   913  0000CE  C09B  F01A         	movff	_Ki,SPIDisassembleDouble@dub
   914  0000D2  C09C  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   915  0000D6  C09D  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   916  0000DA  ECC4  F00A         	call	_SPIDisassembleDouble	;wreg free
   917  0000DE  D00E               	goto	l3634
   918  0000E0                     l3630:
   919                           
   920                           ;RTDuC.c: 47: else if (Command == 0x08)
   921  0000E0  0E08               	movlw	8
   922  0000E2  0100               	movlb	0	; () banked
   923  0000E4  19AC               	xorwf	_Command& (0+255),w,b
   924  0000E6  A4D8               	btfss	status,2,c
   925  0000E8  D009               	goto	l3634
   926                           
   927                           ; BSR set to: 0
   928                           ;RTDuC.c: 48: SPIDisassembleDouble(Kd);
   929  0000EA  C098  F01A         	movff	_Kd,SPIDisassembleDouble@dub
   930  0000EE  C099  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   931  0000F2  C09A  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   932  0000F6  ECC4  F00A         	call	_SPIDisassembleDouble	;wreg free
   933  0000FA  D000               	goto	l3634
   934  0000FC                     l3634:
   935                           
   936                           ;RTDuC.c: 50: PORTCbits.RC6 = 0;
   937  0000FC  9C82               	bcf	3970,6,c	;volatile
   938                           
   939                           ;RTDuC.c: 51: for (x = 0; x < 4; x++)
   940  0000FE  0E00               	movlw	0
   941  000100  0100               	movlb	0	; () banked
   942  000102  6F91               	movwf	main@x& (0+255),b
   943  000104  D00F               	goto	l3646
   944                           
   945                           ; BSR set to: 0
   946                           
   947                           ; BSR set to: 0
   948  000106  D012               	goto	l494
   949  000108                     l3642:
   950                           
   951                           ; BSR set to: 0
   952                           ;RTDuC.c: 52: SendSPI1(DoubleSPIS[x]);
   953  000108  0100               	movlb	0	; () banked
   954  00010A  5191               	movf	main@x& (0+255),w,b
   955  00010C  0D01               	mullw	1
   956  00010E  0E38               	movlw	low _DoubleSPIS
   957  000110  24F3               	addwf	prodl,w,c
   958  000112  6ED9               	movwf	fsr2l,c
   959  000114  0E00               	movlw	high _DoubleSPIS
   960  000116  20F4               	addwfc	prodh,w,c
   961  000118  6EDA               	movwf	fsr2h,c
   962  00011A  50DF               	movf	indf2,w,c
   963  00011C  EC22  F00C         	call	_SendSPI1
   964  000120  0100               	movlb	0	; () banked
   965  000122  2B91               	incf	main@x& (0+255),f,b
   966  000124                     l3646:
   967                           
   968                           ; BSR set to: 0
   969  000124  0E03               	movlw	3
   970  000126  0100               	movlb	0	; () banked
   971  000128  6591               	cpfsgt	main@x& (0+255),b
   972  00012A  D7EE               	goto	l3642
   973  00012C                     l494:
   974                           
   975                           ; BSR set to: 0
   976                           ;RTDuC.c: 53: temporary = SSP1BUF;
   977  00012C  CFC9 F090          	movff	4041,main@temporary	;volatile
   978                           
   979                           ;RTDuC.c: 54: PORTCbits.RC6 = 1;
   980  000130  8C82               	bsf	3970,6,c	;volatile
   981                           
   982                           ;RTDuC.c: 55: }
   983  000132  D06E               	goto	l3690
   984  000134                     l3648:
   985                           
   986                           ; BSR set to: 0
   987                           ;RTDuC.c: 56: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   988  000134  0100               	movlb	0	; () banked
   989  000136  05AC               	decf	_Command& (0+255),w,b
   990  000138  B4D8               	btfsc	status,2,c
   991  00013A  D00F               	goto	l498
   992                           
   993                           ; BSR set to: 0
   994  00013C  0E05               	movlw	5
   995  00013E  0100               	movlb	0	; () banked
   996  000140  19AC               	xorwf	_Command& (0+255),w,b
   997  000142  B4D8               	btfsc	status,2,c
   998  000144  D00A               	goto	l498
   999                           
  1000                           ; BSR set to: 0
  1001  000146  0E07               	movlw	7
  1002  000148  0100               	movlb	0	; () banked
  1003  00014A  19AC               	xorwf	_Command& (0+255),w,b
  1004  00014C  B4D8               	btfsc	status,2,c
  1005  00014E  D005               	goto	l498
  1006                           
  1007                           ; BSR set to: 0
  1008  000150  0E09               	movlw	9
  1009  000152  0100               	movlb	0	; () banked
  1010  000154  19AC               	xorwf	_Command& (0+255),w,b
  1011  000156  A4D8               	btfss	status,2,c
  1012  000158  D05B               	goto	l3690
  1013  00015A                     l498:
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;RTDuC.c: 57: {
  1017                           ;RTDuC.c: 58: PORTCbits.RC6 = 0;
  1018  00015A  9C82               	bcf	3970,6,c	;volatile
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;RTDuC.c: 59: for (x = 0; x != 4; x++)
  1022  00015C  0E00               	movlw	0
  1023  00015E  0100               	movlb	0	; () banked
  1024  000160  6F91               	movwf	main@x& (0+255),b
  1025  000162                     l3658:
  1026                           
  1027                           ; BSR set to: 0
  1028  000162  0E04               	movlw	4
  1029  000164  0100               	movlb	0	; () banked
  1030  000166  1991               	xorwf	main@x& (0+255),w,b
  1031  000168  B4D8               	btfsc	status,2,c
  1032  00016A  D011               	goto	l500
  1033  00016C  D001               	goto	l3662
  1034                           
  1035                           ; BSR set to: 0
  1036  00016E  D00F               	goto	l500
  1037  000170                     l3662:
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;RTDuC.c: 60: DoubleSPIS[x] = ReceiveSPI1();
  1041  000170  0100               	movlb	0	; () banked
  1042  000172  5191               	movf	main@x& (0+255),w,b
  1043  000174  0D01               	mullw	1
  1044  000176  0E38               	movlw	low _DoubleSPIS
  1045  000178  24F3               	addwf	prodl,w,c
  1046  00017A  6ED9               	movwf	fsr2l,c
  1047  00017C  0E00               	movlw	high _DoubleSPIS
  1048  00017E  20F4               	addwfc	prodh,w,c
  1049  000180  6EDA               	movwf	fsr2h,c
  1050  000182  EC54  F00C         	call	_ReceiveSPI1	;wreg free
  1051  000186  6EDF               	movwf	indf2,c
  1052  000188  0100               	movlb	0	; () banked
  1053  00018A  2B91               	incf	main@x& (0+255),f,b
  1054  00018C  D7EA               	goto	l3658
  1055  00018E                     l500:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;RTDuC.c: 62: PORTCbits.RC6 = 1;
  1059  00018E  8C82               	bsf	3970,6,c	;volatile
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;RTDuC.c: 64: if (Command == 0x01)
  1063  000190  0100               	movlb	0	; () banked
  1064  000192  05AC               	decf	_Command& (0+255),w,b
  1065  000194  A4D8               	btfss	status,2,c
  1066  000196  D00F               	goto	l3676
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;RTDuC.c: 65: {
  1070                           ;RTDuC.c: 66: SetAngle = SPIReassembleDouble();
  1071  000198  EC82  F00A         	call	_SPIReassembleDouble	;wreg free
  1072  00019C  C018  F03F         	movff	?_SPIReassembleDouble,_SetAngle
  1073  0001A0  C019  F040         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1074  0001A4  C01A  F041         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1075                           
  1076                           ;RTDuC.c: 67: PIDEnableFlag = 3;
  1077  0001A8  0E03               	movlw	3
  1078  0001AA  0100               	movlb	0	; () banked
  1079  0001AC  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  1080                           
  1081                           ; BSR set to: 0
  1082                           ;RTDuC.c: 68: JSEnableFlag = 0;
  1083  0001AE  0E00               	movlw	0
  1084  0001B0  0100               	movlb	0	; () banked
  1085  0001B2  6FAD               	movwf	_JSEnableFlag& (0+255),b
  1086                           
  1087                           ;RTDuC.c: 69: }
  1088  0001B4  D02A               	goto	l3688
  1089  0001B6                     l3676:
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;RTDuC.c: 70: else if (Command == 0x05)
  1093  0001B6  0E05               	movlw	5
  1094  0001B8  0100               	movlb	0	; () banked
  1095  0001BA  19AC               	xorwf	_Command& (0+255),w,b
  1096  0001BC  A4D8               	btfss	status,2,c
  1097  0001BE  D009               	goto	l3680
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;RTDuC.c: 71: {
  1101                           ;RTDuC.c: 72: Kp = SPIReassembleDouble();
  1102  0001C0  EC82  F00A         	call	_SPIReassembleDouble	;wreg free
  1103  0001C4  C018  F09E         	movff	?_SPIReassembleDouble,_Kp
  1104  0001C8  C019  F09F         	movff	?_SPIReassembleDouble+1,_Kp+1
  1105  0001CC  C01A  F0A0         	movff	?_SPIReassembleDouble+2,_Kp+2
  1106                           
  1107                           ;RTDuC.c: 73: }
  1108  0001D0  D01C               	goto	l3688
  1109  0001D2                     l3680:
  1110                           
  1111                           ;RTDuC.c: 74: else if (Command == 0x07)
  1112  0001D2  0E07               	movlw	7
  1113  0001D4  0100               	movlb	0	; () banked
  1114  0001D6  19AC               	xorwf	_Command& (0+255),w,b
  1115  0001D8  A4D8               	btfss	status,2,c
  1116  0001DA  D009               	goto	l3684
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;RTDuC.c: 75: {
  1120                           ;RTDuC.c: 76: Ki = SPIReassembleDouble();
  1121  0001DC  EC82  F00A         	call	_SPIReassembleDouble	;wreg free
  1122  0001E0  C018  F09B         	movff	?_SPIReassembleDouble,_Ki
  1123  0001E4  C019  F09C         	movff	?_SPIReassembleDouble+1,_Ki+1
  1124  0001E8  C01A  F09D         	movff	?_SPIReassembleDouble+2,_Ki+2
  1125                           
  1126                           ;RTDuC.c: 77: }
  1127  0001EC  D00E               	goto	l3688
  1128  0001EE                     l3684:
  1129                           
  1130                           ;RTDuC.c: 78: else if (Command == 0x09)
  1131  0001EE  0E09               	movlw	9
  1132  0001F0  0100               	movlb	0	; () banked
  1133  0001F2  19AC               	xorwf	_Command& (0+255),w,b
  1134  0001F4  A4D8               	btfss	status,2,c
  1135  0001F6  D009               	goto	l3688
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;RTDuC.c: 79: {
  1139                           ;RTDuC.c: 80: Kd = SPIReassembleDouble();
  1140  0001F8  EC82  F00A         	call	_SPIReassembleDouble	;wreg free
  1141  0001FC  C018  F098         	movff	?_SPIReassembleDouble,_Kd
  1142  000200  C019  F099         	movff	?_SPIReassembleDouble+1,_Kd+1
  1143  000204  C01A  F09A         	movff	?_SPIReassembleDouble+2,_Kd+2
  1144  000208  D000               	goto	l3688
  1145  00020A                     l3688:
  1146                           
  1147                           ;RTDuC.c: 81: }
  1148                           ;RTDuC.c: 82: temporary = SSP1BUF;
  1149  00020A  CFC9 F090          	movff	4041,main@temporary	;volatile
  1150  00020E  D000               	goto	l3690
  1151  000210                     l3690:
  1152                           
  1153                           ;RTDuC.c: 84: }
  1154                           ;RTDuC.c: 86: INTCONbits.GIE = 1;
  1155  000210  8EF2               	bsf	intcon,7,c	;volatile
  1156                           
  1157                           ;RTDuC.c: 87: PIE1bits.SSP1IE = 1;
  1158  000212  869D               	bsf	3997,3,c	;volatile
  1159                           
  1160                           ;RTDuC.c: 88: PORTCbits.RC6 = 0;
  1161  000214  9C82               	bcf	3970,6,c	;volatile
  1162                           
  1163                           ;RTDuC.c: 89: Delay10TCYx(10);
  1164  000216  0E0A               	movlw	10
  1165  000218  EC4B  F00C         	call	_Delay10TCYx
  1166  00021C  D000               	goto	l3698
  1167  00021E                     l3698:
  1168                           
  1169                           ;RTDuC.c: 90: }
  1170                           ;RTDuC.c: 91: PORTCbits.RC6 = 1;
  1171  00021E  8C82               	bsf	3970,6,c	;volatile
  1172                           
  1173                           ;RTDuC.c: 92: DetectJoystick();
  1174  000220  ECD6  F00B         	call	_DetectJoystick	;wreg free
  1175                           
  1176                           ;RTDuC.c: 93: PORTCbits.RC6 = 0;
  1177  000224  9C82               	bcf	3970,6,c	;volatile
  1178                           
  1179                           ;RTDuC.c: 94: Delay10TCYx(10);
  1180  000226  0E0A               	movlw	10
  1181  000228  EC4B  F00C         	call	_Delay10TCYx
  1182                           
  1183                           ;RTDuC.c: 95: if (JSEnableFlag == 1)
  1184  00022C  0100               	movlb	0	; () banked
  1185  00022E  05AD               	decf	_JSEnableFlag& (0+255),w,b
  1186  000230  A4D8               	btfss	status,2,c
  1187  000232  D010               	goto	l3718
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;RTDuC.c: 96: {
  1191                           ;RTDuC.c: 97: PORTCbits.RC6 = 1;
  1192  000234  8C82               	bsf	3970,6,c	;volatile
  1193                           
  1194                           ;RTDuC.c: 98: INTCONbits.GIE = 0;
  1195  000236  9EF2               	bcf	intcon,7,c	;volatile
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;RTDuC.c: 99: ImplementJSMotion(DetectMovement());
  1199  000238  EC02  F009         	call	_DetectMovement	;wreg free
  1200  00023C  C018  F085         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1201  000240  C019  F086         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1202  000244  EC4C  F004         	call	_ImplementJSMotion	;wreg free
  1203                           
  1204                           ;RTDuC.c: 100: INTCONbits.GIE = 1;
  1205  000248  8EF2               	bsf	intcon,7,c	;volatile
  1206                           
  1207                           ;RTDuC.c: 101: PORTCbits.RC6 = 0;
  1208  00024A  9C82               	bcf	3970,6,c	;volatile
  1209                           
  1210                           ;RTDuC.c: 102: Delay10TCYx(10);
  1211  00024C  0E0A               	movlw	10
  1212  00024E  EC4B  F00C         	call	_Delay10TCYx
  1213  000252  D000               	goto	l3718
  1214  000254                     l3718:
  1215                           
  1216                           ;RTDuC.c: 103: }
  1217                           ;RTDuC.c: 105: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1218  000254  0100               	movlb	0	; () banked
  1219  000256  05AE               	decf	_PIDEnableFlag& (0+255),w,b
  1220  000258  A4D8               	btfss	status,2,c
  1221  00025A  D031               	goto	l3734
  1222                           
  1223                           ; BSR set to: 0
  1224  00025C  0100               	movlb	0	; () banked
  1225  00025E  05B0               	decf	_TMR0Flag& (0+255),w,b
  1226  000260  A4D8               	btfss	status,2,c
  1227  000262  D02D               	goto	l3734
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;RTDuC.c: 106: {
  1231                           ;RTDuC.c: 107: PORTCbits.RC6 = 1;
  1232  000264  8C82               	bsf	3970,6,c	;volatile
  1233                           
  1234                           ;RTDuC.c: 108: INTCONbits.GIE = 0;
  1235  000266  9EF2               	bcf	intcon,7,c	;volatile
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;RTDuC.c: 109: CurrentAngle = RTD2Angle(ReadRTDpos());
  1239  000268  EC67  F009         	call	_ReadRTDpos	;wreg free
  1240  00026C  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1241  000270  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1242  000274  ECE2  F00A         	call	_RTD2Angle	;wreg free
  1243  000278  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1244  00027C  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1245  000280  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1246                           
  1247                           ;RTDuC.c: 110: calculatePID(CurrentAngle, SetAngle);
  1248  000284  C092  F081         	movff	_CurrentAngle,calculatePID@angle
  1249  000288  C093  F082         	movff	_CurrentAngle+1,calculatePID@angle+1
  1250  00028C  C094  F083         	movff	_CurrentAngle+2,calculatePID@angle+2
  1251  000290  C03F  F084         	movff	_SetAngle,calculatePID@setpoint
  1252  000294  C040  F085         	movff	_SetAngle+1,calculatePID@setpoint+1
  1253  000298  C041  F086         	movff	_SetAngle+2,calculatePID@setpoint+2
  1254  00029C  ECB2  F001         	call	_calculatePID	;wreg free
  1255                           
  1256                           ;RTDuC.c: 111: ImplementPIDMotion(motorInput);
  1257  0002A0  C0AA  F085         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1258  0002A4  C0AB  F086         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1259  0002A8  ECD3  F007         	call	_ImplementPIDMotion	;wreg free
  1260                           
  1261                           ;RTDuC.c: 112: TMR0Flag = 0;
  1262  0002AC  0E00               	movlw	0
  1263  0002AE  0100               	movlb	0	; () banked
  1264  0002B0  6FB0               	movwf	_TMR0Flag& (0+255),b
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;RTDuC.c: 113: INTCONbits.GIE = 1;
  1268  0002B2  8EF2               	bsf	intcon,7,c	;volatile
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;RTDuC.c: 114: PORTCbits.RC6 = 0;
  1272  0002B4  9C82               	bcf	3970,6,c	;volatile
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;RTDuC.c: 115: Delay10TCYx(10);
  1276  0002B6  0E0A               	movlw	10
  1277  0002B8  EC4B  F00C         	call	_Delay10TCYx
  1278                           
  1279                           ;RTDuC.c: 116: }
  1280  0002BC  D6B8               	goto	l3598
  1281  0002BE                     l3734:
  1282                           
  1283                           ;RTDuC.c: 118: else if (PIDEnableFlag == 3)
  1284  0002BE  0E03               	movlw	3
  1285  0002C0  0100               	movlb	0	; () banked
  1286  0002C2  19AE               	xorwf	_PIDEnableFlag& (0+255),w,b
  1287  0002C4  A4D8               	btfss	status,2,c
  1288  0002C6  D02F               	goto	l3754
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;RTDuC.c: 119: {
  1292                           ;RTDuC.c: 120: PORTCbits.RC6 = 1;
  1293  0002C8  8C82               	bsf	3970,6,c	;volatile
  1294                           
  1295                           ;RTDuC.c: 121: INTCONbits.GIE = 0;
  1296  0002CA  9EF2               	bcf	intcon,7,c	;volatile
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;RTDuC.c: 122: TMR0H = 0xDB;
  1300  0002CC  0EDB               	movlw	219
  1301  0002CE  6ED7               	movwf	4055,c	;volatile
  1302                           
  1303                           ;RTDuC.c: 123: TMR0L = 0x60;
  1304  0002D0  0E60               	movlw	96
  1305  0002D2  6ED6               	movwf	4054,c	;volatile
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;RTDuC.c: 124: CurrentAngle = RTD2Angle(ReadRTDpos());
  1309  0002D4  EC67  F009         	call	_ReadRTDpos	;wreg free
  1310  0002D8  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1311  0002DC  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1312  0002E0  ECE2  F00A         	call	_RTD2Angle	;wreg free
  1313  0002E4  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1314  0002E8  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1315  0002EC  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1316                           
  1317                           ;RTDuC.c: 125: calculatePID(CurrentAngle, SetAngle);
  1318  0002F0  C092  F081         	movff	_CurrentAngle,calculatePID@angle
  1319  0002F4  C093  F082         	movff	_CurrentAngle+1,calculatePID@angle+1
  1320  0002F8  C094  F083         	movff	_CurrentAngle+2,calculatePID@angle+2
  1321  0002FC  C03F  F084         	movff	_SetAngle,calculatePID@setpoint
  1322  000300  C040  F085         	movff	_SetAngle+1,calculatePID@setpoint+1
  1323  000304  C041  F086         	movff	_SetAngle+2,calculatePID@setpoint+2
  1324  000308  ECB2  F001         	call	_calculatePID	;wreg free
  1325                           
  1326                           ;RTDuC.c: 126: ImplementPIDMotion(motorInput);
  1327  00030C  C0AA  F085         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1328  000310  C0AB  F086         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1329  000314  ECD3  F007         	call	_ImplementPIDMotion	;wreg free
  1330                           
  1331                           ;RTDuC.c: 127: INTCONbits.GIE = 1;
  1332  000318  8EF2               	bsf	intcon,7,c	;volatile
  1333                           
  1334                           ;RTDuC.c: 129: T0CONbits.TMR0ON = 1;
  1335  00031A  8ED5               	bsf	4053,7,c	;volatile
  1336                           
  1337                           ;RTDuC.c: 130: PORTCbits.RC6 = 0;
  1338  00031C  9C82               	bcf	3970,6,c	;volatile
  1339                           
  1340                           ;RTDuC.c: 131: Delay10TCYx(10);
  1341  00031E  0E0A               	movlw	10
  1342  000320  EC4B  F00C         	call	_Delay10TCYx
  1343                           
  1344                           ;RTDuC.c: 132: }
  1345  000324  D684               	goto	l3598
  1346  000326                     l3754:
  1347                           
  1348                           ;RTDuC.c: 134: else if (TMR0Flag == 1)
  1349  000326  0100               	movlb	0	; () banked
  1350  000328  05B0               	decf	_TMR0Flag& (0+255),w,b
  1351  00032A  A4D8               	btfss	status,2,c
  1352  00032C  D680               	goto	l3598
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;RTDuC.c: 135: {
  1356                           ;RTDuC.c: 136: PORTCbits.RC6 = 1;
  1357  00032E  8C82               	bsf	3970,6,c	;volatile
  1358                           
  1359                           ;RTDuC.c: 137: INTCONbits.GIE = 0;
  1360  000330  9EF2               	bcf	intcon,7,c	;volatile
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;RTDuC.c: 138: CurrentAngle = RTD2Angle(ReadRTDpos());
  1364  000332  EC67  F009         	call	_ReadRTDpos	;wreg free
  1365  000336  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1366  00033A  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1367  00033E  ECE2  F00A         	call	_RTD2Angle	;wreg free
  1368  000342  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1369  000346  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1370  00034A  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1371                           
  1372                           ;RTDuC.c: 139: INTCONbits.GIE = 1;
  1373  00034E  8EF2               	bsf	intcon,7,c	;volatile
  1374                           
  1375                           ;RTDuC.c: 140: TMR0Flag = 0;
  1376  000350  0E00               	movlw	0
  1377  000352  0100               	movlb	0	; () banked
  1378  000354  6FB0               	movwf	_TMR0Flag& (0+255),b
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;RTDuC.c: 141: PORTCbits.RC6 = 0;
  1382  000356  9C82               	bcf	3970,6,c	;volatile
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;RTDuC.c: 142: Delay10TCYx(10);
  1386  000358  0E0A               	movlw	10
  1387  00035A  EC4B  F00C         	call	_Delay10TCYx
  1388  00035E  D667               	goto	l3598
  1389  000360  EF0C  F000         	goto	start
  1390  000364                     __end_of_main:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           prodh	equ	0xFF4
  1397                           prodl	equ	0xFF3
  1398                           intcon	equ	0xFF2
  1399                           postinc0	equ	0xFEE
  1400                           wreg	equ	0xFE8
  1401                           postdec1	equ	0xFE5
  1402                           fsr1l	equ	0xFE1
  1403                           indf2	equ	0xFDF
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           
  1408 ;; *************** function _initialize *****************
  1409 ;; Defined at:
  1410 ;;		line 147 in file "RTDuC.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;		None               void
  1417 ;; Registers used:
  1418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;Total ram usage:        0 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; Hardware stack levels required when called:    9
  1431 ;; This function calls:
  1432 ;;		_EEPROMInit
  1433 ;;		_InitializeInterrupts
  1434 ;;		_JoystickInit
  1435 ;;		_MotorDriverInit
  1436 ;;		_PIDInit
  1437 ;;		_RTDInit
  1438 ;;		_SPIInit
  1439 ;;		_ZeroMotors
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text1
  1446  0016C2                     __ptext1:
  1447                           	opt stack 0
  1448  0016C2                     _initialize:
  1449                           	opt stack 21
  1450                           
  1451                           ;RTDuC.c: 149: while (OSCCONbits.OSTS == 0);
  1452                           
  1453                           ;incstack = 0
  1454  0016C2  D000               	goto	l519
  1455  0016C4                     l519:
  1456  0016C4  A6D3               	btfss	4051,3,c	;volatile
  1457  0016C6  D7FE               	goto	l519
  1458                           
  1459                           ;RTDuC.c: 151: RTDInit();
  1460  0016C8  EC32  F00B         	call	_RTDInit	;wreg free
  1461                           
  1462                           ;RTDuC.c: 152: PORTCbits.RC6 = 1;
  1463  0016CC  8C82               	bsf	3970,6,c	;volatile
  1464                           
  1465                           ;RTDuC.c: 153: SPIInit();
  1466  0016CE  EC08  F00C         	call	_SPIInit	;wreg free
  1467                           
  1468                           ;RTDuC.c: 154: JoystickInit();
  1469  0016D2  EC4A  F00B         	call	_JoystickInit	;wreg free
  1470                           
  1471                           ;RTDuC.c: 155: MotorDriverInit();
  1472  0016D6  ECB2  F00B         	call	_MotorDriverInit	;wreg free
  1473                           
  1474                           ;RTDuC.c: 156: PIDInit();
  1475  0016DA  EC3D  F00A         	call	_PIDInit	;wreg free
  1476                           
  1477                           ;RTDuC.c: 157: EEPROMInit();
  1478  0016DE  EC2E  F00C         	call	_EEPROMInit	;wreg free
  1479                           
  1480                           ;RTDuC.c: 158: ZeroMotors();
  1481  0016E2  EC7F  F005         	call	_ZeroMotors	;wreg free
  1482                           
  1483                           ;RTDuC.c: 160: InitializeInterrupts();
  1484  0016E6  EC66  F00C         	call	_InitializeInterrupts	;wreg free
  1485                           
  1486                           ;RTDuC.c: 162: PORTAbits.RA3 = 1;
  1487  0016EA  8680               	bsf	3968,3,c	;volatile
  1488  0016EC  0012               	return		;funcret
  1489  0016EE                     __end_of_initialize:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           prodh	equ	0xFF4
  1496                           prodl	equ	0xFF3
  1497                           intcon	equ	0xFF2
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           indf2	equ	0xFDF
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _ZeroMotors *****************
  1508 ;; Defined at:
  1509 ;;		line 238 in file "RTDuC.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;		None               void
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:        0 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    8
  1530 ;; This function calls:
  1531 ;;		_ImplementPIDMotion
  1532 ;;		_RTD2Angle
  1533 ;;		_ReadRTDpos
  1534 ;;		___fttol
  1535 ;;		_abs
  1536 ;;		_calculatePID
  1537 ;; This function is called by:
  1538 ;;		_initialize
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text2
  1543  000AFE                     __ptext2:
  1544                           	opt stack 0
  1545  000AFE                     _ZeroMotors:
  1546                           	opt stack 21
  1547                           
  1548                           ;RTDuC.c: 240: CurrentAngle = 2;
  1549                           
  1550                           ;incstack = 0
  1551  000AFE  0E00               	movlw	0
  1552  000B00  0100               	movlb	0	; () banked
  1553  000B02  6F92               	movwf	_CurrentAngle& (0+255),b
  1554  000B04  0E00               	movlw	0
  1555  000B06  0100               	movlb	0	; () banked
  1556  000B08  6F93               	movwf	(_CurrentAngle+1)& (0+255),b
  1557  000B0A  0E40               	movlw	64
  1558  000B0C  0100               	movlb	0	; () banked
  1559  000B0E  6F94               	movwf	(_CurrentAngle+2)& (0+255),b
  1560                           
  1561                           ;RTDuC.c: 241: Ki = 1;
  1562  000B10  0E00               	movlw	0
  1563  000B12  0100               	movlb	0	; () banked
  1564  000B14  6F9B               	movwf	_Ki& (0+255),b
  1565  000B16  0E80               	movlw	128
  1566  000B18  0100               	movlb	0	; () banked
  1567  000B1A  6F9C               	movwf	(_Ki+1)& (0+255),b
  1568  000B1C  0E3F               	movlw	63
  1569  000B1E  0100               	movlb	0	; () banked
  1570  000B20  6F9D               	movwf	(_Ki+2)& (0+255),b
  1571                           
  1572                           ;RTDuC.c: 242: Kp = 2;
  1573  000B22  0E00               	movlw	0
  1574  000B24  0100               	movlb	0	; () banked
  1575  000B26  6F9E               	movwf	_Kp& (0+255),b
  1576  000B28  0E00               	movlw	0
  1577  000B2A  0100               	movlb	0	; () banked
  1578  000B2C  6F9F               	movwf	(_Kp+1)& (0+255),b
  1579  000B2E  0E40               	movlw	64
  1580  000B30  0100               	movlb	0	; () banked
  1581  000B32  6FA0               	movwf	(_Kp+2)& (0+255),b
  1582                           
  1583                           ;RTDuC.c: 243: Kd = 0.05;
  1584  000B34  0ECD               	movlw	205
  1585  000B36  0100               	movlb	0	; () banked
  1586  000B38  6F98               	movwf	_Kd& (0+255),b
  1587  000B3A  0E4C               	movlw	76
  1588  000B3C  0100               	movlb	0	; () banked
  1589  000B3E  6F99               	movwf	(_Kd+1)& (0+255),b
  1590  000B40  0E3D               	movlw	61
  1591  000B42  0100               	movlb	0	; () banked
  1592  000B44  6F9A               	movwf	(_Kd+2)& (0+255),b
  1593                           
  1594                           ;RTDuC.c: 244: TMR0H = 0xDB;
  1595  000B46  0EDB               	movlw	219
  1596  000B48  6ED7               	movwf	4055,c	;volatile
  1597                           
  1598                           ;RTDuC.c: 245: TMR0L = 0x60;
  1599  000B4A  0E60               	movlw	96
  1600  000B4C  6ED6               	movwf	4054,c	;volatile
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;RTDuC.c: 246: T0CONbits.TMR0ON = 1;
  1604  000B4E  8ED5               	bsf	4053,7,c	;volatile
  1605                           
  1606                           ;RTDuC.c: 247: PIDEnableFlag = 3;
  1607  000B50  0E03               	movlw	3
  1608  000B52  0100               	movlb	0	; () banked
  1609  000B54  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  1610                           
  1611                           ;RTDuC.c: 248: SetAngle = 0;
  1612  000B56  0E00               	movlw	0
  1613  000B58  6E3F               	movwf	_SetAngle,c
  1614  000B5A  0E00               	movlw	0
  1615  000B5C  6E40               	movwf	_SetAngle+1,c
  1616  000B5E  0E00               	movlw	0
  1617  000B60  6E41               	movwf	_SetAngle+2,c
  1618  000B62  D000               	goto	l3520
  1619  000B64                     l3520:
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;RTDuC.c: 250: {
  1623                           ;RTDuC.c: 251: CurrentAngle = RTD2Angle(ReadRTDpos());
  1624  000B64  EC67  F009         	call	_ReadRTDpos	;wreg free
  1625  000B68  C019  F066         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1626  000B6C  C01A  F067         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1627  000B70  ECE2  F00A         	call	_RTD2Angle	;wreg free
  1628  000B74  C066  F092         	movff	?_RTD2Angle,_CurrentAngle
  1629  000B78  C067  F093         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1630  000B7C  C068  F094         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1631                           
  1632                           ;RTDuC.c: 252: calculatePID(CurrentAngle, SetAngle);
  1633  000B80  C092  F081         	movff	_CurrentAngle,calculatePID@angle
  1634  000B84  C093  F082         	movff	_CurrentAngle+1,calculatePID@angle+1
  1635  000B88  C094  F083         	movff	_CurrentAngle+2,calculatePID@angle+2
  1636  000B8C  C03F  F084         	movff	_SetAngle,calculatePID@setpoint
  1637  000B90  C040  F085         	movff	_SetAngle+1,calculatePID@setpoint+1
  1638  000B94  C041  F086         	movff	_SetAngle+2,calculatePID@setpoint+2
  1639  000B98  ECB2  F001         	call	_calculatePID	;wreg free
  1640                           
  1641                           ;RTDuC.c: 253: ImplementPIDMotion(motorInput);
  1642  000B9C  C0AA  F085         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1643  000BA0  C0AB  F086         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1644  000BA4  ECD3  F007         	call	_ImplementPIDMotion	;wreg free
  1645                           
  1646                           ;RTDuC.c: 254: while (INTCONbits.TMR0IF == 0);
  1647  000BA8  D000               	goto	l546
  1648  000BAA                     l546:
  1649  000BAA  A4F2               	btfss	intcon,2,c	;volatile
  1650  000BAC  D7FE               	goto	l546
  1651                           
  1652                           ;RTDuC.c: 255: INTCONbits.TMR0IF = 0;
  1653  000BAE  94F2               	bcf	intcon,2,c	;volatile
  1654                           
  1655                           ;RTDuC.c: 256: TMR0H = 0xDB;
  1656  000BB0  0EDB               	movlw	219
  1657  000BB2  6ED7               	movwf	4055,c	;volatile
  1658                           
  1659                           ;RTDuC.c: 257: TMR0L = 0x60;
  1660  000BB4  0E60               	movlw	96
  1661  000BB6  6ED6               	movwf	4054,c	;volatile
  1662                           
  1663                           ;RTDuC.c: 258: }
  1664                           ;RTDuC.c: 259: while (abs(error) > 1);
  1665  000BB8  C0A1  F072         	movff	_error,___fttol@f1
  1666  000BBC  C0A2  F073         	movff	_error+1,___fttol@f1+1
  1667  000BC0  C0A3  F074         	movff	_error+2,___fttol@f1+2
  1668  000BC4  ECE6  F004         	call	___fttol	;wreg free
  1669  000BC8  C072  F081         	movff	?___fttol,abs@a
  1670  000BCC  C073  F082         	movff	?___fttol+1,abs@a+1
  1671  000BD0  EC77  F00B         	call	_abs	;wreg free
  1672  000BD4  0100               	movlb	0	; () banked
  1673  000BD6  BF82               	btfsc	(?_abs+1)& (0+255),7,b
  1674  000BD8  D008               	goto	l3530
  1675  000BDA  0100               	movlb	0	; () banked
  1676  000BDC  5182               	movf	(?_abs+1)& (0+255),w,b
  1677  000BDE  E1C2               	bnz	l3520
  1678  000BE0  0E02               	movlw	2
  1679  000BE2  0100               	movlb	0	; () banked
  1680  000BE4  5D81               	subwf	?_abs& (0+255),w,b
  1681  000BE6  B0D8               	btfsc	status,0,c
  1682  000BE8  D7BD               	goto	l3520
  1683  000BEA                     l3530:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;RTDuC.c: 261: Ki = 0;
  1687  000BEA  0E00               	movlw	0
  1688  000BEC  0100               	movlb	0	; () banked
  1689  000BEE  6F9B               	movwf	_Ki& (0+255),b
  1690  000BF0  0E00               	movlw	0
  1691  000BF2  0100               	movlb	0	; () banked
  1692  000BF4  6F9C               	movwf	(_Ki+1)& (0+255),b
  1693  000BF6  0E00               	movlw	0
  1694  000BF8  0100               	movlb	0	; () banked
  1695  000BFA  6F9D               	movwf	(_Ki+2)& (0+255),b
  1696                           
  1697                           ;RTDuC.c: 262: Kp = 0;
  1698  000BFC  0E00               	movlw	0
  1699  000BFE  0100               	movlb	0	; () banked
  1700  000C00  6F9E               	movwf	_Kp& (0+255),b
  1701  000C02  0E00               	movlw	0
  1702  000C04  0100               	movlb	0	; () banked
  1703  000C06  6F9F               	movwf	(_Kp+1)& (0+255),b
  1704  000C08  0E00               	movlw	0
  1705  000C0A  0100               	movlb	0	; () banked
  1706  000C0C  6FA0               	movwf	(_Kp+2)& (0+255),b
  1707                           
  1708                           ;RTDuC.c: 263: Kd = 0;
  1709  000C0E  0E00               	movlw	0
  1710  000C10  0100               	movlb	0	; () banked
  1711  000C12  6F98               	movwf	_Kd& (0+255),b
  1712  000C14  0E00               	movlw	0
  1713  000C16  0100               	movlb	0	; () banked
  1714  000C18  6F99               	movwf	(_Kd+1)& (0+255),b
  1715  000C1A  0E00               	movlw	0
  1716  000C1C  0100               	movlb	0	; () banked
  1717  000C1E  6F9A               	movwf	(_Kd+2)& (0+255),b
  1718                           
  1719                           ; BSR set to: 0
  1720  000C20  0012               	return		;funcret
  1721  000C22                     __end_of_ZeroMotors:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon	equ	0xFF2
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1l	equ	0xFE1
  1734                           indf2	equ	0xFDF
  1735                           fsr2h	equ	0xFDA
  1736                           fsr2l	equ	0xFD9
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _calculatePID *****************
  1740 ;; Defined at:
  1741 ;;		line 30 in file "PID.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;  angle           3   33[BANK0 ] unsigned char 
  1744 ;;  setpoint        3   36[BANK0 ] unsigned char 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  derErr          3   39[BANK0 ] unsigned char 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;		None               void
  1749 ;; Registers used:
  1750 ;;		wreg, status,2, status,0, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1756 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;Total ram usage:       15 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    7
  1763 ;; This function calls:
  1764 ;;		___ftadd
  1765 ;;		___ftdiv
  1766 ;;		___ftge
  1767 ;;		___ftmul
  1768 ;;		___ftneg
  1769 ;;		___ftsub
  1770 ;;		___fttol
  1771 ;; This function is called by:
  1772 ;;		_main
  1773 ;;		_ZeroMotors
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text3
  1778  000364                     __ptext3:
  1779                           	opt stack 0
  1780  000364                     _calculatePID:
  1781                           	opt stack 21
  1782                           
  1783                           ;PID.c: 32: double derErr;
  1784                           ;PID.c: 33: if (PIDEnableFlag == 3)
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;incstack = 0
  1788  000364  0E03               	movlw	3
  1789  000366  0100               	movlb	0	; () banked
  1790  000368  19AE               	xorwf	_PIDEnableFlag& (0+255),w,b
  1791  00036A  A4D8               	btfss	status,2,c
  1792  00036C  D01F               	goto	l3492
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;PID.c: 34: {
  1796                           ;PID.c: 35: error = 0;
  1797  00036E  0E00               	movlw	0
  1798  000370  0100               	movlb	0	; () banked
  1799  000372  6FA1               	movwf	_error& (0+255),b
  1800  000374  0E00               	movlw	0
  1801  000376  0100               	movlb	0	; () banked
  1802  000378  6FA2               	movwf	(_error+1)& (0+255),b
  1803  00037A  0E00               	movlw	0
  1804  00037C  0100               	movlb	0	; () banked
  1805  00037E  6FA3               	movwf	(_error+2)& (0+255),b
  1806                           
  1807                           ;PID.c: 36: prevErr = 0;
  1808  000380  0E00               	movlw	0
  1809  000382  0100               	movlb	0	; () banked
  1810  000384  6FA7               	movwf	_prevErr& (0+255),b
  1811  000386  0E00               	movlw	0
  1812  000388  0100               	movlb	0	; () banked
  1813  00038A  6FA8               	movwf	(_prevErr+1)& (0+255),b
  1814  00038C  0E00               	movlw	0
  1815  00038E  0100               	movlb	0	; () banked
  1816  000390  6FA9               	movwf	(_prevErr+2)& (0+255),b
  1817                           
  1818                           ;PID.c: 37: intErr = 0;
  1819  000392  0E00               	movlw	0
  1820  000394  0100               	movlb	0	; () banked
  1821  000396  6FA4               	movwf	_intErr& (0+255),b
  1822  000398  0E00               	movlw	0
  1823  00039A  0100               	movlb	0	; () banked
  1824  00039C  6FA5               	movwf	(_intErr+1)& (0+255),b
  1825  00039E  0E00               	movlw	0
  1826  0003A0  0100               	movlb	0	; () banked
  1827  0003A2  6FA6               	movwf	(_intErr+2)& (0+255),b
  1828                           
  1829                           ;PID.c: 38: PIDEnableFlag = 1;
  1830  0003A4  0E01               	movlw	1
  1831  0003A6  0100               	movlb	0	; () banked
  1832  0003A8  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  1833  0003AA  D000               	goto	l3492
  1834  0003AC                     l3492:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;PID.c: 39: }
  1838                           ;PID.c: 41: error = setpoint - angle;
  1839  0003AC  C081  F018         	movff	calculatePID@angle,___ftneg@f1
  1840  0003B0  C082  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  1841  0003B4  C083  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  1842  0003B8  ECA0  F00B         	call	___ftneg	;wreg free
  1843  0003BC  C018  F066         	movff	?___ftneg,___ftadd@f1
  1844  0003C0  C019  F067         	movff	?___ftneg+1,___ftadd@f1+1
  1845  0003C4  C01A  F068         	movff	?___ftneg+2,___ftadd@f1+2
  1846  0003C8  C084  F069         	movff	calculatePID@setpoint,___ftadd@f2
  1847  0003CC  C085  F06A         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  1848  0003D0  C086  F06B         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  1849  0003D4  EC0D  F003         	call	___ftadd	;wreg free
  1850  0003D8  C066  F0A1         	movff	?___ftadd,_error
  1851  0003DC  C067  F0A2         	movff	?___ftadd+1,_error+1
  1852  0003E0  C068  F0A3         	movff	?___ftadd+2,_error+2
  1853                           
  1854                           ;PID.c: 42: if (error > 180)
  1855  0003E4  0E00               	movlw	0
  1856  0003E6  6E18               	movwf	___ftge@ff1,c
  1857  0003E8  0E34               	movlw	52
  1858  0003EA  6E19               	movwf	___ftge@ff1+1,c
  1859  0003EC  0E43               	movlw	67
  1860  0003EE  6E1A               	movwf	___ftge@ff1+2,c
  1861  0003F0  C0A1  F01B         	movff	_error,___ftge@ff2
  1862  0003F4  C0A2  F01C         	movff	_error+1,___ftge@ff2+1
  1863  0003F8  C0A3  F01D         	movff	_error+2,___ftge@ff2+2
  1864  0003FC  EC77  F008         	call	___ftge	;wreg free
  1865  000400  B0D8               	btfsc	status,0,c
  1866  000402  D018               	goto	l3498
  1867                           
  1868                           ;PID.c: 43: error -= 360;
  1869  000404  C0A1  F072         	movff	_error,___ftsub@f1
  1870  000408  C0A2  F073         	movff	_error+1,___ftsub@f1+1
  1871  00040C  C0A3  F074         	movff	_error+2,___ftsub@f1+2
  1872  000410  0E00               	movlw	0
  1873  000412  0100               	movlb	0	; () banked
  1874  000414  6F75               	movwf	___ftsub@f2& (0+255),b
  1875  000416  0EB4               	movlw	180
  1876  000418  0100               	movlb	0	; () banked
  1877  00041A  6F76               	movwf	(___ftsub@f2+1)& (0+255),b
  1878  00041C  0E43               	movlw	67
  1879  00041E  0100               	movlb	0	; () banked
  1880  000420  6F77               	movwf	(___ftsub@f2+2)& (0+255),b
  1881  000422  EC15  F00A         	call	___ftsub	;wreg free
  1882  000426  C072  F0A1         	movff	?___ftsub,_error
  1883  00042A  C073  F0A2         	movff	?___ftsub+1,_error+1
  1884  00042E  C074  F0A3         	movff	?___ftsub+2,_error+2
  1885  000432  D028               	goto	l151
  1886  000434                     l3498:
  1887                           
  1888                           ;PID.c: 44: else if (error < -180)
  1889  000434  C0A1  F018         	movff	_error,___ftge@ff1
  1890  000438  C0A2  F019         	movff	_error+1,___ftge@ff1+1
  1891  00043C  C0A3  F01A         	movff	_error+2,___ftge@ff1+2
  1892  000440  0E00               	movlw	0
  1893  000442  6E1B               	movwf	___ftge@ff2,c
  1894  000444  0E34               	movlw	52
  1895  000446  6E1C               	movwf	___ftge@ff2+1,c
  1896  000448  0EC3               	movlw	195
  1897  00044A  6E1D               	movwf	___ftge@ff2+2,c
  1898  00044C  EC77  F008         	call	___ftge	;wreg free
  1899  000450  B0D8               	btfsc	status,0,c
  1900  000452  D018               	goto	l151
  1901                           
  1902                           ;PID.c: 45: error += 360;
  1903  000454  C0A1  F066         	movff	_error,___ftadd@f1
  1904  000458  C0A2  F067         	movff	_error+1,___ftadd@f1+1
  1905  00045C  C0A3  F068         	movff	_error+2,___ftadd@f1+2
  1906  000460  0E00               	movlw	0
  1907  000462  0100               	movlb	0	; () banked
  1908  000464  6F69               	movwf	___ftadd@f2& (0+255),b
  1909  000466  0EB4               	movlw	180
  1910  000468  0100               	movlb	0	; () banked
  1911  00046A  6F6A               	movwf	(___ftadd@f2+1)& (0+255),b
  1912  00046C  0E43               	movlw	67
  1913  00046E  0100               	movlb	0	; () banked
  1914  000470  6F6B               	movwf	(___ftadd@f2+2)& (0+255),b
  1915  000472  EC0D  F003         	call	___ftadd	;wreg free
  1916  000476  C066  F0A1         	movff	?___ftadd,_error
  1917  00047A  C067  F0A2         	movff	?___ftadd+1,_error+1
  1918  00047E  C068  F0A3         	movff	?___ftadd+2,_error+2
  1919  000482  D000               	goto	l151
  1920  000484                     l151:
  1921                           
  1922                           ;PID.c: 47: derErr = error - prevErr;
  1923  000484  C0A7  F018         	movff	_prevErr,___ftneg@f1
  1924  000488  C0A8  F019         	movff	_prevErr+1,___ftneg@f1+1
  1925  00048C  C0A9  F01A         	movff	_prevErr+2,___ftneg@f1+2
  1926  000490  ECA0  F00B         	call	___ftneg	;wreg free
  1927  000494  C018  F066         	movff	?___ftneg,___ftadd@f1
  1928  000498  C019  F067         	movff	?___ftneg+1,___ftadd@f1+1
  1929  00049C  C01A  F068         	movff	?___ftneg+2,___ftadd@f1+2
  1930  0004A0  C0A1  F069         	movff	_error,___ftadd@f2
  1931  0004A4  C0A2  F06A         	movff	_error+1,___ftadd@f2+1
  1932  0004A8  C0A3  F06B         	movff	_error+2,___ftadd@f2+2
  1933  0004AC  EC0D  F003         	call	___ftadd	;wreg free
  1934  0004B0  C066  F087         	movff	?___ftadd,calculatePID@derErr
  1935  0004B4  C067  F088         	movff	?___ftadd+1,calculatePID@derErr+1
  1936  0004B8  C068  F089         	movff	?___ftadd+2,calculatePID@derErr+2
  1937                           
  1938                           ;PID.c: 48: intErr += error;
  1939  0004BC  C0A4  F066         	movff	_intErr,___ftadd@f1
  1940  0004C0  C0A5  F067         	movff	_intErr+1,___ftadd@f1+1
  1941  0004C4  C0A6  F068         	movff	_intErr+2,___ftadd@f1+2
  1942  0004C8  C0A1  F069         	movff	_error,___ftadd@f2
  1943  0004CC  C0A2  F06A         	movff	_error+1,___ftadd@f2+1
  1944  0004D0  C0A3  F06B         	movff	_error+2,___ftadd@f2+2
  1945  0004D4  EC0D  F003         	call	___ftadd	;wreg free
  1946  0004D8  C066  F0A4         	movff	?___ftadd,_intErr
  1947  0004DC  C067  F0A5         	movff	?___ftadd+1,_intErr+1
  1948  0004E0  C068  F0A6         	movff	?___ftadd+2,_intErr+2
  1949                           
  1950                           ;PID.c: 49: if (intErr > 2000)
  1951  0004E4  0E00               	movlw	0
  1952  0004E6  6E18               	movwf	___ftge@ff1,c
  1953  0004E8  0EFA               	movlw	250
  1954  0004EA  6E19               	movwf	___ftge@ff1+1,c
  1955  0004EC  0E44               	movlw	68
  1956  0004EE  6E1A               	movwf	___ftge@ff1+2,c
  1957  0004F0  C0A4  F01B         	movff	_intErr,___ftge@ff2
  1958  0004F4  C0A5  F01C         	movff	_intErr+1,___ftge@ff2+1
  1959  0004F8  C0A6  F01D         	movff	_intErr+2,___ftge@ff2+2
  1960  0004FC  EC77  F008         	call	___ftge	;wreg free
  1961  000500  B0D8               	btfsc	status,0,c
  1962  000502  D00A               	goto	l3504
  1963                           
  1964                           ;PID.c: 50: intErr = 2000;
  1965  000504  0E00               	movlw	0
  1966  000506  0100               	movlb	0	; () banked
  1967  000508  6FA4               	movwf	_intErr& (0+255),b
  1968  00050A  0EFA               	movlw	250
  1969  00050C  0100               	movlb	0	; () banked
  1970  00050E  6FA5               	movwf	(_intErr+1)& (0+255),b
  1971  000510  0E44               	movlw	68
  1972  000512  0100               	movlb	0	; () banked
  1973  000514  6FA6               	movwf	(_intErr+2)& (0+255),b
  1974  000516  D000               	goto	l3504
  1975  000518                     l3504:
  1976                           
  1977                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  1978  000518  C0A4  F032         	movff	_intErr,___ftmul@f2
  1979  00051C  C0A5  F033         	movff	_intErr+1,___ftmul@f2+1
  1980  000520  C0A6  F034         	movff	_intErr+2,___ftmul@f2+2
  1981  000524  C09B  F02F         	movff	_Ki,___ftmul@f1
  1982  000528  C09C  F030         	movff	_Ki+1,___ftmul@f1+1
  1983  00052C  C09D  F031         	movff	_Ki+2,___ftmul@f1+2
  1984  000530  EC11  F006         	call	___ftmul	;wreg free
  1985  000534  C02F  F08A         	movff	?___ftmul,_calculatePID$3341
  1986  000538  C030  F08B         	movff	?___ftmul+1,_calculatePID$3341+1
  1987  00053C  C031  F08C         	movff	?___ftmul+2,_calculatePID$3341+2
  1988                           
  1989                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  1990  000540  C0B2  F032         	movff	_loopTime,___ftmul@f2
  1991  000544  C0B3  F033         	movff	_loopTime+1,___ftmul@f2+1
  1992  000548  C0B4  F034         	movff	_loopTime+2,___ftmul@f2+2
  1993  00054C  C08A  F02F         	movff	_calculatePID$3341,___ftmul@f1
  1994  000550  C08B  F030         	movff	_calculatePID$3341+1,___ftmul@f1+1
  1995  000554  C08C  F031         	movff	_calculatePID$3341+2,___ftmul@f1+2
  1996  000558  EC11  F006         	call	___ftmul	;wreg free
  1997  00055C  C02F  F069         	movff	?___ftmul,___ftadd@f2
  1998  000560  C030  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  1999  000564  C031  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  2000  000568  C0A1  F032         	movff	_error,___ftmul@f2
  2001  00056C  C0A2  F033         	movff	_error+1,___ftmul@f2+1
  2002  000570  C0A3  F034         	movff	_error+2,___ftmul@f2+2
  2003  000574  C09E  F02F         	movff	_Kp,___ftmul@f1
  2004  000578  C09F  F030         	movff	_Kp+1,___ftmul@f1+1
  2005  00057C  C0A0  F031         	movff	_Kp+2,___ftmul@f1+2
  2006  000580  EC11  F006         	call	___ftmul	;wreg free
  2007  000584  C02F  F066         	movff	?___ftmul,___ftadd@f1
  2008  000588  C030  F067         	movff	?___ftmul+1,___ftadd@f1+1
  2009  00058C  C031  F068         	movff	?___ftmul+2,___ftadd@f1+2
  2010  000590  EC0D  F003         	call	___ftadd	;wreg free
  2011  000594  C066  F08D         	movff	?___ftadd,_calculatePID$3342
  2012  000598  C067  F08E         	movff	?___ftadd+1,_calculatePID$3342+1
  2013  00059C  C068  F08F         	movff	?___ftadd+2,_calculatePID$3342+2
  2014                           
  2015                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2016  0005A0  C098  F032         	movff	_Kd,___ftmul@f2
  2017  0005A4  C099  F033         	movff	_Kd+1,___ftmul@f2+1
  2018  0005A8  C09A  F034         	movff	_Kd+2,___ftmul@f2+2
  2019  0005AC  C0B2  F023         	movff	_loopTime,___ftdiv@f2
  2020  0005B0  C0B3  F024         	movff	_loopTime+1,___ftdiv@f2+1
  2021  0005B4  C0B4  F025         	movff	_loopTime+2,___ftdiv@f2+2
  2022  0005B8  C087  F020         	movff	calculatePID@derErr,___ftdiv@f1
  2023  0005BC  C088  F021         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2024  0005C0  C089  F022         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2025  0005C4  ECA3  F006         	call	___ftdiv	;wreg free
  2026  0005C8  C020  F02F         	movff	?___ftdiv,___ftmul@f1
  2027  0005CC  C021  F030         	movff	?___ftdiv+1,___ftmul@f1+1
  2028  0005D0  C022  F031         	movff	?___ftdiv+2,___ftmul@f1+2
  2029  0005D4  EC11  F006         	call	___ftmul	;wreg free
  2030  0005D8  C02F  F069         	movff	?___ftmul,___ftadd@f2
  2031  0005DC  C030  F06A         	movff	?___ftmul+1,___ftadd@f2+1
  2032  0005E0  C031  F06B         	movff	?___ftmul+2,___ftadd@f2+2
  2033  0005E4  C08D  F066         	movff	_calculatePID$3342,___ftadd@f1
  2034  0005E8  C08E  F067         	movff	_calculatePID$3342+1,___ftadd@f1+1
  2035  0005EC  C08F  F068         	movff	_calculatePID$3342+2,___ftadd@f1+2
  2036  0005F0  EC0D  F003         	call	___ftadd	;wreg free
  2037  0005F4  C066  F072         	movff	?___ftadd,___fttol@f1
  2038  0005F8  C067  F073         	movff	?___ftadd+1,___fttol@f1+1
  2039  0005FC  C068  F074         	movff	?___ftadd+2,___fttol@f1+2
  2040  000600  ECE6  F004         	call	___fttol	;wreg free
  2041  000604  C072  F0AA         	movff	?___fttol,_motorInput
  2042  000608  C073  F0AB         	movff	?___fttol+1,_motorInput+1
  2043                           
  2044                           ;PID.c: 54: prevErr = error;
  2045  00060C  C0A1  F0A7         	movff	_error,_prevErr
  2046  000610  C0A2  F0A8         	movff	_error+1,_prevErr+1
  2047  000614  C0A3  F0A9         	movff	_error+2,_prevErr+2
  2048  000618  0012               	return		;funcret
  2049  00061A                     __end_of_calculatePID:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodh	equ	0xFF4
  2056                           prodl	equ	0xFF3
  2057                           intcon	equ	0xFF2
  2058                           postinc0	equ	0xFEE
  2059                           wreg	equ	0xFE8
  2060                           postdec1	equ	0xFE5
  2061                           fsr1l	equ	0xFE1
  2062                           indf2	equ	0xFDF
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function ___fttol *****************
  2068 ;; Defined at:
  2069 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  f1              3   18[BANK0 ] float 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  lval            4   28[BANK0 ] unsigned long 
  2074 ;;  exp1            1   32[BANK0 ] unsigned char 
  2075 ;;  sign1           1   27[BANK0 ] unsigned char 
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  4   18[BANK0 ] long 
  2078 ;; Registers used:
  2079 ;;		wreg, status,2, status,0
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;Total ram usage:       15 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    4
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_calculatePID
  2096 ;;		_ZeroMotors
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text4
  2101  0009CC                     __ptext4:
  2102                           	opt stack 0
  2103  0009CC                     ___fttol:
  2104                           	opt stack 23
  2105                           
  2106                           ;incstack = 0
  2107  0009CC  C074  F076         	movff	___fttol@f1+2,??___fttol
  2108  0009D0  0100               	movlb	0	; () banked
  2109  0009D2  6B77               	clrf	(??___fttol+1)& (0+255),b
  2110  0009D4  6B78               	clrf	(??___fttol+2)& (0+255),b
  2111  0009D6  0100               	movlb	0	; () banked
  2112  0009D8  3573               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2113  0009DA  0100               	movlb	0	; () banked
  2114  0009DC  3776               	rlcf	??___fttol& (0+255),f,b
  2115  0009DE  E301               	bnc	u1821
  2116  0009E0  8177               	bsf	(??___fttol+1)& (0+255),0,b
  2117  0009E2                     u1821:
  2118  0009E2  0100               	movlb	0	; () banked
  2119  0009E4  5176               	movf	??___fttol& (0+255),w,b
  2120  0009E6  0100               	movlb	0	; () banked
  2121  0009E8  6F80               	movwf	___fttol@exp1& (0+255),b
  2122  0009EA  0100               	movlb	0	; () banked
  2123  0009EC  5180               	movf	___fttol@exp1& (0+255),w,b
  2124  0009EE  A4D8               	btfss	status,2,c
  2125  0009F0  D002               	goto	l2578
  2126  0009F2  D051               	goto	l2602
  2127                           
  2128                           ; BSR set to: 0
  2129                           
  2130                           ; BSR set to: 0
  2131  0009F4  D083               	goto	l1059
  2132  0009F6                     l2578:
  2133                           
  2134                           ; BSR set to: 0
  2135  0009F6  0E17               	movlw	23
  2136  0009F8  0100               	movlb	0	; () banked
  2137  0009FA  6F76               	movwf	??___fttol& (0+255),b
  2138  0009FC  C072  F077         	movff	___fttol@f1,??___fttol+1
  2139  000A00  C073  F078         	movff	___fttol@f1+1,??___fttol+2
  2140  000A04  C074  F079         	movff	___fttol@f1+2,??___fttol+3
  2141  000A08  0100               	movlb	0	; () banked
  2142  000A0A  2976               	incf	??___fttol& (0+255),w,b
  2143  000A0C  0100               	movlb	0	; () banked
  2144  000A0E  6F7A               	movwf	(??___fttol+4)& (0+255),b
  2145  000A10  D005               	goto	u1840
  2146  000A12                     u1845:
  2147  000A12  0100               	movlb	0	; () banked
  2148  000A14  90D8               	bcf	status,0,c
  2149  000A16  3379               	rrcf	(??___fttol+3)& (0+255),f,b
  2150  000A18  3378               	rrcf	(??___fttol+2)& (0+255),f,b
  2151  000A1A  3377               	rrcf	(??___fttol+1)& (0+255),f,b
  2152  000A1C                     u1840:
  2153  000A1C  0100               	movlb	0	; () banked
  2154  000A1E  2F7A               	decfsz	(??___fttol+4)& (0+255),f,b
  2155  000A20  D7F8               	goto	u1845
  2156  000A22  0100               	movlb	0	; () banked
  2157  000A24  5177               	movf	(??___fttol+1)& (0+255),w,b
  2158  000A26  0100               	movlb	0	; () banked
  2159  000A28  6F7B               	movwf	___fttol@sign1& (0+255),b
  2160                           
  2161                           ; BSR set to: 0
  2162  000A2A  0100               	movlb	0	; () banked
  2163  000A2C  8F73               	bsf	(___fttol@f1+1)& (0+255),7,b
  2164                           
  2165                           ; BSR set to: 0
  2166  000A2E  0EFF               	movlw	255
  2167  000A30  0100               	movlb	0	; () banked
  2168  000A32  1772               	andwf	___fttol@f1& (0+255),f,b
  2169  000A34  0EFF               	movlw	255
  2170  000A36  0100               	movlb	0	; () banked
  2171  000A38  1773               	andwf	(___fttol@f1+1)& (0+255),f,b
  2172  000A3A  0E00               	movlw	0
  2173  000A3C  0100               	movlb	0	; () banked
  2174  000A3E  1774               	andwf	(___fttol@f1+2)& (0+255),f,b
  2175                           
  2176                           ; BSR set to: 0
  2177  000A40  0100               	movlb	0	; () banked
  2178  000A42  5172               	movf	___fttol@f1& (0+255),w,b
  2179  000A44  0100               	movlb	0	; () banked
  2180  000A46  6F7C               	movwf	___fttol@lval& (0+255),b
  2181  000A48  0100               	movlb	0	; () banked
  2182  000A4A  5173               	movf	(___fttol@f1+1)& (0+255),w,b
  2183  000A4C  0100               	movlb	0	; () banked
  2184  000A4E  6F7D               	movwf	(___fttol@lval+1)& (0+255),b
  2185  000A50  0100               	movlb	0	; () banked
  2186  000A52  5174               	movf	(___fttol@f1+2)& (0+255),w,b
  2187  000A54  0100               	movlb	0	; () banked
  2188  000A56  6F7E               	movwf	(___fttol@lval+2)& (0+255),b
  2189  000A58  0100               	movlb	0	; () banked
  2190  000A5A  6B7F               	clrf	(___fttol@lval+3)& (0+255),b
  2191                           
  2192                           ; BSR set to: 0
  2193  000A5C  0E8E               	movlw	142
  2194  000A5E  0100               	movlb	0	; () banked
  2195  000A60  5F80               	subwf	___fttol@exp1& (0+255),f,b
  2196                           
  2197                           ; BSR set to: 0
  2198  000A62  0100               	movlb	0	; () banked
  2199  000A64  AF80               	btfss	___fttol@exp1& (0+255),7,b
  2200  000A66  D013               	goto	l2600
  2201                           
  2202                           ; BSR set to: 0
  2203  000A68  0100               	movlb	0	; () banked
  2204  000A6A  5180               	movf	___fttol@exp1& (0+255),w,b
  2205  000A6C  0A80               	xorlw	128
  2206  000A6E  0F8F               	addlw	143
  2207  000A70  B0D8               	btfsc	status,0,c
  2208  000A72  D003               	goto	l2596
  2209  000A74  D010               	goto	l2602
  2210                           
  2211                           ; BSR set to: 0
  2212                           
  2213                           ; BSR set to: 0
  2214  000A76  D042               	goto	l1059
  2215                           
  2216                           ; BSR set to: 0
  2217  000A78  D000               	goto	l2596
  2218  000A7A                     l2596:
  2219                           
  2220                           ; BSR set to: 0
  2221  000A7A  0100               	movlb	0	; () banked
  2222  000A7C  90D8               	bcf	status,0,c
  2223  000A7E  337F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2224  000A80  337E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2225  000A82  337D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2226  000A84  337C               	rrcf	___fttol@lval& (0+255),f,b
  2227                           
  2228                           ; BSR set to: 0
  2229  000A86  0100               	movlb	0	; () banked
  2230  000A88  3F80               	incfsz	___fttol@exp1& (0+255),f,b
  2231  000A8A  D7F7               	goto	l2596
  2232                           
  2233                           ; BSR set to: 0
  2234  000A8C  D01F               	goto	l2610
  2235  000A8E                     l2600:
  2236                           
  2237                           ; BSR set to: 0
  2238  000A8E  0E17               	movlw	23
  2239  000A90  0100               	movlb	0	; () banked
  2240  000A92  6580               	cpfsgt	___fttol@exp1& (0+255),b
  2241  000A94  D014               	goto	l2608
  2242  000A96                     l2602:
  2243                           
  2244                           ; BSR set to: 0
  2245  000A96  0E00               	movlw	0
  2246  000A98  0100               	movlb	0	; () banked
  2247  000A9A  6F72               	movwf	?___fttol& (0+255),b
  2248  000A9C  0E00               	movlw	0
  2249  000A9E  6F73               	movwf	(?___fttol+1)& (0+255),b
  2250  000AA0  0E00               	movlw	0
  2251  000AA2  6F74               	movwf	(?___fttol+2)& (0+255),b
  2252  000AA4  0E00               	movlw	0
  2253  000AA6  6F75               	movwf	(?___fttol+3)& (0+255),b
  2254                           
  2255                           ; BSR set to: 0
  2256  000AA8  D029               	goto	l1059
  2257                           
  2258                           ; BSR set to: 0
  2259  000AAA  D009               	goto	l2608
  2260  000AAC                     l2606:
  2261                           
  2262                           ; BSR set to: 0
  2263  000AAC  0100               	movlb	0	; () banked
  2264  000AAE  90D8               	bcf	status,0,c
  2265  000AB0  377C               	rlcf	___fttol@lval& (0+255),f,b
  2266  000AB2  377D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2267  000AB4  377E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2268  000AB6  377F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2269  000AB8  0100               	movlb	0	; () banked
  2270  000ABA  0780               	decf	___fttol@exp1& (0+255),f,b
  2271  000ABC  D000               	goto	l2608
  2272  000ABE                     l2608:
  2273                           
  2274                           ; BSR set to: 0
  2275  000ABE  0100               	movlb	0	; () banked
  2276  000AC0  5180               	movf	___fttol@exp1& (0+255),w,b
  2277  000AC2  0100               	movlb	0	; () banked
  2278  000AC4  B4D8               	btfsc	status,2,c
  2279  000AC6  D002               	goto	l2610
  2280  000AC8  D7F1               	goto	l2606
  2281                           
  2282                           ; BSR set to: 0
  2283  000ACA  D000               	goto	l2610
  2284  000ACC                     l2610:
  2285                           
  2286                           ; BSR set to: 0
  2287  000ACC  0100               	movlb	0	; () banked
  2288  000ACE  517B               	movf	___fttol@sign1& (0+255),w,b
  2289  000AD0  0100               	movlb	0	; () banked
  2290  000AD2  B4D8               	btfsc	status,2,c
  2291  000AD4  D00A               	goto	l2614
  2292                           
  2293                           ; BSR set to: 0
  2294  000AD6  0100               	movlb	0	; () banked
  2295  000AD8  1F7F               	comf	(___fttol@lval+3)& (0+255),f,b
  2296  000ADA  1F7E               	comf	(___fttol@lval+2)& (0+255),f,b
  2297  000ADC  1F7D               	comf	(___fttol@lval+1)& (0+255),f,b
  2298  000ADE  6D7C               	negf	___fttol@lval& (0+255),b
  2299  000AE0  0E00               	movlw	0
  2300  000AE2  237D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2301  000AE4  237E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2302  000AE6  237F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2303  000AE8  D000               	goto	l2614
  2304  000AEA                     l2614:
  2305                           
  2306                           ; BSR set to: 0
  2307  000AEA  C07C  F072         	movff	___fttol@lval,?___fttol
  2308  000AEE  C07D  F073         	movff	___fttol@lval+1,?___fttol+1
  2309  000AF2  C07E  F074         	movff	___fttol@lval+2,?___fttol+2
  2310  000AF6  C07F  F075         	movff	___fttol@lval+3,?___fttol+3
  2311  000AFA  D000               	goto	l1059
  2312  000AFC                     l1059:
  2313                           
  2314                           ; BSR set to: 0
  2315  000AFC  0012               	return		;funcret
  2316  000AFE                     __end_of___fttol:
  2317                           	opt stack 0
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           prodh	equ	0xFF4
  2323                           prodl	equ	0xFF3
  2324                           intcon	equ	0xFF2
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           postdec1	equ	0xFE5
  2328                           fsr1l	equ	0xFE1
  2329                           indf2	equ	0xFDF
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function ___ftsub *****************
  2335 ;; Defined at:
  2336 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  f1              3   18[BANK0 ] float 
  2339 ;;  f2              3   21[BANK0 ] float 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  3   18[BANK0 ] float 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2351 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;Total ram usage:        6 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    6
  2358 ;; This function calls:
  2359 ;;		___ftadd
  2360 ;; This function is called by:
  2361 ;;		_calculatePID
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text5
  2366  00142A                     __ptext5:
  2367                           	opt stack 0
  2368  00142A                     ___ftsub:
  2369                           	opt stack 21
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;incstack = 0
  2373  00142A  0100               	movlb	0	; () banked
  2374  00142C  5175               	movf	___ftsub@f2& (0+255),w,b
  2375  00142E  0100               	movlb	0	; () banked
  2376  001430  1176               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  2377  001432  0100               	movlb	0	; () banked
  2378  001434  1177               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  2379  001436  B4D8               	btfsc	status,2,c
  2380  001438  D00A               	goto	l3458
  2381                           
  2382                           ; BSR set to: 0
  2383  00143A  0E00               	movlw	0
  2384  00143C  0100               	movlb	0	; () banked
  2385  00143E  1B75               	xorwf	___ftsub@f2& (0+255),f,b
  2386  001440  0E00               	movlw	0
  2387  001442  0100               	movlb	0	; () banked
  2388  001444  1B76               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2389  001446  0E80               	movlw	128
  2390  001448  0100               	movlb	0	; () banked
  2391  00144A  1B77               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2392  00144C  D000               	goto	l3458
  2393  00144E                     l3458:
  2394                           
  2395                           ; BSR set to: 0
  2396  00144E  C072  F066         	movff	___ftsub@f1,___ftadd@f1
  2397  001452  C073  F067         	movff	___ftsub@f1+1,___ftadd@f1+1
  2398  001456  C074  F068         	movff	___ftsub@f1+2,___ftadd@f1+2
  2399  00145A  C075  F069         	movff	___ftsub@f2,___ftadd@f2
  2400  00145E  C076  F06A         	movff	___ftsub@f2+1,___ftadd@f2+1
  2401  001462  C077  F06B         	movff	___ftsub@f2+2,___ftadd@f2+2
  2402  001466  EC0D  F003         	call	___ftadd	;wreg free
  2403  00146A  C066  F072         	movff	?___ftadd,?___ftsub
  2404  00146E  C067  F073         	movff	?___ftadd+1,?___ftsub+1
  2405  001472  C068  F074         	movff	?___ftadd+2,?___ftsub+2
  2406  001476  D000               	goto	l1055
  2407  001478                     l1055:
  2408  001478  0012               	return		;funcret
  2409  00147A                     __end_of___ftsub:
  2410                           	opt stack 0
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           prodh	equ	0xFF4
  2416                           prodl	equ	0xFF3
  2417                           intcon	equ	0xFF2
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           postdec1	equ	0xFE5
  2421                           fsr1l	equ	0xFE1
  2422                           indf2	equ	0xFDF
  2423                           fsr2h	equ	0xFDA
  2424                           fsr2l	equ	0xFD9
  2425                           status	equ	0xFD8
  2426                           
  2427 ;; *************** function ___ftadd *****************
  2428 ;; Defined at:
  2429 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  f1              3    6[BANK0 ] float 
  2432 ;;  f2              3    9[BANK0 ] float 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  exp1            1   17[BANK0 ] unsigned char 
  2435 ;;  exp2            1   16[BANK0 ] unsigned char 
  2436 ;;  sign            1   15[BANK0 ] unsigned char 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  3    6[BANK0 ] float 
  2439 ;; Registers used:
  2440 ;;		wreg, status,2, status,0, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2446 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;Total ram usage:       12 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    5
  2453 ;; This function calls:
  2454 ;;		___ftpack
  2455 ;; This function is called by:
  2456 ;;		_calculatePID
  2457 ;;		___ftsub
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           	psect	text6
  2462  00061A                     __ptext6:
  2463                           	opt stack 0
  2464  00061A                     ___ftadd:
  2465                           	opt stack 21
  2466                           
  2467                           ;incstack = 0
  2468  00061A  C068  F06C         	movff	___ftadd@f1+2,??___ftadd
  2469  00061E  0100               	movlb	0	; () banked
  2470  000620  6B6D               	clrf	(??___ftadd+1)& (0+255),b
  2471  000622  6B6E               	clrf	(??___ftadd+2)& (0+255),b
  2472  000624  0100               	movlb	0	; () banked
  2473  000626  3567               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2474  000628  0100               	movlb	0	; () banked
  2475  00062A  376C               	rlcf	??___ftadd& (0+255),f,b
  2476  00062C  E301               	bnc	u2701
  2477  00062E  816D               	bsf	(??___ftadd+1)& (0+255),0,b
  2478  000630                     u2701:
  2479  000630  0100               	movlb	0	; () banked
  2480  000632  516C               	movf	??___ftadd& (0+255),w,b
  2481  000634  0100               	movlb	0	; () banked
  2482  000636  6F71               	movwf	___ftadd@exp1& (0+255),b
  2483  000638  C06B  F06C         	movff	___ftadd@f2+2,??___ftadd
  2484  00063C  0100               	movlb	0	; () banked
  2485  00063E  6B6D               	clrf	(??___ftadd+1)& (0+255),b
  2486  000640  6B6E               	clrf	(??___ftadd+2)& (0+255),b
  2487  000642  0100               	movlb	0	; () banked
  2488  000644  356A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2489  000646  0100               	movlb	0	; () banked
  2490  000648  376C               	rlcf	??___ftadd& (0+255),f,b
  2491  00064A  E301               	bnc	u2711
  2492  00064C  816D               	bsf	(??___ftadd+1)& (0+255),0,b
  2493  00064E                     u2711:
  2494  00064E  0100               	movlb	0	; () banked
  2495  000650  516C               	movf	??___ftadd& (0+255),w,b
  2496  000652  0100               	movlb	0	; () banked
  2497  000654  6F70               	movwf	___ftadd@exp2& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500  000656  0100               	movlb	0	; () banked
  2501  000658  5171               	movf	___ftadd@exp1& (0+255),w,b
  2502  00065A  0100               	movlb	0	; () banked
  2503  00065C  B4D8               	btfsc	status,2,c
  2504  00065E  D011               	goto	l991
  2505                           
  2506                           ; BSR set to: 0
  2507  000660  0100               	movlb	0	; () banked
  2508  000662  5170               	movf	___ftadd@exp2& (0+255),w,b
  2509  000664  0100               	movlb	0	; () banked
  2510  000666  5D71               	subwf	___ftadd@exp1& (0+255),w,b
  2511  000668  B0D8               	btfsc	status,0,c
  2512  00066A  D012               	goto	l3294
  2513                           
  2514                           ; BSR set to: 0
  2515  00066C  0100               	movlb	0	; () banked
  2516  00066E  5171               	movf	___ftadd@exp1& (0+255),w,b
  2517  000670  0800               	sublw	0
  2518  000672  0100               	movlb	0	; () banked
  2519  000674  2570               	addwf	___ftadd@exp2& (0+255),w,b
  2520  000676  0100               	movlb	0	; () banked
  2521  000678  6F6C               	movwf	??___ftadd& (0+255),b
  2522  00067A  0E18               	movlw	24
  2523  00067C  0100               	movlb	0	; () banked
  2524  00067E  656C               	cpfsgt	??___ftadd& (0+255),b
  2525  000680  D007               	goto	l3294
  2526  000682                     l991:
  2527                           
  2528                           ; BSR set to: 0
  2529  000682  C069  F066         	movff	___ftadd@f2,?___ftadd
  2530  000686  C06A  F067         	movff	___ftadd@f2+1,?___ftadd+1
  2531  00068A  C06B  F068         	movff	___ftadd@f2+2,?___ftadd+2
  2532  00068E  D103               	goto	l992
  2533  000690                     l3294:
  2534                           
  2535                           ; BSR set to: 0
  2536  000690  0100               	movlb	0	; () banked
  2537  000692  5170               	movf	___ftadd@exp2& (0+255),w,b
  2538  000694  0100               	movlb	0	; () banked
  2539  000696  B4D8               	btfsc	status,2,c
  2540  000698  D011               	goto	l995
  2541                           
  2542                           ; BSR set to: 0
  2543  00069A  0100               	movlb	0	; () banked
  2544  00069C  5171               	movf	___ftadd@exp1& (0+255),w,b
  2545  00069E  0100               	movlb	0	; () banked
  2546  0006A0  5D70               	subwf	___ftadd@exp2& (0+255),w,b
  2547  0006A2  B0D8               	btfsc	status,0,c
  2548  0006A4  D012               	goto	l3300
  2549                           
  2550                           ; BSR set to: 0
  2551  0006A6  0100               	movlb	0	; () banked
  2552  0006A8  5170               	movf	___ftadd@exp2& (0+255),w,b
  2553  0006AA  0800               	sublw	0
  2554  0006AC  0100               	movlb	0	; () banked
  2555  0006AE  2571               	addwf	___ftadd@exp1& (0+255),w,b
  2556  0006B0  0100               	movlb	0	; () banked
  2557  0006B2  6F6C               	movwf	??___ftadd& (0+255),b
  2558  0006B4  0E18               	movlw	24
  2559  0006B6  0100               	movlb	0	; () banked
  2560  0006B8  656C               	cpfsgt	??___ftadd& (0+255),b
  2561  0006BA  D007               	goto	l3300
  2562  0006BC                     l995:
  2563                           
  2564                           ; BSR set to: 0
  2565  0006BC  C066  F066         	movff	___ftadd@f1,?___ftadd
  2566  0006C0  C067  F067         	movff	___ftadd@f1+1,?___ftadd+1
  2567  0006C4  C068  F068         	movff	___ftadd@f1+2,?___ftadd+2
  2568  0006C8  D0E6               	goto	l992
  2569  0006CA                     l3300:
  2570                           
  2571                           ; BSR set to: 0
  2572  0006CA  0E06               	movlw	6
  2573  0006CC  0100               	movlb	0	; () banked
  2574  0006CE  6F6F               	movwf	___ftadd@sign& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577  0006D0  0100               	movlb	0	; () banked
  2578  0006D2  AF68               	btfss	(___ftadd@f1+2)& (0+255),7,b
  2579  0006D4  D003               	goto	l3306
  2580                           
  2581                           ; BSR set to: 0
  2582  0006D6  0100               	movlb	0	; () banked
  2583  0006D8  8F6F               	bsf	___ftadd@sign& (0+255),7,b
  2584  0006DA  D000               	goto	l3306
  2585  0006DC                     l3306:
  2586                           
  2587                           ; BSR set to: 0
  2588  0006DC  0100               	movlb	0	; () banked
  2589  0006DE  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2590  0006E0  D002               	goto	l997
  2591                           
  2592                           ; BSR set to: 0
  2593  0006E2  0100               	movlb	0	; () banked
  2594  0006E4  8D6F               	bsf	___ftadd@sign& (0+255),6,b
  2595  0006E6                     l997:
  2596                           
  2597                           ; BSR set to: 0
  2598  0006E6  0100               	movlb	0	; () banked
  2599  0006E8  8F67               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2600                           
  2601                           ; BSR set to: 0
  2602  0006EA  0EFF               	movlw	255
  2603  0006EC  0100               	movlb	0	; () banked
  2604  0006EE  1766               	andwf	___ftadd@f1& (0+255),f,b
  2605  0006F0  0EFF               	movlw	255
  2606  0006F2  0100               	movlb	0	; () banked
  2607  0006F4  1767               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2608  0006F6  0E00               	movlw	0
  2609  0006F8  0100               	movlb	0	; () banked
  2610  0006FA  1768               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2611  0006FC  0100               	movlb	0	; () banked
  2612  0006FE  8F6A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2613                           
  2614                           ; BSR set to: 0
  2615  000700  0EFF               	movlw	255
  2616  000702  0100               	movlb	0	; () banked
  2617  000704  1769               	andwf	___ftadd@f2& (0+255),f,b
  2618  000706  0EFF               	movlw	255
  2619  000708  0100               	movlb	0	; () banked
  2620  00070A  176A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2621  00070C  0E00               	movlw	0
  2622  00070E  0100               	movlb	0	; () banked
  2623  000710  176B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2624                           
  2625                           ; BSR set to: 0
  2626  000712  0100               	movlb	0	; () banked
  2627  000714  5170               	movf	___ftadd@exp2& (0+255),w,b
  2628  000716  0100               	movlb	0	; () banked
  2629  000718  5D71               	subwf	___ftadd@exp1& (0+255),w,b
  2630  00071A  B0D8               	btfsc	status,0,c
  2631  00071C  D028               	goto	l3326
  2632  00071E                     l3316:
  2633                           
  2634                           ; BSR set to: 0
  2635  00071E  0100               	movlb	0	; () banked
  2636  000720  90D8               	bcf	status,0,c
  2637  000722  3769               	rlcf	___ftadd@f2& (0+255),f,b
  2638  000724  376A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2639  000726  376B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2640  000728  0100               	movlb	0	; () banked
  2641  00072A  0770               	decf	___ftadd@exp2& (0+255),f,b
  2642                           
  2643                           ; BSR set to: 0
  2644  00072C  0100               	movlb	0	; () banked
  2645  00072E  5171               	movf	___ftadd@exp1& (0+255),w,b
  2646  000730  0100               	movlb	0	; () banked
  2647  000732  1970               	xorwf	___ftadd@exp2& (0+255),w,b
  2648  000734  B4D8               	btfsc	status,2,c
  2649  000736  D013               	goto	l3324
  2650                           
  2651                           ; BSR set to: 0
  2652  000738  0100               	movlb	0	; () banked
  2653  00073A  076F               	decf	___ftadd@sign& (0+255),f,b
  2654  00073C  C06F  F06C         	movff	___ftadd@sign,??___ftadd
  2655  000740  0E07               	movlw	7
  2656  000742  0100               	movlb	0	; () banked
  2657  000744  176C               	andwf	??___ftadd& (0+255),f,b
  2658  000746  B4D8               	btfsc	status,2,c
  2659  000748  D00A               	goto	l3324
  2660  00074A  D7E9               	goto	l3316
  2661                           
  2662                           ; BSR set to: 0
  2663                           
  2664                           ; BSR set to: 0
  2665  00074C  D008               	goto	l3324
  2666  00074E                     l3322:
  2667                           
  2668                           ; BSR set to: 0
  2669  00074E  0100               	movlb	0	; () banked
  2670  000750  90D8               	bcf	status,0,c
  2671  000752  3368               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2672  000754  3367               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2673  000756  3366               	rrcf	___ftadd@f1& (0+255),f,b
  2674  000758  0100               	movlb	0	; () banked
  2675  00075A  2B71               	incf	___ftadd@exp1& (0+255),f,b
  2676  00075C  D000               	goto	l3324
  2677  00075E                     l3324:
  2678                           
  2679                           ; BSR set to: 0
  2680  00075E  0100               	movlb	0	; () banked
  2681  000760  5170               	movf	___ftadd@exp2& (0+255),w,b
  2682  000762  0100               	movlb	0	; () banked
  2683  000764  1971               	xorwf	___ftadd@exp1& (0+255),w,b
  2684  000766  B4D8               	btfsc	status,2,c
  2685  000768  D030               	goto	l1006
  2686  00076A  D7F1               	goto	l3322
  2687                           
  2688                           ; BSR set to: 0
  2689  00076C  D02E               	goto	l1006
  2690  00076E                     l3326:
  2691                           
  2692                           ; BSR set to: 0
  2693  00076E  0100               	movlb	0	; () banked
  2694  000770  5171               	movf	___ftadd@exp1& (0+255),w,b
  2695  000772  0100               	movlb	0	; () banked
  2696  000774  5D70               	subwf	___ftadd@exp2& (0+255),w,b
  2697  000776  B0D8               	btfsc	status,0,c
  2698  000778  D028               	goto	l1006
  2699  00077A                     l3328:
  2700                           
  2701                           ; BSR set to: 0
  2702  00077A  0100               	movlb	0	; () banked
  2703  00077C  90D8               	bcf	status,0,c
  2704  00077E  3766               	rlcf	___ftadd@f1& (0+255),f,b
  2705  000780  3767               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2706  000782  3768               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2707  000784  0100               	movlb	0	; () banked
  2708  000786  0771               	decf	___ftadd@exp1& (0+255),f,b
  2709                           
  2710                           ; BSR set to: 0
  2711  000788  0100               	movlb	0	; () banked
  2712  00078A  5171               	movf	___ftadd@exp1& (0+255),w,b
  2713  00078C  0100               	movlb	0	; () banked
  2714  00078E  1970               	xorwf	___ftadd@exp2& (0+255),w,b
  2715  000790  B4D8               	btfsc	status,2,c
  2716  000792  D013               	goto	l3336
  2717                           
  2718                           ; BSR set to: 0
  2719  000794  0100               	movlb	0	; () banked
  2720  000796  076F               	decf	___ftadd@sign& (0+255),f,b
  2721  000798  C06F  F06C         	movff	___ftadd@sign,??___ftadd
  2722  00079C  0E07               	movlw	7
  2723  00079E  0100               	movlb	0	; () banked
  2724  0007A0  176C               	andwf	??___ftadd& (0+255),f,b
  2725  0007A2  B4D8               	btfsc	status,2,c
  2726  0007A4  D00A               	goto	l3336
  2727  0007A6  D7E9               	goto	l3328
  2728                           
  2729                           ; BSR set to: 0
  2730                           
  2731                           ; BSR set to: 0
  2732  0007A8  D008               	goto	l3336
  2733  0007AA                     l3334:
  2734                           
  2735                           ; BSR set to: 0
  2736  0007AA  0100               	movlb	0	; () banked
  2737  0007AC  90D8               	bcf	status,0,c
  2738  0007AE  336B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2739  0007B0  336A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2740  0007B2  3369               	rrcf	___ftadd@f2& (0+255),f,b
  2741  0007B4  0100               	movlb	0	; () banked
  2742  0007B6  2B70               	incf	___ftadd@exp2& (0+255),f,b
  2743  0007B8  D000               	goto	l3336
  2744  0007BA                     l3336:
  2745                           
  2746                           ; BSR set to: 0
  2747  0007BA  0100               	movlb	0	; () banked
  2748  0007BC  5170               	movf	___ftadd@exp2& (0+255),w,b
  2749  0007BE  0100               	movlb	0	; () banked
  2750  0007C0  1971               	xorwf	___ftadd@exp1& (0+255),w,b
  2751  0007C2  B4D8               	btfsc	status,2,c
  2752  0007C4  D002               	goto	l1006
  2753  0007C6  D7F1               	goto	l3334
  2754                           
  2755                           ; BSR set to: 0
  2756  0007C8  D000               	goto	l1006
  2757  0007CA                     l1006:
  2758                           
  2759                           ; BSR set to: 0
  2760  0007CA  0100               	movlb	0	; () banked
  2761  0007CC  AF6F               	btfss	___ftadd@sign& (0+255),7,b
  2762  0007CE  D012               	goto	l1015
  2763                           
  2764                           ; BSR set to: 0
  2765  0007D0  0EFF               	movlw	255
  2766  0007D2  0100               	movlb	0	; () banked
  2767  0007D4  1B66               	xorwf	___ftadd@f1& (0+255),f,b
  2768  0007D6  0EFF               	movlw	255
  2769  0007D8  0100               	movlb	0	; () banked
  2770  0007DA  1B67               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2771  0007DC  0EFF               	movlw	255
  2772  0007DE  0100               	movlb	0	; () banked
  2773  0007E0  1B68               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2774  0007E2  0E01               	movlw	1
  2775  0007E4  0100               	movlb	0	; () banked
  2776  0007E6  2766               	addwf	___ftadd@f1& (0+255),f,b
  2777  0007E8  0E00               	movlw	0
  2778  0007EA  0100               	movlb	0	; () banked
  2779  0007EC  2367               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2780  0007EE  0E00               	movlw	0
  2781  0007F0  0100               	movlb	0	; () banked
  2782  0007F2  2368               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2783  0007F4                     l1015:
  2784                           
  2785                           ; BSR set to: 0
  2786  0007F4  0100               	movlb	0	; () banked
  2787  0007F6  AD6F               	btfss	___ftadd@sign& (0+255),6,b
  2788  0007F8  D013               	goto	l3342
  2789                           
  2790                           ; BSR set to: 0
  2791  0007FA  0EFF               	movlw	255
  2792  0007FC  0100               	movlb	0	; () banked
  2793  0007FE  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  2794  000800  0EFF               	movlw	255
  2795  000802  0100               	movlb	0	; () banked
  2796  000804  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2797  000806  0EFF               	movlw	255
  2798  000808  0100               	movlb	0	; () banked
  2799  00080A  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2800  00080C  0E01               	movlw	1
  2801  00080E  0100               	movlb	0	; () banked
  2802  000810  2769               	addwf	___ftadd@f2& (0+255),f,b
  2803  000812  0E00               	movlw	0
  2804  000814  0100               	movlb	0	; () banked
  2805  000816  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2806  000818  0E00               	movlw	0
  2807  00081A  0100               	movlb	0	; () banked
  2808  00081C  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2809  00081E  D000               	goto	l3342
  2810  000820                     l3342:
  2811                           
  2812                           ; BSR set to: 0
  2813  000820  0E00               	movlw	0
  2814  000822  0100               	movlb	0	; () banked
  2815  000824  6F6F               	movwf	___ftadd@sign& (0+255),b
  2816                           
  2817                           ; BSR set to: 0
  2818  000826  0100               	movlb	0	; () banked
  2819  000828  5166               	movf	___ftadd@f1& (0+255),w,b
  2820  00082A  0100               	movlb	0	; () banked
  2821  00082C  2769               	addwf	___ftadd@f2& (0+255),f,b
  2822  00082E  0100               	movlb	0	; () banked
  2823  000830  5167               	movf	(___ftadd@f1+1)& (0+255),w,b
  2824  000832  0100               	movlb	0	; () banked
  2825  000834  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2826  000836  0100               	movlb	0	; () banked
  2827  000838  5168               	movf	(___ftadd@f1+2)& (0+255),w,b
  2828  00083A  0100               	movlb	0	; () banked
  2829  00083C  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2830                           
  2831                           ; BSR set to: 0
  2832  00083E  0100               	movlb	0	; () banked
  2833  000840  AF6B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2834  000842  D016               	goto	l3352
  2835                           
  2836                           ; BSR set to: 0
  2837  000844  0EFF               	movlw	255
  2838  000846  0100               	movlb	0	; () banked
  2839  000848  1B69               	xorwf	___ftadd@f2& (0+255),f,b
  2840  00084A  0EFF               	movlw	255
  2841  00084C  0100               	movlb	0	; () banked
  2842  00084E  1B6A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2843  000850  0EFF               	movlw	255
  2844  000852  0100               	movlb	0	; () banked
  2845  000854  1B6B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2846  000856  0E01               	movlw	1
  2847  000858  0100               	movlb	0	; () banked
  2848  00085A  2769               	addwf	___ftadd@f2& (0+255),f,b
  2849  00085C  0E00               	movlw	0
  2850  00085E  0100               	movlb	0	; () banked
  2851  000860  236A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2852  000862  0E00               	movlw	0
  2853  000864  0100               	movlb	0	; () banked
  2854  000866  236B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2855                           
  2856                           ; BSR set to: 0
  2857  000868  0E01               	movlw	1
  2858  00086A  0100               	movlb	0	; () banked
  2859  00086C  6F6F               	movwf	___ftadd@sign& (0+255),b
  2860  00086E  D000               	goto	l3352
  2861  000870                     l3352:
  2862                           
  2863                           ; BSR set to: 0
  2864  000870  C069  F018         	movff	___ftadd@f2,___ftpack@arg
  2865  000874  C06A  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  2866  000878  C06B  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  2867  00087C  C071  F01B         	movff	___ftadd@exp1,___ftpack@exp
  2868  000880  C06F  F01C         	movff	___ftadd@sign,___ftpack@sign
  2869  000884  EC14  F007         	call	___ftpack	;wreg free
  2870  000888  C018  F066         	movff	?___ftpack,?___ftadd
  2871  00088C  C019  F067         	movff	?___ftpack+1,?___ftadd+1
  2872  000890  C01A  F068         	movff	?___ftpack+2,?___ftadd+2
  2873  000894  D000               	goto	l992
  2874  000896                     l992:
  2875  000896  0012               	return		;funcret
  2876  000898                     __end_of___ftadd:
  2877                           	opt stack 0
  2878                           tblptru	equ	0xFF8
  2879                           tblptrh	equ	0xFF7
  2880                           tblptrl	equ	0xFF6
  2881                           tablat	equ	0xFF5
  2882                           prodh	equ	0xFF4
  2883                           prodl	equ	0xFF3
  2884                           intcon	equ	0xFF2
  2885                           postinc0	equ	0xFEE
  2886                           wreg	equ	0xFE8
  2887                           postdec1	equ	0xFE5
  2888                           fsr1l	equ	0xFE1
  2889                           indf2	equ	0xFDF
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function ___ftneg *****************
  2895 ;; Defined at:
  2896 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  f1              3   23[COMRAM] float 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  3   23[COMRAM] float 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        3 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    4
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_calculatePID
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text7
  2925  001740                     __ptext7:
  2926                           	opt stack 0
  2927  001740                     ___ftneg:
  2928                           	opt stack 23
  2929                           
  2930                           ;incstack = 0
  2931  001740  5018               	movf	___ftneg@f1,w,c
  2932  001742  1019               	iorwf	___ftneg@f1+1,w,c
  2933  001744  101A               	iorwf	___ftneg@f1+2,w,c
  2934  001746  B4D8               	btfsc	status,2,c
  2935  001748  D006               	goto	l1048
  2936  00174A  0E00               	movlw	0
  2937  00174C  1A18               	xorwf	___ftneg@f1,f,c
  2938  00174E  0E00               	movlw	0
  2939  001750  1A19               	xorwf	___ftneg@f1+1,f,c
  2940  001752  0E80               	movlw	128
  2941  001754  1A1A               	xorwf	___ftneg@f1+2,f,c
  2942  001756                     l1048:
  2943  001756  C018  F018         	movff	___ftneg@f1,?___ftneg
  2944  00175A  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  2945  00175E  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  2946  001762  0012               	return		;funcret
  2947  001764                     __end_of___ftneg:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           intcon	equ	0xFF2
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postdec1	equ	0xFE5
  2959                           fsr1l	equ	0xFE1
  2960                           indf2	equ	0xFDF
  2961                           fsr2h	equ	0xFDA
  2962                           fsr2l	equ	0xFD9
  2963                           status	equ	0xFD8
  2964                           
  2965 ;; *************** function ___ftge *****************
  2966 ;; Defined at:
  2967 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  ff1             3   23[COMRAM] float 
  2970 ;;  ff2             3   26[COMRAM] float 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;		None               void
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2982 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;Total ram usage:        9 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    4
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_calculatePID
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text8
  2997  0010EE                     __ptext8:
  2998                           	opt stack 0
  2999  0010EE                     ___ftge:
  3000                           	opt stack 23
  3001                           
  3002                           ;incstack = 0
  3003  0010EE  AE1A               	btfss	___ftge@ff1+2,7,c
  3004  0010F0  D017               	goto	l2554
  3005  0010F2  C018  F01E         	movff	___ftge@ff1,??___ftge
  3006  0010F6  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3007  0010FA  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3008  0010FE  1E1E               	comf	??___ftge,f,c
  3009  001100  1E1F               	comf	??___ftge+1,f,c
  3010  001102  1E20               	comf	??___ftge+2,f,c
  3011  001104  2A1E               	incf	??___ftge,f,c
  3012  001106  0E00               	movlw	0
  3013  001108  221F               	addwfc	??___ftge+1,f,c
  3014  00110A  2220               	addwfc	??___ftge+2,f,c
  3015  00110C  0E00               	movlw	0
  3016  00110E  241E               	addwf	??___ftge,w,c
  3017  001110  6E18               	movwf	___ftge@ff1,c
  3018  001112  0E00               	movlw	0
  3019  001114  201F               	addwfc	??___ftge+1,w,c
  3020  001116  6E19               	movwf	___ftge@ff1+1,c
  3021  001118  0E80               	movlw	128
  3022  00111A  2020               	addwfc	??___ftge+2,w,c
  3023  00111C  6E1A               	movwf	___ftge@ff1+2,c
  3024  00111E  D000               	goto	l2554
  3025  001120                     l2554:
  3026  001120  AE1D               	btfss	___ftge@ff2+2,7,c
  3027  001122  D017               	goto	l2558
  3028  001124  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3029  001128  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3030  00112C  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3031  001130  1E1E               	comf	??___ftge,f,c
  3032  001132  1E1F               	comf	??___ftge+1,f,c
  3033  001134  1E20               	comf	??___ftge+2,f,c
  3034  001136  2A1E               	incf	??___ftge,f,c
  3035  001138  0E00               	movlw	0
  3036  00113A  221F               	addwfc	??___ftge+1,f,c
  3037  00113C  2220               	addwfc	??___ftge+2,f,c
  3038  00113E  0E00               	movlw	0
  3039  001140  241E               	addwf	??___ftge,w,c
  3040  001142  6E1B               	movwf	___ftge@ff2,c
  3041  001144  0E00               	movlw	0
  3042  001146  201F               	addwfc	??___ftge+1,w,c
  3043  001148  6E1C               	movwf	___ftge@ff2+1,c
  3044  00114A  0E80               	movlw	128
  3045  00114C  2020               	addwfc	??___ftge+2,w,c
  3046  00114E  6E1D               	movwf	___ftge@ff2+2,c
  3047  001150  D000               	goto	l2558
  3048  001152                     l2558:
  3049  001152  0E00               	movlw	0
  3050  001154  1A18               	xorwf	___ftge@ff1,f,c
  3051  001156  0E00               	movlw	0
  3052  001158  1A19               	xorwf	___ftge@ff1+1,f,c
  3053  00115A  0E80               	movlw	128
  3054  00115C  1A1A               	xorwf	___ftge@ff1+2,f,c
  3055  00115E  0E00               	movlw	0
  3056  001160  1A1B               	xorwf	___ftge@ff2,f,c
  3057  001162  0E00               	movlw	0
  3058  001164  1A1C               	xorwf	___ftge@ff2+1,f,c
  3059  001166  0E80               	movlw	128
  3060  001168  1A1D               	xorwf	___ftge@ff2+2,f,c
  3061  00116A  501B               	movf	___ftge@ff2,w,c
  3062  00116C  5C18               	subwf	___ftge@ff1,w,c
  3063  00116E  501C               	movf	___ftge@ff2+1,w,c
  3064  001170  5819               	subwfb	___ftge@ff1+1,w,c
  3065  001172  501D               	movf	___ftge@ff2+2,w,c
  3066  001174  581A               	subwfb	___ftge@ff1+2,w,c
  3067  001176  B0D8               	btfsc	status,0,c
  3068  001178  D002               	goto	l2564
  3069  00117A  90D8               	bcf	status,0,c
  3070  00117C  D002               	goto	l1032
  3071  00117E                     l2564:
  3072  00117E  80D8               	bsf	status,0,c
  3073  001180  D000               	goto	l1032
  3074  001182                     l1032:
  3075  001182  0012               	return		;funcret
  3076  001184                     __end_of___ftge:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postdec1	equ	0xFE5
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           fsr2h	equ	0xFDA
  3091                           fsr2l	equ	0xFD9
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function ___ftdiv *****************
  3095 ;; Defined at:
  3096 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  f1              3   31[COMRAM] float 
  3099 ;;  f2              3   34[COMRAM] float 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  f3              3   41[COMRAM] float 
  3102 ;;  sign            1   45[COMRAM] unsigned char 
  3103 ;;  exp             1   44[COMRAM] unsigned char 
  3104 ;;  cntr            1   40[COMRAM] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  3   31[COMRAM] float 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3114 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;Total ram usage:       15 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    5
  3121 ;; This function calls:
  3122 ;;		___ftpack
  3123 ;; This function is called by:
  3124 ;;		_calculatePID
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text9
  3129  000D46                     __ptext9:
  3130                           	opt stack 0
  3131  000D46                     ___ftdiv:
  3132                           	opt stack 22
  3133                           
  3134                           ;incstack = 0
  3135  000D46  C022  F026         	movff	___ftdiv@f1+2,??___ftdiv
  3136  000D4A  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3137  000D4C  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3138  000D4E  3421               	rlcf	___ftdiv@f1+1,w,c
  3139  000D50  3626               	rlcf	??___ftdiv& (0+255),f,c
  3140  000D52  E301               	bnc	u2921
  3141  000D54  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3142  000D56                     u2921:
  3143  000D56  5026               	movf	??___ftdiv,w,c
  3144  000D58  6E2D               	movwf	___ftdiv@exp,c
  3145  000D5A  502D               	movf	___ftdiv@exp,w,c
  3146  000D5C  A4D8               	btfss	status,2,c
  3147  000D5E  D002               	goto	l3366
  3148  000D60  D00E               	goto	l3368
  3149  000D62  D061               	goto	l1023
  3150  000D64                     l3366:
  3151  000D64  C025  F026         	movff	___ftdiv@f2+2,??___ftdiv
  3152  000D68  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3153  000D6A  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3154  000D6C  3424               	rlcf	___ftdiv@f2+1,w,c
  3155  000D6E  3626               	rlcf	??___ftdiv& (0+255),f,c
  3156  000D70  E301               	bnc	u2941
  3157  000D72  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3158  000D74                     u2941:
  3159  000D74  5026               	movf	??___ftdiv,w,c
  3160  000D76  6E2E               	movwf	___ftdiv@sign,c
  3161  000D78  502E               	movf	___ftdiv@sign,w,c
  3162  000D7A  A4D8               	btfss	status,2,c
  3163  000D7C  D007               	goto	l3372
  3164  000D7E                     l3368:
  3165  000D7E  0E00               	movlw	0
  3166  000D80  6E20               	movwf	?___ftdiv,c
  3167  000D82  0E00               	movlw	0
  3168  000D84  6E21               	movwf	?___ftdiv+1,c
  3169  000D86  0E00               	movlw	0
  3170  000D88  6E22               	movwf	?___ftdiv+2,c
  3171  000D8A  D04D               	goto	l1023
  3172  000D8C                     l3372:
  3173  000D8C  0E00               	movlw	0
  3174  000D8E  6E2A               	movwf	___ftdiv@f3,c
  3175  000D90  0E00               	movlw	0
  3176  000D92  6E2B               	movwf	___ftdiv@f3+1,c
  3177  000D94  0E00               	movlw	0
  3178  000D96  6E2C               	movwf	___ftdiv@f3+2,c
  3179  000D98  502E               	movf	___ftdiv@sign,w,c
  3180  000D9A  0F89               	addlw	137
  3181  000D9C  5E2D               	subwf	___ftdiv@exp,f,c
  3182  000D9E  C022  F02E         	movff	___ftdiv@f1+2,___ftdiv@sign
  3183  000DA2  5025               	movf	___ftdiv@f2+2,w,c
  3184  000DA4  1A2E               	xorwf	___ftdiv@sign,f,c
  3185  000DA6  0E80               	movlw	128
  3186  000DA8  162E               	andwf	___ftdiv@sign,f,c
  3187  000DAA  8E21               	bsf	___ftdiv@f1+1,7,c
  3188  000DAC  0EFF               	movlw	255
  3189  000DAE  1620               	andwf	___ftdiv@f1,f,c
  3190  000DB0  0EFF               	movlw	255
  3191  000DB2  1621               	andwf	___ftdiv@f1+1,f,c
  3192  000DB4  0E00               	movlw	0
  3193  000DB6  1622               	andwf	___ftdiv@f1+2,f,c
  3194  000DB8  8E24               	bsf	___ftdiv@f2+1,7,c
  3195  000DBA  0EFF               	movlw	255
  3196  000DBC  1623               	andwf	___ftdiv@f2,f,c
  3197  000DBE  0EFF               	movlw	255
  3198  000DC0  1624               	andwf	___ftdiv@f2+1,f,c
  3199  000DC2  0E00               	movlw	0
  3200  000DC4  1625               	andwf	___ftdiv@f2+2,f,c
  3201  000DC6  0E18               	movlw	24
  3202  000DC8  6E29               	movwf	___ftdiv@cntr,c
  3203  000DCA  D000               	goto	l3392
  3204  000DCC                     l3392:
  3205  000DCC  90D8               	bcf	status,0,c
  3206  000DCE  362A               	rlcf	___ftdiv@f3,f,c
  3207  000DD0  362B               	rlcf	___ftdiv@f3+1,f,c
  3208  000DD2  362C               	rlcf	___ftdiv@f3+2,f,c
  3209  000DD4  5023               	movf	___ftdiv@f2,w,c
  3210  000DD6  5C20               	subwf	___ftdiv@f1,w,c
  3211  000DD8  5024               	movf	___ftdiv@f2+1,w,c
  3212  000DDA  5821               	subwfb	___ftdiv@f1+1,w,c
  3213  000DDC  5025               	movf	___ftdiv@f2+2,w,c
  3214  000DDE  5822               	subwfb	___ftdiv@f1+2,w,c
  3215  000DE0  A0D8               	btfss	status,0,c
  3216  000DE2  D007               	goto	l1026
  3217  000DE4  5023               	movf	___ftdiv@f2,w,c
  3218  000DE6  5E20               	subwf	___ftdiv@f1,f,c
  3219  000DE8  5024               	movf	___ftdiv@f2+1,w,c
  3220  000DEA  5A21               	subwfb	___ftdiv@f1+1,f,c
  3221  000DEC  5025               	movf	___ftdiv@f2+2,w,c
  3222  000DEE  5A22               	subwfb	___ftdiv@f1+2,f,c
  3223  000DF0  802A               	bsf	___ftdiv@f3,0,c
  3224  000DF2                     l1026:
  3225  000DF2  90D8               	bcf	status,0,c
  3226  000DF4  3620               	rlcf	___ftdiv@f1,f,c
  3227  000DF6  3621               	rlcf	___ftdiv@f1+1,f,c
  3228  000DF8  3622               	rlcf	___ftdiv@f1+2,f,c
  3229  000DFA  2E29               	decfsz	___ftdiv@cntr,f,c
  3230  000DFC  D7E7               	goto	l3392
  3231  000DFE  D000               	goto	l3402
  3232  000E00                     l3402:
  3233  000E00  C02A  F018         	movff	___ftdiv@f3,___ftpack@arg
  3234  000E04  C02B  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3235  000E08  C02C  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3236  000E0C  C02D  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3237  000E10  C02E  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3238  000E14  EC14  F007         	call	___ftpack	;wreg free
  3239  000E18  C018  F020         	movff	?___ftpack,?___ftdiv
  3240  000E1C  C019  F021         	movff	?___ftpack+1,?___ftdiv+1
  3241  000E20  C01A  F022         	movff	?___ftpack+2,?___ftdiv+2
  3242  000E24  D000               	goto	l1023
  3243  000E26                     l1023:
  3244  000E26  0012               	return		;funcret
  3245  000E28                     __end_of___ftdiv:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           prodh	equ	0xFF4
  3252                           prodl	equ	0xFF3
  3253                           intcon	equ	0xFF2
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           
  3263 ;; *************** function _ReadRTDpos *****************
  3264 ;; Defined at:
  3265 ;;		line 39 in file "ResolverToDigital.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3270 ;;  helloworld      2    0        unsigned int 
  3271 ;;  x               1   33[COMRAM] unsigned char 
  3272 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3273 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  2   24[COMRAM] unsigned int 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;Total ram usage:       10 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    5
  3290 ;; This function calls:
  3291 ;;		_Delay10TCYx
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;;		_ZeroMotors
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text10
  3299  0012CE                     __ptext10:
  3300                           	opt stack 0
  3301  0012CE                     _ReadRTDpos:
  3302                           	opt stack 23
  3303                           
  3304                           ;ResolverToDigital.c: 41: unsigned char x;
  3305                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  3306                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  3307                           ;ResolverToDigital.c: 48: {
  3308                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  3309                           
  3310                           ;incstack = 0
  3311  0012CE  9EF2               	bcf	intcon,7,c	;volatile
  3312                           
  3313                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  3314  0012D0  8284               	bsf	3972,1,c	;volatile
  3315                           
  3316                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  3317  0012D2  9084               	bcf	3972,0,c	;volatile
  3318                           
  3319                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  3320  0012D4  0E00               	movlw	0
  3321  0012D6  6E22               	movwf	ReadRTDpos@x,c
  3322  0012D8  D003               	goto	l2684
  3323  0012DA  D005               	goto	l190
  3324  0012DC                     l189:
  3325                           
  3326                           ;ResolverToDigital.c: 53: __nop();
  3327  0012DC  F000               	nop	
  3328  0012DE  2A22               	incf	ReadRTDpos@x,f,c
  3329  0012E0                     l2684:
  3330  0012E0  0E07               	movlw	7
  3331  0012E2  6422               	cpfsgt	ReadRTDpos@x,c
  3332  0012E4  D7FB               	goto	l189
  3333  0012E6                     l190:
  3334                           
  3335                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  3336  0012E6  8484               	bsf	3972,2,c	;volatile
  3337                           
  3338                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  3339  0012E8  9484               	bcf	3972,2,c	;volatile
  3340                           
  3341                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  3342  0012EA  0E01               	movlw	1
  3343  0012EC  EC4B  F00C         	call	_Delay10TCYx
  3344                           
  3345                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  3346  0012F0  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3347                           
  3348                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  3349  0012F4  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3350                           
  3351                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  3352  0012F8  8484               	bsf	3972,2,c	;volatile
  3353                           
  3354                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  3355  0012FA  8084               	bsf	3972,0,c	;volatile
  3356                           
  3357                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  3358  0012FC  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3359  001300  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3360                           
  3361                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3362  001302  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3363  001306  0E0F               	movlw	15
  3364  001308  161B               	andwf	??_ReadRTDpos,f,c
  3365  00130A  501B               	movf	??_ReadRTDpos,w,c
  3366  00130C  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3367  00130E  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3368  001310  5020               	movf	ReadRTDpos@FullPosition,w,c
  3369  001312  101C               	iorwf	??_ReadRTDpos+1,w,c
  3370  001314  6E20               	movwf	ReadRTDpos@FullPosition,c
  3371  001316  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3372  001318  101D               	iorwf	??_ReadRTDpos+2,w,c
  3373  00131A  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3374                           
  3375                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  3376  00131C  8EF2               	bsf	intcon,7,c	;volatile
  3377                           
  3378                           ;ResolverToDigital.c: 64: return FullPosition;
  3379  00131E  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3380  001322  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3381  001326  D000               	goto	l191
  3382  001328                     l191:
  3383  001328  0012               	return		;funcret
  3384  00132A                     __end_of_ReadRTDpos:
  3385                           	opt stack 0
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           fsr1l	equ	0xFE1
  3397                           indf2	equ	0xFDF
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _RTD2Angle *****************
  3403 ;; Defined at:
  3404 ;;		line 99 in file "ResolverToDigital.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  RTDAngle        2    6[BANK0 ] unsigned int 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  3    6[BANK0 ] unsigned int 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3418 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;Total ram usage:        3 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		___ftmul
  3427 ;;		___lwtoft
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;;		_ZeroMotors
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text11
  3435  0015C4                     __ptext11:
  3436                           	opt stack 0
  3437  0015C4                     _RTD2Angle:
  3438                           	opt stack 22
  3439                           
  3440                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  3441                           
  3442                           ;incstack = 0
  3443  0015C4  C066  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3444  0015C8  C067  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3445  0015CC  EC8D  F00B         	call	___lwtoft	;wreg free
  3446  0015D0  C020  F02F         	movff	?___lwtoft,___ftmul@f1
  3447  0015D4  C021  F030         	movff	?___lwtoft+1,___ftmul@f1+1
  3448  0015D8  C022  F031         	movff	?___lwtoft+2,___ftmul@f1+2
  3449  0015DC  0E00               	movlw	0
  3450  0015DE  6E32               	movwf	___ftmul@f2,c
  3451  0015E0  0EB4               	movlw	180
  3452  0015E2  6E33               	movwf	___ftmul@f2+1,c
  3453  0015E4  0E3D               	movlw	61
  3454  0015E6  6E34               	movwf	___ftmul@f2+2,c
  3455  0015E8  EC11  F006         	call	___ftmul	;wreg free
  3456  0015EC  C02F  F066         	movff	?___ftmul,?_RTD2Angle
  3457  0015F0  C030  F067         	movff	?___ftmul+1,?_RTD2Angle+1
  3458  0015F4  C031  F068         	movff	?___ftmul+2,?_RTD2Angle+2
  3459  0015F8  D000               	goto	l199
  3460  0015FA                     l199:
  3461  0015FA  0012               	return		;funcret
  3462  0015FC                     __end_of_RTD2Angle:
  3463                           	opt stack 0
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           postinc0	equ	0xFEE
  3472                           wreg	equ	0xFE8
  3473                           postdec1	equ	0xFE5
  3474                           fsr1l	equ	0xFE1
  3475                           indf2	equ	0xFDF
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function ___lwtoft *****************
  3481 ;; Defined at:
  3482 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  c               2   31[COMRAM] unsigned int 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  3   31[COMRAM] float 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3496 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;Total ram usage:        3 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    5
  3503 ;; This function calls:
  3504 ;;		___ftpack
  3505 ;; This function is called by:
  3506 ;;		_RTD2Angle
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text12
  3511  00171A                     __ptext12:
  3512                           	opt stack 0
  3513  00171A                     ___lwtoft:
  3514                           	opt stack 22
  3515                           
  3516                           ;incstack = 0
  3517  00171A  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  3518  00171E  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  3519  001722  6A1A               	clrf	___ftpack@arg+2,c
  3520  001724  0E8E               	movlw	142
  3521  001726  6E1B               	movwf	___ftpack@exp,c
  3522  001728  0E00               	movlw	0
  3523  00172A  6E1C               	movwf	___ftpack@sign,c
  3524  00172C  EC14  F007         	call	___ftpack	;wreg free
  3525  001730  C018  F020         	movff	?___ftpack,?___lwtoft
  3526  001734  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  3527  001738  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  3528  00173C  D000               	goto	l1188
  3529  00173E                     l1188:
  3530  00173E  0012               	return		;funcret
  3531  001740                     __end_of___lwtoft:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           postinc0	equ	0xFEE
  3541                           wreg	equ	0xFE8
  3542                           postdec1	equ	0xFE5
  3543                           fsr1l	equ	0xFE1
  3544                           indf2	equ	0xFDF
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function ___ftmul *****************
  3550 ;; Defined at:
  3551 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;  f1              3   46[COMRAM] float 
  3554 ;;  f2              3   49[COMRAM] float 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3557 ;;  sign            1    5[BANK0 ] unsigned char 
  3558 ;;  cntr            1    4[BANK0 ] unsigned char 
  3559 ;;  exp             1    0[BANK0 ] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  3   46[COMRAM] float 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3569 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;Total ram usage:       15 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    5
  3576 ;; This function calls:
  3577 ;;		___ftpack
  3578 ;; This function is called by:
  3579 ;;		_calculatePID
  3580 ;;		_RTD2Angle
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text13
  3585  000C22                     __ptext13:
  3586                           	opt stack 0
  3587  000C22                     ___ftmul:
  3588                           	opt stack 22
  3589                           
  3590                           ;incstack = 0
  3591  000C22  C031  F035         	movff	___ftmul@f1+2,??___ftmul
  3592  000C26  6A36               	clrf	(??___ftmul+1)& (0+255),c
  3593  000C28  6A37               	clrf	(??___ftmul+2)& (0+255),c
  3594  000C2A  3430               	rlcf	___ftmul@f1+1,w,c
  3595  000C2C  3635               	rlcf	??___ftmul& (0+255),f,c
  3596  000C2E  E301               	bnc	u2971
  3597  000C30  8036               	bsf	(??___ftmul+1)& (0+255),0,c
  3598  000C32                     u2971:
  3599  000C32  5035               	movf	??___ftmul,w,c
  3600  000C34  0100               	movlb	0	; () banked
  3601  000C36  6F60               	movwf	___ftmul@exp& (0+255),b
  3602  000C38  0100               	movlb	0	; () banked
  3603  000C3A  5160               	movf	___ftmul@exp& (0+255),w,b
  3604  000C3C  A4D8               	btfss	status,2,c
  3605  000C3E  D002               	goto	l3412
  3606  000C40  D010               	goto	l3414
  3607                           
  3608                           ; BSR set to: 0
  3609                           
  3610                           ; BSR set to: 0
  3611  000C42  D080               	goto	l1038
  3612  000C44                     l3412:
  3613                           
  3614                           ; BSR set to: 0
  3615  000C44  C034  F035         	movff	___ftmul@f2+2,??___ftmul
  3616  000C48  6A36               	clrf	(??___ftmul+1)& (0+255),c
  3617  000C4A  6A37               	clrf	(??___ftmul+2)& (0+255),c
  3618  000C4C  3433               	rlcf	___ftmul@f2+1,w,c
  3619  000C4E  3635               	rlcf	??___ftmul& (0+255),f,c
  3620  000C50  E301               	bnc	u2991
  3621  000C52  8036               	bsf	(??___ftmul+1)& (0+255),0,c
  3622  000C54                     u2991:
  3623  000C54  5035               	movf	??___ftmul,w,c
  3624  000C56  0100               	movlb	0	; () banked
  3625  000C58  6F65               	movwf	___ftmul@sign& (0+255),b
  3626  000C5A  0100               	movlb	0	; () banked
  3627  000C5C  5165               	movf	___ftmul@sign& (0+255),w,b
  3628  000C5E  A4D8               	btfss	status,2,c
  3629  000C60  D007               	goto	l3418
  3630  000C62                     l3414:
  3631                           
  3632                           ; BSR set to: 0
  3633  000C62  0E00               	movlw	0
  3634  000C64  6E2F               	movwf	?___ftmul,c
  3635  000C66  0E00               	movlw	0
  3636  000C68  6E30               	movwf	?___ftmul+1,c
  3637  000C6A  0E00               	movlw	0
  3638  000C6C  6E31               	movwf	?___ftmul+2,c
  3639                           
  3640                           ; BSR set to: 0
  3641  000C6E  D06A               	goto	l1038
  3642  000C70                     l3418:
  3643                           
  3644                           ; BSR set to: 0
  3645  000C70  0100               	movlb	0	; () banked
  3646  000C72  5165               	movf	___ftmul@sign& (0+255),w,b
  3647  000C74  0F7B               	addlw	123
  3648  000C76  0100               	movlb	0	; () banked
  3649  000C78  2760               	addwf	___ftmul@exp& (0+255),f,b
  3650                           
  3651                           ; BSR set to: 0
  3652  000C7A  C031  F065         	movff	___ftmul@f1+2,___ftmul@sign
  3653  000C7E  5034               	movf	___ftmul@f2+2,w,c
  3654  000C80  0100               	movlb	0	; () banked
  3655  000C82  1B65               	xorwf	___ftmul@sign& (0+255),f,b
  3656  000C84  0E80               	movlw	128
  3657  000C86  0100               	movlb	0	; () banked
  3658  000C88  1765               	andwf	___ftmul@sign& (0+255),f,b
  3659                           
  3660                           ; BSR set to: 0
  3661  000C8A  8E30               	bsf	___ftmul@f1+1,7,c
  3662                           
  3663                           ; BSR set to: 0
  3664  000C8C  8E33               	bsf	___ftmul@f2+1,7,c
  3665                           
  3666                           ; BSR set to: 0
  3667  000C8E  0EFF               	movlw	255
  3668  000C90  1632               	andwf	___ftmul@f2,f,c
  3669  000C92  0EFF               	movlw	255
  3670  000C94  1633               	andwf	___ftmul@f2+1,f,c
  3671  000C96  0E00               	movlw	0
  3672  000C98  1634               	andwf	___ftmul@f2+2,f,c
  3673                           
  3674                           ; BSR set to: 0
  3675  000C9A  0E00               	movlw	0
  3676  000C9C  0100               	movlb	0	; () banked
  3677  000C9E  6F61               	movwf	___ftmul@f3_as_product& (0+255),b
  3678  000CA0  0E00               	movlw	0
  3679  000CA2  0100               	movlb	0	; () banked
  3680  000CA4  6F62               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3681  000CA6  0E00               	movlw	0
  3682  000CA8  0100               	movlb	0	; () banked
  3683  000CAA  6F63               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3684                           
  3685                           ; BSR set to: 0
  3686  000CAC  0E07               	movlw	7
  3687  000CAE  0100               	movlb	0	; () banked
  3688  000CB0  6F64               	movwf	___ftmul@cntr& (0+255),b
  3689  000CB2  D000               	goto	l3432
  3690  000CB4                     l3432:
  3691                           
  3692                           ; BSR set to: 0
  3693  000CB4  A02F               	btfss	___ftmul@f1,0,c
  3694  000CB6  D00A               	goto	l3436
  3695                           
  3696                           ; BSR set to: 0
  3697  000CB8  5032               	movf	___ftmul@f2,w,c
  3698  000CBA  0100               	movlb	0	; () banked
  3699  000CBC  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3700  000CBE  5033               	movf	___ftmul@f2+1,w,c
  3701  000CC0  0100               	movlb	0	; () banked
  3702  000CC2  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3703  000CC4  5034               	movf	___ftmul@f2+2,w,c
  3704  000CC6  0100               	movlb	0	; () banked
  3705  000CC8  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3706  000CCA  D000               	goto	l3436
  3707  000CCC                     l3436:
  3708                           
  3709                           ; BSR set to: 0
  3710  000CCC  90D8               	bcf	status,0,c
  3711  000CCE  3231               	rrcf	___ftmul@f1+2,f,c
  3712  000CD0  3230               	rrcf	___ftmul@f1+1,f,c
  3713  000CD2  322F               	rrcf	___ftmul@f1,f,c
  3714  000CD4  90D8               	bcf	status,0,c
  3715  000CD6  3632               	rlcf	___ftmul@f2,f,c
  3716  000CD8  3633               	rlcf	___ftmul@f2+1,f,c
  3717  000CDA  3634               	rlcf	___ftmul@f2+2,f,c
  3718                           
  3719                           ; BSR set to: 0
  3720  000CDC  0100               	movlb	0	; () banked
  3721  000CDE  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3722  000CE0  D7E9               	goto	l3432
  3723  000CE2  D000               	goto	l3440
  3724  000CE4                     l3440:
  3725                           
  3726                           ; BSR set to: 0
  3727  000CE4  0E09               	movlw	9
  3728  000CE6  0100               	movlb	0	; () banked
  3729  000CE8  6F64               	movwf	___ftmul@cntr& (0+255),b
  3730  000CEA  D000               	goto	l3442
  3731  000CEC                     l3442:
  3732                           
  3733                           ; BSR set to: 0
  3734  000CEC  A02F               	btfss	___ftmul@f1,0,c
  3735  000CEE  D00A               	goto	l3446
  3736                           
  3737                           ; BSR set to: 0
  3738  000CF0  5032               	movf	___ftmul@f2,w,c
  3739  000CF2  0100               	movlb	0	; () banked
  3740  000CF4  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3741  000CF6  5033               	movf	___ftmul@f2+1,w,c
  3742  000CF8  0100               	movlb	0	; () banked
  3743  000CFA  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3744  000CFC  5034               	movf	___ftmul@f2+2,w,c
  3745  000CFE  0100               	movlb	0	; () banked
  3746  000D00  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3747  000D02  D000               	goto	l3446
  3748  000D04                     l3446:
  3749                           
  3750                           ; BSR set to: 0
  3751  000D04  90D8               	bcf	status,0,c
  3752  000D06  3231               	rrcf	___ftmul@f1+2,f,c
  3753  000D08  3230               	rrcf	___ftmul@f1+1,f,c
  3754  000D0A  322F               	rrcf	___ftmul@f1,f,c
  3755  000D0C  0100               	movlb	0	; () banked
  3756  000D0E  90D8               	bcf	status,0,c
  3757  000D10  3363               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3758  000D12  3362               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3759  000D14  3361               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3760                           
  3761                           ; BSR set to: 0
  3762  000D16  0100               	movlb	0	; () banked
  3763  000D18  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3764  000D1A  D7E8               	goto	l3442
  3765  000D1C  D000               	goto	l3450
  3766  000D1E                     l3450:
  3767                           
  3768                           ; BSR set to: 0
  3769  000D1E  C061  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  3770  000D22  C062  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3771  000D26  C063  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3772  000D2A  C060  F01B         	movff	___ftmul@exp,___ftpack@exp
  3773  000D2E  C065  F01C         	movff	___ftmul@sign,___ftpack@sign
  3774  000D32  EC14  F007         	call	___ftpack	;wreg free
  3775  000D36  C018  F02F         	movff	?___ftpack,?___ftmul
  3776  000D3A  C019  F030         	movff	?___ftpack+1,?___ftmul+1
  3777  000D3E  C01A  F031         	movff	?___ftpack+2,?___ftmul+2
  3778  000D42  D000               	goto	l1038
  3779  000D44                     l1038:
  3780  000D44  0012               	return		;funcret
  3781  000D46                     __end_of___ftmul:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8
  3798                           
  3799 ;; *************** function ___ftpack *****************
  3800 ;; Defined at:
  3801 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  arg             3   23[COMRAM] unsigned um
  3804 ;;  exp             1   26[COMRAM] unsigned char 
  3805 ;;  sign            1   27[COMRAM] unsigned char 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  3   23[COMRAM] float 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3817 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;Total ram usage:        8 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    4
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		___ftadd
  3828 ;;		___ftdiv
  3829 ;;		___ftmul
  3830 ;;		___lwtoft
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text14
  3835  000E28                     __ptext14:
  3836                           	opt stack 0
  3837  000E28                     ___ftpack:
  3838                           	opt stack 21
  3839                           
  3840                           ;incstack = 0
  3841  000E28  501B               	movf	___ftpack@exp,w,c
  3842  000E2A  B4D8               	btfsc	status,2,c
  3843  000E2C  D005               	goto	l3254
  3844  000E2E  5018               	movf	___ftpack@arg,w,c
  3845  000E30  1019               	iorwf	___ftpack@arg+1,w,c
  3846  000E32  101A               	iorwf	___ftpack@arg+2,w,c
  3847  000E34  A4D8               	btfss	status,2,c
  3848  000E36  D00E               	goto	l3260
  3849  000E38                     l3254:
  3850  000E38  0E00               	movlw	0
  3851  000E3A  6E18               	movwf	?___ftpack,c
  3852  000E3C  0E00               	movlw	0
  3853  000E3E  6E19               	movwf	?___ftpack+1,c
  3854  000E40  0E00               	movlw	0
  3855  000E42  6E1A               	movwf	?___ftpack+2,c
  3856  000E44  D053               	goto	l951
  3857  000E46  D006               	goto	l3260
  3858  000E48                     l3258:
  3859  000E48  2A1B               	incf	___ftpack@exp,f,c
  3860  000E4A  90D8               	bcf	status,0,c
  3861  000E4C  321A               	rrcf	___ftpack@arg+2,f,c
  3862  000E4E  3219               	rrcf	___ftpack@arg+1,f,c
  3863  000E50  3218               	rrcf	___ftpack@arg,f,c
  3864  000E52  D000               	goto	l3260
  3865  000E54                     l3260:
  3866  000E54  0E00               	movlw	0
  3867  000E56  1418               	andwf	___ftpack@arg,w,c
  3868  000E58  6E1D               	movwf	??___ftpack& (0+255),c
  3869  000E5A  0E00               	movlw	0
  3870  000E5C  1419               	andwf	___ftpack@arg+1,w,c
  3871  000E5E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  3872  000E60  0EFE               	movlw	254
  3873  000E62  141A               	andwf	___ftpack@arg+2,w,c
  3874  000E64  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  3875  000E66  501D               	movf	??___ftpack,w,c
  3876  000E68  101E               	iorwf	??___ftpack+1,w,c
  3877  000E6A  101F               	iorwf	??___ftpack+2,w,c
  3878  000E6C  B4D8               	btfsc	status,2,c
  3879  000E6E  D00E               	goto	l3266
  3880  000E70  D7EB               	goto	l3258
  3881  000E72  D00C               	goto	l3266
  3882  000E74                     l3262:
  3883  000E74  2A1B               	incf	___ftpack@exp,f,c
  3884  000E76  0E01               	movlw	1
  3885  000E78  2618               	addwf	___ftpack@arg,f,c
  3886  000E7A  0E00               	movlw	0
  3887  000E7C  2219               	addwfc	___ftpack@arg+1,f,c
  3888  000E7E  0E00               	movlw	0
  3889  000E80  221A               	addwfc	___ftpack@arg+2,f,c
  3890  000E82  90D8               	bcf	status,0,c
  3891  000E84  321A               	rrcf	___ftpack@arg+2,f,c
  3892  000E86  3219               	rrcf	___ftpack@arg+1,f,c
  3893  000E88  3218               	rrcf	___ftpack@arg,f,c
  3894  000E8A  D000               	goto	l3266
  3895  000E8C                     l3266:
  3896  000E8C  0E00               	movlw	0
  3897  000E8E  1418               	andwf	___ftpack@arg,w,c
  3898  000E90  6E1D               	movwf	??___ftpack& (0+255),c
  3899  000E92  0E00               	movlw	0
  3900  000E94  1419               	andwf	___ftpack@arg+1,w,c
  3901  000E96  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  3902  000E98  0EFF               	movlw	255
  3903  000E9A  141A               	andwf	___ftpack@arg+2,w,c
  3904  000E9C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  3905  000E9E  501D               	movf	??___ftpack,w,c
  3906  000EA0  101E               	iorwf	??___ftpack+1,w,c
  3907  000EA2  101F               	iorwf	??___ftpack+2,w,c
  3908  000EA4  B4D8               	btfsc	status,2,c
  3909  000EA6  D008               	goto	l3270
  3910  000EA8  D7E5               	goto	l3262
  3911  000EAA  D006               	goto	l3270
  3912  000EAC                     l3268:
  3913  000EAC  061B               	decf	___ftpack@exp,f,c
  3914  000EAE  90D8               	bcf	status,0,c
  3915  000EB0  3618               	rlcf	___ftpack@arg,f,c
  3916  000EB2  3619               	rlcf	___ftpack@arg+1,f,c
  3917  000EB4  361A               	rlcf	___ftpack@arg+2,f,c
  3918  000EB6  D000               	goto	l3270
  3919  000EB8                     l3270:
  3920  000EB8  BE19               	btfsc	___ftpack@arg+1,7,c
  3921  000EBA  D004               	goto	l962
  3922  000EBC  0E02               	movlw	2
  3923  000EBE  601B               	cpfslt	___ftpack@exp,c
  3924  000EC0  D7F5               	goto	l3268
  3925  000EC2  D000               	goto	l962
  3926  000EC4                     l962:
  3927  000EC4  B01B               	btfsc	___ftpack@exp,0,c
  3928  000EC6  D002               	goto	l3276
  3929  000EC8  9E19               	bcf	___ftpack@arg+1,7,c
  3930  000ECA  D000               	goto	l3276
  3931  000ECC                     l3276:
  3932  000ECC  90D8               	bcf	status,0,c
  3933  000ECE  321B               	rrcf	___ftpack@exp,f,c
  3934  000ED0  501B               	movf	___ftpack@exp,w,c
  3935  000ED2  121A               	iorwf	___ftpack@arg+2,f,c
  3936  000ED4  501C               	movf	___ftpack@sign,w,c
  3937  000ED6  B4D8               	btfsc	status,2,c
  3938  000ED8  D002               	goto	l3282
  3939  000EDA  8E1A               	bsf	___ftpack@arg+2,7,c
  3940  000EDC  D000               	goto	l3282
  3941  000EDE                     l3282:
  3942  000EDE  C018  F018         	movff	___ftpack@arg,?___ftpack
  3943  000EE2  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  3944  000EE6  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  3945  000EEA  D000               	goto	l951
  3946  000EEC                     l951:
  3947  000EEC  0012               	return		;funcret
  3948  000EEE                     __end_of___ftpack:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           intcon	equ	0xFF2
  3957                           postinc0	equ	0xFEE
  3958                           wreg	equ	0xFE8
  3959                           postdec1	equ	0xFE5
  3960                           fsr1l	equ	0xFE1
  3961                           indf2	equ	0xFDF
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _ImplementPIDMotion *****************
  3967 ;; Defined at:
  3968 ;;		line 40 in file "MotorControl.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  PIDValue        2   37[BANK0 ] int 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;		None
  3973 ;; Return value:  Size  Location     Type
  3974 ;;		None               void
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, status,0, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3982 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;Total ram usage:        4 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    5
  3989 ;; This function calls:
  3990 ;;		_abs
  3991 ;; This function is called by:
  3992 ;;		_main
  3993 ;;		_ZeroMotors
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text15
  3998  000FA6                     __ptext15:
  3999                           	opt stack 0
  4000  000FA6                     _ImplementPIDMotion:
  4001                           	opt stack 23
  4002                           
  4003                           ;MotorControl.c: 42: if (PIDValue > 255)
  4004                           
  4005                           ;incstack = 0
  4006  000FA6  0100               	movlb	0	; () banked
  4007  000FA8  BF86               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4008  000FAA  D009               	goto	l3470
  4009  000FAC  0100               	movlb	0	; () banked
  4010  000FAE  0586               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4011  000FB0  A0D8               	btfss	status,0,c
  4012  000FB2  D005               	goto	l3470
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;MotorControl.c: 43: PIDValue = 255;
  4016  000FB4  0E00               	movlw	0
  4017  000FB6  0100               	movlb	0	; () banked
  4018  000FB8  6F86               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4019  000FBA  6985               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4020  000FBC  D010               	goto	l3474
  4021  000FBE                     l3470:
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;MotorControl.c: 44: else if (PIDValue < -255)
  4025  000FBE  0100               	movlb	0	; () banked
  4026  000FC0  AF86               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4027  000FC2  D00D               	goto	l3474
  4028  000FC4  0100               	movlb	0	; () banked
  4029  000FC6  0585               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4030  000FC8  0EFF               	movlw	255
  4031  000FCA  0100               	movlb	0	; () banked
  4032  000FCC  5986               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4033  000FCE  B0D8               	btfsc	status,0,c
  4034  000FD0  D006               	goto	l3474
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;MotorControl.c: 45: PIDValue = -255;
  4038  000FD2  0EFF               	movlw	255
  4039  000FD4  0100               	movlb	0	; () banked
  4040  000FD6  6F86               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4041  000FD8  0E01               	movlw	1
  4042  000FDA  6F85               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4043                           
  4044                           ; BSR set to: 0
  4045  000FDC  D000               	goto	l3474
  4046  000FDE                     l3474:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;MotorControl.c: 47: if (PIDValue < 0)
  4050  000FDE  0100               	movlb	0	; () banked
  4051  000FE0  AF86               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4052  000FE2  D002               	goto	l3478
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  4056  000FE4  8EB7               	bsf	4023,7,c	;volatile
  4057  000FE6  D00C               	goto	l3482
  4058  000FE8                     l3478:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;MotorControl.c: 49: else if (PIDValue > 0)
  4062  000FE8  0100               	movlb	0	; () banked
  4063  000FEA  BF86               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4064  000FEC  D009               	goto	l3482
  4065  000FEE  0100               	movlb	0	; () banked
  4066  000FF0  5186               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4067  000FF2  E104               	bnz	u3070
  4068  000FF4  0100               	movlb	0	; () banked
  4069  000FF6  0585               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4070  000FF8  A0D8               	btfss	status,0,c
  4071  000FFA  D002               	goto	l3482
  4072  000FFC                     u3070:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  4076  000FFC  9EB7               	bcf	4023,7,c	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079  000FFE  D000               	goto	l3482
  4080  001000                     l3482:
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  4084  001000  C085  F081         	movff	ImplementPIDMotion@PIDValue,abs@a
  4085  001004  C086  F082         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4086  001008  EC77  F00B         	call	_abs	;wreg free
  4087  00100C  C081  F085         	movff	?_abs,ImplementPIDMotion@PIDValue
  4088  001010  C082  F086         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4089                           
  4090                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  4091  001014  C085  F087         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4092  001018  C086  F088         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4093  00101C  0100               	movlb	0	; () banked
  4094  00101E  3588               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4095  001020  3388               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4096  001022  3387               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4097  001024  0100               	movlb	0	; () banked
  4098  001026  3588               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4099  001028  3388               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4100  00102A  3387               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4101  00102C  0100               	movlb	0	; () banked
  4102  00102E  5187               	movf	??_ImplementPIDMotion& (0+255),w,b
  4103  001030  6EB8               	movwf	4024,c	;volatile
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4107  001032  C085  F087         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4108  001036  0E03               	movlw	3
  4109  001038  0100               	movlb	0	; () banked
  4110  00103A  1787               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4111  00103C  0100               	movlb	0	; () banked
  4112  00103E  3B87               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4113  001040  50B7               	movf	4023,w,c	;volatile
  4114  001042  0100               	movlb	0	; () banked
  4115  001044  1987               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4116  001046  0BCF               	andlw	-49
  4117  001048  1987               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4118  00104A  6EB7               	movwf	4023,c	;volatile
  4119                           
  4120                           ; BSR set to: 0
  4121  00104C  0012               	return		;funcret
  4122  00104E                     __end_of_ImplementPIDMotion:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           postdec1	equ	0xFE5
  4134                           fsr1l	equ	0xFE1
  4135                           indf2	equ	0xFDF
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _SPIInit *****************
  4141 ;; Defined at:
  4142 ;;		line 16 in file "SPISlave.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;		None               void
  4149 ;; Registers used:
  4150 ;;		wreg, status,2, status,0, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    5
  4163 ;; This function calls:
  4164 ;;		_OpenSPI1
  4165 ;; This function is called by:
  4166 ;;		_initialize
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text16
  4171  001810                     __ptext16:
  4172                           	opt stack 0
  4173  001810                     _SPIInit:
  4174                           	opt stack 24
  4175                           
  4176                           ;SPISlave.c: 18: TRISCbits.RC4 = 1;
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;incstack = 0
  4180  001810  8894               	bsf	3988,4,c	;volatile
  4181                           
  4182                           ;SPISlave.c: 19: TRISCbits.RC5 = 0;
  4183  001812  9A94               	bcf	3988,5,c	;volatile
  4184                           
  4185                           ;SPISlave.c: 20: TRISFbits.RF7 = 1;
  4186  001814  8E97               	bsf	3991,7,c	;volatile
  4187                           
  4188                           ;SPISlave.c: 21: TRISCbits.RC6 = 0;
  4189  001816  9C94               	bcf	3988,6,c	;volatile
  4190                           
  4191                           ;SPISlave.c: 22: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4192  001818  0E00               	movlw	0
  4193  00181A  6E18               	movwf	OpenSPI1@bus_mode,c
  4194  00181C  0E00               	movlw	0
  4195  00181E  6E19               	movwf	OpenSPI1@smp_phase,c
  4196  001820  0E04               	movlw	4
  4197  001822  EC95  F009         	call	_OpenSPI1
  4198                           
  4199                           ;SPISlave.c: 23: PIE1bits.SSP1IE = 1;
  4200  001826  869D               	bsf	3997,3,c	;volatile
  4201  001828  0012               	return		;funcret
  4202  00182A                     __end_of_SPIInit:
  4203                           	opt stack 0
  4204                           tblptru	equ	0xFF8
  4205                           tblptrh	equ	0xFF7
  4206                           tblptrl	equ	0xFF6
  4207                           tablat	equ	0xFF5
  4208                           prodh	equ	0xFF4
  4209                           prodl	equ	0xFF3
  4210                           intcon	equ	0xFF2
  4211                           postinc0	equ	0xFEE
  4212                           wreg	equ	0xFE8
  4213                           postdec1	equ	0xFE5
  4214                           fsr1l	equ	0xFE1
  4215                           indf2	equ	0xFDF
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function _OpenSPI1 *****************
  4221 ;; Defined at:
  4222 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  sync_mode       1    wreg     unsigned char 
  4225 ;;  bus_mode        1   23[COMRAM] unsigned char 
  4226 ;;  smp_phase       1   24[COMRAM] unsigned char 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  sync_mode       1   25[COMRAM] unsigned char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;		None               void
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;Total ram usage:        3 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    4
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_SPIInit
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text17
  4253  00132A                     __ptext17:
  4254                           	opt stack 0
  4255  00132A                     _OpenSPI1:
  4256                           	opt stack 24
  4257                           
  4258                           ;incstack = 0
  4259                           ;OpenSPI1@sync_mode stored from wreg
  4260  00132A  6E1A               	movwf	OpenSPI1@sync_mode,c
  4261  00132C  0E3F               	movlw	63
  4262  00132E  16C7               	andwf	4039,f,c	;volatile
  4263  001330  0E00               	movlw	0
  4264  001332  6EC6               	movwf	4038,c	;volatile
  4265  001334  501A               	movf	OpenSPI1@sync_mode,w,c
  4266  001336  12C6               	iorwf	4038,f,c	;volatile
  4267  001338  5019               	movf	OpenSPI1@smp_phase,w,c
  4268  00133A  12C7               	iorwf	4039,f,c	;volatile
  4269  00133C  D005               	goto	l2720
  4270  00133E                     l605:
  4271  00133E  8CC7               	bsf	4039,6,c	;volatile
  4272  001340  D013               	goto	l2724
  4273  001342                     l607:
  4274  001342  8CC7               	bsf	4039,6,c	;volatile
  4275  001344                     l608:
  4276  001344  88C6               	bsf	4038,4,c	;volatile
  4277  001346  D010               	goto	l2724
  4278  001348                     l2720:
  4279  001348  5018               	movf	OpenSPI1@bus_mode,w,c
  4280                           
  4281                           ; Switch size 1, requested type "space"
  4282                           ; Number of cases is 3, Range of values is 0 to 3
  4283                           ; switch strategies available:
  4284                           ; Name         Instructions Cycles
  4285                           ; simple_byte           10     6 (average)
  4286                           ;	Chosen strategy is simple_byte
  4287  00134A  0A00               	xorlw	0	; case 0
  4288  00134C  B4D8               	btfsc	status,2,c
  4289  00134E  D7F7               	goto	l605
  4290  001350  0A02               	xorlw	2	; case 2
  4291  001352  B4D8               	btfsc	status,2,c
  4292  001354  D7F6               	goto	l607
  4293  001356  0A01               	xorlw	1	; case 3
  4294  001358  B4D8               	btfsc	status,2,c
  4295  00135A  D7F4               	goto	l608
  4296  00135C  D005               	goto	l2724
  4297  00135E                     l611:
  4298  00135E  8E97               	bsf	3991,7,c	;volatile
  4299  001360                     l613:
  4300  001360  8694               	bsf	3988,3,c	;volatile
  4301  001362  D00A               	goto	l612
  4302  001364                     l614:
  4303  001364  9694               	bcf	3988,3,c	;volatile
  4304  001366  D008               	goto	l612
  4305  001368                     l2724:
  4306  001368  501A               	movf	OpenSPI1@sync_mode,w,c
  4307                           
  4308                           ; Switch size 1, requested type "space"
  4309                           ; Number of cases is 2, Range of values is 4 to 5
  4310                           ; switch strategies available:
  4311                           ; Name         Instructions Cycles
  4312                           ; simple_byte            7     4 (average)
  4313                           ;	Chosen strategy is simple_byte
  4314  00136A  0A04               	xorlw	4	; case 4
  4315  00136C  B4D8               	btfsc	status,2,c
  4316  00136E  D7F7               	goto	l611
  4317  001370  0A01               	xorlw	1	; case 5
  4318  001372  B4D8               	btfsc	status,2,c
  4319  001374  D7F5               	goto	l613
  4320  001376  D7F6               	goto	l614
  4321  001378                     l612:
  4322  001378  8894               	bsf	3988,4,c	;volatile
  4323  00137A  9A94               	bcf	3988,5,c	;volatile
  4324  00137C  8AC6               	bsf	4038,5,c	;volatile
  4325  00137E  0012               	return		;funcret
  4326  001380                     __end_of_OpenSPI1:
  4327                           	opt stack 0
  4328                           tblptru	equ	0xFF8
  4329                           tblptrh	equ	0xFF7
  4330                           tblptrl	equ	0xFF6
  4331                           tablat	equ	0xFF5
  4332                           prodh	equ	0xFF4
  4333                           prodl	equ	0xFF3
  4334                           intcon	equ	0xFF2
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           fsr2h	equ	0xFDA
  4341                           fsr2l	equ	0xFD9
  4342                           status	equ	0xFD8
  4343                           
  4344 ;; *************** function _RTDInit *****************
  4345 ;; Defined at:
  4346 ;;		line 3 in file "ResolverToDigital.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;		None               void
  4353 ;; Registers used:
  4354 ;;		wreg, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;Total ram usage:        0 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    5
  4367 ;; This function calls:
  4368 ;;		_Delay10TCYx
  4369 ;;		_Delay1KTCYx
  4370 ;;		_Delay1TCYx
  4371 ;; This function is called by:
  4372 ;;		_initialize
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text18
  4377  001664                     __ptext18:
  4378                           	opt stack 0
  4379  001664                     _RTDInit:
  4380                           	opt stack 24
  4381                           
  4382                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4383                           
  4384                           ;incstack = 0
  4385  001664  6895               	setf	3989,c	;volatile
  4386                           
  4387                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4388  001666  6899               	setf	3993,c	;volatile
  4389                           
  4390                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4391  001668  9096               	bcf	3990,0,c	;volatile
  4392                           
  4393                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4394  00166A  9296               	bcf	3990,1,c	;volatile
  4395                           
  4396                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4397  00166C  9496               	bcf	3990,2,c	;volatile
  4398                           
  4399                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4400  00166E  909A               	bcf	3994,0,c	;volatile
  4401                           
  4402                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4403  001670  8A96               	bsf	3990,5,c	;volatile
  4404                           
  4405                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4406  001672  8C96               	bsf	3990,6,c	;volatile
  4407                           
  4408                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4409  001674  8E96               	bsf	3990,7,c	;volatile
  4410                           
  4411                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  4412  001676  9088               	bcf	3976,0,c	;volatile
  4413                           
  4414                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  4415  001678  0E0A               	movlw	10
  4416  00167A  EC4B  F00C         	call	_Delay10TCYx
  4417                           
  4418                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  4419  00167E  8088               	bsf	3976,0,c	;volatile
  4420                           
  4421                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  4422  001680  0E14               	movlw	20
  4423  001682  EC42  F00C         	call	_Delay1KTCYx
  4424                           
  4425                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  4426  001686  9084               	bcf	3972,0,c	;volatile
  4427                           
  4428                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  4429  001688  0E01               	movlw	1
  4430  00168A  EC6D  F00C         	call	_Delay1TCYx
  4431                           
  4432                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  4433  00168E  8084               	bsf	3972,0,c	;volatile
  4434                           
  4435                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  4436  001690  9484               	bcf	3972,2,c	;volatile
  4437  001692  0012               	return		;funcret
  4438  001694                     __end_of_RTDInit:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1l	equ	0xFE1
  4451                           indf2	equ	0xFDF
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _Delay1TCYx *****************
  4457 ;; Defined at:
  4458 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  unit            1    wreg     unsigned char 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  unit            1   23[COMRAM] unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;		None               void
  4465 ;; Registers used:
  4466 ;;		wreg
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:        1 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    4
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_RTDInit
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text19
  4487  0018DA                     __ptext19:
  4488                           	opt stack 0
  4489  0018DA                     _Delay1TCYx:
  4490                           	opt stack 24
  4491                           
  4492                           ;incstack = 0
  4493                           ;Delay1TCYx@unit stored from wreg
  4494  0018DA  6E18               	movwf	Delay1TCYx@unit,c
  4495  0018DC                     l859:
  4496  0018DC  F000               	nop	
  4497  0018DE  2E18               	decfsz	Delay1TCYx@unit,f,c
  4498  0018E0  D7FD               	goto	l859
  4499  0018E2  D000               	goto	l861
  4500  0018E4                     l861:
  4501  0018E4  0012               	return		;funcret
  4502  0018E6                     __end_of_Delay1TCYx:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           postdec1	equ	0xFE5
  4514                           fsr1l	equ	0xFE1
  4515                           indf2	equ	0xFDF
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _Delay1KTCYx *****************
  4521 ;; Defined at:
  4522 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  unit            1    wreg     unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  unit            1   23[COMRAM] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;		None               void
  4529 ;; Registers used:
  4530 ;;		wreg
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        1 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    4
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_RTDInit
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text20
  4551  001884                     __ptext20:
  4552                           	opt stack 0
  4553  001884                     _Delay1KTCYx:
  4554                           	opt stack 24
  4555                           
  4556                           ;incstack = 0
  4557                           ;Delay1KTCYx@unit stored from wreg
  4558  001884  6E18               	movwf	Delay1KTCYx@unit,c
  4559  001886  0EFA               	movlw	250
  4560  001888                     u3507:
  4561  001888  F000               	nop	
  4562  00188A  2EE8               	decfsz	wreg,f,c
  4563  00188C  D7FD               	goto	u3507
  4564  00188E  2E18               	decfsz	Delay1KTCYx@unit,f,c
  4565  001890  D7FA               	goto	l2668
  4566  001892  D000               	goto	l854
  4567  001894                     l854:
  4568  001894  0012               	return		;funcret
  4569  001896                     __end_of_Delay1KTCYx:
  4570                           	opt stack 0
  4571                           tblptru	equ	0xFF8
  4572                           tblptrh	equ	0xFF7
  4573                           tblptrl	equ	0xFF6
  4574                           tablat	equ	0xFF5
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           postinc0	equ	0xFEE
  4579                           wreg	equ	0xFE8
  4580                           postdec1	equ	0xFE5
  4581                           fsr1l	equ	0xFE1
  4582                           indf2	equ	0xFDF
  4583                           fsr2h	equ	0xFDA
  4584                           fsr2l	equ	0xFD9
  4585                           status	equ	0xFD8
  4586                           
  4587 ;; *************** function _Delay10TCYx *****************
  4588 ;; Defined at:
  4589 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  unit            1    wreg     unsigned char 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  unit            1   23[COMRAM] unsigned char 
  4594 ;; Return value:  Size  Location     Type
  4595 ;;		None               void
  4596 ;; Registers used:
  4597 ;;		wreg
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;Total ram usage:        1 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    4
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_RTDInit
  4614 ;;		_ReadRTDpos
  4615 ;;		_main
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text21
  4620  001896                     __ptext21:
  4621                           	opt stack 0
  4622  001896                     _Delay10TCYx:
  4623                           	opt stack 23
  4624                           
  4625                           ;incstack = 0
  4626                           ;Delay10TCYx@unit stored from wreg
  4627  001896  6E18               	movwf	Delay10TCYx@unit,c
  4628  001898  0E03               	movlw	3
  4629  00189A                     u3517:
  4630  00189A  2EE8               	decfsz	wreg,f,c
  4631  00189C  D7FE               	goto	u3517
  4632  00189E  F000               	nop	
  4633  0018A0  2E18               	decfsz	Delay10TCYx@unit,f,c
  4634  0018A2  D7FA               	goto	l2412
  4635  0018A4  D000               	goto	l847
  4636  0018A6                     l847:
  4637  0018A6  0012               	return		;funcret
  4638  0018A8                     __end_of_Delay10TCYx:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           postinc0	equ	0xFEE
  4648                           wreg	equ	0xFE8
  4649                           postdec1	equ	0xFE5
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           fsr2h	equ	0xFDA
  4653                           fsr2l	equ	0xFD9
  4654                           status	equ	0xFD8
  4655                           
  4656 ;; *************** function _PIDInit *****************
  4657 ;; Defined at:
  4658 ;;		line 18 in file "PID.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;		None               void
  4665 ;; Registers used:
  4666 ;;		wreg, status,2
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;Total ram usage:        0 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    4
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_initialize
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text22
  4687  00147A                     __ptext22:
  4688                           	opt stack 0
  4689  00147A                     _PIDInit:
  4690                           	opt stack 25
  4691                           
  4692                           ;PID.c: 20: error = 0;
  4693                           
  4694                           ;incstack = 0
  4695  00147A  0E00               	movlw	0
  4696  00147C  0100               	movlb	0	; () banked
  4697  00147E  6FA1               	movwf	_error& (0+255),b
  4698  001480  0E00               	movlw	0
  4699  001482  0100               	movlb	0	; () banked
  4700  001484  6FA2               	movwf	(_error+1)& (0+255),b
  4701  001486  0E00               	movlw	0
  4702  001488  0100               	movlb	0	; () banked
  4703  00148A  6FA3               	movwf	(_error+2)& (0+255),b
  4704                           
  4705                           ;PID.c: 21: prevErr = 0;
  4706  00148C  0E00               	movlw	0
  4707  00148E  0100               	movlb	0	; () banked
  4708  001490  6FA7               	movwf	_prevErr& (0+255),b
  4709  001492  0E00               	movlw	0
  4710  001494  0100               	movlb	0	; () banked
  4711  001496  6FA8               	movwf	(_prevErr+1)& (0+255),b
  4712  001498  0E00               	movlw	0
  4713  00149A  0100               	movlb	0	; () banked
  4714  00149C  6FA9               	movwf	(_prevErr+2)& (0+255),b
  4715                           
  4716                           ;PID.c: 22: intErr = 0;
  4717  00149E  0E00               	movlw	0
  4718  0014A0  0100               	movlb	0	; () banked
  4719  0014A2  6FA4               	movwf	_intErr& (0+255),b
  4720  0014A4  0E00               	movlw	0
  4721  0014A6  0100               	movlb	0	; () banked
  4722  0014A8  6FA5               	movwf	(_intErr+1)& (0+255),b
  4723  0014AA  0E00               	movlw	0
  4724  0014AC  0100               	movlb	0	; () banked
  4725  0014AE  6FA6               	movwf	(_intErr+2)& (0+255),b
  4726                           
  4727                           ;PID.c: 24: T0CON = 0x04;
  4728  0014B0  0E04               	movlw	4
  4729  0014B2  6ED5               	movwf	4053,c	;volatile
  4730                           
  4731                           ;PID.c: 25: TMR0H = 0xDB;
  4732  0014B4  0EDB               	movlw	219
  4733  0014B6  6ED7               	movwf	4055,c	;volatile
  4734                           
  4735                           ;PID.c: 26: TMR0L = 0x60;
  4736  0014B8  0E60               	movlw	96
  4737  0014BA  6ED6               	movwf	4054,c	;volatile
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;PID.c: 27: INTCON2bits.TMR0IP = 1;
  4741  0014BC  84F1               	bsf	intcon2,2,c	;volatile
  4742                           
  4743                           ; BSR set to: 0
  4744  0014BE  0012               	return		;funcret
  4745  0014C0                     __end_of_PIDInit:
  4746                           	opt stack 0
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           intcon2	equ	0xFF1
  4755                           postinc0	equ	0xFEE
  4756                           wreg	equ	0xFE8
  4757                           postdec1	equ	0xFE5
  4758                           fsr1l	equ	0xFE1
  4759                           indf2	equ	0xFDF
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _MotorDriverInit *****************
  4765 ;; Defined at:
  4766 ;;		line 7 in file "MotorControl.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;		None               void
  4773 ;; Registers used:
  4774 ;;		wreg, status,2
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_initialize
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text23
  4795  001764                     __ptext23:
  4796                           	opt stack 0
  4797  001764                     _MotorDriverInit:
  4798                           	opt stack 25
  4799                           
  4800                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;incstack = 0
  4804  001764  9098               	bcf	3992,0,c	;volatile
  4805                           
  4806                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  4807  001766  9896               	bcf	3990,4,c	;volatile
  4808                           
  4809                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  4810  001768  9696               	bcf	3990,3,c	;volatile
  4811                           
  4812                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  4813  00176A  9698               	bcf	3992,3,c	;volatile
  4814                           
  4815                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  4816  00176C  8093               	bsf	3987,0,c	;volatile
  4817                           
  4818                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  4819  00176E  9892               	bcf	3986,4,c	;volatile
  4820                           
  4821                           ;MotorControl.c: 18: CCPR3L = 0x00;
  4822  001770  0E00               	movlw	0
  4823  001772  6EB8               	movwf	4024,c	;volatile
  4824                           
  4825                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  4826  001774  98B7               	bcf	4023,4,c	;volatile
  4827                           
  4828                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  4829  001776  9AB7               	bcf	4023,5,c	;volatile
  4830                           
  4831                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  4832  001778  0E4C               	movlw	76
  4833  00177A  6EB7               	movwf	4023,c	;volatile
  4834                           
  4835                           ;MotorControl.c: 22: PR2 = 0xFF;
  4836  00177C  68CB               	setf	4043,c	;volatile
  4837                           
  4838                           ;MotorControl.c: 23: T3CON = 0x00;
  4839  00177E  0E00               	movlw	0
  4840  001780  6EB1               	movwf	4017,c	;volatile
  4841                           
  4842                           ;MotorControl.c: 24: T2CON = 0x04;
  4843  001782  0E04               	movlw	4
  4844  001784  6ECA               	movwf	4042,c	;volatile
  4845  001786  0012               	return		;funcret
  4846  001788                     __end_of_MotorDriverInit:
  4847                           	opt stack 0
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           intcon2	equ	0xFF1
  4856                           postinc0	equ	0xFEE
  4857                           wreg	equ	0xFE8
  4858                           postdec1	equ	0xFE5
  4859                           fsr1l	equ	0xFE1
  4860                           indf2	equ	0xFDF
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _JoystickInit *****************
  4866 ;; Defined at:
  4867 ;;		line 6 in file "Joystick.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    4
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_initialize
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text24
  4896  001694                     __ptext24:
  4897                           	opt stack 0
  4898  001694                     _JoystickInit:
  4899                           	opt stack 25
  4900                           
  4901                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  4902                           
  4903                           ;incstack = 0
  4904  001694  9492               	bcf	3986,2,c	;volatile
  4905                           
  4906                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  4907  001696  8293               	bsf	3987,1,c	;volatile
  4908                           
  4909                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  4910  001698  A281               	btfss	3969,1,c	;volatile
  4911  00169A  D003               	goto	l31
  4912                           
  4913                           ;Joystick.c: 11: {
  4914                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  4915  00169C  8480               	bsf	3968,2,c	;volatile
  4916                           
  4917                           ;Joystick.c: 13: JSEnableFlag = 1;
  4918  00169E  0E01               	movlw	1
  4919  0016A0  D004               	goto	L1
  4920  0016A2                     l31:
  4921                           
  4922                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  4923  0016A2  B281               	btfsc	3969,1,c	;volatile
  4924  0016A4  D005               	goto	l2782
  4925                           
  4926                           ;Joystick.c: 16: {
  4927                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  4928  0016A6  9480               	bcf	3968,2,c	;volatile
  4929                           
  4930                           ;Joystick.c: 18: JSEnableFlag = 0;
  4931  0016A8  0E00               	movlw	0
  4932  0016AA                     L1:
  4933  0016AA  0100               	movlb	0	; () banked
  4934  0016AC  6FAD               	movwf	_JSEnableFlag& (0+255),b
  4935                           
  4936                           ; BSR set to: 0
  4937  0016AE  D000               	goto	l2782
  4938  0016B0                     l2782:
  4939                           
  4940                           ;Joystick.c: 19: }
  4941                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  4942  0016B0  80C2               	bsf	4034,0,c	;volatile
  4943                           
  4944                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  4945  0016B2  50C2               	movf	4034,w,c	;volatile
  4946  0016B4  0B01               	andlw	1
  4947  0016B6  6EC2               	movwf	4034,c	;volatile
  4948                           
  4949                           ;Joystick.c: 23: ADCON1 = 0x0D;
  4950  0016B8  0E0D               	movlw	13
  4951  0016BA  6EC1               	movwf	4033,c	;volatile
  4952                           
  4953                           ;Joystick.c: 24: ADCON2 = 0xB4;
  4954  0016BC  0EB4               	movlw	180
  4955  0016BE  6EC0               	movwf	4032,c	;volatile
  4956  0016C0  0012               	return		;funcret
  4957  0016C2                     __end_of_JoystickInit:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           intcon2	equ	0xFF1
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _InitializeInterrupts *****************
  4977 ;; Defined at:
  4978 ;;		line 226 in file "RTDuC.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		None
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    4
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_initialize
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text25
  5007  0018CC                     __ptext25:
  5008                           	opt stack 0
  5009  0018CC                     _InitializeInterrupts:
  5010                           	opt stack 25
  5011                           
  5012                           ;RTDuC.c: 228: INTCONbits.GIE = 1;
  5013                           
  5014                           ;incstack = 0
  5015  0018CC  8EF2               	bsf	intcon,7,c	;volatile
  5016                           
  5017                           ;RTDuC.c: 229: INTCONbits.PEIE = 1;
  5018  0018CE  8CF2               	bsf	intcon,6,c	;volatile
  5019                           
  5020                           ;RTDuC.c: 231: INTCONbits.TMR0IE = 1;
  5021  0018D0  8AF2               	bsf	intcon,5,c	;volatile
  5022                           
  5023                           ;RTDuC.c: 232: T0CONbits.TMR0ON = 1;
  5024  0018D2  8ED5               	bsf	4053,7,c	;volatile
  5025                           
  5026                           ;RTDuC.c: 234: PIE2bits.OSCFIE = 1;
  5027  0018D4  8EA0               	bsf	4000,7,c	;volatile
  5028                           
  5029                           ;RTDuC.c: 235: IPR2bits.OSCFIP = 1;
  5030  0018D6  8EA2               	bsf	4002,7,c	;volatile
  5031  0018D8  0012               	return		;funcret
  5032  0018DA                     __end_of_InitializeInterrupts:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           intcon2	equ	0xFF1
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           postdec1	equ	0xFE5
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           fsr2h	equ	0xFDA
  5048                           fsr2l	equ	0xFD9
  5049                           status	equ	0xFD8
  5050                           
  5051 ;; *************** function _EEPROMInit *****************
  5052 ;; Defined at:
  5053 ;;		line 13 in file "EEPROM.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;		None
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;		None               void
  5060 ;; Registers used:
  5061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;Total ram usage:        0 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    7
  5074 ;; This function calls:
  5075 ;;		_EEBootUp
  5076 ;; This function is called by:
  5077 ;;		_initialize
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text26
  5082  00185C                     __ptext26:
  5083                           	opt stack 0
  5084  00185C                     _EEPROMInit:
  5085                           	opt stack 22
  5086                           
  5087                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5088                           
  5089                           ;incstack = 0
  5090  00185C  9EA6               	bcf	4006,7,c	;volatile
  5091                           
  5092                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5093  00185E  9CA6               	bcf	4006,6,c	;volatile
  5094                           
  5095                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5096  001860  84A6               	bsf	4006,2,c	;volatile
  5097                           
  5098                           ;EEPROM.c: 19: EEBootUp();
  5099  001862  ECC2  F008         	call	_EEBootUp	;wreg free
  5100                           
  5101                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5102  001866  0E3D               	movlw	61
  5103  001868  6ED2               	movwf	4050,c	;volatile
  5104                           
  5105                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5106  00186A  84A0               	bsf	4000,2,c	;volatile
  5107                           
  5108                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5109  00186C  84A2               	bsf	4002,2,c	;volatile
  5110  00186E  0012               	return		;funcret
  5111  001870                     __end_of_EEPROMInit:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           intcon	equ	0xFF2
  5120                           intcon2	equ	0xFF1
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           postdec1	equ	0xFE5
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _EEBootUp *****************
  5131 ;; Defined at:
  5132 ;;		line 27 in file "EEPROM.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;		None               void
  5139 ;; Registers used:
  5140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;Total ram usage:        2 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    6
  5153 ;; This function calls:
  5154 ;;		_EEReadChar
  5155 ;;		_EEReadDouble
  5156 ;; This function is called by:
  5157 ;;		_EEPROMInit
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text27
  5162  001184                     __ptext27:
  5163                           	opt stack 0
  5164  001184                     _EEBootUp:
  5165                           	opt stack 22
  5166                           
  5167                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  5168                           
  5169                           ;incstack = 0
  5170  001184  0E16               	movlw	22
  5171  001186  ECF8  F00B         	call	_EEReadChar
  5172  00118A  0900               	iorlw	0
  5173  00118C  B4D8               	btfsc	status,2,c
  5174  00118E  D039               	goto	l341
  5175                           
  5176                           ;EEPROM.c: 30: {
  5177                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  5178  001190  0E00               	movlw	0
  5179  001192  ECC0  F009         	call	_EEReadDouble
  5180  001196  C01E  F03F         	movff	?_EEReadDouble,_SetAngle
  5181  00119A  C01F  F040         	movff	?_EEReadDouble+1,_SetAngle+1
  5182  00119E  C020  F041         	movff	?_EEReadDouble+2,_SetAngle+2
  5183                           
  5184                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  5185  0011A2  0E03               	movlw	3
  5186  0011A4  ECC0  F009         	call	_EEReadDouble
  5187  0011A8  C01E  F09E         	movff	?_EEReadDouble,_Kp
  5188  0011AC  C01F  F09F         	movff	?_EEReadDouble+1,_Kp+1
  5189  0011B0  C020  F0A0         	movff	?_EEReadDouble+2,_Kp+2
  5190                           
  5191                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  5192  0011B4  0E06               	movlw	6
  5193  0011B6  ECC0  F009         	call	_EEReadDouble
  5194  0011BA  C01E  F09B         	movff	?_EEReadDouble,_Ki
  5195  0011BE  C01F  F09C         	movff	?_EEReadDouble+1,_Ki+1
  5196  0011C2  C020  F09D         	movff	?_EEReadDouble+2,_Ki+2
  5197                           
  5198                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  5199  0011C6  0E09               	movlw	9
  5200  0011C8  ECC0  F009         	call	_EEReadDouble
  5201  0011CC  C01E  F098         	movff	?_EEReadDouble,_Kd
  5202  0011D0  C01F  F099         	movff	?_EEReadDouble+1,_Kd+1
  5203  0011D4  C020  F09A         	movff	?_EEReadDouble+2,_Kd+2
  5204                           
  5205                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  5206  0011D8  0E15               	movlw	21
  5207  0011DA  ECF8  F00B         	call	_EEReadChar
  5208  0011DE  0100               	movlb	0	; () banked
  5209  0011E0  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  5213  0011E2  0100               	movlb	0	; () banked
  5214  0011E4  51AE               	movf	_PIDEnableFlag& (0+255),w,b
  5215  0011E6  6E23               	movwf	??_EEBootUp& (0+255),c
  5216  0011E8  6A24               	clrf	(??_EEBootUp+1)& (0+255),c
  5217  0011EA  0E01               	movlw	1
  5218  0011EC  1223               	iorwf	??_EEBootUp,f,c
  5219  0011EE  0E00               	movlw	0
  5220  0011F0  1224               	iorwf	??_EEBootUp+1,f,c
  5221  0011F2  0423               	decf	??_EEBootUp,w,c
  5222  0011F4  1024               	iorwf	??_EEBootUp+1,w,c
  5223  0011F6  A4D8               	btfss	status,2,c
  5224  0011F8  D004               	goto	l341
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;EEPROM.c: 37: {
  5228                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  5229  0011FA  0E03               	movlw	3
  5230  0011FC  0100               	movlb	0	; () banked
  5231  0011FE  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234  001200  D000               	goto	l341
  5235  001202                     l341:
  5236  001202  0012               	return		;funcret
  5237  001204                     __end_of_EEBootUp:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           intcon	equ	0xFF2
  5246                           intcon2	equ	0xFF1
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _EEReadDouble *****************
  5257 ;; Defined at:
  5258 ;;		line 100 in file "EEPROM.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  location        1    wreg     unsigned char 
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;  location        1   32[COMRAM] unsigned char 
  5263 ;;  x               1   33[COMRAM] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  3   29[COMRAM] unsigned char 
  5266 ;; Registers used:
  5267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5273 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;Total ram usage:        5 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    5
  5280 ;; This function calls:
  5281 ;;		_Busy_eep
  5282 ;;		_EEReassembleDouble
  5283 ;;		_Read_b_eep
  5284 ;; This function is called by:
  5285 ;;		_EEBootUp
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text28
  5290  001380                     __ptext28:
  5291                           	opt stack 0
  5292  001380                     _EEReadDouble:
  5293                           	opt stack 22
  5294                           
  5295                           ;incstack = 0
  5296                           ;EEReadDouble@location stored from wreg
  5297  001380  6E21               	movwf	EEReadDouble@location,c
  5298                           
  5299                           ;EEPROM.c: 102: unsigned char x;
  5300                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  5301  001382  50F2               	movf	intcon,w,c	;volatile
  5302  001384  0B3F               	andlw	63
  5303  001386  6EF2               	movwf	intcon,c	;volatile
  5304                           
  5305                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  5306  001388  0E00               	movlw	0
  5307  00138A  6E22               	movwf	EEReadDouble@x,c
  5308  00138C                     l2430:
  5309  00138C  0E02               	movlw	2
  5310  00138E  6422               	cpfsgt	EEReadDouble@x,c
  5311  001390  D001               	goto	l2434
  5312  001392  D014               	goto	l2442
  5313  001394                     l2434:
  5314                           
  5315                           ;EEPROM.c: 107: {
  5316                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  5317  001394  5022               	movf	EEReadDouble@x,w,c
  5318  001396  0D01               	mullw	1
  5319  001398  0E3C               	movlw	low _DDouble
  5320  00139A  24F3               	addwf	prodl,w,c
  5321  00139C  6ED9               	movwf	fsr2l,c
  5322  00139E  0E00               	movlw	high _DDouble
  5323  0013A0  20F4               	addwfc	prodh,w,c
  5324  0013A2  6EDA               	movwf	fsr2h,c
  5325  0013A4  5021               	movf	EEReadDouble@location,w,c
  5326  0013A6  2422               	addwf	EEReadDouble@x,w,c
  5327  0013A8  6E18               	movwf	Read_b_eep@badd,c
  5328  0013AA  6A19               	clrf	Read_b_eep@badd+1,c
  5329  0013AC  3619               	rlcf	Read_b_eep@badd+1,f,c
  5330  0013AE  EC15  F00C         	call	_Read_b_eep	;wreg free
  5331  0013B2  6EDF               	movwf	indf2,c
  5332                           
  5333                           ;EEPROM.c: 109: Busy_eep();
  5334  0013B4  EC78  F00C         	call	_Busy_eep	;wreg free
  5335  0013B8  2A22               	incf	EEReadDouble@x,f,c
  5336  0013BA  D7E8               	goto	l2430
  5337  0013BC                     l2442:
  5338                           
  5339                           ;EEPROM.c: 110: }
  5340                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  5341  0013BC  50F2               	movf	intcon,w,c	;volatile
  5342  0013BE  09C0               	iorlw	192
  5343  0013C0  6EF2               	movwf	intcon,c	;volatile
  5344                           
  5345                           ;EEPROM.c: 114: return EEReassembleDouble();
  5346  0013C2  EC60  F00A         	call	_EEReassembleDouble	;wreg free
  5347  0013C6  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5348  0013CA  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5349  0013CE  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5350  0013D2  D000               	goto	l357
  5351  0013D4                     l357:
  5352  0013D4  0012               	return		;funcret
  5353  0013D6                     __end_of_EEReadDouble:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           intcon2	equ	0xFF1
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           postdec1	equ	0xFE5
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _EEReassembleDouble *****************
  5373 ;; Defined at:
  5374 ;;		line 62 in file "EEPROM.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  dub             3   26[COMRAM] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  3   23[COMRAM] unsigned char 
  5381 ;; Registers used:
  5382 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5388 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;Total ram usage:        6 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    4
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_EEReadDouble
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text29
  5403  0014C0                     __ptext29:
  5404                           	opt stack 0
  5405  0014C0                     _EEReassembleDouble:
  5406                           	opt stack 22
  5407                           
  5408                           ;EEPROM.c: 64: double dub;
  5409                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  5410                           
  5411                           ;incstack = 0
  5412  0014C0  0E1B               	movlw	low EEReassembleDouble@dub
  5413  0014C2  6E42               	movwf	_DoublePtr,c
  5414  0014C4  0E00               	movlw	high EEReassembleDouble@dub
  5415  0014C6  6E43               	movwf	_DoublePtr+1,c
  5416                           
  5417                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  5418  0014C8  C042  FFD9         	movff	_DoublePtr,fsr2l
  5419  0014CC  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  5420  0014D0  C03C  FFDF         	movff	_DDouble,indf2
  5421                           
  5422                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  5423  0014D4  EE20 F001          	lfsr	2,1
  5424  0014D8  5042               	movf	_DoublePtr,w,c
  5425  0014DA  26D9               	addwf	fsr2l,f,c
  5426  0014DC  5043               	movf	_DoublePtr+1,w,c
  5427  0014DE  22DA               	addwfc	fsr2h,f,c
  5428  0014E0  C03D  FFDF         	movff	_DDouble+1,indf2
  5429                           
  5430                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  5431  0014E4  EE20 F002          	lfsr	2,2
  5432  0014E8  5042               	movf	_DoublePtr,w,c
  5433  0014EA  26D9               	addwf	fsr2l,f,c
  5434  0014EC  5043               	movf	_DoublePtr+1,w,c
  5435  0014EE  22DA               	addwfc	fsr2h,f,c
  5436  0014F0  C03E  FFDF         	movff	_DDouble+2,indf2
  5437                           
  5438                           ;EEPROM.c: 69: return dub;
  5439  0014F4  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5440  0014F8  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5441  0014FC  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5442  001500  D000               	goto	l347
  5443  001502                     l347:
  5444  001502  0012               	return		;funcret
  5445  001504                     __end_of_EEReassembleDouble:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           intcon2	equ	0xFF1
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           postdec1	equ	0xFE5
  5458                           fsr1l	equ	0xFE1
  5459                           indf2	equ	0xFDF
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function _Busy_eep *****************
  5465 ;; Defined at:
  5466 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		None
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    4
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_EEReadDouble
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text30
  5495  0018F0                     __ptext30:
  5496                           	opt stack 0
  5497  0018F0                     _Busy_eep:
  5498                           	opt stack 22
  5499                           
  5500                           ;incstack = 0
  5501  0018F0  D000               	goto	l555
  5502  0018F2                     l555:
  5503  0018F2  B2A6               	btfsc	4006,1,c	;volatile
  5504  0018F4  D7FE               	goto	l555
  5505  0018F6  0012               	return		;funcret
  5506  0018F8                     __end_of_Busy_eep:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           intcon	equ	0xFF2
  5515                           intcon2	equ	0xFF1
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function _EEReadChar *****************
  5526 ;; Defined at:
  5527 ;;		line 136 in file "EEPROM.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  location        1    wreg     unsigned char 
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;  location        1   25[COMRAM] unsigned char 
  5532 ;;  ch              1   26[COMRAM] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      unsigned char 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    5
  5549 ;; This function calls:
  5550 ;;		_Read_b_eep
  5551 ;; This function is called by:
  5552 ;;		_EEBootUp
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text31
  5557  0017F0                     __ptext31:
  5558                           	opt stack 0
  5559  0017F0                     _EEReadChar:
  5560                           	opt stack 22
  5561                           
  5562                           ;incstack = 0
  5563                           ;EEReadChar@location stored from wreg
  5564  0017F0  6E1A               	movwf	EEReadChar@location,c
  5565                           
  5566                           ;EEPROM.c: 138: unsigned char ch;
  5567                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  5568  0017F2  50F2               	movf	intcon,w,c	;volatile
  5569  0017F4  0B3F               	andlw	63
  5570  0017F6  6EF2               	movwf	intcon,c	;volatile
  5571                           
  5572                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  5573  0017F8  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  5574  0017FC  6A19               	clrf	Read_b_eep@badd+1,c
  5575  0017FE  EC15  F00C         	call	_Read_b_eep	;wreg free
  5576  001802  6E1B               	movwf	EEReadChar@ch,c
  5577                           
  5578                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  5579  001804  50F2               	movf	intcon,w,c	;volatile
  5580  001806  09C0               	iorlw	192
  5581  001808  6EF2               	movwf	intcon,c	;volatile
  5582                           
  5583                           ;EEPROM.c: 146: return ch;
  5584  00180A  501B               	movf	EEReadChar@ch,w,c
  5585  00180C  D000               	goto	l363
  5586  00180E                     l363:
  5587  00180E  0012               	return		;funcret
  5588  001810                     __end_of_EEReadChar:
  5589                           	opt stack 0
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           intcon2	equ	0xFF1
  5598                           postinc0	equ	0xFEE
  5599                           wreg	equ	0xFE8
  5600                           postdec1	equ	0xFE5
  5601                           fsr1l	equ	0xFE1
  5602                           indf2	equ	0xFDF
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _Read_b_eep *****************
  5608 ;; Defined at:
  5609 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  badd            2   23[COMRAM] unsigned int 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;		None
  5614 ;; Return value:  Size  Location     Type
  5615 ;;                  1    wreg      unsigned char 
  5616 ;; Registers used:
  5617 ;;		wreg, status,2, status,0
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;Total ram usage:        2 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    4
  5630 ;; This function calls:
  5631 ;;		Nothing
  5632 ;; This function is called by:
  5633 ;;		_EEReadDouble
  5634 ;;		_EEReadChar
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           	psect	text32
  5639  00182A                     __ptext32:
  5640                           	opt stack 0
  5641  00182A                     _Read_b_eep:
  5642                           	opt stack 22
  5643                           
  5644                           ;incstack = 0
  5645  00182A  5019               	movf	Read_b_eep@badd+1,w,c
  5646  00182C  0B03               	andlw	3
  5647  00182E  6EAA               	movwf	4010,c	;volatile
  5648  001830  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  5649  001834  9CA6               	bcf	4006,6,c	;volatile
  5650  001836  9EA6               	bcf	4006,7,c	;volatile
  5651  001838  80A6               	bsf	4006,0,c	;volatile
  5652  00183A  F000               	nop	
  5653  00183C  F000               	nop	
  5654  00183E  50A8               	movf	4008,w,c	;volatile
  5655  001840  D000               	goto	l571
  5656  001842                     l571:
  5657  001842  0012               	return		;funcret
  5658  001844                     __end_of_Read_b_eep:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           intcon	equ	0xFF2
  5667                           intcon2	equ	0xFF1
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function _SendSPI1 *****************
  5678 ;; Defined at:
  5679 ;;		line 36 in file "SPISlave.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  data            1    wreg     unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  data            1   24[COMRAM] unsigned char 
  5684 ;;  temp            1   23[COMRAM] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;		None               void
  5687 ;; Registers used:
  5688 ;;		wreg
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;Total ram usage:        2 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    4
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_main
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text33
  5709  001844                     __ptext33:
  5710                           	opt stack 0
  5711  001844                     _SendSPI1:
  5712                           	opt stack 26
  5713                           
  5714                           ;incstack = 0
  5715                           ;SendSPI1@data stored from wreg
  5716  001844  6E19               	movwf	SendSPI1@data,c
  5717                           
  5718                           ;SPISlave.c: 38: SSP1BUF = data;
  5719  001846  C019  FFC9         	movff	SendSPI1@data,4041	;volatile
  5720                           
  5721                           ;SPISlave.c: 39: unsigned char temp;
  5722                           ;SPISlave.c: 40: PIR1bits.SSP1IF = 0;
  5723  00184A  969E               	bcf	3998,3,c	;volatile
  5724                           
  5725                           ;SPISlave.c: 41: temp = SSP1BUF;
  5726  00184C  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  5727                           
  5728                           ;SPISlave.c: 42: while (!PIR1bits.SSP1IF);
  5729  001850  D000               	goto	l255
  5730  001852                     l255:
  5731  001852  A69E               	btfss	3998,3,c	;volatile
  5732  001854  D7FE               	goto	l255
  5733                           
  5734                           ;SPISlave.c: 43: SSP1CON1bits.SSPOV1 = 0;
  5735  001856  9CC6               	bcf	4038,6,c	;volatile
  5736                           
  5737                           ;SPISlave.c: 44: PIR1bits.SSP1IF = 0;
  5738  001858  969E               	bcf	3998,3,c	;volatile
  5739  00185A  0012               	return		;funcret
  5740  00185C                     __end_of_SendSPI1:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           intcon2	equ	0xFF1
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _SPIReassembleDouble *****************
  5760 ;; Defined at:
  5761 ;;		line 72 in file "SPISlave.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  dub             3   26[COMRAM] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  3   23[COMRAM] unsigned char 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5775 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;Total ram usage:        6 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    4
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_main
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           	psect	text34
  5790  001504                     __ptext34:
  5791                           	opt stack 0
  5792  001504                     _SPIReassembleDouble:
  5793                           	opt stack 26
  5794                           
  5795                           ;SPISlave.c: 74: double dub;
  5796                           ;SPISlave.c: 75: DoublePtr = (unsigned char*) &dub;
  5797                           
  5798                           ;incstack = 0
  5799  001504  0E1B               	movlw	low SPIReassembleDouble@dub
  5800  001506  6E42               	movwf	_DoublePtr,c
  5801  001508  0E00               	movlw	high SPIReassembleDouble@dub
  5802  00150A  6E43               	movwf	_DoublePtr+1,c
  5803                           
  5804                           ;SPISlave.c: 76: DoublePtr[0] = DoubleSPIS[0];
  5805  00150C  C042  FFD9         	movff	_DoublePtr,fsr2l
  5806  001510  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  5807  001514  C038  FFDF         	movff	_DoubleSPIS,indf2
  5808                           
  5809                           ;SPISlave.c: 77: DoublePtr[1] = DoubleSPIS[1];
  5810  001518  EE20 F001          	lfsr	2,1
  5811  00151C  5042               	movf	_DoublePtr,w,c
  5812  00151E  26D9               	addwf	fsr2l,f,c
  5813  001520  5043               	movf	_DoublePtr+1,w,c
  5814  001522  22DA               	addwfc	fsr2h,f,c
  5815  001524  C039  FFDF         	movff	_DoubleSPIS+1,indf2
  5816                           
  5817                           ;SPISlave.c: 78: DoublePtr[2] = DoubleSPIS[2];
  5818  001528  EE20 F002          	lfsr	2,2
  5819  00152C  5042               	movf	_DoublePtr,w,c
  5820  00152E  26D9               	addwf	fsr2l,f,c
  5821  001530  5043               	movf	_DoublePtr+1,w,c
  5822  001532  22DA               	addwfc	fsr2h,f,c
  5823  001534  C03A  FFDF         	movff	_DoubleSPIS+2,indf2
  5824                           
  5825                           ;SPISlave.c: 80: return dub;
  5826  001538  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  5827  00153C  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  5828  001540  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  5829  001544  D000               	goto	l275
  5830  001546                     l275:
  5831  001546  0012               	return		;funcret
  5832  001548                     __end_of_SPIReassembleDouble:
  5833                           	opt stack 0
  5834                           tblptru	equ	0xFF8
  5835                           tblptrh	equ	0xFF7
  5836                           tblptrl	equ	0xFF6
  5837                           tablat	equ	0xFF5
  5838                           prodh	equ	0xFF4
  5839                           prodl	equ	0xFF3
  5840                           intcon	equ	0xFF2
  5841                           intcon2	equ	0xFF1
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           postdec1	equ	0xFE5
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function _SPIDisassembleDouble *****************
  5852 ;; Defined at:
  5853 ;;		line 55 in file "SPISlave.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  dub             3   25[COMRAM] unsigned char 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;		None
  5858 ;; Return value:  Size  Location     Type
  5859 ;;		None               void
  5860 ;; Registers used:
  5861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5867 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;Total ram usage:        3 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    5
  5874 ;; This function calls:
  5875 ;;		_GenerateChecksum
  5876 ;; This function is called by:
  5877 ;;		_main
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text35
  5882  001588                     __ptext35:
  5883                           	opt stack 0
  5884  001588                     _SPIDisassembleDouble:
  5885                           	opt stack 25
  5886                           
  5887                           ;SPISlave.c: 57: DoublePtr = (unsigned char*) &dub;
  5888                           
  5889                           ;incstack = 0
  5890  001588  0E1A               	movlw	low SPIDisassembleDouble@dub
  5891  00158A  6E42               	movwf	_DoublePtr,c
  5892  00158C  0E00               	movlw	high SPIDisassembleDouble@dub
  5893  00158E  6E43               	movwf	_DoublePtr+1,c
  5894                           
  5895                           ;SPISlave.c: 58: DoubleSPIS[0] = DoublePtr[0];
  5896  001590  C042  FFD9         	movff	_DoublePtr,fsr2l
  5897  001594  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  5898  001598  50DF               	movf	indf2,w,c
  5899  00159A  6E38               	movwf	_DoubleSPIS,c
  5900                           
  5901                           ;SPISlave.c: 59: DoubleSPIS[1] = DoublePtr[1];
  5902  00159C  EE20 F001          	lfsr	2,1
  5903  0015A0  5042               	movf	_DoublePtr,w,c
  5904  0015A2  26D9               	addwf	fsr2l,f,c
  5905  0015A4  5043               	movf	_DoublePtr+1,w,c
  5906  0015A6  22DA               	addwfc	fsr2h,f,c
  5907  0015A8  50DF               	movf	indf2,w,c
  5908  0015AA  6E39               	movwf	_DoubleSPIS+1,c
  5909                           
  5910                           ;SPISlave.c: 60: DoubleSPIS[2] = DoublePtr[2];
  5911  0015AC  EE20 F002          	lfsr	2,2
  5912  0015B0  5042               	movf	_DoublePtr,w,c
  5913  0015B2  26D9               	addwf	fsr2l,f,c
  5914  0015B4  5043               	movf	_DoublePtr+1,w,c
  5915  0015B6  22DA               	addwfc	fsr2h,f,c
  5916  0015B8  50DF               	movf	indf2,w,c
  5917  0015BA  6E3A               	movwf	_DoubleSPIS+2,c
  5918                           
  5919                           ;SPISlave.c: 61: DoubleSPIS[3] = GenerateChecksum();
  5920  0015BC  EC19  F00B         	call	_GenerateChecksum	;wreg free
  5921  0015C0  6E3B               	movwf	_DoubleSPIS+3,c
  5922  0015C2  0012               	return		;funcret
  5923  0015C4                     __end_of_SPIDisassembleDouble:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           intcon	equ	0xFF2
  5932                           intcon2	equ	0xFF1
  5933                           postinc0	equ	0xFEE
  5934                           wreg	equ	0xFE8
  5935                           postdec1	equ	0xFE5
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           fsr2h	equ	0xFDA
  5939                           fsr2l	equ	0xFD9
  5940                           status	equ	0xFD8
  5941                           
  5942 ;; *************** function _GenerateChecksum *****************
  5943 ;; Defined at:
  5944 ;;		line 64 in file "SPISlave.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;		None
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  y               1   24[COMRAM] unsigned char 
  5949 ;;  sum             1   23[COMRAM] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      unsigned char 
  5952 ;; Registers used:
  5953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;Total ram usage:        2 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    4
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		_SPIDisassembleDouble
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text36
  5974  001632                     __ptext36:
  5975                           	opt stack 0
  5976  001632                     _GenerateChecksum:
  5977                           	opt stack 25
  5978                           
  5979                           ;SPISlave.c: 66: unsigned char y, sum = 0;
  5980                           
  5981                           ;incstack = 0
  5982  001632  0E00               	movlw	0
  5983  001634  6E18               	movwf	GenerateChecksum@sum,c
  5984                           
  5985                           ;SPISlave.c: 67: for (y = 0; y != 3; y++)
  5986  001636  0E00               	movlw	0
  5987  001638  6E19               	movwf	GenerateChecksum@y,c
  5988  00163A                     l2824:
  5989  00163A  0E03               	movlw	3
  5990  00163C  1819               	xorwf	GenerateChecksum@y,w,c
  5991  00163E  B4D8               	btfsc	status,2,c
  5992  001640  D00E               	goto	l2834
  5993  001642  D001               	goto	l2828
  5994  001644  D00C               	goto	l2834
  5995  001646                     l2828:
  5996                           
  5997                           ;SPISlave.c: 68: sum += DoubleSPIS[y];
  5998  001646  5019               	movf	GenerateChecksum@y,w,c
  5999  001648  0D01               	mullw	1
  6000  00164A  0E38               	movlw	low _DoubleSPIS
  6001  00164C  24F3               	addwf	prodl,w,c
  6002  00164E  6ED9               	movwf	fsr2l,c
  6003  001650  0E00               	movlw	high _DoubleSPIS
  6004  001652  20F4               	addwfc	prodh,w,c
  6005  001654  6EDA               	movwf	fsr2h,c
  6006  001656  50DF               	movf	indf2,w,c
  6007  001658  2618               	addwf	GenerateChecksum@sum,f,c
  6008  00165A  2A19               	incf	GenerateChecksum@y,f,c
  6009  00165C  D7EE               	goto	l2824
  6010  00165E                     l2834:
  6011                           
  6012                           ;SPISlave.c: 69: return sum;
  6013  00165E  5018               	movf	GenerateChecksum@sum,w,c
  6014  001660  D000               	goto	l272
  6015  001662                     l272:
  6016  001662  0012               	return		;funcret
  6017  001664                     __end_of_GenerateChecksum:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           fsr1l	equ	0xFE1
  6031                           indf2	equ	0xFDF
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function _ReceiveSPI1 *****************
  6037 ;; Defined at:
  6038 ;;		line 47 in file "SPISlave.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      unsigned char 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:        0 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    4
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_main
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text37
  6067  0018A8                     __ptext37:
  6068                           	opt stack 0
  6069  0018A8                     _ReceiveSPI1:
  6070                           	opt stack 26
  6071                           
  6072                           ;SPISlave.c: 49: SSP1BUF = 0x00;
  6073                           
  6074                           ;incstack = 0
  6075  0018A8  0E00               	movlw	0
  6076  0018AA  6EC9               	movwf	4041,c	;volatile
  6077                           
  6078                           ;SPISlave.c: 50: while (!PIR1bits.SSP1IF);
  6079  0018AC  D000               	goto	l261
  6080  0018AE                     l261:
  6081  0018AE  A69E               	btfss	3998,3,c	;volatile
  6082  0018B0  D7FE               	goto	l261
  6083                           
  6084                           ;SPISlave.c: 51: PIR1bits.SSP1IF = 0;
  6085  0018B2  969E               	bcf	3998,3,c	;volatile
  6086                           
  6087                           ;SPISlave.c: 52: return SSP1BUF;
  6088  0018B4  50C9               	movf	4041,w,c	;volatile
  6089  0018B6  D000               	goto	l264
  6090  0018B8                     l264:
  6091  0018B8  0012               	return		;funcret
  6092  0018BA                     __end_of_ReceiveSPI1:
  6093                           	opt stack 0
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111 ;; *************** function _ImplementJSMotion *****************
  6112 ;; Defined at:
  6113 ;;		line 58 in file "MotorControl.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  JoystickValu    2   37[BANK0 ] int 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  CCPinput        2   41[BANK0 ] unsigned int 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;		None               void
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;Total ram usage:        6 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    5
  6134 ;; This function calls:
  6135 ;;		_abs
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text38
  6142  000898                     __ptext38:
  6143                           	opt stack 0
  6144  000898                     _ImplementJSMotion:
  6145                           	opt stack 25
  6146                           
  6147                           ;MotorControl.c: 60: unsigned int CCPinput;
  6148                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  6149                           
  6150                           ;incstack = 0
  6151  000898  5046               	movf	_DeadbandLow,w,c
  6152  00089A  0100               	movlb	0	; () banked
  6153  00089C  5D85               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6154  00089E  0100               	movlb	0	; () banked
  6155  0008A0  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6156  0008A2  0A80               	xorlw	128
  6157  0008A4  0100               	movlb	0	; () banked
  6158  0008A6  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6159  0008A8  5047               	movf	_DeadbandLow+1,w,c
  6160  0008AA  0A80               	xorlw	128
  6161  0008AC  0100               	movlb	0	; () banked
  6162  0008AE  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6163  0008B0  B0D8               	btfsc	status,0,c
  6164  0008B2  D002               	goto	l3538
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;MotorControl.c: 62: {
  6168                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  6169  0008B4  8EB7               	bsf	4023,7,c	;volatile
  6170  0008B6  D00F               	goto	l3542
  6171  0008B8                     l3538:
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  6175  0008B8  0100               	movlb	0	; () banked
  6176  0008BA  5185               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6177  0008BC  5C44               	subwf	_DeadbandHigh,w,c
  6178  0008BE  5045               	movf	_DeadbandHigh+1,w,c
  6179  0008C0  0A80               	xorlw	128
  6180  0008C2  0100               	movlb	0	; () banked
  6181  0008C4  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6182  0008C6  0100               	movlb	0	; () banked
  6183  0008C8  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6184  0008CA  0A80               	xorlw	128
  6185  0008CC  0100               	movlb	0	; () banked
  6186  0008CE  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6187  0008D0  B0D8               	btfsc	status,0,c
  6188  0008D2  D005               	goto	l3544
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;MotorControl.c: 67: {
  6192                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  6193  0008D4  9EB7               	bcf	4023,7,c	;volatile
  6194  0008D6                     l3542:
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  6198  0008D6  0E00               	movlw	0
  6199  0008D8  0100               	movlb	0	; () banked
  6200  0008DA  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  6201                           
  6202                           ;MotorControl.c: 70: }
  6203  0008DC  D02A               	goto	l3556
  6204  0008DE                     l3544:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  6208  0008DE  0100               	movlb	0	; () banked
  6209  0008E0  5185               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6210  0008E2  5C44               	subwf	_DeadbandHigh,w,c
  6211  0008E4  5045               	movf	_DeadbandHigh+1,w,c
  6212  0008E6  0A80               	xorlw	128
  6213  0008E8  0100               	movlb	0	; () banked
  6214  0008EA  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6215  0008EC  0100               	movlb	0	; () banked
  6216  0008EE  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6217  0008F0  0A80               	xorlw	128
  6218  0008F2  0100               	movlb	0	; () banked
  6219  0008F4  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6220  0008F6  A0D8               	btfss	status,0,c
  6221  0008F8  D01C               	goto	l3556
  6222                           
  6223                           ; BSR set to: 0
  6224  0008FA  5046               	movf	_DeadbandLow,w,c
  6225  0008FC  0100               	movlb	0	; () banked
  6226  0008FE  5D85               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6227  000900  0100               	movlb	0	; () banked
  6228  000902  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6229  000904  0A80               	xorlw	128
  6230  000906  0100               	movlb	0	; () banked
  6231  000908  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6232  00090A  5047               	movf	_DeadbandLow+1,w,c
  6233  00090C  0A80               	xorlw	128
  6234  00090E  0100               	movlb	0	; () banked
  6235  000910  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6236  000912  A0D8               	btfss	status,0,c
  6237  000914  D00E               	goto	l3556
  6238                           
  6239                           ; BSR set to: 0
  6240  000916  0100               	movlb	0	; () banked
  6241  000918  51AE               	movf	_PIDEnableFlag& (0+255),w,b
  6242  00091A  A4D8               	btfss	status,2,c
  6243  00091C  D00A               	goto	l3556
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;MotorControl.c: 72: {
  6247                           ;MotorControl.c: 73: JoystickValue = 0;
  6248  00091E  0E00               	movlw	0
  6249  000920  0100               	movlb	0	; () banked
  6250  000922  6F86               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  6251  000924  0E00               	movlw	0
  6252  000926  6F85               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  6253                           
  6254                           ;MotorControl.c: 74: CCPR3L = 0x00;
  6255  000928  0E00               	movlw	0
  6256  00092A  6EB8               	movwf	4024,c	;volatile
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  6260  00092C  9AB7               	bcf	4023,5,c	;volatile
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  6264  00092E  98B7               	bcf	4023,4,c	;volatile
  6265                           
  6266                           ; BSR set to: 0
  6267                           
  6268                           ; BSR set to: 0
  6269  000930  D000               	goto	l3556
  6270  000932                     l3556:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;MotorControl.c: 77: }
  6274                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  6275  000932  5046               	movf	_DeadbandLow,w,c
  6276  000934  0100               	movlb	0	; () banked
  6277  000936  5D85               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6278  000938  0100               	movlb	0	; () banked
  6279  00093A  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6280  00093C  0A80               	xorlw	128
  6281  00093E  0100               	movlb	0	; () banked
  6282  000940  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6283  000942  5047               	movf	_DeadbandLow+1,w,c
  6284  000944  0A80               	xorlw	128
  6285  000946  0100               	movlb	0	; () banked
  6286  000948  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6287  00094A  A0D8               	btfss	status,0,c
  6288  00094C  D00E               	goto	l3560
  6289                           
  6290                           ; BSR set to: 0
  6291  00094E  0100               	movlb	0	; () banked
  6292  000950  5185               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6293  000952  5C44               	subwf	_DeadbandHigh,w,c
  6294  000954  5045               	movf	_DeadbandHigh+1,w,c
  6295  000956  0A80               	xorlw	128
  6296  000958  0100               	movlb	0	; () banked
  6297  00095A  6F87               	movwf	??_ImplementJSMotion& (0+255),b
  6298  00095C  0100               	movlb	0	; () banked
  6299  00095E  5186               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6300  000960  0A80               	xorlw	128
  6301  000962  0100               	movlb	0	; () banked
  6302  000964  5987               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6303  000966  B0D8               	btfsc	status,0,c
  6304  000968  D030               	goto	l109
  6305  00096A                     l3560:
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;MotorControl.c: 80: {
  6309                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  6310  00096A  C085  F081         	movff	ImplementJSMotion@JoystickValue,abs@a
  6311  00096E  C086  F082         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  6312  000972  EC77  F00B         	call	_abs	;wreg free
  6313  000976  C081  F085         	movff	?_abs,ImplementJSMotion@JoystickValue
  6314  00097A  C082  F086         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  6315                           
  6316                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  6317  00097E  90D8               	bcf	status,0,c
  6318  000980  0100               	movlb	0	; () banked
  6319  000982  3585               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6320  000984  0100               	movlb	0	; () banked
  6321  000986  6F89               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  6322  000988  0100               	movlb	0	; () banked
  6323  00098A  3586               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6324  00098C  0100               	movlb	0	; () banked
  6325  00098E  6F8A               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  6329  000990  C089  F087         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6330  000994  C08A  F088         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  6331  000998  0100               	movlb	0	; () banked
  6332  00099A  90D8               	bcf	status,0,c
  6333  00099C  3388               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6334  00099E  3387               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6335  0009A0  0100               	movlb	0	; () banked
  6336  0009A2  90D8               	bcf	status,0,c
  6337  0009A4  3388               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6338  0009A6  3387               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6339  0009A8  0100               	movlb	0	; () banked
  6340  0009AA  5187               	movf	??_ImplementJSMotion& (0+255),w,b
  6341  0009AC  6EB8               	movwf	4024,c	;volatile
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  6345  0009AE  C089  F087         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6346  0009B2  0E03               	movlw	3
  6347  0009B4  0100               	movlb	0	; () banked
  6348  0009B6  1787               	andwf	??_ImplementJSMotion& (0+255),f,b
  6349  0009B8  0100               	movlb	0	; () banked
  6350  0009BA  3B87               	swapf	??_ImplementJSMotion& (0+255),f,b
  6351  0009BC  50B7               	movf	4023,w,c	;volatile
  6352  0009BE  0100               	movlb	0	; () banked
  6353  0009C0  1987               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6354  0009C2  0BCF               	andlw	-49
  6355  0009C4  1987               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6356  0009C6  6EB7               	movwf	4023,c	;volatile
  6357  0009C8  D000               	goto	l109
  6358  0009CA                     l109:
  6359                           
  6360                           ; BSR set to: 0
  6361  0009CA  0012               	return		;funcret
  6362  0009CC                     __end_of_ImplementJSMotion:
  6363                           	opt stack 0
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           intcon	equ	0xFF2
  6371                           intcon2	equ	0xFF1
  6372                           postinc0	equ	0xFEE
  6373                           wreg	equ	0xFE8
  6374                           postdec1	equ	0xFE5
  6375                           fsr1l	equ	0xFE1
  6376                           indf2	equ	0xFDF
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function _abs *****************
  6382 ;; Defined at:
  6383 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  a               2   33[BANK0 ] int 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;		None
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  2   33[BANK0 ] int 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6397 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;Total ram usage:        4 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    4
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_ImplementPIDMotion
  6408 ;;		_ImplementJSMotion
  6409 ;;		_ZeroMotors
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text39
  6414  0016EE                     __ptext39:
  6415                           	opt stack 0
  6416  0016EE                     _abs:
  6417                           	opt stack 24
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;incstack = 0
  6421  0016EE  0100               	movlb	0	; () banked
  6422  0016F0  AF82               	btfss	(abs@a+1)& (0+255),7,b
  6423  0016F2  D00E               	goto	l665
  6424                           
  6425                           ; BSR set to: 0
  6426  0016F4  C081  F083         	movff	abs@a,??_abs
  6427  0016F8  C082  F084         	movff	abs@a+1,??_abs+1
  6428  0016FC  0100               	movlb	0	; () banked
  6429  0016FE  1F83               	comf	??_abs& (0+255),f,b
  6430  001700  1F84               	comf	(??_abs+1)& (0+255),f,b
  6431  001702  4B83               	infsnz	??_abs& (0+255),f,b
  6432  001704  2B84               	incf	(??_abs+1)& (0+255),f,b
  6433  001706  C083  F081         	movff	??_abs,?_abs
  6434  00170A  C084  F082         	movff	??_abs+1,?_abs+1
  6435  00170E  D004               	goto	l666
  6436  001710                     l665:
  6437                           
  6438                           ; BSR set to: 0
  6439  001710  C081  F081         	movff	abs@a,?_abs
  6440  001714  C082  F082         	movff	abs@a+1,?_abs+1
  6441  001718                     l666:
  6442                           
  6443                           ; BSR set to: 0
  6444  001718  0012               	return		;funcret
  6445  00171A                     __end_of_abs:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           intcon	equ	0xFF2
  6454                           intcon2	equ	0xFF1
  6455                           postinc0	equ	0xFEE
  6456                           wreg	equ	0xFE8
  6457                           postdec1	equ	0xFE5
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _DetectMovement *****************
  6465 ;; Defined at:
  6466 ;;		line 42 in file "Joystick.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  ADCresult       2   28[COMRAM] unsigned int 
  6471 ;;  JoystickResu    2   26[COMRAM] int 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  2   23[COMRAM] int 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;Total ram usage:        7 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    4
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_main
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text40
  6496  001204                     __ptext40:
  6497                           	opt stack 0
  6498  001204                     _DetectMovement:
  6499                           	opt stack 26
  6500                           
  6501                           ;Joystick.c: 44: unsigned int ADCresult;
  6502                           ;Joystick.c: 45: int JoystickResult;
  6503                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;incstack = 0
  6507  001204  82C2               	bsf	4034,1,c	;volatile
  6508                           
  6509                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  6510  001206  D000               	goto	l43
  6511  001208                     l43:
  6512  001208  B2C2               	btfsc	4034,1,c	;volatile
  6513  00120A  D7FE               	goto	l43
  6514                           
  6515                           ;Joystick.c: 50: ADCresult = ADRESH;
  6516  00120C  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  6517  001210  6A1E               	clrf	DetectMovement@ADCresult+1,c
  6518                           
  6519                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  6520  001212  501D               	movf	DetectMovement@ADCresult,w,c
  6521  001214  6E1E               	movwf	DetectMovement@ADCresult+1,c
  6522  001216  6A1D               	clrf	DetectMovement@ADCresult,c
  6523                           
  6524                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  6525  001218  501D               	movf	DetectMovement@ADCresult,w,c
  6526  00121A  10C3               	iorwf	4035,w,c	;volatile
  6527  00121C  6E1D               	movwf	DetectMovement@ADCresult,c
  6528  00121E  501E               	movf	DetectMovement@ADCresult+1,w,c
  6529  001220  6E1E               	movwf	DetectMovement@ADCresult+1,c
  6530                           
  6531                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  6532  001222  0E00               	movlw	0
  6533  001224  241D               	addwf	DetectMovement@ADCresult,w,c
  6534  001226  6E1B               	movwf	DetectMovement@JoystickResult,c
  6535  001228  0EFE               	movlw	254
  6536  00122A  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  6537  00122C  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  6538                           
  6539                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  6540  00122E  501B               	movf	DetectMovement@JoystickResult,w,c
  6541  001230  5C44               	subwf	_DeadbandHigh,w,c
  6542  001232  5045               	movf	_DeadbandHigh+1,w,c
  6543  001234  0A80               	xorlw	128
  6544  001236  6E1A               	movwf	??_DetectMovement& (0+255),c
  6545  001238  501C               	movf	DetectMovement@JoystickResult+1,w,c
  6546  00123A  0A80               	xorlw	128
  6547  00123C  581A               	subwfb	??_DetectMovement& (0+255),w,c
  6548  00123E  A0D8               	btfss	status,0,c
  6549  001240  D00A               	goto	l2918
  6550  001242  5046               	movf	_DeadbandLow,w,c
  6551  001244  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  6552  001246  501C               	movf	DetectMovement@JoystickResult+1,w,c
  6553  001248  0A80               	xorlw	128
  6554  00124A  6E1A               	movwf	??_DetectMovement& (0+255),c
  6555  00124C  5047               	movf	_DeadbandLow+1,w,c
  6556  00124E  0A80               	xorlw	128
  6557  001250  581A               	subwfb	??_DetectMovement& (0+255),w,c
  6558  001252  B0D8               	btfsc	status,0,c
  6559  001254  D008               	goto	l2926
  6560  001256                     l2918:
  6561                           
  6562                           ;Joystick.c: 56: {
  6563                           ;Joystick.c: 57: PIDEnableFlag = 0;
  6564  001256  0E00               	movlw	0
  6565  001258  0100               	movlb	0	; () banked
  6566  00125A  6FAE               	movwf	_PIDEnableFlag& (0+255),b
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;Joystick.c: 58: return JoystickResult;
  6570  00125C  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  6571  001260  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;Joystick.c: 59: }
  6575                           
  6576                           ; BSR set to: 0
  6577  001264  D005               	goto	l49
  6578  001266                     l2926:
  6579                           
  6580                           ;Joystick.c: 60: else
  6581                           ;Joystick.c: 61: return 0;
  6582  001266  0E00               	movlw	0
  6583  001268  6E19               	movwf	?_DetectMovement+1,c
  6584  00126A  0E00               	movlw	0
  6585  00126C  6E18               	movwf	?_DetectMovement,c
  6586  00126E  D000               	goto	l49
  6587  001270                     l49:
  6588  001270  0012               	return		;funcret
  6589  001272                     __end_of_DetectMovement:
  6590                           	opt stack 0
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           intcon	equ	0xFF2
  6598                           intcon2	equ	0xFF1
  6599                           postinc0	equ	0xFEE
  6600                           wreg	equ	0xFE8
  6601                           postdec1	equ	0xFE5
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _DetectJoystick *****************
  6609 ;; Defined at:
  6610 ;;		line 27 in file "Joystick.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, status,2
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    4
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_main
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text41
  6639  0017AC                     __ptext41:
  6640                           	opt stack 0
  6641  0017AC                     _DetectJoystick:
  6642                           	opt stack 26
  6643                           
  6644                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  6645                           
  6646                           ;incstack = 0
  6647  0017AC  B281               	btfsc	3969,1,c	;volatile
  6648  0017AE  D003               	goto	l37
  6649                           
  6650                           ;Joystick.c: 30: {
  6651                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  6652  0017B0  9480               	bcf	3968,2,c	;volatile
  6653                           
  6654                           ;Joystick.c: 32: JSEnableFlag = 0;
  6655  0017B2  0E00               	movlw	0
  6656  0017B4  D008               	goto	L2
  6657  0017B6                     l37:
  6658                           
  6659                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  6660  0017B6  A281               	btfss	3969,1,c	;volatile
  6661  0017B8  D009               	goto	l40
  6662  0017BA  0100               	movlb	0	; () banked
  6663  0017BC  51AD               	movf	_JSEnableFlag& (0+255),w,b
  6664  0017BE  A4D8               	btfss	status,2,c
  6665  0017C0  D005               	goto	l40
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;Joystick.c: 36: {
  6669                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  6670  0017C2  8480               	bsf	3968,2,c	;volatile
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;Joystick.c: 38: JSEnableFlag = 1;
  6674  0017C4  0E01               	movlw	1
  6675  0017C6                     L2:
  6676  0017C6  0100               	movlb	0	; () banked
  6677  0017C8  6FAD               	movwf	_JSEnableFlag& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680  0017CA  D000               	goto	l40
  6681  0017CC                     l40:
  6682  0017CC  0012               	return		;funcret
  6683  0017CE                     __end_of_DetectJoystick:
  6684                           	opt stack 0
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           intcon2	equ	0xFF1
  6693                           postinc0	equ	0xFEE
  6694                           wreg	equ	0xFE8
  6695                           postdec1	equ	0xFE5
  6696                           fsr1l	equ	0xFE1
  6697                           indf2	equ	0xFDF
  6698                           fsr2h	equ	0xFDA
  6699                           fsr2l	equ	0xFD9
  6700                           status	equ	0xFD8
  6701                           
  6702 ;; *************** function _ISR *****************
  6703 ;; Defined at:
  6704 ;;		line 165 in file "RTDuC.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;		None
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;		None               void
  6711 ;; Registers used:
  6712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;Total ram usage:       14 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    3
  6725 ;; This function calls:
  6726 ;;		_HLVDInt
  6727 ;;		_INT0Int
  6728 ;;		_SPIInt
  6729 ;;		_TMR0Int
  6730 ;; This function is called by:
  6731 ;;		Interrupt level 2
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	intcode
  6736  000008                     __pintcode:
  6737                           	opt stack 0
  6738  000008                     _ISR:
  6739                           	opt stack 21
  6740                           
  6741                           ;incstack = 0
  6742  000008  CFFA F00A          	movff	pclath,??_ISR
  6743  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  6744  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  6745  000014  ED27  F008         	call	int_func,f	;refresh shadow registers
  6746                           pclatu	equ	0xFFB
  6747                           pclath	equ	0xFFA
  6748                           tblptru	equ	0xFF8
  6749                           tblptrh	equ	0xFF7
  6750                           tblptrl	equ	0xFF6
  6751                           tablat	equ	0xFF5
  6752                           prodh	equ	0xFF4
  6753                           prodl	equ	0xFF3
  6754                           intcon	equ	0xFF2
  6755                           intcon2	equ	0xFF1
  6756                           postinc0	equ	0xFEE
  6757                           fsr0l	equ	0xFE9
  6758                           wreg	equ	0xFE8
  6759                           postdec1	equ	0xFE5
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766                           	psect	intcode_body
  6767  00104E                     __pintcode_body:
  6768                           	opt stack 21
  6769  00104E                     int_func:
  6770                           	opt stack 21
  6771  00104E  0006               	pop		; remove dummy address from shadow register refresh
  6772  001050  CFEA F00D          	movff	fsr0h,??_ISR+3
  6773  001054  CFE1 F00E          	movff	fsr1l,??_ISR+4
  6774  001058  CFE2 F00F          	movff	fsr1h,??_ISR+5
  6775  00105C  CFD9 F010          	movff	fsr2l,??_ISR+6
  6776  001060  CFDA F011          	movff	fsr2h,??_ISR+7
  6777  001064  CFF3 F012          	movff	prodl,??_ISR+8
  6778  001068  CFF4 F013          	movff	prodh,??_ISR+9
  6779  00106C  CFF6 F014          	movff	tblptrl,??_ISR+10
  6780  001070  CFF7 F015          	movff	tblptrh,??_ISR+11
  6781  001074  CFF8 F016          	movff	tblptru,??_ISR+12
  6782  001078  CFF5 F017          	movff	tablat,??_ISR+13
  6783                           
  6784                           ;RTDuC.c: 167: PORTCbits.RC6 = 1;
  6785  00107C  8C82               	bsf	3970,6,c	;volatile
  6786                           
  6787                           ;RTDuC.c: 168: if (PIR1bits.SSP1IF == 1)
  6788  00107E  A69E               	btfss	3998,3,c	;volatile
  6789  001080  D003               	goto	i2l3232
  6790                           
  6791                           ;RTDuC.c: 169: {
  6792                           ;RTDuC.c: 170: SPIInt();
  6793  001082  EC38  F00C         	call	_SPIInt	;wreg free
  6794  001086  D000               	goto	i2l3232
  6795  001088                     i2l3232:
  6796                           
  6797                           ;RTDuC.c: 171: }
  6798                           ;RTDuC.c: 173: if (INTCONbits.TMR0IF == 1)
  6799  001088  A4F2               	btfss	intcon,2,c	;volatile
  6800  00108A  D003               	goto	i2l3236
  6801                           
  6802                           ;RTDuC.c: 174: {
  6803                           ;RTDuC.c: 175: TMR0Int();
  6804  00108C  EC5D  F00C         	call	_TMR0Int	;wreg free
  6805  001090  D000               	goto	i2l3236
  6806  001092                     i2l3236:
  6807                           
  6808                           ;RTDuC.c: 176: }
  6809                           ;RTDuC.c: 178: if (INTCONbits.INT0IF == 1)
  6810  001092  A2F2               	btfss	intcon,1,c	;volatile
  6811  001094  D003               	goto	i2l3240
  6812                           
  6813                           ;RTDuC.c: 179: {
  6814                           ;RTDuC.c: 180: INT0Int();
  6815  001096  ECC4  F00B         	call	_INT0Int	;wreg free
  6816  00109A  D000               	goto	i2l3240
  6817  00109C                     i2l3240:
  6818                           
  6819                           ;RTDuC.c: 181: }
  6820                           ;RTDuC.c: 183: if (PIR2bits.HLVDIF == 1)
  6821  00109C  A4A1               	btfss	4001,2,c	;volatile
  6822  00109E  D006               	goto	i2l3246
  6823                           
  6824                           ;RTDuC.c: 184: {
  6825                           ;RTDuC.c: 185: PORTAbits.RA4 = 0;
  6826  0010A0  9880               	bcf	3968,4,c	;volatile
  6827                           
  6828                           ;RTDuC.c: 186: PORTAbits.RA3 = 0;
  6829  0010A2  9680               	bcf	3968,3,c	;volatile
  6830                           
  6831                           ;RTDuC.c: 187: PORTAbits.RA2 = 0;
  6832  0010A4  9480               	bcf	3968,2,c	;volatile
  6833                           
  6834                           ;RTDuC.c: 188: HLVDInt();
  6835  0010A6  EC77  F007         	call	_HLVDInt	;wreg free
  6836  0010AA  D000               	goto	i2l3246
  6837  0010AC                     i2l3246:
  6838                           
  6839                           ;RTDuC.c: 189: }
  6840                           ;RTDuC.c: 191: if (PIR2bits.OSCFIF == 1)
  6841  0010AC  AEA1               	btfss	4001,7,c	;volatile
  6842  0010AE  D002               	goto	i2l530
  6843  0010B0  00FF               	reset		;# 
  6844  0010B2  D000               	goto	i2l530
  6845  0010B4                     i2l530:
  6846  0010B4  C017  FFF5         	movff	??_ISR+13,tablat
  6847  0010B8  C016  FFF8         	movff	??_ISR+12,tblptru
  6848  0010BC  C015  FFF7         	movff	??_ISR+11,tblptrh
  6849  0010C0  C014  FFF6         	movff	??_ISR+10,tblptrl
  6850  0010C4  C013  FFF4         	movff	??_ISR+9,prodh
  6851  0010C8  C012  FFF3         	movff	??_ISR+8,prodl
  6852  0010CC  C011  FFDA         	movff	??_ISR+7,fsr2h
  6853  0010D0  C010  FFD9         	movff	??_ISR+6,fsr2l
  6854  0010D4  C00F  FFE2         	movff	??_ISR+5,fsr1h
  6855  0010D8  C00E  FFE1         	movff	??_ISR+4,fsr1l
  6856  0010DC  C00D  FFEA         	movff	??_ISR+3,fsr0h
  6857  0010E0  C00C  FFE9         	movff	??_ISR+2,fsr0l
  6858  0010E4  C00B  FFFB         	movff	??_ISR+1,pclatu
  6859  0010E8  C00A  FFFA         	movff	??_ISR,pclath
  6860  0010EC  0011               	retfie		f
  6861  0010EE                     __end_of_ISR:
  6862                           	opt stack 0
  6863                           pclatu	equ	0xFFB
  6864                           pclath	equ	0xFFA
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           intcon2	equ	0xFF1
  6873                           postinc0	equ	0xFEE
  6874                           fsr0h	equ	0xFEA
  6875                           fsr0l	equ	0xFE9
  6876                           wreg	equ	0xFE8
  6877                           postdec1	equ	0xFE5
  6878                           fsr1h	equ	0xFE2
  6879                           fsr1l	equ	0xFE1
  6880                           indf2	equ	0xFDF
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _TMR0Int *****************
  6886 ;; Defined at:
  6887 ;;		line 57 in file "PID.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;		None               void
  6894 ;; Registers used:
  6895 ;;		wreg, status,2
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;Total ram usage:        0 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_ISR
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text43
  6915  0018BA                     __ptext43:
  6916                           	opt stack 0
  6917  0018BA                     _TMR0Int:
  6918                           	opt stack 23
  6919                           
  6920                           ;PID.c: 59: TMR0H = 0xDB;
  6921                           
  6922                           ;incstack = 0
  6923  0018BA  0EDB               	movlw	219
  6924  0018BC  6ED7               	movwf	4055,c	;volatile
  6925                           
  6926                           ;PID.c: 60: TMR0L = 0x60;
  6927  0018BE  0E60               	movlw	96
  6928  0018C0  6ED6               	movwf	4054,c	;volatile
  6929                           
  6930                           ;PID.c: 61: TMR0Flag = 1;
  6931  0018C2  0E01               	movlw	1
  6932  0018C4  0100               	movlb	0	; () banked
  6933  0018C6  6FB0               	movwf	_TMR0Flag& (0+255),b
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;PID.c: 62: INTCONbits.TMR0IF = 0;
  6937  0018C8  94F2               	bcf	intcon,2,c	;volatile
  6938                           
  6939                           ; BSR set to: 0
  6940  0018CA  0012               	return		;funcret
  6941  0018CC                     __end_of_TMR0Int:
  6942                           	opt stack 0
  6943                           pclatu	equ	0xFFB
  6944                           pclath	equ	0xFFA
  6945                           tblptru	equ	0xFF8
  6946                           tblptrh	equ	0xFF7
  6947                           tblptrl	equ	0xFF6
  6948                           tablat	equ	0xFF5
  6949                           prodh	equ	0xFF4
  6950                           prodl	equ	0xFF3
  6951                           intcon	equ	0xFF2
  6952                           intcon2	equ	0xFF1
  6953                           postinc0	equ	0xFEE
  6954                           fsr0h	equ	0xFEA
  6955                           fsr0l	equ	0xFE9
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           fsr1h	equ	0xFE2
  6959                           fsr1l	equ	0xFE1
  6960                           indf2	equ	0xFDF
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _SPIInt *****************
  6966 ;; Defined at:
  6967 ;;		line 26 in file "SPISlave.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;		None               void
  6974 ;; Registers used:
  6975 ;;		wreg, status,2
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_ISR
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text44
  6995  001870                     __ptext44:
  6996                           	opt stack 0
  6997  001870                     _SPIInt:
  6998                           	opt stack 23
  6999                           
  7000                           ;SPISlave.c: 28: PORTCbits.RC6 = 1;
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;incstack = 0
  7004  001870  8C82               	bsf	3970,6,c	;volatile
  7005                           
  7006                           ;SPISlave.c: 29: INTCONbits.GIE = 0;
  7007  001872  9EF2               	bcf	intcon,7,c	;volatile
  7008                           
  7009                           ;SPISlave.c: 30: Command = SSP1BUF;
  7010  001874  CFC9 F0AC          	movff	4041,_Command	;volatile
  7011                           
  7012                           ;SPISlave.c: 31: PIR1bits.SSP1IF = 0;
  7013  001878  969E               	bcf	3998,3,c	;volatile
  7014                           
  7015                           ;SPISlave.c: 32: PIE1bits.SSP1IE = 0;
  7016  00187A  969D               	bcf	3997,3,c	;volatile
  7017                           
  7018                           ;SPISlave.c: 33: SPIflag = 1;
  7019  00187C  0E01               	movlw	1
  7020  00187E  0100               	movlb	0	; () banked
  7021  001880  6FAF               	movwf	_SPIflag& (0+255),b
  7022                           
  7023                           ; BSR set to: 0
  7024  001882  0012               	return		;funcret
  7025  001884                     __end_of_SPIInt:
  7026                           	opt stack 0
  7027                           pclatu	equ	0xFFB
  7028                           pclath	equ	0xFFA
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           intcon	equ	0xFF2
  7036                           intcon2	equ	0xFF1
  7037                           postinc0	equ	0xFEE
  7038                           fsr0h	equ	0xFEA
  7039                           fsr0l	equ	0xFE9
  7040                           wreg	equ	0xFE8
  7041                           postdec1	equ	0xFE5
  7042                           fsr1h	equ	0xFE2
  7043                           fsr1l	equ	0xFE1
  7044                           indf2	equ	0xFDF
  7045                           fsr2h	equ	0xFDA
  7046                           fsr2l	equ	0xFD9
  7047                           status	equ	0xFD8
  7048                           
  7049 ;; *************** function _INT0Int *****************
  7050 ;; Defined at:
  7051 ;;		line 209 in file "RTDuC.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;		None               void
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    1
  7072 ;; This function calls:
  7073 ;;		_KillMotors
  7074 ;; This function is called by:
  7075 ;;		_ISR
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text45
  7080  001788                     __ptext45:
  7081                           	opt stack 0
  7082  001788                     _INT0Int:
  7083                           	opt stack 22
  7084                           
  7085                           ;RTDuC.c: 211: KillMotors();
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;incstack = 0
  7089  001788  EC73  F00C         	call	_KillMotors	;wreg free
  7090                           
  7091                           ;RTDuC.c: 212: PORTAbits.RA3 = 0;
  7092  00178C  9680               	bcf	3968,3,c	;volatile
  7093                           
  7094                           ;RTDuC.c: 213: T0CONbits.TMR0ON = 1;
  7095  00178E  8ED5               	bsf	4053,7,c	;volatile
  7096                           
  7097                           ;RTDuC.c: 214: INTCONbits.GIE = 0;
  7098  001790  9EF2               	bcf	intcon,7,c	;volatile
  7099                           
  7100                           ;RTDuC.c: 215: PORTAbits.RA4 = 1;
  7101  001792  8880               	bsf	3968,4,c	;volatile
  7102  001794  D000               	goto	i2l2040
  7103  001796                     i2l2040:
  7104                           
  7105                           ;RTDuC.c: 217: {
  7106                           ;RTDuC.c: 218: TMR0H = 0x00;
  7107  001796  0E00               	movlw	0
  7108  001798  6ED7               	movwf	4055,c	;volatile
  7109                           
  7110                           ;RTDuC.c: 219: TMR0L = 0x00;
  7111  00179A  0E00               	movlw	0
  7112  00179C  6ED6               	movwf	4054,c	;volatile
  7113                           
  7114                           ;RTDuC.c: 220: while (!INTCONbits.TMR0IF);
  7115  00179E  D000               	goto	i2l534
  7116  0017A0                     i2l534:
  7117  0017A0  A4F2               	btfss	intcon,2,c	;volatile
  7118  0017A2  D7FE               	goto	i2l534
  7119                           
  7120                           ;RTDuC.c: 221: INTCONbits.TMR0IF = 0;
  7121  0017A4  94F2               	bcf	intcon,2,c	;volatile
  7122                           
  7123                           ;RTDuC.c: 222: ~PORTAbits.RA4;
  7124  0017A6  5080               	movf	3968,w,c	;volatile
  7125  0017A8  D7F6               	goto	i2l2040
  7126  0017AA  0012               	return		;funcret
  7127  0017AC                     __end_of_INT0Int:
  7128                           	opt stack 0
  7129                           pclatu	equ	0xFFB
  7130                           pclath	equ	0xFFA
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           intcon2	equ	0xFF1
  7139                           postinc0	equ	0xFEE
  7140                           fsr0h	equ	0xFEA
  7141                           fsr0l	equ	0xFE9
  7142                           wreg	equ	0xFE8
  7143                           postdec1	equ	0xFE5
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _KillMotors *****************
  7152 ;; Defined at:
  7153 ;;		line 28 in file "MotorControl.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;		None               void
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; This function calls:
  7174 ;;		Nothing
  7175 ;; This function is called by:
  7176 ;;		_INT0Int
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text46
  7181  0018E6                     __ptext46:
  7182                           	opt stack 0
  7183  0018E6                     _KillMotors:
  7184                           	opt stack 22
  7185                           
  7186                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  7187                           
  7188                           ;incstack = 0
  7189  0018E6  8880               	bsf	3968,4,c	;volatile
  7190                           
  7191                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  7192  0018E8  50B7               	movf	4023,w,c	;volatile
  7193  0018EA  0BF0               	andlw	240
  7194  0018EC  6EB7               	movwf	4023,c	;volatile
  7195  0018EE  0012               	return		;funcret
  7196  0018F0                     __end_of_KillMotors:
  7197                           	opt stack 0
  7198                           pclatu	equ	0xFFB
  7199                           pclath	equ	0xFFA
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           prodh	equ	0xFF4
  7205                           prodl	equ	0xFF3
  7206                           intcon	equ	0xFF2
  7207                           intcon2	equ	0xFF1
  7208                           postinc0	equ	0xFEE
  7209                           fsr0h	equ	0xFEA
  7210                           fsr0l	equ	0xFE9
  7211                           wreg	equ	0xFE8
  7212                           postdec1	equ	0xFE5
  7213                           fsr1h	equ	0xFE2
  7214                           fsr1l	equ	0xFE1
  7215                           indf2	equ	0xFDF
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _HLVDInt *****************
  7221 ;; Defined at:
  7222 ;;		line 150 in file "EEPROM.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;		None               void
  7229 ;; Registers used:
  7230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    2
  7243 ;; This function calls:
  7244 ;;		_EEWriteChar
  7245 ;;		_EEWriteDouble
  7246 ;; This function is called by:
  7247 ;;		_ISR
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text47
  7252  000EEE                     __ptext47:
  7253                           	opt stack 0
  7254  000EEE                     _HLVDInt:
  7255                           	opt stack 21
  7256                           
  7257                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  7258                           
  7259                           ;incstack = 0
  7260  000EEE  C03F  F005         	movff	_SetAngle,EEWriteDouble@dub
  7261  000EF2  C040  F006         	movff	_SetAngle+1,EEWriteDouble@dub+1
  7262  000EF6  C041  F007         	movff	_SetAngle+2,EEWriteDouble@dub+2
  7263  000EFA  0E00               	movlw	0
  7264  000EFC  ECEB  F009         	call	_EEWriteDouble
  7265                           
  7266                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  7267  000F00  C09E  F005         	movff	_Kp,EEWriteDouble@dub
  7268  000F04  C09F  F006         	movff	_Kp+1,EEWriteDouble@dub+1
  7269  000F08  C0A0  F007         	movff	_Kp+2,EEWriteDouble@dub+2
  7270  000F0C  0E03               	movlw	3
  7271  000F0E  ECEB  F009         	call	_EEWriteDouble
  7272                           
  7273                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  7274  000F12  C09B  F005         	movff	_Ki,EEWriteDouble@dub
  7275  000F16  C09C  F006         	movff	_Ki+1,EEWriteDouble@dub+1
  7276  000F1A  C09D  F007         	movff	_Ki+2,EEWriteDouble@dub+2
  7277  000F1E  0E06               	movlw	6
  7278  000F20  ECEB  F009         	call	_EEWriteDouble
  7279                           
  7280                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  7281  000F24  C098  F005         	movff	_Kd,EEWriteDouble@dub
  7282  000F28  C099  F006         	movff	_Kd+1,EEWriteDouble@dub+1
  7283  000F2C  C09A  F007         	movff	_Kd+2,EEWriteDouble@dub+2
  7284  000F30  0E09               	movlw	9
  7285  000F32  ECEB  F009         	call	_EEWriteDouble
  7286                           
  7287                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  7288  000F36  CF80 F005          	movff	3968,EEWriteChar@ch	;volatile
  7289  000F3A  0E0C               	movlw	12
  7290  000F3C  ECE7  F00B         	call	_EEWriteChar
  7291                           
  7292                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  7293  000F40  CF81 F005          	movff	3969,EEWriteChar@ch	;volatile
  7294  000F44  0E0D               	movlw	13
  7295  000F46  ECE7  F00B         	call	_EEWriteChar
  7296                           
  7297                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  7298  000F4A  CF82 F005          	movff	3970,EEWriteChar@ch	;volatile
  7299  000F4E  0E0E               	movlw	14
  7300  000F50  ECE7  F00B         	call	_EEWriteChar
  7301                           
  7302                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  7303  000F54  CF83 F005          	movff	3971,EEWriteChar@ch	;volatile
  7304  000F58  0E0F               	movlw	15
  7305  000F5A  ECE7  F00B         	call	_EEWriteChar
  7306                           
  7307                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  7308  000F5E  CF84 F005          	movff	3972,EEWriteChar@ch	;volatile
  7309  000F62  0E10               	movlw	16
  7310  000F64  ECE7  F00B         	call	_EEWriteChar
  7311                           
  7312                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  7313  000F68  CF85 F005          	movff	3973,EEWriteChar@ch	;volatile
  7314  000F6C  0E11               	movlw	17
  7315  000F6E  ECE7  F00B         	call	_EEWriteChar
  7316                           
  7317                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  7318  000F72  CF86 F005          	movff	3974,EEWriteChar@ch	;volatile
  7319  000F76  0E12               	movlw	18
  7320  000F78  ECE7  F00B         	call	_EEWriteChar
  7321                           
  7322                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  7323  000F7C  CF87 F005          	movff	3975,EEWriteChar@ch	;volatile
  7324  000F80  0E13               	movlw	19
  7325  000F82  ECE7  F00B         	call	_EEWriteChar
  7326                           
  7327                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  7328  000F86  CF88 F005          	movff	3976,EEWriteChar@ch	;volatile
  7329  000F8A  0E14               	movlw	20
  7330  000F8C  ECE7  F00B         	call	_EEWriteChar
  7331                           
  7332                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  7333  000F90  C0AE  F005         	movff	_PIDEnableFlag,EEWriteChar@ch
  7334  000F94  0E15               	movlw	21
  7335  000F96  ECE7  F00B         	call	_EEWriteChar
  7336                           
  7337                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  7338  000F9A  0E01               	movlw	1
  7339  000F9C  6E05               	movwf	EEWriteChar@ch,c
  7340  000F9E  0E16               	movlw	22
  7341  000FA0  ECE7  F00B         	call	_EEWriteChar
  7342  000FA4  0012               	return		;funcret
  7343  000FA6                     __end_of_HLVDInt:
  7344                           	opt stack 0
  7345                           pclatu	equ	0xFFB
  7346                           pclath	equ	0xFFA
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           intcon2	equ	0xFF1
  7355                           postinc0	equ	0xFEE
  7356                           fsr0h	equ	0xFEA
  7357                           fsr0l	equ	0xFE9
  7358                           wreg	equ	0xFE8
  7359                           postdec1	equ	0xFE5
  7360                           fsr1h	equ	0xFE2
  7361                           fsr1l	equ	0xFE1
  7362                           indf2	equ	0xFDF
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function _EEWriteDouble *****************
  7368 ;; Defined at:
  7369 ;;		line 77 in file "EEPROM.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  location        1    wreg     unsigned char 
  7372 ;;  dub             3    4[COMRAM] unsigned char 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  location        1    7[COMRAM] unsigned char 
  7375 ;;  x               1    8[COMRAM] unsigned char 
  7376 ;; Return value:  Size  Location     Type
  7377 ;;		None               void
  7378 ;; Registers used:
  7379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7385 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;Total ram usage:        5 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    1
  7392 ;; This function calls:
  7393 ;;		_EEDisassembleDouble
  7394 ;;		_Write_b_eep
  7395 ;;		i2_Busy_eep
  7396 ;; This function is called by:
  7397 ;;		_HLVDInt
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           	psect	text48
  7402  0013D6                     __ptext48:
  7403                           	opt stack 0
  7404  0013D6                     _EEWriteDouble:
  7405                           	opt stack 21
  7406                           
  7407                           ;incstack = 0
  7408                           ;EEWriteDouble@location stored from wreg
  7409  0013D6  6E08               	movwf	EEWriteDouble@location,c
  7410                           
  7411                           ;EEPROM.c: 79: unsigned char x;
  7412                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  7413  0013D8  C005  F001         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  7414  0013DC  C006  F002         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  7415  0013E0  C007  F003         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  7416  0013E4  ECFE  F00A         	call	_EEDisassembleDouble	;wreg free
  7417                           
  7418                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  7419  0013E8  50F2               	movf	intcon,w,c	;volatile
  7420  0013EA  0B3F               	andlw	63
  7421  0013EC  6EF2               	movwf	intcon,c	;volatile
  7422                           
  7423                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  7424  0013EE  0E00               	movlw	0
  7425  0013F0  6E09               	movwf	EEWriteDouble@x,c
  7426  0013F2                     i2l2854:
  7427  0013F2  0E02               	movlw	2
  7428  0013F4  6409               	cpfsgt	EEWriteDouble@x,c
  7429  0013F6  D001               	goto	i2l2858
  7430  0013F8  D014               	goto	i2l2868
  7431  0013FA                     i2l2858:
  7432                           
  7433                           ;EEPROM.c: 86: {
  7434                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  7435  0013FA  C008  F001         	movff	EEWriteDouble@location,Write_b_eep@badd
  7436  0013FE  6A02               	clrf	Write_b_eep@badd+1,c
  7437  001400  5009               	movf	EEWriteDouble@x,w,c
  7438  001402  0D01               	mullw	1
  7439  001404  0E3C               	movlw	low _DDouble
  7440  001406  24F3               	addwf	prodl,w,c
  7441  001408  6ED9               	movwf	fsr2l,c
  7442  00140A  0E00               	movlw	high _DDouble
  7443  00140C  20F4               	addwfc	prodh,w,c
  7444  00140E  6EDA               	movwf	fsr2h,c
  7445  001410  50DF               	movf	indf2,w,c
  7446  001412  6E03               	movwf	Write_b_eep@bdat,c
  7447  001414  ECA4  F00A         	call	_Write_b_eep	;wreg free
  7448                           
  7449                           ;EEPROM.c: 88: location++;
  7450  001418  2A08               	incf	EEWriteDouble@location,f,c
  7451                           
  7452                           ;EEPROM.c: 89: Busy_eep();
  7453  00141A  EC7C  F00C         	call	i2_Busy_eep	;wreg free
  7454  00141E  2A09               	incf	EEWriteDouble@x,f,c
  7455  001420  D7E8               	goto	i2l2854
  7456  001422                     i2l2868:
  7457                           
  7458                           ;EEPROM.c: 90: }
  7459                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7460  001422  50F2               	movf	intcon,w,c	;volatile
  7461  001424  09C0               	iorlw	192
  7462  001426  6EF2               	movwf	intcon,c	;volatile
  7463  001428  0012               	return		;funcret
  7464  00142A                     __end_of_EEWriteDouble:
  7465                           	opt stack 0
  7466                           pclatu	equ	0xFFB
  7467                           pclath	equ	0xFFA
  7468                           tblptru	equ	0xFF8
  7469                           tblptrh	equ	0xFF7
  7470                           tblptrl	equ	0xFF6
  7471                           tablat	equ	0xFF5
  7472                           prodh	equ	0xFF4
  7473                           prodl	equ	0xFF3
  7474                           intcon	equ	0xFF2
  7475                           intcon2	equ	0xFF1
  7476                           postinc0	equ	0xFEE
  7477                           fsr0h	equ	0xFEA
  7478                           fsr0l	equ	0xFE9
  7479                           wreg	equ	0xFE8
  7480                           postdec1	equ	0xFE5
  7481                           fsr1h	equ	0xFE2
  7482                           fsr1l	equ	0xFE1
  7483                           indf2	equ	0xFDF
  7484                           fsr2h	equ	0xFDA
  7485                           fsr2l	equ	0xFD9
  7486                           status	equ	0xFD8
  7487                           
  7488 ;; *************** function _EEDisassembleDouble *****************
  7489 ;; Defined at:
  7490 ;;		line 48 in file "EEPROM.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  dub             3    0[COMRAM] unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;		None               void
  7497 ;; Registers used:
  7498 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7504 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;Total ram usage:        3 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; This function calls:
  7511 ;;		Nothing
  7512 ;; This function is called by:
  7513 ;;		_EEWriteDouble
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text49
  7518  0015FC                     __ptext49:
  7519                           	opt stack 0
  7520  0015FC                     _EEDisassembleDouble:
  7521                           	opt stack 21
  7522                           
  7523                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7524                           
  7525                           ;incstack = 0
  7526  0015FC  0E01               	movlw	low EEDisassembleDouble@dub
  7527  0015FE  6E42               	movwf	_DoublePtr,c
  7528  001600  0E00               	movlw	high EEDisassembleDouble@dub
  7529  001602  6E43               	movwf	_DoublePtr+1,c
  7530                           
  7531                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7532  001604  C042  FFD9         	movff	_DoublePtr,fsr2l
  7533  001608  C043  FFDA         	movff	_DoublePtr+1,fsr2h
  7534  00160C  50DF               	movf	indf2,w,c
  7535  00160E  6E3C               	movwf	_DDouble,c
  7536                           
  7537                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7538  001610  EE20 F001          	lfsr	2,1
  7539  001614  5042               	movf	_DoublePtr,w,c
  7540  001616  26D9               	addwf	fsr2l,f,c
  7541  001618  5043               	movf	_DoublePtr+1,w,c
  7542  00161A  22DA               	addwfc	fsr2h,f,c
  7543  00161C  50DF               	movf	indf2,w,c
  7544  00161E  6E3D               	movwf	_DDouble+1,c
  7545                           
  7546                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7547  001620  EE20 F002          	lfsr	2,2
  7548  001624  5042               	movf	_DoublePtr,w,c
  7549  001626  26D9               	addwf	fsr2l,f,c
  7550  001628  5043               	movf	_DoublePtr+1,w,c
  7551  00162A  22DA               	addwfc	fsr2h,f,c
  7552  00162C  50DF               	movf	indf2,w,c
  7553  00162E  6E3E               	movwf	_DDouble+2,c
  7554  001630  0012               	return		;funcret
  7555  001632                     __end_of_EEDisassembleDouble:
  7556                           	opt stack 0
  7557                           pclatu	equ	0xFFB
  7558                           pclath	equ	0xFFA
  7559                           tblptru	equ	0xFF8
  7560                           tblptrh	equ	0xFF7
  7561                           tblptrl	equ	0xFF6
  7562                           tablat	equ	0xFF5
  7563                           prodh	equ	0xFF4
  7564                           prodl	equ	0xFF3
  7565                           intcon	equ	0xFF2
  7566                           intcon2	equ	0xFF1
  7567                           postinc0	equ	0xFEE
  7568                           fsr0h	equ	0xFEA
  7569                           fsr0l	equ	0xFE9
  7570                           wreg	equ	0xFE8
  7571                           postdec1	equ	0xFE5
  7572                           fsr1h	equ	0xFE2
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function _EEWriteChar *****************
  7580 ;; Defined at:
  7581 ;;		line 122 in file "EEPROM.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  location        1    wreg     unsigned char 
  7584 ;;  ch              1    4[COMRAM] unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  location        1    5[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7596 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;Total ram usage:        2 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    1
  7603 ;; This function calls:
  7604 ;;		_Write_b_eep
  7605 ;;		i2_Busy_eep
  7606 ;; This function is called by:
  7607 ;;		_HLVDInt
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           	psect	text50
  7612  0017CE                     __ptext50:
  7613                           	opt stack 0
  7614  0017CE                     _EEWriteChar:
  7615                           	opt stack 21
  7616                           
  7617                           ;incstack = 0
  7618                           ;EEWriteChar@location stored from wreg
  7619  0017CE  6E06               	movwf	EEWriteChar@location,c
  7620                           
  7621                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7622  0017D0  50F2               	movf	intcon,w,c	;volatile
  7623  0017D2  0B3F               	andlw	63
  7624  0017D4  6EF2               	movwf	intcon,c	;volatile
  7625                           
  7626                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7627  0017D6  C006  F001         	movff	EEWriteChar@location,Write_b_eep@badd
  7628  0017DA  6A02               	clrf	Write_b_eep@badd+1,c
  7629  0017DC  C005  F003         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7630  0017E0  ECA4  F00A         	call	_Write_b_eep	;wreg free
  7631                           
  7632                           ;EEPROM.c: 127: Busy_eep();
  7633  0017E4  EC7C  F00C         	call	i2_Busy_eep	;wreg free
  7634                           
  7635                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7636  0017E8  50F2               	movf	intcon,w,c	;volatile
  7637  0017EA  09C0               	iorlw	192
  7638  0017EC  6EF2               	movwf	intcon,c	;volatile
  7639  0017EE  0012               	return		;funcret
  7640  0017F0                     __end_of_EEWriteChar:
  7641                           	opt stack 0
  7642                           pclatu	equ	0xFFB
  7643                           pclath	equ	0xFFA
  7644                           tblptru	equ	0xFF8
  7645                           tblptrh	equ	0xFF7
  7646                           tblptrl	equ	0xFF6
  7647                           tablat	equ	0xFF5
  7648                           prodh	equ	0xFF4
  7649                           prodl	equ	0xFF3
  7650                           intcon	equ	0xFF2
  7651                           intcon2	equ	0xFF1
  7652                           postinc0	equ	0xFEE
  7653                           fsr0h	equ	0xFEA
  7654                           fsr0l	equ	0xFE9
  7655                           wreg	equ	0xFE8
  7656                           postdec1	equ	0xFE5
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           fsr2h	equ	0xFDA
  7661                           fsr2l	equ	0xFD9
  7662                           status	equ	0xFD8
  7663                           
  7664 ;; *************** function i2_Busy_eep *****************
  7665 ;; Defined at:
  7666 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;		None               void
  7673 ;; Registers used:
  7674 ;;		None
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;Total ram usage:        0 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_EEWriteDouble
  7690 ;;		_EEWriteChar
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text51
  7695  0018F8                     __ptext51:
  7696                           	opt stack 0
  7697  0018F8                     i2_Busy_eep:
  7698                           	opt stack 21
  7699                           
  7700                           ;incstack = 0
  7701  0018F8  D000               	goto	i2l555
  7702  0018FA                     i2l555:
  7703  0018FA  B2A6               	btfsc	4006,1,c	;volatile
  7704  0018FC  D7FE               	goto	i2l555
  7705  0018FE  0012               	return		;funcret
  7706  001900                     __end_ofi2_Busy_eep:
  7707                           	opt stack 0
  7708                           pclatu	equ	0xFFB
  7709                           pclath	equ	0xFFA
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           intcon2	equ	0xFF1
  7718                           postinc0	equ	0xFEE
  7719                           fsr0h	equ	0xFEA
  7720                           fsr0l	equ	0xFE9
  7721                           wreg	equ	0xFE8
  7722                           postdec1	equ	0xFE5
  7723                           fsr1h	equ	0xFE2
  7724                           fsr1l	equ	0xFE1
  7725                           indf2	equ	0xFDF
  7726                           fsr2h	equ	0xFDA
  7727                           fsr2l	equ	0xFD9
  7728                           status	equ	0xFD8
  7729                           
  7730 ;; *************** function _Write_b_eep *****************
  7731 ;; Defined at:
  7732 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  badd            2    0[COMRAM] unsigned int 
  7735 ;;  bdat            1    2[COMRAM] unsigned char 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  GIE_BIT_VAL     1    3[COMRAM] unsigned char 
  7738 ;; Return value:  Size  Location     Type
  7739 ;;		None               void
  7740 ;; Registers used:
  7741 ;;		wreg, status,2, status,0
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7747 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;Total ram usage:        4 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; This function calls:
  7754 ;;		Nothing
  7755 ;; This function is called by:
  7756 ;;		_EEWriteDouble
  7757 ;;		_EEWriteChar
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           	psect	text52
  7762  001548                     __ptext52:
  7763                           	opt stack 0
  7764  001548                     _Write_b_eep:
  7765                           	opt stack 21
  7766                           
  7767                           ;incstack = 0
  7768  001548  0E00               	movlw	0
  7769  00154A  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7770  00154C  5002               	movf	Write_b_eep@badd+1,w,c
  7771  00154E  0B03               	andlw	3
  7772  001550  6EAA               	movwf	4010,c	;volatile
  7773  001552  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7774  001556  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7775  00155A  9EA6               	bcf	4006,7,c	;volatile
  7776  00155C  9CA6               	bcf	4006,6,c	;volatile
  7777  00155E  84A6               	bsf	4006,2,c	;volatile
  7778  001560  0E00               	movlw	0
  7779  001562  BEF2               	btfsc	intcon,7,c	;volatile
  7780  001564  0E01               	movlw	1
  7781  001566  6E04               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7782  001568  9EF2               	bcf	intcon,7,c	;volatile
  7783  00156A  0E55               	movlw	85
  7784  00156C  6EA7               	movwf	4007,c	;volatile
  7785  00156E  0EAA               	movlw	170
  7786  001570  6EA7               	movwf	4007,c	;volatile
  7787  001572  82A6               	bsf	4006,1,c	;volatile
  7788  001574  D000               	goto	i2l586
  7789  001576                     i2l586:
  7790  001576  B2A6               	btfsc	4006,1,c	;volatile
  7791  001578  D7FE               	goto	i2l586
  7792  00157A  B004               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7793  00157C  D002               	bra	i2u203_45
  7794  00157E  9EF2               	bcf	intcon,7,c	;volatile
  7795  001580  D001               	bra	i2u203_46
  7796  001582                     i2u203_45:
  7797  001582  8EF2               	bsf	intcon,7,c	;volatile
  7798  001584                     i2u203_46:
  7799  001584  94A6               	bcf	4006,2,c	;volatile
  7800  001586  0012               	return		;funcret
  7801  001588                     __end_of_Write_b_eep:
  7802                           	opt stack 0
  7803  0000                     pclatu	equ	0xFFB
  7804                           pclath	equ	0xFFA
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           intcon2	equ	0xFF1
  7813                           postinc0	equ	0xFEE
  7814                           fsr0h	equ	0xFEA
  7815                           fsr0l	equ	0xFE9
  7816                           wreg	equ	0xFE8
  7817                           postdec1	equ	0xFE5
  7818                           fsr1h	equ	0xFE2
  7819                           fsr1l	equ	0xFE1
  7820                           indf2	equ	0xFDF
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           pclatu	equ	0xFFB
  7825                           pclath	equ	0xFFA
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           intcon2	equ	0xFF1
  7834                           postinc0	equ	0xFEE
  7835                           fsr0h	equ	0xFEA
  7836                           fsr0l	equ	0xFE9
  7837                           wreg	equ	0xFE8
  7838                           postdec1	equ	0xFE5
  7839                           fsr1h	equ	0xFE2
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846                           	psect	rparam
  7847  0000                     pclatu	equ	0xFFB
  7848                           pclath	equ	0xFFA
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodh	equ	0xFF4
  7854                           prodl	equ	0xFF3
  7855                           intcon	equ	0xFF2
  7856                           intcon2	equ	0xFF1
  7857                           postinc0	equ	0xFEE
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           postdec1	equ	0xFE5
  7862                           fsr1h	equ	0xFE2
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      71
    BANK0           160     50      85
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SPIDisassembleDouble->_GenerateChecksum

Critical Paths under _ISR in COMRAM

    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   56173
                                             48 BANK0      2     2      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   28050
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           0     0      0   27205
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   18813
                                             33 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     380
                                             18 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5245
                                             18 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4881
                                              6 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3152
                                             31 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6747
                                              6 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                             46 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     781
                                             37 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     216
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     563
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     563
                                             34 COMRAM     2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     346
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      62
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      23
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      62
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     452
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     720
                                             37 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     324
                                             33 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0    1913
                                              9 COMRAM    14    14      0
                            _HLVDInt
                            _INT0Int
                             _SPIInt
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _HLVDInt                                              0     0      0    1913
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) _EEWriteDouble                                        5     2      3     819
                                              4 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (10) _EEDisassembleDouble                                 3     0      3     104
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) _EEWriteChar                                          2     1      1    1094
                                              4 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Write_b_eep                                         4     1      3     346
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      55       5       53.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     37      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      32        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov  4 04:17:02 2015

      __size_of_MotorDriverInit 0024                              l31 16A2                              l40 17CC  
                            l43 1208                              l37 17B6                              l49 1270  
                            _Kd 0098                              _Ki 009B                              _Kp 009E  
           ?_EEReassembleDouble 0018                    ___ftadd@exp1 0071                    ___ftadd@exp2 0070  
     ImplementJSMotion@CCPinput 0089                    ___ftadd@sign 006F                             l109 09CA  
                           l151 0484                             l500 018E                             l261 18AE  
                           l341 1202                             l190 12E6                             l255 1852  
                           l191 1328                             l264 18B8                             l272 1662  
                           l275 1546                             l363 180E                             l347 1502  
                           l611 135E                             l612 1378                             l357 13D4  
                           l613 1360                             l605 133E                             l189 12DC  
                           l614 1364                             l607 1342                             l199 15FA  
                           l519 16C4                             l608 1344                             l546 0BAA  
                           l571 1842                             l555 18F2                             l494 012C  
                           l665 1710                             l666 1718                             l498 015A  
                           l861 18E4                             l854 1894                             l847 18A6  
                           l951 0EEC                             l962 0EC4                             l859 18DC  
                           l991 0682                             l992 0896                             l995 06BC  
                           l997 06E6                             _PR2 000FCB                             _ISR 0008  
                           _abs 16EE            __size_of_Write_b_eep 0040                             prod 000FF3  
                           wreg 000FE8                            ?_ISR 0001                 __end_of_INT0Int 17AC  
                  ___ftdiv@cntr 0029                 __end_of_HLVDInt 0FA6                      _Delay1TCYx 18DA  
                  ___ftdiv@sign 002E                    __CFG_WDT$OFF 000000                            l1006 07CA  
                          l1023 0E26                            l1015 07F4                            l1032 1182  
                          l1026 0DF2                            ?_abs 0081                            l1038 0D44  
                          l1055 1478                            l1048 1756                            l1059 0AFC  
                          l2412 1898                            l1188 173E                            l3300 06CA  
                          l2430 138C                            l2600 0A8E                            l2442 13BC  
                          l2434 1394                            l3402 0E00                            l3322 074E  
                          l3306 06DC                            l2602 0A96                            l2610 0ACC  
                          l3260 0E54                            l3412 0C44                            l3324 075E  
                          l3316 071E                            l3270 0EB8                            l3262 0E74  
                          l3254 0E38                            l3414 0C62                            l3342 0820  
                          l3334 07AA                            l3326 076E                            l2614 0AEA  
                          l2606 0AAC                            l2720 1348                            l3440 0CE4  
                          l3432 0CB4                            l3352 0870                            l3336 07BA  
                          l3328 077A                            l2608 0ABE                            l3504 0518  
                          l3520 0B64                            l3282 0EDE                            l3266 0E8C  
                          l3258 0E48                            l3450 0D1E                            l3442 0CEC  
                          l3418 0C70                            l2554 1120                            l3530 0BEA  
                          l2724 1368                            l3276 0ECC                            l3268 0EAC  
                          l3436 0CCC                            l3372 0D8C                            l2564 117E  
                          l3542 08D6                            l3470 0FBE                            l3446 0D04  
                          l3366 0D64                            l2558 1152                            l3294 0690  
                          l3630 00E0                            l3622 00A8                            l3614 0070  
                          l3560 096A                            l3544 08DE                            l2824 163A  
                          l3392 0DCC                            l3368 0D7E                            l3538 08B8  
                          l2834 165E                            l3482 1000                            l3474 0FDE  
                          l3458 144E                            l2578 09F6                            l3642 0108  
                          l3626 00C4                            l3634 00FC                            l3618 008C  
                          l3556 0932                            l2828 1646                            l2668 1886  
                          l2684 12E0                            l2596 0A7A                            l3492 03AC  
                          l2926 1266                            l2918 1256                            l2782 16B0  
                          l3478 0FE8                            l3734 02BE                            l3718 0254  
                          l3662 0170                            l3646 0124                            l3680 01D2  
                          l3648 0134                            l3498 0434                            l3754 0326  
                          l3658 0162                            l3690 0210                            l3684 01EE  
                          l3676 01B6                            l3598 002E                            l3688 020A  
                          l3698 021E                            u3070 0FFC                            u2701 0630  
                          u1821 09E2                            u2711 064E                            u1840 0A1C  
                          u3507 1888                            u3517 189A                            u1845 0A12  
                          u2921 0D56                            u2941 0D74                            u2971 0C32  
                          u2991 0C54                 __end_of_PIDInit 14C0  ImplementJSMotion@JoystickValue 0085  
          ??_EEReassembleDouble 001B                    EEReadChar@ch 001B                 __end_of_TMR0Int 18CC  
                          abs@a 0081                            _main 001C                    ___ftpack@arg 0018  
                   _DeadbandLow 0046                    ___ftpack@exp 001B                 __end_of_RTDInit 1694  
               __end_of_SPIInit 182A                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            pclat 000FFA  
                ??_EEReadDouble 0021                            prodh 000FF4                            prodl 000FF3  
                          start 0018             __size_of_EEPROMInit 0014                    ?_EEWriteChar 0005  
                  ___ftmul@cntr 0064                    ___param_bank 000010                    ___ftmul@sign 0065  
 __size_of_InitializeInterrupts 000E                           ??_ISR 000A                     _Delay10TCYx 1896  
              __end_of_EEBootUp 1204                    ___fttol@exp1 0080                           ??_abs 0083  
                  ___fttol@lval 007C                     _Delay1KTCYx 1884                     ReadRTDpos@x 0022  
             RTD2Angle@RTDAngle 0066                           ?_main 0001                           _EEADR 000FA9  
               __end_of___ftadd 0898                 __end_of___ftdiv 0E28                 __end_of___ftneg 1764  
               __end_of___ftmul 0D46                           _T0CON 000FD5                 __end_of___ftsub 147A  
               __end_of___fttol 0AFE                           _T2CON 000FCA                           _T3CON 000FB1  
                         i2l530 10B4                           i2l534 17A0                           i2l555 18FA  
                         i2l586 1576              __size_of_RTD2Angle 0038                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001D                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 0004  
                  _DeadbandHigh 0044                           _error 00A1                   ___ftpack@sign 001C  
                    _DoubleSPIS 0038                           main@x 0091                   ??_ReceiveSPI1 0018  
                         tablat 000FF5                     ?i2_Busy_eep 0001                           status 000FD8  
                 EEReadDouble@x 0022      __size_of_ImplementJSMotion 0134           EEWriteDouble@location 0008  
           GenerateChecksum@sum 0018                      _ReadRTDpos 12CE                      _KillMotors 18E6  
               __initialization 1272                    __end_of_main 0364                  _DetectJoystick 17AC  
                _DetectMovement 1204                      _Read_b_eep 182A                __end_of_Busy_eep 18F8  
         EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000                __end_of_SendSPI1 185C  
              __end_of_OpenSPI1 1380                          ??_main 0038                   ___fttol@sign1 007B  
                 __activetblptr 000003               ??_MotorDriverInit 0018         DetectMovement@ADCresult 001D  
                     ??_INT0Int 0001                       ??_HLVDInt 000A                       ??_PIDInit 0018  
                     ??_TMR0Int 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                       ??_RTDInit 0019                          _EEDATA 000FA8  
                   ?_Delay1TCYx 0001                       ??_SPIInit 001B                          _CCPR3L 000FB8  
                        _EECON2 000FA7                __end_of___ftpack 0EEE           __size_of_calculatePID 02B6  
                        i2l2040 1796                          i2l3240 109C                          i2l3232 1088  
                        i2l3236 1092                          i2l3246 10AC                          i2l2854 13F2  
                        i2l2858 13FA                          i2l2868 1422                          _INTCON 000FF2  
              __end_of___lwtoft 1740                          _SPIInt 1870               __end_of_RTD2Angle 15FC  
           __end_of_ReceiveSPI1 18BA          __end_of_DetectJoystick 17CE          __end_of_DetectMovement 1272  
              OpenSPI1@bus_mode 0018                   _EEWriteDouble 13D6                          ___ftge 10EE  
                     ??___ftadd 006C                       ??___ftdiv 0026                       ??___ftneg 001B  
                     ??___ftmul 0035                       ??___ftsub 0038                       ??___fttol 0076  
                        _intErr 00A4                          clear_0 1278                          clear_1 1284  
           __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0061                   main@temporary 0090  
                  ??_EEPROMInit 0025     __size_of_ImplementPIDMotion 00A8                    __pdataCOMRAM 0044  
                  _calculatePID 0364            __end_of_EEReadDouble 13D6               _calculatePID$3341 008A  
             _calculatePID$3342 008D                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8               ?_GenerateChecksum 0001                       ?_EEBootUp 0001  
                    __accesstop 0060         __end_of__initialization 12C8              ??_GenerateChecksum 0018  
                    ___ftadd@f1 0066                      ___ftadd@f2 0069                      ___ftge@ff1 0018  
                    ___ftge@ff2 001B                      _ZeroMotors 0AFE                   ___rparam_used 000001  
                    ___ftdiv@f1 0020                      ___ftdiv@f2 0023                      ___ftdiv@f3 002A  
            EEReadChar@location 001A                      ___ftneg@f1 0018                     ?_ReadRTDpos 0019  
                   ?_KillMotors 0001                    ??_EEReadChar 001A                  ?_EEWriteDouble 0005  
                    ___ftmul@f1 002F                      ___ftmul@f2 0032                 ?_DetectJoystick 0001  
               ?_DetectMovement 0018              __end_of_EEPROMInit 1870                      ___ftsub@f1 0072  
                    ___ftsub@f2 0075                      ___fttol@f1 0072                  __pcstackCOMRAM 0001  
   __end_of_EEDisassembleDouble 1632                    __pidataBANK0 1904            __size_of_EEWriteChar 0022  
                   ?_Read_b_eep 0018             __size_of_Delay1TCYx 000C               GenerateChecksum@y 0019  
                    ___lwtoft@c 0020    __size_of_SPIReassembleDouble 0044              __end_of_EEReadChar 1810  
                    __pbssBANK0 0092                     _ReceiveSPI1 18A8                      ??_EEBootUp 0023  
                     ?_Busy_eep 0001                   ?_JoystickInit 0001                         ?_SPIInt 0001  
                     ?_SendSPI1 0001                       ?_OpenSPI1 0018                         ?___ftge 0018  
                  ?_Delay10TCYx 0001                  EEWriteDouble@x 0009                         _CCP3CON 000FB7  
                  ?_Delay1KTCYx 0001                       ?___ftpack 0018                   ??_Write_b_eep 0004  
                     ?___lwtoft 0020                         _HLVDCON 000FD2                         _INT0Int 1788  
                       _HLVDInt 0EEE    __end_of_InitializeInterrupts 18DA                         _PIDInit 147A  
                       _DDouble 003C             __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A  
                 _PIDEnableFlag 00AE                         _SSP1BUF 000FC9                         _TMR0Int 18BA  
    ImplementPIDMotion@PIDValue 0085                         _RTDInit 1664                         _SPIInit 1810  
                       _SPIflag 00AF                EEWriteDouble@dub 0005             __size_of_Read_b_eep 001A  
                ??_JoystickInit 0018                    ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044  
                    ??_Busy_eep 0018                         _Command 00AC                     ?_ZeroMotors 0001  
               __size_of_SPIInt 0014                      ??_SendSPI1 0018                 ??_EEWriteDouble 0008  
                    ??_OpenSPI1 001A             EEWriteChar@location 0006                         __Hparam 0000  
                       __Lparam 0000                 _MotorDriverInit 1764                 __size_of___ftge 0096  
                       ___ftadd 061A                         ___ftdiv 0D46                         ___ftneg 1740  
                       ___ftmul 0C22                         ___ftsub 142A                         ___fttol 09CC  
                    _dummy_byte 00B1           __size_of_EEReadDouble 0056                    SendSPI1@data 0019  
                       __pcinit 1272                      ??___ftpack 001D                 Delay10TCYx@unit 0018  
                       __ramtop 1000                      _initialize 16C2                    SendSPI1@temp 0018  
                       __ptext0 001C                         __ptext1 16C2                         __ptext2 0AFE  
                       __ptext3 0364                         __ptext4 09CC                         __ptext5 142A  
                       __ptext6 061A                         __ptext7 1740                         __ptext8 10EE  
                       __ptext9 0D46                      ??___lwtoft 0023                       _T0CONbits 000FD5  
                  __size_of_ISR 10E6                    __size_of_abs 002C              __end_ofi2_Busy_eep 1900  
                       _prevErr 00A7   __size_of_SPIDisassembleDouble 003C             __end_of_Write_b_eep 1588  
                  ??_Delay1TCYx 0018                  __pintcode_body 104E            end_of_initialization 12C8  
                       int_func 104E               OpenSPI1@smp_phase 0019                    _EEReadDouble 1380  
         ReadRTDpos@LowPosition 001F                         postdec1 000FE5                      _motorInput 00AA  
                     _RTD2Angle 15C4                         postinc0 000FEE               OpenSPI1@sync_mode 001A  
            __end_of_Delay1TCYx 18E6                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTEbits 000F84                       _PORTJbits 000F88  
           __size_of_ZeroMotors 0124                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                       _TRISEbits 000F96                       _TRISFbits 000F97  
                     _TRISGbits 000F98                       _TRISJbits 000F9A         __end_of_MotorDriverInit 1788  
              ??_DetectJoystick 0018                ??_DetectMovement 001A                     ___ftdiv@exp 002D  
             __size_of_EEBootUp 0080             _SPIReassembleDouble 1504                     _CCP3CONbits 000FB7  
                __end_of_SPIInt 1884                    ??_ReadRTDpos 001B                    ??_KillMotors 0001  
                   ___ftmul@exp 0060            _InitializeInterrupts 18CC                      ?_RTD2Angle 0066  
     __size_of_GenerateChecksum 0032                    ??_Read_b_eep 001A                  __end_of___ftge 1184  
          __size_of_Delay10TCYx 0012                   __pidataCOMRAM 1900      __end_of_ImplementPIDMotion 104E  
                   ?_initialize 0001                     _Write_b_eep 1548            __end_of_JoystickInit 16C2  
          __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 0018                       _DoublePtr 0042  
           start_initialization 1272                 _CurrentVelocity 0095                    _CurrentAngle 0092  
                   __end_of_ISR 10EE                     __end_of_abs 171A              __end_of_ReadRTDpos 132A  
            __end_of_KillMotors 18F0                    ?_ReceiveSPI1 0001              __end_of_Read_b_eep 1844  
          EEReadDouble@location 0021                        ??_SPIInt 0001               __size_of_Busy_eep 0008  
          calculatePID@setpoint 0084                   ??_EEWriteChar 0006          ReadRTDpos@HighPosition 001E  
             __size_of_SendSPI1 0018               __size_of_OpenSPI1 0056           ?_InitializeInterrupts 0001  
                      ??___ftge 001E                     __pdataBANK0 00B2           ??_SPIReassembleDouble 001B  
  __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6                        ?_INT0Int 0001  
                      ?_HLVDInt 0001                     __pbssCOMRAM 0038               __size_of___lwtoft 0026  
                 __pcstackBANK0 0060                        ?_PIDInit 0001                        ?_TMR0Int 0001  
            calculatePID@derErr 0087                        ?_RTDInit 0001                        ?_SPIInit 0001  
               Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001                    ??_ZeroMotors 0038  
           __size_of_initialize 002C          SPIReassembleDouble@dub 001B                   EEWriteChar@ch 0005  
                     __pintcode 0008                     ??_RTD2Angle 0038                        ?___ftadd 0066  
                      ?___ftdiv 0020                        ?___ftneg 0018                        ?___ftmul 002F  
                      ?___ftsub 0072                        ?___fttol 0072             __end_of_EEWriteChar 17F0  
            __end_of_ZeroMotors 0C22      __end_of_EEReassembleDouble 1504                        _EEBootUp 1184  
                      _IPR2bits 000FA2                        _PIE1bits 000F9D                        _PIE2bits 000FA0  
        ??_InitializeInterrupts 0018                        i2u203_45 1582                        i2u203_46 1584  
         __end_of_EEWriteDouble 142A    __end_of_SPIDisassembleDouble 15C4                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1           __size_of_JoystickInit 002E                        _SSP1CON1 000FC6  
                      _TMR0Flag 00B0                _GenerateChecksum 1632                        _SSP1STAT 000FC7  
                    _ADCON0bits 000FC2                 Write_b_eep@badd 0001                 Write_b_eep@bdat 0003  
                 ?_calculatePID 0081                __size_of_INT0Int 0024                __size_of_HLVDInt 00B8  
              __size_of_PIDInit 0046                     _INTCON2bits 000FF1                __size_of_TMR0Int 0012  
                     copy_data0 12BC                __size_of_RTDInit 0030                __size_of_SPIInit 001A  
                      _Busy_eep 18F0            __size_of_ReceiveSPI1 0012                    _JoystickInit 1694  
                      _SendSPI1 1844                      _EECON1bits 000FA6                        _SetAngle 003F  
                      _OpenSPI1 132A          ReadRTDpos@FullPosition 0020                        __Hrparam 0000  
                   _EEWriteChar 17CE                        __Lrparam 0000                    _JSEnableFlag 00AD  
              __size_of___ftadd 027E                __size_of___ftdiv 00E2                __size_of___ftneg 0024  
              __size_of___ftmul 0124                __size_of___ftsub 0050                __size_of___fttol 0132  
                  ??_initialize 0038                        ___ftpack 0E28                    ?_Write_b_eep 0001  
             calculatePID@angle 0081                  ??_calculatePID 0038                        ___lwtoft 171A  
                    _EEPROMInit 185C                        __ptext10 12CE                        __ptext11 15C4  
                      __ptext20 1884                        __ptext12 171A                        __ptext21 1896  
                      __ptext13 0C22                        __ptext30 18F0                        __ptext22 147A  
                      __ptext14 0E28                        __ptext31 17F0                        __ptext23 1764  
                      __ptext15 0FA6                        __ptext40 1204                        __ptext32 182A  
                      __ptext24 1694                        __ptext16 1810                        __ptext41 17AC  
                      __ptext33 1844                        __ptext25 18CC                        __ptext17 132A  
                      __ptext50 17CE                        __ptext34 1504                        __ptext26 185C  
                      __ptext18 1664                        __ptext51 18F8                        __ptext43 18BA  
                      __ptext35 1588                        __ptext27 1184                        __ptext19 18DA  
                      __ptext52 1548                        __ptext44 1870                        __ptext36 1632  
                      __ptext28 1380                        __ptext45 1788                        __ptext37 18A8  
                      __ptext29 14C0                        __ptext46 18E6                        __ptext38 0898  
                      __ptext47 0EEE                        __ptext39 16EE                        __ptext48 13D6  
                      __ptext49 15FC                    _SSP1CON1bits 000FC6              _ImplementPIDMotion 0FA6  
                 __size_of_main 0348             _EEDisassembleDouble 15FC                  Delay1TCYx@unit 0018  
           ?_ImplementPIDMotion 0085              __end_of_initialize 16EE                        _loopTime 00B2  
                    _EEReadChar 17F0                   ??_Delay10TCYx 0018                   ??_Delay1KTCYx 0018  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0001            ??_ImplementPIDMotion 0087  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 1588                        intlevel2 0000  
                    _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B               _ImplementJSMotion 0898  
   __end_of_SPIReassembleDouble 1548              ?_ImplementJSMotion 0085         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 006E           ??_EEDisassembleDouble 0004             __end_of_Delay10TCYx 18A8  
           ??_ImplementJSMotion 0087          EEDisassembleDouble@dub 0001                     ?_EEPROMInit 0001  
           __end_of_Delay1KTCYx 1896           ?_SPIDisassembleDouble 001A        __end_of_GenerateChecksum 1664  
                    i2_Busy_eep 18F8         SPIDisassembleDouble@dub 001A       __end_of_ImplementJSMotion 09CC  
          __end_of_calculatePID 061A                   ?_EEReadDouble 001E                     ?_EEReadChar 0001  
            _EEReassembleDouble 14C0  
