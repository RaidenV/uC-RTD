

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov  5 04:23:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  001AD6                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _DeadbandHigh
    81  001AD6  00C8               	dw	200
    82                           
    83                           ;initializer for _DeadbandLow
    84  001AD8  FF38               	dw	65336
    85                           
    86                           ;initializer for _timer1High
    87  001ADA  C0                 	db	192
    88                           
    89                           	psect	idataBANK0
    90  001ADB                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _loopTime
    94                           ;PID.c: 5: unsigned char PIDEnableFlag;
    95                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    96                           ;PID.c: 7: double Ki;
    97                           ;PID.c: 8: double Kp;
    98                           ;PID.c: 9: double Kd;
    99                           ;PID.c: 10: double SetAngle;
   100                           ;PID.c: 11: double CurrentAngle;
   101                           ;PID.c: 12: double error;
   102                           ;PID.c: 13: double prevErr;
   103                           ;PID.c: 14: double intErr;
   104                           ;PID.c: 15: int motorInput;
   105  001ADB  C3                 	db	195
   106  001ADC  F5                 	db	245
   107  001ADD  3C                 	db	60
   108  0000                     _ADCON0	set	4034
   109  0000                     _ADCON0bits	set	4034
   110  0000                     _ADCON1	set	4033
   111  0000                     _ADCON2	set	4032
   112  0000                     _ADRESH	set	4036
   113  0000                     _ADRESL	set	4035
   114  0000                     _CCP3CON	set	4023
   115  0000                     _CCP3CONbits	set	4023
   116  0000                     _CCPR3L	set	4024
   117  0000                     _EEADR	set	4009
   118  0000                     _EEADRH	set	4010
   119  0000                     _EECON1bits	set	4006
   120  0000                     _EECON2	set	4007
   121  0000                     _EEDATA	set	4008
   122  0000                     _HLVDCON	set	4050
   123  0000                     _INTCON	set	4082
   124  0000                     _INTCONbits	set	4082
   125  0000                     _IPR2bits	set	4002
   126  0000                     _OSCCONbits	set	4051
   127  0000                     _PIE1bits	set	3997
   128  0000                     _PIE2bits	set	4000
   129  0000                     _PIR1bits	set	3998
   130  0000                     _PIR2bits	set	4001
   131  0000                     _PORTA	set	3968
   132  0000                     _PORTAbits	set	3968
   133  0000                     _PORTB	set	3969
   134  0000                     _PORTBbits	set	3969
   135  0000                     _PORTC	set	3970
   136  0000                     _PORTCbits	set	3970
   137  0000                     _PORTD	set	3971
   138  0000                     _PORTE	set	3972
   139  0000                     _PORTEbits	set	3972
   140  0000                     _PORTF	set	3973
   141  0000                     _PORTG	set	3974
   142  0000                     _PORTH	set	3975
   143  0000                     _PORTJ	set	3976
   144  0000                     _PORTJbits	set	3976
   145  0000                     _PR2	set	4043
   146  0000                     _SSP1BUF	set	4041
   147  0000                     _SSP1CON1	set	4038
   148  0000                     _SSP1CON1bits	set	4038
   149  0000                     _SSP1STAT	set	4039
   150  0000                     _SSP1STATbits	set	4039
   151  0000                     _T0CON	set	4053
   152  0000                     _T0CONbits	set	4053
   153  0000                     _T1CONbits	set	4045
   154  0000                     _T2CON	set	4042
   155  0000                     _T3CON	set	4017
   156  0000                     _TMR0H	set	4055
   157  0000                     _TMR0L	set	4054
   158  0000                     _TMR1H	set	4047
   159  0000                     _TMR1L	set	4046
   160  0000                     _TRISAbits	set	3986
   161  0000                     _TRISBbits	set	3987
   162  0000                     _TRISCbits	set	3988
   163  0000                     _TRISD	set	3989
   164  0000                     _TRISEbits	set	3990
   165  0000                     _TRISFbits	set	3991
   166  0000                     _TRISGbits	set	3992
   167  0000                     _TRISH	set	3993
   168  0000                     _TRISJbits	set	3994
   169                           
   170                           ; #config settings
   171  0000                     
   172                           	psect	cinit
   173  001322                     __pcinit:
   174                           	opt stack 0
   175  001322                     start_initialization:
   176                           	opt stack 0
   177  001322                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK0 (31 bytes)
   181  001322  EE00  F096         	lfsr	0,__pbssBANK0
   182  001326  0E1F               	movlw	31
   183  001328                     clear_0:
   184  001328  6AEE               	clrf	postinc0,c
   185  00132A  06E8               	decf	wreg,f,c
   186  00132C  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to COMRAM (14 bytes)
   189  00132E  EE00  F035         	lfsr	0,__pbssCOMRAM
   190  001332  0E0E               	movlw	14
   191  001334                     clear_1:
   192  001334  6AEE               	clrf	postinc0,c
   193  001336  06E8               	decf	wreg,f,c
   194  001338  E1FD               	bnz	clear_1
   195                           
   196                           ; Initialize objects allocated to BANK0 (3 bytes)
   197                           ; load TBLPTR registers with __pidataBANK0
   198  00133A  0EDB               	movlw	low __pidataBANK0
   199  00133C  6EF6               	movwf	tblptrl,c
   200  00133E  0E1A               	movlw	high __pidataBANK0
   201  001340  6EF7               	movwf	tblptrh,c
   202  001342  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   203  001344  6EF8               	movwf	tblptru,c
   204  001346  0009               	tblrd		*+	;fetch initializer
   205  001348  CFF5 F0B5          	movff	tablat,__pdataBANK0
   206  00134C  0009               	tblrd		*+	;fetch initializer
   207  00134E  CFF5 F0B6          	movff	tablat,__pdataBANK0+1
   208  001352  0009               	tblrd		*+	;fetch initializer
   209  001354  CFF5 F0B7          	movff	tablat,__pdataBANK0+2
   210                           
   211                           ; Initialize objects allocated to COMRAM (5 bytes)
   212                           ; load TBLPTR registers with __pidataCOMRAM
   213  001358  0ED6               	movlw	low __pidataCOMRAM
   214  00135A  6EF6               	movwf	tblptrl,c
   215  00135C  0E1A               	movlw	high __pidataCOMRAM
   216  00135E  6EF7               	movwf	tblptrh,c
   217  001360  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   218  001362  6EF8               	movwf	tblptru,c
   219  001364  EE00  F043         	lfsr	0,__pdataCOMRAM
   220  001368  EE10 F005          	lfsr	1,5
   221  00136C                     copy_data0:
   222  00136C  0009               	tblrd		*+
   223  00136E  CFF5 FFEE          	movff	tablat,postinc0
   224  001372  50E5               	movf	postdec1,w,c
   225  001374  50E1               	movf	fsr1l,w,c
   226  001376  E1FA               	bnz	copy_data0
   227  001378                     end_of_initialization:
   228                           	opt stack 0
   229  001378                     __end_of__initialization:
   230                           	opt stack 0
   231  001378  0100               	movlb	0
   232  00137A  EF0E  F000         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           postdec1	equ	0xFE5
   240                           fsr1l	equ	0xFE1
   241                           
   242                           	psect	bssCOMRAM
   243  000035                     __pbssCOMRAM:
   244                           	opt stack 0
   245  000035                     _DoubleSPIS:
   246                           	opt stack 0
   247  000035                     	ds	4
   248  000039                     _DDouble:
   249                           	opt stack 0
   250  000039                     	ds	3
   251  00003C                     _SetAngle:
   252                           	opt stack 0
   253  00003C                     	ds	3
   254  00003F                     _DoublePtr:
   255                           	opt stack 0
   256  00003F                     	ds	2
   257  000041                     _Command:
   258                           	opt stack 0
   259  000041                     	ds	1
   260  000042                     _timer1Low:
   261                           	opt stack 0
   262  000042                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	dataCOMRAM
   273  000043                     __pdataCOMRAM:
   274                           	opt stack 0
   275  000043                     _DeadbandHigh:
   276                           	opt stack 0
   277  000043                     	ds	2
   278  000045                     _DeadbandLow:
   279                           	opt stack 0
   280  000045                     	ds	2
   281  000047                     _timer1High:
   282                           	opt stack 0
   283  000047                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	bssBANK0
   294  000096                     __pbssBANK0:
   295                           	opt stack 0
   296  000096                     _CurrentAngle:
   297                           	opt stack 0
   298  000096                     	ds	3
   299  000099                     _CurrentVelocity:
   300                           	opt stack 0
   301  000099                     	ds	3
   302  00009C                     _Kd:
   303                           	opt stack 0
   304  00009C                     	ds	3
   305  00009F                     _Ki:
   306                           	opt stack 0
   307  00009F                     	ds	3
   308  0000A2                     _Kp:
   309                           	opt stack 0
   310  0000A2                     	ds	3
   311  0000A5                     _error:
   312                           	opt stack 0
   313  0000A5                     	ds	3
   314  0000A8                     _intErr:
   315                           	opt stack 0
   316  0000A8                     	ds	3
   317  0000AB                     _prevErr:
   318                           	opt stack 0
   319  0000AB                     	ds	3
   320  0000AE                     _motorInput:
   321                           	opt stack 0
   322  0000AE                     	ds	2
   323  0000B0                     _JSEnableFlag:
   324                           	opt stack 0
   325  0000B0                     	ds	1
   326  0000B1                     _PIDEnableFlag:
   327                           	opt stack 0
   328  0000B1                     	ds	1
   329  0000B2                     _SPIflag:
   330                           	opt stack 0
   331  0000B2                     	ds	1
   332  0000B3                     _TMR0Flag:
   333                           	opt stack 0
   334  0000B3                     	ds	1
   335  0000B4                     _dummy_byte:
   336                           	opt stack 0
   337  0000B4                     	ds	1
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	dataBANK0
   348  0000B5                     __pdataBANK0:
   349                           	opt stack 0
   350  0000B5                     _loopTime:
   351                           	opt stack 0
   352  0000B5                     	ds	3
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	cstackBANK0
   363  000060                     __pcstackBANK0:
   364                           	opt stack 0
   365  000060                     ??___ftmul:
   366                           
   367                           ; 0 bytes @ 0x0
   368  000060                     	ds	3
   369  000063                     ___ftmul@exp:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x3
   373  000063                     	ds	1
   374  000064                     ___ftmul@f3_as_product:
   375                           	opt stack 0
   376                           
   377                           ; 3 bytes @ 0x4
   378  000064                     	ds	3
   379  000067                     ___ftmul@cntr:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x7
   383  000067                     	ds	1
   384  000068                     ___ftmul@sign:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x8
   388  000068                     	ds	1
   389  000069                     ?___ftadd:
   390                           	opt stack 0
   391  000069                     ?_RTD2Angle:
   392                           	opt stack 0
   393  000069                     RTD2Angle@RTDAngle:
   394                           	opt stack 0
   395  000069                     ___ftadd@f1:
   396                           	opt stack 0
   397                           
   398                           ; 3 bytes @ 0x9
   399  000069                     	ds	3
   400  00006C                     ___ftadd@f2:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0xC
   404  00006C                     	ds	3
   405  00006F                     ??___ftadd:
   406                           
   407                           ; 0 bytes @ 0xF
   408  00006F                     	ds	3
   409  000072                     ___ftadd@sign:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x12
   413  000072                     	ds	1
   414  000073                     ___ftadd@exp2:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x13
   418  000073                     	ds	1
   419  000074                     ___ftadd@exp1:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x14
   423  000074                     	ds	1
   424  000075                     ?___ftsub:
   425                           	opt stack 0
   426  000075                     ?___fttol:
   427                           	opt stack 0
   428  000075                     ___ftsub@f1:
   429                           	opt stack 0
   430  000075                     ___fttol@f1:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x15
   434  000075                     	ds	3
   435  000078                     ___ftsub@f2:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x18
   439  000078                     	ds	1
   440  000079                     ??___fttol:
   441                           
   442                           ; 0 bytes @ 0x19
   443  000079                     	ds	5
   444  00007E                     ___fttol@sign1:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x1E
   448  00007E                     	ds	1
   449  00007F                     ___fttol@lval:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x1F
   453  00007F                     	ds	4
   454  000083                     ___fttol@exp1:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x23
   458  000083                     	ds	1
   459  000084                     ?_abs:
   460                           	opt stack 0
   461  000084                     abs@a:
   462                           	opt stack 0
   463  000084                     calculatePID@angle:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0x24
   467  000084                     	ds	2
   468  000086                     ??_abs:
   469                           
   470                           ; 0 bytes @ 0x26
   471  000086                     	ds	1
   472  000087                     calculatePID@setpoint:
   473                           	opt stack 0
   474                           
   475                           ; 3 bytes @ 0x27
   476  000087                     	ds	1
   477  000088                     ImplementPIDMotion@PIDValue:
   478                           	opt stack 0
   479  000088                     ImplementJSMotion@JoystickValue:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x28
   483  000088                     	ds	2
   484  00008A                     ??_ImplementPIDMotion:
   485  00008A                     ??_ImplementJSMotion:
   486  00008A                     calculatePID@derErr:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x2A
   490  00008A                     	ds	2
   491  00008C                     ImplementJSMotion@CCPinput:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x2C
   495  00008C                     	ds	1
   496  00008D                     _calculatePID$3351:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x2D
   500  00008D                     	ds	3
   501  000090                     _calculatePID$3352:
   502                           	opt stack 0
   503                           
   504                           ; 3 bytes @ 0x30
   505  000090                     	ds	3
   506  000093                     main@trash:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x33
   510  000093                     	ds	1
   511  000094                     main@dtime:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x34
   515  000094                     	ds	1
   516  000095                     main@x:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x35
   520  000095                     	ds	1
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	cstackCOMRAM
   531  000001                     __pcstackCOMRAM:
   532                           	opt stack 0
   533  000001                     i2Write_b_eep@badd:
   534                           	opt stack 0
   535  000001                     i2EEDisassembleDouble@dub:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x0
   539  000001                     	ds	2
   540  000003                     i2Write_b_eep@bdat:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x2
   544  000003                     	ds	1
   545  000004                     i2Write_b_eep@GIE_BIT_VAL:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x3
   549  000004                     	ds	1
   550  000005                     i2EEWriteChar@ch:
   551                           	opt stack 0
   552  000005                     i2EEWriteDouble@dub:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x4
   556  000005                     	ds	1
   557  000006                     i2EEWriteChar@location:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x5
   561  000006                     	ds	2
   562  000008                     i2EEWriteDouble@location:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x7
   566  000008                     	ds	1
   567  000009                     i2EEWriteDouble@x:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x8
   571  000009                     	ds	1
   572  00000A                     ??_ISR:
   573  00000A                     
   574                           ; 0 bytes @ 0x9
   575  00000A                     	ds	14
   576  000018                     ?_DetectMovement:
   577                           	opt stack 0
   578  000018                     ?___ftpack:
   579                           	opt stack 0
   580  000018                     ?_SPIReassembleDouble:
   581                           	opt stack 0
   582  000018                     ?_EEReassembleDouble:
   583                           	opt stack 0
   584  000018                     ?___ftneg:
   585                           	opt stack 0
   586  000018                     SendSPI1@temp:
   587                           	opt stack 0
   588  000018                     GenerateChecksum@sum:
   589                           	opt stack 0
   590  000018                     OpenSPI1@bus_mode:
   591                           	opt stack 0
   592  000018                     Delay10TCYx@unit:
   593                           	opt stack 0
   594  000018                     Delay1KTCYx@unit:
   595                           	opt stack 0
   596  000018                     Delay1TCYx@unit:
   597                           	opt stack 0
   598  000018                     Read_b_eep@badd:
   599                           	opt stack 0
   600  000018                     Write_b_eep@badd:
   601                           	opt stack 0
   602  000018                     EEDisassembleDouble@dub:
   603                           	opt stack 0
   604  000018                     ___ftpack@arg:
   605                           	opt stack 0
   606  000018                     ___ftge@ff1:
   607                           	opt stack 0
   608  000018                     ___ftneg@f1:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x17
   612  000018                     	ds	1
   613  000019                     ?_ReadRTDpos:
   614                           	opt stack 0
   615  000019                     SendSPI1@data:
   616                           	opt stack 0
   617  000019                     GenerateChecksum@y:
   618                           	opt stack 0
   619  000019                     OpenSPI1@smp_phase:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x18
   623  000019                     	ds	1
   624  00001A                     ??_DetectMovement:
   625  00001A                     EEReadChar@location:
   626                           	opt stack 0
   627  00001A                     Write_b_eep@bdat:
   628                           	opt stack 0
   629  00001A                     OpenSPI1@sync_mode:
   630                           	opt stack 0
   631  00001A                     SPIDisassembleDouble@dub:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x19
   635  00001A                     	ds	1
   636  00001B                     ??_ReadRTDpos:
   637  00001B                     EEReadChar@ch:
   638                           	opt stack 0
   639  00001B                     Write_b_eep@GIE_BIT_VAL:
   640                           	opt stack 0
   641  00001B                     ___ftpack@exp:
   642                           	opt stack 0
   643  00001B                     DetectMovement@JoystickResult:
   644                           	opt stack 0
   645  00001B                     SPIReassembleDouble@dub:
   646                           	opt stack 0
   647  00001B                     EEReassembleDouble@dub:
   648                           	opt stack 0
   649  00001B                     ___ftge@ff2:
   650                           	opt stack 0
   651                           
   652                           ; 3 bytes @ 0x1A
   653  00001B                     	ds	1
   654  00001C                     EEWriteChar@ch:
   655                           	opt stack 0
   656  00001C                     ___ftpack@sign:
   657                           	opt stack 0
   658  00001C                     EEWriteDouble@dub:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x1B
   662  00001C                     	ds	1
   663  00001D                     ??___ftpack:
   664  00001D                     EEWriteChar@location:
   665                           	opt stack 0
   666  00001D                     DetectMovement@ADCresult:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x1C
   670  00001D                     	ds	1
   671  00001E                     ??___ftge:
   672  00001E                     ?_EEReadDouble:
   673                           	opt stack 0
   674  00001E                     ReadRTDpos@HighPosition:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x1D
   678  00001E                     	ds	1
   679  00001F                     ReadRTDpos@LowPosition:
   680                           	opt stack 0
   681  00001F                     EEWriteDouble@location:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x1E
   685  00001F                     	ds	1
   686  000020                     ?___ftdiv:
   687                           	opt stack 0
   688  000020                     ?___lwtoft:
   689                           	opt stack 0
   690  000020                     EEWriteDouble@x:
   691                           	opt stack 0
   692  000020                     ReadRTDpos@FullPosition:
   693                           	opt stack 0
   694  000020                     ___lwtoft@c:
   695                           	opt stack 0
   696  000020                     ___ftdiv@f1:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x1F
   700  000020                     	ds	1
   701  000021                     EEReadDouble@location:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x20
   705  000021                     	ds	1
   706  000022                     ReadRTDpos@x:
   707                           	opt stack 0
   708  000022                     EEReadDouble@x:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x21
   712  000022                     	ds	1
   713  000023                     ___ftdiv@f2:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x22
   717  000023                     	ds	3
   718  000026                     ??___ftdiv:
   719                           
   720                           ; 0 bytes @ 0x25
   721  000026                     	ds	3
   722  000029                     ___ftdiv@cntr:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x28
   726  000029                     	ds	1
   727  00002A                     ___ftdiv@f3:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x29
   731  00002A                     	ds	3
   732  00002D                     ___ftdiv@exp:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x2C
   736  00002D                     	ds	1
   737  00002E                     ___ftdiv@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x2D
   741  00002E                     	ds	1
   742  00002F                     ?___ftmul:
   743                           	opt stack 0
   744  00002F                     ___ftmul@f1:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x2E
   748  00002F                     	ds	3
   749  000032                     ___ftmul@f2:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x31
   753  000032                     	ds	3
   754  000035                     tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           postinc0	equ	0xFEE
   759                           wreg	equ	0xFE8
   760                           postdec1	equ	0xFE5
   761                           fsr1l	equ	0xFE1
   762                           
   763                           ; 0 bytes @ 0x34
   764 ;;
   765 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   766 ;;
   767 ;; *************** function _main *****************
   768 ;; Defined at:
   769 ;;		line 22 in file "RTDuC.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  x               1   53[BANK0 ] unsigned char 
   774 ;;  dtime           1   52[BANK0 ] unsigned char 
   775 ;;  trash           1   51[BANK0 ] unsigned char 
   776 ;; Return value:  Size  Location     Type
   777 ;;		None               void
   778 ;; Registers used:
   779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;Total ram usage:        3 bytes
   790 ;; Hardware stack levels required when called:   10
   791 ;; This function calls:
   792 ;;		_Delay10TCYx
   793 ;;		_DetectJoystick
   794 ;;		_DetectMovement
   795 ;;		_ImplementJSMotion
   796 ;;		_ImplementPIDMotion
   797 ;;		_RTD2Angle
   798 ;;		_ReadRTDpos
   799 ;;		_ReceiveSPI1
   800 ;;		_SPIDisassembleDouble
   801 ;;		_SPIReassembleDouble
   802 ;;		_SaveAll
   803 ;;		_SendSPI1
   804 ;;		_calculatePID
   805 ;;		_initialize
   806 ;; This function is called by:
   807 ;;		Startup code after reset
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text0
   812  00001C                     __ptext0:
   813                           	opt stack 0
   814  00001C                     _main:
   815                           	opt stack 21
   816                           
   817                           ;RTDuC.c: 24: unsigned char trash, x = 0;
   818                           
   819                           ;incstack = 0
   820  00001C  0E00               	movlw	0
   821  00001E  0100               	movlb	0	; () banked
   822  000020  6F95               	movwf	main@x& (0+255),b
   823                           
   824                           ;RTDuC.c: 25: unsigned char dtime = 10;
   825  000022  0E0A               	movlw	10
   826  000024  0100               	movlb	0	; () banked
   827  000026  6F94               	movwf	main@dtime& (0+255),b
   828                           
   829                           ; BSR set to: 0
   830                           ;RTDuC.c: 27: initialize();
   831  000028  EC3D  F00C         	call	_initialize	;wreg free
   832                           
   833                           ;RTDuC.c: 29: SSP1BUF = dummy_byte;
   834  00002C  C0B4  FFC9         	movff	_dummy_byte,4041	;volatile
   835                           
   836                           ;RTDuC.c: 30: PORTCbits.RC6 = 0;
   837  000030  9C82               	bcf	3970,6,c	;volatile
   838  000032  D000               	goto	l3819
   839  000034                     l3819:
   840                           
   841                           ;RTDuC.c: 33: {
   842                           ;RTDuC.c: 34: if (SPIflag == 1)
   843  000034  0100               	movlb	0	; () banked
   844  000036  05B2               	decf	_SPIflag& (0+255),w,b
   845  000038  A4D8               	btfss	status,2,c
   846  00003A  D0EB               	goto	l3917
   847                           
   848                           ; BSR set to: 0
   849                           ;RTDuC.c: 35: {
   850                           ;RTDuC.c: 36: SPIflag = 0;
   851  00003C  0E00               	movlw	0
   852  00003E  0100               	movlb	0	; () banked
   853  000040  6FB2               	movwf	_SPIflag& (0+255),b
   854                           
   855                           ; BSR set to: 0
   856                           ;RTDuC.c: 37: INTCONbits.GIE = 0;
   857  000042  9EF2               	bcf	intcon,7,c	;volatile
   858                           
   859                           ; BSR set to: 0
   860                           ;RTDuC.c: 38: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   861  000044  0E02               	movlw	2
   862  000046  1841               	xorwf	_Command,w,c
   863  000048  B4D8               	btfsc	status,2,c
   864  00004A  D010               	goto	l3835
   865                           
   866                           ; BSR set to: 0
   867  00004C  0E03               	movlw	3
   868  00004E  1841               	xorwf	_Command,w,c
   869  000050  B4D8               	btfsc	status,2,c
   870  000052  D00C               	goto	l3835
   871                           
   872                           ; BSR set to: 0
   873  000054  0E04               	movlw	4
   874  000056  1841               	xorwf	_Command,w,c
   875  000058  B4D8               	btfsc	status,2,c
   876  00005A  D008               	goto	l3835
   877                           
   878                           ; BSR set to: 0
   879  00005C  0E06               	movlw	6
   880  00005E  1841               	xorwf	_Command,w,c
   881  000060  B4D8               	btfsc	status,2,c
   882  000062  D004               	goto	l3835
   883                           
   884                           ; BSR set to: 0
   885  000064  0E08               	movlw	8
   886  000066  1841               	xorwf	_Command,w,c
   887  000068  A4D8               	btfss	status,2,c
   888  00006A  D05E               	goto	l3869
   889  00006C                     l3835:
   890                           
   891                           ; BSR set to: 0
   892                           ;RTDuC.c: 39: {
   893                           ;RTDuC.c: 40: if (Command == 0x02)
   894  00006C  0E02               	movlw	2
   895  00006E  1841               	xorwf	_Command,w,c
   896  000070  A4D8               	btfss	status,2,c
   897  000072  D009               	goto	l3839
   898                           
   899                           ; BSR set to: 0
   900                           ;RTDuC.c: 41: SPIDisassembleDouble(CurrentAngle);
   901  000074  C096  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   902  000078  C097  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   903  00007C  C098  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   904  000080  EC86  F00B         	call	_SPIDisassembleDouble	;wreg free
   905  000084  D034               	goto	l3855
   906  000086                     l3839:
   907                           
   908                           ;RTDuC.c: 42: else if (Command == 0x03)
   909  000086  0E03               	movlw	3
   910  000088  1841               	xorwf	_Command,w,c
   911  00008A  A4D8               	btfss	status,2,c
   912  00008C  D009               	goto	l3843
   913                           
   914                           ;RTDuC.c: 43: SPIDisassembleDouble(CurrentVelocity);
   915  00008E  C099  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   916  000092  C09A  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   917  000096  C09B  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   918  00009A  EC86  F00B         	call	_SPIDisassembleDouble	;wreg free
   919  00009E  D027               	goto	l3855
   920  0000A0                     l3843:
   921                           
   922                           ;RTDuC.c: 44: else if (Command == 0x04)
   923  0000A0  0E04               	movlw	4
   924  0000A2  1841               	xorwf	_Command,w,c
   925  0000A4  A4D8               	btfss	status,2,c
   926  0000A6  D009               	goto	l3847
   927                           
   928                           ;RTDuC.c: 45: SPIDisassembleDouble(Kp);
   929  0000A8  C0A2  F01A         	movff	_Kp,SPIDisassembleDouble@dub
   930  0000AC  C0A3  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   931  0000B0  C0A4  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   932  0000B4  EC86  F00B         	call	_SPIDisassembleDouble	;wreg free
   933  0000B8  D01A               	goto	l3855
   934  0000BA                     l3847:
   935                           
   936                           ;RTDuC.c: 46: else if (Command == 0x06)
   937  0000BA  0E06               	movlw	6
   938  0000BC  1841               	xorwf	_Command,w,c
   939  0000BE  A4D8               	btfss	status,2,c
   940  0000C0  D009               	goto	l3851
   941                           
   942                           ;RTDuC.c: 47: SPIDisassembleDouble(Ki);
   943  0000C2  C09F  F01A         	movff	_Ki,SPIDisassembleDouble@dub
   944  0000C6  C0A0  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   945  0000CA  C0A1  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   946  0000CE  EC86  F00B         	call	_SPIDisassembleDouble	;wreg free
   947  0000D2  D00D               	goto	l3855
   948  0000D4                     l3851:
   949                           
   950                           ;RTDuC.c: 48: else if (Command == 0x08)
   951  0000D4  0E08               	movlw	8
   952  0000D6  1841               	xorwf	_Command,w,c
   953  0000D8  A4D8               	btfss	status,2,c
   954  0000DA  D009               	goto	l3855
   955                           
   956                           ;RTDuC.c: 49: SPIDisassembleDouble(Kd);
   957  0000DC  C09C  F01A         	movff	_Kd,SPIDisassembleDouble@dub
   958  0000E0  C09D  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   959  0000E4  C09E  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   960  0000E8  EC86  F00B         	call	_SPIDisassembleDouble	;wreg free
   961  0000EC  D000               	goto	l3855
   962  0000EE                     l3855:
   963                           
   964                           ;RTDuC.c: 51: PORTCbits.RC6 = 0;
   965  0000EE  9C82               	bcf	3970,6,c	;volatile
   966                           
   967                           ;RTDuC.c: 52: for (x = 0; x < 4; x++)
   968  0000F0  0E00               	movlw	0
   969  0000F2  0100               	movlb	0	; () banked
   970  0000F4  6F95               	movwf	main@x& (0+255),b
   971  0000F6  D00F               	goto	l3867
   972                           
   973                           ; BSR set to: 0
   974                           
   975                           ; BSR set to: 0
   976  0000F8  D012               	goto	l504
   977  0000FA                     l3863:
   978                           
   979                           ; BSR set to: 0
   980                           ;RTDuC.c: 53: SendSPI1(DoubleSPIS[x]);
   981  0000FA  0100               	movlb	0	; () banked
   982  0000FC  5195               	movf	main@x& (0+255),w,b
   983  0000FE  0D01               	mullw	1
   984  000100  0E35               	movlw	low _DoubleSPIS
   985  000102  24F3               	addwf	prodl,w,c
   986  000104  6ED9               	movwf	fsr2l,c
   987  000106  0E00               	movlw	high _DoubleSPIS
   988  000108  20F4               	addwfc	prodh,w,c
   989  00010A  6EDA               	movwf	fsr2h,c
   990  00010C  50DF               	movf	indf2,w,c
   991  00010E  EC0E  F00C         	call	_SendSPI1
   992  000112  0100               	movlb	0	; () banked
   993  000114  2B95               	incf	main@x& (0+255),f,b
   994  000116                     l3867:
   995                           
   996                           ; BSR set to: 0
   997  000116  0E03               	movlw	3
   998  000118  0100               	movlb	0	; () banked
   999  00011A  6595               	cpfsgt	main@x& (0+255),b
  1000  00011C  D7EE               	goto	l3863
  1001  00011E                     l504:
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;RTDuC.c: 54: trash = SSP1BUF;
  1005  00011E  CFC9 F093          	movff	4041,main@trash	;volatile
  1006                           
  1007                           ;RTDuC.c: 55: PIR1bits.SSP1IF = 0;
  1008  000122  969E               	bcf	3998,3,c	;volatile
  1009                           
  1010                           ;RTDuC.c: 56: PORTCbits.RC6 = 1;
  1011  000124  8C82               	bsf	3970,6,c	;volatile
  1012                           
  1013                           ;RTDuC.c: 57: }
  1014  000126  D06D               	goto	l505
  1015  000128                     l3869:
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;RTDuC.c: 58: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
  1019  000128  0441               	decf	_Command,w,c
  1020  00012A  B4D8               	btfsc	status,2,c
  1021  00012C  D00C               	goto	l508
  1022                           
  1023                           ; BSR set to: 0
  1024  00012E  0E05               	movlw	5
  1025  000130  1841               	xorwf	_Command,w,c
  1026  000132  B4D8               	btfsc	status,2,c
  1027  000134  D008               	goto	l508
  1028                           
  1029                           ; BSR set to: 0
  1030  000136  0E07               	movlw	7
  1031  000138  1841               	xorwf	_Command,w,c
  1032  00013A  B4D8               	btfsc	status,2,c
  1033  00013C  D004               	goto	l508
  1034                           
  1035                           ; BSR set to: 0
  1036  00013E  0E09               	movlw	9
  1037  000140  1841               	xorwf	_Command,w,c
  1038  000142  A4D8               	btfss	status,2,c
  1039  000144  D05A               	goto	l506
  1040  000146                     l508:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;RTDuC.c: 59: {
  1044                           ;RTDuC.c: 60: PORTCbits.RC6 = 0;
  1045  000146  9C82               	bcf	3970,6,c	;volatile
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;RTDuC.c: 61: for (x = 0; x != 4; x++)
  1049  000148  0E00               	movlw	0
  1050  00014A  0100               	movlb	0	; () banked
  1051  00014C  6F95               	movwf	main@x& (0+255),b
  1052  00014E                     l3879:
  1053                           
  1054                           ; BSR set to: 0
  1055  00014E  0E04               	movlw	4
  1056  000150  0100               	movlb	0	; () banked
  1057  000152  1995               	xorwf	main@x& (0+255),w,b
  1058  000154  B4D8               	btfsc	status,2,c
  1059  000156  D011               	goto	l510
  1060  000158  D001               	goto	l3883
  1061                           
  1062                           ; BSR set to: 0
  1063  00015A  D00F               	goto	l510
  1064  00015C                     l3883:
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;RTDuC.c: 62: DoubleSPIS[x] = ReceiveSPI1();
  1068  00015C  0100               	movlb	0	; () banked
  1069  00015E  5195               	movf	main@x& (0+255),w,b
  1070  000160  0D01               	mullw	1
  1071  000162  0E35               	movlw	low _DoubleSPIS
  1072  000164  24F3               	addwf	prodl,w,c
  1073  000166  6ED9               	movwf	fsr2l,c
  1074  000168  0E00               	movlw	high _DoubleSPIS
  1075  00016A  20F4               	addwfc	prodh,w,c
  1076  00016C  6EDA               	movwf	fsr2h,c
  1077  00016E  EC69  F00C         	call	_ReceiveSPI1	;wreg free
  1078  000172  6EDF               	movwf	indf2,c
  1079  000174  0100               	movlb	0	; () banked
  1080  000176  2B95               	incf	main@x& (0+255),f,b
  1081  000178  D7EA               	goto	l3879
  1082  00017A                     l510:
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;RTDuC.c: 64: PORTCbits.RC6 = 1;
  1086  00017A  8C82               	bsf	3970,6,c	;volatile
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;RTDuC.c: 66: if (Command == 0x01)
  1090  00017C  0441               	decf	_Command,w,c
  1091  00017E  A4D8               	btfss	status,2,c
  1092  000180  D00F               	goto	l3897
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;RTDuC.c: 67: {
  1096                           ;RTDuC.c: 68: SetAngle = SPIReassembleDouble();
  1097  000182  EC03  F00B         	call	_SPIReassembleDouble	;wreg free
  1098  000186  C018  F03C         	movff	?_SPIReassembleDouble,_SetAngle
  1099  00018A  C019  F03D         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1100  00018E  C01A  F03E         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1101                           
  1102                           ;RTDuC.c: 69: PIDEnableFlag = 3;
  1103  000192  0E03               	movlw	3
  1104  000194  0100               	movlb	0	; () banked
  1105  000196  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;RTDuC.c: 70: JSEnableFlag = 0;
  1109  000198  0E00               	movlw	0
  1110  00019A  0100               	movlb	0	; () banked
  1111  00019C  6FB0               	movwf	_JSEnableFlag& (0+255),b
  1112                           
  1113                           ;RTDuC.c: 71: }
  1114  00019E  D027               	goto	l3909
  1115  0001A0                     l3897:
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;RTDuC.c: 72: else if (Command == 0x05)
  1119  0001A0  0E05               	movlw	5
  1120  0001A2  1841               	xorwf	_Command,w,c
  1121  0001A4  A4D8               	btfss	status,2,c
  1122  0001A6  D009               	goto	l3901
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;RTDuC.c: 73: {
  1126                           ;RTDuC.c: 74: Kp = SPIReassembleDouble();
  1127  0001A8  EC03  F00B         	call	_SPIReassembleDouble	;wreg free
  1128  0001AC  C018  F0A2         	movff	?_SPIReassembleDouble,_Kp
  1129  0001B0  C019  F0A3         	movff	?_SPIReassembleDouble+1,_Kp+1
  1130  0001B4  C01A  F0A4         	movff	?_SPIReassembleDouble+2,_Kp+2
  1131                           
  1132                           ;RTDuC.c: 75: }
  1133  0001B8  D01A               	goto	l3909
  1134  0001BA                     l3901:
  1135                           
  1136                           ;RTDuC.c: 76: else if (Command == 0x07)
  1137  0001BA  0E07               	movlw	7
  1138  0001BC  1841               	xorwf	_Command,w,c
  1139  0001BE  A4D8               	btfss	status,2,c
  1140  0001C0  D009               	goto	l3905
  1141                           
  1142                           ;RTDuC.c: 77: {
  1143                           ;RTDuC.c: 78: Ki = SPIReassembleDouble();
  1144  0001C2  EC03  F00B         	call	_SPIReassembleDouble	;wreg free
  1145  0001C6  C018  F09F         	movff	?_SPIReassembleDouble,_Ki
  1146  0001CA  C019  F0A0         	movff	?_SPIReassembleDouble+1,_Ki+1
  1147  0001CE  C01A  F0A1         	movff	?_SPIReassembleDouble+2,_Ki+2
  1148                           
  1149                           ;RTDuC.c: 79: }
  1150  0001D2  D00D               	goto	l3909
  1151  0001D4                     l3905:
  1152                           
  1153                           ;RTDuC.c: 80: else if (Command == 0x09)
  1154  0001D4  0E09               	movlw	9
  1155  0001D6  1841               	xorwf	_Command,w,c
  1156  0001D8  A4D8               	btfss	status,2,c
  1157  0001DA  D009               	goto	l3909
  1158                           
  1159                           ;RTDuC.c: 81: {
  1160                           ;RTDuC.c: 82: Kd = SPIReassembleDouble();
  1161  0001DC  EC03  F00B         	call	_SPIReassembleDouble	;wreg free
  1162  0001E0  C018  F09C         	movff	?_SPIReassembleDouble,_Kd
  1163  0001E4  C019  F09D         	movff	?_SPIReassembleDouble+1,_Kd+1
  1164  0001E8  C01A  F09E         	movff	?_SPIReassembleDouble+2,_Kd+2
  1165  0001EC  D000               	goto	l3909
  1166  0001EE                     l3909:
  1167                           
  1168                           ;RTDuC.c: 83: }
  1169                           ;RTDuC.c: 84: trash = SSP1BUF;
  1170  0001EE  CFC9 F093          	movff	4041,main@trash	;volatile
  1171                           
  1172                           ;RTDuC.c: 85: PIR1bits.SSP1IF = 0;
  1173  0001F2  969E               	bcf	3998,3,c	;volatile
  1174                           
  1175                           ;RTDuC.c: 86: SaveAll();
  1176  0001F4  EC7B  F007         	call	_SaveAll	;wreg free
  1177                           
  1178                           ;RTDuC.c: 87: }
  1179  0001F8  D004               	goto	l505
  1180  0001FA                     l506:
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;RTDuC.c: 88: else
  1184                           ;RTDuC.c: 89: {
  1185                           ;RTDuC.c: 90: trash = SSP1BUF;
  1186  0001FA  CFC9 F093          	movff	4041,main@trash	;volatile
  1187                           
  1188                           ;RTDuC.c: 91: PIR1bits.SSP1IF = 0;
  1189  0001FE  969E               	bcf	3998,3,c	;volatile
  1190  000200  D000               	goto	l505
  1191  000202                     l505:
  1192                           
  1193                           ;RTDuC.c: 92: }
  1194                           ;RTDuC.c: 94: INTCONbits.GIE = 1;
  1195  000202  8EF2               	bsf	intcon,7,c	;volatile
  1196                           
  1197                           ;RTDuC.c: 95: PIE1bits.SSP1IE = 1;
  1198  000204  869D               	bsf	3997,3,c	;volatile
  1199                           
  1200                           ;RTDuC.c: 96: PORTCbits.RC6 = 0;
  1201  000206  9C82               	bcf	3970,6,c	;volatile
  1202                           
  1203                           ;RTDuC.c: 97: Delay10TCYx(dtime);
  1204  000208  0100               	movlb	0	; () banked
  1205  00020A  5194               	movf	main@dtime& (0+255),w,b
  1206  00020C  EC40  F00D         	call	_Delay10TCYx
  1207  000210  D000               	goto	l3917
  1208  000212                     l3917:
  1209                           
  1210                           ;RTDuC.c: 98: }
  1211                           ;RTDuC.c: 99: PORTCbits.RC6 = 1;
  1212  000212  8C82               	bsf	3970,6,c	;volatile
  1213                           
  1214                           ;RTDuC.c: 100: DetectJoystick();
  1215  000214  ECD7  F00C         	call	_DetectJoystick	;wreg free
  1216                           
  1217                           ;RTDuC.c: 101: PORTCbits.RC6 = 0;
  1218  000218  9C82               	bcf	3970,6,c	;volatile
  1219                           
  1220                           ;RTDuC.c: 102: Delay10TCYx(10);
  1221  00021A  0E0A               	movlw	10
  1222  00021C  EC40  F00D         	call	_Delay10TCYx
  1223                           
  1224                           ;RTDuC.c: 103: if (JSEnableFlag == 1)
  1225  000220  0100               	movlb	0	; () banked
  1226  000222  05B0               	decf	_JSEnableFlag& (0+255),w,b
  1227  000224  A4D8               	btfss	status,2,c
  1228  000226  D011               	goto	l3935
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;RTDuC.c: 104: {
  1232                           ;RTDuC.c: 105: PORTCbits.RC6 = 1;
  1233  000228  8C82               	bsf	3970,6,c	;volatile
  1234                           
  1235                           ;RTDuC.c: 106: INTCONbits.GIE = 0;
  1236  00022A  9EF2               	bcf	intcon,7,c	;volatile
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;RTDuC.c: 107: ImplementJSMotion(DetectMovement());
  1240  00022C  EC5A  F009         	call	_DetectMovement	;wreg free
  1241  000230  C018  F088         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1242  000234  C019  F089         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1243  000238  EC4A  F004         	call	_ImplementJSMotion	;wreg free
  1244                           
  1245                           ;RTDuC.c: 108: INTCONbits.GIE = 1;
  1246  00023C  8EF2               	bsf	intcon,7,c	;volatile
  1247                           
  1248                           ;RTDuC.c: 109: PORTCbits.RC6 = 0;
  1249  00023E  9C82               	bcf	3970,6,c	;volatile
  1250                           
  1251                           ;RTDuC.c: 110: Delay10TCYx(dtime);
  1252  000240  0100               	movlb	0	; () banked
  1253  000242  5194               	movf	main@dtime& (0+255),w,b
  1254  000244  EC40  F00D         	call	_Delay10TCYx
  1255  000248  D000               	goto	l3935
  1256  00024A                     l3935:
  1257                           
  1258                           ;RTDuC.c: 111: }
  1259                           ;RTDuC.c: 113: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1260  00024A  0100               	movlb	0	; () banked
  1261  00024C  05B1               	decf	_PIDEnableFlag& (0+255),w,b
  1262  00024E  A4D8               	btfss	status,2,c
  1263  000250  D032               	goto	l3951
  1264                           
  1265                           ; BSR set to: 0
  1266  000252  0100               	movlb	0	; () banked
  1267  000254  05B3               	decf	_TMR0Flag& (0+255),w,b
  1268  000256  A4D8               	btfss	status,2,c
  1269  000258  D02E               	goto	l3951
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;RTDuC.c: 114: {
  1273                           ;RTDuC.c: 115: PORTCbits.RC6 = 1;
  1274  00025A  8C82               	bsf	3970,6,c	;volatile
  1275                           
  1276                           ;RTDuC.c: 116: INTCONbits.GIE = 0;
  1277  00025C  9EF2               	bcf	intcon,7,c	;volatile
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;RTDuC.c: 117: CurrentAngle = RTD2Angle(ReadRTDpos());
  1281  00025E  ECBF  F009         	call	_ReadRTDpos	;wreg free
  1282  000262  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1283  000266  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1284  00026A  ECA4  F00B         	call	_RTD2Angle	;wreg free
  1285  00026E  C069  F096         	movff	?_RTD2Angle,_CurrentAngle
  1286  000272  C06A  F097         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1287  000276  C06B  F098         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1288                           
  1289                           ;RTDuC.c: 118: calculatePID(CurrentAngle, SetAngle);
  1290  00027A  C096  F084         	movff	_CurrentAngle,calculatePID@angle
  1291  00027E  C097  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1292  000282  C098  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1293  000286  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1294  00028A  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1295  00028E  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1296  000292  ECB0  F001         	call	_calculatePID	;wreg free
  1297                           
  1298                           ;RTDuC.c: 119: ImplementPIDMotion(motorInput);
  1299  000296  C0AE  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1300  00029A  C0AF  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1301  00029E  EC33  F008         	call	_ImplementPIDMotion	;wreg free
  1302                           
  1303                           ;RTDuC.c: 120: TMR0Flag = 0;
  1304  0002A2  0E00               	movlw	0
  1305  0002A4  0100               	movlb	0	; () banked
  1306  0002A6  6FB3               	movwf	_TMR0Flag& (0+255),b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;RTDuC.c: 121: INTCONbits.GIE = 1;
  1310  0002A8  8EF2               	bsf	intcon,7,c	;volatile
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;RTDuC.c: 122: PORTCbits.RC6 = 0;
  1314  0002AA  9C82               	bcf	3970,6,c	;volatile
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;RTDuC.c: 123: Delay10TCYx(dtime);
  1318  0002AC  0100               	movlb	0	; () banked
  1319  0002AE  5194               	movf	main@dtime& (0+255),w,b
  1320  0002B0  EC40  F00D         	call	_Delay10TCYx
  1321                           
  1322                           ;RTDuC.c: 124: }
  1323  0002B4  D6BF               	goto	l3819
  1324  0002B6                     l3951:
  1325                           
  1326                           ;RTDuC.c: 126: else if (PIDEnableFlag == 3)
  1327  0002B6  0E03               	movlw	3
  1328  0002B8  0100               	movlb	0	; () banked
  1329  0002BA  19B1               	xorwf	_PIDEnableFlag& (0+255),w,b
  1330  0002BC  A4D8               	btfss	status,2,c
  1331  0002BE  D030               	goto	l3971
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;RTDuC.c: 127: {
  1335                           ;RTDuC.c: 128: PORTCbits.RC6 = 1;
  1336  0002C0  8C82               	bsf	3970,6,c	;volatile
  1337                           
  1338                           ;RTDuC.c: 129: INTCONbits.GIE = 0;
  1339  0002C2  9EF2               	bcf	intcon,7,c	;volatile
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;RTDuC.c: 130: TMR0H = 0xDB;
  1343  0002C4  0EDB               	movlw	219
  1344  0002C6  6ED7               	movwf	4055,c	;volatile
  1345                           
  1346                           ;RTDuC.c: 131: TMR0L = 0x60;
  1347  0002C8  0E60               	movlw	96
  1348  0002CA  6ED6               	movwf	4054,c	;volatile
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;RTDuC.c: 132: CurrentAngle = RTD2Angle(ReadRTDpos());
  1352  0002CC  ECBF  F009         	call	_ReadRTDpos	;wreg free
  1353  0002D0  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1354  0002D4  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1355  0002D8  ECA4  F00B         	call	_RTD2Angle	;wreg free
  1356  0002DC  C069  F096         	movff	?_RTD2Angle,_CurrentAngle
  1357  0002E0  C06A  F097         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1358  0002E4  C06B  F098         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1359                           
  1360                           ;RTDuC.c: 133: calculatePID(CurrentAngle, SetAngle);
  1361  0002E8  C096  F084         	movff	_CurrentAngle,calculatePID@angle
  1362  0002EC  C097  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1363  0002F0  C098  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1364  0002F4  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1365  0002F8  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1366  0002FC  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1367  000300  ECB0  F001         	call	_calculatePID	;wreg free
  1368                           
  1369                           ;RTDuC.c: 134: ImplementPIDMotion(motorInput);
  1370  000304  C0AE  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1371  000308  C0AF  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1372  00030C  EC33  F008         	call	_ImplementPIDMotion	;wreg free
  1373                           
  1374                           ;RTDuC.c: 135: INTCONbits.GIE = 1;
  1375  000310  8EF2               	bsf	intcon,7,c	;volatile
  1376                           
  1377                           ;RTDuC.c: 137: T0CONbits.TMR0ON = 1;
  1378  000312  8ED5               	bsf	4053,7,c	;volatile
  1379                           
  1380                           ;RTDuC.c: 138: PORTCbits.RC6 = 0;
  1381  000314  9C82               	bcf	3970,6,c	;volatile
  1382                           
  1383                           ;RTDuC.c: 139: Delay10TCYx(dtime);
  1384  000316  0100               	movlb	0	; () banked
  1385  000318  5194               	movf	main@dtime& (0+255),w,b
  1386  00031A  EC40  F00D         	call	_Delay10TCYx
  1387                           
  1388                           ;RTDuC.c: 140: }
  1389  00031E  D68A               	goto	l3819
  1390  000320                     l3971:
  1391                           
  1392                           ;RTDuC.c: 142: else if (TMR0Flag == 1)
  1393  000320  0100               	movlb	0	; () banked
  1394  000322  05B3               	decf	_TMR0Flag& (0+255),w,b
  1395  000324  A4D8               	btfss	status,2,c
  1396  000326  D686               	goto	l3819
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;RTDuC.c: 143: {
  1400                           ;RTDuC.c: 144: PORTCbits.RC6 = 1;
  1401  000328  8C82               	bsf	3970,6,c	;volatile
  1402                           
  1403                           ;RTDuC.c: 145: INTCONbits.GIE = 0;
  1404  00032A  9EF2               	bcf	intcon,7,c	;volatile
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;RTDuC.c: 146: CurrentAngle = RTD2Angle(ReadRTDpos());
  1408  00032C  ECBF  F009         	call	_ReadRTDpos	;wreg free
  1409  000330  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1410  000334  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1411  000338  ECA4  F00B         	call	_RTD2Angle	;wreg free
  1412  00033C  C069  F096         	movff	?_RTD2Angle,_CurrentAngle
  1413  000340  C06A  F097         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1414  000344  C06B  F098         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1415                           
  1416                           ;RTDuC.c: 147: INTCONbits.GIE = 1;
  1417  000348  8EF2               	bsf	intcon,7,c	;volatile
  1418                           
  1419                           ;RTDuC.c: 148: TMR0Flag = 0;
  1420  00034A  0E00               	movlw	0
  1421  00034C  0100               	movlb	0	; () banked
  1422  00034E  6FB3               	movwf	_TMR0Flag& (0+255),b
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;RTDuC.c: 149: PORTCbits.RC6 = 0;
  1426  000350  9C82               	bcf	3970,6,c	;volatile
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;RTDuC.c: 150: Delay10TCYx(dtime);
  1430  000352  0100               	movlb	0	; () banked
  1431  000354  5194               	movf	main@dtime& (0+255),w,b
  1432  000356  EC40  F00D         	call	_Delay10TCYx
  1433  00035A  D66C               	goto	l3819
  1434  00035C  EF0C  F000         	goto	start
  1435  000360                     __end_of_main:
  1436                           	opt stack 0
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           prodh	equ	0xFF4
  1442                           prodl	equ	0xFF3
  1443                           intcon	equ	0xFF2
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           indf2	equ	0xFDF
  1449                           fsr2h	equ	0xFDA
  1450                           fsr2l	equ	0xFD9
  1451                           status	equ	0xFD8
  1452                           
  1453 ;; *************** function _initialize *****************
  1454 ;; Defined at:
  1455 ;;		line 155 in file "RTDuC.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;		None
  1460 ;; Return value:  Size  Location     Type
  1461 ;;		None               void
  1462 ;; Registers used:
  1463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;Total ram usage:        0 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    9
  1476 ;; This function calls:
  1477 ;;		_EEPROMInit
  1478 ;;		_InitializeInterrupts
  1479 ;;		_JoystickInit
  1480 ;;		_MotorDriverInit
  1481 ;;		_PIDInit
  1482 ;;		_RTDInit
  1483 ;;		_SPIInit
  1484 ;;		_ZeroMotors
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text1
  1491  00187A                     __ptext1:
  1492                           	opt stack 0
  1493  00187A                     _initialize:
  1494                           	opt stack 21
  1495                           
  1496                           ;RTDuC.c: 157: while (OSCCONbits.OSTS == 0);
  1497                           
  1498                           ;incstack = 0
  1499  00187A  D000               	goto	l530
  1500  00187C                     l530:
  1501  00187C  A6D3               	btfss	4051,3,c	;volatile
  1502  00187E  D7FE               	goto	l530
  1503                           
  1504                           ;RTDuC.c: 158: PORTCbits.RC6 = 1;
  1505  001880  8C82               	bsf	3970,6,c	;volatile
  1506                           
  1507                           ;RTDuC.c: 160: RTDInit();
  1508  001882  ECF6  F00B         	call	_RTDInit	;wreg free
  1509                           
  1510                           ;RTDuC.c: 161: SPIInit();
  1511  001886  EC09  F00D         	call	_SPIInit	;wreg free
  1512                           
  1513                           ;RTDuC.c: 162: JoystickInit();
  1514  00188A  EC26  F00C         	call	_JoystickInit	;wreg free
  1515                           
  1516                           ;RTDuC.c: 163: MotorDriverInit();
  1517  00188E  ECA2  F00C         	call	_MotorDriverInit	;wreg free
  1518                           
  1519                           ;RTDuC.c: 164: PIDInit();
  1520  001892  ECBF  F00A         	call	_PIDInit	;wreg free
  1521                           
  1522                           ;RTDuC.c: 165: EEPROMInit();
  1523  001896  EC23  F00D         	call	_EEPROMInit	;wreg free
  1524                           
  1525                           ;RTDuC.c: 166: ZeroMotors();
  1526  00189A  EC15  F006         	call	_ZeroMotors	;wreg free
  1527                           
  1528                           ;RTDuC.c: 168: InitializeInterrupts();
  1529  00189E  EC58  F00D         	call	_InitializeInterrupts	;wreg free
  1530                           
  1531                           ;RTDuC.c: 170: PORTAbits.RA3 = 1;
  1532  0018A2  8680               	bsf	3968,3,c	;volatile
  1533  0018A4  0012               	return		;funcret
  1534  0018A6                     __end_of_initialize:
  1535                           	opt stack 0
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           prodh	equ	0xFF4
  1541                           prodl	equ	0xFF3
  1542                           intcon	equ	0xFF2
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           fsr1l	equ	0xFE1
  1547                           indf2	equ	0xFDF
  1548                           fsr2h	equ	0xFDA
  1549                           fsr2l	equ	0xFD9
  1550                           status	equ	0xFD8
  1551                           
  1552 ;; *************** function _ZeroMotors *****************
  1553 ;; Defined at:
  1554 ;;		line 245 in file "RTDuC.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;		None
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;		None
  1559 ;; Return value:  Size  Location     Type
  1560 ;;		None               void
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;Total ram usage:        0 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    8
  1575 ;; This function calls:
  1576 ;;		_ImplementPIDMotion
  1577 ;;		_RTD2Angle
  1578 ;;		_ReadRTDpos
  1579 ;;		___fttol
  1580 ;;		_abs
  1581 ;;		_calculatePID
  1582 ;; This function is called by:
  1583 ;;		_initialize
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text2
  1588  000C2A                     __ptext2:
  1589                           	opt stack 0
  1590  000C2A                     _ZeroMotors:
  1591                           	opt stack 21
  1592                           
  1593                           ;RTDuC.c: 247: CurrentAngle = 2;
  1594                           
  1595                           ;incstack = 0
  1596  000C2A  0E00               	movlw	0
  1597  000C2C  0100               	movlb	0	; () banked
  1598  000C2E  6F96               	movwf	_CurrentAngle& (0+255),b
  1599  000C30  0E00               	movlw	0
  1600  000C32  0100               	movlb	0	; () banked
  1601  000C34  6F97               	movwf	(_CurrentAngle+1)& (0+255),b
  1602  000C36  0E40               	movlw	64
  1603  000C38  0100               	movlb	0	; () banked
  1604  000C3A  6F98               	movwf	(_CurrentAngle+2)& (0+255),b
  1605                           
  1606                           ;RTDuC.c: 248: Ki = 1;
  1607  000C3C  0E00               	movlw	0
  1608  000C3E  0100               	movlb	0	; () banked
  1609  000C40  6F9F               	movwf	_Ki& (0+255),b
  1610  000C42  0E80               	movlw	128
  1611  000C44  0100               	movlb	0	; () banked
  1612  000C46  6FA0               	movwf	(_Ki+1)& (0+255),b
  1613  000C48  0E3F               	movlw	63
  1614  000C4A  0100               	movlb	0	; () banked
  1615  000C4C  6FA1               	movwf	(_Ki+2)& (0+255),b
  1616                           
  1617                           ;RTDuC.c: 249: Kp = 2;
  1618  000C4E  0E00               	movlw	0
  1619  000C50  0100               	movlb	0	; () banked
  1620  000C52  6FA2               	movwf	_Kp& (0+255),b
  1621  000C54  0E00               	movlw	0
  1622  000C56  0100               	movlb	0	; () banked
  1623  000C58  6FA3               	movwf	(_Kp+1)& (0+255),b
  1624  000C5A  0E40               	movlw	64
  1625  000C5C  0100               	movlb	0	; () banked
  1626  000C5E  6FA4               	movwf	(_Kp+2)& (0+255),b
  1627                           
  1628                           ;RTDuC.c: 250: Kd = 0.05;
  1629  000C60  0ECD               	movlw	205
  1630  000C62  0100               	movlb	0	; () banked
  1631  000C64  6F9C               	movwf	_Kd& (0+255),b
  1632  000C66  0E4C               	movlw	76
  1633  000C68  0100               	movlb	0	; () banked
  1634  000C6A  6F9D               	movwf	(_Kd+1)& (0+255),b
  1635  000C6C  0E3D               	movlw	61
  1636  000C6E  0100               	movlb	0	; () banked
  1637  000C70  6F9E               	movwf	(_Kd+2)& (0+255),b
  1638                           
  1639                           ;RTDuC.c: 251: TMR0H = 0xDB;
  1640  000C72  0EDB               	movlw	219
  1641  000C74  6ED7               	movwf	4055,c	;volatile
  1642                           
  1643                           ;RTDuC.c: 252: TMR0L = 0x60;
  1644  000C76  0E60               	movlw	96
  1645  000C78  6ED6               	movwf	4054,c	;volatile
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;RTDuC.c: 253: T0CONbits.TMR0ON = 1;
  1649  000C7A  8ED5               	bsf	4053,7,c	;volatile
  1650                           
  1651                           ;RTDuC.c: 254: PIDEnableFlag = 3;
  1652  000C7C  0E03               	movlw	3
  1653  000C7E  0100               	movlb	0	; () banked
  1654  000C80  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  1655                           
  1656                           ;RTDuC.c: 255: SetAngle = 0;
  1657  000C82  0E00               	movlw	0
  1658  000C84  6E3C               	movwf	_SetAngle,c
  1659  000C86  0E00               	movlw	0
  1660  000C88  6E3D               	movwf	_SetAngle+1,c
  1661  000C8A  0E00               	movlw	0
  1662  000C8C  6E3E               	movwf	_SetAngle+2,c
  1663  000C8E  D000               	goto	l3743
  1664  000C90                     l3743:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;RTDuC.c: 257: {
  1668                           ;RTDuC.c: 258: CurrentAngle = RTD2Angle(ReadRTDpos());
  1669  000C90  ECBF  F009         	call	_ReadRTDpos	;wreg free
  1670  000C94  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1671  000C98  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1672  000C9C  ECA4  F00B         	call	_RTD2Angle	;wreg free
  1673  000CA0  C069  F096         	movff	?_RTD2Angle,_CurrentAngle
  1674  000CA4  C06A  F097         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1675  000CA8  C06B  F098         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1676                           
  1677                           ;RTDuC.c: 259: calculatePID(CurrentAngle, SetAngle);
  1678  000CAC  C096  F084         	movff	_CurrentAngle,calculatePID@angle
  1679  000CB0  C097  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1680  000CB4  C098  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1681  000CB8  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1682  000CBC  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1683  000CC0  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1684  000CC4  ECB0  F001         	call	_calculatePID	;wreg free
  1685                           
  1686                           ;RTDuC.c: 260: ImplementPIDMotion(motorInput);
  1687  000CC8  C0AE  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1688  000CCC  C0AF  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1689  000CD0  EC33  F008         	call	_ImplementPIDMotion	;wreg free
  1690                           
  1691                           ;RTDuC.c: 261: while (INTCONbits.TMR0IF == 0);
  1692  000CD4  D000               	goto	l557
  1693  000CD6                     l557:
  1694  000CD6  A4F2               	btfss	intcon,2,c	;volatile
  1695  000CD8  D7FE               	goto	l557
  1696                           
  1697                           ;RTDuC.c: 262: INTCONbits.TMR0IF = 0;
  1698  000CDA  94F2               	bcf	intcon,2,c	;volatile
  1699                           
  1700                           ;RTDuC.c: 263: TMR0H = 0xDB;
  1701  000CDC  0EDB               	movlw	219
  1702  000CDE  6ED7               	movwf	4055,c	;volatile
  1703                           
  1704                           ;RTDuC.c: 264: TMR0L = 0x60;
  1705  000CE0  0E60               	movlw	96
  1706  000CE2  6ED6               	movwf	4054,c	;volatile
  1707                           
  1708                           ;RTDuC.c: 265: }
  1709                           ;RTDuC.c: 266: while (abs(error) > 1);
  1710  000CE4  C0A5  F075         	movff	_error,___fttol@f1
  1711  000CE8  C0A6  F076         	movff	_error+1,___fttol@f1+1
  1712  000CEC  C0A7  F077         	movff	_error+2,___fttol@f1+2
  1713  000CF0  ECE4  F004         	call	___fttol	;wreg free
  1714  000CF4  C075  F084         	movff	?___fttol,abs@a
  1715  000CF8  C076  F085         	movff	?___fttol+1,abs@a+1
  1716  000CFC  EC53  F00C         	call	_abs	;wreg free
  1717  000D00  0100               	movlb	0	; () banked
  1718  000D02  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  1719  000D04  D008               	goto	l3753
  1720  000D06  0100               	movlb	0	; () banked
  1721  000D08  5185               	movf	(?_abs+1)& (0+255),w,b
  1722  000D0A  E1C2               	bnz	l3743
  1723  000D0C  0E02               	movlw	2
  1724  000D0E  0100               	movlb	0	; () banked
  1725  000D10  5D84               	subwf	?_abs& (0+255),w,b
  1726  000D12  B0D8               	btfsc	status,0,c
  1727  000D14  D7BD               	goto	l3743
  1728  000D16                     l3753:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;RTDuC.c: 268: Ki = 0;
  1732  000D16  0E00               	movlw	0
  1733  000D18  0100               	movlb	0	; () banked
  1734  000D1A  6F9F               	movwf	_Ki& (0+255),b
  1735  000D1C  0E00               	movlw	0
  1736  000D1E  0100               	movlb	0	; () banked
  1737  000D20  6FA0               	movwf	(_Ki+1)& (0+255),b
  1738  000D22  0E00               	movlw	0
  1739  000D24  0100               	movlb	0	; () banked
  1740  000D26  6FA1               	movwf	(_Ki+2)& (0+255),b
  1741                           
  1742                           ;RTDuC.c: 269: Kp = 0;
  1743  000D28  0E00               	movlw	0
  1744  000D2A  0100               	movlb	0	; () banked
  1745  000D2C  6FA2               	movwf	_Kp& (0+255),b
  1746  000D2E  0E00               	movlw	0
  1747  000D30  0100               	movlb	0	; () banked
  1748  000D32  6FA3               	movwf	(_Kp+1)& (0+255),b
  1749  000D34  0E00               	movlw	0
  1750  000D36  0100               	movlb	0	; () banked
  1751  000D38  6FA4               	movwf	(_Kp+2)& (0+255),b
  1752                           
  1753                           ;RTDuC.c: 270: Kd = 0;
  1754  000D3A  0E00               	movlw	0
  1755  000D3C  0100               	movlb	0	; () banked
  1756  000D3E  6F9C               	movwf	_Kd& (0+255),b
  1757  000D40  0E00               	movlw	0
  1758  000D42  0100               	movlb	0	; () banked
  1759  000D44  6F9D               	movwf	(_Kd+1)& (0+255),b
  1760  000D46  0E00               	movlw	0
  1761  000D48  0100               	movlb	0	; () banked
  1762  000D4A  6F9E               	movwf	(_Kd+2)& (0+255),b
  1763                           
  1764                           ; BSR set to: 0
  1765  000D4C  0012               	return		;funcret
  1766  000D4E                     __end_of_ZeroMotors:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           intcon	equ	0xFF2
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           postdec1	equ	0xFE5
  1778                           fsr1l	equ	0xFE1
  1779                           indf2	equ	0xFDF
  1780                           fsr2h	equ	0xFDA
  1781                           fsr2l	equ	0xFD9
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _calculatePID *****************
  1785 ;; Defined at:
  1786 ;;		line 29 in file "PID.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  angle           3   36[BANK0 ] unsigned char 
  1789 ;;  setpoint        3   39[BANK0 ] unsigned char 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  derErr          3   42[BANK0 ] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;		None               void
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1801 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;Total ram usage:       15 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    7
  1808 ;; This function calls:
  1809 ;;		___ftadd
  1810 ;;		___ftdiv
  1811 ;;		___ftge
  1812 ;;		___ftmul
  1813 ;;		___ftneg
  1814 ;;		___ftsub
  1815 ;;		___fttol
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;;		_ZeroMotors
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text3
  1823  000360                     __ptext3:
  1824                           	opt stack 0
  1825  000360                     _calculatePID:
  1826                           	opt stack 21
  1827                           
  1828                           ;PID.c: 31: double derErr;
  1829                           ;PID.c: 32: if (PIDEnableFlag == 3)
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;incstack = 0
  1833  000360  0E03               	movlw	3
  1834  000362  0100               	movlb	0	; () banked
  1835  000364  19B1               	xorwf	_PIDEnableFlag& (0+255),w,b
  1836  000366  A4D8               	btfss	status,2,c
  1837  000368  D01F               	goto	l3715
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;PID.c: 33: {
  1841                           ;PID.c: 34: error = 0;
  1842  00036A  0E00               	movlw	0
  1843  00036C  0100               	movlb	0	; () banked
  1844  00036E  6FA5               	movwf	_error& (0+255),b
  1845  000370  0E00               	movlw	0
  1846  000372  0100               	movlb	0	; () banked
  1847  000374  6FA6               	movwf	(_error+1)& (0+255),b
  1848  000376  0E00               	movlw	0
  1849  000378  0100               	movlb	0	; () banked
  1850  00037A  6FA7               	movwf	(_error+2)& (0+255),b
  1851                           
  1852                           ;PID.c: 35: prevErr = 0;
  1853  00037C  0E00               	movlw	0
  1854  00037E  0100               	movlb	0	; () banked
  1855  000380  6FAB               	movwf	_prevErr& (0+255),b
  1856  000382  0E00               	movlw	0
  1857  000384  0100               	movlb	0	; () banked
  1858  000386  6FAC               	movwf	(_prevErr+1)& (0+255),b
  1859  000388  0E00               	movlw	0
  1860  00038A  0100               	movlb	0	; () banked
  1861  00038C  6FAD               	movwf	(_prevErr+2)& (0+255),b
  1862                           
  1863                           ;PID.c: 36: intErr = 0;
  1864  00038E  0E00               	movlw	0
  1865  000390  0100               	movlb	0	; () banked
  1866  000392  6FA8               	movwf	_intErr& (0+255),b
  1867  000394  0E00               	movlw	0
  1868  000396  0100               	movlb	0	; () banked
  1869  000398  6FA9               	movwf	(_intErr+1)& (0+255),b
  1870  00039A  0E00               	movlw	0
  1871  00039C  0100               	movlb	0	; () banked
  1872  00039E  6FAA               	movwf	(_intErr+2)& (0+255),b
  1873                           
  1874                           ;PID.c: 37: PIDEnableFlag = 1;
  1875  0003A0  0E01               	movlw	1
  1876  0003A2  0100               	movlb	0	; () banked
  1877  0003A4  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  1878  0003A6  D000               	goto	l3715
  1879  0003A8                     l3715:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;PID.c: 38: }
  1883                           ;PID.c: 40: error = setpoint - angle;
  1884  0003A8  C084  F018         	movff	calculatePID@angle,___ftneg@f1
  1885  0003AC  C085  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  1886  0003B0  C086  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  1887  0003B4  EC90  F00C         	call	___ftneg	;wreg free
  1888  0003B8  C018  F069         	movff	?___ftneg,___ftadd@f1
  1889  0003BC  C019  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  1890  0003C0  C01A  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  1891  0003C4  C087  F06C         	movff	calculatePID@setpoint,___ftadd@f2
  1892  0003C8  C088  F06D         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  1893  0003CC  C089  F06E         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  1894  0003D0  EC0B  F003         	call	___ftadd	;wreg free
  1895  0003D4  C069  F0A5         	movff	?___ftadd,_error
  1896  0003D8  C06A  F0A6         	movff	?___ftadd+1,_error+1
  1897  0003DC  C06B  F0A7         	movff	?___ftadd+2,_error+2
  1898                           
  1899                           ;PID.c: 41: if (error > 180)
  1900  0003E0  0E00               	movlw	0
  1901  0003E2  6E18               	movwf	___ftge@ff1,c
  1902  0003E4  0E34               	movlw	52
  1903  0003E6  6E19               	movwf	___ftge@ff1+1,c
  1904  0003E8  0E43               	movlw	67
  1905  0003EA  6E1A               	movwf	___ftge@ff1+2,c
  1906  0003EC  C0A5  F01B         	movff	_error,___ftge@ff2
  1907  0003F0  C0A6  F01C         	movff	_error+1,___ftge@ff2+1
  1908  0003F4  C0A7  F01D         	movff	_error+2,___ftge@ff2+2
  1909  0003F8  ECD7  F008         	call	___ftge	;wreg free
  1910  0003FC  B0D8               	btfsc	status,0,c
  1911  0003FE  D018               	goto	l3721
  1912                           
  1913                           ;PID.c: 42: error -= 360;
  1914  000400  C0A5  F075         	movff	_error,___ftsub@f1
  1915  000404  C0A6  F076         	movff	_error+1,___ftsub@f1+1
  1916  000408  C0A7  F077         	movff	_error+2,___ftsub@f1+2
  1917  00040C  0E00               	movlw	0
  1918  00040E  0100               	movlb	0	; () banked
  1919  000410  6F78               	movwf	___ftsub@f2& (0+255),b
  1920  000412  0EB4               	movlw	180
  1921  000414  0100               	movlb	0	; () banked
  1922  000416  6F79               	movwf	(___ftsub@f2+1)& (0+255),b
  1923  000418  0E43               	movlw	67
  1924  00041A  0100               	movlb	0	; () banked
  1925  00041C  6F7A               	movwf	(___ftsub@f2+2)& (0+255),b
  1926  00041E  EC97  F00A         	call	___ftsub	;wreg free
  1927  000422  C075  F0A5         	movff	?___ftsub,_error
  1928  000426  C076  F0A6         	movff	?___ftsub+1,_error+1
  1929  00042A  C077  F0A7         	movff	?___ftsub+2,_error+2
  1930  00042E  D028               	goto	l149
  1931  000430                     l3721:
  1932                           
  1933                           ;PID.c: 43: else if (error < -180)
  1934  000430  C0A5  F018         	movff	_error,___ftge@ff1
  1935  000434  C0A6  F019         	movff	_error+1,___ftge@ff1+1
  1936  000438  C0A7  F01A         	movff	_error+2,___ftge@ff1+2
  1937  00043C  0E00               	movlw	0
  1938  00043E  6E1B               	movwf	___ftge@ff2,c
  1939  000440  0E34               	movlw	52
  1940  000442  6E1C               	movwf	___ftge@ff2+1,c
  1941  000444  0EC3               	movlw	195
  1942  000446  6E1D               	movwf	___ftge@ff2+2,c
  1943  000448  ECD7  F008         	call	___ftge	;wreg free
  1944  00044C  B0D8               	btfsc	status,0,c
  1945  00044E  D018               	goto	l149
  1946                           
  1947                           ;PID.c: 44: error += 360;
  1948  000450  C0A5  F069         	movff	_error,___ftadd@f1
  1949  000454  C0A6  F06A         	movff	_error+1,___ftadd@f1+1
  1950  000458  C0A7  F06B         	movff	_error+2,___ftadd@f1+2
  1951  00045C  0E00               	movlw	0
  1952  00045E  0100               	movlb	0	; () banked
  1953  000460  6F6C               	movwf	___ftadd@f2& (0+255),b
  1954  000462  0EB4               	movlw	180
  1955  000464  0100               	movlb	0	; () banked
  1956  000466  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
  1957  000468  0E43               	movlw	67
  1958  00046A  0100               	movlb	0	; () banked
  1959  00046C  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
  1960  00046E  EC0B  F003         	call	___ftadd	;wreg free
  1961  000472  C069  F0A5         	movff	?___ftadd,_error
  1962  000476  C06A  F0A6         	movff	?___ftadd+1,_error+1
  1963  00047A  C06B  F0A7         	movff	?___ftadd+2,_error+2
  1964  00047E  D000               	goto	l149
  1965  000480                     l149:
  1966                           
  1967                           ;PID.c: 46: derErr = error - prevErr;
  1968  000480  C0AB  F018         	movff	_prevErr,___ftneg@f1
  1969  000484  C0AC  F019         	movff	_prevErr+1,___ftneg@f1+1
  1970  000488  C0AD  F01A         	movff	_prevErr+2,___ftneg@f1+2
  1971  00048C  EC90  F00C         	call	___ftneg	;wreg free
  1972  000490  C018  F069         	movff	?___ftneg,___ftadd@f1
  1973  000494  C019  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  1974  000498  C01A  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  1975  00049C  C0A5  F06C         	movff	_error,___ftadd@f2
  1976  0004A0  C0A6  F06D         	movff	_error+1,___ftadd@f2+1
  1977  0004A4  C0A7  F06E         	movff	_error+2,___ftadd@f2+2
  1978  0004A8  EC0B  F003         	call	___ftadd	;wreg free
  1979  0004AC  C069  F08A         	movff	?___ftadd,calculatePID@derErr
  1980  0004B0  C06A  F08B         	movff	?___ftadd+1,calculatePID@derErr+1
  1981  0004B4  C06B  F08C         	movff	?___ftadd+2,calculatePID@derErr+2
  1982                           
  1983                           ;PID.c: 47: intErr += error;
  1984  0004B8  C0A8  F069         	movff	_intErr,___ftadd@f1
  1985  0004BC  C0A9  F06A         	movff	_intErr+1,___ftadd@f1+1
  1986  0004C0  C0AA  F06B         	movff	_intErr+2,___ftadd@f1+2
  1987  0004C4  C0A5  F06C         	movff	_error,___ftadd@f2
  1988  0004C8  C0A6  F06D         	movff	_error+1,___ftadd@f2+1
  1989  0004CC  C0A7  F06E         	movff	_error+2,___ftadd@f2+2
  1990  0004D0  EC0B  F003         	call	___ftadd	;wreg free
  1991  0004D4  C069  F0A8         	movff	?___ftadd,_intErr
  1992  0004D8  C06A  F0A9         	movff	?___ftadd+1,_intErr+1
  1993  0004DC  C06B  F0AA         	movff	?___ftadd+2,_intErr+2
  1994                           
  1995                           ;PID.c: 48: if (intErr > 2000)
  1996  0004E0  0E00               	movlw	0
  1997  0004E2  6E18               	movwf	___ftge@ff1,c
  1998  0004E4  0EFA               	movlw	250
  1999  0004E6  6E19               	movwf	___ftge@ff1+1,c
  2000  0004E8  0E44               	movlw	68
  2001  0004EA  6E1A               	movwf	___ftge@ff1+2,c
  2002  0004EC  C0A8  F01B         	movff	_intErr,___ftge@ff2
  2003  0004F0  C0A9  F01C         	movff	_intErr+1,___ftge@ff2+1
  2004  0004F4  C0AA  F01D         	movff	_intErr+2,___ftge@ff2+2
  2005  0004F8  ECD7  F008         	call	___ftge	;wreg free
  2006  0004FC  B0D8               	btfsc	status,0,c
  2007  0004FE  D00A               	goto	l3727
  2008                           
  2009                           ;PID.c: 49: intErr = 2000;
  2010  000500  0E00               	movlw	0
  2011  000502  0100               	movlb	0	; () banked
  2012  000504  6FA8               	movwf	_intErr& (0+255),b
  2013  000506  0EFA               	movlw	250
  2014  000508  0100               	movlb	0	; () banked
  2015  00050A  6FA9               	movwf	(_intErr+1)& (0+255),b
  2016  00050C  0E44               	movlw	68
  2017  00050E  0100               	movlb	0	; () banked
  2018  000510  6FAA               	movwf	(_intErr+2)& (0+255),b
  2019  000512  D000               	goto	l3727
  2020  000514                     l3727:
  2021                           
  2022                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2023  000514  C0A8  F032         	movff	_intErr,___ftmul@f2
  2024  000518  C0A9  F033         	movff	_intErr+1,___ftmul@f2+1
  2025  00051C  C0AA  F034         	movff	_intErr+2,___ftmul@f2+2
  2026  000520  C09F  F02F         	movff	_Ki,___ftmul@f1
  2027  000524  C0A0  F030         	movff	_Ki+1,___ftmul@f1+1
  2028  000528  C0A1  F031         	movff	_Ki+2,___ftmul@f1+2
  2029  00052C  EC7D  F005         	call	___ftmul	;wreg free
  2030  000530  C02F  F08D         	movff	?___ftmul,_calculatePID$3351
  2031  000534  C030  F08E         	movff	?___ftmul+1,_calculatePID$3351+1
  2032  000538  C031  F08F         	movff	?___ftmul+2,_calculatePID$3351+2
  2033                           
  2034                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2035  00053C  C0B5  F032         	movff	_loopTime,___ftmul@f2
  2036  000540  C0B6  F033         	movff	_loopTime+1,___ftmul@f2+1
  2037  000544  C0B7  F034         	movff	_loopTime+2,___ftmul@f2+2
  2038  000548  C08D  F02F         	movff	_calculatePID$3351,___ftmul@f1
  2039  00054C  C08E  F030         	movff	_calculatePID$3351+1,___ftmul@f1+1
  2040  000550  C08F  F031         	movff	_calculatePID$3351+2,___ftmul@f1+2
  2041  000554  EC7D  F005         	call	___ftmul	;wreg free
  2042  000558  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2043  00055C  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2044  000560  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2045  000564  C0A5  F032         	movff	_error,___ftmul@f2
  2046  000568  C0A6  F033         	movff	_error+1,___ftmul@f2+1
  2047  00056C  C0A7  F034         	movff	_error+2,___ftmul@f2+2
  2048  000570  C0A2  F02F         	movff	_Kp,___ftmul@f1
  2049  000574  C0A3  F030         	movff	_Kp+1,___ftmul@f1+1
  2050  000578  C0A4  F031         	movff	_Kp+2,___ftmul@f1+2
  2051  00057C  EC7D  F005         	call	___ftmul	;wreg free
  2052  000580  C02F  F069         	movff	?___ftmul,___ftadd@f1
  2053  000584  C030  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  2054  000588  C031  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  2055  00058C  EC0B  F003         	call	___ftadd	;wreg free
  2056  000590  C069  F090         	movff	?___ftadd,_calculatePID$3352
  2057  000594  C06A  F091         	movff	?___ftadd+1,_calculatePID$3352+1
  2058  000598  C06B  F092         	movff	?___ftadd+2,_calculatePID$3352+2
  2059                           
  2060                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2061  00059C  C09C  F032         	movff	_Kd,___ftmul@f2
  2062  0005A0  C09D  F033         	movff	_Kd+1,___ftmul@f2+1
  2063  0005A4  C09E  F034         	movff	_Kd+2,___ftmul@f2+2
  2064  0005A8  C0B5  F023         	movff	_loopTime,___ftdiv@f2
  2065  0005AC  C0B6  F024         	movff	_loopTime+1,___ftdiv@f2+1
  2066  0005B0  C0B7  F025         	movff	_loopTime+2,___ftdiv@f2+2
  2067  0005B4  C08A  F020         	movff	calculatePID@derErr,___ftdiv@f1
  2068  0005B8  C08B  F021         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2069  0005BC  C08C  F022         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2070  0005C0  ECA7  F006         	call	___ftdiv	;wreg free
  2071  0005C4  C020  F02F         	movff	?___ftdiv,___ftmul@f1
  2072  0005C8  C021  F030         	movff	?___ftdiv+1,___ftmul@f1+1
  2073  0005CC  C022  F031         	movff	?___ftdiv+2,___ftmul@f1+2
  2074  0005D0  EC7D  F005         	call	___ftmul	;wreg free
  2075  0005D4  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2076  0005D8  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2077  0005DC  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2078  0005E0  C090  F069         	movff	_calculatePID$3352,___ftadd@f1
  2079  0005E4  C091  F06A         	movff	_calculatePID$3352+1,___ftadd@f1+1
  2080  0005E8  C092  F06B         	movff	_calculatePID$3352+2,___ftadd@f1+2
  2081  0005EC  EC0B  F003         	call	___ftadd	;wreg free
  2082  0005F0  C069  F075         	movff	?___ftadd,___fttol@f1
  2083  0005F4  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  2084  0005F8  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  2085  0005FC  ECE4  F004         	call	___fttol	;wreg free
  2086  000600  C075  F0AE         	movff	?___fttol,_motorInput
  2087  000604  C076  F0AF         	movff	?___fttol+1,_motorInput+1
  2088                           
  2089                           ;PID.c: 53: prevErr = error;
  2090  000608  C0A5  F0AB         	movff	_error,_prevErr
  2091  00060C  C0A6  F0AC         	movff	_error+1,_prevErr+1
  2092  000610  C0A7  F0AD         	movff	_error+2,_prevErr+2
  2093  000614  0012               	return		;funcret
  2094  000616                     __end_of_calculatePID:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodh	equ	0xFF4
  2101                           prodl	equ	0xFF3
  2102                           intcon	equ	0xFF2
  2103                           postinc0	equ	0xFEE
  2104                           wreg	equ	0xFE8
  2105                           postdec1	equ	0xFE5
  2106                           fsr1l	equ	0xFE1
  2107                           indf2	equ	0xFDF
  2108                           fsr2h	equ	0xFDA
  2109                           fsr2l	equ	0xFD9
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function ___fttol *****************
  2113 ;; Defined at:
  2114 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  f1              3   21[BANK0 ] float 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  lval            4   31[BANK0 ] unsigned long 
  2119 ;;  exp1            1   35[BANK0 ] unsigned char 
  2120 ;;  sign1           1   30[BANK0 ] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  4   21[BANK0 ] long 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2130 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;Total ram usage:       15 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    4
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_calculatePID
  2141 ;;		_ZeroMotors
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text4
  2146  0009C8                     __ptext4:
  2147                           	opt stack 0
  2148  0009C8                     ___fttol:
  2149                           	opt stack 23
  2150                           
  2151                           ;incstack = 0
  2152  0009C8  C077  F079         	movff	___fttol@f1+2,??___fttol
  2153  0009CC  0100               	movlb	0	; () banked
  2154  0009CE  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2155  0009D0  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2156  0009D2  0100               	movlb	0	; () banked
  2157  0009D4  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2158  0009D6  0100               	movlb	0	; () banked
  2159  0009D8  3779               	rlcf	??___fttol& (0+255),f,b
  2160  0009DA  E301               	bnc	u1901
  2161  0009DC  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2162  0009DE                     u1901:
  2163  0009DE  0100               	movlb	0	; () banked
  2164  0009E0  5179               	movf	??___fttol& (0+255),w,b
  2165  0009E2  0100               	movlb	0	; () banked
  2166  0009E4  6F83               	movwf	___fttol@exp1& (0+255),b
  2167  0009E6  0100               	movlb	0	; () banked
  2168  0009E8  5183               	movf	___fttol@exp1& (0+255),w,b
  2169  0009EA  A4D8               	btfss	status,2,c
  2170  0009EC  D002               	goto	l2695
  2171  0009EE  D051               	goto	l2719
  2172                           
  2173                           ; BSR set to: 0
  2174                           
  2175                           ; BSR set to: 0
  2176  0009F0  D083               	goto	l1070
  2177  0009F2                     l2695:
  2178                           
  2179                           ; BSR set to: 0
  2180  0009F2  0E17               	movlw	23
  2181  0009F4  0100               	movlb	0	; () banked
  2182  0009F6  6F79               	movwf	??___fttol& (0+255),b
  2183  0009F8  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2184  0009FC  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2185  000A00  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2186  000A04  0100               	movlb	0	; () banked
  2187  000A06  2979               	incf	??___fttol& (0+255),w,b
  2188  000A08  0100               	movlb	0	; () banked
  2189  000A0A  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2190  000A0C  D005               	goto	u1920
  2191  000A0E                     u1925:
  2192  000A0E  0100               	movlb	0	; () banked
  2193  000A10  90D8               	bcf	status,0,c
  2194  000A12  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2195  000A14  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2196  000A16  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2197  000A18                     u1920:
  2198  000A18  0100               	movlb	0	; () banked
  2199  000A1A  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2200  000A1C  D7F8               	goto	u1925
  2201  000A1E  0100               	movlb	0	; () banked
  2202  000A20  517A               	movf	(??___fttol+1)& (0+255),w,b
  2203  000A22  0100               	movlb	0	; () banked
  2204  000A24  6F7E               	movwf	___fttol@sign1& (0+255),b
  2205                           
  2206                           ; BSR set to: 0
  2207  000A26  0100               	movlb	0	; () banked
  2208  000A28  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2209                           
  2210                           ; BSR set to: 0
  2211  000A2A  0EFF               	movlw	255
  2212  000A2C  0100               	movlb	0	; () banked
  2213  000A2E  1775               	andwf	___fttol@f1& (0+255),f,b
  2214  000A30  0EFF               	movlw	255
  2215  000A32  0100               	movlb	0	; () banked
  2216  000A34  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2217  000A36  0E00               	movlw	0
  2218  000A38  0100               	movlb	0	; () banked
  2219  000A3A  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2220                           
  2221                           ; BSR set to: 0
  2222  000A3C  0100               	movlb	0	; () banked
  2223  000A3E  5175               	movf	___fttol@f1& (0+255),w,b
  2224  000A40  0100               	movlb	0	; () banked
  2225  000A42  6F7F               	movwf	___fttol@lval& (0+255),b
  2226  000A44  0100               	movlb	0	; () banked
  2227  000A46  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2228  000A48  0100               	movlb	0	; () banked
  2229  000A4A  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2230  000A4C  0100               	movlb	0	; () banked
  2231  000A4E  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2232  000A50  0100               	movlb	0	; () banked
  2233  000A52  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2234  000A54  0100               	movlb	0	; () banked
  2235  000A56  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238  000A58  0E8E               	movlw	142
  2239  000A5A  0100               	movlb	0	; () banked
  2240  000A5C  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2241                           
  2242                           ; BSR set to: 0
  2243  000A5E  0100               	movlb	0	; () banked
  2244  000A60  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2245  000A62  D013               	goto	l2717
  2246                           
  2247                           ; BSR set to: 0
  2248  000A64  0100               	movlb	0	; () banked
  2249  000A66  5183               	movf	___fttol@exp1& (0+255),w,b
  2250  000A68  0A80               	xorlw	128
  2251  000A6A  0F8F               	addlw	143
  2252  000A6C  B0D8               	btfsc	status,0,c
  2253  000A6E  D003               	goto	l2713
  2254  000A70  D010               	goto	l2719
  2255                           
  2256                           ; BSR set to: 0
  2257                           
  2258                           ; BSR set to: 0
  2259  000A72  D042               	goto	l1070
  2260                           
  2261                           ; BSR set to: 0
  2262  000A74  D000               	goto	l2713
  2263  000A76                     l2713:
  2264                           
  2265                           ; BSR set to: 0
  2266  000A76  0100               	movlb	0	; () banked
  2267  000A78  90D8               	bcf	status,0,c
  2268  000A7A  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2269  000A7C  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2270  000A7E  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2271  000A80  337F               	rrcf	___fttol@lval& (0+255),f,b
  2272                           
  2273                           ; BSR set to: 0
  2274  000A82  0100               	movlb	0	; () banked
  2275  000A84  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2276  000A86  D7F7               	goto	l2713
  2277                           
  2278                           ; BSR set to: 0
  2279  000A88  D01F               	goto	l2727
  2280  000A8A                     l2717:
  2281                           
  2282                           ; BSR set to: 0
  2283  000A8A  0E17               	movlw	23
  2284  000A8C  0100               	movlb	0	; () banked
  2285  000A8E  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2286  000A90  D014               	goto	l2725
  2287  000A92                     l2719:
  2288                           
  2289                           ; BSR set to: 0
  2290  000A92  0E00               	movlw	0
  2291  000A94  0100               	movlb	0	; () banked
  2292  000A96  6F75               	movwf	?___fttol& (0+255),b
  2293  000A98  0E00               	movlw	0
  2294  000A9A  6F76               	movwf	(?___fttol+1)& (0+255),b
  2295  000A9C  0E00               	movlw	0
  2296  000A9E  6F77               	movwf	(?___fttol+2)& (0+255),b
  2297  000AA0  0E00               	movlw	0
  2298  000AA2  6F78               	movwf	(?___fttol+3)& (0+255),b
  2299                           
  2300                           ; BSR set to: 0
  2301  000AA4  D029               	goto	l1070
  2302                           
  2303                           ; BSR set to: 0
  2304  000AA6  D009               	goto	l2725
  2305  000AA8                     l2723:
  2306                           
  2307                           ; BSR set to: 0
  2308  000AA8  0100               	movlb	0	; () banked
  2309  000AAA  90D8               	bcf	status,0,c
  2310  000AAC  377F               	rlcf	___fttol@lval& (0+255),f,b
  2311  000AAE  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2312  000AB0  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2313  000AB2  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2314  000AB4  0100               	movlb	0	; () banked
  2315  000AB6  0783               	decf	___fttol@exp1& (0+255),f,b
  2316  000AB8  D000               	goto	l2725
  2317  000ABA                     l2725:
  2318                           
  2319                           ; BSR set to: 0
  2320  000ABA  0100               	movlb	0	; () banked
  2321  000ABC  5183               	movf	___fttol@exp1& (0+255),w,b
  2322  000ABE  0100               	movlb	0	; () banked
  2323  000AC0  B4D8               	btfsc	status,2,c
  2324  000AC2  D002               	goto	l2727
  2325  000AC4  D7F1               	goto	l2723
  2326                           
  2327                           ; BSR set to: 0
  2328  000AC6  D000               	goto	l2727
  2329  000AC8                     l2727:
  2330                           
  2331                           ; BSR set to: 0
  2332  000AC8  0100               	movlb	0	; () banked
  2333  000ACA  517E               	movf	___fttol@sign1& (0+255),w,b
  2334  000ACC  0100               	movlb	0	; () banked
  2335  000ACE  B4D8               	btfsc	status,2,c
  2336  000AD0  D00A               	goto	l2731
  2337                           
  2338                           ; BSR set to: 0
  2339  000AD2  0100               	movlb	0	; () banked
  2340  000AD4  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2341  000AD6  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2342  000AD8  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2343  000ADA  6D7F               	negf	___fttol@lval& (0+255),b
  2344  000ADC  0E00               	movlw	0
  2345  000ADE  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2346  000AE0  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2347  000AE2  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2348  000AE4  D000               	goto	l2731
  2349  000AE6                     l2731:
  2350                           
  2351                           ; BSR set to: 0
  2352  000AE6  C07F  F075         	movff	___fttol@lval,?___fttol
  2353  000AEA  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2354  000AEE  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2355  000AF2  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2356  000AF6  D000               	goto	l1070
  2357  000AF8                     l1070:
  2358                           
  2359                           ; BSR set to: 0
  2360  000AF8  0012               	return		;funcret
  2361  000AFA                     __end_of___fttol:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           intcon	equ	0xFF2
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           fsr1l	equ	0xFE1
  2374                           indf2	equ	0xFDF
  2375                           fsr2h	equ	0xFDA
  2376                           fsr2l	equ	0xFD9
  2377                           status	equ	0xFD8
  2378                           
  2379 ;; *************** function ___ftsub *****************
  2380 ;; Defined at:
  2381 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  f1              3   21[BANK0 ] float 
  2384 ;;  f2              3   24[BANK0 ] float 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  3   21[BANK0 ] float 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2396 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;Total ram usage:        6 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    6
  2403 ;; This function calls:
  2404 ;;		___ftadd
  2405 ;; This function is called by:
  2406 ;;		_calculatePID
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text5
  2411  00152E                     __ptext5:
  2412                           	opt stack 0
  2413  00152E                     ___ftsub:
  2414                           	opt stack 21
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;incstack = 0
  2418  00152E  0100               	movlb	0	; () banked
  2419  001530  5178               	movf	___ftsub@f2& (0+255),w,b
  2420  001532  0100               	movlb	0	; () banked
  2421  001534  1179               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  2422  001536  0100               	movlb	0	; () banked
  2423  001538  117A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  2424  00153A  B4D8               	btfsc	status,2,c
  2425  00153C  D00A               	goto	l3681
  2426                           
  2427                           ; BSR set to: 0
  2428  00153E  0E00               	movlw	0
  2429  001540  0100               	movlb	0	; () banked
  2430  001542  1B78               	xorwf	___ftsub@f2& (0+255),f,b
  2431  001544  0E00               	movlw	0
  2432  001546  0100               	movlb	0	; () banked
  2433  001548  1B79               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2434  00154A  0E80               	movlw	128
  2435  00154C  0100               	movlb	0	; () banked
  2436  00154E  1B7A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2437  001550  D000               	goto	l3681
  2438  001552                     l3681:
  2439                           
  2440                           ; BSR set to: 0
  2441  001552  C075  F069         	movff	___ftsub@f1,___ftadd@f1
  2442  001556  C076  F06A         	movff	___ftsub@f1+1,___ftadd@f1+1
  2443  00155A  C077  F06B         	movff	___ftsub@f1+2,___ftadd@f1+2
  2444  00155E  C078  F06C         	movff	___ftsub@f2,___ftadd@f2
  2445  001562  C079  F06D         	movff	___ftsub@f2+1,___ftadd@f2+1
  2446  001566  C07A  F06E         	movff	___ftsub@f2+2,___ftadd@f2+2
  2447  00156A  EC0B  F003         	call	___ftadd	;wreg free
  2448  00156E  C069  F075         	movff	?___ftadd,?___ftsub
  2449  001572  C06A  F076         	movff	?___ftadd+1,?___ftsub+1
  2450  001576  C06B  F077         	movff	?___ftadd+2,?___ftsub+2
  2451  00157A  D000               	goto	l1066
  2452  00157C                     l1066:
  2453  00157C  0012               	return		;funcret
  2454  00157E                     __end_of___ftsub:
  2455                           	opt stack 0
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           fsr1l	equ	0xFE1
  2467                           indf2	equ	0xFDF
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function ___ftadd *****************
  2473 ;; Defined at:
  2474 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  f1              3    9[BANK0 ] float 
  2477 ;;  f2              3   12[BANK0 ] float 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  exp1            1   20[BANK0 ] unsigned char 
  2480 ;;  exp2            1   19[BANK0 ] unsigned char 
  2481 ;;  sign            1   18[BANK0 ] unsigned char 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  3    9[BANK0 ] float 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2491 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;Total ram usage:       12 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    5
  2498 ;; This function calls:
  2499 ;;		___ftpack
  2500 ;; This function is called by:
  2501 ;;		_calculatePID
  2502 ;;		___ftsub
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text6
  2507  000616                     __ptext6:
  2508                           	opt stack 0
  2509  000616                     ___ftadd:
  2510                           	opt stack 21
  2511                           
  2512                           ;incstack = 0
  2513  000616  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
  2514  00061A  0100               	movlb	0	; () banked
  2515  00061C  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2516  00061E  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2517  000620  0100               	movlb	0	; () banked
  2518  000622  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2519  000624  0100               	movlb	0	; () banked
  2520  000626  376F               	rlcf	??___ftadd& (0+255),f,b
  2521  000628  E301               	bnc	u2861
  2522  00062A  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2523  00062C                     u2861:
  2524  00062C  0100               	movlb	0	; () banked
  2525  00062E  516F               	movf	??___ftadd& (0+255),w,b
  2526  000630  0100               	movlb	0	; () banked
  2527  000632  6F74               	movwf	___ftadd@exp1& (0+255),b
  2528  000634  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
  2529  000638  0100               	movlb	0	; () banked
  2530  00063A  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2531  00063C  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2532  00063E  0100               	movlb	0	; () banked
  2533  000640  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2534  000642  0100               	movlb	0	; () banked
  2535  000644  376F               	rlcf	??___ftadd& (0+255),f,b
  2536  000646  E301               	bnc	u2871
  2537  000648  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2538  00064A                     u2871:
  2539  00064A  0100               	movlb	0	; () banked
  2540  00064C  516F               	movf	??___ftadd& (0+255),w,b
  2541  00064E  0100               	movlb	0	; () banked
  2542  000650  6F73               	movwf	___ftadd@exp2& (0+255),b
  2543                           
  2544                           ; BSR set to: 0
  2545  000652  0100               	movlb	0	; () banked
  2546  000654  5174               	movf	___ftadd@exp1& (0+255),w,b
  2547  000656  0100               	movlb	0	; () banked
  2548  000658  B4D8               	btfsc	status,2,c
  2549  00065A  D011               	goto	l1002
  2550                           
  2551                           ; BSR set to: 0
  2552  00065C  0100               	movlb	0	; () banked
  2553  00065E  5173               	movf	___ftadd@exp2& (0+255),w,b
  2554  000660  0100               	movlb	0	; () banked
  2555  000662  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  2556  000664  B0D8               	btfsc	status,0,c
  2557  000666  D012               	goto	l3517
  2558                           
  2559                           ; BSR set to: 0
  2560  000668  0100               	movlb	0	; () banked
  2561  00066A  5174               	movf	___ftadd@exp1& (0+255),w,b
  2562  00066C  0800               	sublw	0
  2563  00066E  0100               	movlb	0	; () banked
  2564  000670  2573               	addwf	___ftadd@exp2& (0+255),w,b
  2565  000672  0100               	movlb	0	; () banked
  2566  000674  6F6F               	movwf	??___ftadd& (0+255),b
  2567  000676  0E18               	movlw	24
  2568  000678  0100               	movlb	0	; () banked
  2569  00067A  656F               	cpfsgt	??___ftadd& (0+255),b
  2570  00067C  D007               	goto	l3517
  2571  00067E                     l1002:
  2572                           
  2573                           ; BSR set to: 0
  2574  00067E  C06C  F069         	movff	___ftadd@f2,?___ftadd
  2575  000682  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
  2576  000686  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
  2577  00068A  D103               	goto	l1003
  2578  00068C                     l3517:
  2579                           
  2580                           ; BSR set to: 0
  2581  00068C  0100               	movlb	0	; () banked
  2582  00068E  5173               	movf	___ftadd@exp2& (0+255),w,b
  2583  000690  0100               	movlb	0	; () banked
  2584  000692  B4D8               	btfsc	status,2,c
  2585  000694  D011               	goto	l1006
  2586                           
  2587                           ; BSR set to: 0
  2588  000696  0100               	movlb	0	; () banked
  2589  000698  5174               	movf	___ftadd@exp1& (0+255),w,b
  2590  00069A  0100               	movlb	0	; () banked
  2591  00069C  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  2592  00069E  B0D8               	btfsc	status,0,c
  2593  0006A0  D012               	goto	l3523
  2594                           
  2595                           ; BSR set to: 0
  2596  0006A2  0100               	movlb	0	; () banked
  2597  0006A4  5173               	movf	___ftadd@exp2& (0+255),w,b
  2598  0006A6  0800               	sublw	0
  2599  0006A8  0100               	movlb	0	; () banked
  2600  0006AA  2574               	addwf	___ftadd@exp1& (0+255),w,b
  2601  0006AC  0100               	movlb	0	; () banked
  2602  0006AE  6F6F               	movwf	??___ftadd& (0+255),b
  2603  0006B0  0E18               	movlw	24
  2604  0006B2  0100               	movlb	0	; () banked
  2605  0006B4  656F               	cpfsgt	??___ftadd& (0+255),b
  2606  0006B6  D007               	goto	l3523
  2607  0006B8                     l1006:
  2608                           
  2609                           ; BSR set to: 0
  2610  0006B8  C069  F069         	movff	___ftadd@f1,?___ftadd
  2611  0006BC  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
  2612  0006C0  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
  2613  0006C4  D0E6               	goto	l1003
  2614  0006C6                     l3523:
  2615                           
  2616                           ; BSR set to: 0
  2617  0006C6  0E06               	movlw	6
  2618  0006C8  0100               	movlb	0	; () banked
  2619  0006CA  6F72               	movwf	___ftadd@sign& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622  0006CC  0100               	movlb	0	; () banked
  2623  0006CE  AF6B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  2624  0006D0  D003               	goto	l3529
  2625                           
  2626                           ; BSR set to: 0
  2627  0006D2  0100               	movlb	0	; () banked
  2628  0006D4  8F72               	bsf	___ftadd@sign& (0+255),7,b
  2629  0006D6  D000               	goto	l3529
  2630  0006D8                     l3529:
  2631                           
  2632                           ; BSR set to: 0
  2633  0006D8  0100               	movlb	0	; () banked
  2634  0006DA  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2635  0006DC  D002               	goto	l1008
  2636                           
  2637                           ; BSR set to: 0
  2638  0006DE  0100               	movlb	0	; () banked
  2639  0006E0  8D72               	bsf	___ftadd@sign& (0+255),6,b
  2640  0006E2                     l1008:
  2641                           
  2642                           ; BSR set to: 0
  2643  0006E2  0100               	movlb	0	; () banked
  2644  0006E4  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2645                           
  2646                           ; BSR set to: 0
  2647  0006E6  0EFF               	movlw	255
  2648  0006E8  0100               	movlb	0	; () banked
  2649  0006EA  1769               	andwf	___ftadd@f1& (0+255),f,b
  2650  0006EC  0EFF               	movlw	255
  2651  0006EE  0100               	movlb	0	; () banked
  2652  0006F0  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2653  0006F2  0E00               	movlw	0
  2654  0006F4  0100               	movlb	0	; () banked
  2655  0006F6  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2656  0006F8  0100               	movlb	0	; () banked
  2657  0006FA  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2658                           
  2659                           ; BSR set to: 0
  2660  0006FC  0EFF               	movlw	255
  2661  0006FE  0100               	movlb	0	; () banked
  2662  000700  176C               	andwf	___ftadd@f2& (0+255),f,b
  2663  000702  0EFF               	movlw	255
  2664  000704  0100               	movlb	0	; () banked
  2665  000706  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2666  000708  0E00               	movlw	0
  2667  00070A  0100               	movlb	0	; () banked
  2668  00070C  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2669                           
  2670                           ; BSR set to: 0
  2671  00070E  0100               	movlb	0	; () banked
  2672  000710  5173               	movf	___ftadd@exp2& (0+255),w,b
  2673  000712  0100               	movlb	0	; () banked
  2674  000714  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  2675  000716  B0D8               	btfsc	status,0,c
  2676  000718  D028               	goto	l3549
  2677  00071A                     l3539:
  2678                           
  2679                           ; BSR set to: 0
  2680  00071A  0100               	movlb	0	; () banked
  2681  00071C  90D8               	bcf	status,0,c
  2682  00071E  376C               	rlcf	___ftadd@f2& (0+255),f,b
  2683  000720  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2684  000722  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2685  000724  0100               	movlb	0	; () banked
  2686  000726  0773               	decf	___ftadd@exp2& (0+255),f,b
  2687                           
  2688                           ; BSR set to: 0
  2689  000728  0100               	movlb	0	; () banked
  2690  00072A  5174               	movf	___ftadd@exp1& (0+255),w,b
  2691  00072C  0100               	movlb	0	; () banked
  2692  00072E  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  2693  000730  B4D8               	btfsc	status,2,c
  2694  000732  D013               	goto	l3547
  2695                           
  2696                           ; BSR set to: 0
  2697  000734  0100               	movlb	0	; () banked
  2698  000736  0772               	decf	___ftadd@sign& (0+255),f,b
  2699  000738  C072  F06F         	movff	___ftadd@sign,??___ftadd
  2700  00073C  0E07               	movlw	7
  2701  00073E  0100               	movlb	0	; () banked
  2702  000740  176F               	andwf	??___ftadd& (0+255),f,b
  2703  000742  B4D8               	btfsc	status,2,c
  2704  000744  D00A               	goto	l3547
  2705  000746  D7E9               	goto	l3539
  2706                           
  2707                           ; BSR set to: 0
  2708                           
  2709                           ; BSR set to: 0
  2710  000748  D008               	goto	l3547
  2711  00074A                     l3545:
  2712                           
  2713                           ; BSR set to: 0
  2714  00074A  0100               	movlb	0	; () banked
  2715  00074C  90D8               	bcf	status,0,c
  2716  00074E  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2717  000750  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2718  000752  3369               	rrcf	___ftadd@f1& (0+255),f,b
  2719  000754  0100               	movlb	0	; () banked
  2720  000756  2B74               	incf	___ftadd@exp1& (0+255),f,b
  2721  000758  D000               	goto	l3547
  2722  00075A                     l3547:
  2723                           
  2724                           ; BSR set to: 0
  2725  00075A  0100               	movlb	0	; () banked
  2726  00075C  5173               	movf	___ftadd@exp2& (0+255),w,b
  2727  00075E  0100               	movlb	0	; () banked
  2728  000760  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  2729  000762  B4D8               	btfsc	status,2,c
  2730  000764  D030               	goto	l1017
  2731  000766  D7F1               	goto	l3545
  2732                           
  2733                           ; BSR set to: 0
  2734  000768  D02E               	goto	l1017
  2735  00076A                     l3549:
  2736                           
  2737                           ; BSR set to: 0
  2738  00076A  0100               	movlb	0	; () banked
  2739  00076C  5174               	movf	___ftadd@exp1& (0+255),w,b
  2740  00076E  0100               	movlb	0	; () banked
  2741  000770  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  2742  000772  B0D8               	btfsc	status,0,c
  2743  000774  D028               	goto	l1017
  2744  000776                     l3551:
  2745                           
  2746                           ; BSR set to: 0
  2747  000776  0100               	movlb	0	; () banked
  2748  000778  90D8               	bcf	status,0,c
  2749  00077A  3769               	rlcf	___ftadd@f1& (0+255),f,b
  2750  00077C  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2751  00077E  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2752  000780  0100               	movlb	0	; () banked
  2753  000782  0774               	decf	___ftadd@exp1& (0+255),f,b
  2754                           
  2755                           ; BSR set to: 0
  2756  000784  0100               	movlb	0	; () banked
  2757  000786  5174               	movf	___ftadd@exp1& (0+255),w,b
  2758  000788  0100               	movlb	0	; () banked
  2759  00078A  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  2760  00078C  B4D8               	btfsc	status,2,c
  2761  00078E  D013               	goto	l3559
  2762                           
  2763                           ; BSR set to: 0
  2764  000790  0100               	movlb	0	; () banked
  2765  000792  0772               	decf	___ftadd@sign& (0+255),f,b
  2766  000794  C072  F06F         	movff	___ftadd@sign,??___ftadd
  2767  000798  0E07               	movlw	7
  2768  00079A  0100               	movlb	0	; () banked
  2769  00079C  176F               	andwf	??___ftadd& (0+255),f,b
  2770  00079E  B4D8               	btfsc	status,2,c
  2771  0007A0  D00A               	goto	l3559
  2772  0007A2  D7E9               	goto	l3551
  2773                           
  2774                           ; BSR set to: 0
  2775                           
  2776                           ; BSR set to: 0
  2777  0007A4  D008               	goto	l3559
  2778  0007A6                     l3557:
  2779                           
  2780                           ; BSR set to: 0
  2781  0007A6  0100               	movlb	0	; () banked
  2782  0007A8  90D8               	bcf	status,0,c
  2783  0007AA  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2784  0007AC  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2785  0007AE  336C               	rrcf	___ftadd@f2& (0+255),f,b
  2786  0007B0  0100               	movlb	0	; () banked
  2787  0007B2  2B73               	incf	___ftadd@exp2& (0+255),f,b
  2788  0007B4  D000               	goto	l3559
  2789  0007B6                     l3559:
  2790                           
  2791                           ; BSR set to: 0
  2792  0007B6  0100               	movlb	0	; () banked
  2793  0007B8  5173               	movf	___ftadd@exp2& (0+255),w,b
  2794  0007BA  0100               	movlb	0	; () banked
  2795  0007BC  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  2796  0007BE  B4D8               	btfsc	status,2,c
  2797  0007C0  D002               	goto	l1017
  2798  0007C2  D7F1               	goto	l3557
  2799                           
  2800                           ; BSR set to: 0
  2801  0007C4  D000               	goto	l1017
  2802  0007C6                     l1017:
  2803                           
  2804                           ; BSR set to: 0
  2805  0007C6  0100               	movlb	0	; () banked
  2806  0007C8  AF72               	btfss	___ftadd@sign& (0+255),7,b
  2807  0007CA  D012               	goto	l1026
  2808                           
  2809                           ; BSR set to: 0
  2810  0007CC  0EFF               	movlw	255
  2811  0007CE  0100               	movlb	0	; () banked
  2812  0007D0  1B69               	xorwf	___ftadd@f1& (0+255),f,b
  2813  0007D2  0EFF               	movlw	255
  2814  0007D4  0100               	movlb	0	; () banked
  2815  0007D6  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2816  0007D8  0EFF               	movlw	255
  2817  0007DA  0100               	movlb	0	; () banked
  2818  0007DC  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2819  0007DE  0E01               	movlw	1
  2820  0007E0  0100               	movlb	0	; () banked
  2821  0007E2  2769               	addwf	___ftadd@f1& (0+255),f,b
  2822  0007E4  0E00               	movlw	0
  2823  0007E6  0100               	movlb	0	; () banked
  2824  0007E8  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2825  0007EA  0E00               	movlw	0
  2826  0007EC  0100               	movlb	0	; () banked
  2827  0007EE  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2828  0007F0                     l1026:
  2829                           
  2830                           ; BSR set to: 0
  2831  0007F0  0100               	movlb	0	; () banked
  2832  0007F2  AD72               	btfss	___ftadd@sign& (0+255),6,b
  2833  0007F4  D013               	goto	l3565
  2834                           
  2835                           ; BSR set to: 0
  2836  0007F6  0EFF               	movlw	255
  2837  0007F8  0100               	movlb	0	; () banked
  2838  0007FA  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  2839  0007FC  0EFF               	movlw	255
  2840  0007FE  0100               	movlb	0	; () banked
  2841  000800  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2842  000802  0EFF               	movlw	255
  2843  000804  0100               	movlb	0	; () banked
  2844  000806  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2845  000808  0E01               	movlw	1
  2846  00080A  0100               	movlb	0	; () banked
  2847  00080C  276C               	addwf	___ftadd@f2& (0+255),f,b
  2848  00080E  0E00               	movlw	0
  2849  000810  0100               	movlb	0	; () banked
  2850  000812  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2851  000814  0E00               	movlw	0
  2852  000816  0100               	movlb	0	; () banked
  2853  000818  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2854  00081A  D000               	goto	l3565
  2855  00081C                     l3565:
  2856                           
  2857                           ; BSR set to: 0
  2858  00081C  0E00               	movlw	0
  2859  00081E  0100               	movlb	0	; () banked
  2860  000820  6F72               	movwf	___ftadd@sign& (0+255),b
  2861                           
  2862                           ; BSR set to: 0
  2863  000822  0100               	movlb	0	; () banked
  2864  000824  5169               	movf	___ftadd@f1& (0+255),w,b
  2865  000826  0100               	movlb	0	; () banked
  2866  000828  276C               	addwf	___ftadd@f2& (0+255),f,b
  2867  00082A  0100               	movlb	0	; () banked
  2868  00082C  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
  2869  00082E  0100               	movlb	0	; () banked
  2870  000830  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2871  000832  0100               	movlb	0	; () banked
  2872  000834  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
  2873  000836  0100               	movlb	0	; () banked
  2874  000838  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2875                           
  2876                           ; BSR set to: 0
  2877  00083A  0100               	movlb	0	; () banked
  2878  00083C  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2879  00083E  D016               	goto	l3575
  2880                           
  2881                           ; BSR set to: 0
  2882  000840  0EFF               	movlw	255
  2883  000842  0100               	movlb	0	; () banked
  2884  000844  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  2885  000846  0EFF               	movlw	255
  2886  000848  0100               	movlb	0	; () banked
  2887  00084A  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2888  00084C  0EFF               	movlw	255
  2889  00084E  0100               	movlb	0	; () banked
  2890  000850  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2891  000852  0E01               	movlw	1
  2892  000854  0100               	movlb	0	; () banked
  2893  000856  276C               	addwf	___ftadd@f2& (0+255),f,b
  2894  000858  0E00               	movlw	0
  2895  00085A  0100               	movlb	0	; () banked
  2896  00085C  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2897  00085E  0E00               	movlw	0
  2898  000860  0100               	movlb	0	; () banked
  2899  000862  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2900                           
  2901                           ; BSR set to: 0
  2902  000864  0E01               	movlw	1
  2903  000866  0100               	movlb	0	; () banked
  2904  000868  6F72               	movwf	___ftadd@sign& (0+255),b
  2905  00086A  D000               	goto	l3575
  2906  00086C                     l3575:
  2907                           
  2908                           ; BSR set to: 0
  2909  00086C  C06C  F018         	movff	___ftadd@f2,___ftpack@arg
  2910  000870  C06D  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  2911  000874  C06E  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  2912  000878  C074  F01B         	movff	___ftadd@exp1,___ftpack@exp
  2913  00087C  C072  F01C         	movff	___ftadd@sign,___ftpack@sign
  2914  000880  EC18  F007         	call	___ftpack	;wreg free
  2915  000884  C018  F069         	movff	?___ftpack,?___ftadd
  2916  000888  C019  F06A         	movff	?___ftpack+1,?___ftadd+1
  2917  00088C  C01A  F06B         	movff	?___ftpack+2,?___ftadd+2
  2918  000890  D000               	goto	l1003
  2919  000892                     l1003:
  2920  000892  0012               	return		;funcret
  2921  000894                     __end_of___ftadd:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           postdec1	equ	0xFE5
  2933                           fsr1l	equ	0xFE1
  2934                           indf2	equ	0xFDF
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function ___ftneg *****************
  2940 ;; Defined at:
  2941 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  f1              3   23[COMRAM] float 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  3   23[COMRAM] float 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2955 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;Total ram usage:        3 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    4
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_calculatePID
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text7
  2970  001920                     __ptext7:
  2971                           	opt stack 0
  2972  001920                     ___ftneg:
  2973                           	opt stack 23
  2974                           
  2975                           ;incstack = 0
  2976  001920  5018               	movf	___ftneg@f1,w,c
  2977  001922  1019               	iorwf	___ftneg@f1+1,w,c
  2978  001924  101A               	iorwf	___ftneg@f1+2,w,c
  2979  001926  B4D8               	btfsc	status,2,c
  2980  001928  D006               	goto	l1059
  2981  00192A  0E00               	movlw	0
  2982  00192C  1A18               	xorwf	___ftneg@f1,f,c
  2983  00192E  0E00               	movlw	0
  2984  001930  1A19               	xorwf	___ftneg@f1+1,f,c
  2985  001932  0E80               	movlw	128
  2986  001934  1A1A               	xorwf	___ftneg@f1+2,f,c
  2987  001936                     l1059:
  2988  001936  C018  F018         	movff	___ftneg@f1,?___ftneg
  2989  00193A  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  2990  00193E  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  2991  001942  0012               	return		;funcret
  2992  001944                     __end_of___ftneg:
  2993                           	opt stack 0
  2994                           tblptru	equ	0xFF8
  2995                           tblptrh	equ	0xFF7
  2996                           tblptrl	equ	0xFF6
  2997                           tablat	equ	0xFF5
  2998                           prodh	equ	0xFF4
  2999                           prodl	equ	0xFF3
  3000                           intcon	equ	0xFF2
  3001                           postinc0	equ	0xFEE
  3002                           wreg	equ	0xFE8
  3003                           postdec1	equ	0xFE5
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function ___ftge *****************
  3011 ;; Defined at:
  3012 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  ff1             3   23[COMRAM] float 
  3015 ;;  ff2             3   26[COMRAM] float 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;		None
  3018 ;; Return value:  Size  Location     Type
  3019 ;;		None               void
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3027 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;Total ram usage:        9 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    4
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		_calculatePID
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text8
  3042  0011AE                     __ptext8:
  3043                           	opt stack 0
  3044  0011AE                     ___ftge:
  3045                           	opt stack 23
  3046                           
  3047                           ;incstack = 0
  3048  0011AE  AE1A               	btfss	___ftge@ff1+2,7,c
  3049  0011B0  D017               	goto	l2671
  3050  0011B2  C018  F01E         	movff	___ftge@ff1,??___ftge
  3051  0011B6  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3052  0011BA  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3053  0011BE  1E1E               	comf	??___ftge,f,c
  3054  0011C0  1E1F               	comf	??___ftge+1,f,c
  3055  0011C2  1E20               	comf	??___ftge+2,f,c
  3056  0011C4  2A1E               	incf	??___ftge,f,c
  3057  0011C6  0E00               	movlw	0
  3058  0011C8  221F               	addwfc	??___ftge+1,f,c
  3059  0011CA  2220               	addwfc	??___ftge+2,f,c
  3060  0011CC  0E00               	movlw	0
  3061  0011CE  241E               	addwf	??___ftge,w,c
  3062  0011D0  6E18               	movwf	___ftge@ff1,c
  3063  0011D2  0E00               	movlw	0
  3064  0011D4  201F               	addwfc	??___ftge+1,w,c
  3065  0011D6  6E19               	movwf	___ftge@ff1+1,c
  3066  0011D8  0E80               	movlw	128
  3067  0011DA  2020               	addwfc	??___ftge+2,w,c
  3068  0011DC  6E1A               	movwf	___ftge@ff1+2,c
  3069  0011DE  D000               	goto	l2671
  3070  0011E0                     l2671:
  3071  0011E0  AE1D               	btfss	___ftge@ff2+2,7,c
  3072  0011E2  D017               	goto	l2675
  3073  0011E4  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3074  0011E8  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3075  0011EC  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3076  0011F0  1E1E               	comf	??___ftge,f,c
  3077  0011F2  1E1F               	comf	??___ftge+1,f,c
  3078  0011F4  1E20               	comf	??___ftge+2,f,c
  3079  0011F6  2A1E               	incf	??___ftge,f,c
  3080  0011F8  0E00               	movlw	0
  3081  0011FA  221F               	addwfc	??___ftge+1,f,c
  3082  0011FC  2220               	addwfc	??___ftge+2,f,c
  3083  0011FE  0E00               	movlw	0
  3084  001200  241E               	addwf	??___ftge,w,c
  3085  001202  6E1B               	movwf	___ftge@ff2,c
  3086  001204  0E00               	movlw	0
  3087  001206  201F               	addwfc	??___ftge+1,w,c
  3088  001208  6E1C               	movwf	___ftge@ff2+1,c
  3089  00120A  0E80               	movlw	128
  3090  00120C  2020               	addwfc	??___ftge+2,w,c
  3091  00120E  6E1D               	movwf	___ftge@ff2+2,c
  3092  001210  D000               	goto	l2675
  3093  001212                     l2675:
  3094  001212  0E00               	movlw	0
  3095  001214  1A18               	xorwf	___ftge@ff1,f,c
  3096  001216  0E00               	movlw	0
  3097  001218  1A19               	xorwf	___ftge@ff1+1,f,c
  3098  00121A  0E80               	movlw	128
  3099  00121C  1A1A               	xorwf	___ftge@ff1+2,f,c
  3100  00121E  0E00               	movlw	0
  3101  001220  1A1B               	xorwf	___ftge@ff2,f,c
  3102  001222  0E00               	movlw	0
  3103  001224  1A1C               	xorwf	___ftge@ff2+1,f,c
  3104  001226  0E80               	movlw	128
  3105  001228  1A1D               	xorwf	___ftge@ff2+2,f,c
  3106  00122A  501B               	movf	___ftge@ff2,w,c
  3107  00122C  5C18               	subwf	___ftge@ff1,w,c
  3108  00122E  501C               	movf	___ftge@ff2+1,w,c
  3109  001230  5819               	subwfb	___ftge@ff1+1,w,c
  3110  001232  501D               	movf	___ftge@ff2+2,w,c
  3111  001234  581A               	subwfb	___ftge@ff1+2,w,c
  3112  001236  B0D8               	btfsc	status,0,c
  3113  001238  D002               	goto	l2681
  3114  00123A  90D8               	bcf	status,0,c
  3115  00123C  D002               	goto	l1043
  3116  00123E                     l2681:
  3117  00123E  80D8               	bsf	status,0,c
  3118  001240  D000               	goto	l1043
  3119  001242                     l1043:
  3120  001242  0012               	return		;funcret
  3121  001244                     __end_of___ftge:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1l	equ	0xFE1
  3134                           indf2	equ	0xFDF
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function ___ftdiv *****************
  3140 ;; Defined at:
  3141 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  f1              3   31[COMRAM] float 
  3144 ;;  f2              3   34[COMRAM] float 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  f3              3   41[COMRAM] float 
  3147 ;;  sign            1   45[COMRAM] unsigned char 
  3148 ;;  exp             1   44[COMRAM] unsigned char 
  3149 ;;  cntr            1   40[COMRAM] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  3   31[COMRAM] float 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3159 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;Total ram usage:       15 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    5
  3166 ;; This function calls:
  3167 ;;		___ftpack
  3168 ;; This function is called by:
  3169 ;;		_calculatePID
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text9
  3174  000D4E                     __ptext9:
  3175                           	opt stack 0
  3176  000D4E                     ___ftdiv:
  3177                           	opt stack 22
  3178                           
  3179                           ;incstack = 0
  3180  000D4E  C022  F026         	movff	___ftdiv@f1+2,??___ftdiv
  3181  000D52  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3182  000D54  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3183  000D56  3421               	rlcf	___ftdiv@f1+1,w,c
  3184  000D58  3626               	rlcf	??___ftdiv& (0+255),f,c
  3185  000D5A  E301               	bnc	u3081
  3186  000D5C  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3187  000D5E                     u3081:
  3188  000D5E  5026               	movf	??___ftdiv,w,c
  3189  000D60  6E2D               	movwf	___ftdiv@exp,c
  3190  000D62  502D               	movf	___ftdiv@exp,w,c
  3191  000D64  A4D8               	btfss	status,2,c
  3192  000D66  D002               	goto	l3589
  3193  000D68  D00E               	goto	l3591
  3194  000D6A  D061               	goto	l1034
  3195  000D6C                     l3589:
  3196  000D6C  C025  F026         	movff	___ftdiv@f2+2,??___ftdiv
  3197  000D70  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3198  000D72  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3199  000D74  3424               	rlcf	___ftdiv@f2+1,w,c
  3200  000D76  3626               	rlcf	??___ftdiv& (0+255),f,c
  3201  000D78  E301               	bnc	u3101
  3202  000D7A  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3203  000D7C                     u3101:
  3204  000D7C  5026               	movf	??___ftdiv,w,c
  3205  000D7E  6E2E               	movwf	___ftdiv@sign,c
  3206  000D80  502E               	movf	___ftdiv@sign,w,c
  3207  000D82  A4D8               	btfss	status,2,c
  3208  000D84  D007               	goto	l3595
  3209  000D86                     l3591:
  3210  000D86  0E00               	movlw	0
  3211  000D88  6E20               	movwf	?___ftdiv,c
  3212  000D8A  0E00               	movlw	0
  3213  000D8C  6E21               	movwf	?___ftdiv+1,c
  3214  000D8E  0E00               	movlw	0
  3215  000D90  6E22               	movwf	?___ftdiv+2,c
  3216  000D92  D04D               	goto	l1034
  3217  000D94                     l3595:
  3218  000D94  0E00               	movlw	0
  3219  000D96  6E2A               	movwf	___ftdiv@f3,c
  3220  000D98  0E00               	movlw	0
  3221  000D9A  6E2B               	movwf	___ftdiv@f3+1,c
  3222  000D9C  0E00               	movlw	0
  3223  000D9E  6E2C               	movwf	___ftdiv@f3+2,c
  3224  000DA0  502E               	movf	___ftdiv@sign,w,c
  3225  000DA2  0F89               	addlw	137
  3226  000DA4  5E2D               	subwf	___ftdiv@exp,f,c
  3227  000DA6  C022  F02E         	movff	___ftdiv@f1+2,___ftdiv@sign
  3228  000DAA  5025               	movf	___ftdiv@f2+2,w,c
  3229  000DAC  1A2E               	xorwf	___ftdiv@sign,f,c
  3230  000DAE  0E80               	movlw	128
  3231  000DB0  162E               	andwf	___ftdiv@sign,f,c
  3232  000DB2  8E21               	bsf	___ftdiv@f1+1,7,c
  3233  000DB4  0EFF               	movlw	255
  3234  000DB6  1620               	andwf	___ftdiv@f1,f,c
  3235  000DB8  0EFF               	movlw	255
  3236  000DBA  1621               	andwf	___ftdiv@f1+1,f,c
  3237  000DBC  0E00               	movlw	0
  3238  000DBE  1622               	andwf	___ftdiv@f1+2,f,c
  3239  000DC0  8E24               	bsf	___ftdiv@f2+1,7,c
  3240  000DC2  0EFF               	movlw	255
  3241  000DC4  1623               	andwf	___ftdiv@f2,f,c
  3242  000DC6  0EFF               	movlw	255
  3243  000DC8  1624               	andwf	___ftdiv@f2+1,f,c
  3244  000DCA  0E00               	movlw	0
  3245  000DCC  1625               	andwf	___ftdiv@f2+2,f,c
  3246  000DCE  0E18               	movlw	24
  3247  000DD0  6E29               	movwf	___ftdiv@cntr,c
  3248  000DD2  D000               	goto	l3615
  3249  000DD4                     l3615:
  3250  000DD4  90D8               	bcf	status,0,c
  3251  000DD6  362A               	rlcf	___ftdiv@f3,f,c
  3252  000DD8  362B               	rlcf	___ftdiv@f3+1,f,c
  3253  000DDA  362C               	rlcf	___ftdiv@f3+2,f,c
  3254  000DDC  5023               	movf	___ftdiv@f2,w,c
  3255  000DDE  5C20               	subwf	___ftdiv@f1,w,c
  3256  000DE0  5024               	movf	___ftdiv@f2+1,w,c
  3257  000DE2  5821               	subwfb	___ftdiv@f1+1,w,c
  3258  000DE4  5025               	movf	___ftdiv@f2+2,w,c
  3259  000DE6  5822               	subwfb	___ftdiv@f1+2,w,c
  3260  000DE8  A0D8               	btfss	status,0,c
  3261  000DEA  D007               	goto	l1037
  3262  000DEC  5023               	movf	___ftdiv@f2,w,c
  3263  000DEE  5E20               	subwf	___ftdiv@f1,f,c
  3264  000DF0  5024               	movf	___ftdiv@f2+1,w,c
  3265  000DF2  5A21               	subwfb	___ftdiv@f1+1,f,c
  3266  000DF4  5025               	movf	___ftdiv@f2+2,w,c
  3267  000DF6  5A22               	subwfb	___ftdiv@f1+2,f,c
  3268  000DF8  802A               	bsf	___ftdiv@f3,0,c
  3269  000DFA                     l1037:
  3270  000DFA  90D8               	bcf	status,0,c
  3271  000DFC  3620               	rlcf	___ftdiv@f1,f,c
  3272  000DFE  3621               	rlcf	___ftdiv@f1+1,f,c
  3273  000E00  3622               	rlcf	___ftdiv@f1+2,f,c
  3274  000E02  2E29               	decfsz	___ftdiv@cntr,f,c
  3275  000E04  D7E7               	goto	l3615
  3276  000E06  D000               	goto	l3625
  3277  000E08                     l3625:
  3278  000E08  C02A  F018         	movff	___ftdiv@f3,___ftpack@arg
  3279  000E0C  C02B  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3280  000E10  C02C  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3281  000E14  C02D  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3282  000E18  C02E  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3283  000E1C  EC18  F007         	call	___ftpack	;wreg free
  3284  000E20  C018  F020         	movff	?___ftpack,?___ftdiv
  3285  000E24  C019  F021         	movff	?___ftpack+1,?___ftdiv+1
  3286  000E28  C01A  F022         	movff	?___ftpack+2,?___ftdiv+2
  3287  000E2C  D000               	goto	l1034
  3288  000E2E                     l1034:
  3289  000E2E  0012               	return		;funcret
  3290  000E30                     __end_of___ftdiv:
  3291                           	opt stack 0
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           intcon	equ	0xFF2
  3299                           postinc0	equ	0xFEE
  3300                           wreg	equ	0xFE8
  3301                           postdec1	equ	0xFE5
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _ReadRTDpos *****************
  3309 ;; Defined at:
  3310 ;;		line 39 in file "ResolverToDigital.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3315 ;;  helloworld      2    0        unsigned int 
  3316 ;;  x               1   33[COMRAM] unsigned char 
  3317 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3318 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  2   24[COMRAM] unsigned int 
  3321 ;; Registers used:
  3322 ;;		wreg, status,2, status,0, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;Total ram usage:       10 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    5
  3335 ;; This function calls:
  3336 ;;		_Delay10TCYx
  3337 ;; This function is called by:
  3338 ;;		_main
  3339 ;;		_ZeroMotors
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text10
  3344  00137E                     __ptext10:
  3345                           	opt stack 0
  3346  00137E                     _ReadRTDpos:
  3347                           	opt stack 23
  3348                           
  3349                           ;ResolverToDigital.c: 41: unsigned char x;
  3350                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  3351                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  3352                           ;ResolverToDigital.c: 48: {
  3353                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  3354                           
  3355                           ;incstack = 0
  3356  00137E  9EF2               	bcf	intcon,7,c	;volatile
  3357                           
  3358                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  3359  001380  8284               	bsf	3972,1,c	;volatile
  3360                           
  3361                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  3362  001382  9084               	bcf	3972,0,c	;volatile
  3363                           
  3364                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  3365  001384  0E00               	movlw	0
  3366  001386  6E22               	movwf	ReadRTDpos@x,c
  3367  001388  D003               	goto	l2801
  3368  00138A  D005               	goto	l188
  3369  00138C                     l187:
  3370                           
  3371                           ;ResolverToDigital.c: 53: __nop();
  3372  00138C  F000               	nop	
  3373  00138E  2A22               	incf	ReadRTDpos@x,f,c
  3374  001390                     l2801:
  3375  001390  0E07               	movlw	7
  3376  001392  6422               	cpfsgt	ReadRTDpos@x,c
  3377  001394  D7FB               	goto	l187
  3378  001396                     l188:
  3379                           
  3380                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  3381  001396  8484               	bsf	3972,2,c	;volatile
  3382                           
  3383                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  3384  001398  9484               	bcf	3972,2,c	;volatile
  3385                           
  3386                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  3387  00139A  0E01               	movlw	1
  3388  00139C  EC40  F00D         	call	_Delay10TCYx
  3389                           
  3390                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  3391  0013A0  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3392                           
  3393                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  3394  0013A4  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3395                           
  3396                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  3397  0013A8  8484               	bsf	3972,2,c	;volatile
  3398                           
  3399                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  3400  0013AA  8084               	bsf	3972,0,c	;volatile
  3401                           
  3402                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  3403  0013AC  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3404  0013B0  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3405                           
  3406                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3407  0013B2  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3408  0013B6  0E0F               	movlw	15
  3409  0013B8  161B               	andwf	??_ReadRTDpos,f,c
  3410  0013BA  501B               	movf	??_ReadRTDpos,w,c
  3411  0013BC  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3412  0013BE  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3413  0013C0  5020               	movf	ReadRTDpos@FullPosition,w,c
  3414  0013C2  101C               	iorwf	??_ReadRTDpos+1,w,c
  3415  0013C4  6E20               	movwf	ReadRTDpos@FullPosition,c
  3416  0013C6  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3417  0013C8  101D               	iorwf	??_ReadRTDpos+2,w,c
  3418  0013CA  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3419                           
  3420                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  3421  0013CC  8EF2               	bsf	intcon,7,c	;volatile
  3422                           
  3423                           ;ResolverToDigital.c: 64: return FullPosition;
  3424  0013CE  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3425  0013D2  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3426  0013D6  D000               	goto	l189
  3427  0013D8                     l189:
  3428  0013D8  0012               	return		;funcret
  3429  0013DA                     __end_of_ReadRTDpos:
  3430                           	opt stack 0
  3431                           tblptru	equ	0xFF8
  3432                           tblptrh	equ	0xFF7
  3433                           tblptrl	equ	0xFF6
  3434                           tablat	equ	0xFF5
  3435                           prodh	equ	0xFF4
  3436                           prodl	equ	0xFF3
  3437                           intcon	equ	0xFF2
  3438                           postinc0	equ	0xFEE
  3439                           wreg	equ	0xFE8
  3440                           postdec1	equ	0xFE5
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _RTD2Angle *****************
  3448 ;; Defined at:
  3449 ;;		line 99 in file "ResolverToDigital.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  RTDAngle        2    9[BANK0 ] unsigned int 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  3    9[BANK0 ] unsigned int 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:        3 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    6
  3470 ;; This function calls:
  3471 ;;		___ftmul
  3472 ;;		___lwtoft
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;;		_ZeroMotors
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text11
  3480  001748                     __ptext11:
  3481                           	opt stack 0
  3482  001748                     _RTD2Angle:
  3483                           	opt stack 22
  3484                           
  3485                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  3486                           
  3487                           ;incstack = 0
  3488  001748  C069  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3489  00174C  C06A  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3490  001750  EC7D  F00C         	call	___lwtoft	;wreg free
  3491  001754  C020  F02F         	movff	?___lwtoft,___ftmul@f1
  3492  001758  C021  F030         	movff	?___lwtoft+1,___ftmul@f1+1
  3493  00175C  C022  F031         	movff	?___lwtoft+2,___ftmul@f1+2
  3494  001760  0E00               	movlw	0
  3495  001762  6E32               	movwf	___ftmul@f2,c
  3496  001764  0EB4               	movlw	180
  3497  001766  6E33               	movwf	___ftmul@f2+1,c
  3498  001768  0E3D               	movlw	61
  3499  00176A  6E34               	movwf	___ftmul@f2+2,c
  3500  00176C  EC7D  F005         	call	___ftmul	;wreg free
  3501  001770  C02F  F069         	movff	?___ftmul,?_RTD2Angle
  3502  001774  C030  F06A         	movff	?___ftmul+1,?_RTD2Angle+1
  3503  001778  C031  F06B         	movff	?___ftmul+2,?_RTD2Angle+2
  3504  00177C  D000               	goto	l197
  3505  00177E                     l197:
  3506  00177E  0012               	return		;funcret
  3507  001780                     __end_of_RTD2Angle:
  3508                           	opt stack 0
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           intcon	equ	0xFF2
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           postdec1	equ	0xFE5
  3519                           fsr1l	equ	0xFE1
  3520                           indf2	equ	0xFDF
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function ___lwtoft *****************
  3526 ;; Defined at:
  3527 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  c               2   31[COMRAM] unsigned int 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  3   31[COMRAM] float 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        3 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    5
  3548 ;; This function calls:
  3549 ;;		___ftpack
  3550 ;; This function is called by:
  3551 ;;		_RTD2Angle
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text12
  3556  0018FA                     __ptext12:
  3557                           	opt stack 0
  3558  0018FA                     ___lwtoft:
  3559                           	opt stack 22
  3560                           
  3561                           ;incstack = 0
  3562  0018FA  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  3563  0018FE  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  3564  001902  6A1A               	clrf	___ftpack@arg+2,c
  3565  001904  0E8E               	movlw	142
  3566  001906  6E1B               	movwf	___ftpack@exp,c
  3567  001908  0E00               	movlw	0
  3568  00190A  6E1C               	movwf	___ftpack@sign,c
  3569  00190C  EC18  F007         	call	___ftpack	;wreg free
  3570  001910  C018  F020         	movff	?___ftpack,?___lwtoft
  3571  001914  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  3572  001918  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  3573  00191C  D000               	goto	l1199
  3574  00191E                     l1199:
  3575  00191E  0012               	return		;funcret
  3576  001920                     __end_of___lwtoft:
  3577                           	opt stack 0
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           intcon	equ	0xFF2
  3585                           postinc0	equ	0xFEE
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1l	equ	0xFE1
  3589                           indf2	equ	0xFDF
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function ___ftmul *****************
  3595 ;; Defined at:
  3596 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  f1              3   46[COMRAM] float 
  3599 ;;  f2              3   49[COMRAM] float 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  3602 ;;  sign            1    8[BANK0 ] unsigned char 
  3603 ;;  cntr            1    7[BANK0 ] unsigned char 
  3604 ;;  exp             1    3[BANK0 ] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  3   46[COMRAM] float 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:       15 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    5
  3621 ;; This function calls:
  3622 ;;		___ftpack
  3623 ;; This function is called by:
  3624 ;;		_calculatePID
  3625 ;;		_RTD2Angle
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text13
  3630  000AFA                     __ptext13:
  3631                           	opt stack 0
  3632  000AFA                     ___ftmul:
  3633                           	opt stack 22
  3634                           
  3635                           ;incstack = 0
  3636  000AFA  C031  F060         	movff	___ftmul@f1+2,??___ftmul
  3637  000AFE  0100               	movlb	0	; () banked
  3638  000B00  6B61               	clrf	(??___ftmul+1)& (0+255),b
  3639  000B02  6B62               	clrf	(??___ftmul+2)& (0+255),b
  3640  000B04  3430               	rlcf	___ftmul@f1+1,w,c
  3641  000B06  0100               	movlb	0	; () banked
  3642  000B08  3760               	rlcf	??___ftmul& (0+255),f,b
  3643  000B0A  E301               	bnc	u3131
  3644  000B0C  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  3645  000B0E                     u3131:
  3646  000B0E  0100               	movlb	0	; () banked
  3647  000B10  5160               	movf	??___ftmul& (0+255),w,b
  3648  000B12  0100               	movlb	0	; () banked
  3649  000B14  6F63               	movwf	___ftmul@exp& (0+255),b
  3650  000B16  0100               	movlb	0	; () banked
  3651  000B18  5163               	movf	___ftmul@exp& (0+255),w,b
  3652  000B1A  A4D8               	btfss	status,2,c
  3653  000B1C  D002               	goto	l3635
  3654  000B1E  D013               	goto	l3637
  3655                           
  3656                           ; BSR set to: 0
  3657                           
  3658                           ; BSR set to: 0
  3659  000B20  D083               	goto	l1049
  3660  000B22                     l3635:
  3661                           
  3662                           ; BSR set to: 0
  3663  000B22  C034  F060         	movff	___ftmul@f2+2,??___ftmul
  3664  000B26  0100               	movlb	0	; () banked
  3665  000B28  6B61               	clrf	(??___ftmul+1)& (0+255),b
  3666  000B2A  6B62               	clrf	(??___ftmul+2)& (0+255),b
  3667  000B2C  3433               	rlcf	___ftmul@f2+1,w,c
  3668  000B2E  0100               	movlb	0	; () banked
  3669  000B30  3760               	rlcf	??___ftmul& (0+255),f,b
  3670  000B32  E301               	bnc	u3151
  3671  000B34  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  3672  000B36                     u3151:
  3673  000B36  0100               	movlb	0	; () banked
  3674  000B38  5160               	movf	??___ftmul& (0+255),w,b
  3675  000B3A  0100               	movlb	0	; () banked
  3676  000B3C  6F68               	movwf	___ftmul@sign& (0+255),b
  3677  000B3E  0100               	movlb	0	; () banked
  3678  000B40  5168               	movf	___ftmul@sign& (0+255),w,b
  3679  000B42  A4D8               	btfss	status,2,c
  3680  000B44  D007               	goto	l3641
  3681  000B46                     l3637:
  3682                           
  3683                           ; BSR set to: 0
  3684  000B46  0E00               	movlw	0
  3685  000B48  6E2F               	movwf	?___ftmul,c
  3686  000B4A  0E00               	movlw	0
  3687  000B4C  6E30               	movwf	?___ftmul+1,c
  3688  000B4E  0E00               	movlw	0
  3689  000B50  6E31               	movwf	?___ftmul+2,c
  3690                           
  3691                           ; BSR set to: 0
  3692  000B52  D06A               	goto	l1049
  3693  000B54                     l3641:
  3694                           
  3695                           ; BSR set to: 0
  3696  000B54  0100               	movlb	0	; () banked
  3697  000B56  5168               	movf	___ftmul@sign& (0+255),w,b
  3698  000B58  0F7B               	addlw	123
  3699  000B5A  0100               	movlb	0	; () banked
  3700  000B5C  2763               	addwf	___ftmul@exp& (0+255),f,b
  3701                           
  3702                           ; BSR set to: 0
  3703  000B5E  C031  F068         	movff	___ftmul@f1+2,___ftmul@sign
  3704  000B62  5034               	movf	___ftmul@f2+2,w,c
  3705  000B64  0100               	movlb	0	; () banked
  3706  000B66  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  3707  000B68  0E80               	movlw	128
  3708  000B6A  0100               	movlb	0	; () banked
  3709  000B6C  1768               	andwf	___ftmul@sign& (0+255),f,b
  3710                           
  3711                           ; BSR set to: 0
  3712  000B6E  8E30               	bsf	___ftmul@f1+1,7,c
  3713                           
  3714                           ; BSR set to: 0
  3715  000B70  8E33               	bsf	___ftmul@f2+1,7,c
  3716                           
  3717                           ; BSR set to: 0
  3718  000B72  0EFF               	movlw	255
  3719  000B74  1632               	andwf	___ftmul@f2,f,c
  3720  000B76  0EFF               	movlw	255
  3721  000B78  1633               	andwf	___ftmul@f2+1,f,c
  3722  000B7A  0E00               	movlw	0
  3723  000B7C  1634               	andwf	___ftmul@f2+2,f,c
  3724                           
  3725                           ; BSR set to: 0
  3726  000B7E  0E00               	movlw	0
  3727  000B80  0100               	movlb	0	; () banked
  3728  000B82  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  3729  000B84  0E00               	movlw	0
  3730  000B86  0100               	movlb	0	; () banked
  3731  000B88  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3732  000B8A  0E00               	movlw	0
  3733  000B8C  0100               	movlb	0	; () banked
  3734  000B8E  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3735                           
  3736                           ; BSR set to: 0
  3737  000B90  0E07               	movlw	7
  3738  000B92  0100               	movlb	0	; () banked
  3739  000B94  6F67               	movwf	___ftmul@cntr& (0+255),b
  3740  000B96  D000               	goto	l3655
  3741  000B98                     l3655:
  3742                           
  3743                           ; BSR set to: 0
  3744  000B98  A02F               	btfss	___ftmul@f1,0,c
  3745  000B9A  D00A               	goto	l3659
  3746                           
  3747                           ; BSR set to: 0
  3748  000B9C  5032               	movf	___ftmul@f2,w,c
  3749  000B9E  0100               	movlb	0	; () banked
  3750  000BA0  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3751  000BA2  5033               	movf	___ftmul@f2+1,w,c
  3752  000BA4  0100               	movlb	0	; () banked
  3753  000BA6  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3754  000BA8  5034               	movf	___ftmul@f2+2,w,c
  3755  000BAA  0100               	movlb	0	; () banked
  3756  000BAC  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3757  000BAE  D000               	goto	l3659
  3758  000BB0                     l3659:
  3759                           
  3760                           ; BSR set to: 0
  3761  000BB0  90D8               	bcf	status,0,c
  3762  000BB2  3231               	rrcf	___ftmul@f1+2,f,c
  3763  000BB4  3230               	rrcf	___ftmul@f1+1,f,c
  3764  000BB6  322F               	rrcf	___ftmul@f1,f,c
  3765  000BB8  90D8               	bcf	status,0,c
  3766  000BBA  3632               	rlcf	___ftmul@f2,f,c
  3767  000BBC  3633               	rlcf	___ftmul@f2+1,f,c
  3768  000BBE  3634               	rlcf	___ftmul@f2+2,f,c
  3769                           
  3770                           ; BSR set to: 0
  3771  000BC0  0100               	movlb	0	; () banked
  3772  000BC2  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  3773  000BC4  D7E9               	goto	l3655
  3774  000BC6  D000               	goto	l3663
  3775  000BC8                     l3663:
  3776                           
  3777                           ; BSR set to: 0
  3778  000BC8  0E09               	movlw	9
  3779  000BCA  0100               	movlb	0	; () banked
  3780  000BCC  6F67               	movwf	___ftmul@cntr& (0+255),b
  3781  000BCE  D000               	goto	l3665
  3782  000BD0                     l3665:
  3783                           
  3784                           ; BSR set to: 0
  3785  000BD0  A02F               	btfss	___ftmul@f1,0,c
  3786  000BD2  D00A               	goto	l3669
  3787                           
  3788                           ; BSR set to: 0
  3789  000BD4  5032               	movf	___ftmul@f2,w,c
  3790  000BD6  0100               	movlb	0	; () banked
  3791  000BD8  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3792  000BDA  5033               	movf	___ftmul@f2+1,w,c
  3793  000BDC  0100               	movlb	0	; () banked
  3794  000BDE  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3795  000BE0  5034               	movf	___ftmul@f2+2,w,c
  3796  000BE2  0100               	movlb	0	; () banked
  3797  000BE4  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3798  000BE6  D000               	goto	l3669
  3799  000BE8                     l3669:
  3800                           
  3801                           ; BSR set to: 0
  3802  000BE8  90D8               	bcf	status,0,c
  3803  000BEA  3231               	rrcf	___ftmul@f1+2,f,c
  3804  000BEC  3230               	rrcf	___ftmul@f1+1,f,c
  3805  000BEE  322F               	rrcf	___ftmul@f1,f,c
  3806  000BF0  0100               	movlb	0	; () banked
  3807  000BF2  90D8               	bcf	status,0,c
  3808  000BF4  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3809  000BF6  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3810  000BF8  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3811                           
  3812                           ; BSR set to: 0
  3813  000BFA  0100               	movlb	0	; () banked
  3814  000BFC  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  3815  000BFE  D7E8               	goto	l3665
  3816  000C00  D000               	goto	l3673
  3817  000C02                     l3673:
  3818                           
  3819                           ; BSR set to: 0
  3820  000C02  C064  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  3821  000C06  C065  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3822  000C0A  C066  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3823  000C0E  C063  F01B         	movff	___ftmul@exp,___ftpack@exp
  3824  000C12  C068  F01C         	movff	___ftmul@sign,___ftpack@sign
  3825  000C16  EC18  F007         	call	___ftpack	;wreg free
  3826  000C1A  C018  F02F         	movff	?___ftpack,?___ftmul
  3827  000C1E  C019  F030         	movff	?___ftpack+1,?___ftmul+1
  3828  000C22  C01A  F031         	movff	?___ftpack+2,?___ftmul+2
  3829  000C26  D000               	goto	l1049
  3830  000C28                     l1049:
  3831  000C28  0012               	return		;funcret
  3832  000C2A                     __end_of___ftmul:
  3833                           	opt stack 0
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           intcon	equ	0xFF2
  3841                           postinc0	equ	0xFEE
  3842                           wreg	equ	0xFE8
  3843                           postdec1	equ	0xFE5
  3844                           fsr1l	equ	0xFE1
  3845                           indf2	equ	0xFDF
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function ___ftpack *****************
  3851 ;; Defined at:
  3852 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  arg             3   23[COMRAM] unsigned um
  3855 ;;  exp             1   26[COMRAM] unsigned char 
  3856 ;;  sign            1   27[COMRAM] unsigned char 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  3   23[COMRAM] float 
  3861 ;; Registers used:
  3862 ;;		wreg, status,2, status,0
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3868 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;Total ram usage:        8 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    4
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		___ftadd
  3879 ;;		___ftdiv
  3880 ;;		___ftmul
  3881 ;;		___lwtoft
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text14
  3886  000E30                     __ptext14:
  3887                           	opt stack 0
  3888  000E30                     ___ftpack:
  3889                           	opt stack 21
  3890                           
  3891                           ;incstack = 0
  3892  000E30  501B               	movf	___ftpack@exp,w,c
  3893  000E32  B4D8               	btfsc	status,2,c
  3894  000E34  D005               	goto	l3477
  3895  000E36  5018               	movf	___ftpack@arg,w,c
  3896  000E38  1019               	iorwf	___ftpack@arg+1,w,c
  3897  000E3A  101A               	iorwf	___ftpack@arg+2,w,c
  3898  000E3C  A4D8               	btfss	status,2,c
  3899  000E3E  D00E               	goto	l3483
  3900  000E40                     l3477:
  3901  000E40  0E00               	movlw	0
  3902  000E42  6E18               	movwf	?___ftpack,c
  3903  000E44  0E00               	movlw	0
  3904  000E46  6E19               	movwf	?___ftpack+1,c
  3905  000E48  0E00               	movlw	0
  3906  000E4A  6E1A               	movwf	?___ftpack+2,c
  3907  000E4C  D053               	goto	l962
  3908  000E4E  D006               	goto	l3483
  3909  000E50                     l3481:
  3910  000E50  2A1B               	incf	___ftpack@exp,f,c
  3911  000E52  90D8               	bcf	status,0,c
  3912  000E54  321A               	rrcf	___ftpack@arg+2,f,c
  3913  000E56  3219               	rrcf	___ftpack@arg+1,f,c
  3914  000E58  3218               	rrcf	___ftpack@arg,f,c
  3915  000E5A  D000               	goto	l3483
  3916  000E5C                     l3483:
  3917  000E5C  0E00               	movlw	0
  3918  000E5E  1418               	andwf	___ftpack@arg,w,c
  3919  000E60  6E1D               	movwf	??___ftpack& (0+255),c
  3920  000E62  0E00               	movlw	0
  3921  000E64  1419               	andwf	___ftpack@arg+1,w,c
  3922  000E66  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  3923  000E68  0EFE               	movlw	254
  3924  000E6A  141A               	andwf	___ftpack@arg+2,w,c
  3925  000E6C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  3926  000E6E  501D               	movf	??___ftpack,w,c
  3927  000E70  101E               	iorwf	??___ftpack+1,w,c
  3928  000E72  101F               	iorwf	??___ftpack+2,w,c
  3929  000E74  B4D8               	btfsc	status,2,c
  3930  000E76  D00E               	goto	l3489
  3931  000E78  D7EB               	goto	l3481
  3932  000E7A  D00C               	goto	l3489
  3933  000E7C                     l3485:
  3934  000E7C  2A1B               	incf	___ftpack@exp,f,c
  3935  000E7E  0E01               	movlw	1
  3936  000E80  2618               	addwf	___ftpack@arg,f,c
  3937  000E82  0E00               	movlw	0
  3938  000E84  2219               	addwfc	___ftpack@arg+1,f,c
  3939  000E86  0E00               	movlw	0
  3940  000E88  221A               	addwfc	___ftpack@arg+2,f,c
  3941  000E8A  90D8               	bcf	status,0,c
  3942  000E8C  321A               	rrcf	___ftpack@arg+2,f,c
  3943  000E8E  3219               	rrcf	___ftpack@arg+1,f,c
  3944  000E90  3218               	rrcf	___ftpack@arg,f,c
  3945  000E92  D000               	goto	l3489
  3946  000E94                     l3489:
  3947  000E94  0E00               	movlw	0
  3948  000E96  1418               	andwf	___ftpack@arg,w,c
  3949  000E98  6E1D               	movwf	??___ftpack& (0+255),c
  3950  000E9A  0E00               	movlw	0
  3951  000E9C  1419               	andwf	___ftpack@arg+1,w,c
  3952  000E9E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  3953  000EA0  0EFF               	movlw	255
  3954  000EA2  141A               	andwf	___ftpack@arg+2,w,c
  3955  000EA4  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  3956  000EA6  501D               	movf	??___ftpack,w,c
  3957  000EA8  101E               	iorwf	??___ftpack+1,w,c
  3958  000EAA  101F               	iorwf	??___ftpack+2,w,c
  3959  000EAC  B4D8               	btfsc	status,2,c
  3960  000EAE  D008               	goto	l3493
  3961  000EB0  D7E5               	goto	l3485
  3962  000EB2  D006               	goto	l3493
  3963  000EB4                     l3491:
  3964  000EB4  061B               	decf	___ftpack@exp,f,c
  3965  000EB6  90D8               	bcf	status,0,c
  3966  000EB8  3618               	rlcf	___ftpack@arg,f,c
  3967  000EBA  3619               	rlcf	___ftpack@arg+1,f,c
  3968  000EBC  361A               	rlcf	___ftpack@arg+2,f,c
  3969  000EBE  D000               	goto	l3493
  3970  000EC0                     l3493:
  3971  000EC0  BE19               	btfsc	___ftpack@arg+1,7,c
  3972  000EC2  D004               	goto	l973
  3973  000EC4  0E02               	movlw	2
  3974  000EC6  601B               	cpfslt	___ftpack@exp,c
  3975  000EC8  D7F5               	goto	l3491
  3976  000ECA  D000               	goto	l973
  3977  000ECC                     l973:
  3978  000ECC  B01B               	btfsc	___ftpack@exp,0,c
  3979  000ECE  D002               	goto	l3499
  3980  000ED0  9E19               	bcf	___ftpack@arg+1,7,c
  3981  000ED2  D000               	goto	l3499
  3982  000ED4                     l3499:
  3983  000ED4  90D8               	bcf	status,0,c
  3984  000ED6  321B               	rrcf	___ftpack@exp,f,c
  3985  000ED8  501B               	movf	___ftpack@exp,w,c
  3986  000EDA  121A               	iorwf	___ftpack@arg+2,f,c
  3987  000EDC  501C               	movf	___ftpack@sign,w,c
  3988  000EDE  B4D8               	btfsc	status,2,c
  3989  000EE0  D002               	goto	l3505
  3990  000EE2  8E1A               	bsf	___ftpack@arg+2,7,c
  3991  000EE4  D000               	goto	l3505
  3992  000EE6                     l3505:
  3993  000EE6  C018  F018         	movff	___ftpack@arg,?___ftpack
  3994  000EEA  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  3995  000EEE  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  3996  000EF2  D000               	goto	l962
  3997  000EF4                     l962:
  3998  000EF4  0012               	return		;funcret
  3999  000EF6                     __end_of___ftpack:
  4000                           	opt stack 0
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           postinc0	equ	0xFEE
  4009                           wreg	equ	0xFE8
  4010                           postdec1	equ	0xFE5
  4011                           fsr1l	equ	0xFE1
  4012                           indf2	equ	0xFDF
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _ImplementPIDMotion *****************
  4018 ;; Defined at:
  4019 ;;		line 40 in file "MotorControl.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  PIDValue        2   40[BANK0 ] int 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;		None               void
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4033 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;Total ram usage:        4 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    5
  4040 ;; This function calls:
  4041 ;;		_abs
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;;		_ZeroMotors
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text15
  4049  001066                     __ptext15:
  4050                           	opt stack 0
  4051  001066                     _ImplementPIDMotion:
  4052                           	opt stack 23
  4053                           
  4054                           ;MotorControl.c: 42: if (PIDValue > 255)
  4055                           
  4056                           ;incstack = 0
  4057  001066  0100               	movlb	0	; () banked
  4058  001068  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4059  00106A  D009               	goto	l3693
  4060  00106C  0100               	movlb	0	; () banked
  4061  00106E  0589               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4062  001070  A0D8               	btfss	status,0,c
  4063  001072  D005               	goto	l3693
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;MotorControl.c: 43: PIDValue = 255;
  4067  001074  0E00               	movlw	0
  4068  001076  0100               	movlb	0	; () banked
  4069  001078  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4070  00107A  6988               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4071  00107C  D010               	goto	l3697
  4072  00107E                     l3693:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;MotorControl.c: 44: else if (PIDValue < -255)
  4076  00107E  0100               	movlb	0	; () banked
  4077  001080  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4078  001082  D00D               	goto	l3697
  4079  001084  0100               	movlb	0	; () banked
  4080  001086  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4081  001088  0EFF               	movlw	255
  4082  00108A  0100               	movlb	0	; () banked
  4083  00108C  5989               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4084  00108E  B0D8               	btfsc	status,0,c
  4085  001090  D006               	goto	l3697
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;MotorControl.c: 45: PIDValue = -255;
  4089  001092  0EFF               	movlw	255
  4090  001094  0100               	movlb	0	; () banked
  4091  001096  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4092  001098  0E01               	movlw	1
  4093  00109A  6F88               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4094                           
  4095                           ; BSR set to: 0
  4096  00109C  D000               	goto	l3697
  4097  00109E                     l3697:
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;MotorControl.c: 47: if (PIDValue < 0)
  4101  00109E  0100               	movlb	0	; () banked
  4102  0010A0  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4103  0010A2  D002               	goto	l3701
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  4107  0010A4  8EB7               	bsf	4023,7,c	;volatile
  4108  0010A6  D00C               	goto	l3705
  4109  0010A8                     l3701:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;MotorControl.c: 49: else if (PIDValue > 0)
  4113  0010A8  0100               	movlb	0	; () banked
  4114  0010AA  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4115  0010AC  D009               	goto	l3705
  4116  0010AE  0100               	movlb	0	; () banked
  4117  0010B0  5189               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4118  0010B2  E104               	bnz	u3230
  4119  0010B4  0100               	movlb	0	; () banked
  4120  0010B6  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4121  0010B8  A0D8               	btfss	status,0,c
  4122  0010BA  D002               	goto	l3705
  4123  0010BC                     u3230:
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  4127  0010BC  9EB7               	bcf	4023,7,c	;volatile
  4128                           
  4129                           ; BSR set to: 0
  4130  0010BE  D000               	goto	l3705
  4131  0010C0                     l3705:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  4135  0010C0  C088  F084         	movff	ImplementPIDMotion@PIDValue,abs@a
  4136  0010C4  C089  F085         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4137  0010C8  EC53  F00C         	call	_abs	;wreg free
  4138  0010CC  C084  F088         	movff	?_abs,ImplementPIDMotion@PIDValue
  4139  0010D0  C085  F089         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4140                           
  4141                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  4142  0010D4  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4143  0010D8  C089  F08B         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4144  0010DC  0100               	movlb	0	; () banked
  4145  0010DE  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4146  0010E0  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4147  0010E2  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4148  0010E4  0100               	movlb	0	; () banked
  4149  0010E6  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4150  0010E8  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4151  0010EA  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4152  0010EC  0100               	movlb	0	; () banked
  4153  0010EE  518A               	movf	??_ImplementPIDMotion& (0+255),w,b
  4154  0010F0  6EB8               	movwf	4024,c	;volatile
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4158  0010F2  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4159  0010F6  0E03               	movlw	3
  4160  0010F8  0100               	movlb	0	; () banked
  4161  0010FA  178A               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4162  0010FC  0100               	movlb	0	; () banked
  4163  0010FE  3B8A               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4164  001100  50B7               	movf	4023,w,c	;volatile
  4165  001102  0100               	movlb	0	; () banked
  4166  001104  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4167  001106  0BCF               	andlw	-49
  4168  001108  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4169  00110A  6EB7               	movwf	4023,c	;volatile
  4170                           
  4171                           ; BSR set to: 0
  4172  00110C  0012               	return		;funcret
  4173  00110E                     __end_of_ImplementPIDMotion:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           wreg	equ	0xFE8
  4184                           postdec1	equ	0xFE5
  4185                           fsr1l	equ	0xFE1
  4186                           indf2	equ	0xFDF
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _SPIInit *****************
  4192 ;; Defined at:
  4193 ;;		line 20 in file "SPISlave.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    5
  4214 ;; This function calls:
  4215 ;;		_OpenSPI1
  4216 ;; This function is called by:
  4217 ;;		_initialize
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text16
  4222  001A12                     __ptext16:
  4223                           	opt stack 0
  4224  001A12                     _SPIInit:
  4225                           	opt stack 24
  4226                           
  4227                           ;SPISlave.c: 22: TRISCbits.RC4 = 1;
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;incstack = 0
  4231  001A12  8894               	bsf	3988,4,c	;volatile
  4232                           
  4233                           ;SPISlave.c: 23: TRISCbits.RC5 = 0;
  4234  001A14  9A94               	bcf	3988,5,c	;volatile
  4235                           
  4236                           ;SPISlave.c: 24: TRISFbits.RF7 = 1;
  4237  001A16  8E97               	bsf	3991,7,c	;volatile
  4238                           
  4239                           ;SPISlave.c: 25: TRISCbits.RC6 = 0;
  4240  001A18  9C94               	bcf	3988,6,c	;volatile
  4241                           
  4242                           ;SPISlave.c: 26: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4243  001A1A  0E00               	movlw	0
  4244  001A1C  6E18               	movwf	OpenSPI1@bus_mode,c
  4245  001A1E  0E00               	movlw	0
  4246  001A20  6E19               	movwf	OpenSPI1@smp_phase,c
  4247  001A22  0E04               	movlw	4
  4248  001A24  ECED  F009         	call	_OpenSPI1
  4249                           
  4250                           ;SPISlave.c: 27: PIE1bits.SSP1IE = 1;
  4251  001A28  869D               	bsf	3997,3,c	;volatile
  4252  001A2A  0012               	return		;funcret
  4253  001A2C                     __end_of_SPIInit:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           intcon	equ	0xFF2
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           fsr2h	equ	0xFDA
  4268                           fsr2l	equ	0xFD9
  4269                           status	equ	0xFD8
  4270                           
  4271 ;; *************** function _OpenSPI1 *****************
  4272 ;; Defined at:
  4273 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  sync_mode       1    wreg     unsigned char 
  4276 ;;  bus_mode        1   23[COMRAM] unsigned char 
  4277 ;;  smp_phase       1   24[COMRAM] unsigned char 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  sync_mode       1   25[COMRAM] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;		None               void
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;Total ram usage:        3 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    4
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_SPIInit
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text17
  4304  0013DA                     __ptext17:
  4305                           	opt stack 0
  4306  0013DA                     _OpenSPI1:
  4307                           	opt stack 24
  4308                           
  4309                           ;incstack = 0
  4310                           ;OpenSPI1@sync_mode stored from wreg
  4311  0013DA  6E1A               	movwf	OpenSPI1@sync_mode,c
  4312  0013DC  0E3F               	movlw	63
  4313  0013DE  16C7               	andwf	4039,f,c	;volatile
  4314  0013E0  0E00               	movlw	0
  4315  0013E2  6EC6               	movwf	4038,c	;volatile
  4316  0013E4  501A               	movf	OpenSPI1@sync_mode,w,c
  4317  0013E6  12C6               	iorwf	4038,f,c	;volatile
  4318  0013E8  5019               	movf	OpenSPI1@smp_phase,w,c
  4319  0013EA  12C7               	iorwf	4039,f,c	;volatile
  4320  0013EC  D005               	goto	l2837
  4321  0013EE                     l616:
  4322  0013EE  8CC7               	bsf	4039,6,c	;volatile
  4323  0013F0  D013               	goto	l2841
  4324  0013F2                     l618:
  4325  0013F2  8CC7               	bsf	4039,6,c	;volatile
  4326  0013F4                     l619:
  4327  0013F4  88C6               	bsf	4038,4,c	;volatile
  4328  0013F6  D010               	goto	l2841
  4329  0013F8                     l2837:
  4330  0013F8  5018               	movf	OpenSPI1@bus_mode,w,c
  4331                           
  4332                           ; Switch size 1, requested type "space"
  4333                           ; Number of cases is 3, Range of values is 0 to 3
  4334                           ; switch strategies available:
  4335                           ; Name         Instructions Cycles
  4336                           ; simple_byte           10     6 (average)
  4337                           ;	Chosen strategy is simple_byte
  4338  0013FA  0A00               	xorlw	0	; case 0
  4339  0013FC  B4D8               	btfsc	status,2,c
  4340  0013FE  D7F7               	goto	l616
  4341  001400  0A02               	xorlw	2	; case 2
  4342  001402  B4D8               	btfsc	status,2,c
  4343  001404  D7F6               	goto	l618
  4344  001406  0A01               	xorlw	1	; case 3
  4345  001408  B4D8               	btfsc	status,2,c
  4346  00140A  D7F4               	goto	l619
  4347  00140C  D005               	goto	l2841
  4348  00140E                     l622:
  4349  00140E  8E97               	bsf	3991,7,c	;volatile
  4350  001410                     l624:
  4351  001410  8694               	bsf	3988,3,c	;volatile
  4352  001412  D00A               	goto	l623
  4353  001414                     l625:
  4354  001414  9694               	bcf	3988,3,c	;volatile
  4355  001416  D008               	goto	l623
  4356  001418                     l2841:
  4357  001418  501A               	movf	OpenSPI1@sync_mode,w,c
  4358                           
  4359                           ; Switch size 1, requested type "space"
  4360                           ; Number of cases is 2, Range of values is 4 to 5
  4361                           ; switch strategies available:
  4362                           ; Name         Instructions Cycles
  4363                           ; simple_byte            7     4 (average)
  4364                           ;	Chosen strategy is simple_byte
  4365  00141A  0A04               	xorlw	4	; case 4
  4366  00141C  B4D8               	btfsc	status,2,c
  4367  00141E  D7F7               	goto	l622
  4368  001420  0A01               	xorlw	1	; case 5
  4369  001422  B4D8               	btfsc	status,2,c
  4370  001424  D7F5               	goto	l624
  4371  001426  D7F6               	goto	l625
  4372  001428                     l623:
  4373  001428  8894               	bsf	3988,4,c	;volatile
  4374  00142A  9A94               	bcf	3988,5,c	;volatile
  4375  00142C  8AC6               	bsf	4038,5,c	;volatile
  4376  00142E  0012               	return		;funcret
  4377  001430                     __end_of_OpenSPI1:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           postdec1	equ	0xFE5
  4389                           fsr1l	equ	0xFE1
  4390                           indf2	equ	0xFDF
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _RTDInit *****************
  4396 ;; Defined at:
  4397 ;;		line 3 in file "ResolverToDigital.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;		None
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;Total ram usage:        0 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    5
  4418 ;; This function calls:
  4419 ;;		_Delay10TCYx
  4420 ;;		_Delay1KTCYx
  4421 ;;		_Delay1TCYx
  4422 ;; This function is called by:
  4423 ;;		_initialize
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text18
  4428  0017EC                     __ptext18:
  4429                           	opt stack 0
  4430  0017EC                     _RTDInit:
  4431                           	opt stack 24
  4432                           
  4433                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4434                           
  4435                           ;incstack = 0
  4436  0017EC  6895               	setf	3989,c	;volatile
  4437                           
  4438                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4439  0017EE  6899               	setf	3993,c	;volatile
  4440                           
  4441                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4442  0017F0  9096               	bcf	3990,0,c	;volatile
  4443                           
  4444                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4445  0017F2  9296               	bcf	3990,1,c	;volatile
  4446                           
  4447                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4448  0017F4  9496               	bcf	3990,2,c	;volatile
  4449                           
  4450                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4451  0017F6  909A               	bcf	3994,0,c	;volatile
  4452                           
  4453                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4454  0017F8  8A96               	bsf	3990,5,c	;volatile
  4455                           
  4456                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4457  0017FA  8C96               	bsf	3990,6,c	;volatile
  4458                           
  4459                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4460  0017FC  8E96               	bsf	3990,7,c	;volatile
  4461                           
  4462                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  4463  0017FE  9088               	bcf	3976,0,c	;volatile
  4464                           
  4465                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  4466  001800  0E0A               	movlw	10
  4467  001802  EC40  F00D         	call	_Delay10TCYx
  4468                           
  4469                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  4470  001806  8088               	bsf	3976,0,c	;volatile
  4471                           
  4472                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  4473  001808  0E14               	movlw	20
  4474  00180A  EC37  F00D         	call	_Delay1KTCYx
  4475                           
  4476                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  4477  00180E  9084               	bcf	3972,0,c	;volatile
  4478                           
  4479                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  4480  001810  0E01               	movlw	1
  4481  001812  EC52  F00D         	call	_Delay1TCYx
  4482                           
  4483                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  4484  001816  8084               	bsf	3972,0,c	;volatile
  4485                           
  4486                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  4487  001818  9484               	bcf	3972,2,c	;volatile
  4488  00181A  0012               	return		;funcret
  4489  00181C                     __end_of_RTDInit:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           intcon	equ	0xFF2
  4498                           postinc0	equ	0xFEE
  4499                           wreg	equ	0xFE8
  4500                           postdec1	equ	0xFE5
  4501                           fsr1l	equ	0xFE1
  4502                           indf2	equ	0xFDF
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _Delay1TCYx *****************
  4508 ;; Defined at:
  4509 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  unit            1    wreg     unsigned char 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  unit            1   23[COMRAM] unsigned char 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;		None               void
  4516 ;; Registers used:
  4517 ;;		wreg
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        1 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    4
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_RTDInit
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text19
  4538  001AA4                     __ptext19:
  4539                           	opt stack 0
  4540  001AA4                     _Delay1TCYx:
  4541                           	opt stack 24
  4542                           
  4543                           ;incstack = 0
  4544                           ;Delay1TCYx@unit stored from wreg
  4545  001AA4  6E18               	movwf	Delay1TCYx@unit,c
  4546  001AA6                     l870:
  4547  001AA6  F000               	nop	
  4548  001AA8  2E18               	decfsz	Delay1TCYx@unit,f,c
  4549  001AAA  D7FD               	goto	l870
  4550  001AAC  D000               	goto	l872
  4551  001AAE                     l872:
  4552  001AAE  0012               	return		;funcret
  4553  001AB0                     __end_of_Delay1TCYx:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           postinc0	equ	0xFEE
  4563                           wreg	equ	0xFE8
  4564                           postdec1	equ	0xFE5
  4565                           fsr1l	equ	0xFE1
  4566                           indf2	equ	0xFDF
  4567                           fsr2h	equ	0xFDA
  4568                           fsr2l	equ	0xFD9
  4569                           status	equ	0xFD8
  4570                           
  4571 ;; *************** function _Delay1KTCYx *****************
  4572 ;; Defined at:
  4573 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  unit            1    wreg     unsigned char 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  unit            1   23[COMRAM] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;		None               void
  4580 ;; Registers used:
  4581 ;;		wreg
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;Total ram usage:        1 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    4
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_RTDInit
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text20
  4602  001A6E                     __ptext20:
  4603                           	opt stack 0
  4604  001A6E                     _Delay1KTCYx:
  4605                           	opt stack 24
  4606                           
  4607                           ;incstack = 0
  4608                           ;Delay1KTCYx@unit stored from wreg
  4609  001A6E  6E18               	movwf	Delay1KTCYx@unit,c
  4610  001A70  0EFA               	movlw	250
  4611  001A72                     u3667:
  4612  001A72  F000               	nop	
  4613  001A74  2EE8               	decfsz	wreg,f,c
  4614  001A76  D7FD               	goto	u3667
  4615  001A78  2E18               	decfsz	Delay1KTCYx@unit,f,c
  4616  001A7A  D7FA               	goto	l2785
  4617  001A7C  D000               	goto	l865
  4618  001A7E                     l865:
  4619  001A7E  0012               	return		;funcret
  4620  001A80                     __end_of_Delay1KTCYx:
  4621                           	opt stack 0
  4622                           tblptru	equ	0xFF8
  4623                           tblptrh	equ	0xFF7
  4624                           tblptrl	equ	0xFF6
  4625                           tablat	equ	0xFF5
  4626                           prodh	equ	0xFF4
  4627                           prodl	equ	0xFF3
  4628                           intcon	equ	0xFF2
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           postdec1	equ	0xFE5
  4632                           fsr1l	equ	0xFE1
  4633                           indf2	equ	0xFDF
  4634                           fsr2h	equ	0xFDA
  4635                           fsr2l	equ	0xFD9
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _Delay10TCYx *****************
  4639 ;; Defined at:
  4640 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  unit            1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  unit            1   23[COMRAM] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;		None               void
  4647 ;; Registers used:
  4648 ;;		wreg
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        1 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    4
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_RTDInit
  4665 ;;		_ReadRTDpos
  4666 ;;		_main
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text21
  4671  001A80                     __ptext21:
  4672                           	opt stack 0
  4673  001A80                     _Delay10TCYx:
  4674                           	opt stack 23
  4675                           
  4676                           ;incstack = 0
  4677                           ;Delay10TCYx@unit stored from wreg
  4678  001A80  6E18               	movwf	Delay10TCYx@unit,c
  4679  001A82  0E03               	movlw	3
  4680  001A84                     u3677:
  4681  001A84  2EE8               	decfsz	wreg,f,c
  4682  001A86  D7FE               	goto	u3677
  4683  001A88  F000               	nop	
  4684  001A8A  2E18               	decfsz	Delay10TCYx@unit,f,c
  4685  001A8C  D7FA               	goto	l2529
  4686  001A8E  D000               	goto	l858
  4687  001A90                     l858:
  4688  001A90  0012               	return		;funcret
  4689  001A92                     __end_of_Delay10TCYx:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           postdec1	equ	0xFE5
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           fsr2h	equ	0xFDA
  4704                           fsr2l	equ	0xFD9
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function _PIDInit *****************
  4708 ;; Defined at:
  4709 ;;		line 18 in file "PID.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, status,2
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;Total ram usage:        0 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_initialize
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text22
  4738  00157E                     __ptext22:
  4739                           	opt stack 0
  4740  00157E                     _PIDInit:
  4741                           	opt stack 25
  4742                           
  4743                           ;PID.c: 20: error = 0;
  4744                           
  4745                           ;incstack = 0
  4746  00157E  0E00               	movlw	0
  4747  001580  0100               	movlb	0	; () banked
  4748  001582  6FA5               	movwf	_error& (0+255),b
  4749  001584  0E00               	movlw	0
  4750  001586  0100               	movlb	0	; () banked
  4751  001588  6FA6               	movwf	(_error+1)& (0+255),b
  4752  00158A  0E00               	movlw	0
  4753  00158C  0100               	movlb	0	; () banked
  4754  00158E  6FA7               	movwf	(_error+2)& (0+255),b
  4755                           
  4756                           ;PID.c: 21: prevErr = 0;
  4757  001590  0E00               	movlw	0
  4758  001592  0100               	movlb	0	; () banked
  4759  001594  6FAB               	movwf	_prevErr& (0+255),b
  4760  001596  0E00               	movlw	0
  4761  001598  0100               	movlb	0	; () banked
  4762  00159A  6FAC               	movwf	(_prevErr+1)& (0+255),b
  4763  00159C  0E00               	movlw	0
  4764  00159E  0100               	movlb	0	; () banked
  4765  0015A0  6FAD               	movwf	(_prevErr+2)& (0+255),b
  4766                           
  4767                           ;PID.c: 22: intErr = 0;
  4768  0015A2  0E00               	movlw	0
  4769  0015A4  0100               	movlb	0	; () banked
  4770  0015A6  6FA8               	movwf	_intErr& (0+255),b
  4771  0015A8  0E00               	movlw	0
  4772  0015AA  0100               	movlb	0	; () banked
  4773  0015AC  6FA9               	movwf	(_intErr+1)& (0+255),b
  4774  0015AE  0E00               	movlw	0
  4775  0015B0  0100               	movlb	0	; () banked
  4776  0015B2  6FAA               	movwf	(_intErr+2)& (0+255),b
  4777                           
  4778                           ;PID.c: 24: T0CON = 0x04;
  4779  0015B4  0E04               	movlw	4
  4780  0015B6  6ED5               	movwf	4053,c	;volatile
  4781                           
  4782                           ;PID.c: 25: TMR0H = 0xDB;
  4783  0015B8  0EDB               	movlw	219
  4784  0015BA  6ED7               	movwf	4055,c	;volatile
  4785                           
  4786                           ;PID.c: 26: TMR0L = 0x60;
  4787  0015BC  0E60               	movlw	96
  4788  0015BE  6ED6               	movwf	4054,c	;volatile
  4789                           
  4790                           ; BSR set to: 0
  4791  0015C0  0012               	return		;funcret
  4792  0015C2                     __end_of_PIDInit:
  4793                           	opt stack 0
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _MotorDriverInit *****************
  4811 ;; Defined at:
  4812 ;;		line 7 in file "MotorControl.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;		None               void
  4819 ;; Registers used:
  4820 ;;		wreg, status,2
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;Total ram usage:        0 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    4
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_initialize
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text23
  4841  001944                     __ptext23:
  4842                           	opt stack 0
  4843  001944                     _MotorDriverInit:
  4844                           	opt stack 25
  4845                           
  4846                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;incstack = 0
  4850  001944  9098               	bcf	3992,0,c	;volatile
  4851                           
  4852                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  4853  001946  9896               	bcf	3990,4,c	;volatile
  4854                           
  4855                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  4856  001948  9696               	bcf	3990,3,c	;volatile
  4857                           
  4858                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  4859  00194A  9698               	bcf	3992,3,c	;volatile
  4860                           
  4861                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  4862  00194C  8093               	bsf	3987,0,c	;volatile
  4863                           
  4864                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  4865  00194E  9892               	bcf	3986,4,c	;volatile
  4866                           
  4867                           ;MotorControl.c: 18: CCPR3L = 0x00;
  4868  001950  0E00               	movlw	0
  4869  001952  6EB8               	movwf	4024,c	;volatile
  4870                           
  4871                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  4872  001954  98B7               	bcf	4023,4,c	;volatile
  4873                           
  4874                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  4875  001956  9AB7               	bcf	4023,5,c	;volatile
  4876                           
  4877                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  4878  001958  0E4C               	movlw	76
  4879  00195A  6EB7               	movwf	4023,c	;volatile
  4880                           
  4881                           ;MotorControl.c: 22: PR2 = 0xFF;
  4882  00195C  68CB               	setf	4043,c	;volatile
  4883                           
  4884                           ;MotorControl.c: 23: T3CON = 0x00;
  4885  00195E  0E00               	movlw	0
  4886  001960  6EB1               	movwf	4017,c	;volatile
  4887                           
  4888                           ;MotorControl.c: 24: T2CON = 0x04;
  4889  001962  0E04               	movlw	4
  4890  001964  6ECA               	movwf	4042,c	;volatile
  4891  001966  0012               	return		;funcret
  4892  001968                     __end_of_MotorDriverInit:
  4893                           	opt stack 0
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           intcon	equ	0xFF2
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _JoystickInit *****************
  4911 ;; Defined at:
  4912 ;;		line 6 in file "Joystick.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;		None               void
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;Total ram usage:        0 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    4
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_initialize
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text24
  4941  00184C                     __ptext24:
  4942                           	opt stack 0
  4943  00184C                     _JoystickInit:
  4944                           	opt stack 25
  4945                           
  4946                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  4947                           
  4948                           ;incstack = 0
  4949  00184C  9492               	bcf	3986,2,c	;volatile
  4950                           
  4951                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  4952  00184E  8293               	bsf	3987,1,c	;volatile
  4953                           
  4954                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  4955  001850  A281               	btfss	3969,1,c	;volatile
  4956  001852  D003               	goto	l31
  4957                           
  4958                           ;Joystick.c: 11: {
  4959                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  4960  001854  8480               	bsf	3968,2,c	;volatile
  4961                           
  4962                           ;Joystick.c: 13: JSEnableFlag = 1;
  4963  001856  0E01               	movlw	1
  4964  001858  D004               	goto	L1
  4965  00185A                     l31:
  4966                           
  4967                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  4968  00185A  B281               	btfsc	3969,1,c	;volatile
  4969  00185C  D005               	goto	l2931
  4970                           
  4971                           ;Joystick.c: 16: {
  4972                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  4973  00185E  9480               	bcf	3968,2,c	;volatile
  4974                           
  4975                           ;Joystick.c: 18: JSEnableFlag = 0;
  4976  001860  0E00               	movlw	0
  4977  001862                     L1:
  4978  001862  0100               	movlb	0	; () banked
  4979  001864  6FB0               	movwf	_JSEnableFlag& (0+255),b
  4980                           
  4981                           ; BSR set to: 0
  4982  001866  D000               	goto	l2931
  4983  001868                     l2931:
  4984                           
  4985                           ;Joystick.c: 19: }
  4986                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  4987  001868  80C2               	bsf	4034,0,c	;volatile
  4988                           
  4989                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  4990  00186A  50C2               	movf	4034,w,c	;volatile
  4991  00186C  0B01               	andlw	1
  4992  00186E  6EC2               	movwf	4034,c	;volatile
  4993                           
  4994                           ;Joystick.c: 23: ADCON1 = 0x0D;
  4995  001870  0E0D               	movlw	13
  4996  001872  6EC1               	movwf	4033,c	;volatile
  4997                           
  4998                           ;Joystick.c: 24: ADCON2 = 0xB4;
  4999  001874  0EB4               	movlw	180
  5000  001876  6EC0               	movwf	4032,c	;volatile
  5001  001878  0012               	return		;funcret
  5002  00187A                     __end_of_JoystickInit:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           postdec1	equ	0xFE5
  5014                           fsr1l	equ	0xFE1
  5015                           indf2	equ	0xFDF
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _InitializeInterrupts *****************
  5021 ;; Defined at:
  5022 ;;		line 234 in file "RTDuC.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;		None
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;		None
  5027 ;; Return value:  Size  Location     Type
  5028 ;;		None               void
  5029 ;; Registers used:
  5030 ;;		None
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;Total ram usage:        0 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:    4
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_initialize
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text25
  5051  001AB0                     __ptext25:
  5052                           	opt stack 0
  5053  001AB0                     _InitializeInterrupts:
  5054                           	opt stack 25
  5055                           
  5056                           ;RTDuC.c: 236: INTCONbits.GIE = 1;
  5057                           
  5058                           ;incstack = 0
  5059  001AB0  8EF2               	bsf	intcon,7,c	;volatile
  5060                           
  5061                           ;RTDuC.c: 237: INTCONbits.PEIE = 1;
  5062  001AB2  8CF2               	bsf	intcon,6,c	;volatile
  5063                           
  5064                           ;RTDuC.c: 239: INTCONbits.TMR0IE = 1;
  5065  001AB4  8AF2               	bsf	intcon,5,c	;volatile
  5066                           
  5067                           ;RTDuC.c: 240: T0CONbits.TMR0ON = 1;
  5068  001AB6  8ED5               	bsf	4053,7,c	;volatile
  5069                           
  5070                           ;RTDuC.c: 242: PIE2bits.OSCFIE = 1;
  5071  001AB8  8EA0               	bsf	4000,7,c	;volatile
  5072  001ABA  0012               	return		;funcret
  5073  001ABC                     __end_of_InitializeInterrupts:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           postinc0	equ	0xFEE
  5083                           wreg	equ	0xFE8
  5084                           postdec1	equ	0xFE5
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _EEPROMInit *****************
  5092 ;; Defined at:
  5093 ;;		line 13 in file "EEPROM.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;		None               void
  5100 ;; Registers used:
  5101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        0 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    7
  5114 ;; This function calls:
  5115 ;;		_EEBootUp
  5116 ;; This function is called by:
  5117 ;;		_initialize
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text26
  5122  001A46                     __ptext26:
  5123                           	opt stack 0
  5124  001A46                     _EEPROMInit:
  5125                           	opt stack 22
  5126                           
  5127                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5128                           
  5129                           ;incstack = 0
  5130  001A46  9EA6               	bcf	4006,7,c	;volatile
  5131                           
  5132                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5133  001A48  9CA6               	bcf	4006,6,c	;volatile
  5134                           
  5135                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5136  001A4A  84A6               	bsf	4006,2,c	;volatile
  5137                           
  5138                           ;EEPROM.c: 19: EEBootUp();
  5139  001A4C  EC22  F009         	call	_EEBootUp	;wreg free
  5140                           
  5141                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5142  001A50  0E3D               	movlw	61
  5143  001A52  6ED2               	movwf	4050,c	;volatile
  5144                           
  5145                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5146  001A54  84A0               	bsf	4000,2,c	;volatile
  5147                           
  5148                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5149  001A56  84A2               	bsf	4002,2,c	;volatile
  5150  001A58  0012               	return		;funcret
  5151  001A5A                     __end_of_EEPROMInit:
  5152                           	opt stack 0
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           prodh	equ	0xFF4
  5158                           prodl	equ	0xFF3
  5159                           intcon	equ	0xFF2
  5160                           postinc0	equ	0xFEE
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _EEBootUp *****************
  5170 ;; Defined at:
  5171 ;;		line 27 in file "EEPROM.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;		None               void
  5178 ;; Registers used:
  5179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;Total ram usage:        0 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    6
  5192 ;; This function calls:
  5193 ;;		_EEReadChar
  5194 ;;		_EEReadDouble
  5195 ;; This function is called by:
  5196 ;;		_EEPROMInit
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text27
  5201  001244                     __ptext27:
  5202                           	opt stack 0
  5203  001244                     _EEBootUp:
  5204                           	opt stack 22
  5205                           
  5206                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  5207                           
  5208                           ;incstack = 0
  5209  001244  0E16               	movlw	22
  5210  001246  ECF9  F00C         	call	_EEReadChar
  5211  00124A  0900               	iorlw	0
  5212  00124C  B4D8               	btfsc	status,2,c
  5213  00124E  D031               	goto	l353
  5214                           
  5215                           ;EEPROM.c: 30: {
  5216                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  5217  001250  0E00               	movlw	0
  5218  001252  EC18  F00A         	call	_EEReadDouble
  5219  001256  C01E  F03C         	movff	?_EEReadDouble,_SetAngle
  5220  00125A  C01F  F03D         	movff	?_EEReadDouble+1,_SetAngle+1
  5221  00125E  C020  F03E         	movff	?_EEReadDouble+2,_SetAngle+2
  5222                           
  5223                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  5224  001262  0E03               	movlw	3
  5225  001264  EC18  F00A         	call	_EEReadDouble
  5226  001268  C01E  F0A2         	movff	?_EEReadDouble,_Kp
  5227  00126C  C01F  F0A3         	movff	?_EEReadDouble+1,_Kp+1
  5228  001270  C020  F0A4         	movff	?_EEReadDouble+2,_Kp+2
  5229                           
  5230                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  5231  001274  0E06               	movlw	6
  5232  001276  EC18  F00A         	call	_EEReadDouble
  5233  00127A  C01E  F09F         	movff	?_EEReadDouble,_Ki
  5234  00127E  C01F  F0A0         	movff	?_EEReadDouble+1,_Ki+1
  5235  001282  C020  F0A1         	movff	?_EEReadDouble+2,_Ki+2
  5236                           
  5237                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  5238  001286  0E09               	movlw	9
  5239  001288  EC18  F00A         	call	_EEReadDouble
  5240  00128C  C01E  F09C         	movff	?_EEReadDouble,_Kd
  5241  001290  C01F  F09D         	movff	?_EEReadDouble+1,_Kd+1
  5242  001294  C020  F09E         	movff	?_EEReadDouble+2,_Kd+2
  5243                           
  5244                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  5245  001298  0E15               	movlw	21
  5246  00129A  ECF9  F00C         	call	_EEReadChar
  5247  00129E  0100               	movlb	0	; () banked
  5248  0012A0  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;EEPROM.c: 36: if(PIDEnableFlag == 1)
  5252  0012A2  0100               	movlb	0	; () banked
  5253  0012A4  05B1               	decf	_PIDEnableFlag& (0+255),w,b
  5254  0012A6  A4D8               	btfss	status,2,c
  5255  0012A8  D004               	goto	l353
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;EEPROM.c: 37: {
  5259                           ;EEPROM.c: 38: PIDEnableFlag = 3;
  5260  0012AA  0E03               	movlw	3
  5261  0012AC  0100               	movlb	0	; () banked
  5262  0012AE  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  5263                           
  5264                           ; BSR set to: 0
  5265  0012B0  D000               	goto	l353
  5266  0012B2                     l353:
  5267  0012B2  0012               	return		;funcret
  5268  0012B4                     __end_of_EEBootUp:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _EEReadDouble *****************
  5287 ;; Defined at:
  5288 ;;		line 100 in file "EEPROM.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  location        1    wreg     unsigned char 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  location        1   32[COMRAM] unsigned char 
  5293 ;;  x               1   33[COMRAM] unsigned char 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  3   29[COMRAM] unsigned char 
  5296 ;; Registers used:
  5297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5303 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;Total ram usage:        5 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    5
  5310 ;; This function calls:
  5311 ;;		_Busy_eep
  5312 ;;		_EEReassembleDouble
  5313 ;;		_Read_b_eep
  5314 ;; This function is called by:
  5315 ;;		_EEBootUp
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text28
  5320  001430                     __ptext28:
  5321                           	opt stack 0
  5322  001430                     _EEReadDouble:
  5323                           	opt stack 22
  5324                           
  5325                           ;incstack = 0
  5326                           ;EEReadDouble@location stored from wreg
  5327  001430  6E21               	movwf	EEReadDouble@location,c
  5328                           
  5329                           ;EEPROM.c: 102: unsigned char x;
  5330                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  5331  001432  50F2               	movf	intcon,w,c	;volatile
  5332  001434  0B3F               	andlw	63
  5333  001436  6EF2               	movwf	intcon,c	;volatile
  5334                           
  5335                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  5336  001438  0E00               	movlw	0
  5337  00143A  6E22               	movwf	EEReadDouble@x,c
  5338  00143C                     l2547:
  5339  00143C  0E02               	movlw	2
  5340  00143E  6422               	cpfsgt	EEReadDouble@x,c
  5341  001440  D001               	goto	l2551
  5342  001442  D014               	goto	l2559
  5343  001444                     l2551:
  5344                           
  5345                           ;EEPROM.c: 107: {
  5346                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  5347  001444  5022               	movf	EEReadDouble@x,w,c
  5348  001446  0D01               	mullw	1
  5349  001448  0E39               	movlw	low _DDouble
  5350  00144A  24F3               	addwf	prodl,w,c
  5351  00144C  6ED9               	movwf	fsr2l,c
  5352  00144E  0E00               	movlw	high _DDouble
  5353  001450  20F4               	addwfc	prodh,w,c
  5354  001452  6EDA               	movwf	fsr2h,c
  5355  001454  5021               	movf	EEReadDouble@location,w,c
  5356  001456  2422               	addwf	EEReadDouble@x,w,c
  5357  001458  6E18               	movwf	Read_b_eep@badd,c
  5358  00145A  6A19               	clrf	Read_b_eep@badd+1,c
  5359  00145C  3619               	rlcf	Read_b_eep@badd+1,f,c
  5360  00145E  EC16  F00D         	call	_Read_b_eep	;wreg free
  5361  001462  6EDF               	movwf	indf2,c
  5362                           
  5363                           ;EEPROM.c: 109: Busy_eep();
  5364  001464  EC63  F00D         	call	_Busy_eep	;wreg free
  5365  001468  2A22               	incf	EEReadDouble@x,f,c
  5366  00146A  D7E8               	goto	l2547
  5367  00146C                     l2559:
  5368                           
  5369                           ;EEPROM.c: 110: }
  5370                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  5371  00146C  50F2               	movf	intcon,w,c	;volatile
  5372  00146E  09C0               	iorlw	192
  5373  001470  6EF2               	movwf	intcon,c	;volatile
  5374                           
  5375                           ;EEPROM.c: 114: return EEReassembleDouble();
  5376  001472  ECE1  F00A         	call	_EEReassembleDouble	;wreg free
  5377  001476  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5378  00147A  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5379  00147E  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5380  001482  D000               	goto	l369
  5381  001484                     l369:
  5382  001484  0012               	return		;funcret
  5383  001486                     __end_of_EEReadDouble:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           postdec1	equ	0xFE5
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _EEReassembleDouble *****************
  5402 ;; Defined at:
  5403 ;;		line 62 in file "EEPROM.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;		None
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;  dub             3   26[COMRAM] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  3   23[COMRAM] unsigned char 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5417 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;Total ram usage:        6 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    4
  5424 ;; This function calls:
  5425 ;;		Nothing
  5426 ;; This function is called by:
  5427 ;;		_EEReadDouble
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text29
  5432  0015C2                     __ptext29:
  5433                           	opt stack 0
  5434  0015C2                     _EEReassembleDouble:
  5435                           	opt stack 22
  5436                           
  5437                           ;EEPROM.c: 64: double dub;
  5438                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  5439                           
  5440                           ;incstack = 0
  5441  0015C2  0E1B               	movlw	low EEReassembleDouble@dub
  5442  0015C4  6E3F               	movwf	_DoublePtr,c
  5443  0015C6  0E00               	movlw	high EEReassembleDouble@dub
  5444  0015C8  6E40               	movwf	_DoublePtr+1,c
  5445                           
  5446                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  5447  0015CA  C03F  FFD9         	movff	_DoublePtr,fsr2l
  5448  0015CE  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  5449  0015D2  C039  FFDF         	movff	_DDouble,indf2
  5450                           
  5451                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  5452  0015D6  EE20 F001          	lfsr	2,1
  5453  0015DA  503F               	movf	_DoublePtr,w,c
  5454  0015DC  26D9               	addwf	fsr2l,f,c
  5455  0015DE  5040               	movf	_DoublePtr+1,w,c
  5456  0015E0  22DA               	addwfc	fsr2h,f,c
  5457  0015E2  C03A  FFDF         	movff	_DDouble+1,indf2
  5458                           
  5459                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  5460  0015E6  EE20 F002          	lfsr	2,2
  5461  0015EA  503F               	movf	_DoublePtr,w,c
  5462  0015EC  26D9               	addwf	fsr2l,f,c
  5463  0015EE  5040               	movf	_DoublePtr+1,w,c
  5464  0015F0  22DA               	addwfc	fsr2h,f,c
  5465  0015F2  C03B  FFDF         	movff	_DDouble+2,indf2
  5466                           
  5467                           ;EEPROM.c: 69: return dub;
  5468  0015F6  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5469  0015FA  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5470  0015FE  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5471  001602  D000               	goto	l359
  5472  001604                     l359:
  5473  001604  0012               	return		;funcret
  5474  001606                     __end_of_EEReassembleDouble:
  5475                           	opt stack 0
  5476                           tblptru	equ	0xFF8
  5477                           tblptrh	equ	0xFF7
  5478                           tblptrl	equ	0xFF6
  5479                           tablat	equ	0xFF5
  5480                           prodh	equ	0xFF4
  5481                           prodl	equ	0xFF3
  5482                           intcon	equ	0xFF2
  5483                           postinc0	equ	0xFEE
  5484                           wreg	equ	0xFE8
  5485                           postdec1	equ	0xFE5
  5486                           fsr1l	equ	0xFE1
  5487                           indf2	equ	0xFDF
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function _EEReadChar *****************
  5493 ;; Defined at:
  5494 ;;		line 136 in file "EEPROM.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  location        1    wreg     unsigned char 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  location        1   25[COMRAM] unsigned char 
  5499 ;;  ch              1   26[COMRAM] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      unsigned char 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;Total ram usage:        2 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    5
  5516 ;; This function calls:
  5517 ;;		_Read_b_eep
  5518 ;; This function is called by:
  5519 ;;		_EEBootUp
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text30
  5524  0019F2                     __ptext30:
  5525                           	opt stack 0
  5526  0019F2                     _EEReadChar:
  5527                           	opt stack 22
  5528                           
  5529                           ;incstack = 0
  5530                           ;EEReadChar@location stored from wreg
  5531  0019F2  6E1A               	movwf	EEReadChar@location,c
  5532                           
  5533                           ;EEPROM.c: 138: unsigned char ch;
  5534                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  5535  0019F4  50F2               	movf	intcon,w,c	;volatile
  5536  0019F6  0B3F               	andlw	63
  5537  0019F8  6EF2               	movwf	intcon,c	;volatile
  5538                           
  5539                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  5540  0019FA  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  5541  0019FE  6A19               	clrf	Read_b_eep@badd+1,c
  5542  001A00  EC16  F00D         	call	_Read_b_eep	;wreg free
  5543  001A04  6E1B               	movwf	EEReadChar@ch,c
  5544                           
  5545                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  5546  001A06  50F2               	movf	intcon,w,c	;volatile
  5547  001A08  09C0               	iorlw	192
  5548  001A0A  6EF2               	movwf	intcon,c	;volatile
  5549                           
  5550                           ;EEPROM.c: 146: return ch;
  5551  001A0C  501B               	movf	EEReadChar@ch,w,c
  5552  001A0E  D000               	goto	l375
  5553  001A10                     l375:
  5554  001A10  0012               	return		;funcret
  5555  001A12                     __end_of_EEReadChar:
  5556                           	opt stack 0
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           intcon	equ	0xFF2
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           postdec1	equ	0xFE5
  5567                           fsr1l	equ	0xFE1
  5568                           indf2	equ	0xFDF
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _Read_b_eep *****************
  5574 ;; Defined at:
  5575 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  badd            2   23[COMRAM] unsigned int 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      unsigned char 
  5582 ;; Registers used:
  5583 ;;		wreg, status,2, status,0
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;Total ram usage:        2 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    4
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_EEReadDouble
  5600 ;;		_EEReadChar
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text31
  5605  001A2C                     __ptext31:
  5606                           	opt stack 0
  5607  001A2C                     _Read_b_eep:
  5608                           	opt stack 22
  5609                           
  5610                           ;incstack = 0
  5611  001A2C  5019               	movf	Read_b_eep@badd+1,w,c
  5612  001A2E  0B03               	andlw	3
  5613  001A30  6EAA               	movwf	4010,c	;volatile
  5614  001A32  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  5615  001A36  9CA6               	bcf	4006,6,c	;volatile
  5616  001A38  9EA6               	bcf	4006,7,c	;volatile
  5617  001A3A  80A6               	bsf	4006,0,c	;volatile
  5618  001A3C  F000               	nop	
  5619  001A3E  F000               	nop	
  5620  001A40  50A8               	movf	4008,w,c	;volatile
  5621  001A42  D000               	goto	l582
  5622  001A44                     l582:
  5623  001A44  0012               	return		;funcret
  5624  001A46                     __end_of_Read_b_eep:
  5625                           	opt stack 0
  5626                           tblptru	equ	0xFF8
  5627                           tblptrh	equ	0xFF7
  5628                           tblptrl	equ	0xFF6
  5629                           tablat	equ	0xFF5
  5630                           prodh	equ	0xFF4
  5631                           prodl	equ	0xFF3
  5632                           intcon	equ	0xFF2
  5633                           postinc0	equ	0xFEE
  5634                           wreg	equ	0xFE8
  5635                           postdec1	equ	0xFE5
  5636                           fsr1l	equ	0xFE1
  5637                           indf2	equ	0xFDF
  5638                           fsr2h	equ	0xFDA
  5639                           fsr2l	equ	0xFD9
  5640                           status	equ	0xFD8
  5641                           
  5642 ;; *************** function _SendSPI1 *****************
  5643 ;; Defined at:
  5644 ;;		line 40 in file "SPISlave.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  data            1    wreg     unsigned char 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  data            1   24[COMRAM] unsigned char 
  5649 ;;  temp            1   23[COMRAM] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;		None               void
  5652 ;; Registers used:
  5653 ;;		wreg
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;Total ram usage:        2 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    4
  5666 ;; This function calls:
  5667 ;;		Nothing
  5668 ;; This function is called by:
  5669 ;;		_main
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text32
  5674  00181C                     __ptext32:
  5675                           	opt stack 0
  5676  00181C                     _SendSPI1:
  5677                           	opt stack 26
  5678                           
  5679                           ;incstack = 0
  5680                           ;SendSPI1@data stored from wreg
  5681  00181C  6E19               	movwf	SendSPI1@data,c
  5682                           
  5683                           ;SPISlave.c: 42: SSP1BUF = data;
  5684  00181E  C019  FFC9         	movff	SendSPI1@data,4041	;volatile
  5685                           
  5686                           ;SPISlave.c: 43: unsigned char temp;
  5687                           ;SPISlave.c: 44: PIR1bits.SSP1IF = 0;
  5688  001822  969E               	bcf	3998,3,c	;volatile
  5689                           
  5690                           ;SPISlave.c: 45: temp = SSP1BUF;
  5691  001824  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  5692                           
  5693                           ;SPISlave.c: 46: PIR1bits.TMR1IF = 0;
  5694  001828  909E               	bcf	3998,0,c	;volatile
  5695                           
  5696                           ;SPISlave.c: 47: T1CONbits.TMR1ON = 1;
  5697  00182A  80CD               	bsf	4045,0,c	;volatile
  5698                           
  5699                           ;SPISlave.c: 48: TMR1H = timer1High;
  5700  00182C  C047  FFCF         	movff	_timer1High,4047	;volatile
  5701                           
  5702                           ;SPISlave.c: 49: TMR1L = timer1Low;
  5703  001830  C042  FFCE         	movff	_timer1Low,4046	;volatile
  5704                           
  5705                           ;SPISlave.c: 50: while (!PIR1bits.SSP1IF)
  5706  001834  D006               	goto	l263
  5707  001836                     l264:
  5708                           
  5709                           ;SPISlave.c: 51: {
  5710                           ;SPISlave.c: 52: if (PIR1bits.TMR1IF == 1)
  5711  001836  A09E               	btfss	3998,0,c	;volatile
  5712  001838  D004               	goto	l263
  5713                           
  5714                           ;SPISlave.c: 53: {
  5715                           ;SPISlave.c: 54: PIR1bits.SSPIF = 1;
  5716  00183A  869E               	bsf	3998,3,c	;volatile
  5717                           
  5718                           ;SPISlave.c: 55: temp = SSP1BUF;
  5719  00183C  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  5720  001840  D000               	goto	l263
  5721  001842                     l263:
  5722  001842  A69E               	btfss	3998,3,c	;volatile
  5723  001844  D7F8               	goto	l264
  5724                           
  5725                           ;SPISlave.c: 56: }
  5726                           ;SPISlave.c: 57: }
  5727                           ;SPISlave.c: 58: SSP1CON1bits.SSPOV1 = 0;
  5728  001846  9CC6               	bcf	4038,6,c	;volatile
  5729                           
  5730                           ;SPISlave.c: 59: PIR1bits.SSP1IF = 0;
  5731  001848  969E               	bcf	3998,3,c	;volatile
  5732  00184A  0012               	return		;funcret
  5733  00184C                     __end_of_SendSPI1:
  5734                           	opt stack 0
  5735                           tblptru	equ	0xFF8
  5736                           tblptrh	equ	0xFF7
  5737                           tblptrl	equ	0xFF6
  5738                           tablat	equ	0xFF5
  5739                           prodh	equ	0xFF4
  5740                           prodl	equ	0xFF3
  5741                           intcon	equ	0xFF2
  5742                           postinc0	equ	0xFEE
  5743                           wreg	equ	0xFE8
  5744                           postdec1	equ	0xFE5
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751 ;; *************** function _SaveAll *****************
  5752 ;; Defined at:
  5753 ;;		line 150 in file "EEPROM.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;		None
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;		None
  5758 ;; Return value:  Size  Location     Type
  5759 ;;		None               void
  5760 ;; Registers used:
  5761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;Total ram usage:        0 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    6
  5774 ;; This function calls:
  5775 ;;		_EEWriteChar
  5776 ;;		_EEWriteDouble
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text33
  5783  000EF6                     __ptext33:
  5784                           	opt stack 0
  5785  000EF6                     _SaveAll:
  5786                           	opt stack 24
  5787                           
  5788                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  5789                           
  5790                           ;incstack = 0
  5791  000EF6  C03C  F01C         	movff	_SetAngle,EEWriteDouble@dub
  5792  000EFA  C03D  F01D         	movff	_SetAngle+1,EEWriteDouble@dub+1
  5793  000EFE  C03E  F01E         	movff	_SetAngle+2,EEWriteDouble@dub+2
  5794  000F02  0E00               	movlw	0
  5795  000F04  EC43  F00A         	call	_EEWriteDouble
  5796                           
  5797                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  5798  000F08  C0A2  F01C         	movff	_Kp,EEWriteDouble@dub
  5799  000F0C  C0A3  F01D         	movff	_Kp+1,EEWriteDouble@dub+1
  5800  000F10  C0A4  F01E         	movff	_Kp+2,EEWriteDouble@dub+2
  5801  000F14  0E03               	movlw	3
  5802  000F16  EC43  F00A         	call	_EEWriteDouble
  5803                           
  5804                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  5805  000F1A  C09F  F01C         	movff	_Ki,EEWriteDouble@dub
  5806  000F1E  C0A0  F01D         	movff	_Ki+1,EEWriteDouble@dub+1
  5807  000F22  C0A1  F01E         	movff	_Ki+2,EEWriteDouble@dub+2
  5808  000F26  0E06               	movlw	6
  5809  000F28  EC43  F00A         	call	_EEWriteDouble
  5810                           
  5811                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  5812  000F2C  C09C  F01C         	movff	_Kd,EEWriteDouble@dub
  5813  000F30  C09D  F01D         	movff	_Kd+1,EEWriteDouble@dub+1
  5814  000F34  C09E  F01E         	movff	_Kd+2,EEWriteDouble@dub+2
  5815  000F38  0E09               	movlw	9
  5816  000F3A  EC43  F00A         	call	_EEWriteDouble
  5817                           
  5818                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  5819  000F3E  CF80 F01C          	movff	3968,EEWriteChar@ch	;volatile
  5820  000F42  0E0C               	movlw	12
  5821  000F44  ECC6  F00C         	call	_EEWriteChar
  5822                           
  5823                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  5824  000F48  CF81 F01C          	movff	3969,EEWriteChar@ch	;volatile
  5825  000F4C  0E0D               	movlw	13
  5826  000F4E  ECC6  F00C         	call	_EEWriteChar
  5827                           
  5828                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  5829  000F52  CF82 F01C          	movff	3970,EEWriteChar@ch	;volatile
  5830  000F56  0E0E               	movlw	14
  5831  000F58  ECC6  F00C         	call	_EEWriteChar
  5832                           
  5833                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  5834  000F5C  CF83 F01C          	movff	3971,EEWriteChar@ch	;volatile
  5835  000F60  0E0F               	movlw	15
  5836  000F62  ECC6  F00C         	call	_EEWriteChar
  5837                           
  5838                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  5839  000F66  CF84 F01C          	movff	3972,EEWriteChar@ch	;volatile
  5840  000F6A  0E10               	movlw	16
  5841  000F6C  ECC6  F00C         	call	_EEWriteChar
  5842                           
  5843                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  5844  000F70  CF85 F01C          	movff	3973,EEWriteChar@ch	;volatile
  5845  000F74  0E11               	movlw	17
  5846  000F76  ECC6  F00C         	call	_EEWriteChar
  5847                           
  5848                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  5849  000F7A  CF86 F01C          	movff	3974,EEWriteChar@ch	;volatile
  5850  000F7E  0E12               	movlw	18
  5851  000F80  ECC6  F00C         	call	_EEWriteChar
  5852                           
  5853                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  5854  000F84  CF87 F01C          	movff	3975,EEWriteChar@ch	;volatile
  5855  000F88  0E13               	movlw	19
  5856  000F8A  ECC6  F00C         	call	_EEWriteChar
  5857                           
  5858                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  5859  000F8E  CF88 F01C          	movff	3976,EEWriteChar@ch	;volatile
  5860  000F92  0E14               	movlw	20
  5861  000F94  ECC6  F00C         	call	_EEWriteChar
  5862                           
  5863                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  5864  000F98  C0B1  F01C         	movff	_PIDEnableFlag,EEWriteChar@ch
  5865  000F9C  0E15               	movlw	21
  5866  000F9E  ECC6  F00C         	call	_EEWriteChar
  5867                           
  5868                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  5869  000FA2  0E01               	movlw	1
  5870  000FA4  6E1C               	movwf	EEWriteChar@ch,c
  5871  000FA6  0E16               	movlw	22
  5872  000FA8  ECC6  F00C         	call	_EEWriteChar
  5873  000FAC  0012               	return		;funcret
  5874  000FAE                     __end_of_SaveAll:
  5875                           	opt stack 0
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1l	equ	0xFE1
  5887                           indf2	equ	0xFDF
  5888                           fsr2h	equ	0xFDA
  5889                           fsr2l	equ	0xFD9
  5890                           status	equ	0xFD8
  5891                           
  5892 ;; *************** function _EEWriteDouble *****************
  5893 ;; Defined at:
  5894 ;;		line 77 in file "EEPROM.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  location        1    wreg     unsigned char 
  5897 ;;  dub             3   27[COMRAM] unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  location        1   30[COMRAM] unsigned char 
  5900 ;;  x               1   31[COMRAM] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;		None               void
  5903 ;; Registers used:
  5904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;Total ram usage:        5 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		_Busy_eep
  5919 ;;		_EEDisassembleDouble
  5920 ;;		_Write_b_eep
  5921 ;; This function is called by:
  5922 ;;		_SaveAll
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text34
  5927  001486                     __ptext34:
  5928                           	opt stack 0
  5929  001486                     _EEWriteDouble:
  5930                           	opt stack 24
  5931                           
  5932                           ;incstack = 0
  5933                           ;EEWriteDouble@location stored from wreg
  5934  001486  6E1F               	movwf	EEWriteDouble@location,c
  5935                           
  5936                           ;EEPROM.c: 79: unsigned char x;
  5937                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  5938  001488  C01C  F018         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  5939  00148C  C01D  F019         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  5940  001490  C01E  F01A         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  5941  001494  ECC0  F00B         	call	_EEDisassembleDouble	;wreg free
  5942                           
  5943                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  5944  001498  50F2               	movf	intcon,w,c	;volatile
  5945  00149A  0B3F               	andlw	63
  5946  00149C  6EF2               	movwf	intcon,c	;volatile
  5947                           
  5948                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  5949  00149E  0E00               	movlw	0
  5950  0014A0  6E20               	movwf	EEWriteDouble@x,c
  5951  0014A2                     l3011:
  5952  0014A2  0E02               	movlw	2
  5953  0014A4  6420               	cpfsgt	EEWriteDouble@x,c
  5954  0014A6  D001               	goto	l3015
  5955  0014A8  D014               	goto	l3025
  5956  0014AA                     l3015:
  5957                           
  5958                           ;EEPROM.c: 86: {
  5959                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  5960  0014AA  C01F  F018         	movff	EEWriteDouble@location,Write_b_eep@badd
  5961  0014AE  6A19               	clrf	Write_b_eep@badd+1,c
  5962  0014B0  5020               	movf	EEWriteDouble@x,w,c
  5963  0014B2  0D01               	mullw	1
  5964  0014B4  0E39               	movlw	low _DDouble
  5965  0014B6  24F3               	addwf	prodl,w,c
  5966  0014B8  6ED9               	movwf	fsr2l,c
  5967  0014BA  0E00               	movlw	high _DDouble
  5968  0014BC  20F4               	addwfc	prodh,w,c
  5969  0014BE  6EDA               	movwf	fsr2h,c
  5970  0014C0  50DF               	movf	indf2,w,c
  5971  0014C2  6E1A               	movwf	Write_b_eep@bdat,c
  5972  0014C4  EC46  F00B         	call	_Write_b_eep	;wreg free
  5973                           
  5974                           ;EEPROM.c: 88: location++;
  5975  0014C8  2A1F               	incf	EEWriteDouble@location,f,c
  5976                           
  5977                           ;EEPROM.c: 89: Busy_eep();
  5978  0014CA  EC63  F00D         	call	_Busy_eep	;wreg free
  5979  0014CE  2A20               	incf	EEWriteDouble@x,f,c
  5980  0014D0  D7E8               	goto	l3011
  5981  0014D2                     l3025:
  5982                           
  5983                           ;EEPROM.c: 90: }
  5984                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  5985  0014D2  50F2               	movf	intcon,w,c	;volatile
  5986  0014D4  09C0               	iorlw	192
  5987  0014D6  6EF2               	movwf	intcon,c	;volatile
  5988  0014D8  0012               	return		;funcret
  5989  0014DA                     __end_of_EEWriteDouble:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _EEDisassembleDouble *****************
  6008 ;; Defined at:
  6009 ;;		line 48 in file "EEPROM.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  dub             3   23[COMRAM] unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6023 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;Total ram usage:        3 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    4
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_EEWriteDouble
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text35
  6038  001780                     __ptext35:
  6039                           	opt stack 0
  6040  001780                     _EEDisassembleDouble:
  6041                           	opt stack 24
  6042                           
  6043                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  6044                           
  6045                           ;incstack = 0
  6046  001780  0E18               	movlw	low EEDisassembleDouble@dub
  6047  001782  6E3F               	movwf	_DoublePtr,c
  6048  001784  0E00               	movlw	high EEDisassembleDouble@dub
  6049  001786  6E40               	movwf	_DoublePtr+1,c
  6050                           
  6051                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  6052  001788  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6053  00178C  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6054  001790  50DF               	movf	indf2,w,c
  6055  001792  6E39               	movwf	_DDouble,c
  6056                           
  6057                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  6058  001794  EE20 F001          	lfsr	2,1
  6059  001798  503F               	movf	_DoublePtr,w,c
  6060  00179A  26D9               	addwf	fsr2l,f,c
  6061  00179C  5040               	movf	_DoublePtr+1,w,c
  6062  00179E  22DA               	addwfc	fsr2h,f,c
  6063  0017A0  50DF               	movf	indf2,w,c
  6064  0017A2  6E3A               	movwf	_DDouble+1,c
  6065                           
  6066                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  6067  0017A4  EE20 F002          	lfsr	2,2
  6068  0017A8  503F               	movf	_DoublePtr,w,c
  6069  0017AA  26D9               	addwf	fsr2l,f,c
  6070  0017AC  5040               	movf	_DoublePtr+1,w,c
  6071  0017AE  22DA               	addwfc	fsr2h,f,c
  6072  0017B0  50DF               	movf	indf2,w,c
  6073  0017B2  6E3B               	movwf	_DDouble+2,c
  6074  0017B4  0012               	return		;funcret
  6075  0017B6                     __end_of_EEDisassembleDouble:
  6076                           	opt stack 0
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           postinc0	equ	0xFEE
  6085                           wreg	equ	0xFE8
  6086                           postdec1	equ	0xFE5
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function _EEWriteChar *****************
  6094 ;; Defined at:
  6095 ;;		line 122 in file "EEPROM.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  location        1    wreg     unsigned char 
  6098 ;;  ch              1   27[COMRAM] unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  location        1   28[COMRAM] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6110 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;Total ram usage:        2 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    5
  6117 ;; This function calls:
  6118 ;;		_Busy_eep
  6119 ;;		_Write_b_eep
  6120 ;; This function is called by:
  6121 ;;		_SaveAll
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text36
  6126  00198C                     __ptext36:
  6127                           	opt stack 0
  6128  00198C                     _EEWriteChar:
  6129                           	opt stack 24
  6130                           
  6131                           ;incstack = 0
  6132                           ;EEWriteChar@location stored from wreg
  6133  00198C  6E1D               	movwf	EEWriteChar@location,c
  6134                           
  6135                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  6136  00198E  50F2               	movf	intcon,w,c	;volatile
  6137  001990  0B3F               	andlw	63
  6138  001992  6EF2               	movwf	intcon,c	;volatile
  6139                           
  6140                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  6141  001994  C01D  F018         	movff	EEWriteChar@location,Write_b_eep@badd
  6142  001998  6A19               	clrf	Write_b_eep@badd+1,c
  6143  00199A  C01C  F01A         	movff	EEWriteChar@ch,Write_b_eep@bdat
  6144  00199E  EC46  F00B         	call	_Write_b_eep	;wreg free
  6145                           
  6146                           ;EEPROM.c: 127: Busy_eep();
  6147  0019A2  EC63  F00D         	call	_Busy_eep	;wreg free
  6148                           
  6149                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  6150  0019A6  50F2               	movf	intcon,w,c	;volatile
  6151  0019A8  09C0               	iorlw	192
  6152  0019AA  6EF2               	movwf	intcon,c	;volatile
  6153  0019AC  0012               	return		;funcret
  6154  0019AE                     __end_of_EEWriteChar:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           postdec1	equ	0xFE5
  6166                           fsr1l	equ	0xFE1
  6167                           indf2	equ	0xFDF
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _Write_b_eep *****************
  6173 ;; Defined at:
  6174 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  badd            2   23[COMRAM] unsigned int 
  6177 ;;  bdat            1   25[COMRAM] unsigned char 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;  GIE_BIT_VAL     1   26[COMRAM] unsigned char 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;		None               void
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6189 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;Total ram usage:        4 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    4
  6196 ;; This function calls:
  6197 ;;		Nothing
  6198 ;; This function is called by:
  6199 ;;		_EEWriteDouble
  6200 ;;		_EEWriteChar
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text37
  6205  00168C                     __ptext37:
  6206                           	opt stack 0
  6207  00168C                     _Write_b_eep:
  6208                           	opt stack 24
  6209                           
  6210                           ;incstack = 0
  6211  00168C  0E00               	movlw	0
  6212  00168E  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6213  001690  5019               	movf	Write_b_eep@badd+1,w,c
  6214  001692  0B03               	andlw	3
  6215  001694  6EAA               	movwf	4010,c	;volatile
  6216  001696  C018  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6217  00169A  C01A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6218  00169E  9EA6               	bcf	4006,7,c	;volatile
  6219  0016A0  9CA6               	bcf	4006,6,c	;volatile
  6220  0016A2  84A6               	bsf	4006,2,c	;volatile
  6221  0016A4  0E00               	movlw	0
  6222  0016A6  BEF2               	btfsc	intcon,7,c	;volatile
  6223  0016A8  0E01               	movlw	1
  6224  0016AA  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6225  0016AC  9EF2               	bcf	intcon,7,c	;volatile
  6226  0016AE  0E55               	movlw	85
  6227  0016B0  6EA7               	movwf	4007,c	;volatile
  6228  0016B2  0EAA               	movlw	170
  6229  0016B4  6EA7               	movwf	4007,c	;volatile
  6230  0016B6  82A6               	bsf	4006,1,c	;volatile
  6231  0016B8  D000               	goto	l597
  6232  0016BA                     l597:
  6233  0016BA  B2A6               	btfsc	4006,1,c	;volatile
  6234  0016BC  D7FE               	goto	l597
  6235  0016BE  B01B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  6236  0016C0  D002               	bra	u2115
  6237  0016C2  9EF2               	bcf	intcon,7,c	;volatile
  6238  0016C4  D001               	bra	u2116
  6239  0016C6                     u2115:
  6240  0016C6  8EF2               	bsf	intcon,7,c	;volatile
  6241  0016C8                     u2116:
  6242  0016C8  94A6               	bcf	4006,2,c	;volatile
  6243  0016CA  0012               	return		;funcret
  6244  0016CC                     __end_of_Write_b_eep:
  6245                           	opt stack 0
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           postdec1	equ	0xFE5
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _Busy_eep *****************
  6263 ;; Defined at:
  6264 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		None
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    4
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_EEWriteDouble
  6289 ;;		_EEReadDouble
  6290 ;;		_EEWriteChar
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text38
  6295  001AC6                     __ptext38:
  6296                           	opt stack 0
  6297  001AC6                     _Busy_eep:
  6298                           	opt stack 22
  6299                           
  6300                           ;incstack = 0
  6301  001AC6  D000               	goto	l566
  6302  001AC8                     l566:
  6303  001AC8  B2A6               	btfsc	4006,1,c	;volatile
  6304  001ACA  D7FE               	goto	l566
  6305  001ACC  0012               	return		;funcret
  6306  001ACE                     __end_of_Busy_eep:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           intcon	equ	0xFF2
  6315                           postinc0	equ	0xFEE
  6316                           wreg	equ	0xFE8
  6317                           postdec1	equ	0xFE5
  6318                           fsr1l	equ	0xFE1
  6319                           indf2	equ	0xFDF
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function _SPIReassembleDouble *****************
  6325 ;; Defined at:
  6326 ;;		line 101 in file "SPISlave.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  dub             3   26[COMRAM] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  3   23[COMRAM] unsigned char 
  6333 ;; Registers used:
  6334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6340 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;Total ram usage:        6 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    4
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		_main
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           	psect	text39
  6355  001606                     __ptext39:
  6356                           	opt stack 0
  6357  001606                     _SPIReassembleDouble:
  6358                           	opt stack 26
  6359                           
  6360                           ;SPISlave.c: 103: double dub;
  6361                           ;SPISlave.c: 104: DoublePtr = (unsigned char*) &dub;
  6362                           
  6363                           ;incstack = 0
  6364  001606  0E1B               	movlw	low SPIReassembleDouble@dub
  6365  001608  6E3F               	movwf	_DoublePtr,c
  6366  00160A  0E00               	movlw	high SPIReassembleDouble@dub
  6367  00160C  6E40               	movwf	_DoublePtr+1,c
  6368                           
  6369                           ;SPISlave.c: 105: DoublePtr[0] = DoubleSPIS[0];
  6370  00160E  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6371  001612  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6372  001616  C035  FFDF         	movff	_DoubleSPIS,indf2
  6373                           
  6374                           ;SPISlave.c: 106: DoublePtr[1] = DoubleSPIS[1];
  6375  00161A  EE20 F001          	lfsr	2,1
  6376  00161E  503F               	movf	_DoublePtr,w,c
  6377  001620  26D9               	addwf	fsr2l,f,c
  6378  001622  5040               	movf	_DoublePtr+1,w,c
  6379  001624  22DA               	addwfc	fsr2h,f,c
  6380  001626  C036  FFDF         	movff	_DoubleSPIS+1,indf2
  6381                           
  6382                           ;SPISlave.c: 107: DoublePtr[2] = DoubleSPIS[2];
  6383  00162A  EE20 F002          	lfsr	2,2
  6384  00162E  503F               	movf	_DoublePtr,w,c
  6385  001630  26D9               	addwf	fsr2l,f,c
  6386  001632  5040               	movf	_DoublePtr+1,w,c
  6387  001634  22DA               	addwfc	fsr2h,f,c
  6388  001636  C037  FFDF         	movff	_DoubleSPIS+2,indf2
  6389                           
  6390                           ;SPISlave.c: 109: return dub;
  6391  00163A  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  6392  00163E  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  6393  001642  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  6394  001646  D000               	goto	l287
  6395  001648                     l287:
  6396  001648  0012               	return		;funcret
  6397  00164A                     __end_of_SPIReassembleDouble:
  6398                           	opt stack 0
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodh	equ	0xFF4
  6404                           prodl	equ	0xFF3
  6405                           intcon	equ	0xFF2
  6406                           postinc0	equ	0xFEE
  6407                           wreg	equ	0xFE8
  6408                           postdec1	equ	0xFE5
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _SPIDisassembleDouble *****************
  6416 ;; Defined at:
  6417 ;;		line 79 in file "SPISlave.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  dub             3   25[COMRAM] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;		None               void
  6424 ;; Registers used:
  6425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:        3 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    5
  6438 ;; This function calls:
  6439 ;;		_GenerateChecksum
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text40
  6446  00170C                     __ptext40:
  6447                           	opt stack 0
  6448  00170C                     _SPIDisassembleDouble:
  6449                           	opt stack 25
  6450                           
  6451                           ;SPISlave.c: 81: DoublePtr = (unsigned char*) &dub;
  6452                           
  6453                           ;incstack = 0
  6454  00170C  0E1A               	movlw	low SPIDisassembleDouble@dub
  6455  00170E  6E3F               	movwf	_DoublePtr,c
  6456  001710  0E00               	movlw	high SPIDisassembleDouble@dub
  6457  001712  6E40               	movwf	_DoublePtr+1,c
  6458                           
  6459                           ;SPISlave.c: 82: DoubleSPIS[0] = DoublePtr[0];
  6460  001714  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6461  001718  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6462  00171C  50DF               	movf	indf2,w,c
  6463  00171E  6E35               	movwf	_DoubleSPIS,c
  6464                           
  6465                           ;SPISlave.c: 83: DoubleSPIS[1] = DoublePtr[1];
  6466  001720  EE20 F001          	lfsr	2,1
  6467  001724  503F               	movf	_DoublePtr,w,c
  6468  001726  26D9               	addwf	fsr2l,f,c
  6469  001728  5040               	movf	_DoublePtr+1,w,c
  6470  00172A  22DA               	addwfc	fsr2h,f,c
  6471  00172C  50DF               	movf	indf2,w,c
  6472  00172E  6E36               	movwf	_DoubleSPIS+1,c
  6473                           
  6474                           ;SPISlave.c: 84: DoubleSPIS[2] = DoublePtr[2];
  6475  001730  EE20 F002          	lfsr	2,2
  6476  001734  503F               	movf	_DoublePtr,w,c
  6477  001736  26D9               	addwf	fsr2l,f,c
  6478  001738  5040               	movf	_DoublePtr+1,w,c
  6479  00173A  22DA               	addwfc	fsr2h,f,c
  6480  00173C  50DF               	movf	indf2,w,c
  6481  00173E  6E37               	movwf	_DoubleSPIS+2,c
  6482                           
  6483                           ;SPISlave.c: 85: DoubleSPIS[3] = GenerateChecksum();
  6484  001740  EC25  F00B         	call	_GenerateChecksum	;wreg free
  6485  001744  6E38               	movwf	_DoubleSPIS+3,c
  6486  001746  0012               	return		;funcret
  6487  001748                     __end_of_SPIDisassembleDouble:
  6488                           	opt stack 0
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           postdec1	equ	0xFE5
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _GenerateChecksum *****************
  6506 ;; Defined at:
  6507 ;;		line 88 in file "SPISlave.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  y               1   24[COMRAM] unsigned char 
  6512 ;;  sum             1   23[COMRAM] unsigned char 
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      unsigned char 
  6515 ;; Registers used:
  6516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;Total ram usage:        2 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    4
  6529 ;; This function calls:
  6530 ;;		Nothing
  6531 ;; This function is called by:
  6532 ;;		_SPIDisassembleDouble
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text41
  6537  00164A                     __ptext41:
  6538                           	opt stack 0
  6539  00164A                     _GenerateChecksum:
  6540                           	opt stack 25
  6541                           
  6542                           ;SPISlave.c: 90: if ((Command > 0x00) && (Command < 0x0A))
  6543                           
  6544                           ;incstack = 0
  6545  00164A  5041               	movf	_Command,w,c
  6546  00164C  B4D8               	btfsc	status,2,c
  6547  00164E  D01B               	goto	l2991
  6548  001650  0E0A               	movlw	10
  6549  001652  6041               	cpfslt	_Command,c
  6550  001654  D018               	goto	l2991
  6551                           
  6552                           ;SPISlave.c: 91: {
  6553                           ;SPISlave.c: 92: unsigned char y, sum = 0;
  6554  001656  0E00               	movlw	0
  6555  001658  6E18               	movwf	GenerateChecksum@sum,c
  6556                           
  6557                           ;SPISlave.c: 93: for (y = 0; y != 3; y++)
  6558  00165A  0E00               	movlw	0
  6559  00165C  6E19               	movwf	GenerateChecksum@y,c
  6560  00165E                     l2975:
  6561  00165E  0E03               	movlw	3
  6562  001660  1819               	xorwf	GenerateChecksum@y,w,c
  6563  001662  B4D8               	btfsc	status,2,c
  6564  001664  D00E               	goto	l2985
  6565  001666  D001               	goto	l2979
  6566  001668  D00C               	goto	l2985
  6567  00166A                     l2979:
  6568                           
  6569                           ;SPISlave.c: 94: sum += DoubleSPIS[y];
  6570  00166A  5019               	movf	GenerateChecksum@y,w,c
  6571  00166C  0D01               	mullw	1
  6572  00166E  0E35               	movlw	low _DoubleSPIS
  6573  001670  24F3               	addwf	prodl,w,c
  6574  001672  6ED9               	movwf	fsr2l,c
  6575  001674  0E00               	movlw	high _DoubleSPIS
  6576  001676  20F4               	addwfc	prodh,w,c
  6577  001678  6EDA               	movwf	fsr2h,c
  6578  00167A  50DF               	movf	indf2,w,c
  6579  00167C  2618               	addwf	GenerateChecksum@sum,f,c
  6580  00167E  2A19               	incf	GenerateChecksum@y,f,c
  6581  001680  D7EE               	goto	l2975
  6582  001682                     l2985:
  6583                           
  6584                           ;SPISlave.c: 95: return sum;
  6585  001682  5018               	movf	GenerateChecksum@sum,w,c
  6586                           
  6587                           ;SPISlave.c: 96: }
  6588  001684  D002               	goto	l283
  6589  001686                     l2991:
  6590                           
  6591                           ;SPISlave.c: 97: else
  6592                           ;SPISlave.c: 98: return 0xFF;
  6593  001686  0EFF               	movlw	255
  6594  001688  D000               	goto	l283
  6595  00168A                     l283:
  6596  00168A  0012               	return		;funcret
  6597  00168C                     __end_of_GenerateChecksum:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           postinc0	equ	0xFEE
  6607                           wreg	equ	0xFE8
  6608                           postdec1	equ	0xFE5
  6609                           fsr1l	equ	0xFE1
  6610                           indf2	equ	0xFDF
  6611                           fsr2h	equ	0xFDA
  6612                           fsr2l	equ	0xFD9
  6613                           status	equ	0xFD8
  6614                           
  6615 ;; *************** function _ReceiveSPI1 *****************
  6616 ;; Defined at:
  6617 ;;		line 62 in file "SPISlave.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;		None
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      unsigned char 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;Total ram usage:        0 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    4
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_main
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text42
  6646  0018D2                     __ptext42:
  6647                           	opt stack 0
  6648  0018D2                     _ReceiveSPI1:
  6649                           	opt stack 26
  6650                           
  6651                           ;SPISlave.c: 64: SSP1BUF = 0x00;
  6652                           
  6653                           ;incstack = 0
  6654  0018D2  0E00               	movlw	0
  6655  0018D4  6EC9               	movwf	4041,c	;volatile
  6656                           
  6657                           ;SPISlave.c: 65: PIR1bits.TMR1IF = 0;
  6658  0018D6  909E               	bcf	3998,0,c	;volatile
  6659                           
  6660                           ;SPISlave.c: 66: T1CONbits.TMR1ON = 1;
  6661  0018D8  80CD               	bsf	4045,0,c	;volatile
  6662                           
  6663                           ;SPISlave.c: 67: TMR1H = timer1High;
  6664  0018DA  C047  FFCF         	movff	_timer1High,4047	;volatile
  6665                           
  6666                           ;SPISlave.c: 68: TMR1L = timer1Low;
  6667  0018DE  C042  FFCE         	movff	_timer1Low,4046	;volatile
  6668                           
  6669                           ;SPISlave.c: 69: while (!PIR1bits.SSP1IF)
  6670  0018E2  D004               	goto	l270
  6671  0018E4                     l271:
  6672                           
  6673                           ;SPISlave.c: 70: {
  6674                           ;SPISlave.c: 71: if (PIR1bits.TMR1IF == 1)
  6675  0018E4  A09E               	btfss	3998,0,c	;volatile
  6676  0018E6  D002               	goto	l270
  6677                           
  6678                           ;SPISlave.c: 72: PIR1bits.SSPIF = 1;
  6679  0018E8  869E               	bsf	3998,3,c	;volatile
  6680  0018EA  D000               	goto	l270
  6681  0018EC                     l270:
  6682  0018EC  A69E               	btfss	3998,3,c	;volatile
  6683  0018EE  D7FA               	goto	l271
  6684                           
  6685                           ;SPISlave.c: 73: }
  6686                           ;SPISlave.c: 74: PIR1bits.SSP1IF = 0;
  6687  0018F0  969E               	bcf	3998,3,c	;volatile
  6688                           
  6689                           ;SPISlave.c: 75: SSP1CON1bits.SSPOV1 = 0;
  6690  0018F2  9CC6               	bcf	4038,6,c	;volatile
  6691                           
  6692                           ;SPISlave.c: 76: return SSP1BUF;
  6693  0018F4  50C9               	movf	4041,w,c	;volatile
  6694  0018F6  D000               	goto	l274
  6695  0018F8                     l274:
  6696  0018F8  0012               	return		;funcret
  6697  0018FA                     __end_of_ReceiveSPI1:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           postinc0	equ	0xFEE
  6707                           wreg	equ	0xFE8
  6708                           postdec1	equ	0xFE5
  6709                           fsr1l	equ	0xFE1
  6710                           indf2	equ	0xFDF
  6711                           fsr2h	equ	0xFDA
  6712                           fsr2l	equ	0xFD9
  6713                           status	equ	0xFD8
  6714                           
  6715 ;; *************** function _ImplementJSMotion *****************
  6716 ;; Defined at:
  6717 ;;		line 58 in file "MotorControl.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  JoystickValu    2   40[BANK0 ] int 
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  CCPinput        2   44[BANK0 ] unsigned int 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6731 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;Total ram usage:        6 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    5
  6738 ;; This function calls:
  6739 ;;		_abs
  6740 ;; This function is called by:
  6741 ;;		_main
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text43
  6746  000894                     __ptext43:
  6747                           	opt stack 0
  6748  000894                     _ImplementJSMotion:
  6749                           	opt stack 25
  6750                           
  6751                           ;MotorControl.c: 60: unsigned int CCPinput;
  6752                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  6753                           
  6754                           ;incstack = 0
  6755  000894  5045               	movf	_DeadbandLow,w,c
  6756  000896  0100               	movlb	0	; () banked
  6757  000898  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6758  00089A  0100               	movlb	0	; () banked
  6759  00089C  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6760  00089E  0A80               	xorlw	128
  6761  0008A0  0100               	movlb	0	; () banked
  6762  0008A2  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6763  0008A4  5046               	movf	_DeadbandLow+1,w,c
  6764  0008A6  0A80               	xorlw	128
  6765  0008A8  0100               	movlb	0	; () banked
  6766  0008AA  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6767  0008AC  B0D8               	btfsc	status,0,c
  6768  0008AE  D002               	goto	l3761
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;MotorControl.c: 62: {
  6772                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  6773  0008B0  8EB7               	bsf	4023,7,c	;volatile
  6774  0008B2  D00F               	goto	l3765
  6775  0008B4                     l3761:
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  6779  0008B4  0100               	movlb	0	; () banked
  6780  0008B6  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6781  0008B8  5C43               	subwf	_DeadbandHigh,w,c
  6782  0008BA  5044               	movf	_DeadbandHigh+1,w,c
  6783  0008BC  0A80               	xorlw	128
  6784  0008BE  0100               	movlb	0	; () banked
  6785  0008C0  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6786  0008C2  0100               	movlb	0	; () banked
  6787  0008C4  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6788  0008C6  0A80               	xorlw	128
  6789  0008C8  0100               	movlb	0	; () banked
  6790  0008CA  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6791  0008CC  B0D8               	btfsc	status,0,c
  6792  0008CE  D005               	goto	l3767
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;MotorControl.c: 67: {
  6796                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  6797  0008D0  9EB7               	bcf	4023,7,c	;volatile
  6798  0008D2                     l3765:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  6802  0008D2  0E00               	movlw	0
  6803  0008D4  0100               	movlb	0	; () banked
  6804  0008D6  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  6805                           
  6806                           ;MotorControl.c: 70: }
  6807  0008D8  D02A               	goto	l3779
  6808  0008DA                     l3767:
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  6812  0008DA  0100               	movlb	0	; () banked
  6813  0008DC  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6814  0008DE  5C43               	subwf	_DeadbandHigh,w,c
  6815  0008E0  5044               	movf	_DeadbandHigh+1,w,c
  6816  0008E2  0A80               	xorlw	128
  6817  0008E4  0100               	movlb	0	; () banked
  6818  0008E6  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6819  0008E8  0100               	movlb	0	; () banked
  6820  0008EA  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6821  0008EC  0A80               	xorlw	128
  6822  0008EE  0100               	movlb	0	; () banked
  6823  0008F0  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6824  0008F2  A0D8               	btfss	status,0,c
  6825  0008F4  D01C               	goto	l3779
  6826                           
  6827                           ; BSR set to: 0
  6828  0008F6  5045               	movf	_DeadbandLow,w,c
  6829  0008F8  0100               	movlb	0	; () banked
  6830  0008FA  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6831  0008FC  0100               	movlb	0	; () banked
  6832  0008FE  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6833  000900  0A80               	xorlw	128
  6834  000902  0100               	movlb	0	; () banked
  6835  000904  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6836  000906  5046               	movf	_DeadbandLow+1,w,c
  6837  000908  0A80               	xorlw	128
  6838  00090A  0100               	movlb	0	; () banked
  6839  00090C  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6840  00090E  A0D8               	btfss	status,0,c
  6841  000910  D00E               	goto	l3779
  6842                           
  6843                           ; BSR set to: 0
  6844  000912  0100               	movlb	0	; () banked
  6845  000914  51B1               	movf	_PIDEnableFlag& (0+255),w,b
  6846  000916  A4D8               	btfss	status,2,c
  6847  000918  D00A               	goto	l3779
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;MotorControl.c: 72: {
  6851                           ;MotorControl.c: 73: JoystickValue = 0;
  6852  00091A  0E00               	movlw	0
  6853  00091C  0100               	movlb	0	; () banked
  6854  00091E  6F89               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  6855  000920  0E00               	movlw	0
  6856  000922  6F88               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  6857                           
  6858                           ;MotorControl.c: 74: CCPR3L = 0x00;
  6859  000924  0E00               	movlw	0
  6860  000926  6EB8               	movwf	4024,c	;volatile
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  6864  000928  9AB7               	bcf	4023,5,c	;volatile
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  6868  00092A  98B7               	bcf	4023,4,c	;volatile
  6869                           
  6870                           ; BSR set to: 0
  6871                           
  6872                           ; BSR set to: 0
  6873  00092C  D000               	goto	l3779
  6874  00092E                     l3779:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;MotorControl.c: 77: }
  6878                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  6879  00092E  5045               	movf	_DeadbandLow,w,c
  6880  000930  0100               	movlb	0	; () banked
  6881  000932  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6882  000934  0100               	movlb	0	; () banked
  6883  000936  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6884  000938  0A80               	xorlw	128
  6885  00093A  0100               	movlb	0	; () banked
  6886  00093C  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6887  00093E  5046               	movf	_DeadbandLow+1,w,c
  6888  000940  0A80               	xorlw	128
  6889  000942  0100               	movlb	0	; () banked
  6890  000944  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6891  000946  A0D8               	btfss	status,0,c
  6892  000948  D00E               	goto	l3783
  6893                           
  6894                           ; BSR set to: 0
  6895  00094A  0100               	movlb	0	; () banked
  6896  00094C  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6897  00094E  5C43               	subwf	_DeadbandHigh,w,c
  6898  000950  5044               	movf	_DeadbandHigh+1,w,c
  6899  000952  0A80               	xorlw	128
  6900  000954  0100               	movlb	0	; () banked
  6901  000956  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6902  000958  0100               	movlb	0	; () banked
  6903  00095A  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6904  00095C  0A80               	xorlw	128
  6905  00095E  0100               	movlb	0	; () banked
  6906  000960  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6907  000962  B0D8               	btfsc	status,0,c
  6908  000964  D030               	goto	l109
  6909  000966                     l3783:
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;MotorControl.c: 80: {
  6913                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  6914  000966  C088  F084         	movff	ImplementJSMotion@JoystickValue,abs@a
  6915  00096A  C089  F085         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  6916  00096E  EC53  F00C         	call	_abs	;wreg free
  6917  000972  C084  F088         	movff	?_abs,ImplementJSMotion@JoystickValue
  6918  000976  C085  F089         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  6919                           
  6920                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  6921  00097A  90D8               	bcf	status,0,c
  6922  00097C  0100               	movlb	0	; () banked
  6923  00097E  3588               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6924  000980  0100               	movlb	0	; () banked
  6925  000982  6F8C               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  6926  000984  0100               	movlb	0	; () banked
  6927  000986  3589               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6928  000988  0100               	movlb	0	; () banked
  6929  00098A  6F8D               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  6933  00098C  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6934  000990  C08D  F08B         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  6935  000994  0100               	movlb	0	; () banked
  6936  000996  90D8               	bcf	status,0,c
  6937  000998  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6938  00099A  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6939  00099C  0100               	movlb	0	; () banked
  6940  00099E  90D8               	bcf	status,0,c
  6941  0009A0  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6942  0009A2  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6943  0009A4  0100               	movlb	0	; () banked
  6944  0009A6  518A               	movf	??_ImplementJSMotion& (0+255),w,b
  6945  0009A8  6EB8               	movwf	4024,c	;volatile
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  6949  0009AA  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6950  0009AE  0E03               	movlw	3
  6951  0009B0  0100               	movlb	0	; () banked
  6952  0009B2  178A               	andwf	??_ImplementJSMotion& (0+255),f,b
  6953  0009B4  0100               	movlb	0	; () banked
  6954  0009B6  3B8A               	swapf	??_ImplementJSMotion& (0+255),f,b
  6955  0009B8  50B7               	movf	4023,w,c	;volatile
  6956  0009BA  0100               	movlb	0	; () banked
  6957  0009BC  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6958  0009BE  0BCF               	andlw	-49
  6959  0009C0  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6960  0009C2  6EB7               	movwf	4023,c	;volatile
  6961  0009C4  D000               	goto	l109
  6962  0009C6                     l109:
  6963                           
  6964                           ; BSR set to: 0
  6965  0009C6  0012               	return		;funcret
  6966  0009C8                     __end_of_ImplementJSMotion:
  6967                           	opt stack 0
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           intcon	equ	0xFF2
  6975                           postinc0	equ	0xFEE
  6976                           wreg	equ	0xFE8
  6977                           postdec1	equ	0xFE5
  6978                           fsr1l	equ	0xFE1
  6979                           indf2	equ	0xFDF
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function _abs *****************
  6985 ;; Defined at:
  6986 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  a               2   36[BANK0 ] int 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;		None
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  2   36[BANK0 ] int 
  6993 ;; Registers used:
  6994 ;;		wreg, status,2, status,0
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7000 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;Total ram usage:        4 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    4
  7007 ;; This function calls:
  7008 ;;		Nothing
  7009 ;; This function is called by:
  7010 ;;		_ImplementPIDMotion
  7011 ;;		_ImplementJSMotion
  7012 ;;		_ZeroMotors
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text44
  7017  0018A6                     __ptext44:
  7018                           	opt stack 0
  7019  0018A6                     _abs:
  7020                           	opt stack 24
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;incstack = 0
  7024  0018A6  0100               	movlb	0	; () banked
  7025  0018A8  AF85               	btfss	(abs@a+1)& (0+255),7,b
  7026  0018AA  D00E               	goto	l676
  7027                           
  7028                           ; BSR set to: 0
  7029  0018AC  C084  F086         	movff	abs@a,??_abs
  7030  0018B0  C085  F087         	movff	abs@a+1,??_abs+1
  7031  0018B4  0100               	movlb	0	; () banked
  7032  0018B6  1F86               	comf	??_abs& (0+255),f,b
  7033  0018B8  1F87               	comf	(??_abs+1)& (0+255),f,b
  7034  0018BA  4B86               	infsnz	??_abs& (0+255),f,b
  7035  0018BC  2B87               	incf	(??_abs+1)& (0+255),f,b
  7036  0018BE  C086  F084         	movff	??_abs,?_abs
  7037  0018C2  C087  F085         	movff	??_abs+1,?_abs+1
  7038  0018C6  D004               	goto	l677
  7039  0018C8                     l676:
  7040                           
  7041                           ; BSR set to: 0
  7042  0018C8  C084  F084         	movff	abs@a,?_abs
  7043  0018CC  C085  F085         	movff	abs@a+1,?_abs+1
  7044  0018D0                     l677:
  7045                           
  7046                           ; BSR set to: 0
  7047  0018D0  0012               	return		;funcret
  7048  0018D2                     __end_of_abs:
  7049                           	opt stack 0
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           postinc0	equ	0xFEE
  7058                           wreg	equ	0xFE8
  7059                           postdec1	equ	0xFE5
  7060                           fsr1l	equ	0xFE1
  7061                           indf2	equ	0xFDF
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function _DetectMovement *****************
  7067 ;; Defined at:
  7068 ;;		line 42 in file "Joystick.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;  ADCresult       2   28[COMRAM] unsigned int 
  7073 ;;  JoystickResu    2   26[COMRAM] int 
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  2   23[COMRAM] int 
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;Total ram usage:        7 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; Hardware stack levels required when called:    4
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_main
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text45
  7098  0012B4                     __ptext45:
  7099                           	opt stack 0
  7100  0012B4                     _DetectMovement:
  7101                           	opt stack 26
  7102                           
  7103                           ;Joystick.c: 44: unsigned int ADCresult;
  7104                           ;Joystick.c: 45: int JoystickResult;
  7105                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;incstack = 0
  7109  0012B4  82C2               	bsf	4034,1,c	;volatile
  7110                           
  7111                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  7112  0012B6  D000               	goto	l43
  7113  0012B8                     l43:
  7114  0012B8  B2C2               	btfsc	4034,1,c	;volatile
  7115  0012BA  D7FE               	goto	l43
  7116                           
  7117                           ;Joystick.c: 50: ADCresult = ADRESH;
  7118  0012BC  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  7119  0012C0  6A1E               	clrf	DetectMovement@ADCresult+1,c
  7120                           
  7121                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  7122  0012C2  501D               	movf	DetectMovement@ADCresult,w,c
  7123  0012C4  6E1E               	movwf	DetectMovement@ADCresult+1,c
  7124  0012C6  6A1D               	clrf	DetectMovement@ADCresult,c
  7125                           
  7126                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  7127  0012C8  501D               	movf	DetectMovement@ADCresult,w,c
  7128  0012CA  10C3               	iorwf	4035,w,c	;volatile
  7129  0012CC  6E1D               	movwf	DetectMovement@ADCresult,c
  7130  0012CE  501E               	movf	DetectMovement@ADCresult+1,w,c
  7131  0012D0  6E1E               	movwf	DetectMovement@ADCresult+1,c
  7132                           
  7133                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  7134  0012D2  0E00               	movlw	0
  7135  0012D4  241D               	addwf	DetectMovement@ADCresult,w,c
  7136  0012D6  6E1B               	movwf	DetectMovement@JoystickResult,c
  7137  0012D8  0EFE               	movlw	254
  7138  0012DA  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  7139  0012DC  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  7140                           
  7141                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  7142  0012DE  501B               	movf	DetectMovement@JoystickResult,w,c
  7143  0012E0  5C43               	subwf	_DeadbandHigh,w,c
  7144  0012E2  5044               	movf	_DeadbandHigh+1,w,c
  7145  0012E4  0A80               	xorlw	128
  7146  0012E6  6E1A               	movwf	??_DetectMovement& (0+255),c
  7147  0012E8  501C               	movf	DetectMovement@JoystickResult+1,w,c
  7148  0012EA  0A80               	xorlw	128
  7149  0012EC  581A               	subwfb	??_DetectMovement& (0+255),w,c
  7150  0012EE  A0D8               	btfss	status,0,c
  7151  0012F0  D00A               	goto	l3103
  7152  0012F2  5045               	movf	_DeadbandLow,w,c
  7153  0012F4  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  7154  0012F6  501C               	movf	DetectMovement@JoystickResult+1,w,c
  7155  0012F8  0A80               	xorlw	128
  7156  0012FA  6E1A               	movwf	??_DetectMovement& (0+255),c
  7157  0012FC  5046               	movf	_DeadbandLow+1,w,c
  7158  0012FE  0A80               	xorlw	128
  7159  001300  581A               	subwfb	??_DetectMovement& (0+255),w,c
  7160  001302  B0D8               	btfsc	status,0,c
  7161  001304  D008               	goto	l3111
  7162  001306                     l3103:
  7163                           
  7164                           ;Joystick.c: 56: {
  7165                           ;Joystick.c: 57: PIDEnableFlag = 0;
  7166  001306  0E00               	movlw	0
  7167  001308  0100               	movlb	0	; () banked
  7168  00130A  6FB1               	movwf	_PIDEnableFlag& (0+255),b
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;Joystick.c: 58: return JoystickResult;
  7172  00130C  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  7173  001310  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;Joystick.c: 59: }
  7177                           
  7178                           ; BSR set to: 0
  7179  001314  D005               	goto	l49
  7180  001316                     l3111:
  7181                           
  7182                           ;Joystick.c: 60: else
  7183                           ;Joystick.c: 61: return 0;
  7184  001316  0E00               	movlw	0
  7185  001318  6E19               	movwf	?_DetectMovement+1,c
  7186  00131A  0E00               	movlw	0
  7187  00131C  6E18               	movwf	?_DetectMovement,c
  7188  00131E  D000               	goto	l49
  7189  001320                     l49:
  7190  001320  0012               	return		;funcret
  7191  001322                     __end_of_DetectMovement:
  7192                           	opt stack 0
  7193                           tblptru	equ	0xFF8
  7194                           tblptrh	equ	0xFF7
  7195                           tblptrl	equ	0xFF6
  7196                           tablat	equ	0xFF5
  7197                           prodh	equ	0xFF4
  7198                           prodl	equ	0xFF3
  7199                           intcon	equ	0xFF2
  7200                           postinc0	equ	0xFEE
  7201                           wreg	equ	0xFE8
  7202                           postdec1	equ	0xFE5
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _DetectJoystick *****************
  7210 ;; Defined at:
  7211 ;;		line 27 in file "Joystick.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;		None               void
  7218 ;; Registers used:
  7219 ;;		wreg, status,2
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;Total ram usage:        0 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    4
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_main
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text46
  7240  0019AE                     __ptext46:
  7241                           	opt stack 0
  7242  0019AE                     _DetectJoystick:
  7243                           	opt stack 26
  7244                           
  7245                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  7246                           
  7247                           ;incstack = 0
  7248  0019AE  B281               	btfsc	3969,1,c	;volatile
  7249  0019B0  D003               	goto	l37
  7250                           
  7251                           ;Joystick.c: 30: {
  7252                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  7253  0019B2  9480               	bcf	3968,2,c	;volatile
  7254                           
  7255                           ;Joystick.c: 32: JSEnableFlag = 0;
  7256  0019B4  0E00               	movlw	0
  7257  0019B6  D008               	goto	L2
  7258  0019B8                     l37:
  7259                           
  7260                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  7261  0019B8  A281               	btfss	3969,1,c	;volatile
  7262  0019BA  D009               	goto	l40
  7263  0019BC  0100               	movlb	0	; () banked
  7264  0019BE  51B0               	movf	_JSEnableFlag& (0+255),w,b
  7265  0019C0  A4D8               	btfss	status,2,c
  7266  0019C2  D005               	goto	l40
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;Joystick.c: 36: {
  7270                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  7271  0019C4  8480               	bsf	3968,2,c	;volatile
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;Joystick.c: 38: JSEnableFlag = 1;
  7275  0019C6  0E01               	movlw	1
  7276  0019C8                     L2:
  7277  0019C8  0100               	movlb	0	; () banked
  7278  0019CA  6FB0               	movwf	_JSEnableFlag& (0+255),b
  7279                           
  7280                           ; BSR set to: 0
  7281  0019CC  D000               	goto	l40
  7282  0019CE                     l40:
  7283  0019CE  0012               	return		;funcret
  7284  0019D0                     __end_of_DetectJoystick:
  7285                           	opt stack 0
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           postdec1	equ	0xFE5
  7296                           fsr1l	equ	0xFE1
  7297                           indf2	equ	0xFDF
  7298                           fsr2h	equ	0xFDA
  7299                           fsr2l	equ	0xFD9
  7300                           status	equ	0xFD8
  7301                           
  7302 ;; *************** function _ISR *****************
  7303 ;; Defined at:
  7304 ;;		line 173 in file "RTDuC.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;		None
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;		None               void
  7311 ;; Registers used:
  7312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;Total ram usage:       14 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    3
  7325 ;; This function calls:
  7326 ;;		_INT0Int
  7327 ;;		_SPIInt
  7328 ;;		_TMR0Int
  7329 ;;		i2_SaveAll
  7330 ;; This function is called by:
  7331 ;;		Interrupt level 2
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	intcode
  7336  000008                     __pintcode:
  7337                           	opt stack 0
  7338  000008                     _ISR:
  7339                           	opt stack 21
  7340                           
  7341                           ;incstack = 0
  7342  000008  CFFA F00A          	movff	pclath,??_ISR
  7343  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  7344  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  7345  000014  ED87  F008         	call	int_func,f	;refresh shadow registers
  7346                           pclatu	equ	0xFFB
  7347                           pclath	equ	0xFFA
  7348                           tblptru	equ	0xFF8
  7349                           tblptrh	equ	0xFF7
  7350                           tblptrl	equ	0xFF6
  7351                           tablat	equ	0xFF5
  7352                           prodh	equ	0xFF4
  7353                           prodl	equ	0xFF3
  7354                           intcon	equ	0xFF2
  7355                           postinc0	equ	0xFEE
  7356                           fsr0l	equ	0xFE9
  7357                           wreg	equ	0xFE8
  7358                           postdec1	equ	0xFE5
  7359                           fsr1l	equ	0xFE1
  7360                           indf2	equ	0xFDF
  7361                           fsr2h	equ	0xFDA
  7362                           fsr2l	equ	0xFD9
  7363                           status	equ	0xFD8
  7364                           
  7365                           	psect	intcode_body
  7366  00110E                     __pintcode_body:
  7367                           	opt stack 21
  7368  00110E                     int_func:
  7369                           	opt stack 21
  7370  00110E  0006               	pop		; remove dummy address from shadow register refresh
  7371  001110  CFEA F00D          	movff	fsr0h,??_ISR+3
  7372  001114  CFE1 F00E          	movff	fsr1l,??_ISR+4
  7373  001118  CFE2 F00F          	movff	fsr1h,??_ISR+5
  7374  00111C  CFD9 F010          	movff	fsr2l,??_ISR+6
  7375  001120  CFDA F011          	movff	fsr2h,??_ISR+7
  7376  001124  CFF3 F012          	movff	prodl,??_ISR+8
  7377  001128  CFF4 F013          	movff	prodh,??_ISR+9
  7378  00112C  CFF6 F014          	movff	tblptrl,??_ISR+10
  7379  001130  CFF7 F015          	movff	tblptrh,??_ISR+11
  7380  001134  CFF8 F016          	movff	tblptru,??_ISR+12
  7381  001138  CFF5 F017          	movff	tablat,??_ISR+13
  7382                           
  7383                           ;RTDuC.c: 175: PORTCbits.RC6 = 1;
  7384  00113C  8C82               	bsf	3970,6,c	;volatile
  7385                           
  7386                           ;RTDuC.c: 176: if (PIR1bits.SSP1IF == 1)
  7387  00113E  A69E               	btfss	3998,3,c	;volatile
  7388  001140  D003               	goto	i2l3455
  7389                           
  7390                           ;RTDuC.c: 177: {
  7391                           ;RTDuC.c: 178: SPIInt();
  7392  001142  EC2D  F00D         	call	_SPIInt	;wreg free
  7393  001146  D000               	goto	i2l3455
  7394  001148                     i2l3455:
  7395                           
  7396                           ;RTDuC.c: 179: }
  7397                           ;RTDuC.c: 181: if (INTCONbits.TMR0IF == 1)
  7398  001148  A4F2               	btfss	intcon,2,c	;volatile
  7399  00114A  D003               	goto	i2l3459
  7400                           
  7401                           ;RTDuC.c: 182: {
  7402                           ;RTDuC.c: 183: TMR0Int();
  7403  00114C  EC49  F00D         	call	_TMR0Int	;wreg free
  7404  001150  D000               	goto	i2l3459
  7405  001152                     i2l3459:
  7406                           
  7407                           ;RTDuC.c: 184: }
  7408                           ;RTDuC.c: 186: if (INTCONbits.INT0IF == 1)
  7409  001152  A2F2               	btfss	intcon,1,c	;volatile
  7410  001154  D003               	goto	i2l3463
  7411                           
  7412                           ;RTDuC.c: 187: {
  7413                           ;RTDuC.c: 188: INT0Int();
  7414  001156  ECB4  F00C         	call	_INT0Int	;wreg free
  7415  00115A  D000               	goto	i2l3463
  7416  00115C                     i2l3463:
  7417                           
  7418                           ;RTDuC.c: 189: }
  7419                           ;RTDuC.c: 191: if (PIR2bits.HLVDIF == 1)
  7420  00115C  A4A1               	btfss	4001,2,c	;volatile
  7421  00115E  D006               	goto	i2l3469
  7422                           
  7423                           ;RTDuC.c: 192: {
  7424                           ;RTDuC.c: 193: PORTAbits.RA4 = 0;
  7425  001160  9880               	bcf	3968,4,c	;volatile
  7426                           
  7427                           ;RTDuC.c: 194: PORTAbits.RA3 = 0;
  7428  001162  9680               	bcf	3968,3,c	;volatile
  7429                           
  7430                           ;RTDuC.c: 195: PORTAbits.RA2 = 0;
  7431  001164  9480               	bcf	3968,2,c	;volatile
  7432                           
  7433                           ;RTDuC.c: 196: SaveAll();
  7434  001166  ECD7  F007         	call	i2_SaveAll	;wreg free
  7435  00116A  D000               	goto	i2l3469
  7436  00116C                     i2l3469:
  7437                           
  7438                           ;RTDuC.c: 197: }
  7439                           ;RTDuC.c: 199: if (PIR2bits.OSCFIF == 1)
  7440  00116C  AEA1               	btfss	4001,7,c	;volatile
  7441  00116E  D002               	goto	i2l541
  7442  001170  00FF               	reset		;# 
  7443  001172  D000               	goto	i2l541
  7444  001174                     i2l541:
  7445  001174  C017  FFF5         	movff	??_ISR+13,tablat
  7446  001178  C016  FFF8         	movff	??_ISR+12,tblptru
  7447  00117C  C015  FFF7         	movff	??_ISR+11,tblptrh
  7448  001180  C014  FFF6         	movff	??_ISR+10,tblptrl
  7449  001184  C013  FFF4         	movff	??_ISR+9,prodh
  7450  001188  C012  FFF3         	movff	??_ISR+8,prodl
  7451  00118C  C011  FFDA         	movff	??_ISR+7,fsr2h
  7452  001190  C010  FFD9         	movff	??_ISR+6,fsr2l
  7453  001194  C00F  FFE2         	movff	??_ISR+5,fsr1h
  7454  001198  C00E  FFE1         	movff	??_ISR+4,fsr1l
  7455  00119C  C00D  FFEA         	movff	??_ISR+3,fsr0h
  7456  0011A0  C00C  FFE9         	movff	??_ISR+2,fsr0l
  7457  0011A4  C00B  FFFB         	movff	??_ISR+1,pclatu
  7458  0011A8  C00A  FFFA         	movff	??_ISR,pclath
  7459  0011AC  0011               	retfie		f
  7460  0011AE                     __end_of_ISR:
  7461                           	opt stack 0
  7462                           pclatu	equ	0xFFB
  7463                           pclath	equ	0xFFA
  7464                           tblptru	equ	0xFF8
  7465                           tblptrh	equ	0xFF7
  7466                           tblptrl	equ	0xFF6
  7467                           tablat	equ	0xFF5
  7468                           prodh	equ	0xFF4
  7469                           prodl	equ	0xFF3
  7470                           intcon	equ	0xFF2
  7471                           postinc0	equ	0xFEE
  7472                           fsr0h	equ	0xFEA
  7473                           fsr0l	equ	0xFE9
  7474                           wreg	equ	0xFE8
  7475                           postdec1	equ	0xFE5
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function i2_SaveAll *****************
  7484 ;; Defined at:
  7485 ;;		line 150 in file "EEPROM.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;		None
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;		None
  7490 ;; Return value:  Size  Location     Type
  7491 ;;		None               void
  7492 ;; Registers used:
  7493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;Total ram usage:        0 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    2
  7506 ;; This function calls:
  7507 ;;		i2_EEWriteChar
  7508 ;;		i2_EEWriteDouble
  7509 ;; This function is called by:
  7510 ;;		_ISR
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           	psect	text48
  7515  000FAE                     __ptext48:
  7516                           	opt stack 0
  7517  000FAE                     i2_SaveAll:
  7518                           	opt stack 21
  7519                           
  7520                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  7521                           
  7522                           ;incstack = 0
  7523  000FAE  C03C  F005         	movff	_SetAngle,i2EEWriteDouble@dub
  7524  000FB2  C03D  F006         	movff	_SetAngle+1,i2EEWriteDouble@dub+1
  7525  000FB6  C03E  F007         	movff	_SetAngle+2,i2EEWriteDouble@dub+2
  7526  000FBA  0E00               	movlw	0
  7527  000FBC  EC6D  F00A         	call	i2_EEWriteDouble
  7528                           
  7529                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  7530  000FC0  C0A2  F005         	movff	_Kp,i2EEWriteDouble@dub
  7531  000FC4  C0A3  F006         	movff	_Kp+1,i2EEWriteDouble@dub+1
  7532  000FC8  C0A4  F007         	movff	_Kp+2,i2EEWriteDouble@dub+2
  7533  000FCC  0E03               	movlw	3
  7534  000FCE  EC6D  F00A         	call	i2_EEWriteDouble
  7535                           
  7536                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  7537  000FD2  C09F  F005         	movff	_Ki,i2EEWriteDouble@dub
  7538  000FD6  C0A0  F006         	movff	_Ki+1,i2EEWriteDouble@dub+1
  7539  000FDA  C0A1  F007         	movff	_Ki+2,i2EEWriteDouble@dub+2
  7540  000FDE  0E06               	movlw	6
  7541  000FE0  EC6D  F00A         	call	i2_EEWriteDouble
  7542                           
  7543                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  7544  000FE4  C09C  F005         	movff	_Kd,i2EEWriteDouble@dub
  7545  000FE8  C09D  F006         	movff	_Kd+1,i2EEWriteDouble@dub+1
  7546  000FEC  C09E  F007         	movff	_Kd+2,i2EEWriteDouble@dub+2
  7547  000FF0  0E09               	movlw	9
  7548  000FF2  EC6D  F00A         	call	i2_EEWriteDouble
  7549                           
  7550                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  7551  000FF6  CF80 F005          	movff	3968,i2EEWriteChar@ch	;volatile
  7552  000FFA  0E0C               	movlw	12
  7553  000FFC  ECE8  F00C         	call	i2_EEWriteChar
  7554                           
  7555                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  7556  001000  CF81 F005          	movff	3969,i2EEWriteChar@ch	;volatile
  7557  001004  0E0D               	movlw	13
  7558  001006  ECE8  F00C         	call	i2_EEWriteChar
  7559                           
  7560                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  7561  00100A  CF82 F005          	movff	3970,i2EEWriteChar@ch	;volatile
  7562  00100E  0E0E               	movlw	14
  7563  001010  ECE8  F00C         	call	i2_EEWriteChar
  7564                           
  7565                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  7566  001014  CF83 F005          	movff	3971,i2EEWriteChar@ch	;volatile
  7567  001018  0E0F               	movlw	15
  7568  00101A  ECE8  F00C         	call	i2_EEWriteChar
  7569                           
  7570                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  7571  00101E  CF84 F005          	movff	3972,i2EEWriteChar@ch	;volatile
  7572  001022  0E10               	movlw	16
  7573  001024  ECE8  F00C         	call	i2_EEWriteChar
  7574                           
  7575                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  7576  001028  CF85 F005          	movff	3973,i2EEWriteChar@ch	;volatile
  7577  00102C  0E11               	movlw	17
  7578  00102E  ECE8  F00C         	call	i2_EEWriteChar
  7579                           
  7580                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  7581  001032  CF86 F005          	movff	3974,i2EEWriteChar@ch	;volatile
  7582  001036  0E12               	movlw	18
  7583  001038  ECE8  F00C         	call	i2_EEWriteChar
  7584                           
  7585                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  7586  00103C  CF87 F005          	movff	3975,i2EEWriteChar@ch	;volatile
  7587  001040  0E13               	movlw	19
  7588  001042  ECE8  F00C         	call	i2_EEWriteChar
  7589                           
  7590                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  7591  001046  CF88 F005          	movff	3976,i2EEWriteChar@ch	;volatile
  7592  00104A  0E14               	movlw	20
  7593  00104C  ECE8  F00C         	call	i2_EEWriteChar
  7594                           
  7595                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  7596  001050  C0B1  F005         	movff	_PIDEnableFlag,i2EEWriteChar@ch
  7597  001054  0E15               	movlw	21
  7598  001056  ECE8  F00C         	call	i2_EEWriteChar
  7599                           
  7600                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  7601  00105A  0E01               	movlw	1
  7602  00105C  6E05               	movwf	i2EEWriteChar@ch,c
  7603  00105E  0E16               	movlw	22
  7604  001060  ECE8  F00C         	call	i2_EEWriteChar
  7605  001064  0012               	return		;funcret
  7606  001066                     __end_ofi2_SaveAll:
  7607                           	opt stack 0
  7608                           pclatu	equ	0xFFB
  7609                           pclath	equ	0xFFA
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           intcon	equ	0xFF2
  7617                           postinc0	equ	0xFEE
  7618                           fsr0h	equ	0xFEA
  7619                           fsr0l	equ	0xFE9
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           fsr1h	equ	0xFE2
  7623                           fsr1l	equ	0xFE1
  7624                           indf2	equ	0xFDF
  7625                           fsr2h	equ	0xFDA
  7626                           fsr2l	equ	0xFD9
  7627                           status	equ	0xFD8
  7628                           
  7629 ;; *************** function i2_EEWriteDouble *****************
  7630 ;; Defined at:
  7631 ;;		line 77 in file "EEPROM.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;  location        1    wreg     unsigned char 
  7634 ;;  dub             3    4[COMRAM] unsigned char 
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;  location        1    7[COMRAM] unsigned char 
  7637 ;;  EEWriteDoubl    1    8[COMRAM] unsigned char 
  7638 ;; Return value:  Size  Location     Type
  7639 ;;		None               void
  7640 ;; Registers used:
  7641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7647 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;Total ram usage:        5 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    1
  7654 ;; This function calls:
  7655 ;;		i2_Busy_eep
  7656 ;;		i2_EEDisassembleDouble
  7657 ;;		i2_Write_b_eep
  7658 ;; This function is called by:
  7659 ;;		i2_SaveAll
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text49
  7664  0014DA                     __ptext49:
  7665                           	opt stack 0
  7666  0014DA                     i2_EEWriteDouble:
  7667                           	opt stack 21
  7668                           
  7669                           ;incstack = 0
  7670                           ;i2EEWriteDouble@location stored from wreg
  7671  0014DA  6E08               	movwf	i2EEWriteDouble@location,c
  7672                           
  7673                           ;EEPROM.c: 79: unsigned char x;
  7674                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  7675  0014DC  C005  F001         	movff	i2EEWriteDouble@dub,i2EEDisassembleDouble@dub
  7676  0014E0  C006  F002         	movff	i2EEWriteDouble@dub+1,i2EEDisassembleDouble@dub+1
  7677  0014E4  C007  F003         	movff	i2EEWriteDouble@dub+2,i2EEDisassembleDouble@dub+2
  7678  0014E8  ECDB  F00B         	call	i2_EEDisassembleDouble	;wreg free
  7679                           
  7680                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  7681  0014EC  50F2               	movf	intcon,w,c	;volatile
  7682  0014EE  0B3F               	andlw	63
  7683  0014F0  6EF2               	movwf	intcon,c	;volatile
  7684                           
  7685                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  7686  0014F2  0E00               	movlw	0
  7687  0014F4  6E09               	movwf	i2EEWriteDouble@x,c
  7688  0014F6                     i2l3057:
  7689  0014F6  0E02               	movlw	2
  7690  0014F8  6409               	cpfsgt	i2EEWriteDouble@x,c
  7691  0014FA  D001               	goto	i2l3061
  7692  0014FC  D014               	goto	i2l3071
  7693  0014FE                     i2l3061:
  7694                           
  7695                           ;EEPROM.c: 86: {
  7696                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  7697  0014FE  C008  F001         	movff	i2EEWriteDouble@location,i2Write_b_eep@badd
  7698  001502  6A02               	clrf	i2Write_b_eep@badd+1,c
  7699  001504  5009               	movf	i2EEWriteDouble@x,w,c
  7700  001506  0D01               	mullw	1
  7701  001508  0E39               	movlw	low _DDouble
  7702  00150A  24F3               	addwf	prodl,w,c
  7703  00150C  6ED9               	movwf	fsr2l,c
  7704  00150E  0E00               	movlw	high _DDouble
  7705  001510  20F4               	addwfc	prodh,w,c
  7706  001512  6EDA               	movwf	fsr2h,c
  7707  001514  50DF               	movf	indf2,w,c
  7708  001516  6E03               	movwf	i2Write_b_eep@bdat,c
  7709  001518  EC66  F00B         	call	i2_Write_b_eep	;wreg free
  7710                           
  7711                           ;EEPROM.c: 88: location++;
  7712  00151C  2A08               	incf	i2EEWriteDouble@location,f,c
  7713                           
  7714                           ;EEPROM.c: 89: Busy_eep();
  7715  00151E  EC67  F00D         	call	i2_Busy_eep	;wreg free
  7716  001522  2A09               	incf	i2EEWriteDouble@x,f,c
  7717  001524  D7E8               	goto	i2l3057
  7718  001526                     i2l3071:
  7719                           
  7720                           ;EEPROM.c: 90: }
  7721                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7722  001526  50F2               	movf	intcon,w,c	;volatile
  7723  001528  09C0               	iorlw	192
  7724  00152A  6EF2               	movwf	intcon,c	;volatile
  7725  00152C  0012               	return		;funcret
  7726  00152E                     __end_ofi2_EEWriteDouble:
  7727                           	opt stack 0
  7728                           pclatu	equ	0xFFB
  7729                           pclath	equ	0xFFA
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           intcon	equ	0xFF2
  7737                           postinc0	equ	0xFEE
  7738                           fsr0h	equ	0xFEA
  7739                           fsr0l	equ	0xFE9
  7740                           wreg	equ	0xFE8
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function i2_EEDisassembleDouble *****************
  7750 ;; Defined at:
  7751 ;;		line 48 in file "EEPROM.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  dub             3    0[COMRAM] unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;		None               void
  7758 ;; Registers used:
  7759 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7765 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;Total ram usage:        3 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		i2_EEWriteDouble
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text50
  7779  0017B6                     __ptext50:
  7780                           	opt stack 0
  7781  0017B6                     i2_EEDisassembleDouble:
  7782                           	opt stack 21
  7783                           
  7784                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7785                           
  7786                           ;incstack = 0
  7787  0017B6  0E01               	movlw	low i2EEDisassembleDouble@dub
  7788  0017B8  6E3F               	movwf	_DoublePtr,c
  7789  0017BA  0E00               	movlw	high i2EEDisassembleDouble@dub
  7790  0017BC  6E40               	movwf	_DoublePtr+1,c
  7791                           
  7792                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7793  0017BE  C03F  FFD9         	movff	_DoublePtr,fsr2l
  7794  0017C2  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  7795  0017C6  50DF               	movf	indf2,w,c
  7796  0017C8  6E39               	movwf	_DDouble,c
  7797                           
  7798                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7799  0017CA  EE20 F001          	lfsr	2,1
  7800  0017CE  503F               	movf	_DoublePtr,w,c
  7801  0017D0  26D9               	addwf	fsr2l,f,c
  7802  0017D2  5040               	movf	_DoublePtr+1,w,c
  7803  0017D4  22DA               	addwfc	fsr2h,f,c
  7804  0017D6  50DF               	movf	indf2,w,c
  7805  0017D8  6E3A               	movwf	_DDouble+1,c
  7806                           
  7807                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7808  0017DA  EE20 F002          	lfsr	2,2
  7809  0017DE  503F               	movf	_DoublePtr,w,c
  7810  0017E0  26D9               	addwf	fsr2l,f,c
  7811  0017E2  5040               	movf	_DoublePtr+1,w,c
  7812  0017E4  22DA               	addwfc	fsr2h,f,c
  7813  0017E6  50DF               	movf	indf2,w,c
  7814  0017E8  6E3B               	movwf	_DDouble+2,c
  7815  0017EA  0012               	return		;funcret
  7816  0017EC                     __end_ofi2_EEDisassembleDouble:
  7817                           	opt stack 0
  7818                           pclatu	equ	0xFFB
  7819                           pclath	equ	0xFFA
  7820                           tblptru	equ	0xFF8
  7821                           tblptrh	equ	0xFF7
  7822                           tblptrl	equ	0xFF6
  7823                           tablat	equ	0xFF5
  7824                           prodh	equ	0xFF4
  7825                           prodl	equ	0xFF3
  7826                           intcon	equ	0xFF2
  7827                           postinc0	equ	0xFEE
  7828                           fsr0h	equ	0xFEA
  7829                           fsr0l	equ	0xFE9
  7830                           wreg	equ	0xFE8
  7831                           postdec1	equ	0xFE5
  7832                           fsr1h	equ	0xFE2
  7833                           fsr1l	equ	0xFE1
  7834                           indf2	equ	0xFDF
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function i2_EEWriteChar *****************
  7840 ;; Defined at:
  7841 ;;		line 122 in file "EEPROM.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  location        1    wreg     unsigned char 
  7844 ;;  ch              1    4[COMRAM] unsigned char 
  7845 ;; Auto vars:     Size  Location     Type
  7846 ;;  location        1    5[COMRAM] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;		None               void
  7849 ;; Registers used:
  7850 ;;		wreg, status,2, status,0, cstack
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7856 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;Total ram usage:        2 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    1
  7863 ;; This function calls:
  7864 ;;		i2_Busy_eep
  7865 ;;		i2_Write_b_eep
  7866 ;; This function is called by:
  7867 ;;		i2_SaveAll
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           	psect	text51
  7872  0019D0                     __ptext51:
  7873                           	opt stack 0
  7874  0019D0                     i2_EEWriteChar:
  7875                           	opt stack 21
  7876                           
  7877                           ;incstack = 0
  7878                           ;i2EEWriteChar@location stored from wreg
  7879  0019D0  6E06               	movwf	i2EEWriteChar@location,c
  7880                           
  7881                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7882  0019D2  50F2               	movf	intcon,w,c	;volatile
  7883  0019D4  0B3F               	andlw	63
  7884  0019D6  6EF2               	movwf	intcon,c	;volatile
  7885                           
  7886                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7887  0019D8  C006  F001         	movff	i2EEWriteChar@location,i2Write_b_eep@badd
  7888  0019DC  6A02               	clrf	i2Write_b_eep@badd+1,c
  7889  0019DE  C005  F003         	movff	i2EEWriteChar@ch,i2Write_b_eep@bdat
  7890  0019E2  EC66  F00B         	call	i2_Write_b_eep	;wreg free
  7891                           
  7892                           ;EEPROM.c: 127: Busy_eep();
  7893  0019E6  EC67  F00D         	call	i2_Busy_eep	;wreg free
  7894                           
  7895                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7896  0019EA  50F2               	movf	intcon,w,c	;volatile
  7897  0019EC  09C0               	iorlw	192
  7898  0019EE  6EF2               	movwf	intcon,c	;volatile
  7899  0019F0  0012               	return		;funcret
  7900  0019F2                     __end_ofi2_EEWriteChar:
  7901                           	opt stack 0
  7902                           pclatu	equ	0xFFB
  7903                           pclath	equ	0xFFA
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           intcon	equ	0xFF2
  7911                           postinc0	equ	0xFEE
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           postdec1	equ	0xFE5
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           fsr2h	equ	0xFDA
  7920                           fsr2l	equ	0xFD9
  7921                           status	equ	0xFD8
  7922                           
  7923 ;; *************** function i2_Write_b_eep *****************
  7924 ;; Defined at:
  7925 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  badd            2    0[COMRAM] unsigned int 
  7928 ;;  bdat            1    2[COMRAM] unsigned char 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  Write_b_eep     1    3[COMRAM] unsigned char 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;		None               void
  7933 ;; Registers used:
  7934 ;;		wreg, status,2, status,0
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7940 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;Total ram usage:        4 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		i2_EEWriteDouble
  7950 ;;		i2_EEWriteChar
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           	psect	text52
  7955  0016CC                     __ptext52:
  7956                           	opt stack 0
  7957  0016CC                     i2_Write_b_eep:
  7958                           	opt stack 21
  7959                           
  7960                           ;incstack = 0
  7961  0016CC  0E00               	movlw	0
  7962  0016CE  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  7963  0016D0  5002               	movf	i2Write_b_eep@badd+1,w,c
  7964  0016D2  0B03               	andlw	3
  7965  0016D4  6EAA               	movwf	4010,c	;volatile
  7966  0016D6  C001  FFA9         	movff	i2Write_b_eep@badd,4009	;volatile
  7967  0016DA  C003  FFA8         	movff	i2Write_b_eep@bdat,4008	;volatile
  7968  0016DE  9EA6               	bcf	4006,7,c	;volatile
  7969  0016E0  9CA6               	bcf	4006,6,c	;volatile
  7970  0016E2  84A6               	bsf	4006,2,c	;volatile
  7971  0016E4  0E00               	movlw	0
  7972  0016E6  BEF2               	btfsc	intcon,7,c	;volatile
  7973  0016E8  0E01               	movlw	1
  7974  0016EA  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  7975  0016EC  9EF2               	bcf	intcon,7,c	;volatile
  7976  0016EE  0E55               	movlw	85
  7977  0016F0  6EA7               	movwf	4007,c	;volatile
  7978  0016F2  0EAA               	movlw	170
  7979  0016F4  6EA7               	movwf	4007,c	;volatile
  7980  0016F6  82A6               	bsf	4006,1,c	;volatile
  7981  0016F8  D000               	goto	i2l597
  7982  0016FA                     i2l597:
  7983  0016FA  B2A6               	btfsc	4006,1,c	;volatile
  7984  0016FC  D7FE               	goto	i2l597
  7985  0016FE  B004               	btfsc	i2Write_b_eep@GIE_BIT_VAL,0,c
  7986  001700  D002               	bra	i2u214_45
  7987  001702  9EF2               	bcf	intcon,7,c	;volatile
  7988  001704  D001               	bra	i2u214_46
  7989  001706                     i2u214_45:
  7990  001706  8EF2               	bsf	intcon,7,c	;volatile
  7991  001708                     i2u214_46:
  7992  001708  94A6               	bcf	4006,2,c	;volatile
  7993  00170A  0012               	return		;funcret
  7994  00170C                     __end_ofi2_Write_b_eep:
  7995                           	opt stack 0
  7996                           pclatu	equ	0xFFB
  7997                           pclath	equ	0xFFA
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           postinc0	equ	0xFEE
  8006                           fsr0h	equ	0xFEA
  8007                           fsr0l	equ	0xFE9
  8008                           wreg	equ	0xFE8
  8009                           postdec1	equ	0xFE5
  8010                           fsr1h	equ	0xFE2
  8011                           fsr1l	equ	0xFE1
  8012                           indf2	equ	0xFDF
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function i2_Busy_eep *****************
  8018 ;; Defined at:
  8019 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;		None               void
  8026 ;; Registers used:
  8027 ;;		None
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		i2_EEWriteDouble
  8043 ;;		i2_EEWriteChar
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text53
  8048  001ACE                     __ptext53:
  8049                           	opt stack 0
  8050  001ACE                     i2_Busy_eep:
  8051                           	opt stack 21
  8052                           
  8053                           ;incstack = 0
  8054  001ACE  D000               	goto	i2l566
  8055  001AD0                     i2l566:
  8056  001AD0  B2A6               	btfsc	4006,1,c	;volatile
  8057  001AD2  D7FE               	goto	i2l566
  8058  001AD4  0012               	return		;funcret
  8059  001AD6                     __end_ofi2_Busy_eep:
  8060                           	opt stack 0
  8061                           pclatu	equ	0xFFB
  8062                           pclath	equ	0xFFA
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           prodh	equ	0xFF4
  8068                           prodl	equ	0xFF3
  8069                           intcon	equ	0xFF2
  8070                           postinc0	equ	0xFEE
  8071                           fsr0h	equ	0xFEA
  8072                           fsr0l	equ	0xFE9
  8073                           wreg	equ	0xFE8
  8074                           postdec1	equ	0xFE5
  8075                           fsr1h	equ	0xFE2
  8076                           fsr1l	equ	0xFE1
  8077                           indf2	equ	0xFDF
  8078                           fsr2h	equ	0xFDA
  8079                           fsr2l	equ	0xFD9
  8080                           status	equ	0xFD8
  8081                           
  8082 ;; *************** function _TMR0Int *****************
  8083 ;; Defined at:
  8084 ;;		line 56 in file "PID.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;		None
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;		None               void
  8091 ;; Registers used:
  8092 ;;		wreg, status,2
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;Total ram usage:        0 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; This function calls:
  8105 ;;		Nothing
  8106 ;; This function is called by:
  8107 ;;		_ISR
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text54
  8112  001A92                     __ptext54:
  8113                           	opt stack 0
  8114  001A92                     _TMR0Int:
  8115                           	opt stack 23
  8116                           
  8117                           ;PID.c: 58: TMR0H = 0xDB;
  8118                           
  8119                           ;incstack = 0
  8120  001A92  0EDB               	movlw	219
  8121  001A94  6ED7               	movwf	4055,c	;volatile
  8122                           
  8123                           ;PID.c: 59: TMR0L = 0x60;
  8124  001A96  0E60               	movlw	96
  8125  001A98  6ED6               	movwf	4054,c	;volatile
  8126                           
  8127                           ;PID.c: 60: TMR0Flag = 1;
  8128  001A9A  0E01               	movlw	1
  8129  001A9C  0100               	movlb	0	; () banked
  8130  001A9E  6FB3               	movwf	_TMR0Flag& (0+255),b
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;PID.c: 61: INTCONbits.TMR0IF = 0;
  8134  001AA0  94F2               	bcf	intcon,2,c	;volatile
  8135                           
  8136                           ; BSR set to: 0
  8137  001AA2  0012               	return		;funcret
  8138  001AA4                     __end_of_TMR0Int:
  8139                           	opt stack 0
  8140                           pclatu	equ	0xFFB
  8141                           pclath	equ	0xFFA
  8142                           tblptru	equ	0xFF8
  8143                           tblptrh	equ	0xFF7
  8144                           tblptrl	equ	0xFF6
  8145                           tablat	equ	0xFF5
  8146                           prodh	equ	0xFF4
  8147                           prodl	equ	0xFF3
  8148                           intcon	equ	0xFF2
  8149                           postinc0	equ	0xFEE
  8150                           fsr0h	equ	0xFEA
  8151                           fsr0l	equ	0xFE9
  8152                           wreg	equ	0xFE8
  8153                           postdec1	equ	0xFE5
  8154                           fsr1h	equ	0xFE2
  8155                           fsr1l	equ	0xFE1
  8156                           indf2	equ	0xFDF
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _SPIInt *****************
  8162 ;; Defined at:
  8163 ;;		line 30 in file "SPISlave.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;		None               void
  8170 ;; Registers used:
  8171 ;;		wreg, status,2
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;Total ram usage:        0 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; This function calls:
  8184 ;;		Nothing
  8185 ;; This function is called by:
  8186 ;;		_ISR
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text55
  8191  001A5A                     __ptext55:
  8192                           	opt stack 0
  8193  001A5A                     _SPIInt:
  8194                           	opt stack 23
  8195                           
  8196                           ;SPISlave.c: 32: PORTCbits.RC6 = 1;
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;incstack = 0
  8200  001A5A  8C82               	bsf	3970,6,c	;volatile
  8201                           
  8202                           ;SPISlave.c: 33: INTCONbits.GIE = 0;
  8203  001A5C  9EF2               	bcf	intcon,7,c	;volatile
  8204                           
  8205                           ;SPISlave.c: 34: Command = SSP1BUF;
  8206  001A5E  CFC9 F041          	movff	4041,_Command	;volatile
  8207                           
  8208                           ;SPISlave.c: 35: PIR1bits.SSP1IF = 0;
  8209  001A62  969E               	bcf	3998,3,c	;volatile
  8210                           
  8211                           ;SPISlave.c: 36: PIE1bits.SSP1IE = 0;
  8212  001A64  969D               	bcf	3997,3,c	;volatile
  8213                           
  8214                           ;SPISlave.c: 37: SPIflag = 1;
  8215  001A66  0E01               	movlw	1
  8216  001A68  0100               	movlb	0	; () banked
  8217  001A6A  6FB2               	movwf	_SPIflag& (0+255),b
  8218                           
  8219                           ; BSR set to: 0
  8220  001A6C  0012               	return		;funcret
  8221  001A6E                     __end_of_SPIInt:
  8222                           	opt stack 0
  8223                           pclatu	equ	0xFFB
  8224                           pclath	equ	0xFFA
  8225                           tblptru	equ	0xFF8
  8226                           tblptrh	equ	0xFF7
  8227                           tblptrl	equ	0xFF6
  8228                           tablat	equ	0xFF5
  8229                           prodh	equ	0xFF4
  8230                           prodl	equ	0xFF3
  8231                           intcon	equ	0xFF2
  8232                           postinc0	equ	0xFEE
  8233                           fsr0h	equ	0xFEA
  8234                           fsr0l	equ	0xFE9
  8235                           wreg	equ	0xFE8
  8236                           postdec1	equ	0xFE5
  8237                           fsr1h	equ	0xFE2
  8238                           fsr1l	equ	0xFE1
  8239                           indf2	equ	0xFDF
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function _INT0Int *****************
  8245 ;; Defined at:
  8246 ;;		line 217 in file "RTDuC.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;		None               void
  8253 ;; Registers used:
  8254 ;;		wreg, status,2, status,0, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;Total ram usage:        0 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    1
  8267 ;; This function calls:
  8268 ;;		_KillMotors
  8269 ;; This function is called by:
  8270 ;;		_ISR
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text56
  8275  001968                     __ptext56:
  8276                           	opt stack 0
  8277  001968                     _INT0Int:
  8278                           	opt stack 22
  8279                           
  8280                           ;RTDuC.c: 219: KillMotors();
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;incstack = 0
  8284  001968  EC5E  F00D         	call	_KillMotors	;wreg free
  8285                           
  8286                           ;RTDuC.c: 220: PORTAbits.RA3 = 0;
  8287  00196C  9680               	bcf	3968,3,c	;volatile
  8288                           
  8289                           ;RTDuC.c: 221: T0CONbits.TMR0ON = 1;
  8290  00196E  8ED5               	bsf	4053,7,c	;volatile
  8291                           
  8292                           ;RTDuC.c: 222: INTCONbits.GIE = 0;
  8293  001970  9EF2               	bcf	intcon,7,c	;volatile
  8294                           
  8295                           ;RTDuC.c: 223: PORTAbits.RA4 = 1;
  8296  001972  8880               	bsf	3968,4,c	;volatile
  8297  001974  D000               	goto	i2l2137
  8298  001976                     i2l2137:
  8299                           
  8300                           ;RTDuC.c: 225: {
  8301                           ;RTDuC.c: 226: TMR0H = 0x00;
  8302  001976  0E00               	movlw	0
  8303  001978  6ED7               	movwf	4055,c	;volatile
  8304                           
  8305                           ;RTDuC.c: 227: TMR0L = 0x00;
  8306  00197A  0E00               	movlw	0
  8307  00197C  6ED6               	movwf	4054,c	;volatile
  8308                           
  8309                           ;RTDuC.c: 228: while (!INTCONbits.TMR0IF);
  8310  00197E  D000               	goto	i2l545
  8311  001980                     i2l545:
  8312  001980  A4F2               	btfss	intcon,2,c	;volatile
  8313  001982  D7FE               	goto	i2l545
  8314                           
  8315                           ;RTDuC.c: 229: INTCONbits.TMR0IF = 0;
  8316  001984  94F2               	bcf	intcon,2,c	;volatile
  8317                           
  8318                           ;RTDuC.c: 230: ~PORTAbits.RA4;
  8319  001986  5080               	movf	3968,w,c	;volatile
  8320  001988  D7F6               	goto	i2l2137
  8321  00198A  0012               	return		;funcret
  8322  00198C                     __end_of_INT0Int:
  8323                           	opt stack 0
  8324                           pclatu	equ	0xFFB
  8325                           pclath	equ	0xFFA
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           prodh	equ	0xFF4
  8331                           prodl	equ	0xFF3
  8332                           intcon	equ	0xFF2
  8333                           postinc0	equ	0xFEE
  8334                           fsr0h	equ	0xFEA
  8335                           fsr0l	equ	0xFE9
  8336                           wreg	equ	0xFE8
  8337                           postdec1	equ	0xFE5
  8338                           fsr1h	equ	0xFE2
  8339                           fsr1l	equ	0xFE1
  8340                           indf2	equ	0xFDF
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _KillMotors *****************
  8346 ;; Defined at:
  8347 ;;		line 28 in file "MotorControl.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;		None               void
  8354 ;; Registers used:
  8355 ;;		wreg, status,2, status,0
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;Total ram usage:        0 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; This function calls:
  8368 ;;		Nothing
  8369 ;; This function is called by:
  8370 ;;		_INT0Int
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text57
  8375  001ABC                     __ptext57:
  8376                           	opt stack 0
  8377  001ABC                     _KillMotors:
  8378                           	opt stack 22
  8379                           
  8380                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  8381                           
  8382                           ;incstack = 0
  8383  001ABC  8880               	bsf	3968,4,c	;volatile
  8384                           
  8385                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  8386  001ABE  50B7               	movf	4023,w,c	;volatile
  8387  001AC0  0BF0               	andlw	240
  8388  001AC2  6EB7               	movwf	4023,c	;volatile
  8389  001AC4  0012               	return		;funcret
  8390  001AC6                     __end_of_KillMotors:
  8391                           	opt stack 0
  8392  0000                     pclatu	equ	0xFFB
  8393                           pclath	equ	0xFFA
  8394                           tblptru	equ	0xFF8
  8395                           tblptrh	equ	0xFF7
  8396                           tblptrl	equ	0xFF6
  8397                           tablat	equ	0xFF5
  8398                           prodh	equ	0xFF4
  8399                           prodl	equ	0xFF3
  8400                           intcon	equ	0xFF2
  8401                           postinc0	equ	0xFEE
  8402                           fsr0h	equ	0xFEA
  8403                           fsr0l	equ	0xFE9
  8404                           wreg	equ	0xFE8
  8405                           postdec1	equ	0xFE5
  8406                           fsr1h	equ	0xFE2
  8407                           fsr1l	equ	0xFE1
  8408                           indf2	equ	0xFDF
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           pclatu	equ	0xFFB
  8413                           pclath	equ	0xFFA
  8414                           tblptru	equ	0xFF8
  8415                           tblptrh	equ	0xFF7
  8416                           tblptrl	equ	0xFF6
  8417                           tablat	equ	0xFF5
  8418                           prodh	equ	0xFF4
  8419                           prodl	equ	0xFF3
  8420                           intcon	equ	0xFF2
  8421                           postinc0	equ	0xFEE
  8422                           fsr0h	equ	0xFEA
  8423                           fsr0l	equ	0xFE9
  8424                           wreg	equ	0xFE8
  8425                           postdec1	equ	0xFE5
  8426                           fsr1h	equ	0xFE2
  8427                           fsr1l	equ	0xFE1
  8428                           indf2	equ	0xFDF
  8429                           fsr2h	equ	0xFDA
  8430                           fsr2l	equ	0xFD9
  8431                           status	equ	0xFD8
  8432                           
  8433                           	psect	rparam
  8434  0000                     pclatu	equ	0xFFB
  8435                           pclath	equ	0xFFA
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           postinc0	equ	0xFEE
  8444                           fsr0h	equ	0xFEA
  8445                           fsr0l	equ	0xFE9
  8446                           wreg	equ	0xFE8
  8447                           postdec1	equ	0xFE5
  8448                           fsr1h	equ	0xFE2
  8449                           fsr1l	equ	0xFE1
  8450                           indf2	equ	0xFDF
  8451                           fsr2h	equ	0xFDA
  8452                           fsr2l	equ	0xFD9
  8453                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      71
    BANK0           160     54      88
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SaveAll->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep
    _SPIDisassembleDouble->_GenerateChecksum

Critical Paths under _ISR in COMRAM

    i2_SaveAll->i2_EEWriteDouble
    i2_EEWriteDouble->i2_Write_b_eep
    i2_EEWriteChar->i2_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   58260
                                             51 BANK0      3     3      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                            _SaveAll
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   28053
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           0     0      0   27205
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   18813
                                             36 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     380
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5245
                                             21 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4881
                                              9 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3152
                                             31 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6747
                                              9 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                             46 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     781
                                             40 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     216
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     566
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             0     0      0     566
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     349
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      65
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      24
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SaveAll                                              0     0      0    1916
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (2) _EEWriteDouble                                        5     2      3     822
                                             27 COMRAM     5     2      3
                           _Busy_eep
                _EEDisassembleDouble
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _EEDisassembleDouble                                  3     0      3     107
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEWriteChar                                          2     1      1    1094
                                             27 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     346
                                             23 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      65
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     455
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     720
                                             40 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     324
                                             36 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     983
                                              9 COMRAM    14    14      0
                            _INT0Int
                             _SPIInt
                            _TMR0Int
                          i2_SaveAll
 ---------------------------------------------------------------------------------
 (8) i2_SaveAll                                            0     0      0     983
                      i2_EEWriteChar
                    i2_EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteDouble                                      5     2      3     459
                                              4 COMRAM     5     2      3
                         i2_Busy_eep
              i2_EEDisassembleDouble
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_EEDisassembleDouble                               3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteChar                                        2     1      1     524
                                              4 COMRAM     2     1      1
                         i2_Busy_eep
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_Write_b_eep                                       4     1      3     194
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SaveAll
     _EEWriteChar
       _Busy_eep
       _Write_b_eep
     _EEWriteDouble
       _Busy_eep
       _EEDisassembleDouble
       _Write_b_eep
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int
   i2_SaveAll
     i2_EEWriteChar
       i2_Busy_eep
       i2_Write_b_eep
     i2_EEWriteDouble
       i2_Busy_eep
       i2_EEDisassembleDouble
       i2_Write_b_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      58       5       55.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9F      32        0.0%
DATA                 0      0      9F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov  5 04:23:05 2015

      __size_of_MotorDriverInit 0024                              l31 185A                              l40 19CE  
                            l43 12B8                              l37 19B8                              l49 1320  
                            _Kd 009C                              _Ki 009F                              _Kp 00A2  
           ?_EEReassembleDouble 0018                    ___ftadd@exp1 0074                    ___ftadd@exp2 0073  
     ImplementJSMotion@CCPinput 008C                    ___ftadd@sign 0072                             l109 09C6  
                           l149 0480                             l270 18EC                             l510 017A  
                           l271 18E4                             l263 1842                             l264 1836  
                           l504 011E                             l353 12B2                             l505 0202  
                           l274 18F8                             l530 187C                             l506 01FA  
                           l283 168A                             l187 138C                             l188 1396  
                           l508 0146                             l197 177E                             l189 13D8  
                           l622 140E                             l287 1648                             l375 1A10  
                           l359 1604                             l623 1428                             l624 1410  
                           l616 13EE                             l369 1484                             l625 1414  
                           l618 13F2                             l619 13F4                             l557 0CD6  
                           l566 1AC8                             l582 1A44                             l676 18C8  
                           l677 18D0                             l597 16BA                             l870 1AA6  
                           l872 1AAE                             l865 1A7E                             l858 1A90  
                           l962 0EF4                             l973 0ECC                             _PR2 000FCB  
                           _ISR 0008                             _abs 18A6            __size_of_Write_b_eep 0040  
                           prod 000FF3                             wreg 000FE8         ??i2_EEDisassembleDouble 0004  
                          ?_ISR 0001                 __end_of_INT0Int 198C                    ___ftdiv@cntr 0029  
                    _Delay1TCYx 1AA4                    ___ftdiv@sign 002E                    __CFG_WDT$OFF 000000  
                          l1002 067E                            l1003 0892                            l1006 06B8  
                          l1008 06E2                            l1017 07C6                            l1034 0E2E  
                          l1026 07F0                            l1043 1242                            ?_abs 0084  
                          l1037 0DFA                            l1070 0AF8                            l1049 0C28  
                          l1066 157C                            l3011 14A2                            l1059 1936  
                          l3111 1316                            l3103 1306                            l3015 14AA  
                          l3025 14D2                            l1199 191E                            l2551 1444  
                          l2529 1A82                            l3505 0EE6                            l2801 1390  
                          l2713 0A76                            l2547 143C                            l3523 06C6  
                          l2731 0AE6                            l2723 0AA8                            l3701 10A8  
                          l3517 068C                            l2725 0ABA                            l2717 0A8A  
                          l2559 146C                            l3615 0DD4                            l2671 11E0  
                          l3551 0776                            l2719 0A92                            l2727 0AC8  
                          l2841 1418                            l3705 10C0                            l3481 0E50  
                          l3641 0B54                            l3625 0E08                            l2681 123E  
                          l3545 074A                            l3529 06D8                            l3721 0430  
                          l2931 1868                            l3491 0EB4                            l3483 0E5C  
                          l3635 0B22                            l2675 1212                            l3547 075A  
                          l3539 071A                            l3715 03A8                            l2837 13F8  
                          l3493 0EC0                            l3485 0E7C                            l3477 0E40  
                          l3637 0B46                            l3565 081C                            l3557 07A6  
                          l3549 076A                            l3901 01BA                            l3663 0BC8  
                          l3655 0B98                            l3591 0D86                            l3575 086C  
                          l3559 07B6                            l2695 09F2                            l3727 0514  
                          l3743 0C90                            l3761 08B4                            l2785 1A70  
                          l3489 0E94                            l3673 0C02                            l3665 0BD0  
                          l3681 1552                            l3753 0D16                            l3905 01D4  
                          l3499 0ED4                            l3659 0BB0                            l3595 0D94  
                          l3851 00D4                            l3843 00A0                            l3835 006C  
                          l3819 0034                            l3765 08D2                            l3693 107E  
                          l3669 0BE8                            l3589 0D6C                            l3909 01EE  
                          l3917 0212                            l3783 0966                            l3767 08DA  
                          l2975 165E                            l2991 1686                            l3951 02B6  
                          l3935 024A                            l3863 00FA                            l3847 00BA  
                          l3855 00EE                            l3839 0086                            l2985 1682  
                          l3697 109E                            l3779 092E                            l2979 166A  
                          l3971 0320                            l3883 015C                            l3867 0116  
                          l3869 0128                            l3879 014E                            l3897 01A0  
                          u2115 16C6                            u2116 16C8                            u3101 0D7C  
                          u3131 0B0E                            u3230 10BC                            u3151 0B36  
                          u3081 0D5E                            u1901 09DE                            u1920 0A18  
                          u1925 0A0E                            u2861 062C                            u2871 064A  
                          u3667 1A72                            u3677 1A84                 __end_of_PIDInit 15C2  
ImplementJSMotion@JoystickValue 0088            ??_EEReassembleDouble 001B                    EEReadChar@ch 001B  
               __end_of_TMR0Int 1AA4                            abs@a 0084                            _main 001C  
                  ___ftpack@arg 0018                     _DeadbandLow 0045                    ___ftpack@exp 001B  
               __end_of_RTDInit 181C                 __end_of_SPIInit 1A2C                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          pclat 000FFA                  ??_EEReadDouble 0021          __size_ofi2_Write_b_eep 0040  
                          prodh 000FF4                            prodl 000FF3                            start 0018  
           __size_of_EEPROMInit 0014                    ?_EEWriteChar 001C                    ___ftmul@cntr 0067  
                  ___param_bank 000010                    ___ftmul@sign 0068   __size_of_InitializeInterrupts 000C  
                         ??_ISR 000A                     _Delay10TCYx 1A80                __end_of_EEBootUp 12B4  
                  ___fttol@exp1 0083                           ??_abs 0086                 __end_of_SaveAll 0FAE  
                  ___fttol@lval 007F                     _Delay1KTCYx 1A6E                 i2EEWriteChar@ch 0005  
                   ReadRTDpos@x 0022               RTD2Angle@RTDAngle 0069                           ?_main 0001  
                         _EEADR 000FA9                 __end_of___ftadd 0894                 __end_of___ftdiv 0E30  
               __end_of___ftneg 1944                 __end_of___ftmul 0C2A                           _T0CON 000FD5  
               __end_of___ftsub 157E                 __end_of___fttol 0AFA                           _T2CON 000FCA  
                         _T3CON 000FB1                           i2l541 1174                           i2l545 1980  
                         i2l566 1AD0                           i2l597 16FA              __size_of_RTD2Angle 0038  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR1L 000FCE                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001D                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 001B  
                  _DeadbandHigh 0043                           _error 00A5                   ___ftpack@sign 001C  
                    _DoubleSPIS 0035                           main@x 0095                   ??_ReceiveSPI1 0018  
                         tablat 000FF5              __size_ofi2_SaveAll 00B8                     ?i2_Busy_eep 0001  
                         status 000FD8                   EEReadDouble@x 0022      __size_of_ImplementJSMotion 0134  
         EEWriteDouble@location 001F             GenerateChecksum@sum 0018                      _ReadRTDpos 137E  
                    _KillMotors 1ABC                 __initialization 1322                    __end_of_main 0360  
                _DetectJoystick 19AE                  _DetectMovement 12B4                      _Read_b_eep 1A2C  
              __end_of_Busy_eep 1ACE           EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000  
              __end_of_SendSPI1 184C                __end_of_OpenSPI1 1430                          ??_main 0035  
                 ___fttol@sign1 007E                   __activetblptr 000003               ??_MotorDriverInit 0018  
       DetectMovement@ADCresult 001D                   i2_Write_b_eep 16CC                       ??_INT0Int 0001  
                     ??_PIDInit 0018                       ??_TMR0Int 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                       ??_RTDInit 0019  
                        _EEDATA 000FA8                     ?_Delay1TCYx 0001                       ??_SPIInit 001B  
                        _CCPR3L 000FB8                          _EECON2 000FA7                __end_of___ftpack 0EF6  
         __size_of_calculatePID 02B6                          i2l2137 1976                          i2l3061 14FE  
                        i2l3071 1526                          i2l3057 14F6                          i2l3463 115C  
                        i2l3455 1148                          i2l3459 1152                          i2l3469 116C  
                        _INTCON 000FF2                __end_of___lwtoft 1920                i2EEWriteDouble@x 0009  
                        _SPIInt 1A5A               __end_of_RTD2Angle 1780           i2EEWriteChar@location 0006  
           __end_of_ReceiveSPI1 18FA                       ??_SaveAll 0021          __end_of_DetectJoystick 19D0  
        __end_of_DetectMovement 1322                OpenSPI1@bus_mode 0018                   _EEWriteDouble 1486  
                        ___ftge 11AE                       ??___ftadd 006F                       ??___ftdiv 0026  
                     ??___ftneg 001B                       ??___ftmul 0060                       ??___ftsub 0035  
                     ??___fttol 0079                          _intErr 00A8                          clear_0 1328  
                        clear_1 1334               __end_ofi2_SaveAll 1066                  ?i2_Write_b_eep 0001  
           __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0064                    ??_EEPROMInit 0023  
   __size_of_ImplementPIDMotion 00A8        __size_ofi2_EEWriteDouble 0054                    __pdataCOMRAM 0043  
                  _calculatePID 0360            __end_of_EEReadDouble 1486               _calculatePID$3351 008D  
             _calculatePID$3352 0090                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8               ?_GenerateChecksum 0001                       ?_EEBootUp 0001  
                    __accesstop 0060         __end_of__initialization 1378              ??_GenerateChecksum 0018  
                    ___ftadd@f1 0069                      ___ftadd@f2 006C                      ___ftge@ff1 0018  
                    ___ftge@ff2 001B                      _ZeroMotors 0C2A                   ___rparam_used 000001  
                    ___ftdiv@f1 0020                      ___ftdiv@f2 0023                      ___ftdiv@f3 002A  
            EEReadChar@location 001A                      ___ftneg@f1 0018                     ?_ReadRTDpos 0019  
                   ?_KillMotors 0001                    ??_EEReadChar 001A                  ?_EEWriteDouble 001C  
                    ___ftmul@f1 002F                      ___ftmul@f2 0032                 ?_DetectJoystick 0001  
               ?_DetectMovement 0018              __end_of_EEPROMInit 1A5A                      ___ftsub@f1 0075  
                    ___ftsub@f2 0078                      ___fttol@f1 0075                  __pcstackCOMRAM 0001  
   __end_of_EEDisassembleDouble 17B6                    __pidataBANK0 1ADB            __size_of_EEWriteChar 0022  
                   ?_Read_b_eep 0018             __size_of_Delay1TCYx 000C               GenerateChecksum@y 0019  
                    ___lwtoft@c 0020    __size_of_SPIReassembleDouble 0044          __size_ofi2_EEWriteChar 0022  
            __end_of_EEReadChar 1A12  __size_ofi2_EEDisassembleDouble 0036   __end_ofi2_EEDisassembleDouble 17EC  
                    __pbssBANK0 0096                     _ReceiveSPI1 18D2                      ??_EEBootUp 0023  
                     ?_Busy_eep 0001         i2EEWriteDouble@location 0008                   ?_JoystickInit 0001  
                       ?_SPIInt 0001                       ?_SendSPI1 0001                       ?_OpenSPI1 0018  
                       ?___ftge 0018                    ?_Delay10TCYx 0001                  EEWriteDouble@x 0020  
                       _CCP3CON 000FB7                    ?_Delay1KTCYx 0001                 ??i2_Write_b_eep 0004  
      i2EEDisassembleDouble@dub 0001                       ?___ftpack 0018                   ??_Write_b_eep 001B  
                     ?___lwtoft 0020                         _HLVDCON 000FD2                         _INT0Int 1968  
  __end_of_InitializeInterrupts 1ABC                         _PIDInit 157E                         _DDouble 0039  
           __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A                   _PIDEnableFlag 00B1  
                       _SSP1BUF 000FC9                         _TMR0Int 1A92      ImplementPIDMotion@PIDValue 0088  
                       _RTDInit 17EC                         _SPIInit 1A12               ??i2_EEWriteDouble 0008  
                       _SPIflag 00B2                EEWriteDouble@dub 001C             __size_of_Read_b_eep 001A  
                ??_JoystickInit 0018                    ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044  
                    ??_Busy_eep 0018                         _Command 0041                     ?_ZeroMotors 0001  
               __size_of_SPIInt 0014                      ??_SendSPI1 0018                 ??_EEWriteDouble 001F  
                    ??_OpenSPI1 001A             EEWriteChar@location 001D                         _SaveAll 0EF6  
                       __Hparam 0000                         __Lparam 0000                 _MotorDriverInit 1944  
                 i2_EEWriteChar 19D0                 __size_of___ftge 0096                         ___ftadd 0616  
                       ___ftdiv 0D4E                         ___ftneg 1920                         ___ftmul 0AFA  
                       ___ftsub 152E                         ___fttol 09C8                      _dummy_byte 00B4  
         __size_of_EEReadDouble 0056                    SendSPI1@data 0019                         __pcinit 1322  
                    ??___ftpack 001D                 Delay10TCYx@unit 0018                         __ramtop 1000  
                    _initialize 187A                    SendSPI1@temp 0018                         __ptext0 001C  
                       __ptext1 187A                         __ptext2 0C2A                         __ptext3 0360  
                       __ptext4 09C8                         __ptext5 152E                         __ptext6 0616  
                       __ptext7 1920                         __ptext8 11AE                         __ptext9 0D4E  
                    ??___lwtoft 0023                       _T0CONbits 000FD5                    __size_of_ISR 11A6  
                     _T1CONbits 000FCD                    __size_of_abs 002C              __end_ofi2_Busy_eep 1AD6  
             i2Write_b_eep@badd 0001               i2Write_b_eep@bdat 0003                         _prevErr 00AB  
 __size_of_SPIDisassembleDouble 003C             __end_of_Write_b_eep 16CC                    ??_Delay1TCYx 0018  
                __pintcode_body 110E            end_of_initialization 1378                         int_func 110E  
             OpenSPI1@smp_phase 0019                    _EEReadDouble 1430                  ?i2_EEWriteChar 0005  
         ReadRTDpos@LowPosition 001F                      _timer1High 0047                         postdec1 000FE5  
                    _motorInput 00AE                       _RTD2Angle 1748                         postinc0 000FEE  
             OpenSPI1@sync_mode 001A              __end_of_Delay1TCYx 1AB0                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _PORTCbits 000F82                       _PORTEbits 000F84  
                     _PORTJbits 000F88        i2Write_b_eep@GIE_BIT_VAL 0004             __size_of_ZeroMotors 0124  
                     i2_SaveAll 0FAE                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                       _TRISEbits 000F96                       _TRISFbits 000F97  
                     _TRISGbits 000F98                       _TRISJbits 000F9A         __end_of_MotorDriverInit 1968  
              ??_DetectJoystick 0018                ??_DetectMovement 001A                     ___ftdiv@exp 002D  
             __size_of_EEBootUp 0070             _SPIReassembleDouble 1606                     _CCP3CONbits 000FB7  
                __end_of_SPIInt 1A6E                    ??_ReadRTDpos 001B                    ??_KillMotors 0001  
                   ___ftmul@exp 0063            _InitializeInterrupts 1AB0                      ?_RTD2Angle 0069  
     __size_of_GenerateChecksum 0042                    ??_Read_b_eep 001A                  __end_of___ftge 1244  
          __size_of_Delay10TCYx 0012                   __pidataCOMRAM 1AD6      __end_of_ImplementPIDMotion 110E  
                   ?_initialize 0001                     _Write_b_eep 168C            __end_of_JoystickInit 187A  
          __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 0018                       _DoublePtr 003F  
                    ?i2_SaveAll 0001             start_initialization 1322                 _CurrentVelocity 0099  
                  _CurrentAngle 0096                     __end_of_ISR 11AE                     __end_of_abs 18D2  
            __end_of_ReadRTDpos 13DA              __end_of_KillMotors 1AC6                    ?_ReceiveSPI1 0001  
            __end_of_Read_b_eep 1A46            EEReadDouble@location 0021                        ??_SPIInt 0001  
               ??i2_EEWriteChar 0006               __size_of_Busy_eep 0008            calculatePID@setpoint 0087  
                 ??_EEWriteChar 001D          ReadRTDpos@HighPosition 001E               __size_of_SendSPI1 0030  
             __size_of_OpenSPI1 0056           ?_InitializeInterrupts 0001                        ??___ftge 001E  
                   __pdataBANK0 00B5           ??_SPIReassembleDouble 001B                 i2_EEWriteDouble 14DA  
  __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6                        ?_INT0Int 0001  
                   __pbssCOMRAM 0035               __size_of___lwtoft 0026                   __pcstackBANK0 0060  
                      ?_PIDInit 0001                        ?_TMR0Int 0001              calculatePID@derErr 008A  
                      ?_RTDInit 0001                        ?_SPIInit 0001                 Delay1KTCYx@unit 0018  
              ?_MotorDriverInit 0001           i2_EEDisassembleDouble 17B6                    ??_ZeroMotors 0035  
           __size_of_initialize 002C          SPIReassembleDouble@dub 001B                   EEWriteChar@ch 001C  
                      ?_SaveAll 0001                       __pintcode 0008                     ??_RTD2Angle 0035  
                      ?___ftadd 0069                        ?___ftdiv 0020                        ?___ftneg 0018  
                      ?___ftmul 002F                        ?___ftsub 0075                        ?___fttol 0075  
           __end_of_EEWriteChar 19AE           __end_ofi2_Write_b_eep 170C                     ??i2_SaveAll 000A  
            __end_of_ZeroMotors 0D4E      __end_of_EEReassembleDouble 1606                        _EEBootUp 1244  
                      _IPR2bits 000FA2                        _PIE1bits 000F9D                        _PIE2bits 000FA0  
            i2EEWriteDouble@dub 0005          ??_InitializeInterrupts 0018           __end_of_EEWriteDouble 14DA  
                      i2u214_45 1706                        i2u214_46 1708    __end_of_SPIDisassembleDouble 1748  
                      _PIR1bits 000F9E                        _PIR2bits 000FA1                       _timer1Low 0042  
       __end_ofi2_EEWriteDouble 152E           __size_of_JoystickInit 002E                        _SSP1CON1 000FC6  
                      _TMR0Flag 00B3                _GenerateChecksum 164A                        _SSP1STAT 000FC7  
                    _ADCON0bits 000FC2                 Write_b_eep@badd 0018                 Write_b_eep@bdat 001A  
                 ?_calculatePID 0084                       main@dtime 0094                       main@trash 0093  
              __size_of_INT0Int 0024                __size_of_PIDInit 0044                __size_of_TMR0Int 0012  
                     copy_data0 136C                __size_of_RTDInit 0030                __size_of_SPIInit 001A  
        ?i2_EEDisassembleDouble 0001                        _Busy_eep 1AC6            __size_of_ReceiveSPI1 0028  
                  _JoystickInit 184C                        _SendSPI1 181C                      _EECON1bits 000FA6  
                      _SetAngle 003C                        _OpenSPI1 13DA          ReadRTDpos@FullPosition 0020  
                      __Hrparam 0000                     _EEWriteChar 198C                        __Lrparam 0000  
              __size_of_SaveAll 00B8                    _JSEnableFlag 00B0                __size_of___ftadd 027E  
              __size_of___ftdiv 00E2                __size_of___ftneg 0024                __size_of___ftmul 0130  
              __size_of___ftsub 0050                __size_of___fttol 0132                    ??_initialize 0035  
                      ___ftpack 0E30                    ?_Write_b_eep 0018               calculatePID@angle 0084  
                ??_calculatePID 0035                        ___lwtoft 18FA                      _EEPROMInit 1A46  
                      __ptext10 137E                        __ptext11 1748                        __ptext20 1A6E  
                      __ptext12 18FA                        __ptext21 1A80                        __ptext13 0AFA  
                      __ptext30 19F2                        __ptext22 157E                        __ptext14 0E30  
                      __ptext31 1A2C                        __ptext23 1944                        __ptext15 1066  
                      __ptext40 170C                        __ptext32 181C                        __ptext24 184C  
                      __ptext16 1A12                        __ptext41 164A                        __ptext33 0EF6  
                      __ptext25 1AB0                        __ptext17 13DA                        __ptext50 17B6  
                      __ptext42 18D2                        __ptext34 1486                        __ptext26 1A46  
                      __ptext18 17EC                        __ptext51 19D0                        __ptext43 0894  
                      __ptext35 1780                        __ptext27 1244                        __ptext19 1AA4  
                      __ptext52 16CC                        __ptext44 18A6                        __ptext36 198C  
                      __ptext28 1430                        __ptext53 1ACE                        __ptext45 12B4  
                      __ptext37 168C                        __ptext29 15C2                        __ptext54 1A92  
                      __ptext46 19AE                        __ptext38 1AC6                        __ptext55 1A5A  
                      __ptext39 1606                        __ptext56 1968                        __ptext48 0FAE  
                      __ptext57 1ABC                        __ptext49 14DA                    _SSP1CON1bits 000FC6  
            _ImplementPIDMotion 1066                   __size_of_main 0344             _EEDisassembleDouble 1780  
                Delay1TCYx@unit 0018             ?_ImplementPIDMotion 0088              __end_of_initialize 18A6  
                      _loopTime 00B5                      _EEReadChar 19F2                   ??_Delay10TCYx 0018  
              ?i2_EEWriteDouble 0005                   ??_Delay1KTCYx 0018                    _SSP1STATbits 000FC7  
          ?_EEDisassembleDouble 0018            ??_ImplementPIDMotion 008A                      _INTCONbits 000FF2  
          _SPIDisassembleDouble 170C                        intlevel2 0000                      _OSCCONbits 000FD3  
  DetectMovement@JoystickResult 001B               _ImplementJSMotion 0894           __end_ofi2_EEWriteChar 19F2  
   __end_of_SPIReassembleDouble 164A              ?_ImplementJSMotion 0088         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 006E           ??_EEDisassembleDouble 001B             __end_of_Delay10TCYx 1A92  
           ??_ImplementJSMotion 008A          EEDisassembleDouble@dub 0018                     ?_EEPROMInit 0001  
           __end_of_Delay1KTCYx 1A80           ?_SPIDisassembleDouble 001A        __end_of_GenerateChecksum 168C  
                    i2_Busy_eep 1ACE         SPIDisassembleDouble@dub 001A       __end_of_ImplementJSMotion 09C8  
          __end_of_calculatePID 0616                   ?_EEReadDouble 001E                     ?_EEReadChar 0001  
            _EEReassembleDouble 15C2  
