

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Nov  6 05:59:57 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  001C20                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _DeadbandHigh
    81  001C20  00C8               	dw	200
    82                           
    83                           ;initializer for _DeadbandLow
    84  001C22  FF38               	dw	65336
    85                           
    86                           ;initializer for _timer1High
    87  001C24  C0                 	db	192
    88                           
    89                           	psect	idataBANK0
    90  001C25                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _loopTime
    94                           ;PID.c: 5: unsigned char PIDEnableFlag;
    95                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    96                           ;PID.c: 7: double Ki;
    97                           ;PID.c: 8: double Kp;
    98                           ;PID.c: 9: double Kd;
    99                           ;PID.c: 10: double SetAngle;
   100                           ;PID.c: 11: double CurrentAngle;
   101                           ;PID.c: 12: double error;
   102                           ;PID.c: 13: double prevErr;
   103                           ;PID.c: 14: double intErr;
   104                           ;PID.c: 15: int motorInput;
   105  001C25  C3                 	db	195
   106  001C26  F5                 	db	245
   107  001C27  3C                 	db	60
   108  0000                     _ADCON0	set	4034
   109  0000                     _ADCON0bits	set	4034
   110  0000                     _ADCON1	set	4033
   111  0000                     _ADCON2	set	4032
   112  0000                     _ADRESH	set	4036
   113  0000                     _ADRESL	set	4035
   114  0000                     _CCP3CON	set	4023
   115  0000                     _CCP3CONbits	set	4023
   116  0000                     _CCPR3L	set	4024
   117  0000                     _EEADR	set	4009
   118  0000                     _EEADRH	set	4010
   119  0000                     _EECON1bits	set	4006
   120  0000                     _EECON2	set	4007
   121  0000                     _EEDATA	set	4008
   122  0000                     _HLVDCON	set	4050
   123  0000                     _INTCON	set	4082
   124  0000                     _INTCONbits	set	4082
   125  0000                     _IPR2bits	set	4002
   126  0000                     _OSCCONbits	set	4051
   127  0000                     _PIE1bits	set	3997
   128  0000                     _PIE2bits	set	4000
   129  0000                     _PIR1bits	set	3998
   130  0000                     _PIR2bits	set	4001
   131  0000                     _PORTA	set	3968
   132  0000                     _PORTAbits	set	3968
   133  0000                     _PORTB	set	3969
   134  0000                     _PORTBbits	set	3969
   135  0000                     _PORTC	set	3970
   136  0000                     _PORTCbits	set	3970
   137  0000                     _PORTD	set	3971
   138  0000                     _PORTE	set	3972
   139  0000                     _PORTEbits	set	3972
   140  0000                     _PORTF	set	3973
   141  0000                     _PORTG	set	3974
   142  0000                     _PORTH	set	3975
   143  0000                     _PORTJ	set	3976
   144  0000                     _PORTJbits	set	3976
   145  0000                     _PR2	set	4043
   146  0000                     _SSP1BUF	set	4041
   147  0000                     _SSP1CON1	set	4038
   148  0000                     _SSP1CON1bits	set	4038
   149  0000                     _SSP1STAT	set	4039
   150  0000                     _SSP1STATbits	set	4039
   151  0000                     _T0CON	set	4053
   152  0000                     _T0CONbits	set	4053
   153  0000                     _T1CONbits	set	4045
   154  0000                     _T2CON	set	4042
   155  0000                     _T3CON	set	4017
   156  0000                     _TMR0H	set	4055
   157  0000                     _TMR0L	set	4054
   158  0000                     _TMR1H	set	4047
   159  0000                     _TMR1L	set	4046
   160  0000                     _TRISAbits	set	3986
   161  0000                     _TRISBbits	set	3987
   162  0000                     _TRISCbits	set	3988
   163  0000                     _TRISD	set	3989
   164  0000                     _TRISEbits	set	3990
   165  0000                     _TRISFbits	set	3991
   166  0000                     _TRISGbits	set	3992
   167  0000                     _TRISH	set	3993
   168  0000                     _TRISJbits	set	3994
   169                           
   170                           ; #config settings
   171  0000                     
   172                           	psect	cinit
   173  00146C                     __pcinit:
   174                           	opt stack 0
   175  00146C                     start_initialization:
   176                           	opt stack 0
   177  00146C                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK0 (31 bytes)
   181  00146C  EE00  F0A0         	lfsr	0,__pbssBANK0
   182  001470  0E1F               	movlw	31
   183  001472                     clear_0:
   184  001472  6AEE               	clrf	postinc0,c
   185  001474  06E8               	decf	wreg,f,c
   186  001476  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to COMRAM (14 bytes)
   189  001478  EE00  F035         	lfsr	0,__pbssCOMRAM
   190  00147C  0E0E               	movlw	14
   191  00147E                     clear_1:
   192  00147E  6AEE               	clrf	postinc0,c
   193  001480  06E8               	decf	wreg,f,c
   194  001482  E1FD               	bnz	clear_1
   195                           
   196                           ; Initialize objects allocated to BANK0 (3 bytes)
   197                           ; load TBLPTR registers with __pidataBANK0
   198  001484  0E25               	movlw	low __pidataBANK0
   199  001486  6EF6               	movwf	tblptrl,c
   200  001488  0E1C               	movlw	high __pidataBANK0
   201  00148A  6EF7               	movwf	tblptrh,c
   202  00148C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   203  00148E  6EF8               	movwf	tblptru,c
   204  001490  0009               	tblrd		*+	;fetch initializer
   205  001492  CFF5 F0BF          	movff	tablat,__pdataBANK0
   206  001496  0009               	tblrd		*+	;fetch initializer
   207  001498  CFF5 F0C0          	movff	tablat,__pdataBANK0+1
   208  00149C  0009               	tblrd		*+	;fetch initializer
   209  00149E  CFF5 F0C1          	movff	tablat,__pdataBANK0+2
   210                           
   211                           ; Initialize objects allocated to COMRAM (5 bytes)
   212                           ; load TBLPTR registers with __pidataCOMRAM
   213  0014A2  0E20               	movlw	low __pidataCOMRAM
   214  0014A4  6EF6               	movwf	tblptrl,c
   215  0014A6  0E1C               	movlw	high __pidataCOMRAM
   216  0014A8  6EF7               	movwf	tblptrh,c
   217  0014AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   218  0014AC  6EF8               	movwf	tblptru,c
   219  0014AE  EE00  F043         	lfsr	0,__pdataCOMRAM
   220  0014B2  EE10 F005          	lfsr	1,5
   221  0014B6                     copy_data0:
   222  0014B6  0009               	tblrd		*+
   223  0014B8  CFF5 FFEE          	movff	tablat,postinc0
   224  0014BC  50E5               	movf	postdec1,w,c
   225  0014BE  50E1               	movf	fsr1l,w,c
   226  0014C0  E1FA               	bnz	copy_data0
   227  0014C2                     end_of_initialization:
   228                           	opt stack 0
   229  0014C2                     __end_of__initialization:
   230                           	opt stack 0
   231  0014C2  0100               	movlb	0
   232  0014C4  EF0E  F002         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           postdec1	equ	0xFE5
   240                           fsr1l	equ	0xFE1
   241                           
   242                           	psect	bssCOMRAM
   243  000035                     __pbssCOMRAM:
   244                           	opt stack 0
   245  000035                     _DoubleSPIS:
   246                           	opt stack 0
   247  000035                     	ds	4
   248  000039                     _DDouble:
   249                           	opt stack 0
   250  000039                     	ds	3
   251  00003C                     _SetAngle:
   252                           	opt stack 0
   253  00003C                     	ds	3
   254  00003F                     _DoublePtr:
   255                           	opt stack 0
   256  00003F                     	ds	2
   257  000041                     _Command:
   258                           	opt stack 0
   259  000041                     	ds	1
   260  000042                     _timer1Low:
   261                           	opt stack 0
   262  000042                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	dataCOMRAM
   273  000043                     __pdataCOMRAM:
   274                           	opt stack 0
   275  000043                     _DeadbandHigh:
   276                           	opt stack 0
   277  000043                     	ds	2
   278  000045                     _DeadbandLow:
   279                           	opt stack 0
   280  000045                     	ds	2
   281  000047                     _timer1High:
   282                           	opt stack 0
   283  000047                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	bssBANK0
   294  0000A0                     __pbssBANK0:
   295                           	opt stack 0
   296  0000A0                     _CurrentAngle:
   297                           	opt stack 0
   298  0000A0                     	ds	3
   299  0000A3                     _CurrentVelocity:
   300                           	opt stack 0
   301  0000A3                     	ds	3
   302  0000A6                     _Kd:
   303                           	opt stack 0
   304  0000A6                     	ds	3
   305  0000A9                     _Ki:
   306                           	opt stack 0
   307  0000A9                     	ds	3
   308  0000AC                     _Kp:
   309                           	opt stack 0
   310  0000AC                     	ds	3
   311  0000AF                     _error:
   312                           	opt stack 0
   313  0000AF                     	ds	3
   314  0000B2                     _intErr:
   315                           	opt stack 0
   316  0000B2                     	ds	3
   317  0000B5                     _prevErr:
   318                           	opt stack 0
   319  0000B5                     	ds	3
   320  0000B8                     _motorInput:
   321                           	opt stack 0
   322  0000B8                     	ds	2
   323  0000BA                     _JSEnableFlag:
   324                           	opt stack 0
   325  0000BA                     	ds	1
   326  0000BB                     _PIDEnableFlag:
   327                           	opt stack 0
   328  0000BB                     	ds	1
   329  0000BC                     _SPIflag:
   330                           	opt stack 0
   331  0000BC                     	ds	1
   332  0000BD                     _TMR0Flag:
   333                           	opt stack 0
   334  0000BD                     	ds	1
   335  0000BE                     _dummy_byte:
   336                           	opt stack 0
   337  0000BE                     	ds	1
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	dataBANK0
   348  0000BF                     __pdataBANK0:
   349                           	opt stack 0
   350  0000BF                     _loopTime:
   351                           	opt stack 0
   352  0000BF                     	ds	3
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	cstackBANK0
   363  000060                     __pcstackBANK0:
   364                           	opt stack 0
   365  000060                     ??___ftmul:
   366                           
   367                           ; 0 bytes @ 0x0
   368  000060                     	ds	3
   369  000063                     ___ftmul@exp:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x3
   373  000063                     	ds	1
   374  000064                     ___ftmul@f3_as_product:
   375                           	opt stack 0
   376                           
   377                           ; 3 bytes @ 0x4
   378  000064                     	ds	3
   379  000067                     ___ftmul@cntr:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x7
   383  000067                     	ds	1
   384  000068                     ___ftmul@sign:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x8
   388  000068                     	ds	1
   389  000069                     ?___ftadd:
   390                           	opt stack 0
   391  000069                     ?_RTD2Angle:
   392                           	opt stack 0
   393  000069                     RTD2Angle@RTDAngle:
   394                           	opt stack 0
   395  000069                     ___ftadd@f1:
   396                           	opt stack 0
   397                           
   398                           ; 3 bytes @ 0x9
   399  000069                     	ds	3
   400  00006C                     ___ftadd@f2:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0xC
   404  00006C                     	ds	3
   405  00006F                     ??___ftadd:
   406                           
   407                           ; 0 bytes @ 0xF
   408  00006F                     	ds	3
   409  000072                     ___ftadd@sign:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x12
   413  000072                     	ds	1
   414  000073                     ___ftadd@exp2:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x13
   418  000073                     	ds	1
   419  000074                     ___ftadd@exp1:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x14
   423  000074                     	ds	1
   424  000075                     ?___ftsub:
   425                           	opt stack 0
   426  000075                     ?___fttol:
   427                           	opt stack 0
   428  000075                     ___ftsub@f1:
   429                           	opt stack 0
   430  000075                     ___fttol@f1:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x15
   434  000075                     	ds	3
   435  000078                     ___ftsub@f2:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x18
   439  000078                     	ds	1
   440  000079                     ??___fttol:
   441                           
   442                           ; 0 bytes @ 0x19
   443  000079                     	ds	5
   444  00007E                     ___fttol@sign1:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x1E
   448  00007E                     	ds	1
   449  00007F                     ___fttol@lval:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x1F
   453  00007F                     	ds	4
   454  000083                     ___fttol@exp1:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x23
   458  000083                     	ds	1
   459  000084                     ?_abs:
   460                           	opt stack 0
   461  000084                     abs@a:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x24
   465  000084                     	ds	2
   466  000086                     ??_abs:
   467                           
   468                           ; 0 bytes @ 0x26
   469  000086                     	ds	2
   470  000088                     ImplementPIDMotion@PIDValue:
   471                           	opt stack 0
   472  000088                     ImplementJSMotion@JoystickValue:
   473                           	opt stack 0
   474  000088                     calculatePID@angle:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x28
   478  000088                     	ds	2
   479  00008A                     ??_ImplementPIDMotion:
   480  00008A                     ??_ImplementJSMotion:
   481                           
   482                           ; 0 bytes @ 0x2A
   483  00008A                     	ds	1
   484  00008B                     calculatePID@setpoint:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x2B
   488  00008B                     	ds	1
   489  00008C                     ImplementJSMotion@CCPinput:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x2C
   493  00008C                     	ds	2
   494  00008E                     _calculatePID$3353:
   495                           	opt stack 0
   496                           
   497                           ; 3 bytes @ 0x2E
   498  00008E                     	ds	3
   499  000091                     _calculatePID$3354:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x31
   503  000091                     	ds	3
   504  000094                     _calculatePID$3355:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x34
   508  000094                     	ds	3
   509  000097                     calculatePID@derErr:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0x37
   513  000097                     	ds	3
   514  00009A                     _calculatePID$3352:
   515                           	opt stack 0
   516                           
   517                           ; 3 bytes @ 0x3A
   518  00009A                     	ds	3
   519  00009D                     main@trash:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x3D
   523  00009D                     	ds	1
   524  00009E                     main@dtime:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x3E
   528  00009E                     	ds	1
   529  00009F                     main@x:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x3F
   533  00009F                     	ds	1
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	cstackCOMRAM
   544  000001                     __pcstackCOMRAM:
   545                           	opt stack 0
   546  000001                     i2Write_b_eep@badd:
   547                           	opt stack 0
   548  000001                     i2EEDisassembleDouble@dub:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x0
   552  000001                     	ds	2
   553  000003                     i2Write_b_eep@bdat:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x2
   557  000003                     	ds	1
   558  000004                     i2Write_b_eep@GIE_BIT_VAL:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x3
   562  000004                     	ds	1
   563  000005                     i2EEWriteChar@ch:
   564                           	opt stack 0
   565  000005                     i2EEWriteDouble@dub:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x4
   569  000005                     	ds	1
   570  000006                     i2EEWriteChar@location:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x5
   574  000006                     	ds	2
   575  000008                     i2EEWriteDouble@location:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x7
   579  000008                     	ds	1
   580  000009                     i2EEWriteDouble@x:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x8
   584  000009                     	ds	1
   585  00000A                     ??_ISR:
   586  00000A                     
   587                           ; 0 bytes @ 0x9
   588  00000A                     	ds	14
   589  000018                     ?_DetectMovement:
   590                           	opt stack 0
   591  000018                     ?___ftpack:
   592                           	opt stack 0
   593  000018                     ?_SPIReassembleDouble:
   594                           	opt stack 0
   595  000018                     ?_EEReassembleDouble:
   596                           	opt stack 0
   597  000018                     ?___ftneg:
   598                           	opt stack 0
   599  000018                     SendSPI1@temp:
   600                           	opt stack 0
   601  000018                     GenerateChecksum@sum:
   602                           	opt stack 0
   603  000018                     OpenSPI1@bus_mode:
   604                           	opt stack 0
   605  000018                     Delay10TCYx@unit:
   606                           	opt stack 0
   607  000018                     Delay1KTCYx@unit:
   608                           	opt stack 0
   609  000018                     Delay1TCYx@unit:
   610                           	opt stack 0
   611  000018                     Read_b_eep@badd:
   612                           	opt stack 0
   613  000018                     Write_b_eep@badd:
   614                           	opt stack 0
   615  000018                     EEDisassembleDouble@dub:
   616                           	opt stack 0
   617  000018                     ___ftpack@arg:
   618                           	opt stack 0
   619  000018                     ___ftge@ff1:
   620                           	opt stack 0
   621  000018                     ___ftneg@f1:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x17
   625  000018                     	ds	1
   626  000019                     ?_ReadRTDpos:
   627                           	opt stack 0
   628  000019                     SendSPI1@data:
   629                           	opt stack 0
   630  000019                     GenerateChecksum@y:
   631                           	opt stack 0
   632  000019                     OpenSPI1@smp_phase:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x18
   636  000019                     	ds	1
   637  00001A                     ??_DetectMovement:
   638  00001A                     EEReadChar@location:
   639                           	opt stack 0
   640  00001A                     Write_b_eep@bdat:
   641                           	opt stack 0
   642  00001A                     OpenSPI1@sync_mode:
   643                           	opt stack 0
   644  00001A                     SPIDisassembleDouble@dub:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x19
   648  00001A                     	ds	1
   649  00001B                     ??_ReadRTDpos:
   650  00001B                     EEReadChar@ch:
   651                           	opt stack 0
   652  00001B                     Write_b_eep@GIE_BIT_VAL:
   653                           	opt stack 0
   654  00001B                     ___ftpack@exp:
   655                           	opt stack 0
   656  00001B                     DetectMovement@JoystickResult:
   657                           	opt stack 0
   658  00001B                     SPIReassembleDouble@dub:
   659                           	opt stack 0
   660  00001B                     EEReassembleDouble@dub:
   661                           	opt stack 0
   662  00001B                     ___ftge@ff2:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x1A
   666  00001B                     	ds	1
   667  00001C                     EEWriteChar@ch:
   668                           	opt stack 0
   669  00001C                     ___ftpack@sign:
   670                           	opt stack 0
   671  00001C                     EEWriteDouble@dub:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x1B
   675  00001C                     	ds	1
   676  00001D                     ??___ftpack:
   677  00001D                     EEWriteChar@location:
   678                           	opt stack 0
   679  00001D                     DetectMovement@ADCresult:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1C
   683  00001D                     	ds	1
   684  00001E                     ??___ftge:
   685  00001E                     ?_EEReadDouble:
   686                           	opt stack 0
   687  00001E                     ReadRTDpos@HighPosition:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x1D
   691  00001E                     	ds	1
   692  00001F                     ReadRTDpos@LowPosition:
   693                           	opt stack 0
   694  00001F                     EEWriteDouble@location:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x1E
   698  00001F                     	ds	1
   699  000020                     ?___ftdiv:
   700                           	opt stack 0
   701  000020                     ?___lwtoft:
   702                           	opt stack 0
   703  000020                     EEWriteDouble@x:
   704                           	opt stack 0
   705  000020                     ReadRTDpos@FullPosition:
   706                           	opt stack 0
   707  000020                     ___lwtoft@c:
   708                           	opt stack 0
   709  000020                     ___ftdiv@f1:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x1F
   713  000020                     	ds	1
   714  000021                     EEReadDouble@location:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x20
   718  000021                     	ds	1
   719  000022                     ReadRTDpos@x:
   720                           	opt stack 0
   721  000022                     EEReadDouble@x:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x21
   725  000022                     	ds	1
   726  000023                     ___ftdiv@f2:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x22
   730  000023                     	ds	3
   731  000026                     ??___ftdiv:
   732                           
   733                           ; 0 bytes @ 0x25
   734  000026                     	ds	3
   735  000029                     ___ftdiv@cntr:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x28
   739  000029                     	ds	1
   740  00002A                     ___ftdiv@f3:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x29
   744  00002A                     	ds	3
   745  00002D                     ___ftdiv@exp:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x2C
   749  00002D                     	ds	1
   750  00002E                     ___ftdiv@sign:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x2D
   754  00002E                     	ds	1
   755  00002F                     ?___ftmul:
   756                           	opt stack 0
   757  00002F                     ___ftmul@f1:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x2E
   761  00002F                     	ds	3
   762  000032                     ___ftmul@f2:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x31
   766  000032                     	ds	3
   767  000035                     tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           
   776                           ; 0 bytes @ 0x34
   777 ;;
   778 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   779 ;;
   780 ;; *************** function _main *****************
   781 ;; Defined at:
   782 ;;		line 22 in file "RTDuC.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  x               1   63[BANK0 ] unsigned char 
   787 ;;  dtime           1   62[BANK0 ] unsigned char 
   788 ;;  trash           1   61[BANK0 ] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;		None               void
   791 ;; Registers used:
   792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   801 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   802 ;;Total ram usage:        3 bytes
   803 ;; Hardware stack levels required when called:   10
   804 ;; This function calls:
   805 ;;		_Delay10TCYx
   806 ;;		_DetectJoystick
   807 ;;		_DetectMovement
   808 ;;		_ImplementJSMotion
   809 ;;		_ImplementPIDMotion
   810 ;;		_RTD2Angle
   811 ;;		_ReadRTDpos
   812 ;;		_ReceiveSPI1
   813 ;;		_SPIDisassembleDouble
   814 ;;		_SPIReassembleDouble
   815 ;;		_SaveAll
   816 ;;		_SendSPI1
   817 ;;		_calculatePID
   818 ;;		_initialize
   819 ;; This function is called by:
   820 ;;		Startup code after reset
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text0
   825  00041C                     __ptext0:
   826                           	opt stack 0
   827  00041C                     _main:
   828                           	opt stack 21
   829                           
   830                           ;RTDuC.c: 24: unsigned char trash, x = 0;
   831                           
   832                           ;incstack = 0
   833  00041C  0E00               	movlw	0
   834  00041E  0100               	movlb	0	; () banked
   835  000420  6F9F               	movwf	main@x& (0+255),b
   836                           
   837                           ;RTDuC.c: 25: unsigned char dtime = 10;
   838  000422  0E0A               	movlw	10
   839  000424  0100               	movlb	0	; () banked
   840  000426  6F9E               	movwf	main@dtime& (0+255),b
   841                           
   842                           ; BSR set to: 0
   843                           ;RTDuC.c: 27: initialize();
   844  000428  ECE2  F00C         	call	_initialize	;wreg free
   845                           
   846                           ;RTDuC.c: 29: SSP1BUF = dummy_byte;
   847  00042C  C0BE  FFC9         	movff	_dummy_byte,4041	;volatile
   848                           
   849                           ;RTDuC.c: 30: PORTCbits.RC6 = 0;
   850  000430  9C82               	bcf	3970,6,c	;volatile
   851  000432  D000               	goto	l3823
   852  000434                     l3823:
   853                           
   854                           ;RTDuC.c: 33: {
   855                           ;RTDuC.c: 34: if (SPIflag == 1)
   856  000434  0100               	movlb	0	; () banked
   857  000436  05BC               	decf	_SPIflag& (0+255),w,b
   858  000438  A4D8               	btfss	status,2,c
   859  00043A  D0EB               	goto	l3921
   860                           
   861                           ; BSR set to: 0
   862                           ;RTDuC.c: 35: {
   863                           ;RTDuC.c: 36: SPIflag = 0;
   864  00043C  0E00               	movlw	0
   865  00043E  0100               	movlb	0	; () banked
   866  000440  6FBC               	movwf	_SPIflag& (0+255),b
   867                           
   868                           ; BSR set to: 0
   869                           ;RTDuC.c: 37: INTCONbits.GIE = 0;
   870  000442  9EF2               	bcf	intcon,7,c	;volatile
   871                           
   872                           ; BSR set to: 0
   873                           ;RTDuC.c: 38: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   874  000444  0E02               	movlw	2
   875  000446  1841               	xorwf	_Command,w,c
   876  000448  B4D8               	btfsc	status,2,c
   877  00044A  D010               	goto	l3839
   878                           
   879                           ; BSR set to: 0
   880  00044C  0E03               	movlw	3
   881  00044E  1841               	xorwf	_Command,w,c
   882  000450  B4D8               	btfsc	status,2,c
   883  000452  D00C               	goto	l3839
   884                           
   885                           ; BSR set to: 0
   886  000454  0E04               	movlw	4
   887  000456  1841               	xorwf	_Command,w,c
   888  000458  B4D8               	btfsc	status,2,c
   889  00045A  D008               	goto	l3839
   890                           
   891                           ; BSR set to: 0
   892  00045C  0E06               	movlw	6
   893  00045E  1841               	xorwf	_Command,w,c
   894  000460  B4D8               	btfsc	status,2,c
   895  000462  D004               	goto	l3839
   896                           
   897                           ; BSR set to: 0
   898  000464  0E08               	movlw	8
   899  000466  1841               	xorwf	_Command,w,c
   900  000468  A4D8               	btfss	status,2,c
   901  00046A  D05E               	goto	l3873
   902  00046C                     l3839:
   903                           
   904                           ; BSR set to: 0
   905                           ;RTDuC.c: 39: {
   906                           ;RTDuC.c: 40: if (Command == 0x02)
   907  00046C  0E02               	movlw	2
   908  00046E  1841               	xorwf	_Command,w,c
   909  000470  A4D8               	btfss	status,2,c
   910  000472  D009               	goto	l3843
   911                           
   912                           ; BSR set to: 0
   913                           ;RTDuC.c: 41: SPIDisassembleDouble(CurrentAngle);
   914  000474  C0A0  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   915  000478  C0A1  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   916  00047C  C0A2  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   917  000480  EC2B  F00C         	call	_SPIDisassembleDouble	;wreg free
   918  000484  D034               	goto	l3859
   919  000486                     l3843:
   920                           
   921                           ;RTDuC.c: 42: else if (Command == 0x03)
   922  000486  0E03               	movlw	3
   923  000488  1841               	xorwf	_Command,w,c
   924  00048A  A4D8               	btfss	status,2,c
   925  00048C  D009               	goto	l3847
   926                           
   927                           ;RTDuC.c: 43: SPIDisassembleDouble(CurrentVelocity);
   928  00048E  C0A3  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   929  000492  C0A4  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   930  000496  C0A5  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   931  00049A  EC2B  F00C         	call	_SPIDisassembleDouble	;wreg free
   932  00049E  D027               	goto	l3859
   933  0004A0                     l3847:
   934                           
   935                           ;RTDuC.c: 44: else if (Command == 0x04)
   936  0004A0  0E04               	movlw	4
   937  0004A2  1841               	xorwf	_Command,w,c
   938  0004A4  A4D8               	btfss	status,2,c
   939  0004A6  D009               	goto	l3851
   940                           
   941                           ;RTDuC.c: 45: SPIDisassembleDouble(Kp);
   942  0004A8  C0AC  F01A         	movff	_Kp,SPIDisassembleDouble@dub
   943  0004AC  C0AD  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   944  0004B0  C0AE  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   945  0004B4  EC2B  F00C         	call	_SPIDisassembleDouble	;wreg free
   946  0004B8  D01A               	goto	l3859
   947  0004BA                     l3851:
   948                           
   949                           ;RTDuC.c: 46: else if (Command == 0x06)
   950  0004BA  0E06               	movlw	6
   951  0004BC  1841               	xorwf	_Command,w,c
   952  0004BE  A4D8               	btfss	status,2,c
   953  0004C0  D009               	goto	l3855
   954                           
   955                           ;RTDuC.c: 47: SPIDisassembleDouble(Ki);
   956  0004C2  C0A9  F01A         	movff	_Ki,SPIDisassembleDouble@dub
   957  0004C6  C0AA  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   958  0004CA  C0AB  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   959  0004CE  EC2B  F00C         	call	_SPIDisassembleDouble	;wreg free
   960  0004D2  D00D               	goto	l3859
   961  0004D4                     l3855:
   962                           
   963                           ;RTDuC.c: 48: else if (Command == 0x08)
   964  0004D4  0E08               	movlw	8
   965  0004D6  1841               	xorwf	_Command,w,c
   966  0004D8  A4D8               	btfss	status,2,c
   967  0004DA  D009               	goto	l3859
   968                           
   969                           ;RTDuC.c: 49: SPIDisassembleDouble(Kd);
   970  0004DC  C0A6  F01A         	movff	_Kd,SPIDisassembleDouble@dub
   971  0004E0  C0A7  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   972  0004E4  C0A8  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   973  0004E8  EC2B  F00C         	call	_SPIDisassembleDouble	;wreg free
   974  0004EC  D000               	goto	l3859
   975  0004EE                     l3859:
   976                           
   977                           ;RTDuC.c: 51: PORTCbits.RC6 = 0;
   978  0004EE  9C82               	bcf	3970,6,c	;volatile
   979                           
   980                           ;RTDuC.c: 52: for (x = 0; x < 4; x++)
   981  0004F0  0E00               	movlw	0
   982  0004F2  0100               	movlb	0	; () banked
   983  0004F4  6F9F               	movwf	main@x& (0+255),b
   984  0004F6  D00F               	goto	l3871
   985                           
   986                           ; BSR set to: 0
   987                           
   988                           ; BSR set to: 0
   989  0004F8  D012               	goto	l508
   990  0004FA                     l3867:
   991                           
   992                           ; BSR set to: 0
   993                           ;RTDuC.c: 53: SendSPI1(DoubleSPIS[x]);
   994  0004FA  0100               	movlb	0	; () banked
   995  0004FC  519F               	movf	main@x& (0+255),w,b
   996  0004FE  0D01               	mullw	1
   997  000500  0E35               	movlw	low _DoubleSPIS
   998  000502  24F3               	addwf	prodl,w,c
   999  000504  6ED9               	movwf	fsr2l,c
  1000  000506  0E00               	movlw	high _DoubleSPIS
  1001  000508  20F4               	addwfc	prodh,w,c
  1002  00050A  6EDA               	movwf	fsr2h,c
  1003  00050C  50DF               	movf	indf2,w,c
  1004  00050E  ECB3  F00C         	call	_SendSPI1
  1005  000512  0100               	movlb	0	; () banked
  1006  000514  2B9F               	incf	main@x& (0+255),f,b
  1007  000516                     l3871:
  1008                           
  1009                           ; BSR set to: 0
  1010  000516  0E03               	movlw	3
  1011  000518  0100               	movlb	0	; () banked
  1012  00051A  659F               	cpfsgt	main@x& (0+255),b
  1013  00051C  D7EE               	goto	l3867
  1014  00051E                     l508:
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;RTDuC.c: 54: trash = SSP1BUF;
  1018  00051E  CFC9 F09D          	movff	4041,main@trash	;volatile
  1019                           
  1020                           ;RTDuC.c: 55: PIR1bits.SSP1IF = 0;
  1021  000522  969E               	bcf	3998,3,c	;volatile
  1022                           
  1023                           ;RTDuC.c: 56: PORTCbits.RC6 = 1;
  1024  000524  8C82               	bsf	3970,6,c	;volatile
  1025                           
  1026                           ;RTDuC.c: 57: }
  1027  000526  D06D               	goto	l509
  1028  000528                     l3873:
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;RTDuC.c: 58: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
  1032  000528  0441               	decf	_Command,w,c
  1033  00052A  B4D8               	btfsc	status,2,c
  1034  00052C  D00C               	goto	l512
  1035                           
  1036                           ; BSR set to: 0
  1037  00052E  0E05               	movlw	5
  1038  000530  1841               	xorwf	_Command,w,c
  1039  000532  B4D8               	btfsc	status,2,c
  1040  000534  D008               	goto	l512
  1041                           
  1042                           ; BSR set to: 0
  1043  000536  0E07               	movlw	7
  1044  000538  1841               	xorwf	_Command,w,c
  1045  00053A  B4D8               	btfsc	status,2,c
  1046  00053C  D004               	goto	l512
  1047                           
  1048                           ; BSR set to: 0
  1049  00053E  0E09               	movlw	9
  1050  000540  1841               	xorwf	_Command,w,c
  1051  000542  A4D8               	btfss	status,2,c
  1052  000544  D05A               	goto	l510
  1053  000546                     l512:
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;RTDuC.c: 59: {
  1057                           ;RTDuC.c: 60: PORTCbits.RC6 = 0;
  1058  000546  9C82               	bcf	3970,6,c	;volatile
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;RTDuC.c: 61: for (x = 0; x != 4; x++)
  1062  000548  0E00               	movlw	0
  1063  00054A  0100               	movlb	0	; () banked
  1064  00054C  6F9F               	movwf	main@x& (0+255),b
  1065  00054E                     l3883:
  1066                           
  1067                           ; BSR set to: 0
  1068  00054E  0E04               	movlw	4
  1069  000550  0100               	movlb	0	; () banked
  1070  000552  199F               	xorwf	main@x& (0+255),w,b
  1071  000554  B4D8               	btfsc	status,2,c
  1072  000556  D011               	goto	l514
  1073  000558  D001               	goto	l3887
  1074                           
  1075                           ; BSR set to: 0
  1076  00055A  D00F               	goto	l514
  1077  00055C                     l3887:
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;RTDuC.c: 62: DoubleSPIS[x] = ReceiveSPI1();
  1081  00055C  0100               	movlb	0	; () banked
  1082  00055E  519F               	movf	main@x& (0+255),w,b
  1083  000560  0D01               	mullw	1
  1084  000562  0E35               	movlw	low _DoubleSPIS
  1085  000564  24F3               	addwf	prodl,w,c
  1086  000566  6ED9               	movwf	fsr2l,c
  1087  000568  0E00               	movlw	high _DoubleSPIS
  1088  00056A  20F4               	addwfc	prodh,w,c
  1089  00056C  6EDA               	movwf	fsr2h,c
  1090  00056E  EC0E  F00D         	call	_ReceiveSPI1	;wreg free
  1091  000572  6EDF               	movwf	indf2,c
  1092  000574  0100               	movlb	0	; () banked
  1093  000576  2B9F               	incf	main@x& (0+255),f,b
  1094  000578  D7EA               	goto	l3883
  1095  00057A                     l514:
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;RTDuC.c: 64: PORTCbits.RC6 = 1;
  1099  00057A  8C82               	bsf	3970,6,c	;volatile
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;RTDuC.c: 66: if (Command == 0x01)
  1103  00057C  0441               	decf	_Command,w,c
  1104  00057E  A4D8               	btfss	status,2,c
  1105  000580  D00F               	goto	l3901
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;RTDuC.c: 67: {
  1109                           ;RTDuC.c: 68: SetAngle = SPIReassembleDouble();
  1110  000582  ECA8  F00B         	call	_SPIReassembleDouble	;wreg free
  1111  000586  C018  F03C         	movff	?_SPIReassembleDouble,_SetAngle
  1112  00058A  C019  F03D         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1113  00058E  C01A  F03E         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1114                           
  1115                           ;RTDuC.c: 69: PIDEnableFlag = 3;
  1116  000592  0E03               	movlw	3
  1117  000594  0100               	movlb	0	; () banked
  1118  000596  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;RTDuC.c: 70: JSEnableFlag = 0;
  1122  000598  0E00               	movlw	0
  1123  00059A  0100               	movlb	0	; () banked
  1124  00059C  6FBA               	movwf	_JSEnableFlag& (0+255),b
  1125                           
  1126                           ;RTDuC.c: 71: }
  1127  00059E  D027               	goto	l3913
  1128  0005A0                     l3901:
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;RTDuC.c: 72: else if (Command == 0x05)
  1132  0005A0  0E05               	movlw	5
  1133  0005A2  1841               	xorwf	_Command,w,c
  1134  0005A4  A4D8               	btfss	status,2,c
  1135  0005A6  D009               	goto	l3905
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;RTDuC.c: 73: {
  1139                           ;RTDuC.c: 74: Kp = SPIReassembleDouble();
  1140  0005A8  ECA8  F00B         	call	_SPIReassembleDouble	;wreg free
  1141  0005AC  C018  F0AC         	movff	?_SPIReassembleDouble,_Kp
  1142  0005B0  C019  F0AD         	movff	?_SPIReassembleDouble+1,_Kp+1
  1143  0005B4  C01A  F0AE         	movff	?_SPIReassembleDouble+2,_Kp+2
  1144                           
  1145                           ;RTDuC.c: 75: }
  1146  0005B8  D01A               	goto	l3913
  1147  0005BA                     l3905:
  1148                           
  1149                           ;RTDuC.c: 76: else if (Command == 0x07)
  1150  0005BA  0E07               	movlw	7
  1151  0005BC  1841               	xorwf	_Command,w,c
  1152  0005BE  A4D8               	btfss	status,2,c
  1153  0005C0  D009               	goto	l3909
  1154                           
  1155                           ;RTDuC.c: 77: {
  1156                           ;RTDuC.c: 78: Ki = SPIReassembleDouble();
  1157  0005C2  ECA8  F00B         	call	_SPIReassembleDouble	;wreg free
  1158  0005C6  C018  F0A9         	movff	?_SPIReassembleDouble,_Ki
  1159  0005CA  C019  F0AA         	movff	?_SPIReassembleDouble+1,_Ki+1
  1160  0005CE  C01A  F0AB         	movff	?_SPIReassembleDouble+2,_Ki+2
  1161                           
  1162                           ;RTDuC.c: 79: }
  1163  0005D2  D00D               	goto	l3913
  1164  0005D4                     l3909:
  1165                           
  1166                           ;RTDuC.c: 80: else if (Command == 0x09)
  1167  0005D4  0E09               	movlw	9
  1168  0005D6  1841               	xorwf	_Command,w,c
  1169  0005D8  A4D8               	btfss	status,2,c
  1170  0005DA  D009               	goto	l3913
  1171                           
  1172                           ;RTDuC.c: 81: {
  1173                           ;RTDuC.c: 82: Kd = SPIReassembleDouble();
  1174  0005DC  ECA8  F00B         	call	_SPIReassembleDouble	;wreg free
  1175  0005E0  C018  F0A6         	movff	?_SPIReassembleDouble,_Kd
  1176  0005E4  C019  F0A7         	movff	?_SPIReassembleDouble+1,_Kd+1
  1177  0005E8  C01A  F0A8         	movff	?_SPIReassembleDouble+2,_Kd+2
  1178  0005EC  D000               	goto	l3913
  1179  0005EE                     l3913:
  1180                           
  1181                           ;RTDuC.c: 83: }
  1182                           ;RTDuC.c: 84: trash = SSP1BUF;
  1183  0005EE  CFC9 F09D          	movff	4041,main@trash	;volatile
  1184                           
  1185                           ;RTDuC.c: 85: PIR1bits.SSP1IF = 0;
  1186  0005F2  969E               	bcf	3998,3,c	;volatile
  1187                           
  1188                           ;RTDuC.c: 86: SaveAll();
  1189  0005F4  EC20  F008         	call	_SaveAll	;wreg free
  1190                           
  1191                           ;RTDuC.c: 87: }
  1192  0005F8  D004               	goto	l509
  1193  0005FA                     l510:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;RTDuC.c: 88: else
  1197                           ;RTDuC.c: 89: {
  1198                           ;RTDuC.c: 90: trash = SSP1BUF;
  1199  0005FA  CFC9 F09D          	movff	4041,main@trash	;volatile
  1200                           
  1201                           ;RTDuC.c: 91: PIR1bits.SSP1IF = 0;
  1202  0005FE  969E               	bcf	3998,3,c	;volatile
  1203  000600  D000               	goto	l509
  1204  000602                     l509:
  1205                           
  1206                           ;RTDuC.c: 92: }
  1207                           ;RTDuC.c: 94: INTCONbits.GIE = 1;
  1208  000602  8EF2               	bsf	intcon,7,c	;volatile
  1209                           
  1210                           ;RTDuC.c: 95: PIE1bits.SSP1IE = 1;
  1211  000604  869D               	bsf	3997,3,c	;volatile
  1212                           
  1213                           ;RTDuC.c: 96: PORTCbits.RC6 = 0;
  1214  000606  9C82               	bcf	3970,6,c	;volatile
  1215                           
  1216                           ;RTDuC.c: 97: Delay10TCYx(dtime);
  1217  000608  0100               	movlb	0	; () banked
  1218  00060A  519E               	movf	main@dtime& (0+255),w,b
  1219  00060C  ECE5  F00D         	call	_Delay10TCYx
  1220  000610  D000               	goto	l3921
  1221  000612                     l3921:
  1222                           
  1223                           ;RTDuC.c: 98: }
  1224                           ;RTDuC.c: 99: PORTCbits.RC6 = 1;
  1225  000612  8C82               	bsf	3970,6,c	;volatile
  1226                           
  1227                           ;RTDuC.c: 100: DetectJoystick();
  1228  000614  EC7C  F00D         	call	_DetectJoystick	;wreg free
  1229                           
  1230                           ;RTDuC.c: 101: PORTCbits.RC6 = 0;
  1231  000618  9C82               	bcf	3970,6,c	;volatile
  1232                           
  1233                           ;RTDuC.c: 102: Delay10TCYx(10);
  1234  00061A  0E0A               	movlw	10
  1235  00061C  ECE5  F00D         	call	_Delay10TCYx
  1236                           
  1237                           ;RTDuC.c: 103: if (JSEnableFlag == 1)
  1238  000620  0100               	movlb	0	; () banked
  1239  000622  05BA               	decf	_JSEnableFlag& (0+255),w,b
  1240  000624  A4D8               	btfss	status,2,c
  1241  000626  D011               	goto	l3939
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;RTDuC.c: 104: {
  1245                           ;RTDuC.c: 105: PORTCbits.RC6 = 1;
  1246  000628  8C82               	bsf	3970,6,c	;volatile
  1247                           
  1248                           ;RTDuC.c: 106: INTCONbits.GIE = 0;
  1249  00062A  9EF2               	bcf	intcon,7,c	;volatile
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;RTDuC.c: 107: ImplementJSMotion(DetectMovement());
  1253  00062C  ECFF  F009         	call	_DetectMovement	;wreg free
  1254  000630  C018  F088         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1255  000634  C019  F089         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1256  000638  ECEF  F004         	call	_ImplementJSMotion	;wreg free
  1257                           
  1258                           ;RTDuC.c: 108: INTCONbits.GIE = 1;
  1259  00063C  8EF2               	bsf	intcon,7,c	;volatile
  1260                           
  1261                           ;RTDuC.c: 109: PORTCbits.RC6 = 0;
  1262  00063E  9C82               	bcf	3970,6,c	;volatile
  1263                           
  1264                           ;RTDuC.c: 110: Delay10TCYx(dtime);
  1265  000640  0100               	movlb	0	; () banked
  1266  000642  519E               	movf	main@dtime& (0+255),w,b
  1267  000644  ECE5  F00D         	call	_Delay10TCYx
  1268  000648  D000               	goto	l3939
  1269  00064A                     l3939:
  1270                           
  1271                           ;RTDuC.c: 111: }
  1272                           ;RTDuC.c: 113: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1273  00064A  0100               	movlb	0	; () banked
  1274  00064C  05BB               	decf	_PIDEnableFlag& (0+255),w,b
  1275  00064E  A4D8               	btfss	status,2,c
  1276  000650  D032               	goto	l3955
  1277                           
  1278                           ; BSR set to: 0
  1279  000652  0100               	movlb	0	; () banked
  1280  000654  05BD               	decf	_TMR0Flag& (0+255),w,b
  1281  000656  A4D8               	btfss	status,2,c
  1282  000658  D02E               	goto	l3955
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;RTDuC.c: 114: {
  1286                           ;RTDuC.c: 115: PORTCbits.RC6 = 1;
  1287  00065A  8C82               	bsf	3970,6,c	;volatile
  1288                           
  1289                           ;RTDuC.c: 116: INTCONbits.GIE = 0;
  1290  00065C  9EF2               	bcf	intcon,7,c	;volatile
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;RTDuC.c: 117: CurrentAngle = RTD2Angle(ReadRTDpos());
  1294  00065E  EC64  F00A         	call	_ReadRTDpos	;wreg free
  1295  000662  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1296  000666  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1297  00066A  EC49  F00C         	call	_RTD2Angle	;wreg free
  1298  00066E  C069  F0A0         	movff	?_RTD2Angle,_CurrentAngle
  1299  000672  C06A  F0A1         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1300  000676  C06B  F0A2         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1301                           
  1302                           ;RTDuC.c: 118: calculatePID(CurrentAngle, SetAngle);
  1303  00067A  C0A0  F088         	movff	_CurrentAngle,calculatePID@angle
  1304  00067E  C0A1  F089         	movff	_CurrentAngle+1,calculatePID@angle+1
  1305  000682  C0A2  F08A         	movff	_CurrentAngle+2,calculatePID@angle+2
  1306  000686  C03C  F08B         	movff	_SetAngle,calculatePID@setpoint
  1307  00068A  C03D  F08C         	movff	_SetAngle+1,calculatePID@setpoint+1
  1308  00068E  C03E  F08D         	movff	_SetAngle+2,calculatePID@setpoint+2
  1309  000692  EC0E  F000         	call	_calculatePID	;wreg free
  1310                           
  1311                           ;RTDuC.c: 119: ImplementPIDMotion(motorInput);
  1312  000696  C0B8  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1313  00069A  C0B9  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1314  00069E  ECD8  F008         	call	_ImplementPIDMotion	;wreg free
  1315                           
  1316                           ;RTDuC.c: 120: TMR0Flag = 0;
  1317  0006A2  0E00               	movlw	0
  1318  0006A4  0100               	movlb	0	; () banked
  1319  0006A6  6FBD               	movwf	_TMR0Flag& (0+255),b
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;RTDuC.c: 121: INTCONbits.GIE = 1;
  1323  0006A8  8EF2               	bsf	intcon,7,c	;volatile
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;RTDuC.c: 122: PORTCbits.RC6 = 0;
  1327  0006AA  9C82               	bcf	3970,6,c	;volatile
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;RTDuC.c: 123: Delay10TCYx(dtime);
  1331  0006AC  0100               	movlb	0	; () banked
  1332  0006AE  519E               	movf	main@dtime& (0+255),w,b
  1333  0006B0  ECE5  F00D         	call	_Delay10TCYx
  1334                           
  1335                           ;RTDuC.c: 124: }
  1336  0006B4  D6BF               	goto	l3823
  1337  0006B6                     l3955:
  1338                           
  1339                           ;RTDuC.c: 126: else if (PIDEnableFlag == 3)
  1340  0006B6  0E03               	movlw	3
  1341  0006B8  0100               	movlb	0	; () banked
  1342  0006BA  19BB               	xorwf	_PIDEnableFlag& (0+255),w,b
  1343  0006BC  A4D8               	btfss	status,2,c
  1344  0006BE  D030               	goto	l3975
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;RTDuC.c: 127: {
  1348                           ;RTDuC.c: 128: PORTCbits.RC6 = 1;
  1349  0006C0  8C82               	bsf	3970,6,c	;volatile
  1350                           
  1351                           ;RTDuC.c: 129: INTCONbits.GIE = 0;
  1352  0006C2  9EF2               	bcf	intcon,7,c	;volatile
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;RTDuC.c: 130: TMR0H = 0xDB;
  1356  0006C4  0EDB               	movlw	219
  1357  0006C6  6ED7               	movwf	4055,c	;volatile
  1358                           
  1359                           ;RTDuC.c: 131: TMR0L = 0x60;
  1360  0006C8  0E60               	movlw	96
  1361  0006CA  6ED6               	movwf	4054,c	;volatile
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;RTDuC.c: 132: CurrentAngle = RTD2Angle(ReadRTDpos());
  1365  0006CC  EC64  F00A         	call	_ReadRTDpos	;wreg free
  1366  0006D0  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1367  0006D4  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1368  0006D8  EC49  F00C         	call	_RTD2Angle	;wreg free
  1369  0006DC  C069  F0A0         	movff	?_RTD2Angle,_CurrentAngle
  1370  0006E0  C06A  F0A1         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1371  0006E4  C06B  F0A2         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1372                           
  1373                           ;RTDuC.c: 133: calculatePID(CurrentAngle, SetAngle);
  1374  0006E8  C0A0  F088         	movff	_CurrentAngle,calculatePID@angle
  1375  0006EC  C0A1  F089         	movff	_CurrentAngle+1,calculatePID@angle+1
  1376  0006F0  C0A2  F08A         	movff	_CurrentAngle+2,calculatePID@angle+2
  1377  0006F4  C03C  F08B         	movff	_SetAngle,calculatePID@setpoint
  1378  0006F8  C03D  F08C         	movff	_SetAngle+1,calculatePID@setpoint+1
  1379  0006FC  C03E  F08D         	movff	_SetAngle+2,calculatePID@setpoint+2
  1380  000700  EC0E  F000         	call	_calculatePID	;wreg free
  1381                           
  1382                           ;RTDuC.c: 134: ImplementPIDMotion(motorInput);
  1383  000704  C0B8  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1384  000708  C0B9  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1385  00070C  ECD8  F008         	call	_ImplementPIDMotion	;wreg free
  1386                           
  1387                           ;RTDuC.c: 135: INTCONbits.GIE = 1;
  1388  000710  8EF2               	bsf	intcon,7,c	;volatile
  1389                           
  1390                           ;RTDuC.c: 137: T0CONbits.TMR0ON = 1;
  1391  000712  8ED5               	bsf	4053,7,c	;volatile
  1392                           
  1393                           ;RTDuC.c: 138: PORTCbits.RC6 = 0;
  1394  000714  9C82               	bcf	3970,6,c	;volatile
  1395                           
  1396                           ;RTDuC.c: 139: Delay10TCYx(dtime);
  1397  000716  0100               	movlb	0	; () banked
  1398  000718  519E               	movf	main@dtime& (0+255),w,b
  1399  00071A  ECE5  F00D         	call	_Delay10TCYx
  1400                           
  1401                           ;RTDuC.c: 140: }
  1402  00071E  D68A               	goto	l3823
  1403  000720                     l3975:
  1404                           
  1405                           ;RTDuC.c: 142: else if (TMR0Flag == 1)
  1406  000720  0100               	movlb	0	; () banked
  1407  000722  05BD               	decf	_TMR0Flag& (0+255),w,b
  1408  000724  A4D8               	btfss	status,2,c
  1409  000726  D686               	goto	l3823
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;RTDuC.c: 143: {
  1413                           ;RTDuC.c: 144: PORTCbits.RC6 = 1;
  1414  000728  8C82               	bsf	3970,6,c	;volatile
  1415                           
  1416                           ;RTDuC.c: 145: INTCONbits.GIE = 0;
  1417  00072A  9EF2               	bcf	intcon,7,c	;volatile
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;RTDuC.c: 146: CurrentAngle = RTD2Angle(ReadRTDpos());
  1421  00072C  EC64  F00A         	call	_ReadRTDpos	;wreg free
  1422  000730  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1423  000734  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1424  000738  EC49  F00C         	call	_RTD2Angle	;wreg free
  1425  00073C  C069  F0A0         	movff	?_RTD2Angle,_CurrentAngle
  1426  000740  C06A  F0A1         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1427  000744  C06B  F0A2         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1428                           
  1429                           ;RTDuC.c: 147: INTCONbits.GIE = 1;
  1430  000748  8EF2               	bsf	intcon,7,c	;volatile
  1431                           
  1432                           ;RTDuC.c: 148: TMR0Flag = 0;
  1433  00074A  0E00               	movlw	0
  1434  00074C  0100               	movlb	0	; () banked
  1435  00074E  6FBD               	movwf	_TMR0Flag& (0+255),b
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;RTDuC.c: 149: PORTCbits.RC6 = 0;
  1439  000750  9C82               	bcf	3970,6,c	;volatile
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;RTDuC.c: 150: Delay10TCYx(dtime);
  1443  000752  0100               	movlb	0	; () banked
  1444  000754  519E               	movf	main@dtime& (0+255),w,b
  1445  000756  ECE5  F00D         	call	_Delay10TCYx
  1446  00075A  D66C               	goto	l3823
  1447  00075C  EF0C  F000         	goto	start
  1448  000760                     __end_of_main:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           intcon	equ	0xFF2
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           postdec1	equ	0xFE5
  1460                           fsr1l	equ	0xFE1
  1461                           indf2	equ	0xFDF
  1462                           fsr2h	equ	0xFDA
  1463                           fsr2l	equ	0xFD9
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _initialize *****************
  1467 ;; Defined at:
  1468 ;;		line 155 in file "RTDuC.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;		None
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;		None
  1473 ;; Return value:  Size  Location     Type
  1474 ;;		None               void
  1475 ;; Registers used:
  1476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;Total ram usage:        0 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    9
  1489 ;; This function calls:
  1490 ;;		_EEPROMInit
  1491 ;;		_InitializeInterrupts
  1492 ;;		_JoystickInit
  1493 ;;		_MotorDriverInit
  1494 ;;		_PIDInit
  1495 ;;		_RTDInit
  1496 ;;		_SPIInit
  1497 ;;		_ZeroMotors
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text1
  1504  0019C4                     __ptext1:
  1505                           	opt stack 0
  1506  0019C4                     _initialize:
  1507                           	opt stack 21
  1508                           
  1509                           ;RTDuC.c: 157: while (OSCCONbits.OSTS == 0);
  1510                           
  1511                           ;incstack = 0
  1512  0019C4  D000               	goto	l534
  1513  0019C6                     l534:
  1514  0019C6  A6D3               	btfss	4051,3,c	;volatile
  1515  0019C8  D7FE               	goto	l534
  1516                           
  1517                           ;RTDuC.c: 158: PORTCbits.RC6 = 1;
  1518  0019CA  8C82               	bsf	3970,6,c	;volatile
  1519                           
  1520                           ;RTDuC.c: 160: RTDInit();
  1521  0019CC  EC9B  F00C         	call	_RTDInit	;wreg free
  1522                           
  1523                           ;RTDuC.c: 161: SPIInit();
  1524  0019D0  ECAE  F00D         	call	_SPIInit	;wreg free
  1525                           
  1526                           ;RTDuC.c: 162: JoystickInit();
  1527  0019D4  ECCB  F00C         	call	_JoystickInit	;wreg free
  1528                           
  1529                           ;RTDuC.c: 163: MotorDriverInit();
  1530  0019D8  EC47  F00D         	call	_MotorDriverInit	;wreg free
  1531                           
  1532                           ;RTDuC.c: 164: PIDInit();
  1533  0019DC  EC64  F00B         	call	_PIDInit	;wreg free
  1534                           
  1535                           ;RTDuC.c: 165: EEPROMInit();
  1536  0019E0  ECC8  F00D         	call	_EEPROMInit	;wreg free
  1537                           
  1538                           ;RTDuC.c: 166: ZeroMotors();
  1539  0019E4  ECBA  F006         	call	_ZeroMotors	;wreg free
  1540                           
  1541                           ;RTDuC.c: 168: InitializeInterrupts();
  1542  0019E8  ECFD  F00D         	call	_InitializeInterrupts	;wreg free
  1543                           
  1544                           ;RTDuC.c: 170: PORTAbits.RA3 = 1;
  1545  0019EC  8680               	bsf	3968,3,c	;volatile
  1546  0019EE  0012               	return		;funcret
  1547  0019F0                     __end_of_initialize:
  1548                           	opt stack 0
  1549                           tblptru	equ	0xFF8
  1550                           tblptrh	equ	0xFF7
  1551                           tblptrl	equ	0xFF6
  1552                           tablat	equ	0xFF5
  1553                           prodh	equ	0xFF4
  1554                           prodl	equ	0xFF3
  1555                           intcon	equ	0xFF2
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           indf2	equ	0xFDF
  1561                           fsr2h	equ	0xFDA
  1562                           fsr2l	equ	0xFD9
  1563                           status	equ	0xFD8
  1564                           
  1565 ;; *************** function _ZeroMotors *****************
  1566 ;; Defined at:
  1567 ;;		line 245 in file "RTDuC.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;		None
  1572 ;; Return value:  Size  Location     Type
  1573 ;;		None               void
  1574 ;; Registers used:
  1575 ;;		wreg, status,2, status,0, cstack
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;Total ram usage:        0 bytes
  1586 ;; Hardware stack levels used:    1
  1587 ;; Hardware stack levels required when called:    8
  1588 ;; This function calls:
  1589 ;;		_ImplementPIDMotion
  1590 ;;		_RTD2Angle
  1591 ;;		_ReadRTDpos
  1592 ;;		___fttol
  1593 ;;		_abs
  1594 ;;		_calculatePID
  1595 ;; This function is called by:
  1596 ;;		_initialize
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text2
  1601  000D74                     __ptext2:
  1602                           	opt stack 0
  1603  000D74                     _ZeroMotors:
  1604                           	opt stack 21
  1605                           
  1606                           ;RTDuC.c: 247: CurrentAngle = 2;
  1607                           
  1608                           ;incstack = 0
  1609  000D74  0E00               	movlw	0
  1610  000D76  0100               	movlb	0	; () banked
  1611  000D78  6FA0               	movwf	_CurrentAngle& (0+255),b
  1612  000D7A  0E00               	movlw	0
  1613  000D7C  0100               	movlb	0	; () banked
  1614  000D7E  6FA1               	movwf	(_CurrentAngle+1)& (0+255),b
  1615  000D80  0E40               	movlw	64
  1616  000D82  0100               	movlb	0	; () banked
  1617  000D84  6FA2               	movwf	(_CurrentAngle+2)& (0+255),b
  1618                           
  1619                           ;RTDuC.c: 248: Ki = 1;
  1620  000D86  0E00               	movlw	0
  1621  000D88  0100               	movlb	0	; () banked
  1622  000D8A  6FA9               	movwf	_Ki& (0+255),b
  1623  000D8C  0E80               	movlw	128
  1624  000D8E  0100               	movlb	0	; () banked
  1625  000D90  6FAA               	movwf	(_Ki+1)& (0+255),b
  1626  000D92  0E3F               	movlw	63
  1627  000D94  0100               	movlb	0	; () banked
  1628  000D96  6FAB               	movwf	(_Ki+2)& (0+255),b
  1629                           
  1630                           ;RTDuC.c: 249: Kp = 2;
  1631  000D98  0E00               	movlw	0
  1632  000D9A  0100               	movlb	0	; () banked
  1633  000D9C  6FAC               	movwf	_Kp& (0+255),b
  1634  000D9E  0E00               	movlw	0
  1635  000DA0  0100               	movlb	0	; () banked
  1636  000DA2  6FAD               	movwf	(_Kp+1)& (0+255),b
  1637  000DA4  0E40               	movlw	64
  1638  000DA6  0100               	movlb	0	; () banked
  1639  000DA8  6FAE               	movwf	(_Kp+2)& (0+255),b
  1640                           
  1641                           ;RTDuC.c: 250: Kd = 0.05;
  1642  000DAA  0ECD               	movlw	205
  1643  000DAC  0100               	movlb	0	; () banked
  1644  000DAE  6FA6               	movwf	_Kd& (0+255),b
  1645  000DB0  0E4C               	movlw	76
  1646  000DB2  0100               	movlb	0	; () banked
  1647  000DB4  6FA7               	movwf	(_Kd+1)& (0+255),b
  1648  000DB6  0E3D               	movlw	61
  1649  000DB8  0100               	movlb	0	; () banked
  1650  000DBA  6FA8               	movwf	(_Kd+2)& (0+255),b
  1651                           
  1652                           ;RTDuC.c: 251: TMR0H = 0xDB;
  1653  000DBC  0EDB               	movlw	219
  1654  000DBE  6ED7               	movwf	4055,c	;volatile
  1655                           
  1656                           ;RTDuC.c: 252: TMR0L = 0x60;
  1657  000DC0  0E60               	movlw	96
  1658  000DC2  6ED6               	movwf	4054,c	;volatile
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;RTDuC.c: 253: T0CONbits.TMR0ON = 1;
  1662  000DC4  8ED5               	bsf	4053,7,c	;volatile
  1663                           
  1664                           ;RTDuC.c: 254: PIDEnableFlag = 3;
  1665  000DC6  0E03               	movlw	3
  1666  000DC8  0100               	movlb	0	; () banked
  1667  000DCA  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  1668                           
  1669                           ;RTDuC.c: 255: SetAngle = 0;
  1670  000DCC  0E00               	movlw	0
  1671  000DCE  6E3C               	movwf	_SetAngle,c
  1672  000DD0  0E00               	movlw	0
  1673  000DD2  6E3D               	movwf	_SetAngle+1,c
  1674  000DD4  0E00               	movlw	0
  1675  000DD6  6E3E               	movwf	_SetAngle+2,c
  1676  000DD8  D000               	goto	l3747
  1677  000DDA                     l3747:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;RTDuC.c: 257: {
  1681                           ;RTDuC.c: 258: CurrentAngle = RTD2Angle(ReadRTDpos());
  1682  000DDA  EC64  F00A         	call	_ReadRTDpos	;wreg free
  1683  000DDE  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1684  000DE2  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1685  000DE6  EC49  F00C         	call	_RTD2Angle	;wreg free
  1686  000DEA  C069  F0A0         	movff	?_RTD2Angle,_CurrentAngle
  1687  000DEE  C06A  F0A1         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1688  000DF2  C06B  F0A2         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1689                           
  1690                           ;RTDuC.c: 259: calculatePID(CurrentAngle, SetAngle);
  1691  000DF6  C0A0  F088         	movff	_CurrentAngle,calculatePID@angle
  1692  000DFA  C0A1  F089         	movff	_CurrentAngle+1,calculatePID@angle+1
  1693  000DFE  C0A2  F08A         	movff	_CurrentAngle+2,calculatePID@angle+2
  1694  000E02  C03C  F08B         	movff	_SetAngle,calculatePID@setpoint
  1695  000E06  C03D  F08C         	movff	_SetAngle+1,calculatePID@setpoint+1
  1696  000E0A  C03E  F08D         	movff	_SetAngle+2,calculatePID@setpoint+2
  1697  000E0E  EC0E  F000         	call	_calculatePID	;wreg free
  1698                           
  1699                           ;RTDuC.c: 260: ImplementPIDMotion(motorInput);
  1700  000E12  C0B8  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1701  000E16  C0B9  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1702  000E1A  ECD8  F008         	call	_ImplementPIDMotion	;wreg free
  1703                           
  1704                           ;RTDuC.c: 261: while (INTCONbits.TMR0IF == 0);
  1705  000E1E  D000               	goto	l561
  1706  000E20                     l561:
  1707  000E20  A4F2               	btfss	intcon,2,c	;volatile
  1708  000E22  D7FE               	goto	l561
  1709                           
  1710                           ;RTDuC.c: 262: INTCONbits.TMR0IF = 0;
  1711  000E24  94F2               	bcf	intcon,2,c	;volatile
  1712                           
  1713                           ;RTDuC.c: 263: TMR0H = 0xDB;
  1714  000E26  0EDB               	movlw	219
  1715  000E28  6ED7               	movwf	4055,c	;volatile
  1716                           
  1717                           ;RTDuC.c: 264: TMR0L = 0x60;
  1718  000E2A  0E60               	movlw	96
  1719  000E2C  6ED6               	movwf	4054,c	;volatile
  1720                           
  1721                           ;RTDuC.c: 265: }
  1722                           ;RTDuC.c: 266: while (abs(error) > 1);
  1723  000E2E  C0AF  F075         	movff	_error,___fttol@f1
  1724  000E32  C0B0  F076         	movff	_error+1,___fttol@f1+1
  1725  000E36  C0B1  F077         	movff	_error+2,___fttol@f1+2
  1726  000E3A  EC89  F005         	call	___fttol	;wreg free
  1727  000E3E  C075  F084         	movff	?___fttol,abs@a
  1728  000E42  C076  F085         	movff	?___fttol+1,abs@a+1
  1729  000E46  ECF8  F00C         	call	_abs	;wreg free
  1730  000E4A  0100               	movlb	0	; () banked
  1731  000E4C  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  1732  000E4E  D008               	goto	l3757
  1733  000E50  0100               	movlb	0	; () banked
  1734  000E52  5185               	movf	(?_abs+1)& (0+255),w,b
  1735  000E54  E1C2               	bnz	l3747
  1736  000E56  0E02               	movlw	2
  1737  000E58  0100               	movlb	0	; () banked
  1738  000E5A  5D84               	subwf	?_abs& (0+255),w,b
  1739  000E5C  B0D8               	btfsc	status,0,c
  1740  000E5E  D7BD               	goto	l3747
  1741  000E60                     l3757:
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;RTDuC.c: 268: Ki = 0;
  1745  000E60  0E00               	movlw	0
  1746  000E62  0100               	movlb	0	; () banked
  1747  000E64  6FA9               	movwf	_Ki& (0+255),b
  1748  000E66  0E00               	movlw	0
  1749  000E68  0100               	movlb	0	; () banked
  1750  000E6A  6FAA               	movwf	(_Ki+1)& (0+255),b
  1751  000E6C  0E00               	movlw	0
  1752  000E6E  0100               	movlb	0	; () banked
  1753  000E70  6FAB               	movwf	(_Ki+2)& (0+255),b
  1754                           
  1755                           ;RTDuC.c: 269: Kp = 0;
  1756  000E72  0E00               	movlw	0
  1757  000E74  0100               	movlb	0	; () banked
  1758  000E76  6FAC               	movwf	_Kp& (0+255),b
  1759  000E78  0E00               	movlw	0
  1760  000E7A  0100               	movlb	0	; () banked
  1761  000E7C  6FAD               	movwf	(_Kp+1)& (0+255),b
  1762  000E7E  0E00               	movlw	0
  1763  000E80  0100               	movlb	0	; () banked
  1764  000E82  6FAE               	movwf	(_Kp+2)& (0+255),b
  1765                           
  1766                           ;RTDuC.c: 270: Kd = 0;
  1767  000E84  0E00               	movlw	0
  1768  000E86  0100               	movlb	0	; () banked
  1769  000E88  6FA6               	movwf	_Kd& (0+255),b
  1770  000E8A  0E00               	movlw	0
  1771  000E8C  0100               	movlb	0	; () banked
  1772  000E8E  6FA7               	movwf	(_Kd+1)& (0+255),b
  1773  000E90  0E00               	movlw	0
  1774  000E92  0100               	movlb	0	; () banked
  1775  000E94  6FA8               	movwf	(_Kd+2)& (0+255),b
  1776                           
  1777                           ; BSR set to: 0
  1778  000E96  0012               	return		;funcret
  1779  000E98                     __end_of_ZeroMotors:
  1780                           	opt stack 0
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           prodh	equ	0xFF4
  1786                           prodl	equ	0xFF3
  1787                           intcon	equ	0xFF2
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1l	equ	0xFE1
  1792                           indf2	equ	0xFDF
  1793                           fsr2h	equ	0xFDA
  1794                           fsr2l	equ	0xFD9
  1795                           status	equ	0xFD8
  1796                           
  1797 ;; *************** function _calculatePID *****************
  1798 ;; Defined at:
  1799 ;;		line 29 in file "PID.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  angle           3   40[BANK0 ] unsigned char 
  1802 ;;  setpoint        3   43[BANK0 ] unsigned char 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  derErr          3   55[BANK0 ] unsigned char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;		None               void
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;Total ram usage:       21 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    7
  1821 ;; This function calls:
  1822 ;;		___ftadd
  1823 ;;		___ftdiv
  1824 ;;		___ftge
  1825 ;;		___ftmul
  1826 ;;		___ftneg
  1827 ;;		___ftsub
  1828 ;;		___fttol
  1829 ;;		_abs
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;;		_ZeroMotors
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text3
  1837  00001C                     __ptext3:
  1838                           	opt stack 0
  1839  00001C                     _calculatePID:
  1840                           	opt stack 21
  1841                           
  1842                           ;PID.c: 31: double derErr;
  1843                           ;PID.c: 32: if (PIDEnableFlag == 3)
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;incstack = 0
  1847  00001C  0E03               	movlw	3
  1848  00001E  0100               	movlb	0	; () banked
  1849  000020  19BB               	xorwf	_PIDEnableFlag& (0+255),w,b
  1850  000022  A4D8               	btfss	status,2,c
  1851  000024  D01F               	goto	l3719
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;PID.c: 33: {
  1855                           ;PID.c: 34: error = 0;
  1856  000026  0E00               	movlw	0
  1857  000028  0100               	movlb	0	; () banked
  1858  00002A  6FAF               	movwf	_error& (0+255),b
  1859  00002C  0E00               	movlw	0
  1860  00002E  0100               	movlb	0	; () banked
  1861  000030  6FB0               	movwf	(_error+1)& (0+255),b
  1862  000032  0E00               	movlw	0
  1863  000034  0100               	movlb	0	; () banked
  1864  000036  6FB1               	movwf	(_error+2)& (0+255),b
  1865                           
  1866                           ;PID.c: 35: prevErr = 0;
  1867  000038  0E00               	movlw	0
  1868  00003A  0100               	movlb	0	; () banked
  1869  00003C  6FB5               	movwf	_prevErr& (0+255),b
  1870  00003E  0E00               	movlw	0
  1871  000040  0100               	movlb	0	; () banked
  1872  000042  6FB6               	movwf	(_prevErr+1)& (0+255),b
  1873  000044  0E00               	movlw	0
  1874  000046  0100               	movlb	0	; () banked
  1875  000048  6FB7               	movwf	(_prevErr+2)& (0+255),b
  1876                           
  1877                           ;PID.c: 36: intErr = 0;
  1878  00004A  0E00               	movlw	0
  1879  00004C  0100               	movlb	0	; () banked
  1880  00004E  6FB2               	movwf	_intErr& (0+255),b
  1881  000050  0E00               	movlw	0
  1882  000052  0100               	movlb	0	; () banked
  1883  000054  6FB3               	movwf	(_intErr+1)& (0+255),b
  1884  000056  0E00               	movlw	0
  1885  000058  0100               	movlb	0	; () banked
  1886  00005A  6FB4               	movwf	(_intErr+2)& (0+255),b
  1887                           
  1888                           ;PID.c: 37: PIDEnableFlag = 1;
  1889  00005C  0E01               	movlw	1
  1890  00005E  0100               	movlb	0	; () banked
  1891  000060  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  1892  000062  D000               	goto	l3719
  1893  000064                     l3719:
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;PID.c: 38: }
  1897                           ;PID.c: 40: error = setpoint - angle;
  1898  000064  C088  F018         	movff	calculatePID@angle,___ftneg@f1
  1899  000068  C089  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  1900  00006C  C08A  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  1901  000070  EC35  F00D         	call	___ftneg	;wreg free
  1902  000074  C018  F069         	movff	?___ftneg,___ftadd@f1
  1903  000078  C019  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  1904  00007C  C01A  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  1905  000080  C08B  F06C         	movff	calculatePID@setpoint,___ftadd@f2
  1906  000084  C08C  F06D         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  1907  000088  C08D  F06E         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  1908  00008C  ECB0  F003         	call	___ftadd	;wreg free
  1909  000090  C069  F0AF         	movff	?___ftadd,_error
  1910  000094  C06A  F0B0         	movff	?___ftadd+1,_error+1
  1911  000098  C06B  F0B1         	movff	?___ftadd+2,_error+2
  1912                           
  1913                           ;PID.c: 41: if (error > 180)
  1914  00009C  0E00               	movlw	0
  1915  00009E  6E18               	movwf	___ftge@ff1,c
  1916  0000A0  0E34               	movlw	52
  1917  0000A2  6E19               	movwf	___ftge@ff1+1,c
  1918  0000A4  0E43               	movlw	67
  1919  0000A6  6E1A               	movwf	___ftge@ff1+2,c
  1920  0000A8  C0AF  F01B         	movff	_error,___ftge@ff2
  1921  0000AC  C0B0  F01C         	movff	_error+1,___ftge@ff2+1
  1922  0000B0  C0B1  F01D         	movff	_error+2,___ftge@ff2+2
  1923  0000B4  EC7C  F009         	call	___ftge	;wreg free
  1924  0000B8  B0D8               	btfsc	status,0,c
  1925  0000BA  D018               	goto	l3725
  1926                           
  1927                           ;PID.c: 42: error -= 360;
  1928  0000BC  C0AF  F075         	movff	_error,___ftsub@f1
  1929  0000C0  C0B0  F076         	movff	_error+1,___ftsub@f1+1
  1930  0000C4  C0B1  F077         	movff	_error+2,___ftsub@f1+2
  1931  0000C8  0E00               	movlw	0
  1932  0000CA  0100               	movlb	0	; () banked
  1933  0000CC  6F78               	movwf	___ftsub@f2& (0+255),b
  1934  0000CE  0EB4               	movlw	180
  1935  0000D0  0100               	movlb	0	; () banked
  1936  0000D2  6F79               	movwf	(___ftsub@f2+1)& (0+255),b
  1937  0000D4  0E43               	movlw	67
  1938  0000D6  0100               	movlb	0	; () banked
  1939  0000D8  6F7A               	movwf	(___ftsub@f2+2)& (0+255),b
  1940  0000DA  EC3C  F00B         	call	___ftsub	;wreg free
  1941  0000DE  C075  F0AF         	movff	?___ftsub,_error
  1942  0000E2  C076  F0B0         	movff	?___ftsub+1,_error+1
  1943  0000E6  C077  F0B1         	movff	?___ftsub+2,_error+2
  1944  0000EA  D028               	goto	l151
  1945  0000EC                     l3725:
  1946                           
  1947                           ;PID.c: 43: else if (error < -180)
  1948  0000EC  C0AF  F018         	movff	_error,___ftge@ff1
  1949  0000F0  C0B0  F019         	movff	_error+1,___ftge@ff1+1
  1950  0000F4  C0B1  F01A         	movff	_error+2,___ftge@ff1+2
  1951  0000F8  0E00               	movlw	0
  1952  0000FA  6E1B               	movwf	___ftge@ff2,c
  1953  0000FC  0E34               	movlw	52
  1954  0000FE  6E1C               	movwf	___ftge@ff2+1,c
  1955  000100  0EC3               	movlw	195
  1956  000102  6E1D               	movwf	___ftge@ff2+2,c
  1957  000104  EC7C  F009         	call	___ftge	;wreg free
  1958  000108  B0D8               	btfsc	status,0,c
  1959  00010A  D018               	goto	l151
  1960                           
  1961                           ;PID.c: 44: error += 360;
  1962  00010C  C0AF  F069         	movff	_error,___ftadd@f1
  1963  000110  C0B0  F06A         	movff	_error+1,___ftadd@f1+1
  1964  000114  C0B1  F06B         	movff	_error+2,___ftadd@f1+2
  1965  000118  0E00               	movlw	0
  1966  00011A  0100               	movlb	0	; () banked
  1967  00011C  6F6C               	movwf	___ftadd@f2& (0+255),b
  1968  00011E  0EB4               	movlw	180
  1969  000120  0100               	movlb	0	; () banked
  1970  000122  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
  1971  000124  0E43               	movlw	67
  1972  000126  0100               	movlb	0	; () banked
  1973  000128  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
  1974  00012A  ECB0  F003         	call	___ftadd	;wreg free
  1975  00012E  C069  F0AF         	movff	?___ftadd,_error
  1976  000132  C06A  F0B0         	movff	?___ftadd+1,_error+1
  1977  000136  C06B  F0B1         	movff	?___ftadd+2,_error+2
  1978  00013A  D000               	goto	l151
  1979  00013C                     l151:
  1980                           
  1981                           ;PID.c: 46: derErr = error - prevErr;
  1982  00013C  C0B5  F018         	movff	_prevErr,___ftneg@f1
  1983  000140  C0B6  F019         	movff	_prevErr+1,___ftneg@f1+1
  1984  000144  C0B7  F01A         	movff	_prevErr+2,___ftneg@f1+2
  1985  000148  EC35  F00D         	call	___ftneg	;wreg free
  1986  00014C  C018  F069         	movff	?___ftneg,___ftadd@f1
  1987  000150  C019  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  1988  000154  C01A  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  1989  000158  C0AF  F06C         	movff	_error,___ftadd@f2
  1990  00015C  C0B0  F06D         	movff	_error+1,___ftadd@f2+1
  1991  000160  C0B1  F06E         	movff	_error+2,___ftadd@f2+2
  1992  000164  ECB0  F003         	call	___ftadd	;wreg free
  1993  000168  C069  F097         	movff	?___ftadd,calculatePID@derErr
  1994  00016C  C06A  F098         	movff	?___ftadd+1,calculatePID@derErr+1
  1995  000170  C06B  F099         	movff	?___ftadd+2,calculatePID@derErr+2
  1996                           
  1997                           ;PID.c: 47: intErr += error;
  1998  000174  C0B2  F069         	movff	_intErr,___ftadd@f1
  1999  000178  C0B3  F06A         	movff	_intErr+1,___ftadd@f1+1
  2000  00017C  C0B4  F06B         	movff	_intErr+2,___ftadd@f1+2
  2001  000180  C0AF  F06C         	movff	_error,___ftadd@f2
  2002  000184  C0B0  F06D         	movff	_error+1,___ftadd@f2+1
  2003  000188  C0B1  F06E         	movff	_error+2,___ftadd@f2+2
  2004  00018C  ECB0  F003         	call	___ftadd	;wreg free
  2005  000190  C069  F0B2         	movff	?___ftadd,_intErr
  2006  000194  C06A  F0B3         	movff	?___ftadd+1,_intErr+1
  2007  000198  C06B  F0B4         	movff	?___ftadd+2,_intErr+2
  2008                           
  2009                           ;PID.c: 48: if (intErr > 2000)
  2010  00019C  0E00               	movlw	0
  2011  00019E  6E18               	movwf	___ftge@ff1,c
  2012  0001A0  0EFA               	movlw	250
  2013  0001A2  6E19               	movwf	___ftge@ff1+1,c
  2014  0001A4  0E44               	movlw	68
  2015  0001A6  6E1A               	movwf	___ftge@ff1+2,c
  2016  0001A8  C0B2  F01B         	movff	_intErr,___ftge@ff2
  2017  0001AC  C0B3  F01C         	movff	_intErr+1,___ftge@ff2+1
  2018  0001B0  C0B4  F01D         	movff	_intErr+2,___ftge@ff2+2
  2019  0001B4  EC7C  F009         	call	___ftge	;wreg free
  2020  0001B8  B0D8               	btfsc	status,0,c
  2021  0001BA  D00A               	goto	l3731
  2022                           
  2023                           ;PID.c: 49: intErr = 2000;
  2024  0001BC  0E00               	movlw	0
  2025  0001BE  0100               	movlb	0	; () banked
  2026  0001C0  6FB2               	movwf	_intErr& (0+255),b
  2027  0001C2  0EFA               	movlw	250
  2028  0001C4  0100               	movlb	0	; () banked
  2029  0001C6  6FB3               	movwf	(_intErr+1)& (0+255),b
  2030  0001C8  0E44               	movlw	68
  2031  0001CA  0100               	movlb	0	; () banked
  2032  0001CC  6FB4               	movwf	(_intErr+2)& (0+255),b
  2033  0001CE  D000               	goto	l3731
  2034  0001D0                     l3731:
  2035                           
  2036                           ;PID.c: 51: if (abs(error) > 1)
  2037  0001D0  C0AF  F075         	movff	_error,___fttol@f1
  2038  0001D4  C0B0  F076         	movff	_error+1,___fttol@f1+1
  2039  0001D8  C0B1  F077         	movff	_error+2,___fttol@f1+2
  2040  0001DC  EC89  F005         	call	___fttol	;wreg free
  2041  0001E0  C075  F084         	movff	?___fttol,abs@a
  2042  0001E4  C076  F085         	movff	?___fttol+1,abs@a+1
  2043  0001E8  ECF8  F00C         	call	_abs	;wreg free
  2044  0001EC  0100               	movlb	0	; () banked
  2045  0001EE  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  2046  0001F0  D07F               	goto	l3735
  2047  0001F2  0100               	movlb	0	; () banked
  2048  0001F4  5185               	movf	(?_abs+1)& (0+255),w,b
  2049  0001F6  E105               	bnz	u3300
  2050  0001F8  0E02               	movlw	2
  2051  0001FA  0100               	movlb	0	; () banked
  2052  0001FC  5D84               	subwf	?_abs& (0+255),w,b
  2053  0001FE  A0D8               	btfss	status,0,c
  2054  000200  D077               	goto	l3735
  2055  000202                     u3300:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2059  000202  C0B2  F032         	movff	_intErr,___ftmul@f2
  2060  000206  C0B3  F033         	movff	_intErr+1,___ftmul@f2+1
  2061  00020A  C0B4  F034         	movff	_intErr+2,___ftmul@f2+2
  2062  00020E  C0A9  F02F         	movff	_Ki,___ftmul@f1
  2063  000212  C0AA  F030         	movff	_Ki+1,___ftmul@f1+1
  2064  000216  C0AB  F031         	movff	_Ki+2,___ftmul@f1+2
  2065  00021A  EC22  F006         	call	___ftmul	;wreg free
  2066  00021E  C02F  F09A         	movff	?___ftmul,_calculatePID$3352
  2067  000222  C030  F09B         	movff	?___ftmul+1,_calculatePID$3352+1
  2068  000226  C031  F09C         	movff	?___ftmul+2,_calculatePID$3352+2
  2069                           
  2070                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2071  00022A  C0BF  F032         	movff	_loopTime,___ftmul@f2
  2072  00022E  C0C0  F033         	movff	_loopTime+1,___ftmul@f2+1
  2073  000232  C0C1  F034         	movff	_loopTime+2,___ftmul@f2+2
  2074  000236  C09A  F02F         	movff	_calculatePID$3352,___ftmul@f1
  2075  00023A  C09B  F030         	movff	_calculatePID$3352+1,___ftmul@f1+1
  2076  00023E  C09C  F031         	movff	_calculatePID$3352+2,___ftmul@f1+2
  2077  000242  EC22  F006         	call	___ftmul	;wreg free
  2078  000246  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2079  00024A  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2080  00024E  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2081  000252  C0AF  F032         	movff	_error,___ftmul@f2
  2082  000256  C0B0  F033         	movff	_error+1,___ftmul@f2+1
  2083  00025A  C0B1  F034         	movff	_error+2,___ftmul@f2+2
  2084  00025E  C0AC  F02F         	movff	_Kp,___ftmul@f1
  2085  000262  C0AD  F030         	movff	_Kp+1,___ftmul@f1+1
  2086  000266  C0AE  F031         	movff	_Kp+2,___ftmul@f1+2
  2087  00026A  EC22  F006         	call	___ftmul	;wreg free
  2088  00026E  C02F  F069         	movff	?___ftmul,___ftadd@f1
  2089  000272  C030  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  2090  000276  C031  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  2091  00027A  ECB0  F003         	call	___ftadd	;wreg free
  2092  00027E  C069  F08E         	movff	?___ftadd,_calculatePID$3353
  2093  000282  C06A  F08F         	movff	?___ftadd+1,_calculatePID$3353+1
  2094  000286  C06B  F090         	movff	?___ftadd+2,_calculatePID$3353+2
  2095                           
  2096                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2097  00028A  C0A6  F032         	movff	_Kd,___ftmul@f2
  2098  00028E  C0A7  F033         	movff	_Kd+1,___ftmul@f2+1
  2099  000292  C0A8  F034         	movff	_Kd+2,___ftmul@f2+2
  2100  000296  C0BF  F023         	movff	_loopTime,___ftdiv@f2
  2101  00029A  C0C0  F024         	movff	_loopTime+1,___ftdiv@f2+1
  2102  00029E  C0C1  F025         	movff	_loopTime+2,___ftdiv@f2+2
  2103  0002A2  C097  F020         	movff	calculatePID@derErr,___ftdiv@f1
  2104  0002A6  C098  F021         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2105  0002AA  C099  F022         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2106  0002AE  EC4C  F007         	call	___ftdiv	;wreg free
  2107  0002B2  C020  F02F         	movff	?___ftdiv,___ftmul@f1
  2108  0002B6  C021  F030         	movff	?___ftdiv+1,___ftmul@f1+1
  2109  0002BA  C022  F031         	movff	?___ftdiv+2,___ftmul@f1+2
  2110  0002BE  EC22  F006         	call	___ftmul	;wreg free
  2111  0002C2  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2112  0002C6  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2113  0002CA  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2114  0002CE  C08E  F069         	movff	_calculatePID$3353,___ftadd@f1
  2115  0002D2  C08F  F06A         	movff	_calculatePID$3353+1,___ftadd@f1+1
  2116  0002D6  C090  F06B         	movff	_calculatePID$3353+2,___ftadd@f1+2
  2117  0002DA  ECB0  F003         	call	___ftadd	;wreg free
  2118  0002DE  C069  F075         	movff	?___ftadd,___fttol@f1
  2119  0002E2  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  2120  0002E6  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  2121  0002EA  EC89  F005         	call	___fttol	;wreg free
  2122  0002EE  D08A               	goto	L1
  2123  0002F0                     l3735:
  2124                           
  2125                           ;PID.c: 53: else
  2126                           ;PID.c: 54: motorInput = Kp * error + (1.2 * Ki * intErr * loopTime) + (Kd * (derErr / l
      +                          oopTime));
  2127  0002F0  C0B2  F032         	movff	_intErr,___ftmul@f2
  2128  0002F4  C0B3  F033         	movff	_intErr+1,___ftmul@f2+1
  2129  0002F8  C0B4  F034         	movff	_intErr+2,___ftmul@f2+2
  2130  0002FC  C0A9  F02F         	movff	_Ki,___ftmul@f1
  2131  000300  C0AA  F030         	movff	_Ki+1,___ftmul@f1+1
  2132  000304  C0AB  F031         	movff	_Ki+2,___ftmul@f1+2
  2133  000308  EC22  F006         	call	___ftmul	;wreg free
  2134  00030C  C02F  F09A         	movff	?___ftmul,_calculatePID$3352
  2135  000310  C030  F09B         	movff	?___ftmul+1,_calculatePID$3352+1
  2136  000314  C031  F09C         	movff	?___ftmul+2,_calculatePID$3352+2
  2137                           
  2138                           ;PID.c: 53: else
  2139                           ;PID.c: 54: motorInput = Kp * error + (1.2 * Ki * intErr * loopTime) + (Kd * (derErr / l
      +                          oopTime));
  2140  000318  C0BF  F032         	movff	_loopTime,___ftmul@f2
  2141  00031C  C0C0  F033         	movff	_loopTime+1,___ftmul@f2+1
  2142  000320  C0C1  F034         	movff	_loopTime+2,___ftmul@f2+2
  2143  000324  C09A  F02F         	movff	_calculatePID$3352,___ftmul@f1
  2144  000328  C09B  F030         	movff	_calculatePID$3352+1,___ftmul@f1+1
  2145  00032C  C09C  F031         	movff	_calculatePID$3352+2,___ftmul@f1+2
  2146  000330  EC22  F006         	call	___ftmul	;wreg free
  2147  000334  C02F  F091         	movff	?___ftmul,_calculatePID$3354
  2148  000338  C030  F092         	movff	?___ftmul+1,_calculatePID$3354+1
  2149  00033C  C031  F093         	movff	?___ftmul+2,_calculatePID$3354+2
  2150                           
  2151                           ;PID.c: 53: else
  2152                           ;PID.c: 54: motorInput = Kp * error + (1.2 * Ki * intErr * loopTime) + (Kd * (derErr / l
      +                          oopTime));
  2153  000340  0E9A               	movlw	154
  2154  000342  6E32               	movwf	___ftmul@f2,c
  2155  000344  0E99               	movlw	153
  2156  000346  6E33               	movwf	___ftmul@f2+1,c
  2157  000348  0E3F               	movlw	63
  2158  00034A  6E34               	movwf	___ftmul@f2+2,c
  2159  00034C  C091  F02F         	movff	_calculatePID$3354,___ftmul@f1
  2160  000350  C092  F030         	movff	_calculatePID$3354+1,___ftmul@f1+1
  2161  000354  C093  F031         	movff	_calculatePID$3354+2,___ftmul@f1+2
  2162  000358  EC22  F006         	call	___ftmul	;wreg free
  2163  00035C  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2164  000360  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2165  000364  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2166  000368  C0AF  F032         	movff	_error,___ftmul@f2
  2167  00036C  C0B0  F033         	movff	_error+1,___ftmul@f2+1
  2168  000370  C0B1  F034         	movff	_error+2,___ftmul@f2+2
  2169  000374  C0AC  F02F         	movff	_Kp,___ftmul@f1
  2170  000378  C0AD  F030         	movff	_Kp+1,___ftmul@f1+1
  2171  00037C  C0AE  F031         	movff	_Kp+2,___ftmul@f1+2
  2172  000380  EC22  F006         	call	___ftmul	;wreg free
  2173  000384  C02F  F069         	movff	?___ftmul,___ftadd@f1
  2174  000388  C030  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  2175  00038C  C031  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  2176  000390  ECB0  F003         	call	___ftadd	;wreg free
  2177  000394  C069  F094         	movff	?___ftadd,_calculatePID$3355
  2178  000398  C06A  F095         	movff	?___ftadd+1,_calculatePID$3355+1
  2179  00039C  C06B  F096         	movff	?___ftadd+2,_calculatePID$3355+2
  2180                           
  2181                           ;PID.c: 53: else
  2182                           ;PID.c: 54: motorInput = Kp * error + (1.2 * Ki * intErr * loopTime) + (Kd * (derErr / l
      +                          oopTime));
  2183  0003A0  C0A6  F032         	movff	_Kd,___ftmul@f2
  2184  0003A4  C0A7  F033         	movff	_Kd+1,___ftmul@f2+1
  2185  0003A8  C0A8  F034         	movff	_Kd+2,___ftmul@f2+2
  2186  0003AC  C0BF  F023         	movff	_loopTime,___ftdiv@f2
  2187  0003B0  C0C0  F024         	movff	_loopTime+1,___ftdiv@f2+1
  2188  0003B4  C0C1  F025         	movff	_loopTime+2,___ftdiv@f2+2
  2189  0003B8  C097  F020         	movff	calculatePID@derErr,___ftdiv@f1
  2190  0003BC  C098  F021         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2191  0003C0  C099  F022         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2192  0003C4  EC4C  F007         	call	___ftdiv	;wreg free
  2193  0003C8  C020  F02F         	movff	?___ftdiv,___ftmul@f1
  2194  0003CC  C021  F030         	movff	?___ftdiv+1,___ftmul@f1+1
  2195  0003D0  C022  F031         	movff	?___ftdiv+2,___ftmul@f1+2
  2196  0003D4  EC22  F006         	call	___ftmul	;wreg free
  2197  0003D8  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2198  0003DC  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2199  0003E0  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2200  0003E4  C094  F069         	movff	_calculatePID$3355,___ftadd@f1
  2201  0003E8  C095  F06A         	movff	_calculatePID$3355+1,___ftadd@f1+1
  2202  0003EC  C096  F06B         	movff	_calculatePID$3355+2,___ftadd@f1+2
  2203  0003F0  ECB0  F003         	call	___ftadd	;wreg free
  2204  0003F4  C069  F075         	movff	?___ftadd,___fttol@f1
  2205  0003F8  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  2206  0003FC  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  2207  000400  EC89  F005         	call	___fttol	;wreg free
  2208  000404                     L1:
  2209  000404  C075  F0B8         	movff	?___fttol,_motorInput
  2210  000408  C076  F0B9         	movff	?___fttol+1,_motorInput+1
  2211  00040C  D000               	goto	l3737
  2212  00040E                     l3737:
  2213                           
  2214                           ;PID.c: 56: prevErr = error;
  2215  00040E  C0AF  F0B5         	movff	_error,_prevErr
  2216  000412  C0B0  F0B6         	movff	_error+1,_prevErr+1
  2217  000416  C0B1  F0B7         	movff	_error+2,_prevErr+2
  2218  00041A  0012               	return		;funcret
  2219  00041C                     __end_of_calculatePID:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           prodh	equ	0xFF4
  2226                           prodl	equ	0xFF3
  2227                           intcon	equ	0xFF2
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           postdec1	equ	0xFE5
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function ___fttol *****************
  2238 ;; Defined at:
  2239 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  f1              3   21[BANK0 ] float 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  lval            4   31[BANK0 ] unsigned long 
  2244 ;;  exp1            1   35[BANK0 ] unsigned char 
  2245 ;;  sign1           1   30[BANK0 ] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  4   21[BANK0 ] long 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:       15 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    4
  2262 ;; This function calls:
  2263 ;;		Nothing
  2264 ;; This function is called by:
  2265 ;;		_calculatePID
  2266 ;;		_ZeroMotors
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text4
  2271  000B12                     __ptext4:
  2272                           	opt stack 0
  2273  000B12                     ___fttol:
  2274                           	opt stack 23
  2275                           
  2276                           ;incstack = 0
  2277  000B12  C077  F079         	movff	___fttol@f1+2,??___fttol
  2278  000B16  0100               	movlb	0	; () banked
  2279  000B18  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2280  000B1A  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2281  000B1C  0100               	movlb	0	; () banked
  2282  000B1E  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2283  000B20  0100               	movlb	0	; () banked
  2284  000B22  3779               	rlcf	??___fttol& (0+255),f,b
  2285  000B24  E301               	bnc	u1911
  2286  000B26  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2287  000B28                     u1911:
  2288  000B28  0100               	movlb	0	; () banked
  2289  000B2A  5179               	movf	??___fttol& (0+255),w,b
  2290  000B2C  0100               	movlb	0	; () banked
  2291  000B2E  6F83               	movwf	___fttol@exp1& (0+255),b
  2292  000B30  0100               	movlb	0	; () banked
  2293  000B32  5183               	movf	___fttol@exp1& (0+255),w,b
  2294  000B34  A4D8               	btfss	status,2,c
  2295  000B36  D002               	goto	l2699
  2296  000B38  D051               	goto	l2723
  2297                           
  2298                           ; BSR set to: 0
  2299                           
  2300                           ; BSR set to: 0
  2301  000B3A  D083               	goto	l1074
  2302  000B3C                     l2699:
  2303                           
  2304                           ; BSR set to: 0
  2305  000B3C  0E17               	movlw	23
  2306  000B3E  0100               	movlb	0	; () banked
  2307  000B40  6F79               	movwf	??___fttol& (0+255),b
  2308  000B42  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2309  000B46  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2310  000B4A  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2311  000B4E  0100               	movlb	0	; () banked
  2312  000B50  2979               	incf	??___fttol& (0+255),w,b
  2313  000B52  0100               	movlb	0	; () banked
  2314  000B54  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2315  000B56  D005               	goto	u1930
  2316  000B58                     u1935:
  2317  000B58  0100               	movlb	0	; () banked
  2318  000B5A  90D8               	bcf	status,0,c
  2319  000B5C  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2320  000B5E  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2321  000B60  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2322  000B62                     u1930:
  2323  000B62  0100               	movlb	0	; () banked
  2324  000B64  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2325  000B66  D7F8               	goto	u1935
  2326  000B68  0100               	movlb	0	; () banked
  2327  000B6A  517A               	movf	(??___fttol+1)& (0+255),w,b
  2328  000B6C  0100               	movlb	0	; () banked
  2329  000B6E  6F7E               	movwf	___fttol@sign1& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332  000B70  0100               	movlb	0	; () banked
  2333  000B72  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2334                           
  2335                           ; BSR set to: 0
  2336  000B74  0EFF               	movlw	255
  2337  000B76  0100               	movlb	0	; () banked
  2338  000B78  1775               	andwf	___fttol@f1& (0+255),f,b
  2339  000B7A  0EFF               	movlw	255
  2340  000B7C  0100               	movlb	0	; () banked
  2341  000B7E  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2342  000B80  0E00               	movlw	0
  2343  000B82  0100               	movlb	0	; () banked
  2344  000B84  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2345                           
  2346                           ; BSR set to: 0
  2347  000B86  0100               	movlb	0	; () banked
  2348  000B88  5175               	movf	___fttol@f1& (0+255),w,b
  2349  000B8A  0100               	movlb	0	; () banked
  2350  000B8C  6F7F               	movwf	___fttol@lval& (0+255),b
  2351  000B8E  0100               	movlb	0	; () banked
  2352  000B90  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2353  000B92  0100               	movlb	0	; () banked
  2354  000B94  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2355  000B96  0100               	movlb	0	; () banked
  2356  000B98  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2357  000B9A  0100               	movlb	0	; () banked
  2358  000B9C  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2359  000B9E  0100               	movlb	0	; () banked
  2360  000BA0  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2361                           
  2362                           ; BSR set to: 0
  2363  000BA2  0E8E               	movlw	142
  2364  000BA4  0100               	movlb	0	; () banked
  2365  000BA6  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2366                           
  2367                           ; BSR set to: 0
  2368  000BA8  0100               	movlb	0	; () banked
  2369  000BAA  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2370  000BAC  D013               	goto	l2721
  2371                           
  2372                           ; BSR set to: 0
  2373  000BAE  0100               	movlb	0	; () banked
  2374  000BB0  5183               	movf	___fttol@exp1& (0+255),w,b
  2375  000BB2  0A80               	xorlw	128
  2376  000BB4  0F8F               	addlw	143
  2377  000BB6  B0D8               	btfsc	status,0,c
  2378  000BB8  D003               	goto	l2717
  2379  000BBA  D010               	goto	l2723
  2380                           
  2381                           ; BSR set to: 0
  2382                           
  2383                           ; BSR set to: 0
  2384  000BBC  D042               	goto	l1074
  2385                           
  2386                           ; BSR set to: 0
  2387  000BBE  D000               	goto	l2717
  2388  000BC0                     l2717:
  2389                           
  2390                           ; BSR set to: 0
  2391  000BC0  0100               	movlb	0	; () banked
  2392  000BC2  90D8               	bcf	status,0,c
  2393  000BC4  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2394  000BC6  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2395  000BC8  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2396  000BCA  337F               	rrcf	___fttol@lval& (0+255),f,b
  2397                           
  2398                           ; BSR set to: 0
  2399  000BCC  0100               	movlb	0	; () banked
  2400  000BCE  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2401  000BD0  D7F7               	goto	l2717
  2402                           
  2403                           ; BSR set to: 0
  2404  000BD2  D01F               	goto	l2731
  2405  000BD4                     l2721:
  2406                           
  2407                           ; BSR set to: 0
  2408  000BD4  0E17               	movlw	23
  2409  000BD6  0100               	movlb	0	; () banked
  2410  000BD8  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2411  000BDA  D014               	goto	l2729
  2412  000BDC                     l2723:
  2413                           
  2414                           ; BSR set to: 0
  2415  000BDC  0E00               	movlw	0
  2416  000BDE  0100               	movlb	0	; () banked
  2417  000BE0  6F75               	movwf	?___fttol& (0+255),b
  2418  000BE2  0E00               	movlw	0
  2419  000BE4  6F76               	movwf	(?___fttol+1)& (0+255),b
  2420  000BE6  0E00               	movlw	0
  2421  000BE8  6F77               	movwf	(?___fttol+2)& (0+255),b
  2422  000BEA  0E00               	movlw	0
  2423  000BEC  6F78               	movwf	(?___fttol+3)& (0+255),b
  2424                           
  2425                           ; BSR set to: 0
  2426  000BEE  D029               	goto	l1074
  2427                           
  2428                           ; BSR set to: 0
  2429  000BF0  D009               	goto	l2729
  2430  000BF2                     l2727:
  2431                           
  2432                           ; BSR set to: 0
  2433  000BF2  0100               	movlb	0	; () banked
  2434  000BF4  90D8               	bcf	status,0,c
  2435  000BF6  377F               	rlcf	___fttol@lval& (0+255),f,b
  2436  000BF8  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2437  000BFA  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2438  000BFC  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2439  000BFE  0100               	movlb	0	; () banked
  2440  000C00  0783               	decf	___fttol@exp1& (0+255),f,b
  2441  000C02  D000               	goto	l2729
  2442  000C04                     l2729:
  2443                           
  2444                           ; BSR set to: 0
  2445  000C04  0100               	movlb	0	; () banked
  2446  000C06  5183               	movf	___fttol@exp1& (0+255),w,b
  2447  000C08  0100               	movlb	0	; () banked
  2448  000C0A  B4D8               	btfsc	status,2,c
  2449  000C0C  D002               	goto	l2731
  2450  000C0E  D7F1               	goto	l2727
  2451                           
  2452                           ; BSR set to: 0
  2453  000C10  D000               	goto	l2731
  2454  000C12                     l2731:
  2455                           
  2456                           ; BSR set to: 0
  2457  000C12  0100               	movlb	0	; () banked
  2458  000C14  517E               	movf	___fttol@sign1& (0+255),w,b
  2459  000C16  0100               	movlb	0	; () banked
  2460  000C18  B4D8               	btfsc	status,2,c
  2461  000C1A  D00A               	goto	l2735
  2462                           
  2463                           ; BSR set to: 0
  2464  000C1C  0100               	movlb	0	; () banked
  2465  000C1E  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2466  000C20  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2467  000C22  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2468  000C24  6D7F               	negf	___fttol@lval& (0+255),b
  2469  000C26  0E00               	movlw	0
  2470  000C28  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2471  000C2A  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2472  000C2C  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2473  000C2E  D000               	goto	l2735
  2474  000C30                     l2735:
  2475                           
  2476                           ; BSR set to: 0
  2477  000C30  C07F  F075         	movff	___fttol@lval,?___fttol
  2478  000C34  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2479  000C38  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2480  000C3C  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2481  000C40  D000               	goto	l1074
  2482  000C42                     l1074:
  2483                           
  2484                           ; BSR set to: 0
  2485  000C42  0012               	return		;funcret
  2486  000C44                     __end_of___fttol:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           prodh	equ	0xFF4
  2493                           prodl	equ	0xFF3
  2494                           intcon	equ	0xFF2
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1l	equ	0xFE1
  2499                           indf2	equ	0xFDF
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function ___ftsub *****************
  2505 ;; Defined at:
  2506 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  f1              3   21[BANK0 ] float 
  2509 ;;  f2              3   24[BANK0 ] float 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;		None
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  3   21[BANK0 ] float 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2521 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;Total ram usage:        6 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    6
  2528 ;; This function calls:
  2529 ;;		___ftadd
  2530 ;; This function is called by:
  2531 ;;		_calculatePID
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           	psect	text5
  2536  001678                     __ptext5:
  2537                           	opt stack 0
  2538  001678                     ___ftsub:
  2539                           	opt stack 21
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;incstack = 0
  2543  001678  0100               	movlb	0	; () banked
  2544  00167A  5178               	movf	___ftsub@f2& (0+255),w,b
  2545  00167C  0100               	movlb	0	; () banked
  2546  00167E  1179               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  2547  001680  0100               	movlb	0	; () banked
  2548  001682  117A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  2549  001684  B4D8               	btfsc	status,2,c
  2550  001686  D00A               	goto	l3685
  2551                           
  2552                           ; BSR set to: 0
  2553  001688  0E00               	movlw	0
  2554  00168A  0100               	movlb	0	; () banked
  2555  00168C  1B78               	xorwf	___ftsub@f2& (0+255),f,b
  2556  00168E  0E00               	movlw	0
  2557  001690  0100               	movlb	0	; () banked
  2558  001692  1B79               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2559  001694  0E80               	movlw	128
  2560  001696  0100               	movlb	0	; () banked
  2561  001698  1B7A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2562  00169A  D000               	goto	l3685
  2563  00169C                     l3685:
  2564                           
  2565                           ; BSR set to: 0
  2566  00169C  C075  F069         	movff	___ftsub@f1,___ftadd@f1
  2567  0016A0  C076  F06A         	movff	___ftsub@f1+1,___ftadd@f1+1
  2568  0016A4  C077  F06B         	movff	___ftsub@f1+2,___ftadd@f1+2
  2569  0016A8  C078  F06C         	movff	___ftsub@f2,___ftadd@f2
  2570  0016AC  C079  F06D         	movff	___ftsub@f2+1,___ftadd@f2+1
  2571  0016B0  C07A  F06E         	movff	___ftsub@f2+2,___ftadd@f2+2
  2572  0016B4  ECB0  F003         	call	___ftadd	;wreg free
  2573  0016B8  C069  F075         	movff	?___ftadd,?___ftsub
  2574  0016BC  C06A  F076         	movff	?___ftadd+1,?___ftsub+1
  2575  0016C0  C06B  F077         	movff	?___ftadd+2,?___ftsub+2
  2576  0016C4  D000               	goto	l1070
  2577  0016C6                     l1070:
  2578  0016C6  0012               	return		;funcret
  2579  0016C8                     __end_of___ftsub:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           prodh	equ	0xFF4
  2586                           prodl	equ	0xFF3
  2587                           intcon	equ	0xFF2
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           postdec1	equ	0xFE5
  2591                           fsr1l	equ	0xFE1
  2592                           indf2	equ	0xFDF
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function ___ftadd *****************
  2598 ;; Defined at:
  2599 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  f1              3    9[BANK0 ] float 
  2602 ;;  f2              3   12[BANK0 ] float 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  exp1            1   20[BANK0 ] unsigned char 
  2605 ;;  exp2            1   19[BANK0 ] unsigned char 
  2606 ;;  sign            1   18[BANK0 ] unsigned char 
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  3    9[BANK0 ] float 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, status,0, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2616 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;Total ram usage:       12 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    5
  2623 ;; This function calls:
  2624 ;;		___ftpack
  2625 ;; This function is called by:
  2626 ;;		_calculatePID
  2627 ;;		___ftsub
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text6
  2632  000760                     __ptext6:
  2633                           	opt stack 0
  2634  000760                     ___ftadd:
  2635                           	opt stack 21
  2636                           
  2637                           ;incstack = 0
  2638  000760  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
  2639  000764  0100               	movlb	0	; () banked
  2640  000766  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2641  000768  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2642  00076A  0100               	movlb	0	; () banked
  2643  00076C  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2644  00076E  0100               	movlb	0	; () banked
  2645  000770  376F               	rlcf	??___ftadd& (0+255),f,b
  2646  000772  E301               	bnc	u2881
  2647  000774  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2648  000776                     u2881:
  2649  000776  0100               	movlb	0	; () banked
  2650  000778  516F               	movf	??___ftadd& (0+255),w,b
  2651  00077A  0100               	movlb	0	; () banked
  2652  00077C  6F74               	movwf	___ftadd@exp1& (0+255),b
  2653  00077E  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
  2654  000782  0100               	movlb	0	; () banked
  2655  000784  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2656  000786  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2657  000788  0100               	movlb	0	; () banked
  2658  00078A  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2659  00078C  0100               	movlb	0	; () banked
  2660  00078E  376F               	rlcf	??___ftadd& (0+255),f,b
  2661  000790  E301               	bnc	u2891
  2662  000792  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2663  000794                     u2891:
  2664  000794  0100               	movlb	0	; () banked
  2665  000796  516F               	movf	??___ftadd& (0+255),w,b
  2666  000798  0100               	movlb	0	; () banked
  2667  00079A  6F73               	movwf	___ftadd@exp2& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670  00079C  0100               	movlb	0	; () banked
  2671  00079E  5174               	movf	___ftadd@exp1& (0+255),w,b
  2672  0007A0  0100               	movlb	0	; () banked
  2673  0007A2  B4D8               	btfsc	status,2,c
  2674  0007A4  D011               	goto	l1006
  2675                           
  2676                           ; BSR set to: 0
  2677  0007A6  0100               	movlb	0	; () banked
  2678  0007A8  5173               	movf	___ftadd@exp2& (0+255),w,b
  2679  0007AA  0100               	movlb	0	; () banked
  2680  0007AC  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  2681  0007AE  B0D8               	btfsc	status,0,c
  2682  0007B0  D012               	goto	l3521
  2683                           
  2684                           ; BSR set to: 0
  2685  0007B2  0100               	movlb	0	; () banked
  2686  0007B4  5174               	movf	___ftadd@exp1& (0+255),w,b
  2687  0007B6  0800               	sublw	0
  2688  0007B8  0100               	movlb	0	; () banked
  2689  0007BA  2573               	addwf	___ftadd@exp2& (0+255),w,b
  2690  0007BC  0100               	movlb	0	; () banked
  2691  0007BE  6F6F               	movwf	??___ftadd& (0+255),b
  2692  0007C0  0E18               	movlw	24
  2693  0007C2  0100               	movlb	0	; () banked
  2694  0007C4  656F               	cpfsgt	??___ftadd& (0+255),b
  2695  0007C6  D007               	goto	l3521
  2696  0007C8                     l1006:
  2697                           
  2698                           ; BSR set to: 0
  2699  0007C8  C06C  F069         	movff	___ftadd@f2,?___ftadd
  2700  0007CC  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
  2701  0007D0  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
  2702  0007D4  D103               	goto	l1007
  2703  0007D6                     l3521:
  2704                           
  2705                           ; BSR set to: 0
  2706  0007D6  0100               	movlb	0	; () banked
  2707  0007D8  5173               	movf	___ftadd@exp2& (0+255),w,b
  2708  0007DA  0100               	movlb	0	; () banked
  2709  0007DC  B4D8               	btfsc	status,2,c
  2710  0007DE  D011               	goto	l1010
  2711                           
  2712                           ; BSR set to: 0
  2713  0007E0  0100               	movlb	0	; () banked
  2714  0007E2  5174               	movf	___ftadd@exp1& (0+255),w,b
  2715  0007E4  0100               	movlb	0	; () banked
  2716  0007E6  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  2717  0007E8  B0D8               	btfsc	status,0,c
  2718  0007EA  D012               	goto	l3527
  2719                           
  2720                           ; BSR set to: 0
  2721  0007EC  0100               	movlb	0	; () banked
  2722  0007EE  5173               	movf	___ftadd@exp2& (0+255),w,b
  2723  0007F0  0800               	sublw	0
  2724  0007F2  0100               	movlb	0	; () banked
  2725  0007F4  2574               	addwf	___ftadd@exp1& (0+255),w,b
  2726  0007F6  0100               	movlb	0	; () banked
  2727  0007F8  6F6F               	movwf	??___ftadd& (0+255),b
  2728  0007FA  0E18               	movlw	24
  2729  0007FC  0100               	movlb	0	; () banked
  2730  0007FE  656F               	cpfsgt	??___ftadd& (0+255),b
  2731  000800  D007               	goto	l3527
  2732  000802                     l1010:
  2733                           
  2734                           ; BSR set to: 0
  2735  000802  C069  F069         	movff	___ftadd@f1,?___ftadd
  2736  000806  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
  2737  00080A  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
  2738  00080E  D0E6               	goto	l1007
  2739  000810                     l3527:
  2740                           
  2741                           ; BSR set to: 0
  2742  000810  0E06               	movlw	6
  2743  000812  0100               	movlb	0	; () banked
  2744  000814  6F72               	movwf	___ftadd@sign& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747  000816  0100               	movlb	0	; () banked
  2748  000818  AF6B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  2749  00081A  D003               	goto	l3533
  2750                           
  2751                           ; BSR set to: 0
  2752  00081C  0100               	movlb	0	; () banked
  2753  00081E  8F72               	bsf	___ftadd@sign& (0+255),7,b
  2754  000820  D000               	goto	l3533
  2755  000822                     l3533:
  2756                           
  2757                           ; BSR set to: 0
  2758  000822  0100               	movlb	0	; () banked
  2759  000824  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2760  000826  D002               	goto	l1012
  2761                           
  2762                           ; BSR set to: 0
  2763  000828  0100               	movlb	0	; () banked
  2764  00082A  8D72               	bsf	___ftadd@sign& (0+255),6,b
  2765  00082C                     l1012:
  2766                           
  2767                           ; BSR set to: 0
  2768  00082C  0100               	movlb	0	; () banked
  2769  00082E  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2770                           
  2771                           ; BSR set to: 0
  2772  000830  0EFF               	movlw	255
  2773  000832  0100               	movlb	0	; () banked
  2774  000834  1769               	andwf	___ftadd@f1& (0+255),f,b
  2775  000836  0EFF               	movlw	255
  2776  000838  0100               	movlb	0	; () banked
  2777  00083A  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2778  00083C  0E00               	movlw	0
  2779  00083E  0100               	movlb	0	; () banked
  2780  000840  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2781  000842  0100               	movlb	0	; () banked
  2782  000844  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2783                           
  2784                           ; BSR set to: 0
  2785  000846  0EFF               	movlw	255
  2786  000848  0100               	movlb	0	; () banked
  2787  00084A  176C               	andwf	___ftadd@f2& (0+255),f,b
  2788  00084C  0EFF               	movlw	255
  2789  00084E  0100               	movlb	0	; () banked
  2790  000850  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2791  000852  0E00               	movlw	0
  2792  000854  0100               	movlb	0	; () banked
  2793  000856  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2794                           
  2795                           ; BSR set to: 0
  2796  000858  0100               	movlb	0	; () banked
  2797  00085A  5173               	movf	___ftadd@exp2& (0+255),w,b
  2798  00085C  0100               	movlb	0	; () banked
  2799  00085E  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  2800  000860  B0D8               	btfsc	status,0,c
  2801  000862  D028               	goto	l3553
  2802  000864                     l3543:
  2803                           
  2804                           ; BSR set to: 0
  2805  000864  0100               	movlb	0	; () banked
  2806  000866  90D8               	bcf	status,0,c
  2807  000868  376C               	rlcf	___ftadd@f2& (0+255),f,b
  2808  00086A  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2809  00086C  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2810  00086E  0100               	movlb	0	; () banked
  2811  000870  0773               	decf	___ftadd@exp2& (0+255),f,b
  2812                           
  2813                           ; BSR set to: 0
  2814  000872  0100               	movlb	0	; () banked
  2815  000874  5174               	movf	___ftadd@exp1& (0+255),w,b
  2816  000876  0100               	movlb	0	; () banked
  2817  000878  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  2818  00087A  B4D8               	btfsc	status,2,c
  2819  00087C  D013               	goto	l3551
  2820                           
  2821                           ; BSR set to: 0
  2822  00087E  0100               	movlb	0	; () banked
  2823  000880  0772               	decf	___ftadd@sign& (0+255),f,b
  2824  000882  C072  F06F         	movff	___ftadd@sign,??___ftadd
  2825  000886  0E07               	movlw	7
  2826  000888  0100               	movlb	0	; () banked
  2827  00088A  176F               	andwf	??___ftadd& (0+255),f,b
  2828  00088C  B4D8               	btfsc	status,2,c
  2829  00088E  D00A               	goto	l3551
  2830  000890  D7E9               	goto	l3543
  2831                           
  2832                           ; BSR set to: 0
  2833                           
  2834                           ; BSR set to: 0
  2835  000892  D008               	goto	l3551
  2836  000894                     l3549:
  2837                           
  2838                           ; BSR set to: 0
  2839  000894  0100               	movlb	0	; () banked
  2840  000896  90D8               	bcf	status,0,c
  2841  000898  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2842  00089A  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2843  00089C  3369               	rrcf	___ftadd@f1& (0+255),f,b
  2844  00089E  0100               	movlb	0	; () banked
  2845  0008A0  2B74               	incf	___ftadd@exp1& (0+255),f,b
  2846  0008A2  D000               	goto	l3551
  2847  0008A4                     l3551:
  2848                           
  2849                           ; BSR set to: 0
  2850  0008A4  0100               	movlb	0	; () banked
  2851  0008A6  5173               	movf	___ftadd@exp2& (0+255),w,b
  2852  0008A8  0100               	movlb	0	; () banked
  2853  0008AA  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  2854  0008AC  B4D8               	btfsc	status,2,c
  2855  0008AE  D030               	goto	l1021
  2856  0008B0  D7F1               	goto	l3549
  2857                           
  2858                           ; BSR set to: 0
  2859  0008B2  D02E               	goto	l1021
  2860  0008B4                     l3553:
  2861                           
  2862                           ; BSR set to: 0
  2863  0008B4  0100               	movlb	0	; () banked
  2864  0008B6  5174               	movf	___ftadd@exp1& (0+255),w,b
  2865  0008B8  0100               	movlb	0	; () banked
  2866  0008BA  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  2867  0008BC  B0D8               	btfsc	status,0,c
  2868  0008BE  D028               	goto	l1021
  2869  0008C0                     l3555:
  2870                           
  2871                           ; BSR set to: 0
  2872  0008C0  0100               	movlb	0	; () banked
  2873  0008C2  90D8               	bcf	status,0,c
  2874  0008C4  3769               	rlcf	___ftadd@f1& (0+255),f,b
  2875  0008C6  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2876  0008C8  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2877  0008CA  0100               	movlb	0	; () banked
  2878  0008CC  0774               	decf	___ftadd@exp1& (0+255),f,b
  2879                           
  2880                           ; BSR set to: 0
  2881  0008CE  0100               	movlb	0	; () banked
  2882  0008D0  5174               	movf	___ftadd@exp1& (0+255),w,b
  2883  0008D2  0100               	movlb	0	; () banked
  2884  0008D4  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  2885  0008D6  B4D8               	btfsc	status,2,c
  2886  0008D8  D013               	goto	l3563
  2887                           
  2888                           ; BSR set to: 0
  2889  0008DA  0100               	movlb	0	; () banked
  2890  0008DC  0772               	decf	___ftadd@sign& (0+255),f,b
  2891  0008DE  C072  F06F         	movff	___ftadd@sign,??___ftadd
  2892  0008E2  0E07               	movlw	7
  2893  0008E4  0100               	movlb	0	; () banked
  2894  0008E6  176F               	andwf	??___ftadd& (0+255),f,b
  2895  0008E8  B4D8               	btfsc	status,2,c
  2896  0008EA  D00A               	goto	l3563
  2897  0008EC  D7E9               	goto	l3555
  2898                           
  2899                           ; BSR set to: 0
  2900                           
  2901                           ; BSR set to: 0
  2902  0008EE  D008               	goto	l3563
  2903  0008F0                     l3561:
  2904                           
  2905                           ; BSR set to: 0
  2906  0008F0  0100               	movlb	0	; () banked
  2907  0008F2  90D8               	bcf	status,0,c
  2908  0008F4  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2909  0008F6  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2910  0008F8  336C               	rrcf	___ftadd@f2& (0+255),f,b
  2911  0008FA  0100               	movlb	0	; () banked
  2912  0008FC  2B73               	incf	___ftadd@exp2& (0+255),f,b
  2913  0008FE  D000               	goto	l3563
  2914  000900                     l3563:
  2915                           
  2916                           ; BSR set to: 0
  2917  000900  0100               	movlb	0	; () banked
  2918  000902  5173               	movf	___ftadd@exp2& (0+255),w,b
  2919  000904  0100               	movlb	0	; () banked
  2920  000906  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  2921  000908  B4D8               	btfsc	status,2,c
  2922  00090A  D002               	goto	l1021
  2923  00090C  D7F1               	goto	l3561
  2924                           
  2925                           ; BSR set to: 0
  2926  00090E  D000               	goto	l1021
  2927  000910                     l1021:
  2928                           
  2929                           ; BSR set to: 0
  2930  000910  0100               	movlb	0	; () banked
  2931  000912  AF72               	btfss	___ftadd@sign& (0+255),7,b
  2932  000914  D012               	goto	l1030
  2933                           
  2934                           ; BSR set to: 0
  2935  000916  0EFF               	movlw	255
  2936  000918  0100               	movlb	0	; () banked
  2937  00091A  1B69               	xorwf	___ftadd@f1& (0+255),f,b
  2938  00091C  0EFF               	movlw	255
  2939  00091E  0100               	movlb	0	; () banked
  2940  000920  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2941  000922  0EFF               	movlw	255
  2942  000924  0100               	movlb	0	; () banked
  2943  000926  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2944  000928  0E01               	movlw	1
  2945  00092A  0100               	movlb	0	; () banked
  2946  00092C  2769               	addwf	___ftadd@f1& (0+255),f,b
  2947  00092E  0E00               	movlw	0
  2948  000930  0100               	movlb	0	; () banked
  2949  000932  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2950  000934  0E00               	movlw	0
  2951  000936  0100               	movlb	0	; () banked
  2952  000938  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2953  00093A                     l1030:
  2954                           
  2955                           ; BSR set to: 0
  2956  00093A  0100               	movlb	0	; () banked
  2957  00093C  AD72               	btfss	___ftadd@sign& (0+255),6,b
  2958  00093E  D013               	goto	l3569
  2959                           
  2960                           ; BSR set to: 0
  2961  000940  0EFF               	movlw	255
  2962  000942  0100               	movlb	0	; () banked
  2963  000944  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  2964  000946  0EFF               	movlw	255
  2965  000948  0100               	movlb	0	; () banked
  2966  00094A  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2967  00094C  0EFF               	movlw	255
  2968  00094E  0100               	movlb	0	; () banked
  2969  000950  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2970  000952  0E01               	movlw	1
  2971  000954  0100               	movlb	0	; () banked
  2972  000956  276C               	addwf	___ftadd@f2& (0+255),f,b
  2973  000958  0E00               	movlw	0
  2974  00095A  0100               	movlb	0	; () banked
  2975  00095C  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2976  00095E  0E00               	movlw	0
  2977  000960  0100               	movlb	0	; () banked
  2978  000962  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2979  000964  D000               	goto	l3569
  2980  000966                     l3569:
  2981                           
  2982                           ; BSR set to: 0
  2983  000966  0E00               	movlw	0
  2984  000968  0100               	movlb	0	; () banked
  2985  00096A  6F72               	movwf	___ftadd@sign& (0+255),b
  2986                           
  2987                           ; BSR set to: 0
  2988  00096C  0100               	movlb	0	; () banked
  2989  00096E  5169               	movf	___ftadd@f1& (0+255),w,b
  2990  000970  0100               	movlb	0	; () banked
  2991  000972  276C               	addwf	___ftadd@f2& (0+255),f,b
  2992  000974  0100               	movlb	0	; () banked
  2993  000976  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
  2994  000978  0100               	movlb	0	; () banked
  2995  00097A  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2996  00097C  0100               	movlb	0	; () banked
  2997  00097E  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
  2998  000980  0100               	movlb	0	; () banked
  2999  000982  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3000                           
  3001                           ; BSR set to: 0
  3002  000984  0100               	movlb	0	; () banked
  3003  000986  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3004  000988  D016               	goto	l3579
  3005                           
  3006                           ; BSR set to: 0
  3007  00098A  0EFF               	movlw	255
  3008  00098C  0100               	movlb	0	; () banked
  3009  00098E  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3010  000990  0EFF               	movlw	255
  3011  000992  0100               	movlb	0	; () banked
  3012  000994  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3013  000996  0EFF               	movlw	255
  3014  000998  0100               	movlb	0	; () banked
  3015  00099A  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3016  00099C  0E01               	movlw	1
  3017  00099E  0100               	movlb	0	; () banked
  3018  0009A0  276C               	addwf	___ftadd@f2& (0+255),f,b
  3019  0009A2  0E00               	movlw	0
  3020  0009A4  0100               	movlb	0	; () banked
  3021  0009A6  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3022  0009A8  0E00               	movlw	0
  3023  0009AA  0100               	movlb	0	; () banked
  3024  0009AC  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3025                           
  3026                           ; BSR set to: 0
  3027  0009AE  0E01               	movlw	1
  3028  0009B0  0100               	movlb	0	; () banked
  3029  0009B2  6F72               	movwf	___ftadd@sign& (0+255),b
  3030  0009B4  D000               	goto	l3579
  3031  0009B6                     l3579:
  3032                           
  3033                           ; BSR set to: 0
  3034  0009B6  C06C  F018         	movff	___ftadd@f2,___ftpack@arg
  3035  0009BA  C06D  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  3036  0009BE  C06E  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  3037  0009C2  C074  F01B         	movff	___ftadd@exp1,___ftpack@exp
  3038  0009C6  C072  F01C         	movff	___ftadd@sign,___ftpack@sign
  3039  0009CA  ECBD  F007         	call	___ftpack	;wreg free
  3040  0009CE  C018  F069         	movff	?___ftpack,?___ftadd
  3041  0009D2  C019  F06A         	movff	?___ftpack+1,?___ftadd+1
  3042  0009D6  C01A  F06B         	movff	?___ftpack+2,?___ftadd+2
  3043  0009DA  D000               	goto	l1007
  3044  0009DC                     l1007:
  3045  0009DC  0012               	return		;funcret
  3046  0009DE                     __end_of___ftadd:
  3047                           	opt stack 0
  3048                           tblptru	equ	0xFF8
  3049                           tblptrh	equ	0xFF7
  3050                           tblptrl	equ	0xFF6
  3051                           tablat	equ	0xFF5
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           intcon	equ	0xFF2
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           postdec1	equ	0xFE5
  3058                           fsr1l	equ	0xFE1
  3059                           indf2	equ	0xFDF
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function ___ftneg *****************
  3065 ;; Defined at:
  3066 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  f1              3   23[COMRAM] float 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  3   23[COMRAM] float 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3080 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;Total ram usage:        3 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    4
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_calculatePID
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text7
  3095  001A6A                     __ptext7:
  3096                           	opt stack 0
  3097  001A6A                     ___ftneg:
  3098                           	opt stack 23
  3099                           
  3100                           ;incstack = 0
  3101  001A6A  5018               	movf	___ftneg@f1,w,c
  3102  001A6C  1019               	iorwf	___ftneg@f1+1,w,c
  3103  001A6E  101A               	iorwf	___ftneg@f1+2,w,c
  3104  001A70  B4D8               	btfsc	status,2,c
  3105  001A72  D006               	goto	l1063
  3106  001A74  0E00               	movlw	0
  3107  001A76  1A18               	xorwf	___ftneg@f1,f,c
  3108  001A78  0E00               	movlw	0
  3109  001A7A  1A19               	xorwf	___ftneg@f1+1,f,c
  3110  001A7C  0E80               	movlw	128
  3111  001A7E  1A1A               	xorwf	___ftneg@f1+2,f,c
  3112  001A80                     l1063:
  3113  001A80  C018  F018         	movff	___ftneg@f1,?___ftneg
  3114  001A84  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  3115  001A88  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  3116  001A8C  0012               	return		;funcret
  3117  001A8E                     __end_of___ftneg:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon	equ	0xFF2
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1l	equ	0xFE1
  3130                           indf2	equ	0xFDF
  3131                           fsr2h	equ	0xFDA
  3132                           fsr2l	equ	0xFD9
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function ___ftge *****************
  3136 ;; Defined at:
  3137 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  ff1             3   23[COMRAM] float 
  3140 ;;  ff2             3   26[COMRAM] float 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;		None               void
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3152 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;Total ram usage:        9 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    4
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_calculatePID
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text8
  3167  0012F8                     __ptext8:
  3168                           	opt stack 0
  3169  0012F8                     ___ftge:
  3170                           	opt stack 23
  3171                           
  3172                           ;incstack = 0
  3173  0012F8  AE1A               	btfss	___ftge@ff1+2,7,c
  3174  0012FA  D017               	goto	l2675
  3175  0012FC  C018  F01E         	movff	___ftge@ff1,??___ftge
  3176  001300  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3177  001304  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3178  001308  1E1E               	comf	??___ftge,f,c
  3179  00130A  1E1F               	comf	??___ftge+1,f,c
  3180  00130C  1E20               	comf	??___ftge+2,f,c
  3181  00130E  2A1E               	incf	??___ftge,f,c
  3182  001310  0E00               	movlw	0
  3183  001312  221F               	addwfc	??___ftge+1,f,c
  3184  001314  2220               	addwfc	??___ftge+2,f,c
  3185  001316  0E00               	movlw	0
  3186  001318  241E               	addwf	??___ftge,w,c
  3187  00131A  6E18               	movwf	___ftge@ff1,c
  3188  00131C  0E00               	movlw	0
  3189  00131E  201F               	addwfc	??___ftge+1,w,c
  3190  001320  6E19               	movwf	___ftge@ff1+1,c
  3191  001322  0E80               	movlw	128
  3192  001324  2020               	addwfc	??___ftge+2,w,c
  3193  001326  6E1A               	movwf	___ftge@ff1+2,c
  3194  001328  D000               	goto	l2675
  3195  00132A                     l2675:
  3196  00132A  AE1D               	btfss	___ftge@ff2+2,7,c
  3197  00132C  D017               	goto	l2679
  3198  00132E  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3199  001332  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3200  001336  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3201  00133A  1E1E               	comf	??___ftge,f,c
  3202  00133C  1E1F               	comf	??___ftge+1,f,c
  3203  00133E  1E20               	comf	??___ftge+2,f,c
  3204  001340  2A1E               	incf	??___ftge,f,c
  3205  001342  0E00               	movlw	0
  3206  001344  221F               	addwfc	??___ftge+1,f,c
  3207  001346  2220               	addwfc	??___ftge+2,f,c
  3208  001348  0E00               	movlw	0
  3209  00134A  241E               	addwf	??___ftge,w,c
  3210  00134C  6E1B               	movwf	___ftge@ff2,c
  3211  00134E  0E00               	movlw	0
  3212  001350  201F               	addwfc	??___ftge+1,w,c
  3213  001352  6E1C               	movwf	___ftge@ff2+1,c
  3214  001354  0E80               	movlw	128
  3215  001356  2020               	addwfc	??___ftge+2,w,c
  3216  001358  6E1D               	movwf	___ftge@ff2+2,c
  3217  00135A  D000               	goto	l2679
  3218  00135C                     l2679:
  3219  00135C  0E00               	movlw	0
  3220  00135E  1A18               	xorwf	___ftge@ff1,f,c
  3221  001360  0E00               	movlw	0
  3222  001362  1A19               	xorwf	___ftge@ff1+1,f,c
  3223  001364  0E80               	movlw	128
  3224  001366  1A1A               	xorwf	___ftge@ff1+2,f,c
  3225  001368  0E00               	movlw	0
  3226  00136A  1A1B               	xorwf	___ftge@ff2,f,c
  3227  00136C  0E00               	movlw	0
  3228  00136E  1A1C               	xorwf	___ftge@ff2+1,f,c
  3229  001370  0E80               	movlw	128
  3230  001372  1A1D               	xorwf	___ftge@ff2+2,f,c
  3231  001374  501B               	movf	___ftge@ff2,w,c
  3232  001376  5C18               	subwf	___ftge@ff1,w,c
  3233  001378  501C               	movf	___ftge@ff2+1,w,c
  3234  00137A  5819               	subwfb	___ftge@ff1+1,w,c
  3235  00137C  501D               	movf	___ftge@ff2+2,w,c
  3236  00137E  581A               	subwfb	___ftge@ff1+2,w,c
  3237  001380  B0D8               	btfsc	status,0,c
  3238  001382  D002               	goto	l2685
  3239  001384  90D8               	bcf	status,0,c
  3240  001386  D002               	goto	l1047
  3241  001388                     l2685:
  3242  001388  80D8               	bsf	status,0,c
  3243  00138A  D000               	goto	l1047
  3244  00138C                     l1047:
  3245  00138C  0012               	return		;funcret
  3246  00138E                     __end_of___ftge:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodh	equ	0xFF4
  3253                           prodl	equ	0xFF3
  3254                           intcon	equ	0xFF2
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           postdec1	equ	0xFE5
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function ___ftdiv *****************
  3265 ;; Defined at:
  3266 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  f1              3   31[COMRAM] float 
  3269 ;;  f2              3   34[COMRAM] float 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  f3              3   41[COMRAM] float 
  3272 ;;  sign            1   45[COMRAM] unsigned char 
  3273 ;;  exp             1   44[COMRAM] unsigned char 
  3274 ;;  cntr            1   40[COMRAM] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  3   31[COMRAM] float 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3284 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;Total ram usage:       15 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    5
  3291 ;; This function calls:
  3292 ;;		___ftpack
  3293 ;; This function is called by:
  3294 ;;		_calculatePID
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text9
  3299  000E98                     __ptext9:
  3300                           	opt stack 0
  3301  000E98                     ___ftdiv:
  3302                           	opt stack 22
  3303                           
  3304                           ;incstack = 0
  3305  000E98  C022  F026         	movff	___ftdiv@f1+2,??___ftdiv
  3306  000E9C  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3307  000E9E  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3308  000EA0  3421               	rlcf	___ftdiv@f1+1,w,c
  3309  000EA2  3626               	rlcf	??___ftdiv& (0+255),f,c
  3310  000EA4  E301               	bnc	u3101
  3311  000EA6  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3312  000EA8                     u3101:
  3313  000EA8  5026               	movf	??___ftdiv,w,c
  3314  000EAA  6E2D               	movwf	___ftdiv@exp,c
  3315  000EAC  502D               	movf	___ftdiv@exp,w,c
  3316  000EAE  A4D8               	btfss	status,2,c
  3317  000EB0  D002               	goto	l3593
  3318  000EB2  D00E               	goto	l3595
  3319  000EB4  D061               	goto	l1038
  3320  000EB6                     l3593:
  3321  000EB6  C025  F026         	movff	___ftdiv@f2+2,??___ftdiv
  3322  000EBA  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3323  000EBC  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3324  000EBE  3424               	rlcf	___ftdiv@f2+1,w,c
  3325  000EC0  3626               	rlcf	??___ftdiv& (0+255),f,c
  3326  000EC2  E301               	bnc	u3121
  3327  000EC4  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3328  000EC6                     u3121:
  3329  000EC6  5026               	movf	??___ftdiv,w,c
  3330  000EC8  6E2E               	movwf	___ftdiv@sign,c
  3331  000ECA  502E               	movf	___ftdiv@sign,w,c
  3332  000ECC  A4D8               	btfss	status,2,c
  3333  000ECE  D007               	goto	l3599
  3334  000ED0                     l3595:
  3335  000ED0  0E00               	movlw	0
  3336  000ED2  6E20               	movwf	?___ftdiv,c
  3337  000ED4  0E00               	movlw	0
  3338  000ED6  6E21               	movwf	?___ftdiv+1,c
  3339  000ED8  0E00               	movlw	0
  3340  000EDA  6E22               	movwf	?___ftdiv+2,c
  3341  000EDC  D04D               	goto	l1038
  3342  000EDE                     l3599:
  3343  000EDE  0E00               	movlw	0
  3344  000EE0  6E2A               	movwf	___ftdiv@f3,c
  3345  000EE2  0E00               	movlw	0
  3346  000EE4  6E2B               	movwf	___ftdiv@f3+1,c
  3347  000EE6  0E00               	movlw	0
  3348  000EE8  6E2C               	movwf	___ftdiv@f3+2,c
  3349  000EEA  502E               	movf	___ftdiv@sign,w,c
  3350  000EEC  0F89               	addlw	137
  3351  000EEE  5E2D               	subwf	___ftdiv@exp,f,c
  3352  000EF0  C022  F02E         	movff	___ftdiv@f1+2,___ftdiv@sign
  3353  000EF4  5025               	movf	___ftdiv@f2+2,w,c
  3354  000EF6  1A2E               	xorwf	___ftdiv@sign,f,c
  3355  000EF8  0E80               	movlw	128
  3356  000EFA  162E               	andwf	___ftdiv@sign,f,c
  3357  000EFC  8E21               	bsf	___ftdiv@f1+1,7,c
  3358  000EFE  0EFF               	movlw	255
  3359  000F00  1620               	andwf	___ftdiv@f1,f,c
  3360  000F02  0EFF               	movlw	255
  3361  000F04  1621               	andwf	___ftdiv@f1+1,f,c
  3362  000F06  0E00               	movlw	0
  3363  000F08  1622               	andwf	___ftdiv@f1+2,f,c
  3364  000F0A  8E24               	bsf	___ftdiv@f2+1,7,c
  3365  000F0C  0EFF               	movlw	255
  3366  000F0E  1623               	andwf	___ftdiv@f2,f,c
  3367  000F10  0EFF               	movlw	255
  3368  000F12  1624               	andwf	___ftdiv@f2+1,f,c
  3369  000F14  0E00               	movlw	0
  3370  000F16  1625               	andwf	___ftdiv@f2+2,f,c
  3371  000F18  0E18               	movlw	24
  3372  000F1A  6E29               	movwf	___ftdiv@cntr,c
  3373  000F1C  D000               	goto	l3619
  3374  000F1E                     l3619:
  3375  000F1E  90D8               	bcf	status,0,c
  3376  000F20  362A               	rlcf	___ftdiv@f3,f,c
  3377  000F22  362B               	rlcf	___ftdiv@f3+1,f,c
  3378  000F24  362C               	rlcf	___ftdiv@f3+2,f,c
  3379  000F26  5023               	movf	___ftdiv@f2,w,c
  3380  000F28  5C20               	subwf	___ftdiv@f1,w,c
  3381  000F2A  5024               	movf	___ftdiv@f2+1,w,c
  3382  000F2C  5821               	subwfb	___ftdiv@f1+1,w,c
  3383  000F2E  5025               	movf	___ftdiv@f2+2,w,c
  3384  000F30  5822               	subwfb	___ftdiv@f1+2,w,c
  3385  000F32  A0D8               	btfss	status,0,c
  3386  000F34  D007               	goto	l1041
  3387  000F36  5023               	movf	___ftdiv@f2,w,c
  3388  000F38  5E20               	subwf	___ftdiv@f1,f,c
  3389  000F3A  5024               	movf	___ftdiv@f2+1,w,c
  3390  000F3C  5A21               	subwfb	___ftdiv@f1+1,f,c
  3391  000F3E  5025               	movf	___ftdiv@f2+2,w,c
  3392  000F40  5A22               	subwfb	___ftdiv@f1+2,f,c
  3393  000F42  802A               	bsf	___ftdiv@f3,0,c
  3394  000F44                     l1041:
  3395  000F44  90D8               	bcf	status,0,c
  3396  000F46  3620               	rlcf	___ftdiv@f1,f,c
  3397  000F48  3621               	rlcf	___ftdiv@f1+1,f,c
  3398  000F4A  3622               	rlcf	___ftdiv@f1+2,f,c
  3399  000F4C  2E29               	decfsz	___ftdiv@cntr,f,c
  3400  000F4E  D7E7               	goto	l3619
  3401  000F50  D000               	goto	l3629
  3402  000F52                     l3629:
  3403  000F52  C02A  F018         	movff	___ftdiv@f3,___ftpack@arg
  3404  000F56  C02B  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3405  000F5A  C02C  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3406  000F5E  C02D  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3407  000F62  C02E  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3408  000F66  ECBD  F007         	call	___ftpack	;wreg free
  3409  000F6A  C018  F020         	movff	?___ftpack,?___ftdiv
  3410  000F6E  C019  F021         	movff	?___ftpack+1,?___ftdiv+1
  3411  000F72  C01A  F022         	movff	?___ftpack+2,?___ftdiv+2
  3412  000F76  D000               	goto	l1038
  3413  000F78                     l1038:
  3414  000F78  0012               	return		;funcret
  3415  000F7A                     __end_of___ftdiv:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           intcon	equ	0xFF2
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1l	equ	0xFE1
  3428                           indf2	equ	0xFDF
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function _ReadRTDpos *****************
  3434 ;; Defined at:
  3435 ;;		line 39 in file "ResolverToDigital.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;		None
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3440 ;;  helloworld      2    0        unsigned int 
  3441 ;;  x               1   33[COMRAM] unsigned char 
  3442 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3443 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  2   24[COMRAM] unsigned int 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:       10 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    5
  3460 ;; This function calls:
  3461 ;;		_Delay10TCYx
  3462 ;; This function is called by:
  3463 ;;		_main
  3464 ;;		_ZeroMotors
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text10
  3469  0014C8                     __ptext10:
  3470                           	opt stack 0
  3471  0014C8                     _ReadRTDpos:
  3472                           	opt stack 23
  3473                           
  3474                           ;ResolverToDigital.c: 41: unsigned char x;
  3475                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  3476                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  3477                           ;ResolverToDigital.c: 48: {
  3478                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  3479                           
  3480                           ;incstack = 0
  3481  0014C8  9EF2               	bcf	intcon,7,c	;volatile
  3482                           
  3483                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  3484  0014CA  8284               	bsf	3972,1,c	;volatile
  3485                           
  3486                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  3487  0014CC  9084               	bcf	3972,0,c	;volatile
  3488                           
  3489                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  3490  0014CE  0E00               	movlw	0
  3491  0014D0  6E22               	movwf	ReadRTDpos@x,c
  3492  0014D2  D003               	goto	l2805
  3493  0014D4  D005               	goto	l192
  3494  0014D6                     l191:
  3495                           
  3496                           ;ResolverToDigital.c: 53: __nop();
  3497  0014D6  F000               	nop	
  3498  0014D8  2A22               	incf	ReadRTDpos@x,f,c
  3499  0014DA                     l2805:
  3500  0014DA  0E07               	movlw	7
  3501  0014DC  6422               	cpfsgt	ReadRTDpos@x,c
  3502  0014DE  D7FB               	goto	l191
  3503  0014E0                     l192:
  3504                           
  3505                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  3506  0014E0  8484               	bsf	3972,2,c	;volatile
  3507                           
  3508                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  3509  0014E2  9484               	bcf	3972,2,c	;volatile
  3510                           
  3511                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  3512  0014E4  0E01               	movlw	1
  3513  0014E6  ECE5  F00D         	call	_Delay10TCYx
  3514                           
  3515                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  3516  0014EA  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3517                           
  3518                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  3519  0014EE  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3520                           
  3521                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  3522  0014F2  8484               	bsf	3972,2,c	;volatile
  3523                           
  3524                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  3525  0014F4  8084               	bsf	3972,0,c	;volatile
  3526                           
  3527                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  3528  0014F6  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3529  0014FA  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3530                           
  3531                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3532  0014FC  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3533  001500  0E0F               	movlw	15
  3534  001502  161B               	andwf	??_ReadRTDpos,f,c
  3535  001504  501B               	movf	??_ReadRTDpos,w,c
  3536  001506  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3537  001508  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3538  00150A  5020               	movf	ReadRTDpos@FullPosition,w,c
  3539  00150C  101C               	iorwf	??_ReadRTDpos+1,w,c
  3540  00150E  6E20               	movwf	ReadRTDpos@FullPosition,c
  3541  001510  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3542  001512  101D               	iorwf	??_ReadRTDpos+2,w,c
  3543  001514  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3544                           
  3545                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  3546  001516  8EF2               	bsf	intcon,7,c	;volatile
  3547                           
  3548                           ;ResolverToDigital.c: 64: return FullPosition;
  3549  001518  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3550  00151C  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3551  001520  D000               	goto	l193
  3552  001522                     l193:
  3553  001522  0012               	return		;funcret
  3554  001524                     __end_of_ReadRTDpos:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _RTD2Angle *****************
  3573 ;; Defined at:
  3574 ;;		line 99 in file "ResolverToDigital.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  RTDAngle        2    9[BANK0 ] unsigned int 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  3    9[BANK0 ] unsigned int 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3588 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;Total ram usage:        3 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    6
  3595 ;; This function calls:
  3596 ;;		___ftmul
  3597 ;;		___lwtoft
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;;		_ZeroMotors
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text11
  3605  001892                     __ptext11:
  3606                           	opt stack 0
  3607  001892                     _RTD2Angle:
  3608                           	opt stack 22
  3609                           
  3610                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  3611                           
  3612                           ;incstack = 0
  3613  001892  C069  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3614  001896  C06A  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3615  00189A  EC22  F00D         	call	___lwtoft	;wreg free
  3616  00189E  C020  F02F         	movff	?___lwtoft,___ftmul@f1
  3617  0018A2  C021  F030         	movff	?___lwtoft+1,___ftmul@f1+1
  3618  0018A6  C022  F031         	movff	?___lwtoft+2,___ftmul@f1+2
  3619  0018AA  0E00               	movlw	0
  3620  0018AC  6E32               	movwf	___ftmul@f2,c
  3621  0018AE  0EB4               	movlw	180
  3622  0018B0  6E33               	movwf	___ftmul@f2+1,c
  3623  0018B2  0E3D               	movlw	61
  3624  0018B4  6E34               	movwf	___ftmul@f2+2,c
  3625  0018B6  EC22  F006         	call	___ftmul	;wreg free
  3626  0018BA  C02F  F069         	movff	?___ftmul,?_RTD2Angle
  3627  0018BE  C030  F06A         	movff	?___ftmul+1,?_RTD2Angle+1
  3628  0018C2  C031  F06B         	movff	?___ftmul+2,?_RTD2Angle+2
  3629  0018C6  D000               	goto	l201
  3630  0018C8                     l201:
  3631  0018C8  0012               	return		;funcret
  3632  0018CA                     __end_of_RTD2Angle:
  3633                           	opt stack 0
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           fsr1l	equ	0xFE1
  3645                           indf2	equ	0xFDF
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function ___lwtoft *****************
  3651 ;; Defined at:
  3652 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  c               2   31[COMRAM] unsigned int 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  3   31[COMRAM] float 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:        3 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    5
  3673 ;; This function calls:
  3674 ;;		___ftpack
  3675 ;; This function is called by:
  3676 ;;		_RTD2Angle
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text12
  3681  001A44                     __ptext12:
  3682                           	opt stack 0
  3683  001A44                     ___lwtoft:
  3684                           	opt stack 22
  3685                           
  3686                           ;incstack = 0
  3687  001A44  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  3688  001A48  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  3689  001A4C  6A1A               	clrf	___ftpack@arg+2,c
  3690  001A4E  0E8E               	movlw	142
  3691  001A50  6E1B               	movwf	___ftpack@exp,c
  3692  001A52  0E00               	movlw	0
  3693  001A54  6E1C               	movwf	___ftpack@sign,c
  3694  001A56  ECBD  F007         	call	___ftpack	;wreg free
  3695  001A5A  C018  F020         	movff	?___ftpack,?___lwtoft
  3696  001A5E  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  3697  001A62  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  3698  001A66  D000               	goto	l1203
  3699  001A68                     l1203:
  3700  001A68  0012               	return		;funcret
  3701  001A6A                     __end_of___lwtoft:
  3702                           	opt stack 0
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           postinc0	equ	0xFEE
  3711                           wreg	equ	0xFE8
  3712                           postdec1	equ	0xFE5
  3713                           fsr1l	equ	0xFE1
  3714                           indf2	equ	0xFDF
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function ___ftmul *****************
  3720 ;; Defined at:
  3721 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  f1              3   46[COMRAM] float 
  3724 ;;  f2              3   49[COMRAM] float 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  3727 ;;  sign            1    8[BANK0 ] unsigned char 
  3728 ;;  cntr            1    7[BANK0 ] unsigned char 
  3729 ;;  exp             1    3[BANK0 ] unsigned char 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  3   46[COMRAM] float 
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, status,0, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3739 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;Total ram usage:       15 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    5
  3746 ;; This function calls:
  3747 ;;		___ftpack
  3748 ;; This function is called by:
  3749 ;;		_calculatePID
  3750 ;;		_RTD2Angle
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text13
  3755  000C44                     __ptext13:
  3756                           	opt stack 0
  3757  000C44                     ___ftmul:
  3758                           	opt stack 22
  3759                           
  3760                           ;incstack = 0
  3761  000C44  C031  F060         	movff	___ftmul@f1+2,??___ftmul
  3762  000C48  0100               	movlb	0	; () banked
  3763  000C4A  6B61               	clrf	(??___ftmul+1)& (0+255),b
  3764  000C4C  6B62               	clrf	(??___ftmul+2)& (0+255),b
  3765  000C4E  3430               	rlcf	___ftmul@f1+1,w,c
  3766  000C50  0100               	movlb	0	; () banked
  3767  000C52  3760               	rlcf	??___ftmul& (0+255),f,b
  3768  000C54  E301               	bnc	u3151
  3769  000C56  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  3770  000C58                     u3151:
  3771  000C58  0100               	movlb	0	; () banked
  3772  000C5A  5160               	movf	??___ftmul& (0+255),w,b
  3773  000C5C  0100               	movlb	0	; () banked
  3774  000C5E  6F63               	movwf	___ftmul@exp& (0+255),b
  3775  000C60  0100               	movlb	0	; () banked
  3776  000C62  5163               	movf	___ftmul@exp& (0+255),w,b
  3777  000C64  A4D8               	btfss	status,2,c
  3778  000C66  D002               	goto	l3639
  3779  000C68  D013               	goto	l3641
  3780                           
  3781                           ; BSR set to: 0
  3782                           
  3783                           ; BSR set to: 0
  3784  000C6A  D083               	goto	l1053
  3785  000C6C                     l3639:
  3786                           
  3787                           ; BSR set to: 0
  3788  000C6C  C034  F060         	movff	___ftmul@f2+2,??___ftmul
  3789  000C70  0100               	movlb	0	; () banked
  3790  000C72  6B61               	clrf	(??___ftmul+1)& (0+255),b
  3791  000C74  6B62               	clrf	(??___ftmul+2)& (0+255),b
  3792  000C76  3433               	rlcf	___ftmul@f2+1,w,c
  3793  000C78  0100               	movlb	0	; () banked
  3794  000C7A  3760               	rlcf	??___ftmul& (0+255),f,b
  3795  000C7C  E301               	bnc	u3171
  3796  000C7E  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  3797  000C80                     u3171:
  3798  000C80  0100               	movlb	0	; () banked
  3799  000C82  5160               	movf	??___ftmul& (0+255),w,b
  3800  000C84  0100               	movlb	0	; () banked
  3801  000C86  6F68               	movwf	___ftmul@sign& (0+255),b
  3802  000C88  0100               	movlb	0	; () banked
  3803  000C8A  5168               	movf	___ftmul@sign& (0+255),w,b
  3804  000C8C  A4D8               	btfss	status,2,c
  3805  000C8E  D007               	goto	l3645
  3806  000C90                     l3641:
  3807                           
  3808                           ; BSR set to: 0
  3809  000C90  0E00               	movlw	0
  3810  000C92  6E2F               	movwf	?___ftmul,c
  3811  000C94  0E00               	movlw	0
  3812  000C96  6E30               	movwf	?___ftmul+1,c
  3813  000C98  0E00               	movlw	0
  3814  000C9A  6E31               	movwf	?___ftmul+2,c
  3815                           
  3816                           ; BSR set to: 0
  3817  000C9C  D06A               	goto	l1053
  3818  000C9E                     l3645:
  3819                           
  3820                           ; BSR set to: 0
  3821  000C9E  0100               	movlb	0	; () banked
  3822  000CA0  5168               	movf	___ftmul@sign& (0+255),w,b
  3823  000CA2  0F7B               	addlw	123
  3824  000CA4  0100               	movlb	0	; () banked
  3825  000CA6  2763               	addwf	___ftmul@exp& (0+255),f,b
  3826                           
  3827                           ; BSR set to: 0
  3828  000CA8  C031  F068         	movff	___ftmul@f1+2,___ftmul@sign
  3829  000CAC  5034               	movf	___ftmul@f2+2,w,c
  3830  000CAE  0100               	movlb	0	; () banked
  3831  000CB0  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  3832  000CB2  0E80               	movlw	128
  3833  000CB4  0100               	movlb	0	; () banked
  3834  000CB6  1768               	andwf	___ftmul@sign& (0+255),f,b
  3835                           
  3836                           ; BSR set to: 0
  3837  000CB8  8E30               	bsf	___ftmul@f1+1,7,c
  3838                           
  3839                           ; BSR set to: 0
  3840  000CBA  8E33               	bsf	___ftmul@f2+1,7,c
  3841                           
  3842                           ; BSR set to: 0
  3843  000CBC  0EFF               	movlw	255
  3844  000CBE  1632               	andwf	___ftmul@f2,f,c
  3845  000CC0  0EFF               	movlw	255
  3846  000CC2  1633               	andwf	___ftmul@f2+1,f,c
  3847  000CC4  0E00               	movlw	0
  3848  000CC6  1634               	andwf	___ftmul@f2+2,f,c
  3849                           
  3850                           ; BSR set to: 0
  3851  000CC8  0E00               	movlw	0
  3852  000CCA  0100               	movlb	0	; () banked
  3853  000CCC  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  3854  000CCE  0E00               	movlw	0
  3855  000CD0  0100               	movlb	0	; () banked
  3856  000CD2  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3857  000CD4  0E00               	movlw	0
  3858  000CD6  0100               	movlb	0	; () banked
  3859  000CD8  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3860                           
  3861                           ; BSR set to: 0
  3862  000CDA  0E07               	movlw	7
  3863  000CDC  0100               	movlb	0	; () banked
  3864  000CDE  6F67               	movwf	___ftmul@cntr& (0+255),b
  3865  000CE0  D000               	goto	l3659
  3866  000CE2                     l3659:
  3867                           
  3868                           ; BSR set to: 0
  3869  000CE2  A02F               	btfss	___ftmul@f1,0,c
  3870  000CE4  D00A               	goto	l3663
  3871                           
  3872                           ; BSR set to: 0
  3873  000CE6  5032               	movf	___ftmul@f2,w,c
  3874  000CE8  0100               	movlb	0	; () banked
  3875  000CEA  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3876  000CEC  5033               	movf	___ftmul@f2+1,w,c
  3877  000CEE  0100               	movlb	0	; () banked
  3878  000CF0  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3879  000CF2  5034               	movf	___ftmul@f2+2,w,c
  3880  000CF4  0100               	movlb	0	; () banked
  3881  000CF6  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3882  000CF8  D000               	goto	l3663
  3883  000CFA                     l3663:
  3884                           
  3885                           ; BSR set to: 0
  3886  000CFA  90D8               	bcf	status,0,c
  3887  000CFC  3231               	rrcf	___ftmul@f1+2,f,c
  3888  000CFE  3230               	rrcf	___ftmul@f1+1,f,c
  3889  000D00  322F               	rrcf	___ftmul@f1,f,c
  3890  000D02  90D8               	bcf	status,0,c
  3891  000D04  3632               	rlcf	___ftmul@f2,f,c
  3892  000D06  3633               	rlcf	___ftmul@f2+1,f,c
  3893  000D08  3634               	rlcf	___ftmul@f2+2,f,c
  3894                           
  3895                           ; BSR set to: 0
  3896  000D0A  0100               	movlb	0	; () banked
  3897  000D0C  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  3898  000D0E  D7E9               	goto	l3659
  3899  000D10  D000               	goto	l3667
  3900  000D12                     l3667:
  3901                           
  3902                           ; BSR set to: 0
  3903  000D12  0E09               	movlw	9
  3904  000D14  0100               	movlb	0	; () banked
  3905  000D16  6F67               	movwf	___ftmul@cntr& (0+255),b
  3906  000D18  D000               	goto	l3669
  3907  000D1A                     l3669:
  3908                           
  3909                           ; BSR set to: 0
  3910  000D1A  A02F               	btfss	___ftmul@f1,0,c
  3911  000D1C  D00A               	goto	l3673
  3912                           
  3913                           ; BSR set to: 0
  3914  000D1E  5032               	movf	___ftmul@f2,w,c
  3915  000D20  0100               	movlb	0	; () banked
  3916  000D22  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3917  000D24  5033               	movf	___ftmul@f2+1,w,c
  3918  000D26  0100               	movlb	0	; () banked
  3919  000D28  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3920  000D2A  5034               	movf	___ftmul@f2+2,w,c
  3921  000D2C  0100               	movlb	0	; () banked
  3922  000D2E  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3923  000D30  D000               	goto	l3673
  3924  000D32                     l3673:
  3925                           
  3926                           ; BSR set to: 0
  3927  000D32  90D8               	bcf	status,0,c
  3928  000D34  3231               	rrcf	___ftmul@f1+2,f,c
  3929  000D36  3230               	rrcf	___ftmul@f1+1,f,c
  3930  000D38  322F               	rrcf	___ftmul@f1,f,c
  3931  000D3A  0100               	movlb	0	; () banked
  3932  000D3C  90D8               	bcf	status,0,c
  3933  000D3E  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3934  000D40  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3935  000D42  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3936                           
  3937                           ; BSR set to: 0
  3938  000D44  0100               	movlb	0	; () banked
  3939  000D46  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  3940  000D48  D7E8               	goto	l3669
  3941  000D4A  D000               	goto	l3677
  3942  000D4C                     l3677:
  3943                           
  3944                           ; BSR set to: 0
  3945  000D4C  C064  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  3946  000D50  C065  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3947  000D54  C066  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3948  000D58  C063  F01B         	movff	___ftmul@exp,___ftpack@exp
  3949  000D5C  C068  F01C         	movff	___ftmul@sign,___ftpack@sign
  3950  000D60  ECBD  F007         	call	___ftpack	;wreg free
  3951  000D64  C018  F02F         	movff	?___ftpack,?___ftmul
  3952  000D68  C019  F030         	movff	?___ftpack+1,?___ftmul+1
  3953  000D6C  C01A  F031         	movff	?___ftpack+2,?___ftmul+2
  3954  000D70  D000               	goto	l1053
  3955  000D72                     l1053:
  3956  000D72  0012               	return		;funcret
  3957  000D74                     __end_of___ftmul:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodh	equ	0xFF4
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           postdec1	equ	0xFE5
  3969                           fsr1l	equ	0xFE1
  3970                           indf2	equ	0xFDF
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function ___ftpack *****************
  3976 ;; Defined at:
  3977 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  arg             3   23[COMRAM] unsigned um
  3980 ;;  exp             1   26[COMRAM] unsigned char 
  3981 ;;  sign            1   27[COMRAM] unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  3   23[COMRAM] float 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3993 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;Total ram usage:        8 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    4
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		___ftadd
  4004 ;;		___ftdiv
  4005 ;;		___ftmul
  4006 ;;		___lwtoft
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text14
  4011  000F7A                     __ptext14:
  4012                           	opt stack 0
  4013  000F7A                     ___ftpack:
  4014                           	opt stack 21
  4015                           
  4016                           ;incstack = 0
  4017  000F7A  501B               	movf	___ftpack@exp,w,c
  4018  000F7C  B4D8               	btfsc	status,2,c
  4019  000F7E  D005               	goto	l3481
  4020  000F80  5018               	movf	___ftpack@arg,w,c
  4021  000F82  1019               	iorwf	___ftpack@arg+1,w,c
  4022  000F84  101A               	iorwf	___ftpack@arg+2,w,c
  4023  000F86  A4D8               	btfss	status,2,c
  4024  000F88  D00E               	goto	l3487
  4025  000F8A                     l3481:
  4026  000F8A  0E00               	movlw	0
  4027  000F8C  6E18               	movwf	?___ftpack,c
  4028  000F8E  0E00               	movlw	0
  4029  000F90  6E19               	movwf	?___ftpack+1,c
  4030  000F92  0E00               	movlw	0
  4031  000F94  6E1A               	movwf	?___ftpack+2,c
  4032  000F96  D053               	goto	l966
  4033  000F98  D006               	goto	l3487
  4034  000F9A                     l3485:
  4035  000F9A  2A1B               	incf	___ftpack@exp,f,c
  4036  000F9C  90D8               	bcf	status,0,c
  4037  000F9E  321A               	rrcf	___ftpack@arg+2,f,c
  4038  000FA0  3219               	rrcf	___ftpack@arg+1,f,c
  4039  000FA2  3218               	rrcf	___ftpack@arg,f,c
  4040  000FA4  D000               	goto	l3487
  4041  000FA6                     l3487:
  4042  000FA6  0E00               	movlw	0
  4043  000FA8  1418               	andwf	___ftpack@arg,w,c
  4044  000FAA  6E1D               	movwf	??___ftpack& (0+255),c
  4045  000FAC  0E00               	movlw	0
  4046  000FAE  1419               	andwf	___ftpack@arg+1,w,c
  4047  000FB0  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4048  000FB2  0EFE               	movlw	254
  4049  000FB4  141A               	andwf	___ftpack@arg+2,w,c
  4050  000FB6  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4051  000FB8  501D               	movf	??___ftpack,w,c
  4052  000FBA  101E               	iorwf	??___ftpack+1,w,c
  4053  000FBC  101F               	iorwf	??___ftpack+2,w,c
  4054  000FBE  B4D8               	btfsc	status,2,c
  4055  000FC0  D00E               	goto	l3493
  4056  000FC2  D7EB               	goto	l3485
  4057  000FC4  D00C               	goto	l3493
  4058  000FC6                     l3489:
  4059  000FC6  2A1B               	incf	___ftpack@exp,f,c
  4060  000FC8  0E01               	movlw	1
  4061  000FCA  2618               	addwf	___ftpack@arg,f,c
  4062  000FCC  0E00               	movlw	0
  4063  000FCE  2219               	addwfc	___ftpack@arg+1,f,c
  4064  000FD0  0E00               	movlw	0
  4065  000FD2  221A               	addwfc	___ftpack@arg+2,f,c
  4066  000FD4  90D8               	bcf	status,0,c
  4067  000FD6  321A               	rrcf	___ftpack@arg+2,f,c
  4068  000FD8  3219               	rrcf	___ftpack@arg+1,f,c
  4069  000FDA  3218               	rrcf	___ftpack@arg,f,c
  4070  000FDC  D000               	goto	l3493
  4071  000FDE                     l3493:
  4072  000FDE  0E00               	movlw	0
  4073  000FE0  1418               	andwf	___ftpack@arg,w,c
  4074  000FE2  6E1D               	movwf	??___ftpack& (0+255),c
  4075  000FE4  0E00               	movlw	0
  4076  000FE6  1419               	andwf	___ftpack@arg+1,w,c
  4077  000FE8  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4078  000FEA  0EFF               	movlw	255
  4079  000FEC  141A               	andwf	___ftpack@arg+2,w,c
  4080  000FEE  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4081  000FF0  501D               	movf	??___ftpack,w,c
  4082  000FF2  101E               	iorwf	??___ftpack+1,w,c
  4083  000FF4  101F               	iorwf	??___ftpack+2,w,c
  4084  000FF6  B4D8               	btfsc	status,2,c
  4085  000FF8  D008               	goto	l3497
  4086  000FFA  D7E5               	goto	l3489
  4087  000FFC  D006               	goto	l3497
  4088  000FFE                     l3495:
  4089  000FFE  061B               	decf	___ftpack@exp,f,c
  4090  001000  90D8               	bcf	status,0,c
  4091  001002  3618               	rlcf	___ftpack@arg,f,c
  4092  001004  3619               	rlcf	___ftpack@arg+1,f,c
  4093  001006  361A               	rlcf	___ftpack@arg+2,f,c
  4094  001008  D000               	goto	l3497
  4095  00100A                     l3497:
  4096  00100A  BE19               	btfsc	___ftpack@arg+1,7,c
  4097  00100C  D004               	goto	l977
  4098  00100E  0E02               	movlw	2
  4099  001010  601B               	cpfslt	___ftpack@exp,c
  4100  001012  D7F5               	goto	l3495
  4101  001014  D000               	goto	l977
  4102  001016                     l977:
  4103  001016  B01B               	btfsc	___ftpack@exp,0,c
  4104  001018  D002               	goto	l3503
  4105  00101A  9E19               	bcf	___ftpack@arg+1,7,c
  4106  00101C  D000               	goto	l3503
  4107  00101E                     l3503:
  4108  00101E  90D8               	bcf	status,0,c
  4109  001020  321B               	rrcf	___ftpack@exp,f,c
  4110  001022  501B               	movf	___ftpack@exp,w,c
  4111  001024  121A               	iorwf	___ftpack@arg+2,f,c
  4112  001026  501C               	movf	___ftpack@sign,w,c
  4113  001028  B4D8               	btfsc	status,2,c
  4114  00102A  D002               	goto	l3509
  4115  00102C  8E1A               	bsf	___ftpack@arg+2,7,c
  4116  00102E  D000               	goto	l3509
  4117  001030                     l3509:
  4118  001030  C018  F018         	movff	___ftpack@arg,?___ftpack
  4119  001034  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  4120  001038  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  4121  00103C  D000               	goto	l966
  4122  00103E                     l966:
  4123  00103E  0012               	return		;funcret
  4124  001040                     __end_of___ftpack:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           postdec1	equ	0xFE5
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function _ImplementPIDMotion *****************
  4143 ;; Defined at:
  4144 ;;		line 40 in file "MotorControl.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  PIDValue        2   40[BANK0 ] int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;		None
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4158 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;Total ram usage:        4 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    5
  4165 ;; This function calls:
  4166 ;;		_abs
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;;		_ZeroMotors
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text15
  4174  0011B0                     __ptext15:
  4175                           	opt stack 0
  4176  0011B0                     _ImplementPIDMotion:
  4177                           	opt stack 23
  4178                           
  4179                           ;MotorControl.c: 42: if (PIDValue > 255)
  4180                           
  4181                           ;incstack = 0
  4182  0011B0  0100               	movlb	0	; () banked
  4183  0011B2  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4184  0011B4  D009               	goto	l3697
  4185  0011B6  0100               	movlb	0	; () banked
  4186  0011B8  0589               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4187  0011BA  A0D8               	btfss	status,0,c
  4188  0011BC  D005               	goto	l3697
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;MotorControl.c: 43: PIDValue = 255;
  4192  0011BE  0E00               	movlw	0
  4193  0011C0  0100               	movlb	0	; () banked
  4194  0011C2  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4195  0011C4  6988               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4196  0011C6  D010               	goto	l3701
  4197  0011C8                     l3697:
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;MotorControl.c: 44: else if (PIDValue < -255)
  4201  0011C8  0100               	movlb	0	; () banked
  4202  0011CA  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4203  0011CC  D00D               	goto	l3701
  4204  0011CE  0100               	movlb	0	; () banked
  4205  0011D0  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4206  0011D2  0EFF               	movlw	255
  4207  0011D4  0100               	movlb	0	; () banked
  4208  0011D6  5989               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4209  0011D8  B0D8               	btfsc	status,0,c
  4210  0011DA  D006               	goto	l3701
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;MotorControl.c: 45: PIDValue = -255;
  4214  0011DC  0EFF               	movlw	255
  4215  0011DE  0100               	movlb	0	; () banked
  4216  0011E0  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4217  0011E2  0E01               	movlw	1
  4218  0011E4  6F88               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4219                           
  4220                           ; BSR set to: 0
  4221  0011E6  D000               	goto	l3701
  4222  0011E8                     l3701:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;MotorControl.c: 47: if (PIDValue < 0)
  4226  0011E8  0100               	movlb	0	; () banked
  4227  0011EA  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4228  0011EC  D002               	goto	l3705
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  4232  0011EE  8EB7               	bsf	4023,7,c	;volatile
  4233  0011F0  D00C               	goto	l3709
  4234  0011F2                     l3705:
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;MotorControl.c: 49: else if (PIDValue > 0)
  4238  0011F2  0100               	movlb	0	; () banked
  4239  0011F4  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4240  0011F6  D009               	goto	l3709
  4241  0011F8  0100               	movlb	0	; () banked
  4242  0011FA  5189               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4243  0011FC  E104               	bnz	u3250
  4244  0011FE  0100               	movlb	0	; () banked
  4245  001200  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4246  001202  A0D8               	btfss	status,0,c
  4247  001204  D002               	goto	l3709
  4248  001206                     u3250:
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  4252  001206  9EB7               	bcf	4023,7,c	;volatile
  4253                           
  4254                           ; BSR set to: 0
  4255  001208  D000               	goto	l3709
  4256  00120A                     l3709:
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  4260  00120A  C088  F084         	movff	ImplementPIDMotion@PIDValue,abs@a
  4261  00120E  C089  F085         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4262  001212  ECF8  F00C         	call	_abs	;wreg free
  4263  001216  C084  F088         	movff	?_abs,ImplementPIDMotion@PIDValue
  4264  00121A  C085  F089         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4265                           
  4266                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  4267  00121E  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4268  001222  C089  F08B         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4269  001226  0100               	movlb	0	; () banked
  4270  001228  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4271  00122A  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4272  00122C  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4273  00122E  0100               	movlb	0	; () banked
  4274  001230  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4275  001232  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4276  001234  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4277  001236  0100               	movlb	0	; () banked
  4278  001238  518A               	movf	??_ImplementPIDMotion& (0+255),w,b
  4279  00123A  6EB8               	movwf	4024,c	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4283  00123C  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4284  001240  0E03               	movlw	3
  4285  001242  0100               	movlb	0	; () banked
  4286  001244  178A               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4287  001246  0100               	movlb	0	; () banked
  4288  001248  3B8A               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4289  00124A  50B7               	movf	4023,w,c	;volatile
  4290  00124C  0100               	movlb	0	; () banked
  4291  00124E  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4292  001250  0BCF               	andlw	-49
  4293  001252  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4294  001254  6EB7               	movwf	4023,c	;volatile
  4295                           
  4296                           ; BSR set to: 0
  4297  001256  0012               	return		;funcret
  4298  001258                     __end_of_ImplementPIDMotion:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           postdec1	equ	0xFE5
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _SPIInit *****************
  4317 ;; Defined at:
  4318 ;;		line 20 in file "SPISlave.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;Total ram usage:        0 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    5
  4339 ;; This function calls:
  4340 ;;		_OpenSPI1
  4341 ;; This function is called by:
  4342 ;;		_initialize
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text16
  4347  001B5C                     __ptext16:
  4348                           	opt stack 0
  4349  001B5C                     _SPIInit:
  4350                           	opt stack 24
  4351                           
  4352                           ;SPISlave.c: 22: TRISCbits.RC4 = 1;
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;incstack = 0
  4356  001B5C  8894               	bsf	3988,4,c	;volatile
  4357                           
  4358                           ;SPISlave.c: 23: TRISCbits.RC5 = 0;
  4359  001B5E  9A94               	bcf	3988,5,c	;volatile
  4360                           
  4361                           ;SPISlave.c: 24: TRISFbits.RF7 = 1;
  4362  001B60  8E97               	bsf	3991,7,c	;volatile
  4363                           
  4364                           ;SPISlave.c: 25: TRISCbits.RC6 = 0;
  4365  001B62  9C94               	bcf	3988,6,c	;volatile
  4366                           
  4367                           ;SPISlave.c: 26: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4368  001B64  0E00               	movlw	0
  4369  001B66  6E18               	movwf	OpenSPI1@bus_mode,c
  4370  001B68  0E00               	movlw	0
  4371  001B6A  6E19               	movwf	OpenSPI1@smp_phase,c
  4372  001B6C  0E04               	movlw	4
  4373  001B6E  EC92  F00A         	call	_OpenSPI1
  4374                           
  4375                           ;SPISlave.c: 27: PIE1bits.SSP1IE = 1;
  4376  001B72  869D               	bsf	3997,3,c	;volatile
  4377  001B74  0012               	return		;funcret
  4378  001B76                     __end_of_SPIInit:
  4379                           	opt stack 0
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           intcon	equ	0xFF2
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _OpenSPI1 *****************
  4397 ;; Defined at:
  4398 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  sync_mode       1    wreg     unsigned char 
  4401 ;;  bus_mode        1   23[COMRAM] unsigned char 
  4402 ;;  smp_phase       1   24[COMRAM] unsigned char 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  sync_mode       1   25[COMRAM] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;		None               void
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4414 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;Total ram usage:        3 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    4
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_SPIInit
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text17
  4429  001524                     __ptext17:
  4430                           	opt stack 0
  4431  001524                     _OpenSPI1:
  4432                           	opt stack 24
  4433                           
  4434                           ;incstack = 0
  4435                           ;OpenSPI1@sync_mode stored from wreg
  4436  001524  6E1A               	movwf	OpenSPI1@sync_mode,c
  4437  001526  0E3F               	movlw	63
  4438  001528  16C7               	andwf	4039,f,c	;volatile
  4439  00152A  0E00               	movlw	0
  4440  00152C  6EC6               	movwf	4038,c	;volatile
  4441  00152E  501A               	movf	OpenSPI1@sync_mode,w,c
  4442  001530  12C6               	iorwf	4038,f,c	;volatile
  4443  001532  5019               	movf	OpenSPI1@smp_phase,w,c
  4444  001534  12C7               	iorwf	4039,f,c	;volatile
  4445  001536  D005               	goto	l2841
  4446  001538                     l620:
  4447  001538  8CC7               	bsf	4039,6,c	;volatile
  4448  00153A  D013               	goto	l2845
  4449  00153C                     l622:
  4450  00153C  8CC7               	bsf	4039,6,c	;volatile
  4451  00153E                     l623:
  4452  00153E  88C6               	bsf	4038,4,c	;volatile
  4453  001540  D010               	goto	l2845
  4454  001542                     l2841:
  4455  001542  5018               	movf	OpenSPI1@bus_mode,w,c
  4456                           
  4457                           ; Switch size 1, requested type "space"
  4458                           ; Number of cases is 3, Range of values is 0 to 3
  4459                           ; switch strategies available:
  4460                           ; Name         Instructions Cycles
  4461                           ; simple_byte           10     6 (average)
  4462                           ;	Chosen strategy is simple_byte
  4463  001544  0A00               	xorlw	0	; case 0
  4464  001546  B4D8               	btfsc	status,2,c
  4465  001548  D7F7               	goto	l620
  4466  00154A  0A02               	xorlw	2	; case 2
  4467  00154C  B4D8               	btfsc	status,2,c
  4468  00154E  D7F6               	goto	l622
  4469  001550  0A01               	xorlw	1	; case 3
  4470  001552  B4D8               	btfsc	status,2,c
  4471  001554  D7F4               	goto	l623
  4472  001556  D005               	goto	l2845
  4473  001558                     l626:
  4474  001558  8E97               	bsf	3991,7,c	;volatile
  4475  00155A                     l628:
  4476  00155A  8694               	bsf	3988,3,c	;volatile
  4477  00155C  D00A               	goto	l627
  4478  00155E                     l629:
  4479  00155E  9694               	bcf	3988,3,c	;volatile
  4480  001560  D008               	goto	l627
  4481  001562                     l2845:
  4482  001562  501A               	movf	OpenSPI1@sync_mode,w,c
  4483                           
  4484                           ; Switch size 1, requested type "space"
  4485                           ; Number of cases is 2, Range of values is 4 to 5
  4486                           ; switch strategies available:
  4487                           ; Name         Instructions Cycles
  4488                           ; simple_byte            7     4 (average)
  4489                           ;	Chosen strategy is simple_byte
  4490  001564  0A04               	xorlw	4	; case 4
  4491  001566  B4D8               	btfsc	status,2,c
  4492  001568  D7F7               	goto	l626
  4493  00156A  0A01               	xorlw	1	; case 5
  4494  00156C  B4D8               	btfsc	status,2,c
  4495  00156E  D7F5               	goto	l628
  4496  001570  D7F6               	goto	l629
  4497  001572                     l627:
  4498  001572  8894               	bsf	3988,4,c	;volatile
  4499  001574  9A94               	bcf	3988,5,c	;volatile
  4500  001576  8AC6               	bsf	4038,5,c	;volatile
  4501  001578  0012               	return		;funcret
  4502  00157A                     __end_of_OpenSPI1:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           postdec1	equ	0xFE5
  4514                           fsr1l	equ	0xFE1
  4515                           indf2	equ	0xFDF
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _RTDInit *****************
  4521 ;; Defined at:
  4522 ;;		line 3 in file "ResolverToDigital.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;		None               void
  4529 ;; Registers used:
  4530 ;;		wreg, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    5
  4543 ;; This function calls:
  4544 ;;		_Delay10TCYx
  4545 ;;		_Delay1KTCYx
  4546 ;;		_Delay1TCYx
  4547 ;; This function is called by:
  4548 ;;		_initialize
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text18
  4553  001936                     __ptext18:
  4554                           	opt stack 0
  4555  001936                     _RTDInit:
  4556                           	opt stack 24
  4557                           
  4558                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4559                           
  4560                           ;incstack = 0
  4561  001936  6895               	setf	3989,c	;volatile
  4562                           
  4563                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4564  001938  6899               	setf	3993,c	;volatile
  4565                           
  4566                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4567  00193A  9096               	bcf	3990,0,c	;volatile
  4568                           
  4569                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4570  00193C  9296               	bcf	3990,1,c	;volatile
  4571                           
  4572                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4573  00193E  9496               	bcf	3990,2,c	;volatile
  4574                           
  4575                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4576  001940  909A               	bcf	3994,0,c	;volatile
  4577                           
  4578                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4579  001942  8A96               	bsf	3990,5,c	;volatile
  4580                           
  4581                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4582  001944  8C96               	bsf	3990,6,c	;volatile
  4583                           
  4584                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4585  001946  8E96               	bsf	3990,7,c	;volatile
  4586                           
  4587                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  4588  001948  9088               	bcf	3976,0,c	;volatile
  4589                           
  4590                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  4591  00194A  0E0A               	movlw	10
  4592  00194C  ECE5  F00D         	call	_Delay10TCYx
  4593                           
  4594                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  4595  001950  8088               	bsf	3976,0,c	;volatile
  4596                           
  4597                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  4598  001952  0E14               	movlw	20
  4599  001954  ECDC  F00D         	call	_Delay1KTCYx
  4600                           
  4601                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  4602  001958  9084               	bcf	3972,0,c	;volatile
  4603                           
  4604                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  4605  00195A  0E01               	movlw	1
  4606  00195C  ECF7  F00D         	call	_Delay1TCYx
  4607                           
  4608                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  4609  001960  8084               	bsf	3972,0,c	;volatile
  4610                           
  4611                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  4612  001962  9484               	bcf	3972,2,c	;volatile
  4613  001964  0012               	return		;funcret
  4614  001966                     __end_of_RTDInit:
  4615                           	opt stack 0
  4616                           tblptru	equ	0xFF8
  4617                           tblptrh	equ	0xFF7
  4618                           tblptrl	equ	0xFF6
  4619                           tablat	equ	0xFF5
  4620                           prodh	equ	0xFF4
  4621                           prodl	equ	0xFF3
  4622                           intcon	equ	0xFF2
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _Delay1TCYx *****************
  4633 ;; Defined at:
  4634 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  unit            1    wreg     unsigned char 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  unit            1   23[COMRAM] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;		None               void
  4641 ;; Registers used:
  4642 ;;		wreg
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;Total ram usage:        1 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    4
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_RTDInit
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text19
  4663  001BEE                     __ptext19:
  4664                           	opt stack 0
  4665  001BEE                     _Delay1TCYx:
  4666                           	opt stack 24
  4667                           
  4668                           ;incstack = 0
  4669                           ;Delay1TCYx@unit stored from wreg
  4670  001BEE  6E18               	movwf	Delay1TCYx@unit,c
  4671  001BF0                     l874:
  4672  001BF0  F000               	nop	
  4673  001BF2  2E18               	decfsz	Delay1TCYx@unit,f,c
  4674  001BF4  D7FD               	goto	l874
  4675  001BF6  D000               	goto	l876
  4676  001BF8                     l876:
  4677  001BF8  0012               	return		;funcret
  4678  001BFA                     __end_of_Delay1TCYx:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _Delay1KTCYx *****************
  4697 ;; Defined at:
  4698 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  unit            1    wreg     unsigned char 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  unit            1   23[COMRAM] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;		None               void
  4705 ;; Registers used:
  4706 ;;		wreg
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    4
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_RTDInit
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text20
  4727  001BB8                     __ptext20:
  4728                           	opt stack 0
  4729  001BB8                     _Delay1KTCYx:
  4730                           	opt stack 24
  4731                           
  4732                           ;incstack = 0
  4733                           ;Delay1KTCYx@unit stored from wreg
  4734  001BB8  6E18               	movwf	Delay1KTCYx@unit,c
  4735  001BBA  0EFA               	movlw	250
  4736  001BBC                     u3697:
  4737  001BBC  F000               	nop	
  4738  001BBE  2EE8               	decfsz	wreg,f,c
  4739  001BC0  D7FD               	goto	u3697
  4740  001BC2  2E18               	decfsz	Delay1KTCYx@unit,f,c
  4741  001BC4  D7FA               	goto	l2789
  4742  001BC6  D000               	goto	l869
  4743  001BC8                     l869:
  4744  001BC8  0012               	return		;funcret
  4745  001BCA                     __end_of_Delay1KTCYx:
  4746                           	opt stack 0
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           postinc0	equ	0xFEE
  4755                           wreg	equ	0xFE8
  4756                           postdec1	equ	0xFE5
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _Delay10TCYx *****************
  4764 ;; Defined at:
  4765 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  unit            1    wreg     unsigned char 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  unit            1   23[COMRAM] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;		None               void
  4772 ;; Registers used:
  4773 ;;		wreg
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;Total ram usage:        1 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    4
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_RTDInit
  4790 ;;		_ReadRTDpos
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text21
  4796  001BCA                     __ptext21:
  4797                           	opt stack 0
  4798  001BCA                     _Delay10TCYx:
  4799                           	opt stack 23
  4800                           
  4801                           ;incstack = 0
  4802                           ;Delay10TCYx@unit stored from wreg
  4803  001BCA  6E18               	movwf	Delay10TCYx@unit,c
  4804  001BCC  0E03               	movlw	3
  4805  001BCE                     u3707:
  4806  001BCE  2EE8               	decfsz	wreg,f,c
  4807  001BD0  D7FE               	goto	u3707
  4808  001BD2  F000               	nop	
  4809  001BD4  2E18               	decfsz	Delay10TCYx@unit,f,c
  4810  001BD6  D7FA               	goto	l2533
  4811  001BD8  D000               	goto	l862
  4812  001BDA                     l862:
  4813  001BDA  0012               	return		;funcret
  4814  001BDC                     __end_of_Delay10TCYx:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _PIDInit *****************
  4833 ;; Defined at:
  4834 ;;		line 18 in file "PID.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;		None               void
  4841 ;; Registers used:
  4842 ;;		wreg, status,2
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;Total ram usage:        0 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    4
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_initialize
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text22
  4863  0016C8                     __ptext22:
  4864                           	opt stack 0
  4865  0016C8                     _PIDInit:
  4866                           	opt stack 25
  4867                           
  4868                           ;PID.c: 20: error = 0;
  4869                           
  4870                           ;incstack = 0
  4871  0016C8  0E00               	movlw	0
  4872  0016CA  0100               	movlb	0	; () banked
  4873  0016CC  6FAF               	movwf	_error& (0+255),b
  4874  0016CE  0E00               	movlw	0
  4875  0016D0  0100               	movlb	0	; () banked
  4876  0016D2  6FB0               	movwf	(_error+1)& (0+255),b
  4877  0016D4  0E00               	movlw	0
  4878  0016D6  0100               	movlb	0	; () banked
  4879  0016D8  6FB1               	movwf	(_error+2)& (0+255),b
  4880                           
  4881                           ;PID.c: 21: prevErr = 0;
  4882  0016DA  0E00               	movlw	0
  4883  0016DC  0100               	movlb	0	; () banked
  4884  0016DE  6FB5               	movwf	_prevErr& (0+255),b
  4885  0016E0  0E00               	movlw	0
  4886  0016E2  0100               	movlb	0	; () banked
  4887  0016E4  6FB6               	movwf	(_prevErr+1)& (0+255),b
  4888  0016E6  0E00               	movlw	0
  4889  0016E8  0100               	movlb	0	; () banked
  4890  0016EA  6FB7               	movwf	(_prevErr+2)& (0+255),b
  4891                           
  4892                           ;PID.c: 22: intErr = 0;
  4893  0016EC  0E00               	movlw	0
  4894  0016EE  0100               	movlb	0	; () banked
  4895  0016F0  6FB2               	movwf	_intErr& (0+255),b
  4896  0016F2  0E00               	movlw	0
  4897  0016F4  0100               	movlb	0	; () banked
  4898  0016F6  6FB3               	movwf	(_intErr+1)& (0+255),b
  4899  0016F8  0E00               	movlw	0
  4900  0016FA  0100               	movlb	0	; () banked
  4901  0016FC  6FB4               	movwf	(_intErr+2)& (0+255),b
  4902                           
  4903                           ;PID.c: 24: T0CON = 0x04;
  4904  0016FE  0E04               	movlw	4
  4905  001700  6ED5               	movwf	4053,c	;volatile
  4906                           
  4907                           ;PID.c: 25: TMR0H = 0xDB;
  4908  001702  0EDB               	movlw	219
  4909  001704  6ED7               	movwf	4055,c	;volatile
  4910                           
  4911                           ;PID.c: 26: TMR0L = 0x60;
  4912  001706  0E60               	movlw	96
  4913  001708  6ED6               	movwf	4054,c	;volatile
  4914                           
  4915                           ; BSR set to: 0
  4916  00170A  0012               	return		;funcret
  4917  00170C                     __end_of_PIDInit:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           prodh	equ	0xFF4
  4924                           prodl	equ	0xFF3
  4925                           intcon	equ	0xFF2
  4926                           postinc0	equ	0xFEE
  4927                           wreg	equ	0xFE8
  4928                           postdec1	equ	0xFE5
  4929                           fsr1l	equ	0xFE1
  4930                           indf2	equ	0xFDF
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _MotorDriverInit *****************
  4936 ;; Defined at:
  4937 ;;		line 7 in file "MotorControl.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;		None               void
  4944 ;; Registers used:
  4945 ;;		wreg, status,2
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    4
  4958 ;; This function calls:
  4959 ;;		Nothing
  4960 ;; This function is called by:
  4961 ;;		_initialize
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text23
  4966  001A8E                     __ptext23:
  4967                           	opt stack 0
  4968  001A8E                     _MotorDriverInit:
  4969                           	opt stack 25
  4970                           
  4971                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;incstack = 0
  4975  001A8E  9098               	bcf	3992,0,c	;volatile
  4976                           
  4977                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  4978  001A90  9896               	bcf	3990,4,c	;volatile
  4979                           
  4980                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  4981  001A92  9696               	bcf	3990,3,c	;volatile
  4982                           
  4983                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  4984  001A94  9698               	bcf	3992,3,c	;volatile
  4985                           
  4986                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  4987  001A96  8093               	bsf	3987,0,c	;volatile
  4988                           
  4989                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  4990  001A98  9892               	bcf	3986,4,c	;volatile
  4991                           
  4992                           ;MotorControl.c: 18: CCPR3L = 0x00;
  4993  001A9A  0E00               	movlw	0
  4994  001A9C  6EB8               	movwf	4024,c	;volatile
  4995                           
  4996                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  4997  001A9E  98B7               	bcf	4023,4,c	;volatile
  4998                           
  4999                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  5000  001AA0  9AB7               	bcf	4023,5,c	;volatile
  5001                           
  5002                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  5003  001AA2  0E4C               	movlw	76
  5004  001AA4  6EB7               	movwf	4023,c	;volatile
  5005                           
  5006                           ;MotorControl.c: 22: PR2 = 0xFF;
  5007  001AA6  68CB               	setf	4043,c	;volatile
  5008                           
  5009                           ;MotorControl.c: 23: T3CON = 0x00;
  5010  001AA8  0E00               	movlw	0
  5011  001AAA  6EB1               	movwf	4017,c	;volatile
  5012                           
  5013                           ;MotorControl.c: 24: T2CON = 0x04;
  5014  001AAC  0E04               	movlw	4
  5015  001AAE  6ECA               	movwf	4042,c	;volatile
  5016  001AB0  0012               	return		;funcret
  5017  001AB2                     __end_of_MotorDriverInit:
  5018                           	opt stack 0
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           postinc0	equ	0xFEE
  5027                           wreg	equ	0xFE8
  5028                           postdec1	equ	0xFE5
  5029                           fsr1l	equ	0xFE1
  5030                           indf2	equ	0xFDF
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _JoystickInit *****************
  5036 ;; Defined at:
  5037 ;;		line 6 in file "Joystick.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;		None
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;		None
  5042 ;; Return value:  Size  Location     Type
  5043 ;;		None               void
  5044 ;; Registers used:
  5045 ;;		wreg, status,2, status,0
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;Total ram usage:        0 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    4
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_initialize
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text24
  5066  001996                     __ptext24:
  5067                           	opt stack 0
  5068  001996                     _JoystickInit:
  5069                           	opt stack 25
  5070                           
  5071                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  5072                           
  5073                           ;incstack = 0
  5074  001996  9492               	bcf	3986,2,c	;volatile
  5075                           
  5076                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  5077  001998  8293               	bsf	3987,1,c	;volatile
  5078                           
  5079                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  5080  00199A  A281               	btfss	3969,1,c	;volatile
  5081  00199C  D003               	goto	l31
  5082                           
  5083                           ;Joystick.c: 11: {
  5084                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  5085  00199E  8480               	bsf	3968,2,c	;volatile
  5086                           
  5087                           ;Joystick.c: 13: JSEnableFlag = 1;
  5088  0019A0  0E01               	movlw	1
  5089  0019A2  D004               	goto	L2
  5090  0019A4                     l31:
  5091                           
  5092                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  5093  0019A4  B281               	btfsc	3969,1,c	;volatile
  5094  0019A6  D005               	goto	l2935
  5095                           
  5096                           ;Joystick.c: 16: {
  5097                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  5098  0019A8  9480               	bcf	3968,2,c	;volatile
  5099                           
  5100                           ;Joystick.c: 18: JSEnableFlag = 0;
  5101  0019AA  0E00               	movlw	0
  5102  0019AC                     L2:
  5103  0019AC  0100               	movlb	0	; () banked
  5104  0019AE  6FBA               	movwf	_JSEnableFlag& (0+255),b
  5105                           
  5106                           ; BSR set to: 0
  5107  0019B0  D000               	goto	l2935
  5108  0019B2                     l2935:
  5109                           
  5110                           ;Joystick.c: 19: }
  5111                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  5112  0019B2  80C2               	bsf	4034,0,c	;volatile
  5113                           
  5114                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  5115  0019B4  50C2               	movf	4034,w,c	;volatile
  5116  0019B6  0B01               	andlw	1
  5117  0019B8  6EC2               	movwf	4034,c	;volatile
  5118                           
  5119                           ;Joystick.c: 23: ADCON1 = 0x0D;
  5120  0019BA  0E0D               	movlw	13
  5121  0019BC  6EC1               	movwf	4033,c	;volatile
  5122                           
  5123                           ;Joystick.c: 24: ADCON2 = 0xB4;
  5124  0019BE  0EB4               	movlw	180
  5125  0019C0  6EC0               	movwf	4032,c	;volatile
  5126  0019C2  0012               	return		;funcret
  5127  0019C4                     __end_of_JoystickInit:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _InitializeInterrupts *****************
  5146 ;; Defined at:
  5147 ;;		line 234 in file "RTDuC.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		None
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    4
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_initialize
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text25
  5176  001BFA                     __ptext25:
  5177                           	opt stack 0
  5178  001BFA                     _InitializeInterrupts:
  5179                           	opt stack 25
  5180                           
  5181                           ;RTDuC.c: 236: INTCONbits.GIE = 1;
  5182                           
  5183                           ;incstack = 0
  5184  001BFA  8EF2               	bsf	intcon,7,c	;volatile
  5185                           
  5186                           ;RTDuC.c: 237: INTCONbits.PEIE = 1;
  5187  001BFC  8CF2               	bsf	intcon,6,c	;volatile
  5188                           
  5189                           ;RTDuC.c: 239: INTCONbits.TMR0IE = 1;
  5190  001BFE  8AF2               	bsf	intcon,5,c	;volatile
  5191                           
  5192                           ;RTDuC.c: 240: T0CONbits.TMR0ON = 1;
  5193  001C00  8ED5               	bsf	4053,7,c	;volatile
  5194                           
  5195                           ;RTDuC.c: 242: PIE2bits.OSCFIE = 1;
  5196  001C02  8EA0               	bsf	4000,7,c	;volatile
  5197  001C04  0012               	return		;funcret
  5198  001C06                     __end_of_InitializeInterrupts:
  5199                           	opt stack 0
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           postdec1	equ	0xFE5
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _EEPROMInit *****************
  5217 ;; Defined at:
  5218 ;;		line 13 in file "EEPROM.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;		None               void
  5225 ;; Registers used:
  5226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;Total ram usage:        0 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    7
  5239 ;; This function calls:
  5240 ;;		_EEBootUp
  5241 ;; This function is called by:
  5242 ;;		_initialize
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text26
  5247  001B90                     __ptext26:
  5248                           	opt stack 0
  5249  001B90                     _EEPROMInit:
  5250                           	opt stack 22
  5251                           
  5252                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5253                           
  5254                           ;incstack = 0
  5255  001B90  9EA6               	bcf	4006,7,c	;volatile
  5256                           
  5257                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5258  001B92  9CA6               	bcf	4006,6,c	;volatile
  5259                           
  5260                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5261  001B94  84A6               	bsf	4006,2,c	;volatile
  5262                           
  5263                           ;EEPROM.c: 19: EEBootUp();
  5264  001B96  ECC7  F009         	call	_EEBootUp	;wreg free
  5265                           
  5266                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5267  001B9A  0E3D               	movlw	61
  5268  001B9C  6ED2               	movwf	4050,c	;volatile
  5269                           
  5270                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5271  001B9E  84A0               	bsf	4000,2,c	;volatile
  5272                           
  5273                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5274  001BA0  84A2               	bsf	4002,2,c	;volatile
  5275  001BA2  0012               	return		;funcret
  5276  001BA4                     __end_of_EEPROMInit:
  5277                           	opt stack 0
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1l	equ	0xFE1
  5289                           indf2	equ	0xFDF
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function _EEBootUp *****************
  5295 ;; Defined at:
  5296 ;;		line 27 in file "EEPROM.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    6
  5317 ;; This function calls:
  5318 ;;		_EEReadChar
  5319 ;;		_EEReadDouble
  5320 ;; This function is called by:
  5321 ;;		_EEPROMInit
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text27
  5326  00138E                     __ptext27:
  5327                           	opt stack 0
  5328  00138E                     _EEBootUp:
  5329                           	opt stack 22
  5330                           
  5331                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  5332                           
  5333                           ;incstack = 0
  5334  00138E  0E16               	movlw	22
  5335  001390  EC9E  F00D         	call	_EEReadChar
  5336  001394  0900               	iorlw	0
  5337  001396  B4D8               	btfsc	status,2,c
  5338  001398  D031               	goto	l357
  5339                           
  5340                           ;EEPROM.c: 30: {
  5341                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  5342  00139A  0E00               	movlw	0
  5343  00139C  ECBD  F00A         	call	_EEReadDouble
  5344  0013A0  C01E  F03C         	movff	?_EEReadDouble,_SetAngle
  5345  0013A4  C01F  F03D         	movff	?_EEReadDouble+1,_SetAngle+1
  5346  0013A8  C020  F03E         	movff	?_EEReadDouble+2,_SetAngle+2
  5347                           
  5348                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  5349  0013AC  0E03               	movlw	3
  5350  0013AE  ECBD  F00A         	call	_EEReadDouble
  5351  0013B2  C01E  F0AC         	movff	?_EEReadDouble,_Kp
  5352  0013B6  C01F  F0AD         	movff	?_EEReadDouble+1,_Kp+1
  5353  0013BA  C020  F0AE         	movff	?_EEReadDouble+2,_Kp+2
  5354                           
  5355                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  5356  0013BE  0E06               	movlw	6
  5357  0013C0  ECBD  F00A         	call	_EEReadDouble
  5358  0013C4  C01E  F0A9         	movff	?_EEReadDouble,_Ki
  5359  0013C8  C01F  F0AA         	movff	?_EEReadDouble+1,_Ki+1
  5360  0013CC  C020  F0AB         	movff	?_EEReadDouble+2,_Ki+2
  5361                           
  5362                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  5363  0013D0  0E09               	movlw	9
  5364  0013D2  ECBD  F00A         	call	_EEReadDouble
  5365  0013D6  C01E  F0A6         	movff	?_EEReadDouble,_Kd
  5366  0013DA  C01F  F0A7         	movff	?_EEReadDouble+1,_Kd+1
  5367  0013DE  C020  F0A8         	movff	?_EEReadDouble+2,_Kd+2
  5368                           
  5369                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  5370  0013E2  0E15               	movlw	21
  5371  0013E4  EC9E  F00D         	call	_EEReadChar
  5372  0013E8  0100               	movlb	0	; () banked
  5373  0013EA  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;EEPROM.c: 36: if(PIDEnableFlag == 1)
  5377  0013EC  0100               	movlb	0	; () banked
  5378  0013EE  05BB               	decf	_PIDEnableFlag& (0+255),w,b
  5379  0013F0  A4D8               	btfss	status,2,c
  5380  0013F2  D004               	goto	l357
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;EEPROM.c: 37: {
  5384                           ;EEPROM.c: 38: PIDEnableFlag = 3;
  5385  0013F4  0E03               	movlw	3
  5386  0013F6  0100               	movlb	0	; () banked
  5387  0013F8  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  5388                           
  5389                           ; BSR set to: 0
  5390  0013FA  D000               	goto	l357
  5391  0013FC                     l357:
  5392  0013FC  0012               	return		;funcret
  5393  0013FE                     __end_of_EEBootUp:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           postinc0	equ	0xFEE
  5403                           wreg	equ	0xFE8
  5404                           postdec1	equ	0xFE5
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           fsr2h	equ	0xFDA
  5408                           fsr2l	equ	0xFD9
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _EEReadDouble *****************
  5412 ;; Defined at:
  5413 ;;		line 100 in file "EEPROM.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;  location        1    wreg     unsigned char 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  location        1   32[COMRAM] unsigned char 
  5418 ;;  x               1   33[COMRAM] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  3   29[COMRAM] unsigned char 
  5421 ;; Registers used:
  5422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        5 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    5
  5435 ;; This function calls:
  5436 ;;		_Busy_eep
  5437 ;;		_EEReassembleDouble
  5438 ;;		_Read_b_eep
  5439 ;; This function is called by:
  5440 ;;		_EEBootUp
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text28
  5445  00157A                     __ptext28:
  5446                           	opt stack 0
  5447  00157A                     _EEReadDouble:
  5448                           	opt stack 22
  5449                           
  5450                           ;incstack = 0
  5451                           ;EEReadDouble@location stored from wreg
  5452  00157A  6E21               	movwf	EEReadDouble@location,c
  5453                           
  5454                           ;EEPROM.c: 102: unsigned char x;
  5455                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  5456  00157C  50F2               	movf	intcon,w,c	;volatile
  5457  00157E  0B3F               	andlw	63
  5458  001580  6EF2               	movwf	intcon,c	;volatile
  5459                           
  5460                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  5461  001582  0E00               	movlw	0
  5462  001584  6E22               	movwf	EEReadDouble@x,c
  5463  001586                     l2551:
  5464  001586  0E02               	movlw	2
  5465  001588  6422               	cpfsgt	EEReadDouble@x,c
  5466  00158A  D001               	goto	l2555
  5467  00158C  D014               	goto	l2563
  5468  00158E                     l2555:
  5469                           
  5470                           ;EEPROM.c: 107: {
  5471                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  5472  00158E  5022               	movf	EEReadDouble@x,w,c
  5473  001590  0D01               	mullw	1
  5474  001592  0E39               	movlw	low _DDouble
  5475  001594  24F3               	addwf	prodl,w,c
  5476  001596  6ED9               	movwf	fsr2l,c
  5477  001598  0E00               	movlw	high _DDouble
  5478  00159A  20F4               	addwfc	prodh,w,c
  5479  00159C  6EDA               	movwf	fsr2h,c
  5480  00159E  5021               	movf	EEReadDouble@location,w,c
  5481  0015A0  2422               	addwf	EEReadDouble@x,w,c
  5482  0015A2  6E18               	movwf	Read_b_eep@badd,c
  5483  0015A4  6A19               	clrf	Read_b_eep@badd+1,c
  5484  0015A6  3619               	rlcf	Read_b_eep@badd+1,f,c
  5485  0015A8  ECBB  F00D         	call	_Read_b_eep	;wreg free
  5486  0015AC  6EDF               	movwf	indf2,c
  5487                           
  5488                           ;EEPROM.c: 109: Busy_eep();
  5489  0015AE  EC08  F00E         	call	_Busy_eep	;wreg free
  5490  0015B2  2A22               	incf	EEReadDouble@x,f,c
  5491  0015B4  D7E8               	goto	l2551
  5492  0015B6                     l2563:
  5493                           
  5494                           ;EEPROM.c: 110: }
  5495                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  5496  0015B6  50F2               	movf	intcon,w,c	;volatile
  5497  0015B8  09C0               	iorlw	192
  5498  0015BA  6EF2               	movwf	intcon,c	;volatile
  5499                           
  5500                           ;EEPROM.c: 114: return EEReassembleDouble();
  5501  0015BC  EC86  F00B         	call	_EEReassembleDouble	;wreg free
  5502  0015C0  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5503  0015C4  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5504  0015C8  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5505  0015CC  D000               	goto	l373
  5506  0015CE                     l373:
  5507  0015CE  0012               	return		;funcret
  5508  0015D0                     __end_of_EEReadDouble:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           postinc0	equ	0xFEE
  5518                           wreg	equ	0xFE8
  5519                           postdec1	equ	0xFE5
  5520                           fsr1l	equ	0xFE1
  5521                           indf2	equ	0xFDF
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _EEReassembleDouble *****************
  5527 ;; Defined at:
  5528 ;;		line 62 in file "EEPROM.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;		None
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  dub             3   26[COMRAM] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  3   23[COMRAM] unsigned char 
  5535 ;; Registers used:
  5536 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5542 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;Total ram usage:        6 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    4
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_EEReadDouble
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text29
  5557  00170C                     __ptext29:
  5558                           	opt stack 0
  5559  00170C                     _EEReassembleDouble:
  5560                           	opt stack 22
  5561                           
  5562                           ;EEPROM.c: 64: double dub;
  5563                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  5564                           
  5565                           ;incstack = 0
  5566  00170C  0E1B               	movlw	low EEReassembleDouble@dub
  5567  00170E  6E3F               	movwf	_DoublePtr,c
  5568  001710  0E00               	movlw	high EEReassembleDouble@dub
  5569  001712  6E40               	movwf	_DoublePtr+1,c
  5570                           
  5571                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  5572  001714  C03F  FFD9         	movff	_DoublePtr,fsr2l
  5573  001718  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  5574  00171C  C039  FFDF         	movff	_DDouble,indf2
  5575                           
  5576                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  5577  001720  EE20 F001          	lfsr	2,1
  5578  001724  503F               	movf	_DoublePtr,w,c
  5579  001726  26D9               	addwf	fsr2l,f,c
  5580  001728  5040               	movf	_DoublePtr+1,w,c
  5581  00172A  22DA               	addwfc	fsr2h,f,c
  5582  00172C  C03A  FFDF         	movff	_DDouble+1,indf2
  5583                           
  5584                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  5585  001730  EE20 F002          	lfsr	2,2
  5586  001734  503F               	movf	_DoublePtr,w,c
  5587  001736  26D9               	addwf	fsr2l,f,c
  5588  001738  5040               	movf	_DoublePtr+1,w,c
  5589  00173A  22DA               	addwfc	fsr2h,f,c
  5590  00173C  C03B  FFDF         	movff	_DDouble+2,indf2
  5591                           
  5592                           ;EEPROM.c: 69: return dub;
  5593  001740  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5594  001744  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5595  001748  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5596  00174C  D000               	goto	l363
  5597  00174E                     l363:
  5598  00174E  0012               	return		;funcret
  5599  001750                     __end_of_EEReassembleDouble:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _EEReadChar *****************
  5618 ;; Defined at:
  5619 ;;		line 136 in file "EEPROM.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  location        1    wreg     unsigned char 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  location        1   25[COMRAM] unsigned char 
  5624 ;;  ch              1   26[COMRAM] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      unsigned char 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    5
  5641 ;; This function calls:
  5642 ;;		_Read_b_eep
  5643 ;; This function is called by:
  5644 ;;		_EEBootUp
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text30
  5649  001B3C                     __ptext30:
  5650                           	opt stack 0
  5651  001B3C                     _EEReadChar:
  5652                           	opt stack 22
  5653                           
  5654                           ;incstack = 0
  5655                           ;EEReadChar@location stored from wreg
  5656  001B3C  6E1A               	movwf	EEReadChar@location,c
  5657                           
  5658                           ;EEPROM.c: 138: unsigned char ch;
  5659                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  5660  001B3E  50F2               	movf	intcon,w,c	;volatile
  5661  001B40  0B3F               	andlw	63
  5662  001B42  6EF2               	movwf	intcon,c	;volatile
  5663                           
  5664                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  5665  001B44  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  5666  001B48  6A19               	clrf	Read_b_eep@badd+1,c
  5667  001B4A  ECBB  F00D         	call	_Read_b_eep	;wreg free
  5668  001B4E  6E1B               	movwf	EEReadChar@ch,c
  5669                           
  5670                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  5671  001B50  50F2               	movf	intcon,w,c	;volatile
  5672  001B52  09C0               	iorlw	192
  5673  001B54  6EF2               	movwf	intcon,c	;volatile
  5674                           
  5675                           ;EEPROM.c: 146: return ch;
  5676  001B56  501B               	movf	EEReadChar@ch,w,c
  5677  001B58  D000               	goto	l379
  5678  001B5A                     l379:
  5679  001B5A  0012               	return		;funcret
  5680  001B5C                     __end_of_EEReadChar:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           intcon	equ	0xFF2
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           postdec1	equ	0xFE5
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _Read_b_eep *****************
  5699 ;; Defined at:
  5700 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  badd            2   23[COMRAM] unsigned int 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      unsigned char 
  5707 ;; Registers used:
  5708 ;;		wreg, status,2, status,0
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;Total ram usage:        2 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    4
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_EEReadDouble
  5725 ;;		_EEReadChar
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text31
  5730  001B76                     __ptext31:
  5731                           	opt stack 0
  5732  001B76                     _Read_b_eep:
  5733                           	opt stack 22
  5734                           
  5735                           ;incstack = 0
  5736  001B76  5019               	movf	Read_b_eep@badd+1,w,c
  5737  001B78  0B03               	andlw	3
  5738  001B7A  6EAA               	movwf	4010,c	;volatile
  5739  001B7C  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  5740  001B80  9CA6               	bcf	4006,6,c	;volatile
  5741  001B82  9EA6               	bcf	4006,7,c	;volatile
  5742  001B84  80A6               	bsf	4006,0,c	;volatile
  5743  001B86  F000               	nop	
  5744  001B88  F000               	nop	
  5745  001B8A  50A8               	movf	4008,w,c	;volatile
  5746  001B8C  D000               	goto	l586
  5747  001B8E                     l586:
  5748  001B8E  0012               	return		;funcret
  5749  001B90                     __end_of_Read_b_eep:
  5750                           	opt stack 0
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           postinc0	equ	0xFEE
  5759                           wreg	equ	0xFE8
  5760                           postdec1	equ	0xFE5
  5761                           fsr1l	equ	0xFE1
  5762                           indf2	equ	0xFDF
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function _SendSPI1 *****************
  5768 ;; Defined at:
  5769 ;;		line 40 in file "SPISlave.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  data            1    wreg     unsigned char 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  data            1   24[COMRAM] unsigned char 
  5774 ;;  temp            1   23[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;		None               void
  5777 ;; Registers used:
  5778 ;;		wreg
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;Total ram usage:        2 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    4
  5791 ;; This function calls:
  5792 ;;		Nothing
  5793 ;; This function is called by:
  5794 ;;		_main
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           	psect	text32
  5799  001966                     __ptext32:
  5800                           	opt stack 0
  5801  001966                     _SendSPI1:
  5802                           	opt stack 26
  5803                           
  5804                           ;incstack = 0
  5805                           ;SendSPI1@data stored from wreg
  5806  001966  6E19               	movwf	SendSPI1@data,c
  5807                           
  5808                           ;SPISlave.c: 42: SSP1BUF = data;
  5809  001968  C019  FFC9         	movff	SendSPI1@data,4041	;volatile
  5810                           
  5811                           ;SPISlave.c: 43: unsigned char temp;
  5812                           ;SPISlave.c: 44: PIR1bits.SSP1IF = 0;
  5813  00196C  969E               	bcf	3998,3,c	;volatile
  5814                           
  5815                           ;SPISlave.c: 45: temp = SSP1BUF;
  5816  00196E  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  5817                           
  5818                           ;SPISlave.c: 46: PIR1bits.TMR1IF = 0;
  5819  001972  909E               	bcf	3998,0,c	;volatile
  5820                           
  5821                           ;SPISlave.c: 47: T1CONbits.TMR1ON = 1;
  5822  001974  80CD               	bsf	4045,0,c	;volatile
  5823                           
  5824                           ;SPISlave.c: 48: TMR1H = timer1High;
  5825  001976  C047  FFCF         	movff	_timer1High,4047	;volatile
  5826                           
  5827                           ;SPISlave.c: 49: TMR1L = timer1Low;
  5828  00197A  C042  FFCE         	movff	_timer1Low,4046	;volatile
  5829                           
  5830                           ;SPISlave.c: 50: while (!PIR1bits.SSP1IF)
  5831  00197E  D006               	goto	l267
  5832  001980                     l268:
  5833                           
  5834                           ;SPISlave.c: 51: {
  5835                           ;SPISlave.c: 52: if (PIR1bits.TMR1IF == 1)
  5836  001980  A09E               	btfss	3998,0,c	;volatile
  5837  001982  D004               	goto	l267
  5838                           
  5839                           ;SPISlave.c: 53: {
  5840                           ;SPISlave.c: 54: PIR1bits.SSPIF = 1;
  5841  001984  869E               	bsf	3998,3,c	;volatile
  5842                           
  5843                           ;SPISlave.c: 55: temp = SSP1BUF;
  5844  001986  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  5845  00198A  D000               	goto	l267
  5846  00198C                     l267:
  5847  00198C  A69E               	btfss	3998,3,c	;volatile
  5848  00198E  D7F8               	goto	l268
  5849                           
  5850                           ;SPISlave.c: 56: }
  5851                           ;SPISlave.c: 57: }
  5852                           ;SPISlave.c: 58: SSP1CON1bits.SSPOV1 = 0;
  5853  001990  9CC6               	bcf	4038,6,c	;volatile
  5854                           
  5855                           ;SPISlave.c: 59: PIR1bits.SSP1IF = 0;
  5856  001992  969E               	bcf	3998,3,c	;volatile
  5857  001994  0012               	return		;funcret
  5858  001996                     __end_of_SendSPI1:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           postdec1	equ	0xFE5
  5870                           fsr1l	equ	0xFE1
  5871                           indf2	equ	0xFDF
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _SaveAll *****************
  5877 ;; Defined at:
  5878 ;;		line 150 in file "EEPROM.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;		None               void
  5885 ;; Registers used:
  5886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;Total ram usage:        0 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    6
  5899 ;; This function calls:
  5900 ;;		_EEWriteChar
  5901 ;;		_EEWriteDouble
  5902 ;; This function is called by:
  5903 ;;		_main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text33
  5908  001040                     __ptext33:
  5909                           	opt stack 0
  5910  001040                     _SaveAll:
  5911                           	opt stack 24
  5912                           
  5913                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  5914                           
  5915                           ;incstack = 0
  5916  001040  C03C  F01C         	movff	_SetAngle,EEWriteDouble@dub
  5917  001044  C03D  F01D         	movff	_SetAngle+1,EEWriteDouble@dub+1
  5918  001048  C03E  F01E         	movff	_SetAngle+2,EEWriteDouble@dub+2
  5919  00104C  0E00               	movlw	0
  5920  00104E  ECE8  F00A         	call	_EEWriteDouble
  5921                           
  5922                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  5923  001052  C0AC  F01C         	movff	_Kp,EEWriteDouble@dub
  5924  001056  C0AD  F01D         	movff	_Kp+1,EEWriteDouble@dub+1
  5925  00105A  C0AE  F01E         	movff	_Kp+2,EEWriteDouble@dub+2
  5926  00105E  0E03               	movlw	3
  5927  001060  ECE8  F00A         	call	_EEWriteDouble
  5928                           
  5929                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  5930  001064  C0A9  F01C         	movff	_Ki,EEWriteDouble@dub
  5931  001068  C0AA  F01D         	movff	_Ki+1,EEWriteDouble@dub+1
  5932  00106C  C0AB  F01E         	movff	_Ki+2,EEWriteDouble@dub+2
  5933  001070  0E06               	movlw	6
  5934  001072  ECE8  F00A         	call	_EEWriteDouble
  5935                           
  5936                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  5937  001076  C0A6  F01C         	movff	_Kd,EEWriteDouble@dub
  5938  00107A  C0A7  F01D         	movff	_Kd+1,EEWriteDouble@dub+1
  5939  00107E  C0A8  F01E         	movff	_Kd+2,EEWriteDouble@dub+2
  5940  001082  0E09               	movlw	9
  5941  001084  ECE8  F00A         	call	_EEWriteDouble
  5942                           
  5943                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  5944  001088  CF80 F01C          	movff	3968,EEWriteChar@ch	;volatile
  5945  00108C  0E0C               	movlw	12
  5946  00108E  EC6B  F00D         	call	_EEWriteChar
  5947                           
  5948                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  5949  001092  CF81 F01C          	movff	3969,EEWriteChar@ch	;volatile
  5950  001096  0E0D               	movlw	13
  5951  001098  EC6B  F00D         	call	_EEWriteChar
  5952                           
  5953                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  5954  00109C  CF82 F01C          	movff	3970,EEWriteChar@ch	;volatile
  5955  0010A0  0E0E               	movlw	14
  5956  0010A2  EC6B  F00D         	call	_EEWriteChar
  5957                           
  5958                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  5959  0010A6  CF83 F01C          	movff	3971,EEWriteChar@ch	;volatile
  5960  0010AA  0E0F               	movlw	15
  5961  0010AC  EC6B  F00D         	call	_EEWriteChar
  5962                           
  5963                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  5964  0010B0  CF84 F01C          	movff	3972,EEWriteChar@ch	;volatile
  5965  0010B4  0E10               	movlw	16
  5966  0010B6  EC6B  F00D         	call	_EEWriteChar
  5967                           
  5968                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  5969  0010BA  CF85 F01C          	movff	3973,EEWriteChar@ch	;volatile
  5970  0010BE  0E11               	movlw	17
  5971  0010C0  EC6B  F00D         	call	_EEWriteChar
  5972                           
  5973                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  5974  0010C4  CF86 F01C          	movff	3974,EEWriteChar@ch	;volatile
  5975  0010C8  0E12               	movlw	18
  5976  0010CA  EC6B  F00D         	call	_EEWriteChar
  5977                           
  5978                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  5979  0010CE  CF87 F01C          	movff	3975,EEWriteChar@ch	;volatile
  5980  0010D2  0E13               	movlw	19
  5981  0010D4  EC6B  F00D         	call	_EEWriteChar
  5982                           
  5983                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  5984  0010D8  CF88 F01C          	movff	3976,EEWriteChar@ch	;volatile
  5985  0010DC  0E14               	movlw	20
  5986  0010DE  EC6B  F00D         	call	_EEWriteChar
  5987                           
  5988                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  5989  0010E2  C0BB  F01C         	movff	_PIDEnableFlag,EEWriteChar@ch
  5990  0010E6  0E15               	movlw	21
  5991  0010E8  EC6B  F00D         	call	_EEWriteChar
  5992                           
  5993                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  5994  0010EC  0E01               	movlw	1
  5995  0010EE  6E1C               	movwf	EEWriteChar@ch,c
  5996  0010F0  0E16               	movlw	22
  5997  0010F2  EC6B  F00D         	call	_EEWriteChar
  5998  0010F6  0012               	return		;funcret
  5999  0010F8                     __end_of_SaveAll:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           intcon	equ	0xFF2
  6008                           postinc0	equ	0xFEE
  6009                           wreg	equ	0xFE8
  6010                           postdec1	equ	0xFE5
  6011                           fsr1l	equ	0xFE1
  6012                           indf2	equ	0xFDF
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8
  6016                           
  6017 ;; *************** function _EEWriteDouble *****************
  6018 ;; Defined at:
  6019 ;;		line 77 in file "EEPROM.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  location        1    wreg     unsigned char 
  6022 ;;  dub             3   27[COMRAM] unsigned char 
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  location        1   30[COMRAM] unsigned char 
  6025 ;;  x               1   31[COMRAM] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;		None               void
  6028 ;; Registers used:
  6029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6035 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;Total ram usage:        5 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    5
  6042 ;; This function calls:
  6043 ;;		_Busy_eep
  6044 ;;		_EEDisassembleDouble
  6045 ;;		_Write_b_eep
  6046 ;; This function is called by:
  6047 ;;		_SaveAll
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text34
  6052  0015D0                     __ptext34:
  6053                           	opt stack 0
  6054  0015D0                     _EEWriteDouble:
  6055                           	opt stack 24
  6056                           
  6057                           ;incstack = 0
  6058                           ;EEWriteDouble@location stored from wreg
  6059  0015D0  6E1F               	movwf	EEWriteDouble@location,c
  6060                           
  6061                           ;EEPROM.c: 79: unsigned char x;
  6062                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  6063  0015D2  C01C  F018         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6064  0015D6  C01D  F019         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6065  0015DA  C01E  F01A         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6066  0015DE  EC65  F00C         	call	_EEDisassembleDouble	;wreg free
  6067                           
  6068                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  6069  0015E2  50F2               	movf	intcon,w,c	;volatile
  6070  0015E4  0B3F               	andlw	63
  6071  0015E6  6EF2               	movwf	intcon,c	;volatile
  6072                           
  6073                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  6074  0015E8  0E00               	movlw	0
  6075  0015EA  6E20               	movwf	EEWriteDouble@x,c
  6076  0015EC                     l3015:
  6077  0015EC  0E02               	movlw	2
  6078  0015EE  6420               	cpfsgt	EEWriteDouble@x,c
  6079  0015F0  D001               	goto	l3019
  6080  0015F2  D014               	goto	l3029
  6081  0015F4                     l3019:
  6082                           
  6083                           ;EEPROM.c: 86: {
  6084                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  6085  0015F4  C01F  F018         	movff	EEWriteDouble@location,Write_b_eep@badd
  6086  0015F8  6A19               	clrf	Write_b_eep@badd+1,c
  6087  0015FA  5020               	movf	EEWriteDouble@x,w,c
  6088  0015FC  0D01               	mullw	1
  6089  0015FE  0E39               	movlw	low _DDouble
  6090  001600  24F3               	addwf	prodl,w,c
  6091  001602  6ED9               	movwf	fsr2l,c
  6092  001604  0E00               	movlw	high _DDouble
  6093  001606  20F4               	addwfc	prodh,w,c
  6094  001608  6EDA               	movwf	fsr2h,c
  6095  00160A  50DF               	movf	indf2,w,c
  6096  00160C  6E1A               	movwf	Write_b_eep@bdat,c
  6097  00160E  ECEB  F00B         	call	_Write_b_eep	;wreg free
  6098                           
  6099                           ;EEPROM.c: 88: location++;
  6100  001612  2A1F               	incf	EEWriteDouble@location,f,c
  6101                           
  6102                           ;EEPROM.c: 89: Busy_eep();
  6103  001614  EC08  F00E         	call	_Busy_eep	;wreg free
  6104  001618  2A20               	incf	EEWriteDouble@x,f,c
  6105  00161A  D7E8               	goto	l3015
  6106  00161C                     l3029:
  6107                           
  6108                           ;EEPROM.c: 90: }
  6109                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  6110  00161C  50F2               	movf	intcon,w,c	;volatile
  6111  00161E  09C0               	iorlw	192
  6112  001620  6EF2               	movwf	intcon,c	;volatile
  6113  001622  0012               	return		;funcret
  6114  001624                     __end_of_EEWriteDouble:
  6115                           	opt stack 0
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           intcon	equ	0xFF2
  6123                           postinc0	equ	0xFEE
  6124                           wreg	equ	0xFE8
  6125                           postdec1	equ	0xFE5
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _EEDisassembleDouble *****************
  6133 ;; Defined at:
  6134 ;;		line 48 in file "EEPROM.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;  dub             3   23[COMRAM] unsigned char 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;		None               void
  6141 ;; Registers used:
  6142 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6148 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;Total ram usage:        3 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    4
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_EEWriteDouble
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text35
  6163  0018CA                     __ptext35:
  6164                           	opt stack 0
  6165  0018CA                     _EEDisassembleDouble:
  6166                           	opt stack 24
  6167                           
  6168                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  6169                           
  6170                           ;incstack = 0
  6171  0018CA  0E18               	movlw	low EEDisassembleDouble@dub
  6172  0018CC  6E3F               	movwf	_DoublePtr,c
  6173  0018CE  0E00               	movlw	high EEDisassembleDouble@dub
  6174  0018D0  6E40               	movwf	_DoublePtr+1,c
  6175                           
  6176                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  6177  0018D2  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6178  0018D6  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6179  0018DA  50DF               	movf	indf2,w,c
  6180  0018DC  6E39               	movwf	_DDouble,c
  6181                           
  6182                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  6183  0018DE  EE20 F001          	lfsr	2,1
  6184  0018E2  503F               	movf	_DoublePtr,w,c
  6185  0018E4  26D9               	addwf	fsr2l,f,c
  6186  0018E6  5040               	movf	_DoublePtr+1,w,c
  6187  0018E8  22DA               	addwfc	fsr2h,f,c
  6188  0018EA  50DF               	movf	indf2,w,c
  6189  0018EC  6E3A               	movwf	_DDouble+1,c
  6190                           
  6191                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  6192  0018EE  EE20 F002          	lfsr	2,2
  6193  0018F2  503F               	movf	_DoublePtr,w,c
  6194  0018F4  26D9               	addwf	fsr2l,f,c
  6195  0018F6  5040               	movf	_DoublePtr+1,w,c
  6196  0018F8  22DA               	addwfc	fsr2h,f,c
  6197  0018FA  50DF               	movf	indf2,w,c
  6198  0018FC  6E3B               	movwf	_DDouble+2,c
  6199  0018FE  0012               	return		;funcret
  6200  001900                     __end_of_EEDisassembleDouble:
  6201                           	opt stack 0
  6202                           tblptru	equ	0xFF8
  6203                           tblptrh	equ	0xFF7
  6204                           tblptrl	equ	0xFF6
  6205                           tablat	equ	0xFF5
  6206                           prodh	equ	0xFF4
  6207                           prodl	equ	0xFF3
  6208                           intcon	equ	0xFF2
  6209                           postinc0	equ	0xFEE
  6210                           wreg	equ	0xFE8
  6211                           postdec1	equ	0xFE5
  6212                           fsr1l	equ	0xFE1
  6213                           indf2	equ	0xFDF
  6214                           fsr2h	equ	0xFDA
  6215                           fsr2l	equ	0xFD9
  6216                           status	equ	0xFD8
  6217                           
  6218 ;; *************** function _EEWriteChar *****************
  6219 ;; Defined at:
  6220 ;;		line 122 in file "EEPROM.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  location        1    wreg     unsigned char 
  6223 ;;  ch              1   27[COMRAM] unsigned char 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  location        1   28[COMRAM] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;		None               void
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6235 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;Total ram usage:        2 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    5
  6242 ;; This function calls:
  6243 ;;		_Busy_eep
  6244 ;;		_Write_b_eep
  6245 ;; This function is called by:
  6246 ;;		_SaveAll
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text36
  6251  001AD6                     __ptext36:
  6252                           	opt stack 0
  6253  001AD6                     _EEWriteChar:
  6254                           	opt stack 24
  6255                           
  6256                           ;incstack = 0
  6257                           ;EEWriteChar@location stored from wreg
  6258  001AD6  6E1D               	movwf	EEWriteChar@location,c
  6259                           
  6260                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  6261  001AD8  50F2               	movf	intcon,w,c	;volatile
  6262  001ADA  0B3F               	andlw	63
  6263  001ADC  6EF2               	movwf	intcon,c	;volatile
  6264                           
  6265                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  6266  001ADE  C01D  F018         	movff	EEWriteChar@location,Write_b_eep@badd
  6267  001AE2  6A19               	clrf	Write_b_eep@badd+1,c
  6268  001AE4  C01C  F01A         	movff	EEWriteChar@ch,Write_b_eep@bdat
  6269  001AE8  ECEB  F00B         	call	_Write_b_eep	;wreg free
  6270                           
  6271                           ;EEPROM.c: 127: Busy_eep();
  6272  001AEC  EC08  F00E         	call	_Busy_eep	;wreg free
  6273                           
  6274                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  6275  001AF0  50F2               	movf	intcon,w,c	;volatile
  6276  001AF2  09C0               	iorlw	192
  6277  001AF4  6EF2               	movwf	intcon,c	;volatile
  6278  001AF6  0012               	return		;funcret
  6279  001AF8                     __end_of_EEWriteChar:
  6280                           	opt stack 0
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon	equ	0xFF2
  6288                           postinc0	equ	0xFEE
  6289                           wreg	equ	0xFE8
  6290                           postdec1	equ	0xFE5
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _Write_b_eep *****************
  6298 ;; Defined at:
  6299 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  badd            2   23[COMRAM] unsigned int 
  6302 ;;  bdat            1   25[COMRAM] unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  GIE_BIT_VAL     1   26[COMRAM] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:        4 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    4
  6321 ;; This function calls:
  6322 ;;		Nothing
  6323 ;; This function is called by:
  6324 ;;		_EEWriteDouble
  6325 ;;		_EEWriteChar
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text37
  6330  0017D6                     __ptext37:
  6331                           	opt stack 0
  6332  0017D6                     _Write_b_eep:
  6333                           	opt stack 24
  6334                           
  6335                           ;incstack = 0
  6336  0017D6  0E00               	movlw	0
  6337  0017D8  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6338  0017DA  5019               	movf	Write_b_eep@badd+1,w,c
  6339  0017DC  0B03               	andlw	3
  6340  0017DE  6EAA               	movwf	4010,c	;volatile
  6341  0017E0  C018  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6342  0017E4  C01A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6343  0017E8  9EA6               	bcf	4006,7,c	;volatile
  6344  0017EA  9CA6               	bcf	4006,6,c	;volatile
  6345  0017EC  84A6               	bsf	4006,2,c	;volatile
  6346  0017EE  0E00               	movlw	0
  6347  0017F0  BEF2               	btfsc	intcon,7,c	;volatile
  6348  0017F2  0E01               	movlw	1
  6349  0017F4  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6350  0017F6  9EF2               	bcf	intcon,7,c	;volatile
  6351  0017F8  0E55               	movlw	85
  6352  0017FA  6EA7               	movwf	4007,c	;volatile
  6353  0017FC  0EAA               	movlw	170
  6354  0017FE  6EA7               	movwf	4007,c	;volatile
  6355  001800  82A6               	bsf	4006,1,c	;volatile
  6356  001802  D000               	goto	l601
  6357  001804                     l601:
  6358  001804  B2A6               	btfsc	4006,1,c	;volatile
  6359  001806  D7FE               	goto	l601
  6360  001808  B01B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  6361  00180A  D002               	bra	u2135
  6362  00180C  9EF2               	bcf	intcon,7,c	;volatile
  6363  00180E  D001               	bra	u2136
  6364  001810                     u2135:
  6365  001810  8EF2               	bsf	intcon,7,c	;volatile
  6366  001812                     u2136:
  6367  001812  94A6               	bcf	4006,2,c	;volatile
  6368  001814  0012               	return		;funcret
  6369  001816                     __end_of_Write_b_eep:
  6370                           	opt stack 0
  6371                           tblptru	equ	0xFF8
  6372                           tblptrh	equ	0xFF7
  6373                           tblptrl	equ	0xFF6
  6374                           tablat	equ	0xFF5
  6375                           prodh	equ	0xFF4
  6376                           prodl	equ	0xFF3
  6377                           intcon	equ	0xFF2
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           postdec1	equ	0xFE5
  6381                           fsr1l	equ	0xFE1
  6382                           indf2	equ	0xFDF
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function _Busy_eep *****************
  6388 ;; Defined at:
  6389 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;		None               void
  6396 ;; Registers used:
  6397 ;;		None
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;Total ram usage:        0 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    4
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_EEWriteDouble
  6414 ;;		_EEReadDouble
  6415 ;;		_EEWriteChar
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text38
  6420  001C10                     __ptext38:
  6421                           	opt stack 0
  6422  001C10                     _Busy_eep:
  6423                           	opt stack 22
  6424                           
  6425                           ;incstack = 0
  6426  001C10  D000               	goto	l570
  6427  001C12                     l570:
  6428  001C12  B2A6               	btfsc	4006,1,c	;volatile
  6429  001C14  D7FE               	goto	l570
  6430  001C16  0012               	return		;funcret
  6431  001C18                     __end_of_Busy_eep:
  6432                           	opt stack 0
  6433                           tblptru	equ	0xFF8
  6434                           tblptrh	equ	0xFF7
  6435                           tblptrl	equ	0xFF6
  6436                           tablat	equ	0xFF5
  6437                           prodh	equ	0xFF4
  6438                           prodl	equ	0xFF3
  6439                           intcon	equ	0xFF2
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           postdec1	equ	0xFE5
  6443                           fsr1l	equ	0xFE1
  6444                           indf2	equ	0xFDF
  6445                           fsr2h	equ	0xFDA
  6446                           fsr2l	equ	0xFD9
  6447                           status	equ	0xFD8
  6448                           
  6449 ;; *************** function _SPIReassembleDouble *****************
  6450 ;; Defined at:
  6451 ;;		line 101 in file "SPISlave.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;		None
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  dub             3   26[COMRAM] unsigned char 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  3   23[COMRAM] unsigned char 
  6458 ;; Registers used:
  6459 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6465 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;Total ram usage:        6 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    4
  6472 ;; This function calls:
  6473 ;;		Nothing
  6474 ;; This function is called by:
  6475 ;;		_main
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text39
  6480  001750                     __ptext39:
  6481                           	opt stack 0
  6482  001750                     _SPIReassembleDouble:
  6483                           	opt stack 26
  6484                           
  6485                           ;SPISlave.c: 103: double dub;
  6486                           ;SPISlave.c: 104: DoublePtr = (unsigned char*) &dub;
  6487                           
  6488                           ;incstack = 0
  6489  001750  0E1B               	movlw	low SPIReassembleDouble@dub
  6490  001752  6E3F               	movwf	_DoublePtr,c
  6491  001754  0E00               	movlw	high SPIReassembleDouble@dub
  6492  001756  6E40               	movwf	_DoublePtr+1,c
  6493                           
  6494                           ;SPISlave.c: 105: DoublePtr[0] = DoubleSPIS[0];
  6495  001758  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6496  00175C  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6497  001760  C035  FFDF         	movff	_DoubleSPIS,indf2
  6498                           
  6499                           ;SPISlave.c: 106: DoublePtr[1] = DoubleSPIS[1];
  6500  001764  EE20 F001          	lfsr	2,1
  6501  001768  503F               	movf	_DoublePtr,w,c
  6502  00176A  26D9               	addwf	fsr2l,f,c
  6503  00176C  5040               	movf	_DoublePtr+1,w,c
  6504  00176E  22DA               	addwfc	fsr2h,f,c
  6505  001770  C036  FFDF         	movff	_DoubleSPIS+1,indf2
  6506                           
  6507                           ;SPISlave.c: 107: DoublePtr[2] = DoubleSPIS[2];
  6508  001774  EE20 F002          	lfsr	2,2
  6509  001778  503F               	movf	_DoublePtr,w,c
  6510  00177A  26D9               	addwf	fsr2l,f,c
  6511  00177C  5040               	movf	_DoublePtr+1,w,c
  6512  00177E  22DA               	addwfc	fsr2h,f,c
  6513  001780  C037  FFDF         	movff	_DoubleSPIS+2,indf2
  6514                           
  6515                           ;SPISlave.c: 109: return dub;
  6516  001784  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  6517  001788  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  6518  00178C  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  6519  001790  D000               	goto	l291
  6520  001792                     l291:
  6521  001792  0012               	return		;funcret
  6522  001794                     __end_of_SPIReassembleDouble:
  6523                           	opt stack 0
  6524                           tblptru	equ	0xFF8
  6525                           tblptrh	equ	0xFF7
  6526                           tblptrl	equ	0xFF6
  6527                           tablat	equ	0xFF5
  6528                           prodh	equ	0xFF4
  6529                           prodl	equ	0xFF3
  6530                           intcon	equ	0xFF2
  6531                           postinc0	equ	0xFEE
  6532                           wreg	equ	0xFE8
  6533                           postdec1	equ	0xFE5
  6534                           fsr1l	equ	0xFE1
  6535                           indf2	equ	0xFDF
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function _SPIDisassembleDouble *****************
  6541 ;; Defined at:
  6542 ;;		line 79 in file "SPISlave.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  dub             3   25[COMRAM] unsigned char 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6556 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;Total ram usage:        3 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    5
  6563 ;; This function calls:
  6564 ;;		_GenerateChecksum
  6565 ;; This function is called by:
  6566 ;;		_main
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text40
  6571  001856                     __ptext40:
  6572                           	opt stack 0
  6573  001856                     _SPIDisassembleDouble:
  6574                           	opt stack 25
  6575                           
  6576                           ;SPISlave.c: 81: DoublePtr = (unsigned char*) &dub;
  6577                           
  6578                           ;incstack = 0
  6579  001856  0E1A               	movlw	low SPIDisassembleDouble@dub
  6580  001858  6E3F               	movwf	_DoublePtr,c
  6581  00185A  0E00               	movlw	high SPIDisassembleDouble@dub
  6582  00185C  6E40               	movwf	_DoublePtr+1,c
  6583                           
  6584                           ;SPISlave.c: 82: DoubleSPIS[0] = DoublePtr[0];
  6585  00185E  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6586  001862  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6587  001866  50DF               	movf	indf2,w,c
  6588  001868  6E35               	movwf	_DoubleSPIS,c
  6589                           
  6590                           ;SPISlave.c: 83: DoubleSPIS[1] = DoublePtr[1];
  6591  00186A  EE20 F001          	lfsr	2,1
  6592  00186E  503F               	movf	_DoublePtr,w,c
  6593  001870  26D9               	addwf	fsr2l,f,c
  6594  001872  5040               	movf	_DoublePtr+1,w,c
  6595  001874  22DA               	addwfc	fsr2h,f,c
  6596  001876  50DF               	movf	indf2,w,c
  6597  001878  6E36               	movwf	_DoubleSPIS+1,c
  6598                           
  6599                           ;SPISlave.c: 84: DoubleSPIS[2] = DoublePtr[2];
  6600  00187A  EE20 F002          	lfsr	2,2
  6601  00187E  503F               	movf	_DoublePtr,w,c
  6602  001880  26D9               	addwf	fsr2l,f,c
  6603  001882  5040               	movf	_DoublePtr+1,w,c
  6604  001884  22DA               	addwfc	fsr2h,f,c
  6605  001886  50DF               	movf	indf2,w,c
  6606  001888  6E37               	movwf	_DoubleSPIS+2,c
  6607                           
  6608                           ;SPISlave.c: 85: DoubleSPIS[3] = GenerateChecksum();
  6609  00188A  ECCA  F00B         	call	_GenerateChecksum	;wreg free
  6610  00188E  6E38               	movwf	_DoubleSPIS+3,c
  6611  001890  0012               	return		;funcret
  6612  001892                     __end_of_SPIDisassembleDouble:
  6613                           	opt stack 0
  6614                           tblptru	equ	0xFF8
  6615                           tblptrh	equ	0xFF7
  6616                           tblptrl	equ	0xFF6
  6617                           tablat	equ	0xFF5
  6618                           prodh	equ	0xFF4
  6619                           prodl	equ	0xFF3
  6620                           intcon	equ	0xFF2
  6621                           postinc0	equ	0xFEE
  6622                           wreg	equ	0xFE8
  6623                           postdec1	equ	0xFE5
  6624                           fsr1l	equ	0xFE1
  6625                           indf2	equ	0xFDF
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _GenerateChecksum *****************
  6631 ;; Defined at:
  6632 ;;		line 88 in file "SPISlave.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  y               1   24[COMRAM] unsigned char 
  6637 ;;  sum             1   23[COMRAM] unsigned char 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      unsigned char 
  6640 ;; Registers used:
  6641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;Total ram usage:        2 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    4
  6654 ;; This function calls:
  6655 ;;		Nothing
  6656 ;; This function is called by:
  6657 ;;		_SPIDisassembleDouble
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text41
  6662  001794                     __ptext41:
  6663                           	opt stack 0
  6664  001794                     _GenerateChecksum:
  6665                           	opt stack 25
  6666                           
  6667                           ;SPISlave.c: 90: if ((Command > 0x00) && (Command < 0x0A))
  6668                           
  6669                           ;incstack = 0
  6670  001794  5041               	movf	_Command,w,c
  6671  001796  B4D8               	btfsc	status,2,c
  6672  001798  D01B               	goto	l2995
  6673  00179A  0E0A               	movlw	10
  6674  00179C  6041               	cpfslt	_Command,c
  6675  00179E  D018               	goto	l2995
  6676                           
  6677                           ;SPISlave.c: 91: {
  6678                           ;SPISlave.c: 92: unsigned char y, sum = 0;
  6679  0017A0  0E00               	movlw	0
  6680  0017A2  6E18               	movwf	GenerateChecksum@sum,c
  6681                           
  6682                           ;SPISlave.c: 93: for (y = 0; y != 3; y++)
  6683  0017A4  0E00               	movlw	0
  6684  0017A6  6E19               	movwf	GenerateChecksum@y,c
  6685  0017A8                     l2979:
  6686  0017A8  0E03               	movlw	3
  6687  0017AA  1819               	xorwf	GenerateChecksum@y,w,c
  6688  0017AC  B4D8               	btfsc	status,2,c
  6689  0017AE  D00E               	goto	l2989
  6690  0017B0  D001               	goto	l2983
  6691  0017B2  D00C               	goto	l2989
  6692  0017B4                     l2983:
  6693                           
  6694                           ;SPISlave.c: 94: sum += DoubleSPIS[y];
  6695  0017B4  5019               	movf	GenerateChecksum@y,w,c
  6696  0017B6  0D01               	mullw	1
  6697  0017B8  0E35               	movlw	low _DoubleSPIS
  6698  0017BA  24F3               	addwf	prodl,w,c
  6699  0017BC  6ED9               	movwf	fsr2l,c
  6700  0017BE  0E00               	movlw	high _DoubleSPIS
  6701  0017C0  20F4               	addwfc	prodh,w,c
  6702  0017C2  6EDA               	movwf	fsr2h,c
  6703  0017C4  50DF               	movf	indf2,w,c
  6704  0017C6  2618               	addwf	GenerateChecksum@sum,f,c
  6705  0017C8  2A19               	incf	GenerateChecksum@y,f,c
  6706  0017CA  D7EE               	goto	l2979
  6707  0017CC                     l2989:
  6708                           
  6709                           ;SPISlave.c: 95: return sum;
  6710  0017CC  5018               	movf	GenerateChecksum@sum,w,c
  6711                           
  6712                           ;SPISlave.c: 96: }
  6713  0017CE  D002               	goto	l287
  6714  0017D0                     l2995:
  6715                           
  6716                           ;SPISlave.c: 97: else
  6717                           ;SPISlave.c: 98: return 0xFF;
  6718  0017D0  0EFF               	movlw	255
  6719  0017D2  D000               	goto	l287
  6720  0017D4                     l287:
  6721  0017D4  0012               	return		;funcret
  6722  0017D6                     __end_of_GenerateChecksum:
  6723                           	opt stack 0
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           fsr2h	equ	0xFDA
  6737                           fsr2l	equ	0xFD9
  6738                           status	equ	0xFD8
  6739                           
  6740 ;; *************** function _ReceiveSPI1 *****************
  6741 ;; Defined at:
  6742 ;;		line 62 in file "SPISlave.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;		None
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      unsigned char 
  6749 ;; Registers used:
  6750 ;;		wreg, status,2
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;Total ram usage:        0 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; Hardware stack levels required when called:    4
  6763 ;; This function calls:
  6764 ;;		Nothing
  6765 ;; This function is called by:
  6766 ;;		_main
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text42
  6771  001A1C                     __ptext42:
  6772                           	opt stack 0
  6773  001A1C                     _ReceiveSPI1:
  6774                           	opt stack 26
  6775                           
  6776                           ;SPISlave.c: 64: SSP1BUF = 0x00;
  6777                           
  6778                           ;incstack = 0
  6779  001A1C  0E00               	movlw	0
  6780  001A1E  6EC9               	movwf	4041,c	;volatile
  6781                           
  6782                           ;SPISlave.c: 65: PIR1bits.TMR1IF = 0;
  6783  001A20  909E               	bcf	3998,0,c	;volatile
  6784                           
  6785                           ;SPISlave.c: 66: T1CONbits.TMR1ON = 1;
  6786  001A22  80CD               	bsf	4045,0,c	;volatile
  6787                           
  6788                           ;SPISlave.c: 67: TMR1H = timer1High;
  6789  001A24  C047  FFCF         	movff	_timer1High,4047	;volatile
  6790                           
  6791                           ;SPISlave.c: 68: TMR1L = timer1Low;
  6792  001A28  C042  FFCE         	movff	_timer1Low,4046	;volatile
  6793                           
  6794                           ;SPISlave.c: 69: while (!PIR1bits.SSP1IF)
  6795  001A2C  D004               	goto	l274
  6796  001A2E                     l275:
  6797                           
  6798                           ;SPISlave.c: 70: {
  6799                           ;SPISlave.c: 71: if (PIR1bits.TMR1IF == 1)
  6800  001A2E  A09E               	btfss	3998,0,c	;volatile
  6801  001A30  D002               	goto	l274
  6802                           
  6803                           ;SPISlave.c: 72: PIR1bits.SSPIF = 1;
  6804  001A32  869E               	bsf	3998,3,c	;volatile
  6805  001A34  D000               	goto	l274
  6806  001A36                     l274:
  6807  001A36  A69E               	btfss	3998,3,c	;volatile
  6808  001A38  D7FA               	goto	l275
  6809                           
  6810                           ;SPISlave.c: 73: }
  6811                           ;SPISlave.c: 74: PIR1bits.SSP1IF = 0;
  6812  001A3A  969E               	bcf	3998,3,c	;volatile
  6813                           
  6814                           ;SPISlave.c: 75: SSP1CON1bits.SSPOV1 = 0;
  6815  001A3C  9CC6               	bcf	4038,6,c	;volatile
  6816                           
  6817                           ;SPISlave.c: 76: return SSP1BUF;
  6818  001A3E  50C9               	movf	4041,w,c	;volatile
  6819  001A40  D000               	goto	l278
  6820  001A42                     l278:
  6821  001A42  0012               	return		;funcret
  6822  001A44                     __end_of_ReceiveSPI1:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           intcon	equ	0xFF2
  6831                           postinc0	equ	0xFEE
  6832                           wreg	equ	0xFE8
  6833                           postdec1	equ	0xFE5
  6834                           fsr1l	equ	0xFE1
  6835                           indf2	equ	0xFDF
  6836                           fsr2h	equ	0xFDA
  6837                           fsr2l	equ	0xFD9
  6838                           status	equ	0xFD8
  6839                           
  6840 ;; *************** function _ImplementJSMotion *****************
  6841 ;; Defined at:
  6842 ;;		line 58 in file "MotorControl.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  JoystickValu    2   40[BANK0 ] int 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  CCPinput        2   44[BANK0 ] unsigned int 
  6847 ;; Return value:  Size  Location     Type
  6848 ;;		None               void
  6849 ;; Registers used:
  6850 ;;		wreg, status,2, status,0, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6856 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;Total ram usage:        6 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    5
  6863 ;; This function calls:
  6864 ;;		_abs
  6865 ;; This function is called by:
  6866 ;;		_main
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           	psect	text43
  6871  0009DE                     __ptext43:
  6872                           	opt stack 0
  6873  0009DE                     _ImplementJSMotion:
  6874                           	opt stack 25
  6875                           
  6876                           ;MotorControl.c: 60: unsigned int CCPinput;
  6877                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  6878                           
  6879                           ;incstack = 0
  6880  0009DE  5045               	movf	_DeadbandLow,w,c
  6881  0009E0  0100               	movlb	0	; () banked
  6882  0009E2  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6883  0009E4  0100               	movlb	0	; () banked
  6884  0009E6  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6885  0009E8  0A80               	xorlw	128
  6886  0009EA  0100               	movlb	0	; () banked
  6887  0009EC  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6888  0009EE  5046               	movf	_DeadbandLow+1,w,c
  6889  0009F0  0A80               	xorlw	128
  6890  0009F2  0100               	movlb	0	; () banked
  6891  0009F4  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6892  0009F6  B0D8               	btfsc	status,0,c
  6893  0009F8  D002               	goto	l3765
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;MotorControl.c: 62: {
  6897                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  6898  0009FA  8EB7               	bsf	4023,7,c	;volatile
  6899  0009FC  D00F               	goto	l3769
  6900  0009FE                     l3765:
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  6904  0009FE  0100               	movlb	0	; () banked
  6905  000A00  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6906  000A02  5C43               	subwf	_DeadbandHigh,w,c
  6907  000A04  5044               	movf	_DeadbandHigh+1,w,c
  6908  000A06  0A80               	xorlw	128
  6909  000A08  0100               	movlb	0	; () banked
  6910  000A0A  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6911  000A0C  0100               	movlb	0	; () banked
  6912  000A0E  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6913  000A10  0A80               	xorlw	128
  6914  000A12  0100               	movlb	0	; () banked
  6915  000A14  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6916  000A16  B0D8               	btfsc	status,0,c
  6917  000A18  D005               	goto	l3771
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;MotorControl.c: 67: {
  6921                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  6922  000A1A  9EB7               	bcf	4023,7,c	;volatile
  6923  000A1C                     l3769:
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  6927  000A1C  0E00               	movlw	0
  6928  000A1E  0100               	movlb	0	; () banked
  6929  000A20  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  6930                           
  6931                           ;MotorControl.c: 70: }
  6932  000A22  D02A               	goto	l3783
  6933  000A24                     l3771:
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  6937  000A24  0100               	movlb	0	; () banked
  6938  000A26  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6939  000A28  5C43               	subwf	_DeadbandHigh,w,c
  6940  000A2A  5044               	movf	_DeadbandHigh+1,w,c
  6941  000A2C  0A80               	xorlw	128
  6942  000A2E  0100               	movlb	0	; () banked
  6943  000A30  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6944  000A32  0100               	movlb	0	; () banked
  6945  000A34  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6946  000A36  0A80               	xorlw	128
  6947  000A38  0100               	movlb	0	; () banked
  6948  000A3A  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6949  000A3C  A0D8               	btfss	status,0,c
  6950  000A3E  D01C               	goto	l3783
  6951                           
  6952                           ; BSR set to: 0
  6953  000A40  5045               	movf	_DeadbandLow,w,c
  6954  000A42  0100               	movlb	0	; () banked
  6955  000A44  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6956  000A46  0100               	movlb	0	; () banked
  6957  000A48  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6958  000A4A  0A80               	xorlw	128
  6959  000A4C  0100               	movlb	0	; () banked
  6960  000A4E  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  6961  000A50  5046               	movf	_DeadbandLow+1,w,c
  6962  000A52  0A80               	xorlw	128
  6963  000A54  0100               	movlb	0	; () banked
  6964  000A56  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  6965  000A58  A0D8               	btfss	status,0,c
  6966  000A5A  D00E               	goto	l3783
  6967                           
  6968                           ; BSR set to: 0
  6969  000A5C  0100               	movlb	0	; () banked
  6970  000A5E  51BB               	movf	_PIDEnableFlag& (0+255),w,b
  6971  000A60  A4D8               	btfss	status,2,c
  6972  000A62  D00A               	goto	l3783
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;MotorControl.c: 72: {
  6976                           ;MotorControl.c: 73: JoystickValue = 0;
  6977  000A64  0E00               	movlw	0
  6978  000A66  0100               	movlb	0	; () banked
  6979  000A68  6F89               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  6980  000A6A  0E00               	movlw	0
  6981  000A6C  6F88               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  6982                           
  6983                           ;MotorControl.c: 74: CCPR3L = 0x00;
  6984  000A6E  0E00               	movlw	0
  6985  000A70  6EB8               	movwf	4024,c	;volatile
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  6989  000A72  9AB7               	bcf	4023,5,c	;volatile
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  6993  000A74  98B7               	bcf	4023,4,c	;volatile
  6994                           
  6995                           ; BSR set to: 0
  6996                           
  6997                           ; BSR set to: 0
  6998  000A76  D000               	goto	l3783
  6999  000A78                     l3783:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;MotorControl.c: 77: }
  7003                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  7004  000A78  5045               	movf	_DeadbandLow,w,c
  7005  000A7A  0100               	movlb	0	; () banked
  7006  000A7C  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7007  000A7E  0100               	movlb	0	; () banked
  7008  000A80  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7009  000A82  0A80               	xorlw	128
  7010  000A84  0100               	movlb	0	; () banked
  7011  000A86  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7012  000A88  5046               	movf	_DeadbandLow+1,w,c
  7013  000A8A  0A80               	xorlw	128
  7014  000A8C  0100               	movlb	0	; () banked
  7015  000A8E  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7016  000A90  A0D8               	btfss	status,0,c
  7017  000A92  D00E               	goto	l3787
  7018                           
  7019                           ; BSR set to: 0
  7020  000A94  0100               	movlb	0	; () banked
  7021  000A96  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7022  000A98  5C43               	subwf	_DeadbandHigh,w,c
  7023  000A9A  5044               	movf	_DeadbandHigh+1,w,c
  7024  000A9C  0A80               	xorlw	128
  7025  000A9E  0100               	movlb	0	; () banked
  7026  000AA0  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7027  000AA2  0100               	movlb	0	; () banked
  7028  000AA4  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7029  000AA6  0A80               	xorlw	128
  7030  000AA8  0100               	movlb	0	; () banked
  7031  000AAA  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7032  000AAC  B0D8               	btfsc	status,0,c
  7033  000AAE  D030               	goto	l109
  7034  000AB0                     l3787:
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;MotorControl.c: 80: {
  7038                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  7039  000AB0  C088  F084         	movff	ImplementJSMotion@JoystickValue,abs@a
  7040  000AB4  C089  F085         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  7041  000AB8  ECF8  F00C         	call	_abs	;wreg free
  7042  000ABC  C084  F088         	movff	?_abs,ImplementJSMotion@JoystickValue
  7043  000AC0  C085  F089         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  7044                           
  7045                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  7046  000AC4  90D8               	bcf	status,0,c
  7047  000AC6  0100               	movlb	0	; () banked
  7048  000AC8  3588               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7049  000ACA  0100               	movlb	0	; () banked
  7050  000ACC  6F8C               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  7051  000ACE  0100               	movlb	0	; () banked
  7052  000AD0  3589               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7053  000AD2  0100               	movlb	0	; () banked
  7054  000AD4  6F8D               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  7058  000AD6  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7059  000ADA  C08D  F08B         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  7060  000ADE  0100               	movlb	0	; () banked
  7061  000AE0  90D8               	bcf	status,0,c
  7062  000AE2  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7063  000AE4  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7064  000AE6  0100               	movlb	0	; () banked
  7065  000AE8  90D8               	bcf	status,0,c
  7066  000AEA  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7067  000AEC  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7068  000AEE  0100               	movlb	0	; () banked
  7069  000AF0  518A               	movf	??_ImplementJSMotion& (0+255),w,b
  7070  000AF2  6EB8               	movwf	4024,c	;volatile
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  7074  000AF4  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7075  000AF8  0E03               	movlw	3
  7076  000AFA  0100               	movlb	0	; () banked
  7077  000AFC  178A               	andwf	??_ImplementJSMotion& (0+255),f,b
  7078  000AFE  0100               	movlb	0	; () banked
  7079  000B00  3B8A               	swapf	??_ImplementJSMotion& (0+255),f,b
  7080  000B02  50B7               	movf	4023,w,c	;volatile
  7081  000B04  0100               	movlb	0	; () banked
  7082  000B06  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  7083  000B08  0BCF               	andlw	-49
  7084  000B0A  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  7085  000B0C  6EB7               	movwf	4023,c	;volatile
  7086  000B0E  D000               	goto	l109
  7087  000B10                     l109:
  7088                           
  7089                           ; BSR set to: 0
  7090  000B10  0012               	return		;funcret
  7091  000B12                     __end_of_ImplementJSMotion:
  7092                           	opt stack 0
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           postinc0	equ	0xFEE
  7101                           wreg	equ	0xFE8
  7102                           postdec1	equ	0xFE5
  7103                           fsr1l	equ	0xFE1
  7104                           indf2	equ	0xFDF
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _abs *****************
  7110 ;; Defined at:
  7111 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  a               2   36[BANK0 ] int 
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  2   36[BANK0 ] int 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7125 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;Total ram usage:        4 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    4
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		_ImplementPIDMotion
  7136 ;;		_ImplementJSMotion
  7137 ;;		_calculatePID
  7138 ;;		_ZeroMotors
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           	psect	text44
  7143  0019F0                     __ptext44:
  7144                           	opt stack 0
  7145  0019F0                     _abs:
  7146                           	opt stack 23
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;incstack = 0
  7150  0019F0  0100               	movlb	0	; () banked
  7151  0019F2  AF85               	btfss	(abs@a+1)& (0+255),7,b
  7152  0019F4  D00E               	goto	l680
  7153                           
  7154                           ; BSR set to: 0
  7155  0019F6  C084  F086         	movff	abs@a,??_abs
  7156  0019FA  C085  F087         	movff	abs@a+1,??_abs+1
  7157  0019FE  0100               	movlb	0	; () banked
  7158  001A00  1F86               	comf	??_abs& (0+255),f,b
  7159  001A02  1F87               	comf	(??_abs+1)& (0+255),f,b
  7160  001A04  4B86               	infsnz	??_abs& (0+255),f,b
  7161  001A06  2B87               	incf	(??_abs+1)& (0+255),f,b
  7162  001A08  C086  F084         	movff	??_abs,?_abs
  7163  001A0C  C087  F085         	movff	??_abs+1,?_abs+1
  7164  001A10  D004               	goto	l681
  7165  001A12                     l680:
  7166                           
  7167                           ; BSR set to: 0
  7168  001A12  C084  F084         	movff	abs@a,?_abs
  7169  001A16  C085  F085         	movff	abs@a+1,?_abs+1
  7170  001A1A                     l681:
  7171                           
  7172                           ; BSR set to: 0
  7173  001A1A  0012               	return		;funcret
  7174  001A1C                     __end_of_abs:
  7175                           	opt stack 0
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           postinc0	equ	0xFEE
  7184                           wreg	equ	0xFE8
  7185                           postdec1	equ	0xFE5
  7186                           fsr1l	equ	0xFE1
  7187                           indf2	equ	0xFDF
  7188                           fsr2h	equ	0xFDA
  7189                           fsr2l	equ	0xFD9
  7190                           status	equ	0xFD8
  7191                           
  7192 ;; *************** function _DetectMovement *****************
  7193 ;; Defined at:
  7194 ;;		line 42 in file "Joystick.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;		None
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  ADCresult       2   28[COMRAM] unsigned int 
  7199 ;;  JoystickResu    2   26[COMRAM] int 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  2   23[COMRAM] int 
  7202 ;; Registers used:
  7203 ;;		wreg, status,2, status,0
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:        7 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    4
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_main
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text45
  7224  0013FE                     __ptext45:
  7225                           	opt stack 0
  7226  0013FE                     _DetectMovement:
  7227                           	opt stack 26
  7228                           
  7229                           ;Joystick.c: 44: unsigned int ADCresult;
  7230                           ;Joystick.c: 45: int JoystickResult;
  7231                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;incstack = 0
  7235  0013FE  82C2               	bsf	4034,1,c	;volatile
  7236                           
  7237                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  7238  001400  D000               	goto	l43
  7239  001402                     l43:
  7240  001402  B2C2               	btfsc	4034,1,c	;volatile
  7241  001404  D7FE               	goto	l43
  7242                           
  7243                           ;Joystick.c: 50: ADCresult = ADRESH;
  7244  001406  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  7245  00140A  6A1E               	clrf	DetectMovement@ADCresult+1,c
  7246                           
  7247                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  7248  00140C  501D               	movf	DetectMovement@ADCresult,w,c
  7249  00140E  6E1E               	movwf	DetectMovement@ADCresult+1,c
  7250  001410  6A1D               	clrf	DetectMovement@ADCresult,c
  7251                           
  7252                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  7253  001412  501D               	movf	DetectMovement@ADCresult,w,c
  7254  001414  10C3               	iorwf	4035,w,c	;volatile
  7255  001416  6E1D               	movwf	DetectMovement@ADCresult,c
  7256  001418  501E               	movf	DetectMovement@ADCresult+1,w,c
  7257  00141A  6E1E               	movwf	DetectMovement@ADCresult+1,c
  7258                           
  7259                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  7260  00141C  0E00               	movlw	0
  7261  00141E  241D               	addwf	DetectMovement@ADCresult,w,c
  7262  001420  6E1B               	movwf	DetectMovement@JoystickResult,c
  7263  001422  0EFE               	movlw	254
  7264  001424  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  7265  001426  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  7266                           
  7267                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  7268  001428  501B               	movf	DetectMovement@JoystickResult,w,c
  7269  00142A  5C43               	subwf	_DeadbandHigh,w,c
  7270  00142C  5044               	movf	_DeadbandHigh+1,w,c
  7271  00142E  0A80               	xorlw	128
  7272  001430  6E1A               	movwf	??_DetectMovement& (0+255),c
  7273  001432  501C               	movf	DetectMovement@JoystickResult+1,w,c
  7274  001434  0A80               	xorlw	128
  7275  001436  581A               	subwfb	??_DetectMovement& (0+255),w,c
  7276  001438  A0D8               	btfss	status,0,c
  7277  00143A  D00A               	goto	l3107
  7278  00143C  5045               	movf	_DeadbandLow,w,c
  7279  00143E  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  7280  001440  501C               	movf	DetectMovement@JoystickResult+1,w,c
  7281  001442  0A80               	xorlw	128
  7282  001444  6E1A               	movwf	??_DetectMovement& (0+255),c
  7283  001446  5046               	movf	_DeadbandLow+1,w,c
  7284  001448  0A80               	xorlw	128
  7285  00144A  581A               	subwfb	??_DetectMovement& (0+255),w,c
  7286  00144C  B0D8               	btfsc	status,0,c
  7287  00144E  D008               	goto	l3115
  7288  001450                     l3107:
  7289                           
  7290                           ;Joystick.c: 56: {
  7291                           ;Joystick.c: 57: PIDEnableFlag = 0;
  7292  001450  0E00               	movlw	0
  7293  001452  0100               	movlb	0	; () banked
  7294  001454  6FBB               	movwf	_PIDEnableFlag& (0+255),b
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;Joystick.c: 58: return JoystickResult;
  7298  001456  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  7299  00145A  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;Joystick.c: 59: }
  7303                           
  7304                           ; BSR set to: 0
  7305  00145E  D005               	goto	l49
  7306  001460                     l3115:
  7307                           
  7308                           ;Joystick.c: 60: else
  7309                           ;Joystick.c: 61: return 0;
  7310  001460  0E00               	movlw	0
  7311  001462  6E19               	movwf	?_DetectMovement+1,c
  7312  001464  0E00               	movlw	0
  7313  001466  6E18               	movwf	?_DetectMovement,c
  7314  001468  D000               	goto	l49
  7315  00146A                     l49:
  7316  00146A  0012               	return		;funcret
  7317  00146C                     __end_of_DetectMovement:
  7318                           	opt stack 0
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           intcon	equ	0xFF2
  7326                           postinc0	equ	0xFEE
  7327                           wreg	equ	0xFE8
  7328                           postdec1	equ	0xFE5
  7329                           fsr1l	equ	0xFE1
  7330                           indf2	equ	0xFDF
  7331                           fsr2h	equ	0xFDA
  7332                           fsr2l	equ	0xFD9
  7333                           status	equ	0xFD8
  7334                           
  7335 ;; *************** function _DetectJoystick *****************
  7336 ;; Defined at:
  7337 ;;		line 27 in file "Joystick.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;		None
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;		None
  7342 ;; Return value:  Size  Location     Type
  7343 ;;		None               void
  7344 ;; Registers used:
  7345 ;;		wreg, status,2
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;Total ram usage:        0 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    4
  7358 ;; This function calls:
  7359 ;;		Nothing
  7360 ;; This function is called by:
  7361 ;;		_main
  7362 ;; This function uses a non-reentrant model
  7363 ;;
  7364                           
  7365                           	psect	text46
  7366  001AF8                     __ptext46:
  7367                           	opt stack 0
  7368  001AF8                     _DetectJoystick:
  7369                           	opt stack 26
  7370                           
  7371                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  7372                           
  7373                           ;incstack = 0
  7374  001AF8  B281               	btfsc	3969,1,c	;volatile
  7375  001AFA  D003               	goto	l37
  7376                           
  7377                           ;Joystick.c: 30: {
  7378                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  7379  001AFC  9480               	bcf	3968,2,c	;volatile
  7380                           
  7381                           ;Joystick.c: 32: JSEnableFlag = 0;
  7382  001AFE  0E00               	movlw	0
  7383  001B00  D008               	goto	L3
  7384  001B02                     l37:
  7385                           
  7386                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  7387  001B02  A281               	btfss	3969,1,c	;volatile
  7388  001B04  D009               	goto	l40
  7389  001B06  0100               	movlb	0	; () banked
  7390  001B08  51BA               	movf	_JSEnableFlag& (0+255),w,b
  7391  001B0A  A4D8               	btfss	status,2,c
  7392  001B0C  D005               	goto	l40
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;Joystick.c: 36: {
  7396                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  7397  001B0E  8480               	bsf	3968,2,c	;volatile
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;Joystick.c: 38: JSEnableFlag = 1;
  7401  001B10  0E01               	movlw	1
  7402  001B12                     L3:
  7403  001B12  0100               	movlb	0	; () banked
  7404  001B14  6FBA               	movwf	_JSEnableFlag& (0+255),b
  7405                           
  7406                           ; BSR set to: 0
  7407  001B16  D000               	goto	l40
  7408  001B18                     l40:
  7409  001B18  0012               	return		;funcret
  7410  001B1A                     __end_of_DetectJoystick:
  7411                           	opt stack 0
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           intcon	equ	0xFF2
  7419                           postinc0	equ	0xFEE
  7420                           wreg	equ	0xFE8
  7421                           postdec1	equ	0xFE5
  7422                           fsr1l	equ	0xFE1
  7423                           indf2	equ	0xFDF
  7424                           fsr2h	equ	0xFDA
  7425                           fsr2l	equ	0xFD9
  7426                           status	equ	0xFD8
  7427                           
  7428 ;; *************** function _ISR *****************
  7429 ;; Defined at:
  7430 ;;		line 173 in file "RTDuC.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;		None
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;		None
  7435 ;; Return value:  Size  Location     Type
  7436 ;;		None               void
  7437 ;; Registers used:
  7438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;Total ram usage:       14 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    3
  7451 ;; This function calls:
  7452 ;;		_INT0Int
  7453 ;;		_SPIInt
  7454 ;;		_TMR0Int
  7455 ;;		i2_SaveAll
  7456 ;; This function is called by:
  7457 ;;		Interrupt level 2
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	intcode
  7462  000008                     __pintcode:
  7463                           	opt stack 0
  7464  000008                     _ISR:
  7465                           	opt stack 21
  7466                           
  7467                           ;incstack = 0
  7468  000008  CFFA F00A          	movff	pclath,??_ISR
  7469  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  7470  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  7471  000014  ED2C  F009         	call	int_func,f	;refresh shadow registers
  7472                           pclatu	equ	0xFFB
  7473                           pclath	equ	0xFFA
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           postinc0	equ	0xFEE
  7482                           fsr0l	equ	0xFE9
  7483                           wreg	equ	0xFE8
  7484                           postdec1	equ	0xFE5
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           fsr2h	equ	0xFDA
  7488                           fsr2l	equ	0xFD9
  7489                           status	equ	0xFD8
  7490                           
  7491                           	psect	intcode_body
  7492  001258                     __pintcode_body:
  7493                           	opt stack 21
  7494  001258                     int_func:
  7495                           	opt stack 21
  7496  001258  0006               	pop		; remove dummy address from shadow register refresh
  7497  00125A  CFEA F00D          	movff	fsr0h,??_ISR+3
  7498  00125E  CFE1 F00E          	movff	fsr1l,??_ISR+4
  7499  001262  CFE2 F00F          	movff	fsr1h,??_ISR+5
  7500  001266  CFD9 F010          	movff	fsr2l,??_ISR+6
  7501  00126A  CFDA F011          	movff	fsr2h,??_ISR+7
  7502  00126E  CFF3 F012          	movff	prodl,??_ISR+8
  7503  001272  CFF4 F013          	movff	prodh,??_ISR+9
  7504  001276  CFF6 F014          	movff	tblptrl,??_ISR+10
  7505  00127A  CFF7 F015          	movff	tblptrh,??_ISR+11
  7506  00127E  CFF8 F016          	movff	tblptru,??_ISR+12
  7507  001282  CFF5 F017          	movff	tablat,??_ISR+13
  7508                           
  7509                           ;RTDuC.c: 175: PORTCbits.RC6 = 1;
  7510  001286  8C82               	bsf	3970,6,c	;volatile
  7511                           
  7512                           ;RTDuC.c: 176: if (PIR1bits.SSP1IF == 1)
  7513  001288  A69E               	btfss	3998,3,c	;volatile
  7514  00128A  D003               	goto	i2l3459
  7515                           
  7516                           ;RTDuC.c: 177: {
  7517                           ;RTDuC.c: 178: SPIInt();
  7518  00128C  ECD2  F00D         	call	_SPIInt	;wreg free
  7519  001290  D000               	goto	i2l3459
  7520  001292                     i2l3459:
  7521                           
  7522                           ;RTDuC.c: 179: }
  7523                           ;RTDuC.c: 181: if (INTCONbits.TMR0IF == 1)
  7524  001292  A4F2               	btfss	intcon,2,c	;volatile
  7525  001294  D003               	goto	i2l3463
  7526                           
  7527                           ;RTDuC.c: 182: {
  7528                           ;RTDuC.c: 183: TMR0Int();
  7529  001296  ECEE  F00D         	call	_TMR0Int	;wreg free
  7530  00129A  D000               	goto	i2l3463
  7531  00129C                     i2l3463:
  7532                           
  7533                           ;RTDuC.c: 184: }
  7534                           ;RTDuC.c: 186: if (INTCONbits.INT0IF == 1)
  7535  00129C  A2F2               	btfss	intcon,1,c	;volatile
  7536  00129E  D003               	goto	i2l3467
  7537                           
  7538                           ;RTDuC.c: 187: {
  7539                           ;RTDuC.c: 188: INT0Int();
  7540  0012A0  EC59  F00D         	call	_INT0Int	;wreg free
  7541  0012A4  D000               	goto	i2l3467
  7542  0012A6                     i2l3467:
  7543                           
  7544                           ;RTDuC.c: 189: }
  7545                           ;RTDuC.c: 191: if (PIR2bits.HLVDIF == 1)
  7546  0012A6  A4A1               	btfss	4001,2,c	;volatile
  7547  0012A8  D006               	goto	i2l3473
  7548                           
  7549                           ;RTDuC.c: 192: {
  7550                           ;RTDuC.c: 193: PORTAbits.RA4 = 0;
  7551  0012AA  9880               	bcf	3968,4,c	;volatile
  7552                           
  7553                           ;RTDuC.c: 194: PORTAbits.RA3 = 0;
  7554  0012AC  9680               	bcf	3968,3,c	;volatile
  7555                           
  7556                           ;RTDuC.c: 195: PORTAbits.RA2 = 0;
  7557  0012AE  9480               	bcf	3968,2,c	;volatile
  7558                           
  7559                           ;RTDuC.c: 196: SaveAll();
  7560  0012B0  EC7C  F008         	call	i2_SaveAll	;wreg free
  7561  0012B4  D000               	goto	i2l3473
  7562  0012B6                     i2l3473:
  7563                           
  7564                           ;RTDuC.c: 197: }
  7565                           ;RTDuC.c: 199: if (PIR2bits.OSCFIF == 1)
  7566  0012B6  AEA1               	btfss	4001,7,c	;volatile
  7567  0012B8  D002               	goto	i2l545
  7568  0012BA  00FF               	reset		;# 
  7569  0012BC  D000               	goto	i2l545
  7570  0012BE                     i2l545:
  7571  0012BE  C017  FFF5         	movff	??_ISR+13,tablat
  7572  0012C2  C016  FFF8         	movff	??_ISR+12,tblptru
  7573  0012C6  C015  FFF7         	movff	??_ISR+11,tblptrh
  7574  0012CA  C014  FFF6         	movff	??_ISR+10,tblptrl
  7575  0012CE  C013  FFF4         	movff	??_ISR+9,prodh
  7576  0012D2  C012  FFF3         	movff	??_ISR+8,prodl
  7577  0012D6  C011  FFDA         	movff	??_ISR+7,fsr2h
  7578  0012DA  C010  FFD9         	movff	??_ISR+6,fsr2l
  7579  0012DE  C00F  FFE2         	movff	??_ISR+5,fsr1h
  7580  0012E2  C00E  FFE1         	movff	??_ISR+4,fsr1l
  7581  0012E6  C00D  FFEA         	movff	??_ISR+3,fsr0h
  7582  0012EA  C00C  FFE9         	movff	??_ISR+2,fsr0l
  7583  0012EE  C00B  FFFB         	movff	??_ISR+1,pclatu
  7584  0012F2  C00A  FFFA         	movff	??_ISR,pclath
  7585  0012F6  0011               	retfie		f
  7586  0012F8                     __end_of_ISR:
  7587                           	opt stack 0
  7588                           pclatu	equ	0xFFB
  7589                           pclath	equ	0xFFA
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon	equ	0xFF2
  7597                           postinc0	equ	0xFEE
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           postdec1	equ	0xFE5
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           fsr2h	equ	0xFDA
  7606                           fsr2l	equ	0xFD9
  7607                           status	equ	0xFD8
  7608                           
  7609 ;; *************** function i2_SaveAll *****************
  7610 ;; Defined at:
  7611 ;;		line 150 in file "EEPROM.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;		None
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;		None
  7616 ;; Return value:  Size  Location     Type
  7617 ;;		None               void
  7618 ;; Registers used:
  7619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;Total ram usage:        0 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:    2
  7632 ;; This function calls:
  7633 ;;		i2_EEWriteChar
  7634 ;;		i2_EEWriteDouble
  7635 ;; This function is called by:
  7636 ;;		_ISR
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text48
  7641  0010F8                     __ptext48:
  7642                           	opt stack 0
  7643  0010F8                     i2_SaveAll:
  7644                           	opt stack 21
  7645                           
  7646                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  7647                           
  7648                           ;incstack = 0
  7649  0010F8  C03C  F005         	movff	_SetAngle,i2EEWriteDouble@dub
  7650  0010FC  C03D  F006         	movff	_SetAngle+1,i2EEWriteDouble@dub+1
  7651  001100  C03E  F007         	movff	_SetAngle+2,i2EEWriteDouble@dub+2
  7652  001104  0E00               	movlw	0
  7653  001106  EC12  F00B         	call	i2_EEWriteDouble
  7654                           
  7655                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  7656  00110A  C0AC  F005         	movff	_Kp,i2EEWriteDouble@dub
  7657  00110E  C0AD  F006         	movff	_Kp+1,i2EEWriteDouble@dub+1
  7658  001112  C0AE  F007         	movff	_Kp+2,i2EEWriteDouble@dub+2
  7659  001116  0E03               	movlw	3
  7660  001118  EC12  F00B         	call	i2_EEWriteDouble
  7661                           
  7662                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  7663  00111C  C0A9  F005         	movff	_Ki,i2EEWriteDouble@dub
  7664  001120  C0AA  F006         	movff	_Ki+1,i2EEWriteDouble@dub+1
  7665  001124  C0AB  F007         	movff	_Ki+2,i2EEWriteDouble@dub+2
  7666  001128  0E06               	movlw	6
  7667  00112A  EC12  F00B         	call	i2_EEWriteDouble
  7668                           
  7669                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  7670  00112E  C0A6  F005         	movff	_Kd,i2EEWriteDouble@dub
  7671  001132  C0A7  F006         	movff	_Kd+1,i2EEWriteDouble@dub+1
  7672  001136  C0A8  F007         	movff	_Kd+2,i2EEWriteDouble@dub+2
  7673  00113A  0E09               	movlw	9
  7674  00113C  EC12  F00B         	call	i2_EEWriteDouble
  7675                           
  7676                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  7677  001140  CF80 F005          	movff	3968,i2EEWriteChar@ch	;volatile
  7678  001144  0E0C               	movlw	12
  7679  001146  EC8D  F00D         	call	i2_EEWriteChar
  7680                           
  7681                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  7682  00114A  CF81 F005          	movff	3969,i2EEWriteChar@ch	;volatile
  7683  00114E  0E0D               	movlw	13
  7684  001150  EC8D  F00D         	call	i2_EEWriteChar
  7685                           
  7686                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  7687  001154  CF82 F005          	movff	3970,i2EEWriteChar@ch	;volatile
  7688  001158  0E0E               	movlw	14
  7689  00115A  EC8D  F00D         	call	i2_EEWriteChar
  7690                           
  7691                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  7692  00115E  CF83 F005          	movff	3971,i2EEWriteChar@ch	;volatile
  7693  001162  0E0F               	movlw	15
  7694  001164  EC8D  F00D         	call	i2_EEWriteChar
  7695                           
  7696                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  7697  001168  CF84 F005          	movff	3972,i2EEWriteChar@ch	;volatile
  7698  00116C  0E10               	movlw	16
  7699  00116E  EC8D  F00D         	call	i2_EEWriteChar
  7700                           
  7701                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  7702  001172  CF85 F005          	movff	3973,i2EEWriteChar@ch	;volatile
  7703  001176  0E11               	movlw	17
  7704  001178  EC8D  F00D         	call	i2_EEWriteChar
  7705                           
  7706                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  7707  00117C  CF86 F005          	movff	3974,i2EEWriteChar@ch	;volatile
  7708  001180  0E12               	movlw	18
  7709  001182  EC8D  F00D         	call	i2_EEWriteChar
  7710                           
  7711                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  7712  001186  CF87 F005          	movff	3975,i2EEWriteChar@ch	;volatile
  7713  00118A  0E13               	movlw	19
  7714  00118C  EC8D  F00D         	call	i2_EEWriteChar
  7715                           
  7716                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  7717  001190  CF88 F005          	movff	3976,i2EEWriteChar@ch	;volatile
  7718  001194  0E14               	movlw	20
  7719  001196  EC8D  F00D         	call	i2_EEWriteChar
  7720                           
  7721                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  7722  00119A  C0BB  F005         	movff	_PIDEnableFlag,i2EEWriteChar@ch
  7723  00119E  0E15               	movlw	21
  7724  0011A0  EC8D  F00D         	call	i2_EEWriteChar
  7725                           
  7726                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  7727  0011A4  0E01               	movlw	1
  7728  0011A6  6E05               	movwf	i2EEWriteChar@ch,c
  7729  0011A8  0E16               	movlw	22
  7730  0011AA  EC8D  F00D         	call	i2_EEWriteChar
  7731  0011AE  0012               	return		;funcret
  7732  0011B0                     __end_ofi2_SaveAll:
  7733                           	opt stack 0
  7734                           pclatu	equ	0xFFB
  7735                           pclath	equ	0xFFA
  7736                           tblptru	equ	0xFF8
  7737                           tblptrh	equ	0xFF7
  7738                           tblptrl	equ	0xFF6
  7739                           tablat	equ	0xFF5
  7740                           prodh	equ	0xFF4
  7741                           prodl	equ	0xFF3
  7742                           intcon	equ	0xFF2
  7743                           postinc0	equ	0xFEE
  7744                           fsr0h	equ	0xFEA
  7745                           fsr0l	equ	0xFE9
  7746                           wreg	equ	0xFE8
  7747                           postdec1	equ	0xFE5
  7748                           fsr1h	equ	0xFE2
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function i2_EEWriteDouble *****************
  7756 ;; Defined at:
  7757 ;;		line 77 in file "EEPROM.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  location        1    wreg     unsigned char 
  7760 ;;  dub             3    4[COMRAM] unsigned char 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  location        1    7[COMRAM] unsigned char 
  7763 ;;  EEWriteDoubl    1    8[COMRAM] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;		None               void
  7766 ;; Registers used:
  7767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7773 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;Total ram usage:        5 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    1
  7780 ;; This function calls:
  7781 ;;		i2_Busy_eep
  7782 ;;		i2_EEDisassembleDouble
  7783 ;;		i2_Write_b_eep
  7784 ;; This function is called by:
  7785 ;;		i2_SaveAll
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           	psect	text49
  7790  001624                     __ptext49:
  7791                           	opt stack 0
  7792  001624                     i2_EEWriteDouble:
  7793                           	opt stack 21
  7794                           
  7795                           ;incstack = 0
  7796                           ;i2EEWriteDouble@location stored from wreg
  7797  001624  6E08               	movwf	i2EEWriteDouble@location,c
  7798                           
  7799                           ;EEPROM.c: 79: unsigned char x;
  7800                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  7801  001626  C005  F001         	movff	i2EEWriteDouble@dub,i2EEDisassembleDouble@dub
  7802  00162A  C006  F002         	movff	i2EEWriteDouble@dub+1,i2EEDisassembleDouble@dub+1
  7803  00162E  C007  F003         	movff	i2EEWriteDouble@dub+2,i2EEDisassembleDouble@dub+2
  7804  001632  EC80  F00C         	call	i2_EEDisassembleDouble	;wreg free
  7805                           
  7806                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  7807  001636  50F2               	movf	intcon,w,c	;volatile
  7808  001638  0B3F               	andlw	63
  7809  00163A  6EF2               	movwf	intcon,c	;volatile
  7810                           
  7811                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  7812  00163C  0E00               	movlw	0
  7813  00163E  6E09               	movwf	i2EEWriteDouble@x,c
  7814  001640                     i2l3061:
  7815  001640  0E02               	movlw	2
  7816  001642  6409               	cpfsgt	i2EEWriteDouble@x,c
  7817  001644  D001               	goto	i2l3065
  7818  001646  D014               	goto	i2l3075
  7819  001648                     i2l3065:
  7820                           
  7821                           ;EEPROM.c: 86: {
  7822                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  7823  001648  C008  F001         	movff	i2EEWriteDouble@location,i2Write_b_eep@badd
  7824  00164C  6A02               	clrf	i2Write_b_eep@badd+1,c
  7825  00164E  5009               	movf	i2EEWriteDouble@x,w,c
  7826  001650  0D01               	mullw	1
  7827  001652  0E39               	movlw	low _DDouble
  7828  001654  24F3               	addwf	prodl,w,c
  7829  001656  6ED9               	movwf	fsr2l,c
  7830  001658  0E00               	movlw	high _DDouble
  7831  00165A  20F4               	addwfc	prodh,w,c
  7832  00165C  6EDA               	movwf	fsr2h,c
  7833  00165E  50DF               	movf	indf2,w,c
  7834  001660  6E03               	movwf	i2Write_b_eep@bdat,c
  7835  001662  EC0B  F00C         	call	i2_Write_b_eep	;wreg free
  7836                           
  7837                           ;EEPROM.c: 88: location++;
  7838  001666  2A08               	incf	i2EEWriteDouble@location,f,c
  7839                           
  7840                           ;EEPROM.c: 89: Busy_eep();
  7841  001668  EC0C  F00E         	call	i2_Busy_eep	;wreg free
  7842  00166C  2A09               	incf	i2EEWriteDouble@x,f,c
  7843  00166E  D7E8               	goto	i2l3061
  7844  001670                     i2l3075:
  7845                           
  7846                           ;EEPROM.c: 90: }
  7847                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7848  001670  50F2               	movf	intcon,w,c	;volatile
  7849  001672  09C0               	iorlw	192
  7850  001674  6EF2               	movwf	intcon,c	;volatile
  7851  001676  0012               	return		;funcret
  7852  001678                     __end_ofi2_EEWriteDouble:
  7853                           	opt stack 0
  7854                           pclatu	equ	0xFFB
  7855                           pclath	equ	0xFFA
  7856                           tblptru	equ	0xFF8
  7857                           tblptrh	equ	0xFF7
  7858                           tblptrl	equ	0xFF6
  7859                           tablat	equ	0xFF5
  7860                           prodh	equ	0xFF4
  7861                           prodl	equ	0xFF3
  7862                           intcon	equ	0xFF2
  7863                           postinc0	equ	0xFEE
  7864                           fsr0h	equ	0xFEA
  7865                           fsr0l	equ	0xFE9
  7866                           wreg	equ	0xFE8
  7867                           postdec1	equ	0xFE5
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function i2_EEDisassembleDouble *****************
  7876 ;; Defined at:
  7877 ;;		line 48 in file "EEPROM.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  dub             3    0[COMRAM] unsigned char 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;		None
  7882 ;; Return value:  Size  Location     Type
  7883 ;;		None               void
  7884 ;; Registers used:
  7885 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7891 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;Total ram usage:        3 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		i2_EEWriteDouble
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text50
  7905  001900                     __ptext50:
  7906                           	opt stack 0
  7907  001900                     i2_EEDisassembleDouble:
  7908                           	opt stack 21
  7909                           
  7910                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7911                           
  7912                           ;incstack = 0
  7913  001900  0E01               	movlw	low i2EEDisassembleDouble@dub
  7914  001902  6E3F               	movwf	_DoublePtr,c
  7915  001904  0E00               	movlw	high i2EEDisassembleDouble@dub
  7916  001906  6E40               	movwf	_DoublePtr+1,c
  7917                           
  7918                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7919  001908  C03F  FFD9         	movff	_DoublePtr,fsr2l
  7920  00190C  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  7921  001910  50DF               	movf	indf2,w,c
  7922  001912  6E39               	movwf	_DDouble,c
  7923                           
  7924                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7925  001914  EE20 F001          	lfsr	2,1
  7926  001918  503F               	movf	_DoublePtr,w,c
  7927  00191A  26D9               	addwf	fsr2l,f,c
  7928  00191C  5040               	movf	_DoublePtr+1,w,c
  7929  00191E  22DA               	addwfc	fsr2h,f,c
  7930  001920  50DF               	movf	indf2,w,c
  7931  001922  6E3A               	movwf	_DDouble+1,c
  7932                           
  7933                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7934  001924  EE20 F002          	lfsr	2,2
  7935  001928  503F               	movf	_DoublePtr,w,c
  7936  00192A  26D9               	addwf	fsr2l,f,c
  7937  00192C  5040               	movf	_DoublePtr+1,w,c
  7938  00192E  22DA               	addwfc	fsr2h,f,c
  7939  001930  50DF               	movf	indf2,w,c
  7940  001932  6E3B               	movwf	_DDouble+2,c
  7941  001934  0012               	return		;funcret
  7942  001936                     __end_ofi2_EEDisassembleDouble:
  7943                           	opt stack 0
  7944                           pclatu	equ	0xFFB
  7945                           pclath	equ	0xFFA
  7946                           tblptru	equ	0xFF8
  7947                           tblptrh	equ	0xFF7
  7948                           tblptrl	equ	0xFF6
  7949                           tablat	equ	0xFF5
  7950                           prodh	equ	0xFF4
  7951                           prodl	equ	0xFF3
  7952                           intcon	equ	0xFF2
  7953                           postinc0	equ	0xFEE
  7954                           fsr0h	equ	0xFEA
  7955                           fsr0l	equ	0xFE9
  7956                           wreg	equ	0xFE8
  7957                           postdec1	equ	0xFE5
  7958                           fsr1h	equ	0xFE2
  7959                           fsr1l	equ	0xFE1
  7960                           indf2	equ	0xFDF
  7961                           fsr2h	equ	0xFDA
  7962                           fsr2l	equ	0xFD9
  7963                           status	equ	0xFD8
  7964                           
  7965 ;; *************** function i2_EEWriteChar *****************
  7966 ;; Defined at:
  7967 ;;		line 122 in file "EEPROM.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  location        1    wreg     unsigned char 
  7970 ;;  ch              1    4[COMRAM] unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  location        1    5[COMRAM] unsigned char 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;		None               void
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0, cstack
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7982 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7986 ;;Total ram usage:        2 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    1
  7989 ;; This function calls:
  7990 ;;		i2_Busy_eep
  7991 ;;		i2_Write_b_eep
  7992 ;; This function is called by:
  7993 ;;		i2_SaveAll
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           	psect	text51
  7998  001B1A                     __ptext51:
  7999                           	opt stack 0
  8000  001B1A                     i2_EEWriteChar:
  8001                           	opt stack 21
  8002                           
  8003                           ;incstack = 0
  8004                           ;i2EEWriteChar@location stored from wreg
  8005  001B1A  6E06               	movwf	i2EEWriteChar@location,c
  8006                           
  8007                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  8008  001B1C  50F2               	movf	intcon,w,c	;volatile
  8009  001B1E  0B3F               	andlw	63
  8010  001B20  6EF2               	movwf	intcon,c	;volatile
  8011                           
  8012                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  8013  001B22  C006  F001         	movff	i2EEWriteChar@location,i2Write_b_eep@badd
  8014  001B26  6A02               	clrf	i2Write_b_eep@badd+1,c
  8015  001B28  C005  F003         	movff	i2EEWriteChar@ch,i2Write_b_eep@bdat
  8016  001B2C  EC0B  F00C         	call	i2_Write_b_eep	;wreg free
  8017                           
  8018                           ;EEPROM.c: 127: Busy_eep();
  8019  001B30  EC0C  F00E         	call	i2_Busy_eep	;wreg free
  8020                           
  8021                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  8022  001B34  50F2               	movf	intcon,w,c	;volatile
  8023  001B36  09C0               	iorlw	192
  8024  001B38  6EF2               	movwf	intcon,c	;volatile
  8025  001B3A  0012               	return		;funcret
  8026  001B3C                     __end_ofi2_EEWriteChar:
  8027                           	opt stack 0
  8028                           pclatu	equ	0xFFB
  8029                           pclath	equ	0xFFA
  8030                           tblptru	equ	0xFF8
  8031                           tblptrh	equ	0xFF7
  8032                           tblptrl	equ	0xFF6
  8033                           tablat	equ	0xFF5
  8034                           prodh	equ	0xFF4
  8035                           prodl	equ	0xFF3
  8036                           intcon	equ	0xFF2
  8037                           postinc0	equ	0xFEE
  8038                           fsr0h	equ	0xFEA
  8039                           fsr0l	equ	0xFE9
  8040                           wreg	equ	0xFE8
  8041                           postdec1	equ	0xFE5
  8042                           fsr1h	equ	0xFE2
  8043                           fsr1l	equ	0xFE1
  8044                           indf2	equ	0xFDF
  8045                           fsr2h	equ	0xFDA
  8046                           fsr2l	equ	0xFD9
  8047                           status	equ	0xFD8
  8048                           
  8049 ;; *************** function i2_Write_b_eep *****************
  8050 ;; Defined at:
  8051 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;  badd            2    0[COMRAM] unsigned int 
  8054 ;;  bdat            1    2[COMRAM] unsigned char 
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  Write_b_eep     1    3[COMRAM] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;		None               void
  8059 ;; Registers used:
  8060 ;;		wreg, status,2, status,0
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8066 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8069 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8070 ;;Total ram usage:        4 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; This function calls:
  8073 ;;		Nothing
  8074 ;; This function is called by:
  8075 ;;		i2_EEWriteDouble
  8076 ;;		i2_EEWriteChar
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text52
  8081  001816                     __ptext52:
  8082                           	opt stack 0
  8083  001816                     i2_Write_b_eep:
  8084                           	opt stack 21
  8085                           
  8086                           ;incstack = 0
  8087  001816  0E00               	movlw	0
  8088  001818  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  8089  00181A  5002               	movf	i2Write_b_eep@badd+1,w,c
  8090  00181C  0B03               	andlw	3
  8091  00181E  6EAA               	movwf	4010,c	;volatile
  8092  001820  C001  FFA9         	movff	i2Write_b_eep@badd,4009	;volatile
  8093  001824  C003  FFA8         	movff	i2Write_b_eep@bdat,4008	;volatile
  8094  001828  9EA6               	bcf	4006,7,c	;volatile
  8095  00182A  9CA6               	bcf	4006,6,c	;volatile
  8096  00182C  84A6               	bsf	4006,2,c	;volatile
  8097  00182E  0E00               	movlw	0
  8098  001830  BEF2               	btfsc	intcon,7,c	;volatile
  8099  001832  0E01               	movlw	1
  8100  001834  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  8101  001836  9EF2               	bcf	intcon,7,c	;volatile
  8102  001838  0E55               	movlw	85
  8103  00183A  6EA7               	movwf	4007,c	;volatile
  8104  00183C  0EAA               	movlw	170
  8105  00183E  6EA7               	movwf	4007,c	;volatile
  8106  001840  82A6               	bsf	4006,1,c	;volatile
  8107  001842  D000               	goto	i2l601
  8108  001844                     i2l601:
  8109  001844  B2A6               	btfsc	4006,1,c	;volatile
  8110  001846  D7FE               	goto	i2l601
  8111  001848  B004               	btfsc	i2Write_b_eep@GIE_BIT_VAL,0,c
  8112  00184A  D002               	bra	i2u216_45
  8113  00184C  9EF2               	bcf	intcon,7,c	;volatile
  8114  00184E  D001               	bra	i2u216_46
  8115  001850                     i2u216_45:
  8116  001850  8EF2               	bsf	intcon,7,c	;volatile
  8117  001852                     i2u216_46:
  8118  001852  94A6               	bcf	4006,2,c	;volatile
  8119  001854  0012               	return		;funcret
  8120  001856                     __end_ofi2_Write_b_eep:
  8121                           	opt stack 0
  8122                           pclatu	equ	0xFFB
  8123                           pclath	equ	0xFFA
  8124                           tblptru	equ	0xFF8
  8125                           tblptrh	equ	0xFF7
  8126                           tblptrl	equ	0xFF6
  8127                           tablat	equ	0xFF5
  8128                           prodh	equ	0xFF4
  8129                           prodl	equ	0xFF3
  8130                           intcon	equ	0xFF2
  8131                           postinc0	equ	0xFEE
  8132                           fsr0h	equ	0xFEA
  8133                           fsr0l	equ	0xFE9
  8134                           wreg	equ	0xFE8
  8135                           postdec1	equ	0xFE5
  8136                           fsr1h	equ	0xFE2
  8137                           fsr1l	equ	0xFE1
  8138                           indf2	equ	0xFDF
  8139                           fsr2h	equ	0xFDA
  8140                           fsr2l	equ	0xFD9
  8141                           status	equ	0xFD8
  8142                           
  8143 ;; *************** function i2_Busy_eep *****************
  8144 ;; Defined at:
  8145 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;		None
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;		None
  8150 ;; Return value:  Size  Location     Type
  8151 ;;		None               void
  8152 ;; Registers used:
  8153 ;;		None
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;Total ram usage:        0 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; This function calls:
  8166 ;;		Nothing
  8167 ;; This function is called by:
  8168 ;;		i2_EEWriteDouble
  8169 ;;		i2_EEWriteChar
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text53
  8174  001C18                     __ptext53:
  8175                           	opt stack 0
  8176  001C18                     i2_Busy_eep:
  8177                           	opt stack 21
  8178                           
  8179                           ;incstack = 0
  8180  001C18  D000               	goto	i2l570
  8181  001C1A                     i2l570:
  8182  001C1A  B2A6               	btfsc	4006,1,c	;volatile
  8183  001C1C  D7FE               	goto	i2l570
  8184  001C1E  0012               	return		;funcret
  8185  001C20                     __end_ofi2_Busy_eep:
  8186                           	opt stack 0
  8187                           pclatu	equ	0xFFB
  8188                           pclath	equ	0xFFA
  8189                           tblptru	equ	0xFF8
  8190                           tblptrh	equ	0xFF7
  8191                           tblptrl	equ	0xFF6
  8192                           tablat	equ	0xFF5
  8193                           prodh	equ	0xFF4
  8194                           prodl	equ	0xFF3
  8195                           intcon	equ	0xFF2
  8196                           postinc0	equ	0xFEE
  8197                           fsr0h	equ	0xFEA
  8198                           fsr0l	equ	0xFE9
  8199                           wreg	equ	0xFE8
  8200                           postdec1	equ	0xFE5
  8201                           fsr1h	equ	0xFE2
  8202                           fsr1l	equ	0xFE1
  8203                           indf2	equ	0xFDF
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _TMR0Int *****************
  8209 ;; Defined at:
  8210 ;;		line 59 in file "PID.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;		None
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;		None
  8215 ;; Return value:  Size  Location     Type
  8216 ;;		None               void
  8217 ;; Registers used:
  8218 ;;		wreg, status,2
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;Total ram usage:        0 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; This function calls:
  8231 ;;		Nothing
  8232 ;; This function is called by:
  8233 ;;		_ISR
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           	psect	text54
  8238  001BDC                     __ptext54:
  8239                           	opt stack 0
  8240  001BDC                     _TMR0Int:
  8241                           	opt stack 23
  8242                           
  8243                           ;PID.c: 61: TMR0H = 0xDB;
  8244                           
  8245                           ;incstack = 0
  8246  001BDC  0EDB               	movlw	219
  8247  001BDE  6ED7               	movwf	4055,c	;volatile
  8248                           
  8249                           ;PID.c: 62: TMR0L = 0x60;
  8250  001BE0  0E60               	movlw	96
  8251  001BE2  6ED6               	movwf	4054,c	;volatile
  8252                           
  8253                           ;PID.c: 63: TMR0Flag = 1;
  8254  001BE4  0E01               	movlw	1
  8255  001BE6  0100               	movlb	0	; () banked
  8256  001BE8  6FBD               	movwf	_TMR0Flag& (0+255),b
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;PID.c: 64: INTCONbits.TMR0IF = 0;
  8260  001BEA  94F2               	bcf	intcon,2,c	;volatile
  8261                           
  8262                           ; BSR set to: 0
  8263  001BEC  0012               	return		;funcret
  8264  001BEE                     __end_of_TMR0Int:
  8265                           	opt stack 0
  8266                           pclatu	equ	0xFFB
  8267                           pclath	equ	0xFFA
  8268                           tblptru	equ	0xFF8
  8269                           tblptrh	equ	0xFF7
  8270                           tblptrl	equ	0xFF6
  8271                           tablat	equ	0xFF5
  8272                           prodh	equ	0xFF4
  8273                           prodl	equ	0xFF3
  8274                           intcon	equ	0xFF2
  8275                           postinc0	equ	0xFEE
  8276                           fsr0h	equ	0xFEA
  8277                           fsr0l	equ	0xFE9
  8278                           wreg	equ	0xFE8
  8279                           postdec1	equ	0xFE5
  8280                           fsr1h	equ	0xFE2
  8281                           fsr1l	equ	0xFE1
  8282                           indf2	equ	0xFDF
  8283                           fsr2h	equ	0xFDA
  8284                           fsr2l	equ	0xFD9
  8285                           status	equ	0xFD8
  8286                           
  8287 ;; *************** function _SPIInt *****************
  8288 ;; Defined at:
  8289 ;;		line 30 in file "SPISlave.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;		None
  8294 ;; Return value:  Size  Location     Type
  8295 ;;		None               void
  8296 ;; Registers used:
  8297 ;;		wreg, status,2
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;Total ram usage:        0 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; This function calls:
  8310 ;;		Nothing
  8311 ;; This function is called by:
  8312 ;;		_ISR
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text55
  8317  001BA4                     __ptext55:
  8318                           	opt stack 0
  8319  001BA4                     _SPIInt:
  8320                           	opt stack 23
  8321                           
  8322                           ;SPISlave.c: 32: PORTCbits.RC6 = 1;
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;incstack = 0
  8326  001BA4  8C82               	bsf	3970,6,c	;volatile
  8327                           
  8328                           ;SPISlave.c: 33: INTCONbits.GIE = 0;
  8329  001BA6  9EF2               	bcf	intcon,7,c	;volatile
  8330                           
  8331                           ;SPISlave.c: 34: Command = SSP1BUF;
  8332  001BA8  CFC9 F041          	movff	4041,_Command	;volatile
  8333                           
  8334                           ;SPISlave.c: 35: PIR1bits.SSP1IF = 0;
  8335  001BAC  969E               	bcf	3998,3,c	;volatile
  8336                           
  8337                           ;SPISlave.c: 36: PIE1bits.SSP1IE = 0;
  8338  001BAE  969D               	bcf	3997,3,c	;volatile
  8339                           
  8340                           ;SPISlave.c: 37: SPIflag = 1;
  8341  001BB0  0E01               	movlw	1
  8342  001BB2  0100               	movlb	0	; () banked
  8343  001BB4  6FBC               	movwf	_SPIflag& (0+255),b
  8344                           
  8345                           ; BSR set to: 0
  8346  001BB6  0012               	return		;funcret
  8347  001BB8                     __end_of_SPIInt:
  8348                           	opt stack 0
  8349                           pclatu	equ	0xFFB
  8350                           pclath	equ	0xFFA
  8351                           tblptru	equ	0xFF8
  8352                           tblptrh	equ	0xFF7
  8353                           tblptrl	equ	0xFF6
  8354                           tablat	equ	0xFF5
  8355                           prodh	equ	0xFF4
  8356                           prodl	equ	0xFF3
  8357                           intcon	equ	0xFF2
  8358                           postinc0	equ	0xFEE
  8359                           fsr0h	equ	0xFEA
  8360                           fsr0l	equ	0xFE9
  8361                           wreg	equ	0xFE8
  8362                           postdec1	equ	0xFE5
  8363                           fsr1h	equ	0xFE2
  8364                           fsr1l	equ	0xFE1
  8365                           indf2	equ	0xFDF
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function _INT0Int *****************
  8371 ;; Defined at:
  8372 ;;		line 217 in file "RTDuC.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;		None
  8377 ;; Return value:  Size  Location     Type
  8378 ;;		None               void
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;Total ram usage:        0 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    1
  8393 ;; This function calls:
  8394 ;;		_KillMotors
  8395 ;; This function is called by:
  8396 ;;		_ISR
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           	psect	text56
  8401  001AB2                     __ptext56:
  8402                           	opt stack 0
  8403  001AB2                     _INT0Int:
  8404                           	opt stack 22
  8405                           
  8406                           ;RTDuC.c: 219: KillMotors();
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;incstack = 0
  8410  001AB2  EC03  F00E         	call	_KillMotors	;wreg free
  8411                           
  8412                           ;RTDuC.c: 220: PORTAbits.RA3 = 0;
  8413  001AB6  9680               	bcf	3968,3,c	;volatile
  8414                           
  8415                           ;RTDuC.c: 221: T0CONbits.TMR0ON = 1;
  8416  001AB8  8ED5               	bsf	4053,7,c	;volatile
  8417                           
  8418                           ;RTDuC.c: 222: INTCONbits.GIE = 0;
  8419  001ABA  9EF2               	bcf	intcon,7,c	;volatile
  8420                           
  8421                           ;RTDuC.c: 223: PORTAbits.RA4 = 1;
  8422  001ABC  8880               	bsf	3968,4,c	;volatile
  8423  001ABE  D000               	goto	i2l2141
  8424  001AC0                     i2l2141:
  8425                           
  8426                           ;RTDuC.c: 225: {
  8427                           ;RTDuC.c: 226: TMR0H = 0x00;
  8428  001AC0  0E00               	movlw	0
  8429  001AC2  6ED7               	movwf	4055,c	;volatile
  8430                           
  8431                           ;RTDuC.c: 227: TMR0L = 0x00;
  8432  001AC4  0E00               	movlw	0
  8433  001AC6  6ED6               	movwf	4054,c	;volatile
  8434                           
  8435                           ;RTDuC.c: 228: while (!INTCONbits.TMR0IF);
  8436  001AC8  D000               	goto	i2l549
  8437  001ACA                     i2l549:
  8438  001ACA  A4F2               	btfss	intcon,2,c	;volatile
  8439  001ACC  D7FE               	goto	i2l549
  8440                           
  8441                           ;RTDuC.c: 229: INTCONbits.TMR0IF = 0;
  8442  001ACE  94F2               	bcf	intcon,2,c	;volatile
  8443                           
  8444                           ;RTDuC.c: 230: ~PORTAbits.RA4;
  8445  001AD0  5080               	movf	3968,w,c	;volatile
  8446  001AD2  D7F6               	goto	i2l2141
  8447  001AD4  0012               	return		;funcret
  8448  001AD6                     __end_of_INT0Int:
  8449                           	opt stack 0
  8450                           pclatu	equ	0xFFB
  8451                           pclath	equ	0xFFA
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodh	equ	0xFF4
  8457                           prodl	equ	0xFF3
  8458                           intcon	equ	0xFF2
  8459                           postinc0	equ	0xFEE
  8460                           fsr0h	equ	0xFEA
  8461                           fsr0l	equ	0xFE9
  8462                           wreg	equ	0xFE8
  8463                           postdec1	equ	0xFE5
  8464                           fsr1h	equ	0xFE2
  8465                           fsr1l	equ	0xFE1
  8466                           indf2	equ	0xFDF
  8467                           fsr2h	equ	0xFDA
  8468                           fsr2l	equ	0xFD9
  8469                           status	equ	0xFD8
  8470                           
  8471 ;; *************** function _KillMotors *****************
  8472 ;; Defined at:
  8473 ;;		line 28 in file "MotorControl.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;		None
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;		None
  8478 ;; Return value:  Size  Location     Type
  8479 ;;		None               void
  8480 ;; Registers used:
  8481 ;;		wreg, status,2, status,0
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;Total ram usage:        0 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		_INT0Int
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text57
  8501  001C06                     __ptext57:
  8502                           	opt stack 0
  8503  001C06                     _KillMotors:
  8504                           	opt stack 22
  8505                           
  8506                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  8507                           
  8508                           ;incstack = 0
  8509  001C06  8880               	bsf	3968,4,c	;volatile
  8510                           
  8511                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  8512  001C08  50B7               	movf	4023,w,c	;volatile
  8513  001C0A  0BF0               	andlw	240
  8514  001C0C  6EB7               	movwf	4023,c	;volatile
  8515  001C0E  0012               	return		;funcret
  8516  001C10                     __end_of_KillMotors:
  8517                           	opt stack 0
  8518  0000                     pclatu	equ	0xFFB
  8519                           pclath	equ	0xFFA
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           postinc0	equ	0xFEE
  8528                           fsr0h	equ	0xFEA
  8529                           fsr0l	equ	0xFE9
  8530                           wreg	equ	0xFE8
  8531                           postdec1	equ	0xFE5
  8532                           fsr1h	equ	0xFE2
  8533                           fsr1l	equ	0xFE1
  8534                           indf2	equ	0xFDF
  8535                           fsr2h	equ	0xFDA
  8536                           fsr2l	equ	0xFD9
  8537                           status	equ	0xFD8
  8538                           pclatu	equ	0xFFB
  8539                           pclath	equ	0xFFA
  8540                           tblptru	equ	0xFF8
  8541                           tblptrh	equ	0xFF7
  8542                           tblptrl	equ	0xFF6
  8543                           tablat	equ	0xFF5
  8544                           prodh	equ	0xFF4
  8545                           prodl	equ	0xFF3
  8546                           intcon	equ	0xFF2
  8547                           postinc0	equ	0xFEE
  8548                           fsr0h	equ	0xFEA
  8549                           fsr0l	equ	0xFE9
  8550                           wreg	equ	0xFE8
  8551                           postdec1	equ	0xFE5
  8552                           fsr1h	equ	0xFE2
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559                           	psect	rparam
  8560  0000                     pclatu	equ	0xFFB
  8561                           pclath	equ	0xFFA
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           postinc0	equ	0xFEE
  8570                           fsr0h	equ	0xFEA
  8571                           fsr0l	equ	0xFE9
  8572                           wreg	equ	0xFE8
  8573                           postdec1	equ	0xFE5
  8574                           fsr1h	equ	0xFE2
  8575                           fsr1l	equ	0xFE1
  8576                           indf2	equ	0xFDF
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      71
    BANK0           160     64      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SaveAll->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep
    _SPIDisassembleDouble->_GenerateChecksum

Critical Paths under _ISR in COMRAM

    i2_SaveAll->i2_EEWriteDouble
    i2_EEWriteDouble->i2_Write_b_eep
    i2_EEWriteChar->i2_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _ZeroMotors->_calculatePID
    _calculatePID->_abs
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   64776
                                             61 BANK0      3     3      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                            _SaveAll
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   31375
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           0     0      0   30527
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        24    18      6   21083
                                             40 BANK0     21    15      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                                _abs
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5553
                                             21 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5189
                                              9 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3306
                                             31 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    7517
                                              9 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4606
                                             46 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     858
                                             40 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     216
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     216
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     566
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             0     0      0     566
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     349
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      65
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      24
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SaveAll                                              0     0      0    1916
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (2) _EEWriteDouble                                        5     2      3     822
                                             27 COMRAM     5     2      3
                           _Busy_eep
                _EEDisassembleDouble
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _EEDisassembleDouble                                  3     0      3     107
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEWriteChar                                          2     1      1    1094
                                             27 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     346
                                             23 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      65
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     455
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     797
                                             40 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     401
                                             36 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     983
                                              9 COMRAM    14    14      0
                            _INT0Int
                             _SPIInt
                            _TMR0Int
                          i2_SaveAll
 ---------------------------------------------------------------------------------
 (8) i2_SaveAll                                            0     0      0     983
                      i2_EEWriteChar
                    i2_EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteDouble                                      5     2      3     459
                                              4 COMRAM     5     2      3
                         i2_Busy_eep
              i2_EEDisassembleDouble
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_EEDisassembleDouble                               3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteChar                                        2     1      1     524
                                              4 COMRAM     2     1      1
                         i2_Busy_eep
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_Write_b_eep                                       4     1      3     194
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SaveAll
     _EEWriteChar
       _Busy_eep
       _Write_b_eep
     _EEWriteDouble
       _Busy_eep
       _EEDisassembleDouble
       _Write_b_eep
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack

 _ISR (ROOT)
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int
   i2_SaveAll
     i2_EEWriteChar
       i2_Busy_eep
       i2_Write_b_eep
     i2_EEWriteDouble
       i2_Busy_eep
       i2_EEDisassembleDouble
       i2_Write_b_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      62       5       61.2%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      32        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Nov  6 05:59:57 2015

      __size_of_MotorDriverInit 0024                              l31 19A4                              l40 1B18  
                            l43 1402                              l37 1B02                              l49 146A  
                            _Kd 00A6                              _Ki 00A9                              _Kp 00AC  
           ?_EEReassembleDouble 0018                    ___ftadd@exp1 0074                    ___ftadd@exp2 0073  
     ImplementJSMotion@CCPinput 008C                    ___ftadd@sign 0072                             l201 18C8  
                           l109 0B10                             l151 013C                             l510 05FA  
                           l191 14D6                             l192 14E0                             l512 0546  
                           l601 1804                             l193 1522                             l274 1A36  
                           l514 057A                             l275 1A2E                             l291 1792  
                           l267 198C                             l363 174E                             l268 1980  
                           l620 1538                             l508 051E                             l373 15CE  
                           l357 13FC                             l509 0602                             l278 1A42  
                           l622 153C                             l534 19C6                             l287 17D4  
                           l623 153E                             l561 0E20                             l570 1C12  
                           l626 1558                             l379 1B5A                             l627 1572  
                           l628 155A                             l629 155E                             l680 1A12  
                           l681 1A1A                             l586 1B8E                             l862 1BDA  
                           l874 1BF0                             l876 1BF8                             l869 1BC8  
                           l966 103E                             l977 1016                             _PR2 000FCB  
                           _ISR 0008                             _abs 19F0            __size_of_Write_b_eep 0040  
                           prod 000FF3                             wreg 000FE8         ??i2_EEDisassembleDouble 0004  
                          ?_ISR 0001                 __end_of_INT0Int 1AD6                    ___ftdiv@cntr 0029  
                    _Delay1TCYx 1BEE                    ___ftdiv@sign 002E                    __CFG_WDT$OFF 000000  
                          l1010 0802                            l1012 082C                            l1021 0910  
                          l1030 093A                            l1006 07C8                            l1007 09DC  
                          l1041 0F44                            l1203 1A68                            ?_abs 0084  
                          l1053 0D72                            l1038 0F78                            l1070 16C6  
                          l1047 138C                            l1063 1A80                            l1074 0C42  
                          l3015 15EC                            l3115 1460                            l3107 1450  
                          l3019 15F4                            l3029 161C                            l2533 1BCC  
                          l2551 1586                            l3503 101E                            l3521 07D6  
                          l2721 0BD4                            l2563 15B6                            l2555 158E  
                          l2723 0BDC                            l2731 0C12                            l3701 11E8  
                          l3509 1030                            l2805 14DA                            l3533 0822  
                          l2717 0BC0                            l3551 08A4                            l3543 0864  
                          l3527 0810                            l2735 0C30                            l2727 0BF2  
                          l2841 1542                            l3705 11F2                            l3481 0F8A  
                          l3641 0C90                            l3561 08F0                            l3553 08B4  
                          l2729 0C04                            l3619 0F1E                            l2675 132A  
                          l3563 0900                            l3555 08C0                            l3731 01D0  
                          l2845 1562                            l3709 120A                            l3493 0FDE  
                          l3485 0F9A                            l3645 0C9E                            l3629 0F52  
                          l2685 1388                            l3549 0894                            l3725 00EC  
                          l3901 05A0                            l2935 19B2                            l3495 0FFE  
                          l3487 0FA6                            l3663 0CFA                            l3639 0C6C  
                          l2679 135C                            l3735 02F0                            l3719 0064  
                          l3823 0434                            l3497 100A                            l3489 0FC6  
                          l3673 0D32                            l3593 0EB6                            l3569 0966  
                          l3737 040E                            l3905 05BA                            l3913 05EE  
                          l3921 0612                            l3771 0A24                            l3667 0D12  
                          l3659 0CE2                            l3595 0ED0                            l3579 09B6  
                          l2699 0B3C                            l3747 0DDA                            l3851 04BA  
                          l3843 0486                            l3765 09FE                            l2789 1BBA  
                          l3677 0D4C                            l3669 0D1A                            l3685 169C  
                          l3757 0E60                            l3909 05D4                            l3783 0A78  
                          l2983 17B4                            l3599 0EDE                            l3871 0516  
                          l3855 04D4                            l3847 04A0                            l3839 046C  
                          l3769 0A1C                            l3697 11C8                            l3873 0528  
                          l3787 0AB0                            l2979 17A8                            l2995 17D0  
                          l3955 06B6                            l3939 064A                            l3883 054E  
                          l3867 04FA                            l3859 04EE                            l2989 17CC  
                          l3975 0720                            l3887 055C                            u3101 0EA8  
                          u2135 1810                            u2136 1812                            u3121 0EC6  
                          u3300 0202                            u3151 0C58                            u3250 1206  
                          u3171 0C80                            u1911 0B28                            u1930 0B62  
                          u1935 0B58                            u3707 1BCE                            u2881 0776  
                          u2891 0794                            u3697 1BBC                 __end_of_PIDInit 170C  
ImplementJSMotion@JoystickValue 0088            ??_EEReassembleDouble 001B                    EEReadChar@ch 001B  
               __end_of_TMR0Int 1BEE                            abs@a 0084                            _main 041C  
                  ___ftpack@arg 0018                     _DeadbandLow 0045                    ___ftpack@exp 001B  
               __end_of_RTDInit 1966                 __end_of_SPIInit 1B76                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          pclat 000FFA                  ??_EEReadDouble 0021          __size_ofi2_Write_b_eep 0040  
                          prodh 000FF4                            prodl 000FF3                            start 0018  
           __size_of_EEPROMInit 0014                    ?_EEWriteChar 001C                    ___ftmul@cntr 0067  
                  ___param_bank 000010                    ___ftmul@sign 0068   __size_of_InitializeInterrupts 000C  
                         ??_ISR 000A                     _Delay10TCYx 1BCA                __end_of_EEBootUp 13FE  
                  ___fttol@exp1 0083                           ??_abs 0086                 __end_of_SaveAll 10F8  
                  ___fttol@lval 007F                     _Delay1KTCYx 1BB8                 i2EEWriteChar@ch 0005  
                   ReadRTDpos@x 0022               RTD2Angle@RTDAngle 0069                           ?_main 0001  
                         _EEADR 000FA9                 __end_of___ftadd 09DE                 __end_of___ftdiv 0F7A  
               __end_of___ftneg 1A8E                 __end_of___ftmul 0D74                           _T0CON 000FD5  
               __end_of___ftsub 16C8                 __end_of___fttol 0C44                           _T2CON 000FCA  
                         _T3CON 000FB1                           i2l601 1844                           i2l545 12BE  
                         i2l570 1C1A                           i2l549 1ACA              __size_of_RTD2Angle 0038  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR1L 000FCE                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001D                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 001B  
                  _DeadbandHigh 0043                           _error 00AF                   ___ftpack@sign 001C  
                    _DoubleSPIS 0035                           main@x 009F                   ??_ReceiveSPI1 0018  
                         tablat 000FF5              __size_ofi2_SaveAll 00B8                     ?i2_Busy_eep 0001  
                         status 000FD8                   EEReadDouble@x 0022      __size_of_ImplementJSMotion 0134  
         EEWriteDouble@location 001F             GenerateChecksum@sum 0018                      _ReadRTDpos 14C8  
                    _KillMotors 1C06                 __initialization 146C                    __end_of_main 0760  
                _DetectJoystick 1AF8                  _DetectMovement 13FE                      _Read_b_eep 1B76  
              __end_of_Busy_eep 1C18           EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000  
              __end_of_SendSPI1 1996                __end_of_OpenSPI1 157A                          ??_main 0035  
                 ___fttol@sign1 007E                   __activetblptr 000003               ??_MotorDriverInit 0018  
       DetectMovement@ADCresult 001D                   i2_Write_b_eep 1816                       ??_INT0Int 0001  
                     ??_PIDInit 0018                       ??_TMR0Int 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                       ??_RTDInit 0019  
                        _EEDATA 000FA8                     ?_Delay1TCYx 0001                       ??_SPIInit 001B  
                        _CCPR3L 000FB8                          _EECON2 000FA7                __end_of___ftpack 1040  
         __size_of_calculatePID 0400                          i2l2141 1AC0                          i2l3061 1640  
                        i2l3065 1648                          i2l3075 1670                          i2l3463 129C  
                        i2l3473 12B6                          i2l3467 12A6                          i2l3459 1292  
                        _INTCON 000FF2                __end_of___lwtoft 1A6A                i2EEWriteDouble@x 0009  
                        _SPIInt 1BA4               __end_of_RTD2Angle 18CA           i2EEWriteChar@location 0006  
           __end_of_ReceiveSPI1 1A44                       ??_SaveAll 0021          __end_of_DetectJoystick 1B1A  
        __end_of_DetectMovement 146C                OpenSPI1@bus_mode 0018                   _EEWriteDouble 15D0  
                        ___ftge 12F8                       ??___ftadd 006F                       ??___ftdiv 0026  
                     ??___ftneg 001B                       ??___ftmul 0060                       ??___ftsub 0035  
                     ??___fttol 0079                          _intErr 00B2                          clear_0 1472  
                        clear_1 147E               __end_ofi2_SaveAll 11B0                  ?i2_Write_b_eep 0001  
           __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0064                    ??_EEPROMInit 0023  
   __size_of_ImplementPIDMotion 00A8        __size_ofi2_EEWriteDouble 0054                    __pdataCOMRAM 0043  
                  _calculatePID 001C            __end_of_EEReadDouble 15D0               _calculatePID$3352 009A  
             _calculatePID$3353 008E               _calculatePID$3354 0091               _calculatePID$3355 0094  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
             ?_GenerateChecksum 0001                       ?_EEBootUp 0001                      __accesstop 0060  
       __end_of__initialization 14C2              ??_GenerateChecksum 0018                      ___ftadd@f1 0069  
                    ___ftadd@f2 006C                      ___ftge@ff1 0018                      ___ftge@ff2 001B  
                    _ZeroMotors 0D74                   ___rparam_used 000001                      ___ftdiv@f1 0020  
                    ___ftdiv@f2 0023                      ___ftdiv@f3 002A              EEReadChar@location 001A  
                    ___ftneg@f1 0018                     ?_ReadRTDpos 0019                     ?_KillMotors 0001  
                  ??_EEReadChar 001A                  ?_EEWriteDouble 001C                      ___ftmul@f1 002F  
                    ___ftmul@f2 0032                 ?_DetectJoystick 0001                 ?_DetectMovement 0018  
            __end_of_EEPROMInit 1BA4                      ___ftsub@f1 0075                      ___ftsub@f2 0078  
                    ___fttol@f1 0075                  __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 1900  
                  __pidataBANK0 1C25            __size_of_EEWriteChar 0022                     ?_Read_b_eep 0018  
           __size_of_Delay1TCYx 000C               GenerateChecksum@y 0019                      ___lwtoft@c 0020  
  __size_of_SPIReassembleDouble 0044          __size_ofi2_EEWriteChar 0022              __end_of_EEReadChar 1B5C  
__size_ofi2_EEDisassembleDouble 0036   __end_ofi2_EEDisassembleDouble 1936                      __pbssBANK0 00A0  
                   _ReceiveSPI1 1A1C                      ??_EEBootUp 0023                       ?_Busy_eep 0001  
       i2EEWriteDouble@location 0008                   ?_JoystickInit 0001                         ?_SPIInt 0001  
                     ?_SendSPI1 0001                       ?_OpenSPI1 0018                         ?___ftge 0018  
                  ?_Delay10TCYx 0001                  EEWriteDouble@x 0020                         _CCP3CON 000FB7  
                  ?_Delay1KTCYx 0001                 ??i2_Write_b_eep 0004        i2EEDisassembleDouble@dub 0001  
                     ?___ftpack 0018                   ??_Write_b_eep 001B                       ?___lwtoft 0020  
                       _HLVDCON 000FD2                         _INT0Int 1AB2    __end_of_InitializeInterrupts 1C06  
                       _PIDInit 16C8                         _DDouble 0039             __size_of_ReadRTDpos 005C  
           __size_of_KillMotors 000A                   _PIDEnableFlag 00BB                         _SSP1BUF 000FC9  
                       _TMR0Int 1BDC      ImplementPIDMotion@PIDValue 0088                         _RTDInit 1936  
                       _SPIInit 1B5C               ??i2_EEWriteDouble 0008                         _SPIflag 00BC  
              EEWriteDouble@dub 001C             __size_of_Read_b_eep 001A                  ??_JoystickInit 0018  
                  ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044                      ??_Busy_eep 0018  
                       _Command 0041                     ?_ZeroMotors 0001                 __size_of_SPIInt 0014  
                    ??_SendSPI1 0018                 ??_EEWriteDouble 001F                      ??_OpenSPI1 001A  
           EEWriteChar@location 001D                         _SaveAll 1040                         __Hparam 0000  
                       __Lparam 0000                 _MotorDriverInit 1A8E                   i2_EEWriteChar 1B1A  
               __size_of___ftge 0096                         ___ftadd 0760                         ___ftdiv 0E98  
                       ___ftneg 1A6A                         ___ftmul 0C44                         ___ftsub 1678  
                       ___fttol 0B12                      _dummy_byte 00BE           __size_of_EEReadDouble 0056  
                  SendSPI1@data 0019                         __pcinit 146C                      ??___ftpack 001D  
               Delay10TCYx@unit 0018                         __ramtop 1000                      _initialize 19C4  
                  SendSPI1@temp 0018                         __ptext0 041C                         __ptext1 19C4  
                       __ptext2 0D74                         __ptext3 001C                         __ptext4 0B12  
                       __ptext5 1678                         __ptext6 0760                         __ptext7 1A6A  
                       __ptext8 12F8                         __ptext9 0E98                      ??___lwtoft 0023  
                     _T0CONbits 000FD5                    __size_of_ISR 12F0                       _T1CONbits 000FCD  
                  __size_of_abs 002C              __end_ofi2_Busy_eep 1C20               i2Write_b_eep@badd 0001  
             i2Write_b_eep@bdat 0003                         _prevErr 00B5   __size_of_SPIDisassembleDouble 003C  
           __end_of_Write_b_eep 1816                    ??_Delay1TCYx 0018                  __pintcode_body 1258  
          end_of_initialization 14C2                         int_func 1258               OpenSPI1@smp_phase 0019  
                  _EEReadDouble 157A                  ?i2_EEWriteChar 0005           ReadRTDpos@LowPosition 001F  
                    _timer1High 0047                         postdec1 000FE5                      _motorInput 00B8  
                     _RTD2Angle 1892                         postinc0 000FEE               OpenSPI1@sync_mode 001A  
            __end_of_Delay1TCYx 1BFA                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTEbits 000F84                       _PORTJbits 000F88  
      i2Write_b_eep@GIE_BIT_VAL 0004             __size_of_ZeroMotors 0124                       i2_SaveAll 10F8  
                     _TRISAbits 000F92                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISEbits 000F96                       _TRISFbits 000F97                       _TRISGbits 000F98  
                     _TRISJbits 000F9A         __end_of_MotorDriverInit 1AB2                ??_DetectJoystick 0018  
              ??_DetectMovement 001A                     ___ftdiv@exp 002D               __size_of_EEBootUp 0070  
           _SPIReassembleDouble 1750                     _CCP3CONbits 000FB7                  __end_of_SPIInt 1BB8  
                  ??_ReadRTDpos 001B                    ??_KillMotors 0001                     ___ftmul@exp 0063  
          _InitializeInterrupts 1BFA                      ?_RTD2Angle 0069       __size_of_GenerateChecksum 0042  
                  ??_Read_b_eep 001A                  __end_of___ftge 138E            __size_of_Delay10TCYx 0012  
                 __pidataCOMRAM 1C20      __end_of_ImplementPIDMotion 1258                     ?_initialize 0001  
                   _Write_b_eep 17D6            __end_of_JoystickInit 19C4            __size_of_Delay1KTCYx 0012  
          ?_SPIReassembleDouble 0018                       _DoublePtr 003F                      ?i2_SaveAll 0001  
           start_initialization 146C                 _CurrentVelocity 00A3                    _CurrentAngle 00A0  
                   __end_of_ISR 12F8                     __end_of_abs 1A1C              __end_of_ReadRTDpos 1524  
            __end_of_KillMotors 1C10                    ?_ReceiveSPI1 0001              __end_of_Read_b_eep 1B90  
          EEReadDouble@location 0021                        ??_SPIInt 0001                 ??i2_EEWriteChar 0006  
             __size_of_Busy_eep 0008            calculatePID@setpoint 008B                   ??_EEWriteChar 001D  
        ReadRTDpos@HighPosition 001E               __size_of_SendSPI1 0030               __size_of_OpenSPI1 0056  
         ?_InitializeInterrupts 0001                        ??___ftge 001E                     __pdataBANK0 00BF  
         ??_SPIReassembleDouble 001B                 i2_EEWriteDouble 1624    __size_of_EEDisassembleDouble 0036  
             __size_of___ftpack 00C6                        ?_INT0Int 0001                     __pbssCOMRAM 0035  
             __size_of___lwtoft 0026                   __pcstackBANK0 0060                        ?_PIDInit 0001  
                      ?_TMR0Int 0001              calculatePID@derErr 0097                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001  
         i2_EEDisassembleDouble 1900                    ??_ZeroMotors 0035             __size_of_initialize 002C  
        SPIReassembleDouble@dub 001B                   EEWriteChar@ch 001C                        ?_SaveAll 0001  
                     __pintcode 0008                     ??_RTD2Angle 0035                        ?___ftadd 0069  
                      ?___ftdiv 0020                        ?___ftneg 0018                        ?___ftmul 002F  
                      ?___ftsub 0075                        ?___fttol 0075             __end_of_EEWriteChar 1AF8  
         __end_ofi2_Write_b_eep 1856                     ??i2_SaveAll 000A              __end_of_ZeroMotors 0E98  
    __end_of_EEReassembleDouble 1750                        _EEBootUp 138E                        _IPR2bits 000FA2  
                      _PIE1bits 000F9D                        _PIE2bits 000FA0              i2EEWriteDouble@dub 0005  
        ??_InitializeInterrupts 0018           __end_of_EEWriteDouble 1624    __end_of_SPIDisassembleDouble 1892  
                      i2u216_45 1850                        i2u216_46 1852                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                       _timer1Low 0042         __end_ofi2_EEWriteDouble 1678  
         __size_of_JoystickInit 002E                        _SSP1CON1 000FC6                        _TMR0Flag 00BD  
              _GenerateChecksum 1794                        _SSP1STAT 000FC7                      _ADCON0bits 000FC2  
               Write_b_eep@badd 0018                 Write_b_eep@bdat 001A                   ?_calculatePID 0088  
                     main@dtime 009E                       main@trash 009D                __size_of_INT0Int 0024  
              __size_of_PIDInit 0044                __size_of_TMR0Int 0012                       copy_data0 14B6  
              __size_of_RTDInit 0030                __size_of_SPIInit 001A          ?i2_EEDisassembleDouble 0001  
                      _Busy_eep 1C10            __size_of_ReceiveSPI1 0028                    _JoystickInit 1996  
                      _SendSPI1 1966                      _EECON1bits 000FA6                        _SetAngle 003C  
                      _OpenSPI1 1524          ReadRTDpos@FullPosition 0020                        __Hrparam 0000  
                   _EEWriteChar 1AD6                        __Lrparam 0000                __size_of_SaveAll 00B8  
                  _JSEnableFlag 00BA                __size_of___ftadd 027E                __size_of___ftdiv 00E2  
              __size_of___ftneg 0024                __size_of___ftmul 0130                __size_of___ftsub 0050  
              __size_of___fttol 0132                    ??_initialize 0035                        ___ftpack 0F7A  
                  ?_Write_b_eep 0018               calculatePID@angle 0088                  ??_calculatePID 0035  
                      ___lwtoft 1A44                      _EEPROMInit 1B90                        __ptext10 14C8  
                      __ptext11 1892                        __ptext20 1BB8                        __ptext12 1A44  
                      __ptext21 1BCA                        __ptext13 0C44                        __ptext30 1B3C  
                      __ptext22 16C8                        __ptext14 0F7A                        __ptext31 1B76  
                      __ptext23 1A8E                        __ptext15 11B0                        __ptext40 1856  
                      __ptext32 1966                        __ptext24 1996                        __ptext16 1B5C  
                      __ptext41 1794                        __ptext33 1040                        __ptext25 1BFA  
                      __ptext17 1524                        __ptext50 1900                        __ptext42 1A1C  
                      __ptext34 15D0                        __ptext26 1B90                        __ptext18 1936  
                      __ptext51 1B1A                        __ptext43 09DE                        __ptext35 18CA  
                      __ptext27 138E                        __ptext19 1BEE                        __ptext52 1816  
                      __ptext44 19F0                        __ptext36 1AD6                        __ptext28 157A  
                      __ptext53 1C18                        __ptext45 13FE                        __ptext37 17D6  
                      __ptext29 170C                        __ptext54 1BDC                        __ptext46 1AF8  
                      __ptext38 1C10                        __ptext55 1BA4                        __ptext39 1750  
                      __ptext56 1AB2                        __ptext48 10F8                        __ptext57 1C06  
                      __ptext49 1624                    _SSP1CON1bits 000FC6              _ImplementPIDMotion 11B0  
                 __size_of_main 0344             _EEDisassembleDouble 18CA                  Delay1TCYx@unit 0018  
           ?_ImplementPIDMotion 0088              __end_of_initialize 19F0                        _loopTime 00BF  
                    _EEReadChar 1B3C                   ??_Delay10TCYx 0018                ?i2_EEWriteDouble 0005  
                 ??_Delay1KTCYx 0018                    _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0018  
          ??_ImplementPIDMotion 008A                      _INTCONbits 000FF2            _SPIDisassembleDouble 1856  
                      intlevel2 0000                      _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B  
             _ImplementJSMotion 09DE           __end_ofi2_EEWriteChar 1B3C     __end_of_SPIReassembleDouble 1794  
            ?_ImplementJSMotion 0088         __size_of_DetectJoystick 0022         __size_of_DetectMovement 006E  
         ??_EEDisassembleDouble 001B             __end_of_Delay10TCYx 1BDC             ??_ImplementJSMotion 008A  
        EEDisassembleDouble@dub 0018                     ?_EEPROMInit 0001             __end_of_Delay1KTCYx 1BCA  
         ?_SPIDisassembleDouble 001A        __end_of_GenerateChecksum 17D6                      i2_Busy_eep 1C18  
       SPIDisassembleDouble@dub 001A       __end_of_ImplementJSMotion 0B12            __end_of_calculatePID 041C  
                 ?_EEReadDouble 001E                     ?_EEReadChar 0001              _EEReassembleDouble 170C  
