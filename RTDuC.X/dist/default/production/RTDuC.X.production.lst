

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 18 03:41:26 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  002E8A                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _DeadbandHigh
    88  002E8A  00C8               	dw	200
    89                           
    90                           ;initializer for _DeadbandLow
    91  002E8C  FF38               	dw	65336
    92                           
    93                           	psect	idataBANK0
    94  002E8E                     __pidataBANK0:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _loopTime
    98                           ;PID.c: 5: unsigned char PIDEnableFlag;
    99                           ;PID.c: 6: unsigned char TMR0Flag = 0;
   100                           ;PID.c: 7: double Ki;
   101                           ;PID.c: 8: double Kp;
   102                           ;PID.c: 9: double Kd;
   103                           ;PID.c: 10: double SetAngle;
   104                           ;PID.c: 11: double CurrentAngle;
   105                           ;PID.c: 12: double error;
   106                           ;PID.c: 13: double prevErr;
   107                           ;PID.c: 14: double intErr;
   108                           ;PID.c: 15: int motorInput;
   109  002E8E  C3                 	db	195
   110  002E8F  F5                 	db	245
   111  002E90  3C                 	db	60
   112                           
   113                           	psect	smallconst
   114  001000                     __psmallconst:
   115                           	opt stack 0
   116  001000  00                 	db	0
   117  001001                     _DataLodeSize:
   118                           	opt stack 0
   119  001001  025B               	dw	603
   120  001003                     __end_of_DataLodeSize:
   121                           	opt stack 0
   122  001003                     _TransmitLodeSize:
   123                           	opt stack 0
   124  001003  0711               	dw	1809
   125  001005                     __end_of_TransmitLodeSize:
   126                           	opt stack 0
   127  0000                     _ADCON0	set	4034
   128  0000                     _ADCON0bits	set	4034
   129  0000                     _ADCON1	set	4033
   130  0000                     _ADCON2	set	4032
   131  0000                     _ADRESH	set	4036
   132  0000                     _ADRESL	set	4035
   133  0000                     _CCP3CON	set	4023
   134  0000                     _CCP3CONbits	set	4023
   135  0000                     _CCPR3L	set	4024
   136  0000                     _EEADR	set	4009
   137  0000                     _EEADRH	set	4010
   138  0000                     _EECON1bits	set	4006
   139  0000                     _EECON2	set	4007
   140  0000                     _EEDATA	set	4008
   141  0000                     _HLVDCON	set	4050
   142  0000                     _INTCON	set	4082
   143  0000                     _INTCONbits	set	4082
   144  0000                     _IPR2bits	set	4002
   145  0000                     _OSCCONbits	set	4051
   146  0000                     _PIE1bits	set	3997
   147  0000                     _PIE2bits	set	4000
   148  0000                     _PIR1bits	set	3998
   149  0000                     _PIR2bits	set	4001
   150  0000                     _PIR3bits	set	4004
   151  0000                     _PORTA	set	3968
   152  0000                     _PORTAbits	set	3968
   153  0000                     _PORTB	set	3969
   154  0000                     _PORTBbits	set	3969
   155  0000                     _PORTC	set	3970
   156  0000                     _PORTCbits	set	3970
   157  0000                     _PORTD	set	3971
   158  0000                     _PORTE	set	3972
   159  0000                     _PORTEbits	set	3972
   160  0000                     _PORTF	set	3973
   161  0000                     _PORTG	set	3974
   162  0000                     _PORTH	set	3975
   163  0000                     _PORTJ	set	3976
   164  0000                     _PORTJbits	set	3976
   165  0000                     _PR2	set	4043
   166  0000                     _SSP1BUF	set	4041
   167  0000                     _SSP1CON1	set	4038
   168  0000                     _SSP1CON1bits	set	4038
   169  0000                     _SSP1STAT	set	4039
   170  0000                     _SSP1STATbits	set	4039
   171  0000                     _T0CON	set	4053
   172  0000                     _T0CONbits	set	4053
   173  0000                     _T2CON	set	4042
   174  0000                     _T3CON	set	4017
   175  0000                     _T3CONbits	set	4017
   176  0000                     _T4CONbits	set	3958
   177  0000                     _TMR0H	set	4055
   178  0000                     _TMR0L	set	4054
   179  0000                     _TMR3H	set	4019
   180  0000                     _TMR3L	set	4018
   181  0000                     _TMR4	set	3960
   182  0000                     _TRISAbits	set	3986
   183  0000                     _TRISBbits	set	3987
   184  0000                     _TRISCbits	set	3988
   185  0000                     _TRISD	set	3989
   186  0000                     _TRISEbits	set	3990
   187  0000                     _TRISFbits	set	3991
   188  0000                     _TRISGbits	set	3992
   189  0000                     _TRISH	set	3993
   190  0000                     _TRISJbits	set	3994
   191                           
   192                           ; #config settings
   193  001005  00                 	db	0	; dummy byte at the end
   194  0000                     
   195                           	psect	cinit
   196  00252E                     __pcinit:
   197                           	opt stack 0
   198  00252E                     start_initialization:
   199                           	opt stack 0
   200  00252E                     __initialization:
   201                           	opt stack 0
   202                           
   203                           ; Clear objects allocated to BIGRAM (3618 bytes)
   204  00252E  EE00  F0CD         	lfsr	0,__pbssBIGRAM
   205  002532  EE1E F022          	lfsr	1,3618
   206  002536                     clear_0:
   207  002536  6AEE               	clrf	postinc0,c
   208  002538  50E5               	movf	postdec1,w,c
   209  00253A  50E1               	movf	fsr1l,w,c
   210  00253C  E1FC               	bnz	clear_0
   211  00253E  50E2               	movf	fsr1h,w,c
   212  002540  E1FA               	bnz	clear_0
   213                           
   214                           ; Clear objects allocated to BANK0 (32 bytes)
   215  002542  EE00  F0AA         	lfsr	0,__pbssBANK0
   216  002546  0E20               	movlw	32
   217  002548                     clear_1:
   218  002548  6AEE               	clrf	postinc0,c
   219  00254A  06E8               	decf	wreg,f,c
   220  00254C  E1FD               	bnz	clear_1
   221                           
   222                           ; Clear objects allocated to COMRAM (14 bytes)
   223  00254E  EE00  F037         	lfsr	0,__pbssCOMRAM
   224  002552  0E0E               	movlw	14
   225  002554                     clear_2:
   226  002554  6AEE               	clrf	postinc0,c
   227  002556  06E8               	decf	wreg,f,c
   228  002558  E1FD               	bnz	clear_2
   229                           
   230                           ; Initialize objects allocated to BANK0 (3 bytes)
   231                           ; load TBLPTR registers with __pidataBANK0
   232  00255A  0E8E               	movlw	low __pidataBANK0
   233  00255C  6EF6               	movwf	tblptrl,c
   234  00255E  0E2E               	movlw	high __pidataBANK0
   235  002560  6EF7               	movwf	tblptrh,c
   236  002562  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   237  002564  6EF8               	movwf	tblptru,c
   238  002566  0009               	tblrd		*+	;fetch initializer
   239  002568  CFF5 F0CA          	movff	tablat,__pdataBANK0
   240  00256C  0009               	tblrd		*+	;fetch initializer
   241  00256E  CFF5 F0CB          	movff	tablat,__pdataBANK0+1
   242  002572  0009               	tblrd		*+	;fetch initializer
   243  002574  CFF5 F0CC          	movff	tablat,__pdataBANK0+2
   244                           
   245                           ; Initialize objects allocated to COMRAM (4 bytes)
   246                           ; load TBLPTR registers with __pidataCOMRAM
   247  002578  0E8A               	movlw	low __pidataCOMRAM
   248  00257A  6EF6               	movwf	tblptrl,c
   249  00257C  0E2E               	movlw	high __pidataCOMRAM
   250  00257E  6EF7               	movwf	tblptrh,c
   251  002580  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   252  002582  6EF8               	movwf	tblptru,c
   253  002584  EE00  F045         	lfsr	0,__pdataCOMRAM
   254  002588  EE10 F004          	lfsr	1,4
   255  00258C                     copy_data0:
   256  00258C  0009               	tblrd		*+
   257  00258E  CFF5 FFEE          	movff	tablat,postinc0
   258  002592  50E5               	movf	postdec1,w,c
   259  002594  50E1               	movf	fsr1l,w,c
   260  002596  E1FA               	bnz	copy_data0
   261  002598                     end_of_initialization:
   262                           	opt stack 0
   263  002598                     __end_of__initialization:
   264                           	opt stack 0
   265  002598  0100               	movlb	0
   266  00259A  EF03  F008         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1h	equ	0xFE2
   275                           fsr1l	equ	0xFE1
   276                           
   277                           	psect	bssCOMRAM
   278  000037                     __pbssCOMRAM:
   279                           	opt stack 0
   280  000037                     _DoubleSPIS:
   281                           	opt stack 0
   282  000037                     	ds	4
   283  00003B                     _DDouble:
   284                           	opt stack 0
   285  00003B                     	ds	3
   286  00003E                     _SetAngle:
   287                           	opt stack 0
   288  00003E                     	ds	3
   289  000041                     _DoublePtr:
   290                           	opt stack 0
   291  000041                     	ds	2
   292  000043                     _Command:
   293                           	opt stack 0
   294  000043                     	ds	1
   295  000044                     _timer4:
   296                           	opt stack 0
   297  000044                     	ds	1
   298                           tblptru	equ	0xFF8
   299                           tblptrh	equ	0xFF7
   300                           tblptrl	equ	0xFF6
   301                           tablat	equ	0xFF5
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           postdec1	equ	0xFE5
   305                           fsr1h	equ	0xFE2
   306                           fsr1l	equ	0xFE1
   307                           
   308                           	psect	dataCOMRAM
   309  000045                     __pdataCOMRAM:
   310                           	opt stack 0
   311  000045                     _DeadbandHigh:
   312                           	opt stack 0
   313  000045                     	ds	2
   314  000047                     _DeadbandLow:
   315                           	opt stack 0
   316  000047                     	ds	2
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1h	equ	0xFE2
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	bssBANK0
   328  0000AA                     __pbssBANK0:
   329                           	opt stack 0
   330  0000AA                     _CurrentAngle:
   331                           	opt stack 0
   332  0000AA                     	ds	3
   333  0000AD                     _CurrentVelocity:
   334                           	opt stack 0
   335  0000AD                     	ds	3
   336  0000B0                     _Kd:
   337                           	opt stack 0
   338  0000B0                     	ds	3
   339  0000B3                     _Ki:
   340                           	opt stack 0
   341  0000B3                     	ds	3
   342  0000B6                     _Kp:
   343                           	opt stack 0
   344  0000B6                     	ds	3
   345  0000B9                     _error:
   346                           	opt stack 0
   347  0000B9                     	ds	3
   348  0000BC                     _intErr:
   349                           	opt stack 0
   350  0000BC                     	ds	3
   351  0000BF                     _prevErr:
   352                           	opt stack 0
   353  0000BF                     	ds	3
   354  0000C2                     _motorInput:
   355                           	opt stack 0
   356  0000C2                     	ds	2
   357  0000C4                     _JSEnableFlag:
   358                           	opt stack 0
   359  0000C4                     	ds	1
   360  0000C5                     _PIDEnableFlag:
   361                           	opt stack 0
   362  0000C5                     	ds	1
   363  0000C6                     _RECFlag:
   364                           	opt stack 0
   365  0000C6                     	ds	1
   366  0000C7                     _SPIflag:
   367                           	opt stack 0
   368  0000C7                     	ds	1
   369  0000C8                     _TMR0Flag:
   370                           	opt stack 0
   371  0000C8                     	ds	1
   372  0000C9                     _dummy_byte:
   373                           	opt stack 0
   374  0000C9                     	ds	1
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1h	equ	0xFE2
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	dataBANK0
   386  0000CA                     __pdataBANK0:
   387                           	opt stack 0
   388  0000CA                     _loopTime:
   389                           	opt stack 0
   390  0000CA                     	ds	3
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1h	equ	0xFE2
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	bssBIGRAM
   402  0000CD                     __pbssBIGRAM:
   403                           	opt stack 0
   404  0000CD                     _DataLode:
   405                           	opt stack 0
   406  0000CD                     	ds	1809
   407  0007DE                     _TransmitLode:
   408                           	opt stack 0
   409  0007DE                     	ds	1809
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1h	equ	0xFE2
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	cstackBANK0
   421  000060                     __pcstackBANK0:
   422                           	opt stack 0
   423  000060                     ___ftdiv@cntr:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x0
   427  000060                     	ds	1
   428  000061                     ___ftdiv@f3:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x1
   432  000061                     	ds	3
   433  000064                     ___ftdiv@exp:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x4
   437  000064                     	ds	1
   438  000065                     ___ftdiv@sign:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x5
   442  000065                     	ds	1
   443  000066                     ?___ftmul:
   444                           	opt stack 0
   445  000066                     ___ftmul@f1:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0x6
   449  000066                     	ds	3
   450  000069                     ___ftmul@f2:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x9
   454  000069                     	ds	3
   455  00006C                     ??___ftmul:
   456                           
   457                           ; 0 bytes @ 0xC
   458  00006C                     	ds	3
   459  00006F                     ___ftmul@exp:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xF
   463  00006F                     	ds	1
   464  000070                     ___ftmul@f3_as_product:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0x10
   468  000070                     	ds	3
   469  000073                     ___ftmul@cntr:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x13
   473  000073                     	ds	1
   474  000074                     ___ftmul@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x14
   478  000074                     	ds	1
   479  000075                     ?_RTD2Angle:
   480                           	opt stack 0
   481  000075                     ?___fttol:
   482                           	opt stack 0
   483  000075                     RTD2Angle@RTDAngle:
   484                           	opt stack 0
   485  000075                     ___fttol@f1:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x15
   489  000075                     	ds	4
   490  000079                     ??___fttol:
   491                           
   492                           ; 0 bytes @ 0x19
   493  000079                     	ds	5
   494  00007E                     ___fttol@sign1:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x1E
   498  00007E                     	ds	1
   499  00007F                     ___fttol@lval:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x1F
   503  00007F                     	ds	4
   504  000083                     ___fttol@exp1:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x23
   508  000083                     	ds	1
   509  000084                     ?_abs:
   510                           	opt stack 0
   511  000084                     abs@a:
   512                           	opt stack 0
   513  000084                     calculatePID@angle:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x24
   517  000084                     	ds	2
   518  000086                     ImplementPIDMotion@PIDValue:
   519                           	opt stack 0
   520  000086                     ImplementJSMotion@JoystickValue:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x26
   524  000086                     	ds	1
   525  000087                     calculatePID@setpoint:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x27
   529  000087                     	ds	1
   530  000088                     ??_ImplementPIDMotion:
   531  000088                     ??_ImplementJSMotion:
   532                           
   533                           ; 0 bytes @ 0x28
   534  000088                     	ds	2
   535  00008A                     ImplementJSMotion@CCPinput:
   536                           	opt stack 0
   537  00008A                     calculatePID@derErr:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x2A
   541  00008A                     	ds	3
   542  00008D                     _calculatePID$3511:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x2D
   546  00008D                     	ds	3
   547  000090                     _calculatePID$3512:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x30
   551  000090                     	ds	3
   552  000093                     ZeroMotors@average:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x33
   556  000093                     	ds	3
   557  000096                     ZeroMotors@PrevAngle:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x36
   561  000096                     	ds	3
   562  000099                     main@trash:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x39
   566  000099                     	ds	1
   567  00009A                     main@saveKp:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x3A
   571  00009A                     	ds	3
   572  00009D                     main@saveKi:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x3D
   576  00009D                     	ds	3
   577  0000A0                     main@saveKd:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x40
   581  0000A0                     	ds	3
   582  0000A3                     main@saveSP:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x43
   586  0000A3                     	ds	3
   587  0000A6                     main@dtime:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x46
   591  0000A6                     	ds	1
   592  0000A7                     main@counter:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x47
   596  0000A7                     	ds	2
   597  0000A9                     main@x:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x49
   601  0000A9                     	ds	1
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1h	equ	0xFE2
   610                           fsr1l	equ	0xFE1
   611                           
   612                           	psect	cstackCOMRAM
   613  000001                     __pcstackCOMRAM:
   614                           	opt stack 0
   615  000001                     i2Write_b_eep@badd:
   616                           	opt stack 0
   617  000001                     i2EEDisassembleDouble@dub:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x0
   621  000001                     	ds	2
   622  000003                     i2Write_b_eep@bdat:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x2
   626  000003                     	ds	1
   627  000004                     i2Write_b_eep@GIE_BIT_VAL:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x3
   631  000004                     	ds	1
   632  000005                     i2EEWriteChar@ch:
   633                           	opt stack 0
   634  000005                     i2EEWriteDouble@dub:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x4
   638  000005                     	ds	1
   639  000006                     i2EEWriteChar@location:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x5
   643  000006                     	ds	2
   644  000008                     i2EEWriteDouble@location:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x7
   648  000008                     	ds	1
   649  000009                     i2EEWriteDouble@x:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x8
   653  000009                     	ds	1
   654  00000A                     ??_ISR:
   655  00000A                     
   656                           ; 0 bytes @ 0x9
   657  00000A                     	ds	14
   658  000018                     ?_DetectMovement:
   659                           	opt stack 0
   660  000018                     ?___lwdiv:
   661                           	opt stack 0
   662  000018                     ?___ftpack:
   663                           	opt stack 0
   664  000018                     ?_SPIReassembleDouble:
   665                           	opt stack 0
   666  000018                     ?_EEReassembleDouble:
   667                           	opt stack 0
   668  000018                     ?___ftneg:
   669                           	opt stack 0
   670  000018                     GenerateChecksum@sum:
   671                           	opt stack 0
   672  000018                     OpenSPI1@bus_mode:
   673                           	opt stack 0
   674  000018                     Delay10TCYx@unit:
   675                           	opt stack 0
   676  000018                     Delay1KTCYx@unit:
   677                           	opt stack 0
   678  000018                     Delay1TCYx@unit:
   679                           	opt stack 0
   680  000018                     Read_b_eep@badd:
   681                           	opt stack 0
   682  000018                     Write_b_eep@badd:
   683                           	opt stack 0
   684  000018                     ___lwdiv@dividend:
   685                           	opt stack 0
   686  000018                     EEDisassembleDouble@dub:
   687                           	opt stack 0
   688  000018                     ___ftpack@arg:
   689                           	opt stack 0
   690  000018                     ___ftge@ff1:
   691                           	opt stack 0
   692  000018                     ___ftneg@f1:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x17
   696  000018                     	ds	1
   697  000019                     ?_ReadRTDpos:
   698                           	opt stack 0
   699  000019                     GenerateChecksum@y:
   700                           	opt stack 0
   701  000019                     OpenSPI1@smp_phase:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x18
   705  000019                     	ds	1
   706  00001A                     ??_DetectMovement:
   707  00001A                     EEReadChar@location:
   708                           	opt stack 0
   709  00001A                     Write_b_eep@bdat:
   710                           	opt stack 0
   711  00001A                     OpenSPI1@sync_mode:
   712                           	opt stack 0
   713  00001A                     ___lwdiv@divisor:
   714                           	opt stack 0
   715  00001A                     SPIDisassembleDouble@dub:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x19
   719  00001A                     	ds	1
   720  00001B                     ??_ReadRTDpos:
   721  00001B                     SPIRestart@temp:
   722                           	opt stack 0
   723  00001B                     EEReadChar@ch:
   724                           	opt stack 0
   725  00001B                     Write_b_eep@GIE_BIT_VAL:
   726                           	opt stack 0
   727  00001B                     ___ftpack@exp:
   728                           	opt stack 0
   729  00001B                     DetectMovement@JoystickResult:
   730                           	opt stack 0
   731  00001B                     SPIReassembleDouble@dub:
   732                           	opt stack 0
   733  00001B                     EEReassembleDouble@dub:
   734                           	opt stack 0
   735  00001B                     ___ftge@ff2:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x1A
   739  00001B                     	ds	1
   740  00001C                     SendSPI1@temp:
   741                           	opt stack 0
   742  00001C                     EEWriteChar@ch:
   743                           	opt stack 0
   744  00001C                     ___ftpack@sign:
   745                           	opt stack 0
   746  00001C                     ___lwdiv@quotient:
   747                           	opt stack 0
   748  00001C                     EEWriteDouble@dub:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x1B
   752  00001C                     	ds	1
   753  00001D                     ??___ftpack:
   754  00001D                     SendSPI1@data:
   755                           	opt stack 0
   756  00001D                     EEWriteChar@location:
   757                           	opt stack 0
   758  00001D                     DetectMovement@ADCresult:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x1C
   762  00001D                     	ds	1
   763  00001E                     ??___ftge:
   764  00001E                     ?_EEReadDouble:
   765                           	opt stack 0
   766  00001E                     ReadRTDpos@HighPosition:
   767                           	opt stack 0
   768  00001E                     ___lwdiv@counter:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x1D
   772  00001E                     	ds	1
   773  00001F                     ?___wmul:
   774                           	opt stack 0
   775  00001F                     ReadRTDpos@LowPosition:
   776                           	opt stack 0
   777  00001F                     EEWriteDouble@location:
   778                           	opt stack 0
   779  00001F                     ___wmul@multiplier:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x1E
   783  00001F                     	ds	1
   784  000020                     ?___ftadd:
   785                           	opt stack 0
   786  000020                     ?___lwtoft:
   787                           	opt stack 0
   788  000020                     EEWriteDouble@x:
   789                           	opt stack 0
   790  000020                     ReadRTDpos@FullPosition:
   791                           	opt stack 0
   792  000020                     ___lwtoft@c:
   793                           	opt stack 0
   794  000020                     ___ftadd@f1:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x1F
   798  000020                     	ds	1
   799  000021                     EEReadDouble@location:
   800                           	opt stack 0
   801  000021                     ___wmul@multiplicand:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x20
   805  000021                     	ds	1
   806  000022                     ReadRTDpos@x:
   807                           	opt stack 0
   808  000022                     EEReadDouble@x:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x21
   812  000022                     	ds	1
   813  000023                     ___wmul@product:
   814                           	opt stack 0
   815  000023                     ___ftadd@f2:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x22
   819  000023                     	ds	2
   820  000025                     SPIDisassembleLode@Data:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x24
   824  000025                     	ds	1
   825  000026                     ??___ftadd:
   826                           
   827                           ; 0 bytes @ 0x25
   828  000026                     	ds	1
   829  000027                     SPIDisassembleLode@Transmit:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x26
   833  000027                     	ds	2
   834  000029                     ??_SPIDisassembleLode:
   835  000029                     ___ftadd@sign:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x28
   839  000029                     	ds	1
   840  00002A                     ___ftadd@exp2:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x29
   844  00002A                     	ds	1
   845  00002B                     ___ftadd@exp1:
   846                           	opt stack 0
   847  00002B                     SPIDisassembleLode@y:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x2A
   851  00002B                     	ds	1
   852  00002C                     ?___ftdiv:
   853                           	opt stack 0
   854  00002C                     ?___ftsub:
   855                           	opt stack 0
   856  00002C                     ___ftdiv@f1:
   857                           	opt stack 0
   858  00002C                     ___ftsub@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x2B
   862  00002C                     	ds	1
   863  00002D                     SPIDisassembleLode@dub:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x2C
   867  00002D                     	ds	2
   868  00002F                     ___ftdiv@f2:
   869                           	opt stack 0
   870  00002F                     ___ftsub@f2:
   871                           	opt stack 0
   872                           
   873                           ; 3 bytes @ 0x2E
   874  00002F                     	ds	3
   875  000032                     ??___ftdiv:
   876  000032                     
   877                           ; 0 bytes @ 0x31
   878  000032                     	ds	3
   879  000035                     ??_abs:
   880  000035                     
   881                           ; 0 bytes @ 0x34
   882  000035                     	ds	2
   883  000037                     tblptru	equ	0xFF8
   884                           tblptrh	equ	0xFF7
   885                           tblptrl	equ	0xFF6
   886                           tablat	equ	0xFF5
   887                           postinc0	equ	0xFEE
   888                           wreg	equ	0xFE8
   889                           postdec1	equ	0xFE5
   890                           fsr1h	equ	0xFE2
   891                           fsr1l	equ	0xFE1
   892                           
   893                           ; 0 bytes @ 0x36
   894 ;;
   895 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   896 ;;
   897 ;; *************** function _main *****************
   898 ;; Defined at:
   899 ;;		line 30 in file "RTDuC.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  saveSP          3   67[BANK0 ] PTR unsigned char 
   904 ;;  saveKd          3   64[BANK0 ] PTR unsigned char 
   905 ;;  saveKi          3   61[BANK0 ] PTR unsigned char 
   906 ;;  saveKp          3   58[BANK0 ] PTR unsigned char 
   907 ;;  counter         2   71[BANK0 ] unsigned int 
   908 ;;  x               1   73[BANK0 ] unsigned char 
   909 ;;  dtime           1   70[BANK0 ] const unsigned char 
   910 ;;  trash           1   57[BANK0 ] unsigned char 
   911 ;; Return value:  Size  Location     Type
   912 ;;		None               void
   913 ;; Registers used:
   914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;Total ram usage:       17 bytes
   925 ;; Hardware stack levels required when called:   10
   926 ;; This function calls:
   927 ;;		_Delay10TCYx
   928 ;;		_DetectJoystick
   929 ;;		_DetectMovement
   930 ;;		_ImplementJSMotion
   931 ;;		_ImplementPIDMotion
   932 ;;		_RTD2Angle
   933 ;;		_ReadRTDpos
   934 ;;		_ReceiveSPI1
   935 ;;		_SPIDisassembleDouble
   936 ;;		_SPIDisassembleLode
   937 ;;		_SPIReassembleDouble
   938 ;;		_SPIRestart
   939 ;;		_SaveAll
   940 ;;		_SendSPI1
   941 ;;		_ZeroMotors
   942 ;;		___wmul
   943 ;;		_calculatePID
   944 ;;		_initialize
   945 ;; This function is called by:
   946 ;;		Startup code after reset
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text0
   951  001006                     __ptext0:
   952                           	opt stack 0
   953  001006                     _main:
   954                           	opt stack 21
   955                           
   956                           ;RTDuC.c: 32: const unsigned char dtime = 10;
   957                           
   958                           ;incstack = 0
   959  001006  0E0A               	movlw	10
   960  001008  0100               	movlb	0	; () banked
   961  00100A  6FA6               	movwf	main@dtime& (0+255),b
   962                           
   963                           ;RTDuC.c: 33: unsigned char trash, x = 0;
   964  00100C  0E00               	movlw	0
   965  00100E  0100               	movlb	0	; () banked
   966  001010  6FA9               	movwf	main@x& (0+255),b
   967                           
   968                           ;RTDuC.c: 34: unsigned int counter = 0;
   969  001012  0E00               	movlw	0
   970  001014  0100               	movlb	0	; () banked
   971  001016  6FA8               	movwf	(main@counter+1)& (0+255),b
   972  001018  0E00               	movlw	0
   973  00101A  6FA7               	movwf	main@counter& (0+255),b
   974                           
   975                           ; BSR set to: 0
   976                           ;RTDuC.c: 36: initialize();
   977  00101C  EC6A  F015         	call	_initialize	;wreg free
   978                           
   979                           ;RTDuC.c: 38: SSP1BUF = dummy_byte;
   980  001020  C0C9  FFC9         	movff	_dummy_byte,4041	;volatile
   981                           
   982                           ;RTDuC.c: 39: PORTCbits.RC6 = 0;
   983  001024  9C82               	bcf	3970,6,c	;volatile
   984  001026  D000               	goto	l4319
   985  001028                     l4319:
   986                           
   987                           ;RTDuC.c: 42: {
   988                           ;RTDuC.c: 43: if (SPIflag == 1)
   989  001028  0100               	movlb	0	; () banked
   990  00102A  05C7               	decf	_SPIflag& (0+255),w,b
   991  00102C  A4D8               	btfss	status,2,c
   992  00102E  D0E9               	goto	l4419
   993                           
   994                           ; BSR set to: 0
   995                           ;RTDuC.c: 44: {
   996                           ;RTDuC.c: 45: SPIflag = 0;
   997  001030  0E00               	movlw	0
   998  001032  0100               	movlb	0	; () banked
   999  001034  6FC7               	movwf	_SPIflag& (0+255),b
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;RTDuC.c: 46: INTCONbits.GIE = 0;
  1003  001036  9EF2               	bcf	intcon,7,c	;volatile
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;RTDuC.c: 47: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
  1007  001038  0E02               	movlw	2
  1008  00103A  1843               	xorwf	_Command,w,c
  1009  00103C  B4D8               	btfsc	status,2,c
  1010  00103E  D010               	goto	l4335
  1011                           
  1012                           ; BSR set to: 0
  1013  001040  0E03               	movlw	3
  1014  001042  1843               	xorwf	_Command,w,c
  1015  001044  B4D8               	btfsc	status,2,c
  1016  001046  D00C               	goto	l4335
  1017                           
  1018                           ; BSR set to: 0
  1019  001048  0E04               	movlw	4
  1020  00104A  1843               	xorwf	_Command,w,c
  1021  00104C  B4D8               	btfsc	status,2,c
  1022  00104E  D008               	goto	l4335
  1023                           
  1024                           ; BSR set to: 0
  1025  001050  0E06               	movlw	6
  1026  001052  1843               	xorwf	_Command,w,c
  1027  001054  B4D8               	btfsc	status,2,c
  1028  001056  D004               	goto	l4335
  1029                           
  1030                           ; BSR set to: 0
  1031  001058  0E08               	movlw	8
  1032  00105A  1843               	xorwf	_Command,w,c
  1033  00105C  A4D8               	btfss	status,2,c
  1034  00105E  D05D               	goto	l4373
  1035  001060                     l4335:
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;RTDuC.c: 48: {
  1039                           ;RTDuC.c: 49: if (Command == 0x02)
  1040  001060  0E02               	movlw	2
  1041  001062  1843               	xorwf	_Command,w,c
  1042  001064  A4D8               	btfss	status,2,c
  1043  001066  D009               	goto	l4339
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;RTDuC.c: 50: SPIDisassembleDouble(CurrentAngle);
  1047  001068  C0AA  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
  1048  00106C  C0AB  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
  1049  001070  C0AC  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
  1050  001074  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1051  001078  D034               	goto	l4355
  1052  00107A                     l4339:
  1053                           
  1054                           ;RTDuC.c: 51: else if (Command == 0x03)
  1055  00107A  0E03               	movlw	3
  1056  00107C  1843               	xorwf	_Command,w,c
  1057  00107E  A4D8               	btfss	status,2,c
  1058  001080  D009               	goto	l4343
  1059                           
  1060                           ;RTDuC.c: 52: SPIDisassembleDouble(CurrentVelocity);
  1061  001082  C0AD  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
  1062  001086  C0AE  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
  1063  00108A  C0AF  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
  1064  00108E  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1065  001092  D027               	goto	l4355
  1066  001094                     l4343:
  1067                           
  1068                           ;RTDuC.c: 53: else if (Command == 0x04)
  1069  001094  0E04               	movlw	4
  1070  001096  1843               	xorwf	_Command,w,c
  1071  001098  A4D8               	btfss	status,2,c
  1072  00109A  D009               	goto	l4347
  1073                           
  1074                           ;RTDuC.c: 54: SPIDisassembleDouble(Kp);
  1075  00109C  C0B6  F01A         	movff	_Kp,SPIDisassembleDouble@dub
  1076  0010A0  C0B7  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
  1077  0010A4  C0B8  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
  1078  0010A8  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1079  0010AC  D01A               	goto	l4355
  1080  0010AE                     l4347:
  1081                           
  1082                           ;RTDuC.c: 55: else if (Command == 0x06)
  1083  0010AE  0E06               	movlw	6
  1084  0010B0  1843               	xorwf	_Command,w,c
  1085  0010B2  A4D8               	btfss	status,2,c
  1086  0010B4  D009               	goto	l4351
  1087                           
  1088                           ;RTDuC.c: 56: SPIDisassembleDouble(Ki);
  1089  0010B6  C0B3  F01A         	movff	_Ki,SPIDisassembleDouble@dub
  1090  0010BA  C0B4  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
  1091  0010BE  C0B5  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
  1092  0010C2  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1093  0010C6  D00D               	goto	l4355
  1094  0010C8                     l4351:
  1095                           
  1096                           ;RTDuC.c: 57: else if (Command == 0x08)
  1097  0010C8  0E08               	movlw	8
  1098  0010CA  1843               	xorwf	_Command,w,c
  1099  0010CC  A4D8               	btfss	status,2,c
  1100  0010CE  D009               	goto	l4355
  1101                           
  1102                           ;RTDuC.c: 58: SPIDisassembleDouble(Kd);
  1103  0010D0  C0B0  F01A         	movff	_Kd,SPIDisassembleDouble@dub
  1104  0010D4  C0B1  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
  1105  0010D8  C0B2  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
  1106  0010DC  EC4C  F015         	call	_SPIDisassembleDouble	;wreg free
  1107  0010E0  D000               	goto	l4355
  1108  0010E2                     l4355:
  1109                           
  1110                           ;RTDuC.c: 60: PORTCbits.RC6 = 0;
  1111  0010E2  9C82               	bcf	3970,6,c	;volatile
  1112                           
  1113                           ;RTDuC.c: 61: for (x = 0; x < 4; x++)
  1114  0010E4  0E00               	movlw	0
  1115  0010E6  0100               	movlb	0	; () banked
  1116  0010E8  6FA9               	movwf	main@x& (0+255),b
  1117  0010EA                     l4359:
  1118                           
  1119                           ; BSR set to: 0
  1120  0010EA  0E03               	movlw	3
  1121  0010EC  0100               	movlb	0	; () banked
  1122  0010EE  65A9               	cpfsgt	main@x& (0+255),b
  1123  0010F0  D001               	goto	l4363
  1124                           
  1125                           ; BSR set to: 0
  1126  0010F2  D00F               	goto	l4369
  1127  0010F4                     l4363:
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;RTDuC.c: 62: SendSPI1(DoubleSPIS[x]);
  1131  0010F4  0100               	movlb	0	; () banked
  1132  0010F6  51A9               	movf	main@x& (0+255),w,b
  1133  0010F8  0D01               	mullw	1
  1134  0010FA  0E37               	movlw	low _DoubleSPIS
  1135  0010FC  24F3               	addwf	prodl,w,c
  1136  0010FE  6ED9               	movwf	fsr2l,c
  1137  001100  0E00               	movlw	high _DoubleSPIS
  1138  001102  20F4               	addwfc	prodh,w,c
  1139  001104  6EDA               	movwf	fsr2h,c
  1140  001106  50DF               	movf	indf2,w,c
  1141  001108  ECEB  F015         	call	_SendSPI1
  1142  00110C  0100               	movlb	0	; () banked
  1143  00110E  2BA9               	incf	main@x& (0+255),f,b
  1144  001110  D7EC               	goto	l4359
  1145  001112                     l4369:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;RTDuC.c: 63: SPIRestart();
  1149  001112  ECF7  F016         	call	_SPIRestart	;wreg free
  1150                           
  1151                           ;RTDuC.c: 64: PORTCbits.RC6 = 1;
  1152  001116  8C82               	bsf	3970,6,c	;volatile
  1153                           
  1154                           ;RTDuC.c: 65: }
  1155  001118  D06C               	goto	l545
  1156  00111A                     l4373:
  1157                           
  1158                           ;RTDuC.c: 66: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
  1159  00111A  0443               	decf	_Command,w,c
  1160  00111C  B4D8               	btfsc	status,2,c
  1161  00111E  D00C               	goto	l548
  1162  001120  0E05               	movlw	5
  1163  001122  1843               	xorwf	_Command,w,c
  1164  001124  B4D8               	btfsc	status,2,c
  1165  001126  D008               	goto	l548
  1166  001128  0E07               	movlw	7
  1167  00112A  1843               	xorwf	_Command,w,c
  1168  00112C  B4D8               	btfsc	status,2,c
  1169  00112E  D004               	goto	l548
  1170  001130  0E09               	movlw	9
  1171  001132  1843               	xorwf	_Command,w,c
  1172  001134  A4D8               	btfss	status,2,c
  1173  001136  D059               	goto	l546
  1174  001138                     l548:
  1175                           
  1176                           ;RTDuC.c: 67: {
  1177                           ;RTDuC.c: 68: PORTCbits.RC6 = 0;
  1178  001138  9C82               	bcf	3970,6,c	;volatile
  1179                           
  1180                           ;RTDuC.c: 69: for (x = 0; x != 4; x++)
  1181  00113A  0E00               	movlw	0
  1182  00113C  0100               	movlb	0	; () banked
  1183  00113E  6FA9               	movwf	main@x& (0+255),b
  1184  001140                     l4383:
  1185                           
  1186                           ; BSR set to: 0
  1187  001140  0E04               	movlw	4
  1188  001142  0100               	movlb	0	; () banked
  1189  001144  19A9               	xorwf	main@x& (0+255),w,b
  1190  001146  B4D8               	btfsc	status,2,c
  1191  001148  D011               	goto	l550
  1192  00114A  D001               	goto	l4387
  1193                           
  1194                           ; BSR set to: 0
  1195  00114C  D00F               	goto	l550
  1196  00114E                     l4387:
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;RTDuC.c: 70: DoubleSPIS[x] = ReceiveSPI1();
  1200  00114E  0100               	movlb	0	; () banked
  1201  001150  51A9               	movf	main@x& (0+255),w,b
  1202  001152  0D01               	mullw	1
  1203  001154  0E37               	movlw	low _DoubleSPIS
  1204  001156  24F3               	addwf	prodl,w,c
  1205  001158  6ED9               	movwf	fsr2l,c
  1206  00115A  0E00               	movlw	high _DoubleSPIS
  1207  00115C  20F4               	addwfc	prodh,w,c
  1208  00115E  6EDA               	movwf	fsr2h,c
  1209  001160  EC3C  F016         	call	_ReceiveSPI1	;wreg free
  1210  001164  6EDF               	movwf	indf2,c
  1211  001166  0100               	movlb	0	; () banked
  1212  001168  2BA9               	incf	main@x& (0+255),f,b
  1213  00116A  D7EA               	goto	l4383
  1214  00116C                     l550:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;RTDuC.c: 72: PORTCbits.RC6 = 1;
  1218  00116C  8C82               	bsf	3970,6,c	;volatile
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;RTDuC.c: 74: if (Command == 0x01)
  1222  00116E  0443               	decf	_Command,w,c
  1223  001170  A4D8               	btfss	status,2,c
  1224  001172  D00F               	goto	l4401
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;RTDuC.c: 75: {
  1228                           ;RTDuC.c: 76: SetAngle = SPIReassembleDouble();
  1229  001174  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1230  001178  C018  F03E         	movff	?_SPIReassembleDouble,_SetAngle
  1231  00117C  C019  F03F         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1232  001180  C01A  F040         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1233                           
  1234                           ;RTDuC.c: 77: PIDEnableFlag = 3;
  1235  001184  0E03               	movlw	3
  1236  001186  0100               	movlb	0	; () banked
  1237  001188  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;RTDuC.c: 78: JSEnableFlag = 0;
  1241  00118A  0E00               	movlw	0
  1242  00118C  0100               	movlb	0	; () banked
  1243  00118E  6FC4               	movwf	_JSEnableFlag& (0+255),b
  1244                           
  1245                           ;RTDuC.c: 79: }
  1246  001190  D027               	goto	l4413
  1247  001192                     l4401:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;RTDuC.c: 80: else if (Command == 0x05)
  1251  001192  0E05               	movlw	5
  1252  001194  1843               	xorwf	_Command,w,c
  1253  001196  A4D8               	btfss	status,2,c
  1254  001198  D009               	goto	l4405
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;RTDuC.c: 81: {
  1258                           ;RTDuC.c: 82: Kp = SPIReassembleDouble();
  1259  00119A  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1260  00119E  C018  F0B6         	movff	?_SPIReassembleDouble,_Kp
  1261  0011A2  C019  F0B7         	movff	?_SPIReassembleDouble+1,_Kp+1
  1262  0011A6  C01A  F0B8         	movff	?_SPIReassembleDouble+2,_Kp+2
  1263                           
  1264                           ;RTDuC.c: 83: }
  1265  0011AA  D01A               	goto	l4413
  1266  0011AC                     l4405:
  1267                           
  1268                           ;RTDuC.c: 84: else if (Command == 0x07)
  1269  0011AC  0E07               	movlw	7
  1270  0011AE  1843               	xorwf	_Command,w,c
  1271  0011B0  A4D8               	btfss	status,2,c
  1272  0011B2  D009               	goto	l4409
  1273                           
  1274                           ;RTDuC.c: 85: {
  1275                           ;RTDuC.c: 86: Ki = SPIReassembleDouble();
  1276  0011B4  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1277  0011B8  C018  F0B3         	movff	?_SPIReassembleDouble,_Ki
  1278  0011BC  C019  F0B4         	movff	?_SPIReassembleDouble+1,_Ki+1
  1279  0011C0  C01A  F0B5         	movff	?_SPIReassembleDouble+2,_Ki+2
  1280                           
  1281                           ;RTDuC.c: 87: }
  1282  0011C4  D00D               	goto	l4413
  1283  0011C6                     l4409:
  1284                           
  1285                           ;RTDuC.c: 88: else if (Command == 0x09)
  1286  0011C6  0E09               	movlw	9
  1287  0011C8  1843               	xorwf	_Command,w,c
  1288  0011CA  A4D8               	btfss	status,2,c
  1289  0011CC  D009               	goto	l4413
  1290                           
  1291                           ;RTDuC.c: 89: {
  1292                           ;RTDuC.c: 90: Kd = SPIReassembleDouble();
  1293  0011CE  ECAA  F014         	call	_SPIReassembleDouble	;wreg free
  1294  0011D2  C018  F0B0         	movff	?_SPIReassembleDouble,_Kd
  1295  0011D6  C019  F0B1         	movff	?_SPIReassembleDouble+1,_Kd+1
  1296  0011DA  C01A  F0B2         	movff	?_SPIReassembleDouble+2,_Kd+2
  1297  0011DE  D000               	goto	l4413
  1298  0011E0                     l4413:
  1299                           
  1300                           ;RTDuC.c: 91: }
  1301                           ;RTDuC.c: 92: SPIRestart();
  1302  0011E0  ECF7  F016         	call	_SPIRestart	;wreg free
  1303                           
  1304                           ;RTDuC.c: 93: SaveAll();
  1305  0011E4  ECF0  F010         	call	_SaveAll	;wreg free
  1306                           
  1307                           ;RTDuC.c: 94: }
  1308  0011E8  D004               	goto	l545
  1309  0011EA                     l546:
  1310                           
  1311                           ;RTDuC.c: 95: else
  1312                           ;RTDuC.c: 96: {
  1313                           ;RTDuC.c: 97: trash = SSP1BUF;
  1314  0011EA  CFC9 F099          	movff	4041,main@trash	;volatile
  1315                           
  1316                           ;RTDuC.c: 98: PIR1bits.SSP1IF = 0;
  1317  0011EE  969E               	bcf	3998,3,c	;volatile
  1318  0011F0  D000               	goto	l545
  1319  0011F2                     l545:
  1320                           
  1321                           ;RTDuC.c: 99: }
  1322                           ;RTDuC.c: 101: INTCONbits.GIE = 1;
  1323  0011F2  8EF2               	bsf	intcon,7,c	;volatile
  1324                           
  1325                           ;RTDuC.c: 102: PIE1bits.SSP1IE = 1;
  1326  0011F4  869D               	bsf	3997,3,c	;volatile
  1327                           
  1328                           ;RTDuC.c: 103: PORTCbits.RC6 = 0;
  1329  0011F6  9C82               	bcf	3970,6,c	;volatile
  1330                           
  1331                           ;RTDuC.c: 104: Delay10TCYx(dtime);
  1332  0011F8  0100               	movlb	0	; () banked
  1333  0011FA  51A6               	movf	main@dtime& (0+255),w,b
  1334  0011FC  EC16  F017         	call	_Delay10TCYx
  1335  001200  D000               	goto	l4419
  1336  001202                     l4419:
  1337                           
  1338                           ;RTDuC.c: 105: }
  1339                           ;RTDuC.c: 106: PORTCbits.RC6 = 1;
  1340  001202  8C82               	bsf	3970,6,c	;volatile
  1341                           
  1342                           ;RTDuC.c: 107: DetectJoystick();
  1343  001204  ECA9  F016         	call	_DetectJoystick	;wreg free
  1344                           
  1345                           ;RTDuC.c: 108: PORTCbits.RC6 = 0;
  1346  001208  9C82               	bcf	3970,6,c	;volatile
  1347                           
  1348                           ;RTDuC.c: 109: Delay10TCYx(10);
  1349  00120A  0E0A               	movlw	10
  1350  00120C  EC16  F017         	call	_Delay10TCYx
  1351                           
  1352                           ;RTDuC.c: 110: if (JSEnableFlag == 1)
  1353  001210  0100               	movlb	0	; () banked
  1354  001212  05C4               	decf	_JSEnableFlag& (0+255),w,b
  1355  001214  A4D8               	btfss	status,2,c
  1356  001216  D011               	goto	l4437
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;RTDuC.c: 111: {
  1360                           ;RTDuC.c: 112: PORTCbits.RC6 = 1;
  1361  001218  8C82               	bsf	3970,6,c	;volatile
  1362                           
  1363                           ;RTDuC.c: 113: INTCONbits.GIE = 0;
  1364  00121A  9EF2               	bcf	intcon,7,c	;volatile
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;RTDuC.c: 114: ImplementJSMotion(DetectMovement());
  1368  00121C  EC07  F013         	call	_DetectMovement	;wreg free
  1369  001220  C018  F086         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1370  001224  C019  F087         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1371  001228  EC6A  F00E         	call	_ImplementJSMotion	;wreg free
  1372                           
  1373                           ;RTDuC.c: 115: INTCONbits.GIE = 1;
  1374  00122C  8EF2               	bsf	intcon,7,c	;volatile
  1375                           
  1376                           ;RTDuC.c: 116: PORTCbits.RC6 = 0;
  1377  00122E  9C82               	bcf	3970,6,c	;volatile
  1378                           
  1379                           ;RTDuC.c: 117: Delay10TCYx(dtime);
  1380  001230  0100               	movlb	0	; () banked
  1381  001232  51A6               	movf	main@dtime& (0+255),w,b
  1382  001234  EC16  F017         	call	_Delay10TCYx
  1383  001238  D000               	goto	l4437
  1384  00123A                     l4437:
  1385                           
  1386                           ;RTDuC.c: 118: }
  1387                           ;RTDuC.c: 120: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1388  00123A  0100               	movlb	0	; () banked
  1389  00123C  05C5               	decf	_PIDEnableFlag& (0+255),w,b
  1390  00123E  A4D8               	btfss	status,2,c
  1391  001240  D032               	goto	l4453
  1392                           
  1393                           ; BSR set to: 0
  1394  001242  0100               	movlb	0	; () banked
  1395  001244  05C8               	decf	_TMR0Flag& (0+255),w,b
  1396  001246  A4D8               	btfss	status,2,c
  1397  001248  D02E               	goto	l4453
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;RTDuC.c: 121: {
  1401                           ;RTDuC.c: 122: PORTCbits.RC6 = 1;
  1402  00124A  8C82               	bsf	3970,6,c	;volatile
  1403                           
  1404                           ;RTDuC.c: 123: INTCONbits.GIE = 0;
  1405  00124C  9EF2               	bcf	intcon,7,c	;volatile
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;RTDuC.c: 124: CurrentAngle = RTD2Angle(ReadRTDpos());
  1409  00124E  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1410  001252  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1411  001256  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1412  00125A  EC2D  F015         	call	_RTD2Angle	;wreg free
  1413  00125E  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1414  001262  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1415  001266  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1416                           
  1417                           ;RTDuC.c: 125: calculatePID(CurrentAngle, SetAngle);
  1418  00126A  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1419  00126E  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1420  001272  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1421  001276  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  1422  00127A  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1423  00127E  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1424  001282  ECC0  F00A         	call	_calculatePID	;wreg free
  1425                           
  1426                           ;RTDuC.c: 126: ImplementPIDMotion(motorInput);
  1427  001286  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1428  00128A  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1429  00128E  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  1430                           
  1431                           ;RTDuC.c: 127: TMR0Flag = 0;
  1432  001292  0E00               	movlw	0
  1433  001294  0100               	movlb	0	; () banked
  1434  001296  6FC8               	movwf	_TMR0Flag& (0+255),b
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;RTDuC.c: 128: INTCONbits.GIE = 1;
  1438  001298  8EF2               	bsf	intcon,7,c	;volatile
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;RTDuC.c: 129: PORTCbits.RC6 = 0;
  1442  00129A  9C82               	bcf	3970,6,c	;volatile
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;RTDuC.c: 130: Delay10TCYx(dtime);
  1446  00129C  0100               	movlb	0	; () banked
  1447  00129E  51A6               	movf	main@dtime& (0+255),w,b
  1448  0012A0  EC16  F017         	call	_Delay10TCYx
  1449                           
  1450                           ;RTDuC.c: 131: }
  1451  0012A4  D053               	goto	l561
  1452  0012A6                     l4453:
  1453                           
  1454                           ;RTDuC.c: 133: else if (PIDEnableFlag == 3)
  1455  0012A6  0E03               	movlw	3
  1456  0012A8  0100               	movlb	0	; () banked
  1457  0012AA  19C5               	xorwf	_PIDEnableFlag& (0+255),w,b
  1458  0012AC  A4D8               	btfss	status,2,c
  1459  0012AE  D030               	goto	l4473
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;RTDuC.c: 134: {
  1463                           ;RTDuC.c: 135: PORTCbits.RC6 = 1;
  1464  0012B0  8C82               	bsf	3970,6,c	;volatile
  1465                           
  1466                           ;RTDuC.c: 136: INTCONbits.GIE = 0;
  1467  0012B2  9EF2               	bcf	intcon,7,c	;volatile
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;RTDuC.c: 137: TMR0H = 0xDB;
  1471  0012B4  0EDB               	movlw	219
  1472  0012B6  6ED7               	movwf	4055,c	;volatile
  1473                           
  1474                           ;RTDuC.c: 138: TMR0L = 0x60;
  1475  0012B8  0E60               	movlw	96
  1476  0012BA  6ED6               	movwf	4054,c	;volatile
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;RTDuC.c: 139: CurrentAngle = RTD2Angle(ReadRTDpos());
  1480  0012BC  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1481  0012C0  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1482  0012C4  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1483  0012C8  EC2D  F015         	call	_RTD2Angle	;wreg free
  1484  0012CC  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1485  0012D0  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1486  0012D4  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1487                           
  1488                           ;RTDuC.c: 140: calculatePID(CurrentAngle, SetAngle);
  1489  0012D8  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1490  0012DC  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1491  0012E0  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1492  0012E4  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  1493  0012E8  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1494  0012EC  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1495  0012F0  ECC0  F00A         	call	_calculatePID	;wreg free
  1496                           
  1497                           ;RTDuC.c: 141: ImplementPIDMotion(motorInput);
  1498  0012F4  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1499  0012F8  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1500  0012FC  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  1501                           
  1502                           ;RTDuC.c: 142: INTCONbits.GIE = 1;
  1503  001300  8EF2               	bsf	intcon,7,c	;volatile
  1504                           
  1505                           ;RTDuC.c: 144: T0CONbits.TMR0ON = 1;
  1506  001302  8ED5               	bsf	4053,7,c	;volatile
  1507                           
  1508                           ;RTDuC.c: 145: PORTCbits.RC6 = 0;
  1509  001304  9C82               	bcf	3970,6,c	;volatile
  1510                           
  1511                           ;RTDuC.c: 146: Delay10TCYx(dtime);
  1512  001306  0100               	movlb	0	; () banked
  1513  001308  51A6               	movf	main@dtime& (0+255),w,b
  1514  00130A  EC16  F017         	call	_Delay10TCYx
  1515                           
  1516                           ;RTDuC.c: 147: }
  1517  00130E  D01E               	goto	l561
  1518  001310                     l4473:
  1519                           
  1520                           ;RTDuC.c: 149: else if (TMR0Flag == 1)
  1521  001310  0100               	movlb	0	; () banked
  1522  001312  05C8               	decf	_TMR0Flag& (0+255),w,b
  1523  001314  A4D8               	btfss	status,2,c
  1524  001316  D01A               	goto	l561
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;RTDuC.c: 150: {
  1528                           ;RTDuC.c: 151: PORTCbits.RC6 = 1;
  1529  001318  8C82               	bsf	3970,6,c	;volatile
  1530                           
  1531                           ;RTDuC.c: 152: INTCONbits.GIE = 0;
  1532  00131A  9EF2               	bcf	intcon,7,c	;volatile
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;RTDuC.c: 153: CurrentAngle = RTD2Angle(ReadRTDpos());
  1536  00131C  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1537  001320  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1538  001324  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1539  001328  EC2D  F015         	call	_RTD2Angle	;wreg free
  1540  00132C  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1541  001330  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1542  001334  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1543                           
  1544                           ;RTDuC.c: 154: INTCONbits.GIE = 1;
  1545  001338  8EF2               	bsf	intcon,7,c	;volatile
  1546                           
  1547                           ;RTDuC.c: 155: TMR0Flag = 0;
  1548  00133A  0E00               	movlw	0
  1549  00133C  0100               	movlb	0	; () banked
  1550  00133E  6FC8               	movwf	_TMR0Flag& (0+255),b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;RTDuC.c: 156: PORTCbits.RC6 = 0;
  1554  001340  9C82               	bcf	3970,6,c	;volatile
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;RTDuC.c: 157: Delay10TCYx(dtime);
  1558  001342  0100               	movlb	0	; () banked
  1559  001344  51A6               	movf	main@dtime& (0+255),w,b
  1560  001346  EC16  F017         	call	_Delay10TCYx
  1561  00134A  D000               	goto	l561
  1562  00134C                     l561:
  1563                           
  1564                           ;RTDuC.c: 158: }
  1565                           ;RTDuC.c: 160: if (RECFlag == 1)
  1566  00134C  0100               	movlb	0	; () banked
  1567  00134E  05C6               	decf	_RECFlag& (0+255),w,b
  1568  001350  A4D8               	btfss	status,2,c
  1569  001352  D66A               	goto	l4319
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;RTDuC.c: 161: {
  1573                           ;RTDuC.c: 162: PORTCbits.RC6 = 1;
  1574  001354  8C82               	bsf	3970,6,c	;volatile
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;RTDuC.c: 163: RECFlag = 0;
  1578  001356  0E00               	movlw	0
  1579  001358  0100               	movlb	0	; () banked
  1580  00135A  6FC6               	movwf	_RECFlag& (0+255),b
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;RTDuC.c: 165: double saveKp = Kp,
  1584  00135C  C0B6  F09A         	movff	_Kp,main@saveKp
  1585  001360  C0B7  F09B         	movff	_Kp+1,main@saveKp+1
  1586  001364  C0B8  F09C         	movff	_Kp+2,main@saveKp+2
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;RTDuC.c: 166: saveKi = Ki,
  1590  001368  C0B3  F09D         	movff	_Ki,main@saveKi
  1591  00136C  C0B4  F09E         	movff	_Ki+1,main@saveKi+1
  1592  001370  C0B5  F09F         	movff	_Ki+2,main@saveKi+2
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;RTDuC.c: 167: saveKd = Kd,
  1596  001374  C0B0  F0A0         	movff	_Kd,main@saveKd
  1597  001378  C0B1  F0A1         	movff	_Kd+1,main@saveKd+1
  1598  00137C  C0B2  F0A2         	movff	_Kd+2,main@saveKd+2
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;RTDuC.c: 168: saveSP = SetAngle;
  1602  001380  C03E  F0A3         	movff	_SetAngle,main@saveSP
  1603  001384  C03F  F0A4         	movff	_SetAngle+1,main@saveSP+1
  1604  001388  C040  F0A5         	movff	_SetAngle+2,main@saveSP+2
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;RTDuC.c: 170: INTCONbits.GIE = 0;
  1608  00138C  9EF2               	bcf	intcon,7,c	;volatile
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;RTDuC.c: 171: INTCONbits.TMR0IE = 0;
  1612  00138E  9AF2               	bcf	intcon,5,c	;volatile
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;RTDuC.c: 172: T0CONbits.TMR0ON = 0;
  1616  001390  9ED5               	bcf	4053,7,c	;volatile
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;RTDuC.c: 174: ZeroMotors();
  1620  001392  ECF7  F00C         	call	_ZeroMotors	;wreg free
  1621                           
  1622                           ;RTDuC.c: 175: Kp = saveKp;
  1623  001396  C09A  F0B6         	movff	main@saveKp,_Kp
  1624  00139A  C09B  F0B7         	movff	main@saveKp+1,_Kp+1
  1625  00139E  C09C  F0B8         	movff	main@saveKp+2,_Kp+2
  1626                           
  1627                           ;RTDuC.c: 176: Ki = saveKi;
  1628  0013A2  C09D  F0B3         	movff	main@saveKi,_Ki
  1629  0013A6  C09E  F0B4         	movff	main@saveKi+1,_Ki+1
  1630  0013AA  C09F  F0B5         	movff	main@saveKi+2,_Ki+2
  1631                           
  1632                           ;RTDuC.c: 177: Kd = saveKd;
  1633  0013AE  C0A0  F0B0         	movff	main@saveKd,_Kd
  1634  0013B2  C0A1  F0B1         	movff	main@saveKd+1,_Kd+1
  1635  0013B6  C0A2  F0B2         	movff	main@saveKd+2,_Kd+2
  1636                           
  1637                           ;RTDuC.c: 179: TMR0H = 0xDB;
  1638  0013BA  0EDB               	movlw	219
  1639  0013BC  6ED7               	movwf	4055,c	;volatile
  1640                           
  1641                           ;RTDuC.c: 180: TMR0L = 0x60;
  1642  0013BE  0E60               	movlw	96
  1643  0013C0  6ED6               	movwf	4054,c	;volatile
  1644                           
  1645                           ;RTDuC.c: 182: PIDEnableFlag = 3;
  1646  0013C2  0E03               	movlw	3
  1647  0013C4  0100               	movlb	0	; () banked
  1648  0013C6  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;RTDuC.c: 183: SetAngle = 60;
  1652  0013C8  0E00               	movlw	0
  1653  0013CA  6E3E               	movwf	_SetAngle,c
  1654  0013CC  0E70               	movlw	112
  1655  0013CE  6E3F               	movwf	_SetAngle+1,c
  1656  0013D0  0E42               	movlw	66
  1657  0013D2  6E40               	movwf	_SetAngle+2,c
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;RTDuC.c: 184: counter = 0;
  1661  0013D4  0E00               	movlw	0
  1662  0013D6  0100               	movlb	0	; () banked
  1663  0013D8  6FA8               	movwf	(main@counter+1)& (0+255),b
  1664  0013DA  0E00               	movlw	0
  1665  0013DC  6FA7               	movwf	main@counter& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;RTDuC.c: 186: T0CONbits.TMR0ON = 1;
  1669  0013DE  8ED5               	bsf	4053,7,c	;volatile
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;RTDuC.c: 187: T3CONbits.TMR3ON = 1;
  1673  0013E0  80B1               	bsf	4017,0,c	;volatile
  1674                           
  1675                           ;RTDuC.c: 189: while (counter < DataLodeSize)
  1676  0013E2  D065               	goto	l4541
  1677  0013E4                     l4527:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;RTDuC.c: 190: {
  1681                           ;RTDuC.c: 191: CurrentAngle = RTD2Angle(ReadRTDpos());
  1682  0013E4  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1683  0013E8  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1684  0013EC  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1685  0013F0  EC2D  F015         	call	_RTD2Angle	;wreg free
  1686  0013F4  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  1687  0013F8  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1688  0013FC  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1689                           
  1690                           ;RTDuC.c: 192: calculatePID(CurrentAngle, SetAngle);
  1691  001400  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  1692  001404  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1693  001408  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1694  00140C  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  1695  001410  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1696  001414  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1697  001418  ECC0  F00A         	call	_calculatePID	;wreg free
  1698                           
  1699                           ;RTDuC.c: 193: ImplementPIDMotion(motorInput);
  1700  00141C  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1701  001420  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1702  001424  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  1703                           
  1704                           ;RTDuC.c: 194: while (INTCONbits.TMR0IF == 0)
  1705  001428  D03A               	goto	l4537
  1706  00142A                     l4529:
  1707                           
  1708                           ;RTDuC.c: 195: {
  1709                           ;RTDuC.c: 196: TMR3H = 0xF6;
  1710  00142A  0EF6               	movlw	246
  1711  00142C  6EB3               	movwf	4019,c	;volatile
  1712                           
  1713                           ;RTDuC.c: 197: TMR3L = 0x3C;
  1714  00142E  0E3C               	movlw	60
  1715  001430  6EB2               	movwf	4018,c	;volatile
  1716                           
  1717                           ;RTDuC.c: 198: DataLode[counter] = RTD2Angle(ReadRTDpos());
  1718  001432  C0A7  F01F         	movff	main@counter,___wmul@multiplier
  1719  001436  C0A8  F020         	movff	main@counter+1,___wmul@multiplier+1
  1720  00143A  0E00               	movlw	0
  1721  00143C  6E22               	movwf	___wmul@multiplicand+1,c
  1722  00143E  0E03               	movlw	3
  1723  001440  6E21               	movwf	___wmul@multiplicand,c
  1724  001442  EC15  F016         	call	___wmul	;wreg free
  1725  001446  0ECD               	movlw	low _DataLode
  1726  001448  241F               	addwf	?___wmul,w,c
  1727  00144A  6ED9               	movwf	fsr2l,c
  1728  00144C  0E00               	movlw	high _DataLode
  1729  00144E  2020               	addwfc	?___wmul+1,w,c
  1730  001450  6EDA               	movwf	fsr2h,c
  1731  001452  EC3E  F013         	call	_ReadRTDpos	;wreg free
  1732  001456  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1733  00145A  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1734  00145E  EC2D  F015         	call	_RTD2Angle	;wreg free
  1735  001462  C075  FFDE         	movff	?_RTD2Angle,postinc2
  1736  001466  C076  FFDE         	movff	?_RTD2Angle+1,postinc2
  1737  00146A  C077  FFDE         	movff	?_RTD2Angle+2,postinc2
  1738                           
  1739                           ;RTDuC.c: 199: while (PIR2bits.TMR3IF == 0);
  1740  00146E  D000               	goto	l570
  1741  001470                     l570:
  1742  001470  A2A1               	btfss	4001,1,c	;volatile
  1743  001472  D7FE               	goto	l570
  1744                           
  1745                           ;RTDuC.c: 200: PIR2bits.TMR3IF = 0;
  1746  001474  92A1               	bcf	4001,1,c	;volatile
  1747                           
  1748                           ;RTDuC.c: 201: if (counter < DataLodeSize)
  1749  001476  0E01               	movlw	low _DataLodeSize
  1750  001478  6EF6               	movwf	tblptrl,c
  1751  00147A                     	if	1	;There is more than 1 active tblptr byte
  1752  00147A  0E10               	movlw	high _DataLodeSize
  1753  00147C  6EF7               	movwf	tblptrh,c
  1754  00147E                     	endif
  1755  00147E                     	if	1	;There are 3 active tblptr bytes
  1756  00147E  0E00               	movlw	low (_DataLodeSize shr (0+16))
  1757  001480  6EF8               	movwf	tblptru,c
  1758  001482                     	endif
  1759  001482  0009               	tblrd		*+
  1760  001484  50F5               	movf	tablat,w,c
  1761  001486  0100               	movlb	0	; () banked
  1762  001488  5DA7               	subwf	main@counter& (0+255),w,b
  1763  00148A  0009               	tblrd		*+
  1764  00148C  50F5               	movf	tablat,w,c
  1765  00148E  0100               	movlb	0	; () banked
  1766  001490  59A8               	subwfb	(main@counter+1)& (0+255),w,b
  1767  001492  B0D8               	btfsc	status,0,c
  1768  001494  D004               	goto	l4537
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;RTDuC.c: 202: counter++;
  1772  001496  0100               	movlb	0	; () banked
  1773  001498  4BA7               	infsnz	main@counter& (0+255),f,b
  1774  00149A  2BA8               	incf	(main@counter+1)& (0+255),f,b
  1775                           
  1776                           ; BSR set to: 0
  1777  00149C  D000               	goto	l4537
  1778  00149E                     l4537:
  1779  00149E  A4F2               	btfss	intcon,2,c	;volatile
  1780  0014A0  D7C4               	goto	l4529
  1781                           
  1782                           ;RTDuC.c: 203: }
  1783                           ;RTDuC.c: 204: INTCONbits.TMR0IF = 0;
  1784  0014A2  94F2               	bcf	intcon,2,c	;volatile
  1785                           
  1786                           ;RTDuC.c: 205: TMR0H = 0xDB;
  1787  0014A4  0EDB               	movlw	219
  1788  0014A6  6ED7               	movwf	4055,c	;volatile
  1789                           
  1790                           ;RTDuC.c: 206: TMR0L = 0x60;
  1791  0014A8  0E60               	movlw	96
  1792  0014AA  6ED6               	movwf	4054,c	;volatile
  1793  0014AC  D000               	goto	l4541
  1794  0014AE                     l4541:
  1795  0014AE  0E01               	movlw	low _DataLodeSize
  1796  0014B0  6EF6               	movwf	tblptrl,c
  1797  0014B2                     	if	1	;There is more than 1 active tblptr byte
  1798  0014B2  0E10               	movlw	high _DataLodeSize
  1799  0014B4  6EF7               	movwf	tblptrh,c
  1800  0014B6                     	endif
  1801  0014B6                     	if	1	;There are 3 active tblptr bytes
  1802  0014B6  0E00               	movlw	low (_DataLodeSize shr (0+16))
  1803  0014B8  6EF8               	movwf	tblptru,c
  1804  0014BA                     	endif
  1805  0014BA  0009               	tblrd		*+
  1806  0014BC  50F5               	movf	tablat,w,c
  1807  0014BE  0100               	movlb	0	; () banked
  1808  0014C0  5DA7               	subwf	main@counter& (0+255),w,b
  1809  0014C2  0009               	tblrd		*+
  1810  0014C4  50F5               	movf	tablat,w,c
  1811  0014C6  0100               	movlb	0	; () banked
  1812  0014C8  59A8               	subwfb	(main@counter+1)& (0+255),w,b
  1813  0014CA  A0D8               	btfss	status,0,c
  1814  0014CC  D78B               	goto	l4527
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;RTDuC.c: 207: }
  1818                           ;RTDuC.c: 208: DataLode[600] = Kp;
  1819  0014CE  C0B6  F7D5         	movff	_Kp,_DataLode+1800
  1820  0014D2  C0B7  F7D6         	movff	_Kp+1,_DataLode+1801
  1821  0014D6  C0B8  F7D7         	movff	_Kp+2,_DataLode+1802
  1822                           
  1823                           ;RTDuC.c: 209: DataLode[601] = Ki;
  1824  0014DA  C0B3  F7D8         	movff	_Ki,_DataLode+1803
  1825  0014DE  C0B4  F7D9         	movff	_Ki+1,_DataLode+1804
  1826  0014E2  C0B5  F7DA         	movff	_Ki+2,_DataLode+1805
  1827                           
  1828                           ;RTDuC.c: 210: DataLode[602] = Kd;
  1829  0014E6  C0B0  F7DB         	movff	_Kd,_DataLode+1806
  1830  0014EA  C0B1  F7DC         	movff	_Kd+1,_DataLode+1807
  1831  0014EE  C0B2  F7DD         	movff	_Kd+2,_DataLode+1808
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;RTDuC.c: 211: SPIDisassembleLode(DataLode, TransmitLode);
  1835  0014F2  0ECD               	movlw	low _DataLode
  1836  0014F4  6E25               	movwf	SPIDisassembleLode@Data,c
  1837  0014F6  0E00               	movlw	high _DataLode
  1838  0014F8  6E26               	movwf	SPIDisassembleLode@Data+1,c
  1839  0014FA  0EDE               	movlw	low _TransmitLode
  1840  0014FC  6E27               	movwf	SPIDisassembleLode@Transmit,c
  1841  0014FE  0E07               	movlw	high _TransmitLode
  1842  001500  6E28               	movwf	SPIDisassembleLode@Transmit+1,c
  1843  001502  EC1D  F010         	call	_SPIDisassembleLode	;wreg free
  1844                           
  1845                           ;RTDuC.c: 212: SPIRestart();
  1846  001506  ECF7  F016         	call	_SPIRestart	;wreg free
  1847                           
  1848                           ;RTDuC.c: 213: PORTCbits.RC6 = 0;
  1849  00150A  9C82               	bcf	3970,6,c	;volatile
  1850                           
  1851                           ;RTDuC.c: 214: for (counter = 0; counter != TransmitLodeSize; counter++)
  1852  00150C  0E00               	movlw	0
  1853  00150E  0100               	movlb	0	; () banked
  1854  001510  6FA8               	movwf	(main@counter+1)& (0+255),b
  1855  001512  0E00               	movlw	0
  1856  001514  6FA7               	movwf	main@counter& (0+255),b
  1857  001516                     l4551:
  1858                           
  1859                           ; BSR set to: 0
  1860  001516  0E03               	movlw	low _TransmitLodeSize
  1861  001518  6EF6               	movwf	tblptrl,c
  1862  00151A                     	if	1	;There is more than 1 active tblptr byte
  1863  00151A  0E10               	movlw	high _TransmitLodeSize
  1864  00151C  6EF7               	movwf	tblptrh,c
  1865  00151E                     	endif
  1866  00151E                     	if	1	;There are 3 active tblptr bytes
  1867  00151E  0E00               	movlw	low (_TransmitLodeSize shr (0+16))
  1868  001520  6EF8               	movwf	tblptru,c
  1869  001522                     	endif
  1870  001522  0009               	tblrd		*+
  1871  001524  50F5               	movf	tablat,w,c
  1872  001526  0100               	movlb	0	; () banked
  1873  001528  19A7               	xorwf	main@counter& (0+255),w,b
  1874  00152A  E108               	bnz	l4555
  1875  00152C  0009               	tblrd		*+
  1876  00152E  50F5               	movf	tablat,w,c
  1877  001530  0100               	movlb	0	; () banked
  1878  001532  19A8               	xorwf	(main@counter+1)& (0+255),w,b
  1879  001534  B4D8               	btfsc	status,2,c
  1880  001536  D012               	goto	l577
  1881  001538  D001               	goto	l4555
  1882                           
  1883                           ; BSR set to: 0
  1884  00153A  D010               	goto	l577
  1885  00153C                     l4555:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;RTDuC.c: 215: SendSPI1(TransmitLode[counter]);
  1889  00153C  0EDE               	movlw	low _TransmitLode
  1890  00153E  0100               	movlb	0	; () banked
  1891  001540  25A7               	addwf	main@counter& (0+255),w,b
  1892  001542  6ED9               	movwf	fsr2l,c
  1893  001544  0E07               	movlw	high _TransmitLode
  1894  001546  0100               	movlb	0	; () banked
  1895  001548  21A8               	addwfc	(main@counter+1)& (0+255),w,b
  1896  00154A  6EDA               	movwf	fsr2h,c
  1897  00154C  50DF               	movf	indf2,w,c
  1898  00154E  ECEB  F015         	call	_SendSPI1
  1899  001552  0100               	movlb	0	; () banked
  1900  001554  4BA7               	infsnz	main@counter& (0+255),f,b
  1901  001556  2BA8               	incf	(main@counter+1)& (0+255),f,b
  1902  001558  D7DE               	goto	l4551
  1903                           
  1904                           ; BSR set to: 0
  1905  00155A  D7F0               	goto	l4555
  1906  00155C                     l577:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;RTDuC.c: 216: PORTCbits.RC6 = 1;
  1910  00155C  8C82               	bsf	3970,6,c	;volatile
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;RTDuC.c: 217: SPIRestart();
  1914  00155E  ECF7  F016         	call	_SPIRestart	;wreg free
  1915                           
  1916                           ;RTDuC.c: 218: INTCONbits.TMR0IE = 1;
  1917  001562  8AF2               	bsf	intcon,5,c	;volatile
  1918                           
  1919                           ;RTDuC.c: 219: INTCONbits.PEIE = 1;
  1920  001564  8CF2               	bsf	intcon,6,c	;volatile
  1921                           
  1922                           ;RTDuC.c: 220: INTCONbits.GIE = 1;
  1923  001566  8EF2               	bsf	intcon,7,c	;volatile
  1924                           
  1925                           ;RTDuC.c: 221: SetAngle = saveSP;
  1926  001568  C0A3  F03E         	movff	main@saveSP,_SetAngle
  1927  00156C  C0A4  F03F         	movff	main@saveSP+1,_SetAngle+1
  1928  001570  C0A5  F040         	movff	main@saveSP+2,_SetAngle+2
  1929                           
  1930                           ;RTDuC.c: 222: PIDEnableFlag = 3;
  1931  001574  0E03               	movlw	3
  1932  001576  0100               	movlb	0	; () banked
  1933  001578  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  1934                           
  1935                           ; BSR set to: 0
  1936                           
  1937                           ; BSR set to: 0
  1938  00157A  D556               	goto	l4319
  1939                           
  1940                           ; BSR set to: 0
  1941                           
  1942                           ; BSR set to: 0
  1943  00157C  EF0C  F000         	goto	start
  1944  001580                     __end_of_main:
  1945                           	opt stack 0
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           intcon	equ	0xFF2
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postdec1	equ	0xFE5
  1956                           fsr1h	equ	0xFE2
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _initialize *****************
  1965 ;; Defined at:
  1966 ;;		line 227 in file "RTDuC.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    9
  1987 ;; This function calls:
  1988 ;;		_EEPROMInit
  1989 ;;		_InitializeInterrupts
  1990 ;;		_JoystickInit
  1991 ;;		_MotorDriverInit
  1992 ;;		_PIDInit
  1993 ;;		_RTDInit
  1994 ;;		_RecTmrInit
  1995 ;;		_SPIInit
  1996 ;;		_ZeroMotors
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text1
  2003  002AD4                     __ptext1:
  2004                           	opt stack 0
  2005  002AD4                     _initialize:
  2006                           	opt stack 21
  2007                           
  2008                           ;RTDuC.c: 229: while (OSCCONbits.OSTS == 0);
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;incstack = 0
  2012  002AD4  D000               	goto	l583
  2013  002AD6                     l583:
  2014  002AD6  A6D3               	btfss	4051,3,c	;volatile
  2015  002AD8  D7FE               	goto	l583
  2016                           
  2017                           ;RTDuC.c: 230: TRISCbits.RC6 = 0;
  2018  002ADA  9C94               	bcf	3988,6,c	;volatile
  2019                           
  2020                           ;RTDuC.c: 231: PORTCbits.RC6 = 1;
  2021  002ADC  8C82               	bsf	3970,6,c	;volatile
  2022                           
  2023                           ;RTDuC.c: 233: RTDInit();
  2024  002ADE  ECBC  F015         	call	_RTDInit	;wreg free
  2025                           
  2026                           ;RTDuC.c: 234: SPIInit();
  2027  002AE2  ECDB  F016         	call	_SPIInit	;wreg free
  2028                           
  2029                           ;RTDuC.c: 235: JoystickInit();
  2030  002AE6  ECD4  F015         	call	_JoystickInit	;wreg free
  2031                           
  2032                           ;RTDuC.c: 236: MotorDriverInit();
  2033  002AEA  EC74  F016         	call	_MotorDriverInit	;wreg free
  2034                           
  2035                           ;RTDuC.c: 237: PIDInit();
  2036  002AEE  EC66  F014         	call	_PIDInit	;wreg free
  2037                           
  2038                           ;RTDuC.c: 238: EEPROMInit();
  2039  002AF2  EC03  F017         	call	_EEPROMInit	;wreg free
  2040                           
  2041                           ;RTDuC.c: 239: RecTmrInit();
  2042  002AF6  EC39  F017         	call	_RecTmrInit	;wreg free
  2043                           
  2044                           ;RTDuC.c: 241: ZeroMotors();
  2045  002AFA  ECF7  F00C         	call	_ZeroMotors	;wreg free
  2046                           
  2047                           ;RTDuC.c: 242: ZeroMotors();
  2048  002AFE  ECF7  F00C         	call	_ZeroMotors	;wreg free
  2049                           
  2050                           ;RTDuC.c: 244: InitializeInterrupts();
  2051  002B02  EC2E  F017         	call	_InitializeInterrupts	;wreg free
  2052                           
  2053                           ;RTDuC.c: 245: TRISAbits.RA3 = 0;
  2054  002B06  9692               	bcf	3986,3,c	;volatile
  2055                           
  2056                           ;RTDuC.c: 246: PORTAbits.RA3 = 1;
  2057  002B08  8680               	bsf	3968,3,c	;volatile
  2058  002B0A  0012               	return		;funcret
  2059  002B0C                     __end_of_initialize:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           intcon	equ	0xFF2
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           postdec1	equ	0xFE5
  2071                           fsr1h	equ	0xFE2
  2072                           fsr1l	equ	0xFE1
  2073                           indf2	equ	0xFDF
  2074                           postinc2	equ	0xFDE
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _ZeroMotors *****************
  2080 ;; Defined at:
  2081 ;;		line 322 in file "RTDuC.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  PrevAngle       3   54[BANK0 ] unsigned char 
  2086 ;;  average         3   51[BANK0 ] unsigned char 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;		None               void
  2089 ;; Registers used:
  2090 ;;		wreg, status,2, status,0, cstack
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;Total ram usage:        6 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    8
  2103 ;; This function calls:
  2104 ;;		_ImplementPIDMotion
  2105 ;;		_RTD2Angle
  2106 ;;		_ReadRTDpos
  2107 ;;		___ftadd
  2108 ;;		___ftdiv
  2109 ;;		___ftge
  2110 ;;		___fttol
  2111 ;;		_abs
  2112 ;;		_calculatePID
  2113 ;; This function is called by:
  2114 ;;		_main
  2115 ;;		_initialize
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text2
  2120  0019EE                     __ptext2:
  2121                           	opt stack 0
  2122  0019EE                     _ZeroMotors:
  2123                           	opt stack 21
  2124                           
  2125                           ;RTDuC.c: 324: double average, PrevAngle;
  2126                           ;RTDuC.c: 325: Ki = 2;
  2127                           
  2128                           ;incstack = 0
  2129  0019EE  0E00               	movlw	0
  2130  0019F0  0100               	movlb	0	; () banked
  2131  0019F2  6FB3               	movwf	_Ki& (0+255),b
  2132  0019F4  0E00               	movlw	0
  2133  0019F6  0100               	movlb	0	; () banked
  2134  0019F8  6FB4               	movwf	(_Ki+1)& (0+255),b
  2135  0019FA  0E40               	movlw	64
  2136  0019FC  0100               	movlb	0	; () banked
  2137  0019FE  6FB5               	movwf	(_Ki+2)& (0+255),b
  2138                           
  2139                           ;RTDuC.c: 326: Kp = 0.65;
  2140  001A00  0E66               	movlw	102
  2141  001A02  0100               	movlb	0	; () banked
  2142  001A04  6FB6               	movwf	_Kp& (0+255),b
  2143  001A06  0E26               	movlw	38
  2144  001A08  0100               	movlb	0	; () banked
  2145  001A0A  6FB7               	movwf	(_Kp+1)& (0+255),b
  2146  001A0C  0E3F               	movlw	63
  2147  001A0E  0100               	movlb	0	; () banked
  2148  001A10  6FB8               	movwf	(_Kp+2)& (0+255),b
  2149                           
  2150                           ;RTDuC.c: 327: Kd = 0;
  2151  001A12  0E00               	movlw	0
  2152  001A14  0100               	movlb	0	; () banked
  2153  001A16  6FB0               	movwf	_Kd& (0+255),b
  2154  001A18  0E00               	movlw	0
  2155  001A1A  0100               	movlb	0	; () banked
  2156  001A1C  6FB1               	movwf	(_Kd+1)& (0+255),b
  2157  001A1E  0E00               	movlw	0
  2158  001A20  0100               	movlb	0	; () banked
  2159  001A22  6FB2               	movwf	(_Kd+2)& (0+255),b
  2160                           
  2161                           ;RTDuC.c: 328: TMR0H = 0xDB;
  2162  001A24  0EDB               	movlw	219
  2163  001A26  6ED7               	movwf	4055,c	;volatile
  2164                           
  2165                           ;RTDuC.c: 329: TMR0L = 0x60;
  2166  001A28  0E60               	movlw	96
  2167  001A2A  6ED6               	movwf	4054,c	;volatile
  2168                           
  2169                           ;RTDuC.c: 330: PIDEnableFlag = 3;
  2170  001A2C  0E03               	movlw	3
  2171  001A2E  0100               	movlb	0	; () banked
  2172  001A30  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  2173                           
  2174                           ;RTDuC.c: 331: SetAngle = 0;
  2175  001A32  0E00               	movlw	0
  2176  001A34  6E3E               	movwf	_SetAngle,c
  2177  001A36  0E00               	movlw	0
  2178  001A38  6E3F               	movwf	_SetAngle+1,c
  2179  001A3A  0E00               	movlw	0
  2180  001A3C  6E40               	movwf	_SetAngle+2,c
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;RTDuC.c: 332: INTCONbits.GIE = 0;
  2184  001A3E  9EF2               	bcf	intcon,7,c	;volatile
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;RTDuC.c: 333: INTCONbits.PEIE = 0;
  2188  001A40  9CF2               	bcf	intcon,6,c	;volatile
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;RTDuC.c: 334: T0CONbits.TMR0ON = 1;
  2192  001A42  8ED5               	bsf	4053,7,c	;volatile
  2193  001A44  D000               	goto	l4231
  2194  001A46                     l4231:
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;RTDuC.c: 336: {
  2198                           ;RTDuC.c: 337: CurrentAngle = RTD2Angle(ReadRTDpos());
  2199  001A46  EC3E  F013         	call	_ReadRTDpos	;wreg free
  2200  001A4A  C019  F075         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  2201  001A4E  C01A  F076         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  2202  001A52  EC2D  F015         	call	_RTD2Angle	;wreg free
  2203  001A56  C075  F0AA         	movff	?_RTD2Angle,_CurrentAngle
  2204  001A5A  C076  F0AB         	movff	?_RTD2Angle+1,_CurrentAngle+1
  2205  001A5E  C077  F0AC         	movff	?_RTD2Angle+2,_CurrentAngle+2
  2206                           
  2207                           ;RTDuC.c: 338: calculatePID(CurrentAngle, SetAngle);
  2208  001A62  C0AA  F084         	movff	_CurrentAngle,calculatePID@angle
  2209  001A66  C0AB  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  2210  001A6A  C0AC  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  2211  001A6E  C03E  F087         	movff	_SetAngle,calculatePID@setpoint
  2212  001A72  C03F  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  2213  001A76  C040  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  2214  001A7A  ECC0  F00A         	call	_calculatePID	;wreg free
  2215                           
  2216                           ;RTDuC.c: 339: ImplementPIDMotion(motorInput);
  2217  001A7E  C0C2  F086         	movff	_motorInput,ImplementPIDMotion@PIDValue
  2218  001A82  C0C3  F087         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  2219  001A86  ECA8  F011         	call	_ImplementPIDMotion	;wreg free
  2220                           
  2221                           ;RTDuC.c: 340: while (INTCONbits.TMR0IF == 0);
  2222  001A8A  D000               	goto	l613
  2223  001A8C                     l613:
  2224  001A8C  A4F2               	btfss	intcon,2,c	;volatile
  2225  001A8E  D7FE               	goto	l613
  2226                           
  2227                           ;RTDuC.c: 341: INTCONbits.TMR0IF = 0;
  2228  001A90  94F2               	bcf	intcon,2,c	;volatile
  2229                           
  2230                           ;RTDuC.c: 342: TMR0H = 0xDB;
  2231  001A92  0EDB               	movlw	219
  2232  001A94  6ED7               	movwf	4055,c	;volatile
  2233                           
  2234                           ;RTDuC.c: 343: TMR0L = 0x60;
  2235  001A96  0E60               	movlw	96
  2236  001A98  6ED6               	movwf	4054,c	;volatile
  2237                           
  2238                           ;RTDuC.c: 344: average = (PrevAngle + CurrentAngle) / 2;
  2239  001A9A  C0AA  F023         	movff	_CurrentAngle,___ftadd@f2
  2240  001A9E  C0AB  F024         	movff	_CurrentAngle+1,___ftadd@f2+1
  2241  001AA2  C0AC  F025         	movff	_CurrentAngle+2,___ftadd@f2+2
  2242  001AA6  C096  F020         	movff	ZeroMotors@PrevAngle,___ftadd@f1
  2243  001AAA  C097  F021         	movff	ZeroMotors@PrevAngle+1,___ftadd@f1+1
  2244  001AAE  C098  F022         	movff	ZeroMotors@PrevAngle+2,___ftadd@f1+2
  2245  001AB2  EC15  F00C         	call	___ftadd	;wreg free
  2246  001AB6  C020  F02C         	movff	?___ftadd,___ftdiv@f1
  2247  001ABA  C021  F02D         	movff	?___ftadd+1,___ftdiv@f1+1
  2248  001ABE  C022  F02E         	movff	?___ftadd+2,___ftdiv@f1+2
  2249  001AC2  0E00               	movlw	0
  2250  001AC4  6E2F               	movwf	___ftdiv@f2,c
  2251  001AC6  0E00               	movlw	0
  2252  001AC8  6E30               	movwf	___ftdiv@f2+1,c
  2253  001ACA  0E40               	movlw	64
  2254  001ACC  6E31               	movwf	___ftdiv@f2+2,c
  2255  001ACE  EC9D  F00F         	call	___ftdiv	;wreg free
  2256  001AD2  C02C  F093         	movff	?___ftdiv,ZeroMotors@average
  2257  001AD6  C02D  F094         	movff	?___ftdiv+1,ZeroMotors@average+1
  2258  001ADA  C02E  F095         	movff	?___ftdiv+2,ZeroMotors@average+2
  2259                           
  2260                           ;RTDuC.c: 345: PrevAngle = CurrentAngle;
  2261  001ADE  C0AA  F096         	movff	_CurrentAngle,ZeroMotors@PrevAngle
  2262  001AE2  C0AB  F097         	movff	_CurrentAngle+1,ZeroMotors@PrevAngle+1
  2263  001AE6  C0AC  F098         	movff	_CurrentAngle+2,ZeroMotors@PrevAngle+2
  2264                           
  2265                           ;RTDuC.c: 346: }
  2266                           ;RTDuC.c: 347: while ((average > 1) && (abs(error) > 1));
  2267  001AEA  0E00               	movlw	0
  2268  001AEC  6E18               	movwf	___ftge@ff1,c
  2269  001AEE  0E80               	movlw	128
  2270  001AF0  6E19               	movwf	___ftge@ff1+1,c
  2271  001AF2  0E3F               	movlw	63
  2272  001AF4  6E1A               	movwf	___ftge@ff1+2,c
  2273  001AF6  C093  F01B         	movff	ZeroMotors@average,___ftge@ff2
  2274  001AFA  C094  F01C         	movff	ZeroMotors@average+1,___ftge@ff2+1
  2275  001AFE  C095  F01D         	movff	ZeroMotors@average+2,___ftge@ff2+2
  2276  001B02  EC4C  F012         	call	___ftge	;wreg free
  2277  001B06  B0D8               	btfsc	status,0,c
  2278  001B08  D01B               	goto	l4247
  2279  001B0A  C0B9  F075         	movff	_error,___fttol@f1
  2280  001B0E  C0BA  F076         	movff	_error+1,___fttol@f1+1
  2281  001B12  C0BB  F077         	movff	_error+2,___fttol@f1+2
  2282  001B16  EC04  F00F         	call	___fttol	;wreg free
  2283  001B1A  C075  F084         	movff	?___fttol,abs@a
  2284  001B1E  C076  F085         	movff	?___fttol+1,abs@a+1
  2285  001B22  EC00  F016         	call	_abs	;wreg free
  2286  001B26  0100               	movlb	0	; () banked
  2287  001B28  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  2288  001B2A  D00A               	goto	l4247
  2289  001B2C  0100               	movlb	0	; () banked
  2290  001B2E  5185               	movf	(?_abs+1)& (0+255),w,b
  2291  001B30  E18A               	bnz	l4231
  2292  001B32  0E02               	movlw	2
  2293  001B34  0100               	movlb	0	; () banked
  2294  001B36  5D84               	subwf	?_abs& (0+255),w,b
  2295  001B38  A0D8               	btfss	status,0,c
  2296  001B3A  D002               	goto	l4247
  2297  001B3C  D784               	goto	l4231
  2298                           
  2299                           ; BSR set to: 0
  2300  001B3E  D000               	goto	l4247
  2301  001B40                     l4247:
  2302                           
  2303                           ;RTDuC.c: 349: Kp = 0;
  2304  001B40  0E00               	movlw	0
  2305  001B42  0100               	movlb	0	; () banked
  2306  001B44  6FB6               	movwf	_Kp& (0+255),b
  2307  001B46  0E00               	movlw	0
  2308  001B48  0100               	movlb	0	; () banked
  2309  001B4A  6FB7               	movwf	(_Kp+1)& (0+255),b
  2310  001B4C  0E00               	movlw	0
  2311  001B4E  0100               	movlb	0	; () banked
  2312  001B50  6FB8               	movwf	(_Kp+2)& (0+255),b
  2313                           
  2314                           ;RTDuC.c: 350: Ki = 0;
  2315  001B52  0E00               	movlw	0
  2316  001B54  0100               	movlb	0	; () banked
  2317  001B56  6FB3               	movwf	_Ki& (0+255),b
  2318  001B58  0E00               	movlw	0
  2319  001B5A  0100               	movlb	0	; () banked
  2320  001B5C  6FB4               	movwf	(_Ki+1)& (0+255),b
  2321  001B5E  0E00               	movlw	0
  2322  001B60  0100               	movlb	0	; () banked
  2323  001B62  6FB5               	movwf	(_Ki+2)& (0+255),b
  2324                           
  2325                           ;RTDuC.c: 351: Kd = 0;
  2326  001B64  0E00               	movlw	0
  2327  001B66  0100               	movlb	0	; () banked
  2328  001B68  6FB0               	movwf	_Kd& (0+255),b
  2329  001B6A  0E00               	movlw	0
  2330  001B6C  0100               	movlb	0	; () banked
  2331  001B6E  6FB1               	movwf	(_Kd+1)& (0+255),b
  2332  001B70  0E00               	movlw	0
  2333  001B72  0100               	movlb	0	; () banked
  2334  001B74  6FB2               	movwf	(_Kd+2)& (0+255),b
  2335                           
  2336                           ; BSR set to: 0
  2337  001B76  0012               	return		;funcret
  2338  001B78                     __end_of_ZeroMotors:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           postinc0	equ	0xFEE
  2348                           wreg	equ	0xFE8
  2349                           postdec1	equ	0xFE5
  2350                           fsr1h	equ	0xFE2
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function _calculatePID *****************
  2359 ;; Defined at:
  2360 ;;		line 33 in file "PID.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  angle           3   36[BANK0 ] unsigned char 
  2363 ;;  setpoint        3   39[BANK0 ] unsigned char 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  derErr          3   42[BANK0 ] unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;		None               void
  2368 ;; Registers used:
  2369 ;;		wreg, status,2, status,0, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2375 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2376 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;Total ram usage:       15 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    7
  2382 ;; This function calls:
  2383 ;;		___ftadd
  2384 ;;		___ftdiv
  2385 ;;		___ftge
  2386 ;;		___ftmul
  2387 ;;		___ftneg
  2388 ;;		___ftsub
  2389 ;;		___fttol
  2390 ;; This function is called by:
  2391 ;;		_main
  2392 ;;		_ZeroMotors
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text3
  2397  001580                     __ptext3:
  2398                           	opt stack 0
  2399  001580                     _calculatePID:
  2400                           	opt stack 21
  2401                           
  2402                           ;PID.c: 35: double derErr;
  2403                           ;PID.c: 36: if (PIDEnableFlag == 3)
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;incstack = 0
  2407  001580  0E03               	movlw	3
  2408  001582  0100               	movlb	0	; () banked
  2409  001584  19C5               	xorwf	_PIDEnableFlag& (0+255),w,b
  2410  001586  A4D8               	btfss	status,2,c
  2411  001588  D01F               	goto	l4199
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;PID.c: 37: {
  2415                           ;PID.c: 38: error = 0;
  2416  00158A  0E00               	movlw	0
  2417  00158C  0100               	movlb	0	; () banked
  2418  00158E  6FB9               	movwf	_error& (0+255),b
  2419  001590  0E00               	movlw	0
  2420  001592  0100               	movlb	0	; () banked
  2421  001594  6FBA               	movwf	(_error+1)& (0+255),b
  2422  001596  0E00               	movlw	0
  2423  001598  0100               	movlb	0	; () banked
  2424  00159A  6FBB               	movwf	(_error+2)& (0+255),b
  2425                           
  2426                           ;PID.c: 39: prevErr = 0;
  2427  00159C  0E00               	movlw	0
  2428  00159E  0100               	movlb	0	; () banked
  2429  0015A0  6FBF               	movwf	_prevErr& (0+255),b
  2430  0015A2  0E00               	movlw	0
  2431  0015A4  0100               	movlb	0	; () banked
  2432  0015A6  6FC0               	movwf	(_prevErr+1)& (0+255),b
  2433  0015A8  0E00               	movlw	0
  2434  0015AA  0100               	movlb	0	; () banked
  2435  0015AC  6FC1               	movwf	(_prevErr+2)& (0+255),b
  2436                           
  2437                           ;PID.c: 40: intErr = 0;
  2438  0015AE  0E00               	movlw	0
  2439  0015B0  0100               	movlb	0	; () banked
  2440  0015B2  6FBC               	movwf	_intErr& (0+255),b
  2441  0015B4  0E00               	movlw	0
  2442  0015B6  0100               	movlb	0	; () banked
  2443  0015B8  6FBD               	movwf	(_intErr+1)& (0+255),b
  2444  0015BA  0E00               	movlw	0
  2445  0015BC  0100               	movlb	0	; () banked
  2446  0015BE  6FBE               	movwf	(_intErr+2)& (0+255),b
  2447                           
  2448                           ;PID.c: 41: PIDEnableFlag = 1;
  2449  0015C0  0E01               	movlw	1
  2450  0015C2  0100               	movlb	0	; () banked
  2451  0015C4  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  2452  0015C6  D000               	goto	l4199
  2453  0015C8                     l4199:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;PID.c: 42: }
  2457                           ;PID.c: 44: error = setpoint - angle;
  2458  0015C8  C084  F018         	movff	calculatePID@angle,___ftneg@f1
  2459  0015CC  C085  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  2460  0015D0  C086  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  2461  0015D4  EC62  F016         	call	___ftneg	;wreg free
  2462  0015D8  C018  F020         	movff	?___ftneg,___ftadd@f1
  2463  0015DC  C019  F021         	movff	?___ftneg+1,___ftadd@f1+1
  2464  0015E0  C01A  F022         	movff	?___ftneg+2,___ftadd@f1+2
  2465  0015E4  C087  F023         	movff	calculatePID@setpoint,___ftadd@f2
  2466  0015E8  C088  F024         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2467  0015EC  C089  F025         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2468  0015F0  EC15  F00C         	call	___ftadd	;wreg free
  2469  0015F4  C020  F0B9         	movff	?___ftadd,_error
  2470  0015F8  C021  F0BA         	movff	?___ftadd+1,_error+1
  2471  0015FC  C022  F0BB         	movff	?___ftadd+2,_error+2
  2472                           
  2473                           ;PID.c: 45: if (error > 180)
  2474  001600  0E00               	movlw	0
  2475  001602  6E18               	movwf	___ftge@ff1,c
  2476  001604  0E34               	movlw	52
  2477  001606  6E19               	movwf	___ftge@ff1+1,c
  2478  001608  0E43               	movlw	67
  2479  00160A  6E1A               	movwf	___ftge@ff1+2,c
  2480  00160C  C0B9  F01B         	movff	_error,___ftge@ff2
  2481  001610  C0BA  F01C         	movff	_error+1,___ftge@ff2+1
  2482  001614  C0BB  F01D         	movff	_error+2,___ftge@ff2+2
  2483  001618  EC4C  F012         	call	___ftge	;wreg free
  2484  00161C  B0D8               	btfsc	status,0,c
  2485  00161E  D015               	goto	l4205
  2486                           
  2487                           ;PID.c: 46: error -= 360;
  2488  001620  C0B9  F02C         	movff	_error,___ftsub@f1
  2489  001624  C0BA  F02D         	movff	_error+1,___ftsub@f1+1
  2490  001628  C0BB  F02E         	movff	_error+2,___ftsub@f1+2
  2491  00162C  0E00               	movlw	0
  2492  00162E  6E2F               	movwf	___ftsub@f2,c
  2493  001630  0EB4               	movlw	180
  2494  001632  6E30               	movwf	___ftsub@f2+1,c
  2495  001634  0E43               	movlw	67
  2496  001636  6E31               	movwf	___ftsub@f2+2,c
  2497  001638  EC44  F014         	call	___ftsub	;wreg free
  2498  00163C  C02C  F0B9         	movff	?___ftsub,_error
  2499  001640  C02D  F0BA         	movff	?___ftsub+1,_error+1
  2500  001644  C02E  F0BB         	movff	?___ftsub+2,_error+2
  2501  001648  D025               	goto	l149
  2502  00164A                     l4205:
  2503                           
  2504                           ;PID.c: 47: else if (error < -180)
  2505  00164A  C0B9  F018         	movff	_error,___ftge@ff1
  2506  00164E  C0BA  F019         	movff	_error+1,___ftge@ff1+1
  2507  001652  C0BB  F01A         	movff	_error+2,___ftge@ff1+2
  2508  001656  0E00               	movlw	0
  2509  001658  6E1B               	movwf	___ftge@ff2,c
  2510  00165A  0E34               	movlw	52
  2511  00165C  6E1C               	movwf	___ftge@ff2+1,c
  2512  00165E  0EC3               	movlw	195
  2513  001660  6E1D               	movwf	___ftge@ff2+2,c
  2514  001662  EC4C  F012         	call	___ftge	;wreg free
  2515  001666  B0D8               	btfsc	status,0,c
  2516  001668  D015               	goto	l149
  2517                           
  2518                           ;PID.c: 48: error += 360;
  2519  00166A  C0B9  F020         	movff	_error,___ftadd@f1
  2520  00166E  C0BA  F021         	movff	_error+1,___ftadd@f1+1
  2521  001672  C0BB  F022         	movff	_error+2,___ftadd@f1+2
  2522  001676  0E00               	movlw	0
  2523  001678  6E23               	movwf	___ftadd@f2,c
  2524  00167A  0EB4               	movlw	180
  2525  00167C  6E24               	movwf	___ftadd@f2+1,c
  2526  00167E  0E43               	movlw	67
  2527  001680  6E25               	movwf	___ftadd@f2+2,c
  2528  001682  EC15  F00C         	call	___ftadd	;wreg free
  2529  001686  C020  F0B9         	movff	?___ftadd,_error
  2530  00168A  C021  F0BA         	movff	?___ftadd+1,_error+1
  2531  00168E  C022  F0BB         	movff	?___ftadd+2,_error+2
  2532  001692  D000               	goto	l149
  2533  001694                     l149:
  2534                           
  2535                           ;PID.c: 50: derErr = error - prevErr;
  2536  001694  C0BF  F018         	movff	_prevErr,___ftneg@f1
  2537  001698  C0C0  F019         	movff	_prevErr+1,___ftneg@f1+1
  2538  00169C  C0C1  F01A         	movff	_prevErr+2,___ftneg@f1+2
  2539  0016A0  EC62  F016         	call	___ftneg	;wreg free
  2540  0016A4  C018  F020         	movff	?___ftneg,___ftadd@f1
  2541  0016A8  C019  F021         	movff	?___ftneg+1,___ftadd@f1+1
  2542  0016AC  C01A  F022         	movff	?___ftneg+2,___ftadd@f1+2
  2543  0016B0  C0B9  F023         	movff	_error,___ftadd@f2
  2544  0016B4  C0BA  F024         	movff	_error+1,___ftadd@f2+1
  2545  0016B8  C0BB  F025         	movff	_error+2,___ftadd@f2+2
  2546  0016BC  EC15  F00C         	call	___ftadd	;wreg free
  2547  0016C0  C020  F08A         	movff	?___ftadd,calculatePID@derErr
  2548  0016C4  C021  F08B         	movff	?___ftadd+1,calculatePID@derErr+1
  2549  0016C8  C022  F08C         	movff	?___ftadd+2,calculatePID@derErr+2
  2550                           
  2551                           ;PID.c: 51: intErr += error;
  2552  0016CC  C0BC  F020         	movff	_intErr,___ftadd@f1
  2553  0016D0  C0BD  F021         	movff	_intErr+1,___ftadd@f1+1
  2554  0016D4  C0BE  F022         	movff	_intErr+2,___ftadd@f1+2
  2555  0016D8  C0B9  F023         	movff	_error,___ftadd@f2
  2556  0016DC  C0BA  F024         	movff	_error+1,___ftadd@f2+1
  2557  0016E0  C0BB  F025         	movff	_error+2,___ftadd@f2+2
  2558  0016E4  EC15  F00C         	call	___ftadd	;wreg free
  2559  0016E8  C020  F0BC         	movff	?___ftadd,_intErr
  2560  0016EC  C021  F0BD         	movff	?___ftadd+1,_intErr+1
  2561  0016F0  C022  F0BE         	movff	?___ftadd+2,_intErr+2
  2562                           
  2563                           ;PID.c: 52: if (intErr > 2000)
  2564  0016F4  0E00               	movlw	0
  2565  0016F6  6E18               	movwf	___ftge@ff1,c
  2566  0016F8  0EFA               	movlw	250
  2567  0016FA  6E19               	movwf	___ftge@ff1+1,c
  2568  0016FC  0E44               	movlw	68
  2569  0016FE  6E1A               	movwf	___ftge@ff1+2,c
  2570  001700  C0BC  F01B         	movff	_intErr,___ftge@ff2
  2571  001704  C0BD  F01C         	movff	_intErr+1,___ftge@ff2+1
  2572  001708  C0BE  F01D         	movff	_intErr+2,___ftge@ff2+2
  2573  00170C  EC4C  F012         	call	___ftge	;wreg free
  2574  001710  B0D8               	btfsc	status,0,c
  2575  001712  D00A               	goto	l4211
  2576                           
  2577                           ;PID.c: 53: intErr = 2000;
  2578  001714  0E00               	movlw	0
  2579  001716  0100               	movlb	0	; () banked
  2580  001718  6FBC               	movwf	_intErr& (0+255),b
  2581  00171A  0EFA               	movlw	250
  2582  00171C  0100               	movlb	0	; () banked
  2583  00171E  6FBD               	movwf	(_intErr+1)& (0+255),b
  2584  001720  0E44               	movlw	68
  2585  001722  0100               	movlb	0	; () banked
  2586  001724  6FBE               	movwf	(_intErr+2)& (0+255),b
  2587  001726  D000               	goto	l4211
  2588  001728                     l4211:
  2589                           
  2590                           ;PID.c: 55: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2591  001728  C0BC  F069         	movff	_intErr,___ftmul@f2
  2592  00172C  C0BD  F06A         	movff	_intErr+1,___ftmul@f2+1
  2593  001730  C0BE  F06B         	movff	_intErr+2,___ftmul@f2+2
  2594  001734  C0B3  F066         	movff	_Ki,___ftmul@f1
  2595  001738  C0B4  F067         	movff	_Ki+1,___ftmul@f1+1
  2596  00173C  C0B5  F068         	movff	_Ki+2,___ftmul@f1+2
  2597  001740  ECBC  F00D         	call	___ftmul	;wreg free
  2598  001744  C066  F08D         	movff	?___ftmul,_calculatePID$3511
  2599  001748  C067  F08E         	movff	?___ftmul+1,_calculatePID$3511+1
  2600  00174C  C068  F08F         	movff	?___ftmul+2,_calculatePID$3511+2
  2601                           
  2602                           ;PID.c: 55: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2603  001750  C0CA  F069         	movff	_loopTime,___ftmul@f2
  2604  001754  C0CB  F06A         	movff	_loopTime+1,___ftmul@f2+1
  2605  001758  C0CC  F06B         	movff	_loopTime+2,___ftmul@f2+2
  2606  00175C  C08D  F066         	movff	_calculatePID$3511,___ftmul@f1
  2607  001760  C08E  F067         	movff	_calculatePID$3511+1,___ftmul@f1+1
  2608  001764  C08F  F068         	movff	_calculatePID$3511+2,___ftmul@f1+2
  2609  001768  ECBC  F00D         	call	___ftmul	;wreg free
  2610  00176C  C066  F023         	movff	?___ftmul,___ftadd@f2
  2611  001770  C067  F024         	movff	?___ftmul+1,___ftadd@f2+1
  2612  001774  C068  F025         	movff	?___ftmul+2,___ftadd@f2+2
  2613  001778  C0B9  F069         	movff	_error,___ftmul@f2
  2614  00177C  C0BA  F06A         	movff	_error+1,___ftmul@f2+1
  2615  001780  C0BB  F06B         	movff	_error+2,___ftmul@f2+2
  2616  001784  C0B6  F066         	movff	_Kp,___ftmul@f1
  2617  001788  C0B7  F067         	movff	_Kp+1,___ftmul@f1+1
  2618  00178C  C0B8  F068         	movff	_Kp+2,___ftmul@f1+2
  2619  001790  ECBC  F00D         	call	___ftmul	;wreg free
  2620  001794  C066  F020         	movff	?___ftmul,___ftadd@f1
  2621  001798  C067  F021         	movff	?___ftmul+1,___ftadd@f1+1
  2622  00179C  C068  F022         	movff	?___ftmul+2,___ftadd@f1+2
  2623  0017A0  EC15  F00C         	call	___ftadd	;wreg free
  2624  0017A4  C020  F090         	movff	?___ftadd,_calculatePID$3512
  2625  0017A8  C021  F091         	movff	?___ftadd+1,_calculatePID$3512+1
  2626  0017AC  C022  F092         	movff	?___ftadd+2,_calculatePID$3512+2
  2627                           
  2628                           ;PID.c: 55: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2629  0017B0  C0B0  F069         	movff	_Kd,___ftmul@f2
  2630  0017B4  C0B1  F06A         	movff	_Kd+1,___ftmul@f2+1
  2631  0017B8  C0B2  F06B         	movff	_Kd+2,___ftmul@f2+2
  2632  0017BC  C0CA  F02F         	movff	_loopTime,___ftdiv@f2
  2633  0017C0  C0CB  F030         	movff	_loopTime+1,___ftdiv@f2+1
  2634  0017C4  C0CC  F031         	movff	_loopTime+2,___ftdiv@f2+2
  2635  0017C8  C08A  F02C         	movff	calculatePID@derErr,___ftdiv@f1
  2636  0017CC  C08B  F02D         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2637  0017D0  C08C  F02E         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2638  0017D4  EC9D  F00F         	call	___ftdiv	;wreg free
  2639  0017D8  C02C  F066         	movff	?___ftdiv,___ftmul@f1
  2640  0017DC  C02D  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  2641  0017E0  C02E  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  2642  0017E4  ECBC  F00D         	call	___ftmul	;wreg free
  2643  0017E8  C066  F023         	movff	?___ftmul,___ftadd@f2
  2644  0017EC  C067  F024         	movff	?___ftmul+1,___ftadd@f2+1
  2645  0017F0  C068  F025         	movff	?___ftmul+2,___ftadd@f2+2
  2646  0017F4  C090  F020         	movff	_calculatePID$3512,___ftadd@f1
  2647  0017F8  C091  F021         	movff	_calculatePID$3512+1,___ftadd@f1+1
  2648  0017FC  C092  F022         	movff	_calculatePID$3512+2,___ftadd@f1+2
  2649  001800  EC15  F00C         	call	___ftadd	;wreg free
  2650  001804  C020  F075         	movff	?___ftadd,___fttol@f1
  2651  001808  C021  F076         	movff	?___ftadd+1,___fttol@f1+1
  2652  00180C  C022  F077         	movff	?___ftadd+2,___fttol@f1+2
  2653  001810  EC04  F00F         	call	___fttol	;wreg free
  2654  001814  C075  F0C2         	movff	?___fttol,_motorInput
  2655  001818  C076  F0C3         	movff	?___fttol+1,_motorInput+1
  2656                           
  2657                           ;PID.c: 57: prevErr = error;
  2658  00181C  C0B9  F0BF         	movff	_error,_prevErr
  2659  001820  C0BA  F0C0         	movff	_error+1,_prevErr+1
  2660  001824  C0BB  F0C1         	movff	_error+2,_prevErr+2
  2661  001828  0012               	return		;funcret
  2662  00182A                     __end_of_calculatePID:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           prodh	equ	0xFF4
  2669                           prodl	equ	0xFF3
  2670                           intcon	equ	0xFF2
  2671                           postinc0	equ	0xFEE
  2672                           wreg	equ	0xFE8
  2673                           postdec1	equ	0xFE5
  2674                           fsr1h	equ	0xFE2
  2675                           fsr1l	equ	0xFE1
  2676                           indf2	equ	0xFDF
  2677                           postinc2	equ	0xFDE
  2678                           fsr2h	equ	0xFDA
  2679                           fsr2l	equ	0xFD9
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function ___fttol *****************
  2683 ;; Defined at:
  2684 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  f1              3   21[BANK0 ] float 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  lval            4   31[BANK0 ] unsigned long 
  2689 ;;  exp1            1   35[BANK0 ] unsigned char 
  2690 ;;  sign1           1   30[BANK0 ] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  4   21[BANK0 ] long 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:       15 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_calculatePID
  2711 ;;		_ZeroMotors
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text4
  2716  001E08                     __ptext4:
  2717                           	opt stack 0
  2718  001E08                     ___fttol:
  2719                           	opt stack 23
  2720                           
  2721                           ;incstack = 0
  2722  001E08  C077  F079         	movff	___fttol@f1+2,??___fttol
  2723  001E0C  0100               	movlb	0	; () banked
  2724  001E0E  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2725  001E10  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2726  001E12  0100               	movlb	0	; () banked
  2727  001E14  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2728  001E16  0100               	movlb	0	; () banked
  2729  001E18  3779               	rlcf	??___fttol& (0+255),f,b
  2730  001E1A  E301               	bnc	u3501
  2731  001E1C  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2732  001E1E                     u3501:
  2733  001E1E  0100               	movlb	0	; () banked
  2734  001E20  5179               	movf	??___fttol& (0+255),w,b
  2735  001E22  0100               	movlb	0	; () banked
  2736  001E24  6F83               	movwf	___fttol@exp1& (0+255),b
  2737  001E26  0100               	movlb	0	; () banked
  2738  001E28  5183               	movf	___fttol@exp1& (0+255),w,b
  2739  001E2A  A4D8               	btfss	status,2,c
  2740  001E2C  D002               	goto	l4129
  2741  001E2E  D051               	goto	l4153
  2742                           
  2743                           ; BSR set to: 0
  2744                           
  2745                           ; BSR set to: 0
  2746  001E30  D083               	goto	l1128
  2747  001E32                     l4129:
  2748                           
  2749                           ; BSR set to: 0
  2750  001E32  0E17               	movlw	23
  2751  001E34  0100               	movlb	0	; () banked
  2752  001E36  6F79               	movwf	??___fttol& (0+255),b
  2753  001E38  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2754  001E3C  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2755  001E40  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2756  001E44  0100               	movlb	0	; () banked
  2757  001E46  2979               	incf	??___fttol& (0+255),w,b
  2758  001E48  0100               	movlb	0	; () banked
  2759  001E4A  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2760  001E4C  D005               	goto	u3520
  2761  001E4E                     u3525:
  2762  001E4E  0100               	movlb	0	; () banked
  2763  001E50  90D8               	bcf	status,0,c
  2764  001E52  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2765  001E54  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2766  001E56  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2767  001E58                     u3520:
  2768  001E58  0100               	movlb	0	; () banked
  2769  001E5A  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2770  001E5C  D7F8               	goto	u3525
  2771  001E5E  0100               	movlb	0	; () banked
  2772  001E60  517A               	movf	(??___fttol+1)& (0+255),w,b
  2773  001E62  0100               	movlb	0	; () banked
  2774  001E64  6F7E               	movwf	___fttol@sign1& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777  001E66  0100               	movlb	0	; () banked
  2778  001E68  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2779                           
  2780                           ; BSR set to: 0
  2781  001E6A  0EFF               	movlw	255
  2782  001E6C  0100               	movlb	0	; () banked
  2783  001E6E  1775               	andwf	___fttol@f1& (0+255),f,b
  2784  001E70  0EFF               	movlw	255
  2785  001E72  0100               	movlb	0	; () banked
  2786  001E74  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2787  001E76  0E00               	movlw	0
  2788  001E78  0100               	movlb	0	; () banked
  2789  001E7A  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2790                           
  2791                           ; BSR set to: 0
  2792  001E7C  0100               	movlb	0	; () banked
  2793  001E7E  5175               	movf	___fttol@f1& (0+255),w,b
  2794  001E80  0100               	movlb	0	; () banked
  2795  001E82  6F7F               	movwf	___fttol@lval& (0+255),b
  2796  001E84  0100               	movlb	0	; () banked
  2797  001E86  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2798  001E88  0100               	movlb	0	; () banked
  2799  001E8A  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2800  001E8C  0100               	movlb	0	; () banked
  2801  001E8E  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2802  001E90  0100               	movlb	0	; () banked
  2803  001E92  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2804  001E94  0100               	movlb	0	; () banked
  2805  001E96  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808  001E98  0E8E               	movlw	142
  2809  001E9A  0100               	movlb	0	; () banked
  2810  001E9C  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2811                           
  2812                           ; BSR set to: 0
  2813  001E9E  0100               	movlb	0	; () banked
  2814  001EA0  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2815  001EA2  D013               	goto	l4151
  2816                           
  2817                           ; BSR set to: 0
  2818  001EA4  0100               	movlb	0	; () banked
  2819  001EA6  5183               	movf	___fttol@exp1& (0+255),w,b
  2820  001EA8  0A80               	xorlw	128
  2821  001EAA  0F8F               	addlw	143
  2822  001EAC  B0D8               	btfsc	status,0,c
  2823  001EAE  D003               	goto	l4147
  2824  001EB0  D010               	goto	l4153
  2825                           
  2826                           ; BSR set to: 0
  2827                           
  2828                           ; BSR set to: 0
  2829  001EB2  D042               	goto	l1128
  2830                           
  2831                           ; BSR set to: 0
  2832  001EB4  D000               	goto	l4147
  2833  001EB6                     l4147:
  2834                           
  2835                           ; BSR set to: 0
  2836  001EB6  0100               	movlb	0	; () banked
  2837  001EB8  90D8               	bcf	status,0,c
  2838  001EBA  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2839  001EBC  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2840  001EBE  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2841  001EC0  337F               	rrcf	___fttol@lval& (0+255),f,b
  2842                           
  2843                           ; BSR set to: 0
  2844  001EC2  0100               	movlb	0	; () banked
  2845  001EC4  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2846  001EC6  D7F7               	goto	l4147
  2847                           
  2848                           ; BSR set to: 0
  2849  001EC8  D01F               	goto	l4161
  2850  001ECA                     l4151:
  2851                           
  2852                           ; BSR set to: 0
  2853  001ECA  0E17               	movlw	23
  2854  001ECC  0100               	movlb	0	; () banked
  2855  001ECE  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2856  001ED0  D014               	goto	l4159
  2857  001ED2                     l4153:
  2858                           
  2859                           ; BSR set to: 0
  2860  001ED2  0E00               	movlw	0
  2861  001ED4  0100               	movlb	0	; () banked
  2862  001ED6  6F75               	movwf	?___fttol& (0+255),b
  2863  001ED8  0E00               	movlw	0
  2864  001EDA  6F76               	movwf	(?___fttol+1)& (0+255),b
  2865  001EDC  0E00               	movlw	0
  2866  001EDE  6F77               	movwf	(?___fttol+2)& (0+255),b
  2867  001EE0  0E00               	movlw	0
  2868  001EE2  6F78               	movwf	(?___fttol+3)& (0+255),b
  2869                           
  2870                           ; BSR set to: 0
  2871  001EE4  D029               	goto	l1128
  2872                           
  2873                           ; BSR set to: 0
  2874  001EE6  D009               	goto	l4159
  2875  001EE8                     l4157:
  2876                           
  2877                           ; BSR set to: 0
  2878  001EE8  0100               	movlb	0	; () banked
  2879  001EEA  90D8               	bcf	status,0,c
  2880  001EEC  377F               	rlcf	___fttol@lval& (0+255),f,b
  2881  001EEE  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2882  001EF0  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2883  001EF2  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2884  001EF4  0100               	movlb	0	; () banked
  2885  001EF6  0783               	decf	___fttol@exp1& (0+255),f,b
  2886  001EF8  D000               	goto	l4159
  2887  001EFA                     l4159:
  2888                           
  2889                           ; BSR set to: 0
  2890  001EFA  0100               	movlb	0	; () banked
  2891  001EFC  5183               	movf	___fttol@exp1& (0+255),w,b
  2892  001EFE  0100               	movlb	0	; () banked
  2893  001F00  B4D8               	btfsc	status,2,c
  2894  001F02  D002               	goto	l4161
  2895  001F04  D7F1               	goto	l4157
  2896                           
  2897                           ; BSR set to: 0
  2898  001F06  D000               	goto	l4161
  2899  001F08                     l4161:
  2900                           
  2901                           ; BSR set to: 0
  2902  001F08  0100               	movlb	0	; () banked
  2903  001F0A  517E               	movf	___fttol@sign1& (0+255),w,b
  2904  001F0C  0100               	movlb	0	; () banked
  2905  001F0E  B4D8               	btfsc	status,2,c
  2906  001F10  D00A               	goto	l4165
  2907                           
  2908                           ; BSR set to: 0
  2909  001F12  0100               	movlb	0	; () banked
  2910  001F14  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2911  001F16  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2912  001F18  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2913  001F1A  6D7F               	negf	___fttol@lval& (0+255),b
  2914  001F1C  0E00               	movlw	0
  2915  001F1E  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2916  001F20  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2917  001F22  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2918  001F24  D000               	goto	l4165
  2919  001F26                     l4165:
  2920                           
  2921                           ; BSR set to: 0
  2922  001F26  C07F  F075         	movff	___fttol@lval,?___fttol
  2923  001F2A  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2924  001F2E  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2925  001F32  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2926  001F36  D000               	goto	l1128
  2927  001F38                     l1128:
  2928                           
  2929                           ; BSR set to: 0
  2930  001F38  0012               	return		;funcret
  2931  001F3A                     __end_of___fttol:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           prodh	equ	0xFF4
  2938                           prodl	equ	0xFF3
  2939                           intcon	equ	0xFF2
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1h	equ	0xFE2
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function ___ftsub *****************
  2952 ;; Defined at:
  2953 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  f1              3   43[COMRAM] float 
  2956 ;;  f2              3   46[COMRAM] float 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  3   43[COMRAM] float 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        6 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    6
  2975 ;; This function calls:
  2976 ;;		___ftadd
  2977 ;; This function is called by:
  2978 ;;		_calculatePID
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text5
  2983  002888                     __ptext5:
  2984                           	opt stack 0
  2985  002888                     ___ftsub:
  2986                           	opt stack 21
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;incstack = 0
  2990  002888  502F               	movf	___ftsub@f2,w,c
  2991  00288A  1030               	iorwf	___ftsub@f2+1,w,c
  2992  00288C  1031               	iorwf	___ftsub@f2+2,w,c
  2993  00288E  B4D8               	btfsc	status,2,c
  2994  002890  D007               	goto	l4119
  2995  002892  0E00               	movlw	0
  2996  002894  1A2F               	xorwf	___ftsub@f2,f,c
  2997  002896  0E00               	movlw	0
  2998  002898  1A30               	xorwf	___ftsub@f2+1,f,c
  2999  00289A  0E80               	movlw	128
  3000  00289C  1A31               	xorwf	___ftsub@f2+2,f,c
  3001  00289E  D000               	goto	l4119
  3002  0028A0                     l4119:
  3003  0028A0  C02C  F020         	movff	___ftsub@f1,___ftadd@f1
  3004  0028A4  C02D  F021         	movff	___ftsub@f1+1,___ftadd@f1+1
  3005  0028A8  C02E  F022         	movff	___ftsub@f1+2,___ftadd@f1+2
  3006  0028AC  C02F  F023         	movff	___ftsub@f2,___ftadd@f2
  3007  0028B0  C030  F024         	movff	___ftsub@f2+1,___ftadd@f2+1
  3008  0028B4  C031  F025         	movff	___ftsub@f2+2,___ftadd@f2+2
  3009  0028B8  EC15  F00C         	call	___ftadd	;wreg free
  3010  0028BC  C020  F02C         	movff	?___ftadd,?___ftsub
  3011  0028C0  C021  F02D         	movff	?___ftadd+1,?___ftsub+1
  3012  0028C4  C022  F02E         	movff	?___ftadd+2,?___ftsub+2
  3013  0028C8  D000               	goto	l1124
  3014  0028CA                     l1124:
  3015  0028CA  0012               	return		;funcret
  3016  0028CC                     __end_of___ftsub:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           intcon	equ	0xFF2
  3025                           postinc0	equ	0xFEE
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1h	equ	0xFE2
  3029                           fsr1l	equ	0xFE1
  3030                           indf2	equ	0xFDF
  3031                           postinc2	equ	0xFDE
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function ___ftadd *****************
  3037 ;; Defined at:
  3038 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  f1              3   31[COMRAM] float 
  3041 ;;  f2              3   34[COMRAM] float 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  exp1            1   42[COMRAM] unsigned char 
  3044 ;;  exp2            1   41[COMRAM] unsigned char 
  3045 ;;  sign            1   40[COMRAM] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  3   31[COMRAM] float 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:       12 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    5
  3062 ;; This function calls:
  3063 ;;		___ftpack
  3064 ;; This function is called by:
  3065 ;;		_calculatePID
  3066 ;;		_ZeroMotors
  3067 ;;		___ftsub
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text6
  3072  00182A                     __ptext6:
  3073                           	opt stack 0
  3074  00182A                     ___ftadd:
  3075                           	opt stack 21
  3076                           
  3077                           ;incstack = 0
  3078  00182A  C022  F026         	movff	___ftadd@f1+2,??___ftadd
  3079  00182E  6A27               	clrf	(??___ftadd+1)& (0+255),c
  3080  001830  6A28               	clrf	(??___ftadd+2)& (0+255),c
  3081  001832  3421               	rlcf	___ftadd@f1+1,w,c
  3082  001834  3626               	rlcf	??___ftadd& (0+255),f,c
  3083  001836  E301               	bnc	u3161
  3084  001838  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  3085  00183A                     u3161:
  3086  00183A  5026               	movf	??___ftadd,w,c
  3087  00183C  6E2B               	movwf	___ftadd@exp1,c
  3088  00183E  C025  F026         	movff	___ftadd@f2+2,??___ftadd
  3089  001842  6A27               	clrf	(??___ftadd+1)& (0+255),c
  3090  001844  6A28               	clrf	(??___ftadd+2)& (0+255),c
  3091  001846  3424               	rlcf	___ftadd@f2+1,w,c
  3092  001848  3626               	rlcf	??___ftadd& (0+255),f,c
  3093  00184A  E301               	bnc	u3171
  3094  00184C  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  3095  00184E                     u3171:
  3096  00184E  5026               	movf	??___ftadd,w,c
  3097  001850  6E2A               	movwf	___ftadd@exp2,c
  3098  001852  502B               	movf	___ftadd@exp1,w,c
  3099  001854  B4D8               	btfsc	status,2,c
  3100  001856  D00B               	goto	l1060
  3101  001858  502A               	movf	___ftadd@exp2,w,c
  3102  00185A  5C2B               	subwf	___ftadd@exp1,w,c
  3103  00185C  B0D8               	btfsc	status,0,c
  3104  00185E  D00E               	goto	l3955
  3105  001860  502B               	movf	___ftadd@exp1,w,c
  3106  001862  0800               	sublw	0
  3107  001864  242A               	addwf	___ftadd@exp2,w,c
  3108  001866  6E26               	movwf	??___ftadd& (0+255),c
  3109  001868  0E18               	movlw	24
  3110  00186A  6426               	cpfsgt	??___ftadd,c
  3111  00186C  D007               	goto	l3955
  3112  00186E                     l1060:
  3113  00186E  C023  F020         	movff	___ftadd@f2,?___ftadd
  3114  001872  C024  F021         	movff	___ftadd@f2+1,?___ftadd+1
  3115  001876  C025  F022         	movff	___ftadd@f2+2,?___ftadd+2
  3116  00187A  D0B8               	goto	l1061
  3117  00187C                     l3955:
  3118  00187C  502A               	movf	___ftadd@exp2,w,c
  3119  00187E  B4D8               	btfsc	status,2,c
  3120  001880  D00B               	goto	l1064
  3121  001882  502B               	movf	___ftadd@exp1,w,c
  3122  001884  5C2A               	subwf	___ftadd@exp2,w,c
  3123  001886  B0D8               	btfsc	status,0,c
  3124  001888  D00E               	goto	l3961
  3125  00188A  502A               	movf	___ftadd@exp2,w,c
  3126  00188C  0800               	sublw	0
  3127  00188E  242B               	addwf	___ftadd@exp1,w,c
  3128  001890  6E26               	movwf	??___ftadd& (0+255),c
  3129  001892  0E18               	movlw	24
  3130  001894  6426               	cpfsgt	??___ftadd,c
  3131  001896  D007               	goto	l3961
  3132  001898                     l1064:
  3133  001898  C020  F020         	movff	___ftadd@f1,?___ftadd
  3134  00189C  C021  F021         	movff	___ftadd@f1+1,?___ftadd+1
  3135  0018A0  C022  F022         	movff	___ftadd@f1+2,?___ftadd+2
  3136  0018A4  D0A3               	goto	l1061
  3137  0018A6                     l3961:
  3138  0018A6  0E06               	movlw	6
  3139  0018A8  6E29               	movwf	___ftadd@sign,c
  3140  0018AA  AE22               	btfss	___ftadd@f1+2,7,c
  3141  0018AC  D002               	goto	l3967
  3142  0018AE  8E29               	bsf	___ftadd@sign,7,c
  3143  0018B0  D000               	goto	l3967
  3144  0018B2                     l3967:
  3145  0018B2  BE25               	btfsc	___ftadd@f2+2,7,c
  3146  0018B4  8C29               	bsf	___ftadd@sign,6,c
  3147  0018B6  8E21               	bsf	___ftadd@f1+1,7,c
  3148  0018B8  0EFF               	movlw	255
  3149  0018BA  1620               	andwf	___ftadd@f1,f,c
  3150  0018BC  0EFF               	movlw	255
  3151  0018BE  1621               	andwf	___ftadd@f1+1,f,c
  3152  0018C0  0E00               	movlw	0
  3153  0018C2  1622               	andwf	___ftadd@f1+2,f,c
  3154  0018C4  8E24               	bsf	___ftadd@f2+1,7,c
  3155  0018C6  0EFF               	movlw	255
  3156  0018C8  1623               	andwf	___ftadd@f2,f,c
  3157  0018CA  0EFF               	movlw	255
  3158  0018CC  1624               	andwf	___ftadd@f2+1,f,c
  3159  0018CE  0E00               	movlw	0
  3160  0018D0  1625               	andwf	___ftadd@f2+2,f,c
  3161  0018D2  502A               	movf	___ftadd@exp2,w,c
  3162  0018D4  5C2B               	subwf	___ftadd@exp1,w,c
  3163  0018D6  B0D8               	btfsc	status,0,c
  3164  0018D8  D01E               	goto	l3987
  3165  0018DA                     l3977:
  3166  0018DA  90D8               	bcf	status,0,c
  3167  0018DC  3623               	rlcf	___ftadd@f2,f,c
  3168  0018DE  3624               	rlcf	___ftadd@f2+1,f,c
  3169  0018E0  3625               	rlcf	___ftadd@f2+2,f,c
  3170  0018E2  062A               	decf	___ftadd@exp2,f,c
  3171  0018E4  502B               	movf	___ftadd@exp1,w,c
  3172  0018E6  182A               	xorwf	___ftadd@exp2,w,c
  3173  0018E8  B4D8               	btfsc	status,2,c
  3174  0018EA  D00F               	goto	l3985
  3175  0018EC  0629               	decf	___ftadd@sign,f,c
  3176  0018EE  C029  F026         	movff	___ftadd@sign,??___ftadd
  3177  0018F2  0E07               	movlw	7
  3178  0018F4  1626               	andwf	??___ftadd,f,c
  3179  0018F6  B4D8               	btfsc	status,2,c
  3180  0018F8  D008               	goto	l3985
  3181  0018FA  D7EF               	goto	l3977
  3182  0018FC  D006               	goto	l3985
  3183  0018FE                     l3983:
  3184  0018FE  90D8               	bcf	status,0,c
  3185  001900  3222               	rrcf	___ftadd@f1+2,f,c
  3186  001902  3221               	rrcf	___ftadd@f1+1,f,c
  3187  001904  3220               	rrcf	___ftadd@f1,f,c
  3188  001906  2A2B               	incf	___ftadd@exp1,f,c
  3189  001908  D000               	goto	l3985
  3190  00190A                     l3985:
  3191  00190A  502A               	movf	___ftadd@exp2,w,c
  3192  00190C  182B               	xorwf	___ftadd@exp1,w,c
  3193  00190E  B4D8               	btfsc	status,2,c
  3194  001910  D024               	goto	l1075
  3195  001912  D7F5               	goto	l3983
  3196  001914  D022               	goto	l1075
  3197  001916                     l3987:
  3198  001916  502B               	movf	___ftadd@exp1,w,c
  3199  001918  5C2A               	subwf	___ftadd@exp2,w,c
  3200  00191A  B0D8               	btfsc	status,0,c
  3201  00191C  D01E               	goto	l1075
  3202  00191E                     l3989:
  3203  00191E  90D8               	bcf	status,0,c
  3204  001920  3620               	rlcf	___ftadd@f1,f,c
  3205  001922  3621               	rlcf	___ftadd@f1+1,f,c
  3206  001924  3622               	rlcf	___ftadd@f1+2,f,c
  3207  001926  062B               	decf	___ftadd@exp1,f,c
  3208  001928  502B               	movf	___ftadd@exp1,w,c
  3209  00192A  182A               	xorwf	___ftadd@exp2,w,c
  3210  00192C  B4D8               	btfsc	status,2,c
  3211  00192E  D00F               	goto	l3997
  3212  001930  0629               	decf	___ftadd@sign,f,c
  3213  001932  C029  F026         	movff	___ftadd@sign,??___ftadd
  3214  001936  0E07               	movlw	7
  3215  001938  1626               	andwf	??___ftadd,f,c
  3216  00193A  B4D8               	btfsc	status,2,c
  3217  00193C  D008               	goto	l3997
  3218  00193E  D7EF               	goto	l3989
  3219  001940  D006               	goto	l3997
  3220  001942                     l3995:
  3221  001942  90D8               	bcf	status,0,c
  3222  001944  3225               	rrcf	___ftadd@f2+2,f,c
  3223  001946  3224               	rrcf	___ftadd@f2+1,f,c
  3224  001948  3223               	rrcf	___ftadd@f2,f,c
  3225  00194A  2A2A               	incf	___ftadd@exp2,f,c
  3226  00194C  D000               	goto	l3997
  3227  00194E                     l3997:
  3228  00194E  502A               	movf	___ftadd@exp2,w,c
  3229  001950  182B               	xorwf	___ftadd@exp1,w,c
  3230  001952  B4D8               	btfsc	status,2,c
  3231  001954  D002               	goto	l1075
  3232  001956  D7F5               	goto	l3995
  3233  001958  D000               	goto	l1075
  3234  00195A                     l1075:
  3235  00195A  AE29               	btfss	___ftadd@sign,7,c
  3236  00195C  D00C               	goto	l1084
  3237  00195E  0EFF               	movlw	255
  3238  001960  1A20               	xorwf	___ftadd@f1,f,c
  3239  001962  0EFF               	movlw	255
  3240  001964  1A21               	xorwf	___ftadd@f1+1,f,c
  3241  001966  0EFF               	movlw	255
  3242  001968  1A22               	xorwf	___ftadd@f1+2,f,c
  3243  00196A  0E01               	movlw	1
  3244  00196C  2620               	addwf	___ftadd@f1,f,c
  3245  00196E  0E00               	movlw	0
  3246  001970  2221               	addwfc	___ftadd@f1+1,f,c
  3247  001972  0E00               	movlw	0
  3248  001974  2222               	addwfc	___ftadd@f1+2,f,c
  3249  001976                     l1084:
  3250  001976  AC29               	btfss	___ftadd@sign,6,c
  3251  001978  D00D               	goto	l4003
  3252  00197A  0EFF               	movlw	255
  3253  00197C  1A23               	xorwf	___ftadd@f2,f,c
  3254  00197E  0EFF               	movlw	255
  3255  001980  1A24               	xorwf	___ftadd@f2+1,f,c
  3256  001982  0EFF               	movlw	255
  3257  001984  1A25               	xorwf	___ftadd@f2+2,f,c
  3258  001986  0E01               	movlw	1
  3259  001988  2623               	addwf	___ftadd@f2,f,c
  3260  00198A  0E00               	movlw	0
  3261  00198C  2224               	addwfc	___ftadd@f2+1,f,c
  3262  00198E  0E00               	movlw	0
  3263  001990  2225               	addwfc	___ftadd@f2+2,f,c
  3264  001992  D000               	goto	l4003
  3265  001994                     l4003:
  3266  001994  0E00               	movlw	0
  3267  001996  6E29               	movwf	___ftadd@sign,c
  3268  001998  5020               	movf	___ftadd@f1,w,c
  3269  00199A  2623               	addwf	___ftadd@f2,f,c
  3270  00199C  5021               	movf	___ftadd@f1+1,w,c
  3271  00199E  2224               	addwfc	___ftadd@f2+1,f,c
  3272  0019A0  5022               	movf	___ftadd@f1+2,w,c
  3273  0019A2  2225               	addwfc	___ftadd@f2+2,f,c
  3274  0019A4  AE25               	btfss	___ftadd@f2+2,7,c
  3275  0019A6  D00F               	goto	l4013
  3276  0019A8  0EFF               	movlw	255
  3277  0019AA  1A23               	xorwf	___ftadd@f2,f,c
  3278  0019AC  0EFF               	movlw	255
  3279  0019AE  1A24               	xorwf	___ftadd@f2+1,f,c
  3280  0019B0  0EFF               	movlw	255
  3281  0019B2  1A25               	xorwf	___ftadd@f2+2,f,c
  3282  0019B4  0E01               	movlw	1
  3283  0019B6  2623               	addwf	___ftadd@f2,f,c
  3284  0019B8  0E00               	movlw	0
  3285  0019BA  2224               	addwfc	___ftadd@f2+1,f,c
  3286  0019BC  0E00               	movlw	0
  3287  0019BE  2225               	addwfc	___ftadd@f2+2,f,c
  3288  0019C0  0E01               	movlw	1
  3289  0019C2  6E29               	movwf	___ftadd@sign,c
  3290  0019C4  D000               	goto	l4013
  3291  0019C6                     l4013:
  3292  0019C6  C023  F018         	movff	___ftadd@f2,___ftpack@arg
  3293  0019CA  C024  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  3294  0019CE  C025  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  3295  0019D2  C02B  F01B         	movff	___ftadd@exp1,___ftpack@exp
  3296  0019D6  C029  F01C         	movff	___ftadd@sign,___ftpack@sign
  3297  0019DA  EC8D  F010         	call	___ftpack	;wreg free
  3298  0019DE  C018  F020         	movff	?___ftpack,?___ftadd
  3299  0019E2  C019  F021         	movff	?___ftpack+1,?___ftadd+1
  3300  0019E6  C01A  F022         	movff	?___ftpack+2,?___ftadd+2
  3301  0019EA  D000               	goto	l1061
  3302  0019EC                     l1061:
  3303  0019EC  0012               	return		;funcret
  3304  0019EE                     __end_of___ftadd:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           prodh	equ	0xFF4
  3311                           prodl	equ	0xFF3
  3312                           intcon	equ	0xFF2
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postdec1	equ	0xFE5
  3316                           fsr1h	equ	0xFE2
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function ___ftneg *****************
  3325 ;; Defined at:
  3326 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  f1              3   23[COMRAM] float 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;		None
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  3   23[COMRAM] float 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3340 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;Total ram usage:        3 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    4
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_calculatePID
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text7
  3355  002CC4                     __ptext7:
  3356                           	opt stack 0
  3357  002CC4                     ___ftneg:
  3358                           	opt stack 23
  3359                           
  3360                           ;incstack = 0
  3361  002CC4  5018               	movf	___ftneg@f1,w,c
  3362  002CC6  1019               	iorwf	___ftneg@f1+1,w,c
  3363  002CC8  101A               	iorwf	___ftneg@f1+2,w,c
  3364  002CCA  B4D8               	btfsc	status,2,c
  3365  002CCC  D006               	goto	l1117
  3366  002CCE  0E00               	movlw	0
  3367  002CD0  1A18               	xorwf	___ftneg@f1,f,c
  3368  002CD2  0E00               	movlw	0
  3369  002CD4  1A19               	xorwf	___ftneg@f1+1,f,c
  3370  002CD6  0E80               	movlw	128
  3371  002CD8  1A1A               	xorwf	___ftneg@f1+2,f,c
  3372  002CDA                     l1117:
  3373  002CDA  C018  F018         	movff	___ftneg@f1,?___ftneg
  3374  002CDE  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  3375  002CE2  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  3376  002CE6  0012               	return		;funcret
  3377  002CE8                     __end_of___ftneg:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           postdec1	equ	0xFE5
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8
  3396                           
  3397 ;; *************** function ___ftge *****************
  3398 ;; Defined at:
  3399 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  ff1             3   23[COMRAM] float 
  3402 ;;  ff2             3   26[COMRAM] float 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;		None               void
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3414 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;Total ram usage:        9 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    4
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_calculatePID
  3425 ;;		_ZeroMotors
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text8
  3430  002498                     __ptext8:
  3431                           	opt stack 0
  3432  002498                     ___ftge:
  3433                           	opt stack 23
  3434                           
  3435                           ;incstack = 0
  3436  002498  AE1A               	btfss	___ftge@ff1+2,7,c
  3437  00249A  D017               	goto	l2911
  3438  00249C  C018  F01E         	movff	___ftge@ff1,??___ftge
  3439  0024A0  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3440  0024A4  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3441  0024A8  1E1E               	comf	??___ftge,f,c
  3442  0024AA  1E1F               	comf	??___ftge+1,f,c
  3443  0024AC  1E20               	comf	??___ftge+2,f,c
  3444  0024AE  2A1E               	incf	??___ftge,f,c
  3445  0024B0  0E00               	movlw	0
  3446  0024B2  221F               	addwfc	??___ftge+1,f,c
  3447  0024B4  2220               	addwfc	??___ftge+2,f,c
  3448  0024B6  0E00               	movlw	0
  3449  0024B8  241E               	addwf	??___ftge,w,c
  3450  0024BA  6E18               	movwf	___ftge@ff1,c
  3451  0024BC  0E00               	movlw	0
  3452  0024BE  201F               	addwfc	??___ftge+1,w,c
  3453  0024C0  6E19               	movwf	___ftge@ff1+1,c
  3454  0024C2  0E80               	movlw	128
  3455  0024C4  2020               	addwfc	??___ftge+2,w,c
  3456  0024C6  6E1A               	movwf	___ftge@ff1+2,c
  3457  0024C8  D000               	goto	l2911
  3458  0024CA                     l2911:
  3459  0024CA  AE1D               	btfss	___ftge@ff2+2,7,c
  3460  0024CC  D017               	goto	l2915
  3461  0024CE  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3462  0024D2  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3463  0024D6  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3464  0024DA  1E1E               	comf	??___ftge,f,c
  3465  0024DC  1E1F               	comf	??___ftge+1,f,c
  3466  0024DE  1E20               	comf	??___ftge+2,f,c
  3467  0024E0  2A1E               	incf	??___ftge,f,c
  3468  0024E2  0E00               	movlw	0
  3469  0024E4  221F               	addwfc	??___ftge+1,f,c
  3470  0024E6  2220               	addwfc	??___ftge+2,f,c
  3471  0024E8  0E00               	movlw	0
  3472  0024EA  241E               	addwf	??___ftge,w,c
  3473  0024EC  6E1B               	movwf	___ftge@ff2,c
  3474  0024EE  0E00               	movlw	0
  3475  0024F0  201F               	addwfc	??___ftge+1,w,c
  3476  0024F2  6E1C               	movwf	___ftge@ff2+1,c
  3477  0024F4  0E80               	movlw	128
  3478  0024F6  2020               	addwfc	??___ftge+2,w,c
  3479  0024F8  6E1D               	movwf	___ftge@ff2+2,c
  3480  0024FA  D000               	goto	l2915
  3481  0024FC                     l2915:
  3482  0024FC  0E00               	movlw	0
  3483  0024FE  1A18               	xorwf	___ftge@ff1,f,c
  3484  002500  0E00               	movlw	0
  3485  002502  1A19               	xorwf	___ftge@ff1+1,f,c
  3486  002504  0E80               	movlw	128
  3487  002506  1A1A               	xorwf	___ftge@ff1+2,f,c
  3488  002508  0E00               	movlw	0
  3489  00250A  1A1B               	xorwf	___ftge@ff2,f,c
  3490  00250C  0E00               	movlw	0
  3491  00250E  1A1C               	xorwf	___ftge@ff2+1,f,c
  3492  002510  0E80               	movlw	128
  3493  002512  1A1D               	xorwf	___ftge@ff2+2,f,c
  3494  002514  501B               	movf	___ftge@ff2,w,c
  3495  002516  5C18               	subwf	___ftge@ff1,w,c
  3496  002518  501C               	movf	___ftge@ff2+1,w,c
  3497  00251A  5819               	subwfb	___ftge@ff1+1,w,c
  3498  00251C  501D               	movf	___ftge@ff2+2,w,c
  3499  00251E  581A               	subwfb	___ftge@ff1+2,w,c
  3500  002520  B0D8               	btfsc	status,0,c
  3501  002522  D002               	goto	l2921
  3502  002524  90D8               	bcf	status,0,c
  3503  002526  D002               	goto	l1101
  3504  002528                     l2921:
  3505  002528  80D8               	bsf	status,0,c
  3506  00252A  D000               	goto	l1101
  3507  00252C                     l1101:
  3508  00252C  0012               	return		;funcret
  3509  00252E                     __end_of___ftge:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           postinc0	equ	0xFEE
  3519                           wreg	equ	0xFE8
  3520                           postdec1	equ	0xFE5
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           indf2	equ	0xFDF
  3524                           postinc2	equ	0xFDE
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function ___ftdiv *****************
  3530 ;; Defined at:
  3531 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  f1              3   43[COMRAM] float 
  3534 ;;  f2              3   46[COMRAM] float 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  f3              3    1[BANK0 ] float 
  3537 ;;  sign            1    5[BANK0 ] unsigned char 
  3538 ;;  exp             1    4[BANK0 ] unsigned char 
  3539 ;;  cntr            1    0[BANK0 ] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  3   43[COMRAM] float 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:       15 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    5
  3556 ;; This function calls:
  3557 ;;		___ftpack
  3558 ;; This function is called by:
  3559 ;;		_calculatePID
  3560 ;;		_ZeroMotors
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text9
  3565  001F3A                     __ptext9:
  3566                           	opt stack 0
  3567  001F3A                     ___ftdiv:
  3568                           	opt stack 22
  3569                           
  3570                           ;incstack = 0
  3571  001F3A  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  3572  001F3E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  3573  001F40  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  3574  001F42  342D               	rlcf	___ftdiv@f1+1,w,c
  3575  001F44  3632               	rlcf	??___ftdiv& (0+255),f,c
  3576  001F46  E301               	bnc	u3381
  3577  001F48  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  3578  001F4A                     u3381:
  3579  001F4A  5032               	movf	??___ftdiv,w,c
  3580  001F4C  0100               	movlb	0	; () banked
  3581  001F4E  6F64               	movwf	___ftdiv@exp& (0+255),b
  3582  001F50  0100               	movlb	0	; () banked
  3583  001F52  5164               	movf	___ftdiv@exp& (0+255),w,b
  3584  001F54  A4D8               	btfss	status,2,c
  3585  001F56  D002               	goto	l4027
  3586  001F58  D010               	goto	l4029
  3587                           
  3588                           ; BSR set to: 0
  3589                           
  3590                           ; BSR set to: 0
  3591  001F5A  D06E               	goto	l1092
  3592  001F5C                     l4027:
  3593                           
  3594                           ; BSR set to: 0
  3595  001F5C  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  3596  001F60  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  3597  001F62  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  3598  001F64  3430               	rlcf	___ftdiv@f2+1,w,c
  3599  001F66  3632               	rlcf	??___ftdiv& (0+255),f,c
  3600  001F68  E301               	bnc	u3401
  3601  001F6A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  3602  001F6C                     u3401:
  3603  001F6C  5032               	movf	??___ftdiv,w,c
  3604  001F6E  0100               	movlb	0	; () banked
  3605  001F70  6F65               	movwf	___ftdiv@sign& (0+255),b
  3606  001F72  0100               	movlb	0	; () banked
  3607  001F74  5165               	movf	___ftdiv@sign& (0+255),w,b
  3608  001F76  A4D8               	btfss	status,2,c
  3609  001F78  D007               	goto	l4033
  3610  001F7A                     l4029:
  3611                           
  3612                           ; BSR set to: 0
  3613  001F7A  0E00               	movlw	0
  3614  001F7C  6E2C               	movwf	?___ftdiv,c
  3615  001F7E  0E00               	movlw	0
  3616  001F80  6E2D               	movwf	?___ftdiv+1,c
  3617  001F82  0E00               	movlw	0
  3618  001F84  6E2E               	movwf	?___ftdiv+2,c
  3619                           
  3620                           ; BSR set to: 0
  3621  001F86  D058               	goto	l1092
  3622  001F88                     l4033:
  3623                           
  3624                           ; BSR set to: 0
  3625  001F88  0E00               	movlw	0
  3626  001F8A  0100               	movlb	0	; () banked
  3627  001F8C  6F61               	movwf	___ftdiv@f3& (0+255),b
  3628  001F8E  0E00               	movlw	0
  3629  001F90  0100               	movlb	0	; () banked
  3630  001F92  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
  3631  001F94  0E00               	movlw	0
  3632  001F96  0100               	movlb	0	; () banked
  3633  001F98  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
  3634                           
  3635                           ; BSR set to: 0
  3636  001F9A  0100               	movlb	0	; () banked
  3637  001F9C  5165               	movf	___ftdiv@sign& (0+255),w,b
  3638  001F9E  0F89               	addlw	137
  3639  001FA0  0100               	movlb	0	; () banked
  3640  001FA2  5F64               	subwf	___ftdiv@exp& (0+255),f,b
  3641                           
  3642                           ; BSR set to: 0
  3643  001FA4  C02E  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
  3644                           
  3645                           ; BSR set to: 0
  3646  001FA8  5031               	movf	___ftdiv@f2+2,w,c
  3647  001FAA  0100               	movlb	0	; () banked
  3648  001FAC  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
  3649                           
  3650                           ; BSR set to: 0
  3651  001FAE  0E80               	movlw	128
  3652  001FB0  0100               	movlb	0	; () banked
  3653  001FB2  1765               	andwf	___ftdiv@sign& (0+255),f,b
  3654                           
  3655                           ; BSR set to: 0
  3656  001FB4  8E2D               	bsf	___ftdiv@f1+1,7,c
  3657                           
  3658                           ; BSR set to: 0
  3659  001FB6  0EFF               	movlw	255
  3660  001FB8  162C               	andwf	___ftdiv@f1,f,c
  3661  001FBA  0EFF               	movlw	255
  3662  001FBC  162D               	andwf	___ftdiv@f1+1,f,c
  3663  001FBE  0E00               	movlw	0
  3664  001FC0  162E               	andwf	___ftdiv@f1+2,f,c
  3665                           
  3666                           ; BSR set to: 0
  3667  001FC2  8E30               	bsf	___ftdiv@f2+1,7,c
  3668                           
  3669                           ; BSR set to: 0
  3670  001FC4  0EFF               	movlw	255
  3671  001FC6  162F               	andwf	___ftdiv@f2,f,c
  3672  001FC8  0EFF               	movlw	255
  3673  001FCA  1630               	andwf	___ftdiv@f2+1,f,c
  3674  001FCC  0E00               	movlw	0
  3675  001FCE  1631               	andwf	___ftdiv@f2+2,f,c
  3676                           
  3677                           ; BSR set to: 0
  3678  001FD0  0E18               	movlw	24
  3679  001FD2  0100               	movlb	0	; () banked
  3680  001FD4  6F60               	movwf	___ftdiv@cntr& (0+255),b
  3681  001FD6  D000               	goto	l4053
  3682  001FD8                     l4053:
  3683                           
  3684                           ; BSR set to: 0
  3685  001FD8  0100               	movlb	0	; () banked
  3686  001FDA  90D8               	bcf	status,0,c
  3687  001FDC  3761               	rlcf	___ftdiv@f3& (0+255),f,b
  3688  001FDE  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3689  001FE0  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3690                           
  3691                           ; BSR set to: 0
  3692  001FE2  502F               	movf	___ftdiv@f2,w,c
  3693  001FE4  5C2C               	subwf	___ftdiv@f1,w,c
  3694  001FE6  5030               	movf	___ftdiv@f2+1,w,c
  3695  001FE8  582D               	subwfb	___ftdiv@f1+1,w,c
  3696  001FEA  5031               	movf	___ftdiv@f2+2,w,c
  3697  001FEC  582E               	subwfb	___ftdiv@f1+2,w,c
  3698  001FEE  A0D8               	btfss	status,0,c
  3699  001FF0  D008               	goto	l1095
  3700                           
  3701                           ; BSR set to: 0
  3702  001FF2  502F               	movf	___ftdiv@f2,w,c
  3703  001FF4  5E2C               	subwf	___ftdiv@f1,f,c
  3704  001FF6  5030               	movf	___ftdiv@f2+1,w,c
  3705  001FF8  5A2D               	subwfb	___ftdiv@f1+1,f,c
  3706  001FFA  5031               	movf	___ftdiv@f2+2,w,c
  3707  001FFC  5A2E               	subwfb	___ftdiv@f1+2,f,c
  3708                           
  3709                           ; BSR set to: 0
  3710  001FFE  0100               	movlb	0	; () banked
  3711  002000  8161               	bsf	___ftdiv@f3& (0+255),0,b
  3712  002002                     l1095:
  3713                           
  3714                           ; BSR set to: 0
  3715  002002  90D8               	bcf	status,0,c
  3716  002004  362C               	rlcf	___ftdiv@f1,f,c
  3717  002006  362D               	rlcf	___ftdiv@f1+1,f,c
  3718  002008  362E               	rlcf	___ftdiv@f1+2,f,c
  3719                           
  3720                           ; BSR set to: 0
  3721  00200A  0100               	movlb	0	; () banked
  3722  00200C  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
  3723  00200E  D7E4               	goto	l4053
  3724  002010  D000               	goto	l4063
  3725  002012                     l4063:
  3726                           
  3727                           ; BSR set to: 0
  3728  002012  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
  3729  002016  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3730  00201A  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3731  00201E  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3732  002022  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3733  002026  EC8D  F010         	call	___ftpack	;wreg free
  3734  00202A  C018  F02C         	movff	?___ftpack,?___ftdiv
  3735  00202E  C019  F02D         	movff	?___ftpack+1,?___ftdiv+1
  3736  002032  C01A  F02E         	movff	?___ftpack+2,?___ftdiv+2
  3737  002036  D000               	goto	l1092
  3738  002038                     l1092:
  3739  002038  0012               	return		;funcret
  3740  00203A                     __end_of___ftdiv:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           postdec1	equ	0xFE5
  3752                           fsr1h	equ	0xFE2
  3753                           fsr1l	equ	0xFE1
  3754                           indf2	equ	0xFDF
  3755                           postinc2	equ	0xFDE
  3756                           fsr2h	equ	0xFDA
  3757                           fsr2l	equ	0xFD9
  3758                           status	equ	0xFD8
  3759                           
  3760 ;; *************** function _ReadRTDpos *****************
  3761 ;; Defined at:
  3762 ;;		line 33 in file "ResolverToDigital.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3767 ;;  helloworld      2    0        unsigned int 
  3768 ;;  x               1   33[COMRAM] unsigned char 
  3769 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3770 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  2   24[COMRAM] unsigned int 
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;Total ram usage:       10 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    5
  3787 ;; This function calls:
  3788 ;;		_Delay10TCYx
  3789 ;; This function is called by:
  3790 ;;		_main
  3791 ;;		_ZeroMotors
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text10
  3796  00267C                     __ptext10:
  3797                           	opt stack 0
  3798  00267C                     _ReadRTDpos:
  3799                           	opt stack 23
  3800                           
  3801                           ;ResolverToDigital.c: 35: unsigned char x;
  3802                           ;ResolverToDigital.c: 36: unsigned int FullPosition, helloworld;
  3803                           ;ResolverToDigital.c: 37: unsigned char HighPosition, LowPosition;
  3804                           ;ResolverToDigital.c: 39: INTCONbits.GIE = 0;
  3805                           
  3806                           ;incstack = 0
  3807  00267C  9EF2               	bcf	intcon,7,c	;volatile
  3808                           
  3809                           ;ResolverToDigital.c: 40: PORTEbits.RE1 = 1;
  3810  00267E  8284               	bsf	3972,1,c	;volatile
  3811                           
  3812                           ;ResolverToDigital.c: 41: PORTEbits.RE0 = 0;
  3813  002680  9084               	bcf	3972,0,c	;volatile
  3814                           
  3815                           ;ResolverToDigital.c: 42: for (x = 0; x < 8; x++)
  3816  002682  0E00               	movlw	0
  3817  002684  6E22               	movwf	ReadRTDpos@x,c
  3818  002686  D003               	goto	l3041
  3819  002688  D005               	goto	l188
  3820  00268A                     l187:
  3821                           
  3822                           ;ResolverToDigital.c: 43: __nop();
  3823  00268A  F000               	nop	
  3824  00268C  2A22               	incf	ReadRTDpos@x,f,c
  3825  00268E                     l3041:
  3826  00268E  0E07               	movlw	7
  3827  002690  6422               	cpfsgt	ReadRTDpos@x,c
  3828  002692  D7FB               	goto	l187
  3829  002694                     l188:
  3830                           
  3831                           ;ResolverToDigital.c: 44: PORTEbits.RE2 = 1;
  3832  002694  8484               	bsf	3972,2,c	;volatile
  3833                           
  3834                           ;ResolverToDigital.c: 45: PORTEbits.RE2 = 0;
  3835  002696  9484               	bcf	3972,2,c	;volatile
  3836                           
  3837                           ;ResolverToDigital.c: 46: Delay10TCYx(1);
  3838  002698  0E01               	movlw	1
  3839  00269A  EC16  F017         	call	_Delay10TCYx
  3840                           
  3841                           ;ResolverToDigital.c: 47: HighPosition = PORTH;
  3842  00269E  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3843                           
  3844                           ;ResolverToDigital.c: 48: LowPosition = PORTD;
  3845  0026A2  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3846                           
  3847                           ;ResolverToDigital.c: 49: PORTEbits.RE2 = 1;
  3848  0026A6  8484               	bsf	3972,2,c	;volatile
  3849                           
  3850                           ;ResolverToDigital.c: 50: PORTEbits.RE0 = 1;
  3851  0026A8  8084               	bsf	3972,0,c	;volatile
  3852                           
  3853                           ;ResolverToDigital.c: 51: FullPosition = LowPosition;
  3854  0026AA  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3855  0026AE  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3856                           
  3857                           ;ResolverToDigital.c: 52: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3858  0026B0  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3859  0026B4  0E0F               	movlw	15
  3860  0026B6  161B               	andwf	??_ReadRTDpos,f,c
  3861  0026B8  501B               	movf	??_ReadRTDpos,w,c
  3862  0026BA  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3863  0026BC  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3864  0026BE  5020               	movf	ReadRTDpos@FullPosition,w,c
  3865  0026C0  101C               	iorwf	??_ReadRTDpos+1,w,c
  3866  0026C2  6E20               	movwf	ReadRTDpos@FullPosition,c
  3867  0026C4  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3868  0026C6  101D               	iorwf	??_ReadRTDpos+2,w,c
  3869  0026C8  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3870                           
  3871                           ;ResolverToDigital.c: 53: INTCONbits.GIE = 1;
  3872  0026CA  8EF2               	bsf	intcon,7,c	;volatile
  3873                           
  3874                           ;ResolverToDigital.c: 54: return FullPosition;
  3875  0026CC  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3876  0026D0  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3877  0026D4  D000               	goto	l189
  3878  0026D6                     l189:
  3879  0026D6  0012               	return		;funcret
  3880  0026D8                     __end_of_ReadRTDpos:
  3881                           	opt stack 0
  3882                           tblptru	equ	0xFF8
  3883                           tblptrh	equ	0xFF7
  3884                           tblptrl	equ	0xFF6
  3885                           tablat	equ	0xFF5
  3886                           prodh	equ	0xFF4
  3887                           prodl	equ	0xFF3
  3888                           intcon	equ	0xFF2
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           postdec1	equ	0xFE5
  3892                           fsr1h	equ	0xFE2
  3893                           fsr1l	equ	0xFE1
  3894                           indf2	equ	0xFDF
  3895                           postinc2	equ	0xFDE
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _RTD2Angle *****************
  3901 ;; Defined at:
  3902 ;;		line 92 in file "ResolverToDigital.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  RTDAngle        2   21[BANK0 ] unsigned int 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  3   21[BANK0 ] unsigned int 
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3916 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;Total ram usage:        3 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    6
  3923 ;; This function calls:
  3924 ;;		___ftmul
  3925 ;;		___lwtoft
  3926 ;; This function is called by:
  3927 ;;		_main
  3928 ;;		_ZeroMotors
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text11
  3933  002A5A                     __ptext11:
  3934                           	opt stack 0
  3935  002A5A                     _RTD2Angle:
  3936                           	opt stack 22
  3937                           
  3938                           ;ResolverToDigital.c: 94: return 0.087890625 * RTDAngle;
  3939                           
  3940                           ;incstack = 0
  3941  002A5A  C075  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3942  002A5E  C076  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3943  002A62  EC29  F016         	call	___lwtoft	;wreg free
  3944  002A66  C020  F066         	movff	?___lwtoft,___ftmul@f1
  3945  002A6A  C021  F067         	movff	?___lwtoft+1,___ftmul@f1+1
  3946  002A6E  C022  F068         	movff	?___lwtoft+2,___ftmul@f1+2
  3947  002A72  0E00               	movlw	0
  3948  002A74  0100               	movlb	0	; () banked
  3949  002A76  6F69               	movwf	___ftmul@f2& (0+255),b
  3950  002A78  0EB4               	movlw	180
  3951  002A7A  0100               	movlb	0	; () banked
  3952  002A7C  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  3953  002A7E  0E3D               	movlw	61
  3954  002A80  0100               	movlb	0	; () banked
  3955  002A82  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  3956  002A84  ECBC  F00D         	call	___ftmul	;wreg free
  3957  002A88  C066  F075         	movff	?___ftmul,?_RTD2Angle
  3958  002A8C  C067  F076         	movff	?___ftmul+1,?_RTD2Angle+1
  3959  002A90  C068  F077         	movff	?___ftmul+2,?_RTD2Angle+2
  3960  002A94  D000               	goto	l197
  3961  002A96                     l197:
  3962  002A96  0012               	return		;funcret
  3963  002A98                     __end_of_RTD2Angle:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon	equ	0xFF2
  3972                           postinc0	equ	0xFEE
  3973                           wreg	equ	0xFE8
  3974                           postdec1	equ	0xFE5
  3975                           fsr1h	equ	0xFE2
  3976                           fsr1l	equ	0xFE1
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           fsr2h	equ	0xFDA
  3980                           fsr2l	equ	0xFD9
  3981                           status	equ	0xFD8
  3982                           
  3983 ;; *************** function ___lwtoft *****************
  3984 ;; Defined at:
  3985 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  c               2   31[COMRAM] unsigned int 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;		None
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  3   31[COMRAM] float 
  3992 ;; Registers used:
  3993 ;;		wreg, status,2, status,0, cstack
  3994 ;; Tracked objects:
  3995 ;;		On entry : 0/0
  3996 ;;		On exit  : 0/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3999 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;Total ram usage:        3 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; Hardware stack levels required when called:    5
  4006 ;; This function calls:
  4007 ;;		___ftpack
  4008 ;; This function is called by:
  4009 ;;		_RTD2Angle
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           	psect	text12
  4014  002C52                     __ptext12:
  4015                           	opt stack 0
  4016  002C52                     ___lwtoft:
  4017                           	opt stack 22
  4018                           
  4019                           ;incstack = 0
  4020  002C52  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  4021  002C56  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  4022  002C5A  6A1A               	clrf	___ftpack@arg+2,c
  4023  002C5C  0E8E               	movlw	142
  4024  002C5E  6E1B               	movwf	___ftpack@exp,c
  4025  002C60  0E00               	movlw	0
  4026  002C62  6E1C               	movwf	___ftpack@sign,c
  4027  002C64  EC8D  F010         	call	___ftpack	;wreg free
  4028  002C68  C018  F020         	movff	?___ftpack,?___lwtoft
  4029  002C6C  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  4030  002C70  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  4031  002C74  D000               	goto	l1257
  4032  002C76                     l1257:
  4033  002C76  0012               	return		;funcret
  4034  002C78                     __end_of___lwtoft:
  4035                           	opt stack 0
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           prodh	equ	0xFF4
  4041                           prodl	equ	0xFF3
  4042                           intcon	equ	0xFF2
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           postdec1	equ	0xFE5
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function ___ftmul *****************
  4055 ;; Defined at:
  4056 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  f1              3    6[BANK0 ] float 
  4059 ;;  f2              3    9[BANK0 ] float 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  4062 ;;  sign            1   20[BANK0 ] unsigned char 
  4063 ;;  cntr            1   19[BANK0 ] unsigned char 
  4064 ;;  exp             1   15[BANK0 ] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  3    6[BANK0 ] float 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4074 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;Total ram usage:       15 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    5
  4081 ;; This function calls:
  4082 ;;		___ftpack
  4083 ;; This function is called by:
  4084 ;;		_calculatePID
  4085 ;;		_RTD2Angle
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text13
  4090  001B78                     __ptext13:
  4091                           	opt stack 0
  4092  001B78                     ___ftmul:
  4093                           	opt stack 22
  4094                           
  4095                           ;incstack = 0
  4096  001B78  C068  F06C         	movff	___ftmul@f1+2,??___ftmul
  4097  001B7C  0100               	movlb	0	; () banked
  4098  001B7E  6B6D               	clrf	(??___ftmul+1)& (0+255),b
  4099  001B80  6B6E               	clrf	(??___ftmul+2)& (0+255),b
  4100  001B82  0100               	movlb	0	; () banked
  4101  001B84  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4102  001B86  0100               	movlb	0	; () banked
  4103  001B88  376C               	rlcf	??___ftmul& (0+255),f,b
  4104  001B8A  E301               	bnc	u3431
  4105  001B8C  816D               	bsf	(??___ftmul+1)& (0+255),0,b
  4106  001B8E                     u3431:
  4107  001B8E  0100               	movlb	0	; () banked
  4108  001B90  516C               	movf	??___ftmul& (0+255),w,b
  4109  001B92  0100               	movlb	0	; () banked
  4110  001B94  6F6F               	movwf	___ftmul@exp& (0+255),b
  4111  001B96  0100               	movlb	0	; () banked
  4112  001B98  516F               	movf	___ftmul@exp& (0+255),w,b
  4113  001B9A  A4D8               	btfss	status,2,c
  4114  001B9C  D002               	goto	l4073
  4115  001B9E  D014               	goto	l4075
  4116                           
  4117                           ; BSR set to: 0
  4118                           
  4119                           ; BSR set to: 0
  4120  001BA0  D098               	goto	l1107
  4121  001BA2                     l4073:
  4122                           
  4123                           ; BSR set to: 0
  4124  001BA2  C06B  F06C         	movff	___ftmul@f2+2,??___ftmul
  4125  001BA6  0100               	movlb	0	; () banked
  4126  001BA8  6B6D               	clrf	(??___ftmul+1)& (0+255),b
  4127  001BAA  6B6E               	clrf	(??___ftmul+2)& (0+255),b
  4128  001BAC  0100               	movlb	0	; () banked
  4129  001BAE  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4130  001BB0  0100               	movlb	0	; () banked
  4131  001BB2  376C               	rlcf	??___ftmul& (0+255),f,b
  4132  001BB4  E301               	bnc	u3451
  4133  001BB6  816D               	bsf	(??___ftmul+1)& (0+255),0,b
  4134  001BB8                     u3451:
  4135  001BB8  0100               	movlb	0	; () banked
  4136  001BBA  516C               	movf	??___ftmul& (0+255),w,b
  4137  001BBC  0100               	movlb	0	; () banked
  4138  001BBE  6F74               	movwf	___ftmul@sign& (0+255),b
  4139  001BC0  0100               	movlb	0	; () banked
  4140  001BC2  5174               	movf	___ftmul@sign& (0+255),w,b
  4141  001BC4  A4D8               	btfss	status,2,c
  4142  001BC6  D00A               	goto	l4079
  4143  001BC8                     l4075:
  4144                           
  4145                           ; BSR set to: 0
  4146  001BC8  0E00               	movlw	0
  4147  001BCA  0100               	movlb	0	; () banked
  4148  001BCC  6F66               	movwf	?___ftmul& (0+255),b
  4149  001BCE  0E00               	movlw	0
  4150  001BD0  0100               	movlb	0	; () banked
  4151  001BD2  6F67               	movwf	(?___ftmul+1)& (0+255),b
  4152  001BD4  0E00               	movlw	0
  4153  001BD6  0100               	movlb	0	; () banked
  4154  001BD8  6F68               	movwf	(?___ftmul+2)& (0+255),b
  4155                           
  4156                           ; BSR set to: 0
  4157  001BDA  D07B               	goto	l1107
  4158  001BDC                     l4079:
  4159                           
  4160                           ; BSR set to: 0
  4161  001BDC  0100               	movlb	0	; () banked
  4162  001BDE  5174               	movf	___ftmul@sign& (0+255),w,b
  4163  001BE0  0F7B               	addlw	123
  4164  001BE2  0100               	movlb	0	; () banked
  4165  001BE4  276F               	addwf	___ftmul@exp& (0+255),f,b
  4166                           
  4167                           ; BSR set to: 0
  4168  001BE6  C068  F074         	movff	___ftmul@f1+2,___ftmul@sign
  4169  001BEA  0100               	movlb	0	; () banked
  4170  001BEC  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4171  001BEE  0100               	movlb	0	; () banked
  4172  001BF0  1B74               	xorwf	___ftmul@sign& (0+255),f,b
  4173  001BF2  0E80               	movlw	128
  4174  001BF4  0100               	movlb	0	; () banked
  4175  001BF6  1774               	andwf	___ftmul@sign& (0+255),f,b
  4176                           
  4177                           ; BSR set to: 0
  4178  001BF8  0100               	movlb	0	; () banked
  4179  001BFA  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4180                           
  4181                           ; BSR set to: 0
  4182  001BFC  0100               	movlb	0	; () banked
  4183  001BFE  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4184                           
  4185                           ; BSR set to: 0
  4186  001C00  0EFF               	movlw	255
  4187  001C02  0100               	movlb	0	; () banked
  4188  001C04  1769               	andwf	___ftmul@f2& (0+255),f,b
  4189  001C06  0EFF               	movlw	255
  4190  001C08  0100               	movlb	0	; () banked
  4191  001C0A  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4192  001C0C  0E00               	movlw	0
  4193  001C0E  0100               	movlb	0	; () banked
  4194  001C10  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4195                           
  4196                           ; BSR set to: 0
  4197  001C12  0E00               	movlw	0
  4198  001C14  0100               	movlb	0	; () banked
  4199  001C16  6F70               	movwf	___ftmul@f3_as_product& (0+255),b
  4200  001C18  0E00               	movlw	0
  4201  001C1A  0100               	movlb	0	; () banked
  4202  001C1C  6F71               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4203  001C1E  0E00               	movlw	0
  4204  001C20  0100               	movlb	0	; () banked
  4205  001C22  6F72               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4206                           
  4207                           ; BSR set to: 0
  4208  001C24  0E07               	movlw	7
  4209  001C26  0100               	movlb	0	; () banked
  4210  001C28  6F73               	movwf	___ftmul@cntr& (0+255),b
  4211  001C2A  D000               	goto	l4093
  4212  001C2C                     l4093:
  4213                           
  4214                           ; BSR set to: 0
  4215  001C2C  0100               	movlb	0	; () banked
  4216  001C2E  A166               	btfss	___ftmul@f1& (0+255),0,b
  4217  001C30  D00D               	goto	l4097
  4218                           
  4219                           ; BSR set to: 0
  4220  001C32  0100               	movlb	0	; () banked
  4221  001C34  5169               	movf	___ftmul@f2& (0+255),w,b
  4222  001C36  0100               	movlb	0	; () banked
  4223  001C38  2770               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4224  001C3A  0100               	movlb	0	; () banked
  4225  001C3C  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4226  001C3E  0100               	movlb	0	; () banked
  4227  001C40  2371               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4228  001C42  0100               	movlb	0	; () banked
  4229  001C44  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4230  001C46  0100               	movlb	0	; () banked
  4231  001C48  2372               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4232  001C4A  D000               	goto	l4097
  4233  001C4C                     l4097:
  4234                           
  4235                           ; BSR set to: 0
  4236  001C4C  0100               	movlb	0	; () banked
  4237  001C4E  90D8               	bcf	status,0,c
  4238  001C50  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4239  001C52  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4240  001C54  3366               	rrcf	___ftmul@f1& (0+255),f,b
  4241  001C56  0100               	movlb	0	; () banked
  4242  001C58  90D8               	bcf	status,0,c
  4243  001C5A  3769               	rlcf	___ftmul@f2& (0+255),f,b
  4244  001C5C  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4245  001C5E  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4246                           
  4247                           ; BSR set to: 0
  4248  001C60  0100               	movlb	0	; () banked
  4249  001C62  2F73               	decfsz	___ftmul@cntr& (0+255),f,b
  4250  001C64  D7E3               	goto	l4093
  4251  001C66  D000               	goto	l4101
  4252  001C68                     l4101:
  4253                           
  4254                           ; BSR set to: 0
  4255  001C68  0E09               	movlw	9
  4256  001C6A  0100               	movlb	0	; () banked
  4257  001C6C  6F73               	movwf	___ftmul@cntr& (0+255),b
  4258  001C6E  D000               	goto	l4103
  4259  001C70                     l4103:
  4260                           
  4261                           ; BSR set to: 0
  4262  001C70  0100               	movlb	0	; () banked
  4263  001C72  A166               	btfss	___ftmul@f1& (0+255),0,b
  4264  001C74  D00D               	goto	l4107
  4265                           
  4266                           ; BSR set to: 0
  4267  001C76  0100               	movlb	0	; () banked
  4268  001C78  5169               	movf	___ftmul@f2& (0+255),w,b
  4269  001C7A  0100               	movlb	0	; () banked
  4270  001C7C  2770               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4271  001C7E  0100               	movlb	0	; () banked
  4272  001C80  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4273  001C82  0100               	movlb	0	; () banked
  4274  001C84  2371               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4275  001C86  0100               	movlb	0	; () banked
  4276  001C88  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4277  001C8A  0100               	movlb	0	; () banked
  4278  001C8C  2372               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4279  001C8E  D000               	goto	l4107
  4280  001C90                     l4107:
  4281                           
  4282                           ; BSR set to: 0
  4283  001C90  0100               	movlb	0	; () banked
  4284  001C92  90D8               	bcf	status,0,c
  4285  001C94  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4286  001C96  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4287  001C98  3366               	rrcf	___ftmul@f1& (0+255),f,b
  4288  001C9A  0100               	movlb	0	; () banked
  4289  001C9C  90D8               	bcf	status,0,c
  4290  001C9E  3372               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4291  001CA0  3371               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4292  001CA2  3370               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4293                           
  4294                           ; BSR set to: 0
  4295  001CA4  0100               	movlb	0	; () banked
  4296  001CA6  2F73               	decfsz	___ftmul@cntr& (0+255),f,b
  4297  001CA8  D7E3               	goto	l4103
  4298  001CAA  D000               	goto	l4111
  4299  001CAC                     l4111:
  4300                           
  4301                           ; BSR set to: 0
  4302  001CAC  C070  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  4303  001CB0  C071  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4304  001CB4  C072  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4305  001CB8  C06F  F01B         	movff	___ftmul@exp,___ftpack@exp
  4306  001CBC  C074  F01C         	movff	___ftmul@sign,___ftpack@sign
  4307  001CC0  EC8D  F010         	call	___ftpack	;wreg free
  4308  001CC4  C018  F066         	movff	?___ftpack,?___ftmul
  4309  001CC8  C019  F067         	movff	?___ftpack+1,?___ftmul+1
  4310  001CCC  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
  4311  001CD0  D000               	goto	l1107
  4312  001CD2                     l1107:
  4313  001CD2  0012               	return		;funcret
  4314  001CD4                     __end_of___ftmul:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function ___ftpack *****************
  4335 ;; Defined at:
  4336 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  arg             3   23[COMRAM] unsigned um
  4339 ;;  exp             1   26[COMRAM] unsigned char 
  4340 ;;  sign            1   27[COMRAM] unsigned char 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  3   23[COMRAM] float 
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4352 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;Total ram usage:        8 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    4
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		___ftadd
  4363 ;;		___ftdiv
  4364 ;;		___ftmul
  4365 ;;		___lwtoft
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text14
  4370  00211A                     __ptext14:
  4371                           	opt stack 0
  4372  00211A                     ___ftpack:
  4373                           	opt stack 21
  4374                           
  4375                           ;incstack = 0
  4376  00211A  501B               	movf	___ftpack@exp,w,c
  4377  00211C  B4D8               	btfsc	status,2,c
  4378  00211E  D005               	goto	l3915
  4379  002120  5018               	movf	___ftpack@arg,w,c
  4380  002122  1019               	iorwf	___ftpack@arg+1,w,c
  4381  002124  101A               	iorwf	___ftpack@arg+2,w,c
  4382  002126  A4D8               	btfss	status,2,c
  4383  002128  D00E               	goto	l3921
  4384  00212A                     l3915:
  4385  00212A  0E00               	movlw	0
  4386  00212C  6E18               	movwf	?___ftpack,c
  4387  00212E  0E00               	movlw	0
  4388  002130  6E19               	movwf	?___ftpack+1,c
  4389  002132  0E00               	movlw	0
  4390  002134  6E1A               	movwf	?___ftpack+2,c
  4391  002136  D053               	goto	l1020
  4392  002138  D006               	goto	l3921
  4393  00213A                     l3919:
  4394  00213A  2A1B               	incf	___ftpack@exp,f,c
  4395  00213C  90D8               	bcf	status,0,c
  4396  00213E  321A               	rrcf	___ftpack@arg+2,f,c
  4397  002140  3219               	rrcf	___ftpack@arg+1,f,c
  4398  002142  3218               	rrcf	___ftpack@arg,f,c
  4399  002144  D000               	goto	l3921
  4400  002146                     l3921:
  4401  002146  0E00               	movlw	0
  4402  002148  1418               	andwf	___ftpack@arg,w,c
  4403  00214A  6E1D               	movwf	??___ftpack& (0+255),c
  4404  00214C  0E00               	movlw	0
  4405  00214E  1419               	andwf	___ftpack@arg+1,w,c
  4406  002150  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4407  002152  0EFE               	movlw	254
  4408  002154  141A               	andwf	___ftpack@arg+2,w,c
  4409  002156  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4410  002158  501D               	movf	??___ftpack,w,c
  4411  00215A  101E               	iorwf	??___ftpack+1,w,c
  4412  00215C  101F               	iorwf	??___ftpack+2,w,c
  4413  00215E  B4D8               	btfsc	status,2,c
  4414  002160  D00E               	goto	l3927
  4415  002162  D7EB               	goto	l3919
  4416  002164  D00C               	goto	l3927
  4417  002166                     l3923:
  4418  002166  2A1B               	incf	___ftpack@exp,f,c
  4419  002168  0E01               	movlw	1
  4420  00216A  2618               	addwf	___ftpack@arg,f,c
  4421  00216C  0E00               	movlw	0
  4422  00216E  2219               	addwfc	___ftpack@arg+1,f,c
  4423  002170  0E00               	movlw	0
  4424  002172  221A               	addwfc	___ftpack@arg+2,f,c
  4425  002174  90D8               	bcf	status,0,c
  4426  002176  321A               	rrcf	___ftpack@arg+2,f,c
  4427  002178  3219               	rrcf	___ftpack@arg+1,f,c
  4428  00217A  3218               	rrcf	___ftpack@arg,f,c
  4429  00217C  D000               	goto	l3927
  4430  00217E                     l3927:
  4431  00217E  0E00               	movlw	0
  4432  002180  1418               	andwf	___ftpack@arg,w,c
  4433  002182  6E1D               	movwf	??___ftpack& (0+255),c
  4434  002184  0E00               	movlw	0
  4435  002186  1419               	andwf	___ftpack@arg+1,w,c
  4436  002188  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4437  00218A  0EFF               	movlw	255
  4438  00218C  141A               	andwf	___ftpack@arg+2,w,c
  4439  00218E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4440  002190  501D               	movf	??___ftpack,w,c
  4441  002192  101E               	iorwf	??___ftpack+1,w,c
  4442  002194  101F               	iorwf	??___ftpack+2,w,c
  4443  002196  B4D8               	btfsc	status,2,c
  4444  002198  D008               	goto	l3931
  4445  00219A  D7E5               	goto	l3923
  4446  00219C  D006               	goto	l3931
  4447  00219E                     l3929:
  4448  00219E  061B               	decf	___ftpack@exp,f,c
  4449  0021A0  90D8               	bcf	status,0,c
  4450  0021A2  3618               	rlcf	___ftpack@arg,f,c
  4451  0021A4  3619               	rlcf	___ftpack@arg+1,f,c
  4452  0021A6  361A               	rlcf	___ftpack@arg+2,f,c
  4453  0021A8  D000               	goto	l3931
  4454  0021AA                     l3931:
  4455  0021AA  BE19               	btfsc	___ftpack@arg+1,7,c
  4456  0021AC  D004               	goto	l1031
  4457  0021AE  0E02               	movlw	2
  4458  0021B0  601B               	cpfslt	___ftpack@exp,c
  4459  0021B2  D7F5               	goto	l3929
  4460  0021B4  D000               	goto	l1031
  4461  0021B6                     l1031:
  4462  0021B6  B01B               	btfsc	___ftpack@exp,0,c
  4463  0021B8  D002               	goto	l3937
  4464  0021BA  9E19               	bcf	___ftpack@arg+1,7,c
  4465  0021BC  D000               	goto	l3937
  4466  0021BE                     l3937:
  4467  0021BE  90D8               	bcf	status,0,c
  4468  0021C0  321B               	rrcf	___ftpack@exp,f,c
  4469  0021C2  501B               	movf	___ftpack@exp,w,c
  4470  0021C4  121A               	iorwf	___ftpack@arg+2,f,c
  4471  0021C6  501C               	movf	___ftpack@sign,w,c
  4472  0021C8  B4D8               	btfsc	status,2,c
  4473  0021CA  D002               	goto	l3943
  4474  0021CC  8E1A               	bsf	___ftpack@arg+2,7,c
  4475  0021CE  D000               	goto	l3943
  4476  0021D0                     l3943:
  4477  0021D0  C018  F018         	movff	___ftpack@arg,?___ftpack
  4478  0021D4  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  4479  0021D8  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  4480  0021DC  D000               	goto	l1020
  4481  0021DE                     l1020:
  4482  0021DE  0012               	return		;funcret
  4483  0021E0                     __end_of___ftpack:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           intcon	equ	0xFF2
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           postdec1	equ	0xFE5
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _ImplementPIDMotion *****************
  4504 ;; Defined at:
  4505 ;;		line 50 in file "MotorControl.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  PIDValue        2   38[BANK0 ] int 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;		None               void
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;Total ram usage:        4 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    5
  4526 ;; This function calls:
  4527 ;;		_abs
  4528 ;; This function is called by:
  4529 ;;		_main
  4530 ;;		_ZeroMotors
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text15
  4535  002350                     __ptext15:
  4536                           	opt stack 0
  4537  002350                     _ImplementPIDMotion:
  4538                           	opt stack 23
  4539                           
  4540                           ;MotorControl.c: 52: if (PIDValue > 255)
  4541                           
  4542                           ;incstack = 0
  4543  002350  0100               	movlb	0	; () banked
  4544  002352  BF87               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4545  002354  D009               	goto	l4177
  4546  002356  0100               	movlb	0	; () banked
  4547  002358  0587               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4548  00235A  A0D8               	btfss	status,0,c
  4549  00235C  D005               	goto	l4177
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;MotorControl.c: 53: PIDValue = 255;
  4553  00235E  0E00               	movlw	0
  4554  002360  0100               	movlb	0	; () banked
  4555  002362  6F87               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4556  002364  6986               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4557  002366  D010               	goto	l4181
  4558  002368                     l4177:
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;MotorControl.c: 54: else if (PIDValue < -255)
  4562  002368  0100               	movlb	0	; () banked
  4563  00236A  AF87               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4564  00236C  D00D               	goto	l4181
  4565  00236E  0100               	movlb	0	; () banked
  4566  002370  0586               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4567  002372  0EFF               	movlw	255
  4568  002374  0100               	movlb	0	; () banked
  4569  002376  5987               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4570  002378  B0D8               	btfsc	status,0,c
  4571  00237A  D006               	goto	l4181
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;MotorControl.c: 55: PIDValue = -255;
  4575  00237C  0EFF               	movlw	255
  4576  00237E  0100               	movlb	0	; () banked
  4577  002380  6F87               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4578  002382  0E01               	movlw	1
  4579  002384  6F86               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4580                           
  4581                           ; BSR set to: 0
  4582  002386  D000               	goto	l4181
  4583  002388                     l4181:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;MotorControl.c: 57: if (PIDValue < 0)
  4587  002388  0100               	movlb	0	; () banked
  4588  00238A  AF87               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4589  00238C  D002               	goto	l4185
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;MotorControl.c: 58: CCP3CONbits.P3M1 = 1;
  4593  00238E  8EB7               	bsf	4023,7,c	;volatile
  4594  002390  D00C               	goto	l4189
  4595  002392                     l4185:
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;MotorControl.c: 59: else if (PIDValue > 0)
  4599  002392  0100               	movlb	0	; () banked
  4600  002394  BF87               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4601  002396  D009               	goto	l4189
  4602  002398  0100               	movlb	0	; () banked
  4603  00239A  5187               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4604  00239C  E104               	bnz	u3610
  4605  00239E  0100               	movlb	0	; () banked
  4606  0023A0  0586               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4607  0023A2  A0D8               	btfss	status,0,c
  4608  0023A4  D002               	goto	l4189
  4609  0023A6                     u3610:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;MotorControl.c: 60: CCP3CONbits.P3M1 = 0;
  4613  0023A6  9EB7               	bcf	4023,7,c	;volatile
  4614                           
  4615                           ; BSR set to: 0
  4616  0023A8  D000               	goto	l4189
  4617  0023AA                     l4189:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;MotorControl.c: 62: PIDValue = abs(PIDValue);
  4621  0023AA  C086  F084         	movff	ImplementPIDMotion@PIDValue,abs@a
  4622  0023AE  C087  F085         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4623  0023B2  EC00  F016         	call	_abs	;wreg free
  4624  0023B6  C084  F086         	movff	?_abs,ImplementPIDMotion@PIDValue
  4625  0023BA  C085  F087         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4626                           
  4627                           ;MotorControl.c: 63: CCPR3L = (PIDValue >> 2) & 0xFF;
  4628  0023BE  C086  F088         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4629  0023C2  C087  F089         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4630  0023C6  0100               	movlb	0	; () banked
  4631  0023C8  3589               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4632  0023CA  3389               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4633  0023CC  3388               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4634  0023CE  0100               	movlb	0	; () banked
  4635  0023D0  3589               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4636  0023D2  3389               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4637  0023D4  3388               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4638  0023D6  0100               	movlb	0	; () banked
  4639  0023D8  5188               	movf	??_ImplementPIDMotion& (0+255),w,b
  4640  0023DA  6EB8               	movwf	4024,c	;volatile
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;MotorControl.c: 64: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4644  0023DC  C086  F088         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4645  0023E0  0E03               	movlw	3
  4646  0023E2  0100               	movlb	0	; () banked
  4647  0023E4  1788               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4648  0023E6  0100               	movlb	0	; () banked
  4649  0023E8  3B88               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4650  0023EA  50B7               	movf	4023,w,c	;volatile
  4651  0023EC  0100               	movlb	0	; () banked
  4652  0023EE  1988               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4653  0023F0  0BCF               	andlw	-49
  4654  0023F2  1988               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4655  0023F4  6EB7               	movwf	4023,c	;volatile
  4656                           
  4657                           ; BSR set to: 0
  4658  0023F6  0012               	return		;funcret
  4659  0023F8                     __end_of_ImplementPIDMotion:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           postdec1	equ	0xFE5
  4671                           fsr1h	equ	0xFE2
  4672                           fsr1l	equ	0xFE1
  4673                           indf2	equ	0xFDF
  4674                           postinc2	equ	0xFDE
  4675                           fsr2h	equ	0xFDA
  4676                           fsr2l	equ	0xFD9
  4677                           status	equ	0xFD8
  4678                           
  4679 ;; *************** function _SPIInit *****************
  4680 ;; Defined at:
  4681 ;;		line 20 in file "SPISlave.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;		None               void
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    5
  4702 ;; This function calls:
  4703 ;;		_OpenSPI1
  4704 ;; This function is called by:
  4705 ;;		_initialize
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text16
  4710  002DB6                     __ptext16:
  4711                           	opt stack 0
  4712  002DB6                     _SPIInit:
  4713                           	opt stack 24
  4714                           
  4715                           ;SPISlave.c: 22: TRISCbits.RC4 = 1;
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;incstack = 0
  4719  002DB6  8894               	bsf	3988,4,c	;volatile
  4720                           
  4721                           ;SPISlave.c: 23: TRISCbits.RC5 = 0;
  4722  002DB8  9A94               	bcf	3988,5,c	;volatile
  4723                           
  4724                           ;SPISlave.c: 24: TRISFbits.RF7 = 1;
  4725  002DBA  8E97               	bsf	3991,7,c	;volatile
  4726                           
  4727                           ;SPISlave.c: 25: TRISCbits.RC6 = 0;
  4728  002DBC  9C94               	bcf	3988,6,c	;volatile
  4729                           
  4730                           ;SPISlave.c: 26: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4731  002DBE  0E00               	movlw	0
  4732  002DC0  6E18               	movwf	OpenSPI1@bus_mode,c
  4733  002DC2  0E00               	movlw	0
  4734  002DC4  6E19               	movwf	OpenSPI1@smp_phase,c
  4735  002DC6  0E04               	movlw	4
  4736  002DC8  ECC5  F013         	call	_OpenSPI1
  4737                           
  4738                           ;SPISlave.c: 27: PIE1bits.SSP1IE = 1;
  4739  002DCC  869D               	bsf	3997,3,c	;volatile
  4740                           
  4741                           ;SPISlave.c: 28: T4CONbits.T4CKPS = 0x3;
  4742  002DCE  0E03               	movlw	3
  4743  002DD0  1276               	iorwf	3958,f,c	;volatile
  4744  002DD2  0012               	return		;funcret
  4745  002DD4                     __end_of_SPIInit:
  4746                           	opt stack 0
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           postinc0	equ	0xFEE
  4755                           wreg	equ	0xFE8
  4756                           postdec1	equ	0xFE5
  4757                           fsr1h	equ	0xFE2
  4758                           fsr1l	equ	0xFE1
  4759                           indf2	equ	0xFDF
  4760                           postinc2	equ	0xFDE
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765 ;; *************** function _RecTmrInit *****************
  4766 ;; Defined at:
  4767 ;;		line 305 in file "RTDuC.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;Total ram usage:        0 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    4
  4788 ;; This function calls:
  4789 ;;		Nothing
  4790 ;; This function is called by:
  4791 ;;		_initialize
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text17
  4796  002E72                     __ptext17:
  4797                           	opt stack 0
  4798  002E72                     _RecTmrInit:
  4799                           	opt stack 25
  4800                           
  4801                           ;RTDuC.c: 307: T3CONbits.T3CKPS = 0x3;
  4802                           
  4803                           ;incstack = 0
  4804  002E72  0E30               	movlw	48
  4805  002E74  12B1               	iorwf	4017,f,c	;volatile
  4806                           
  4807                           ;RTDuC.c: 308: T3CONbits.TMR3CS = 0;
  4808  002E76  92B1               	bcf	4017,1,c	;volatile
  4809  002E78  0012               	return		;funcret
  4810  002E7A                     __end_of_RecTmrInit:
  4811                           	opt stack 0
  4812                           tblptru	equ	0xFF8
  4813                           tblptrh	equ	0xFF7
  4814                           tblptrl	equ	0xFF6
  4815                           tablat	equ	0xFF5
  4816                           prodh	equ	0xFF4
  4817                           prodl	equ	0xFF3
  4818                           intcon	equ	0xFF2
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           postdec1	equ	0xFE5
  4822                           fsr1h	equ	0xFE2
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _RTDInit *****************
  4831 ;; Defined at:
  4832 ;;		line 3 in file "ResolverToDigital.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		wreg, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    5
  4853 ;; This function calls:
  4854 ;;		_Delay10TCYx
  4855 ;;		_Delay1KTCYx
  4856 ;;		_Delay1TCYx
  4857 ;; This function is called by:
  4858 ;;		_initialize
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text18
  4863  002B78                     __ptext18:
  4864                           	opt stack 0
  4865  002B78                     _RTDInit:
  4866                           	opt stack 24
  4867                           
  4868                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4869                           
  4870                           ;incstack = 0
  4871  002B78  6895               	setf	3989,c	;volatile
  4872                           
  4873                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4874  002B7A  6899               	setf	3993,c	;volatile
  4875                           
  4876                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4877  002B7C  9096               	bcf	3990,0,c	;volatile
  4878                           
  4879                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4880  002B7E  9296               	bcf	3990,1,c	;volatile
  4881                           
  4882                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4883  002B80  9496               	bcf	3990,2,c	;volatile
  4884                           
  4885                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4886  002B82  909A               	bcf	3994,0,c	;volatile
  4887                           
  4888                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4889  002B84  8A96               	bsf	3990,5,c	;volatile
  4890                           
  4891                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4892  002B86  8C96               	bsf	3990,6,c	;volatile
  4893                           
  4894                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4895  002B88  8E96               	bsf	3990,7,c	;volatile
  4896                           
  4897                           ;ResolverToDigital.c: 15: PORTJbits.RJ0 = 0;
  4898  002B8A  9088               	bcf	3976,0,c	;volatile
  4899                           
  4900                           ;ResolverToDigital.c: 16: Delay10TCYx(10);
  4901  002B8C  0E0A               	movlw	10
  4902  002B8E  EC16  F017         	call	_Delay10TCYx
  4903                           
  4904                           ;ResolverToDigital.c: 17: PORTJbits.RJ0 = 1;
  4905  002B92  8088               	bsf	3976,0,c	;volatile
  4906                           
  4907                           ;ResolverToDigital.c: 18: Delay1KTCYx(20);
  4908  002B94  0E14               	movlw	20
  4909  002B96  EC0D  F017         	call	_Delay1KTCYx
  4910                           
  4911                           ;ResolverToDigital.c: 19: PORTEbits.RE0 = 0;
  4912  002B9A  9084               	bcf	3972,0,c	;volatile
  4913                           
  4914                           ;ResolverToDigital.c: 20: Delay1TCYx(1);
  4915  002B9C  0E01               	movlw	1
  4916  002B9E  EC28  F017         	call	_Delay1TCYx
  4917                           
  4918                           ;ResolverToDigital.c: 21: PORTEbits.RE0 = 1;
  4919  002BA2  8084               	bsf	3972,0,c	;volatile
  4920                           
  4921                           ;ResolverToDigital.c: 22: PORTEbits.RE2 = 0;
  4922  002BA4  9484               	bcf	3972,2,c	;volatile
  4923  002BA6  0012               	return		;funcret
  4924  002BA8                     __end_of_RTDInit:
  4925                           	opt stack 0
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           postdec1	equ	0xFE5
  4936                           fsr1h	equ	0xFE2
  4937                           fsr1l	equ	0xFE1
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _Delay1TCYx *****************
  4945 ;; Defined at:
  4946 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  unit            1    wreg     unsigned char 
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;  unit            1   23[COMRAM] unsigned char 
  4951 ;; Return value:  Size  Location     Type
  4952 ;;		None               void
  4953 ;; Registers used:
  4954 ;;		wreg
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;Total ram usage:        1 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    4
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_RTDInit
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text19
  4975  002E50                     __ptext19:
  4976                           	opt stack 0
  4977  002E50                     _Delay1TCYx:
  4978                           	opt stack 24
  4979                           
  4980                           ;incstack = 0
  4981                           ;Delay1TCYx@unit stored from wreg
  4982  002E50  6E18               	movwf	Delay1TCYx@unit,c
  4983  002E52                     l928:
  4984  002E52  F000               	nop	
  4985  002E54  2E18               	decfsz	Delay1TCYx@unit,f,c
  4986  002E56  D7FD               	goto	l928
  4987  002E58  D000               	goto	l930
  4988  002E5A                     l930:
  4989  002E5A  0012               	return		;funcret
  4990  002E5C                     __end_of_Delay1TCYx:
  4991                           	opt stack 0
  4992                           tblptru	equ	0xFF8
  4993                           tblptrh	equ	0xFF7
  4994                           tblptrl	equ	0xFF6
  4995                           tablat	equ	0xFF5
  4996                           prodh	equ	0xFF4
  4997                           prodl	equ	0xFF3
  4998                           intcon	equ	0xFF2
  4999                           postinc0	equ	0xFEE
  5000                           wreg	equ	0xFE8
  5001                           postdec1	equ	0xFE5
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           fsr2h	equ	0xFDA
  5007                           fsr2l	equ	0xFD9
  5008                           status	equ	0xFD8
  5009                           
  5010 ;; *************** function _Delay1KTCYx *****************
  5011 ;; Defined at:
  5012 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  unit            1    wreg     unsigned char 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  unit            1   23[COMRAM] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;		None               void
  5019 ;; Registers used:
  5020 ;;		wreg
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;Total ram usage:        1 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    4
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_RTDInit
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text20
  5041  002E1A                     __ptext20:
  5042                           	opt stack 0
  5043  002E1A                     _Delay1KTCYx:
  5044                           	opt stack 24
  5045                           
  5046                           ;incstack = 0
  5047                           ;Delay1KTCYx@unit stored from wreg
  5048  002E1A  6E18               	movwf	Delay1KTCYx@unit,c
  5049  002E1C  0EFA               	movlw	250
  5050  002E1E                     u4127:
  5051  002E1E  F000               	nop	
  5052  002E20  2EE8               	decfsz	wreg,f,c
  5053  002E22  D7FD               	goto	u4127
  5054  002E24  2E18               	decfsz	Delay1KTCYx@unit,f,c
  5055  002E26  D7FA               	goto	l3025
  5056  002E28  D000               	goto	l923
  5057  002E2A                     l923:
  5058  002E2A  0012               	return		;funcret
  5059  002E2C                     __end_of_Delay1KTCYx:
  5060                           	opt stack 0
  5061                           tblptru	equ	0xFF8
  5062                           tblptrh	equ	0xFF7
  5063                           tblptrl	equ	0xFF6
  5064                           tablat	equ	0xFF5
  5065                           prodh	equ	0xFF4
  5066                           prodl	equ	0xFF3
  5067                           intcon	equ	0xFF2
  5068                           postinc0	equ	0xFEE
  5069                           wreg	equ	0xFE8
  5070                           postdec1	equ	0xFE5
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           postinc2	equ	0xFDE
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079 ;; *************** function _Delay10TCYx *****************
  5080 ;; Defined at:
  5081 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;  unit            1    wreg     unsigned char 
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;  unit            1   23[COMRAM] unsigned char 
  5086 ;; Return value:  Size  Location     Type
  5087 ;;		None               void
  5088 ;; Registers used:
  5089 ;;		wreg
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;Total ram usage:        1 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    4
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_RTDInit
  5106 ;;		_ReadRTDpos
  5107 ;;		_main
  5108 ;;		_ReadRTDvel
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text21
  5113  002E2C                     __ptext21:
  5114                           	opt stack 0
  5115  002E2C                     _Delay10TCYx:
  5116                           	opt stack 23
  5117                           
  5118                           ;incstack = 0
  5119                           ;Delay10TCYx@unit stored from wreg
  5120  002E2C  6E18               	movwf	Delay10TCYx@unit,c
  5121  002E2E  0E03               	movlw	3
  5122  002E30                     u4137:
  5123  002E30  2EE8               	decfsz	wreg,f,c
  5124  002E32  D7FE               	goto	u4137
  5125  002E34  F000               	nop	
  5126  002E36  2E18               	decfsz	Delay10TCYx@unit,f,c
  5127  002E38  D7FA               	goto	l2769
  5128  002E3A  D000               	goto	l916
  5129  002E3C                     l916:
  5130  002E3C  0012               	return		;funcret
  5131  002E3E                     __end_of_Delay10TCYx:
  5132                           	opt stack 0
  5133                           tblptru	equ	0xFF8
  5134                           tblptrh	equ	0xFF7
  5135                           tblptrl	equ	0xFF6
  5136                           tablat	equ	0xFF5
  5137                           prodh	equ	0xFF4
  5138                           prodl	equ	0xFF3
  5139                           intcon	equ	0xFF2
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           postdec1	equ	0xFE5
  5143                           fsr1h	equ	0xFE2
  5144                           fsr1l	equ	0xFE1
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _PIDInit *****************
  5152 ;; Defined at:
  5153 ;;		line 18 in file "PID.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;		None
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;		None
  5158 ;; Return value:  Size  Location     Type
  5159 ;;		None               void
  5160 ;; Registers used:
  5161 ;;		wreg, status,2
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;Total ram usage:        0 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    4
  5174 ;; This function calls:
  5175 ;;		Nothing
  5176 ;; This function is called by:
  5177 ;;		_initialize
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text22
  5182  0028CC                     __ptext22:
  5183                           	opt stack 0
  5184  0028CC                     _PIDInit:
  5185                           	opt stack 25
  5186                           
  5187                           ;PID.c: 20: error = 0;
  5188                           
  5189                           ;incstack = 0
  5190  0028CC  0E00               	movlw	0
  5191  0028CE  0100               	movlb	0	; () banked
  5192  0028D0  6FB9               	movwf	_error& (0+255),b
  5193  0028D2  0E00               	movlw	0
  5194  0028D4  0100               	movlb	0	; () banked
  5195  0028D6  6FBA               	movwf	(_error+1)& (0+255),b
  5196  0028D8  0E00               	movlw	0
  5197  0028DA  0100               	movlb	0	; () banked
  5198  0028DC  6FBB               	movwf	(_error+2)& (0+255),b
  5199                           
  5200                           ;PID.c: 21: prevErr = 0;
  5201  0028DE  0E00               	movlw	0
  5202  0028E0  0100               	movlb	0	; () banked
  5203  0028E2  6FBF               	movwf	_prevErr& (0+255),b
  5204  0028E4  0E00               	movlw	0
  5205  0028E6  0100               	movlb	0	; () banked
  5206  0028E8  6FC0               	movwf	(_prevErr+1)& (0+255),b
  5207  0028EA  0E00               	movlw	0
  5208  0028EC  0100               	movlb	0	; () banked
  5209  0028EE  6FC1               	movwf	(_prevErr+2)& (0+255),b
  5210                           
  5211                           ;PID.c: 22: intErr = 0;
  5212  0028F0  0E00               	movlw	0
  5213  0028F2  0100               	movlb	0	; () banked
  5214  0028F4  6FBC               	movwf	_intErr& (0+255),b
  5215  0028F6  0E00               	movlw	0
  5216  0028F8  0100               	movlb	0	; () banked
  5217  0028FA  6FBD               	movwf	(_intErr+1)& (0+255),b
  5218  0028FC  0E00               	movlw	0
  5219  0028FE  0100               	movlb	0	; () banked
  5220  002900  6FBE               	movwf	(_intErr+2)& (0+255),b
  5221                           
  5222                           ;PID.c: 24: T0CON = 0x04;
  5223  002902  0E04               	movlw	4
  5224  002904  6ED5               	movwf	4053,c	;volatile
  5225                           
  5226                           ;PID.c: 25: TMR0H = 0xDB;
  5227  002906  0EDB               	movlw	219
  5228  002908  6ED7               	movwf	4055,c	;volatile
  5229                           
  5230                           ;PID.c: 26: TMR0L = 0x60;
  5231  00290A  0E60               	movlw	96
  5232  00290C  6ED6               	movwf	4054,c	;volatile
  5233                           
  5234                           ; BSR set to: 0
  5235  00290E  0012               	return		;funcret
  5236  002910                     __end_of_PIDInit:
  5237                           	opt stack 0
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           intcon	equ	0xFF2
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1h	equ	0xFE2
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _MotorDriverInit *****************
  5257 ;; Defined at:
  5258 ;;		line 7 in file "MotorControl.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		wreg, status,2
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    4
  5279 ;; This function calls:
  5280 ;;		Nothing
  5281 ;; This function is called by:
  5282 ;;		_initialize
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           	psect	text23
  5287  002CE8                     __ptext23:
  5288                           	opt stack 0
  5289  002CE8                     _MotorDriverInit:
  5290                           	opt stack 25
  5291                           
  5292                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;incstack = 0
  5296  002CE8  9098               	bcf	3992,0,c	;volatile
  5297                           
  5298                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  5299  002CEA  9896               	bcf	3990,4,c	;volatile
  5300                           
  5301                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  5302  002CEC  9696               	bcf	3990,3,c	;volatile
  5303                           
  5304                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  5305  002CEE  9698               	bcf	3992,3,c	;volatile
  5306                           
  5307                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  5308  002CF0  8093               	bsf	3987,0,c	;volatile
  5309                           
  5310                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  5311  002CF2  9892               	bcf	3986,4,c	;volatile
  5312                           
  5313                           ;MotorControl.c: 18: CCPR3L = 0x00;
  5314  002CF4  0E00               	movlw	0
  5315  002CF6  6EB8               	movwf	4024,c	;volatile
  5316                           
  5317                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  5318  002CF8  98B7               	bcf	4023,4,c	;volatile
  5319                           
  5320                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  5321  002CFA  9AB7               	bcf	4023,5,c	;volatile
  5322                           
  5323                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  5324  002CFC  0E4C               	movlw	76
  5325  002CFE  6EB7               	movwf	4023,c	;volatile
  5326                           
  5327                           ;MotorControl.c: 22: PR2 = 0xFF;
  5328  002D00  68CB               	setf	4043,c	;volatile
  5329                           
  5330                           ;MotorControl.c: 23: T3CON = 0x00;
  5331  002D02  0E00               	movlw	0
  5332  002D04  6EB1               	movwf	4017,c	;volatile
  5333                           
  5334                           ;MotorControl.c: 24: T2CON = 0x04;
  5335  002D06  0E04               	movlw	4
  5336  002D08  6ECA               	movwf	4042,c	;volatile
  5337  002D0A  0012               	return		;funcret
  5338  002D0C                     __end_of_MotorDriverInit:
  5339                           	opt stack 0
  5340                           tblptru	equ	0xFF8
  5341                           tblptrh	equ	0xFF7
  5342                           tblptrl	equ	0xFF6
  5343                           tablat	equ	0xFF5
  5344                           prodh	equ	0xFF4
  5345                           prodl	equ	0xFF3
  5346                           intcon	equ	0xFF2
  5347                           postinc0	equ	0xFEE
  5348                           wreg	equ	0xFE8
  5349                           postdec1	equ	0xFE5
  5350                           fsr1h	equ	0xFE2
  5351                           fsr1l	equ	0xFE1
  5352                           indf2	equ	0xFDF
  5353                           postinc2	equ	0xFDE
  5354                           fsr2h	equ	0xFDA
  5355                           fsr2l	equ	0xFD9
  5356                           status	equ	0xFD8
  5357                           
  5358 ;; *************** function _JoystickInit *****************
  5359 ;; Defined at:
  5360 ;;		line 6 in file "Joystick.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;		None               void
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, status,0
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;Total ram usage:        0 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    4
  5381 ;; This function calls:
  5382 ;;		Nothing
  5383 ;; This function is called by:
  5384 ;;		_initialize
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text24
  5389  002BA8                     __ptext24:
  5390                           	opt stack 0
  5391  002BA8                     _JoystickInit:
  5392                           	opt stack 25
  5393                           
  5394                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  5395                           
  5396                           ;incstack = 0
  5397  002BA8  9492               	bcf	3986,2,c	;volatile
  5398                           
  5399                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  5400  002BAA  8293               	bsf	3987,1,c	;volatile
  5401                           
  5402                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  5403  002BAC  A281               	btfss	3969,1,c	;volatile
  5404  002BAE  D003               	goto	l31
  5405                           
  5406                           ;Joystick.c: 11: {
  5407                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  5408  002BB0  8480               	bsf	3968,2,c	;volatile
  5409                           
  5410                           ;Joystick.c: 13: JSEnableFlag = 1;
  5411  002BB2  0E01               	movlw	1
  5412  002BB4  D004               	goto	L1
  5413  002BB6                     l31:
  5414                           
  5415                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  5416  002BB6  B281               	btfsc	3969,1,c	;volatile
  5417  002BB8  D005               	goto	l3171
  5418                           
  5419                           ;Joystick.c: 16: {
  5420                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  5421  002BBA  9480               	bcf	3968,2,c	;volatile
  5422                           
  5423                           ;Joystick.c: 18: JSEnableFlag = 0;
  5424  002BBC  0E00               	movlw	0
  5425  002BBE                     L1:
  5426  002BBE  0100               	movlb	0	; () banked
  5427  002BC0  6FC4               	movwf	_JSEnableFlag& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430  002BC2  D000               	goto	l3171
  5431  002BC4                     l3171:
  5432                           
  5433                           ;Joystick.c: 19: }
  5434                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  5435  002BC4  80C2               	bsf	4034,0,c	;volatile
  5436                           
  5437                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  5438  002BC6  50C2               	movf	4034,w,c	;volatile
  5439  002BC8  0B01               	andlw	1
  5440  002BCA  6EC2               	movwf	4034,c	;volatile
  5441                           
  5442                           ;Joystick.c: 23: ADCON1 = 0x0D;
  5443  002BCC  0E0D               	movlw	13
  5444  002BCE  6EC1               	movwf	4033,c	;volatile
  5445                           
  5446                           ;Joystick.c: 24: ADCON2 = 0xB4;
  5447  002BD0  0EB4               	movlw	180
  5448  002BD2  6EC0               	movwf	4032,c	;volatile
  5449  002BD4  0012               	return		;funcret
  5450  002BD6                     __end_of_JoystickInit:
  5451                           	opt stack 0
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           prodh	equ	0xFF4
  5457                           prodl	equ	0xFF3
  5458                           intcon	equ	0xFF2
  5459                           postinc0	equ	0xFEE
  5460                           wreg	equ	0xFE8
  5461                           postdec1	equ	0xFE5
  5462                           fsr1h	equ	0xFE2
  5463                           fsr1l	equ	0xFE1
  5464                           indf2	equ	0xFDF
  5465                           postinc2	equ	0xFDE
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _InitializeInterrupts *****************
  5471 ;; Defined at:
  5472 ;;		line 311 in file "RTDuC.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;		None
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		None
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;Total ram usage:        0 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    4
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_initialize
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text25
  5501  002E5C                     __ptext25:
  5502                           	opt stack 0
  5503  002E5C                     _InitializeInterrupts:
  5504                           	opt stack 25
  5505                           
  5506                           ;RTDuC.c: 313: INTCONbits.GIE = 1;
  5507                           
  5508                           ;incstack = 0
  5509  002E5C  8EF2               	bsf	intcon,7,c	;volatile
  5510                           
  5511                           ;RTDuC.c: 314: INTCONbits.PEIE = 1;
  5512  002E5E  8CF2               	bsf	intcon,6,c	;volatile
  5513                           
  5514                           ;RTDuC.c: 316: INTCONbits.TMR0IE = 1;
  5515  002E60  8AF2               	bsf	intcon,5,c	;volatile
  5516                           
  5517                           ;RTDuC.c: 317: T0CONbits.TMR0ON = 1;
  5518  002E62  8ED5               	bsf	4053,7,c	;volatile
  5519                           
  5520                           ;RTDuC.c: 319: PIE2bits.OSCFIE = 1;
  5521  002E64  8EA0               	bsf	4000,7,c	;volatile
  5522  002E66  0012               	return		;funcret
  5523  002E68                     __end_of_InitializeInterrupts:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           postinc0	equ	0xFEE
  5533                           wreg	equ	0xFE8
  5534                           postdec1	equ	0xFE5
  5535                           fsr1h	equ	0xFE2
  5536                           fsr1l	equ	0xFE1
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _EEPROMInit *****************
  5544 ;; Defined at:
  5545 ;;		line 13 in file "EEPROM.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;		None               void
  5552 ;; Registers used:
  5553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    7
  5566 ;; This function calls:
  5567 ;;		_EEBootUp
  5568 ;; This function is called by:
  5569 ;;		_initialize
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text26
  5574  002E06                     __ptext26:
  5575                           	opt stack 0
  5576  002E06                     _EEPROMInit:
  5577                           	opt stack 22
  5578                           
  5579                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5580                           
  5581                           ;incstack = 0
  5582  002E06  9EA6               	bcf	4006,7,c	;volatile
  5583                           
  5584                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5585  002E08  9CA6               	bcf	4006,6,c	;volatile
  5586                           
  5587                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5588  002E0A  84A6               	bsf	4006,2,c	;volatile
  5589                           
  5590                           ;EEPROM.c: 19: EEBootUp();
  5591  002E0C  ECCF  F012         	call	_EEBootUp	;wreg free
  5592                           
  5593                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5594  002E10  0E3D               	movlw	61
  5595  002E12  6ED2               	movwf	4050,c	;volatile
  5596                           
  5597                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5598  002E14  84A0               	bsf	4000,2,c	;volatile
  5599                           
  5600                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5601  002E16  84A2               	bsf	4002,2,c	;volatile
  5602  002E18  0012               	return		;funcret
  5603  002E1A                     __end_of_EEPROMInit:
  5604                           	opt stack 0
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           intcon	equ	0xFF2
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           postdec1	equ	0xFE5
  5615                           fsr1h	equ	0xFE2
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _EEBootUp *****************
  5624 ;; Defined at:
  5625 ;;		line 32 in file "EEPROM.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;		None               void
  5632 ;; Registers used:
  5633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    6
  5646 ;; This function calls:
  5647 ;;		_EEReadChar
  5648 ;;		_EEReadDouble
  5649 ;; This function is called by:
  5650 ;;		_EEPROMInit
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text27
  5655  00259E                     __ptext27:
  5656                           	opt stack 0
  5657  00259E                     _EEBootUp:
  5658                           	opt stack 22
  5659                           
  5660                           ;EEPROM.c: 34: if (EEReadChar(0x16))
  5661                           
  5662                           ;incstack = 0
  5663  00259E  0E16               	movlw	22
  5664  0025A0  ECCB  F016         	call	_EEReadChar
  5665  0025A4  0900               	iorlw	0
  5666  0025A6  B4D8               	btfsc	status,2,c
  5667  0025A8  D031               	goto	l367
  5668                           
  5669                           ;EEPROM.c: 35: {
  5670                           ;EEPROM.c: 36: SetAngle = EEReadDouble(0x00);
  5671  0025AA  0E00               	movlw	0
  5672  0025AC  EC9A  F013         	call	_EEReadDouble
  5673  0025B0  C01E  F03E         	movff	?_EEReadDouble,_SetAngle
  5674  0025B4  C01F  F03F         	movff	?_EEReadDouble+1,_SetAngle+1
  5675  0025B8  C020  F040         	movff	?_EEReadDouble+2,_SetAngle+2
  5676                           
  5677                           ;EEPROM.c: 37: Kp = EEReadDouble(0x03);
  5678  0025BC  0E03               	movlw	3
  5679  0025BE  EC9A  F013         	call	_EEReadDouble
  5680  0025C2  C01E  F0B6         	movff	?_EEReadDouble,_Kp
  5681  0025C6  C01F  F0B7         	movff	?_EEReadDouble+1,_Kp+1
  5682  0025CA  C020  F0B8         	movff	?_EEReadDouble+2,_Kp+2
  5683                           
  5684                           ;EEPROM.c: 38: Ki = EEReadDouble(0x06);
  5685  0025CE  0E06               	movlw	6
  5686  0025D0  EC9A  F013         	call	_EEReadDouble
  5687  0025D4  C01E  F0B3         	movff	?_EEReadDouble,_Ki
  5688  0025D8  C01F  F0B4         	movff	?_EEReadDouble+1,_Ki+1
  5689  0025DC  C020  F0B5         	movff	?_EEReadDouble+2,_Ki+2
  5690                           
  5691                           ;EEPROM.c: 39: Kd = EEReadDouble(0x09);
  5692  0025E0  0E09               	movlw	9
  5693  0025E2  EC9A  F013         	call	_EEReadDouble
  5694  0025E6  C01E  F0B0         	movff	?_EEReadDouble,_Kd
  5695  0025EA  C01F  F0B1         	movff	?_EEReadDouble+1,_Kd+1
  5696  0025EE  C020  F0B2         	movff	?_EEReadDouble+2,_Kd+2
  5697                           
  5698                           ;EEPROM.c: 40: PIDEnableFlag = EEReadChar(0x15);
  5699  0025F2  0E15               	movlw	21
  5700  0025F4  ECCB  F016         	call	_EEReadChar
  5701  0025F8  0100               	movlb	0	; () banked
  5702  0025FA  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;EEPROM.c: 41: if(PIDEnableFlag == 1)
  5706  0025FC  0100               	movlb	0	; () banked
  5707  0025FE  05C5               	decf	_PIDEnableFlag& (0+255),w,b
  5708  002600  A4D8               	btfss	status,2,c
  5709  002602  D004               	goto	l367
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;EEPROM.c: 42: {
  5713                           ;EEPROM.c: 43: PIDEnableFlag = 3;
  5714  002604  0E03               	movlw	3
  5715  002606  0100               	movlb	0	; () banked
  5716  002608  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  5717                           
  5718                           ; BSR set to: 0
  5719  00260A  D000               	goto	l367
  5720  00260C                     l367:
  5721  00260C  0012               	return		;funcret
  5722  00260E                     __end_of_EEBootUp:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           prodh	equ	0xFF4
  5729                           prodl	equ	0xFF3
  5730                           intcon	equ	0xFF2
  5731                           postinc0	equ	0xFEE
  5732                           wreg	equ	0xFE8
  5733                           postdec1	equ	0xFE5
  5734                           fsr1h	equ	0xFE2
  5735                           fsr1l	equ	0xFE1
  5736                           indf2	equ	0xFDF
  5737                           postinc2	equ	0xFDE
  5738                           fsr2h	equ	0xFDA
  5739                           fsr2l	equ	0xFD9
  5740                           status	equ	0xFD8
  5741                           
  5742 ;; *************** function _EEReadDouble *****************
  5743 ;; Defined at:
  5744 ;;		line 105 in file "EEPROM.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  location        1    wreg     unsigned char 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  location        1   32[COMRAM] unsigned char 
  5749 ;;  x               1   33[COMRAM] unsigned char 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  3   29[COMRAM] unsigned char 
  5752 ;; Registers used:
  5753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5759 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;Total ram usage:        5 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    5
  5766 ;; This function calls:
  5767 ;;		_Busy_eep
  5768 ;;		_EEReassembleDouble
  5769 ;;		_Read_b_eep
  5770 ;; This function is called by:
  5771 ;;		_EEBootUp
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	text28
  5776  002734                     __ptext28:
  5777                           	opt stack 0
  5778  002734                     _EEReadDouble:
  5779                           	opt stack 22
  5780                           
  5781                           ;incstack = 0
  5782                           ;EEReadDouble@location stored from wreg
  5783  002734  6E21               	movwf	EEReadDouble@location,c
  5784                           
  5785                           ;EEPROM.c: 107: unsigned char x;
  5786                           ;EEPROM.c: 109: INTCON = INTCON & 0x3F;
  5787  002736  50F2               	movf	intcon,w,c	;volatile
  5788  002738  0B3F               	andlw	63
  5789  00273A  6EF2               	movwf	intcon,c	;volatile
  5790                           
  5791                           ;EEPROM.c: 111: for (x = 0; x < 3; x++)
  5792  00273C  0E00               	movlw	0
  5793  00273E  6E22               	movwf	EEReadDouble@x,c
  5794  002740                     l2787:
  5795  002740  0E02               	movlw	2
  5796  002742  6422               	cpfsgt	EEReadDouble@x,c
  5797  002744  D001               	goto	l2791
  5798  002746  D014               	goto	l2799
  5799  002748                     l2791:
  5800                           
  5801                           ;EEPROM.c: 112: {
  5802                           ;EEPROM.c: 113: DDouble[x] = Read_b_eep(location + x);
  5803  002748  5022               	movf	EEReadDouble@x,w,c
  5804  00274A  0D01               	mullw	1
  5805  00274C  0E3B               	movlw	low _DDouble
  5806  00274E  24F3               	addwf	prodl,w,c
  5807  002750  6ED9               	movwf	fsr2l,c
  5808  002752  0E00               	movlw	high _DDouble
  5809  002754  20F4               	addwfc	prodh,w,c
  5810  002756  6EDA               	movwf	fsr2h,c
  5811  002758  5021               	movf	EEReadDouble@location,w,c
  5812  00275A  2422               	addwf	EEReadDouble@x,w,c
  5813  00275C  6E18               	movwf	Read_b_eep@badd,c
  5814  00275E  6A19               	clrf	Read_b_eep@badd+1,c
  5815  002760  3619               	rlcf	Read_b_eep@badd+1,f,c
  5816  002762  ECEA  F016         	call	_Read_b_eep	;wreg free
  5817  002766  6EDF               	movwf	indf2,c
  5818                           
  5819                           ;EEPROM.c: 114: Busy_eep();
  5820  002768  EC3D  F017         	call	_Busy_eep	;wreg free
  5821  00276C  2A22               	incf	EEReadDouble@x,f,c
  5822  00276E  D7E8               	goto	l2787
  5823  002770                     l2799:
  5824                           
  5825                           ;EEPROM.c: 115: }
  5826                           ;EEPROM.c: 117: INTCON = INTCON | 0xC0;
  5827  002770  50F2               	movf	intcon,w,c	;volatile
  5828  002772  09C0               	iorlw	192
  5829  002774  6EF2               	movwf	intcon,c	;volatile
  5830                           
  5831                           ;EEPROM.c: 119: return EEReassembleDouble();
  5832  002776  EC88  F014         	call	_EEReassembleDouble	;wreg free
  5833  00277A  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5834  00277E  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5835  002782  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5836  002786  D000               	goto	l383
  5837  002788                     l383:
  5838  002788  0012               	return		;funcret
  5839  00278A                     __end_of_EEReadDouble:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           intcon	equ	0xFF2
  5848                           postinc0	equ	0xFEE
  5849                           wreg	equ	0xFE8
  5850                           postdec1	equ	0xFE5
  5851                           fsr1h	equ	0xFE2
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _EEReassembleDouble *****************
  5860 ;; Defined at:
  5861 ;;		line 67 in file "EEPROM.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  dub             3   26[COMRAM] unsigned char 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  3   23[COMRAM] unsigned char 
  5868 ;; Registers used:
  5869 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5875 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;Total ram usage:        6 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    4
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		_EEReadDouble
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text29
  5890  002910                     __ptext29:
  5891                           	opt stack 0
  5892  002910                     _EEReassembleDouble:
  5893                           	opt stack 22
  5894                           
  5895                           ;EEPROM.c: 69: double dub;
  5896                           ;EEPROM.c: 70: DoublePtr = (unsigned char*) &dub;
  5897                           
  5898                           ;incstack = 0
  5899  002910  0E1B               	movlw	low EEReassembleDouble@dub
  5900  002912  6E41               	movwf	_DoublePtr,c
  5901  002914  0E00               	movlw	high EEReassembleDouble@dub
  5902  002916  6E42               	movwf	_DoublePtr+1,c
  5903                           
  5904                           ;EEPROM.c: 71: DoublePtr[0] = DDouble[0];
  5905  002918  C041  FFD9         	movff	_DoublePtr,fsr2l
  5906  00291C  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  5907  002920  C03B  FFDF         	movff	_DDouble,indf2
  5908                           
  5909                           ;EEPROM.c: 72: DoublePtr[1] = DDouble[1];
  5910  002924  EE20 F001          	lfsr	2,1
  5911  002928  5041               	movf	_DoublePtr,w,c
  5912  00292A  26D9               	addwf	fsr2l,f,c
  5913  00292C  5042               	movf	_DoublePtr+1,w,c
  5914  00292E  22DA               	addwfc	fsr2h,f,c
  5915  002930  C03C  FFDF         	movff	_DDouble+1,indf2
  5916                           
  5917                           ;EEPROM.c: 73: DoublePtr[2] = DDouble[2];
  5918  002934  EE20 F002          	lfsr	2,2
  5919  002938  5041               	movf	_DoublePtr,w,c
  5920  00293A  26D9               	addwf	fsr2l,f,c
  5921  00293C  5042               	movf	_DoublePtr+1,w,c
  5922  00293E  22DA               	addwfc	fsr2h,f,c
  5923  002940  C03D  FFDF         	movff	_DDouble+2,indf2
  5924                           
  5925                           ;EEPROM.c: 74: return dub;
  5926  002944  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5927  002948  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5928  00294C  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5929  002950  D000               	goto	l373
  5930  002952                     l373:
  5931  002952  0012               	return		;funcret
  5932  002954                     __end_of_EEReassembleDouble:
  5933                           	opt stack 0
  5934                           tblptru	equ	0xFF8
  5935                           tblptrh	equ	0xFF7
  5936                           tblptrl	equ	0xFF6
  5937                           tablat	equ	0xFF5
  5938                           prodh	equ	0xFF4
  5939                           prodl	equ	0xFF3
  5940                           intcon	equ	0xFF2
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1h	equ	0xFE2
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           postinc2	equ	0xFDE
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _EEReadChar *****************
  5953 ;; Defined at:
  5954 ;;		line 141 in file "EEPROM.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  location        1    wreg     unsigned char 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  location        1   25[COMRAM] unsigned char 
  5959 ;;  ch              1   26[COMRAM] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      unsigned char 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    5
  5976 ;; This function calls:
  5977 ;;		_Read_b_eep
  5978 ;; This function is called by:
  5979 ;;		_EEBootUp
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text30
  5984  002D96                     __ptext30:
  5985                           	opt stack 0
  5986  002D96                     _EEReadChar:
  5987                           	opt stack 22
  5988                           
  5989                           ;incstack = 0
  5990                           ;EEReadChar@location stored from wreg
  5991  002D96  6E1A               	movwf	EEReadChar@location,c
  5992                           
  5993                           ;EEPROM.c: 143: unsigned char ch;
  5994                           ;EEPROM.c: 145: INTCON = INTCON & 0x3F;
  5995  002D98  50F2               	movf	intcon,w,c	;volatile
  5996  002D9A  0B3F               	andlw	63
  5997  002D9C  6EF2               	movwf	intcon,c	;volatile
  5998                           
  5999                           ;EEPROM.c: 147: ch = Read_b_eep(location);
  6000  002D9E  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  6001  002DA2  6A19               	clrf	Read_b_eep@badd+1,c
  6002  002DA4  ECEA  F016         	call	_Read_b_eep	;wreg free
  6003  002DA8  6E1B               	movwf	EEReadChar@ch,c
  6004                           
  6005                           ;EEPROM.c: 149: INTCON = INTCON | 0xC0;
  6006  002DAA  50F2               	movf	intcon,w,c	;volatile
  6007  002DAC  09C0               	iorlw	192
  6008  002DAE  6EF2               	movwf	intcon,c	;volatile
  6009                           
  6010                           ;EEPROM.c: 151: return ch;
  6011  002DB0  501B               	movf	EEReadChar@ch,w,c
  6012  002DB2  D000               	goto	l389
  6013  002DB4                     l389:
  6014  002DB4  0012               	return		;funcret
  6015  002DB6                     __end_of_EEReadChar:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           intcon	equ	0xFF2
  6024                           postinc0	equ	0xFEE
  6025                           wreg	equ	0xFE8
  6026                           postdec1	equ	0xFE5
  6027                           fsr1h	equ	0xFE2
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _Read_b_eep *****************
  6036 ;; Defined at:
  6037 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  badd            2   23[COMRAM] unsigned int 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;		None
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      unsigned char 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        2 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    4
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_EEReadDouble
  6062 ;;		_EEReadChar
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text31
  6067  002DD4                     __ptext31:
  6068                           	opt stack 0
  6069  002DD4                     _Read_b_eep:
  6070                           	opt stack 22
  6071                           
  6072                           ;incstack = 0
  6073  002DD4  5019               	movf	Read_b_eep@badd+1,w,c
  6074  002DD6  0B03               	andlw	3
  6075  002DD8  6EAA               	movwf	4010,c	;volatile
  6076  002DDA  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  6077  002DDE  9CA6               	bcf	4006,6,c	;volatile
  6078  002DE0  9EA6               	bcf	4006,7,c	;volatile
  6079  002DE2  80A6               	bsf	4006,0,c	;volatile
  6080  002DE4  F000               	nop	
  6081  002DE6  F000               	nop	
  6082  002DE8  50A8               	movf	4008,w,c	;volatile
  6083  002DEA  D000               	goto	l640
  6084  002DEC                     l640:
  6085  002DEC  0012               	return		;funcret
  6086  002DEE                     __end_of_Read_b_eep:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           intcon	equ	0xFF2
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1h	equ	0xFE2
  6099                           fsr1l	equ	0xFE1
  6100                           indf2	equ	0xFDF
  6101                           postinc2	equ	0xFDE
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _SendSPI1 *****************
  6107 ;; Defined at:
  6108 ;;		line 50 in file "SPISlave.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  data            1    wreg     unsigned char 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  data            1   28[COMRAM] unsigned char 
  6113 ;;  temp            1   27[COMRAM] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;		None               void
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0, cstack
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;Total ram usage:        2 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    6
  6130 ;; This function calls:
  6131 ;;		_SPIRestart
  6132 ;; This function is called by:
  6133 ;;		_main
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text32
  6138  002BD6                     __ptext32:
  6139                           	opt stack 0
  6140  002BD6                     _SendSPI1:
  6141                           	opt stack 24
  6142                           
  6143                           ;incstack = 0
  6144                           ;SendSPI1@data stored from wreg
  6145  002BD6  6E1D               	movwf	SendSPI1@data,c
  6146                           
  6147                           ;SPISlave.c: 52: SSP1BUF = data;
  6148  002BD8  C01D  FFC9         	movff	SendSPI1@data,4041	;volatile
  6149                           
  6150                           ;SPISlave.c: 53: unsigned char temp;
  6151                           ;SPISlave.c: 54: PIR1bits.SSP1IF = 0;
  6152  002BDC  969E               	bcf	3998,3,c	;volatile
  6153                           
  6154                           ;SPISlave.c: 55: temp = SSP1BUF;
  6155  002BDE  CFC9 F01C          	movff	4041,SendSPI1@temp	;volatile
  6156                           
  6157                           ;SPISlave.c: 56: PIR3bits.TMR4IF = 0;
  6158  002BE2  96A4               	bcf	4004,3,c	;volatile
  6159                           
  6160                           ;SPISlave.c: 57: T4CONbits.TMR4ON = 1;
  6161  002BE4  8476               	bsf	3958,2,c	;volatile
  6162                           
  6163                           ;SPISlave.c: 58: TMR4 = timer4;
  6164  002BE6  C044  FF78         	movff	_timer4,3960	;volatile
  6165                           
  6166                           ;SPISlave.c: 59: while (!PIR1bits.SSP1IF)
  6167  002BEA  D005               	goto	l3467
  6168  002BEC                     l270:
  6169                           
  6170                           ;SPISlave.c: 60: {
  6171                           ;SPISlave.c: 61: if (PIR3bits.TMR4IF == 1)
  6172  002BEC  A6A4               	btfss	4004,3,c	;volatile
  6173  002BEE  D003               	goto	l3467
  6174                           
  6175                           ;SPISlave.c: 62: {
  6176                           ;SPISlave.c: 63: SPIRestart();
  6177  002BF0  ECF7  F016         	call	_SPIRestart	;wreg free
  6178  002BF4  D000               	goto	l3467
  6179  002BF6                     l3467:
  6180  002BF6  A69E               	btfss	3998,3,c	;volatile
  6181  002BF8  D7F9               	goto	l270
  6182                           
  6183                           ;SPISlave.c: 64: }
  6184                           ;SPISlave.c: 65: }
  6185                           ;SPISlave.c: 66: SSP1CON1bits.SSPOV1 = 0;
  6186  002BFA  9CC6               	bcf	4038,6,c	;volatile
  6187                           
  6188                           ;SPISlave.c: 67: PIR1bits.SSP1IF = 0;
  6189  002BFC  969E               	bcf	3998,3,c	;volatile
  6190  002BFE  0012               	return		;funcret
  6191  002C00                     __end_of_SendSPI1:
  6192                           	opt stack 0
  6193                           tblptru	equ	0xFF8
  6194                           tblptrh	equ	0xFF7
  6195                           tblptrl	equ	0xFF6
  6196                           tablat	equ	0xFF5
  6197                           prodh	equ	0xFF4
  6198                           prodl	equ	0xFF3
  6199                           intcon	equ	0xFF2
  6200                           postinc0	equ	0xFEE
  6201                           wreg	equ	0xFE8
  6202                           postdec1	equ	0xFE5
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function _SaveAll *****************
  6212 ;; Defined at:
  6213 ;;		line 161 in file "EEPROM.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;		None               void
  6220 ;; Registers used:
  6221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    6
  6234 ;; This function calls:
  6235 ;;		_EEWriteChar
  6236 ;;		_EEWriteDouble
  6237 ;; This function is called by:
  6238 ;;		_main
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text33
  6243  0021E0                     __ptext33:
  6244                           	opt stack 0
  6245  0021E0                     _SaveAll:
  6246                           	opt stack 24
  6247                           
  6248                           ;EEPROM.c: 163: EEWriteDouble(0x00, SetAngle);
  6249                           
  6250                           ;incstack = 0
  6251  0021E0  C03E  F01C         	movff	_SetAngle,EEWriteDouble@dub
  6252  0021E4  C03F  F01D         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6253  0021E8  C040  F01E         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6254  0021EC  0E00               	movlw	0
  6255  0021EE  ECF0  F013         	call	_EEWriteDouble
  6256                           
  6257                           ;EEPROM.c: 164: EEWriteDouble(0x03, Kp);
  6258  0021F2  C0B6  F01C         	movff	_Kp,EEWriteDouble@dub
  6259  0021F6  C0B7  F01D         	movff	_Kp+1,EEWriteDouble@dub+1
  6260  0021FA  C0B8  F01E         	movff	_Kp+2,EEWriteDouble@dub+2
  6261  0021FE  0E03               	movlw	3
  6262  002200  ECF0  F013         	call	_EEWriteDouble
  6263                           
  6264                           ;EEPROM.c: 165: EEWriteDouble(0x06, Ki);
  6265  002204  C0B3  F01C         	movff	_Ki,EEWriteDouble@dub
  6266  002208  C0B4  F01D         	movff	_Ki+1,EEWriteDouble@dub+1
  6267  00220C  C0B5  F01E         	movff	_Ki+2,EEWriteDouble@dub+2
  6268  002210  0E06               	movlw	6
  6269  002212  ECF0  F013         	call	_EEWriteDouble
  6270                           
  6271                           ;EEPROM.c: 166: EEWriteDouble(0x09, Kd);
  6272  002216  C0B0  F01C         	movff	_Kd,EEWriteDouble@dub
  6273  00221A  C0B1  F01D         	movff	_Kd+1,EEWriteDouble@dub+1
  6274  00221E  C0B2  F01E         	movff	_Kd+2,EEWriteDouble@dub+2
  6275  002222  0E09               	movlw	9
  6276  002224  ECF0  F013         	call	_EEWriteDouble
  6277                           
  6278                           ;EEPROM.c: 167: EEWriteChar(0x0C, PORTA);
  6279  002228  CF80 F01C          	movff	3968,EEWriteChar@ch	;volatile
  6280  00222C  0E0C               	movlw	12
  6281  00222E  EC98  F016         	call	_EEWriteChar
  6282                           
  6283                           ;EEPROM.c: 168: EEWriteChar(0x0D, PORTB);
  6284  002232  CF81 F01C          	movff	3969,EEWriteChar@ch	;volatile
  6285  002236  0E0D               	movlw	13
  6286  002238  EC98  F016         	call	_EEWriteChar
  6287                           
  6288                           ;EEPROM.c: 169: EEWriteChar(0x0E, PORTC);
  6289  00223C  CF82 F01C          	movff	3970,EEWriteChar@ch	;volatile
  6290  002240  0E0E               	movlw	14
  6291  002242  EC98  F016         	call	_EEWriteChar
  6292                           
  6293                           ;EEPROM.c: 170: EEWriteChar(0x0F, PORTD);
  6294  002246  CF83 F01C          	movff	3971,EEWriteChar@ch	;volatile
  6295  00224A  0E0F               	movlw	15
  6296  00224C  EC98  F016         	call	_EEWriteChar
  6297                           
  6298                           ;EEPROM.c: 171: EEWriteChar(0x10, PORTE);
  6299  002250  CF84 F01C          	movff	3972,EEWriteChar@ch	;volatile
  6300  002254  0E10               	movlw	16
  6301  002256  EC98  F016         	call	_EEWriteChar
  6302                           
  6303                           ;EEPROM.c: 172: EEWriteChar(0x11, PORTF);
  6304  00225A  CF85 F01C          	movff	3973,EEWriteChar@ch	;volatile
  6305  00225E  0E11               	movlw	17
  6306  002260  EC98  F016         	call	_EEWriteChar
  6307                           
  6308                           ;EEPROM.c: 173: EEWriteChar(0x12, PORTG);
  6309  002264  CF86 F01C          	movff	3974,EEWriteChar@ch	;volatile
  6310  002268  0E12               	movlw	18
  6311  00226A  EC98  F016         	call	_EEWriteChar
  6312                           
  6313                           ;EEPROM.c: 174: EEWriteChar(0x13, PORTH);
  6314  00226E  CF87 F01C          	movff	3975,EEWriteChar@ch	;volatile
  6315  002272  0E13               	movlw	19
  6316  002274  EC98  F016         	call	_EEWriteChar
  6317                           
  6318                           ;EEPROM.c: 175: EEWriteChar(0x14, PORTJ);
  6319  002278  CF88 F01C          	movff	3976,EEWriteChar@ch	;volatile
  6320  00227C  0E14               	movlw	20
  6321  00227E  EC98  F016         	call	_EEWriteChar
  6322                           
  6323                           ;EEPROM.c: 176: EEWriteChar(0x15, PIDEnableFlag);
  6324  002282  C0C5  F01C         	movff	_PIDEnableFlag,EEWriteChar@ch
  6325  002286  0E15               	movlw	21
  6326  002288  EC98  F016         	call	_EEWriteChar
  6327                           
  6328                           ;EEPROM.c: 177: EEWriteChar(0x16, 0x01);
  6329  00228C  0E01               	movlw	1
  6330  00228E  6E1C               	movwf	EEWriteChar@ch,c
  6331  002290  0E16               	movlw	22
  6332  002292  EC98  F016         	call	_EEWriteChar
  6333  002296  0012               	return		;funcret
  6334  002298                     __end_of_SaveAll:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           postinc0	equ	0xFEE
  6344                           wreg	equ	0xFE8
  6345                           postdec1	equ	0xFE5
  6346                           fsr1h	equ	0xFE2
  6347                           fsr1l	equ	0xFE1
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8
  6353                           
  6354 ;; *************** function _EEWriteDouble *****************
  6355 ;; Defined at:
  6356 ;;		line 82 in file "EEPROM.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;  location        1    wreg     unsigned char 
  6359 ;;  dub             3   27[COMRAM] unsigned char 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  location        1   30[COMRAM] unsigned char 
  6362 ;;  x               1   31[COMRAM] unsigned char 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6372 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;Total ram usage:        5 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    5
  6379 ;; This function calls:
  6380 ;;		_Busy_eep
  6381 ;;		_EEDisassembleDouble
  6382 ;;		_Write_b_eep
  6383 ;; This function is called by:
  6384 ;;		_SaveAll
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text34
  6389  0027E0                     __ptext34:
  6390                           	opt stack 0
  6391  0027E0                     _EEWriteDouble:
  6392                           	opt stack 24
  6393                           
  6394                           ;incstack = 0
  6395                           ;EEWriteDouble@location stored from wreg
  6396  0027E0  6E1F               	movwf	EEWriteDouble@location,c
  6397                           
  6398                           ;EEPROM.c: 84: unsigned char x;
  6399                           ;EEPROM.c: 86: EEDisassembleDouble(dub);
  6400  0027E2  C01C  F018         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6401  0027E6  C01D  F019         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6402  0027EA  C01E  F01A         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6403  0027EE  EC86  F015         	call	_EEDisassembleDouble	;wreg free
  6404                           
  6405                           ;EEPROM.c: 88: INTCON = INTCON & 0x3F;
  6406  0027F2  50F2               	movf	intcon,w,c	;volatile
  6407  0027F4  0B3F               	andlw	63
  6408  0027F6  6EF2               	movwf	intcon,c	;volatile
  6409                           
  6410                           ;EEPROM.c: 90: for (x = 0; x < 3; x++)
  6411  0027F8  0E00               	movlw	0
  6412  0027FA  6E20               	movwf	EEWriteDouble@x,c
  6413  0027FC                     l3259:
  6414  0027FC  0E02               	movlw	2
  6415  0027FE  6420               	cpfsgt	EEWriteDouble@x,c
  6416  002800  D001               	goto	l3263
  6417  002802  D014               	goto	l3273
  6418  002804                     l3263:
  6419                           
  6420                           ;EEPROM.c: 91: {
  6421                           ;EEPROM.c: 92: Write_b_eep(location, DDouble[x]);
  6422  002804  C01F  F018         	movff	EEWriteDouble@location,Write_b_eep@badd
  6423  002808  6A19               	clrf	Write_b_eep@badd+1,c
  6424  00280A  5020               	movf	EEWriteDouble@x,w,c
  6425  00280C  0D01               	mullw	1
  6426  00280E  0E3B               	movlw	low _DDouble
  6427  002810  24F3               	addwf	prodl,w,c
  6428  002812  6ED9               	movwf	fsr2l,c
  6429  002814  0E00               	movlw	high _DDouble
  6430  002816  20F4               	addwfc	prodh,w,c
  6431  002818  6EDA               	movwf	fsr2h,c
  6432  00281A  50DF               	movf	indf2,w,c
  6433  00281C  6E1A               	movwf	Write_b_eep@bdat,c
  6434  00281E  ECED  F014         	call	_Write_b_eep	;wreg free
  6435                           
  6436                           ;EEPROM.c: 93: location++;
  6437  002822  2A1F               	incf	EEWriteDouble@location,f,c
  6438                           
  6439                           ;EEPROM.c: 94: Busy_eep();
  6440  002824  EC3D  F017         	call	_Busy_eep	;wreg free
  6441  002828  2A20               	incf	EEWriteDouble@x,f,c
  6442  00282A  D7E8               	goto	l3259
  6443  00282C                     l3273:
  6444                           
  6445                           ;EEPROM.c: 95: }
  6446                           ;EEPROM.c: 97: INTCON = INTCON | 0xC0;
  6447  00282C  50F2               	movf	intcon,w,c	;volatile
  6448  00282E  09C0               	iorlw	192
  6449  002830  6EF2               	movwf	intcon,c	;volatile
  6450  002832  0012               	return		;funcret
  6451  002834                     __end_of_EEWriteDouble:
  6452                           	opt stack 0
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           intcon	equ	0xFF2
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           postdec1	equ	0xFE5
  6463                           fsr1h	equ	0xFE2
  6464                           fsr1l	equ	0xFE1
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471 ;; *************** function _EEDisassembleDouble *****************
  6472 ;; Defined at:
  6473 ;;		line 53 in file "EEPROM.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  dub             3   23[COMRAM] unsigned char 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;		None
  6478 ;; Return value:  Size  Location     Type
  6479 ;;		None               void
  6480 ;; Registers used:
  6481 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6487 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;Total ram usage:        3 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    4
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_EEWriteDouble
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text35
  6502  002B0C                     __ptext35:
  6503                           	opt stack 0
  6504  002B0C                     _EEDisassembleDouble:
  6505                           	opt stack 24
  6506                           
  6507                           ;EEPROM.c: 55: DoublePtr = (unsigned char*) &dub;
  6508                           
  6509                           ;incstack = 0
  6510  002B0C  0E18               	movlw	low EEDisassembleDouble@dub
  6511  002B0E  6E41               	movwf	_DoublePtr,c
  6512  002B10  0E00               	movlw	high EEDisassembleDouble@dub
  6513  002B12  6E42               	movwf	_DoublePtr+1,c
  6514                           
  6515                           ;EEPROM.c: 56: DDouble[0] = DoublePtr[0];
  6516  002B14  C041  FFD9         	movff	_DoublePtr,fsr2l
  6517  002B18  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  6518  002B1C  50DF               	movf	indf2,w,c
  6519  002B1E  6E3B               	movwf	_DDouble,c
  6520                           
  6521                           ;EEPROM.c: 57: DDouble[1] = DoublePtr[1];
  6522  002B20  EE20 F001          	lfsr	2,1
  6523  002B24  5041               	movf	_DoublePtr,w,c
  6524  002B26  26D9               	addwf	fsr2l,f,c
  6525  002B28  5042               	movf	_DoublePtr+1,w,c
  6526  002B2A  22DA               	addwfc	fsr2h,f,c
  6527  002B2C  50DF               	movf	indf2,w,c
  6528  002B2E  6E3C               	movwf	_DDouble+1,c
  6529                           
  6530                           ;EEPROM.c: 58: DDouble[2] = DoublePtr[2];
  6531  002B30  EE20 F002          	lfsr	2,2
  6532  002B34  5041               	movf	_DoublePtr,w,c
  6533  002B36  26D9               	addwf	fsr2l,f,c
  6534  002B38  5042               	movf	_DoublePtr+1,w,c
  6535  002B3A  22DA               	addwfc	fsr2h,f,c
  6536  002B3C  50DF               	movf	indf2,w,c
  6537  002B3E  6E3D               	movwf	_DDouble+2,c
  6538  002B40  0012               	return		;funcret
  6539  002B42                     __end_of_EEDisassembleDouble:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           postdec1	equ	0xFE5
  6551                           fsr1h	equ	0xFE2
  6552                           fsr1l	equ	0xFE1
  6553                           indf2	equ	0xFDF
  6554                           postinc2	equ	0xFDE
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _EEWriteChar *****************
  6560 ;; Defined at:
  6561 ;;		line 127 in file "EEPROM.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  location        1    wreg     unsigned char 
  6564 ;;  ch              1   27[COMRAM] unsigned char 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  location        1   28[COMRAM] unsigned char 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;		None               void
  6569 ;; Registers used:
  6570 ;;		wreg, status,2, status,0, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6576 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;Total ram usage:        2 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    5
  6583 ;; This function calls:
  6584 ;;		_Busy_eep
  6585 ;;		_Write_b_eep
  6586 ;; This function is called by:
  6587 ;;		_SaveAll
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text36
  6592  002D30                     __ptext36:
  6593                           	opt stack 0
  6594  002D30                     _EEWriteChar:
  6595                           	opt stack 24
  6596                           
  6597                           ;incstack = 0
  6598                           ;EEWriteChar@location stored from wreg
  6599  002D30  6E1D               	movwf	EEWriteChar@location,c
  6600                           
  6601                           ;EEPROM.c: 129: INTCON = INTCON & 0x3F;
  6602  002D32  50F2               	movf	intcon,w,c	;volatile
  6603  002D34  0B3F               	andlw	63
  6604  002D36  6EF2               	movwf	intcon,c	;volatile
  6605                           
  6606                           ;EEPROM.c: 131: Write_b_eep(location, ch);
  6607  002D38  C01D  F018         	movff	EEWriteChar@location,Write_b_eep@badd
  6608  002D3C  6A19               	clrf	Write_b_eep@badd+1,c
  6609  002D3E  C01C  F01A         	movff	EEWriteChar@ch,Write_b_eep@bdat
  6610  002D42  ECED  F014         	call	_Write_b_eep	;wreg free
  6611                           
  6612                           ;EEPROM.c: 132: Busy_eep();
  6613  002D46  EC3D  F017         	call	_Busy_eep	;wreg free
  6614                           
  6615                           ;EEPROM.c: 134: INTCON = INTCON | 0xC0;
  6616  002D4A  50F2               	movf	intcon,w,c	;volatile
  6617  002D4C  09C0               	iorlw	192
  6618  002D4E  6EF2               	movwf	intcon,c	;volatile
  6619  002D50  0012               	return		;funcret
  6620  002D52                     __end_of_EEWriteChar:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           postinc0	equ	0xFEE
  6630                           wreg	equ	0xFE8
  6631                           postdec1	equ	0xFE5
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _Write_b_eep *****************
  6641 ;; Defined at:
  6642 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  badd            2   23[COMRAM] unsigned int 
  6645 ;;  bdat            1   25[COMRAM] unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  GIE_BIT_VAL     1   26[COMRAM] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;		None               void
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6657 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;Total ram usage:        4 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    4
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_EEWriteDouble
  6668 ;;		_EEWriteChar
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text37
  6673  0029DA                     __ptext37:
  6674                           	opt stack 0
  6675  0029DA                     _Write_b_eep:
  6676                           	opt stack 24
  6677                           
  6678                           ;incstack = 0
  6679  0029DA  0E00               	movlw	0
  6680  0029DC  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6681  0029DE  5019               	movf	Write_b_eep@badd+1,w,c
  6682  0029E0  0B03               	andlw	3
  6683  0029E2  6EAA               	movwf	4010,c	;volatile
  6684  0029E4  C018  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6685  0029E8  C01A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6686  0029EC  9EA6               	bcf	4006,7,c	;volatile
  6687  0029EE  9CA6               	bcf	4006,6,c	;volatile
  6688  0029F0  84A6               	bsf	4006,2,c	;volatile
  6689  0029F2  0E00               	movlw	0
  6690  0029F4  BEF2               	btfsc	intcon,7,c	;volatile
  6691  0029F6  0E01               	movlw	1
  6692  0029F8  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6693  0029FA  9EF2               	bcf	intcon,7,c	;volatile
  6694  0029FC  0E55               	movlw	85
  6695  0029FE  6EA7               	movwf	4007,c	;volatile
  6696  002A00  0EAA               	movlw	170
  6697  002A02  6EA7               	movwf	4007,c	;volatile
  6698  002A04  82A6               	bsf	4006,1,c	;volatile
  6699  002A06  D000               	goto	l655
  6700  002A08                     l655:
  6701  002A08  B2A6               	btfsc	4006,1,c	;volatile
  6702  002A0A  D7FE               	goto	l655
  6703  002A0C  B01B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  6704  002A0E  D002               	bra	u2255
  6705  002A10  9EF2               	bcf	intcon,7,c	;volatile
  6706  002A12  D001               	bra	u2256
  6707  002A14                     u2255:
  6708  002A14  8EF2               	bsf	intcon,7,c	;volatile
  6709  002A16                     u2256:
  6710  002A16  94A6               	bcf	4006,2,c	;volatile
  6711  002A18  0012               	return		;funcret
  6712  002A1A                     __end_of_Write_b_eep:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           intcon	equ	0xFF2
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           postdec1	equ	0xFE5
  6724                           fsr1h	equ	0xFE2
  6725                           fsr1l	equ	0xFE1
  6726                           indf2	equ	0xFDF
  6727                           postinc2	equ	0xFDE
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function _Busy_eep *****************
  6733 ;; Defined at:
  6734 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;		None
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;		None               void
  6741 ;; Registers used:
  6742 ;;		None
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        0 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    4
  6755 ;; This function calls:
  6756 ;;		Nothing
  6757 ;; This function is called by:
  6758 ;;		_EEWriteDouble
  6759 ;;		_EEReadDouble
  6760 ;;		_EEWriteChar
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text38
  6765  002E7A                     __ptext38:
  6766                           	opt stack 0
  6767  002E7A                     _Busy_eep:
  6768                           	opt stack 22
  6769                           
  6770                           ;incstack = 0
  6771  002E7A  D000               	goto	l624
  6772  002E7C                     l624:
  6773  002E7C  B2A6               	btfsc	4006,1,c	;volatile
  6774  002E7E  D7FE               	goto	l624
  6775  002E80  0012               	return		;funcret
  6776  002E82                     __end_of_Busy_eep:
  6777                           	opt stack 0
  6778                           tblptru	equ	0xFF8
  6779                           tblptrh	equ	0xFF7
  6780                           tblptrl	equ	0xFF6
  6781                           tablat	equ	0xFF5
  6782                           prodh	equ	0xFF4
  6783                           prodl	equ	0xFF3
  6784                           intcon	equ	0xFF2
  6785                           postinc0	equ	0xFEE
  6786                           wreg	equ	0xFE8
  6787                           postdec1	equ	0xFE5
  6788                           fsr1h	equ	0xFE2
  6789                           fsr1l	equ	0xFE1
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796 ;; *************** function _SPIReassembleDouble *****************
  6797 ;; Defined at:
  6798 ;;		line 143 in file "SPISlave.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  dub             3   26[COMRAM] unsigned char 
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  3   23[COMRAM] unsigned char 
  6805 ;; Registers used:
  6806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6812 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;Total ram usage:        6 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    4
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_main
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text39
  6827  002954                     __ptext39:
  6828                           	opt stack 0
  6829  002954                     _SPIReassembleDouble:
  6830                           	opt stack 26
  6831                           
  6832                           ;SPISlave.c: 145: double dub;
  6833                           ;SPISlave.c: 146: DoublePtr = (unsigned char*) &dub;
  6834                           
  6835                           ;incstack = 0
  6836  002954  0E1B               	movlw	low SPIReassembleDouble@dub
  6837  002956  6E41               	movwf	_DoublePtr,c
  6838  002958  0E00               	movlw	high SPIReassembleDouble@dub
  6839  00295A  6E42               	movwf	_DoublePtr+1,c
  6840                           
  6841                           ;SPISlave.c: 147: DoublePtr[0] = DoubleSPIS[0];
  6842  00295C  C041  FFD9         	movff	_DoublePtr,fsr2l
  6843  002960  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  6844  002964  C037  FFDF         	movff	_DoubleSPIS,indf2
  6845                           
  6846                           ;SPISlave.c: 148: DoublePtr[1] = DoubleSPIS[1];
  6847  002968  EE20 F001          	lfsr	2,1
  6848  00296C  5041               	movf	_DoublePtr,w,c
  6849  00296E  26D9               	addwf	fsr2l,f,c
  6850  002970  5042               	movf	_DoublePtr+1,w,c
  6851  002972  22DA               	addwfc	fsr2h,f,c
  6852  002974  C038  FFDF         	movff	_DoubleSPIS+1,indf2
  6853                           
  6854                           ;SPISlave.c: 149: DoublePtr[2] = DoubleSPIS[2];
  6855  002978  EE20 F002          	lfsr	2,2
  6856  00297C  5041               	movf	_DoublePtr,w,c
  6857  00297E  26D9               	addwf	fsr2l,f,c
  6858  002980  5042               	movf	_DoublePtr+1,w,c
  6859  002982  22DA               	addwfc	fsr2h,f,c
  6860  002984  C039  FFDF         	movff	_DoubleSPIS+2,indf2
  6861                           
  6862                           ;SPISlave.c: 151: return dub;
  6863  002988  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  6864  00298C  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  6865  002990  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  6866  002994  D000               	goto	l298
  6867  002996                     l298:
  6868  002996  0012               	return		;funcret
  6869  002998                     __end_of_SPIReassembleDouble:
  6870                           	opt stack 0
  6871                           tblptru	equ	0xFF8
  6872                           tblptrh	equ	0xFF7
  6873                           tblptrl	equ	0xFF6
  6874                           tablat	equ	0xFF5
  6875                           prodh	equ	0xFF4
  6876                           prodl	equ	0xFF3
  6877                           intcon	equ	0xFF2
  6878                           postinc0	equ	0xFEE
  6879                           wreg	equ	0xFE8
  6880                           postdec1	equ	0xFE5
  6881                           fsr1h	equ	0xFE2
  6882                           fsr1l	equ	0xFE1
  6883                           indf2	equ	0xFDF
  6884                           postinc2	equ	0xFDE
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           
  6889 ;; *************** function _SPIDisassembleLode *****************
  6890 ;; Defined at:
  6891 ;;		line 108 in file "SPISlave.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  Data            2   36[COMRAM] PTR 
  6894 ;;		 -> DataLode(1809), 
  6895 ;;  Transmit        2   38[COMRAM] PTR unsigned char 
  6896 ;;		 -> TransmitLode(1809), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  dub             3   44[COMRAM] PTR unsigned char 
  6899 ;;  y               2   42[COMRAM] unsigned int 
  6900 ;; Return value:  Size  Location     Type
  6901 ;;		None               void
  6902 ;; Registers used:
  6903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;Total ram usage:       11 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    5
  6916 ;; This function calls:
  6917 ;;		___lwdiv
  6918 ;;		___wmul
  6919 ;; This function is called by:
  6920 ;;		_main
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           	psect	text40
  6925  00203A                     __ptext40:
  6926                           	opt stack 0
  6927  00203A                     _SPIDisassembleLode:
  6928                           	opt stack 25
  6929                           
  6930                           ;SPISlave.c: 110: unsigned int y = 0;
  6931                           
  6932                           ;incstack = 0
  6933  00203A  0E00               	movlw	0
  6934  00203C  6E2C               	movwf	SPIDisassembleLode@y+1,c
  6935  00203E  0E00               	movlw	0
  6936  002040  6E2B               	movwf	SPIDisassembleLode@y,c
  6937                           
  6938                           ;SPISlave.c: 111: double dub;
  6939                           ;SPISlave.c: 112: DoublePtr = (unsigned char*) &dub;
  6940  002042  0E2D               	movlw	low SPIDisassembleLode@dub
  6941  002044  6E41               	movwf	_DoublePtr,c
  6942  002046  0E00               	movlw	high SPIDisassembleLode@dub
  6943  002048  6E42               	movwf	_DoublePtr+1,c
  6944                           
  6945                           ;SPISlave.c: 113: for (y = 0; y != 1809; y += 3)
  6946  00204A  0E00               	movlw	0
  6947  00204C  6E2C               	movwf	SPIDisassembleLode@y+1,c
  6948  00204E  0E00               	movlw	0
  6949  002050  6E2B               	movwf	SPIDisassembleLode@y,c
  6950  002052  0E11               	movlw	17
  6951  002054  182B               	xorwf	SPIDisassembleLode@y,w,c
  6952  002056  E106               	bnz	l3503
  6953  002058  0E07               	movlw	7
  6954  00205A  182C               	xorwf	SPIDisassembleLode@y+1,w,c
  6955  00205C  B4D8               	btfsc	status,2,c
  6956  00205E  D05C               	goto	l288
  6957  002060  D001               	goto	l3503
  6958  002062  D05A               	goto	l288
  6959  002064                     l3503:
  6960                           
  6961                           ;SPISlave.c: 114: {
  6962                           ;SPISlave.c: 115: dub = Data[y / 3];
  6963  002064  0E00               	movlw	0
  6964  002066  6E1B               	movwf	___lwdiv@divisor+1,c
  6965  002068  0E03               	movlw	3
  6966  00206A  6E1A               	movwf	___lwdiv@divisor,c
  6967  00206C  C02B  F018         	movff	SPIDisassembleLode@y,___lwdiv@dividend
  6968  002070  C02C  F019         	movff	SPIDisassembleLode@y+1,___lwdiv@dividend+1
  6969  002074  EC6C  F013         	call	___lwdiv	;wreg free
  6970  002078  C018  F01F         	movff	?___lwdiv,___wmul@multiplier
  6971  00207C  C019  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
  6972  002080  0E00               	movlw	0
  6973  002082  6E22               	movwf	___wmul@multiplicand+1,c
  6974  002084  0E03               	movlw	3
  6975  002086  6E21               	movwf	___wmul@multiplicand,c
  6976  002088  EC15  F016         	call	___wmul	;wreg free
  6977  00208C  501F               	movf	?___wmul,w,c
  6978  00208E  2425               	addwf	SPIDisassembleLode@Data,w,c
  6979  002090  6ED9               	movwf	fsr2l,c
  6980  002092  5020               	movf	?___wmul+1,w,c
  6981  002094  2026               	addwfc	SPIDisassembleLode@Data+1,w,c
  6982  002096  6EDA               	movwf	fsr2h,c
  6983  002098  CFDE F02D          	movff	postinc2,SPIDisassembleLode@dub
  6984  00209C  CFDE F02E          	movff	postinc2,SPIDisassembleLode@dub+1
  6985  0020A0  CFDD F02F          	movff	postdec2,SPIDisassembleLode@dub+2
  6986                           
  6987                           ;SPISlave.c: 116: Transmit[y] = DoublePtr[0];
  6988  0020A4  C041  FFD9         	movff	_DoublePtr,fsr2l
  6989  0020A8  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  6990  0020AC  502B               	movf	SPIDisassembleLode@y,w,c
  6991  0020AE  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  6992  0020B0  6EE1               	movwf	fsr1l,c
  6993  0020B2  502C               	movf	SPIDisassembleLode@y+1,w,c
  6994  0020B4  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  6995  0020B6  6EE2               	movwf	fsr1h,c
  6996  0020B8  CFDF FFE7          	movff	indf2,indf1
  6997                           
  6998                           ;SPISlave.c: 117: Transmit[y + 1] = DoublePtr[1];
  6999  0020BC  EE20 F001          	lfsr	2,1
  7000  0020C0  5041               	movf	_DoublePtr,w,c
  7001  0020C2  26D9               	addwf	fsr2l,f,c
  7002  0020C4  5042               	movf	_DoublePtr+1,w,c
  7003  0020C6  22DA               	addwfc	fsr2h,f,c
  7004  0020C8  0E01               	movlw	1
  7005  0020CA  242B               	addwf	SPIDisassembleLode@y,w,c
  7006  0020CC  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  7007  0020CE  0E00               	movlw	0
  7008  0020D0  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  7009  0020D2  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  7010  0020D4  5029               	movf	??_SPIDisassembleLode,w,c
  7011  0020D6  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7012  0020D8  6EE1               	movwf	fsr1l,c
  7013  0020DA  502A               	movf	??_SPIDisassembleLode+1,w,c
  7014  0020DC  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7015  0020DE  6EE2               	movwf	fsr1h,c
  7016  0020E0  CFDF FFE7          	movff	indf2,indf1
  7017                           
  7018                           ;SPISlave.c: 118: Transmit[y + 2] = DoublePtr[2];
  7019  0020E4  EE20 F002          	lfsr	2,2
  7020  0020E8  5041               	movf	_DoublePtr,w,c
  7021  0020EA  26D9               	addwf	fsr2l,f,c
  7022  0020EC  5042               	movf	_DoublePtr+1,w,c
  7023  0020EE  22DA               	addwfc	fsr2h,f,c
  7024  0020F0  0E02               	movlw	2
  7025  0020F2  242B               	addwf	SPIDisassembleLode@y,w,c
  7026  0020F4  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  7027  0020F6  0E00               	movlw	0
  7028  0020F8  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  7029  0020FA  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  7030  0020FC  5029               	movf	??_SPIDisassembleLode,w,c
  7031  0020FE  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7032  002100  6EE1               	movwf	fsr1l,c
  7033  002102  502A               	movf	??_SPIDisassembleLode+1,w,c
  7034  002104  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7035  002106  6EE2               	movwf	fsr1h,c
  7036  002108  CFDF FFE7          	movff	indf2,indf1
  7037  00210C  0E03               	movlw	3
  7038  00210E  262B               	addwf	SPIDisassembleLode@y,f,c
  7039  002110  0E00               	movlw	0
  7040  002112  222C               	addwfc	SPIDisassembleLode@y+1,f,c
  7041  002114  D79E               	goto	L2
  7042  002116  D7A6               	goto	l3503
  7043  002118                     l288:
  7044  002118  0012               	return		;funcret
  7045  00211A                     __end_of_SPIDisassembleLode:
  7046                           	opt stack 0
  7047                           tblptru	equ	0xFF8
  7048                           tblptrh	equ	0xFF7
  7049                           tblptrl	equ	0xFF6
  7050                           tablat	equ	0xFF5
  7051                           prodh	equ	0xFF4
  7052                           prodl	equ	0xFF3
  7053                           intcon	equ	0xFF2
  7054                           postinc0	equ	0xFEE
  7055                           wreg	equ	0xFE8
  7056                           indf1	equ	0xFE7
  7057                           postdec1	equ	0xFE5
  7058                           fsr1h	equ	0xFE2
  7059                           fsr1l	equ	0xFE1
  7060                           indf2	equ	0xFDF
  7061                           postinc2	equ	0xFDE
  7062                           postdec2	equ	0xFDD
  7063                           fsr2h	equ	0xFDA
  7064                           fsr2l	equ	0xFD9
  7065                           status	equ	0xFD8
  7066                           
  7067 ;; *************** function ___wmul *****************
  7068 ;; Defined at:
  7069 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  multiplier      2   30[COMRAM] unsigned int 
  7072 ;;  multiplicand    2   32[COMRAM] unsigned int 
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;  product         2   34[COMRAM] unsigned int 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  2   30[COMRAM] unsigned int 
  7077 ;; Registers used:
  7078 ;;		wreg, status,2, status,0, prodl, prodh
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;Total ram usage:        6 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    4
  7091 ;; This function calls:
  7092 ;;		Nothing
  7093 ;; This function is called by:
  7094 ;;		_SPIDisassembleLode
  7095 ;;		_main
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	text41
  7100  002C2A                     __ptext41:
  7101                           	opt stack 0
  7102  002C2A                     ___wmul:
  7103                           	opt stack 26
  7104                           
  7105                           ;incstack = 0
  7106  002C2A  501F               	movf	___wmul@multiplier,w,c
  7107  002C2C  0221               	mulwf	___wmul@multiplicand,c
  7108  002C2E  CFF3 F023          	movff	prodl,___wmul@product
  7109  002C32  CFF4 F024          	movff	prodh,___wmul@product+1
  7110  002C36  501F               	movf	___wmul@multiplier,w,c
  7111  002C38  0222               	mulwf	___wmul@multiplicand+1,c
  7112  002C3A  50F3               	movf	prodl,w,c
  7113  002C3C  2624               	addwf	___wmul@product+1,f,c
  7114  002C3E  5020               	movf	___wmul@multiplier+1,w,c
  7115  002C40  0221               	mulwf	___wmul@multiplicand,c
  7116  002C42  50F3               	movf	prodl,w,c
  7117  002C44  2624               	addwf	___wmul@product+1,f,c
  7118  002C46  C023  F01F         	movff	___wmul@product,?___wmul
  7119  002C4A  C024  F020         	movff	___wmul@product+1,?___wmul+1
  7120  002C4E  D000               	goto	l687
  7121  002C50                     l687:
  7122  002C50  0012               	return		;funcret
  7123  002C52                     __end_of___wmul:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           indf1	equ	0xFE7
  7135                           postdec1	equ	0xFE5
  7136                           fsr1h	equ	0xFE2
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function ___lwdiv *****************
  7146 ;; Defined at:
  7147 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  dividend        2   23[COMRAM] unsigned int 
  7150 ;;  divisor         2   25[COMRAM] unsigned int 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  quotient        2   27[COMRAM] unsigned int 
  7153 ;;  counter         1   29[COMRAM] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  2   23[COMRAM] unsigned int 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;Total ram usage:        7 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    4
  7170 ;; This function calls:
  7171 ;;		Nothing
  7172 ;; This function is called by:
  7173 ;;		_SPIDisassembleLode
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           	psect	text42
  7178  0026D8                     __ptext42:
  7179                           	opt stack 0
  7180  0026D8                     ___lwdiv:
  7181                           	opt stack 25
  7182                           
  7183                           ;incstack = 0
  7184  0026D8  0E00               	movlw	0
  7185  0026DA  6E1D               	movwf	___lwdiv@quotient+1,c
  7186  0026DC  0E00               	movlw	0
  7187  0026DE  6E1C               	movwf	___lwdiv@quotient,c
  7188  0026E0  501A               	movf	___lwdiv@divisor,w,c
  7189  0026E2  101B               	iorwf	___lwdiv@divisor+1,w,c
  7190  0026E4  B4D8               	btfsc	status,2,c
  7191  0026E6  D021               	goto	l1230
  7192  0026E8  0E01               	movlw	1
  7193  0026EA  6E1E               	movwf	___lwdiv@counter,c
  7194  0026EC  D005               	goto	l3327
  7195  0026EE                     l3325:
  7196  0026EE  90D8               	bcf	status,0,c
  7197  0026F0  361A               	rlcf	___lwdiv@divisor,f,c
  7198  0026F2  361B               	rlcf	___lwdiv@divisor+1,f,c
  7199  0026F4  2A1E               	incf	___lwdiv@counter,f,c
  7200  0026F6  D000               	goto	l3327
  7201  0026F8                     l3327:
  7202  0026F8  BE1B               	btfsc	___lwdiv@divisor+1,7,c
  7203  0026FA  D002               	goto	l3329
  7204  0026FC  D7F8               	goto	l3325
  7205  0026FE  D000               	goto	l3329
  7206  002700                     l3329:
  7207  002700  90D8               	bcf	status,0,c
  7208  002702  361C               	rlcf	___lwdiv@quotient,f,c
  7209  002704  361D               	rlcf	___lwdiv@quotient+1,f,c
  7210  002706  501A               	movf	___lwdiv@divisor,w,c
  7211  002708  5C18               	subwf	___lwdiv@dividend,w,c
  7212  00270A  501B               	movf	___lwdiv@divisor+1,w,c
  7213  00270C  5819               	subwfb	___lwdiv@dividend+1,w,c
  7214  00270E  A0D8               	btfss	status,0,c
  7215  002710  D006               	goto	l3337
  7216  002712  501A               	movf	___lwdiv@divisor,w,c
  7217  002714  5E18               	subwf	___lwdiv@dividend,f,c
  7218  002716  501B               	movf	___lwdiv@divisor+1,w,c
  7219  002718  5A19               	subwfb	___lwdiv@dividend+1,f,c
  7220  00271A  801C               	bsf	___lwdiv@quotient,0,c
  7221  00271C  D000               	goto	l3337
  7222  00271E                     l3337:
  7223  00271E  90D8               	bcf	status,0,c
  7224  002720  321B               	rrcf	___lwdiv@divisor+1,f,c
  7225  002722  321A               	rrcf	___lwdiv@divisor,f,c
  7226  002724  2E1E               	decfsz	___lwdiv@counter,f,c
  7227  002726  D7EC               	goto	l3329
  7228  002728  D000               	goto	l1230
  7229  00272A                     l1230:
  7230  00272A  C01C  F018         	movff	___lwdiv@quotient,?___lwdiv
  7231  00272E  C01D  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7232  002732  0012               	return		;funcret
  7233  002734                     __end_of___lwdiv:
  7234                           	opt stack 0
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           indf1	equ	0xFE7
  7245                           postdec1	equ	0xFE5
  7246                           fsr1h	equ	0xFE2
  7247                           fsr1l	equ	0xFE1
  7248                           indf2	equ	0xFDF
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           fsr2h	equ	0xFDA
  7252                           fsr2l	equ	0xFD9
  7253                           status	equ	0xFD8
  7254                           
  7255 ;; *************** function _SPIDisassembleDouble *****************
  7256 ;; Defined at:
  7257 ;;		line 95 in file "SPISlave.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  dub             3   25[COMRAM] unsigned int 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;		None               void
  7264 ;; Registers used:
  7265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7271 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;Total ram usage:        3 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    5
  7278 ;; This function calls:
  7279 ;;		_GenerateChecksum
  7280 ;; This function is called by:
  7281 ;;		_main
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text43
  7286  002A98                     __ptext43:
  7287                           	opt stack 0
  7288  002A98                     _SPIDisassembleDouble:
  7289                           	opt stack 25
  7290                           
  7291                           ;SPISlave.c: 97: DoublePtr = (unsigned char*) &dub;
  7292                           
  7293                           ;incstack = 0
  7294  002A98  0E1A               	movlw	low SPIDisassembleDouble@dub
  7295  002A9A  6E41               	movwf	_DoublePtr,c
  7296  002A9C  0E00               	movlw	high SPIDisassembleDouble@dub
  7297  002A9E  6E42               	movwf	_DoublePtr+1,c
  7298                           
  7299                           ;SPISlave.c: 98: DoubleSPIS[0] = DoublePtr[0];
  7300  002AA0  C041  FFD9         	movff	_DoublePtr,fsr2l
  7301  002AA4  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  7302  002AA8  50DF               	movf	indf2,w,c
  7303  002AAA  6E37               	movwf	_DoubleSPIS,c
  7304                           
  7305                           ;SPISlave.c: 99: DoubleSPIS[1] = DoublePtr[1];
  7306  002AAC  EE20 F001          	lfsr	2,1
  7307  002AB0  5041               	movf	_DoublePtr,w,c
  7308  002AB2  26D9               	addwf	fsr2l,f,c
  7309  002AB4  5042               	movf	_DoublePtr+1,w,c
  7310  002AB6  22DA               	addwfc	fsr2h,f,c
  7311  002AB8  50DF               	movf	indf2,w,c
  7312  002ABA  6E38               	movwf	_DoubleSPIS+1,c
  7313                           
  7314                           ;SPISlave.c: 100: DoubleSPIS[2] = DoublePtr[2];
  7315  002ABC  EE20 F002          	lfsr	2,2
  7316  002AC0  5041               	movf	_DoublePtr,w,c
  7317  002AC2  26D9               	addwf	fsr2l,f,c
  7318  002AC4  5042               	movf	_DoublePtr+1,w,c
  7319  002AC6  22DA               	addwfc	fsr2h,f,c
  7320  002AC8  50DF               	movf	indf2,w,c
  7321  002ACA  6E39               	movwf	_DoubleSPIS+2,c
  7322                           
  7323                           ;SPISlave.c: 101: DoubleSPIS[3] = GenerateChecksum();
  7324  002ACC  ECCC  F014         	call	_GenerateChecksum	;wreg free
  7325  002AD0  6E3A               	movwf	_DoubleSPIS+3,c
  7326  002AD2  0012               	return		;funcret
  7327  002AD4                     __end_of_SPIDisassembleDouble:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           postinc0	equ	0xFEE
  7337                           wreg	equ	0xFE8
  7338                           indf1	equ	0xFE7
  7339                           postdec1	equ	0xFE5
  7340                           fsr1h	equ	0xFE2
  7341                           fsr1l	equ	0xFE1
  7342                           indf2	equ	0xFDF
  7343                           postinc2	equ	0xFDE
  7344                           postdec2	equ	0xFDD
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _GenerateChecksum *****************
  7350 ;; Defined at:
  7351 ;;		line 126 in file "SPISlave.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  y               1   24[COMRAM] unsigned char 
  7356 ;;  sum             1   23[COMRAM] unsigned char 
  7357 ;; Return value:  Size  Location     Type
  7358 ;;                  1    wreg      unsigned char 
  7359 ;; Registers used:
  7360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;Total ram usage:        2 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    4
  7373 ;; This function calls:
  7374 ;;		Nothing
  7375 ;; This function is called by:
  7376 ;;		_SPIDisassembleDouble
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text44
  7381  002998                     __ptext44:
  7382                           	opt stack 0
  7383  002998                     _GenerateChecksum:
  7384                           	opt stack 25
  7385                           
  7386                           ;SPISlave.c: 128: if ((Command > 0x00) && (Command < 0x0B))
  7387                           
  7388                           ;incstack = 0
  7389  002998  5043               	movf	_Command,w,c
  7390  00299A  B4D8               	btfsc	status,2,c
  7391  00299C  D01B               	goto	l3239
  7392  00299E  0E0B               	movlw	11
  7393  0029A0  6043               	cpfslt	_Command,c
  7394  0029A2  D018               	goto	l3239
  7395                           
  7396                           ;SPISlave.c: 129: {
  7397                           ;SPISlave.c: 130: unsigned char y, sum = 0;
  7398  0029A4  0E00               	movlw	0
  7399  0029A6  6E18               	movwf	GenerateChecksum@sum,c
  7400                           
  7401                           ;SPISlave.c: 131: for (y = 0; y != 3; y++)
  7402  0029A8  0E00               	movlw	0
  7403  0029AA  6E19               	movwf	GenerateChecksum@y,c
  7404  0029AC                     l3223:
  7405  0029AC  0E03               	movlw	3
  7406  0029AE  1819               	xorwf	GenerateChecksum@y,w,c
  7407  0029B0  B4D8               	btfsc	status,2,c
  7408  0029B2  D00E               	goto	l3233
  7409  0029B4  D001               	goto	l3227
  7410  0029B6  D00C               	goto	l3233
  7411  0029B8                     l3227:
  7412                           
  7413                           ;SPISlave.c: 132: sum += DoubleSPIS[y];
  7414  0029B8  5019               	movf	GenerateChecksum@y,w,c
  7415  0029BA  0D01               	mullw	1
  7416  0029BC  0E37               	movlw	low _DoubleSPIS
  7417  0029BE  24F3               	addwf	prodl,w,c
  7418  0029C0  6ED9               	movwf	fsr2l,c
  7419  0029C2  0E00               	movlw	high _DoubleSPIS
  7420  0029C4  20F4               	addwfc	prodh,w,c
  7421  0029C6  6EDA               	movwf	fsr2h,c
  7422  0029C8  50DF               	movf	indf2,w,c
  7423  0029CA  2618               	addwf	GenerateChecksum@sum,f,c
  7424  0029CC  2A19               	incf	GenerateChecksum@y,f,c
  7425  0029CE  D7EE               	goto	l3223
  7426  0029D0                     l3233:
  7427                           
  7428                           ;SPISlave.c: 133: return sum;
  7429  0029D0  5018               	movf	GenerateChecksum@sum,w,c
  7430                           
  7431                           ;SPISlave.c: 134: }
  7432  0029D2  D002               	goto	l294
  7433  0029D4                     l3239:
  7434                           
  7435                           ;SPISlave.c: 135: else
  7436                           ;SPISlave.c: 136: return 0xFF;
  7437  0029D4  0EFF               	movlw	255
  7438  0029D6  D000               	goto	l294
  7439  0029D8                     l294:
  7440  0029D8  0012               	return		;funcret
  7441  0029DA                     __end_of_GenerateChecksum:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           postinc0	equ	0xFEE
  7451                           wreg	equ	0xFE8
  7452                           indf1	equ	0xFE7
  7453                           postdec1	equ	0xFE5
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _ReceiveSPI1 *****************
  7464 ;; Defined at:
  7465 ;;		line 73 in file "SPISlave.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      unsigned char 
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    6
  7486 ;; This function calls:
  7487 ;;		_SPIRestart
  7488 ;; This function is called by:
  7489 ;;		_main
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text45
  7494  002C78                     __ptext45:
  7495                           	opt stack 0
  7496  002C78                     _ReceiveSPI1:
  7497                           	opt stack 24
  7498                           
  7499                           ;SPISlave.c: 75: SSP1BUF = 0x00;
  7500                           
  7501                           ;incstack = 0
  7502  002C78  0E00               	movlw	0
  7503  002C7A  6EC9               	movwf	4041,c	;volatile
  7504                           
  7505                           ;SPISlave.c: 76: PIR3bits.TMR4IF = 0;
  7506  002C7C  96A4               	bcf	4004,3,c	;volatile
  7507                           
  7508                           ;SPISlave.c: 77: T4CONbits.TMR4ON = 1;
  7509  002C7E  8476               	bsf	3958,2,c	;volatile
  7510                           
  7511                           ;SPISlave.c: 78: TMR4 = timer4;
  7512  002C80  C044  FF78         	movff	_timer4,3960	;volatile
  7513                           
  7514                           ;SPISlave.c: 79: while (!PIR1bits.SSP1IF)
  7515  002C84  D005               	goto	l3479
  7516  002C86                     l277:
  7517                           
  7518                           ;SPISlave.c: 80: {
  7519                           ;SPISlave.c: 81: if (PIR3bits.TMR4IF == 1)
  7520  002C86  A6A4               	btfss	4004,3,c	;volatile
  7521  002C88  D003               	goto	l3479
  7522                           
  7523                           ;SPISlave.c: 82: {
  7524                           ;SPISlave.c: 83: SPIRestart();
  7525  002C8A  ECF7  F016         	call	_SPIRestart	;wreg free
  7526  002C8E  D000               	goto	l3479
  7527  002C90                     l3479:
  7528  002C90  A69E               	btfss	3998,3,c	;volatile
  7529  002C92  D7F9               	goto	l277
  7530                           
  7531                           ;SPISlave.c: 84: }
  7532                           ;SPISlave.c: 85: }
  7533                           ;SPISlave.c: 86: PIR1bits.SSP1IF = 0;
  7534  002C94  969E               	bcf	3998,3,c	;volatile
  7535                           
  7536                           ;SPISlave.c: 87: SSP1CON1bits.SSPOV1 = 0;
  7537  002C96  9CC6               	bcf	4038,6,c	;volatile
  7538                           
  7539                           ;SPISlave.c: 88: return SSP1BUF;
  7540  002C98  50C9               	movf	4041,w,c	;volatile
  7541  002C9A  D000               	goto	l280
  7542  002C9C                     l280:
  7543  002C9C  0012               	return		;funcret
  7544  002C9E                     __end_of_ReceiveSPI1:
  7545                           	opt stack 0
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           indf1	equ	0xFE7
  7556                           postdec1	equ	0xFE5
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function _SPIRestart *****************
  7567 ;; Defined at:
  7568 ;;		line 160 in file "SPISlave.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;		None
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  temp            1   26[COMRAM] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;		None               void
  7575 ;; Registers used:
  7576 ;;		wreg, status,2, status,0, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;Total ram usage:        1 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    5
  7589 ;; This function calls:
  7590 ;;		_OpenSPI1
  7591 ;; This function is called by:
  7592 ;;		_SendSPI1
  7593 ;;		_ReceiveSPI1
  7594 ;;		_main
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           	psect	text46
  7599  002DEE                     __ptext46:
  7600                           	opt stack 0
  7601  002DEE                     _SPIRestart:
  7602                           	opt stack 24
  7603                           
  7604                           ;SPISlave.c: 162: unsigned char temp;
  7605                           ;SPISlave.c: 163: PIR1bits.SSPIF = 1;
  7606                           
  7607                           ;incstack = 0
  7608  002DEE  869E               	bsf	3998,3,c	;volatile
  7609                           
  7610                           ;SPISlave.c: 164: temp = SSP1BUF;
  7611  002DF0  CFC9 F01B          	movff	4041,SPIRestart@temp	;volatile
  7612                           
  7613                           ;SPISlave.c: 165: (SSP1CON1 &=0xDF);
  7614  002DF4  9AC6               	bcf	4038,5,c	;volatile
  7615                           
  7616                           ;SPISlave.c: 166: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  7617  002DF6  0E00               	movlw	0
  7618  002DF8  6E18               	movwf	OpenSPI1@bus_mode,c
  7619  002DFA  0E00               	movlw	0
  7620  002DFC  6E19               	movwf	OpenSPI1@smp_phase,c
  7621  002DFE  0E04               	movlw	4
  7622  002E00  ECC5  F013         	call	_OpenSPI1
  7623  002E04  0012               	return		;funcret
  7624  002E06                     __end_of_SPIRestart:
  7625                           	opt stack 0
  7626                           tblptru	equ	0xFF8
  7627                           tblptrh	equ	0xFF7
  7628                           tblptrl	equ	0xFF6
  7629                           tablat	equ	0xFF5
  7630                           prodh	equ	0xFF4
  7631                           prodl	equ	0xFF3
  7632                           intcon	equ	0xFF2
  7633                           postinc0	equ	0xFEE
  7634                           wreg	equ	0xFE8
  7635                           indf1	equ	0xFE7
  7636                           postdec1	equ	0xFE5
  7637                           fsr1h	equ	0xFE2
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           fsr2h	equ	0xFDA
  7643                           fsr2l	equ	0xFD9
  7644                           status	equ	0xFD8
  7645                           
  7646 ;; *************** function _OpenSPI1 *****************
  7647 ;; Defined at:
  7648 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  sync_mode       1    wreg     unsigned char 
  7651 ;;  bus_mode        1   23[COMRAM] unsigned char 
  7652 ;;  smp_phase       1   24[COMRAM] unsigned char 
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;  sync_mode       1   25[COMRAM] unsigned char 
  7655 ;; Return value:  Size  Location     Type
  7656 ;;		None               void
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, status,0
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7664 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;Total ram usage:        3 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    4
  7671 ;; This function calls:
  7672 ;;		Nothing
  7673 ;; This function is called by:
  7674 ;;		_SPIInit
  7675 ;;		_SPIRestart
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text47
  7680  00278A                     __ptext47:
  7681                           	opt stack 0
  7682  00278A                     _OpenSPI1:
  7683                           	opt stack 24
  7684                           
  7685                           ;incstack = 0
  7686                           ;OpenSPI1@sync_mode stored from wreg
  7687  00278A  6E1A               	movwf	OpenSPI1@sync_mode,c
  7688  00278C  0E3F               	movlw	63
  7689  00278E  16C7               	andwf	4039,f,c	;volatile
  7690  002790  0E00               	movlw	0
  7691  002792  6EC6               	movwf	4038,c	;volatile
  7692  002794  501A               	movf	OpenSPI1@sync_mode,w,c
  7693  002796  12C6               	iorwf	4038,f,c	;volatile
  7694  002798  5019               	movf	OpenSPI1@smp_phase,w,c
  7695  00279A  12C7               	iorwf	4039,f,c	;volatile
  7696  00279C  D005               	goto	l3077
  7697  00279E                     l674:
  7698  00279E  8CC7               	bsf	4039,6,c	;volatile
  7699  0027A0  D013               	goto	l3081
  7700  0027A2                     l676:
  7701  0027A2  8CC7               	bsf	4039,6,c	;volatile
  7702  0027A4                     l677:
  7703  0027A4  88C6               	bsf	4038,4,c	;volatile
  7704  0027A6  D010               	goto	l3081
  7705  0027A8                     l3077:
  7706  0027A8  5018               	movf	OpenSPI1@bus_mode,w,c
  7707                           
  7708                           ; Switch size 1, requested type "space"
  7709                           ; Number of cases is 3, Range of values is 0 to 3
  7710                           ; switch strategies available:
  7711                           ; Name         Instructions Cycles
  7712                           ; simple_byte           10     6 (average)
  7713                           ;	Chosen strategy is simple_byte
  7714  0027AA  0A00               	xorlw	0	; case 0
  7715  0027AC  B4D8               	btfsc	status,2,c
  7716  0027AE  D7F7               	goto	l674
  7717  0027B0  0A02               	xorlw	2	; case 2
  7718  0027B2  B4D8               	btfsc	status,2,c
  7719  0027B4  D7F6               	goto	l676
  7720  0027B6  0A01               	xorlw	1	; case 3
  7721  0027B8  B4D8               	btfsc	status,2,c
  7722  0027BA  D7F4               	goto	l677
  7723  0027BC  D005               	goto	l3081
  7724  0027BE                     l680:
  7725  0027BE  8E97               	bsf	3991,7,c	;volatile
  7726  0027C0                     l682:
  7727  0027C0  8694               	bsf	3988,3,c	;volatile
  7728  0027C2  D00A               	goto	l681
  7729  0027C4                     l683:
  7730  0027C4  9694               	bcf	3988,3,c	;volatile
  7731  0027C6  D008               	goto	l681
  7732  0027C8                     l3081:
  7733  0027C8  501A               	movf	OpenSPI1@sync_mode,w,c
  7734                           
  7735                           ; Switch size 1, requested type "space"
  7736                           ; Number of cases is 2, Range of values is 4 to 5
  7737                           ; switch strategies available:
  7738                           ; Name         Instructions Cycles
  7739                           ; simple_byte            7     4 (average)
  7740                           ;	Chosen strategy is simple_byte
  7741  0027CA  0A04               	xorlw	4	; case 4
  7742  0027CC  B4D8               	btfsc	status,2,c
  7743  0027CE  D7F7               	goto	l680
  7744  0027D0  0A01               	xorlw	1	; case 5
  7745  0027D2  B4D8               	btfsc	status,2,c
  7746  0027D4  D7F5               	goto	l682
  7747  0027D6  D7F6               	goto	l683
  7748  0027D8                     l681:
  7749  0027D8  8894               	bsf	3988,4,c	;volatile
  7750  0027DA  9A94               	bcf	3988,5,c	;volatile
  7751  0027DC  8AC6               	bsf	4038,5,c	;volatile
  7752  0027DE  0012               	return		;funcret
  7753  0027E0                     __end_of_OpenSPI1:
  7754                           	opt stack 0
  7755                           tblptru	equ	0xFF8
  7756                           tblptrh	equ	0xFF7
  7757                           tblptrl	equ	0xFF6
  7758                           tablat	equ	0xFF5
  7759                           prodh	equ	0xFF4
  7760                           prodl	equ	0xFF3
  7761                           intcon	equ	0xFF2
  7762                           postinc0	equ	0xFEE
  7763                           wreg	equ	0xFE8
  7764                           indf1	equ	0xFE7
  7765                           postdec1	equ	0xFE5
  7766                           fsr1h	equ	0xFE2
  7767                           fsr1l	equ	0xFE1
  7768                           indf2	equ	0xFDF
  7769                           postinc2	equ	0xFDE
  7770                           postdec2	equ	0xFDD
  7771                           fsr2h	equ	0xFDA
  7772                           fsr2l	equ	0xFD9
  7773                           status	equ	0xFD8
  7774                           
  7775 ;; *************** function _ImplementJSMotion *****************
  7776 ;; Defined at:
  7777 ;;		line 71 in file "MotorControl.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;  JoystickValu    2   38[BANK0 ] int 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  CCPinput        2   42[BANK0 ] unsigned int 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;		None               void
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7791 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;Total ram usage:        6 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    5
  7798 ;; This function calls:
  7799 ;;		_abs
  7800 ;; This function is called by:
  7801 ;;		_main
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text48
  7806  001CD4                     __ptext48:
  7807                           	opt stack 0
  7808  001CD4                     _ImplementJSMotion:
  7809                           	opt stack 25
  7810                           
  7811                           ;MotorControl.c: 73: unsigned int CCPinput;
  7812                           ;MotorControl.c: 74: if (JoystickValue < DeadbandLow)
  7813                           
  7814                           ;incstack = 0
  7815  001CD4  5047               	movf	_DeadbandLow,w,c
  7816  001CD6  0100               	movlb	0	; () banked
  7817  001CD8  5D86               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7818  001CDA  0100               	movlb	0	; () banked
  7819  001CDC  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7820  001CDE  0A80               	xorlw	128
  7821  001CE0  0100               	movlb	0	; () banked
  7822  001CE2  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7823  001CE4  5048               	movf	_DeadbandLow+1,w,c
  7824  001CE6  0A80               	xorlw	128
  7825  001CE8  0100               	movlb	0	; () banked
  7826  001CEA  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7827  001CEC  B0D8               	btfsc	status,0,c
  7828  001CEE  D002               	goto	l4255
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;MotorControl.c: 75: {
  7832                           ;MotorControl.c: 76: CCP3CONbits.P3M1 = 1;
  7833  001CF0  8EB7               	bsf	4023,7,c	;volatile
  7834  001CF2  D00F               	goto	l4259
  7835  001CF4                     l4255:
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;MotorControl.c: 79: else if (JoystickValue > DeadbandHigh)
  7839  001CF4  0100               	movlb	0	; () banked
  7840  001CF6  5186               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7841  001CF8  5C45               	subwf	_DeadbandHigh,w,c
  7842  001CFA  5046               	movf	_DeadbandHigh+1,w,c
  7843  001CFC  0A80               	xorlw	128
  7844  001CFE  0100               	movlb	0	; () banked
  7845  001D00  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7846  001D02  0100               	movlb	0	; () banked
  7847  001D04  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7848  001D06  0A80               	xorlw	128
  7849  001D08  0100               	movlb	0	; () banked
  7850  001D0A  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7851  001D0C  B0D8               	btfsc	status,0,c
  7852  001D0E  D005               	goto	l4261
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;MotorControl.c: 80: {
  7856                           ;MotorControl.c: 81: CCP3CONbits.P3M1 = 0;
  7857  001D10  9EB7               	bcf	4023,7,c	;volatile
  7858  001D12                     l4259:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;MotorControl.c: 82: PIDEnableFlag = 0;
  7862  001D12  0E00               	movlw	0
  7863  001D14  0100               	movlb	0	; () banked
  7864  001D16  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  7865                           
  7866                           ;MotorControl.c: 83: }
  7867  001D18  D02A               	goto	l4273
  7868  001D1A                     l4261:
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;MotorControl.c: 84: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  7872  001D1A  0100               	movlb	0	; () banked
  7873  001D1C  5186               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7874  001D1E  5C45               	subwf	_DeadbandHigh,w,c
  7875  001D20  5046               	movf	_DeadbandHigh+1,w,c
  7876  001D22  0A80               	xorlw	128
  7877  001D24  0100               	movlb	0	; () banked
  7878  001D26  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7879  001D28  0100               	movlb	0	; () banked
  7880  001D2A  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7881  001D2C  0A80               	xorlw	128
  7882  001D2E  0100               	movlb	0	; () banked
  7883  001D30  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7884  001D32  A0D8               	btfss	status,0,c
  7885  001D34  D01C               	goto	l4273
  7886                           
  7887                           ; BSR set to: 0
  7888  001D36  5047               	movf	_DeadbandLow,w,c
  7889  001D38  0100               	movlb	0	; () banked
  7890  001D3A  5D86               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7891  001D3C  0100               	movlb	0	; () banked
  7892  001D3E  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7893  001D40  0A80               	xorlw	128
  7894  001D42  0100               	movlb	0	; () banked
  7895  001D44  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7896  001D46  5048               	movf	_DeadbandLow+1,w,c
  7897  001D48  0A80               	xorlw	128
  7898  001D4A  0100               	movlb	0	; () banked
  7899  001D4C  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7900  001D4E  A0D8               	btfss	status,0,c
  7901  001D50  D00E               	goto	l4273
  7902                           
  7903                           ; BSR set to: 0
  7904  001D52  0100               	movlb	0	; () banked
  7905  001D54  51C5               	movf	_PIDEnableFlag& (0+255),w,b
  7906  001D56  A4D8               	btfss	status,2,c
  7907  001D58  D00A               	goto	l4273
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;MotorControl.c: 85: {
  7911                           ;MotorControl.c: 86: JoystickValue = 0;
  7912  001D5A  0E00               	movlw	0
  7913  001D5C  0100               	movlb	0	; () banked
  7914  001D5E  6F87               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  7915  001D60  0E00               	movlw	0
  7916  001D62  6F86               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  7917                           
  7918                           ;MotorControl.c: 87: CCPR3L = 0x00;
  7919  001D64  0E00               	movlw	0
  7920  001D66  6EB8               	movwf	4024,c	;volatile
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;MotorControl.c: 88: CCP3CONbits.DC3B1 = 0;
  7924  001D68  9AB7               	bcf	4023,5,c	;volatile
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;MotorControl.c: 89: CCP3CONbits.DC3B0 = 0;
  7928  001D6A  98B7               	bcf	4023,4,c	;volatile
  7929                           
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933  001D6C  D000               	goto	l4273
  7934  001D6E                     l4273:
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;MotorControl.c: 90: }
  7938                           ;MotorControl.c: 92: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  7939  001D6E  5047               	movf	_DeadbandLow,w,c
  7940  001D70  0100               	movlb	0	; () banked
  7941  001D72  5D86               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7942  001D74  0100               	movlb	0	; () banked
  7943  001D76  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7944  001D78  0A80               	xorlw	128
  7945  001D7A  0100               	movlb	0	; () banked
  7946  001D7C  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7947  001D7E  5048               	movf	_DeadbandLow+1,w,c
  7948  001D80  0A80               	xorlw	128
  7949  001D82  0100               	movlb	0	; () banked
  7950  001D84  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7951  001D86  A0D8               	btfss	status,0,c
  7952  001D88  D00E               	goto	l4277
  7953                           
  7954                           ; BSR set to: 0
  7955  001D8A  0100               	movlb	0	; () banked
  7956  001D8C  5186               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7957  001D8E  5C45               	subwf	_DeadbandHigh,w,c
  7958  001D90  5046               	movf	_DeadbandHigh+1,w,c
  7959  001D92  0A80               	xorlw	128
  7960  001D94  0100               	movlb	0	; () banked
  7961  001D96  6F88               	movwf	??_ImplementJSMotion& (0+255),b
  7962  001D98  0100               	movlb	0	; () banked
  7963  001D9A  5187               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7964  001D9C  0A80               	xorlw	128
  7965  001D9E  0100               	movlb	0	; () banked
  7966  001DA0  5988               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7967  001DA2  B0D8               	btfsc	status,0,c
  7968  001DA4  D030               	goto	l109
  7969  001DA6                     l4277:
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;MotorControl.c: 93: {
  7973                           ;MotorControl.c: 94: JoystickValue = abs(JoystickValue);
  7974  001DA6  C086  F084         	movff	ImplementJSMotion@JoystickValue,abs@a
  7975  001DAA  C087  F085         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  7976  001DAE  EC00  F016         	call	_abs	;wreg free
  7977  001DB2  C084  F086         	movff	?_abs,ImplementJSMotion@JoystickValue
  7978  001DB6  C085  F087         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  7979                           
  7980                           ;MotorControl.c: 95: CCPinput = JoystickValue * 2;
  7981  001DBA  90D8               	bcf	status,0,c
  7982  001DBC  0100               	movlb	0	; () banked
  7983  001DBE  3586               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7984  001DC0  0100               	movlb	0	; () banked
  7985  001DC2  6F8A               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  7986  001DC4  0100               	movlb	0	; () banked
  7987  001DC6  3587               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7988  001DC8  0100               	movlb	0	; () banked
  7989  001DCA  6F8B               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;MotorControl.c: 96: CCPR3L = (CCPinput >> 2) & 0xFF;
  7993  001DCC  C08A  F088         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7994  001DD0  C08B  F089         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  7995  001DD4  0100               	movlb	0	; () banked
  7996  001DD6  90D8               	bcf	status,0,c
  7997  001DD8  3389               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7998  001DDA  3388               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7999  001DDC  0100               	movlb	0	; () banked
  8000  001DDE  90D8               	bcf	status,0,c
  8001  001DE0  3389               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  8002  001DE2  3388               	rrcf	??_ImplementJSMotion& (0+255),f,b
  8003  001DE4  0100               	movlb	0	; () banked
  8004  001DE6  5188               	movf	??_ImplementJSMotion& (0+255),w,b
  8005  001DE8  6EB8               	movwf	4024,c	;volatile
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;MotorControl.c: 97: CCP3CONbits.DC3B = (CCPinput & 0x03);
  8009  001DEA  C08A  F088         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  8010  001DEE  0E03               	movlw	3
  8011  001DF0  0100               	movlb	0	; () banked
  8012  001DF2  1788               	andwf	??_ImplementJSMotion& (0+255),f,b
  8013  001DF4  0100               	movlb	0	; () banked
  8014  001DF6  3B88               	swapf	??_ImplementJSMotion& (0+255),f,b
  8015  001DF8  50B7               	movf	4023,w,c	;volatile
  8016  001DFA  0100               	movlb	0	; () banked
  8017  001DFC  1988               	xorwf	??_ImplementJSMotion& (0+255),w,b
  8018  001DFE  0BCF               	andlw	-49
  8019  001E00  1988               	xorwf	??_ImplementJSMotion& (0+255),w,b
  8020  001E02  6EB7               	movwf	4023,c	;volatile
  8021  001E04  D000               	goto	l109
  8022  001E06                     l109:
  8023                           
  8024                           ; BSR set to: 0
  8025  001E06  0012               	return		;funcret
  8026  001E08                     __end_of_ImplementJSMotion:
  8027                           	opt stack 0
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           postinc0	equ	0xFEE
  8036                           wreg	equ	0xFE8
  8037                           indf1	equ	0xFE7
  8038                           postdec1	equ	0xFE5
  8039                           fsr1h	equ	0xFE2
  8040                           fsr1l	equ	0xFE1
  8041                           indf2	equ	0xFDF
  8042                           postinc2	equ	0xFDE
  8043                           postdec2	equ	0xFDD
  8044                           fsr2h	equ	0xFDA
  8045                           fsr2l	equ	0xFD9
  8046                           status	equ	0xFD8
  8047                           
  8048 ;; *************** function _abs *****************
  8049 ;; Defined at:
  8050 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  a               2   36[BANK0 ] int 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  2   36[BANK0 ] int 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8064 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;Total ram usage:        4 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    4
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_ImplementPIDMotion
  8075 ;;		_ImplementJSMotion
  8076 ;;		_ZeroMotors
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text49
  8081  002C00                     __ptext49:
  8082                           	opt stack 0
  8083  002C00                     _abs:
  8084                           	opt stack 24
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;incstack = 0
  8088  002C00  0100               	movlb	0	; () banked
  8089  002C02  AF85               	btfss	(abs@a+1)& (0+255),7,b
  8090  002C04  D00D               	goto	l734
  8091                           
  8092                           ; BSR set to: 0
  8093  002C06  C084  F035         	movff	abs@a,??_abs
  8094  002C0A  C085  F036         	movff	abs@a+1,??_abs+1
  8095  002C0E  1E35               	comf	??_abs,f,c
  8096  002C10  1E36               	comf	??_abs+1,f,c
  8097  002C12  4A35               	infsnz	??_abs,f,c
  8098  002C14  2A36               	incf	??_abs+1,f,c
  8099  002C16  C035  F084         	movff	??_abs,?_abs
  8100  002C1A  C036  F085         	movff	??_abs+1,?_abs+1
  8101  002C1E  D004               	goto	l735
  8102  002C20                     l734:
  8103                           
  8104                           ; BSR set to: 0
  8105  002C20  C084  F084         	movff	abs@a,?_abs
  8106  002C24  C085  F085         	movff	abs@a+1,?_abs+1
  8107  002C28                     l735:
  8108                           
  8109                           ; BSR set to: 0
  8110  002C28  0012               	return		;funcret
  8111  002C2A                     __end_of_abs:
  8112                           	opt stack 0
  8113                           tblptru	equ	0xFF8
  8114                           tblptrh	equ	0xFF7
  8115                           tblptrl	equ	0xFF6
  8116                           tablat	equ	0xFF5
  8117                           prodh	equ	0xFF4
  8118                           prodl	equ	0xFF3
  8119                           intcon	equ	0xFF2
  8120                           postinc0	equ	0xFEE
  8121                           wreg	equ	0xFE8
  8122                           indf1	equ	0xFE7
  8123                           postdec1	equ	0xFE5
  8124                           fsr1h	equ	0xFE2
  8125                           fsr1l	equ	0xFE1
  8126                           indf2	equ	0xFDF
  8127                           postinc2	equ	0xFDE
  8128                           postdec2	equ	0xFDD
  8129                           fsr2h	equ	0xFDA
  8130                           fsr2l	equ	0xFD9
  8131                           status	equ	0xFD8
  8132                           
  8133 ;; *************** function _DetectMovement *****************
  8134 ;; Defined at:
  8135 ;;		line 52 in file "Joystick.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;		None
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  ADCresult       2   28[COMRAM] unsigned int 
  8140 ;;  JoystickResu    2   26[COMRAM] int 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  2   23[COMRAM] int 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2, status,0
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        7 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    4
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_main
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text50
  8165  00260E                     __ptext50:
  8166                           	opt stack 0
  8167  00260E                     _DetectMovement:
  8168                           	opt stack 26
  8169                           
  8170                           ;Joystick.c: 54: unsigned int ADCresult;
  8171                           ;Joystick.c: 55: int JoystickResult;
  8172                           ;Joystick.c: 57: ADCON0bits.GODONE = 1;
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;incstack = 0
  8176  00260E  82C2               	bsf	4034,1,c	;volatile
  8177                           
  8178                           ;Joystick.c: 58: while (ADCON0bits.GO_NOT_DONE == 1);
  8179  002610  D000               	goto	l43
  8180  002612                     l43:
  8181  002612  B2C2               	btfsc	4034,1,c	;volatile
  8182  002614  D7FE               	goto	l43
  8183                           
  8184                           ;Joystick.c: 60: ADCresult = ADRESH;
  8185  002616  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  8186  00261A  6A1E               	clrf	DetectMovement@ADCresult+1,c
  8187                           
  8188                           ;Joystick.c: 61: ADCresult = ADCresult << 8;
  8189  00261C  501D               	movf	DetectMovement@ADCresult,w,c
  8190  00261E  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8191  002620  6A1D               	clrf	DetectMovement@ADCresult,c
  8192                           
  8193                           ;Joystick.c: 62: ADCresult = ADCresult | ADRESL;
  8194  002622  501D               	movf	DetectMovement@ADCresult,w,c
  8195  002624  10C3               	iorwf	4035,w,c	;volatile
  8196  002626  6E1D               	movwf	DetectMovement@ADCresult,c
  8197  002628  501E               	movf	DetectMovement@ADCresult+1,w,c
  8198  00262A  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8199                           
  8200                           ;Joystick.c: 63: JoystickResult = (ADCresult - 512);
  8201  00262C  0E00               	movlw	0
  8202  00262E  241D               	addwf	DetectMovement@ADCresult,w,c
  8203  002630  6E1B               	movwf	DetectMovement@JoystickResult,c
  8204  002632  0EFE               	movlw	254
  8205  002634  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  8206  002636  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  8207                           
  8208                           ;Joystick.c: 65: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  8209  002638  501B               	movf	DetectMovement@JoystickResult,w,c
  8210  00263A  5C45               	subwf	_DeadbandHigh,w,c
  8211  00263C  5046               	movf	_DeadbandHigh+1,w,c
  8212  00263E  0A80               	xorlw	128
  8213  002640  6E1A               	movwf	??_DetectMovement& (0+255),c
  8214  002642  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8215  002644  0A80               	xorlw	128
  8216  002646  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8217  002648  A0D8               	btfss	status,0,c
  8218  00264A  D00A               	goto	l3393
  8219  00264C  5047               	movf	_DeadbandLow,w,c
  8220  00264E  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  8221  002650  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8222  002652  0A80               	xorlw	128
  8223  002654  6E1A               	movwf	??_DetectMovement& (0+255),c
  8224  002656  5048               	movf	_DeadbandLow+1,w,c
  8225  002658  0A80               	xorlw	128
  8226  00265A  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8227  00265C  B0D8               	btfsc	status,0,c
  8228  00265E  D008               	goto	l3401
  8229  002660                     l3393:
  8230                           
  8231                           ;Joystick.c: 66: {
  8232                           ;Joystick.c: 67: PIDEnableFlag = 0;
  8233  002660  0E00               	movlw	0
  8234  002662  0100               	movlb	0	; () banked
  8235  002664  6FC5               	movwf	_PIDEnableFlag& (0+255),b
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;Joystick.c: 68: return JoystickResult;
  8239  002666  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  8240  00266A  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;Joystick.c: 69: }
  8244                           
  8245                           ; BSR set to: 0
  8246  00266E  D005               	goto	l49
  8247  002670                     l3401:
  8248                           
  8249                           ;Joystick.c: 70: else
  8250                           ;Joystick.c: 71: return 0;
  8251  002670  0E00               	movlw	0
  8252  002672  6E19               	movwf	?_DetectMovement+1,c
  8253  002674  0E00               	movlw	0
  8254  002676  6E18               	movwf	?_DetectMovement,c
  8255  002678  D000               	goto	l49
  8256  00267A                     l49:
  8257  00267A  0012               	return		;funcret
  8258  00267C                     __end_of_DetectMovement:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           postinc0	equ	0xFEE
  8268                           wreg	equ	0xFE8
  8269                           indf1	equ	0xFE7
  8270                           postdec1	equ	0xFE5
  8271                           fsr1h	equ	0xFE2
  8272                           fsr1l	equ	0xFE1
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function _DetectJoystick *****************
  8281 ;; Defined at:
  8282 ;;		line 31 in file "Joystick.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;		None
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;		None
  8287 ;; Return value:  Size  Location     Type
  8288 ;;		None               void
  8289 ;; Registers used:
  8290 ;;		wreg, status,2
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;Total ram usage:        0 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    4
  8303 ;; This function calls:
  8304 ;;		Nothing
  8305 ;; This function is called by:
  8306 ;;		_main
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text51
  8311  002D52                     __ptext51:
  8312                           	opt stack 0
  8313  002D52                     _DetectJoystick:
  8314                           	opt stack 26
  8315                           
  8316                           ;Joystick.c: 33: if (PORTBbits.RB1 == 0)
  8317                           
  8318                           ;incstack = 0
  8319  002D52  B281               	btfsc	3969,1,c	;volatile
  8320  002D54  D003               	goto	l37
  8321                           
  8322                           ;Joystick.c: 34: {
  8323                           ;Joystick.c: 35: PORTAbits.RA2 = 0;
  8324  002D56  9480               	bcf	3968,2,c	;volatile
  8325                           
  8326                           ;Joystick.c: 36: JSEnableFlag = 0;
  8327  002D58  0E00               	movlw	0
  8328  002D5A  D008               	goto	L3
  8329  002D5C                     l37:
  8330                           
  8331                           ;Joystick.c: 39: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  8332  002D5C  A281               	btfss	3969,1,c	;volatile
  8333  002D5E  D009               	goto	l40
  8334  002D60  0100               	movlb	0	; () banked
  8335  002D62  51C4               	movf	_JSEnableFlag& (0+255),w,b
  8336  002D64  A4D8               	btfss	status,2,c
  8337  002D66  D005               	goto	l40
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;Joystick.c: 40: {
  8341                           ;Joystick.c: 41: PORTAbits.RA2 = 1;
  8342  002D68  8480               	bsf	3968,2,c	;volatile
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;Joystick.c: 42: JSEnableFlag = 1;
  8346  002D6A  0E01               	movlw	1
  8347  002D6C                     L3:
  8348  002D6C  0100               	movlb	0	; () banked
  8349  002D6E  6FC4               	movwf	_JSEnableFlag& (0+255),b
  8350                           
  8351                           ; BSR set to: 0
  8352  002D70  D000               	goto	l40
  8353  002D72                     l40:
  8354  002D72  0012               	return		;funcret
  8355  002D74                     __end_of_DetectJoystick:
  8356                           	opt stack 0
  8357                           tblptru	equ	0xFF8
  8358                           tblptrh	equ	0xFF7
  8359                           tblptrl	equ	0xFF6
  8360                           tablat	equ	0xFF5
  8361                           prodh	equ	0xFF4
  8362                           prodl	equ	0xFF3
  8363                           intcon	equ	0xFF2
  8364                           postinc0	equ	0xFEE
  8365                           wreg	equ	0xFE8
  8366                           indf1	equ	0xFE7
  8367                           postdec1	equ	0xFE5
  8368                           fsr1h	equ	0xFE2
  8369                           fsr1l	equ	0xFE1
  8370                           indf2	equ	0xFDF
  8371                           postinc2	equ	0xFDE
  8372                           postdec2	equ	0xFDD
  8373                           fsr2h	equ	0xFDA
  8374                           fsr2l	equ	0xFD9
  8375                           status	equ	0xFD8
  8376                           
  8377 ;; *************** function _ISR *****************
  8378 ;; Defined at:
  8379 ;;		line 249 in file "RTDuC.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;		None               void
  8386 ;; Registers used:
  8387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;Total ram usage:       14 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    3
  8400 ;; This function calls:
  8401 ;;		_INT0Int
  8402 ;;		_SPIInt
  8403 ;;		_TMR0Int
  8404 ;;		i2_SaveAll
  8405 ;; This function is called by:
  8406 ;;		Interrupt level 2
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	intcode
  8411  000008                     __pintcode:
  8412                           	opt stack 0
  8413  000008                     _ISR:
  8414                           	opt stack 21
  8415                           
  8416                           ;incstack = 0
  8417  000008  CFFA F00A          	movff	pclath,??_ISR
  8418  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  8419  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  8420  000014  EDFC  F011         	call	int_func,f	;refresh shadow registers
  8421                           pclatu	equ	0xFFB
  8422                           pclath	equ	0xFFA
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodh	equ	0xFF4
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           postinc0	equ	0xFEE
  8431                           fsr0l	equ	0xFE9
  8432                           wreg	equ	0xFE8
  8433                           indf1	equ	0xFE7
  8434                           postdec1	equ	0xFE5
  8435                           fsr1h	equ	0xFE2
  8436                           fsr1l	equ	0xFE1
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           postdec2	equ	0xFDD
  8440                           fsr2h	equ	0xFDA
  8441                           fsr2l	equ	0xFD9
  8442                           status	equ	0xFD8
  8443                           
  8444                           	psect	intcode_body
  8445  0023F8                     __pintcode_body:
  8446                           	opt stack 21
  8447  0023F8                     int_func:
  8448                           	opt stack 21
  8449  0023F8  0006               	pop		; remove dummy address from shadow register refresh
  8450  0023FA  CFEA F00D          	movff	fsr0h,??_ISR+3
  8451  0023FE  CFE1 F00E          	movff	fsr1l,??_ISR+4
  8452  002402  CFE2 F00F          	movff	fsr1h,??_ISR+5
  8453  002406  CFD9 F010          	movff	fsr2l,??_ISR+6
  8454  00240A  CFDA F011          	movff	fsr2h,??_ISR+7
  8455  00240E  CFF3 F012          	movff	prodl,??_ISR+8
  8456  002412  CFF4 F013          	movff	prodh,??_ISR+9
  8457  002416  CFF6 F014          	movff	tblptrl,??_ISR+10
  8458  00241A  CFF7 F015          	movff	tblptrh,??_ISR+11
  8459  00241E  CFF8 F016          	movff	tblptru,??_ISR+12
  8460  002422  CFF5 F017          	movff	tablat,??_ISR+13
  8461                           
  8462                           ;RTDuC.c: 251: PORTCbits.RC6 = 1;
  8463  002426  8C82               	bsf	3970,6,c	;volatile
  8464                           
  8465                           ;RTDuC.c: 252: if (PIR1bits.SSP1IF == 1)
  8466  002428  A69E               	btfss	3998,3,c	;volatile
  8467  00242A  D003               	goto	i2l3893
  8468                           
  8469                           ;RTDuC.c: 253: {
  8470                           ;RTDuC.c: 254: SPIInt();
  8471  00242C  EC4F  F016         	call	_SPIInt	;wreg free
  8472  002430  D000               	goto	i2l3893
  8473  002432                     i2l3893:
  8474                           
  8475                           ;RTDuC.c: 255: }
  8476                           ;RTDuC.c: 257: if (INTCONbits.TMR0IF == 1)
  8477  002432  A4F2               	btfss	intcon,2,c	;volatile
  8478  002434  D003               	goto	i2l3897
  8479                           
  8480                           ;RTDuC.c: 258: {
  8481                           ;RTDuC.c: 259: TMR0Int();
  8482  002436  EC1F  F017         	call	_TMR0Int	;wreg free
  8483  00243A  D000               	goto	i2l3897
  8484  00243C                     i2l3897:
  8485                           
  8486                           ;RTDuC.c: 260: }
  8487                           ;RTDuC.c: 262: if (INTCONbits.INT0IF == 1)
  8488  00243C  A2F2               	btfss	intcon,1,c	;volatile
  8489  00243E  D003               	goto	i2l3901
  8490                           
  8491                           ;RTDuC.c: 263: {
  8492                           ;RTDuC.c: 264: INT0Int();
  8493  002440  EC86  F016         	call	_INT0Int	;wreg free
  8494  002444  D000               	goto	i2l3901
  8495  002446                     i2l3901:
  8496                           
  8497                           ;RTDuC.c: 265: }
  8498                           ;RTDuC.c: 267: if (PIR2bits.HLVDIF == 1)
  8499  002446  A4A1               	btfss	4001,2,c	;volatile
  8500  002448  D006               	goto	i2l3907
  8501                           
  8502                           ;RTDuC.c: 268: {
  8503                           ;RTDuC.c: 269: PORTAbits.RA4 = 1;
  8504  00244A  8880               	bsf	3968,4,c	;volatile
  8505                           
  8506                           ;RTDuC.c: 270: PORTAbits.RA3 = 1;
  8507  00244C  8680               	bsf	3968,3,c	;volatile
  8508                           
  8509                           ;RTDuC.c: 271: PORTAbits.RA2 = 1;
  8510  00244E  8480               	bsf	3968,2,c	;volatile
  8511                           
  8512                           ;RTDuC.c: 272: SaveAll();
  8513  002450  EC4C  F011         	call	i2_SaveAll	;wreg free
  8514  002454  D000               	goto	i2l3907
  8515  002456                     i2l3907:
  8516                           
  8517                           ;RTDuC.c: 273: }
  8518                           ;RTDuC.c: 275: if (PIR2bits.OSCFIF == 1)
  8519  002456  AEA1               	btfss	4001,7,c	;volatile
  8520  002458  D002               	goto	i2l594
  8521  00245A  00FF               	reset		;# 
  8522  00245C  D000               	goto	i2l594
  8523  00245E                     i2l594:
  8524  00245E  C017  FFF5         	movff	??_ISR+13,tablat
  8525  002462  C016  FFF8         	movff	??_ISR+12,tblptru
  8526  002466  C015  FFF7         	movff	??_ISR+11,tblptrh
  8527  00246A  C014  FFF6         	movff	??_ISR+10,tblptrl
  8528  00246E  C013  FFF4         	movff	??_ISR+9,prodh
  8529  002472  C012  FFF3         	movff	??_ISR+8,prodl
  8530  002476  C011  FFDA         	movff	??_ISR+7,fsr2h
  8531  00247A  C010  FFD9         	movff	??_ISR+6,fsr2l
  8532  00247E  C00F  FFE2         	movff	??_ISR+5,fsr1h
  8533  002482  C00E  FFE1         	movff	??_ISR+4,fsr1l
  8534  002486  C00D  FFEA         	movff	??_ISR+3,fsr0h
  8535  00248A  C00C  FFE9         	movff	??_ISR+2,fsr0l
  8536  00248E  C00B  FFFB         	movff	??_ISR+1,pclatu
  8537  002492  C00A  FFFA         	movff	??_ISR,pclath
  8538  002496  0011               	retfie		f
  8539  002498                     __end_of_ISR:
  8540                           	opt stack 0
  8541                           pclatu	equ	0xFFB
  8542                           pclath	equ	0xFFA
  8543                           tblptru	equ	0xFF8
  8544                           tblptrh	equ	0xFF7
  8545                           tblptrl	equ	0xFF6
  8546                           tablat	equ	0xFF5
  8547                           prodh	equ	0xFF4
  8548                           prodl	equ	0xFF3
  8549                           intcon	equ	0xFF2
  8550                           postinc0	equ	0xFEE
  8551                           fsr0h	equ	0xFEA
  8552                           fsr0l	equ	0xFE9
  8553                           wreg	equ	0xFE8
  8554                           indf1	equ	0xFE7
  8555                           postdec1	equ	0xFE5
  8556                           fsr1h	equ	0xFE2
  8557                           fsr1l	equ	0xFE1
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function i2_SaveAll *****************
  8566 ;; Defined at:
  8567 ;;		line 161 in file "EEPROM.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;		None
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;		None
  8572 ;; Return value:  Size  Location     Type
  8573 ;;		None               void
  8574 ;; Registers used:
  8575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;Total ram usage:        0 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    2
  8588 ;; This function calls:
  8589 ;;		i2_EEWriteChar
  8590 ;;		i2_EEWriteDouble
  8591 ;; This function is called by:
  8592 ;;		_ISR
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           	psect	text53
  8597  002298                     __ptext53:
  8598                           	opt stack 0
  8599  002298                     i2_SaveAll:
  8600                           	opt stack 21
  8601                           
  8602                           ;EEPROM.c: 163: EEWriteDouble(0x00, SetAngle);
  8603                           
  8604                           ;incstack = 0
  8605  002298  C03E  F005         	movff	_SetAngle,i2EEWriteDouble@dub
  8606  00229C  C03F  F006         	movff	_SetAngle+1,i2EEWriteDouble@dub+1
  8607  0022A0  C040  F007         	movff	_SetAngle+2,i2EEWriteDouble@dub+2
  8608  0022A4  0E00               	movlw	0
  8609  0022A6  EC1A  F014         	call	i2_EEWriteDouble
  8610                           
  8611                           ;EEPROM.c: 164: EEWriteDouble(0x03, Kp);
  8612  0022AA  C0B6  F005         	movff	_Kp,i2EEWriteDouble@dub
  8613  0022AE  C0B7  F006         	movff	_Kp+1,i2EEWriteDouble@dub+1
  8614  0022B2  C0B8  F007         	movff	_Kp+2,i2EEWriteDouble@dub+2
  8615  0022B6  0E03               	movlw	3
  8616  0022B8  EC1A  F014         	call	i2_EEWriteDouble
  8617                           
  8618                           ;EEPROM.c: 165: EEWriteDouble(0x06, Ki);
  8619  0022BC  C0B3  F005         	movff	_Ki,i2EEWriteDouble@dub
  8620  0022C0  C0B4  F006         	movff	_Ki+1,i2EEWriteDouble@dub+1
  8621  0022C4  C0B5  F007         	movff	_Ki+2,i2EEWriteDouble@dub+2
  8622  0022C8  0E06               	movlw	6
  8623  0022CA  EC1A  F014         	call	i2_EEWriteDouble
  8624                           
  8625                           ;EEPROM.c: 166: EEWriteDouble(0x09, Kd);
  8626  0022CE  C0B0  F005         	movff	_Kd,i2EEWriteDouble@dub
  8627  0022D2  C0B1  F006         	movff	_Kd+1,i2EEWriteDouble@dub+1
  8628  0022D6  C0B2  F007         	movff	_Kd+2,i2EEWriteDouble@dub+2
  8629  0022DA  0E09               	movlw	9
  8630  0022DC  EC1A  F014         	call	i2_EEWriteDouble
  8631                           
  8632                           ;EEPROM.c: 167: EEWriteChar(0x0C, PORTA);
  8633  0022E0  CF80 F005          	movff	3968,i2EEWriteChar@ch	;volatile
  8634  0022E4  0E0C               	movlw	12
  8635  0022E6  ECBA  F016         	call	i2_EEWriteChar
  8636                           
  8637                           ;EEPROM.c: 168: EEWriteChar(0x0D, PORTB);
  8638  0022EA  CF81 F005          	movff	3969,i2EEWriteChar@ch	;volatile
  8639  0022EE  0E0D               	movlw	13
  8640  0022F0  ECBA  F016         	call	i2_EEWriteChar
  8641                           
  8642                           ;EEPROM.c: 169: EEWriteChar(0x0E, PORTC);
  8643  0022F4  CF82 F005          	movff	3970,i2EEWriteChar@ch	;volatile
  8644  0022F8  0E0E               	movlw	14
  8645  0022FA  ECBA  F016         	call	i2_EEWriteChar
  8646                           
  8647                           ;EEPROM.c: 170: EEWriteChar(0x0F, PORTD);
  8648  0022FE  CF83 F005          	movff	3971,i2EEWriteChar@ch	;volatile
  8649  002302  0E0F               	movlw	15
  8650  002304  ECBA  F016         	call	i2_EEWriteChar
  8651                           
  8652                           ;EEPROM.c: 171: EEWriteChar(0x10, PORTE);
  8653  002308  CF84 F005          	movff	3972,i2EEWriteChar@ch	;volatile
  8654  00230C  0E10               	movlw	16
  8655  00230E  ECBA  F016         	call	i2_EEWriteChar
  8656                           
  8657                           ;EEPROM.c: 172: EEWriteChar(0x11, PORTF);
  8658  002312  CF85 F005          	movff	3973,i2EEWriteChar@ch	;volatile
  8659  002316  0E11               	movlw	17
  8660  002318  ECBA  F016         	call	i2_EEWriteChar
  8661                           
  8662                           ;EEPROM.c: 173: EEWriteChar(0x12, PORTG);
  8663  00231C  CF86 F005          	movff	3974,i2EEWriteChar@ch	;volatile
  8664  002320  0E12               	movlw	18
  8665  002322  ECBA  F016         	call	i2_EEWriteChar
  8666                           
  8667                           ;EEPROM.c: 174: EEWriteChar(0x13, PORTH);
  8668  002326  CF87 F005          	movff	3975,i2EEWriteChar@ch	;volatile
  8669  00232A  0E13               	movlw	19
  8670  00232C  ECBA  F016         	call	i2_EEWriteChar
  8671                           
  8672                           ;EEPROM.c: 175: EEWriteChar(0x14, PORTJ);
  8673  002330  CF88 F005          	movff	3976,i2EEWriteChar@ch	;volatile
  8674  002334  0E14               	movlw	20
  8675  002336  ECBA  F016         	call	i2_EEWriteChar
  8676                           
  8677                           ;EEPROM.c: 176: EEWriteChar(0x15, PIDEnableFlag);
  8678  00233A  C0C5  F005         	movff	_PIDEnableFlag,i2EEWriteChar@ch
  8679  00233E  0E15               	movlw	21
  8680  002340  ECBA  F016         	call	i2_EEWriteChar
  8681                           
  8682                           ;EEPROM.c: 177: EEWriteChar(0x16, 0x01);
  8683  002344  0E01               	movlw	1
  8684  002346  6E05               	movwf	i2EEWriteChar@ch,c
  8685  002348  0E16               	movlw	22
  8686  00234A  ECBA  F016         	call	i2_EEWriteChar
  8687  00234E  0012               	return		;funcret
  8688  002350                     __end_ofi2_SaveAll:
  8689                           	opt stack 0
  8690                           pclatu	equ	0xFFB
  8691                           pclath	equ	0xFFA
  8692                           tblptru	equ	0xFF8
  8693                           tblptrh	equ	0xFF7
  8694                           tblptrl	equ	0xFF6
  8695                           tablat	equ	0xFF5
  8696                           prodh	equ	0xFF4
  8697                           prodl	equ	0xFF3
  8698                           intcon	equ	0xFF2
  8699                           postinc0	equ	0xFEE
  8700                           fsr0h	equ	0xFEA
  8701                           fsr0l	equ	0xFE9
  8702                           wreg	equ	0xFE8
  8703                           indf1	equ	0xFE7
  8704                           postdec1	equ	0xFE5
  8705                           fsr1h	equ	0xFE2
  8706                           fsr1l	equ	0xFE1
  8707                           indf2	equ	0xFDF
  8708                           postinc2	equ	0xFDE
  8709                           postdec2	equ	0xFDD
  8710                           fsr2h	equ	0xFDA
  8711                           fsr2l	equ	0xFD9
  8712                           status	equ	0xFD8
  8713                           
  8714 ;; *************** function i2_EEWriteDouble *****************
  8715 ;; Defined at:
  8716 ;;		line 82 in file "EEPROM.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;  location        1    wreg     unsigned char 
  8719 ;;  dub             3    4[COMRAM] unsigned char 
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;  location        1    7[COMRAM] unsigned char 
  8722 ;;  EEWriteDoubl    1    8[COMRAM] unsigned char 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;		None               void
  8725 ;; Registers used:
  8726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8732 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;Total ram usage:        5 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    1
  8739 ;; This function calls:
  8740 ;;		i2_Busy_eep
  8741 ;;		i2_EEDisassembleDouble
  8742 ;;		i2_Write_b_eep
  8743 ;; This function is called by:
  8744 ;;		i2_SaveAll
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text54
  8749  002834                     __ptext54:
  8750                           	opt stack 0
  8751  002834                     i2_EEWriteDouble:
  8752                           	opt stack 21
  8753                           
  8754                           ;incstack = 0
  8755                           ;i2EEWriteDouble@location stored from wreg
  8756  002834  6E08               	movwf	i2EEWriteDouble@location,c
  8757                           
  8758                           ;EEPROM.c: 84: unsigned char x;
  8759                           ;EEPROM.c: 86: EEDisassembleDouble(dub);
  8760  002836  C005  F001         	movff	i2EEWriteDouble@dub,i2EEDisassembleDouble@dub
  8761  00283A  C006  F002         	movff	i2EEWriteDouble@dub+1,i2EEDisassembleDouble@dub+1
  8762  00283E  C007  F003         	movff	i2EEWriteDouble@dub+2,i2EEDisassembleDouble@dub+2
  8763  002842  ECA1  F015         	call	i2_EEDisassembleDouble	;wreg free
  8764                           
  8765                           ;EEPROM.c: 88: INTCON = INTCON & 0x3F;
  8766  002846  50F2               	movf	intcon,w,c	;volatile
  8767  002848  0B3F               	andlw	63
  8768  00284A  6EF2               	movwf	intcon,c	;volatile
  8769                           
  8770                           ;EEPROM.c: 90: for (x = 0; x < 3; x++)
  8771  00284C  0E00               	movlw	0
  8772  00284E  6E09               	movwf	i2EEWriteDouble@x,c
  8773  002850                     i2l3347:
  8774  002850  0E02               	movlw	2
  8775  002852  6409               	cpfsgt	i2EEWriteDouble@x,c
  8776  002854  D001               	goto	i2l3351
  8777  002856  D014               	goto	i2l3361
  8778  002858                     i2l3351:
  8779                           
  8780                           ;EEPROM.c: 91: {
  8781                           ;EEPROM.c: 92: Write_b_eep(location, DDouble[x]);
  8782  002858  C008  F001         	movff	i2EEWriteDouble@location,i2Write_b_eep@badd
  8783  00285C  6A02               	clrf	i2Write_b_eep@badd+1,c
  8784  00285E  5009               	movf	i2EEWriteDouble@x,w,c
  8785  002860  0D01               	mullw	1
  8786  002862  0E3B               	movlw	low _DDouble
  8787  002864  24F3               	addwf	prodl,w,c
  8788  002866  6ED9               	movwf	fsr2l,c
  8789  002868  0E00               	movlw	high _DDouble
  8790  00286A  20F4               	addwfc	prodh,w,c
  8791  00286C  6EDA               	movwf	fsr2h,c
  8792  00286E  50DF               	movf	indf2,w,c
  8793  002870  6E03               	movwf	i2Write_b_eep@bdat,c
  8794  002872  EC0D  F015         	call	i2_Write_b_eep	;wreg free
  8795                           
  8796                           ;EEPROM.c: 93: location++;
  8797  002876  2A08               	incf	i2EEWriteDouble@location,f,c
  8798                           
  8799                           ;EEPROM.c: 94: Busy_eep();
  8800  002878  EC41  F017         	call	i2_Busy_eep	;wreg free
  8801  00287C  2A09               	incf	i2EEWriteDouble@x,f,c
  8802  00287E  D7E8               	goto	i2l3347
  8803  002880                     i2l3361:
  8804                           
  8805                           ;EEPROM.c: 95: }
  8806                           ;EEPROM.c: 97: INTCON = INTCON | 0xC0;
  8807  002880  50F2               	movf	intcon,w,c	;volatile
  8808  002882  09C0               	iorlw	192
  8809  002884  6EF2               	movwf	intcon,c	;volatile
  8810  002886  0012               	return		;funcret
  8811  002888                     __end_ofi2_EEWriteDouble:
  8812                           	opt stack 0
  8813                           pclatu	equ	0xFFB
  8814                           pclath	equ	0xFFA
  8815                           tblptru	equ	0xFF8
  8816                           tblptrh	equ	0xFF7
  8817                           tblptrl	equ	0xFF6
  8818                           tablat	equ	0xFF5
  8819                           prodh	equ	0xFF4
  8820                           prodl	equ	0xFF3
  8821                           intcon	equ	0xFF2
  8822                           postinc0	equ	0xFEE
  8823                           fsr0h	equ	0xFEA
  8824                           fsr0l	equ	0xFE9
  8825                           wreg	equ	0xFE8
  8826                           indf1	equ	0xFE7
  8827                           postdec1	equ	0xFE5
  8828                           fsr1h	equ	0xFE2
  8829                           fsr1l	equ	0xFE1
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           postdec2	equ	0xFDD
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function i2_EEDisassembleDouble *****************
  8838 ;; Defined at:
  8839 ;;		line 53 in file "EEPROM.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  dub             3    0[COMRAM] unsigned char 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;		None               void
  8846 ;; Registers used:
  8847 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8853 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;Total ram usage:        3 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; This function calls:
  8860 ;;		Nothing
  8861 ;; This function is called by:
  8862 ;;		i2_EEWriteDouble
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           	psect	text55
  8867  002B42                     __ptext55:
  8868                           	opt stack 0
  8869  002B42                     i2_EEDisassembleDouble:
  8870                           	opt stack 21
  8871                           
  8872                           ;EEPROM.c: 55: DoublePtr = (unsigned char*) &dub;
  8873                           
  8874                           ;incstack = 0
  8875  002B42  0E01               	movlw	low i2EEDisassembleDouble@dub
  8876  002B44  6E41               	movwf	_DoublePtr,c
  8877  002B46  0E00               	movlw	high i2EEDisassembleDouble@dub
  8878  002B48  6E42               	movwf	_DoublePtr+1,c
  8879                           
  8880                           ;EEPROM.c: 56: DDouble[0] = DoublePtr[0];
  8881  002B4A  C041  FFD9         	movff	_DoublePtr,fsr2l
  8882  002B4E  C042  FFDA         	movff	_DoublePtr+1,fsr2h
  8883  002B52  50DF               	movf	indf2,w,c
  8884  002B54  6E3B               	movwf	_DDouble,c
  8885                           
  8886                           ;EEPROM.c: 57: DDouble[1] = DoublePtr[1];
  8887  002B56  EE20 F001          	lfsr	2,1
  8888  002B5A  5041               	movf	_DoublePtr,w,c
  8889  002B5C  26D9               	addwf	fsr2l,f,c
  8890  002B5E  5042               	movf	_DoublePtr+1,w,c
  8891  002B60  22DA               	addwfc	fsr2h,f,c
  8892  002B62  50DF               	movf	indf2,w,c
  8893  002B64  6E3C               	movwf	_DDouble+1,c
  8894                           
  8895                           ;EEPROM.c: 58: DDouble[2] = DoublePtr[2];
  8896  002B66  EE20 F002          	lfsr	2,2
  8897  002B6A  5041               	movf	_DoublePtr,w,c
  8898  002B6C  26D9               	addwf	fsr2l,f,c
  8899  002B6E  5042               	movf	_DoublePtr+1,w,c
  8900  002B70  22DA               	addwfc	fsr2h,f,c
  8901  002B72  50DF               	movf	indf2,w,c
  8902  002B74  6E3D               	movwf	_DDouble+2,c
  8903  002B76  0012               	return		;funcret
  8904  002B78                     __end_ofi2_EEDisassembleDouble:
  8905                           	opt stack 0
  8906                           pclatu	equ	0xFFB
  8907                           pclath	equ	0xFFA
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           postinc0	equ	0xFEE
  8916                           fsr0h	equ	0xFEA
  8917                           fsr0l	equ	0xFE9
  8918                           wreg	equ	0xFE8
  8919                           indf1	equ	0xFE7
  8920                           postdec1	equ	0xFE5
  8921                           fsr1h	equ	0xFE2
  8922                           fsr1l	equ	0xFE1
  8923                           indf2	equ	0xFDF
  8924                           postinc2	equ	0xFDE
  8925                           postdec2	equ	0xFDD
  8926                           fsr2h	equ	0xFDA
  8927                           fsr2l	equ	0xFD9
  8928                           status	equ	0xFD8
  8929                           
  8930 ;; *************** function i2_EEWriteChar *****************
  8931 ;; Defined at:
  8932 ;;		line 127 in file "EEPROM.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;  location        1    wreg     unsigned char 
  8935 ;;  ch              1    4[COMRAM] unsigned char 
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  location        1    5[COMRAM] unsigned char 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;		None               void
  8940 ;; Registers used:
  8941 ;;		wreg, status,2, status,0, cstack
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8947 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;Total ram usage:        2 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:    1
  8954 ;; This function calls:
  8955 ;;		i2_Busy_eep
  8956 ;;		i2_Write_b_eep
  8957 ;; This function is called by:
  8958 ;;		i2_SaveAll
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text56
  8963  002D74                     __ptext56:
  8964                           	opt stack 0
  8965  002D74                     i2_EEWriteChar:
  8966                           	opt stack 21
  8967                           
  8968                           ;incstack = 0
  8969                           ;i2EEWriteChar@location stored from wreg
  8970  002D74  6E06               	movwf	i2EEWriteChar@location,c
  8971                           
  8972                           ;EEPROM.c: 129: INTCON = INTCON & 0x3F;
  8973  002D76  50F2               	movf	intcon,w,c	;volatile
  8974  002D78  0B3F               	andlw	63
  8975  002D7A  6EF2               	movwf	intcon,c	;volatile
  8976                           
  8977                           ;EEPROM.c: 131: Write_b_eep(location, ch);
  8978  002D7C  C006  F001         	movff	i2EEWriteChar@location,i2Write_b_eep@badd
  8979  002D80  6A02               	clrf	i2Write_b_eep@badd+1,c
  8980  002D82  C005  F003         	movff	i2EEWriteChar@ch,i2Write_b_eep@bdat
  8981  002D86  EC0D  F015         	call	i2_Write_b_eep	;wreg free
  8982                           
  8983                           ;EEPROM.c: 132: Busy_eep();
  8984  002D8A  EC41  F017         	call	i2_Busy_eep	;wreg free
  8985                           
  8986                           ;EEPROM.c: 134: INTCON = INTCON | 0xC0;
  8987  002D8E  50F2               	movf	intcon,w,c	;volatile
  8988  002D90  09C0               	iorlw	192
  8989  002D92  6EF2               	movwf	intcon,c	;volatile
  8990  002D94  0012               	return		;funcret
  8991  002D96                     __end_ofi2_EEWriteChar:
  8992                           	opt stack 0
  8993                           pclatu	equ	0xFFB
  8994                           pclath	equ	0xFFA
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon	equ	0xFF2
  9002                           postinc0	equ	0xFEE
  9003                           fsr0h	equ	0xFEA
  9004                           fsr0l	equ	0xFE9
  9005                           wreg	equ	0xFE8
  9006                           indf1	equ	0xFE7
  9007                           postdec1	equ	0xFE5
  9008                           fsr1h	equ	0xFE2
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           postdec2	equ	0xFDD
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function i2_Write_b_eep *****************
  9018 ;; Defined at:
  9019 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  badd            2    0[COMRAM] unsigned int 
  9022 ;;  bdat            1    2[COMRAM] unsigned char 
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;  Write_b_eep     1    3[COMRAM] unsigned char 
  9025 ;; Return value:  Size  Location     Type
  9026 ;;		None               void
  9027 ;; Registers used:
  9028 ;;		wreg, status,2, status,0
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9034 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;Total ram usage:        4 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; This function calls:
  9041 ;;		Nothing
  9042 ;; This function is called by:
  9043 ;;		i2_EEWriteDouble
  9044 ;;		i2_EEWriteChar
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           	psect	text57
  9049  002A1A                     __ptext57:
  9050                           	opt stack 0
  9051  002A1A                     i2_Write_b_eep:
  9052                           	opt stack 21
  9053                           
  9054                           ;incstack = 0
  9055  002A1A  0E00               	movlw	0
  9056  002A1C  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  9057  002A1E  5002               	movf	i2Write_b_eep@badd+1,w,c
  9058  002A20  0B03               	andlw	3
  9059  002A22  6EAA               	movwf	4010,c	;volatile
  9060  002A24  C001  FFA9         	movff	i2Write_b_eep@badd,4009	;volatile
  9061  002A28  C003  FFA8         	movff	i2Write_b_eep@bdat,4008	;volatile
  9062  002A2C  9EA6               	bcf	4006,7,c	;volatile
  9063  002A2E  9CA6               	bcf	4006,6,c	;volatile
  9064  002A30  84A6               	bsf	4006,2,c	;volatile
  9065  002A32  0E00               	movlw	0
  9066  002A34  BEF2               	btfsc	intcon,7,c	;volatile
  9067  002A36  0E01               	movlw	1
  9068  002A38  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  9069  002A3A  9EF2               	bcf	intcon,7,c	;volatile
  9070  002A3C  0E55               	movlw	85
  9071  002A3E  6EA7               	movwf	4007,c	;volatile
  9072  002A40  0EAA               	movlw	170
  9073  002A42  6EA7               	movwf	4007,c	;volatile
  9074  002A44  82A6               	bsf	4006,1,c	;volatile
  9075  002A46  D000               	goto	i2l655
  9076  002A48                     i2l655:
  9077  002A48  B2A6               	btfsc	4006,1,c	;volatile
  9078  002A4A  D7FE               	goto	i2l655
  9079  002A4C  B004               	btfsc	i2Write_b_eep@GIE_BIT_VAL,0,c
  9080  002A4E  D002               	bra	i2u228_45
  9081  002A50  9EF2               	bcf	intcon,7,c	;volatile
  9082  002A52  D001               	bra	i2u228_46
  9083  002A54                     i2u228_45:
  9084  002A54  8EF2               	bsf	intcon,7,c	;volatile
  9085  002A56                     i2u228_46:
  9086  002A56  94A6               	bcf	4006,2,c	;volatile
  9087  002A58  0012               	return		;funcret
  9088  002A5A                     __end_ofi2_Write_b_eep:
  9089                           	opt stack 0
  9090                           pclatu	equ	0xFFB
  9091                           pclath	equ	0xFFA
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           intcon	equ	0xFF2
  9099                           postinc0	equ	0xFEE
  9100                           fsr0h	equ	0xFEA
  9101                           fsr0l	equ	0xFE9
  9102                           wreg	equ	0xFE8
  9103                           indf1	equ	0xFE7
  9104                           postdec1	equ	0xFE5
  9105                           fsr1h	equ	0xFE2
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function i2_Busy_eep *****************
  9115 ;; Defined at:
  9116 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		None
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;Total ram usage:        0 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; This function calls:
  9137 ;;		Nothing
  9138 ;; This function is called by:
  9139 ;;		i2_EEWriteDouble
  9140 ;;		i2_EEWriteChar
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text58
  9145  002E82                     __ptext58:
  9146                           	opt stack 0
  9147  002E82                     i2_Busy_eep:
  9148                           	opt stack 21
  9149                           
  9150                           ;incstack = 0
  9151  002E82  D000               	goto	i2l624
  9152  002E84                     i2l624:
  9153  002E84  B2A6               	btfsc	4006,1,c	;volatile
  9154  002E86  D7FE               	goto	i2l624
  9155  002E88  0012               	return		;funcret
  9156  002E8A                     __end_ofi2_Busy_eep:
  9157                           	opt stack 0
  9158                           pclatu	equ	0xFFB
  9159                           pclath	equ	0xFFA
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon	equ	0xFF2
  9167                           postinc0	equ	0xFEE
  9168                           fsr0h	equ	0xFEA
  9169                           fsr0l	equ	0xFE9
  9170                           wreg	equ	0xFE8
  9171                           indf1	equ	0xFE7
  9172                           postdec1	equ	0xFE5
  9173                           fsr1h	equ	0xFE2
  9174                           fsr1l	equ	0xFE1
  9175                           indf2	equ	0xFDF
  9176                           postinc2	equ	0xFDE
  9177                           postdec2	equ	0xFDD
  9178                           fsr2h	equ	0xFDA
  9179                           fsr2l	equ	0xFD9
  9180                           status	equ	0xFD8
  9181                           
  9182 ;; *************** function _TMR0Int *****************
  9183 ;; Defined at:
  9184 ;;		line 63 in file "PID.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;		None
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;		None
  9189 ;; Return value:  Size  Location     Type
  9190 ;;		None               void
  9191 ;; Registers used:
  9192 ;;		wreg, status,2
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;Total ram usage:        0 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; This function calls:
  9205 ;;		Nothing
  9206 ;; This function is called by:
  9207 ;;		_ISR
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           	psect	text59
  9212  002E3E                     __ptext59:
  9213                           	opt stack 0
  9214  002E3E                     _TMR0Int:
  9215                           	opt stack 23
  9216                           
  9217                           ;PID.c: 65: TMR0H = 0xDB;
  9218                           
  9219                           ;incstack = 0
  9220  002E3E  0EDB               	movlw	219
  9221  002E40  6ED7               	movwf	4055,c	;volatile
  9222                           
  9223                           ;PID.c: 66: TMR0L = 0x60;
  9224  002E42  0E60               	movlw	96
  9225  002E44  6ED6               	movwf	4054,c	;volatile
  9226                           
  9227                           ;PID.c: 67: TMR0Flag = 1;
  9228  002E46  0E01               	movlw	1
  9229  002E48  0100               	movlb	0	; () banked
  9230  002E4A  6FC8               	movwf	_TMR0Flag& (0+255),b
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;PID.c: 68: INTCONbits.TMR0IF = 0;
  9234  002E4C  94F2               	bcf	intcon,2,c	;volatile
  9235                           
  9236                           ; BSR set to: 0
  9237  002E4E  0012               	return		;funcret
  9238  002E50                     __end_of_TMR0Int:
  9239                           	opt stack 0
  9240                           pclatu	equ	0xFFB
  9241                           pclath	equ	0xFFA
  9242                           tblptru	equ	0xFF8
  9243                           tblptrh	equ	0xFF7
  9244                           tblptrl	equ	0xFF6
  9245                           tablat	equ	0xFF5
  9246                           prodh	equ	0xFF4
  9247                           prodl	equ	0xFF3
  9248                           intcon	equ	0xFF2
  9249                           postinc0	equ	0xFEE
  9250                           fsr0h	equ	0xFEA
  9251                           fsr0l	equ	0xFE9
  9252                           wreg	equ	0xFE8
  9253                           indf1	equ	0xFE7
  9254                           postdec1	equ	0xFE5
  9255                           fsr1h	equ	0xFE2
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _SPIInt *****************
  9265 ;; Defined at:
  9266 ;;		line 34 in file "SPISlave.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;Total ram usage:        0 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_ISR
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text60
  9294  002C9E                     __ptext60:
  9295                           	opt stack 0
  9296  002C9E                     _SPIInt:
  9297                           	opt stack 23
  9298                           
  9299                           ;SPISlave.c: 36: PORTCbits.RC6 = 1;
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;incstack = 0
  9303  002C9E  8C82               	bsf	3970,6,c	;volatile
  9304                           
  9305                           ;SPISlave.c: 37: INTCONbits.GIE = 0;
  9306  002CA0  9EF2               	bcf	intcon,7,c	;volatile
  9307                           
  9308                           ;SPISlave.c: 38: Command = SSP1BUF;
  9309  002CA2  CFC9 F043          	movff	4041,_Command	;volatile
  9310                           
  9311                           ;SPISlave.c: 39: PIR1bits.SSP1IF = 0;
  9312  002CA6  969E               	bcf	3998,3,c	;volatile
  9313                           
  9314                           ;SPISlave.c: 40: PIE1bits.SSP1IE = 0;
  9315  002CA8  969D               	bcf	3997,3,c	;volatile
  9316                           
  9317                           ;SPISlave.c: 41: if (Command == 0x0A)
  9318  002CAA  0E0A               	movlw	10
  9319  002CAC  1843               	xorwf	_Command,w,c
  9320  002CAE  A4D8               	btfss	status,2,c
  9321  002CB0  D004               	goto	i2l3451
  9322                           
  9323                           ;SPISlave.c: 42: RECFlag = 1;
  9324  002CB2  0E01               	movlw	1
  9325  002CB4  0100               	movlb	0	; () banked
  9326  002CB6  6FC6               	movwf	_RECFlag& (0+255),b
  9327  002CB8  D004               	goto	i2l266
  9328  002CBA                     i2l3451:
  9329                           
  9330                           ;SPISlave.c: 43: else
  9331                           ;SPISlave.c: 44: SPIflag = 1;
  9332  002CBA  0E01               	movlw	1
  9333  002CBC  0100               	movlb	0	; () banked
  9334  002CBE  6FC7               	movwf	_SPIflag& (0+255),b
  9335  002CC0  D000               	goto	i2l266
  9336  002CC2                     i2l266:
  9337                           
  9338                           ; BSR set to: 0
  9339  002CC2  0012               	return		;funcret
  9340  002CC4                     __end_of_SPIInt:
  9341                           	opt stack 0
  9342                           pclatu	equ	0xFFB
  9343                           pclath	equ	0xFFA
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           postinc0	equ	0xFEE
  9352                           fsr0h	equ	0xFEA
  9353                           fsr0l	equ	0xFE9
  9354                           wreg	equ	0xFE8
  9355                           indf1	equ	0xFE7
  9356                           postdec1	equ	0xFE5
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function _INT0Int *****************
  9367 ;; Defined at:
  9368 ;;		line 285 in file "RTDuC.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;		None               void
  9375 ;; Registers used:
  9376 ;;		wreg, status,2, status,0, cstack
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;Total ram usage:        0 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    1
  9389 ;; This function calls:
  9390 ;;		_KillMotors
  9391 ;; This function is called by:
  9392 ;;		_ISR
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           	psect	text61
  9397  002D0C                     __ptext61:
  9398                           	opt stack 0
  9399  002D0C                     _INT0Int:
  9400                           	opt stack 22
  9401                           
  9402                           ;RTDuC.c: 287: KillMotors();
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;incstack = 0
  9406  002D0C  EC34  F017         	call	_KillMotors	;wreg free
  9407                           
  9408                           ;RTDuC.c: 288: PORTAbits.RA3 = 0;
  9409  002D10  9680               	bcf	3968,3,c	;volatile
  9410                           
  9411                           ;RTDuC.c: 289: T0CONbits.TMR0ON = 1;
  9412  002D12  8ED5               	bsf	4053,7,c	;volatile
  9413                           
  9414                           ;RTDuC.c: 290: INTCONbits.GIE = 0;
  9415  002D14  9EF2               	bcf	intcon,7,c	;volatile
  9416                           
  9417                           ;RTDuC.c: 291: PORTAbits.RA4 = 1;
  9418  002D16  8880               	bsf	3968,4,c	;volatile
  9419  002D18  D000               	goto	i2l2275
  9420  002D1A                     i2l2275:
  9421                           
  9422                           ;RTDuC.c: 293: {
  9423                           ;RTDuC.c: 294: TMR0H = 0x00;
  9424  002D1A  0E00               	movlw	0
  9425  002D1C  6ED7               	movwf	4055,c	;volatile
  9426                           
  9427                           ;RTDuC.c: 295: TMR0L = 0x00;
  9428  002D1E  0E00               	movlw	0
  9429  002D20  6ED6               	movwf	4054,c	;volatile
  9430                           
  9431                           ;RTDuC.c: 296: while (!INTCONbits.TMR0IF);
  9432  002D22  D000               	goto	i2l598
  9433  002D24                     i2l598:
  9434  002D24  A4F2               	btfss	intcon,2,c	;volatile
  9435  002D26  D7FE               	goto	i2l598
  9436                           
  9437                           ;RTDuC.c: 297: INTCONbits.TMR0IF = 0;
  9438  002D28  94F2               	bcf	intcon,2,c	;volatile
  9439                           
  9440                           ;RTDuC.c: 298: ~PORTAbits.RA4;
  9441  002D2A  5080               	movf	3968,w,c	;volatile
  9442  002D2C  D7F6               	goto	i2l2275
  9443  002D2E  0012               	return		;funcret
  9444  002D30                     __end_of_INT0Int:
  9445                           	opt stack 0
  9446                           pclatu	equ	0xFFB
  9447                           pclath	equ	0xFFA
  9448                           tblptru	equ	0xFF8
  9449                           tblptrh	equ	0xFF7
  9450                           tblptrl	equ	0xFF6
  9451                           tablat	equ	0xFF5
  9452                           prodh	equ	0xFF4
  9453                           prodl	equ	0xFF3
  9454                           intcon	equ	0xFF2
  9455                           postinc0	equ	0xFEE
  9456                           fsr0h	equ	0xFEA
  9457                           fsr0l	equ	0xFE9
  9458                           wreg	equ	0xFE8
  9459                           indf1	equ	0xFE7
  9460                           postdec1	equ	0xFE5
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _KillMotors *****************
  9471 ;; Defined at:
  9472 ;;		line 31 in file "MotorControl.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, status,2, status,0
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;Total ram usage:        0 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; This function calls:
  9493 ;;		Nothing
  9494 ;; This function is called by:
  9495 ;;		_INT0Int
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text62
  9500  002E68                     __ptext62:
  9501                           	opt stack 0
  9502  002E68                     _KillMotors:
  9503                           	opt stack 22
  9504                           
  9505                           ;MotorControl.c: 33: PORTAbits.RA4 = 1;
  9506                           
  9507                           ;incstack = 0
  9508  002E68  8880               	bsf	3968,4,c	;volatile
  9509                           
  9510                           ;MotorControl.c: 34: CCP3CON = CCP3CON & 0xF0;
  9511  002E6A  50B7               	movf	4023,w,c	;volatile
  9512  002E6C  0BF0               	andlw	240
  9513  002E6E  6EB7               	movwf	4023,c	;volatile
  9514  002E70  0012               	return		;funcret
  9515  002E72                     __end_of_KillMotors:
  9516                           	opt stack 0
  9517                           pclatu	equ	0xFFB
  9518                           pclath	equ	0xFFA
  9519                           tblptru	equ	0xFF8
  9520                           tblptrh	equ	0xFF7
  9521                           tblptrl	equ	0xFF6
  9522                           tablat	equ	0xFF5
  9523                           prodh	equ	0xFF4
  9524                           prodl	equ	0xFF3
  9525                           intcon	equ	0xFF2
  9526                           postinc0	equ	0xFEE
  9527                           fsr0h	equ	0xFEA
  9528                           fsr0l	equ	0xFE9
  9529                           wreg	equ	0xFE8
  9530                           indf1	equ	0xFE7
  9531                           postdec1	equ	0xFE5
  9532                           fsr1h	equ	0xFE2
  9533                           fsr1l	equ	0xFE1
  9534                           indf2	equ	0xFDF
  9535                           postinc2	equ	0xFDE
  9536                           postdec2	equ	0xFDD
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           pclatu	equ	0xFFB
  9541                           pclath	equ	0xFFA
  9542                           tblptru	equ	0xFF8
  9543                           tblptrh	equ	0xFF7
  9544                           tblptrl	equ	0xFF6
  9545                           tablat	equ	0xFF5
  9546                           prodh	equ	0xFF4
  9547                           prodl	equ	0xFF3
  9548                           intcon	equ	0xFF2
  9549                           postinc0	equ	0xFEE
  9550                           fsr0h	equ	0xFEA
  9551                           fsr0l	equ	0xFE9
  9552                           wreg	equ	0xFE8
  9553                           indf1	equ	0xFE7
  9554                           postdec1	equ	0xFE5
  9555                           fsr1h	equ	0xFE2
  9556                           fsr1l	equ	0xFE1
  9557                           indf2	equ	0xFDF
  9558                           postinc2	equ	0xFDE
  9559                           postdec2	equ	0xFDD
  9560                           fsr2h	equ	0xFDA
  9561                           fsr2l	equ	0xFD9
  9562                           status	equ	0xFD8
  9563                           
  9564                           	psect	rparam
  9565  0000                     pclatu	equ	0xFFB
  9566                           pclath	equ	0xFFA
  9567                           tblptru	equ	0xFF8
  9568                           tblptrh	equ	0xFF7
  9569                           tblptrl	equ	0xFF6
  9570                           tablat	equ	0xFF5
  9571                           prodh	equ	0xFF4
  9572                           prodl	equ	0xFF3
  9573                           intcon	equ	0xFF2
  9574                           postinc0	equ	0xFEE
  9575                           fsr0h	equ	0xFEA
  9576                           fsr0l	equ	0xFE9
  9577                           wreg	equ	0xFE8
  9578                           indf1	equ	0xFE7
  9579                           postdec1	equ	0xFE5
  9580                           fsr1h	equ	0xFE2
  9581                           fsr1l	equ	0xFE1
  9582                           indf2	equ	0xFDF
  9583                           postinc2	equ	0xFDE
  9584                           postdec2	equ	0xFDD
  9585                           fsr2h	equ	0xFDA
  9586                           fsr2l	equ	0xFD9
  9587                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        7
    BSS         3664
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      72
    BANK0           160     74     109
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    SPIDisassembleLode@Transmit	PTR unsigned char  size(2) Largest target is 1809
		 -> TransmitLode(BIGRAM[1809]), 

    SPIDisassembleLode@Data	PTR  size(2) Largest target is 1809
		 -> DataLode(BIGRAM[1809]), 

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleLode@dub(COMRAM[3]), SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _ZeroMotors->_abs
    _calculatePID->___ftdiv
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftdiv->___ftadd
    _ReadRTDpos->_Delay10TCYx
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SendSPI1->_SPIRestart
    _SaveAll->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep
    _SPIDisassembleLode->___wmul
    ___wmul->___lwdiv
    _SPIDisassembleDouble->_GenerateChecksum
    _ReceiveSPI1->_SPIRestart
    _SPIRestart->_OpenSPI1
    _ImplementJSMotion->_abs

Critical Paths under _ISR in COMRAM

    i2_SaveAll->i2_EEWriteDouble
    i2_EEWriteDouble->i2_Write_b_eep
    i2_EEWriteChar->i2_Write_b_eep

Critical Paths under _main in BANK0

    _main->_ZeroMotors
    _initialize->_ZeroMotors
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftmul
    _RTD2Angle->___ftmul
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  110252
                                             57 BANK0     17    17      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                 _SPIDisassembleLode
                _SPIReassembleDouble
                         _SPIRestart
                            _SaveAll
                           _SendSPI1
                         _ZeroMotors
                             ___wmul
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   38506
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                         _RecTmrInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           6     6      0   37527
                                             51 BANK0      6     6      0
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   19702
                                             36 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     525
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5399
                                             43 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5035
                                             31 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3306
                                             43 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6901
                                             21 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                              6 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     858
                                             38 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     344
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (2) _RecTmrInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     569
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             0     0      0     569
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     352
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0     368
                                             27 COMRAM     2     2      0
                         _SPIRestart
 ---------------------------------------------------------------------------------
 (1) _SaveAll                                              0     0      0    1919
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (2) _EEWriteDouble                                        5     2      3     825
                                             27 COMRAM     5     2      3
                           _Busy_eep
                _EEDisassembleDouble
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _EEDisassembleDouble                                  3     0      3     110
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEWriteChar                                          2     1      1    1094
                                             27 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     346
                                             23 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleLode                                  11     7      4    1103
                                             36 COMRAM    11     7      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     415
                                             30 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     458
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0     345
                         _SPIRestart
 ---------------------------------------------------------------------------------
 (2) _SPIRestart                                           1     1      0     345
                                             26 COMRAM     1     1      0
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     344
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     720
                                             38 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     324
                                             52 COMRAM     2     2      0
                                             36 BANK0      2     0      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     983
                                              9 COMRAM    14    14      0
                            _INT0Int
                             _SPIInt
                            _TMR0Int
                          i2_SaveAll
 ---------------------------------------------------------------------------------
 (8) i2_SaveAll                                            0     0      0     983
                      i2_EEWriteChar
                    i2_EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteDouble                                      5     2      3     459
                                              4 COMRAM     5     2      3
                         i2_Busy_eep
              i2_EEDisassembleDouble
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_EEDisassembleDouble                               3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteChar                                        2     1      1     524
                                              4 COMRAM     2     1      1
                         i2_Busy_eep
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_Write_b_eep                                       4     1      3     194
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
     _SPIRestart
       _OpenSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIDisassembleLode
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _SPIReassembleDouble
   _SPIRestart
     _OpenSPI1
   _SaveAll
     _EEWriteChar
       _Busy_eep
       _Write_b_eep
     _EEWriteDouble
       _Busy_eep
       _EEDisassembleDouble
       _Write_b_eep
   _SendSPI1
     _SPIRestart
       _OpenSPI1
   _ZeroMotors
     _ImplementPIDMotion
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _RTD2Angle
       _ReadRTDpos (ARG)
         _Delay10TCYx
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _ReadRTDpos
       _Delay10TCYx
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___fttol
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _calculatePID
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   ___wmul
     ___lwdiv (ARG)
   _calculatePID
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _RecTmrInit
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int
   i2_SaveAll
     i2_EEWriteChar
       i2_Busy_eep
       i2_Write_b_eep
     i2_EEWriteDouble
       i2_Busy_eep
       i2_EEDisassembleDouble
       i2_Write_b_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     E22      37       91.9%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4A      6D       5       68.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      48       1       75.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B5      32        0.0%
DATA                 0      0     ED7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 18 03:41:26 2015

                    _SPIRestart 2DEE        __size_of_MotorDriverInit 0024                              l31 2BB6  
                            l40 2D72                              l43 2612                              l37 2D5C  
                            l49 267A                              _Kd 00B0                              _Ki 00B3  
                            _Kp 00B6             ___wmul@multiplicand 0021             ?_EEReassembleDouble 0018  
                  ___ftadd@exp1 002B                    ___ftadd@exp2 002A       ImplementJSMotion@CCPinput 008A  
                  ___ftadd@sign 0029                             l109 1E06                             l149 1694  
                           l270 2BEC                             l280 2C9C                             l187 268A  
                           l188 2694                             l277 2C86                             l373 2952  
                           l197 2A96                             l189 26D6                             l613 1A8C  
                           l294 29D8                             l550 116C                             l383 2788  
                           l367 260C                             l288 2118                             l624 2E7C  
                           l640 2DEC                             l561 134C                             l545 11F2  
                           l298 2996                             l570 1470                             l546 11EA  
                           l548 1138                             l389 2DB4                             l734 2C20  
                           l735 2C28                             l655 2A08                             l583 2AD6  
                           l680 27BE                             l681 27D8                             l577 155C  
                           l682 27C0                             l674 279E                             l930 2E5A  
                           l683 27C4                             l923 2E2A                             l676 27A2  
                           l916 2E3C                             l677 27A4                             l687 2C50  
                           l928 2E52                             _PR2 000FCB                             _ISR 0008  
                           _abs 2C00            __size_of_Write_b_eep 0040                             prod 000FF3  
                           wreg 000FE8         ??i2_EEDisassembleDouble 0004                            ?_ISR 0001  
               __end_of_INT0Int 2D30                    ___ftdiv@cntr 0060                      _Delay1TCYx 2E50  
                  ___ftdiv@sign 0065                    __CFG_WDT$OFF 000000                            l1020 21DE  
                          l1101 252C                            l1031 21B6                            l1107 1CD2  
                          ?_abs 0084                            l1060 186E                            l1124 28CA  
                          l1117 2CDA                            l1061 19EC                            l1230 272A  
                          l1064 1898                            l1128 1F38                            l1075 195A  
                          l1092 2038                            l1084 1976                            l1095 2002  
                          l3025 2E1C                            l1257 2C76                            l3041 268E  
                          l4003 1994                            l4101 1C68                            l4013 19C6  
                          l3223 29AC                            l4111 1CAC                            l4103 1C70  
                          l3401 2670                            l3081 27C8                            l3233 29D0  
                          l4033 1F88                            l3227 29B8                            l3171 2BC4  
                          l4107 1C90                            l4027 1F5C                            l4211 1728  
                          l3077 27A8                            l3325 26EE                            l4053 1FD8  
                          l4029 1F7A                            l4205 164A                            l3239 29D4  
                          l3327 26F8                            l3503 2064                            l3263 2804  
                          l4063 2012                            l4119 28A0                            l4151 1ECA  
                          l4231 1A46                            l3337 271E                            l3329 2700  
                          l3273 282C                            l4073 1BA2                            l4153 1ED2  
                          l4161 1F08                            l4129 1E32                            l4401 1192  
                          l3259 27FC                            l4075 1BC8                            l4147 1EB6  
                          l4261 1D1A                            l4181 2388                            l4093 1C2C  
                          l4165 1F26                            l4157 1EE8                            l4405 11AC  
                          l4413 11E0                            l4255 1CF4                            l4079 1BDC  
                          l2911 24CA                            l4159 1EFA                            l4247 1B40  
                          l4351 10C8                            l4343 1094                            l4335 1060  
                          l4319 1028                            l3393 2660                            l4273 1D6E  
                          l4185 2392                            l4177 2368                            l4097 1C4C  
                          l2921 2528                            l4409 11C6                            l4259 1D12  
                          l3467 2BF6                            l2915 24FC                            l4363 10F4  
                          l4347 10AE                            l4355 10E2                            l4339 107A  
                          l4419 1202                            l4277 1DA6                            l4189 23AA  
                          l4541 14AE                            l4453 12A6                            l4437 123A  
                          l4373 111A                            l3479 2C90                            l2791 2748  
                          l4199 15C8                            l4551 1516                            l4527 13E4  
                          l4383 1140                            l4359 10EA                            l2769 2E2E  
                          l3921 2146                            l4529 142A                            l4537 149E  
                          l4473 1310                            l4369 1112                            l2787 2740  
                          l3931 21AA                            l3923 2166                            l3915 212A  
                          l4555 153C                            l4387 114E                            l2799 2770  
                          l3943 21D0                            l3927 217E                            l3919 213A  
                          l3937 21BE                            l3929 219E                            l3961 18A6  
                          l3955 187C                            l3983 18FE                            l3967 18B2  
                          l3985 190A                            l3977 18DA                            l3995 1942  
                          l3987 1916                            l3997 194E                            l3989 191E  
                          u2255 2A14                            u2256 2A16                            u3401 1F6C  
                          u3161 183A                            u3171 184E                            u3501 1E1E  
                          u4127 2E1E                            u3431 1B8E                            u3520 1E58  
                          u4137 2E30                     main@counter 00A7                            u3610 23A6  
                          u3451 1BB8                            u3381 1F4A                            u3525 1E4E  
               __end_of_PIDInit 2910                            _TMR4 000F78  ImplementJSMotion@JoystickValue 0086  
                  __CFG_PWRT$ON 000000            ??_EEReassembleDouble 001B                    EEReadChar@ch 001B  
               __end_of_TMR0Int 2E50                            abs@a 0084                            _main 1006  
                  ___ftpack@arg 0018                     _DeadbandLow 0047                    ___ftpack@exp 001B  
               __end_of_RTDInit 2BA8                 __end_of_SPIInit 2DD4                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            pclat 000FFA                  ??_EEReadDouble 0021  
        __size_ofi2_Write_b_eep 0040                            prodh 000FF4                            prodl 000FF3  
                          start 0018             __size_of_EEPROMInit 0014                    ?_EEWriteChar 001C  
                  ___ftmul@cntr 0073                    ___param_bank 000010                    ___ftmul@sign 0074  
 __size_of_InitializeInterrupts 000C                           ??_ISR 000A                     _Delay10TCYx 2E2C  
              __end_of_EEBootUp 260E                    ___fttol@exp1 0083                           ??_abs 0035  
               __end_of_SaveAll 2298                    ___fttol@lval 007F                     _Delay1KTCYx 2E1A  
               i2EEWriteChar@ch 0005                     ReadRTDpos@x 0022               RTD2Angle@RTDAngle 0075  
                         ?_main 0001                           _EEADR 000FA9                 __end_of___ftadd 19EE  
               __end_of___ftdiv 203A                 __end_of___ftneg 2CE8                 __end_of___ftmul 1CD4  
                         _T0CON 000FD5                 __end_of___ftsub 28CC                 __end_of___fttol 1F3A  
                         _T2CON 000FCA                           _T3CON 000FB1                 __end_of___lwdiv 2734  
                         i2l266 2CC2                           i2l624 2E84                           i2l655 2A48  
                         i2l594 245E                           i2l598 2D24              __size_of_RTD2Angle 003E  
                         _TMR0H 000FD7                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001D                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054             ZeroMotors@PrevAngle 0096  
        Write_b_eep@GIE_BIT_VAL 001B                    _DeadbandHigh 0045                           _error 00B9  
                 ___ftpack@sign 001C                      _DoubleSPIS 0037                           main@x 00A9  
                 ??_ReceiveSPI1 001C                           tablat 000FF5              __size_ofi2_SaveAll 00B8  
                   ?i2_Busy_eep 0001                           status 000FD8                   EEReadDouble@x 0022  
    __size_of_ImplementJSMotion 0134           EEWriteDouble@location 001F             GenerateChecksum@sum 0018  
                    _ReadRTDpos 267C                      _KillMotors 2E68                 __initialization 252E  
                   ?_SPIRestart 0001                    __end_of_main 1580                      _RecTmrInit 2E72  
                _DetectJoystick 2D52                  _DetectMovement 260E                      _Read_b_eep 2DD4  
              __end_of_Busy_eep 2E82           EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000  
              __end_of_SendSPI1 2C00                __end_of_OpenSPI1 27E0                    _DataLodeSize 1001  
                        ??_main 0037                   ___fttol@sign1 007E                   __activetblptr 000003  
             ??_MotorDriverInit 0018         DetectMovement@ADCresult 001D                   i2_Write_b_eep 2A1A  
                     ??_INT0Int 0001                       ??_PIDInit 0018                       ??_TMR0Int 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                     ??_RTDInit 0019                          _EEDATA 000FA8                     ?_Delay1TCYx 0001  
                     ??_SPIInit 001B                          _CCPR3L 000FB8                          _EECON2 000FA7  
              __end_of___ftpack 21E0           __size_of_calculatePID 02AA                          i2l2275 2D1A  
                        i2l3351 2858                          i2l3361 2880                          i2l3451 2CBA  
                        i2l3347 2850                          i2l3901 2446                          i2l3907 2456  
                        _INTCON 000FF2                          i2l3893 2432                          i2l3897 243C  
              __end_of___lwtoft 2C78                i2EEWriteDouble@x 0009                          _SPIInt 2C9E  
           SPIDisassembleLode@y 002B               __end_of_RTD2Angle 2A98           i2EEWriteChar@location 0006  
           __end_of_ReceiveSPI1 2C9E                       ??_SaveAll 0021      SPIDisassembleLode@Transmit 0027  
        __end_of_DetectJoystick 2D74          __end_of_DetectMovement 267C                OpenSPI1@bus_mode 0018  
                 _EEWriteDouble 27E0                          ___ftge 2498                          ___wmul 2C2A  
                     ??___ftadd 0026                       ??___ftdiv 0032                       ??___ftneg 001B  
                     ??___ftmul 006C                       ??___ftsub 0032                       ??___fttol 0079  
                     ??___lwdiv 001C                          _intErr 00BC                          clear_0 2536  
                        clear_1 2548                          clear_2 2554               __end_ofi2_SaveAll 2350  
                        _timer4 0044                  ?i2_Write_b_eep 0001             __size_ofi2_Busy_eep 0008  
         ___ftmul@f3_as_product 0070                    ??_EEPROMInit 0023     __size_of_ImplementPIDMotion 00A8  
      __size_ofi2_EEWriteDouble 0054              _SPIDisassembleLode 203A                    __pdataCOMRAM 0045  
                  _calculatePID 1580            __end_of_EEReadDouble 278A               _calculatePID$3511 008D  
             _calculatePID$3512 0090                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8             __size_of_SPIRestart 0018  
           ?_SPIDisassembleLode 0025               ?_GenerateChecksum 0001                       ?_EEBootUp 0001  
                    __accesstop 0060         __end_of__initialization 2598              ??_GenerateChecksum 0018  
                    ___ftadd@f1 0020                      ___ftadd@f2 0023                      ___ftge@ff1 0018  
                    ___ftge@ff2 001B                      _ZeroMotors 19EE                   ___rparam_used 000001  
                    ___ftdiv@f1 002C                      ___ftdiv@f2 002F                      ___ftdiv@f3 0061  
            EEReadChar@location 001A                      ___ftneg@f1 0018                     ?_ReadRTDpos 0019  
                   ?_KillMotors 0001                    ??_EEReadChar 001A                  ?_EEWriteDouble 001C  
                    ___ftmul@f1 0066                      ___ftmul@f2 0069                 ?_DetectJoystick 0001  
               ?_DetectMovement 0018              __end_of_EEPROMInit 2E1A                      ___ftsub@f1 002C  
                    ___ftsub@f2 002F                      ___fttol@f1 0075                  __pcstackCOMRAM 0001  
   __end_of_EEDisassembleDouble 2B42                    __pidataBANK0 2E8E                     ?_RecTmrInit 0001  
          ??_SPIDisassembleLode 0029            __size_of_EEWriteChar 0022                     ?_Read_b_eep 0018  
           __size_of_Delay1TCYx 000C               GenerateChecksum@y 0019                      ___lwtoft@c 0020  
  __size_of_SPIReassembleDouble 0044          __size_ofi2_EEWriteChar 0022              __end_of_EEReadChar 2DB6  
__size_ofi2_EEDisassembleDouble 0036   __end_ofi2_EEDisassembleDouble 2B78                      __pbssBANK0 00AA  
                   _ReceiveSPI1 2C78                      ??_EEBootUp 0023                       ?_Busy_eep 0001  
       i2EEWriteDouble@location 0008                   ?_JoystickInit 0001                         ?_SPIInt 0001  
                     ?_SendSPI1 0001                       ?_OpenSPI1 0018                         ?___ftge 0018  
                  ?_Delay10TCYx 0001                         ?___wmul 001F                  EEWriteDouble@x 0020  
                       _CCP3CON 000FB7                    ?_Delay1KTCYx 0001                 ??i2_Write_b_eep 0004  
      i2EEDisassembleDouble@dub 0001                       ?___ftpack 0018                   ??_Write_b_eep 001B  
                     ?___lwtoft 0020                         _HLVDCON 000FD2                         _INT0Int 2D0C  
                       _RECFlag 00C6    __end_of_InitializeInterrupts 2E68                         _PIDInit 28CC  
                       _DDouble 003B             __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A  
                 _PIDEnableFlag 00C5                         _SSP1BUF 000FC9                         _TMR0Int 2E3E  
    ImplementPIDMotion@PIDValue 0086                         _RTDInit 2B78                         _SPIInit 2DB6  
             ??i2_EEWriteDouble 0008             __size_of_RecTmrInit 0008                         _SPIflag 00C7  
              EEWriteDouble@dub 001C             __size_of_Read_b_eep 001A                _TransmitLodeSize 1003  
                ??_JoystickInit 0018                    ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044  
                    ??_Busy_eep 0018                         _Command 0043                     ?_ZeroMotors 0001  
               __size_of_SPIInt 0026                      ??_SendSPI1 001C                 ??_EEWriteDouble 001F  
                    ??_OpenSPI1 001A             EEWriteChar@location 001D                         _SaveAll 21E0  
                       __Hparam 0000                         __Lparam 0000                 _MotorDriverInit 2CE8  
                  ??_SPIRestart 001B                   i2_EEWriteChar 2D74                 __size_of___ftge 0096  
                       ___ftadd 182A                         ___ftdiv 1F3A                         ___ftneg 2CC4  
               __size_of___wmul 0028                         ___ftmul 1B78                         ___ftsub 2888  
                       ___fttol 1E08                         ___lwdiv 26D8                    __psmallconst 1000  
                    _dummy_byte 00C9           __size_of_EEReadDouble 0056                    SendSPI1@data 001D  
                       __pcinit 252E                      ??___ftpack 001D                 Delay10TCYx@unit 0018  
                       __ramtop 1000                      _initialize 2AD4                    SendSPI1@temp 001C  
                       __ptext0 1006                         __ptext1 2AD4                         __ptext2 19EE  
                       __ptext3 1580                         __ptext4 1E08                         __ptext5 2888  
                       __ptext6 182A                         __ptext7 2CC4                         __ptext8 2498  
                       __ptext9 1F3A                      ??___lwtoft 0023                       _T0CONbits 000FD5  
                  __size_of_ISR 2490                    __size_of_abs 002A              __end_ofi2_Busy_eep 2E8A  
                     _T3CONbits 000FB1                       _T4CONbits 000F76               i2Write_b_eep@badd 0001  
             i2Write_b_eep@bdat 0003                         _prevErr 00BF   __size_of_SPIDisassembleDouble 003C  
           __end_of_Write_b_eep 2A1A                    ??_Delay1TCYx 0018                  __pintcode_body 23F8  
          end_of_initialization 2598              __end_of_SPIRestart 2E06                         int_func 23F8  
             OpenSPI1@smp_phase 0019                    _EEReadDouble 2734                  ?i2_EEWriteChar 0005  
         ReadRTDpos@LowPosition 001F                         postdec1 000FE5                         postdec2 000FDD  
                    _motorInput 00C2                       _RTD2Angle 2A5A                         postinc0 000FEE  
                       postinc2 000FDE               OpenSPI1@sync_mode 001A              __end_of_Delay1TCYx 2E5C  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _PORTCbits 000F82  
                     _PORTEbits 000F84                       _PORTJbits 000F88        i2Write_b_eep@GIE_BIT_VAL 0004  
           __size_of_ZeroMotors 018A                       i2_SaveAll 2298          SPIDisassembleLode@Data 0025  
                     _TRISAbits 000F92                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISEbits 000F96                       _TRISFbits 000F97                       _TRISGbits 000F98  
                     _TRISJbits 000F9A         __end_of_MotorDriverInit 2D0C                ??_DetectJoystick 0018  
              ??_DetectMovement 001A                     ___ftdiv@exp 0064               __size_of_EEBootUp 0070  
           _SPIReassembleDouble 2954                     _CCP3CONbits 000FB7                      main@saveSP 00A3  
                    main@saveKd 00A0                      main@saveKi 009D                      main@saveKp 009A  
                __end_of_SPIInt 2CC4                    ??_ReadRTDpos 001B                    ??_KillMotors 0001  
                   ___ftmul@exp 006F            _InitializeInterrupts 2E5C                    ??_RecTmrInit 0018  
                    ?_RTD2Angle 0075       __size_of_GenerateChecksum 0042                    ??_Read_b_eep 001A  
                __end_of___ftge 252E                  __end_of___wmul 2C52            __size_of_Delay10TCYx 0012  
                 __pidataCOMRAM 2E8A      __end_of_ImplementPIDMotion 23F8                     ?_initialize 0001  
                   _Write_b_eep 29DA            __end_of_JoystickInit 2BD6            __size_of_Delay1KTCYx 0012  
          ?_SPIReassembleDouble 0018                       _DoublePtr 0041                      ?i2_SaveAll 0001  
           start_initialization 252E                 _CurrentVelocity 00AD                    _CurrentAngle 00AA  
                   __end_of_ISR 2498                     __end_of_abs 2C2A              __end_of_ReadRTDpos 26D8  
            __end_of_KillMotors 2E72                    ?_ReceiveSPI1 0001              __end_of_RecTmrInit 2E7A  
            __end_of_Read_b_eep 2DEE            EEReadDouble@location 0021                        ??_SPIInt 0001  
               ??i2_EEWriteChar 0006               __size_of_Busy_eep 0008            calculatePID@setpoint 0087  
                 ??_EEWriteChar 001D          ReadRTDpos@HighPosition 001E               __size_of_SendSPI1 002A  
             __size_of_OpenSPI1 0056           ?_InitializeInterrupts 0001                        ??___ftge 001E  
                      ??___wmul 0023     __size_of_SPIDisassembleLode 00E0                     __pdataBANK0 00CA  
      __end_of_TransmitLodeSize 1005           ??_SPIReassembleDouble 001B                 i2_EEWriteDouble 2834  
  __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6                     __pbssBIGRAM 00CD  
                      ?_INT0Int 0001                     __pbssCOMRAM 0037               __size_of___lwtoft 0026  
                 __pcstackBANK0 0060                        ?_PIDInit 0001                        ?_TMR0Int 0001  
            calculatePID@derErr 008A                  SPIRestart@temp 001B                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001  
         i2_EEDisassembleDouble 2B42                    ??_ZeroMotors 0037             __size_of_initialize 0038  
        SPIReassembleDouble@dub 001B                   EEWriteChar@ch 001C                        ?_SaveAll 0001  
              ___lwdiv@dividend 0018                       __pintcode 0008                     ??_RTD2Angle 0035  
                      ?___ftadd 0020                        ?___ftdiv 002C                        ?___ftneg 0018  
                      ?___ftmul 0066                        ?___ftsub 002C                        ?___fttol 0075  
                      ?___lwdiv 0018             __end_of_EEWriteChar 2D52           __end_ofi2_Write_b_eep 2A5A  
                   __smallconst 1000                     ??i2_SaveAll 000A              __end_of_ZeroMotors 1B78  
              ___lwdiv@quotient 001C      __end_of_EEReassembleDouble 2954                        _EEBootUp 259E  
                ___wmul@product 0023                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0              i2EEWriteDouble@dub 0005          ??_InitializeInterrupts 0018  
         __end_of_EEWriteDouble 2834    __end_of_SPIDisassembleDouble 2AD4                        i2u228_45 2A54  
                      i2u228_46 2A56                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                      _PIR3bits 000FA4         __end_ofi2_EEWriteDouble 2888           __size_of_JoystickInit 002E  
                      _SSP1CON1 000FC6                        _TMR0Flag 00C8                _GenerateChecksum 2998  
                      _SSP1STAT 000FC7           SPIDisassembleLode@dub 002D                      _ADCON0bits 000FC2  
             ___wmul@multiplier 001F                 Write_b_eep@badd 0018                 Write_b_eep@bdat 001A  
                 ?_calculatePID 0084                        _DataLode 00CD                       main@dtime 00A6  
                     main@trash 0099                __size_of_INT0Int 0024                __size_of_PIDInit 0044  
              __size_of_TMR0Int 0012                       copy_data0 258C                __size_of_RTDInit 0030  
              __size_of_SPIInit 001E          ?i2_EEDisassembleDouble 0001                        _Busy_eep 2E7A  
          __size_of_ReceiveSPI1 0026                    _JoystickInit 2BA8                        _SendSPI1 2BD6  
                    _EECON1bits 000FA6                        _SetAngle 003E                        _OpenSPI1 278A  
        ReadRTDpos@FullPosition 0020                        __Hrparam 0000               ZeroMotors@average 0093  
                   _EEWriteChar 2D30                        __Lrparam 0000                __size_of_SaveAll 00B8  
                  _JSEnableFlag 00C4                __size_of___ftadd 01C4                __size_of___ftdiv 0100  
              __size_of___ftneg 0024                __size_of___ftmul 015C                __size_of___ftsub 0044  
              __size_of___fttol 0132                __size_of___lwdiv 005C                    ??_initialize 0037  
                      ___ftpack 211A                    ?_Write_b_eep 0018               calculatePID@angle 0084  
                ??_calculatePID 0035                        ___lwtoft 2C52                      _EEPROMInit 2E06  
               ___lwdiv@divisor 001A                 ___lwdiv@counter 001E                        __ptext10 267C  
                      __ptext11 2A5A                        __ptext20 2E1A                        __ptext12 2C52  
                      __ptext21 2E2C                        __ptext13 1B78                        __ptext30 2D96  
                      __ptext22 28CC                        __ptext14 211A                        __ptext31 2DD4  
                      __ptext23 2CE8                        __ptext15 2350                        __ptext40 203A  
                      __ptext32 2BD6                        __ptext24 2BA8                        __ptext16 2DB6  
                      __ptext41 2C2A                        __ptext33 21E0                        __ptext25 2E5C  
                      __ptext17 2E72                        __ptext50 260E                        __ptext42 26D8  
                      __ptext34 27E0                        __ptext26 2E06                        __ptext18 2B78  
                      __ptext51 2D52                        __ptext43 2A98                        __ptext35 2B0C  
                      __ptext27 259E                        __ptext19 2E50                        __ptext60 2C9E  
                      __ptext44 2998                        __ptext36 2D30                        __ptext28 2734  
                      __ptext61 2D0C                        __ptext53 2298                        __ptext45 2C78  
                      __ptext37 29DA                        __ptext29 2910                        __ptext62 2E68  
                      __ptext54 2834                        __ptext46 2DEE                        __ptext38 2E7A  
                      __ptext55 2B42                        __ptext47 278A                        __ptext39 2954  
                      __ptext56 2D74                        __ptext48 1CD4                        __ptext57 2A1A  
                      __ptext49 2C00                        __ptext58 2E82                        __ptext59 2E3E  
                  _SSP1CON1bits 000FC6              _ImplementPIDMotion 2350                   __size_of_main 057A  
           _EEDisassembleDouble 2B0C                  Delay1TCYx@unit 0018             ?_ImplementPIDMotion 0086  
            __end_of_initialize 2B0C                        _loopTime 00CA                      _EEReadChar 2D96  
                 ??_Delay10TCYx 0018                ?i2_EEWriteDouble 0005                   ??_Delay1KTCYx 0018  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0018            ??_ImplementPIDMotion 0088  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 2A98                        intlevel2 0000  
          __end_of_DataLodeSize 1003                      _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B  
             _ImplementJSMotion 1CD4      __end_of_SPIDisassembleLode 211A           __end_ofi2_EEWriteChar 2D96  
   __end_of_SPIReassembleDouble 2998              ?_ImplementJSMotion 0086         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 006E           ??_EEDisassembleDouble 001B             __end_of_Delay10TCYx 2E3E  
           ??_ImplementJSMotion 0088          EEDisassembleDouble@dub 0018                     ?_EEPROMInit 0001  
                  _TransmitLode 07DE             __end_of_Delay1KTCYx 2E2C           ?_SPIDisassembleDouble 001A  
      __end_of_GenerateChecksum 29DA                      i2_Busy_eep 2E82         SPIDisassembleDouble@dub 001A  
     __end_of_ImplementJSMotion 1E08            __end_of_calculatePID 182A                   ?_EEReadDouble 001E  
                   ?_EEReadChar 0001              _EEReassembleDouble 2910  
