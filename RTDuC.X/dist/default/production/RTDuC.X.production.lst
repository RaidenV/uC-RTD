

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Nov  7 05:47:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  002E1C                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _DeadbandHigh
    86  002E1C  00C8               	dw	200
    87                           
    88                           ;initializer for _DeadbandLow
    89  002E1E  FF38               	dw	65336
    90                           
    91                           ;initializer for _timer1High
    92  002E20  C0                 	db	192
    93                           
    94                           	psect	idataBANK0
    95  002E21                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _loopTime
    99                           ;PID.c: 5: unsigned char PIDEnableFlag;
   100                           ;PID.c: 6: unsigned char TMR0Flag = 0;
   101                           ;PID.c: 7: double Ki;
   102                           ;PID.c: 8: double Kp;
   103                           ;PID.c: 9: double Kd;
   104                           ;PID.c: 10: double SetAngle;
   105                           ;PID.c: 11: double CurrentAngle;
   106                           ;PID.c: 12: double error;
   107                           ;PID.c: 13: double prevErr;
   108                           ;PID.c: 14: double intErr;
   109                           ;PID.c: 15: int motorInput;
   110  002E21  C3                 	db	195
   111  002E22  F5                 	db	245
   112  002E23  3C                 	db	60
   113                           
   114                           	psect	smallconst
   115  001000                     __psmallconst:
   116                           	opt stack 0
   117  001000  00                 	db	0
   118  001001                     _DataLodeSize:
   119                           	opt stack 0
   120  001001  0258               	dw	600
   121  001003                     __end_of_DataLodeSize:
   122                           	opt stack 0
   123  001003                     _TransmitLodeSize:
   124                           	opt stack 0
   125  001003  0708               	dw	1800
   126  001005                     __end_of_TransmitLodeSize:
   127                           	opt stack 0
   128  0000                     _ADCON0	set	4034
   129  0000                     _ADCON0bits	set	4034
   130  0000                     _ADCON1	set	4033
   131  0000                     _ADCON2	set	4032
   132  0000                     _ADRESH	set	4036
   133  0000                     _ADRESL	set	4035
   134  0000                     _CCP3CON	set	4023
   135  0000                     _CCP3CONbits	set	4023
   136  0000                     _CCPR3L	set	4024
   137  0000                     _EEADR	set	4009
   138  0000                     _EEADRH	set	4010
   139  0000                     _EECON1bits	set	4006
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _HLVDCON	set	4050
   143  0000                     _INTCON	set	4082
   144  0000                     _INTCONbits	set	4082
   145  0000                     _IPR2bits	set	4002
   146  0000                     _OSCCONbits	set	4051
   147  0000                     _PIE1bits	set	3997
   148  0000                     _PIE2bits	set	4000
   149  0000                     _PIR1bits	set	3998
   150  0000                     _PIR2bits	set	4001
   151  0000                     _PORTA	set	3968
   152  0000                     _PORTAbits	set	3968
   153  0000                     _PORTB	set	3969
   154  0000                     _PORTBbits	set	3969
   155  0000                     _PORTC	set	3970
   156  0000                     _PORTCbits	set	3970
   157  0000                     _PORTD	set	3971
   158  0000                     _PORTE	set	3972
   159  0000                     _PORTEbits	set	3972
   160  0000                     _PORTF	set	3973
   161  0000                     _PORTG	set	3974
   162  0000                     _PORTH	set	3975
   163  0000                     _PORTJ	set	3976
   164  0000                     _PORTJbits	set	3976
   165  0000                     _PR2	set	4043
   166  0000                     _SSP1BUF	set	4041
   167  0000                     _SSP1CON1	set	4038
   168  0000                     _SSP1CON1bits	set	4038
   169  0000                     _SSP1STAT	set	4039
   170  0000                     _SSP1STATbits	set	4039
   171  0000                     _T0CON	set	4053
   172  0000                     _T0CONbits	set	4053
   173  0000                     _T1CONbits	set	4045
   174  0000                     _T2CON	set	4042
   175  0000                     _T3CON	set	4017
   176  0000                     _T3CONbits	set	4017
   177  0000                     _TMR0H	set	4055
   178  0000                     _TMR0L	set	4054
   179  0000                     _TMR1H	set	4047
   180  0000                     _TMR1L	set	4046
   181  0000                     _TMR3H	set	4019
   182  0000                     _TMR3L	set	4018
   183  0000                     _TRISAbits	set	3986
   184  0000                     _TRISBbits	set	3987
   185  0000                     _TRISCbits	set	3988
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISEbits	set	3990
   188  0000                     _TRISFbits	set	3991
   189  0000                     _TRISGbits	set	3992
   190  0000                     _TRISH	set	3993
   191  0000                     _TRISJbits	set	3994
   192                           
   193                           ; #config settings
   194  001005  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  0024E0                     __pcinit:
   198                           	opt stack 0
   199  0024E0                     start_initialization:
   200                           	opt stack 0
   201  0024E0                     __initialization:
   202                           	opt stack 0
   203                           
   204                           ; Clear objects allocated to BIGRAM (3600 bytes)
   205  0024E0  EE00  F0C4         	lfsr	0,__pbssBIGRAM
   206  0024E4  EE1E F010          	lfsr	1,3600
   207  0024E8                     clear_0:
   208  0024E8  6AEE               	clrf	postinc0,c
   209  0024EA  50E5               	movf	postdec1,w,c
   210  0024EC  50E1               	movf	fsr1l,w,c
   211  0024EE  E1FC               	bnz	clear_0
   212  0024F0  50E2               	movf	fsr1h,w,c
   213  0024F2  E1FA               	bnz	clear_0
   214                           
   215                           ; Clear objects allocated to BANK0 (32 bytes)
   216  0024F4  EE00  F0A1         	lfsr	0,__pbssBANK0
   217  0024F8  0E20               	movlw	32
   218  0024FA                     clear_1:
   219  0024FA  6AEE               	clrf	postinc0,c
   220  0024FC  06E8               	decf	wreg,f,c
   221  0024FE  E1FD               	bnz	clear_1
   222                           
   223                           ; Clear objects allocated to COMRAM (14 bytes)
   224  002500  EE00  F035         	lfsr	0,__pbssCOMRAM
   225  002504  0E0E               	movlw	14
   226  002506                     clear_2:
   227  002506  6AEE               	clrf	postinc0,c
   228  002508  06E8               	decf	wreg,f,c
   229  00250A  E1FD               	bnz	clear_2
   230                           
   231                           ; Initialize objects allocated to BANK0 (3 bytes)
   232                           ; load TBLPTR registers with __pidataBANK0
   233  00250C  0E21               	movlw	low __pidataBANK0
   234  00250E  6EF6               	movwf	tblptrl,c
   235  002510  0E2E               	movlw	high __pidataBANK0
   236  002512  6EF7               	movwf	tblptrh,c
   237  002514  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   238  002516  6EF8               	movwf	tblptru,c
   239  002518  0009               	tblrd		*+	;fetch initializer
   240  00251A  CFF5 F0C1          	movff	tablat,__pdataBANK0
   241  00251E  0009               	tblrd		*+	;fetch initializer
   242  002520  CFF5 F0C2          	movff	tablat,__pdataBANK0+1
   243  002524  0009               	tblrd		*+	;fetch initializer
   244  002526  CFF5 F0C3          	movff	tablat,__pdataBANK0+2
   245                           
   246                           ; Initialize objects allocated to COMRAM (5 bytes)
   247                           ; load TBLPTR registers with __pidataCOMRAM
   248  00252A  0E1C               	movlw	low __pidataCOMRAM
   249  00252C  6EF6               	movwf	tblptrl,c
   250  00252E  0E2E               	movlw	high __pidataCOMRAM
   251  002530  6EF7               	movwf	tblptrh,c
   252  002532  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   253  002534  6EF8               	movwf	tblptru,c
   254  002536  EE00  F043         	lfsr	0,__pdataCOMRAM
   255  00253A  EE10 F005          	lfsr	1,5
   256  00253E                     copy_data0:
   257  00253E  0009               	tblrd		*+
   258  002540  CFF5 FFEE          	movff	tablat,postinc0
   259  002544  50E5               	movf	postdec1,w,c
   260  002546  50E1               	movf	fsr1l,w,c
   261  002548  E1FA               	bnz	copy_data0
   262  00254A                     end_of_initialization:
   263                           	opt stack 0
   264  00254A                     __end_of__initialization:
   265                           	opt stack 0
   266  00254A  0100               	movlb	0
   267  00254C  EF03  F008         	goto	_main	;jump to C main() function
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           postdec1	equ	0xFE5
   275                           fsr1h	equ	0xFE2
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	bssCOMRAM
   279  000035                     __pbssCOMRAM:
   280                           	opt stack 0
   281  000035                     _DoubleSPIS:
   282                           	opt stack 0
   283  000035                     	ds	4
   284  000039                     _DDouble:
   285                           	opt stack 0
   286  000039                     	ds	3
   287  00003C                     _SetAngle:
   288                           	opt stack 0
   289  00003C                     	ds	3
   290  00003F                     _DoublePtr:
   291                           	opt stack 0
   292  00003F                     	ds	2
   293  000041                     _Command:
   294                           	opt stack 0
   295  000041                     	ds	1
   296  000042                     _timer1Low:
   297                           	opt stack 0
   298  000042                     	ds	1
   299                           tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           postdec1	equ	0xFE5
   306                           fsr1h	equ	0xFE2
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	dataCOMRAM
   310  000043                     __pdataCOMRAM:
   311                           	opt stack 0
   312  000043                     _DeadbandHigh:
   313                           	opt stack 0
   314  000043                     	ds	2
   315  000045                     _DeadbandLow:
   316                           	opt stack 0
   317  000045                     	ds	2
   318  000047                     _timer1High:
   319                           	opt stack 0
   320  000047                     	ds	1
   321                           tblptru	equ	0xFF8
   322                           tblptrh	equ	0xFF7
   323                           tblptrl	equ	0xFF6
   324                           tablat	equ	0xFF5
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           postdec1	equ	0xFE5
   328                           fsr1h	equ	0xFE2
   329                           fsr1l	equ	0xFE1
   330                           
   331                           	psect	bssBANK0
   332  0000A1                     __pbssBANK0:
   333                           	opt stack 0
   334  0000A1                     _CurrentAngle:
   335                           	opt stack 0
   336  0000A1                     	ds	3
   337  0000A4                     _CurrentVelocity:
   338                           	opt stack 0
   339  0000A4                     	ds	3
   340  0000A7                     _Kd:
   341                           	opt stack 0
   342  0000A7                     	ds	3
   343  0000AA                     _Ki:
   344                           	opt stack 0
   345  0000AA                     	ds	3
   346  0000AD                     _Kp:
   347                           	opt stack 0
   348  0000AD                     	ds	3
   349  0000B0                     _error:
   350                           	opt stack 0
   351  0000B0                     	ds	3
   352  0000B3                     _intErr:
   353                           	opt stack 0
   354  0000B3                     	ds	3
   355  0000B6                     _prevErr:
   356                           	opt stack 0
   357  0000B6                     	ds	3
   358  0000B9                     _motorInput:
   359                           	opt stack 0
   360  0000B9                     	ds	2
   361  0000BB                     _JSEnableFlag:
   362                           	opt stack 0
   363  0000BB                     	ds	1
   364  0000BC                     _PIDEnableFlag:
   365                           	opt stack 0
   366  0000BC                     	ds	1
   367  0000BD                     _RECFlag:
   368                           	opt stack 0
   369  0000BD                     	ds	1
   370  0000BE                     _SPIflag:
   371                           	opt stack 0
   372  0000BE                     	ds	1
   373  0000BF                     _TMR0Flag:
   374                           	opt stack 0
   375  0000BF                     	ds	1
   376  0000C0                     _dummy_byte:
   377                           	opt stack 0
   378  0000C0                     	ds	1
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           postdec1	equ	0xFE5
   386                           fsr1h	equ	0xFE2
   387                           fsr1l	equ	0xFE1
   388                           
   389                           	psect	dataBANK0
   390  0000C1                     __pdataBANK0:
   391                           	opt stack 0
   392  0000C1                     _loopTime:
   393                           	opt stack 0
   394  0000C1                     	ds	3
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1h	equ	0xFE2
   403                           fsr1l	equ	0xFE1
   404                           
   405                           	psect	bssBIGRAM
   406  0000C4                     __pbssBIGRAM:
   407                           	opt stack 0
   408  0000C4                     _DataLode:
   409                           	opt stack 0
   410  0000C4                     	ds	1800
   411  0007CC                     _TransmitLode:
   412                           	opt stack 0
   413  0007CC                     	ds	1800
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1h	equ	0xFE2
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	cstackBANK0
   425  000060                     __pcstackBANK0:
   426                           	opt stack 0
   427  000060                     ??___ftmul:
   428                           
   429                           ; 0 bytes @ 0x0
   430  000060                     	ds	3
   431  000063                     ___ftmul@exp:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x3
   435  000063                     	ds	1
   436  000064                     ___ftmul@f3_as_product:
   437                           	opt stack 0
   438                           
   439                           ; 3 bytes @ 0x4
   440  000064                     	ds	3
   441  000067                     ___ftmul@cntr:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x7
   445  000067                     	ds	1
   446  000068                     ___ftmul@sign:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x8
   450  000068                     	ds	1
   451  000069                     ?___ftadd:
   452                           	opt stack 0
   453  000069                     ?_RTD2Angle:
   454                           	opt stack 0
   455  000069                     RTD2Angle@RTDAngle:
   456                           	opt stack 0
   457  000069                     ___ftadd@f1:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x9
   461  000069                     	ds	3
   462  00006C                     ___ftadd@f2:
   463                           	opt stack 0
   464                           
   465                           ; 3 bytes @ 0xC
   466  00006C                     	ds	3
   467  00006F                     ??___ftadd:
   468                           
   469                           ; 0 bytes @ 0xF
   470  00006F                     	ds	3
   471  000072                     ___ftadd@sign:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x12
   475  000072                     	ds	1
   476  000073                     ___ftadd@exp2:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x13
   480  000073                     	ds	1
   481  000074                     ___ftadd@exp1:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x14
   485  000074                     	ds	1
   486  000075                     ?___ftsub:
   487                           	opt stack 0
   488  000075                     ?___fttol:
   489                           	opt stack 0
   490  000075                     ___ftsub@f1:
   491                           	opt stack 0
   492  000075                     ___fttol@f1:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x15
   496  000075                     	ds	3
   497  000078                     ___ftsub@f2:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x18
   501  000078                     	ds	1
   502  000079                     ??___fttol:
   503                           
   504                           ; 0 bytes @ 0x19
   505  000079                     	ds	5
   506  00007E                     ___fttol@sign1:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x1E
   510  00007E                     	ds	1
   511  00007F                     ___fttol@lval:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0x1F
   515  00007F                     	ds	4
   516  000083                     ___fttol@exp1:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x23
   520  000083                     	ds	1
   521  000084                     ?_abs:
   522                           	opt stack 0
   523  000084                     abs@a:
   524                           	opt stack 0
   525  000084                     calculatePID@angle:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x24
   529  000084                     	ds	2
   530  000086                     ??_abs:
   531                           
   532                           ; 0 bytes @ 0x26
   533  000086                     	ds	1
   534  000087                     calculatePID@setpoint:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x27
   538  000087                     	ds	1
   539  000088                     ImplementPIDMotion@PIDValue:
   540                           	opt stack 0
   541  000088                     ImplementJSMotion@JoystickValue:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x28
   545  000088                     	ds	2
   546  00008A                     ??_ImplementPIDMotion:
   547  00008A                     ??_ImplementJSMotion:
   548  00008A                     calculatePID@derErr:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x2A
   552  00008A                     	ds	2
   553  00008C                     ImplementJSMotion@CCPinput:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x2C
   557  00008C                     	ds	1
   558  00008D                     _calculatePID$3452:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x2D
   562  00008D                     	ds	3
   563  000090                     _calculatePID$3453:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x30
   567  000090                     	ds	3
   568  000093                     main@saveKp:
   569                           	opt stack 0
   570                           
   571                           ; 3 bytes @ 0x33
   572  000093                     	ds	3
   573  000096                     main@saveKi:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x36
   577  000096                     	ds	3
   578  000099                     main@saveKd:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x39
   582  000099                     	ds	3
   583  00009C                     main@trash:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x3C
   587  00009C                     	ds	1
   588  00009D                     main@dtime:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x3D
   592  00009D                     	ds	1
   593  00009E                     main@counter:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x3E
   597  00009E                     	ds	2
   598  0000A0                     main@x:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x40
   602  0000A0                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           postdec1	equ	0xFE5
   610                           fsr1h	equ	0xFE2
   611                           fsr1l	equ	0xFE1
   612                           
   613                           	psect	cstackCOMRAM
   614  000001                     __pcstackCOMRAM:
   615                           	opt stack 0
   616  000001                     i2Write_b_eep@badd:
   617                           	opt stack 0
   618  000001                     i2EEDisassembleDouble@dub:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x0
   622  000001                     	ds	2
   623  000003                     i2Write_b_eep@bdat:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x2
   627  000003                     	ds	1
   628  000004                     i2Write_b_eep@GIE_BIT_VAL:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x3
   632  000004                     	ds	1
   633  000005                     i2EEWriteChar@ch:
   634                           	opt stack 0
   635  000005                     i2EEWriteDouble@dub:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x4
   639  000005                     	ds	1
   640  000006                     i2EEWriteChar@location:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x5
   644  000006                     	ds	2
   645  000008                     i2EEWriteDouble@location:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x7
   649  000008                     	ds	1
   650  000009                     i2EEWriteDouble@x:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x8
   654  000009                     	ds	1
   655  00000A                     ??_ISR:
   656  00000A                     
   657                           ; 0 bytes @ 0x9
   658  00000A                     	ds	14
   659  000018                     ?_DetectMovement:
   660                           	opt stack 0
   661  000018                     ?___lwdiv:
   662                           	opt stack 0
   663  000018                     ?___ftpack:
   664                           	opt stack 0
   665  000018                     ?_SPIReassembleDouble:
   666                           	opt stack 0
   667  000018                     ?_EEReassembleDouble:
   668                           	opt stack 0
   669  000018                     ?___ftneg:
   670                           	opt stack 0
   671  000018                     SendSPI1@temp:
   672                           	opt stack 0
   673  000018                     GenerateChecksum@sum:
   674                           	opt stack 0
   675  000018                     OpenSPI1@bus_mode:
   676                           	opt stack 0
   677  000018                     Delay10TCYx@unit:
   678                           	opt stack 0
   679  000018                     Delay1KTCYx@unit:
   680                           	opt stack 0
   681  000018                     Delay1TCYx@unit:
   682                           	opt stack 0
   683  000018                     Read_b_eep@badd:
   684                           	opt stack 0
   685  000018                     Write_b_eep@badd:
   686                           	opt stack 0
   687  000018                     ___lwdiv@dividend:
   688                           	opt stack 0
   689  000018                     EEDisassembleDouble@dub:
   690                           	opt stack 0
   691  000018                     ___ftpack@arg:
   692                           	opt stack 0
   693  000018                     ___ftge@ff1:
   694                           	opt stack 0
   695  000018                     ___ftneg@f1:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x17
   699  000018                     	ds	1
   700  000019                     ?_ReadRTDpos:
   701                           	opt stack 0
   702  000019                     SendSPI1@data:
   703                           	opt stack 0
   704  000019                     GenerateChecksum@y:
   705                           	opt stack 0
   706  000019                     OpenSPI1@smp_phase:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x18
   710  000019                     	ds	1
   711  00001A                     ??_DetectMovement:
   712  00001A                     EEReadChar@location:
   713                           	opt stack 0
   714  00001A                     Write_b_eep@bdat:
   715                           	opt stack 0
   716  00001A                     OpenSPI1@sync_mode:
   717                           	opt stack 0
   718  00001A                     ___lwdiv@divisor:
   719                           	opt stack 0
   720  00001A                     SPIDisassembleDouble@dub:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x19
   724  00001A                     	ds	1
   725  00001B                     ??_ReadRTDpos:
   726  00001B                     EEReadChar@ch:
   727                           	opt stack 0
   728  00001B                     Write_b_eep@GIE_BIT_VAL:
   729                           	opt stack 0
   730  00001B                     ___ftpack@exp:
   731                           	opt stack 0
   732  00001B                     DetectMovement@JoystickResult:
   733                           	opt stack 0
   734  00001B                     SPIReassembleDouble@dub:
   735                           	opt stack 0
   736  00001B                     EEReassembleDouble@dub:
   737                           	opt stack 0
   738  00001B                     ___ftge@ff2:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x1A
   742  00001B                     	ds	1
   743  00001C                     EEWriteChar@ch:
   744                           	opt stack 0
   745  00001C                     ___ftpack@sign:
   746                           	opt stack 0
   747  00001C                     ___lwdiv@quotient:
   748                           	opt stack 0
   749  00001C                     EEWriteDouble@dub:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x1B
   753  00001C                     	ds	1
   754  00001D                     ??___ftpack:
   755  00001D                     EEWriteChar@location:
   756                           	opt stack 0
   757  00001D                     DetectMovement@ADCresult:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x1C
   761  00001D                     	ds	1
   762  00001E                     ??___ftge:
   763  00001E                     ?_EEReadDouble:
   764                           	opt stack 0
   765  00001E                     ReadRTDpos@HighPosition:
   766                           	opt stack 0
   767  00001E                     ___lwdiv@counter:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x1D
   771  00001E                     	ds	1
   772  00001F                     ?___wmul:
   773                           	opt stack 0
   774  00001F                     ReadRTDpos@LowPosition:
   775                           	opt stack 0
   776  00001F                     EEWriteDouble@location:
   777                           	opt stack 0
   778  00001F                     ___wmul@multiplier:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x1E
   782  00001F                     	ds	1
   783  000020                     ?___ftdiv:
   784                           	opt stack 0
   785  000020                     ?___lwtoft:
   786                           	opt stack 0
   787  000020                     EEWriteDouble@x:
   788                           	opt stack 0
   789  000020                     ReadRTDpos@FullPosition:
   790                           	opt stack 0
   791  000020                     ___lwtoft@c:
   792                           	opt stack 0
   793  000020                     ___ftdiv@f1:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0x1F
   797  000020                     	ds	1
   798  000021                     EEReadDouble@location:
   799                           	opt stack 0
   800  000021                     ___wmul@multiplicand:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x20
   804  000021                     	ds	1
   805  000022                     ReadRTDpos@x:
   806                           	opt stack 0
   807  000022                     EEReadDouble@x:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x21
   811  000022                     	ds	1
   812  000023                     ___wmul@product:
   813                           	opt stack 0
   814  000023                     ___ftdiv@f2:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x22
   818  000023                     	ds	2
   819  000025                     SPIDisassembleLode@Data:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x24
   823  000025                     	ds	1
   824  000026                     ??___ftdiv:
   825                           
   826                           ; 0 bytes @ 0x25
   827  000026                     	ds	1
   828  000027                     SPIDisassembleLode@Transmit:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x26
   832  000027                     	ds	2
   833  000029                     ??_SPIDisassembleLode:
   834  000029                     ___ftdiv@cntr:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x28
   838  000029                     	ds	1
   839  00002A                     ___ftdiv@f3:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x29
   843  00002A                     	ds	1
   844  00002B                     SPIDisassembleLode@y:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x2A
   848  00002B                     	ds	2
   849  00002D                     ___ftdiv@exp:
   850                           	opt stack 0
   851  00002D                     SPIDisassembleLode@dub:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x2C
   855  00002D                     	ds	1
   856  00002E                     ___ftdiv@sign:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x2D
   860  00002E                     	ds	1
   861  00002F                     ?___ftmul:
   862                           	opt stack 0
   863  00002F                     ___ftmul@f1:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x2E
   867  00002F                     	ds	3
   868  000032                     ___ftmul@f2:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x31
   872  000032                     	ds	3
   873  000035                     tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           postdec1	equ	0xFE5
   880                           fsr1h	equ	0xFE2
   881                           fsr1l	equ	0xFE1
   882                           
   883                           ; 0 bytes @ 0x34
   884 ;;
   885 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   886 ;;
   887 ;; *************** function _main *****************
   888 ;; Defined at:
   889 ;;		line 29 in file "RTDuC.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  saveKd          3   57[BANK0 ] PTR unsigned char 
   894 ;;  saveKi          3   54[BANK0 ] PTR unsigned char 
   895 ;;  saveKp          3   51[BANK0 ] PTR unsigned char 
   896 ;;  counter         2   62[BANK0 ] unsigned int 
   897 ;;  x               1   64[BANK0 ] unsigned char 
   898 ;;  dtime           1   61[BANK0 ] const unsigned char 
   899 ;;  trash           1   60[BANK0 ] unsigned char 
   900 ;; Return value:  Size  Location     Type
   901 ;;		None               void
   902 ;; Registers used:
   903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   910 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;Total ram usage:       14 bytes
   914 ;; Hardware stack levels required when called:   10
   915 ;; This function calls:
   916 ;;		_Delay10TCYx
   917 ;;		_DetectJoystick
   918 ;;		_DetectMovement
   919 ;;		_ImplementJSMotion
   920 ;;		_ImplementPIDMotion
   921 ;;		_OpenSPI1
   922 ;;		_RTD2Angle
   923 ;;		_ReadRTDpos
   924 ;;		_ReceiveSPI1
   925 ;;		_SPIDisassembleDouble
   926 ;;		_SPIDisassembleLode
   927 ;;		_SPIReassembleDouble
   928 ;;		_SaveAll
   929 ;;		_SendSPI1
   930 ;;		_ZeroMotors
   931 ;;		___wmul
   932 ;;		_calculatePID
   933 ;;		_initialize
   934 ;; This function is called by:
   935 ;;		Startup code after reset
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text0
   940  001006                     __ptext0:
   941                           	opt stack 0
   942  001006                     _main:
   943                           	opt stack 21
   944                           
   945                           ;RTDuC.c: 31: const unsigned char dtime = 10;
   946                           
   947                           ;incstack = 0
   948  001006  0E0A               	movlw	10
   949  001008  0100               	movlb	0	; () banked
   950  00100A  6F9D               	movwf	main@dtime& (0+255),b
   951                           
   952                           ;RTDuC.c: 32: unsigned char trash, x = 0;
   953  00100C  0E00               	movlw	0
   954  00100E  0100               	movlb	0	; () banked
   955  001010  6FA0               	movwf	main@x& (0+255),b
   956                           
   957                           ;RTDuC.c: 33: unsigned int counter = 0;
   958  001012  0E00               	movlw	0
   959  001014  0100               	movlb	0	; () banked
   960  001016  6F9F               	movwf	(main@counter+1)& (0+255),b
   961  001018  0E00               	movlw	0
   962  00101A  6F9E               	movwf	main@counter& (0+255),b
   963                           
   964                           ; BSR set to: 0
   965                           ;RTDuC.c: 35: initialize();
   966  00101C  ECC3  F015         	call	_initialize	;wreg free
   967                           
   968                           ;RTDuC.c: 37: SSP1BUF = dummy_byte;
   969  001020  C0C0  FFC9         	movff	_dummy_byte,4041	;volatile
   970                           
   971                           ;RTDuC.c: 38: PORTCbits.RC6 = 0;
   972  001024  9C82               	bcf	3970,6,c	;volatile
   973  001026  D000               	goto	l4133
   974  001028                     l4133:
   975                           
   976                           ;RTDuC.c: 41: {
   977                           ;RTDuC.c: 42: if (SPIflag == 1)
   978  001028  0100               	movlb	0	; () banked
   979  00102A  05BE               	decf	_SPIflag& (0+255),w,b
   980  00102C  A4D8               	btfss	status,2,c
   981  00102E  D0EB               	goto	l4231
   982                           
   983                           ; BSR set to: 0
   984                           ;RTDuC.c: 43: {
   985                           ;RTDuC.c: 44: SPIflag = 0;
   986  001030  0E00               	movlw	0
   987  001032  0100               	movlb	0	; () banked
   988  001034  6FBE               	movwf	_SPIflag& (0+255),b
   989                           
   990                           ; BSR set to: 0
   991                           ;RTDuC.c: 45: INTCONbits.GIE = 0;
   992  001036  9EF2               	bcf	intcon,7,c	;volatile
   993                           
   994                           ; BSR set to: 0
   995                           ;RTDuC.c: 46: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   996  001038  0E02               	movlw	2
   997  00103A  1841               	xorwf	_Command,w,c
   998  00103C  B4D8               	btfsc	status,2,c
   999  00103E  D010               	goto	l4149
  1000                           
  1001                           ; BSR set to: 0
  1002  001040  0E03               	movlw	3
  1003  001042  1841               	xorwf	_Command,w,c
  1004  001044  B4D8               	btfsc	status,2,c
  1005  001046  D00C               	goto	l4149
  1006                           
  1007                           ; BSR set to: 0
  1008  001048  0E04               	movlw	4
  1009  00104A  1841               	xorwf	_Command,w,c
  1010  00104C  B4D8               	btfsc	status,2,c
  1011  00104E  D008               	goto	l4149
  1012                           
  1013                           ; BSR set to: 0
  1014  001050  0E06               	movlw	6
  1015  001052  1841               	xorwf	_Command,w,c
  1016  001054  B4D8               	btfsc	status,2,c
  1017  001056  D004               	goto	l4149
  1018                           
  1019                           ; BSR set to: 0
  1020  001058  0E08               	movlw	8
  1021  00105A  1841               	xorwf	_Command,w,c
  1022  00105C  A4D8               	btfss	status,2,c
  1023  00105E  D05E               	goto	l4183
  1024  001060                     l4149:
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;RTDuC.c: 47: {
  1028                           ;RTDuC.c: 48: if (Command == 0x02)
  1029  001060  0E02               	movlw	2
  1030  001062  1841               	xorwf	_Command,w,c
  1031  001064  A4D8               	btfss	status,2,c
  1032  001066  D009               	goto	l4153
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;RTDuC.c: 49: SPIDisassembleDouble(CurrentAngle);
  1036  001068  C0A1  F01A         	movff	_CurrentAngle,SPIDisassembleDouble@dub
  1037  00106C  C0A2  F01B         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
  1038  001070  C0A3  F01C         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
  1039  001074  EC0C  F015         	call	_SPIDisassembleDouble	;wreg free
  1040  001078  D034               	goto	l4169
  1041  00107A                     l4153:
  1042                           
  1043                           ;RTDuC.c: 50: else if (Command == 0x03)
  1044  00107A  0E03               	movlw	3
  1045  00107C  1841               	xorwf	_Command,w,c
  1046  00107E  A4D8               	btfss	status,2,c
  1047  001080  D009               	goto	l4157
  1048                           
  1049                           ;RTDuC.c: 51: SPIDisassembleDouble(CurrentVelocity);
  1050  001082  C0A4  F01A         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
  1051  001086  C0A5  F01B         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
  1052  00108A  C0A6  F01C         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
  1053  00108E  EC0C  F015         	call	_SPIDisassembleDouble	;wreg free
  1054  001092  D027               	goto	l4169
  1055  001094                     l4157:
  1056                           
  1057                           ;RTDuC.c: 52: else if (Command == 0x04)
  1058  001094  0E04               	movlw	4
  1059  001096  1841               	xorwf	_Command,w,c
  1060  001098  A4D8               	btfss	status,2,c
  1061  00109A  D009               	goto	l4161
  1062                           
  1063                           ;RTDuC.c: 53: SPIDisassembleDouble(Kp);
  1064  00109C  C0AD  F01A         	movff	_Kp,SPIDisassembleDouble@dub
  1065  0010A0  C0AE  F01B         	movff	_Kp+1,SPIDisassembleDouble@dub+1
  1066  0010A4  C0AF  F01C         	movff	_Kp+2,SPIDisassembleDouble@dub+2
  1067  0010A8  EC0C  F015         	call	_SPIDisassembleDouble	;wreg free
  1068  0010AC  D01A               	goto	l4169
  1069  0010AE                     l4161:
  1070                           
  1071                           ;RTDuC.c: 54: else if (Command == 0x06)
  1072  0010AE  0E06               	movlw	6
  1073  0010B0  1841               	xorwf	_Command,w,c
  1074  0010B2  A4D8               	btfss	status,2,c
  1075  0010B4  D009               	goto	l4165
  1076                           
  1077                           ;RTDuC.c: 55: SPIDisassembleDouble(Ki);
  1078  0010B6  C0AA  F01A         	movff	_Ki,SPIDisassembleDouble@dub
  1079  0010BA  C0AB  F01B         	movff	_Ki+1,SPIDisassembleDouble@dub+1
  1080  0010BE  C0AC  F01C         	movff	_Ki+2,SPIDisassembleDouble@dub+2
  1081  0010C2  EC0C  F015         	call	_SPIDisassembleDouble	;wreg free
  1082  0010C6  D00D               	goto	l4169
  1083  0010C8                     l4165:
  1084                           
  1085                           ;RTDuC.c: 56: else if (Command == 0x08)
  1086  0010C8  0E08               	movlw	8
  1087  0010CA  1841               	xorwf	_Command,w,c
  1088  0010CC  A4D8               	btfss	status,2,c
  1089  0010CE  D009               	goto	l4169
  1090                           
  1091                           ;RTDuC.c: 57: SPIDisassembleDouble(Kd);
  1092  0010D0  C0A7  F01A         	movff	_Kd,SPIDisassembleDouble@dub
  1093  0010D4  C0A8  F01B         	movff	_Kd+1,SPIDisassembleDouble@dub+1
  1094  0010D8  C0A9  F01C         	movff	_Kd+2,SPIDisassembleDouble@dub+2
  1095  0010DC  EC0C  F015         	call	_SPIDisassembleDouble	;wreg free
  1096  0010E0  D000               	goto	l4169
  1097  0010E2                     l4169:
  1098                           
  1099                           ;RTDuC.c: 59: PORTCbits.RC6 = 0;
  1100  0010E2  9C82               	bcf	3970,6,c	;volatile
  1101                           
  1102                           ;RTDuC.c: 60: for (x = 0; x < 4; x++)
  1103  0010E4  0E00               	movlw	0
  1104  0010E6  0100               	movlb	0	; () banked
  1105  0010E8  6FA0               	movwf	main@x& (0+255),b
  1106  0010EA  D00F               	goto	l4181
  1107                           
  1108                           ; BSR set to: 0
  1109                           
  1110                           ; BSR set to: 0
  1111  0010EC  D012               	goto	l535
  1112  0010EE                     l4177:
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;RTDuC.c: 61: SendSPI1(DoubleSPIS[x]);
  1116  0010EE  0100               	movlb	0	; () banked
  1117  0010F0  51A0               	movf	main@x& (0+255),w,b
  1118  0010F2  0D01               	mullw	1
  1119  0010F4  0E35               	movlw	low _DoubleSPIS
  1120  0010F6  24F3               	addwf	prodl,w,c
  1121  0010F8  6ED9               	movwf	fsr2l,c
  1122  0010FA  0E00               	movlw	high _DoubleSPIS
  1123  0010FC  20F4               	addwfc	prodh,w,c
  1124  0010FE  6EDA               	movwf	fsr2h,c
  1125  001100  50DF               	movf	indf2,w,c
  1126  001102  EC94  F015         	call	_SendSPI1
  1127  001106  0100               	movlb	0	; () banked
  1128  001108  2BA0               	incf	main@x& (0+255),f,b
  1129  00110A                     l4181:
  1130                           
  1131                           ; BSR set to: 0
  1132  00110A  0E03               	movlw	3
  1133  00110C  0100               	movlb	0	; () banked
  1134  00110E  65A0               	cpfsgt	main@x& (0+255),b
  1135  001110  D7EE               	goto	l4177
  1136  001112                     l535:
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;RTDuC.c: 62: trash = SSP1BUF;
  1140  001112  CFC9 F09C          	movff	4041,main@trash	;volatile
  1141                           
  1142                           ;RTDuC.c: 63: PIR1bits.SSP1IF = 0;
  1143  001116  969E               	bcf	3998,3,c	;volatile
  1144                           
  1145                           ;RTDuC.c: 64: PORTCbits.RC6 = 1;
  1146  001118  8C82               	bsf	3970,6,c	;volatile
  1147                           
  1148                           ;RTDuC.c: 65: }
  1149  00111A  D06D               	goto	l536
  1150  00111C                     l4183:
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;RTDuC.c: 66: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
  1154  00111C  0441               	decf	_Command,w,c
  1155  00111E  B4D8               	btfsc	status,2,c
  1156  001120  D00C               	goto	l539
  1157                           
  1158                           ; BSR set to: 0
  1159  001122  0E05               	movlw	5
  1160  001124  1841               	xorwf	_Command,w,c
  1161  001126  B4D8               	btfsc	status,2,c
  1162  001128  D008               	goto	l539
  1163                           
  1164                           ; BSR set to: 0
  1165  00112A  0E07               	movlw	7
  1166  00112C  1841               	xorwf	_Command,w,c
  1167  00112E  B4D8               	btfsc	status,2,c
  1168  001130  D004               	goto	l539
  1169                           
  1170                           ; BSR set to: 0
  1171  001132  0E09               	movlw	9
  1172  001134  1841               	xorwf	_Command,w,c
  1173  001136  A4D8               	btfss	status,2,c
  1174  001138  D05A               	goto	l537
  1175  00113A                     l539:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;RTDuC.c: 67: {
  1179                           ;RTDuC.c: 68: PORTCbits.RC6 = 0;
  1180  00113A  9C82               	bcf	3970,6,c	;volatile
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;RTDuC.c: 69: for (x = 0; x != 4; x++)
  1184  00113C  0E00               	movlw	0
  1185  00113E  0100               	movlb	0	; () banked
  1186  001140  6FA0               	movwf	main@x& (0+255),b
  1187  001142                     l4193:
  1188                           
  1189                           ; BSR set to: 0
  1190  001142  0E04               	movlw	4
  1191  001144  0100               	movlb	0	; () banked
  1192  001146  19A0               	xorwf	main@x& (0+255),w,b
  1193  001148  B4D8               	btfsc	status,2,c
  1194  00114A  D011               	goto	l541
  1195  00114C  D001               	goto	l4197
  1196                           
  1197                           ; BSR set to: 0
  1198  00114E  D00F               	goto	l541
  1199  001150                     l4197:
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;RTDuC.c: 70: DoubleSPIS[x] = ReceiveSPI1();
  1203  001150  0100               	movlb	0	; () banked
  1204  001152  51A0               	movf	main@x& (0+255),w,b
  1205  001154  0D01               	mullw	1
  1206  001156  0E35               	movlw	low _DoubleSPIS
  1207  001158  24F3               	addwf	prodl,w,c
  1208  00115A  6ED9               	movwf	fsr2l,c
  1209  00115C  0E00               	movlw	high _DoubleSPIS
  1210  00115E  20F4               	addwfc	prodh,w,c
  1211  001160  6EDA               	movwf	fsr2h,c
  1212  001162  EC03  F016         	call	_ReceiveSPI1	;wreg free
  1213  001166  6EDF               	movwf	indf2,c
  1214  001168  0100               	movlb	0	; () banked
  1215  00116A  2BA0               	incf	main@x& (0+255),f,b
  1216  00116C  D7EA               	goto	l4193
  1217  00116E                     l541:
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;RTDuC.c: 72: PORTCbits.RC6 = 1;
  1221  00116E  8C82               	bsf	3970,6,c	;volatile
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;RTDuC.c: 74: if (Command == 0x01)
  1225  001170  0441               	decf	_Command,w,c
  1226  001172  A4D8               	btfss	status,2,c
  1227  001174  D00F               	goto	l4211
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;RTDuC.c: 75: {
  1231                           ;RTDuC.c: 76: SetAngle = SPIReassembleDouble();
  1232  001176  EC89  F014         	call	_SPIReassembleDouble	;wreg free
  1233  00117A  C018  F03C         	movff	?_SPIReassembleDouble,_SetAngle
  1234  00117E  C019  F03D         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1235  001182  C01A  F03E         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1236                           
  1237                           ;RTDuC.c: 77: PIDEnableFlag = 3;
  1238  001186  0E03               	movlw	3
  1239  001188  0100               	movlb	0	; () banked
  1240  00118A  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;RTDuC.c: 78: JSEnableFlag = 0;
  1244  00118C  0E00               	movlw	0
  1245  00118E  0100               	movlb	0	; () banked
  1246  001190  6FBB               	movwf	_JSEnableFlag& (0+255),b
  1247                           
  1248                           ;RTDuC.c: 79: }
  1249  001192  D027               	goto	l4223
  1250  001194                     l4211:
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;RTDuC.c: 80: else if (Command == 0x05)
  1254  001194  0E05               	movlw	5
  1255  001196  1841               	xorwf	_Command,w,c
  1256  001198  A4D8               	btfss	status,2,c
  1257  00119A  D009               	goto	l4215
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;RTDuC.c: 81: {
  1261                           ;RTDuC.c: 82: Kp = SPIReassembleDouble();
  1262  00119C  EC89  F014         	call	_SPIReassembleDouble	;wreg free
  1263  0011A0  C018  F0AD         	movff	?_SPIReassembleDouble,_Kp
  1264  0011A4  C019  F0AE         	movff	?_SPIReassembleDouble+1,_Kp+1
  1265  0011A8  C01A  F0AF         	movff	?_SPIReassembleDouble+2,_Kp+2
  1266                           
  1267                           ;RTDuC.c: 83: }
  1268  0011AC  D01A               	goto	l4223
  1269  0011AE                     l4215:
  1270                           
  1271                           ;RTDuC.c: 84: else if (Command == 0x07)
  1272  0011AE  0E07               	movlw	7
  1273  0011B0  1841               	xorwf	_Command,w,c
  1274  0011B2  A4D8               	btfss	status,2,c
  1275  0011B4  D009               	goto	l4219
  1276                           
  1277                           ;RTDuC.c: 85: {
  1278                           ;RTDuC.c: 86: Ki = SPIReassembleDouble();
  1279  0011B6  EC89  F014         	call	_SPIReassembleDouble	;wreg free
  1280  0011BA  C018  F0AA         	movff	?_SPIReassembleDouble,_Ki
  1281  0011BE  C019  F0AB         	movff	?_SPIReassembleDouble+1,_Ki+1
  1282  0011C2  C01A  F0AC         	movff	?_SPIReassembleDouble+2,_Ki+2
  1283                           
  1284                           ;RTDuC.c: 87: }
  1285  0011C6  D00D               	goto	l4223
  1286  0011C8                     l4219:
  1287                           
  1288                           ;RTDuC.c: 88: else if (Command == 0x09)
  1289  0011C8  0E09               	movlw	9
  1290  0011CA  1841               	xorwf	_Command,w,c
  1291  0011CC  A4D8               	btfss	status,2,c
  1292  0011CE  D009               	goto	l4223
  1293                           
  1294                           ;RTDuC.c: 89: {
  1295                           ;RTDuC.c: 90: Kd = SPIReassembleDouble();
  1296  0011D0  EC89  F014         	call	_SPIReassembleDouble	;wreg free
  1297  0011D4  C018  F0A7         	movff	?_SPIReassembleDouble,_Kd
  1298  0011D8  C019  F0A8         	movff	?_SPIReassembleDouble+1,_Kd+1
  1299  0011DC  C01A  F0A9         	movff	?_SPIReassembleDouble+2,_Kd+2
  1300  0011E0  D000               	goto	l4223
  1301  0011E2                     l4223:
  1302                           
  1303                           ;RTDuC.c: 91: }
  1304                           ;RTDuC.c: 92: trash = SSP1BUF;
  1305  0011E2  CFC9 F09C          	movff	4041,main@trash	;volatile
  1306                           
  1307                           ;RTDuC.c: 93: PIR1bits.SSP1IF = 0;
  1308  0011E6  969E               	bcf	3998,3,c	;volatile
  1309                           
  1310                           ;RTDuC.c: 94: SaveAll();
  1311  0011E8  ECC9  F010         	call	_SaveAll	;wreg free
  1312                           
  1313                           ;RTDuC.c: 95: }
  1314  0011EC  D004               	goto	l536
  1315  0011EE                     l537:
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;RTDuC.c: 96: else
  1319                           ;RTDuC.c: 97: {
  1320                           ;RTDuC.c: 98: trash = SSP1BUF;
  1321  0011EE  CFC9 F09C          	movff	4041,main@trash	;volatile
  1322                           
  1323                           ;RTDuC.c: 99: PIR1bits.SSP1IF = 0;
  1324  0011F2  969E               	bcf	3998,3,c	;volatile
  1325  0011F4  D000               	goto	l536
  1326  0011F6                     l536:
  1327                           
  1328                           ;RTDuC.c: 100: }
  1329                           ;RTDuC.c: 102: INTCONbits.GIE = 1;
  1330  0011F6  8EF2               	bsf	intcon,7,c	;volatile
  1331                           
  1332                           ;RTDuC.c: 103: PIE1bits.SSP1IE = 1;
  1333  0011F8  869D               	bsf	3997,3,c	;volatile
  1334                           
  1335                           ;RTDuC.c: 104: PORTCbits.RC6 = 0;
  1336  0011FA  9C82               	bcf	3970,6,c	;volatile
  1337                           
  1338                           ;RTDuC.c: 105: Delay10TCYx(dtime);
  1339  0011FC  0100               	movlb	0	; () banked
  1340  0011FE  519D               	movf	main@dtime& (0+255),w,b
  1341  001200  ECE3  F016         	call	_Delay10TCYx
  1342  001204  D000               	goto	l4231
  1343  001206                     l4231:
  1344                           
  1345                           ;RTDuC.c: 106: }
  1346                           ;RTDuC.c: 107: PORTCbits.RC6 = 1;
  1347  001206  8C82               	bsf	3970,6,c	;volatile
  1348                           
  1349                           ;RTDuC.c: 108: DetectJoystick();
  1350  001208  EC84  F016         	call	_DetectJoystick	;wreg free
  1351                           
  1352                           ;RTDuC.c: 109: PORTCbits.RC6 = 0;
  1353  00120C  9C82               	bcf	3970,6,c	;volatile
  1354                           
  1355                           ;RTDuC.c: 110: Delay10TCYx(10);
  1356  00120E  0E0A               	movlw	10
  1357  001210  ECE3  F016         	call	_Delay10TCYx
  1358                           
  1359                           ;RTDuC.c: 111: if (JSEnableFlag == 1)
  1360  001214  0100               	movlb	0	; () banked
  1361  001216  05BB               	decf	_JSEnableFlag& (0+255),w,b
  1362  001218  A4D8               	btfss	status,2,c
  1363  00121A  D011               	goto	l4249
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;RTDuC.c: 112: {
  1367                           ;RTDuC.c: 113: PORTCbits.RC6 = 1;
  1368  00121C  8C82               	bsf	3970,6,c	;volatile
  1369                           
  1370                           ;RTDuC.c: 114: INTCONbits.GIE = 0;
  1371  00121E  9EF2               	bcf	intcon,7,c	;volatile
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;RTDuC.c: 115: ImplementJSMotion(DetectMovement());
  1375  001220  ECE0  F012         	call	_DetectMovement	;wreg free
  1376  001224  C018  F088         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1377  001228  C019  F089         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1378  00122C  EC26  F00D         	call	_ImplementJSMotion	;wreg free
  1379                           
  1380                           ;RTDuC.c: 116: INTCONbits.GIE = 1;
  1381  001230  8EF2               	bsf	intcon,7,c	;volatile
  1382                           
  1383                           ;RTDuC.c: 117: PORTCbits.RC6 = 0;
  1384  001232  9C82               	bcf	3970,6,c	;volatile
  1385                           
  1386                           ;RTDuC.c: 118: Delay10TCYx(dtime);
  1387  001234  0100               	movlb	0	; () banked
  1388  001236  519D               	movf	main@dtime& (0+255),w,b
  1389  001238  ECE3  F016         	call	_Delay10TCYx
  1390  00123C  D000               	goto	l4249
  1391  00123E                     l4249:
  1392                           
  1393                           ;RTDuC.c: 119: }
  1394                           ;RTDuC.c: 121: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1395  00123E  0100               	movlb	0	; () banked
  1396  001240  05BC               	decf	_PIDEnableFlag& (0+255),w,b
  1397  001242  A4D8               	btfss	status,2,c
  1398  001244  D032               	goto	l4265
  1399                           
  1400                           ; BSR set to: 0
  1401  001246  0100               	movlb	0	; () banked
  1402  001248  05BF               	decf	_TMR0Flag& (0+255),w,b
  1403  00124A  A4D8               	btfss	status,2,c
  1404  00124C  D02E               	goto	l4265
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;RTDuC.c: 122: {
  1408                           ;RTDuC.c: 123: PORTCbits.RC6 = 1;
  1409  00124E  8C82               	bsf	3970,6,c	;volatile
  1410                           
  1411                           ;RTDuC.c: 124: INTCONbits.GIE = 0;
  1412  001250  9EF2               	bcf	intcon,7,c	;volatile
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;RTDuC.c: 125: CurrentAngle = RTD2Angle(ReadRTDpos());
  1416  001252  EC17  F013         	call	_ReadRTDpos	;wreg free
  1417  001256  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1418  00125A  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1419  00125E  EC2A  F015         	call	_RTD2Angle	;wreg free
  1420  001262  C069  F0A1         	movff	?_RTD2Angle,_CurrentAngle
  1421  001266  C06A  F0A2         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1422  00126A  C06B  F0A3         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1423                           
  1424                           ;RTDuC.c: 126: calculatePID(CurrentAngle, SetAngle);
  1425  00126E  C0A1  F084         	movff	_CurrentAngle,calculatePID@angle
  1426  001272  C0A2  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1427  001276  C0A3  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1428  00127A  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1429  00127E  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1430  001282  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1431  001286  EC8C  F00A         	call	_calculatePID	;wreg free
  1432                           
  1433                           ;RTDuC.c: 127: ImplementPIDMotion(motorInput);
  1434  00128A  C0B9  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1435  00128E  C0BA  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1436  001292  EC81  F011         	call	_ImplementPIDMotion	;wreg free
  1437                           
  1438                           ;RTDuC.c: 128: TMR0Flag = 0;
  1439  001296  0E00               	movlw	0
  1440  001298  0100               	movlb	0	; () banked
  1441  00129A  6FBF               	movwf	_TMR0Flag& (0+255),b
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;RTDuC.c: 129: INTCONbits.GIE = 1;
  1445  00129C  8EF2               	bsf	intcon,7,c	;volatile
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;RTDuC.c: 130: PORTCbits.RC6 = 0;
  1449  00129E  9C82               	bcf	3970,6,c	;volatile
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;RTDuC.c: 131: Delay10TCYx(dtime);
  1453  0012A0  0100               	movlb	0	; () banked
  1454  0012A2  519D               	movf	main@dtime& (0+255),w,b
  1455  0012A4  ECE3  F016         	call	_Delay10TCYx
  1456                           
  1457                           ;RTDuC.c: 132: }
  1458  0012A8  D053               	goto	l552
  1459  0012AA                     l4265:
  1460                           
  1461                           ;RTDuC.c: 134: else if (PIDEnableFlag == 3)
  1462  0012AA  0E03               	movlw	3
  1463  0012AC  0100               	movlb	0	; () banked
  1464  0012AE  19BC               	xorwf	_PIDEnableFlag& (0+255),w,b
  1465  0012B0  A4D8               	btfss	status,2,c
  1466  0012B2  D030               	goto	l4285
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;RTDuC.c: 135: {
  1470                           ;RTDuC.c: 136: PORTCbits.RC6 = 1;
  1471  0012B4  8C82               	bsf	3970,6,c	;volatile
  1472                           
  1473                           ;RTDuC.c: 137: INTCONbits.GIE = 0;
  1474  0012B6  9EF2               	bcf	intcon,7,c	;volatile
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;RTDuC.c: 138: TMR0H = 0xDB;
  1478  0012B8  0EDB               	movlw	219
  1479  0012BA  6ED7               	movwf	4055,c	;volatile
  1480                           
  1481                           ;RTDuC.c: 139: TMR0L = 0x60;
  1482  0012BC  0E60               	movlw	96
  1483  0012BE  6ED6               	movwf	4054,c	;volatile
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;RTDuC.c: 140: CurrentAngle = RTD2Angle(ReadRTDpos());
  1487  0012C0  EC17  F013         	call	_ReadRTDpos	;wreg free
  1488  0012C4  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1489  0012C8  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1490  0012CC  EC2A  F015         	call	_RTD2Angle	;wreg free
  1491  0012D0  C069  F0A1         	movff	?_RTD2Angle,_CurrentAngle
  1492  0012D4  C06A  F0A2         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1493  0012D8  C06B  F0A3         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1494                           
  1495                           ;RTDuC.c: 141: calculatePID(CurrentAngle, SetAngle);
  1496  0012DC  C0A1  F084         	movff	_CurrentAngle,calculatePID@angle
  1497  0012E0  C0A2  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1498  0012E4  C0A3  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1499  0012E8  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1500  0012EC  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1501  0012F0  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1502  0012F4  EC8C  F00A         	call	_calculatePID	;wreg free
  1503                           
  1504                           ;RTDuC.c: 142: ImplementPIDMotion(motorInput);
  1505  0012F8  C0B9  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1506  0012FC  C0BA  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1507  001300  EC81  F011         	call	_ImplementPIDMotion	;wreg free
  1508                           
  1509                           ;RTDuC.c: 143: INTCONbits.GIE = 1;
  1510  001304  8EF2               	bsf	intcon,7,c	;volatile
  1511                           
  1512                           ;RTDuC.c: 145: T0CONbits.TMR0ON = 1;
  1513  001306  8ED5               	bsf	4053,7,c	;volatile
  1514                           
  1515                           ;RTDuC.c: 146: PORTCbits.RC6 = 0;
  1516  001308  9C82               	bcf	3970,6,c	;volatile
  1517                           
  1518                           ;RTDuC.c: 147: Delay10TCYx(dtime);
  1519  00130A  0100               	movlb	0	; () banked
  1520  00130C  519D               	movf	main@dtime& (0+255),w,b
  1521  00130E  ECE3  F016         	call	_Delay10TCYx
  1522                           
  1523                           ;RTDuC.c: 148: }
  1524  001312  D01E               	goto	l552
  1525  001314                     l4285:
  1526                           
  1527                           ;RTDuC.c: 150: else if (TMR0Flag == 1)
  1528  001314  0100               	movlb	0	; () banked
  1529  001316  05BF               	decf	_TMR0Flag& (0+255),w,b
  1530  001318  A4D8               	btfss	status,2,c
  1531  00131A  D01A               	goto	l552
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;RTDuC.c: 151: {
  1535                           ;RTDuC.c: 152: PORTCbits.RC6 = 1;
  1536  00131C  8C82               	bsf	3970,6,c	;volatile
  1537                           
  1538                           ;RTDuC.c: 153: INTCONbits.GIE = 0;
  1539  00131E  9EF2               	bcf	intcon,7,c	;volatile
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;RTDuC.c: 154: CurrentAngle = RTD2Angle(ReadRTDpos());
  1543  001320  EC17  F013         	call	_ReadRTDpos	;wreg free
  1544  001324  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1545  001328  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1546  00132C  EC2A  F015         	call	_RTD2Angle	;wreg free
  1547  001330  C069  F0A1         	movff	?_RTD2Angle,_CurrentAngle
  1548  001334  C06A  F0A2         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1549  001338  C06B  F0A3         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1550                           
  1551                           ;RTDuC.c: 155: INTCONbits.GIE = 1;
  1552  00133C  8EF2               	bsf	intcon,7,c	;volatile
  1553                           
  1554                           ;RTDuC.c: 156: TMR0Flag = 0;
  1555  00133E  0E00               	movlw	0
  1556  001340  0100               	movlb	0	; () banked
  1557  001342  6FBF               	movwf	_TMR0Flag& (0+255),b
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;RTDuC.c: 157: PORTCbits.RC6 = 0;
  1561  001344  9C82               	bcf	3970,6,c	;volatile
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;RTDuC.c: 158: Delay10TCYx(dtime);
  1565  001346  0100               	movlb	0	; () banked
  1566  001348  519D               	movf	main@dtime& (0+255),w,b
  1567  00134A  ECE3  F016         	call	_Delay10TCYx
  1568  00134E  D000               	goto	l552
  1569  001350                     l552:
  1570                           
  1571                           ;RTDuC.c: 159: }
  1572                           ;RTDuC.c: 161: if (RECFlag == 1)
  1573  001350  0100               	movlb	0	; () banked
  1574  001352  05BD               	decf	_RECFlag& (0+255),w,b
  1575  001354  A4D8               	btfss	status,2,c
  1576  001356  D668               	goto	l4133
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;RTDuC.c: 162: {
  1580                           ;RTDuC.c: 163: PORTCbits.RC6 = 1;
  1581  001358  8C82               	bsf	3970,6,c	;volatile
  1582                           
  1583                           ;RTDuC.c: 164: double saveKp = Kp,
  1584  00135A  C0AD  F093         	movff	_Kp,main@saveKp
  1585  00135E  C0AE  F094         	movff	_Kp+1,main@saveKp+1
  1586  001362  C0AF  F095         	movff	_Kp+2,main@saveKp+2
  1587                           
  1588                           ;RTDuC.c: 165: saveKi = Ki,
  1589  001366  C0AA  F096         	movff	_Ki,main@saveKi
  1590  00136A  C0AB  F097         	movff	_Ki+1,main@saveKi+1
  1591  00136E  C0AC  F098         	movff	_Ki+2,main@saveKi+2
  1592                           
  1593                           ;RTDuC.c: 166: saveKd = Kd;
  1594  001372  C0A7  F099         	movff	_Kd,main@saveKd
  1595  001376  C0A8  F09A         	movff	_Kd+1,main@saveKd+1
  1596  00137A  C0A9  F09B         	movff	_Kd+2,main@saveKd+2
  1597                           
  1598                           ;RTDuC.c: 168: INTCONbits.GIE = 0;
  1599  00137E  9EF2               	bcf	intcon,7,c	;volatile
  1600                           
  1601                           ;RTDuC.c: 169: INTCONbits.TMR0IE = 0;
  1602  001380  9AF2               	bcf	intcon,5,c	;volatile
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;RTDuC.c: 173: ZeroMotors();
  1606  001382  ECF1  F00E         	call	_ZeroMotors	;wreg free
  1607                           
  1608                           ;RTDuC.c: 174: Kp = saveKp;
  1609  001386  C093  F0AD         	movff	main@saveKp,_Kp
  1610  00138A  C094  F0AE         	movff	main@saveKp+1,_Kp+1
  1611  00138E  C095  F0AF         	movff	main@saveKp+2,_Kp+2
  1612                           
  1613                           ;RTDuC.c: 175: Ki = saveKi;
  1614  001392  C096  F0AA         	movff	main@saveKi,_Ki
  1615  001396  C097  F0AB         	movff	main@saveKi+1,_Ki+1
  1616  00139A  C098  F0AC         	movff	main@saveKi+2,_Ki+2
  1617                           
  1618                           ;RTDuC.c: 176: Kd = saveKd;
  1619  00139E  C099  F0A7         	movff	main@saveKd,_Kd
  1620  0013A2  C09A  F0A8         	movff	main@saveKd+1,_Kd+1
  1621  0013A6  C09B  F0A9         	movff	main@saveKd+2,_Kd+2
  1622                           
  1623                           ;RTDuC.c: 178: T0CONbits.TMR0ON = 0;
  1624  0013AA  9ED5               	bcf	4053,7,c	;volatile
  1625                           
  1626                           ;RTDuC.c: 179: TMR0H = 0xDB;
  1627  0013AC  0EDB               	movlw	219
  1628  0013AE  6ED7               	movwf	4055,c	;volatile
  1629                           
  1630                           ;RTDuC.c: 180: TMR0L = 0x60;
  1631  0013B0  0E60               	movlw	96
  1632  0013B2  6ED6               	movwf	4054,c	;volatile
  1633                           
  1634                           ;RTDuC.c: 181: TMR3H = 0xE7;
  1635  0013B4  0EE7               	movlw	231
  1636  0013B6  6EB3               	movwf	4019,c	;volatile
  1637                           
  1638                           ;RTDuC.c: 182: TMR3L = 0x96;
  1639  0013B8  0E96               	movlw	150
  1640  0013BA  6EB2               	movwf	4018,c	;volatile
  1641                           
  1642                           ;RTDuC.c: 185: PIDEnableFlag = 3;
  1643  0013BC  0E03               	movlw	3
  1644  0013BE  0100               	movlb	0	; () banked
  1645  0013C0  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;RTDuC.c: 186: SetAngle = 60;
  1649  0013C2  0E00               	movlw	0
  1650  0013C4  6E3C               	movwf	_SetAngle,c
  1651  0013C6  0E70               	movlw	112
  1652  0013C8  6E3D               	movwf	_SetAngle+1,c
  1653  0013CA  0E42               	movlw	66
  1654  0013CC  6E3E               	movwf	_SetAngle+2,c
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;RTDuC.c: 187: counter = 0;
  1658  0013CE  0E00               	movlw	0
  1659  0013D0  0100               	movlb	0	; () banked
  1660  0013D2  6F9F               	movwf	(main@counter+1)& (0+255),b
  1661  0013D4  0E00               	movlw	0
  1662  0013D6  6F9E               	movwf	main@counter& (0+255),b
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;RTDuC.c: 189: T0CONbits.TMR0ON = 1;
  1666  0013D8  8ED5               	bsf	4053,7,c	;volatile
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;RTDuC.c: 190: T3CONbits.TMR3ON = 1;
  1670  0013DA  80B1               	bsf	4017,0,c	;volatile
  1671                           
  1672                           ;RTDuC.c: 192: while (counter < 600)
  1673  0013DC  D055               	goto	l4341
  1674  0013DE                     l4329:
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;RTDuC.c: 193: {
  1678                           ;RTDuC.c: 194: CurrentAngle = RTD2Angle(ReadRTDpos());
  1679  0013DE  EC17  F013         	call	_ReadRTDpos	;wreg free
  1680  0013E2  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1681  0013E6  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1682  0013EA  EC2A  F015         	call	_RTD2Angle	;wreg free
  1683  0013EE  C069  F0A1         	movff	?_RTD2Angle,_CurrentAngle
  1684  0013F2  C06A  F0A2         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1685  0013F6  C06B  F0A3         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1686                           
  1687                           ;RTDuC.c: 195: calculatePID(CurrentAngle, SetAngle);
  1688  0013FA  C0A1  F084         	movff	_CurrentAngle,calculatePID@angle
  1689  0013FE  C0A2  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  1690  001402  C0A3  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  1691  001406  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  1692  00140A  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  1693  00140E  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  1694  001412  EC8C  F00A         	call	_calculatePID	;wreg free
  1695                           
  1696                           ;RTDuC.c: 196: ImplementPIDMotion(motorInput);
  1697  001416  C0B9  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1698  00141A  C0BA  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1699  00141E  EC81  F011         	call	_ImplementPIDMotion	;wreg free
  1700                           
  1701                           ;RTDuC.c: 197: while (INTCONbits.TMR0IF == 0)
  1702  001422  D02A               	goto	l4337
  1703  001424                     l4331:
  1704                           
  1705                           ;RTDuC.c: 198: {
  1706                           ;RTDuC.c: 199: DataLode[counter] = RTD2Angle(ReadRTDpos());
  1707  001424  C09E  F01F         	movff	main@counter,___wmul@multiplier
  1708  001428  C09F  F020         	movff	main@counter+1,___wmul@multiplier+1
  1709  00142C  0E00               	movlw	0
  1710  00142E  6E22               	movwf	___wmul@multiplicand+1,c
  1711  001430  0E03               	movlw	3
  1712  001432  6E21               	movwf	___wmul@multiplicand,c
  1713  001434  ECEF  F015         	call	___wmul	;wreg free
  1714  001438  0EC4               	movlw	low _DataLode
  1715  00143A  241F               	addwf	?___wmul,w,c
  1716  00143C  6ED9               	movwf	fsr2l,c
  1717  00143E  0E00               	movlw	high _DataLode
  1718  001440  2020               	addwfc	?___wmul+1,w,c
  1719  001442  6EDA               	movwf	fsr2h,c
  1720  001444  EC17  F013         	call	_ReadRTDpos	;wreg free
  1721  001448  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1722  00144C  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1723  001450  EC2A  F015         	call	_RTD2Angle	;wreg free
  1724  001454  C069  FFDE         	movff	?_RTD2Angle,postinc2
  1725  001458  C06A  FFDE         	movff	?_RTD2Angle+1,postinc2
  1726  00145C  C06B  FFDE         	movff	?_RTD2Angle+2,postinc2
  1727                           
  1728                           ;RTDuC.c: 200: while (PIR2bits.TMR3IF == 0);
  1729  001460  D000               	goto	l561
  1730  001462                     l561:
  1731  001462  A2A1               	btfss	4001,1,c	;volatile
  1732  001464  D7FE               	goto	l561
  1733                           
  1734                           ;RTDuC.c: 201: PIR2bits.TMR3IF = 0;
  1735  001466  92A1               	bcf	4001,1,c	;volatile
  1736                           
  1737                           ;RTDuC.c: 202: TMR3H = 0xE7;
  1738  001468  0EE7               	movlw	231
  1739  00146A  6EB3               	movwf	4019,c	;volatile
  1740                           
  1741                           ;RTDuC.c: 203: TMR3L = 0x96;
  1742  00146C  0E96               	movlw	150
  1743  00146E  6EB2               	movwf	4018,c	;volatile
  1744                           
  1745                           ;RTDuC.c: 204: counter++;
  1746  001470  0100               	movlb	0	; () banked
  1747  001472  4B9E               	infsnz	main@counter& (0+255),f,b
  1748  001474  2B9F               	incf	(main@counter+1)& (0+255),f,b
  1749  001476  D000               	goto	l4337
  1750  001478                     l4337:
  1751  001478  A4F2               	btfss	intcon,2,c	;volatile
  1752  00147A  D7D4               	goto	l4331
  1753                           
  1754                           ;RTDuC.c: 205: }
  1755                           ;RTDuC.c: 206: INTCONbits.TMR0IF = 0;
  1756  00147C  94F2               	bcf	intcon,2,c	;volatile
  1757                           
  1758                           ;RTDuC.c: 207: TMR0H = 0xDB;
  1759  00147E  0EDB               	movlw	219
  1760  001480  6ED7               	movwf	4055,c	;volatile
  1761                           
  1762                           ;RTDuC.c: 208: TMR0L = 0x60;
  1763  001482  0E60               	movlw	96
  1764  001484  6ED6               	movwf	4054,c	;volatile
  1765  001486  D000               	goto	l4341
  1766  001488                     l4341:
  1767  001488  0E58               	movlw	88
  1768  00148A  0100               	movlb	0	; () banked
  1769  00148C  5D9E               	subwf	main@counter& (0+255),w,b
  1770  00148E  0E02               	movlw	2
  1771  001490  0100               	movlb	0	; () banked
  1772  001492  599F               	subwfb	(main@counter+1)& (0+255),w,b
  1773  001494  A0D8               	btfss	status,0,c
  1774  001496  D7A3               	goto	l4329
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;RTDuC.c: 209: }
  1778                           ;RTDuC.c: 210: SPIDisassembleLode(DataLode, TransmitLode);
  1779                           
  1780                           ; BSR set to: 0
  1781  001498  0EC4               	movlw	low _DataLode
  1782  00149A  6E25               	movwf	SPIDisassembleLode@Data,c
  1783  00149C  0E00               	movlw	high _DataLode
  1784  00149E  6E26               	movwf	SPIDisassembleLode@Data+1,c
  1785  0014A0  0ECC               	movlw	low _TransmitLode
  1786  0014A2  6E27               	movwf	SPIDisassembleLode@Transmit,c
  1787  0014A4  0E07               	movlw	high _TransmitLode
  1788  0014A6  6E28               	movwf	SPIDisassembleLode@Transmit+1,c
  1789  0014A8  ECF6  F00F         	call	_SPIDisassembleLode	;wreg free
  1790                           
  1791                           ;RTDuC.c: 211: (SSP1CON1 &=0xDF);
  1792  0014AC  9AC6               	bcf	4038,5,c	;volatile
  1793                           
  1794                           ;RTDuC.c: 212: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  1795  0014AE  0E00               	movlw	0
  1796  0014B0  6E18               	movwf	OpenSPI1@bus_mode,c
  1797  0014B2  0E00               	movlw	0
  1798  0014B4  6E19               	movwf	OpenSPI1@smp_phase,c
  1799  0014B6  0E04               	movlw	4
  1800  0014B8  EC73  F013         	call	_OpenSPI1
  1801                           
  1802                           ;RTDuC.c: 213: PORTCbits.RC6 = 0;
  1803  0014BC  9C82               	bcf	3970,6,c	;volatile
  1804                           
  1805                           ;RTDuC.c: 214: for (counter = 0; counter != 1800; counter++)
  1806  0014BE  0E00               	movlw	0
  1807  0014C0  0100               	movlb	0	; () banked
  1808  0014C2  6F9F               	movwf	(main@counter+1)& (0+255),b
  1809  0014C4  0E00               	movlw	0
  1810  0014C6  6F9E               	movwf	main@counter& (0+255),b
  1811  0014C8                     l4353:
  1812                           
  1813                           ; BSR set to: 0
  1814  0014C8  0E08               	movlw	8
  1815  0014CA  0100               	movlb	0	; () banked
  1816  0014CC  199E               	xorwf	main@counter& (0+255),w,b
  1817  0014CE  E107               	bnz	l4357
  1818  0014D0  0E07               	movlw	7
  1819  0014D2  0100               	movlb	0	; () banked
  1820  0014D4  199F               	xorwf	(main@counter+1)& (0+255),w,b
  1821  0014D6  B4D8               	btfsc	status,2,c
  1822  0014D8  D012               	goto	l567
  1823  0014DA  D001               	goto	l4357
  1824                           
  1825                           ; BSR set to: 0
  1826  0014DC  D010               	goto	l567
  1827  0014DE                     l4357:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;RTDuC.c: 215: SendSPI1(TransmitLode[counter]);
  1831  0014DE  0ECC               	movlw	low _TransmitLode
  1832  0014E0  0100               	movlb	0	; () banked
  1833  0014E2  259E               	addwf	main@counter& (0+255),w,b
  1834  0014E4  6ED9               	movwf	fsr2l,c
  1835  0014E6  0E07               	movlw	high _TransmitLode
  1836  0014E8  0100               	movlb	0	; () banked
  1837  0014EA  219F               	addwfc	(main@counter+1)& (0+255),w,b
  1838  0014EC  6EDA               	movwf	fsr2h,c
  1839  0014EE  50DF               	movf	indf2,w,c
  1840  0014F0  EC94  F015         	call	_SendSPI1
  1841  0014F4  0100               	movlb	0	; () banked
  1842  0014F6  4B9E               	infsnz	main@counter& (0+255),f,b
  1843  0014F8  2B9F               	incf	(main@counter+1)& (0+255),f,b
  1844  0014FA  D7E6               	goto	l4353
  1845                           
  1846                           ; BSR set to: 0
  1847  0014FC  D7F0               	goto	l4357
  1848  0014FE                     l567:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;RTDuC.c: 216: trash = SSP1BUF;
  1852  0014FE  CFC9 F09C          	movff	4041,main@trash	;volatile
  1853                           
  1854                           ;RTDuC.c: 217: PIR1bits.SSP1IF = 0;
  1855  001502  969E               	bcf	3998,3,c	;volatile
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;RTDuC.c: 218: RECFlag = 0;
  1859  001504  0E00               	movlw	0
  1860  001506  0100               	movlb	0	; () banked
  1861  001508  6FBD               	movwf	_RECFlag& (0+255),b
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;RTDuC.c: 219: INTCONbits.GIE = 1;
  1865  00150A  8EF2               	bsf	intcon,7,c	;volatile
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;RTDuC.c: 220: INTCONbits.PEIE = 1;
  1869  00150C  8CF2               	bsf	intcon,6,c	;volatile
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;RTDuC.c: 221: INTCONbits.TMR0IE = 1;
  1873  00150E  8AF2               	bsf	intcon,5,c	;volatile
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;RTDuC.c: 222: PORTCbits.RC6 = 1;
  1877  001510  8C82               	bsf	3970,6,c	;volatile
  1878                           
  1879                           ; BSR set to: 0
  1880                           
  1881                           ; BSR set to: 0
  1882  001512  D58A               	goto	l4133
  1883                           
  1884                           ; BSR set to: 0
  1885                           
  1886                           ; BSR set to: 0
  1887  001514  EF0C  F000         	goto	start
  1888  001518                     __end_of_main:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1h	equ	0xFE2
  1901                           fsr1l	equ	0xFE1
  1902                           indf2	equ	0xFDF
  1903                           postinc2	equ	0xFDE
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _initialize *****************
  1909 ;; Defined at:
  1910 ;;		line 227 in file "RTDuC.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;		None               void
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    9
  1931 ;; This function calls:
  1932 ;;		_EEPROMInit
  1933 ;;		_InitializeInterrupts
  1934 ;;		_JoystickInit
  1935 ;;		_MotorDriverInit
  1936 ;;		_PIDInit
  1937 ;;		_RTDInit
  1938 ;;		_SPIInit
  1939 ;;		_ZeroMotors
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text1
  1946  002B86                     __ptext1:
  1947                           	opt stack 0
  1948  002B86                     _initialize:
  1949                           	opt stack 21
  1950                           
  1951                           ;RTDuC.c: 229: while (OSCCONbits.OSTS == 0);
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;incstack = 0
  1955  002B86  D000               	goto	l573
  1956  002B88                     l573:
  1957  002B88  A6D3               	btfss	4051,3,c	;volatile
  1958  002B8A  D7FE               	goto	l573
  1959                           
  1960                           ;RTDuC.c: 230: PORTCbits.RC6 = 1;
  1961  002B8C  8C82               	bsf	3970,6,c	;volatile
  1962                           
  1963                           ;RTDuC.c: 232: RTDInit();
  1964  002B8E  EC7C  F015         	call	_RTDInit	;wreg free
  1965                           
  1966                           ;RTDuC.c: 233: SPIInit();
  1967  002B92  ECB6  F016         	call	_SPIInit	;wreg free
  1968                           
  1969                           ;RTDuC.c: 234: JoystickInit();
  1970  002B96  ECAC  F015         	call	_JoystickInit	;wreg free
  1971                           
  1972                           ;RTDuC.c: 235: MotorDriverInit();
  1973  002B9A  EC4F  F016         	call	_MotorDriverInit	;wreg free
  1974                           
  1975                           ;RTDuC.c: 236: PIDInit();
  1976  002B9E  EC45  F014         	call	_PIDInit	;wreg free
  1977                           
  1978                           ;RTDuC.c: 237: ZeroMotors();
  1979  002BA2  ECF1  F00E         	call	_ZeroMotors	;wreg free
  1980                           
  1981                           ;RTDuC.c: 238: EEPROMInit();
  1982  002BA6  ECD0  F016         	call	_EEPROMInit	;wreg free
  1983                           
  1984                           ;RTDuC.c: 240: InitializeInterrupts();
  1985  002BAA  ECFB  F016         	call	_InitializeInterrupts	;wreg free
  1986                           
  1987                           ;RTDuC.c: 242: PORTAbits.RA3 = 1;
  1988  002BAE  8680               	bsf	3968,3,c	;volatile
  1989  002BB0  0012               	return		;funcret
  1990  002BB2                     __end_of_initialize:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           postdec1	equ	0xFE5
  2002                           fsr1h	equ	0xFE2
  2003                           fsr1l	equ	0xFE1
  2004                           indf2	equ	0xFDF
  2005                           postinc2	equ	0xFDE
  2006                           fsr2h	equ	0xFDA
  2007                           fsr2l	equ	0xFD9
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _ZeroMotors *****************
  2011 ;; Defined at:
  2012 ;;		line 323 in file "RTDuC.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;Total ram usage:        0 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    8
  2033 ;; This function calls:
  2034 ;;		_ImplementPIDMotion
  2035 ;;		_RTD2Angle
  2036 ;;		_ReadRTDpos
  2037 ;;		___fttol
  2038 ;;		_abs
  2039 ;;		_calculatePID
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;;		_initialize
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text2
  2047  001DE2                     __ptext2:
  2048                           	opt stack 0
  2049  001DE2                     _ZeroMotors:
  2050                           	opt stack 21
  2051                           
  2052                           ;RTDuC.c: 325: CurrentAngle = 2;
  2053                           
  2054                           ;incstack = 0
  2055  001DE2  0E00               	movlw	0
  2056  001DE4  0100               	movlb	0	; () banked
  2057  001DE6  6FA1               	movwf	_CurrentAngle& (0+255),b
  2058  001DE8  0E00               	movlw	0
  2059  001DEA  0100               	movlb	0	; () banked
  2060  001DEC  6FA2               	movwf	(_CurrentAngle+1)& (0+255),b
  2061  001DEE  0E40               	movlw	64
  2062  001DF0  0100               	movlb	0	; () banked
  2063  001DF2  6FA3               	movwf	(_CurrentAngle+2)& (0+255),b
  2064                           
  2065                           ;RTDuC.c: 326: Ki = 1;
  2066  001DF4  0E00               	movlw	0
  2067  001DF6  0100               	movlb	0	; () banked
  2068  001DF8  6FAA               	movwf	_Ki& (0+255),b
  2069  001DFA  0E80               	movlw	128
  2070  001DFC  0100               	movlb	0	; () banked
  2071  001DFE  6FAB               	movwf	(_Ki+1)& (0+255),b
  2072  001E00  0E3F               	movlw	63
  2073  001E02  0100               	movlb	0	; () banked
  2074  001E04  6FAC               	movwf	(_Ki+2)& (0+255),b
  2075                           
  2076                           ;RTDuC.c: 327: Kp = 2;
  2077  001E06  0E00               	movlw	0
  2078  001E08  0100               	movlb	0	; () banked
  2079  001E0A  6FAD               	movwf	_Kp& (0+255),b
  2080  001E0C  0E00               	movlw	0
  2081  001E0E  0100               	movlb	0	; () banked
  2082  001E10  6FAE               	movwf	(_Kp+1)& (0+255),b
  2083  001E12  0E40               	movlw	64
  2084  001E14  0100               	movlb	0	; () banked
  2085  001E16  6FAF               	movwf	(_Kp+2)& (0+255),b
  2086                           
  2087                           ;RTDuC.c: 328: Kd = 0;
  2088  001E18  0E00               	movlw	0
  2089  001E1A  0100               	movlb	0	; () banked
  2090  001E1C  6FA7               	movwf	_Kd& (0+255),b
  2091  001E1E  0E00               	movlw	0
  2092  001E20  0100               	movlb	0	; () banked
  2093  001E22  6FA8               	movwf	(_Kd+1)& (0+255),b
  2094  001E24  0E00               	movlw	0
  2095  001E26  0100               	movlb	0	; () banked
  2096  001E28  6FA9               	movwf	(_Kd+2)& (0+255),b
  2097                           
  2098                           ;RTDuC.c: 329: TMR0H = 0xDB;
  2099  001E2A  0EDB               	movlw	219
  2100  001E2C  6ED7               	movwf	4055,c	;volatile
  2101                           
  2102                           ;RTDuC.c: 330: TMR0L = 0x60;
  2103  001E2E  0E60               	movlw	96
  2104  001E30  6ED6               	movwf	4054,c	;volatile
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;RTDuC.c: 331: T0CONbits.TMR0ON = 1;
  2108  001E32  8ED5               	bsf	4053,7,c	;volatile
  2109                           
  2110                           ;RTDuC.c: 332: PIDEnableFlag = 3;
  2111  001E34  0E03               	movlw	3
  2112  001E36  0100               	movlb	0	; () banked
  2113  001E38  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  2114                           
  2115                           ;RTDuC.c: 333: SetAngle = 0;
  2116  001E3A  0E00               	movlw	0
  2117  001E3C  6E3C               	movwf	_SetAngle,c
  2118  001E3E  0E00               	movlw	0
  2119  001E40  6E3D               	movwf	_SetAngle+1,c
  2120  001E42  0E00               	movlw	0
  2121  001E44  6E3E               	movwf	_SetAngle+2,c
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;RTDuC.c: 334: INTCONbits.GIE = 0;
  2125  001E46  9EF2               	bcf	intcon,7,c	;volatile
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;RTDuC.c: 335: INTCONbits.PEIE = 0;
  2129  001E48  9CF2               	bcf	intcon,6,c	;volatile
  2130  001E4A  D000               	goto	l4057
  2131  001E4C                     l4057:
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;RTDuC.c: 337: {
  2135                           ;RTDuC.c: 338: CurrentAngle = RTD2Angle(ReadRTDpos());
  2136  001E4C  EC17  F013         	call	_ReadRTDpos	;wreg free
  2137  001E50  C019  F069         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  2138  001E54  C01A  F06A         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  2139  001E58  EC2A  F015         	call	_RTD2Angle	;wreg free
  2140  001E5C  C069  F0A1         	movff	?_RTD2Angle,_CurrentAngle
  2141  001E60  C06A  F0A2         	movff	?_RTD2Angle+1,_CurrentAngle+1
  2142  001E64  C06B  F0A3         	movff	?_RTD2Angle+2,_CurrentAngle+2
  2143                           
  2144                           ;RTDuC.c: 339: calculatePID(CurrentAngle, SetAngle);
  2145  001E68  C0A1  F084         	movff	_CurrentAngle,calculatePID@angle
  2146  001E6C  C0A2  F085         	movff	_CurrentAngle+1,calculatePID@angle+1
  2147  001E70  C0A3  F086         	movff	_CurrentAngle+2,calculatePID@angle+2
  2148  001E74  C03C  F087         	movff	_SetAngle,calculatePID@setpoint
  2149  001E78  C03D  F088         	movff	_SetAngle+1,calculatePID@setpoint+1
  2150  001E7C  C03E  F089         	movff	_SetAngle+2,calculatePID@setpoint+2
  2151  001E80  EC8C  F00A         	call	_calculatePID	;wreg free
  2152                           
  2153                           ;RTDuC.c: 340: ImplementPIDMotion(motorInput);
  2154  001E84  C0B9  F088         	movff	_motorInput,ImplementPIDMotion@PIDValue
  2155  001E88  C0BA  F089         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  2156  001E8C  EC81  F011         	call	_ImplementPIDMotion	;wreg free
  2157                           
  2158                           ;RTDuC.c: 341: while (INTCONbits.TMR0IF == 0);
  2159  001E90  D000               	goto	l603
  2160  001E92                     l603:
  2161  001E92  A4F2               	btfss	intcon,2,c	;volatile
  2162  001E94  D7FE               	goto	l603
  2163                           
  2164                           ;RTDuC.c: 342: INTCONbits.TMR0IF = 0;
  2165  001E96  94F2               	bcf	intcon,2,c	;volatile
  2166                           
  2167                           ;RTDuC.c: 343: TMR0H = 0xDB;
  2168  001E98  0EDB               	movlw	219
  2169  001E9A  6ED7               	movwf	4055,c	;volatile
  2170                           
  2171                           ;RTDuC.c: 344: TMR0L = 0x60;
  2172  001E9C  0E60               	movlw	96
  2173  001E9E  6ED6               	movwf	4054,c	;volatile
  2174                           
  2175                           ;RTDuC.c: 345: }
  2176                           ;RTDuC.c: 346: while (abs(error) > 1);
  2177  001EA0  C0B0  F075         	movff	_error,___fttol@f1
  2178  001EA4  C0B1  F076         	movff	_error+1,___fttol@f1+1
  2179  001EA8  C0B2  F077         	movff	_error+2,___fttol@f1+2
  2180  001EAC  ECC0  F00D         	call	___fttol	;wreg free
  2181  001EB0  C075  F084         	movff	?___fttol,abs@a
  2182  001EB4  C076  F085         	movff	?___fttol+1,abs@a+1
  2183  001EB8  ECD9  F015         	call	_abs	;wreg free
  2184  001EBC  0100               	movlb	0	; () banked
  2185  001EBE  BF85               	btfsc	(?_abs+1)& (0+255),7,b
  2186  001EC0  D008               	goto	l4067
  2187  001EC2  0100               	movlb	0	; () banked
  2188  001EC4  5185               	movf	(?_abs+1)& (0+255),w,b
  2189  001EC6  E1C2               	bnz	l4057
  2190  001EC8  0E02               	movlw	2
  2191  001ECA  0100               	movlb	0	; () banked
  2192  001ECC  5D84               	subwf	?_abs& (0+255),w,b
  2193  001ECE  B0D8               	btfsc	status,0,c
  2194  001ED0  D7BD               	goto	l4057
  2195  001ED2                     l4067:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;RTDuC.c: 348: Ki = 0;
  2199  001ED2  0E00               	movlw	0
  2200  001ED4  0100               	movlb	0	; () banked
  2201  001ED6  6FAA               	movwf	_Ki& (0+255),b
  2202  001ED8  0E00               	movlw	0
  2203  001EDA  0100               	movlb	0	; () banked
  2204  001EDC  6FAB               	movwf	(_Ki+1)& (0+255),b
  2205  001EDE  0E00               	movlw	0
  2206  001EE0  0100               	movlb	0	; () banked
  2207  001EE2  6FAC               	movwf	(_Ki+2)& (0+255),b
  2208                           
  2209                           ;RTDuC.c: 349: Kp = 0;
  2210  001EE4  0E00               	movlw	0
  2211  001EE6  0100               	movlb	0	; () banked
  2212  001EE8  6FAD               	movwf	_Kp& (0+255),b
  2213  001EEA  0E00               	movlw	0
  2214  001EEC  0100               	movlb	0	; () banked
  2215  001EEE  6FAE               	movwf	(_Kp+1)& (0+255),b
  2216  001EF0  0E00               	movlw	0
  2217  001EF2  0100               	movlb	0	; () banked
  2218  001EF4  6FAF               	movwf	(_Kp+2)& (0+255),b
  2219                           
  2220                           ;RTDuC.c: 350: Kd = 0;
  2221  001EF6  0E00               	movlw	0
  2222  001EF8  0100               	movlb	0	; () banked
  2223  001EFA  6FA7               	movwf	_Kd& (0+255),b
  2224  001EFC  0E00               	movlw	0
  2225  001EFE  0100               	movlb	0	; () banked
  2226  001F00  6FA8               	movwf	(_Kd+1)& (0+255),b
  2227  001F02  0E00               	movlw	0
  2228  001F04  0100               	movlb	0	; () banked
  2229  001F06  6FA9               	movwf	(_Kd+2)& (0+255),b
  2230                           
  2231                           ; BSR set to: 0
  2232  001F08  0012               	return		;funcret
  2233  001F0A                     __end_of_ZeroMotors:
  2234                           	opt stack 0
  2235                           tblptru	equ	0xFF8
  2236                           tblptrh	equ	0xFF7
  2237                           tblptrl	equ	0xFF6
  2238                           tablat	equ	0xFF5
  2239                           prodh	equ	0xFF4
  2240                           prodl	equ	0xFF3
  2241                           intcon	equ	0xFF2
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           postdec1	equ	0xFE5
  2245                           fsr1h	equ	0xFE2
  2246                           fsr1l	equ	0xFE1
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _calculatePID *****************
  2254 ;; Defined at:
  2255 ;;		line 29 in file "PID.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  angle           3   36[BANK0 ] unsigned char 
  2258 ;;  setpoint        3   39[BANK0 ] unsigned char 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  derErr          3   42[BANK0 ] unsigned char 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;		None               void
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0, cstack
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2270 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;Total ram usage:       15 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    7
  2277 ;; This function calls:
  2278 ;;		___ftadd
  2279 ;;		___ftdiv
  2280 ;;		___ftge
  2281 ;;		___ftmul
  2282 ;;		___ftneg
  2283 ;;		___ftsub
  2284 ;;		___fttol
  2285 ;; This function is called by:
  2286 ;;		_main
  2287 ;;		_ZeroMotors
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text3
  2292  001518                     __ptext3:
  2293                           	opt stack 0
  2294  001518                     _calculatePID:
  2295                           	opt stack 21
  2296                           
  2297                           ;PID.c: 31: double derErr;
  2298                           ;PID.c: 32: if (PIDEnableFlag == 3)
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;incstack = 0
  2302  001518  0E03               	movlw	3
  2303  00151A  0100               	movlb	0	; () banked
  2304  00151C  19BC               	xorwf	_PIDEnableFlag& (0+255),w,b
  2305  00151E  A4D8               	btfss	status,2,c
  2306  001520  D01F               	goto	l4025
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;PID.c: 33: {
  2310                           ;PID.c: 34: error = 0;
  2311  001522  0E00               	movlw	0
  2312  001524  0100               	movlb	0	; () banked
  2313  001526  6FB0               	movwf	_error& (0+255),b
  2314  001528  0E00               	movlw	0
  2315  00152A  0100               	movlb	0	; () banked
  2316  00152C  6FB1               	movwf	(_error+1)& (0+255),b
  2317  00152E  0E00               	movlw	0
  2318  001530  0100               	movlb	0	; () banked
  2319  001532  6FB2               	movwf	(_error+2)& (0+255),b
  2320                           
  2321                           ;PID.c: 35: prevErr = 0;
  2322  001534  0E00               	movlw	0
  2323  001536  0100               	movlb	0	; () banked
  2324  001538  6FB6               	movwf	_prevErr& (0+255),b
  2325  00153A  0E00               	movlw	0
  2326  00153C  0100               	movlb	0	; () banked
  2327  00153E  6FB7               	movwf	(_prevErr+1)& (0+255),b
  2328  001540  0E00               	movlw	0
  2329  001542  0100               	movlb	0	; () banked
  2330  001544  6FB8               	movwf	(_prevErr+2)& (0+255),b
  2331                           
  2332                           ;PID.c: 36: intErr = 0;
  2333  001546  0E00               	movlw	0
  2334  001548  0100               	movlb	0	; () banked
  2335  00154A  6FB3               	movwf	_intErr& (0+255),b
  2336  00154C  0E00               	movlw	0
  2337  00154E  0100               	movlb	0	; () banked
  2338  001550  6FB4               	movwf	(_intErr+1)& (0+255),b
  2339  001552  0E00               	movlw	0
  2340  001554  0100               	movlb	0	; () banked
  2341  001556  6FB5               	movwf	(_intErr+2)& (0+255),b
  2342                           
  2343                           ;PID.c: 37: PIDEnableFlag = 1;
  2344  001558  0E01               	movlw	1
  2345  00155A  0100               	movlb	0	; () banked
  2346  00155C  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  2347  00155E  D000               	goto	l4025
  2348  001560                     l4025:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;PID.c: 38: }
  2352                           ;PID.c: 40: error = setpoint - angle;
  2353  001560  C084  F018         	movff	calculatePID@angle,___ftneg@f1
  2354  001564  C085  F019         	movff	calculatePID@angle+1,___ftneg@f1+1
  2355  001568  C086  F01A         	movff	calculatePID@angle+2,___ftneg@f1+2
  2356  00156C  EC3D  F016         	call	___ftneg	;wreg free
  2357  001570  C018  F069         	movff	?___ftneg,___ftadd@f1
  2358  001574  C019  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  2359  001578  C01A  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  2360  00157C  C087  F06C         	movff	calculatePID@setpoint,___ftadd@f2
  2361  001580  C088  F06D         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  2362  001584  C089  F06E         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  2363  001588  ECE7  F00B         	call	___ftadd	;wreg free
  2364  00158C  C069  F0B0         	movff	?___ftadd,_error
  2365  001590  C06A  F0B1         	movff	?___ftadd+1,_error+1
  2366  001594  C06B  F0B2         	movff	?___ftadd+2,_error+2
  2367                           
  2368                           ;PID.c: 41: if (error > 180)
  2369  001598  0E00               	movlw	0
  2370  00159A  6E18               	movwf	___ftge@ff1,c
  2371  00159C  0E34               	movlw	52
  2372  00159E  6E19               	movwf	___ftge@ff1+1,c
  2373  0015A0  0E43               	movlw	67
  2374  0015A2  6E1A               	movwf	___ftge@ff1+2,c
  2375  0015A4  C0B0  F01B         	movff	_error,___ftge@ff2
  2376  0015A8  C0B1  F01C         	movff	_error+1,___ftge@ff2+1
  2377  0015AC  C0B2  F01D         	movff	_error+2,___ftge@ff2+2
  2378  0015B0  EC25  F012         	call	___ftge	;wreg free
  2379  0015B4  B0D8               	btfsc	status,0,c
  2380  0015B6  D018               	goto	l4031
  2381                           
  2382                           ;PID.c: 42: error -= 360;
  2383  0015B8  C0B0  F075         	movff	_error,___ftsub@f1
  2384  0015BC  C0B1  F076         	movff	_error+1,___ftsub@f1+1
  2385  0015C0  C0B2  F077         	movff	_error+2,___ftsub@f1+2
  2386  0015C4  0E00               	movlw	0
  2387  0015C6  0100               	movlb	0	; () banked
  2388  0015C8  6F78               	movwf	___ftsub@f2& (0+255),b
  2389  0015CA  0EB4               	movlw	180
  2390  0015CC  0100               	movlb	0	; () banked
  2391  0015CE  6F79               	movwf	(___ftsub@f2+1)& (0+255),b
  2392  0015D0  0E43               	movlw	67
  2393  0015D2  0100               	movlb	0	; () banked
  2394  0015D4  6F7A               	movwf	(___ftsub@f2+2)& (0+255),b
  2395  0015D6  EC1D  F014         	call	___ftsub	;wreg free
  2396  0015DA  C075  F0B0         	movff	?___ftsub,_error
  2397  0015DE  C076  F0B1         	movff	?___ftsub+1,_error+1
  2398  0015E2  C077  F0B2         	movff	?___ftsub+2,_error+2
  2399  0015E6  D028               	goto	l149
  2400  0015E8                     l4031:
  2401                           
  2402                           ;PID.c: 43: else if (error < -180)
  2403  0015E8  C0B0  F018         	movff	_error,___ftge@ff1
  2404  0015EC  C0B1  F019         	movff	_error+1,___ftge@ff1+1
  2405  0015F0  C0B2  F01A         	movff	_error+2,___ftge@ff1+2
  2406  0015F4  0E00               	movlw	0
  2407  0015F6  6E1B               	movwf	___ftge@ff2,c
  2408  0015F8  0E34               	movlw	52
  2409  0015FA  6E1C               	movwf	___ftge@ff2+1,c
  2410  0015FC  0EC3               	movlw	195
  2411  0015FE  6E1D               	movwf	___ftge@ff2+2,c
  2412  001600  EC25  F012         	call	___ftge	;wreg free
  2413  001604  B0D8               	btfsc	status,0,c
  2414  001606  D018               	goto	l149
  2415                           
  2416                           ;PID.c: 44: error += 360;
  2417  001608  C0B0  F069         	movff	_error,___ftadd@f1
  2418  00160C  C0B1  F06A         	movff	_error+1,___ftadd@f1+1
  2419  001610  C0B2  F06B         	movff	_error+2,___ftadd@f1+2
  2420  001614  0E00               	movlw	0
  2421  001616  0100               	movlb	0	; () banked
  2422  001618  6F6C               	movwf	___ftadd@f2& (0+255),b
  2423  00161A  0EB4               	movlw	180
  2424  00161C  0100               	movlb	0	; () banked
  2425  00161E  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
  2426  001620  0E43               	movlw	67
  2427  001622  0100               	movlb	0	; () banked
  2428  001624  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
  2429  001626  ECE7  F00B         	call	___ftadd	;wreg free
  2430  00162A  C069  F0B0         	movff	?___ftadd,_error
  2431  00162E  C06A  F0B1         	movff	?___ftadd+1,_error+1
  2432  001632  C06B  F0B2         	movff	?___ftadd+2,_error+2
  2433  001636  D000               	goto	l149
  2434  001638                     l149:
  2435                           
  2436                           ;PID.c: 46: derErr = error - prevErr;
  2437  001638  C0B6  F018         	movff	_prevErr,___ftneg@f1
  2438  00163C  C0B7  F019         	movff	_prevErr+1,___ftneg@f1+1
  2439  001640  C0B8  F01A         	movff	_prevErr+2,___ftneg@f1+2
  2440  001644  EC3D  F016         	call	___ftneg	;wreg free
  2441  001648  C018  F069         	movff	?___ftneg,___ftadd@f1
  2442  00164C  C019  F06A         	movff	?___ftneg+1,___ftadd@f1+1
  2443  001650  C01A  F06B         	movff	?___ftneg+2,___ftadd@f1+2
  2444  001654  C0B0  F06C         	movff	_error,___ftadd@f2
  2445  001658  C0B1  F06D         	movff	_error+1,___ftadd@f2+1
  2446  00165C  C0B2  F06E         	movff	_error+2,___ftadd@f2+2
  2447  001660  ECE7  F00B         	call	___ftadd	;wreg free
  2448  001664  C069  F08A         	movff	?___ftadd,calculatePID@derErr
  2449  001668  C06A  F08B         	movff	?___ftadd+1,calculatePID@derErr+1
  2450  00166C  C06B  F08C         	movff	?___ftadd+2,calculatePID@derErr+2
  2451                           
  2452                           ;PID.c: 47: intErr += error;
  2453  001670  C0B3  F069         	movff	_intErr,___ftadd@f1
  2454  001674  C0B4  F06A         	movff	_intErr+1,___ftadd@f1+1
  2455  001678  C0B5  F06B         	movff	_intErr+2,___ftadd@f1+2
  2456  00167C  C0B0  F06C         	movff	_error,___ftadd@f2
  2457  001680  C0B1  F06D         	movff	_error+1,___ftadd@f2+1
  2458  001684  C0B2  F06E         	movff	_error+2,___ftadd@f2+2
  2459  001688  ECE7  F00B         	call	___ftadd	;wreg free
  2460  00168C  C069  F0B3         	movff	?___ftadd,_intErr
  2461  001690  C06A  F0B4         	movff	?___ftadd+1,_intErr+1
  2462  001694  C06B  F0B5         	movff	?___ftadd+2,_intErr+2
  2463                           
  2464                           ;PID.c: 48: if (intErr > 2000)
  2465  001698  0E00               	movlw	0
  2466  00169A  6E18               	movwf	___ftge@ff1,c
  2467  00169C  0EFA               	movlw	250
  2468  00169E  6E19               	movwf	___ftge@ff1+1,c
  2469  0016A0  0E44               	movlw	68
  2470  0016A2  6E1A               	movwf	___ftge@ff1+2,c
  2471  0016A4  C0B3  F01B         	movff	_intErr,___ftge@ff2
  2472  0016A8  C0B4  F01C         	movff	_intErr+1,___ftge@ff2+1
  2473  0016AC  C0B5  F01D         	movff	_intErr+2,___ftge@ff2+2
  2474  0016B0  EC25  F012         	call	___ftge	;wreg free
  2475  0016B4  B0D8               	btfsc	status,0,c
  2476  0016B6  D00A               	goto	l4037
  2477                           
  2478                           ;PID.c: 49: intErr = 2000;
  2479  0016B8  0E00               	movlw	0
  2480  0016BA  0100               	movlb	0	; () banked
  2481  0016BC  6FB3               	movwf	_intErr& (0+255),b
  2482  0016BE  0EFA               	movlw	250
  2483  0016C0  0100               	movlb	0	; () banked
  2484  0016C2  6FB4               	movwf	(_intErr+1)& (0+255),b
  2485  0016C4  0E44               	movlw	68
  2486  0016C6  0100               	movlb	0	; () banked
  2487  0016C8  6FB5               	movwf	(_intErr+2)& (0+255),b
  2488  0016CA  D000               	goto	l4037
  2489  0016CC                     l4037:
  2490                           
  2491                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2492  0016CC  C0B3  F032         	movff	_intErr,___ftmul@f2
  2493  0016D0  C0B4  F033         	movff	_intErr+1,___ftmul@f2+1
  2494  0016D4  C0B5  F034         	movff	_intErr+2,___ftmul@f2+2
  2495  0016D8  C0AA  F02F         	movff	_Ki,___ftmul@f1
  2496  0016DC  C0AB  F030         	movff	_Ki+1,___ftmul@f1+1
  2497  0016E0  C0AC  F031         	movff	_Ki+2,___ftmul@f1+2
  2498  0016E4  EC59  F00E         	call	___ftmul	;wreg free
  2499  0016E8  C02F  F08D         	movff	?___ftmul,_calculatePID$3452
  2500  0016EC  C030  F08E         	movff	?___ftmul+1,_calculatePID$3452+1
  2501  0016F0  C031  F08F         	movff	?___ftmul+2,_calculatePID$3452+2
  2502                           
  2503                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2504  0016F4  C0C1  F032         	movff	_loopTime,___ftmul@f2
  2505  0016F8  C0C2  F033         	movff	_loopTime+1,___ftmul@f2+1
  2506  0016FC  C0C3  F034         	movff	_loopTime+2,___ftmul@f2+2
  2507  001700  C08D  F02F         	movff	_calculatePID$3452,___ftmul@f1
  2508  001704  C08E  F030         	movff	_calculatePID$3452+1,___ftmul@f1+1
  2509  001708  C08F  F031         	movff	_calculatePID$3452+2,___ftmul@f1+2
  2510  00170C  EC59  F00E         	call	___ftmul	;wreg free
  2511  001710  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2512  001714  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2513  001718  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2514  00171C  C0B0  F032         	movff	_error,___ftmul@f2
  2515  001720  C0B1  F033         	movff	_error+1,___ftmul@f2+1
  2516  001724  C0B2  F034         	movff	_error+2,___ftmul@f2+2
  2517  001728  C0AD  F02F         	movff	_Kp,___ftmul@f1
  2518  00172C  C0AE  F030         	movff	_Kp+1,___ftmul@f1+1
  2519  001730  C0AF  F031         	movff	_Kp+2,___ftmul@f1+2
  2520  001734  EC59  F00E         	call	___ftmul	;wreg free
  2521  001738  C02F  F069         	movff	?___ftmul,___ftadd@f1
  2522  00173C  C030  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  2523  001740  C031  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  2524  001744  ECE7  F00B         	call	___ftadd	;wreg free
  2525  001748  C069  F090         	movff	?___ftadd,_calculatePID$3453
  2526  00174C  C06A  F091         	movff	?___ftadd+1,_calculatePID$3453+1
  2527  001750  C06B  F092         	movff	?___ftadd+2,_calculatePID$3453+2
  2528                           
  2529                           ;PID.c: 51: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  2530  001754  C0A7  F032         	movff	_Kd,___ftmul@f2
  2531  001758  C0A8  F033         	movff	_Kd+1,___ftmul@f2+1
  2532  00175C  C0A9  F034         	movff	_Kd+2,___ftmul@f2+2
  2533  001760  C0C1  F023         	movff	_loopTime,___ftdiv@f2
  2534  001764  C0C2  F024         	movff	_loopTime+1,___ftdiv@f2+1
  2535  001768  C0C3  F025         	movff	_loopTime+2,___ftdiv@f2+2
  2536  00176C  C08A  F020         	movff	calculatePID@derErr,___ftdiv@f1
  2537  001770  C08B  F021         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  2538  001774  C08C  F022         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  2539  001778  EC85  F00F         	call	___ftdiv	;wreg free
  2540  00177C  C020  F02F         	movff	?___ftdiv,___ftmul@f1
  2541  001780  C021  F030         	movff	?___ftdiv+1,___ftmul@f1+1
  2542  001784  C022  F031         	movff	?___ftdiv+2,___ftmul@f1+2
  2543  001788  EC59  F00E         	call	___ftmul	;wreg free
  2544  00178C  C02F  F06C         	movff	?___ftmul,___ftadd@f2
  2545  001790  C030  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  2546  001794  C031  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  2547  001798  C090  F069         	movff	_calculatePID$3453,___ftadd@f1
  2548  00179C  C091  F06A         	movff	_calculatePID$3453+1,___ftadd@f1+1
  2549  0017A0  C092  F06B         	movff	_calculatePID$3453+2,___ftadd@f1+2
  2550  0017A4  ECE7  F00B         	call	___ftadd	;wreg free
  2551  0017A8  C069  F075         	movff	?___ftadd,___fttol@f1
  2552  0017AC  C06A  F076         	movff	?___ftadd+1,___fttol@f1+1
  2553  0017B0  C06B  F077         	movff	?___ftadd+2,___fttol@f1+2
  2554  0017B4  ECC0  F00D         	call	___fttol	;wreg free
  2555  0017B8  C075  F0B9         	movff	?___fttol,_motorInput
  2556  0017BC  C076  F0BA         	movff	?___fttol+1,_motorInput+1
  2557                           
  2558                           ;PID.c: 53: prevErr = error;
  2559  0017C0  C0B0  F0B6         	movff	_error,_prevErr
  2560  0017C4  C0B1  F0B7         	movff	_error+1,_prevErr+1
  2561  0017C8  C0B2  F0B8         	movff	_error+2,_prevErr+2
  2562  0017CC  0012               	return		;funcret
  2563  0017CE                     __end_of_calculatePID:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           intcon	equ	0xFF2
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postdec1	equ	0xFE5
  2575                           fsr1h	equ	0xFE2
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function ___fttol *****************
  2584 ;; Defined at:
  2585 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  f1              3   21[BANK0 ] float 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  lval            4   31[BANK0 ] unsigned long 
  2590 ;;  exp1            1   35[BANK0 ] unsigned char 
  2591 ;;  sign1           1   30[BANK0 ] unsigned char 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  4   21[BANK0 ] long 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:       15 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    4
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_calculatePID
  2612 ;;		_ZeroMotors
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           	psect	text4
  2617  001B80                     __ptext4:
  2618                           	opt stack 0
  2619  001B80                     ___fttol:
  2620                           	opt stack 23
  2621                           
  2622                           ;incstack = 0
  2623  001B80  C077  F079         	movff	___fttol@f1+2,??___fttol
  2624  001B84  0100               	movlb	0	; () banked
  2625  001B86  6B7A               	clrf	(??___fttol+1)& (0+255),b
  2626  001B88  6B7B               	clrf	(??___fttol+2)& (0+255),b
  2627  001B8A  0100               	movlb	0	; () banked
  2628  001B8C  3576               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2629  001B8E  0100               	movlb	0	; () banked
  2630  001B90  3779               	rlcf	??___fttol& (0+255),f,b
  2631  001B92  E301               	bnc	u2021
  2632  001B94  817A               	bsf	(??___fttol+1)& (0+255),0,b
  2633  001B96                     u2021:
  2634  001B96  0100               	movlb	0	; () banked
  2635  001B98  5179               	movf	??___fttol& (0+255),w,b
  2636  001B9A  0100               	movlb	0	; () banked
  2637  001B9C  6F83               	movwf	___fttol@exp1& (0+255),b
  2638  001B9E  0100               	movlb	0	; () banked
  2639  001BA0  5183               	movf	___fttol@exp1& (0+255),w,b
  2640  001BA2  A4D8               	btfss	status,2,c
  2641  001BA4  D002               	goto	l2875
  2642  001BA6  D051               	goto	l2899
  2643                           
  2644                           ; BSR set to: 0
  2645                           
  2646                           ; BSR set to: 0
  2647  001BA8  D083               	goto	l1116
  2648  001BAA                     l2875:
  2649                           
  2650                           ; BSR set to: 0
  2651  001BAA  0E17               	movlw	23
  2652  001BAC  0100               	movlb	0	; () banked
  2653  001BAE  6F79               	movwf	??___fttol& (0+255),b
  2654  001BB0  C075  F07A         	movff	___fttol@f1,??___fttol+1
  2655  001BB4  C076  F07B         	movff	___fttol@f1+1,??___fttol+2
  2656  001BB8  C077  F07C         	movff	___fttol@f1+2,??___fttol+3
  2657  001BBC  0100               	movlb	0	; () banked
  2658  001BBE  2979               	incf	??___fttol& (0+255),w,b
  2659  001BC0  0100               	movlb	0	; () banked
  2660  001BC2  6F7D               	movwf	(??___fttol+4)& (0+255),b
  2661  001BC4  D005               	goto	u2040
  2662  001BC6                     u2045:
  2663  001BC6  0100               	movlb	0	; () banked
  2664  001BC8  90D8               	bcf	status,0,c
  2665  001BCA  337C               	rrcf	(??___fttol+3)& (0+255),f,b
  2666  001BCC  337B               	rrcf	(??___fttol+2)& (0+255),f,b
  2667  001BCE  337A               	rrcf	(??___fttol+1)& (0+255),f,b
  2668  001BD0                     u2040:
  2669  001BD0  0100               	movlb	0	; () banked
  2670  001BD2  2F7D               	decfsz	(??___fttol+4)& (0+255),f,b
  2671  001BD4  D7F8               	goto	u2045
  2672  001BD6  0100               	movlb	0	; () banked
  2673  001BD8  517A               	movf	(??___fttol+1)& (0+255),w,b
  2674  001BDA  0100               	movlb	0	; () banked
  2675  001BDC  6F7E               	movwf	___fttol@sign1& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678  001BDE  0100               	movlb	0	; () banked
  2679  001BE0  8F76               	bsf	(___fttol@f1+1)& (0+255),7,b
  2680                           
  2681                           ; BSR set to: 0
  2682  001BE2  0EFF               	movlw	255
  2683  001BE4  0100               	movlb	0	; () banked
  2684  001BE6  1775               	andwf	___fttol@f1& (0+255),f,b
  2685  001BE8  0EFF               	movlw	255
  2686  001BEA  0100               	movlb	0	; () banked
  2687  001BEC  1776               	andwf	(___fttol@f1+1)& (0+255),f,b
  2688  001BEE  0E00               	movlw	0
  2689  001BF0  0100               	movlb	0	; () banked
  2690  001BF2  1777               	andwf	(___fttol@f1+2)& (0+255),f,b
  2691                           
  2692                           ; BSR set to: 0
  2693  001BF4  0100               	movlb	0	; () banked
  2694  001BF6  5175               	movf	___fttol@f1& (0+255),w,b
  2695  001BF8  0100               	movlb	0	; () banked
  2696  001BFA  6F7F               	movwf	___fttol@lval& (0+255),b
  2697  001BFC  0100               	movlb	0	; () banked
  2698  001BFE  5176               	movf	(___fttol@f1+1)& (0+255),w,b
  2699  001C00  0100               	movlb	0	; () banked
  2700  001C02  6F80               	movwf	(___fttol@lval+1)& (0+255),b
  2701  001C04  0100               	movlb	0	; () banked
  2702  001C06  5177               	movf	(___fttol@f1+2)& (0+255),w,b
  2703  001C08  0100               	movlb	0	; () banked
  2704  001C0A  6F81               	movwf	(___fttol@lval+2)& (0+255),b
  2705  001C0C  0100               	movlb	0	; () banked
  2706  001C0E  6B82               	clrf	(___fttol@lval+3)& (0+255),b
  2707                           
  2708                           ; BSR set to: 0
  2709  001C10  0E8E               	movlw	142
  2710  001C12  0100               	movlb	0	; () banked
  2711  001C14  5F83               	subwf	___fttol@exp1& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 0
  2714  001C16  0100               	movlb	0	; () banked
  2715  001C18  AF83               	btfss	___fttol@exp1& (0+255),7,b
  2716  001C1A  D013               	goto	l2897
  2717                           
  2718                           ; BSR set to: 0
  2719  001C1C  0100               	movlb	0	; () banked
  2720  001C1E  5183               	movf	___fttol@exp1& (0+255),w,b
  2721  001C20  0A80               	xorlw	128
  2722  001C22  0F8F               	addlw	143
  2723  001C24  B0D8               	btfsc	status,0,c
  2724  001C26  D003               	goto	l2893
  2725  001C28  D010               	goto	l2899
  2726                           
  2727                           ; BSR set to: 0
  2728                           
  2729                           ; BSR set to: 0
  2730  001C2A  D042               	goto	l1116
  2731                           
  2732                           ; BSR set to: 0
  2733  001C2C  D000               	goto	l2893
  2734  001C2E                     l2893:
  2735                           
  2736                           ; BSR set to: 0
  2737  001C2E  0100               	movlb	0	; () banked
  2738  001C30  90D8               	bcf	status,0,c
  2739  001C32  3382               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2740  001C34  3381               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2741  001C36  3380               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2742  001C38  337F               	rrcf	___fttol@lval& (0+255),f,b
  2743                           
  2744                           ; BSR set to: 0
  2745  001C3A  0100               	movlb	0	; () banked
  2746  001C3C  3F83               	incfsz	___fttol@exp1& (0+255),f,b
  2747  001C3E  D7F7               	goto	l2893
  2748                           
  2749                           ; BSR set to: 0
  2750  001C40  D01F               	goto	l2907
  2751  001C42                     l2897:
  2752                           
  2753                           ; BSR set to: 0
  2754  001C42  0E17               	movlw	23
  2755  001C44  0100               	movlb	0	; () banked
  2756  001C46  6583               	cpfsgt	___fttol@exp1& (0+255),b
  2757  001C48  D014               	goto	l2905
  2758  001C4A                     l2899:
  2759                           
  2760                           ; BSR set to: 0
  2761  001C4A  0E00               	movlw	0
  2762  001C4C  0100               	movlb	0	; () banked
  2763  001C4E  6F75               	movwf	?___fttol& (0+255),b
  2764  001C50  0E00               	movlw	0
  2765  001C52  6F76               	movwf	(?___fttol+1)& (0+255),b
  2766  001C54  0E00               	movlw	0
  2767  001C56  6F77               	movwf	(?___fttol+2)& (0+255),b
  2768  001C58  0E00               	movlw	0
  2769  001C5A  6F78               	movwf	(?___fttol+3)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772  001C5C  D029               	goto	l1116
  2773                           
  2774                           ; BSR set to: 0
  2775  001C5E  D009               	goto	l2905
  2776  001C60                     l2903:
  2777                           
  2778                           ; BSR set to: 0
  2779  001C60  0100               	movlb	0	; () banked
  2780  001C62  90D8               	bcf	status,0,c
  2781  001C64  377F               	rlcf	___fttol@lval& (0+255),f,b
  2782  001C66  3780               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2783  001C68  3781               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2784  001C6A  3782               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2785  001C6C  0100               	movlb	0	; () banked
  2786  001C6E  0783               	decf	___fttol@exp1& (0+255),f,b
  2787  001C70  D000               	goto	l2905
  2788  001C72                     l2905:
  2789                           
  2790                           ; BSR set to: 0
  2791  001C72  0100               	movlb	0	; () banked
  2792  001C74  5183               	movf	___fttol@exp1& (0+255),w,b
  2793  001C76  0100               	movlb	0	; () banked
  2794  001C78  B4D8               	btfsc	status,2,c
  2795  001C7A  D002               	goto	l2907
  2796  001C7C  D7F1               	goto	l2903
  2797                           
  2798                           ; BSR set to: 0
  2799  001C7E  D000               	goto	l2907
  2800  001C80                     l2907:
  2801                           
  2802                           ; BSR set to: 0
  2803  001C80  0100               	movlb	0	; () banked
  2804  001C82  517E               	movf	___fttol@sign1& (0+255),w,b
  2805  001C84  0100               	movlb	0	; () banked
  2806  001C86  B4D8               	btfsc	status,2,c
  2807  001C88  D00A               	goto	l2911
  2808                           
  2809                           ; BSR set to: 0
  2810  001C8A  0100               	movlb	0	; () banked
  2811  001C8C  1F82               	comf	(___fttol@lval+3)& (0+255),f,b
  2812  001C8E  1F81               	comf	(___fttol@lval+2)& (0+255),f,b
  2813  001C90  1F80               	comf	(___fttol@lval+1)& (0+255),f,b
  2814  001C92  6D7F               	negf	___fttol@lval& (0+255),b
  2815  001C94  0E00               	movlw	0
  2816  001C96  2380               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2817  001C98  2381               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2818  001C9A  2382               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2819  001C9C  D000               	goto	l2911
  2820  001C9E                     l2911:
  2821                           
  2822                           ; BSR set to: 0
  2823  001C9E  C07F  F075         	movff	___fttol@lval,?___fttol
  2824  001CA2  C080  F076         	movff	___fttol@lval+1,?___fttol+1
  2825  001CA6  C081  F077         	movff	___fttol@lval+2,?___fttol+2
  2826  001CAA  C082  F078         	movff	___fttol@lval+3,?___fttol+3
  2827  001CAE  D000               	goto	l1116
  2828  001CB0                     l1116:
  2829                           
  2830                           ; BSR set to: 0
  2831  001CB0  0012               	return		;funcret
  2832  001CB2                     __end_of___fttol:
  2833                           	opt stack 0
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           postinc0	equ	0xFEE
  2842                           wreg	equ	0xFE8
  2843                           postdec1	equ	0xFE5
  2844                           fsr1h	equ	0xFE2
  2845                           fsr1l	equ	0xFE1
  2846                           indf2	equ	0xFDF
  2847                           postinc2	equ	0xFDE
  2848                           fsr2h	equ	0xFDA
  2849                           fsr2l	equ	0xFD9
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function ___ftsub *****************
  2853 ;; Defined at:
  2854 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  f1              3   21[BANK0 ] float 
  2857 ;;  f2              3   24[BANK0 ] float 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  3   21[BANK0 ] float 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2869 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;Total ram usage:        6 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    6
  2876 ;; This function calls:
  2877 ;;		___ftadd
  2878 ;; This function is called by:
  2879 ;;		_calculatePID
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text5
  2884  00283A                     __ptext5:
  2885                           	opt stack 0
  2886  00283A                     ___ftsub:
  2887                           	opt stack 21
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;incstack = 0
  2891  00283A  0100               	movlb	0	; () banked
  2892  00283C  5178               	movf	___ftsub@f2& (0+255),w,b
  2893  00283E  0100               	movlb	0	; () banked
  2894  002840  1179               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  2895  002842  0100               	movlb	0	; () banked
  2896  002844  117A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  2897  002846  B4D8               	btfsc	status,2,c
  2898  002848  D00A               	goto	l3991
  2899                           
  2900                           ; BSR set to: 0
  2901  00284A  0E00               	movlw	0
  2902  00284C  0100               	movlb	0	; () banked
  2903  00284E  1B78               	xorwf	___ftsub@f2& (0+255),f,b
  2904  002850  0E00               	movlw	0
  2905  002852  0100               	movlb	0	; () banked
  2906  002854  1B79               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2907  002856  0E80               	movlw	128
  2908  002858  0100               	movlb	0	; () banked
  2909  00285A  1B7A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2910  00285C  D000               	goto	l3991
  2911  00285E                     l3991:
  2912                           
  2913                           ; BSR set to: 0
  2914  00285E  C075  F069         	movff	___ftsub@f1,___ftadd@f1
  2915  002862  C076  F06A         	movff	___ftsub@f1+1,___ftadd@f1+1
  2916  002866  C077  F06B         	movff	___ftsub@f1+2,___ftadd@f1+2
  2917  00286A  C078  F06C         	movff	___ftsub@f2,___ftadd@f2
  2918  00286E  C079  F06D         	movff	___ftsub@f2+1,___ftadd@f2+1
  2919  002872  C07A  F06E         	movff	___ftsub@f2+2,___ftadd@f2+2
  2920  002876  ECE7  F00B         	call	___ftadd	;wreg free
  2921  00287A  C069  F075         	movff	?___ftadd,?___ftsub
  2922  00287E  C06A  F076         	movff	?___ftadd+1,?___ftsub+1
  2923  002882  C06B  F077         	movff	?___ftadd+2,?___ftsub+2
  2924  002886  D000               	goto	l1112
  2925  002888                     l1112:
  2926  002888  0012               	return		;funcret
  2927  00288A                     __end_of___ftsub:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           postdec1	equ	0xFE5
  2939                           fsr1h	equ	0xFE2
  2940                           fsr1l	equ	0xFE1
  2941                           indf2	equ	0xFDF
  2942                           postinc2	equ	0xFDE
  2943                           fsr2h	equ	0xFDA
  2944                           fsr2l	equ	0xFD9
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function ___ftadd *****************
  2948 ;; Defined at:
  2949 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  f1              3    9[BANK0 ] float 
  2952 ;;  f2              3   12[BANK0 ] float 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  exp1            1   20[BANK0 ] unsigned char 
  2955 ;;  exp2            1   19[BANK0 ] unsigned char 
  2956 ;;  sign            1   18[BANK0 ] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  3    9[BANK0 ] float 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2966 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;Total ram usage:       12 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    5
  2973 ;; This function calls:
  2974 ;;		___ftpack
  2975 ;; This function is called by:
  2976 ;;		_calculatePID
  2977 ;;		___ftsub
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text6
  2982  0017CE                     __ptext6:
  2983                           	opt stack 0
  2984  0017CE                     ___ftadd:
  2985                           	opt stack 21
  2986                           
  2987                           ;incstack = 0
  2988  0017CE  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
  2989  0017D2  0100               	movlb	0	; () banked
  2990  0017D4  6B70               	clrf	(??___ftadd+1)& (0+255),b
  2991  0017D6  6B71               	clrf	(??___ftadd+2)& (0+255),b
  2992  0017D8  0100               	movlb	0	; () banked
  2993  0017DA  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2994  0017DC  0100               	movlb	0	; () banked
  2995  0017DE  376F               	rlcf	??___ftadd& (0+255),f,b
  2996  0017E0  E301               	bnc	u3101
  2997  0017E2  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  2998  0017E4                     u3101:
  2999  0017E4  0100               	movlb	0	; () banked
  3000  0017E6  516F               	movf	??___ftadd& (0+255),w,b
  3001  0017E8  0100               	movlb	0	; () banked
  3002  0017EA  6F74               	movwf	___ftadd@exp1& (0+255),b
  3003  0017EC  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
  3004  0017F0  0100               	movlb	0	; () banked
  3005  0017F2  6B70               	clrf	(??___ftadd+1)& (0+255),b
  3006  0017F4  6B71               	clrf	(??___ftadd+2)& (0+255),b
  3007  0017F6  0100               	movlb	0	; () banked
  3008  0017F8  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3009  0017FA  0100               	movlb	0	; () banked
  3010  0017FC  376F               	rlcf	??___ftadd& (0+255),f,b
  3011  0017FE  E301               	bnc	u3111
  3012  001800  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  3013  001802                     u3111:
  3014  001802  0100               	movlb	0	; () banked
  3015  001804  516F               	movf	??___ftadd& (0+255),w,b
  3016  001806  0100               	movlb	0	; () banked
  3017  001808  6F73               	movwf	___ftadd@exp2& (0+255),b
  3018                           
  3019                           ; BSR set to: 0
  3020  00180A  0100               	movlb	0	; () banked
  3021  00180C  5174               	movf	___ftadd@exp1& (0+255),w,b
  3022  00180E  0100               	movlb	0	; () banked
  3023  001810  B4D8               	btfsc	status,2,c
  3024  001812  D011               	goto	l1048
  3025                           
  3026                           ; BSR set to: 0
  3027  001814  0100               	movlb	0	; () banked
  3028  001816  5173               	movf	___ftadd@exp2& (0+255),w,b
  3029  001818  0100               	movlb	0	; () banked
  3030  00181A  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  3031  00181C  B0D8               	btfsc	status,0,c
  3032  00181E  D012               	goto	l3827
  3033                           
  3034                           ; BSR set to: 0
  3035  001820  0100               	movlb	0	; () banked
  3036  001822  5174               	movf	___ftadd@exp1& (0+255),w,b
  3037  001824  0800               	sublw	0
  3038  001826  0100               	movlb	0	; () banked
  3039  001828  2573               	addwf	___ftadd@exp2& (0+255),w,b
  3040  00182A  0100               	movlb	0	; () banked
  3041  00182C  6F6F               	movwf	??___ftadd& (0+255),b
  3042  00182E  0E18               	movlw	24
  3043  001830  0100               	movlb	0	; () banked
  3044  001832  656F               	cpfsgt	??___ftadd& (0+255),b
  3045  001834  D007               	goto	l3827
  3046  001836                     l1048:
  3047                           
  3048                           ; BSR set to: 0
  3049  001836  C06C  F069         	movff	___ftadd@f2,?___ftadd
  3050  00183A  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
  3051  00183E  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
  3052  001842  D103               	goto	l1049
  3053  001844                     l3827:
  3054                           
  3055                           ; BSR set to: 0
  3056  001844  0100               	movlb	0	; () banked
  3057  001846  5173               	movf	___ftadd@exp2& (0+255),w,b
  3058  001848  0100               	movlb	0	; () banked
  3059  00184A  B4D8               	btfsc	status,2,c
  3060  00184C  D011               	goto	l1052
  3061                           
  3062                           ; BSR set to: 0
  3063  00184E  0100               	movlb	0	; () banked
  3064  001850  5174               	movf	___ftadd@exp1& (0+255),w,b
  3065  001852  0100               	movlb	0	; () banked
  3066  001854  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  3067  001856  B0D8               	btfsc	status,0,c
  3068  001858  D012               	goto	l3833
  3069                           
  3070                           ; BSR set to: 0
  3071  00185A  0100               	movlb	0	; () banked
  3072  00185C  5173               	movf	___ftadd@exp2& (0+255),w,b
  3073  00185E  0800               	sublw	0
  3074  001860  0100               	movlb	0	; () banked
  3075  001862  2574               	addwf	___ftadd@exp1& (0+255),w,b
  3076  001864  0100               	movlb	0	; () banked
  3077  001866  6F6F               	movwf	??___ftadd& (0+255),b
  3078  001868  0E18               	movlw	24
  3079  00186A  0100               	movlb	0	; () banked
  3080  00186C  656F               	cpfsgt	??___ftadd& (0+255),b
  3081  00186E  D007               	goto	l3833
  3082  001870                     l1052:
  3083                           
  3084                           ; BSR set to: 0
  3085  001870  C069  F069         	movff	___ftadd@f1,?___ftadd
  3086  001874  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
  3087  001878  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
  3088  00187C  D0E6               	goto	l1049
  3089  00187E                     l3833:
  3090                           
  3091                           ; BSR set to: 0
  3092  00187E  0E06               	movlw	6
  3093  001880  0100               	movlb	0	; () banked
  3094  001882  6F72               	movwf	___ftadd@sign& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097  001884  0100               	movlb	0	; () banked
  3098  001886  AF6B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3099  001888  D003               	goto	l3839
  3100                           
  3101                           ; BSR set to: 0
  3102  00188A  0100               	movlb	0	; () banked
  3103  00188C  8F72               	bsf	___ftadd@sign& (0+255),7,b
  3104  00188E  D000               	goto	l3839
  3105  001890                     l3839:
  3106                           
  3107                           ; BSR set to: 0
  3108  001890  0100               	movlb	0	; () banked
  3109  001892  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3110  001894  D002               	goto	l1054
  3111                           
  3112                           ; BSR set to: 0
  3113  001896  0100               	movlb	0	; () banked
  3114  001898  8D72               	bsf	___ftadd@sign& (0+255),6,b
  3115  00189A                     l1054:
  3116                           
  3117                           ; BSR set to: 0
  3118  00189A  0100               	movlb	0	; () banked
  3119  00189C  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3120                           
  3121                           ; BSR set to: 0
  3122  00189E  0EFF               	movlw	255
  3123  0018A0  0100               	movlb	0	; () banked
  3124  0018A2  1769               	andwf	___ftadd@f1& (0+255),f,b
  3125  0018A4  0EFF               	movlw	255
  3126  0018A6  0100               	movlb	0	; () banked
  3127  0018A8  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3128  0018AA  0E00               	movlw	0
  3129  0018AC  0100               	movlb	0	; () banked
  3130  0018AE  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3131  0018B0  0100               	movlb	0	; () banked
  3132  0018B2  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3133                           
  3134                           ; BSR set to: 0
  3135  0018B4  0EFF               	movlw	255
  3136  0018B6  0100               	movlb	0	; () banked
  3137  0018B8  176C               	andwf	___ftadd@f2& (0+255),f,b
  3138  0018BA  0EFF               	movlw	255
  3139  0018BC  0100               	movlb	0	; () banked
  3140  0018BE  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3141  0018C0  0E00               	movlw	0
  3142  0018C2  0100               	movlb	0	; () banked
  3143  0018C4  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3144                           
  3145                           ; BSR set to: 0
  3146  0018C6  0100               	movlb	0	; () banked
  3147  0018C8  5173               	movf	___ftadd@exp2& (0+255),w,b
  3148  0018CA  0100               	movlb	0	; () banked
  3149  0018CC  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  3150  0018CE  B0D8               	btfsc	status,0,c
  3151  0018D0  D028               	goto	l3859
  3152  0018D2                     l3849:
  3153                           
  3154                           ; BSR set to: 0
  3155  0018D2  0100               	movlb	0	; () banked
  3156  0018D4  90D8               	bcf	status,0,c
  3157  0018D6  376C               	rlcf	___ftadd@f2& (0+255),f,b
  3158  0018D8  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3159  0018DA  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3160  0018DC  0100               	movlb	0	; () banked
  3161  0018DE  0773               	decf	___ftadd@exp2& (0+255),f,b
  3162                           
  3163                           ; BSR set to: 0
  3164  0018E0  0100               	movlb	0	; () banked
  3165  0018E2  5174               	movf	___ftadd@exp1& (0+255),w,b
  3166  0018E4  0100               	movlb	0	; () banked
  3167  0018E6  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  3168  0018E8  B4D8               	btfsc	status,2,c
  3169  0018EA  D013               	goto	l3857
  3170                           
  3171                           ; BSR set to: 0
  3172  0018EC  0100               	movlb	0	; () banked
  3173  0018EE  0772               	decf	___ftadd@sign& (0+255),f,b
  3174  0018F0  C072  F06F         	movff	___ftadd@sign,??___ftadd
  3175  0018F4  0E07               	movlw	7
  3176  0018F6  0100               	movlb	0	; () banked
  3177  0018F8  176F               	andwf	??___ftadd& (0+255),f,b
  3178  0018FA  B4D8               	btfsc	status,2,c
  3179  0018FC  D00A               	goto	l3857
  3180  0018FE  D7E9               	goto	l3849
  3181                           
  3182                           ; BSR set to: 0
  3183                           
  3184                           ; BSR set to: 0
  3185  001900  D008               	goto	l3857
  3186  001902                     l3855:
  3187                           
  3188                           ; BSR set to: 0
  3189  001902  0100               	movlb	0	; () banked
  3190  001904  90D8               	bcf	status,0,c
  3191  001906  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3192  001908  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3193  00190A  3369               	rrcf	___ftadd@f1& (0+255),f,b
  3194  00190C  0100               	movlb	0	; () banked
  3195  00190E  2B74               	incf	___ftadd@exp1& (0+255),f,b
  3196  001910  D000               	goto	l3857
  3197  001912                     l3857:
  3198                           
  3199                           ; BSR set to: 0
  3200  001912  0100               	movlb	0	; () banked
  3201  001914  5173               	movf	___ftadd@exp2& (0+255),w,b
  3202  001916  0100               	movlb	0	; () banked
  3203  001918  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  3204  00191A  B4D8               	btfsc	status,2,c
  3205  00191C  D030               	goto	l1063
  3206  00191E  D7F1               	goto	l3855
  3207                           
  3208                           ; BSR set to: 0
  3209  001920  D02E               	goto	l1063
  3210  001922                     l3859:
  3211                           
  3212                           ; BSR set to: 0
  3213  001922  0100               	movlb	0	; () banked
  3214  001924  5174               	movf	___ftadd@exp1& (0+255),w,b
  3215  001926  0100               	movlb	0	; () banked
  3216  001928  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  3217  00192A  B0D8               	btfsc	status,0,c
  3218  00192C  D028               	goto	l1063
  3219  00192E                     l3861:
  3220                           
  3221                           ; BSR set to: 0
  3222  00192E  0100               	movlb	0	; () banked
  3223  001930  90D8               	bcf	status,0,c
  3224  001932  3769               	rlcf	___ftadd@f1& (0+255),f,b
  3225  001934  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3226  001936  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3227  001938  0100               	movlb	0	; () banked
  3228  00193A  0774               	decf	___ftadd@exp1& (0+255),f,b
  3229                           
  3230                           ; BSR set to: 0
  3231  00193C  0100               	movlb	0	; () banked
  3232  00193E  5174               	movf	___ftadd@exp1& (0+255),w,b
  3233  001940  0100               	movlb	0	; () banked
  3234  001942  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  3235  001944  B4D8               	btfsc	status,2,c
  3236  001946  D013               	goto	l3869
  3237                           
  3238                           ; BSR set to: 0
  3239  001948  0100               	movlb	0	; () banked
  3240  00194A  0772               	decf	___ftadd@sign& (0+255),f,b
  3241  00194C  C072  F06F         	movff	___ftadd@sign,??___ftadd
  3242  001950  0E07               	movlw	7
  3243  001952  0100               	movlb	0	; () banked
  3244  001954  176F               	andwf	??___ftadd& (0+255),f,b
  3245  001956  B4D8               	btfsc	status,2,c
  3246  001958  D00A               	goto	l3869
  3247  00195A  D7E9               	goto	l3861
  3248                           
  3249                           ; BSR set to: 0
  3250                           
  3251                           ; BSR set to: 0
  3252  00195C  D008               	goto	l3869
  3253  00195E                     l3867:
  3254                           
  3255                           ; BSR set to: 0
  3256  00195E  0100               	movlb	0	; () banked
  3257  001960  90D8               	bcf	status,0,c
  3258  001962  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3259  001964  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3260  001966  336C               	rrcf	___ftadd@f2& (0+255),f,b
  3261  001968  0100               	movlb	0	; () banked
  3262  00196A  2B73               	incf	___ftadd@exp2& (0+255),f,b
  3263  00196C  D000               	goto	l3869
  3264  00196E                     l3869:
  3265                           
  3266                           ; BSR set to: 0
  3267  00196E  0100               	movlb	0	; () banked
  3268  001970  5173               	movf	___ftadd@exp2& (0+255),w,b
  3269  001972  0100               	movlb	0	; () banked
  3270  001974  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  3271  001976  B4D8               	btfsc	status,2,c
  3272  001978  D002               	goto	l1063
  3273  00197A  D7F1               	goto	l3867
  3274                           
  3275                           ; BSR set to: 0
  3276  00197C  D000               	goto	l1063
  3277  00197E                     l1063:
  3278                           
  3279                           ; BSR set to: 0
  3280  00197E  0100               	movlb	0	; () banked
  3281  001980  AF72               	btfss	___ftadd@sign& (0+255),7,b
  3282  001982  D012               	goto	l1072
  3283                           
  3284                           ; BSR set to: 0
  3285  001984  0EFF               	movlw	255
  3286  001986  0100               	movlb	0	; () banked
  3287  001988  1B69               	xorwf	___ftadd@f1& (0+255),f,b
  3288  00198A  0EFF               	movlw	255
  3289  00198C  0100               	movlb	0	; () banked
  3290  00198E  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3291  001990  0EFF               	movlw	255
  3292  001992  0100               	movlb	0	; () banked
  3293  001994  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3294  001996  0E01               	movlw	1
  3295  001998  0100               	movlb	0	; () banked
  3296  00199A  2769               	addwf	___ftadd@f1& (0+255),f,b
  3297  00199C  0E00               	movlw	0
  3298  00199E  0100               	movlb	0	; () banked
  3299  0019A0  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3300  0019A2  0E00               	movlw	0
  3301  0019A4  0100               	movlb	0	; () banked
  3302  0019A6  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3303  0019A8                     l1072:
  3304                           
  3305                           ; BSR set to: 0
  3306  0019A8  0100               	movlb	0	; () banked
  3307  0019AA  AD72               	btfss	___ftadd@sign& (0+255),6,b
  3308  0019AC  D013               	goto	l3875
  3309                           
  3310                           ; BSR set to: 0
  3311  0019AE  0EFF               	movlw	255
  3312  0019B0  0100               	movlb	0	; () banked
  3313  0019B2  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3314  0019B4  0EFF               	movlw	255
  3315  0019B6  0100               	movlb	0	; () banked
  3316  0019B8  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3317  0019BA  0EFF               	movlw	255
  3318  0019BC  0100               	movlb	0	; () banked
  3319  0019BE  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3320  0019C0  0E01               	movlw	1
  3321  0019C2  0100               	movlb	0	; () banked
  3322  0019C4  276C               	addwf	___ftadd@f2& (0+255),f,b
  3323  0019C6  0E00               	movlw	0
  3324  0019C8  0100               	movlb	0	; () banked
  3325  0019CA  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3326  0019CC  0E00               	movlw	0
  3327  0019CE  0100               	movlb	0	; () banked
  3328  0019D0  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3329  0019D2  D000               	goto	l3875
  3330  0019D4                     l3875:
  3331                           
  3332                           ; BSR set to: 0
  3333  0019D4  0E00               	movlw	0
  3334  0019D6  0100               	movlb	0	; () banked
  3335  0019D8  6F72               	movwf	___ftadd@sign& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338  0019DA  0100               	movlb	0	; () banked
  3339  0019DC  5169               	movf	___ftadd@f1& (0+255),w,b
  3340  0019DE  0100               	movlb	0	; () banked
  3341  0019E0  276C               	addwf	___ftadd@f2& (0+255),f,b
  3342  0019E2  0100               	movlb	0	; () banked
  3343  0019E4  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
  3344  0019E6  0100               	movlb	0	; () banked
  3345  0019E8  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3346  0019EA  0100               	movlb	0	; () banked
  3347  0019EC  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
  3348  0019EE  0100               	movlb	0	; () banked
  3349  0019F0  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3350                           
  3351                           ; BSR set to: 0
  3352  0019F2  0100               	movlb	0	; () banked
  3353  0019F4  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3354  0019F6  D016               	goto	l3885
  3355                           
  3356                           ; BSR set to: 0
  3357  0019F8  0EFF               	movlw	255
  3358  0019FA  0100               	movlb	0	; () banked
  3359  0019FC  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  3360  0019FE  0EFF               	movlw	255
  3361  001A00  0100               	movlb	0	; () banked
  3362  001A02  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3363  001A04  0EFF               	movlw	255
  3364  001A06  0100               	movlb	0	; () banked
  3365  001A08  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3366  001A0A  0E01               	movlw	1
  3367  001A0C  0100               	movlb	0	; () banked
  3368  001A0E  276C               	addwf	___ftadd@f2& (0+255),f,b
  3369  001A10  0E00               	movlw	0
  3370  001A12  0100               	movlb	0	; () banked
  3371  001A14  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3372  001A16  0E00               	movlw	0
  3373  001A18  0100               	movlb	0	; () banked
  3374  001A1A  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3375                           
  3376                           ; BSR set to: 0
  3377  001A1C  0E01               	movlw	1
  3378  001A1E  0100               	movlb	0	; () banked
  3379  001A20  6F72               	movwf	___ftadd@sign& (0+255),b
  3380  001A22  D000               	goto	l3885
  3381  001A24                     l3885:
  3382                           
  3383                           ; BSR set to: 0
  3384  001A24  C06C  F018         	movff	___ftadd@f2,___ftpack@arg
  3385  001A28  C06D  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  3386  001A2C  C06E  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  3387  001A30  C074  F01B         	movff	___ftadd@exp1,___ftpack@exp
  3388  001A34  C072  F01C         	movff	___ftadd@sign,___ftpack@sign
  3389  001A38  EC66  F010         	call	___ftpack	;wreg free
  3390  001A3C  C018  F069         	movff	?___ftpack,?___ftadd
  3391  001A40  C019  F06A         	movff	?___ftpack+1,?___ftadd+1
  3392  001A44  C01A  F06B         	movff	?___ftpack+2,?___ftadd+2
  3393  001A48  D000               	goto	l1049
  3394  001A4A                     l1049:
  3395  001A4A  0012               	return		;funcret
  3396  001A4C                     __end_of___ftadd:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1h	equ	0xFE2
  3409                           fsr1l	equ	0xFE1
  3410                           indf2	equ	0xFDF
  3411                           postinc2	equ	0xFDE
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function ___ftneg *****************
  3417 ;; Defined at:
  3418 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;  f1              3   23[COMRAM] float 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  3   23[COMRAM] float 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3432 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;Total ram usage:        3 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    4
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_calculatePID
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text7
  3447  002C7A                     __ptext7:
  3448                           	opt stack 0
  3449  002C7A                     ___ftneg:
  3450                           	opt stack 23
  3451                           
  3452                           ;incstack = 0
  3453  002C7A  5018               	movf	___ftneg@f1,w,c
  3454  002C7C  1019               	iorwf	___ftneg@f1+1,w,c
  3455  002C7E  101A               	iorwf	___ftneg@f1+2,w,c
  3456  002C80  B4D8               	btfsc	status,2,c
  3457  002C82  D006               	goto	l1105
  3458  002C84  0E00               	movlw	0
  3459  002C86  1A18               	xorwf	___ftneg@f1,f,c
  3460  002C88  0E00               	movlw	0
  3461  002C8A  1A19               	xorwf	___ftneg@f1+1,f,c
  3462  002C8C  0E80               	movlw	128
  3463  002C8E  1A1A               	xorwf	___ftneg@f1+2,f,c
  3464  002C90                     l1105:
  3465  002C90  C018  F018         	movff	___ftneg@f1,?___ftneg
  3466  002C94  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  3467  002C98  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  3468  002C9C  0012               	return		;funcret
  3469  002C9E                     __end_of___ftneg:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           fsr1h	equ	0xFE2
  3482                           fsr1l	equ	0xFE1
  3483                           indf2	equ	0xFDF
  3484                           postinc2	equ	0xFDE
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function ___ftge *****************
  3490 ;; Defined at:
  3491 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  ff1             3   23[COMRAM] float 
  3494 ;;  ff2             3   26[COMRAM] float 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;		None               void
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3506 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;Total ram usage:        9 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    4
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_calculatePID
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text8
  3521  00244A                     __ptext8:
  3522                           	opt stack 0
  3523  00244A                     ___ftge:
  3524                           	opt stack 23
  3525                           
  3526                           ;incstack = 0
  3527  00244A  AE1A               	btfss	___ftge@ff1+2,7,c
  3528  00244C  D017               	goto	l2851
  3529  00244E  C018  F01E         	movff	___ftge@ff1,??___ftge
  3530  002452  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  3531  002456  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  3532  00245A  1E1E               	comf	??___ftge,f,c
  3533  00245C  1E1F               	comf	??___ftge+1,f,c
  3534  00245E  1E20               	comf	??___ftge+2,f,c
  3535  002460  2A1E               	incf	??___ftge,f,c
  3536  002462  0E00               	movlw	0
  3537  002464  221F               	addwfc	??___ftge+1,f,c
  3538  002466  2220               	addwfc	??___ftge+2,f,c
  3539  002468  0E00               	movlw	0
  3540  00246A  241E               	addwf	??___ftge,w,c
  3541  00246C  6E18               	movwf	___ftge@ff1,c
  3542  00246E  0E00               	movlw	0
  3543  002470  201F               	addwfc	??___ftge+1,w,c
  3544  002472  6E19               	movwf	___ftge@ff1+1,c
  3545  002474  0E80               	movlw	128
  3546  002476  2020               	addwfc	??___ftge+2,w,c
  3547  002478  6E1A               	movwf	___ftge@ff1+2,c
  3548  00247A  D000               	goto	l2851
  3549  00247C                     l2851:
  3550  00247C  AE1D               	btfss	___ftge@ff2+2,7,c
  3551  00247E  D017               	goto	l2855
  3552  002480  C01B  F01E         	movff	___ftge@ff2,??___ftge
  3553  002484  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  3554  002488  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  3555  00248C  1E1E               	comf	??___ftge,f,c
  3556  00248E  1E1F               	comf	??___ftge+1,f,c
  3557  002490  1E20               	comf	??___ftge+2,f,c
  3558  002492  2A1E               	incf	??___ftge,f,c
  3559  002494  0E00               	movlw	0
  3560  002496  221F               	addwfc	??___ftge+1,f,c
  3561  002498  2220               	addwfc	??___ftge+2,f,c
  3562  00249A  0E00               	movlw	0
  3563  00249C  241E               	addwf	??___ftge,w,c
  3564  00249E  6E1B               	movwf	___ftge@ff2,c
  3565  0024A0  0E00               	movlw	0
  3566  0024A2  201F               	addwfc	??___ftge+1,w,c
  3567  0024A4  6E1C               	movwf	___ftge@ff2+1,c
  3568  0024A6  0E80               	movlw	128
  3569  0024A8  2020               	addwfc	??___ftge+2,w,c
  3570  0024AA  6E1D               	movwf	___ftge@ff2+2,c
  3571  0024AC  D000               	goto	l2855
  3572  0024AE                     l2855:
  3573  0024AE  0E00               	movlw	0
  3574  0024B0  1A18               	xorwf	___ftge@ff1,f,c
  3575  0024B2  0E00               	movlw	0
  3576  0024B4  1A19               	xorwf	___ftge@ff1+1,f,c
  3577  0024B6  0E80               	movlw	128
  3578  0024B8  1A1A               	xorwf	___ftge@ff1+2,f,c
  3579  0024BA  0E00               	movlw	0
  3580  0024BC  1A1B               	xorwf	___ftge@ff2,f,c
  3581  0024BE  0E00               	movlw	0
  3582  0024C0  1A1C               	xorwf	___ftge@ff2+1,f,c
  3583  0024C2  0E80               	movlw	128
  3584  0024C4  1A1D               	xorwf	___ftge@ff2+2,f,c
  3585  0024C6  501B               	movf	___ftge@ff2,w,c
  3586  0024C8  5C18               	subwf	___ftge@ff1,w,c
  3587  0024CA  501C               	movf	___ftge@ff2+1,w,c
  3588  0024CC  5819               	subwfb	___ftge@ff1+1,w,c
  3589  0024CE  501D               	movf	___ftge@ff2+2,w,c
  3590  0024D0  581A               	subwfb	___ftge@ff1+2,w,c
  3591  0024D2  B0D8               	btfsc	status,0,c
  3592  0024D4  D002               	goto	l2861
  3593  0024D6  90D8               	bcf	status,0,c
  3594  0024D8  D002               	goto	l1089
  3595  0024DA                     l2861:
  3596  0024DA  80D8               	bsf	status,0,c
  3597  0024DC  D000               	goto	l1089
  3598  0024DE                     l1089:
  3599  0024DE  0012               	return		;funcret
  3600  0024E0                     __end_of___ftge:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           postdec1	equ	0xFE5
  3612                           fsr1h	equ	0xFE2
  3613                           fsr1l	equ	0xFE1
  3614                           indf2	equ	0xFDF
  3615                           postinc2	equ	0xFDE
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8
  3619                           
  3620 ;; *************** function ___ftdiv *****************
  3621 ;; Defined at:
  3622 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  f1              3   31[COMRAM] float 
  3625 ;;  f2              3   34[COMRAM] float 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  f3              3   41[COMRAM] float 
  3628 ;;  sign            1   45[COMRAM] unsigned char 
  3629 ;;  exp             1   44[COMRAM] unsigned char 
  3630 ;;  cntr            1   40[COMRAM] unsigned char 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  3   31[COMRAM] float 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3640 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;Total ram usage:       15 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    5
  3647 ;; This function calls:
  3648 ;;		___ftpack
  3649 ;; This function is called by:
  3650 ;;		_calculatePID
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text9
  3655  001F0A                     __ptext9:
  3656                           	opt stack 0
  3657  001F0A                     ___ftdiv:
  3658                           	opt stack 22
  3659                           
  3660                           ;incstack = 0
  3661  001F0A  C022  F026         	movff	___ftdiv@f1+2,??___ftdiv
  3662  001F0E  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3663  001F10  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3664  001F12  3421               	rlcf	___ftdiv@f1+1,w,c
  3665  001F14  3626               	rlcf	??___ftdiv& (0+255),f,c
  3666  001F16  E301               	bnc	u3321
  3667  001F18  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3668  001F1A                     u3321:
  3669  001F1A  5026               	movf	??___ftdiv,w,c
  3670  001F1C  6E2D               	movwf	___ftdiv@exp,c
  3671  001F1E  502D               	movf	___ftdiv@exp,w,c
  3672  001F20  A4D8               	btfss	status,2,c
  3673  001F22  D002               	goto	l3899
  3674  001F24  D00E               	goto	l3901
  3675  001F26  D061               	goto	l1080
  3676  001F28                     l3899:
  3677  001F28  C025  F026         	movff	___ftdiv@f2+2,??___ftdiv
  3678  001F2C  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  3679  001F2E  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  3680  001F30  3424               	rlcf	___ftdiv@f2+1,w,c
  3681  001F32  3626               	rlcf	??___ftdiv& (0+255),f,c
  3682  001F34  E301               	bnc	u3341
  3683  001F36  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  3684  001F38                     u3341:
  3685  001F38  5026               	movf	??___ftdiv,w,c
  3686  001F3A  6E2E               	movwf	___ftdiv@sign,c
  3687  001F3C  502E               	movf	___ftdiv@sign,w,c
  3688  001F3E  A4D8               	btfss	status,2,c
  3689  001F40  D007               	goto	l3905
  3690  001F42                     l3901:
  3691  001F42  0E00               	movlw	0
  3692  001F44  6E20               	movwf	?___ftdiv,c
  3693  001F46  0E00               	movlw	0
  3694  001F48  6E21               	movwf	?___ftdiv+1,c
  3695  001F4A  0E00               	movlw	0
  3696  001F4C  6E22               	movwf	?___ftdiv+2,c
  3697  001F4E  D04D               	goto	l1080
  3698  001F50                     l3905:
  3699  001F50  0E00               	movlw	0
  3700  001F52  6E2A               	movwf	___ftdiv@f3,c
  3701  001F54  0E00               	movlw	0
  3702  001F56  6E2B               	movwf	___ftdiv@f3+1,c
  3703  001F58  0E00               	movlw	0
  3704  001F5A  6E2C               	movwf	___ftdiv@f3+2,c
  3705  001F5C  502E               	movf	___ftdiv@sign,w,c
  3706  001F5E  0F89               	addlw	137
  3707  001F60  5E2D               	subwf	___ftdiv@exp,f,c
  3708  001F62  C022  F02E         	movff	___ftdiv@f1+2,___ftdiv@sign
  3709  001F66  5025               	movf	___ftdiv@f2+2,w,c
  3710  001F68  1A2E               	xorwf	___ftdiv@sign,f,c
  3711  001F6A  0E80               	movlw	128
  3712  001F6C  162E               	andwf	___ftdiv@sign,f,c
  3713  001F6E  8E21               	bsf	___ftdiv@f1+1,7,c
  3714  001F70  0EFF               	movlw	255
  3715  001F72  1620               	andwf	___ftdiv@f1,f,c
  3716  001F74  0EFF               	movlw	255
  3717  001F76  1621               	andwf	___ftdiv@f1+1,f,c
  3718  001F78  0E00               	movlw	0
  3719  001F7A  1622               	andwf	___ftdiv@f1+2,f,c
  3720  001F7C  8E24               	bsf	___ftdiv@f2+1,7,c
  3721  001F7E  0EFF               	movlw	255
  3722  001F80  1623               	andwf	___ftdiv@f2,f,c
  3723  001F82  0EFF               	movlw	255
  3724  001F84  1624               	andwf	___ftdiv@f2+1,f,c
  3725  001F86  0E00               	movlw	0
  3726  001F88  1625               	andwf	___ftdiv@f2+2,f,c
  3727  001F8A  0E18               	movlw	24
  3728  001F8C  6E29               	movwf	___ftdiv@cntr,c
  3729  001F8E  D000               	goto	l3925
  3730  001F90                     l3925:
  3731  001F90  90D8               	bcf	status,0,c
  3732  001F92  362A               	rlcf	___ftdiv@f3,f,c
  3733  001F94  362B               	rlcf	___ftdiv@f3+1,f,c
  3734  001F96  362C               	rlcf	___ftdiv@f3+2,f,c
  3735  001F98  5023               	movf	___ftdiv@f2,w,c
  3736  001F9A  5C20               	subwf	___ftdiv@f1,w,c
  3737  001F9C  5024               	movf	___ftdiv@f2+1,w,c
  3738  001F9E  5821               	subwfb	___ftdiv@f1+1,w,c
  3739  001FA0  5025               	movf	___ftdiv@f2+2,w,c
  3740  001FA2  5822               	subwfb	___ftdiv@f1+2,w,c
  3741  001FA4  A0D8               	btfss	status,0,c
  3742  001FA6  D007               	goto	l1083
  3743  001FA8  5023               	movf	___ftdiv@f2,w,c
  3744  001FAA  5E20               	subwf	___ftdiv@f1,f,c
  3745  001FAC  5024               	movf	___ftdiv@f2+1,w,c
  3746  001FAE  5A21               	subwfb	___ftdiv@f1+1,f,c
  3747  001FB0  5025               	movf	___ftdiv@f2+2,w,c
  3748  001FB2  5A22               	subwfb	___ftdiv@f1+2,f,c
  3749  001FB4  802A               	bsf	___ftdiv@f3,0,c
  3750  001FB6                     l1083:
  3751  001FB6  90D8               	bcf	status,0,c
  3752  001FB8  3620               	rlcf	___ftdiv@f1,f,c
  3753  001FBA  3621               	rlcf	___ftdiv@f1+1,f,c
  3754  001FBC  3622               	rlcf	___ftdiv@f1+2,f,c
  3755  001FBE  2E29               	decfsz	___ftdiv@cntr,f,c
  3756  001FC0  D7E7               	goto	l3925
  3757  001FC2  D000               	goto	l3935
  3758  001FC4                     l3935:
  3759  001FC4  C02A  F018         	movff	___ftdiv@f3,___ftpack@arg
  3760  001FC8  C02B  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3761  001FCC  C02C  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3762  001FD0  C02D  F01B         	movff	___ftdiv@exp,___ftpack@exp
  3763  001FD4  C02E  F01C         	movff	___ftdiv@sign,___ftpack@sign
  3764  001FD8  EC66  F010         	call	___ftpack	;wreg free
  3765  001FDC  C018  F020         	movff	?___ftpack,?___ftdiv
  3766  001FE0  C019  F021         	movff	?___ftpack+1,?___ftdiv+1
  3767  001FE4  C01A  F022         	movff	?___ftpack+2,?___ftdiv+2
  3768  001FE8  D000               	goto	l1080
  3769  001FEA                     l1080:
  3770  001FEA  0012               	return		;funcret
  3771  001FEC                     __end_of___ftdiv:
  3772                           	opt stack 0
  3773                           tblptru	equ	0xFF8
  3774                           tblptrh	equ	0xFF7
  3775                           tblptrl	equ	0xFF6
  3776                           tablat	equ	0xFF5
  3777                           prodh	equ	0xFF4
  3778                           prodl	equ	0xFF3
  3779                           intcon	equ	0xFF2
  3780                           postinc0	equ	0xFEE
  3781                           wreg	equ	0xFE8
  3782                           postdec1	equ	0xFE5
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           indf2	equ	0xFDF
  3786                           postinc2	equ	0xFDE
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _ReadRTDpos *****************
  3792 ;; Defined at:
  3793 ;;		line 39 in file "ResolverToDigital.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;		None
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  FullPosition    2   31[COMRAM] unsigned int 
  3798 ;;  helloworld      2    0        unsigned int 
  3799 ;;  x               1   33[COMRAM] unsigned char 
  3800 ;;  LowPosition     1   30[COMRAM] unsigned char 
  3801 ;;  HighPosition    1   29[COMRAM] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  2   24[COMRAM] unsigned int 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:       10 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    5
  3818 ;; This function calls:
  3819 ;;		_Delay10TCYx
  3820 ;; This function is called by:
  3821 ;;		_main
  3822 ;;		_ZeroMotors
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text10
  3827  00262E                     __ptext10:
  3828                           	opt stack 0
  3829  00262E                     _ReadRTDpos:
  3830                           	opt stack 23
  3831                           
  3832                           ;ResolverToDigital.c: 41: unsigned char x;
  3833                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  3834                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  3835                           ;ResolverToDigital.c: 48: {
  3836                           ;ResolverToDigital.c: 49: INTCONbits.GIE = 0;
  3837                           
  3838                           ;incstack = 0
  3839  00262E  9EF2               	bcf	intcon,7,c	;volatile
  3840                           
  3841                           ;ResolverToDigital.c: 50: PORTEbits.RE1 = 1;
  3842  002630  8284               	bsf	3972,1,c	;volatile
  3843                           
  3844                           ;ResolverToDigital.c: 51: PORTEbits.RE0 = 0;
  3845  002632  9084               	bcf	3972,0,c	;volatile
  3846                           
  3847                           ;ResolverToDigital.c: 52: for (x = 0; x < 8; x++)
  3848  002634  0E00               	movlw	0
  3849  002636  6E22               	movwf	ReadRTDpos@x,c
  3850  002638  D003               	goto	l2981
  3851  00263A  D005               	goto	l188
  3852  00263C                     l187:
  3853                           
  3854                           ;ResolverToDigital.c: 53: __nop();
  3855  00263C  F000               	nop	
  3856  00263E  2A22               	incf	ReadRTDpos@x,f,c
  3857  002640                     l2981:
  3858  002640  0E07               	movlw	7
  3859  002642  6422               	cpfsgt	ReadRTDpos@x,c
  3860  002644  D7FB               	goto	l187
  3861  002646                     l188:
  3862                           
  3863                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 1;
  3864  002646  8484               	bsf	3972,2,c	;volatile
  3865                           
  3866                           ;ResolverToDigital.c: 55: PORTEbits.RE2 = 0;
  3867  002648  9484               	bcf	3972,2,c	;volatile
  3868                           
  3869                           ;ResolverToDigital.c: 56: Delay10TCYx(1);
  3870  00264A  0E01               	movlw	1
  3871  00264C  ECE3  F016         	call	_Delay10TCYx
  3872                           
  3873                           ;ResolverToDigital.c: 57: HighPosition = PORTH;
  3874  002650  CF87 F01E          	movff	3975,ReadRTDpos@HighPosition	;volatile
  3875                           
  3876                           ;ResolverToDigital.c: 58: LowPosition = PORTD;
  3877  002654  CF83 F01F          	movff	3971,ReadRTDpos@LowPosition	;volatile
  3878                           
  3879                           ;ResolverToDigital.c: 59: PORTEbits.RE2 = 1;
  3880  002658  8484               	bsf	3972,2,c	;volatile
  3881                           
  3882                           ;ResolverToDigital.c: 60: PORTEbits.RE0 = 1;
  3883  00265A  8084               	bsf	3972,0,c	;volatile
  3884                           
  3885                           ;ResolverToDigital.c: 61: FullPosition = LowPosition;
  3886  00265C  C01F  F020         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  3887  002660  6A21               	clrf	ReadRTDpos@FullPosition+1,c
  3888                           
  3889                           ;ResolverToDigital.c: 62: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  3890  002662  C01E  F01B         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  3891  002666  0E0F               	movlw	15
  3892  002668  161B               	andwf	??_ReadRTDpos,f,c
  3893  00266A  501B               	movf	??_ReadRTDpos,w,c
  3894  00266C  6E1D               	movwf	(??_ReadRTDpos+2)& (0+255),c
  3895  00266E  6A1C               	clrf	(??_ReadRTDpos+1)& (0+255),c
  3896  002670  5020               	movf	ReadRTDpos@FullPosition,w,c
  3897  002672  101C               	iorwf	??_ReadRTDpos+1,w,c
  3898  002674  6E20               	movwf	ReadRTDpos@FullPosition,c
  3899  002676  5021               	movf	ReadRTDpos@FullPosition+1,w,c
  3900  002678  101D               	iorwf	??_ReadRTDpos+2,w,c
  3901  00267A  6E21               	movwf	ReadRTDpos@FullPosition+1,c
  3902                           
  3903                           ;ResolverToDigital.c: 63: INTCONbits.GIE = 1;
  3904  00267C  8EF2               	bsf	intcon,7,c	;volatile
  3905                           
  3906                           ;ResolverToDigital.c: 64: return FullPosition;
  3907  00267E  C020  F019         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  3908  002682  C021  F01A         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  3909  002686  D000               	goto	l189
  3910  002688                     l189:
  3911  002688  0012               	return		;funcret
  3912  00268A                     __end_of_ReadRTDpos:
  3913                           	opt stack 0
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           postinc0	equ	0xFEE
  3922                           wreg	equ	0xFE8
  3923                           postdec1	equ	0xFE5
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _RTD2Angle *****************
  3933 ;; Defined at:
  3934 ;;		line 99 in file "ResolverToDigital.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  RTDAngle        2    9[BANK0 ] unsigned int 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  3    9[BANK0 ] unsigned int 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3948 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;Total ram usage:        3 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    6
  3955 ;; This function calls:
  3956 ;;		___ftmul
  3957 ;;		___lwtoft
  3958 ;; This function is called by:
  3959 ;;		_main
  3960 ;;		_ZeroMotors
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text11
  3965  002A54                     __ptext11:
  3966                           	opt stack 0
  3967  002A54                     _RTD2Angle:
  3968                           	opt stack 22
  3969                           
  3970                           ;ResolverToDigital.c: 101: return 0.087890625 * RTDAngle;
  3971                           
  3972                           ;incstack = 0
  3973  002A54  C069  F020         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  3974  002A58  C06A  F021         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  3975  002A5C  EC17  F016         	call	___lwtoft	;wreg free
  3976  002A60  C020  F02F         	movff	?___lwtoft,___ftmul@f1
  3977  002A64  C021  F030         	movff	?___lwtoft+1,___ftmul@f1+1
  3978  002A68  C022  F031         	movff	?___lwtoft+2,___ftmul@f1+2
  3979  002A6C  0E00               	movlw	0
  3980  002A6E  6E32               	movwf	___ftmul@f2,c
  3981  002A70  0EB4               	movlw	180
  3982  002A72  6E33               	movwf	___ftmul@f2+1,c
  3983  002A74  0E3D               	movlw	61
  3984  002A76  6E34               	movwf	___ftmul@f2+2,c
  3985  002A78  EC59  F00E         	call	___ftmul	;wreg free
  3986  002A7C  C02F  F069         	movff	?___ftmul,?_RTD2Angle
  3987  002A80  C030  F06A         	movff	?___ftmul+1,?_RTD2Angle+1
  3988  002A84  C031  F06B         	movff	?___ftmul+2,?_RTD2Angle+2
  3989  002A88  D000               	goto	l197
  3990  002A8A                     l197:
  3991  002A8A  0012               	return		;funcret
  3992  002A8C                     __end_of_RTD2Angle:
  3993                           	opt stack 0
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1h	equ	0xFE2
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           status	equ	0xFD8
  4011                           
  4012 ;; *************** function ___lwtoft *****************
  4013 ;; Defined at:
  4014 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  c               2   31[COMRAM] unsigned int 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  3   31[COMRAM] float 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4028 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;Total ram usage:        3 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    5
  4035 ;; This function calls:
  4036 ;;		___ftpack
  4037 ;; This function is called by:
  4038 ;;		_RTD2Angle
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text12
  4043  002C2E                     __ptext12:
  4044                           	opt stack 0
  4045  002C2E                     ___lwtoft:
  4046                           	opt stack 22
  4047                           
  4048                           ;incstack = 0
  4049  002C2E  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  4050  002C32  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  4051  002C36  6A1A               	clrf	___ftpack@arg+2,c
  4052  002C38  0E8E               	movlw	142
  4053  002C3A  6E1B               	movwf	___ftpack@exp,c
  4054  002C3C  0E00               	movlw	0
  4055  002C3E  6E1C               	movwf	___ftpack@sign,c
  4056  002C40  EC66  F010         	call	___ftpack	;wreg free
  4057  002C44  C018  F020         	movff	?___ftpack,?___lwtoft
  4058  002C48  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  4059  002C4C  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  4060  002C50  D000               	goto	l1245
  4061  002C52                     l1245:
  4062  002C52  0012               	return		;funcret
  4063  002C54                     __end_of___lwtoft:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           intcon	equ	0xFF2
  4072                           postinc0	equ	0xFEE
  4073                           wreg	equ	0xFE8
  4074                           postdec1	equ	0xFE5
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function ___ftmul *****************
  4084 ;; Defined at:
  4085 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  f1              3   46[COMRAM] float 
  4088 ;;  f2              3   49[COMRAM] float 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  4091 ;;  sign            1    8[BANK0 ] unsigned char 
  4092 ;;  cntr            1    7[BANK0 ] unsigned char 
  4093 ;;  exp             1    3[BANK0 ] unsigned char 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  3   46[COMRAM] float 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2, status,0, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4103 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;Total ram usage:       15 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    5
  4110 ;; This function calls:
  4111 ;;		___ftpack
  4112 ;; This function is called by:
  4113 ;;		_calculatePID
  4114 ;;		_RTD2Angle
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text13
  4119  001CB2                     __ptext13:
  4120                           	opt stack 0
  4121  001CB2                     ___ftmul:
  4122                           	opt stack 22
  4123                           
  4124                           ;incstack = 0
  4125  001CB2  C031  F060         	movff	___ftmul@f1+2,??___ftmul
  4126  001CB6  0100               	movlb	0	; () banked
  4127  001CB8  6B61               	clrf	(??___ftmul+1)& (0+255),b
  4128  001CBA  6B62               	clrf	(??___ftmul+2)& (0+255),b
  4129  001CBC  3430               	rlcf	___ftmul@f1+1,w,c
  4130  001CBE  0100               	movlb	0	; () banked
  4131  001CC0  3760               	rlcf	??___ftmul& (0+255),f,b
  4132  001CC2  E301               	bnc	u3371
  4133  001CC4  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  4134  001CC6                     u3371:
  4135  001CC6  0100               	movlb	0	; () banked
  4136  001CC8  5160               	movf	??___ftmul& (0+255),w,b
  4137  001CCA  0100               	movlb	0	; () banked
  4138  001CCC  6F63               	movwf	___ftmul@exp& (0+255),b
  4139  001CCE  0100               	movlb	0	; () banked
  4140  001CD0  5163               	movf	___ftmul@exp& (0+255),w,b
  4141  001CD2  A4D8               	btfss	status,2,c
  4142  001CD4  D002               	goto	l3945
  4143  001CD6  D013               	goto	l3947
  4144                           
  4145                           ; BSR set to: 0
  4146                           
  4147                           ; BSR set to: 0
  4148  001CD8  D083               	goto	l1095
  4149  001CDA                     l3945:
  4150                           
  4151                           ; BSR set to: 0
  4152  001CDA  C034  F060         	movff	___ftmul@f2+2,??___ftmul
  4153  001CDE  0100               	movlb	0	; () banked
  4154  001CE0  6B61               	clrf	(??___ftmul+1)& (0+255),b
  4155  001CE2  6B62               	clrf	(??___ftmul+2)& (0+255),b
  4156  001CE4  3433               	rlcf	___ftmul@f2+1,w,c
  4157  001CE6  0100               	movlb	0	; () banked
  4158  001CE8  3760               	rlcf	??___ftmul& (0+255),f,b
  4159  001CEA  E301               	bnc	u3391
  4160  001CEC  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  4161  001CEE                     u3391:
  4162  001CEE  0100               	movlb	0	; () banked
  4163  001CF0  5160               	movf	??___ftmul& (0+255),w,b
  4164  001CF2  0100               	movlb	0	; () banked
  4165  001CF4  6F68               	movwf	___ftmul@sign& (0+255),b
  4166  001CF6  0100               	movlb	0	; () banked
  4167  001CF8  5168               	movf	___ftmul@sign& (0+255),w,b
  4168  001CFA  A4D8               	btfss	status,2,c
  4169  001CFC  D007               	goto	l3951
  4170  001CFE                     l3947:
  4171                           
  4172                           ; BSR set to: 0
  4173  001CFE  0E00               	movlw	0
  4174  001D00  6E2F               	movwf	?___ftmul,c
  4175  001D02  0E00               	movlw	0
  4176  001D04  6E30               	movwf	?___ftmul+1,c
  4177  001D06  0E00               	movlw	0
  4178  001D08  6E31               	movwf	?___ftmul+2,c
  4179                           
  4180                           ; BSR set to: 0
  4181  001D0A  D06A               	goto	l1095
  4182  001D0C                     l3951:
  4183                           
  4184                           ; BSR set to: 0
  4185  001D0C  0100               	movlb	0	; () banked
  4186  001D0E  5168               	movf	___ftmul@sign& (0+255),w,b
  4187  001D10  0F7B               	addlw	123
  4188  001D12  0100               	movlb	0	; () banked
  4189  001D14  2763               	addwf	___ftmul@exp& (0+255),f,b
  4190                           
  4191                           ; BSR set to: 0
  4192  001D16  C031  F068         	movff	___ftmul@f1+2,___ftmul@sign
  4193  001D1A  5034               	movf	___ftmul@f2+2,w,c
  4194  001D1C  0100               	movlb	0	; () banked
  4195  001D1E  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  4196  001D20  0E80               	movlw	128
  4197  001D22  0100               	movlb	0	; () banked
  4198  001D24  1768               	andwf	___ftmul@sign& (0+255),f,b
  4199                           
  4200                           ; BSR set to: 0
  4201  001D26  8E30               	bsf	___ftmul@f1+1,7,c
  4202                           
  4203                           ; BSR set to: 0
  4204  001D28  8E33               	bsf	___ftmul@f2+1,7,c
  4205                           
  4206                           ; BSR set to: 0
  4207  001D2A  0EFF               	movlw	255
  4208  001D2C  1632               	andwf	___ftmul@f2,f,c
  4209  001D2E  0EFF               	movlw	255
  4210  001D30  1633               	andwf	___ftmul@f2+1,f,c
  4211  001D32  0E00               	movlw	0
  4212  001D34  1634               	andwf	___ftmul@f2+2,f,c
  4213                           
  4214                           ; BSR set to: 0
  4215  001D36  0E00               	movlw	0
  4216  001D38  0100               	movlb	0	; () banked
  4217  001D3A  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  4218  001D3C  0E00               	movlw	0
  4219  001D3E  0100               	movlb	0	; () banked
  4220  001D40  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4221  001D42  0E00               	movlw	0
  4222  001D44  0100               	movlb	0	; () banked
  4223  001D46  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4224                           
  4225                           ; BSR set to: 0
  4226  001D48  0E07               	movlw	7
  4227  001D4A  0100               	movlb	0	; () banked
  4228  001D4C  6F67               	movwf	___ftmul@cntr& (0+255),b
  4229  001D4E  D000               	goto	l3965
  4230  001D50                     l3965:
  4231                           
  4232                           ; BSR set to: 0
  4233  001D50  A02F               	btfss	___ftmul@f1,0,c
  4234  001D52  D00A               	goto	l3969
  4235                           
  4236                           ; BSR set to: 0
  4237  001D54  5032               	movf	___ftmul@f2,w,c
  4238  001D56  0100               	movlb	0	; () banked
  4239  001D58  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4240  001D5A  5033               	movf	___ftmul@f2+1,w,c
  4241  001D5C  0100               	movlb	0	; () banked
  4242  001D5E  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4243  001D60  5034               	movf	___ftmul@f2+2,w,c
  4244  001D62  0100               	movlb	0	; () banked
  4245  001D64  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4246  001D66  D000               	goto	l3969
  4247  001D68                     l3969:
  4248                           
  4249                           ; BSR set to: 0
  4250  001D68  90D8               	bcf	status,0,c
  4251  001D6A  3231               	rrcf	___ftmul@f1+2,f,c
  4252  001D6C  3230               	rrcf	___ftmul@f1+1,f,c
  4253  001D6E  322F               	rrcf	___ftmul@f1,f,c
  4254  001D70  90D8               	bcf	status,0,c
  4255  001D72  3632               	rlcf	___ftmul@f2,f,c
  4256  001D74  3633               	rlcf	___ftmul@f2+1,f,c
  4257  001D76  3634               	rlcf	___ftmul@f2+2,f,c
  4258                           
  4259                           ; BSR set to: 0
  4260  001D78  0100               	movlb	0	; () banked
  4261  001D7A  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  4262  001D7C  D7E9               	goto	l3965
  4263  001D7E  D000               	goto	l3973
  4264  001D80                     l3973:
  4265                           
  4266                           ; BSR set to: 0
  4267  001D80  0E09               	movlw	9
  4268  001D82  0100               	movlb	0	; () banked
  4269  001D84  6F67               	movwf	___ftmul@cntr& (0+255),b
  4270  001D86  D000               	goto	l3975
  4271  001D88                     l3975:
  4272                           
  4273                           ; BSR set to: 0
  4274  001D88  A02F               	btfss	___ftmul@f1,0,c
  4275  001D8A  D00A               	goto	l3979
  4276                           
  4277                           ; BSR set to: 0
  4278  001D8C  5032               	movf	___ftmul@f2,w,c
  4279  001D8E  0100               	movlb	0	; () banked
  4280  001D90  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4281  001D92  5033               	movf	___ftmul@f2+1,w,c
  4282  001D94  0100               	movlb	0	; () banked
  4283  001D96  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4284  001D98  5034               	movf	___ftmul@f2+2,w,c
  4285  001D9A  0100               	movlb	0	; () banked
  4286  001D9C  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4287  001D9E  D000               	goto	l3979
  4288  001DA0                     l3979:
  4289                           
  4290                           ; BSR set to: 0
  4291  001DA0  90D8               	bcf	status,0,c
  4292  001DA2  3231               	rrcf	___ftmul@f1+2,f,c
  4293  001DA4  3230               	rrcf	___ftmul@f1+1,f,c
  4294  001DA6  322F               	rrcf	___ftmul@f1,f,c
  4295  001DA8  0100               	movlb	0	; () banked
  4296  001DAA  90D8               	bcf	status,0,c
  4297  001DAC  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4298  001DAE  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4299  001DB0  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4300                           
  4301                           ; BSR set to: 0
  4302  001DB2  0100               	movlb	0	; () banked
  4303  001DB4  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  4304  001DB6  D7E8               	goto	l3975
  4305  001DB8  D000               	goto	l3983
  4306  001DBA                     l3983:
  4307                           
  4308                           ; BSR set to: 0
  4309  001DBA  C064  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  4310  001DBE  C065  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4311  001DC2  C066  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4312  001DC6  C063  F01B         	movff	___ftmul@exp,___ftpack@exp
  4313  001DCA  C068  F01C         	movff	___ftmul@sign,___ftpack@sign
  4314  001DCE  EC66  F010         	call	___ftpack	;wreg free
  4315  001DD2  C018  F02F         	movff	?___ftpack,?___ftmul
  4316  001DD6  C019  F030         	movff	?___ftpack+1,?___ftmul+1
  4317  001DDA  C01A  F031         	movff	?___ftpack+2,?___ftmul+2
  4318  001DDE  D000               	goto	l1095
  4319  001DE0                     l1095:
  4320  001DE0  0012               	return		;funcret
  4321  001DE2                     __end_of___ftmul:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           intcon	equ	0xFF2
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           postdec1	equ	0xFE5
  4333                           fsr1h	equ	0xFE2
  4334                           fsr1l	equ	0xFE1
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function ___ftpack *****************
  4342 ;; Defined at:
  4343 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  arg             3   23[COMRAM] unsigned um
  4346 ;;  exp             1   26[COMRAM] unsigned char 
  4347 ;;  sign            1   27[COMRAM] unsigned char 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;		None
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  3   23[COMRAM] float 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4359 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;Total ram usage:        8 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    4
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		___ftadd
  4370 ;;		___ftdiv
  4371 ;;		___ftmul
  4372 ;;		___lwtoft
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text14
  4377  0020CC                     __ptext14:
  4378                           	opt stack 0
  4379  0020CC                     ___ftpack:
  4380                           	opt stack 21
  4381                           
  4382                           ;incstack = 0
  4383  0020CC  501B               	movf	___ftpack@exp,w,c
  4384  0020CE  B4D8               	btfsc	status,2,c
  4385  0020D0  D005               	goto	l3787
  4386  0020D2  5018               	movf	___ftpack@arg,w,c
  4387  0020D4  1019               	iorwf	___ftpack@arg+1,w,c
  4388  0020D6  101A               	iorwf	___ftpack@arg+2,w,c
  4389  0020D8  A4D8               	btfss	status,2,c
  4390  0020DA  D00E               	goto	l3793
  4391  0020DC                     l3787:
  4392  0020DC  0E00               	movlw	0
  4393  0020DE  6E18               	movwf	?___ftpack,c
  4394  0020E0  0E00               	movlw	0
  4395  0020E2  6E19               	movwf	?___ftpack+1,c
  4396  0020E4  0E00               	movlw	0
  4397  0020E6  6E1A               	movwf	?___ftpack+2,c
  4398  0020E8  D053               	goto	l1008
  4399  0020EA  D006               	goto	l3793
  4400  0020EC                     l3791:
  4401  0020EC  2A1B               	incf	___ftpack@exp,f,c
  4402  0020EE  90D8               	bcf	status,0,c
  4403  0020F0  321A               	rrcf	___ftpack@arg+2,f,c
  4404  0020F2  3219               	rrcf	___ftpack@arg+1,f,c
  4405  0020F4  3218               	rrcf	___ftpack@arg,f,c
  4406  0020F6  D000               	goto	l3793
  4407  0020F8                     l3793:
  4408  0020F8  0E00               	movlw	0
  4409  0020FA  1418               	andwf	___ftpack@arg,w,c
  4410  0020FC  6E1D               	movwf	??___ftpack& (0+255),c
  4411  0020FE  0E00               	movlw	0
  4412  002100  1419               	andwf	___ftpack@arg+1,w,c
  4413  002102  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4414  002104  0EFE               	movlw	254
  4415  002106  141A               	andwf	___ftpack@arg+2,w,c
  4416  002108  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4417  00210A  501D               	movf	??___ftpack,w,c
  4418  00210C  101E               	iorwf	??___ftpack+1,w,c
  4419  00210E  101F               	iorwf	??___ftpack+2,w,c
  4420  002110  B4D8               	btfsc	status,2,c
  4421  002112  D00E               	goto	l3799
  4422  002114  D7EB               	goto	l3791
  4423  002116  D00C               	goto	l3799
  4424  002118                     l3795:
  4425  002118  2A1B               	incf	___ftpack@exp,f,c
  4426  00211A  0E01               	movlw	1
  4427  00211C  2618               	addwf	___ftpack@arg,f,c
  4428  00211E  0E00               	movlw	0
  4429  002120  2219               	addwfc	___ftpack@arg+1,f,c
  4430  002122  0E00               	movlw	0
  4431  002124  221A               	addwfc	___ftpack@arg+2,f,c
  4432  002126  90D8               	bcf	status,0,c
  4433  002128  321A               	rrcf	___ftpack@arg+2,f,c
  4434  00212A  3219               	rrcf	___ftpack@arg+1,f,c
  4435  00212C  3218               	rrcf	___ftpack@arg,f,c
  4436  00212E  D000               	goto	l3799
  4437  002130                     l3799:
  4438  002130  0E00               	movlw	0
  4439  002132  1418               	andwf	___ftpack@arg,w,c
  4440  002134  6E1D               	movwf	??___ftpack& (0+255),c
  4441  002136  0E00               	movlw	0
  4442  002138  1419               	andwf	___ftpack@arg+1,w,c
  4443  00213A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  4444  00213C  0EFF               	movlw	255
  4445  00213E  141A               	andwf	___ftpack@arg+2,w,c
  4446  002140  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  4447  002142  501D               	movf	??___ftpack,w,c
  4448  002144  101E               	iorwf	??___ftpack+1,w,c
  4449  002146  101F               	iorwf	??___ftpack+2,w,c
  4450  002148  B4D8               	btfsc	status,2,c
  4451  00214A  D008               	goto	l3803
  4452  00214C  D7E5               	goto	l3795
  4453  00214E  D006               	goto	l3803
  4454  002150                     l3801:
  4455  002150  061B               	decf	___ftpack@exp,f,c
  4456  002152  90D8               	bcf	status,0,c
  4457  002154  3618               	rlcf	___ftpack@arg,f,c
  4458  002156  3619               	rlcf	___ftpack@arg+1,f,c
  4459  002158  361A               	rlcf	___ftpack@arg+2,f,c
  4460  00215A  D000               	goto	l3803
  4461  00215C                     l3803:
  4462  00215C  BE19               	btfsc	___ftpack@arg+1,7,c
  4463  00215E  D004               	goto	l1019
  4464  002160  0E02               	movlw	2
  4465  002162  601B               	cpfslt	___ftpack@exp,c
  4466  002164  D7F5               	goto	l3801
  4467  002166  D000               	goto	l1019
  4468  002168                     l1019:
  4469  002168  B01B               	btfsc	___ftpack@exp,0,c
  4470  00216A  D002               	goto	l3809
  4471  00216C  9E19               	bcf	___ftpack@arg+1,7,c
  4472  00216E  D000               	goto	l3809
  4473  002170                     l3809:
  4474  002170  90D8               	bcf	status,0,c
  4475  002172  321B               	rrcf	___ftpack@exp,f,c
  4476  002174  501B               	movf	___ftpack@exp,w,c
  4477  002176  121A               	iorwf	___ftpack@arg+2,f,c
  4478  002178  501C               	movf	___ftpack@sign,w,c
  4479  00217A  B4D8               	btfsc	status,2,c
  4480  00217C  D002               	goto	l3815
  4481  00217E  8E1A               	bsf	___ftpack@arg+2,7,c
  4482  002180  D000               	goto	l3815
  4483  002182                     l3815:
  4484  002182  C018  F018         	movff	___ftpack@arg,?___ftpack
  4485  002186  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  4486  00218A  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  4487  00218E  D000               	goto	l1008
  4488  002190                     l1008:
  4489  002190  0012               	return		;funcret
  4490  002192                     __end_of___ftpack:
  4491                           	opt stack 0
  4492                           tblptru	equ	0xFF8
  4493                           tblptrh	equ	0xFF7
  4494                           tblptrl	equ	0xFF6
  4495                           tablat	equ	0xFF5
  4496                           prodh	equ	0xFF4
  4497                           prodl	equ	0xFF3
  4498                           intcon	equ	0xFF2
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1h	equ	0xFE2
  4503                           fsr1l	equ	0xFE1
  4504                           indf2	equ	0xFDF
  4505                           postinc2	equ	0xFDE
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510 ;; *************** function _ImplementPIDMotion *****************
  4511 ;; Defined at:
  4512 ;;		line 40 in file "MotorControl.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  PIDValue        2   40[BANK0 ] int 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;		None
  4517 ;; Return value:  Size  Location     Type
  4518 ;;		None               void
  4519 ;; Registers used:
  4520 ;;		wreg, status,2, status,0, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4526 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;Total ram usage:        4 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    5
  4533 ;; This function calls:
  4534 ;;		_abs
  4535 ;; This function is called by:
  4536 ;;		_main
  4537 ;;		_ZeroMotors
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text15
  4542  002302                     __ptext15:
  4543                           	opt stack 0
  4544  002302                     _ImplementPIDMotion:
  4545                           	opt stack 23
  4546                           
  4547                           ;MotorControl.c: 42: if (PIDValue > 255)
  4548                           
  4549                           ;incstack = 0
  4550  002302  0100               	movlb	0	; () banked
  4551  002304  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4552  002306  D009               	goto	l4003
  4553  002308  0100               	movlb	0	; () banked
  4554  00230A  0589               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4555  00230C  A0D8               	btfss	status,0,c
  4556  00230E  D005               	goto	l4003
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;MotorControl.c: 43: PIDValue = 255;
  4560  002310  0E00               	movlw	0
  4561  002312  0100               	movlb	0	; () banked
  4562  002314  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4563  002316  6988               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  4564  002318  D010               	goto	l4007
  4565  00231A                     l4003:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;MotorControl.c: 44: else if (PIDValue < -255)
  4569  00231A  0100               	movlb	0	; () banked
  4570  00231C  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4571  00231E  D00D               	goto	l4007
  4572  002320  0100               	movlb	0	; () banked
  4573  002322  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4574  002324  0EFF               	movlw	255
  4575  002326  0100               	movlb	0	; () banked
  4576  002328  5989               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4577  00232A  B0D8               	btfsc	status,0,c
  4578  00232C  D006               	goto	l4007
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;MotorControl.c: 45: PIDValue = -255;
  4582  00232E  0EFF               	movlw	255
  4583  002330  0100               	movlb	0	; () banked
  4584  002332  6F89               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  4585  002334  0E01               	movlw	1
  4586  002336  6F88               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  4587                           
  4588                           ; BSR set to: 0
  4589  002338  D000               	goto	l4007
  4590  00233A                     l4007:
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;MotorControl.c: 47: if (PIDValue < 0)
  4594  00233A  0100               	movlb	0	; () banked
  4595  00233C  AF89               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4596  00233E  D002               	goto	l4011
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  4600  002340  8EB7               	bsf	4023,7,c	;volatile
  4601  002342  D00C               	goto	l4015
  4602  002344                     l4011:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;MotorControl.c: 49: else if (PIDValue > 0)
  4606  002344  0100               	movlb	0	; () banked
  4607  002346  BF89               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  4608  002348  D009               	goto	l4015
  4609  00234A  0100               	movlb	0	; () banked
  4610  00234C  5189               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  4611  00234E  E104               	bnz	u3470
  4612  002350  0100               	movlb	0	; () banked
  4613  002352  0588               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  4614  002354  A0D8               	btfss	status,0,c
  4615  002356  D002               	goto	l4015
  4616  002358                     u3470:
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  4620  002358  9EB7               	bcf	4023,7,c	;volatile
  4621                           
  4622                           ; BSR set to: 0
  4623  00235A  D000               	goto	l4015
  4624  00235C                     l4015:
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  4628  00235C  C088  F084         	movff	ImplementPIDMotion@PIDValue,abs@a
  4629  002360  C089  F085         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  4630  002364  ECD9  F015         	call	_abs	;wreg free
  4631  002368  C084  F088         	movff	?_abs,ImplementPIDMotion@PIDValue
  4632  00236C  C085  F089         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  4633                           
  4634                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  4635  002370  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4636  002374  C089  F08B         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  4637  002378  0100               	movlb	0	; () banked
  4638  00237A  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4639  00237C  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4640  00237E  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4641  002380  0100               	movlb	0	; () banked
  4642  002382  358B               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  4643  002384  338B               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  4644  002386  338A               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  4645  002388  0100               	movlb	0	; () banked
  4646  00238A  518A               	movf	??_ImplementPIDMotion& (0+255),w,b
  4647  00238C  6EB8               	movwf	4024,c	;volatile
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  4651  00238E  C088  F08A         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  4652  002392  0E03               	movlw	3
  4653  002394  0100               	movlb	0	; () banked
  4654  002396  178A               	andwf	??_ImplementPIDMotion& (0+255),f,b
  4655  002398  0100               	movlb	0	; () banked
  4656  00239A  3B8A               	swapf	??_ImplementPIDMotion& (0+255),f,b
  4657  00239C  50B7               	movf	4023,w,c	;volatile
  4658  00239E  0100               	movlb	0	; () banked
  4659  0023A0  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4660  0023A2  0BCF               	andlw	-49
  4661  0023A4  198A               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  4662  0023A6  6EB7               	movwf	4023,c	;volatile
  4663                           
  4664                           ; BSR set to: 0
  4665  0023A8  0012               	return		;funcret
  4666  0023AA                     __end_of_ImplementPIDMotion:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           postdec1	equ	0xFE5
  4678                           fsr1h	equ	0xFE2
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _SPIInit *****************
  4687 ;; Defined at:
  4688 ;;		line 21 in file "SPISlave.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;		None               void
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    5
  4709 ;; This function calls:
  4710 ;;		_OpenSPI1
  4711 ;; This function is called by:
  4712 ;;		_initialize
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text16
  4717  002D6C                     __ptext16:
  4718                           	opt stack 0
  4719  002D6C                     _SPIInit:
  4720                           	opt stack 24
  4721                           
  4722                           ;SPISlave.c: 23: TRISCbits.RC4 = 1;
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;incstack = 0
  4726  002D6C  8894               	bsf	3988,4,c	;volatile
  4727                           
  4728                           ;SPISlave.c: 24: TRISCbits.RC5 = 0;
  4729  002D6E  9A94               	bcf	3988,5,c	;volatile
  4730                           
  4731                           ;SPISlave.c: 25: TRISFbits.RF7 = 1;
  4732  002D70  8E97               	bsf	3991,7,c	;volatile
  4733                           
  4734                           ;SPISlave.c: 26: TRISCbits.RC6 = 0;
  4735  002D72  9C94               	bcf	3988,6,c	;volatile
  4736                           
  4737                           ;SPISlave.c: 27: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  4738  002D74  0E00               	movlw	0
  4739  002D76  6E18               	movwf	OpenSPI1@bus_mode,c
  4740  002D78  0E00               	movlw	0
  4741  002D7A  6E19               	movwf	OpenSPI1@smp_phase,c
  4742  002D7C  0E04               	movlw	4
  4743  002D7E  EC73  F013         	call	_OpenSPI1
  4744                           
  4745                           ;SPISlave.c: 28: PIE1bits.SSP1IE = 1;
  4746  002D82  869D               	bsf	3997,3,c	;volatile
  4747  002D84  0012               	return		;funcret
  4748  002D86                     __end_of_SPIInit:
  4749                           	opt stack 0
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           intcon	equ	0xFF2
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           postdec1	equ	0xFE5
  4760                           fsr1h	equ	0xFE2
  4761                           fsr1l	equ	0xFE1
  4762                           indf2	equ	0xFDF
  4763                           postinc2	equ	0xFDE
  4764                           fsr2h	equ	0xFDA
  4765                           fsr2l	equ	0xFD9
  4766                           status	equ	0xFD8
  4767                           
  4768 ;; *************** function _OpenSPI1 *****************
  4769 ;; Defined at:
  4770 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  sync_mode       1    wreg     unsigned char 
  4773 ;;  bus_mode        1   23[COMRAM] unsigned char 
  4774 ;;  smp_phase       1   24[COMRAM] unsigned char 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  sync_mode       1   25[COMRAM] unsigned char 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;		None               void
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;Total ram usage:        3 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    4
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_SPIInit
  4797 ;;		_main
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text17
  4802  0026E6                     __ptext17:
  4803                           	opt stack 0
  4804  0026E6                     _OpenSPI1:
  4805                           	opt stack 24
  4806                           
  4807                           ;incstack = 0
  4808                           ;OpenSPI1@sync_mode stored from wreg
  4809  0026E6  6E1A               	movwf	OpenSPI1@sync_mode,c
  4810  0026E8  0E3F               	movlw	63
  4811  0026EA  16C7               	andwf	4039,f,c	;volatile
  4812  0026EC  0E00               	movlw	0
  4813  0026EE  6EC6               	movwf	4038,c	;volatile
  4814  0026F0  501A               	movf	OpenSPI1@sync_mode,w,c
  4815  0026F2  12C6               	iorwf	4038,f,c	;volatile
  4816  0026F4  5019               	movf	OpenSPI1@smp_phase,w,c
  4817  0026F6  12C7               	iorwf	4039,f,c	;volatile
  4818  0026F8  D005               	goto	l3017
  4819  0026FA                     l662:
  4820  0026FA  8CC7               	bsf	4039,6,c	;volatile
  4821  0026FC  D013               	goto	l3021
  4822  0026FE                     l664:
  4823  0026FE  8CC7               	bsf	4039,6,c	;volatile
  4824  002700                     l665:
  4825  002700  88C6               	bsf	4038,4,c	;volatile
  4826  002702  D010               	goto	l3021
  4827  002704                     l3017:
  4828  002704  5018               	movf	OpenSPI1@bus_mode,w,c
  4829                           
  4830                           ; Switch size 1, requested type "space"
  4831                           ; Number of cases is 3, Range of values is 0 to 3
  4832                           ; switch strategies available:
  4833                           ; Name         Instructions Cycles
  4834                           ; simple_byte           10     6 (average)
  4835                           ;	Chosen strategy is simple_byte
  4836  002706  0A00               	xorlw	0	; case 0
  4837  002708  B4D8               	btfsc	status,2,c
  4838  00270A  D7F7               	goto	l662
  4839  00270C  0A02               	xorlw	2	; case 2
  4840  00270E  B4D8               	btfsc	status,2,c
  4841  002710  D7F6               	goto	l664
  4842  002712  0A01               	xorlw	1	; case 3
  4843  002714  B4D8               	btfsc	status,2,c
  4844  002716  D7F4               	goto	l665
  4845  002718  D005               	goto	l3021
  4846  00271A                     l668:
  4847  00271A  8E97               	bsf	3991,7,c	;volatile
  4848  00271C                     l670:
  4849  00271C  8694               	bsf	3988,3,c	;volatile
  4850  00271E  D00A               	goto	l669
  4851  002720                     l671:
  4852  002720  9694               	bcf	3988,3,c	;volatile
  4853  002722  D008               	goto	l669
  4854  002724                     l3021:
  4855  002724  501A               	movf	OpenSPI1@sync_mode,w,c
  4856                           
  4857                           ; Switch size 1, requested type "space"
  4858                           ; Number of cases is 2, Range of values is 4 to 5
  4859                           ; switch strategies available:
  4860                           ; Name         Instructions Cycles
  4861                           ; simple_byte            7     4 (average)
  4862                           ;	Chosen strategy is simple_byte
  4863  002726  0A04               	xorlw	4	; case 4
  4864  002728  B4D8               	btfsc	status,2,c
  4865  00272A  D7F7               	goto	l668
  4866  00272C  0A01               	xorlw	1	; case 5
  4867  00272E  B4D8               	btfsc	status,2,c
  4868  002730  D7F5               	goto	l670
  4869  002732  D7F6               	goto	l671
  4870  002734                     l669:
  4871  002734  8894               	bsf	3988,4,c	;volatile
  4872  002736  9A94               	bcf	3988,5,c	;volatile
  4873  002738  8AC6               	bsf	4038,5,c	;volatile
  4874  00273A  0012               	return		;funcret
  4875  00273C                     __end_of_OpenSPI1:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           postinc0	equ	0xFEE
  4885                           wreg	equ	0xFE8
  4886                           postdec1	equ	0xFE5
  4887                           fsr1h	equ	0xFE2
  4888                           fsr1l	equ	0xFE1
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _RTDInit *****************
  4896 ;; Defined at:
  4897 ;;		line 3 in file "ResolverToDigital.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		wreg, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    5
  4918 ;; This function calls:
  4919 ;;		_Delay10TCYx
  4920 ;;		_Delay1KTCYx
  4921 ;;		_Delay1TCYx
  4922 ;; This function is called by:
  4923 ;;		_initialize
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text18
  4928  002AF8                     __ptext18:
  4929                           	opt stack 0
  4930  002AF8                     _RTDInit:
  4931                           	opt stack 24
  4932                           
  4933                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  4934                           
  4935                           ;incstack = 0
  4936  002AF8  6895               	setf	3989,c	;volatile
  4937                           
  4938                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  4939  002AFA  6899               	setf	3993,c	;volatile
  4940                           
  4941                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  4942  002AFC  9096               	bcf	3990,0,c	;volatile
  4943                           
  4944                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  4945  002AFE  9296               	bcf	3990,1,c	;volatile
  4946                           
  4947                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  4948  002B00  9496               	bcf	3990,2,c	;volatile
  4949                           
  4950                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  4951  002B02  909A               	bcf	3994,0,c	;volatile
  4952                           
  4953                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  4954  002B04  8A96               	bsf	3990,5,c	;volatile
  4955                           
  4956                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  4957  002B06  8C96               	bsf	3990,6,c	;volatile
  4958                           
  4959                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  4960  002B08  8E96               	bsf	3990,7,c	;volatile
  4961                           
  4962                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  4963  002B0A  9088               	bcf	3976,0,c	;volatile
  4964                           
  4965                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  4966  002B0C  0E0A               	movlw	10
  4967  002B0E  ECE3  F016         	call	_Delay10TCYx
  4968                           
  4969                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  4970  002B12  8088               	bsf	3976,0,c	;volatile
  4971                           
  4972                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  4973  002B14  0E14               	movlw	20
  4974  002B16  ECDA  F016         	call	_Delay1KTCYx
  4975                           
  4976                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  4977  002B1A  9084               	bcf	3972,0,c	;volatile
  4978                           
  4979                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  4980  002B1C  0E01               	movlw	1
  4981  002B1E  ECF5  F016         	call	_Delay1TCYx
  4982                           
  4983                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  4984  002B22  8084               	bsf	3972,0,c	;volatile
  4985                           
  4986                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  4987  002B24  9484               	bcf	3972,2,c	;volatile
  4988  002B26  0012               	return		;funcret
  4989  002B28                     __end_of_RTDInit:
  4990                           	opt stack 0
  4991                           tblptru	equ	0xFF8
  4992                           tblptrh	equ	0xFF7
  4993                           tblptrl	equ	0xFF6
  4994                           tablat	equ	0xFF5
  4995                           prodh	equ	0xFF4
  4996                           prodl	equ	0xFF3
  4997                           intcon	equ	0xFF2
  4998                           postinc0	equ	0xFEE
  4999                           wreg	equ	0xFE8
  5000                           postdec1	equ	0xFE5
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           postinc2	equ	0xFDE
  5005                           fsr2h	equ	0xFDA
  5006                           fsr2l	equ	0xFD9
  5007                           status	equ	0xFD8
  5008                           
  5009 ;; *************** function _Delay1TCYx *****************
  5010 ;; Defined at:
  5011 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;  unit            1    wreg     unsigned char 
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;  unit            1   23[COMRAM] unsigned char 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;		None               void
  5018 ;; Registers used:
  5019 ;;		wreg
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;Total ram usage:        1 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    4
  5032 ;; This function calls:
  5033 ;;		Nothing
  5034 ;; This function is called by:
  5035 ;;		_RTDInit
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           	psect	text19
  5040  002DEA                     __ptext19:
  5041                           	opt stack 0
  5042  002DEA                     _Delay1TCYx:
  5043                           	opt stack 24
  5044                           
  5045                           ;incstack = 0
  5046                           ;Delay1TCYx@unit stored from wreg
  5047  002DEA  6E18               	movwf	Delay1TCYx@unit,c
  5048  002DEC                     l916:
  5049  002DEC  F000               	nop	
  5050  002DEE  2E18               	decfsz	Delay1TCYx@unit,f,c
  5051  002DF0  D7FD               	goto	l916
  5052  002DF2  D000               	goto	l918
  5053  002DF4                     l918:
  5054  002DF4  0012               	return		;funcret
  5055  002DF6                     __end_of_Delay1TCYx:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           intcon	equ	0xFF2
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _Delay1KTCYx *****************
  5076 ;; Defined at:
  5077 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  unit            1    wreg     unsigned char 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  unit            1   23[COMRAM] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;		None               void
  5084 ;; Registers used:
  5085 ;;		wreg
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;Total ram usage:        1 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    4
  5098 ;; This function calls:
  5099 ;;		Nothing
  5100 ;; This function is called by:
  5101 ;;		_RTDInit
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text20
  5106  002DB4                     __ptext20:
  5107                           	opt stack 0
  5108  002DB4                     _Delay1KTCYx:
  5109                           	opt stack 24
  5110                           
  5111                           ;incstack = 0
  5112                           ;Delay1KTCYx@unit stored from wreg
  5113  002DB4  6E18               	movwf	Delay1KTCYx@unit,c
  5114  002DB6  0EFA               	movlw	250
  5115  002DB8                     u3967:
  5116  002DB8  F000               	nop	
  5117  002DBA  2EE8               	decfsz	wreg,f,c
  5118  002DBC  D7FD               	goto	u3967
  5119  002DBE  2E18               	decfsz	Delay1KTCYx@unit,f,c
  5120  002DC0  D7FA               	goto	l2965
  5121  002DC2  D000               	goto	l911
  5122  002DC4                     l911:
  5123  002DC4  0012               	return		;funcret
  5124  002DC6                     __end_of_Delay1KTCYx:
  5125                           	opt stack 0
  5126                           tblptru	equ	0xFF8
  5127                           tblptrh	equ	0xFF7
  5128                           tblptrl	equ	0xFF6
  5129                           tablat	equ	0xFF5
  5130                           prodh	equ	0xFF4
  5131                           prodl	equ	0xFF3
  5132                           intcon	equ	0xFF2
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           fsr1h	equ	0xFE2
  5137                           fsr1l	equ	0xFE1
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _Delay10TCYx *****************
  5145 ;; Defined at:
  5146 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  unit            1    wreg     unsigned char 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  unit            1   23[COMRAM] unsigned char 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;		None               void
  5153 ;; Registers used:
  5154 ;;		wreg
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;Total ram usage:        1 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    4
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_RTDInit
  5171 ;;		_ReadRTDpos
  5172 ;;		_main
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text21
  5177  002DC6                     __ptext21:
  5178                           	opt stack 0
  5179  002DC6                     _Delay10TCYx:
  5180                           	opt stack 23
  5181                           
  5182                           ;incstack = 0
  5183                           ;Delay10TCYx@unit stored from wreg
  5184  002DC6  6E18               	movwf	Delay10TCYx@unit,c
  5185  002DC8  0E03               	movlw	3
  5186  002DCA                     u3977:
  5187  002DCA  2EE8               	decfsz	wreg,f,c
  5188  002DCC  D7FE               	goto	u3977
  5189  002DCE  F000               	nop	
  5190  002DD0  2E18               	decfsz	Delay10TCYx@unit,f,c
  5191  002DD2  D7FA               	goto	l2709
  5192  002DD4  D000               	goto	l904
  5193  002DD6                     l904:
  5194  002DD6  0012               	return		;funcret
  5195  002DD8                     __end_of_Delay10TCYx:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           postinc0	equ	0xFEE
  5205                           wreg	equ	0xFE8
  5206                           postdec1	equ	0xFE5
  5207                           fsr1h	equ	0xFE2
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function _PIDInit *****************
  5216 ;; Defined at:
  5217 ;;		line 18 in file "PID.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;		None
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;		None
  5222 ;; Return value:  Size  Location     Type
  5223 ;;		None               void
  5224 ;; Registers used:
  5225 ;;		wreg, status,2
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;Total ram usage:        0 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    4
  5238 ;; This function calls:
  5239 ;;		Nothing
  5240 ;; This function is called by:
  5241 ;;		_initialize
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           	psect	text22
  5246  00288A                     __ptext22:
  5247                           	opt stack 0
  5248  00288A                     _PIDInit:
  5249                           	opt stack 25
  5250                           
  5251                           ;PID.c: 20: error = 0;
  5252                           
  5253                           ;incstack = 0
  5254  00288A  0E00               	movlw	0
  5255  00288C  0100               	movlb	0	; () banked
  5256  00288E  6FB0               	movwf	_error& (0+255),b
  5257  002890  0E00               	movlw	0
  5258  002892  0100               	movlb	0	; () banked
  5259  002894  6FB1               	movwf	(_error+1)& (0+255),b
  5260  002896  0E00               	movlw	0
  5261  002898  0100               	movlb	0	; () banked
  5262  00289A  6FB2               	movwf	(_error+2)& (0+255),b
  5263                           
  5264                           ;PID.c: 21: prevErr = 0;
  5265  00289C  0E00               	movlw	0
  5266  00289E  0100               	movlb	0	; () banked
  5267  0028A0  6FB6               	movwf	_prevErr& (0+255),b
  5268  0028A2  0E00               	movlw	0
  5269  0028A4  0100               	movlb	0	; () banked
  5270  0028A6  6FB7               	movwf	(_prevErr+1)& (0+255),b
  5271  0028A8  0E00               	movlw	0
  5272  0028AA  0100               	movlb	0	; () banked
  5273  0028AC  6FB8               	movwf	(_prevErr+2)& (0+255),b
  5274                           
  5275                           ;PID.c: 22: intErr = 0;
  5276  0028AE  0E00               	movlw	0
  5277  0028B0  0100               	movlb	0	; () banked
  5278  0028B2  6FB3               	movwf	_intErr& (0+255),b
  5279  0028B4  0E00               	movlw	0
  5280  0028B6  0100               	movlb	0	; () banked
  5281  0028B8  6FB4               	movwf	(_intErr+1)& (0+255),b
  5282  0028BA  0E00               	movlw	0
  5283  0028BC  0100               	movlb	0	; () banked
  5284  0028BE  6FB5               	movwf	(_intErr+2)& (0+255),b
  5285                           
  5286                           ;PID.c: 24: T0CON = 0x04;
  5287  0028C0  0E04               	movlw	4
  5288  0028C2  6ED5               	movwf	4053,c	;volatile
  5289                           
  5290                           ;PID.c: 25: TMR0H = 0xDB;
  5291  0028C4  0EDB               	movlw	219
  5292  0028C6  6ED7               	movwf	4055,c	;volatile
  5293                           
  5294                           ;PID.c: 26: TMR0L = 0x60;
  5295  0028C8  0E60               	movlw	96
  5296  0028CA  6ED6               	movwf	4054,c	;volatile
  5297                           
  5298                           ; BSR set to: 0
  5299  0028CC  0012               	return		;funcret
  5300  0028CE                     __end_of_PIDInit:
  5301                           	opt stack 0
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           prodh	equ	0xFF4
  5307                           prodl	equ	0xFF3
  5308                           intcon	equ	0xFF2
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _MotorDriverInit *****************
  5321 ;; Defined at:
  5322 ;;		line 7 in file "MotorControl.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;		None               void
  5329 ;; Registers used:
  5330 ;;		wreg, status,2
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:        0 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    4
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_initialize
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text23
  5351  002C9E                     __ptext23:
  5352                           	opt stack 0
  5353  002C9E                     _MotorDriverInit:
  5354                           	opt stack 25
  5355                           
  5356                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;incstack = 0
  5360  002C9E  9098               	bcf	3992,0,c	;volatile
  5361                           
  5362                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  5363  002CA0  9896               	bcf	3990,4,c	;volatile
  5364                           
  5365                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  5366  002CA2  9696               	bcf	3990,3,c	;volatile
  5367                           
  5368                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  5369  002CA4  9698               	bcf	3992,3,c	;volatile
  5370                           
  5371                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  5372  002CA6  8093               	bsf	3987,0,c	;volatile
  5373                           
  5374                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  5375  002CA8  9892               	bcf	3986,4,c	;volatile
  5376                           
  5377                           ;MotorControl.c: 18: CCPR3L = 0x00;
  5378  002CAA  0E00               	movlw	0
  5379  002CAC  6EB8               	movwf	4024,c	;volatile
  5380                           
  5381                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  5382  002CAE  98B7               	bcf	4023,4,c	;volatile
  5383                           
  5384                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  5385  002CB0  9AB7               	bcf	4023,5,c	;volatile
  5386                           
  5387                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  5388  002CB2  0E4C               	movlw	76
  5389  002CB4  6EB7               	movwf	4023,c	;volatile
  5390                           
  5391                           ;MotorControl.c: 22: PR2 = 0xFF;
  5392  002CB6  68CB               	setf	4043,c	;volatile
  5393                           
  5394                           ;MotorControl.c: 23: T3CON = 0x00;
  5395  002CB8  0E00               	movlw	0
  5396  002CBA  6EB1               	movwf	4017,c	;volatile
  5397                           
  5398                           ;MotorControl.c: 24: T2CON = 0x04;
  5399  002CBC  0E04               	movlw	4
  5400  002CBE  6ECA               	movwf	4042,c	;volatile
  5401  002CC0  0012               	return		;funcret
  5402  002CC2                     __end_of_MotorDriverInit:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           postdec1	equ	0xFE5
  5414                           fsr1h	equ	0xFE2
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _JoystickInit *****************
  5423 ;; Defined at:
  5424 ;;		line 6 in file "Joystick.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    4
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_initialize
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text24
  5453  002B58                     __ptext24:
  5454                           	opt stack 0
  5455  002B58                     _JoystickInit:
  5456                           	opt stack 25
  5457                           
  5458                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  5459                           
  5460                           ;incstack = 0
  5461  002B58  9492               	bcf	3986,2,c	;volatile
  5462                           
  5463                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  5464  002B5A  8293               	bsf	3987,1,c	;volatile
  5465                           
  5466                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  5467  002B5C  A281               	btfss	3969,1,c	;volatile
  5468  002B5E  D003               	goto	l31
  5469                           
  5470                           ;Joystick.c: 11: {
  5471                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  5472  002B60  8480               	bsf	3968,2,c	;volatile
  5473                           
  5474                           ;Joystick.c: 13: JSEnableFlag = 1;
  5475  002B62  0E01               	movlw	1
  5476  002B64  D004               	goto	L1
  5477  002B66                     l31:
  5478                           
  5479                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  5480  002B66  B281               	btfsc	3969,1,c	;volatile
  5481  002B68  D005               	goto	l3111
  5482                           
  5483                           ;Joystick.c: 16: {
  5484                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  5485  002B6A  9480               	bcf	3968,2,c	;volatile
  5486                           
  5487                           ;Joystick.c: 18: JSEnableFlag = 0;
  5488  002B6C  0E00               	movlw	0
  5489  002B6E                     L1:
  5490  002B6E  0100               	movlb	0	; () banked
  5491  002B70  6FBB               	movwf	_JSEnableFlag& (0+255),b
  5492                           
  5493                           ; BSR set to: 0
  5494  002B72  D000               	goto	l3111
  5495  002B74                     l3111:
  5496                           
  5497                           ;Joystick.c: 19: }
  5498                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  5499  002B74  80C2               	bsf	4034,0,c	;volatile
  5500                           
  5501                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  5502  002B76  50C2               	movf	4034,w,c	;volatile
  5503  002B78  0B01               	andlw	1
  5504  002B7A  6EC2               	movwf	4034,c	;volatile
  5505                           
  5506                           ;Joystick.c: 23: ADCON1 = 0x0D;
  5507  002B7C  0E0D               	movlw	13
  5508  002B7E  6EC1               	movwf	4033,c	;volatile
  5509                           
  5510                           ;Joystick.c: 24: ADCON2 = 0xB4;
  5511  002B80  0EB4               	movlw	180
  5512  002B82  6EC0               	movwf	4032,c	;volatile
  5513  002B84  0012               	return		;funcret
  5514  002B86                     __end_of_JoystickInit:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           postdec1	equ	0xFE5
  5526                           fsr1h	equ	0xFE2
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _InitializeInterrupts *****************
  5535 ;; Defined at:
  5536 ;;		line 312 in file "RTDuC.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;		None               void
  5543 ;; Registers used:
  5544 ;;		None
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;Total ram usage:        0 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    4
  5557 ;; This function calls:
  5558 ;;		Nothing
  5559 ;; This function is called by:
  5560 ;;		_initialize
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text25
  5565  002DF6                     __ptext25:
  5566                           	opt stack 0
  5567  002DF6                     _InitializeInterrupts:
  5568                           	opt stack 25
  5569                           
  5570                           ;RTDuC.c: 314: INTCONbits.GIE = 1;
  5571                           
  5572                           ;incstack = 0
  5573  002DF6  8EF2               	bsf	intcon,7,c	;volatile
  5574                           
  5575                           ;RTDuC.c: 315: INTCONbits.PEIE = 1;
  5576  002DF8  8CF2               	bsf	intcon,6,c	;volatile
  5577                           
  5578                           ;RTDuC.c: 317: INTCONbits.TMR0IE = 1;
  5579  002DFA  8AF2               	bsf	intcon,5,c	;volatile
  5580                           
  5581                           ;RTDuC.c: 318: T0CONbits.TMR0ON = 1;
  5582  002DFC  8ED5               	bsf	4053,7,c	;volatile
  5583                           
  5584                           ;RTDuC.c: 320: PIE2bits.OSCFIE = 1;
  5585  002DFE  8EA0               	bsf	4000,7,c	;volatile
  5586  002E00  0012               	return		;funcret
  5587  002E02                     __end_of_InitializeInterrupts:
  5588                           	opt stack 0
  5589                           tblptru	equ	0xFF8
  5590                           tblptrh	equ	0xFF7
  5591                           tblptrl	equ	0xFF6
  5592                           tablat	equ	0xFF5
  5593                           prodh	equ	0xFF4
  5594                           prodl	equ	0xFF3
  5595                           intcon	equ	0xFF2
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1h	equ	0xFE2
  5600                           fsr1l	equ	0xFE1
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _EEPROMInit *****************
  5608 ;; Defined at:
  5609 ;;		line 13 in file "EEPROM.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;		None
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;		None
  5614 ;; Return value:  Size  Location     Type
  5615 ;;		None               void
  5616 ;; Registers used:
  5617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;Total ram usage:        0 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    7
  5630 ;; This function calls:
  5631 ;;		_EEBootUp
  5632 ;; This function is called by:
  5633 ;;		_initialize
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text26
  5638  002DA0                     __ptext26:
  5639                           	opt stack 0
  5640  002DA0                     _EEPROMInit:
  5641                           	opt stack 22
  5642                           
  5643                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  5644                           
  5645                           ;incstack = 0
  5646  002DA0  9EA6               	bcf	4006,7,c	;volatile
  5647                           
  5648                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  5649  002DA2  9CA6               	bcf	4006,6,c	;volatile
  5650                           
  5651                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  5652  002DA4  84A6               	bsf	4006,2,c	;volatile
  5653                           
  5654                           ;EEPROM.c: 19: EEBootUp();
  5655  002DA6  ECA8  F012         	call	_EEBootUp	;wreg free
  5656                           
  5657                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  5658  002DAA  0E3D               	movlw	61
  5659  002DAC  6ED2               	movwf	4050,c	;volatile
  5660                           
  5661                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  5662  002DAE  84A0               	bsf	4000,2,c	;volatile
  5663                           
  5664                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  5665  002DB0  84A2               	bsf	4002,2,c	;volatile
  5666  002DB2  0012               	return		;funcret
  5667  002DB4                     __end_of_EEPROMInit:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           postdec1	equ	0xFE5
  5679                           fsr1h	equ	0xFE2
  5680                           fsr1l	equ	0xFE1
  5681                           indf2	equ	0xFDF
  5682                           postinc2	equ	0xFDE
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _EEBootUp *****************
  5688 ;; Defined at:
  5689 ;;		line 27 in file "EEPROM.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;		None               void
  5696 ;; Registers used:
  5697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    6
  5710 ;; This function calls:
  5711 ;;		_EEReadChar
  5712 ;;		_EEReadDouble
  5713 ;; This function is called by:
  5714 ;;		_EEPROMInit
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text27
  5719  002550                     __ptext27:
  5720                           	opt stack 0
  5721  002550                     _EEBootUp:
  5722                           	opt stack 22
  5723                           
  5724                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  5725                           
  5726                           ;incstack = 0
  5727  002550  0E16               	movlw	22
  5728  002552  ECA6  F016         	call	_EEReadChar
  5729  002556  0900               	iorlw	0
  5730  002558  B4D8               	btfsc	status,2,c
  5731  00255A  D031               	goto	l362
  5732                           
  5733                           ;EEPROM.c: 30: {
  5734                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  5735  00255C  0E00               	movlw	0
  5736  00255E  EC9E  F013         	call	_EEReadDouble
  5737  002562  C01E  F03C         	movff	?_EEReadDouble,_SetAngle
  5738  002566  C01F  F03D         	movff	?_EEReadDouble+1,_SetAngle+1
  5739  00256A  C020  F03E         	movff	?_EEReadDouble+2,_SetAngle+2
  5740                           
  5741                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  5742  00256E  0E03               	movlw	3
  5743  002570  EC9E  F013         	call	_EEReadDouble
  5744  002574  C01E  F0AD         	movff	?_EEReadDouble,_Kp
  5745  002578  C01F  F0AE         	movff	?_EEReadDouble+1,_Kp+1
  5746  00257C  C020  F0AF         	movff	?_EEReadDouble+2,_Kp+2
  5747                           
  5748                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  5749  002580  0E06               	movlw	6
  5750  002582  EC9E  F013         	call	_EEReadDouble
  5751  002586  C01E  F0AA         	movff	?_EEReadDouble,_Ki
  5752  00258A  C01F  F0AB         	movff	?_EEReadDouble+1,_Ki+1
  5753  00258E  C020  F0AC         	movff	?_EEReadDouble+2,_Ki+2
  5754                           
  5755                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  5756  002592  0E09               	movlw	9
  5757  002594  EC9E  F013         	call	_EEReadDouble
  5758  002598  C01E  F0A7         	movff	?_EEReadDouble,_Kd
  5759  00259C  C01F  F0A8         	movff	?_EEReadDouble+1,_Kd+1
  5760  0025A0  C020  F0A9         	movff	?_EEReadDouble+2,_Kd+2
  5761                           
  5762                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  5763  0025A4  0E15               	movlw	21
  5764  0025A6  ECA6  F016         	call	_EEReadChar
  5765  0025AA  0100               	movlb	0	; () banked
  5766  0025AC  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;EEPROM.c: 36: if(PIDEnableFlag == 1)
  5770  0025AE  0100               	movlb	0	; () banked
  5771  0025B0  05BC               	decf	_PIDEnableFlag& (0+255),w,b
  5772  0025B2  A4D8               	btfss	status,2,c
  5773  0025B4  D004               	goto	l362
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;EEPROM.c: 37: {
  5777                           ;EEPROM.c: 38: PIDEnableFlag = 3;
  5778  0025B6  0E03               	movlw	3
  5779  0025B8  0100               	movlb	0	; () banked
  5780  0025BA  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783  0025BC  D000               	goto	l362
  5784  0025BE                     l362:
  5785  0025BE  0012               	return		;funcret
  5786  0025C0                     __end_of_EEBootUp:
  5787                           	opt stack 0
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           prodh	equ	0xFF4
  5793                           prodl	equ	0xFF3
  5794                           intcon	equ	0xFF2
  5795                           postinc0	equ	0xFEE
  5796                           wreg	equ	0xFE8
  5797                           postdec1	equ	0xFE5
  5798                           fsr1h	equ	0xFE2
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           fsr2h	equ	0xFDA
  5803                           fsr2l	equ	0xFD9
  5804                           status	equ	0xFD8
  5805                           
  5806 ;; *************** function _EEReadDouble *****************
  5807 ;; Defined at:
  5808 ;;		line 100 in file "EEPROM.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  location        1    wreg     unsigned char 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  location        1   32[COMRAM] unsigned char 
  5813 ;;  x               1   33[COMRAM] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  3   29[COMRAM] unsigned char 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5823 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:        5 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    5
  5830 ;; This function calls:
  5831 ;;		_Busy_eep
  5832 ;;		_EEReassembleDouble
  5833 ;;		_Read_b_eep
  5834 ;; This function is called by:
  5835 ;;		_EEBootUp
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           	psect	text28
  5840  00273C                     __ptext28:
  5841                           	opt stack 0
  5842  00273C                     _EEReadDouble:
  5843                           	opt stack 22
  5844                           
  5845                           ;incstack = 0
  5846                           ;EEReadDouble@location stored from wreg
  5847  00273C  6E21               	movwf	EEReadDouble@location,c
  5848                           
  5849                           ;EEPROM.c: 102: unsigned char x;
  5850                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  5851  00273E  50F2               	movf	intcon,w,c	;volatile
  5852  002740  0B3F               	andlw	63
  5853  002742  6EF2               	movwf	intcon,c	;volatile
  5854                           
  5855                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  5856  002744  0E00               	movlw	0
  5857  002746  6E22               	movwf	EEReadDouble@x,c
  5858  002748                     l2727:
  5859  002748  0E02               	movlw	2
  5860  00274A  6422               	cpfsgt	EEReadDouble@x,c
  5861  00274C  D001               	goto	l2731
  5862  00274E  D014               	goto	l2739
  5863  002750                     l2731:
  5864                           
  5865                           ;EEPROM.c: 107: {
  5866                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  5867  002750  5022               	movf	EEReadDouble@x,w,c
  5868  002752  0D01               	mullw	1
  5869  002754  0E39               	movlw	low _DDouble
  5870  002756  24F3               	addwf	prodl,w,c
  5871  002758  6ED9               	movwf	fsr2l,c
  5872  00275A  0E00               	movlw	high _DDouble
  5873  00275C  20F4               	addwfc	prodh,w,c
  5874  00275E  6EDA               	movwf	fsr2h,c
  5875  002760  5021               	movf	EEReadDouble@location,w,c
  5876  002762  2422               	addwf	EEReadDouble@x,w,c
  5877  002764  6E18               	movwf	Read_b_eep@badd,c
  5878  002766  6A19               	clrf	Read_b_eep@badd+1,c
  5879  002768  3619               	rlcf	Read_b_eep@badd+1,f,c
  5880  00276A  ECC3  F016         	call	_Read_b_eep	;wreg free
  5881  00276E  6EDF               	movwf	indf2,c
  5882                           
  5883                           ;EEPROM.c: 109: Busy_eep();
  5884  002770  EC06  F017         	call	_Busy_eep	;wreg free
  5885  002774  2A22               	incf	EEReadDouble@x,f,c
  5886  002776  D7E8               	goto	l2727
  5887  002778                     l2739:
  5888                           
  5889                           ;EEPROM.c: 110: }
  5890                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  5891  002778  50F2               	movf	intcon,w,c	;volatile
  5892  00277A  09C0               	iorlw	192
  5893  00277C  6EF2               	movwf	intcon,c	;volatile
  5894                           
  5895                           ;EEPROM.c: 114: return EEReassembleDouble();
  5896  00277E  EC67  F014         	call	_EEReassembleDouble	;wreg free
  5897  002782  C018  F01E         	movff	?_EEReassembleDouble,?_EEReadDouble
  5898  002786  C019  F01F         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  5899  00278A  C01A  F020         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  5900  00278E  D000               	goto	l378
  5901  002790                     l378:
  5902  002790  0012               	return		;funcret
  5903  002792                     __end_of_EEReadDouble:
  5904                           	opt stack 0
  5905                           tblptru	equ	0xFF8
  5906                           tblptrh	equ	0xFF7
  5907                           tblptrl	equ	0xFF6
  5908                           tablat	equ	0xFF5
  5909                           prodh	equ	0xFF4
  5910                           prodl	equ	0xFF3
  5911                           intcon	equ	0xFF2
  5912                           postinc0	equ	0xFEE
  5913                           wreg	equ	0xFE8
  5914                           postdec1	equ	0xFE5
  5915                           fsr1h	equ	0xFE2
  5916                           fsr1l	equ	0xFE1
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _EEReassembleDouble *****************
  5924 ;; Defined at:
  5925 ;;		line 62 in file "EEPROM.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  dub             3   26[COMRAM] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  3   23[COMRAM] unsigned char 
  5932 ;; Registers used:
  5933 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5939 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;Total ram usage:        6 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    4
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_EEReadDouble
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text29
  5954  0028CE                     __ptext29:
  5955                           	opt stack 0
  5956  0028CE                     _EEReassembleDouble:
  5957                           	opt stack 22
  5958                           
  5959                           ;EEPROM.c: 64: double dub;
  5960                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  5961                           
  5962                           ;incstack = 0
  5963  0028CE  0E1B               	movlw	low EEReassembleDouble@dub
  5964  0028D0  6E3F               	movwf	_DoublePtr,c
  5965  0028D2  0E00               	movlw	high EEReassembleDouble@dub
  5966  0028D4  6E40               	movwf	_DoublePtr+1,c
  5967                           
  5968                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  5969  0028D6  C03F  FFD9         	movff	_DoublePtr,fsr2l
  5970  0028DA  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  5971  0028DE  C039  FFDF         	movff	_DDouble,indf2
  5972                           
  5973                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  5974  0028E2  EE20 F001          	lfsr	2,1
  5975  0028E6  503F               	movf	_DoublePtr,w,c
  5976  0028E8  26D9               	addwf	fsr2l,f,c
  5977  0028EA  5040               	movf	_DoublePtr+1,w,c
  5978  0028EC  22DA               	addwfc	fsr2h,f,c
  5979  0028EE  C03A  FFDF         	movff	_DDouble+1,indf2
  5980                           
  5981                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  5982  0028F2  EE20 F002          	lfsr	2,2
  5983  0028F6  503F               	movf	_DoublePtr,w,c
  5984  0028F8  26D9               	addwf	fsr2l,f,c
  5985  0028FA  5040               	movf	_DoublePtr+1,w,c
  5986  0028FC  22DA               	addwfc	fsr2h,f,c
  5987  0028FE  C03B  FFDF         	movff	_DDouble+2,indf2
  5988                           
  5989                           ;EEPROM.c: 69: return dub;
  5990  002902  C01B  F018         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  5991  002906  C01C  F019         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  5992  00290A  C01D  F01A         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  5993  00290E  D000               	goto	l368
  5994  002910                     l368:
  5995  002910  0012               	return		;funcret
  5996  002912                     __end_of_EEReassembleDouble:
  5997                           	opt stack 0
  5998                           tblptru	equ	0xFF8
  5999                           tblptrh	equ	0xFF7
  6000                           tblptrl	equ	0xFF6
  6001                           tablat	equ	0xFF5
  6002                           prodh	equ	0xFF4
  6003                           prodl	equ	0xFF3
  6004                           intcon	equ	0xFF2
  6005                           postinc0	equ	0xFEE
  6006                           wreg	equ	0xFE8
  6007                           postdec1	equ	0xFE5
  6008                           fsr1h	equ	0xFE2
  6009                           fsr1l	equ	0xFE1
  6010                           indf2	equ	0xFDF
  6011                           postinc2	equ	0xFDE
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function _EEReadChar *****************
  6017 ;; Defined at:
  6018 ;;		line 136 in file "EEPROM.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  location        1    wreg     unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  location        1   25[COMRAM] unsigned char 
  6023 ;;  ch              1   26[COMRAM] unsigned char 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      unsigned char 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;Total ram usage:        2 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    5
  6040 ;; This function calls:
  6041 ;;		_Read_b_eep
  6042 ;; This function is called by:
  6043 ;;		_EEBootUp
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text30
  6048  002D4C                     __ptext30:
  6049                           	opt stack 0
  6050  002D4C                     _EEReadChar:
  6051                           	opt stack 22
  6052                           
  6053                           ;incstack = 0
  6054                           ;EEReadChar@location stored from wreg
  6055  002D4C  6E1A               	movwf	EEReadChar@location,c
  6056                           
  6057                           ;EEPROM.c: 138: unsigned char ch;
  6058                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  6059  002D4E  50F2               	movf	intcon,w,c	;volatile
  6060  002D50  0B3F               	andlw	63
  6061  002D52  6EF2               	movwf	intcon,c	;volatile
  6062                           
  6063                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  6064  002D54  C01A  F018         	movff	EEReadChar@location,Read_b_eep@badd
  6065  002D58  6A19               	clrf	Read_b_eep@badd+1,c
  6066  002D5A  ECC3  F016         	call	_Read_b_eep	;wreg free
  6067  002D5E  6E1B               	movwf	EEReadChar@ch,c
  6068                           
  6069                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  6070  002D60  50F2               	movf	intcon,w,c	;volatile
  6071  002D62  09C0               	iorlw	192
  6072  002D64  6EF2               	movwf	intcon,c	;volatile
  6073                           
  6074                           ;EEPROM.c: 146: return ch;
  6075  002D66  501B               	movf	EEReadChar@ch,w,c
  6076  002D68  D000               	goto	l384
  6077  002D6A                     l384:
  6078  002D6A  0012               	return		;funcret
  6079  002D6C                     __end_of_EEReadChar:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           postdec1	equ	0xFE5
  6091                           fsr1h	equ	0xFE2
  6092                           fsr1l	equ	0xFE1
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           fsr2h	equ	0xFDA
  6096                           fsr2l	equ	0xFD9
  6097                           status	equ	0xFD8
  6098                           
  6099 ;; *************** function _Read_b_eep *****************
  6100 ;; Defined at:
  6101 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  badd            2   23[COMRAM] unsigned int 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;		None
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      unsigned char 
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;Total ram usage:        2 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    4
  6122 ;; This function calls:
  6123 ;;		Nothing
  6124 ;; This function is called by:
  6125 ;;		_EEReadDouble
  6126 ;;		_EEReadChar
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text31
  6131  002D86                     __ptext31:
  6132                           	opt stack 0
  6133  002D86                     _Read_b_eep:
  6134                           	opt stack 22
  6135                           
  6136                           ;incstack = 0
  6137  002D86  5019               	movf	Read_b_eep@badd+1,w,c
  6138  002D88  0B03               	andlw	3
  6139  002D8A  6EAA               	movwf	4010,c	;volatile
  6140  002D8C  C018  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  6141  002D90  9CA6               	bcf	4006,6,c	;volatile
  6142  002D92  9EA6               	bcf	4006,7,c	;volatile
  6143  002D94  80A6               	bsf	4006,0,c	;volatile
  6144  002D96  F000               	nop	
  6145  002D98  F000               	nop	
  6146  002D9A  50A8               	movf	4008,w,c	;volatile
  6147  002D9C  D000               	goto	l628
  6148  002D9E                     l628:
  6149  002D9E  0012               	return		;funcret
  6150  002DA0                     __end_of_Read_b_eep:
  6151                           	opt stack 0
  6152                           tblptru	equ	0xFF8
  6153                           tblptrh	equ	0xFF7
  6154                           tblptrl	equ	0xFF6
  6155                           tablat	equ	0xFF5
  6156                           prodh	equ	0xFF4
  6157                           prodl	equ	0xFF3
  6158                           intcon	equ	0xFF2
  6159                           postinc0	equ	0xFEE
  6160                           wreg	equ	0xFE8
  6161                           postdec1	equ	0xFE5
  6162                           fsr1h	equ	0xFE2
  6163                           fsr1l	equ	0xFE1
  6164                           indf2	equ	0xFDF
  6165                           postinc2	equ	0xFDE
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function _SendSPI1 *****************
  6171 ;; Defined at:
  6172 ;;		line 44 in file "SPISlave.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  data            1    wreg     unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  data            1   24[COMRAM] unsigned char 
  6177 ;;  temp            1   23[COMRAM] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;		None               void
  6180 ;; Registers used:
  6181 ;;		wreg
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;Total ram usage:        2 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    4
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_main
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text32
  6202  002B28                     __ptext32:
  6203                           	opt stack 0
  6204  002B28                     _SendSPI1:
  6205                           	opt stack 26
  6206                           
  6207                           ;incstack = 0
  6208                           ;SendSPI1@data stored from wreg
  6209  002B28  6E19               	movwf	SendSPI1@data,c
  6210                           
  6211                           ;SPISlave.c: 46: SSP1BUF = data;
  6212  002B2A  C019  FFC9         	movff	SendSPI1@data,4041	;volatile
  6213                           
  6214                           ;SPISlave.c: 47: unsigned char temp;
  6215                           ;SPISlave.c: 48: PIR1bits.SSP1IF = 0;
  6216  002B2E  969E               	bcf	3998,3,c	;volatile
  6217                           
  6218                           ;SPISlave.c: 49: temp = SSP1BUF;
  6219  002B30  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  6220                           
  6221                           ;SPISlave.c: 50: PIR1bits.TMR1IF = 0;
  6222  002B34  909E               	bcf	3998,0,c	;volatile
  6223                           
  6224                           ;SPISlave.c: 51: T1CONbits.TMR1ON = 1;
  6225  002B36  80CD               	bsf	4045,0,c	;volatile
  6226                           
  6227                           ;SPISlave.c: 52: TMR1H = timer1High;
  6228  002B38  C047  FFCF         	movff	_timer1High,4047	;volatile
  6229                           
  6230                           ;SPISlave.c: 53: TMR1L = timer1Low;
  6231  002B3C  C042  FFCE         	movff	_timer1Low,4046	;volatile
  6232                           
  6233                           ;SPISlave.c: 54: while (!PIR1bits.SSP1IF)
  6234  002B40  D006               	goto	l267
  6235  002B42                     l268:
  6236                           
  6237                           ;SPISlave.c: 55: {
  6238                           ;SPISlave.c: 56: if (PIR1bits.TMR1IF == 1)
  6239  002B42  A09E               	btfss	3998,0,c	;volatile
  6240  002B44  D004               	goto	l267
  6241                           
  6242                           ;SPISlave.c: 57: {
  6243                           ;SPISlave.c: 58: PIR1bits.SSPIF = 1;
  6244  002B46  869E               	bsf	3998,3,c	;volatile
  6245                           
  6246                           ;SPISlave.c: 59: temp = SSP1BUF;
  6247  002B48  CFC9 F018          	movff	4041,SendSPI1@temp	;volatile
  6248  002B4C  D000               	goto	l267
  6249  002B4E                     l267:
  6250  002B4E  A69E               	btfss	3998,3,c	;volatile
  6251  002B50  D7F8               	goto	l268
  6252                           
  6253                           ;SPISlave.c: 60: }
  6254                           ;SPISlave.c: 61: }
  6255                           ;SPISlave.c: 62: SSP1CON1bits.SSPOV1 = 0;
  6256  002B52  9CC6               	bcf	4038,6,c	;volatile
  6257                           
  6258                           ;SPISlave.c: 63: PIR1bits.SSP1IF = 0;
  6259  002B54  969E               	bcf	3998,3,c	;volatile
  6260  002B56  0012               	return		;funcret
  6261  002B58                     __end_of_SendSPI1:
  6262                           	opt stack 0
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           postinc0	equ	0xFEE
  6271                           wreg	equ	0xFE8
  6272                           postdec1	equ	0xFE5
  6273                           fsr1h	equ	0xFE2
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _SaveAll *****************
  6282 ;; Defined at:
  6283 ;;		line 150 in file "EEPROM.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    6
  6304 ;; This function calls:
  6305 ;;		_EEWriteChar
  6306 ;;		_EEWriteDouble
  6307 ;; This function is called by:
  6308 ;;		_main
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text33
  6313  002192                     __ptext33:
  6314                           	opt stack 0
  6315  002192                     _SaveAll:
  6316                           	opt stack 24
  6317                           
  6318                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  6319                           
  6320                           ;incstack = 0
  6321  002192  C03C  F01C         	movff	_SetAngle,EEWriteDouble@dub
  6322  002196  C03D  F01D         	movff	_SetAngle+1,EEWriteDouble@dub+1
  6323  00219A  C03E  F01E         	movff	_SetAngle+2,EEWriteDouble@dub+2
  6324  00219E  0E00               	movlw	0
  6325  0021A0  ECC9  F013         	call	_EEWriteDouble
  6326                           
  6327                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  6328  0021A4  C0AD  F01C         	movff	_Kp,EEWriteDouble@dub
  6329  0021A8  C0AE  F01D         	movff	_Kp+1,EEWriteDouble@dub+1
  6330  0021AC  C0AF  F01E         	movff	_Kp+2,EEWriteDouble@dub+2
  6331  0021B0  0E03               	movlw	3
  6332  0021B2  ECC9  F013         	call	_EEWriteDouble
  6333                           
  6334                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  6335  0021B6  C0AA  F01C         	movff	_Ki,EEWriteDouble@dub
  6336  0021BA  C0AB  F01D         	movff	_Ki+1,EEWriteDouble@dub+1
  6337  0021BE  C0AC  F01E         	movff	_Ki+2,EEWriteDouble@dub+2
  6338  0021C2  0E06               	movlw	6
  6339  0021C4  ECC9  F013         	call	_EEWriteDouble
  6340                           
  6341                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  6342  0021C8  C0A7  F01C         	movff	_Kd,EEWriteDouble@dub
  6343  0021CC  C0A8  F01D         	movff	_Kd+1,EEWriteDouble@dub+1
  6344  0021D0  C0A9  F01E         	movff	_Kd+2,EEWriteDouble@dub+2
  6345  0021D4  0E09               	movlw	9
  6346  0021D6  ECC9  F013         	call	_EEWriteDouble
  6347                           
  6348                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  6349  0021DA  CF80 F01C          	movff	3968,EEWriteChar@ch	;volatile
  6350  0021DE  0E0C               	movlw	12
  6351  0021E0  EC73  F016         	call	_EEWriteChar
  6352                           
  6353                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  6354  0021E4  CF81 F01C          	movff	3969,EEWriteChar@ch	;volatile
  6355  0021E8  0E0D               	movlw	13
  6356  0021EA  EC73  F016         	call	_EEWriteChar
  6357                           
  6358                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  6359  0021EE  CF82 F01C          	movff	3970,EEWriteChar@ch	;volatile
  6360  0021F2  0E0E               	movlw	14
  6361  0021F4  EC73  F016         	call	_EEWriteChar
  6362                           
  6363                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  6364  0021F8  CF83 F01C          	movff	3971,EEWriteChar@ch	;volatile
  6365  0021FC  0E0F               	movlw	15
  6366  0021FE  EC73  F016         	call	_EEWriteChar
  6367                           
  6368                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  6369  002202  CF84 F01C          	movff	3972,EEWriteChar@ch	;volatile
  6370  002206  0E10               	movlw	16
  6371  002208  EC73  F016         	call	_EEWriteChar
  6372                           
  6373                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  6374  00220C  CF85 F01C          	movff	3973,EEWriteChar@ch	;volatile
  6375  002210  0E11               	movlw	17
  6376  002212  EC73  F016         	call	_EEWriteChar
  6377                           
  6378                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  6379  002216  CF86 F01C          	movff	3974,EEWriteChar@ch	;volatile
  6380  00221A  0E12               	movlw	18
  6381  00221C  EC73  F016         	call	_EEWriteChar
  6382                           
  6383                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  6384  002220  CF87 F01C          	movff	3975,EEWriteChar@ch	;volatile
  6385  002224  0E13               	movlw	19
  6386  002226  EC73  F016         	call	_EEWriteChar
  6387                           
  6388                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  6389  00222A  CF88 F01C          	movff	3976,EEWriteChar@ch	;volatile
  6390  00222E  0E14               	movlw	20
  6391  002230  EC73  F016         	call	_EEWriteChar
  6392                           
  6393                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  6394  002234  C0BC  F01C         	movff	_PIDEnableFlag,EEWriteChar@ch
  6395  002238  0E15               	movlw	21
  6396  00223A  EC73  F016         	call	_EEWriteChar
  6397                           
  6398                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  6399  00223E  0E01               	movlw	1
  6400  002240  6E1C               	movwf	EEWriteChar@ch,c
  6401  002242  0E16               	movlw	22
  6402  002244  EC73  F016         	call	_EEWriteChar
  6403  002248  0012               	return		;funcret
  6404  00224A                     __end_of_SaveAll:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           postdec1	equ	0xFE5
  6416                           fsr1h	equ	0xFE2
  6417                           fsr1l	equ	0xFE1
  6418                           indf2	equ	0xFDF
  6419                           postinc2	equ	0xFDE
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _EEWriteDouble *****************
  6425 ;; Defined at:
  6426 ;;		line 77 in file "EEPROM.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  location        1    wreg     unsigned char 
  6429 ;;  dub             3   27[COMRAM] unsigned char 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  location        1   30[COMRAM] unsigned char 
  6432 ;;  x               1   31[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;		None               void
  6435 ;; Registers used:
  6436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        5 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    5
  6449 ;; This function calls:
  6450 ;;		_Busy_eep
  6451 ;;		_EEDisassembleDouble
  6452 ;;		_Write_b_eep
  6453 ;; This function is called by:
  6454 ;;		_SaveAll
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text34
  6459  002792                     __ptext34:
  6460                           	opt stack 0
  6461  002792                     _EEWriteDouble:
  6462                           	opt stack 24
  6463                           
  6464                           ;incstack = 0
  6465                           ;EEWriteDouble@location stored from wreg
  6466  002792  6E1F               	movwf	EEWriteDouble@location,c
  6467                           
  6468                           ;EEPROM.c: 79: unsigned char x;
  6469                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  6470  002794  C01C  F018         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  6471  002798  C01D  F019         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  6472  00279C  C01E  F01A         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  6473  0027A0  EC46  F015         	call	_EEDisassembleDouble	;wreg free
  6474                           
  6475                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  6476  0027A4  50F2               	movf	intcon,w,c	;volatile
  6477  0027A6  0B3F               	andlw	63
  6478  0027A8  6EF2               	movwf	intcon,c	;volatile
  6479                           
  6480                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  6481  0027AA  0E00               	movlw	0
  6482  0027AC  6E20               	movwf	EEWriteDouble@x,c
  6483  0027AE                     l3191:
  6484  0027AE  0E02               	movlw	2
  6485  0027B0  6420               	cpfsgt	EEWriteDouble@x,c
  6486  0027B2  D001               	goto	l3195
  6487  0027B4  D014               	goto	l3205
  6488  0027B6                     l3195:
  6489                           
  6490                           ;EEPROM.c: 86: {
  6491                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  6492  0027B6  C01F  F018         	movff	EEWriteDouble@location,Write_b_eep@badd
  6493  0027BA  6A19               	clrf	Write_b_eep@badd+1,c
  6494  0027BC  5020               	movf	EEWriteDouble@x,w,c
  6495  0027BE  0D01               	mullw	1
  6496  0027C0  0E39               	movlw	low _DDouble
  6497  0027C2  24F3               	addwf	prodl,w,c
  6498  0027C4  6ED9               	movwf	fsr2l,c
  6499  0027C6  0E00               	movlw	high _DDouble
  6500  0027C8  20F4               	addwfc	prodh,w,c
  6501  0027CA  6EDA               	movwf	fsr2h,c
  6502  0027CC  50DF               	movf	indf2,w,c
  6503  0027CE  6E1A               	movwf	Write_b_eep@bdat,c
  6504  0027D0  ECCC  F014         	call	_Write_b_eep	;wreg free
  6505                           
  6506                           ;EEPROM.c: 88: location++;
  6507  0027D4  2A1F               	incf	EEWriteDouble@location,f,c
  6508                           
  6509                           ;EEPROM.c: 89: Busy_eep();
  6510  0027D6  EC06  F017         	call	_Busy_eep	;wreg free
  6511  0027DA  2A20               	incf	EEWriteDouble@x,f,c
  6512  0027DC  D7E8               	goto	l3191
  6513  0027DE                     l3205:
  6514                           
  6515                           ;EEPROM.c: 90: }
  6516                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  6517  0027DE  50F2               	movf	intcon,w,c	;volatile
  6518  0027E0  09C0               	iorlw	192
  6519  0027E2  6EF2               	movwf	intcon,c	;volatile
  6520  0027E4  0012               	return		;funcret
  6521  0027E6                     __end_of_EEWriteDouble:
  6522                           	opt stack 0
  6523                           tblptru	equ	0xFF8
  6524                           tblptrh	equ	0xFF7
  6525                           tblptrl	equ	0xFF6
  6526                           tablat	equ	0xFF5
  6527                           prodh	equ	0xFF4
  6528                           prodl	equ	0xFF3
  6529                           intcon	equ	0xFF2
  6530                           postinc0	equ	0xFEE
  6531                           wreg	equ	0xFE8
  6532                           postdec1	equ	0xFE5
  6533                           fsr1h	equ	0xFE2
  6534                           fsr1l	equ	0xFE1
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           fsr2h	equ	0xFDA
  6538                           fsr2l	equ	0xFD9
  6539                           status	equ	0xFD8
  6540                           
  6541 ;; *************** function _EEDisassembleDouble *****************
  6542 ;; Defined at:
  6543 ;;		line 48 in file "EEPROM.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  dub             3   23[COMRAM] unsigned char 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;		None               void
  6550 ;; Registers used:
  6551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:        3 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    4
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_EEWriteDouble
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text35
  6572  002A8C                     __ptext35:
  6573                           	opt stack 0
  6574  002A8C                     _EEDisassembleDouble:
  6575                           	opt stack 24
  6576                           
  6577                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  6578                           
  6579                           ;incstack = 0
  6580  002A8C  0E18               	movlw	low EEDisassembleDouble@dub
  6581  002A8E  6E3F               	movwf	_DoublePtr,c
  6582  002A90  0E00               	movlw	high EEDisassembleDouble@dub
  6583  002A92  6E40               	movwf	_DoublePtr+1,c
  6584                           
  6585                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  6586  002A94  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6587  002A98  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6588  002A9C  50DF               	movf	indf2,w,c
  6589  002A9E  6E39               	movwf	_DDouble,c
  6590                           
  6591                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  6592  002AA0  EE20 F001          	lfsr	2,1
  6593  002AA4  503F               	movf	_DoublePtr,w,c
  6594  002AA6  26D9               	addwf	fsr2l,f,c
  6595  002AA8  5040               	movf	_DoublePtr+1,w,c
  6596  002AAA  22DA               	addwfc	fsr2h,f,c
  6597  002AAC  50DF               	movf	indf2,w,c
  6598  002AAE  6E3A               	movwf	_DDouble+1,c
  6599                           
  6600                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  6601  002AB0  EE20 F002          	lfsr	2,2
  6602  002AB4  503F               	movf	_DoublePtr,w,c
  6603  002AB6  26D9               	addwf	fsr2l,f,c
  6604  002AB8  5040               	movf	_DoublePtr+1,w,c
  6605  002ABA  22DA               	addwfc	fsr2h,f,c
  6606  002ABC  50DF               	movf	indf2,w,c
  6607  002ABE  6E3B               	movwf	_DDouble+2,c
  6608  002AC0  0012               	return		;funcret
  6609  002AC2                     __end_of_EEDisassembleDouble:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           intcon	equ	0xFF2
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           postdec1	equ	0xFE5
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _EEWriteChar *****************
  6630 ;; Defined at:
  6631 ;;		line 122 in file "EEPROM.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  location        1    wreg     unsigned char 
  6634 ;;  ch              1   27[COMRAM] unsigned char 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  location        1   28[COMRAM] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        2 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    5
  6653 ;; This function calls:
  6654 ;;		_Busy_eep
  6655 ;;		_Write_b_eep
  6656 ;; This function is called by:
  6657 ;;		_SaveAll
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text36
  6662  002CE6                     __ptext36:
  6663                           	opt stack 0
  6664  002CE6                     _EEWriteChar:
  6665                           	opt stack 24
  6666                           
  6667                           ;incstack = 0
  6668                           ;EEWriteChar@location stored from wreg
  6669  002CE6  6E1D               	movwf	EEWriteChar@location,c
  6670                           
  6671                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  6672  002CE8  50F2               	movf	intcon,w,c	;volatile
  6673  002CEA  0B3F               	andlw	63
  6674  002CEC  6EF2               	movwf	intcon,c	;volatile
  6675                           
  6676                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  6677  002CEE  C01D  F018         	movff	EEWriteChar@location,Write_b_eep@badd
  6678  002CF2  6A19               	clrf	Write_b_eep@badd+1,c
  6679  002CF4  C01C  F01A         	movff	EEWriteChar@ch,Write_b_eep@bdat
  6680  002CF8  ECCC  F014         	call	_Write_b_eep	;wreg free
  6681                           
  6682                           ;EEPROM.c: 127: Busy_eep();
  6683  002CFC  EC06  F017         	call	_Busy_eep	;wreg free
  6684                           
  6685                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  6686  002D00  50F2               	movf	intcon,w,c	;volatile
  6687  002D02  09C0               	iorlw	192
  6688  002D04  6EF2               	movwf	intcon,c	;volatile
  6689  002D06  0012               	return		;funcret
  6690  002D08                     __end_of_EEWriteChar:
  6691                           	opt stack 0
  6692                           tblptru	equ	0xFF8
  6693                           tblptrh	equ	0xFF7
  6694                           tblptrl	equ	0xFF6
  6695                           tablat	equ	0xFF5
  6696                           prodh	equ	0xFF4
  6697                           prodl	equ	0xFF3
  6698                           intcon	equ	0xFF2
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           postdec1	equ	0xFE5
  6702                           fsr1h	equ	0xFE2
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           fsr2h	equ	0xFDA
  6707                           fsr2l	equ	0xFD9
  6708                           status	equ	0xFD8
  6709                           
  6710 ;; *************** function _Write_b_eep *****************
  6711 ;; Defined at:
  6712 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  badd            2   23[COMRAM] unsigned int 
  6715 ;;  bdat            1   25[COMRAM] unsigned char 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  GIE_BIT_VAL     1   26[COMRAM] unsigned char 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;		None               void
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6727 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;Total ram usage:        4 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    4
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_EEWriteDouble
  6738 ;;		_EEWriteChar
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           	psect	text37
  6743  002998                     __ptext37:
  6744                           	opt stack 0
  6745  002998                     _Write_b_eep:
  6746                           	opt stack 24
  6747                           
  6748                           ;incstack = 0
  6749  002998  0E00               	movlw	0
  6750  00299A  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6751  00299C  5019               	movf	Write_b_eep@badd+1,w,c
  6752  00299E  0B03               	andlw	3
  6753  0029A0  6EAA               	movwf	4010,c	;volatile
  6754  0029A2  C018  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6755  0029A6  C01A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6756  0029AA  9EA6               	bcf	4006,7,c	;volatile
  6757  0029AC  9CA6               	bcf	4006,6,c	;volatile
  6758  0029AE  84A6               	bsf	4006,2,c	;volatile
  6759  0029B0  0E00               	movlw	0
  6760  0029B2  BEF2               	btfsc	intcon,7,c	;volatile
  6761  0029B4  0E01               	movlw	1
  6762  0029B6  6E1B               	movwf	Write_b_eep@GIE_BIT_VAL,c
  6763  0029B8  9EF2               	bcf	intcon,7,c	;volatile
  6764  0029BA  0E55               	movlw	85
  6765  0029BC  6EA7               	movwf	4007,c	;volatile
  6766  0029BE  0EAA               	movlw	170
  6767  0029C0  6EA7               	movwf	4007,c	;volatile
  6768  0029C2  82A6               	bsf	4006,1,c	;volatile
  6769  0029C4  D000               	goto	l643
  6770  0029C6                     l643:
  6771  0029C6  B2A6               	btfsc	4006,1,c	;volatile
  6772  0029C8  D7FE               	goto	l643
  6773  0029CA  B01B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  6774  0029CC  D002               	bra	u2235
  6775  0029CE  9EF2               	bcf	intcon,7,c	;volatile
  6776  0029D0  D001               	bra	u2236
  6777  0029D2                     u2235:
  6778  0029D2  8EF2               	bsf	intcon,7,c	;volatile
  6779  0029D4                     u2236:
  6780  0029D4  94A6               	bcf	4006,2,c	;volatile
  6781  0029D6  0012               	return		;funcret
  6782  0029D8                     __end_of_Write_b_eep:
  6783                           	opt stack 0
  6784                           tblptru	equ	0xFF8
  6785                           tblptrh	equ	0xFF7
  6786                           tblptrl	equ	0xFF6
  6787                           tablat	equ	0xFF5
  6788                           prodh	equ	0xFF4
  6789                           prodl	equ	0xFF3
  6790                           intcon	equ	0xFF2
  6791                           postinc0	equ	0xFEE
  6792                           wreg	equ	0xFE8
  6793                           postdec1	equ	0xFE5
  6794                           fsr1h	equ	0xFE2
  6795                           fsr1l	equ	0xFE1
  6796                           indf2	equ	0xFDF
  6797                           postinc2	equ	0xFDE
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802 ;; *************** function _Busy_eep *****************
  6803 ;; Defined at:
  6804 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;		None
  6809 ;; Return value:  Size  Location     Type
  6810 ;;		None               void
  6811 ;; Registers used:
  6812 ;;		None
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;Total ram usage:        0 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    4
  6825 ;; This function calls:
  6826 ;;		Nothing
  6827 ;; This function is called by:
  6828 ;;		_EEWriteDouble
  6829 ;;		_EEReadDouble
  6830 ;;		_EEWriteChar
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text38
  6835  002E0C                     __ptext38:
  6836                           	opt stack 0
  6837  002E0C                     _Busy_eep:
  6838                           	opt stack 22
  6839                           
  6840                           ;incstack = 0
  6841  002E0C  D000               	goto	l612
  6842  002E0E                     l612:
  6843  002E0E  B2A6               	btfsc	4006,1,c	;volatile
  6844  002E10  D7FE               	goto	l612
  6845  002E12  0012               	return		;funcret
  6846  002E14                     __end_of_Busy_eep:
  6847                           	opt stack 0
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           intcon	equ	0xFF2
  6855                           postinc0	equ	0xFEE
  6856                           wreg	equ	0xFE8
  6857                           postdec1	equ	0xFE5
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8
  6865                           
  6866 ;; *************** function _SPIReassembleDouble *****************
  6867 ;; Defined at:
  6868 ;;		line 119 in file "SPISlave.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;		None
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  dub             3   26[COMRAM] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  3   23[COMRAM] unsigned char 
  6875 ;; Registers used:
  6876 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6882 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;Total ram usage:        6 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    4
  6889 ;; This function calls:
  6890 ;;		Nothing
  6891 ;; This function is called by:
  6892 ;;		_main
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           	psect	text39
  6897  002912                     __ptext39:
  6898                           	opt stack 0
  6899  002912                     _SPIReassembleDouble:
  6900                           	opt stack 26
  6901                           
  6902                           ;SPISlave.c: 121: double dub;
  6903                           ;SPISlave.c: 122: DoublePtr = (unsigned char*) &dub;
  6904                           
  6905                           ;incstack = 0
  6906  002912  0E1B               	movlw	low SPIReassembleDouble@dub
  6907  002914  6E3F               	movwf	_DoublePtr,c
  6908  002916  0E00               	movlw	high SPIReassembleDouble@dub
  6909  002918  6E40               	movwf	_DoublePtr+1,c
  6910                           
  6911                           ;SPISlave.c: 123: DoublePtr[0] = DoubleSPIS[0];
  6912  00291A  C03F  FFD9         	movff	_DoublePtr,fsr2l
  6913  00291E  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  6914  002922  C035  FFDF         	movff	_DoubleSPIS,indf2
  6915                           
  6916                           ;SPISlave.c: 124: DoublePtr[1] = DoubleSPIS[1];
  6917  002926  EE20 F001          	lfsr	2,1
  6918  00292A  503F               	movf	_DoublePtr,w,c
  6919  00292C  26D9               	addwf	fsr2l,f,c
  6920  00292E  5040               	movf	_DoublePtr+1,w,c
  6921  002930  22DA               	addwfc	fsr2h,f,c
  6922  002932  C036  FFDF         	movff	_DoubleSPIS+1,indf2
  6923                           
  6924                           ;SPISlave.c: 125: DoublePtr[2] = DoubleSPIS[2];
  6925  002936  EE20 F002          	lfsr	2,2
  6926  00293A  503F               	movf	_DoublePtr,w,c
  6927  00293C  26D9               	addwf	fsr2l,f,c
  6928  00293E  5040               	movf	_DoublePtr+1,w,c
  6929  002940  22DA               	addwfc	fsr2h,f,c
  6930  002942  C037  FFDF         	movff	_DoubleSPIS+2,indf2
  6931                           
  6932                           ;SPISlave.c: 127: return dub;
  6933  002946  C01B  F018         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  6934  00294A  C01C  F019         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  6935  00294E  C01D  F01A         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  6936  002952  D000               	goto	l296
  6937  002954                     l296:
  6938  002954  0012               	return		;funcret
  6939  002956                     __end_of_SPIReassembleDouble:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           postinc0	equ	0xFEE
  6949                           wreg	equ	0xFE8
  6950                           postdec1	equ	0xFE5
  6951                           fsr1h	equ	0xFE2
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           fsr2h	equ	0xFDA
  6956                           fsr2l	equ	0xFD9
  6957                           status	equ	0xFD8
  6958                           
  6959 ;; *************** function _SPIDisassembleLode *****************
  6960 ;; Defined at:
  6961 ;;		line 92 in file "SPISlave.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  Data            2   36[COMRAM] PTR 
  6964 ;;		 -> DataLode(1800), 
  6965 ;;  Transmit        2   38[COMRAM] PTR unsigned char 
  6966 ;;		 -> TransmitLode(1800), 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  dub             3   44[COMRAM] PTR unsigned char 
  6969 ;;  y               2   42[COMRAM] unsigned int 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;		None               void
  6972 ;; Registers used:
  6973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;Total ram usage:       11 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    5
  6986 ;; This function calls:
  6987 ;;		___lwdiv
  6988 ;;		___wmul
  6989 ;; This function is called by:
  6990 ;;		_main
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text40
  6995  001FEC                     __ptext40:
  6996                           	opt stack 0
  6997  001FEC                     _SPIDisassembleLode:
  6998                           	opt stack 25
  6999                           
  7000                           ;SPISlave.c: 94: unsigned int y = 0;
  7001                           
  7002                           ;incstack = 0
  7003  001FEC  0E00               	movlw	0
  7004  001FEE  6E2C               	movwf	SPIDisassembleLode@y+1,c
  7005  001FF0  0E00               	movlw	0
  7006  001FF2  6E2B               	movwf	SPIDisassembleLode@y,c
  7007                           
  7008                           ;SPISlave.c: 95: double dub;
  7009                           ;SPISlave.c: 96: DoublePtr = (unsigned char*) &dub;
  7010  001FF4  0E2D               	movlw	low SPIDisassembleLode@dub
  7011  001FF6  6E3F               	movwf	_DoublePtr,c
  7012  001FF8  0E00               	movlw	high SPIDisassembleLode@dub
  7013  001FFA  6E40               	movwf	_DoublePtr+1,c
  7014                           
  7015                           ;SPISlave.c: 97: for (y = 0; y != 1800; y += 3)
  7016  001FFC  0E00               	movlw	0
  7017  001FFE  6E2C               	movwf	SPIDisassembleLode@y+1,c
  7018  002000  0E00               	movlw	0
  7019  002002  6E2B               	movwf	SPIDisassembleLode@y,c
  7020  002004  0E08               	movlw	8
  7021  002006  182B               	xorwf	SPIDisassembleLode@y,w,c
  7022  002008  E106               	bnz	l3425
  7023  00200A  0E07               	movlw	7
  7024  00200C  182C               	xorwf	SPIDisassembleLode@y+1,w,c
  7025  00200E  B4D8               	btfsc	status,2,c
  7026  002010  D05C               	goto	l286
  7027  002012  D001               	goto	l3425
  7028  002014  D05A               	goto	l286
  7029  002016                     l3425:
  7030                           
  7031                           ;SPISlave.c: 98: {
  7032                           ;SPISlave.c: 99: dub = Data[y / 3];
  7033  002016  0E00               	movlw	0
  7034  002018  6E1B               	movwf	___lwdiv@divisor+1,c
  7035  00201A  0E03               	movlw	3
  7036  00201C  6E1A               	movwf	___lwdiv@divisor,c
  7037  00201E  C02B  F018         	movff	SPIDisassembleLode@y,___lwdiv@dividend
  7038  002022  C02C  F019         	movff	SPIDisassembleLode@y+1,___lwdiv@dividend+1
  7039  002026  EC45  F013         	call	___lwdiv	;wreg free
  7040  00202A  C018  F01F         	movff	?___lwdiv,___wmul@multiplier
  7041  00202E  C019  F020         	movff	?___lwdiv+1,___wmul@multiplier+1
  7042  002032  0E00               	movlw	0
  7043  002034  6E22               	movwf	___wmul@multiplicand+1,c
  7044  002036  0E03               	movlw	3
  7045  002038  6E21               	movwf	___wmul@multiplicand,c
  7046  00203A  ECEF  F015         	call	___wmul	;wreg free
  7047  00203E  501F               	movf	?___wmul,w,c
  7048  002040  2425               	addwf	SPIDisassembleLode@Data,w,c
  7049  002042  6ED9               	movwf	fsr2l,c
  7050  002044  5020               	movf	?___wmul+1,w,c
  7051  002046  2026               	addwfc	SPIDisassembleLode@Data+1,w,c
  7052  002048  6EDA               	movwf	fsr2h,c
  7053  00204A  CFDE F02D          	movff	postinc2,SPIDisassembleLode@dub
  7054  00204E  CFDE F02E          	movff	postinc2,SPIDisassembleLode@dub+1
  7055  002052  CFDD F02F          	movff	postdec2,SPIDisassembleLode@dub+2
  7056                           
  7057                           ;SPISlave.c: 100: Transmit[y] = DoublePtr[0];
  7058  002056  C03F  FFD9         	movff	_DoublePtr,fsr2l
  7059  00205A  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  7060  00205E  502B               	movf	SPIDisassembleLode@y,w,c
  7061  002060  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7062  002062  6EE1               	movwf	fsr1l,c
  7063  002064  502C               	movf	SPIDisassembleLode@y+1,w,c
  7064  002066  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7065  002068  6EE2               	movwf	fsr1h,c
  7066  00206A  CFDF FFE7          	movff	indf2,indf1
  7067                           
  7068                           ;SPISlave.c: 101: Transmit[y + 1] = DoublePtr[1];
  7069  00206E  EE20 F001          	lfsr	2,1
  7070  002072  503F               	movf	_DoublePtr,w,c
  7071  002074  26D9               	addwf	fsr2l,f,c
  7072  002076  5040               	movf	_DoublePtr+1,w,c
  7073  002078  22DA               	addwfc	fsr2h,f,c
  7074  00207A  0E01               	movlw	1
  7075  00207C  242B               	addwf	SPIDisassembleLode@y,w,c
  7076  00207E  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  7077  002080  0E00               	movlw	0
  7078  002082  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  7079  002084  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  7080  002086  5029               	movf	??_SPIDisassembleLode,w,c
  7081  002088  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7082  00208A  6EE1               	movwf	fsr1l,c
  7083  00208C  502A               	movf	??_SPIDisassembleLode+1,w,c
  7084  00208E  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7085  002090  6EE2               	movwf	fsr1h,c
  7086  002092  CFDF FFE7          	movff	indf2,indf1
  7087                           
  7088                           ;SPISlave.c: 102: Transmit[y + 2] = DoublePtr[2];
  7089  002096  EE20 F002          	lfsr	2,2
  7090  00209A  503F               	movf	_DoublePtr,w,c
  7091  00209C  26D9               	addwf	fsr2l,f,c
  7092  00209E  5040               	movf	_DoublePtr+1,w,c
  7093  0020A0  22DA               	addwfc	fsr2h,f,c
  7094  0020A2  0E02               	movlw	2
  7095  0020A4  242B               	addwf	SPIDisassembleLode@y,w,c
  7096  0020A6  6E29               	movwf	??_SPIDisassembleLode& (0+255),c
  7097  0020A8  0E00               	movlw	0
  7098  0020AA  202C               	addwfc	SPIDisassembleLode@y+1,w,c
  7099  0020AC  6E2A               	movwf	(??_SPIDisassembleLode+1)& (0+255),c
  7100  0020AE  5029               	movf	??_SPIDisassembleLode,w,c
  7101  0020B0  2427               	addwf	SPIDisassembleLode@Transmit,w,c
  7102  0020B2  6EE1               	movwf	fsr1l,c
  7103  0020B4  502A               	movf	??_SPIDisassembleLode+1,w,c
  7104  0020B6  2028               	addwfc	SPIDisassembleLode@Transmit+1,w,c
  7105  0020B8  6EE2               	movwf	fsr1h,c
  7106  0020BA  CFDF FFE7          	movff	indf2,indf1
  7107  0020BE  0E03               	movlw	3
  7108  0020C0  262B               	addwf	SPIDisassembleLode@y,f,c
  7109  0020C2  0E00               	movlw	0
  7110  0020C4  222C               	addwfc	SPIDisassembleLode@y+1,f,c
  7111  0020C6  D79E               	goto	L2
  7112  0020C8  D7A6               	goto	l3425
  7113  0020CA                     l286:
  7114  0020CA  0012               	return		;funcret
  7115  0020CC                     __end_of_SPIDisassembleLode:
  7116                           	opt stack 0
  7117                           tblptru	equ	0xFF8
  7118                           tblptrh	equ	0xFF7
  7119                           tblptrl	equ	0xFF6
  7120                           tablat	equ	0xFF5
  7121                           prodh	equ	0xFF4
  7122                           prodl	equ	0xFF3
  7123                           intcon	equ	0xFF2
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           indf1	equ	0xFE7
  7127                           postdec1	equ	0xFE5
  7128                           fsr1h	equ	0xFE2
  7129                           fsr1l	equ	0xFE1
  7130                           indf2	equ	0xFDF
  7131                           postinc2	equ	0xFDE
  7132                           postdec2	equ	0xFDD
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function ___wmul *****************
  7138 ;; Defined at:
  7139 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  multiplier      2   30[COMRAM] unsigned int 
  7142 ;;  multiplicand    2   32[COMRAM] unsigned int 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  product         2   34[COMRAM] unsigned int 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  2   30[COMRAM] unsigned int 
  7147 ;; Registers used:
  7148 ;;		wreg, status,2, status,0, prodl, prodh
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;Total ram usage:        6 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    4
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_SPIDisassembleLode
  7165 ;;		_main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text41
  7170  002BDE                     __ptext41:
  7171                           	opt stack 0
  7172  002BDE                     ___wmul:
  7173                           	opt stack 26
  7174                           
  7175                           ;incstack = 0
  7176  002BDE  501F               	movf	___wmul@multiplier,w,c
  7177  002BE0  0221               	mulwf	___wmul@multiplicand,c
  7178  002BE2  CFF3 F023          	movff	prodl,___wmul@product
  7179  002BE6  CFF4 F024          	movff	prodh,___wmul@product+1
  7180  002BEA  501F               	movf	___wmul@multiplier,w,c
  7181  002BEC  0222               	mulwf	___wmul@multiplicand+1,c
  7182  002BEE  50F3               	movf	prodl,w,c
  7183  002BF0  2624               	addwf	___wmul@product+1,f,c
  7184  002BF2  5020               	movf	___wmul@multiplier+1,w,c
  7185  002BF4  0221               	mulwf	___wmul@multiplicand,c
  7186  002BF6  50F3               	movf	prodl,w,c
  7187  002BF8  2624               	addwf	___wmul@product+1,f,c
  7188  002BFA  C023  F01F         	movff	___wmul@product,?___wmul
  7189  002BFE  C024  F020         	movff	___wmul@product+1,?___wmul+1
  7190  002C02  D000               	goto	l675
  7191  002C04                     l675:
  7192  002C04  0012               	return		;funcret
  7193  002C06                     __end_of___wmul:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           postinc0	equ	0xFEE
  7203                           wreg	equ	0xFE8
  7204                           indf1	equ	0xFE7
  7205                           postdec1	equ	0xFE5
  7206                           fsr1h	equ	0xFE2
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           fsr2h	equ	0xFDA
  7212                           fsr2l	equ	0xFD9
  7213                           status	equ	0xFD8
  7214                           
  7215 ;; *************** function ___lwdiv *****************
  7216 ;; Defined at:
  7217 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  dividend        2   23[COMRAM] unsigned int 
  7220 ;;  divisor         2   25[COMRAM] unsigned int 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;  quotient        2   27[COMRAM] unsigned int 
  7223 ;;  counter         1   29[COMRAM] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  2   23[COMRAM] unsigned int 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7233 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;Total ram usage:        7 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    4
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_SPIDisassembleLode
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text42
  7248  00268A                     __ptext42:
  7249                           	opt stack 0
  7250  00268A                     ___lwdiv:
  7251                           	opt stack 25
  7252                           
  7253                           ;incstack = 0
  7254  00268A  0E00               	movlw	0
  7255  00268C  6E1D               	movwf	___lwdiv@quotient+1,c
  7256  00268E  0E00               	movlw	0
  7257  002690  6E1C               	movwf	___lwdiv@quotient,c
  7258  002692  501A               	movf	___lwdiv@divisor,w,c
  7259  002694  101B               	iorwf	___lwdiv@divisor+1,w,c
  7260  002696  B4D8               	btfsc	status,2,c
  7261  002698  D021               	goto	l1218
  7262  00269A  0E01               	movlw	1
  7263  00269C  6E1E               	movwf	___lwdiv@counter,c
  7264  00269E  D005               	goto	l3249
  7265  0026A0                     l3247:
  7266  0026A0  90D8               	bcf	status,0,c
  7267  0026A2  361A               	rlcf	___lwdiv@divisor,f,c
  7268  0026A4  361B               	rlcf	___lwdiv@divisor+1,f,c
  7269  0026A6  2A1E               	incf	___lwdiv@counter,f,c
  7270  0026A8  D000               	goto	l3249
  7271  0026AA                     l3249:
  7272  0026AA  BE1B               	btfsc	___lwdiv@divisor+1,7,c
  7273  0026AC  D002               	goto	l3251
  7274  0026AE  D7F8               	goto	l3247
  7275  0026B0  D000               	goto	l3251
  7276  0026B2                     l3251:
  7277  0026B2  90D8               	bcf	status,0,c
  7278  0026B4  361C               	rlcf	___lwdiv@quotient,f,c
  7279  0026B6  361D               	rlcf	___lwdiv@quotient+1,f,c
  7280  0026B8  501A               	movf	___lwdiv@divisor,w,c
  7281  0026BA  5C18               	subwf	___lwdiv@dividend,w,c
  7282  0026BC  501B               	movf	___lwdiv@divisor+1,w,c
  7283  0026BE  5819               	subwfb	___lwdiv@dividend+1,w,c
  7284  0026C0  A0D8               	btfss	status,0,c
  7285  0026C2  D006               	goto	l3259
  7286  0026C4  501A               	movf	___lwdiv@divisor,w,c
  7287  0026C6  5E18               	subwf	___lwdiv@dividend,f,c
  7288  0026C8  501B               	movf	___lwdiv@divisor+1,w,c
  7289  0026CA  5A19               	subwfb	___lwdiv@dividend+1,f,c
  7290  0026CC  801C               	bsf	___lwdiv@quotient,0,c
  7291  0026CE  D000               	goto	l3259
  7292  0026D0                     l3259:
  7293  0026D0  90D8               	bcf	status,0,c
  7294  0026D2  321B               	rrcf	___lwdiv@divisor+1,f,c
  7295  0026D4  321A               	rrcf	___lwdiv@divisor,f,c
  7296  0026D6  2E1E               	decfsz	___lwdiv@counter,f,c
  7297  0026D8  D7EC               	goto	l3251
  7298  0026DA  D000               	goto	l1218
  7299  0026DC                     l1218:
  7300  0026DC  C01C  F018         	movff	___lwdiv@quotient,?___lwdiv
  7301  0026E0  C01D  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7302  0026E4  0012               	return		;funcret
  7303  0026E6                     __end_of___lwdiv:
  7304                           	opt stack 0
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           intcon	equ	0xFF2
  7312                           postinc0	equ	0xFEE
  7313                           wreg	equ	0xFE8
  7314                           indf1	equ	0xFE7
  7315                           postdec1	equ	0xFE5
  7316                           fsr1h	equ	0xFE2
  7317                           fsr1l	equ	0xFE1
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           fsr2h	equ	0xFDA
  7322                           fsr2l	equ	0xFD9
  7323                           status	equ	0xFD8
  7324                           
  7325 ;; *************** function _SPIDisassembleDouble *****************
  7326 ;; Defined at:
  7327 ;;		line 83 in file "SPISlave.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;  dub             3   25[COMRAM] unsigned int 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;		None               void
  7334 ;; Registers used:
  7335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:        3 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    5
  7348 ;; This function calls:
  7349 ;;		_GenerateChecksum
  7350 ;; This function is called by:
  7351 ;;		_main
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text43
  7356  002A18                     __ptext43:
  7357                           	opt stack 0
  7358  002A18                     _SPIDisassembleDouble:
  7359                           	opt stack 25
  7360                           
  7361                           ;SPISlave.c: 85: DoublePtr = (unsigned char*) &dub;
  7362                           
  7363                           ;incstack = 0
  7364  002A18  0E1A               	movlw	low SPIDisassembleDouble@dub
  7365  002A1A  6E3F               	movwf	_DoublePtr,c
  7366  002A1C  0E00               	movlw	high SPIDisassembleDouble@dub
  7367  002A1E  6E40               	movwf	_DoublePtr+1,c
  7368                           
  7369                           ;SPISlave.c: 86: DoubleSPIS[0] = DoublePtr[0];
  7370  002A20  C03F  FFD9         	movff	_DoublePtr,fsr2l
  7371  002A24  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  7372  002A28  50DF               	movf	indf2,w,c
  7373  002A2A  6E35               	movwf	_DoubleSPIS,c
  7374                           
  7375                           ;SPISlave.c: 87: DoubleSPIS[1] = DoublePtr[1];
  7376  002A2C  EE20 F001          	lfsr	2,1
  7377  002A30  503F               	movf	_DoublePtr,w,c
  7378  002A32  26D9               	addwf	fsr2l,f,c
  7379  002A34  5040               	movf	_DoublePtr+1,w,c
  7380  002A36  22DA               	addwfc	fsr2h,f,c
  7381  002A38  50DF               	movf	indf2,w,c
  7382  002A3A  6E36               	movwf	_DoubleSPIS+1,c
  7383                           
  7384                           ;SPISlave.c: 88: DoubleSPIS[2] = DoublePtr[2];
  7385  002A3C  EE20 F002          	lfsr	2,2
  7386  002A40  503F               	movf	_DoublePtr,w,c
  7387  002A42  26D9               	addwf	fsr2l,f,c
  7388  002A44  5040               	movf	_DoublePtr+1,w,c
  7389  002A46  22DA               	addwfc	fsr2h,f,c
  7390  002A48  50DF               	movf	indf2,w,c
  7391  002A4A  6E37               	movwf	_DoubleSPIS+2,c
  7392                           
  7393                           ;SPISlave.c: 89: DoubleSPIS[3] = GenerateChecksum();
  7394  002A4C  ECAB  F014         	call	_GenerateChecksum	;wreg free
  7395  002A50  6E38               	movwf	_DoubleSPIS+3,c
  7396  002A52  0012               	return		;funcret
  7397  002A54                     __end_of_SPIDisassembleDouble:
  7398                           	opt stack 0
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           intcon	equ	0xFF2
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           indf1	equ	0xFE7
  7409                           postdec1	equ	0xFE5
  7410                           fsr1h	equ	0xFE2
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _GenerateChecksum *****************
  7420 ;; Defined at:
  7421 ;;		line 106 in file "SPISlave.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  y               1   24[COMRAM] unsigned char 
  7426 ;;  sum             1   23[COMRAM] unsigned char 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  1    wreg      unsigned char 
  7429 ;; Registers used:
  7430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;Total ram usage:        2 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    4
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_SPIDisassembleDouble
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text44
  7451  002956                     __ptext44:
  7452                           	opt stack 0
  7453  002956                     _GenerateChecksum:
  7454                           	opt stack 25
  7455                           
  7456                           ;SPISlave.c: 108: if ((Command > 0x00) && (Command < 0x0A))
  7457                           
  7458                           ;incstack = 0
  7459  002956  5041               	movf	_Command,w,c
  7460  002958  B4D8               	btfsc	status,2,c
  7461  00295A  D01B               	goto	l3171
  7462  00295C  0E0A               	movlw	10
  7463  00295E  6041               	cpfslt	_Command,c
  7464  002960  D018               	goto	l3171
  7465                           
  7466                           ;SPISlave.c: 109: {
  7467                           ;SPISlave.c: 110: unsigned char y, sum = 0;
  7468  002962  0E00               	movlw	0
  7469  002964  6E18               	movwf	GenerateChecksum@sum,c
  7470                           
  7471                           ;SPISlave.c: 111: for (y = 0; y != 3; y++)
  7472  002966  0E00               	movlw	0
  7473  002968  6E19               	movwf	GenerateChecksum@y,c
  7474  00296A                     l3155:
  7475  00296A  0E03               	movlw	3
  7476  00296C  1819               	xorwf	GenerateChecksum@y,w,c
  7477  00296E  B4D8               	btfsc	status,2,c
  7478  002970  D00E               	goto	l3165
  7479  002972  D001               	goto	l3159
  7480  002974  D00C               	goto	l3165
  7481  002976                     l3159:
  7482                           
  7483                           ;SPISlave.c: 112: sum += DoubleSPIS[y];
  7484  002976  5019               	movf	GenerateChecksum@y,w,c
  7485  002978  0D01               	mullw	1
  7486  00297A  0E35               	movlw	low _DoubleSPIS
  7487  00297C  24F3               	addwf	prodl,w,c
  7488  00297E  6ED9               	movwf	fsr2l,c
  7489  002980  0E00               	movlw	high _DoubleSPIS
  7490  002982  20F4               	addwfc	prodh,w,c
  7491  002984  6EDA               	movwf	fsr2h,c
  7492  002986  50DF               	movf	indf2,w,c
  7493  002988  2618               	addwf	GenerateChecksum@sum,f,c
  7494  00298A  2A19               	incf	GenerateChecksum@y,f,c
  7495  00298C  D7EE               	goto	l3155
  7496  00298E                     l3165:
  7497                           
  7498                           ;SPISlave.c: 113: return sum;
  7499  00298E  5018               	movf	GenerateChecksum@sum,w,c
  7500                           
  7501                           ;SPISlave.c: 114: }
  7502  002990  D002               	goto	l292
  7503  002992                     l3171:
  7504                           
  7505                           ;SPISlave.c: 115: else
  7506                           ;SPISlave.c: 116: return 0xFF;
  7507  002992  0EFF               	movlw	255
  7508  002994  D000               	goto	l292
  7509  002996                     l292:
  7510  002996  0012               	return		;funcret
  7511  002998                     __end_of_GenerateChecksum:
  7512                           	opt stack 0
  7513                           tblptru	equ	0xFF8
  7514                           tblptrh	equ	0xFF7
  7515                           tblptrl	equ	0xFF6
  7516                           tablat	equ	0xFF5
  7517                           prodh	equ	0xFF4
  7518                           prodl	equ	0xFF3
  7519                           intcon	equ	0xFF2
  7520                           postinc0	equ	0xFEE
  7521                           wreg	equ	0xFE8
  7522                           indf1	equ	0xFE7
  7523                           postdec1	equ	0xFE5
  7524                           fsr1h	equ	0xFE2
  7525                           fsr1l	equ	0xFE1
  7526                           indf2	equ	0xFDF
  7527                           postinc2	equ	0xFDE
  7528                           postdec2	equ	0xFDD
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533 ;; *************** function _ReceiveSPI1 *****************
  7534 ;; Defined at:
  7535 ;;		line 66 in file "SPISlave.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;		None
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;		None
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      unsigned char 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;Total ram usage:        0 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    4
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_main
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text45
  7564  002C06                     __ptext45:
  7565                           	opt stack 0
  7566  002C06                     _ReceiveSPI1:
  7567                           	opt stack 26
  7568                           
  7569                           ;SPISlave.c: 68: SSP1BUF = 0x00;
  7570                           
  7571                           ;incstack = 0
  7572  002C06  0E00               	movlw	0
  7573  002C08  6EC9               	movwf	4041,c	;volatile
  7574                           
  7575                           ;SPISlave.c: 69: PIR1bits.TMR1IF = 0;
  7576  002C0A  909E               	bcf	3998,0,c	;volatile
  7577                           
  7578                           ;SPISlave.c: 70: T1CONbits.TMR1ON = 1;
  7579  002C0C  80CD               	bsf	4045,0,c	;volatile
  7580                           
  7581                           ;SPISlave.c: 71: TMR1H = timer1High;
  7582  002C0E  C047  FFCF         	movff	_timer1High,4047	;volatile
  7583                           
  7584                           ;SPISlave.c: 72: TMR1L = timer1Low;
  7585  002C12  C042  FFCE         	movff	_timer1Low,4046	;volatile
  7586                           
  7587                           ;SPISlave.c: 73: while (!PIR1bits.SSP1IF)
  7588  002C16  D004               	goto	l274
  7589  002C18                     l275:
  7590                           
  7591                           ;SPISlave.c: 74: {
  7592                           ;SPISlave.c: 75: if (PIR1bits.TMR1IF == 1)
  7593  002C18  A09E               	btfss	3998,0,c	;volatile
  7594  002C1A  D002               	goto	l274
  7595                           
  7596                           ;SPISlave.c: 76: PIR1bits.SSPIF = 1;
  7597  002C1C  869E               	bsf	3998,3,c	;volatile
  7598  002C1E  D000               	goto	l274
  7599  002C20                     l274:
  7600  002C20  A69E               	btfss	3998,3,c	;volatile
  7601  002C22  D7FA               	goto	l275
  7602                           
  7603                           ;SPISlave.c: 77: }
  7604                           ;SPISlave.c: 78: PIR1bits.SSP1IF = 0;
  7605  002C24  969E               	bcf	3998,3,c	;volatile
  7606                           
  7607                           ;SPISlave.c: 79: SSP1CON1bits.SSPOV1 = 0;
  7608  002C26  9CC6               	bcf	4038,6,c	;volatile
  7609                           
  7610                           ;SPISlave.c: 80: return SSP1BUF;
  7611  002C28  50C9               	movf	4041,w,c	;volatile
  7612  002C2A  D000               	goto	l278
  7613  002C2C                     l278:
  7614  002C2C  0012               	return		;funcret
  7615  002C2E                     __end_of_ReceiveSPI1:
  7616                           	opt stack 0
  7617                           tblptru	equ	0xFF8
  7618                           tblptrh	equ	0xFF7
  7619                           tblptrl	equ	0xFF6
  7620                           tablat	equ	0xFF5
  7621                           prodh	equ	0xFF4
  7622                           prodl	equ	0xFF3
  7623                           intcon	equ	0xFF2
  7624                           postinc0	equ	0xFEE
  7625                           wreg	equ	0xFE8
  7626                           indf1	equ	0xFE7
  7627                           postdec1	equ	0xFE5
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _ImplementJSMotion *****************
  7638 ;; Defined at:
  7639 ;;		line 58 in file "MotorControl.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  JoystickValu    2   40[BANK0 ] int 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  CCPinput        2   44[BANK0 ] unsigned int 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;		None               void
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;Total ram usage:        6 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    5
  7660 ;; This function calls:
  7661 ;;		_abs
  7662 ;; This function is called by:
  7663 ;;		_main
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text46
  7668  001A4C                     __ptext46:
  7669                           	opt stack 0
  7670  001A4C                     _ImplementJSMotion:
  7671                           	opt stack 25
  7672                           
  7673                           ;MotorControl.c: 60: unsigned int CCPinput;
  7674                           ;MotorControl.c: 61: if (JoystickValue < DeadbandLow)
  7675                           
  7676                           ;incstack = 0
  7677  001A4C  5045               	movf	_DeadbandLow,w,c
  7678  001A4E  0100               	movlb	0	; () banked
  7679  001A50  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7680  001A52  0100               	movlb	0	; () banked
  7681  001A54  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7682  001A56  0A80               	xorlw	128
  7683  001A58  0100               	movlb	0	; () banked
  7684  001A5A  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7685  001A5C  5046               	movf	_DeadbandLow+1,w,c
  7686  001A5E  0A80               	xorlw	128
  7687  001A60  0100               	movlb	0	; () banked
  7688  001A62  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7689  001A64  B0D8               	btfsc	status,0,c
  7690  001A66  D002               	goto	l4075
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;MotorControl.c: 62: {
  7694                           ;MotorControl.c: 63: CCP3CONbits.P3M1 = 1;
  7695  001A68  8EB7               	bsf	4023,7,c	;volatile
  7696  001A6A  D00F               	goto	l4079
  7697  001A6C                     l4075:
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  7701  001A6C  0100               	movlb	0	; () banked
  7702  001A6E  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7703  001A70  5C43               	subwf	_DeadbandHigh,w,c
  7704  001A72  5044               	movf	_DeadbandHigh+1,w,c
  7705  001A74  0A80               	xorlw	128
  7706  001A76  0100               	movlb	0	; () banked
  7707  001A78  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7708  001A7A  0100               	movlb	0	; () banked
  7709  001A7C  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7710  001A7E  0A80               	xorlw	128
  7711  001A80  0100               	movlb	0	; () banked
  7712  001A82  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7713  001A84  B0D8               	btfsc	status,0,c
  7714  001A86  D005               	goto	l4081
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;MotorControl.c: 67: {
  7718                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  7719  001A88  9EB7               	bcf	4023,7,c	;volatile
  7720  001A8A                     l4079:
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;MotorControl.c: 69: PIDEnableFlag = 0;
  7724  001A8A  0E00               	movlw	0
  7725  001A8C  0100               	movlb	0	; () banked
  7726  001A8E  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  7727                           
  7728                           ;MotorControl.c: 70: }
  7729  001A90  D02A               	goto	l4093
  7730  001A92                     l4081:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;MotorControl.c: 71: else if ((JoystickValue <= DeadbandHigh) && (JoystickValue >= Deadb
      +                          andLow) && (PIDEnableFlag == 0))
  7734  001A92  0100               	movlb	0	; () banked
  7735  001A94  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7736  001A96  5C43               	subwf	_DeadbandHigh,w,c
  7737  001A98  5044               	movf	_DeadbandHigh+1,w,c
  7738  001A9A  0A80               	xorlw	128
  7739  001A9C  0100               	movlb	0	; () banked
  7740  001A9E  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7741  001AA0  0100               	movlb	0	; () banked
  7742  001AA2  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7743  001AA4  0A80               	xorlw	128
  7744  001AA6  0100               	movlb	0	; () banked
  7745  001AA8  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7746  001AAA  A0D8               	btfss	status,0,c
  7747  001AAC  D01C               	goto	l4093
  7748                           
  7749                           ; BSR set to: 0
  7750  001AAE  5045               	movf	_DeadbandLow,w,c
  7751  001AB0  0100               	movlb	0	; () banked
  7752  001AB2  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7753  001AB4  0100               	movlb	0	; () banked
  7754  001AB6  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7755  001AB8  0A80               	xorlw	128
  7756  001ABA  0100               	movlb	0	; () banked
  7757  001ABC  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7758  001ABE  5046               	movf	_DeadbandLow+1,w,c
  7759  001AC0  0A80               	xorlw	128
  7760  001AC2  0100               	movlb	0	; () banked
  7761  001AC4  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7762  001AC6  A0D8               	btfss	status,0,c
  7763  001AC8  D00E               	goto	l4093
  7764                           
  7765                           ; BSR set to: 0
  7766  001ACA  0100               	movlb	0	; () banked
  7767  001ACC  51BC               	movf	_PIDEnableFlag& (0+255),w,b
  7768  001ACE  A4D8               	btfss	status,2,c
  7769  001AD0  D00A               	goto	l4093
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;MotorControl.c: 72: {
  7773                           ;MotorControl.c: 73: JoystickValue = 0;
  7774  001AD2  0E00               	movlw	0
  7775  001AD4  0100               	movlb	0	; () banked
  7776  001AD6  6F89               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  7777  001AD8  0E00               	movlw	0
  7778  001ADA  6F88               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  7779                           
  7780                           ;MotorControl.c: 74: CCPR3L = 0x00;
  7781  001ADC  0E00               	movlw	0
  7782  001ADE  6EB8               	movwf	4024,c	;volatile
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;MotorControl.c: 75: CCP3CONbits.DC3B1 = 0;
  7786  001AE0  9AB7               	bcf	4023,5,c	;volatile
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;MotorControl.c: 76: CCP3CONbits.DC3B0 = 0;
  7790  001AE2  98B7               	bcf	4023,4,c	;volatile
  7791                           
  7792                           ; BSR set to: 0
  7793                           
  7794                           ; BSR set to: 0
  7795  001AE4  D000               	goto	l4093
  7796  001AE6                     l4093:
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;MotorControl.c: 77: }
  7800                           ;MotorControl.c: 79: if ((JoystickValue < DeadbandLow) || (JoystickValue > DeadbandHigh)
      +                          )
  7801  001AE6  5045               	movf	_DeadbandLow,w,c
  7802  001AE8  0100               	movlb	0	; () banked
  7803  001AEA  5D88               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7804  001AEC  0100               	movlb	0	; () banked
  7805  001AEE  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7806  001AF0  0A80               	xorlw	128
  7807  001AF2  0100               	movlb	0	; () banked
  7808  001AF4  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7809  001AF6  5046               	movf	_DeadbandLow+1,w,c
  7810  001AF8  0A80               	xorlw	128
  7811  001AFA  0100               	movlb	0	; () banked
  7812  001AFC  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7813  001AFE  A0D8               	btfss	status,0,c
  7814  001B00  D00E               	goto	l4097
  7815                           
  7816                           ; BSR set to: 0
  7817  001B02  0100               	movlb	0	; () banked
  7818  001B04  5188               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7819  001B06  5C43               	subwf	_DeadbandHigh,w,c
  7820  001B08  5044               	movf	_DeadbandHigh+1,w,c
  7821  001B0A  0A80               	xorlw	128
  7822  001B0C  0100               	movlb	0	; () banked
  7823  001B0E  6F8A               	movwf	??_ImplementJSMotion& (0+255),b
  7824  001B10  0100               	movlb	0	; () banked
  7825  001B12  5189               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7826  001B14  0A80               	xorlw	128
  7827  001B16  0100               	movlb	0	; () banked
  7828  001B18  598A               	subwfb	??_ImplementJSMotion& (0+255),w,b
  7829  001B1A  B0D8               	btfsc	status,0,c
  7830  001B1C  D030               	goto	l109
  7831  001B1E                     l4097:
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;MotorControl.c: 80: {
  7835                           ;MotorControl.c: 81: JoystickValue = abs(JoystickValue);
  7836  001B1E  C088  F084         	movff	ImplementJSMotion@JoystickValue,abs@a
  7837  001B22  C089  F085         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  7838  001B26  ECD9  F015         	call	_abs	;wreg free
  7839  001B2A  C084  F088         	movff	?_abs,ImplementJSMotion@JoystickValue
  7840  001B2E  C085  F089         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  7841                           
  7842                           ;MotorControl.c: 82: CCPinput = JoystickValue * 2;
  7843  001B32  90D8               	bcf	status,0,c
  7844  001B34  0100               	movlb	0	; () banked
  7845  001B36  3588               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  7846  001B38  0100               	movlb	0	; () banked
  7847  001B3A  6F8C               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  7848  001B3C  0100               	movlb	0	; () banked
  7849  001B3E  3589               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  7850  001B40  0100               	movlb	0	; () banked
  7851  001B42  6F8D               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;MotorControl.c: 83: CCPR3L = (CCPinput >> 2) & 0xFF;
  7855  001B44  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7856  001B48  C08D  F08B         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  7857  001B4C  0100               	movlb	0	; () banked
  7858  001B4E  90D8               	bcf	status,0,c
  7859  001B50  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7860  001B52  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7861  001B54  0100               	movlb	0	; () banked
  7862  001B56  90D8               	bcf	status,0,c
  7863  001B58  338B               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  7864  001B5A  338A               	rrcf	??_ImplementJSMotion& (0+255),f,b
  7865  001B5C  0100               	movlb	0	; () banked
  7866  001B5E  518A               	movf	??_ImplementJSMotion& (0+255),w,b
  7867  001B60  6EB8               	movwf	4024,c	;volatile
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;MotorControl.c: 84: CCP3CONbits.DC3B = (CCPinput & 0x03);
  7871  001B62  C08C  F08A         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  7872  001B66  0E03               	movlw	3
  7873  001B68  0100               	movlb	0	; () banked
  7874  001B6A  178A               	andwf	??_ImplementJSMotion& (0+255),f,b
  7875  001B6C  0100               	movlb	0	; () banked
  7876  001B6E  3B8A               	swapf	??_ImplementJSMotion& (0+255),f,b
  7877  001B70  50B7               	movf	4023,w,c	;volatile
  7878  001B72  0100               	movlb	0	; () banked
  7879  001B74  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  7880  001B76  0BCF               	andlw	-49
  7881  001B78  198A               	xorwf	??_ImplementJSMotion& (0+255),w,b
  7882  001B7A  6EB7               	movwf	4023,c	;volatile
  7883  001B7C  D000               	goto	l109
  7884  001B7E                     l109:
  7885                           
  7886                           ; BSR set to: 0
  7887  001B7E  0012               	return		;funcret
  7888  001B80                     __end_of_ImplementJSMotion:
  7889                           	opt stack 0
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           postinc0	equ	0xFEE
  7898                           wreg	equ	0xFE8
  7899                           indf1	equ	0xFE7
  7900                           postdec1	equ	0xFE5
  7901                           fsr1h	equ	0xFE2
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           fsr2h	equ	0xFDA
  7907                           fsr2l	equ	0xFD9
  7908                           status	equ	0xFD8
  7909                           
  7910 ;; *************** function _abs *****************
  7911 ;; Defined at:
  7912 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  a               2   36[BANK0 ] int 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  2   36[BANK0 ] int 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7926 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;Total ram usage:        4 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    4
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_ImplementPIDMotion
  7937 ;;		_ImplementJSMotion
  7938 ;;		_ZeroMotors
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text47
  7943  002BB2                     __ptext47:
  7944                           	opt stack 0
  7945  002BB2                     _abs:
  7946                           	opt stack 24
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;incstack = 0
  7950  002BB2  0100               	movlb	0	; () banked
  7951  002BB4  AF85               	btfss	(abs@a+1)& (0+255),7,b
  7952  002BB6  D00E               	goto	l722
  7953                           
  7954                           ; BSR set to: 0
  7955  002BB8  C084  F086         	movff	abs@a,??_abs
  7956  002BBC  C085  F087         	movff	abs@a+1,??_abs+1
  7957  002BC0  0100               	movlb	0	; () banked
  7958  002BC2  1F86               	comf	??_abs& (0+255),f,b
  7959  002BC4  1F87               	comf	(??_abs+1)& (0+255),f,b
  7960  002BC6  4B86               	infsnz	??_abs& (0+255),f,b
  7961  002BC8  2B87               	incf	(??_abs+1)& (0+255),f,b
  7962  002BCA  C086  F084         	movff	??_abs,?_abs
  7963  002BCE  C087  F085         	movff	??_abs+1,?_abs+1
  7964  002BD2  D004               	goto	l723
  7965  002BD4                     l722:
  7966                           
  7967                           ; BSR set to: 0
  7968  002BD4  C084  F084         	movff	abs@a,?_abs
  7969  002BD8  C085  F085         	movff	abs@a+1,?_abs+1
  7970  002BDC                     l723:
  7971                           
  7972                           ; BSR set to: 0
  7973  002BDC  0012               	return		;funcret
  7974  002BDE                     __end_of_abs:
  7975                           	opt stack 0
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           prodh	equ	0xFF4
  7981                           prodl	equ	0xFF3
  7982                           intcon	equ	0xFF2
  7983                           postinc0	equ	0xFEE
  7984                           wreg	equ	0xFE8
  7985                           indf1	equ	0xFE7
  7986                           postdec1	equ	0xFE5
  7987                           fsr1h	equ	0xFE2
  7988                           fsr1l	equ	0xFE1
  7989                           indf2	equ	0xFDF
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _DetectMovement *****************
  7997 ;; Defined at:
  7998 ;;		line 42 in file "Joystick.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  ADCresult       2   28[COMRAM] unsigned int 
  8003 ;;  JoystickResu    2   26[COMRAM] int 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  2   23[COMRAM] int 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;Total ram usage:        7 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    4
  8020 ;; This function calls:
  8021 ;;		Nothing
  8022 ;; This function is called by:
  8023 ;;		_main
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           	psect	text48
  8028  0025C0                     __ptext48:
  8029                           	opt stack 0
  8030  0025C0                     _DetectMovement:
  8031                           	opt stack 26
  8032                           
  8033                           ;Joystick.c: 44: unsigned int ADCresult;
  8034                           ;Joystick.c: 45: int JoystickResult;
  8035                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;incstack = 0
  8039  0025C0  82C2               	bsf	4034,1,c	;volatile
  8040                           
  8041                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  8042  0025C2  D000               	goto	l43
  8043  0025C4                     l43:
  8044  0025C4  B2C2               	btfsc	4034,1,c	;volatile
  8045  0025C6  D7FE               	goto	l43
  8046                           
  8047                           ;Joystick.c: 50: ADCresult = ADRESH;
  8048  0025C8  CFC4 F01D          	movff	4036,DetectMovement@ADCresult	;volatile
  8049  0025CC  6A1E               	clrf	DetectMovement@ADCresult+1,c
  8050                           
  8051                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  8052  0025CE  501D               	movf	DetectMovement@ADCresult,w,c
  8053  0025D0  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8054  0025D2  6A1D               	clrf	DetectMovement@ADCresult,c
  8055                           
  8056                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  8057  0025D4  501D               	movf	DetectMovement@ADCresult,w,c
  8058  0025D6  10C3               	iorwf	4035,w,c	;volatile
  8059  0025D8  6E1D               	movwf	DetectMovement@ADCresult,c
  8060  0025DA  501E               	movf	DetectMovement@ADCresult+1,w,c
  8061  0025DC  6E1E               	movwf	DetectMovement@ADCresult+1,c
  8062                           
  8063                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  8064  0025DE  0E00               	movlw	0
  8065  0025E0  241D               	addwf	DetectMovement@ADCresult,w,c
  8066  0025E2  6E1B               	movwf	DetectMovement@JoystickResult,c
  8067  0025E4  0EFE               	movlw	254
  8068  0025E6  201E               	addwfc	DetectMovement@ADCresult+1,w,c
  8069  0025E8  6E1C               	movwf	DetectMovement@JoystickResult+1,c
  8070                           
  8071                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  8072  0025EA  501B               	movf	DetectMovement@JoystickResult,w,c
  8073  0025EC  5C43               	subwf	_DeadbandHigh,w,c
  8074  0025EE  5044               	movf	_DeadbandHigh+1,w,c
  8075  0025F0  0A80               	xorlw	128
  8076  0025F2  6E1A               	movwf	??_DetectMovement& (0+255),c
  8077  0025F4  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8078  0025F6  0A80               	xorlw	128
  8079  0025F8  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8080  0025FA  A0D8               	btfss	status,0,c
  8081  0025FC  D00A               	goto	l3315
  8082  0025FE  5045               	movf	_DeadbandLow,w,c
  8083  002600  5C1B               	subwf	DetectMovement@JoystickResult,w,c
  8084  002602  501C               	movf	DetectMovement@JoystickResult+1,w,c
  8085  002604  0A80               	xorlw	128
  8086  002606  6E1A               	movwf	??_DetectMovement& (0+255),c
  8087  002608  5046               	movf	_DeadbandLow+1,w,c
  8088  00260A  0A80               	xorlw	128
  8089  00260C  581A               	subwfb	??_DetectMovement& (0+255),w,c
  8090  00260E  B0D8               	btfsc	status,0,c
  8091  002610  D008               	goto	l3323
  8092  002612                     l3315:
  8093                           
  8094                           ;Joystick.c: 56: {
  8095                           ;Joystick.c: 57: PIDEnableFlag = 0;
  8096  002612  0E00               	movlw	0
  8097  002614  0100               	movlb	0	; () banked
  8098  002616  6FBC               	movwf	_PIDEnableFlag& (0+255),b
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;Joystick.c: 58: return JoystickResult;
  8102  002618  C01B  F018         	movff	DetectMovement@JoystickResult,?_DetectMovement
  8103  00261C  C01C  F019         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;Joystick.c: 59: }
  8107                           
  8108                           ; BSR set to: 0
  8109  002620  D005               	goto	l49
  8110  002622                     l3323:
  8111                           
  8112                           ;Joystick.c: 60: else
  8113                           ;Joystick.c: 61: return 0;
  8114  002622  0E00               	movlw	0
  8115  002624  6E19               	movwf	?_DetectMovement+1,c
  8116  002626  0E00               	movlw	0
  8117  002628  6E18               	movwf	?_DetectMovement,c
  8118  00262A  D000               	goto	l49
  8119  00262C                     l49:
  8120  00262C  0012               	return		;funcret
  8121  00262E                     __end_of_DetectMovement:
  8122                           	opt stack 0
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           postinc0	equ	0xFEE
  8131                           wreg	equ	0xFE8
  8132                           indf1	equ	0xFE7
  8133                           postdec1	equ	0xFE5
  8134                           fsr1h	equ	0xFE2
  8135                           fsr1l	equ	0xFE1
  8136                           indf2	equ	0xFDF
  8137                           postinc2	equ	0xFDE
  8138                           postdec2	equ	0xFDD
  8139                           fsr2h	equ	0xFDA
  8140                           fsr2l	equ	0xFD9
  8141                           status	equ	0xFD8
  8142                           
  8143 ;; *************** function _DetectJoystick *****************
  8144 ;; Defined at:
  8145 ;;		line 27 in file "Joystick.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;		None
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;		None
  8150 ;; Return value:  Size  Location     Type
  8151 ;;		None               void
  8152 ;; Registers used:
  8153 ;;		wreg, status,2
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;Total ram usage:        0 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    4
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		_main
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text49
  8174  002D08                     __ptext49:
  8175                           	opt stack 0
  8176  002D08                     _DetectJoystick:
  8177                           	opt stack 26
  8178                           
  8179                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  8180                           
  8181                           ;incstack = 0
  8182  002D08  B281               	btfsc	3969,1,c	;volatile
  8183  002D0A  D003               	goto	l37
  8184                           
  8185                           ;Joystick.c: 30: {
  8186                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  8187  002D0C  9480               	bcf	3968,2,c	;volatile
  8188                           
  8189                           ;Joystick.c: 32: JSEnableFlag = 0;
  8190  002D0E  0E00               	movlw	0
  8191  002D10  D008               	goto	L3
  8192  002D12                     l37:
  8193                           
  8194                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  8195  002D12  A281               	btfss	3969,1,c	;volatile
  8196  002D14  D009               	goto	l40
  8197  002D16  0100               	movlb	0	; () banked
  8198  002D18  51BB               	movf	_JSEnableFlag& (0+255),w,b
  8199  002D1A  A4D8               	btfss	status,2,c
  8200  002D1C  D005               	goto	l40
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;Joystick.c: 36: {
  8204                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  8205  002D1E  8480               	bsf	3968,2,c	;volatile
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;Joystick.c: 38: JSEnableFlag = 1;
  8209  002D20  0E01               	movlw	1
  8210  002D22                     L3:
  8211  002D22  0100               	movlb	0	; () banked
  8212  002D24  6FBB               	movwf	_JSEnableFlag& (0+255),b
  8213                           
  8214                           ; BSR set to: 0
  8215  002D26  D000               	goto	l40
  8216  002D28                     l40:
  8217  002D28  0012               	return		;funcret
  8218  002D2A                     __end_of_DetectJoystick:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           postinc0	equ	0xFEE
  8228                           wreg	equ	0xFE8
  8229                           indf1	equ	0xFE7
  8230                           postdec1	equ	0xFE5
  8231                           fsr1h	equ	0xFE2
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function _ISR *****************
  8241 ;; Defined at:
  8242 ;;		line 245 in file "RTDuC.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;		None
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;		None
  8247 ;; Return value:  Size  Location     Type
  8248 ;;		None               void
  8249 ;; Registers used:
  8250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;Total ram usage:       14 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    3
  8263 ;; This function calls:
  8264 ;;		_INT0Int
  8265 ;;		_SPIInt
  8266 ;;		_TMR0Int
  8267 ;;		i2_SaveAll
  8268 ;; This function is called by:
  8269 ;;		Interrupt level 2
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	intcode
  8274  000008                     __pintcode:
  8275                           	opt stack 0
  8276  000008                     _ISR:
  8277                           	opt stack 21
  8278                           
  8279                           ;incstack = 0
  8280  000008  CFFA F00A          	movff	pclath,??_ISR
  8281  00000C  CFFB F00B          	movff	pclatu,??_ISR+1
  8282  000010  CFE9 F00C          	movff	fsr0l,??_ISR+2
  8283  000014  EDD5  F011         	call	int_func,f	;refresh shadow registers
  8284                           pclatu	equ	0xFFB
  8285                           pclath	equ	0xFFA
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           postinc0	equ	0xFEE
  8294                           fsr0l	equ	0xFE9
  8295                           wreg	equ	0xFE8
  8296                           indf1	equ	0xFE7
  8297                           postdec1	equ	0xFE5
  8298                           fsr1h	equ	0xFE2
  8299                           fsr1l	equ	0xFE1
  8300                           indf2	equ	0xFDF
  8301                           postinc2	equ	0xFDE
  8302                           postdec2	equ	0xFDD
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307                           	psect	intcode_body
  8308  0023AA                     __pintcode_body:
  8309                           	opt stack 21
  8310  0023AA                     int_func:
  8311                           	opt stack 21
  8312  0023AA  0006               	pop		; remove dummy address from shadow register refresh
  8313  0023AC  CFEA F00D          	movff	fsr0h,??_ISR+3
  8314  0023B0  CFE1 F00E          	movff	fsr1l,??_ISR+4
  8315  0023B4  CFE2 F00F          	movff	fsr1h,??_ISR+5
  8316  0023B8  CFD9 F010          	movff	fsr2l,??_ISR+6
  8317  0023BC  CFDA F011          	movff	fsr2h,??_ISR+7
  8318  0023C0  CFF3 F012          	movff	prodl,??_ISR+8
  8319  0023C4  CFF4 F013          	movff	prodh,??_ISR+9
  8320  0023C8  CFF6 F014          	movff	tblptrl,??_ISR+10
  8321  0023CC  CFF7 F015          	movff	tblptrh,??_ISR+11
  8322  0023D0  CFF8 F016          	movff	tblptru,??_ISR+12
  8323  0023D4  CFF5 F017          	movff	tablat,??_ISR+13
  8324                           
  8325                           ;RTDuC.c: 247: PORTCbits.RC6 = 1;
  8326  0023D8  8C82               	bsf	3970,6,c	;volatile
  8327                           
  8328                           ;RTDuC.c: 248: if (PIR1bits.SSP1IF == 1)
  8329  0023DA  A69E               	btfss	3998,3,c	;volatile
  8330  0023DC  D003               	goto	i2l3765
  8331                           
  8332                           ;RTDuC.c: 249: {
  8333                           ;RTDuC.c: 250: SPIInt();
  8334  0023DE  EC2A  F016         	call	_SPIInt	;wreg free
  8335  0023E2  D000               	goto	i2l3765
  8336  0023E4                     i2l3765:
  8337                           
  8338                           ;RTDuC.c: 251: }
  8339                           ;RTDuC.c: 253: if (INTCONbits.TMR0IF == 1)
  8340  0023E4  A4F2               	btfss	intcon,2,c	;volatile
  8341  0023E6  D003               	goto	i2l3769
  8342                           
  8343                           ;RTDuC.c: 254: {
  8344                           ;RTDuC.c: 255: TMR0Int();
  8345  0023E8  ECEC  F016         	call	_TMR0Int	;wreg free
  8346  0023EC  D000               	goto	i2l3769
  8347  0023EE                     i2l3769:
  8348                           
  8349                           ;RTDuC.c: 256: }
  8350                           ;RTDuC.c: 258: if (INTCONbits.INT0IF == 1)
  8351  0023EE  A2F2               	btfss	intcon,1,c	;volatile
  8352  0023F0  D003               	goto	i2l3773
  8353                           
  8354                           ;RTDuC.c: 259: {
  8355                           ;RTDuC.c: 260: INT0Int();
  8356  0023F2  EC61  F016         	call	_INT0Int	;wreg free
  8357  0023F6  D000               	goto	i2l3773
  8358  0023F8                     i2l3773:
  8359                           
  8360                           ;RTDuC.c: 261: }
  8361                           ;RTDuC.c: 263: if (PIR2bits.HLVDIF == 1)
  8362  0023F8  A4A1               	btfss	4001,2,c	;volatile
  8363  0023FA  D006               	goto	i2l3779
  8364                           
  8365                           ;RTDuC.c: 264: {
  8366                           ;RTDuC.c: 265: PORTAbits.RA4 = 0;
  8367  0023FC  9880               	bcf	3968,4,c	;volatile
  8368                           
  8369                           ;RTDuC.c: 266: PORTAbits.RA3 = 0;
  8370  0023FE  9680               	bcf	3968,3,c	;volatile
  8371                           
  8372                           ;RTDuC.c: 267: PORTAbits.RA2 = 0;
  8373  002400  9480               	bcf	3968,2,c	;volatile
  8374                           
  8375                           ;RTDuC.c: 268: SaveAll();
  8376  002402  EC25  F011         	call	i2_SaveAll	;wreg free
  8377  002406  D000               	goto	i2l3779
  8378  002408                     i2l3779:
  8379                           
  8380                           ;RTDuC.c: 269: }
  8381                           ;RTDuC.c: 271: if (PIR2bits.OSCFIF == 1)
  8382  002408  AEA1               	btfss	4001,7,c	;volatile
  8383  00240A  D002               	goto	i2l584
  8384  00240C  00FF               	reset		;# 
  8385  00240E  D000               	goto	i2l584
  8386  002410                     i2l584:
  8387  002410  C017  FFF5         	movff	??_ISR+13,tablat
  8388  002414  C016  FFF8         	movff	??_ISR+12,tblptru
  8389  002418  C015  FFF7         	movff	??_ISR+11,tblptrh
  8390  00241C  C014  FFF6         	movff	??_ISR+10,tblptrl
  8391  002420  C013  FFF4         	movff	??_ISR+9,prodh
  8392  002424  C012  FFF3         	movff	??_ISR+8,prodl
  8393  002428  C011  FFDA         	movff	??_ISR+7,fsr2h
  8394  00242C  C010  FFD9         	movff	??_ISR+6,fsr2l
  8395  002430  C00F  FFE2         	movff	??_ISR+5,fsr1h
  8396  002434  C00E  FFE1         	movff	??_ISR+4,fsr1l
  8397  002438  C00D  FFEA         	movff	??_ISR+3,fsr0h
  8398  00243C  C00C  FFE9         	movff	??_ISR+2,fsr0l
  8399  002440  C00B  FFFB         	movff	??_ISR+1,pclatu
  8400  002444  C00A  FFFA         	movff	??_ISR,pclath
  8401  002448  0011               	retfie		f
  8402  00244A                     __end_of_ISR:
  8403                           	opt stack 0
  8404                           pclatu	equ	0xFFB
  8405                           pclath	equ	0xFFA
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           prodh	equ	0xFF4
  8411                           prodl	equ	0xFF3
  8412                           intcon	equ	0xFF2
  8413                           postinc0	equ	0xFEE
  8414                           fsr0h	equ	0xFEA
  8415                           fsr0l	equ	0xFE9
  8416                           wreg	equ	0xFE8
  8417                           indf1	equ	0xFE7
  8418                           postdec1	equ	0xFE5
  8419                           fsr1h	equ	0xFE2
  8420                           fsr1l	equ	0xFE1
  8421                           indf2	equ	0xFDF
  8422                           postinc2	equ	0xFDE
  8423                           postdec2	equ	0xFDD
  8424                           fsr2h	equ	0xFDA
  8425                           fsr2l	equ	0xFD9
  8426                           status	equ	0xFD8
  8427                           
  8428 ;; *************** function i2_SaveAll *****************
  8429 ;; Defined at:
  8430 ;;		line 150 in file "EEPROM.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;		None
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;		None
  8435 ;; Return value:  Size  Location     Type
  8436 ;;		None               void
  8437 ;; Registers used:
  8438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;Total ram usage:        0 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    2
  8451 ;; This function calls:
  8452 ;;		i2_EEWriteChar
  8453 ;;		i2_EEWriteDouble
  8454 ;; This function is called by:
  8455 ;;		_ISR
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           	psect	text51
  8460  00224A                     __ptext51:
  8461                           	opt stack 0
  8462  00224A                     i2_SaveAll:
  8463                           	opt stack 21
  8464                           
  8465                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  8466                           
  8467                           ;incstack = 0
  8468  00224A  C03C  F005         	movff	_SetAngle,i2EEWriteDouble@dub
  8469  00224E  C03D  F006         	movff	_SetAngle+1,i2EEWriteDouble@dub+1
  8470  002252  C03E  F007         	movff	_SetAngle+2,i2EEWriteDouble@dub+2
  8471  002256  0E00               	movlw	0
  8472  002258  ECF3  F013         	call	i2_EEWriteDouble
  8473                           
  8474                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  8475  00225C  C0AD  F005         	movff	_Kp,i2EEWriteDouble@dub
  8476  002260  C0AE  F006         	movff	_Kp+1,i2EEWriteDouble@dub+1
  8477  002264  C0AF  F007         	movff	_Kp+2,i2EEWriteDouble@dub+2
  8478  002268  0E03               	movlw	3
  8479  00226A  ECF3  F013         	call	i2_EEWriteDouble
  8480                           
  8481                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  8482  00226E  C0AA  F005         	movff	_Ki,i2EEWriteDouble@dub
  8483  002272  C0AB  F006         	movff	_Ki+1,i2EEWriteDouble@dub+1
  8484  002276  C0AC  F007         	movff	_Ki+2,i2EEWriteDouble@dub+2
  8485  00227A  0E06               	movlw	6
  8486  00227C  ECF3  F013         	call	i2_EEWriteDouble
  8487                           
  8488                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  8489  002280  C0A7  F005         	movff	_Kd,i2EEWriteDouble@dub
  8490  002284  C0A8  F006         	movff	_Kd+1,i2EEWriteDouble@dub+1
  8491  002288  C0A9  F007         	movff	_Kd+2,i2EEWriteDouble@dub+2
  8492  00228C  0E09               	movlw	9
  8493  00228E  ECF3  F013         	call	i2_EEWriteDouble
  8494                           
  8495                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  8496  002292  CF80 F005          	movff	3968,i2EEWriteChar@ch	;volatile
  8497  002296  0E0C               	movlw	12
  8498  002298  EC95  F016         	call	i2_EEWriteChar
  8499                           
  8500                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  8501  00229C  CF81 F005          	movff	3969,i2EEWriteChar@ch	;volatile
  8502  0022A0  0E0D               	movlw	13
  8503  0022A2  EC95  F016         	call	i2_EEWriteChar
  8504                           
  8505                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  8506  0022A6  CF82 F005          	movff	3970,i2EEWriteChar@ch	;volatile
  8507  0022AA  0E0E               	movlw	14
  8508  0022AC  EC95  F016         	call	i2_EEWriteChar
  8509                           
  8510                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  8511  0022B0  CF83 F005          	movff	3971,i2EEWriteChar@ch	;volatile
  8512  0022B4  0E0F               	movlw	15
  8513  0022B6  EC95  F016         	call	i2_EEWriteChar
  8514                           
  8515                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  8516  0022BA  CF84 F005          	movff	3972,i2EEWriteChar@ch	;volatile
  8517  0022BE  0E10               	movlw	16
  8518  0022C0  EC95  F016         	call	i2_EEWriteChar
  8519                           
  8520                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  8521  0022C4  CF85 F005          	movff	3973,i2EEWriteChar@ch	;volatile
  8522  0022C8  0E11               	movlw	17
  8523  0022CA  EC95  F016         	call	i2_EEWriteChar
  8524                           
  8525                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  8526  0022CE  CF86 F005          	movff	3974,i2EEWriteChar@ch	;volatile
  8527  0022D2  0E12               	movlw	18
  8528  0022D4  EC95  F016         	call	i2_EEWriteChar
  8529                           
  8530                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  8531  0022D8  CF87 F005          	movff	3975,i2EEWriteChar@ch	;volatile
  8532  0022DC  0E13               	movlw	19
  8533  0022DE  EC95  F016         	call	i2_EEWriteChar
  8534                           
  8535                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  8536  0022E2  CF88 F005          	movff	3976,i2EEWriteChar@ch	;volatile
  8537  0022E6  0E14               	movlw	20
  8538  0022E8  EC95  F016         	call	i2_EEWriteChar
  8539                           
  8540                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  8541  0022EC  C0BC  F005         	movff	_PIDEnableFlag,i2EEWriteChar@ch
  8542  0022F0  0E15               	movlw	21
  8543  0022F2  EC95  F016         	call	i2_EEWriteChar
  8544                           
  8545                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  8546  0022F6  0E01               	movlw	1
  8547  0022F8  6E05               	movwf	i2EEWriteChar@ch,c
  8548  0022FA  0E16               	movlw	22
  8549  0022FC  EC95  F016         	call	i2_EEWriteChar
  8550  002300  0012               	return		;funcret
  8551  002302                     __end_ofi2_SaveAll:
  8552                           	opt stack 0
  8553                           pclatu	equ	0xFFB
  8554                           pclath	equ	0xFFA
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           prodh	equ	0xFF4
  8560                           prodl	equ	0xFF3
  8561                           intcon	equ	0xFF2
  8562                           postinc0	equ	0xFEE
  8563                           fsr0h	equ	0xFEA
  8564                           fsr0l	equ	0xFE9
  8565                           wreg	equ	0xFE8
  8566                           indf1	equ	0xFE7
  8567                           postdec1	equ	0xFE5
  8568                           fsr1h	equ	0xFE2
  8569                           fsr1l	equ	0xFE1
  8570                           indf2	equ	0xFDF
  8571                           postinc2	equ	0xFDE
  8572                           postdec2	equ	0xFDD
  8573                           fsr2h	equ	0xFDA
  8574                           fsr2l	equ	0xFD9
  8575                           status	equ	0xFD8
  8576                           
  8577 ;; *************** function i2_EEWriteDouble *****************
  8578 ;; Defined at:
  8579 ;;		line 77 in file "EEPROM.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  location        1    wreg     unsigned char 
  8582 ;;  dub             3    4[COMRAM] unsigned char 
  8583 ;; Auto vars:     Size  Location     Type
  8584 ;;  location        1    7[COMRAM] unsigned char 
  8585 ;;  EEWriteDoubl    1    8[COMRAM] unsigned char 
  8586 ;; Return value:  Size  Location     Type
  8587 ;;		None               void
  8588 ;; Registers used:
  8589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8595 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;Total ram usage:        5 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    1
  8602 ;; This function calls:
  8603 ;;		i2_Busy_eep
  8604 ;;		i2_EEDisassembleDouble
  8605 ;;		i2_Write_b_eep
  8606 ;; This function is called by:
  8607 ;;		i2_SaveAll
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text52
  8612  0027E6                     __ptext52:
  8613                           	opt stack 0
  8614  0027E6                     i2_EEWriteDouble:
  8615                           	opt stack 21
  8616                           
  8617                           ;incstack = 0
  8618                           ;i2EEWriteDouble@location stored from wreg
  8619  0027E6  6E08               	movwf	i2EEWriteDouble@location,c
  8620                           
  8621                           ;EEPROM.c: 79: unsigned char x;
  8622                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  8623  0027E8  C005  F001         	movff	i2EEWriteDouble@dub,i2EEDisassembleDouble@dub
  8624  0027EC  C006  F002         	movff	i2EEWriteDouble@dub+1,i2EEDisassembleDouble@dub+1
  8625  0027F0  C007  F003         	movff	i2EEWriteDouble@dub+2,i2EEDisassembleDouble@dub+2
  8626  0027F4  EC61  F015         	call	i2_EEDisassembleDouble	;wreg free
  8627                           
  8628                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  8629  0027F8  50F2               	movf	intcon,w,c	;volatile
  8630  0027FA  0B3F               	andlw	63
  8631  0027FC  6EF2               	movwf	intcon,c	;volatile
  8632                           
  8633                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  8634  0027FE  0E00               	movlw	0
  8635  002800  6E09               	movwf	i2EEWriteDouble@x,c
  8636  002802                     i2l3269:
  8637  002802  0E02               	movlw	2
  8638  002804  6409               	cpfsgt	i2EEWriteDouble@x,c
  8639  002806  D001               	goto	i2l3273
  8640  002808  D014               	goto	i2l3283
  8641  00280A                     i2l3273:
  8642                           
  8643                           ;EEPROM.c: 86: {
  8644                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  8645  00280A  C008  F001         	movff	i2EEWriteDouble@location,i2Write_b_eep@badd
  8646  00280E  6A02               	clrf	i2Write_b_eep@badd+1,c
  8647  002810  5009               	movf	i2EEWriteDouble@x,w,c
  8648  002812  0D01               	mullw	1
  8649  002814  0E39               	movlw	low _DDouble
  8650  002816  24F3               	addwf	prodl,w,c
  8651  002818  6ED9               	movwf	fsr2l,c
  8652  00281A  0E00               	movlw	high _DDouble
  8653  00281C  20F4               	addwfc	prodh,w,c
  8654  00281E  6EDA               	movwf	fsr2h,c
  8655  002820  50DF               	movf	indf2,w,c
  8656  002822  6E03               	movwf	i2Write_b_eep@bdat,c
  8657  002824  ECEC  F014         	call	i2_Write_b_eep	;wreg free
  8658                           
  8659                           ;EEPROM.c: 88: location++;
  8660  002828  2A08               	incf	i2EEWriteDouble@location,f,c
  8661                           
  8662                           ;EEPROM.c: 89: Busy_eep();
  8663  00282A  EC0A  F017         	call	i2_Busy_eep	;wreg free
  8664  00282E  2A09               	incf	i2EEWriteDouble@x,f,c
  8665  002830  D7E8               	goto	i2l3269
  8666  002832                     i2l3283:
  8667                           
  8668                           ;EEPROM.c: 90: }
  8669                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  8670  002832  50F2               	movf	intcon,w,c	;volatile
  8671  002834  09C0               	iorlw	192
  8672  002836  6EF2               	movwf	intcon,c	;volatile
  8673  002838  0012               	return		;funcret
  8674  00283A                     __end_ofi2_EEWriteDouble:
  8675                           	opt stack 0
  8676                           pclatu	equ	0xFFB
  8677                           pclath	equ	0xFFA
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           prodh	equ	0xFF4
  8683                           prodl	equ	0xFF3
  8684                           intcon	equ	0xFF2
  8685                           postinc0	equ	0xFEE
  8686                           fsr0h	equ	0xFEA
  8687                           fsr0l	equ	0xFE9
  8688                           wreg	equ	0xFE8
  8689                           indf1	equ	0xFE7
  8690                           postdec1	equ	0xFE5
  8691                           fsr1h	equ	0xFE2
  8692                           fsr1l	equ	0xFE1
  8693                           indf2	equ	0xFDF
  8694                           postinc2	equ	0xFDE
  8695                           postdec2	equ	0xFDD
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function i2_EEDisassembleDouble *****************
  8701 ;; Defined at:
  8702 ;;		line 48 in file "EEPROM.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  dub             3    0[COMRAM] unsigned char 
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;		None               void
  8709 ;; Registers used:
  8710 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8716 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;Total ram usage:        3 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		i2_EEWriteDouble
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text53
  8730  002AC2                     __ptext53:
  8731                           	opt stack 0
  8732  002AC2                     i2_EEDisassembleDouble:
  8733                           	opt stack 21
  8734                           
  8735                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  8736                           
  8737                           ;incstack = 0
  8738  002AC2  0E01               	movlw	low i2EEDisassembleDouble@dub
  8739  002AC4  6E3F               	movwf	_DoublePtr,c
  8740  002AC6  0E00               	movlw	high i2EEDisassembleDouble@dub
  8741  002AC8  6E40               	movwf	_DoublePtr+1,c
  8742                           
  8743                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  8744  002ACA  C03F  FFD9         	movff	_DoublePtr,fsr2l
  8745  002ACE  C040  FFDA         	movff	_DoublePtr+1,fsr2h
  8746  002AD2  50DF               	movf	indf2,w,c
  8747  002AD4  6E39               	movwf	_DDouble,c
  8748                           
  8749                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  8750  002AD6  EE20 F001          	lfsr	2,1
  8751  002ADA  503F               	movf	_DoublePtr,w,c
  8752  002ADC  26D9               	addwf	fsr2l,f,c
  8753  002ADE  5040               	movf	_DoublePtr+1,w,c
  8754  002AE0  22DA               	addwfc	fsr2h,f,c
  8755  002AE2  50DF               	movf	indf2,w,c
  8756  002AE4  6E3A               	movwf	_DDouble+1,c
  8757                           
  8758                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  8759  002AE6  EE20 F002          	lfsr	2,2
  8760  002AEA  503F               	movf	_DoublePtr,w,c
  8761  002AEC  26D9               	addwf	fsr2l,f,c
  8762  002AEE  5040               	movf	_DoublePtr+1,w,c
  8763  002AF0  22DA               	addwfc	fsr2h,f,c
  8764  002AF2  50DF               	movf	indf2,w,c
  8765  002AF4  6E3B               	movwf	_DDouble+2,c
  8766  002AF6  0012               	return		;funcret
  8767  002AF8                     __end_ofi2_EEDisassembleDouble:
  8768                           	opt stack 0
  8769                           pclatu	equ	0xFFB
  8770                           pclath	equ	0xFFA
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           intcon	equ	0xFF2
  8778                           postinc0	equ	0xFEE
  8779                           fsr0h	equ	0xFEA
  8780                           fsr0l	equ	0xFE9
  8781                           wreg	equ	0xFE8
  8782                           indf1	equ	0xFE7
  8783                           postdec1	equ	0xFE5
  8784                           fsr1h	equ	0xFE2
  8785                           fsr1l	equ	0xFE1
  8786                           indf2	equ	0xFDF
  8787                           postinc2	equ	0xFDE
  8788                           postdec2	equ	0xFDD
  8789                           fsr2h	equ	0xFDA
  8790                           fsr2l	equ	0xFD9
  8791                           status	equ	0xFD8
  8792                           
  8793 ;; *************** function i2_EEWriteChar *****************
  8794 ;; Defined at:
  8795 ;;		line 122 in file "EEPROM.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  location        1    wreg     unsigned char 
  8798 ;;  ch              1    4[COMRAM] unsigned char 
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;  location        1    5[COMRAM] unsigned char 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;		None               void
  8803 ;; Registers used:
  8804 ;;		wreg, status,2, status,0, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8810 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;Total ram usage:        2 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    1
  8817 ;; This function calls:
  8818 ;;		i2_Busy_eep
  8819 ;;		i2_Write_b_eep
  8820 ;; This function is called by:
  8821 ;;		i2_SaveAll
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text54
  8826  002D2A                     __ptext54:
  8827                           	opt stack 0
  8828  002D2A                     i2_EEWriteChar:
  8829                           	opt stack 21
  8830                           
  8831                           ;incstack = 0
  8832                           ;i2EEWriteChar@location stored from wreg
  8833  002D2A  6E06               	movwf	i2EEWriteChar@location,c
  8834                           
  8835                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  8836  002D2C  50F2               	movf	intcon,w,c	;volatile
  8837  002D2E  0B3F               	andlw	63
  8838  002D30  6EF2               	movwf	intcon,c	;volatile
  8839                           
  8840                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  8841  002D32  C006  F001         	movff	i2EEWriteChar@location,i2Write_b_eep@badd
  8842  002D36  6A02               	clrf	i2Write_b_eep@badd+1,c
  8843  002D38  C005  F003         	movff	i2EEWriteChar@ch,i2Write_b_eep@bdat
  8844  002D3C  ECEC  F014         	call	i2_Write_b_eep	;wreg free
  8845                           
  8846                           ;EEPROM.c: 127: Busy_eep();
  8847  002D40  EC0A  F017         	call	i2_Busy_eep	;wreg free
  8848                           
  8849                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  8850  002D44  50F2               	movf	intcon,w,c	;volatile
  8851  002D46  09C0               	iorlw	192
  8852  002D48  6EF2               	movwf	intcon,c	;volatile
  8853  002D4A  0012               	return		;funcret
  8854  002D4C                     __end_ofi2_EEWriteChar:
  8855                           	opt stack 0
  8856                           pclatu	equ	0xFFB
  8857                           pclath	equ	0xFFA
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           postinc0	equ	0xFEE
  8866                           fsr0h	equ	0xFEA
  8867                           fsr0l	equ	0xFE9
  8868                           wreg	equ	0xFE8
  8869                           indf1	equ	0xFE7
  8870                           postdec1	equ	0xFE5
  8871                           fsr1h	equ	0xFE2
  8872                           fsr1l	equ	0xFE1
  8873                           indf2	equ	0xFDF
  8874                           postinc2	equ	0xFDE
  8875                           postdec2	equ	0xFDD
  8876                           fsr2h	equ	0xFDA
  8877                           fsr2l	equ	0xFD9
  8878                           status	equ	0xFD8
  8879                           
  8880 ;; *************** function i2_Write_b_eep *****************
  8881 ;; Defined at:
  8882 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;  badd            2    0[COMRAM] unsigned int 
  8885 ;;  bdat            1    2[COMRAM] unsigned char 
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;  Write_b_eep     1    3[COMRAM] unsigned char 
  8888 ;; Return value:  Size  Location     Type
  8889 ;;		None               void
  8890 ;; Registers used:
  8891 ;;		wreg, status,2, status,0
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8897 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8900 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8901 ;;Total ram usage:        4 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; This function calls:
  8904 ;;		Nothing
  8905 ;; This function is called by:
  8906 ;;		i2_EEWriteDouble
  8907 ;;		i2_EEWriteChar
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           	psect	text55
  8912  0029D8                     __ptext55:
  8913                           	opt stack 0
  8914  0029D8                     i2_Write_b_eep:
  8915                           	opt stack 21
  8916                           
  8917                           ;incstack = 0
  8918  0029D8  0E00               	movlw	0
  8919  0029DA  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  8920  0029DC  5002               	movf	i2Write_b_eep@badd+1,w,c
  8921  0029DE  0B03               	andlw	3
  8922  0029E0  6EAA               	movwf	4010,c	;volatile
  8923  0029E2  C001  FFA9         	movff	i2Write_b_eep@badd,4009	;volatile
  8924  0029E6  C003  FFA8         	movff	i2Write_b_eep@bdat,4008	;volatile
  8925  0029EA  9EA6               	bcf	4006,7,c	;volatile
  8926  0029EC  9CA6               	bcf	4006,6,c	;volatile
  8927  0029EE  84A6               	bsf	4006,2,c	;volatile
  8928  0029F0  0E00               	movlw	0
  8929  0029F2  BEF2               	btfsc	intcon,7,c	;volatile
  8930  0029F4  0E01               	movlw	1
  8931  0029F6  6E04               	movwf	i2Write_b_eep@GIE_BIT_VAL,c
  8932  0029F8  9EF2               	bcf	intcon,7,c	;volatile
  8933  0029FA  0E55               	movlw	85
  8934  0029FC  6EA7               	movwf	4007,c	;volatile
  8935  0029FE  0EAA               	movlw	170
  8936  002A00  6EA7               	movwf	4007,c	;volatile
  8937  002A02  82A6               	bsf	4006,1,c	;volatile
  8938  002A04  D000               	goto	i2l643
  8939  002A06                     i2l643:
  8940  002A06  B2A6               	btfsc	4006,1,c	;volatile
  8941  002A08  D7FE               	goto	i2l643
  8942  002A0A  B004               	btfsc	i2Write_b_eep@GIE_BIT_VAL,0,c
  8943  002A0C  D002               	bra	i2u226_45
  8944  002A0E  9EF2               	bcf	intcon,7,c	;volatile
  8945  002A10  D001               	bra	i2u226_46
  8946  002A12                     i2u226_45:
  8947  002A12  8EF2               	bsf	intcon,7,c	;volatile
  8948  002A14                     i2u226_46:
  8949  002A14  94A6               	bcf	4006,2,c	;volatile
  8950  002A16  0012               	return		;funcret
  8951  002A18                     __end_ofi2_Write_b_eep:
  8952                           	opt stack 0
  8953                           pclatu	equ	0xFFB
  8954                           pclath	equ	0xFFA
  8955                           tblptru	equ	0xFF8
  8956                           tblptrh	equ	0xFF7
  8957                           tblptrl	equ	0xFF6
  8958                           tablat	equ	0xFF5
  8959                           prodh	equ	0xFF4
  8960                           prodl	equ	0xFF3
  8961                           intcon	equ	0xFF2
  8962                           postinc0	equ	0xFEE
  8963                           fsr0h	equ	0xFEA
  8964                           fsr0l	equ	0xFE9
  8965                           wreg	equ	0xFE8
  8966                           indf1	equ	0xFE7
  8967                           postdec1	equ	0xFE5
  8968                           fsr1h	equ	0xFE2
  8969                           fsr1l	equ	0xFE1
  8970                           indf2	equ	0xFDF
  8971                           postinc2	equ	0xFDE
  8972                           postdec2	equ	0xFDD
  8973                           fsr2h	equ	0xFDA
  8974                           fsr2l	equ	0xFD9
  8975                           status	equ	0xFD8
  8976                           
  8977 ;; *************** function i2_Busy_eep *****************
  8978 ;; Defined at:
  8979 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;		None
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;		None
  8984 ;; Return value:  Size  Location     Type
  8985 ;;		None               void
  8986 ;; Registers used:
  8987 ;;		None
  8988 ;; Tracked objects:
  8989 ;;		On entry : 0/0
  8990 ;;		On exit  : 0/0
  8991 ;;		Unchanged: 0/0
  8992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;Total ram usage:        0 bytes
  8998 ;; Hardware stack levels used:    1
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		i2_EEWriteDouble
  9003 ;;		i2_EEWriteChar
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           	psect	text56
  9008  002E14                     __ptext56:
  9009                           	opt stack 0
  9010  002E14                     i2_Busy_eep:
  9011                           	opt stack 21
  9012                           
  9013                           ;incstack = 0
  9014  002E14  D000               	goto	i2l612
  9015  002E16                     i2l612:
  9016  002E16  B2A6               	btfsc	4006,1,c	;volatile
  9017  002E18  D7FE               	goto	i2l612
  9018  002E1A  0012               	return		;funcret
  9019  002E1C                     __end_ofi2_Busy_eep:
  9020                           	opt stack 0
  9021                           pclatu	equ	0xFFB
  9022                           pclath	equ	0xFFA
  9023                           tblptru	equ	0xFF8
  9024                           tblptrh	equ	0xFF7
  9025                           tblptrl	equ	0xFF6
  9026                           tablat	equ	0xFF5
  9027                           prodh	equ	0xFF4
  9028                           prodl	equ	0xFF3
  9029                           intcon	equ	0xFF2
  9030                           postinc0	equ	0xFEE
  9031                           fsr0h	equ	0xFEA
  9032                           fsr0l	equ	0xFE9
  9033                           wreg	equ	0xFE8
  9034                           indf1	equ	0xFE7
  9035                           postdec1	equ	0xFE5
  9036                           fsr1h	equ	0xFE2
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           fsr2h	equ	0xFDA
  9042                           fsr2l	equ	0xFD9
  9043                           status	equ	0xFD8
  9044                           
  9045 ;; *************** function _TMR0Int *****************
  9046 ;; Defined at:
  9047 ;;		line 56 in file "PID.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;		None
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;		None
  9052 ;; Return value:  Size  Location     Type
  9053 ;;		None               void
  9054 ;; Registers used:
  9055 ;;		wreg, status,2
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;Total ram usage:        0 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; This function calls:
  9068 ;;		Nothing
  9069 ;; This function is called by:
  9070 ;;		_ISR
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           	psect	text57
  9075  002DD8                     __ptext57:
  9076                           	opt stack 0
  9077  002DD8                     _TMR0Int:
  9078                           	opt stack 23
  9079                           
  9080                           ;PID.c: 58: TMR0H = 0xDB;
  9081                           
  9082                           ;incstack = 0
  9083  002DD8  0EDB               	movlw	219
  9084  002DDA  6ED7               	movwf	4055,c	;volatile
  9085                           
  9086                           ;PID.c: 59: TMR0L = 0x60;
  9087  002DDC  0E60               	movlw	96
  9088  002DDE  6ED6               	movwf	4054,c	;volatile
  9089                           
  9090                           ;PID.c: 60: TMR0Flag = 1;
  9091  002DE0  0E01               	movlw	1
  9092  002DE2  0100               	movlb	0	; () banked
  9093  002DE4  6FBF               	movwf	_TMR0Flag& (0+255),b
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;PID.c: 61: INTCONbits.TMR0IF = 0;
  9097  002DE6  94F2               	bcf	intcon,2,c	;volatile
  9098                           
  9099                           ; BSR set to: 0
  9100  002DE8  0012               	return		;funcret
  9101  002DEA                     __end_of_TMR0Int:
  9102                           	opt stack 0
  9103                           pclatu	equ	0xFFB
  9104                           pclath	equ	0xFFA
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           intcon	equ	0xFF2
  9112                           postinc0	equ	0xFEE
  9113                           fsr0h	equ	0xFEA
  9114                           fsr0l	equ	0xFE9
  9115                           wreg	equ	0xFE8
  9116                           indf1	equ	0xFE7
  9117                           postdec1	equ	0xFE5
  9118                           fsr1h	equ	0xFE2
  9119                           fsr1l	equ	0xFE1
  9120                           indf2	equ	0xFDF
  9121                           postinc2	equ	0xFDE
  9122                           postdec2	equ	0xFDD
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _SPIInt *****************
  9128 ;; Defined at:
  9129 ;;		line 31 in file "SPISlave.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;		None
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;		None
  9134 ;; Return value:  Size  Location     Type
  9135 ;;		None               void
  9136 ;; Registers used:
  9137 ;;		wreg, status,2, status,0
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;Total ram usage:        0 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; This function calls:
  9150 ;;		Nothing
  9151 ;; This function is called by:
  9152 ;;		_ISR
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text58
  9157  002C54                     __ptext58:
  9158                           	opt stack 0
  9159  002C54                     _SPIInt:
  9160                           	opt stack 23
  9161                           
  9162                           ;SPISlave.c: 33: PORTCbits.RC6 = 1;
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;incstack = 0
  9166  002C54  8C82               	bsf	3970,6,c	;volatile
  9167                           
  9168                           ;SPISlave.c: 34: INTCONbits.GIE = 0;
  9169  002C56  9EF2               	bcf	intcon,7,c	;volatile
  9170                           
  9171                           ;SPISlave.c: 35: Command = SSP1BUF;
  9172  002C58  CFC9 F041          	movff	4041,_Command	;volatile
  9173                           
  9174                           ;SPISlave.c: 36: PIR1bits.SSP1IF = 0;
  9175  002C5C  969E               	bcf	3998,3,c	;volatile
  9176                           
  9177                           ;SPISlave.c: 37: PIE1bits.SSP1IE = 0;
  9178  002C5E  969D               	bcf	3997,3,c	;volatile
  9179                           
  9180                           ;SPISlave.c: 38: if (Command == 0x0A)
  9181  002C60  0E0A               	movlw	10
  9182  002C62  1841               	xorwf	_Command,w,c
  9183  002C64  A4D8               	btfss	status,2,c
  9184  002C66  D004               	goto	i2l3373
  9185                           
  9186                           ;SPISlave.c: 39: RECFlag = 1;
  9187  002C68  0E01               	movlw	1
  9188  002C6A  0100               	movlb	0	; () banked
  9189  002C6C  6FBD               	movwf	_RECFlag& (0+255),b
  9190  002C6E  D004               	goto	i2l264
  9191  002C70                     i2l3373:
  9192                           
  9193                           ;SPISlave.c: 40: else
  9194                           ;SPISlave.c: 41: SPIflag = 1;
  9195  002C70  0E01               	movlw	1
  9196  002C72  0100               	movlb	0	; () banked
  9197  002C74  6FBE               	movwf	_SPIflag& (0+255),b
  9198  002C76  D000               	goto	i2l264
  9199  002C78                     i2l264:
  9200                           
  9201                           ; BSR set to: 0
  9202  002C78  0012               	return		;funcret
  9203  002C7A                     __end_of_SPIInt:
  9204                           	opt stack 0
  9205                           pclatu	equ	0xFFB
  9206                           pclath	equ	0xFFA
  9207                           tblptru	equ	0xFF8
  9208                           tblptrh	equ	0xFF7
  9209                           tblptrl	equ	0xFF6
  9210                           tablat	equ	0xFF5
  9211                           prodh	equ	0xFF4
  9212                           prodl	equ	0xFF3
  9213                           intcon	equ	0xFF2
  9214                           postinc0	equ	0xFEE
  9215                           fsr0h	equ	0xFEA
  9216                           fsr0l	equ	0xFE9
  9217                           wreg	equ	0xFE8
  9218                           indf1	equ	0xFE7
  9219                           postdec1	equ	0xFE5
  9220                           fsr1h	equ	0xFE2
  9221                           fsr1l	equ	0xFE1
  9222                           indf2	equ	0xFDF
  9223                           postinc2	equ	0xFDE
  9224                           postdec2	equ	0xFDD
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _INT0Int *****************
  9230 ;; Defined at:
  9231 ;;		line 289 in file "RTDuC.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;		None               void
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;Total ram usage:        0 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    1
  9252 ;; This function calls:
  9253 ;;		_KillMotors
  9254 ;; This function is called by:
  9255 ;;		_ISR
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text59
  9260  002CC2                     __ptext59:
  9261                           	opt stack 0
  9262  002CC2                     _INT0Int:
  9263                           	opt stack 22
  9264                           
  9265                           ;RTDuC.c: 291: KillMotors();
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;incstack = 0
  9269  002CC2  EC01  F017         	call	_KillMotors	;wreg free
  9270                           
  9271                           ;RTDuC.c: 292: PORTAbits.RA3 = 0;
  9272  002CC6  9680               	bcf	3968,3,c	;volatile
  9273                           
  9274                           ;RTDuC.c: 293: T0CONbits.TMR0ON = 1;
  9275  002CC8  8ED5               	bsf	4053,7,c	;volatile
  9276                           
  9277                           ;RTDuC.c: 294: INTCONbits.GIE = 0;
  9278  002CCA  9EF2               	bcf	intcon,7,c	;volatile
  9279                           
  9280                           ;RTDuC.c: 295: PORTAbits.RA4 = 1;
  9281  002CCC  8880               	bsf	3968,4,c	;volatile
  9282  002CCE  D000               	goto	i2l2239
  9283  002CD0                     i2l2239:
  9284                           
  9285                           ;RTDuC.c: 297: {
  9286                           ;RTDuC.c: 298: TMR0H = 0x00;
  9287  002CD0  0E00               	movlw	0
  9288  002CD2  6ED7               	movwf	4055,c	;volatile
  9289                           
  9290                           ;RTDuC.c: 299: TMR0L = 0x00;
  9291  002CD4  0E00               	movlw	0
  9292  002CD6  6ED6               	movwf	4054,c	;volatile
  9293                           
  9294                           ;RTDuC.c: 300: while (!INTCONbits.TMR0IF);
  9295  002CD8  D000               	goto	i2l588
  9296  002CDA                     i2l588:
  9297  002CDA  A4F2               	btfss	intcon,2,c	;volatile
  9298  002CDC  D7FE               	goto	i2l588
  9299                           
  9300                           ;RTDuC.c: 301: INTCONbits.TMR0IF = 0;
  9301  002CDE  94F2               	bcf	intcon,2,c	;volatile
  9302                           
  9303                           ;RTDuC.c: 302: ~PORTAbits.RA4;
  9304  002CE0  5080               	movf	3968,w,c	;volatile
  9305  002CE2  D7F6               	goto	i2l2239
  9306  002CE4  0012               	return		;funcret
  9307  002CE6                     __end_of_INT0Int:
  9308                           	opt stack 0
  9309                           pclatu	equ	0xFFB
  9310                           pclath	equ	0xFFA
  9311                           tblptru	equ	0xFF8
  9312                           tblptrh	equ	0xFF7
  9313                           tblptrl	equ	0xFF6
  9314                           tablat	equ	0xFF5
  9315                           prodh	equ	0xFF4
  9316                           prodl	equ	0xFF3
  9317                           intcon	equ	0xFF2
  9318                           postinc0	equ	0xFEE
  9319                           fsr0h	equ	0xFEA
  9320                           fsr0l	equ	0xFE9
  9321                           wreg	equ	0xFE8
  9322                           indf1	equ	0xFE7
  9323                           postdec1	equ	0xFE5
  9324                           fsr1h	equ	0xFE2
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           postdec2	equ	0xFDD
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function _KillMotors *****************
  9334 ;; Defined at:
  9335 ;;		line 28 in file "MotorControl.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, status,0
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;Total ram usage:        0 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; This function calls:
  9356 ;;		Nothing
  9357 ;; This function is called by:
  9358 ;;		_INT0Int
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text60
  9363  002E02                     __ptext60:
  9364                           	opt stack 0
  9365  002E02                     _KillMotors:
  9366                           	opt stack 22
  9367                           
  9368                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  9369                           
  9370                           ;incstack = 0
  9371  002E02  8880               	bsf	3968,4,c	;volatile
  9372                           
  9373                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  9374  002E04  50B7               	movf	4023,w,c	;volatile
  9375  002E06  0BF0               	andlw	240
  9376  002E08  6EB7               	movwf	4023,c	;volatile
  9377  002E0A  0012               	return		;funcret
  9378  002E0C                     __end_of_KillMotors:
  9379                           	opt stack 0
  9380                           pclatu	equ	0xFFB
  9381                           pclath	equ	0xFFA
  9382                           tblptru	equ	0xFF8
  9383                           tblptrh	equ	0xFF7
  9384                           tblptrl	equ	0xFF6
  9385                           tablat	equ	0xFF5
  9386                           prodh	equ	0xFF4
  9387                           prodl	equ	0xFF3
  9388                           intcon	equ	0xFF2
  9389                           postinc0	equ	0xFEE
  9390                           fsr0h	equ	0xFEA
  9391                           fsr0l	equ	0xFE9
  9392                           wreg	equ	0xFE8
  9393                           indf1	equ	0xFE7
  9394                           postdec1	equ	0xFE5
  9395                           fsr1h	equ	0xFE2
  9396                           fsr1l	equ	0xFE1
  9397                           indf2	equ	0xFDF
  9398                           postinc2	equ	0xFDE
  9399                           postdec2	equ	0xFDD
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           pclatu	equ	0xFFB
  9404                           pclath	equ	0xFFA
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon	equ	0xFF2
  9412                           postinc0	equ	0xFEE
  9413                           fsr0h	equ	0xFEA
  9414                           fsr0l	equ	0xFE9
  9415                           wreg	equ	0xFE8
  9416                           indf1	equ	0xFE7
  9417                           postdec1	equ	0xFE5
  9418                           fsr1h	equ	0xFE2
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427                           	psect	rparam
  9428  0000                     pclatu	equ	0xFFB
  9429                           pclath	equ	0xFFA
  9430                           tblptru	equ	0xFF8
  9431                           tblptrh	equ	0xFF7
  9432                           tblptrl	equ	0xFF6
  9433                           tablat	equ	0xFF5
  9434                           prodh	equ	0xFF4
  9435                           prodl	equ	0xFF3
  9436                           intcon	equ	0xFF2
  9437                           postinc0	equ	0xFEE
  9438                           fsr0h	equ	0xFEA
  9439                           fsr0l	equ	0xFE9
  9440                           wreg	equ	0xFE8
  9441                           indf1	equ	0xFE7
  9442                           postdec1	equ	0xFE5
  9443                           fsr1h	equ	0xFE2
  9444                           fsr1l	equ	0xFE1
  9445                           indf2	equ	0xFDF
  9446                           postinc2	equ	0xFDE
  9447                           postdec2	equ	0xFDD
  9448                           fsr2h	equ	0xFDA
  9449                           fsr2l	equ	0xFD9
  9450                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        8
    BSS         3646
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      71
    BANK0           160     65     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    SPIDisassembleLode@Transmit	PTR unsigned char  size(2) Largest target is 1800
		 -> TransmitLode(BIGRAM[1800]), 

    SPIDisassembleLode@Data	PTR  size(2) Largest target is 1800
		 -> DataLode(BIGRAM[1800]), 

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(COMRAM[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(COMRAM[3]), 
		 -> SPIDisassembleLode@dub(COMRAM[3]), SPIDisassembleDouble@dub(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _calculatePID->___ftmul
    ___fttol->___ftmul
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _SaveAll->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep
    _SPIDisassembleLode->___wmul
    ___wmul->___lwdiv
    _SPIDisassembleDouble->_GenerateChecksum

Critical Paths under _ISR in COMRAM

    i2_SaveAll->i2_EEWriteDouble
    i2_EEWriteDouble->i2_Write_b_eep
    i2_EEWriteChar->i2_Write_b_eep

Critical Paths under _main in BANK0

    _main->_calculatePID
    _ZeroMotors->_calculatePID
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _RTD2Angle->___ftmul
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_abs
    _abs->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   88897
                                             51 BANK0     14    14      0
                        _Delay10TCYx
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                           _OpenSPI1
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                 _SPIDisassembleLode
                _SPIReassembleDouble
                            _SaveAll
                           _SendSPI1
                         _ZeroMotors
                             ___wmul
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0   28569
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
                         _ZeroMotors
 ---------------------------------------------------------------------------------
 (2) _ZeroMotors                                           0     0      0   27590
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                            ___fttol
                                _abs
                       _calculatePID
 ---------------------------------------------------------------------------------
 (3) _calculatePID                                        15     9      6   18967
                                             36 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     380
                                             21 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5245
                                             21 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4881
                                              9 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3152
                                             31 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadRTDpos                                          12    10      2     160
                                             24 COMRAM    10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _RTD2Angle                                            3     0      3    6901
                                              9 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2572
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3836
                                             46 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ImplementPIDMotion                                   4     2      2     858
                                             40 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     344
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     344
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      66
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     569
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             0     0      0     569
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     352
                                             29 COMRAM     5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     217
                                             25 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     172
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      24
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SaveAll                                              0     0      0    1919
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (2) _EEWriteDouble                                        5     2      3     825
                                             27 COMRAM     5     2      3
                           _Busy_eep
                _EEDisassembleDouble
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _EEDisassembleDouble                                  3     0      3     110
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _EEWriteChar                                          2     1      1    1094
                                             27 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3     346
                                             23 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3      68
                                             23 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleLode                                  11     7      4    1103
                                             36 COMRAM    11     7      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     415
                                             30 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     458
                                             25 COMRAM     3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0      92
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    6     4      2     720
                                             40 BANK0      6     4      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     324
                                             36 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       7     5      2     136
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     983
                                              9 COMRAM    14    14      0
                            _INT0Int
                             _SPIInt
                            _TMR0Int
                          i2_SaveAll
 ---------------------------------------------------------------------------------
 (8) i2_SaveAll                                            0     0      0     983
                      i2_EEWriteChar
                    i2_EEWriteDouble
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteDouble                                      5     2      3     459
                                              4 COMRAM     5     2      3
                         i2_Busy_eep
              i2_EEDisassembleDouble
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_EEDisassembleDouble                               3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2_EEWriteChar                                        2     1      1     524
                                              4 COMRAM     2     1      1
                         i2_Busy_eep
                      i2_Write_b_eep
 ---------------------------------------------------------------------------------
 (10) i2_Write_b_eep                                       4     1      3     194
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (10) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (9) _KillMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10TCYx
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _ImplementPIDMotion
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _OpenSPI1
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIDisassembleLode
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _SPIReassembleDouble
   _SaveAll
     _EEWriteChar
       _Busy_eep
       _Write_b_eep
     _EEWriteDouble
       _Busy_eep
       _EEDisassembleDouble
       _Write_b_eep
   _SendSPI1
   _ZeroMotors
     _ImplementPIDMotion
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _RTD2Angle
       _ReadRTDpos (ARG)
         _Delay10TCYx
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _ReadRTDpos
       _Delay10TCYx
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _abs
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _calculatePID
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftpack
       ___ftge
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
   ___wmul
     ___lwdiv (ARG)
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1
     _ZeroMotors
       _ImplementPIDMotion
         _abs
           ___fttol (ARG)
             ___ftadd (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
       _RTD2Angle
         _ReadRTDpos (ARG)
           _Delay10TCYx
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _ReadRTDpos
         _Delay10TCYx
       ___fttol
         ___ftadd (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _abs
         ___fttol (ARG)
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       _calculatePID
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack

 _ISR (ROOT)
   _INT0Int
     _KillMotors
   _SPIInt
   _TMR0Int
   i2_SaveAll
     i2_EEWriteChar
       i2_Busy_eep
       i2_Write_b_eep
     i2_EEWriteDouble
       i2_Busy_eep
       i2_EEDisassembleDouble
       i2_Write_b_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     E10      37       91.5%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      64       5       62.5%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      32        0.0%
DATA                 0      0     EBB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Nov  7 05:47:50 2015

      __size_of_MotorDriverInit 0024                              l31 2B66                              l40 2D28  
                            l43 25C4                              l37 2D12                              l49 262C  
                            _Kd 00A7                              _Ki 00AA                              _Kp 00AD  
           ___wmul@multiplicand 0021             ?_EEReassembleDouble 0018                    ___ftadd@exp1 0074  
                  ___ftadd@exp2 0073       ImplementJSMotion@CCPinput 008C                    ___ftadd@sign 0072  
                           l109 1B7E                             l149 1638                             l274 2C20  
                           l362 25BE                             l275 2C18                             l267 2B4E  
                           l187 263C                             l603 1E92                             l292 2996  
                           l612 2E0E                             l268 2B42                             l188 2646  
                           l197 2A8A                             l189 2688                             l541 116E  
                           l278 2C2C                             l286 20CA                             l535 1112  
                           l296 2954                             l384 2D6A                             l368 2910  
                           l552 1350                             l536 11F6                             l561 1462  
                           l537 11EE                             l722 2BD4                             l378 2790  
                           l723 2BDC                             l643 29C6                             l539 113A  
                           l628 2D9E                             l573 2B88                             l670 271C  
                           l662 26FA                             l911 2DC4                             l671 2720  
                           l567 14FE                             l904 2DD6                             l664 26FE  
                           l665 2700                             l675 2C04                             l916 2DEC  
                           l668 271A                             l669 2734                             l918 2DF4  
                           _PR2 000FCB                             _ISR 0008                             _abs 2BB2  
          __size_of_Write_b_eep 0040                             prod 000FF3                             wreg 000FE8  
       ??i2_EEDisassembleDouble 0004                            ?_ISR 0001                 __end_of_INT0Int 2CE6  
                  ___ftdiv@cntr 0029                      _Delay1TCYx 2DEA                    ___ftdiv@sign 002E  
                  __CFG_WDT$OFF 000000                            l1008 2190                            l1112 2888  
                          l1105 2C90                            l1019 2168                            ?_abs 0084  
                          l1052 1870                            l1116 1CB0                            l1054 189A  
                          l1063 197E                            l1080 1FEA                            l1072 19A8  
                          l1048 1836                            l1049 1A4A                            l1218 26DC  
                          l1083 1FB6                            l3021 2724                            l1245 2C52  
                          l3111 2B74                            l1095 1DE0                            l3017 2704  
                          l1089 24DE                            l4011 2344                            l4003 231A  
                          l3205 27DE                            l4015 235C                            l4007 233A  
                          l4031 15E8                            l4025 1560                            l3323 2622  
                          l3315 2612                            l3155 296A                            l3171 2992  
                          l3251 26B2                            l4211 1194                            l3165 298E  
                          l4037 16CC                            l4133 1028                            l3159 2976  
                          l3247 26A0                            l3191 27AE                            l4215 11AE  
                          l4223 11E2                            l4231 1206                            l4081 1A92  
                          l3249 26AA                            l3425 2016                            l4057 1E4C  
                          l4161 10AE                            l4153 107A                            l4075 1A6C  
                          l3259 26D0                            l3195 27B6                            l2731 2750  
                          l4067 1ED2                            l4331 1424                            l4219 11C8  
                          l4093 1AE6                            l2709 2DC8                            l4341 1488  
                          l4181 110A                            l4165 10C8                            l4157 1094  
                          l4149 1060                            l4079 1A8A                            l2727 2748  
                          l2911 1C9E                            l2903 1C60                            l4183 111C  
                          l4097 1B1E                            l3801 2150                            l2905 1C72  
                          l4353 14C8                            l4337 1478                            l4329 13DE  
                          l4265 12AA                            l4249 123E                            l4193 1142  
                          l4177 10EE                            l4169 10E2                            l2739 2778  
                          l3803 215C                            l2851 247C                            l2907 1C80  
                          l3901 1F42                            l2861 24DA                            l4357 14DE  
                          l4285 1314                            l4197 1150                            l3815 2182  
                          l2855 24AE                            l3809 2170                            l3905 1F50  
                          l3833 187E                            l3827 1844                            l2875 1BAA  
                          l2965 2DB6                            l2981 2640                            l3925 1F90  
                          l3861 192E                            l2893 1C2E                            l3791 20EC  
                          l3951 1D0C                            l3935 1FC4                            l3855 1902  
                          l3839 1890                            l3793 20F8                            l3945 1CDA  
                          l3857 1912                            l3849 18D2                            l2897 1C42  
                          l3795 2118                            l3787 20DC                            l3947 1CFE  
                          l3875 19D4                            l3867 195E                            l3859 1922  
                          l2899 1C4A                            l3973 1D80                            l3965 1D50  
                          l3885 1A24                            l3869 196E                            l3799 2130  
                          l3983 1DBA                            l3975 1D88                            l3991 285E  
                          l3969 1D68                            l3979 1DA0                            l3899 1F28  
                          u2021 1B96                            u2040 1BD0                            u3101 17E4  
                          u2045 1BC6                            u3111 1802                            u2235 29D2  
                          u2236 29D4                            u3321 1F1A                            u3341 1F38  
                   main@counter 009E                            u3371 1CC6                            u3470 2358  
                          u3391 1CEE                            u3967 2DB8                            u3977 2DCA  
               __end_of_PIDInit 28CE  ImplementJSMotion@JoystickValue 0088            ??_EEReassembleDouble 001B  
                  EEReadChar@ch 001B                 __end_of_TMR0Int 2DEA                            abs@a 0084  
                          _main 1006                    ___ftpack@arg 0018                     _DeadbandLow 0045  
                  ___ftpack@exp 001B                 __end_of_RTDInit 2B28                 __end_of_SPIInit 2D86  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            indf1 000FE7                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            pclat 000FFA  
                ??_EEReadDouble 0021          __size_ofi2_Write_b_eep 0040                            prodh 000FF4  
                          prodl 000FF3                            start 0018             __size_of_EEPROMInit 0014  
                  ?_EEWriteChar 001C                    ___ftmul@cntr 0067                    ___param_bank 000010  
                  ___ftmul@sign 0068   __size_of_InitializeInterrupts 000C                           ??_ISR 000A  
                   _Delay10TCYx 2DC6                __end_of_EEBootUp 25C0                    ___fttol@exp1 0083  
                         ??_abs 0086                 __end_of_SaveAll 224A                    ___fttol@lval 007F  
                   _Delay1KTCYx 2DB4                 i2EEWriteChar@ch 0005                     ReadRTDpos@x 0022  
             RTD2Angle@RTDAngle 0069                           ?_main 0001                           _EEADR 000FA9  
               __end_of___ftadd 1A4C                 __end_of___ftdiv 1FEC                 __end_of___ftneg 2C9E  
               __end_of___ftmul 1DE2                           _T0CON 000FD5                 __end_of___ftsub 288A  
               __end_of___fttol 1CB2                           _T2CON 000FCA                           _T3CON 000FB1  
               __end_of___lwdiv 26E6                           i2l264 2C78                           i2l612 2E16  
                         i2l643 2A06                           i2l584 2410                           i2l588 2CDA  
            __size_of_RTD2Angle 0038                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 001D                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0018  
           __size_of_EEReadChar 0020          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 001B  
                  _DeadbandHigh 0043                           _error 00B0                   ___ftpack@sign 001C  
                    _DoubleSPIS 0035                           main@x 00A0                   ??_ReceiveSPI1 0018  
                         tablat 000FF5              __size_ofi2_SaveAll 00B8                     ?i2_Busy_eep 0001  
                         status 000FD8                   EEReadDouble@x 0022      __size_of_ImplementJSMotion 0134  
         EEWriteDouble@location 001F             GenerateChecksum@sum 0018                      _ReadRTDpos 262E  
                    _KillMotors 2E02                 __initialization 24E0                    __end_of_main 1518  
                _DetectJoystick 2D08                  _DetectMovement 25C0                      _Read_b_eep 2D86  
              __end_of_Busy_eep 2E14           EEReassembleDouble@dub 001B                  __CFG_OSC$HSPLL 000000  
              __end_of_SendSPI1 2B58                __end_of_OpenSPI1 273C                    _DataLodeSize 1001  
                        ??_main 0035                   ___fttol@sign1 007E                   __activetblptr 000003  
             ??_MotorDriverInit 0018         DetectMovement@ADCresult 001D                   i2_Write_b_eep 29D8  
                     ??_INT0Int 0001                       ??_PIDInit 0018                       ??_TMR0Int 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                     ??_RTDInit 0019                          _EEDATA 000FA8                     ?_Delay1TCYx 0001  
                     ??_SPIInit 001B                          _CCPR3L 000FB8                          _EECON2 000FA7  
              __end_of___ftpack 2192           __size_of_calculatePID 02B6                          i2l2239 2CD0  
                        i2l3273 280A                          i2l3283 2832                          i2l3373 2C70  
                        i2l3269 2802                          i2l3773 23F8                          i2l3765 23E4  
                        _INTCON 000FF2                          i2l3769 23EE                          i2l3779 2408  
              __end_of___lwtoft 2C54                i2EEWriteDouble@x 0009                          _SPIInt 2C54  
           SPIDisassembleLode@y 002B               __end_of_RTD2Angle 2A8C           i2EEWriteChar@location 0006  
           __end_of_ReceiveSPI1 2C2E                       ??_SaveAll 0021      SPIDisassembleLode@Transmit 0027  
        __end_of_DetectJoystick 2D2A          __end_of_DetectMovement 262E                OpenSPI1@bus_mode 0018  
                 _EEWriteDouble 2792                          ___ftge 244A                          ___wmul 2BDE  
                     ??___ftadd 006F                       ??___ftdiv 0026                       ??___ftneg 001B  
                     ??___ftmul 0060                       ??___ftsub 0035                       ??___fttol 0079  
                     ??___lwdiv 001C                          _intErr 00B3                          clear_0 24E8  
                        clear_1 24FA                          clear_2 2506               __end_ofi2_SaveAll 2302  
                ?i2_Write_b_eep 0001             __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0064  
                  ??_EEPROMInit 0023     __size_of_ImplementPIDMotion 00A8        __size_ofi2_EEWriteDouble 0054  
            _SPIDisassembleLode 1FEC                    __pdataCOMRAM 0043                    _calculatePID 1518  
          __end_of_EEReadDouble 2792               _calculatePID$3452 008D               _calculatePID$3453 0090  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8             ?_SPIDisassembleLode 0025               ?_GenerateChecksum 0001  
                     ?_EEBootUp 0001                      __accesstop 0060         __end_of__initialization 254A  
            ??_GenerateChecksum 0018                      ___ftadd@f1 0069                      ___ftadd@f2 006C  
                    ___ftge@ff1 0018                      ___ftge@ff2 001B                      _ZeroMotors 1DE2  
                 ___rparam_used 000001                      ___ftdiv@f1 0020                      ___ftdiv@f2 0023  
                    ___ftdiv@f3 002A              EEReadChar@location 001A                      ___ftneg@f1 0018  
                   ?_ReadRTDpos 0019                     ?_KillMotors 0001                    ??_EEReadChar 001A  
                ?_EEWriteDouble 001C                      ___ftmul@f1 002F                      ___ftmul@f2 0032  
               ?_DetectJoystick 0001                 ?_DetectMovement 0018              __end_of_EEPROMInit 2DB4  
                    ___ftsub@f1 0075                      ___ftsub@f2 0078                      ___fttol@f1 0075  
                __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 2AC2                    __pidataBANK0 2E21  
          ??_SPIDisassembleLode 0029            __size_of_EEWriteChar 0022                     ?_Read_b_eep 0018  
           __size_of_Delay1TCYx 000C               GenerateChecksum@y 0019                      ___lwtoft@c 0020  
  __size_of_SPIReassembleDouble 0044          __size_ofi2_EEWriteChar 0022              __end_of_EEReadChar 2D6C  
__size_ofi2_EEDisassembleDouble 0036   __end_ofi2_EEDisassembleDouble 2AF8                      __pbssBANK0 00A1  
                   _ReceiveSPI1 2C06                      ??_EEBootUp 0023                       ?_Busy_eep 0001  
       i2EEWriteDouble@location 0008                   ?_JoystickInit 0001                         ?_SPIInt 0001  
                     ?_SendSPI1 0001                       ?_OpenSPI1 0018                         ?___ftge 0018  
                  ?_Delay10TCYx 0001                         ?___wmul 001F                  EEWriteDouble@x 0020  
                       _CCP3CON 000FB7                    ?_Delay1KTCYx 0001                 ??i2_Write_b_eep 0004  
      i2EEDisassembleDouble@dub 0001                       ?___ftpack 0018                   ??_Write_b_eep 001B  
                     ?___lwtoft 0020                         _HLVDCON 000FD2                         _INT0Int 2CC2  
                       _RECFlag 00BD    __end_of_InitializeInterrupts 2E02                         _PIDInit 288A  
                       _DDouble 0039             __size_of_ReadRTDpos 005C             __size_of_KillMotors 000A  
                 _PIDEnableFlag 00BC                         _SSP1BUF 000FC9                         _TMR0Int 2DD8  
    ImplementPIDMotion@PIDValue 0088                         _RTDInit 2AF8                         _SPIInit 2D6C  
             ??i2_EEWriteDouble 0008                         _SPIflag 00BE                EEWriteDouble@dub 001C  
           __size_of_Read_b_eep 001A                _TransmitLodeSize 1003                  ??_JoystickInit 0018  
                  ??i2_Busy_eep 0001     __size_of_EEReassembleDouble 0044                      ??_Busy_eep 0018  
                       _Command 0041                     ?_ZeroMotors 0001                 __size_of_SPIInt 0026  
                    ??_SendSPI1 0018                 ??_EEWriteDouble 001F                      ??_OpenSPI1 001A  
           EEWriteChar@location 001D                         _SaveAll 2192                         __Hparam 0000  
                       __Lparam 0000                 _MotorDriverInit 2C9E                   i2_EEWriteChar 2D2A  
               __size_of___ftge 0096                         ___ftadd 17CE                         ___ftdiv 1F0A  
                       ___ftneg 2C7A                 __size_of___wmul 0028                         ___ftmul 1CB2  
                       ___ftsub 283A                         ___fttol 1B80                         ___lwdiv 268A  
                  __psmallconst 1000                      _dummy_byte 00C0           __size_of_EEReadDouble 0056  
                  SendSPI1@data 0019                         __pcinit 24E0                      ??___ftpack 001D  
               Delay10TCYx@unit 0018                         __ramtop 1000                      _initialize 2B86  
                  SendSPI1@temp 0018                         __ptext0 1006                         __ptext1 2B86  
                       __ptext2 1DE2                         __ptext3 1518                         __ptext4 1B80  
                       __ptext5 283A                         __ptext6 17CE                         __ptext7 2C7A  
                       __ptext8 244A                         __ptext9 1F0A                      ??___lwtoft 0023  
                     _T0CONbits 000FD5                    __size_of_ISR 2442                       _T1CONbits 000FCD  
                  __size_of_abs 002C              __end_ofi2_Busy_eep 2E1C                       _T3CONbits 000FB1  
             i2Write_b_eep@badd 0001               i2Write_b_eep@bdat 0003                         _prevErr 00B6  
 __size_of_SPIDisassembleDouble 003C             __end_of_Write_b_eep 29D8                    ??_Delay1TCYx 0018  
                __pintcode_body 23AA            end_of_initialization 254A                         int_func 23AA  
             OpenSPI1@smp_phase 0019                    _EEReadDouble 273C                  ?i2_EEWriteChar 0005  
         ReadRTDpos@LowPosition 001F                      _timer1High 0047                         postdec1 000FE5  
                       postdec2 000FDD                      _motorInput 00B9                       _RTD2Angle 2A54  
                       postinc0 000FEE                         postinc2 000FDE               OpenSPI1@sync_mode 001A  
            __end_of_Delay1TCYx 2DF6                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTEbits 000F84                       _PORTJbits 000F88  
      i2Write_b_eep@GIE_BIT_VAL 0004             __size_of_ZeroMotors 0128                       i2_SaveAll 224A  
        SPIDisassembleLode@Data 0025                       _TRISAbits 000F92                       _TRISBbits 000F93  
                     _TRISCbits 000F94                       _TRISEbits 000F96                       _TRISFbits 000F97  
                     _TRISGbits 000F98                       _TRISJbits 000F9A         __end_of_MotorDriverInit 2CC2  
              ??_DetectJoystick 0018                ??_DetectMovement 001A                     ___ftdiv@exp 002D  
             __size_of_EEBootUp 0070             _SPIReassembleDouble 2912                     _CCP3CONbits 000FB7  
                    main@saveKd 0099                      main@saveKi 0096                      main@saveKp 0093  
                __end_of_SPIInt 2C7A                    ??_ReadRTDpos 001B                    ??_KillMotors 0001  
                   ___ftmul@exp 0063            _InitializeInterrupts 2DF6                      ?_RTD2Angle 0069  
     __size_of_GenerateChecksum 0042                    ??_Read_b_eep 001A                  __end_of___ftge 24E0  
                __end_of___wmul 2C06            __size_of_Delay10TCYx 0012                   __pidataCOMRAM 2E1C  
    __end_of_ImplementPIDMotion 23AA                     ?_initialize 0001                     _Write_b_eep 2998  
          __end_of_JoystickInit 2B86            __size_of_Delay1KTCYx 0012            ?_SPIReassembleDouble 0018  
                     _DoublePtr 003F                      ?i2_SaveAll 0001             start_initialization 24E0  
               _CurrentVelocity 00A4                    _CurrentAngle 00A1                     __end_of_ISR 244A  
                   __end_of_abs 2BDE              __end_of_ReadRTDpos 268A              __end_of_KillMotors 2E0C  
                  ?_ReceiveSPI1 0001              __end_of_Read_b_eep 2DA0            EEReadDouble@location 0021  
                      ??_SPIInt 0001                 ??i2_EEWriteChar 0006               __size_of_Busy_eep 0008  
          calculatePID@setpoint 0087                   ??_EEWriteChar 001D          ReadRTDpos@HighPosition 001E  
             __size_of_SendSPI1 0030               __size_of_OpenSPI1 0056           ?_InitializeInterrupts 0001  
                      ??___ftge 001E                        ??___wmul 0023     __size_of_SPIDisassembleLode 00E0  
                   __pdataBANK0 00C1        __end_of_TransmitLodeSize 1005           ??_SPIReassembleDouble 001B  
               i2_EEWriteDouble 27E6    __size_of_EEDisassembleDouble 0036               __size_of___ftpack 00C6  
                   __pbssBIGRAM 00C4                        ?_INT0Int 0001                     __pbssCOMRAM 0035  
             __size_of___lwtoft 0026                   __pcstackBANK0 0060                        ?_PIDInit 0001  
                      ?_TMR0Int 0001              calculatePID@derErr 008A                        ?_RTDInit 0001  
                      ?_SPIInit 0001                 Delay1KTCYx@unit 0018                ?_MotorDriverInit 0001  
         i2_EEDisassembleDouble 2AC2                    ??_ZeroMotors 0035             __size_of_initialize 002C  
        SPIReassembleDouble@dub 001B                   EEWriteChar@ch 001C                        ?_SaveAll 0001  
              ___lwdiv@dividend 0018                       __pintcode 0008                     ??_RTD2Angle 0035  
                      ?___ftadd 0069                        ?___ftdiv 0020                        ?___ftneg 0018  
                      ?___ftmul 002F                        ?___ftsub 0075                        ?___fttol 0075  
                      ?___lwdiv 0018             __end_of_EEWriteChar 2D08           __end_ofi2_Write_b_eep 2A18  
                   __smallconst 1000                     ??i2_SaveAll 000A              __end_of_ZeroMotors 1F0A  
              ___lwdiv@quotient 001C      __end_of_EEReassembleDouble 2912                        _EEBootUp 2550  
                ___wmul@product 0023                        _IPR2bits 000FA2                        _PIE1bits 000F9D  
                      _PIE2bits 000FA0              i2EEWriteDouble@dub 0005          ??_InitializeInterrupts 0018  
         __end_of_EEWriteDouble 27E6    __end_of_SPIDisassembleDouble 2A54                        i2u226_45 2A12  
                      i2u226_46 2A14                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                     _timer1Low 0042         __end_ofi2_EEWriteDouble 283A           __size_of_JoystickInit 002E  
                      _SSP1CON1 000FC6                        _TMR0Flag 00BF                _GenerateChecksum 2956  
                      _SSP1STAT 000FC7           SPIDisassembleLode@dub 002D                      _ADCON0bits 000FC2  
             ___wmul@multiplier 001F                 Write_b_eep@badd 0018                 Write_b_eep@bdat 001A  
                 ?_calculatePID 0084                        _DataLode 00C4                       main@dtime 009D  
                     main@trash 009C                __size_of_INT0Int 0024                __size_of_PIDInit 0044  
              __size_of_TMR0Int 0012                       copy_data0 253E                __size_of_RTDInit 0030  
              __size_of_SPIInit 001A          ?i2_EEDisassembleDouble 0001                        _Busy_eep 2E0C  
          __size_of_ReceiveSPI1 0028                    _JoystickInit 2B58                        _SendSPI1 2B28  
                    _EECON1bits 000FA6                        _SetAngle 003C                        _OpenSPI1 26E6  
        ReadRTDpos@FullPosition 0020                        __Hrparam 0000                     _EEWriteChar 2CE6  
                      __Lrparam 0000                __size_of_SaveAll 00B8                    _JSEnableFlag 00BB  
              __size_of___ftadd 027E                __size_of___ftdiv 00E2                __size_of___ftneg 0024  
              __size_of___ftmul 0130                __size_of___ftsub 0050                __size_of___fttol 0132  
              __size_of___lwdiv 005C                    ??_initialize 0035                        ___ftpack 20CC  
                  ?_Write_b_eep 0018               calculatePID@angle 0084                  ??_calculatePID 0035  
                      ___lwtoft 2C2E                      _EEPROMInit 2DA0                 ___lwdiv@divisor 001A  
               ___lwdiv@counter 001E                        __ptext10 262E                        __ptext11 2A54  
                      __ptext20 2DB4                        __ptext12 2C2E                        __ptext21 2DC6  
                      __ptext13 1CB2                        __ptext30 2D4C                        __ptext22 288A  
                      __ptext14 20CC                        __ptext31 2D86                        __ptext23 2C9E  
                      __ptext15 2302                        __ptext40 1FEC                        __ptext32 2B28  
                      __ptext24 2B58                        __ptext16 2D6C                        __ptext41 2BDE  
                      __ptext33 2192                        __ptext25 2DF6                        __ptext17 26E6  
                      __ptext42 268A                        __ptext34 2792                        __ptext26 2DA0  
                      __ptext18 2AF8                        __ptext51 224A                        __ptext43 2A18  
                      __ptext35 2A8C                        __ptext27 2550                        __ptext19 2DEA  
                      __ptext60 2E02                        __ptext52 27E6                        __ptext44 2956  
                      __ptext36 2CE6                        __ptext28 273C                        __ptext53 2AC2  
                      __ptext45 2C06                        __ptext37 2998                        __ptext29 28CE  
                      __ptext54 2D2A                        __ptext46 1A4C                        __ptext38 2E0C  
                      __ptext55 29D8                        __ptext47 2BB2                        __ptext39 2912  
                      __ptext56 2E14                        __ptext48 25C0                        __ptext57 2DD8  
                      __ptext49 2D08                        __ptext58 2C54                        __ptext59 2CC2  
                  _SSP1CON1bits 000FC6              _ImplementPIDMotion 2302                   __size_of_main 0512  
           _EEDisassembleDouble 2A8C                  Delay1TCYx@unit 0018             ?_ImplementPIDMotion 0088  
            __end_of_initialize 2BB2                        _loopTime 00C1                      _EEReadChar 2D4C  
                 ??_Delay10TCYx 0018                ?i2_EEWriteDouble 0005                   ??_Delay1KTCYx 0018  
                  _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0018            ??_ImplementPIDMotion 008A  
                    _INTCONbits 000FF2            _SPIDisassembleDouble 2A18                        intlevel2 0000  
          __end_of_DataLodeSize 1003                      _OSCCONbits 000FD3    DetectMovement@JoystickResult 001B  
             _ImplementJSMotion 1A4C      __end_of_SPIDisassembleLode 20CC           __end_ofi2_EEWriteChar 2D4C  
   __end_of_SPIReassembleDouble 2956              ?_ImplementJSMotion 0088         __size_of_DetectJoystick 0022  
       __size_of_DetectMovement 006E           ??_EEDisassembleDouble 001B             __end_of_Delay10TCYx 2DD8  
           ??_ImplementJSMotion 008A          EEDisassembleDouble@dub 0018                     ?_EEPROMInit 0001  
                  _TransmitLode 07CC             __end_of_Delay1KTCYx 2DC6           ?_SPIDisassembleDouble 001A  
      __end_of_GenerateChecksum 2998                      i2_Busy_eep 2E14         SPIDisassembleDouble@dub 001A  
     __end_of_ImplementJSMotion 1B80            __end_of_calculatePID 17CE                   ?_EEReadDouble 001E  
                   ?_EEReadChar 0001              _EEReassembleDouble 28CE  
