

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 28 04:58:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0019F1                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _DeadbandHigh
    76  0019F1  05                 	db	5
    77                           
    78                           ;initializer for _DeadbandLow
    79  0019F2  FB                 	db	251
    80                           
    81                           	psect	idataBANK0
    82  0019EE                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _loopTime
    86                           ;PID.c: 5: unsigned char PIDEnableFlag;
    87                           ;PID.c: 6: unsigned char TMR0Flag = 0;
    88                           ;PID.c: 7: double Ki;
    89                           ;PID.c: 8: double Kp;
    90                           ;PID.c: 9: double Kd;
    91                           ;PID.c: 10: double SetAngle;
    92                           ;PID.c: 11: double CurrentAngle;
    93                           ;PID.c: 12: double error;
    94                           ;PID.c: 13: double prevErr;
    95                           ;PID.c: 14: double intErr;
    96                           ;PID.c: 15: int motorInput;
    97  0019EE  C3                 	db	195
    98  0019EF  F5                 	db	245
    99  0019F0  3C                 	db	60
   100  0000                     _ADCON0	set	4034
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON1	set	4033
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADRESH	set	4036
   105  0000                     _ADRESL	set	4035
   106  0000                     _CCP3CON	set	4023
   107  0000                     _CCP3CONbits	set	4023
   108  0000                     _CCPR3L	set	4024
   109  0000                     _EEADR	set	4009
   110  0000                     _EEADRH	set	4010
   111  0000                     _EECON1bits	set	4006
   112  0000                     _EECON2	set	4007
   113  0000                     _EEDATA	set	4008
   114  0000                     _HLVDCON	set	4050
   115  0000                     _INTCON	set	4082
   116  0000                     _INTCON2bits	set	4081
   117  0000                     _INTCONbits	set	4082
   118  0000                     _IPR1bits	set	3999
   119  0000                     _IPR2bits	set	4002
   120  0000                     _OSCCONbits	set	4051
   121  0000                     _PIE1bits	set	3997
   122  0000                     _PIE2bits	set	4000
   123  0000                     _PIR1bits	set	3998
   124  0000                     _PIR2bits	set	4001
   125  0000                     _PORTA	set	3968
   126  0000                     _PORTAbits	set	3968
   127  0000                     _PORTB	set	3969
   128  0000                     _PORTBbits	set	3969
   129  0000                     _PORTC	set	3970
   130  0000                     _PORTCbits	set	3970
   131  0000                     _PORTD	set	3971
   132  0000                     _PORTE	set	3972
   133  0000                     _PORTEbits	set	3972
   134  0000                     _PORTF	set	3973
   135  0000                     _PORTG	set	3974
   136  0000                     _PORTH	set	3975
   137  0000                     _PORTJ	set	3976
   138  0000                     _PORTJbits	set	3976
   139  0000                     _PR2	set	4043
   140  0000                     _RCONbits	set	4048
   141  0000                     _SSP1BUF	set	4041
   142  0000                     _SSP1CON1	set	4038
   143  0000                     _SSP1CON1bits	set	4038
   144  0000                     _SSP1STAT	set	4039
   145  0000                     _SSP1STATbits	set	4039
   146  0000                     _SSP2BUF	set	3942
   147  0000                     _SSP2CON1bits	set	3939
   148  0000                     _T0CON	set	4053
   149  0000                     _T0CONbits	set	4053
   150  0000                     _T2CON	set	4042
   151  0000                     _T3CON	set	4017
   152  0000                     _TMR0H	set	4055
   153  0000                     _TMR0L	set	4054
   154  0000                     _TRISAbits	set	3986
   155  0000                     _TRISBbits	set	3987
   156  0000                     _TRISCbits	set	3988
   157  0000                     _TRISD	set	3989
   158  0000                     _TRISDbits	set	3989
   159  0000                     _TRISEbits	set	3990
   160  0000                     _TRISFbits	set	3991
   161  0000                     _TRISGbits	set	3992
   162  0000                     _TRISH	set	3993
   163  0000                     _TRISJbits	set	3994
   164                           
   165                           ; #config settings
   166  0000                     
   167                           	psect	cinit
   168  001438                     __pcinit:
   169                           	opt stack 0
   170  001438                     start_initialization:
   171                           	opt stack 0
   172  001438                     __initialization:
   173                           	opt stack 0
   174                           
   175                           ; Clear objects allocated to BANK0 (32 bytes)
   176  001438  EE00  F0B2         	lfsr	0,__pbssBANK0
   177  00143C  0E20               	movlw	32
   178  00143E                     clear_0:
   179  00143E  6AEE               	clrf	postinc0,c
   180  001440  06E8               	decf	wreg,f,c
   181  001442  E1FD               	bnz	clear_0
   182                           
   183                           ; Clear objects allocated to COMRAM (12 bytes)
   184  001444  EE00  F02B         	lfsr	0,__pbssCOMRAM
   185  001448  0E0C               	movlw	12
   186  00144A                     clear_1:
   187  00144A  6AEE               	clrf	postinc0,c
   188  00144C  06E8               	decf	wreg,f,c
   189  00144E  E1FD               	bnz	clear_1
   190                           
   191                           ; Initialize objects allocated to BANK0 (3 bytes)
   192                           ; load TBLPTR registers with __pidataBANK0
   193  001450  0EEE               	movlw	low __pidataBANK0
   194  001452  6EF6               	movwf	tblptrl,c
   195  001454  0E19               	movlw	high __pidataBANK0
   196  001456  6EF7               	movwf	tblptrh,c
   197  001458  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   198  00145A  6EF8               	movwf	tblptru,c
   199  00145C  0009               	tblrd		*+	;fetch initializer
   200  00145E  CFF5 F0D2          	movff	tablat,__pdataBANK0
   201  001462  0009               	tblrd		*+	;fetch initializer
   202  001464  CFF5 F0D3          	movff	tablat,__pdataBANK0+1
   203  001468  0009               	tblrd		*+	;fetch initializer
   204  00146A  CFF5 F0D4          	movff	tablat,__pdataBANK0+2
   205                           
   206                           ; Initialize objects allocated to COMRAM (2 bytes)
   207                           ; load TBLPTR registers with __pidataCOMRAM
   208  00146E  0EF1               	movlw	low __pidataCOMRAM
   209  001470  6EF6               	movwf	tblptrl,c
   210  001472  0E19               	movlw	high __pidataCOMRAM
   211  001474  6EF7               	movwf	tblptrh,c
   212  001476  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   213  001478  6EF8               	movwf	tblptru,c
   214  00147A  0009               	tblrd		*+	;fetch initializer
   215  00147C  CFF5 F037          	movff	tablat,__pdataCOMRAM
   216  001480  0009               	tblrd		*+	;fetch initializer
   217  001482  CFF5 F038          	movff	tablat,__pdataCOMRAM+1
   218  001486                     end_of_initialization:
   219                           	opt stack 0
   220  001486                     __end_of__initialization:
   221                           	opt stack 0
   222  001486  0100               	movlb	0
   223  001488  EF58  F000         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           tblptrh	equ	0xFF7
   226                           tblptrl	equ	0xFF6
   227                           tablat	equ	0xFF5
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           
   231                           	psect	bssCOMRAM
   232  00002B                     __pbssCOMRAM:
   233                           	opt stack 0
   234  00002B                     _DoubleSPIS:
   235                           	opt stack 0
   236  00002B                     	ds	4
   237  00002F                     _DDouble:
   238                           	opt stack 0
   239  00002F                     	ds	3
   240  000032                     _SetAngle:
   241                           	opt stack 0
   242  000032                     	ds	3
   243  000035                     _DoublePtr:
   244                           	opt stack 0
   245  000035                     	ds	2
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	dataCOMRAM
   254  000037                     __pdataCOMRAM:
   255                           	opt stack 0
   256  000037                     _DeadbandHigh:
   257                           	opt stack 0
   258  000037                     	ds	1
   259  000038                     _DeadbandLow:
   260                           	opt stack 0
   261  000038                     	ds	1
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           
   269                           	psect	bssBANK0
   270  0000B2                     __pbssBANK0:
   271                           	opt stack 0
   272  0000B2                     _CurrentAngle:
   273                           	opt stack 0
   274  0000B2                     	ds	3
   275  0000B5                     _CurrentVelocity:
   276                           	opt stack 0
   277  0000B5                     	ds	3
   278  0000B8                     _Kd:
   279                           	opt stack 0
   280  0000B8                     	ds	3
   281  0000BB                     _Ki:
   282                           	opt stack 0
   283  0000BB                     	ds	3
   284  0000BE                     _Kp:
   285                           	opt stack 0
   286  0000BE                     	ds	3
   287  0000C1                     _error:
   288                           	opt stack 0
   289  0000C1                     	ds	3
   290  0000C4                     _intErr:
   291                           	opt stack 0
   292  0000C4                     	ds	3
   293  0000C7                     _prevErr:
   294                           	opt stack 0
   295  0000C7                     	ds	3
   296  0000CA                     _motorInput:
   297                           	opt stack 0
   298  0000CA                     	ds	2
   299  0000CC                     _Command:
   300                           	opt stack 0
   301  0000CC                     	ds	1
   302  0000CD                     _JSEnableFlag:
   303                           	opt stack 0
   304  0000CD                     	ds	1
   305  0000CE                     _PIDEnableFlag:
   306                           	opt stack 0
   307  0000CE                     	ds	1
   308  0000CF                     _SPIflag:
   309                           	opt stack 0
   310  0000CF                     	ds	1
   311  0000D0                     _TMR0Flag:
   312                           	opt stack 0
   313  0000D0                     	ds	1
   314  0000D1                     _dummy_byte:
   315                           	opt stack 0
   316  0000D1                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           
   324                           	psect	dataBANK0
   325  0000D2                     __pdataBANK0:
   326                           	opt stack 0
   327  0000D2                     _loopTime:
   328                           	opt stack 0
   329  0000D2                     	ds	3
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	cstackBANK0
   338  000060                     __pcstackBANK0:
   339                           	opt stack 0
   340  000060                     ?_abs:
   341                           	opt stack 0
   342  000060                     ?_DetectMovement:
   343                           	opt stack 0
   344  000060                     ?___ftpack:
   345                           	opt stack 0
   346  000060                     ?_SPIReassembleDouble:
   347                           	opt stack 0
   348  000060                     ?_EEReassembleDouble:
   349                           	opt stack 0
   350  000060                     ?___ftneg:
   351                           	opt stack 0
   352  000060                     SendSPI1@temp:
   353                           	opt stack 0
   354  000060                     GenerateChecksum@sum:
   355                           	opt stack 0
   356  000060                     OpenSPI1@bus_mode:
   357                           	opt stack 0
   358  000060                     Delay10TCYx@unit:
   359                           	opt stack 0
   360  000060                     Delay1KTCYx@unit:
   361                           	opt stack 0
   362  000060                     Delay1TCYx@unit:
   363                           	opt stack 0
   364  000060                     Read_b_eep@badd:
   365                           	opt stack 0
   366  000060                     abs@a:
   367                           	opt stack 0
   368  000060                     ___ftpack@arg:
   369                           	opt stack 0
   370  000060                     ___ftge@ff1:
   371                           	opt stack 0
   372  000060                     ___ftneg@f1:
   373                           	opt stack 0
   374                           
   375                           ; 3 bytes @ 0x0
   376  000060                     	ds	1
   377  000061                     ?_ReadRTDpos:
   378                           	opt stack 0
   379  000061                     SendSPI1@data:
   380                           	opt stack 0
   381  000061                     GenerateChecksum@y:
   382                           	opt stack 0
   383  000061                     OpenSPI1@smp_phase:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x1
   387  000061                     	ds	1
   388  000062                     ??_abs:
   389  000062                     ??_DetectMovement:
   390  000062                     EEReadChar@location:
   391                           	opt stack 0
   392  000062                     OpenSPI1@sync_mode:
   393                           	opt stack 0
   394  000062                     SPIDisassembleDouble@dub:
   395                           	opt stack 0
   396                           
   397                           ; 3 bytes @ 0x2
   398  000062                     	ds	1
   399  000063                     ??_ReadRTDpos:
   400  000063                     EEReadChar@ch:
   401                           	opt stack 0
   402  000063                     ___ftpack@exp:
   403                           	opt stack 0
   404  000063                     SPIReassembleDouble@dub:
   405                           	opt stack 0
   406  000063                     EEReassembleDouble@dub:
   407                           	opt stack 0
   408  000063                     ___ftge@ff2:
   409                           	opt stack 0
   410                           
   411                           ; 3 bytes @ 0x3
   412  000063                     	ds	1
   413  000064                     ___ftpack@sign:
   414                           	opt stack 0
   415  000064                     ImplementPIDMotion@PIDValue:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419  000064                     	ds	1
   420  000065                     ??___ftpack:
   421  000065                     DetectMovement@JoystickResult:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x5
   425  000065                     	ds	1
   426  000066                     ??_ImplementPIDMotion:
   427  000066                     ??___ftge:
   428  000066                     ?_EEReadDouble:
   429                           	opt stack 0
   430  000066                     ReadRTDpos@HighPosition:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x6
   434  000066                     	ds	1
   435  000067                     ReadRTDpos@LowPosition:
   436                           	opt stack 0
   437  000067                     DetectMovement@ADCresult:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x7
   441  000067                     	ds	1
   442  000068                     ?___ftdiv:
   443                           	opt stack 0
   444  000068                     ?___lwtoft:
   445                           	opt stack 0
   446  000068                     ReadRTDpos@FullPosition:
   447                           	opt stack 0
   448  000068                     ___lwtoft@c:
   449                           	opt stack 0
   450  000068                     ___ftdiv@f1:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x8
   454  000068                     	ds	1
   455  000069                     EEReadDouble@location:
   456                           	opt stack 0
   457  000069                     ImplementJSMotion@JoystickValue:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x9
   461  000069                     	ds	1
   462  00006A                     ReadRTDpos@x:
   463                           	opt stack 0
   464  00006A                     EEReadDouble@x:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0xA
   468  00006A                     	ds	1
   469  00006B                     ??_EEBootUp:
   470  00006B                     ??_ImplementJSMotion:
   471  00006B                     ___ftdiv@f2:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0xB
   475  00006B                     	ds	2
   476  00006D                     
   477                           ; 0 bytes @ 0xD
   478  00006D                     	ds	1
   479  00006E                     ??___ftdiv:
   480  00006E                     ImplementJSMotion@CCPinput:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0xE
   484  00006E                     	ds	3
   485  000071                     ___ftdiv@cntr:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x11
   489  000071                     	ds	1
   490  000072                     ___ftdiv@f3:
   491                           	opt stack 0
   492                           
   493                           ; 3 bytes @ 0x12
   494  000072                     	ds	3
   495  000075                     ___ftdiv@exp:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x15
   499  000075                     	ds	1
   500  000076                     ___ftdiv@sign:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x16
   504  000076                     	ds	1
   505  000077                     ?___ftmul:
   506                           	opt stack 0
   507  000077                     ___ftmul@f1:
   508                           	opt stack 0
   509                           
   510                           ; 3 bytes @ 0x17
   511  000077                     	ds	3
   512  00007A                     ___ftmul@f2:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x1A
   516  00007A                     	ds	3
   517  00007D                     ??___ftmul:
   518                           
   519                           ; 0 bytes @ 0x1D
   520  00007D                     	ds	3
   521  000080                     ___ftmul@exp:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x20
   525  000080                     	ds	1
   526  000081                     ___ftmul@f3_as_product:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x21
   530  000081                     	ds	3
   531  000084                     ___ftmul@cntr:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x24
   535  000084                     	ds	1
   536  000085                     ___ftmul@sign:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x25
   540  000085                     	ds	1
   541  000086                     ?___ftadd:
   542                           	opt stack 0
   543  000086                     ?_RTD2Angle:
   544                           	opt stack 0
   545  000086                     RTD2Angle@RTDAngle:
   546                           	opt stack 0
   547  000086                     ___ftadd@f1:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x26
   551  000086                     	ds	3
   552  000089                     ___ftadd@f2:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x29
   556  000089                     	ds	3
   557  00008C                     ??___ftadd:
   558                           
   559                           ; 0 bytes @ 0x2C
   560  00008C                     	ds	3
   561  00008F                     ___ftadd@sign:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x2F
   565  00008F                     	ds	1
   566  000090                     ___ftadd@exp2:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x30
   570  000090                     	ds	1
   571  000091                     ___ftadd@exp1:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x31
   575  000091                     	ds	1
   576  000092                     ?___ftsub:
   577                           	opt stack 0
   578  000092                     ?___fttol:
   579                           	opt stack 0
   580  000092                     ___ftsub@f1:
   581                           	opt stack 0
   582  000092                     ___fttol@f1:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x32
   586  000092                     	ds	3
   587  000095                     ___ftsub@f2:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x35
   591  000095                     	ds	1
   592  000096                     ??___fttol:
   593                           
   594                           ; 0 bytes @ 0x36
   595  000096                     	ds	2
   596  000098                     
   597                           ; 0 bytes @ 0x38
   598  000098                     	ds	3
   599  00009B                     ___fttol@sign1:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x3B
   603  00009B                     	ds	1
   604  00009C                     ___fttol@lval:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x3C
   608  00009C                     	ds	4
   609  0000A0                     ___fttol@exp1:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x40
   613  0000A0                     	ds	1
   614  0000A1                     calculatePID@angle:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x41
   618  0000A1                     	ds	3
   619  0000A4                     calculatePID@setpoint:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0x44
   623  0000A4                     	ds	3
   624  0000A7                     calculatePID@derErr:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x47
   628  0000A7                     	ds	3
   629  0000AA                     _calculatePID$3512:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x4A
   633  0000AA                     	ds	3
   634  0000AD                     _calculatePID$3513:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x4D
   638  0000AD                     	ds	3
   639  0000B0                     main@temporary:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x50
   643  0000B0                     	ds	1
   644  0000B1                     main@x:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x51
   648  0000B1                     	ds	1
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           
   656                           	psect	cstackCOMRAM
   657  000001                     __pcstackCOMRAM:
   658                           	opt stack 0
   659  000001                     ??_lISR:
   660  000001                     
   661                           ; 1 bytes @ 0x0
   662  000001                     	ds	17
   663  000012                     Write_b_eep@badd:
   664                           	opt stack 0
   665  000012                     EEDisassembleDouble@dub:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x11
   669  000012                     	ds	2
   670  000014                     Write_b_eep@bdat:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x13
   674  000014                     	ds	1
   675  000015                     Write_b_eep@GIE_BIT_VAL:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x14
   679  000015                     	ds	1
   680  000016                     EEWriteChar@ch:
   681                           	opt stack 0
   682  000016                     EEWriteDouble@dub:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x15
   686  000016                     	ds	1
   687  000017                     EEWriteChar@location:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x16
   691  000017                     	ds	2
   692  000019                     EEWriteDouble@location:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x18
   696  000019                     	ds	1
   697  00001A                     EEWriteDouble@x:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x19
   701  00001A                     	ds	1
   702  00001B                     ??_hISR:
   703                           
   704                           ; 0 bytes @ 0x1A
   705  00001B                     	ds	16
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           
   713 ;;
   714 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   715 ;;
   716 ;; *************** function _main *****************
   717 ;; Defined at:
   718 ;;		line 21 in file "RTDuC.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  x               1   81[BANK0 ] unsigned char 
   723 ;;  temporary       1   80[BANK0 ] unsigned char 
   724 ;; Return value:  Size  Location     Type
   725 ;;		None               void
   726 ;; Registers used:
   727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;Total ram usage:        2 bytes
   738 ;; Hardware stack levels required when called:   11
   739 ;; This function calls:
   740 ;;		_DetectJoystick
   741 ;;		_DetectMovement
   742 ;;		_ImplementJSMotion
   743 ;;		_ImplementPIDMotion
   744 ;;		_RTD2Angle
   745 ;;		_ReadRTDpos
   746 ;;		_ReceiveSPI1
   747 ;;		_SPIDisassembleDouble
   748 ;;		_SPIReassembleDouble
   749 ;;		_SendSPI1
   750 ;;		_calculatePID
   751 ;;		_initialize
   752 ;; This function is called by:
   753 ;;		Startup code after reset
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text0
   758  0000B0                     __ptext0:
   759                           	opt stack 0
   760  0000B0                     _main:
   761                           	opt stack 20
   762                           
   763                           ;RTDuC.c: 23: unsigned char temporary, x = 0;
   764                           
   765                           ; BSR set to: 0
   766                           ;incstack = 0
   767  0000B0  0E00               	movlw	0
   768  0000B2  0100               	movlb	0	; () banked
   769  0000B4  6FB1               	movwf	main@x& (0+255),b
   770                           
   771                           ; BSR set to: 0
   772                           ;RTDuC.c: 25: initialize();
   773  0000B6  EC1E  F00C         	call	_initialize	;wreg free
   774                           
   775                           ;RTDuC.c: 27: PORTCbits.RC6 = 0;
   776  0000BA  9C82               	bcf	3970,6,c	;volatile
   777                           
   778                           ;RTDuC.c: 28: SSP2BUF = dummy_byte;
   779  0000BC  C0D1  FF66         	movff	_dummy_byte,3942	;volatile
   780  0000C0  D000               	goto	l3804
   781  0000C2                     l3804:
   782                           
   783                           ;RTDuC.c: 31: {
   784                           ;RTDuC.c: 32: if (SPIflag == 1)
   785  0000C2  0100               	movlb	0	; () banked
   786  0000C4  05CF               	decf	_SPIflag& (0+255),w,b
   787  0000C6  A4D8               	btfss	status,2,c
   788  0000C8  D0F0               	goto	l3898
   789                           
   790                           ; BSR set to: 0
   791                           ;RTDuC.c: 33: {
   792                           ;RTDuC.c: 34: SPIflag = 0;
   793  0000CA  0E00               	movlw	0
   794  0000CC  0100               	movlb	0	; () banked
   795  0000CE  6FCF               	movwf	_SPIflag& (0+255),b
   796                           
   797                           ; BSR set to: 0
   798                           ;RTDuC.c: 35: if ((Command == 0x02) || (Command == 0x03) || (Command == 0x04) || (Comman
      +                          d == 0x06) || (Command == 0x08))
   799  0000D0  0E02               	movlw	2
   800  0000D2  0100               	movlb	0	; () banked
   801  0000D4  19CC               	xorwf	_Command& (0+255),w,b
   802  0000D6  B4D8               	btfsc	status,2,c
   803  0000D8  D014               	goto	l3818
   804                           
   805                           ; BSR set to: 0
   806  0000DA  0E03               	movlw	3
   807  0000DC  0100               	movlb	0	; () banked
   808  0000DE  19CC               	xorwf	_Command& (0+255),w,b
   809  0000E0  B4D8               	btfsc	status,2,c
   810  0000E2  D00F               	goto	l3818
   811                           
   812                           ; BSR set to: 0
   813  0000E4  0E04               	movlw	4
   814  0000E6  0100               	movlb	0	; () banked
   815  0000E8  19CC               	xorwf	_Command& (0+255),w,b
   816  0000EA  B4D8               	btfsc	status,2,c
   817  0000EC  D00A               	goto	l3818
   818                           
   819                           ; BSR set to: 0
   820  0000EE  0E06               	movlw	6
   821  0000F0  0100               	movlb	0	; () banked
   822  0000F2  19CC               	xorwf	_Command& (0+255),w,b
   823  0000F4  B4D8               	btfsc	status,2,c
   824  0000F6  D005               	goto	l3818
   825                           
   826                           ; BSR set to: 0
   827  0000F8  0E08               	movlw	8
   828  0000FA  0100               	movlb	0	; () banked
   829  0000FC  19CC               	xorwf	_Command& (0+255),w,b
   830  0000FE  A4D8               	btfss	status,2,c
   831  000100  D063               	goto	l3854
   832  000102                     l3818:
   833                           
   834                           ; BSR set to: 0
   835                           ;RTDuC.c: 36: {
   836                           ;RTDuC.c: 37: if (Command == 0x02)
   837  000102  0E02               	movlw	2
   838  000104  0100               	movlb	0	; () banked
   839  000106  19CC               	xorwf	_Command& (0+255),w,b
   840  000108  A4D8               	btfss	status,2,c
   841  00010A  D009               	goto	l3822
   842                           
   843                           ; BSR set to: 0
   844                           ;RTDuC.c: 38: SPIDisassembleDouble(CurrentAngle);
   845  00010C  C0B2  F062         	movff	_CurrentAngle,SPIDisassembleDouble@dub
   846  000110  C0B3  F063         	movff	_CurrentAngle+1,SPIDisassembleDouble@dub+1
   847  000114  C0B4  F064         	movff	_CurrentAngle+2,SPIDisassembleDouble@dub+2
   848  000118  EC5E  F00B         	call	_SPIDisassembleDouble	;wreg free
   849  00011C  D038               	goto	l3838
   850  00011E                     l3822:
   851                           
   852                           ;RTDuC.c: 39: else if (Command == 0x03)
   853  00011E  0E03               	movlw	3
   854  000120  0100               	movlb	0	; () banked
   855  000122  19CC               	xorwf	_Command& (0+255),w,b
   856  000124  A4D8               	btfss	status,2,c
   857  000126  D009               	goto	l3826
   858                           
   859                           ; BSR set to: 0
   860                           ;RTDuC.c: 40: SPIDisassembleDouble(CurrentVelocity);
   861  000128  C0B5  F062         	movff	_CurrentVelocity,SPIDisassembleDouble@dub
   862  00012C  C0B6  F063         	movff	_CurrentVelocity+1,SPIDisassembleDouble@dub+1
   863  000130  C0B7  F064         	movff	_CurrentVelocity+2,SPIDisassembleDouble@dub+2
   864  000134  EC5E  F00B         	call	_SPIDisassembleDouble	;wreg free
   865  000138  D02A               	goto	l3838
   866  00013A                     l3826:
   867                           
   868                           ;RTDuC.c: 41: else if (Command == 0x04)
   869  00013A  0E04               	movlw	4
   870  00013C  0100               	movlb	0	; () banked
   871  00013E  19CC               	xorwf	_Command& (0+255),w,b
   872  000140  A4D8               	btfss	status,2,c
   873  000142  D009               	goto	l3830
   874                           
   875                           ; BSR set to: 0
   876                           ;RTDuC.c: 42: SPIDisassembleDouble(Kp);
   877  000144  C0BE  F062         	movff	_Kp,SPIDisassembleDouble@dub
   878  000148  C0BF  F063         	movff	_Kp+1,SPIDisassembleDouble@dub+1
   879  00014C  C0C0  F064         	movff	_Kp+2,SPIDisassembleDouble@dub+2
   880  000150  EC5E  F00B         	call	_SPIDisassembleDouble	;wreg free
   881  000154  D01C               	goto	l3838
   882  000156                     l3830:
   883                           
   884                           ;RTDuC.c: 43: else if (Command == 0x06)
   885  000156  0E06               	movlw	6
   886  000158  0100               	movlb	0	; () banked
   887  00015A  19CC               	xorwf	_Command& (0+255),w,b
   888  00015C  A4D8               	btfss	status,2,c
   889  00015E  D009               	goto	l3834
   890                           
   891                           ; BSR set to: 0
   892                           ;RTDuC.c: 44: SPIDisassembleDouble(Ki);
   893  000160  C0BB  F062         	movff	_Ki,SPIDisassembleDouble@dub
   894  000164  C0BC  F063         	movff	_Ki+1,SPIDisassembleDouble@dub+1
   895  000168  C0BD  F064         	movff	_Ki+2,SPIDisassembleDouble@dub+2
   896  00016C  EC5E  F00B         	call	_SPIDisassembleDouble	;wreg free
   897  000170  D00E               	goto	l3838
   898  000172                     l3834:
   899                           
   900                           ;RTDuC.c: 45: else if (Command == 0x08)
   901  000172  0E08               	movlw	8
   902  000174  0100               	movlb	0	; () banked
   903  000176  19CC               	xorwf	_Command& (0+255),w,b
   904  000178  A4D8               	btfss	status,2,c
   905  00017A  D009               	goto	l3838
   906                           
   907                           ; BSR set to: 0
   908                           ;RTDuC.c: 46: SPIDisassembleDouble(Kd);
   909  00017C  C0B8  F062         	movff	_Kd,SPIDisassembleDouble@dub
   910  000180  C0B9  F063         	movff	_Kd+1,SPIDisassembleDouble@dub+1
   911  000184  C0BA  F064         	movff	_Kd+2,SPIDisassembleDouble@dub+2
   912  000188  EC5E  F00B         	call	_SPIDisassembleDouble	;wreg free
   913  00018C  D000               	goto	l3838
   914  00018E                     l3838:
   915                           
   916                           ;RTDuC.c: 47: INTCONbits.GIE = 0;
   917  00018E  9EF2               	bcf	intcon,7,c	;volatile
   918                           
   919                           ;RTDuC.c: 48: PORTCbits.RC6 = 0;
   920  000190  9C82               	bcf	3970,6,c	;volatile
   921                           
   922                           ;RTDuC.c: 49: for (x = 0; x < 4; x++)
   923  000192  0E00               	movlw	0
   924  000194  0100               	movlb	0	; () banked
   925  000196  6FB1               	movwf	main@x& (0+255),b
   926  000198  D00F               	goto	l3852
   927                           
   928                           ; BSR set to: 0
   929                           
   930                           ; BSR set to: 0
   931  00019A  D012               	goto	l489
   932  00019C                     l3848:
   933                           
   934                           ; BSR set to: 0
   935                           ;RTDuC.c: 50: SendSPI1(DoubleSPIS[x]);
   936  00019C  0100               	movlb	0	; () banked
   937  00019E  51B1               	movf	main@x& (0+255),w,b
   938  0001A0  0D01               	mullw	1
   939  0001A2  0E2B               	movlw	low _DoubleSPIS
   940  0001A4  24F3               	addwf	prodl,w,c
   941  0001A6  6ED9               	movwf	fsr2l,c
   942  0001A8  0E00               	movlw	high _DoubleSPIS
   943  0001AA  20F4               	addwfc	prodh,w,c
   944  0001AC  6EDA               	movwf	fsr2h,c
   945  0001AE  50DF               	movf	indf2,w,c
   946  0001B0  EC94  F00C         	call	_SendSPI1
   947  0001B4  0100               	movlb	0	; () banked
   948  0001B6  2BB1               	incf	main@x& (0+255),f,b
   949  0001B8                     l3852:
   950                           
   951                           ; BSR set to: 0
   952  0001B8  0E03               	movlw	3
   953  0001BA  0100               	movlb	0	; () banked
   954  0001BC  65B1               	cpfsgt	main@x& (0+255),b
   955  0001BE  D7EE               	goto	l3848
   956  0001C0                     l489:
   957                           
   958                           ; BSR set to: 0
   959                           ;RTDuC.c: 51: temporary = SSP1BUF;
   960  0001C0  CFC9 F0B0          	movff	4041,main@temporary	;volatile
   961                           
   962                           ;RTDuC.c: 52: INTCONbits.GIE = 1;
   963  0001C4  8EF2               	bsf	intcon,7,c	;volatile
   964                           
   965                           ;RTDuC.c: 53: }
   966  0001C6  D06F               	goto	l3896
   967  0001C8                     l3854:
   968                           
   969                           ; BSR set to: 0
   970                           ;RTDuC.c: 54: else if ((Command == 0x01) || (Command == 0x05) || (Command == 0x07) || (C
      +                          ommand == 0x09))
   971  0001C8  0100               	movlb	0	; () banked
   972  0001CA  05CC               	decf	_Command& (0+255),w,b
   973  0001CC  B4D8               	btfsc	status,2,c
   974  0001CE  D00F               	goto	l493
   975                           
   976                           ; BSR set to: 0
   977  0001D0  0E05               	movlw	5
   978  0001D2  0100               	movlb	0	; () banked
   979  0001D4  19CC               	xorwf	_Command& (0+255),w,b
   980  0001D6  B4D8               	btfsc	status,2,c
   981  0001D8  D00A               	goto	l493
   982                           
   983                           ; BSR set to: 0
   984  0001DA  0E07               	movlw	7
   985  0001DC  0100               	movlb	0	; () banked
   986  0001DE  19CC               	xorwf	_Command& (0+255),w,b
   987  0001E0  B4D8               	btfsc	status,2,c
   988  0001E2  D005               	goto	l493
   989                           
   990                           ; BSR set to: 0
   991  0001E4  0E09               	movlw	9
   992  0001E6  0100               	movlb	0	; () banked
   993  0001E8  19CC               	xorwf	_Command& (0+255),w,b
   994  0001EA  A4D8               	btfss	status,2,c
   995  0001EC  D05C               	goto	l3896
   996  0001EE                     l493:
   997                           
   998                           ; BSR set to: 0
   999                           ;RTDuC.c: 55: {
  1000                           ;RTDuC.c: 56: INTCONbits.GIE = 0;
  1001  0001EE  9EF2               	bcf	intcon,7,c	;volatile
  1002                           
  1003                           ;RTDuC.c: 57: PORTCbits.RC6 = 0;
  1004  0001F0  9C82               	bcf	3970,6,c	;volatile
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;RTDuC.c: 58: for (x = 0; x != 4; x++)
  1008  0001F2  0E00               	movlw	0
  1009  0001F4  0100               	movlb	0	; () banked
  1010  0001F6  6FB1               	movwf	main@x& (0+255),b
  1011  0001F8                     l3864:
  1012                           
  1013                           ; BSR set to: 0
  1014  0001F8  0E04               	movlw	4
  1015  0001FA  0100               	movlb	0	; () banked
  1016  0001FC  19B1               	xorwf	main@x& (0+255),w,b
  1017  0001FE  B4D8               	btfsc	status,2,c
  1018  000200  D011               	goto	l495
  1019  000202  D001               	goto	l3868
  1020                           
  1021                           ; BSR set to: 0
  1022  000204  D00F               	goto	l495
  1023  000206                     l3868:
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;RTDuC.c: 59: DoubleSPIS[x] = ReceiveSPI1();
  1027  000206  0100               	movlb	0	; () banked
  1028  000208  51B1               	movf	main@x& (0+255),w,b
  1029  00020A  0D01               	mullw	1
  1030  00020C  0E2B               	movlw	low _DoubleSPIS
  1031  00020E  24F3               	addwf	prodl,w,c
  1032  000210  6ED9               	movwf	fsr2l,c
  1033  000212  0E00               	movlw	high _DoubleSPIS
  1034  000214  20F4               	addwfc	prodh,w,c
  1035  000216  6EDA               	movwf	fsr2h,c
  1036  000218  ECDC  F00C         	call	_ReceiveSPI1	;wreg free
  1037  00021C  6EDF               	movwf	indf2,c
  1038  00021E  0100               	movlb	0	; () banked
  1039  000220  2BB1               	incf	main@x& (0+255),f,b
  1040  000222  D7EA               	goto	l3864
  1041  000224                     l495:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;RTDuC.c: 60: INTCONbits.GIE = 1;
  1045  000224  8EF2               	bsf	intcon,7,c	;volatile
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;RTDuC.c: 61: if (Command == 0x01)
  1049  000226  0100               	movlb	0	; () banked
  1050  000228  05CC               	decf	_Command& (0+255),w,b
  1051  00022A  A4D8               	btfss	status,2,c
  1052  00022C  D00F               	goto	l3882
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;RTDuC.c: 62: {
  1056                           ;RTDuC.c: 63: SetAngle = SPIReassembleDouble();
  1057  00022E  ECDD  F00A         	call	_SPIReassembleDouble	;wreg free
  1058  000232  C060  F032         	movff	?_SPIReassembleDouble,_SetAngle
  1059  000236  C061  F033         	movff	?_SPIReassembleDouble+1,_SetAngle+1
  1060  00023A  C062  F034         	movff	?_SPIReassembleDouble+2,_SetAngle+2
  1061                           
  1062                           ;RTDuC.c: 64: PIDEnableFlag = 3;
  1063  00023E  0E03               	movlw	3
  1064  000240  0100               	movlb	0	; () banked
  1065  000242  6FCE               	movwf	_PIDEnableFlag& (0+255),b
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;RTDuC.c: 65: JSEnableFlag = 0;
  1069  000244  0E00               	movlw	0
  1070  000246  0100               	movlb	0	; () banked
  1071  000248  6FCD               	movwf	_JSEnableFlag& (0+255),b
  1072                           
  1073                           ;RTDuC.c: 66: }
  1074  00024A  D02A               	goto	l3894
  1075  00024C                     l3882:
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;RTDuC.c: 67: else if (Command == 0x05)
  1079  00024C  0E05               	movlw	5
  1080  00024E  0100               	movlb	0	; () banked
  1081  000250  19CC               	xorwf	_Command& (0+255),w,b
  1082  000252  A4D8               	btfss	status,2,c
  1083  000254  D009               	goto	l3886
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;RTDuC.c: 68: {
  1087                           ;RTDuC.c: 69: Kp = SPIReassembleDouble();
  1088  000256  ECDD  F00A         	call	_SPIReassembleDouble	;wreg free
  1089  00025A  C060  F0BE         	movff	?_SPIReassembleDouble,_Kp
  1090  00025E  C061  F0BF         	movff	?_SPIReassembleDouble+1,_Kp+1
  1091  000262  C062  F0C0         	movff	?_SPIReassembleDouble+2,_Kp+2
  1092                           
  1093                           ;RTDuC.c: 70: }
  1094  000266  D01C               	goto	l3894
  1095  000268                     l3886:
  1096                           
  1097                           ;RTDuC.c: 71: else if (Command == 0x07)
  1098  000268  0E07               	movlw	7
  1099  00026A  0100               	movlb	0	; () banked
  1100  00026C  19CC               	xorwf	_Command& (0+255),w,b
  1101  00026E  A4D8               	btfss	status,2,c
  1102  000270  D009               	goto	l3890
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;RTDuC.c: 72: {
  1106                           ;RTDuC.c: 73: Ki = SPIReassembleDouble();
  1107  000272  ECDD  F00A         	call	_SPIReassembleDouble	;wreg free
  1108  000276  C060  F0BB         	movff	?_SPIReassembleDouble,_Ki
  1109  00027A  C061  F0BC         	movff	?_SPIReassembleDouble+1,_Ki+1
  1110  00027E  C062  F0BD         	movff	?_SPIReassembleDouble+2,_Ki+2
  1111                           
  1112                           ;RTDuC.c: 74: }
  1113  000282  D00E               	goto	l3894
  1114  000284                     l3890:
  1115                           
  1116                           ;RTDuC.c: 75: else if (Command == 0x09)
  1117  000284  0E09               	movlw	9
  1118  000286  0100               	movlb	0	; () banked
  1119  000288  19CC               	xorwf	_Command& (0+255),w,b
  1120  00028A  A4D8               	btfss	status,2,c
  1121  00028C  D009               	goto	l3894
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;RTDuC.c: 76: {
  1125                           ;RTDuC.c: 77: Kd = SPIReassembleDouble();
  1126  00028E  ECDD  F00A         	call	_SPIReassembleDouble	;wreg free
  1127  000292  C060  F0B8         	movff	?_SPIReassembleDouble,_Kd
  1128  000296  C061  F0B9         	movff	?_SPIReassembleDouble+1,_Kd+1
  1129  00029A  C062  F0BA         	movff	?_SPIReassembleDouble+2,_Kd+2
  1130  00029E  D000               	goto	l3894
  1131  0002A0                     l3894:
  1132                           
  1133                           ;RTDuC.c: 78: }
  1134                           ;RTDuC.c: 79: temporary = SSP1BUF;
  1135  0002A0  CFC9 F0B0          	movff	4041,main@temporary	;volatile
  1136  0002A4  D000               	goto	l3896
  1137  0002A6                     l3896:
  1138                           
  1139                           ;RTDuC.c: 80: }
  1140                           ;RTDuC.c: 81: PIE1bits.SSP1IE = 1;
  1141  0002A6  869D               	bsf	3997,3,c	;volatile
  1142  0002A8  D000               	goto	l3898
  1143  0002AA                     l3898:
  1144                           
  1145                           ;RTDuC.c: 82: }
  1146                           ;RTDuC.c: 84: DetectJoystick();
  1147  0002AA  EC55  F00C         	call	_DetectJoystick	;wreg free
  1148                           
  1149                           ;RTDuC.c: 85: if (JSEnableFlag == 1)
  1150  0002AE  0100               	movlb	0	; () banked
  1151  0002B0  05CD               	decf	_JSEnableFlag& (0+255),w,b
  1152  0002B2  A4D8               	btfss	status,2,c
  1153  0002B4  D009               	goto	l3904
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;RTDuC.c: 86: {
  1157                           ;RTDuC.c: 87: ImplementJSMotion(DetectMovement());
  1158  0002B6  EC8F  F008         	call	_DetectMovement	;wreg free
  1159  0002BA  C060  F069         	movff	?_DetectMovement,ImplementJSMotion@JoystickValue
  1160  0002BE  C061  F06A         	movff	?_DetectMovement+1,ImplementJSMotion@JoystickValue+1
  1161  0002C2  ECE7  F006         	call	_ImplementJSMotion	;wreg free
  1162  0002C6  D000               	goto	l3904
  1163  0002C8                     l3904:
  1164                           
  1165                           ;RTDuC.c: 88: }
  1166                           ;RTDuC.c: 90: if (PIDEnableFlag == 1 && TMR0Flag == 1)
  1167  0002C8  0100               	movlb	0	; () banked
  1168  0002CA  05CE               	decf	_PIDEnableFlag& (0+255),w,b
  1169  0002CC  A4D8               	btfss	status,2,c
  1170  0002CE  D02D               	goto	l3918
  1171                           
  1172                           ; BSR set to: 0
  1173  0002D0  0100               	movlb	0	; () banked
  1174  0002D2  05D0               	decf	_TMR0Flag& (0+255),w,b
  1175  0002D4  A4D8               	btfss	status,2,c
  1176  0002D6  D029               	goto	l3918
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;RTDuC.c: 91: {
  1180                           ;RTDuC.c: 92: PORTCbits.RC6 = 1;
  1181  0002D8  8C82               	bsf	3970,6,c	;volatile
  1182                           
  1183                           ;RTDuC.c: 93: INTCONbits.GIE = 0;
  1184  0002DA  9EF2               	bcf	intcon,7,c	;volatile
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;RTDuC.c: 94: CurrentAngle = RTD2Angle(ReadRTDpos());
  1188  0002DC  EC7E  F009         	call	_ReadRTDpos	;wreg free
  1189  0002E0  C061  F086         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1190  0002E4  C062  F087         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1191  0002E8  EC3F  F00B         	call	_RTD2Angle	;wreg free
  1192  0002EC  C086  F0B2         	movff	?_RTD2Angle,_CurrentAngle
  1193  0002F0  C087  F0B3         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1194  0002F4  C088  F0B4         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1195                           
  1196                           ;RTDuC.c: 95: calculatePID(CurrentAngle, SetAngle);
  1197  0002F8  C0B2  F0A1         	movff	_CurrentAngle,calculatePID@angle
  1198  0002FC  C0B3  F0A2         	movff	_CurrentAngle+1,calculatePID@angle+1
  1199  000300  C0B4  F0A3         	movff	_CurrentAngle+2,calculatePID@angle+2
  1200  000304  C032  F0A4         	movff	_SetAngle,calculatePID@setpoint
  1201  000308  C033  F0A5         	movff	_SetAngle+1,calculatePID@setpoint+1
  1202  00030C  C034  F0A6         	movff	_SetAngle+2,calculatePID@setpoint+2
  1203  000310  ECC9  F001         	call	_calculatePID	;wreg free
  1204                           
  1205                           ;RTDuC.c: 96: ImplementPIDMotion(motorInput);
  1206  000314  C0CA  F064         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1207  000318  C0CB  F065         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1208  00031C  ECE6  F008         	call	_ImplementPIDMotion	;wreg free
  1209                           
  1210                           ;RTDuC.c: 97: TMR0Flag = 0;
  1211  000320  0E00               	movlw	0
  1212  000322  0100               	movlb	0	; () banked
  1213  000324  6FD0               	movwf	_TMR0Flag& (0+255),b
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;RTDuC.c: 98: INTCONbits.GIE = 1;
  1217  000326  8EF2               	bsf	intcon,7,c	;volatile
  1218  000328  D030               	goto	l3936
  1219  00032A                     l3918:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;RTDuC.c: 102: else if (PIDEnableFlag == 3)
  1223  00032A  0E03               	movlw	3
  1224  00032C  0100               	movlb	0	; () banked
  1225  00032E  19CE               	xorwf	_PIDEnableFlag& (0+255),w,b
  1226  000330  A4D8               	btfss	status,2,c
  1227  000332  D6C7               	goto	l3804
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;RTDuC.c: 103: {
  1231                           ;RTDuC.c: 104: PORTCbits.RC6 = 1;
  1232  000334  8C82               	bsf	3970,6,c	;volatile
  1233                           
  1234                           ;RTDuC.c: 105: INTCONbits.GIE = 0;
  1235  000336  9EF2               	bcf	intcon,7,c	;volatile
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;RTDuC.c: 106: TMR0H = 0xDB;
  1239  000338  0EDB               	movlw	219
  1240  00033A  6ED7               	movwf	4055,c	;volatile
  1241                           
  1242                           ;RTDuC.c: 107: TMR0L = 0x60;
  1243  00033C  0E60               	movlw	96
  1244  00033E  6ED6               	movwf	4054,c	;volatile
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;RTDuC.c: 108: CurrentAngle = RTD2Angle(ReadRTDpos());
  1248  000340  EC7E  F009         	call	_ReadRTDpos	;wreg free
  1249  000344  C061  F086         	movff	?_ReadRTDpos,RTD2Angle@RTDAngle
  1250  000348  C062  F087         	movff	?_ReadRTDpos+1,RTD2Angle@RTDAngle+1
  1251  00034C  EC3F  F00B         	call	_RTD2Angle	;wreg free
  1252  000350  C086  F0B2         	movff	?_RTD2Angle,_CurrentAngle
  1253  000354  C087  F0B3         	movff	?_RTD2Angle+1,_CurrentAngle+1
  1254  000358  C088  F0B4         	movff	?_RTD2Angle+2,_CurrentAngle+2
  1255                           
  1256                           ;RTDuC.c: 109: calculatePID(CurrentAngle, SetAngle);
  1257  00035C  C0B2  F0A1         	movff	_CurrentAngle,calculatePID@angle
  1258  000360  C0B3  F0A2         	movff	_CurrentAngle+1,calculatePID@angle+1
  1259  000364  C0B4  F0A3         	movff	_CurrentAngle+2,calculatePID@angle+2
  1260  000368  C032  F0A4         	movff	_SetAngle,calculatePID@setpoint
  1261  00036C  C033  F0A5         	movff	_SetAngle+1,calculatePID@setpoint+1
  1262  000370  C034  F0A6         	movff	_SetAngle+2,calculatePID@setpoint+2
  1263  000374  ECC9  F001         	call	_calculatePID	;wreg free
  1264                           
  1265                           ;RTDuC.c: 110: ImplementPIDMotion(motorInput);
  1266  000378  C0CA  F064         	movff	_motorInput,ImplementPIDMotion@PIDValue
  1267  00037C  C0CB  F065         	movff	_motorInput+1,ImplementPIDMotion@PIDValue+1
  1268  000380  ECE6  F008         	call	_ImplementPIDMotion	;wreg free
  1269                           
  1270                           ;RTDuC.c: 111: INTCONbits.GIE = 1;
  1271  000384  8EF2               	bsf	intcon,7,c	;volatile
  1272                           
  1273                           ;RTDuC.c: 112: INTCONbits.TMR0IE = 1;
  1274  000386  8AF2               	bsf	intcon,5,c	;volatile
  1275                           
  1276                           ;RTDuC.c: 113: T0CONbits.TMR0ON = 1;
  1277  000388  8ED5               	bsf	4053,7,c	;volatile
  1278  00038A                     l3936:
  1279                           
  1280                           ;RTDuC.c: 114: PORTCbits.RC6 = 0;
  1281  00038A  9C82               	bcf	3970,6,c	;volatile
  1282  00038C  D69A               	goto	l3804
  1283  00038E  EF56  F000         	goto	start
  1284  000392                     __end_of_main:
  1285                           	opt stack 0
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           prodh	equ	0xFF4
  1291                           prodl	equ	0xFF3
  1292                           intcon	equ	0xFF2
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function _initialize *****************
  1301 ;; Defined at:
  1302 ;;		line 119 in file "RTDuC.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;		None               void
  1309 ;; Registers used:
  1310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;Total ram usage:        0 bytes
  1321 ;; Hardware stack levels used:    1
  1322 ;; Hardware stack levels required when called:   10
  1323 ;; This function calls:
  1324 ;;		_EEPROMInit
  1325 ;;		_InitializeInterrupts
  1326 ;;		_JoystickInit
  1327 ;;		_MotorDriverInit
  1328 ;;		_PIDInit
  1329 ;;		_RTDInit
  1330 ;;		_SPIInit
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text1
  1337  00183C                     __ptext1:
  1338                           	opt stack 0
  1339  00183C                     _initialize:
  1340                           	opt stack 20
  1341                           
  1342                           ;RTDuC.c: 121: while (OSCCONbits.OSTS == 0);
  1343                           
  1344                           ;incstack = 0
  1345  00183C  D000               	goto	l512
  1346  00183E                     l512:
  1347  00183E  A6D3               	btfss	4051,3,c	;volatile
  1348  001840  D7FE               	goto	l512
  1349                           
  1350                           ;RTDuC.c: 123: RTDInit();
  1351  001842  EC97  F00B         	call	_RTDInit	;wreg free
  1352                           
  1353                           ;RTDuC.c: 124: SPIInit();
  1354  001846  EC77  F00C         	call	_SPIInit	;wreg free
  1355                           
  1356                           ;RTDuC.c: 125: JoystickInit();
  1357  00184A  ECC7  F00B         	call	_JoystickInit	;wreg free
  1358                           
  1359                           ;RTDuC.c: 126: MotorDriverInit();
  1360  00184E  EC31  F00C         	call	_MotorDriverInit	;wreg free
  1361                           
  1362                           ;RTDuC.c: 127: PIDInit();
  1363  001852  EC98  F00A         	call	_PIDInit	;wreg free
  1364                           
  1365                           ;RTDuC.c: 128: EEPROMInit();
  1366  001856  ECB7  F00C         	call	_EEPROMInit	;wreg free
  1367                           
  1368                           ;RTDuC.c: 130: InitializeInterrupts();
  1369  00185A  ECE4  F00C         	call	_InitializeInterrupts	;wreg free
  1370                           
  1371                           ;RTDuC.c: 132: PORTAbits.RA3 = 1;
  1372  00185E  8680               	bsf	3968,3,c	;volatile
  1373  001860  0012               	return		;funcret
  1374  001862                     __end_of_initialize:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           prodh	equ	0xFF4
  1381                           prodl	equ	0xFF3
  1382                           intcon	equ	0xFF2
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           indf2	equ	0xFDF
  1386                           fsr2h	equ	0xFDA
  1387                           fsr2l	equ	0xFD9
  1388                           status	equ	0xFD8
  1389                           
  1390 ;; *************** function _SPIInit *****************
  1391 ;; Defined at:
  1392 ;;		line 16 in file "SPISlave.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;		None               void
  1399 ;; Registers used:
  1400 ;;		wreg, status,2, status,0, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;Total ram usage:        0 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    7
  1413 ;; This function calls:
  1414 ;;		_OpenSPI1
  1415 ;; This function is called by:
  1416 ;;		_initialize
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text2
  1421  0018EE                     __ptext2:
  1422                           	opt stack 0
  1423  0018EE                     _SPIInit:
  1424                           	opt stack 22
  1425                           
  1426                           ;SPISlave.c: 18: TRISCbits.RC6 = 0;
  1427                           
  1428                           ;incstack = 0
  1429  0018EE  9C94               	bcf	3988,6,c	;volatile
  1430                           
  1431                           ;SPISlave.c: 19: PORTCbits.RC6 = 1;
  1432  0018F0  8C82               	bsf	3970,6,c	;volatile
  1433                           
  1434                           ;SPISlave.c: 20: TRISDbits.RD7 = 1;
  1435  0018F2  8E95               	bsf	3989,7,c	;volatile
  1436                           
  1437                           ;SPISlave.c: 21: OpenSPI1(0b00000100, 0b00000000, 0b00000000);
  1438  0018F4  0E00               	movlw	0
  1439  0018F6  0100               	movlb	0	; () banked
  1440  0018F8  6F60               	movwf	OpenSPI1@bus_mode& (0+255),b
  1441  0018FA  0E00               	movlw	0
  1442  0018FC  0100               	movlb	0	; () banked
  1443  0018FE  6F61               	movwf	OpenSPI1@smp_phase& (0+255),b
  1444  001900  0E04               	movlw	4
  1445  001902  ECEC  F009         	call	_OpenSPI1
  1446                           
  1447                           ;SPISlave.c: 22: PIE1bits.SSP1IE = 1;
  1448  001906  869D               	bsf	3997,3,c	;volatile
  1449                           
  1450                           ;SPISlave.c: 23: IPR1bits.SSP1IP = 0;
  1451  001908  969F               	bcf	3999,3,c	;volatile
  1452  00190A  0012               	return		;funcret
  1453  00190C                     __end_of_SPIInit:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           prodh	equ	0xFF4
  1460                           prodl	equ	0xFF3
  1461                           intcon	equ	0xFF2
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           indf2	equ	0xFDF
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _OpenSPI1 *****************
  1470 ;; Defined at:
  1471 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/SPI/spi1open.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  sync_mode       1    wreg     unsigned char 
  1474 ;;  bus_mode        1    0[BANK0 ] unsigned char 
  1475 ;;  smp_phase       1    1[BANK0 ] unsigned char 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  sync_mode       1    2[BANK0 ] unsigned char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;		None               void
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;Total ram usage:        3 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    6
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_SPIInit
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text3
  1502  0013D8                     __ptext3:
  1503                           	opt stack 0
  1504  0013D8                     _OpenSPI1:
  1505                           	opt stack 22
  1506                           
  1507                           ;incstack = 0
  1508                           ;OpenSPI1@sync_mode stored from wreg
  1509  0013D8  0100               	movlb	0	; () banked
  1510  0013DA  6F62               	movwf	OpenSPI1@sync_mode& (0+255),b
  1511                           
  1512                           ; BSR set to: 0
  1513  0013DC  0E3F               	movlw	63
  1514  0013DE  16C7               	andwf	4039,f,c	;volatile
  1515                           
  1516                           ; BSR set to: 0
  1517  0013E0  0E00               	movlw	0
  1518  0013E2  6EC6               	movwf	4038,c	;volatile
  1519                           
  1520                           ; BSR set to: 0
  1521  0013E4  0100               	movlb	0	; () banked
  1522  0013E6  5162               	movf	OpenSPI1@sync_mode& (0+255),w,b
  1523  0013E8  12C6               	iorwf	4038,f,c	;volatile
  1524                           
  1525                           ; BSR set to: 0
  1526  0013EA  0100               	movlb	0	; () banked
  1527  0013EC  5161               	movf	OpenSPI1@smp_phase& (0+255),w,b
  1528  0013EE  12C7               	iorwf	4039,f,c	;volatile
  1529  0013F0  D005               	goto	l3254
  1530  0013F2                     l593:
  1531                           
  1532                           ; BSR set to: 0
  1533  0013F2  8CC7               	bsf	4039,6,c	;volatile
  1534  0013F4  D014               	goto	l3258
  1535  0013F6                     l595:
  1536                           
  1537                           ; BSR set to: 0
  1538  0013F6  8CC7               	bsf	4039,6,c	;volatile
  1539  0013F8                     l596:
  1540                           
  1541                           ; BSR set to: 0
  1542  0013F8  88C6               	bsf	4038,4,c	;volatile
  1543                           
  1544                           ; BSR set to: 0
  1545                           
  1546                           ; BSR set to: 0
  1547  0013FA  D011               	goto	l3258
  1548  0013FC                     l3254:
  1549                           
  1550                           ; BSR set to: 0
  1551  0013FC  0100               	movlb	0	; () banked
  1552  0013FE  5160               	movf	OpenSPI1@bus_mode& (0+255),w,b
  1553                           
  1554                           ; Switch size 1, requested type "space"
  1555                           ; Number of cases is 3, Range of values is 0 to 3
  1556                           ; switch strategies available:
  1557                           ; Name         Instructions Cycles
  1558                           ; simple_byte           10     6 (average)
  1559                           ;	Chosen strategy is simple_byte
  1560  001400  0A00               	xorlw	0	; case 0
  1561  001402  B4D8               	btfsc	status,2,c
  1562  001404  D7F6               	goto	l593
  1563  001406  0A02               	xorlw	2	; case 2
  1564  001408  B4D8               	btfsc	status,2,c
  1565  00140A  D7F5               	goto	l595
  1566  00140C  0A01               	xorlw	1	; case 3
  1567  00140E  B4D8               	btfsc	status,2,c
  1568  001410  D7F3               	goto	l596
  1569                           
  1570                           ; BSR set to: 0
  1571  001412  D005               	goto	l3258
  1572  001414                     l599:
  1573                           
  1574                           ; BSR set to: 0
  1575  001414  8E97               	bsf	3991,7,c	;volatile
  1576  001416                     l601:
  1577                           
  1578                           ; BSR set to: 0
  1579  001416  8694               	bsf	3988,3,c	;volatile
  1580  001418  D00B               	goto	l600
  1581  00141A                     l602:
  1582                           
  1583                           ; BSR set to: 0
  1584  00141A  9694               	bcf	3988,3,c	;volatile
  1585                           
  1586                           ; BSR set to: 0
  1587  00141C  D009               	goto	l600
  1588  00141E                     l3258:
  1589                           
  1590                           ; BSR set to: 0
  1591  00141E  0100               	movlb	0	; () banked
  1592  001420  5162               	movf	OpenSPI1@sync_mode& (0+255),w,b
  1593                           
  1594                           ; Switch size 1, requested type "space"
  1595                           ; Number of cases is 2, Range of values is 4 to 5
  1596                           ; switch strategies available:
  1597                           ; Name         Instructions Cycles
  1598                           ; simple_byte            7     4 (average)
  1599                           ;	Chosen strategy is simple_byte
  1600  001422  0A04               	xorlw	4	; case 4
  1601  001424  B4D8               	btfsc	status,2,c
  1602  001426  D7F6               	goto	l599
  1603  001428  0A01               	xorlw	1	; case 5
  1604  00142A  B4D8               	btfsc	status,2,c
  1605  00142C  D7F4               	goto	l601
  1606  00142E  D7F5               	goto	l602
  1607  001430                     l600:
  1608                           
  1609                           ; BSR set to: 0
  1610  001430  8894               	bsf	3988,4,c	;volatile
  1611  001432  9A94               	bcf	3988,5,c	;volatile
  1612                           
  1613                           ; BSR set to: 0
  1614  001434  8AC6               	bsf	4038,5,c	;volatile
  1615                           
  1616                           ; BSR set to: 0
  1617  001436  0012               	return		;funcret
  1618  001438                     __end_of_OpenSPI1:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           prodh	equ	0xFF4
  1625                           prodl	equ	0xFF3
  1626                           intcon	equ	0xFF2
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           indf2	equ	0xFDF
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _RTDInit *****************
  1635 ;; Defined at:
  1636 ;;		line 3 in file "ResolverToDigital.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;		None               void
  1643 ;; Registers used:
  1644 ;;		wreg, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;Total ram usage:        0 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    7
  1657 ;; This function calls:
  1658 ;;		_Delay10TCYx
  1659 ;;		_Delay1KTCYx
  1660 ;;		_Delay1TCYx
  1661 ;; This function is called by:
  1662 ;;		_initialize
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text4
  1667  00172E                     __ptext4:
  1668                           	opt stack 0
  1669  00172E                     _RTDInit:
  1670                           	opt stack 22
  1671                           
  1672                           ;ResolverToDigital.c: 5: TRISD = 0xFF;
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;incstack = 0
  1676  00172E  6895               	setf	3989,c	;volatile
  1677                           
  1678                           ;ResolverToDigital.c: 6: TRISH = 0xFF;
  1679  001730  6899               	setf	3993,c	;volatile
  1680                           
  1681                           ;ResolverToDigital.c: 7: TRISEbits.RE0 = 0;
  1682  001732  9096               	bcf	3990,0,c	;volatile
  1683                           
  1684                           ;ResolverToDigital.c: 8: TRISEbits.RE1 = 0;
  1685  001734  9296               	bcf	3990,1,c	;volatile
  1686                           
  1687                           ;ResolverToDigital.c: 9: TRISEbits.RE2 = 0;
  1688  001736  9496               	bcf	3990,2,c	;volatile
  1689                           
  1690                           ;ResolverToDigital.c: 10: TRISJbits.RJ0 = 0;
  1691  001738  909A               	bcf	3994,0,c	;volatile
  1692                           
  1693                           ;ResolverToDigital.c: 11: TRISEbits.RE5 = 1;
  1694  00173A  8A96               	bsf	3990,5,c	;volatile
  1695                           
  1696                           ;ResolverToDigital.c: 12: TRISEbits.RE6 = 1;
  1697  00173C  8C96               	bsf	3990,6,c	;volatile
  1698                           
  1699                           ;ResolverToDigital.c: 13: TRISEbits.RE7 = 1;
  1700  00173E  8E96               	bsf	3990,7,c	;volatile
  1701                           
  1702                           ;ResolverToDigital.c: 21: PORTJbits.RJ0 = 0;
  1703  001740  9088               	bcf	3976,0,c	;volatile
  1704                           
  1705                           ;ResolverToDigital.c: 22: Delay10TCYx(10);
  1706  001742  0E0A               	movlw	10
  1707  001744  ECAC  F00C         	call	_Delay10TCYx
  1708                           
  1709                           ;ResolverToDigital.c: 23: PORTJbits.RJ0 = 1;
  1710  001748  8088               	bsf	3976,0,c	;volatile
  1711                           
  1712                           ;ResolverToDigital.c: 24: Delay1KTCYx(20);
  1713  00174A  0E14               	movlw	20
  1714  00174C  ECA1  F00C         	call	_Delay1KTCYx
  1715                           
  1716                           ;ResolverToDigital.c: 25: PORTEbits.RE0 = 0;
  1717  001750  9084               	bcf	3972,0,c	;volatile
  1718                           
  1719                           ;ResolverToDigital.c: 26: Delay1TCYx(1);
  1720  001752  0E01               	movlw	1
  1721  001754  ECD4  F00C         	call	_Delay1TCYx
  1722                           
  1723                           ;ResolverToDigital.c: 27: PORTEbits.RE0 = 1;
  1724  001758  8084               	bsf	3972,0,c	;volatile
  1725                           
  1726                           ;ResolverToDigital.c: 29: PORTEbits.RE2 = 0;
  1727  00175A  9484               	bcf	3972,2,c	;volatile
  1728  00175C  0012               	return		;funcret
  1729  00175E                     __end_of_RTDInit:
  1730                           	opt stack 0
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           prodh	equ	0xFF4
  1736                           prodl	equ	0xFF3
  1737                           intcon	equ	0xFF2
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           indf2	equ	0xFDF
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _Delay1TCYx *****************
  1746 ;; Defined at:
  1747 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1tcyx.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  unit            1    wreg     unsigned char 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  unit            1    0[BANK0 ] unsigned char 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1765 ;;Total ram usage:        1 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    6
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_RTDInit
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text5
  1776  0019A8                     __ptext5:
  1777                           	opt stack 0
  1778  0019A8                     _Delay1TCYx:
  1779                           	opt stack 22
  1780                           
  1781                           ;incstack = 0
  1782                           ;Delay1TCYx@unit stored from wreg
  1783  0019A8  0100               	movlb	0	; () banked
  1784  0019AA  6F60               	movwf	Delay1TCYx@unit& (0+255),b
  1785  0019AC                     l847:
  1786                           
  1787                           ; BSR set to: 0
  1788  0019AC  F000               	nop	
  1789  0019AE  0100               	movlb	0	; () banked
  1790  0019B0  2F60               	decfsz	Delay1TCYx@unit& (0+255),f,b
  1791  0019B2  D7FC               	goto	l847
  1792  0019B4  D000               	goto	l849
  1793  0019B6                     l849:
  1794                           
  1795                           ; BSR set to: 0
  1796  0019B6  0012               	return		;funcret
  1797  0019B8                     __end_of_Delay1TCYx:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf2	equ	0xFDF
  1809                           fsr2h	equ	0xFDA
  1810                           fsr2l	equ	0xFD9
  1811                           status	equ	0xFD8
  1812                           
  1813 ;; *************** function _Delay1KTCYx *****************
  1814 ;; Defined at:
  1815 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d1ktcyx.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  unit            1    wreg     unsigned char 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  unit            1    0[BANK0 ] unsigned char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;		None               void
  1822 ;; Registers used:
  1823 ;;		wreg
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;Total ram usage:        1 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    6
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_RTDInit
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text6
  1844  001942                     __ptext6:
  1845                           	opt stack 0
  1846  001942                     _Delay1KTCYx:
  1847                           	opt stack 22
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;incstack = 0
  1851                           ;Delay1KTCYx@unit stored from wreg
  1852  001942  0100               	movlb	0	; () banked
  1853  001944  6F60               	movwf	Delay1KTCYx@unit& (0+255),b
  1854  001946                     
  1855                           ; BSR set to: 0
  1856  001946  0EFA               	movlw	250
  1857  001948                     u3657:
  1858  001948  F000               	nop	
  1859  00194A  2EE8               	decfsz	wreg,f,c
  1860  00194C  D7FD               	goto	u3657
  1861  00194E  0100               	movlb	0	; () banked
  1862  001950  2F60               	decfsz	Delay1KTCYx@unit& (0+255),f,b
  1863  001952  D7F9               	goto	l3238
  1864  001954  D000               	goto	l842
  1865  001956                     l842:
  1866                           
  1867                           ; BSR set to: 0
  1868  001956  0012               	return		;funcret
  1869  001958                     __end_of_Delay1KTCYx:
  1870                           	opt stack 0
  1871                           tblptru	equ	0xFF8
  1872                           tblptrh	equ	0xFF7
  1873                           tblptrl	equ	0xFF6
  1874                           tablat	equ	0xFF5
  1875                           prodh	equ	0xFF4
  1876                           prodl	equ	0xFF3
  1877                           intcon	equ	0xFF2
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           indf2	equ	0xFDF
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _PIDInit *****************
  1886 ;; Defined at:
  1887 ;;		line 18 in file "PID.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;		None               void
  1894 ;; Registers used:
  1895 ;;		wreg, status,2
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;Total ram usage:        0 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    6
  1908 ;; This function calls:
  1909 ;;		Nothing
  1910 ;; This function is called by:
  1911 ;;		_initialize
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text7
  1916  001530                     __ptext7:
  1917                           	opt stack 0
  1918  001530                     _PIDInit:
  1919                           	opt stack 23
  1920                           
  1921                           ;PID.c: 20: error = 0;
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;incstack = 0
  1925  001530  0E00               	movlw	0
  1926  001532  0100               	movlb	0	; () banked
  1927  001534  6FC1               	movwf	_error& (0+255),b
  1928  001536  0E00               	movlw	0
  1929  001538  0100               	movlb	0	; () banked
  1930  00153A  6FC2               	movwf	(_error+1)& (0+255),b
  1931  00153C  0E00               	movlw	0
  1932  00153E  0100               	movlb	0	; () banked
  1933  001540  6FC3               	movwf	(_error+2)& (0+255),b
  1934                           
  1935                           ;PID.c: 21: prevErr = 0;
  1936  001542  0E00               	movlw	0
  1937  001544  0100               	movlb	0	; () banked
  1938  001546  6FC7               	movwf	_prevErr& (0+255),b
  1939  001548  0E00               	movlw	0
  1940  00154A  0100               	movlb	0	; () banked
  1941  00154C  6FC8               	movwf	(_prevErr+1)& (0+255),b
  1942  00154E  0E00               	movlw	0
  1943  001550  0100               	movlb	0	; () banked
  1944  001552  6FC9               	movwf	(_prevErr+2)& (0+255),b
  1945                           
  1946                           ;PID.c: 22: intErr = 0;
  1947  001554  0E00               	movlw	0
  1948  001556  0100               	movlb	0	; () banked
  1949  001558  6FC4               	movwf	_intErr& (0+255),b
  1950  00155A  0E00               	movlw	0
  1951  00155C  0100               	movlb	0	; () banked
  1952  00155E  6FC5               	movwf	(_intErr+1)& (0+255),b
  1953  001560  0E00               	movlw	0
  1954  001562  0100               	movlb	0	; () banked
  1955  001564  6FC6               	movwf	(_intErr+2)& (0+255),b
  1956                           
  1957                           ;PID.c: 24: T0CON = 0x04;
  1958  001566  0E04               	movlw	4
  1959  001568  6ED5               	movwf	4053,c	;volatile
  1960                           
  1961                           ;PID.c: 25: TMR0H = 0xDB;
  1962  00156A  0EDB               	movlw	219
  1963  00156C  6ED7               	movwf	4055,c	;volatile
  1964                           
  1965                           ;PID.c: 26: TMR0L = 0x60;
  1966  00156E  0E60               	movlw	96
  1967  001570  6ED6               	movwf	4054,c	;volatile
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;PID.c: 27: INTCON2bits.TMR0IP = 1;
  1971  001572  84F1               	bsf	intcon2,2,c	;volatile
  1972                           
  1973                           ; BSR set to: 0
  1974  001574  0012               	return		;funcret
  1975  001576                     __end_of_PIDInit:
  1976                           	opt stack 0
  1977                           tblptru	equ	0xFF8
  1978                           tblptrh	equ	0xFF7
  1979                           tblptrl	equ	0xFF6
  1980                           tablat	equ	0xFF5
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           intcon	equ	0xFF2
  1984                           intcon2	equ	0xFF1
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           indf2	equ	0xFDF
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _MotorDriverInit *****************
  1993 ;; Defined at:
  1994 ;;		line 7 in file "MotorControl.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;		None               void
  2001 ;; Registers used:
  2002 ;;		wreg, status,2
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;Total ram usage:        0 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    6
  2015 ;; This function calls:
  2016 ;;		Nothing
  2017 ;; This function is called by:
  2018 ;;		_initialize
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text8
  2023  001862                     __ptext8:
  2024                           	opt stack 0
  2025  001862                     _MotorDriverInit:
  2026                           	opt stack 23
  2027                           
  2028                           ;MotorControl.c: 9: TRISGbits.RG0 = 0;
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;incstack = 0
  2032  001862  9098               	bcf	3992,0,c	;volatile
  2033                           
  2034                           ;MotorControl.c: 10: TRISEbits.RE4 = 0;
  2035  001864  9896               	bcf	3990,4,c	;volatile
  2036                           
  2037                           ;MotorControl.c: 11: TRISEbits.RE3 = 0;
  2038  001866  9696               	bcf	3990,3,c	;volatile
  2039                           
  2040                           ;MotorControl.c: 12: TRISGbits.RG3 = 0;
  2041  001868  9698               	bcf	3992,3,c	;volatile
  2042                           
  2043                           ;MotorControl.c: 14: TRISBbits.RB0 = 1;
  2044  00186A  8093               	bsf	3987,0,c	;volatile
  2045                           
  2046                           ;MotorControl.c: 16: TRISAbits.RA4 = 0;
  2047  00186C  9892               	bcf	3986,4,c	;volatile
  2048                           
  2049                           ;MotorControl.c: 18: CCPR3L = 0x00;
  2050  00186E  0E00               	movlw	0
  2051  001870  6EB8               	movwf	4024,c	;volatile
  2052                           
  2053                           ;MotorControl.c: 19: CCP3CONbits.DC3B0 = 0;
  2054  001872  98B7               	bcf	4023,4,c	;volatile
  2055                           
  2056                           ;MotorControl.c: 20: CCP3CONbits.DC3B1 = 0;
  2057  001874  9AB7               	bcf	4023,5,c	;volatile
  2058                           
  2059                           ;MotorControl.c: 21: CCP3CON = 0x4C;
  2060  001876  0E4C               	movlw	76
  2061  001878  6EB7               	movwf	4023,c	;volatile
  2062                           
  2063                           ;MotorControl.c: 22: PR2 = 0xFF;
  2064  00187A  68CB               	setf	4043,c	;volatile
  2065                           
  2066                           ;MotorControl.c: 23: T3CON = 0x00;
  2067  00187C  0E00               	movlw	0
  2068  00187E  6EB1               	movwf	4017,c	;volatile
  2069                           
  2070                           ;MotorControl.c: 24: T2CON = 0x04;
  2071  001880  0E04               	movlw	4
  2072  001882  6ECA               	movwf	4042,c	;volatile
  2073  001884  0012               	return		;funcret
  2074  001886                     __end_of_MotorDriverInit:
  2075                           	opt stack 0
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           prodh	equ	0xFF4
  2081                           prodl	equ	0xFF3
  2082                           intcon	equ	0xFF2
  2083                           intcon2	equ	0xFF1
  2084                           postinc0	equ	0xFEE
  2085                           wreg	equ	0xFE8
  2086                           indf2	equ	0xFDF
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _JoystickInit *****************
  2092 ;; Defined at:
  2093 ;;		line 6 in file "Joystick.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;		None               void
  2100 ;; Registers used:
  2101 ;;		wreg, status,2, status,0
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;Total ram usage:        0 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    6
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_initialize
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text9
  2122  00178E                     __ptext9:
  2123                           	opt stack 0
  2124  00178E                     _JoystickInit:
  2125                           	opt stack 23
  2126                           
  2127                           ;Joystick.c: 8: TRISAbits.RA2 = 0;
  2128                           
  2129                           ;incstack = 0
  2130  00178E  9492               	bcf	3986,2,c	;volatile
  2131                           
  2132                           ;Joystick.c: 9: TRISBbits.RB1 = 1;
  2133  001790  8293               	bsf	3987,1,c	;volatile
  2134                           
  2135                           ;Joystick.c: 10: if (PORTBbits.RB1 == 1)
  2136  001792  A281               	btfss	3969,1,c	;volatile
  2137  001794  D003               	goto	l31
  2138                           
  2139                           ;Joystick.c: 11: {
  2140                           ;Joystick.c: 12: PORTAbits.RA2 = 1;
  2141  001796  8480               	bsf	3968,2,c	;volatile
  2142                           
  2143                           ;Joystick.c: 13: JSEnableFlag = 1;
  2144  001798  0E01               	movlw	1
  2145  00179A  D004               	goto	L1
  2146  00179C                     l31:
  2147                           
  2148                           ;Joystick.c: 15: else if (PORTBbits.RB1 == 0)
  2149  00179C  B281               	btfsc	3969,1,c	;volatile
  2150  00179E  D005               	goto	l3360
  2151                           
  2152                           ;Joystick.c: 16: {
  2153                           ;Joystick.c: 17: PORTAbits.RA2 = 0;
  2154  0017A0  9480               	bcf	3968,2,c	;volatile
  2155                           
  2156                           ;Joystick.c: 18: JSEnableFlag = 0;
  2157  0017A2  0E00               	movlw	0
  2158  0017A4                     L1:
  2159  0017A4  0100               	movlb	0	; () banked
  2160  0017A6  6FCD               	movwf	_JSEnableFlag& (0+255),b
  2161                           
  2162                           ; BSR set to: 0
  2163  0017A8  D000               	goto	l3360
  2164  0017AA                     l3360:
  2165                           
  2166                           ;Joystick.c: 19: }
  2167                           ;Joystick.c: 21: ADCON0bits.ADON = 1;
  2168  0017AA  80C2               	bsf	4034,0,c	;volatile
  2169                           
  2170                           ;Joystick.c: 22: ADCON0 = ADCON0 & 0x01;
  2171  0017AC  50C2               	movf	4034,w,c	;volatile
  2172  0017AE  0B01               	andlw	1
  2173  0017B0  6EC2               	movwf	4034,c	;volatile
  2174                           
  2175                           ;Joystick.c: 23: ADCON1 = 0x0D;
  2176  0017B2  0E0D               	movlw	13
  2177  0017B4  6EC1               	movwf	4033,c	;volatile
  2178                           
  2179                           ;Joystick.c: 24: ADCON2 = 0xB4;
  2180  0017B6  0EB4               	movlw	180
  2181  0017B8  6EC0               	movwf	4032,c	;volatile
  2182  0017BA  0012               	return		;funcret
  2183  0017BC                     __end_of_JoystickInit:
  2184                           	opt stack 0
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           intcon	equ	0xFF2
  2192                           intcon2	equ	0xFF1
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           indf2	equ	0xFDF
  2196                           fsr2h	equ	0xFDA
  2197                           fsr2l	equ	0xFD9
  2198                           status	equ	0xFD8
  2199                           
  2200 ;; *************** function _InitializeInterrupts *****************
  2201 ;; Defined at:
  2202 ;;		line 201 in file "RTDuC.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;		None               void
  2209 ;; Registers used:
  2210 ;;		None
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;Total ram usage:        0 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    6
  2223 ;; This function calls:
  2224 ;;		Nothing
  2225 ;; This function is called by:
  2226 ;;		_initialize
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text10
  2231  0019C8                     __ptext10:
  2232                           	opt stack 0
  2233  0019C8                     _InitializeInterrupts:
  2234                           	opt stack 23
  2235                           
  2236                           ;RTDuC.c: 203: INTCONbits.GIE = 1;
  2237                           
  2238                           ;incstack = 0
  2239  0019C8  8EF2               	bsf	intcon,7,c	;volatile
  2240                           
  2241                           ;RTDuC.c: 204: INTCONbits.PEIE = 1;
  2242  0019CA  8CF2               	bsf	intcon,6,c	;volatile
  2243                           
  2244                           ;RTDuC.c: 205: RCONbits.IPEN = 1;
  2245  0019CC  8ED0               	bsf	4048,7,c	;volatile
  2246                           
  2247                           ;RTDuC.c: 207: PIE2bits.OSCFIE = 1;
  2248  0019CE  8EA0               	bsf	4000,7,c	;volatile
  2249                           
  2250                           ;RTDuC.c: 208: IPR2bits.OSCFIP = 1;
  2251  0019D0  8EA2               	bsf	4002,7,c	;volatile
  2252  0019D2  0012               	return		;funcret
  2253  0019D4                     __end_of_InitializeInterrupts:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodh	equ	0xFF4
  2260                           prodl	equ	0xFF3
  2261                           intcon	equ	0xFF2
  2262                           intcon2	equ	0xFF1
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           indf2	equ	0xFDF
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _EEPROMInit *****************
  2271 ;; Defined at:
  2272 ;;		line 13 in file "EEPROM.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;		None               void
  2279 ;; Registers used:
  2280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;Total ram usage:        0 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    9
  2293 ;; This function calls:
  2294 ;;		_EEBootUp
  2295 ;; This function is called by:
  2296 ;;		_initialize
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text11
  2301  00196E                     __ptext11:
  2302                           	opt stack 0
  2303  00196E                     _EEPROMInit:
  2304                           	opt stack 20
  2305                           
  2306                           ;EEPROM.c: 15: EECON1bits.EEPGD = 0;
  2307                           
  2308                           ;incstack = 0
  2309  00196E  9EA6               	bcf	4006,7,c	;volatile
  2310                           
  2311                           ;EEPROM.c: 16: EECON1bits.CFGS = 0;
  2312  001970  9CA6               	bcf	4006,6,c	;volatile
  2313                           
  2314                           ;EEPROM.c: 17: EECON1bits.WREN = 1;
  2315  001972  84A6               	bsf	4006,2,c	;volatile
  2316                           
  2317                           ;EEPROM.c: 19: EEBootUp();
  2318  001974  EC3A  F009         	call	_EEBootUp	;wreg free
  2319                           
  2320                           ;EEPROM.c: 21: HLVDCON = 0x3D;
  2321  001978  0E3D               	movlw	61
  2322  00197A  6ED2               	movwf	4050,c	;volatile
  2323                           
  2324                           ;EEPROM.c: 22: PIE2bits.HLVDIE = 1;
  2325  00197C  84A0               	bsf	4000,2,c	;volatile
  2326                           
  2327                           ;EEPROM.c: 23: IPR2bits.HLVDIP = 1;
  2328  00197E  84A2               	bsf	4002,2,c	;volatile
  2329  001980  0012               	return		;funcret
  2330  001982                     __end_of_EEPROMInit:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodh	equ	0xFF4
  2337                           prodl	equ	0xFF3
  2338                           intcon	equ	0xFF2
  2339                           intcon2	equ	0xFF1
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           indf2	equ	0xFDF
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function _EEBootUp *****************
  2348 ;; Defined at:
  2349 ;;		line 27 in file "EEPROM.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;		None
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;Total ram usage:        2 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    8
  2370 ;; This function calls:
  2371 ;;		_EEReadChar
  2372 ;;		_EEReadDouble
  2373 ;; This function is called by:
  2374 ;;		_EEPROMInit
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text12
  2379  001274                     __ptext12:
  2380                           	opt stack 0
  2381  001274                     _EEBootUp:
  2382                           	opt stack 20
  2383                           
  2384                           ;EEPROM.c: 29: if (EEReadChar(0x16))
  2385                           
  2386                           ;incstack = 0
  2387  001274  0E16               	movlw	22
  2388  001276  EC0A  F00C         	call	_EEReadChar
  2389  00127A  0900               	iorlw	0
  2390  00127C  B4D8               	btfsc	status,2,c
  2391  00127E  D03D               	goto	l340
  2392                           
  2393                           ;EEPROM.c: 30: {
  2394                           ;EEPROM.c: 31: SetAngle = EEReadDouble(0x00);
  2395  001280  0E00               	movlw	0
  2396  001282  ECB7  F009         	call	_EEReadDouble
  2397  001286  C066  F032         	movff	?_EEReadDouble,_SetAngle
  2398  00128A  C067  F033         	movff	?_EEReadDouble+1,_SetAngle+1
  2399  00128E  C068  F034         	movff	?_EEReadDouble+2,_SetAngle+2
  2400                           
  2401                           ;EEPROM.c: 32: Kp = EEReadDouble(0x03);
  2402  001292  0E03               	movlw	3
  2403  001294  ECB7  F009         	call	_EEReadDouble
  2404  001298  C066  F0BE         	movff	?_EEReadDouble,_Kp
  2405  00129C  C067  F0BF         	movff	?_EEReadDouble+1,_Kp+1
  2406  0012A0  C068  F0C0         	movff	?_EEReadDouble+2,_Kp+2
  2407                           
  2408                           ;EEPROM.c: 33: Ki = EEReadDouble(0x06);
  2409  0012A4  0E06               	movlw	6
  2410  0012A6  ECB7  F009         	call	_EEReadDouble
  2411  0012AA  C066  F0BB         	movff	?_EEReadDouble,_Ki
  2412  0012AE  C067  F0BC         	movff	?_EEReadDouble+1,_Ki+1
  2413  0012B2  C068  F0BD         	movff	?_EEReadDouble+2,_Ki+2
  2414                           
  2415                           ;EEPROM.c: 34: Kd = EEReadDouble(0x09);
  2416  0012B6  0E09               	movlw	9
  2417  0012B8  ECB7  F009         	call	_EEReadDouble
  2418  0012BC  C066  F0B8         	movff	?_EEReadDouble,_Kd
  2419  0012C0  C067  F0B9         	movff	?_EEReadDouble+1,_Kd+1
  2420  0012C4  C068  F0BA         	movff	?_EEReadDouble+2,_Kd+2
  2421                           
  2422                           ;EEPROM.c: 35: PIDEnableFlag = EEReadChar(0x15);
  2423  0012C8  0E15               	movlw	21
  2424  0012CA  EC0A  F00C         	call	_EEReadChar
  2425  0012CE  0100               	movlb	0	; () banked
  2426  0012D0  6FCE               	movwf	_PIDEnableFlag& (0+255),b
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;EEPROM.c: 36: if((PIDEnableFlag | 0x01) == 0x01)
  2430  0012D2  0100               	movlb	0	; () banked
  2431  0012D4  51CE               	movf	_PIDEnableFlag& (0+255),w,b
  2432  0012D6  0100               	movlb	0	; () banked
  2433  0012D8  6F6B               	movwf	??_EEBootUp& (0+255),b
  2434  0012DA  6B6C               	clrf	(??_EEBootUp+1)& (0+255),b
  2435  0012DC  0E01               	movlw	1
  2436  0012DE  0100               	movlb	0	; () banked
  2437  0012E0  136B               	iorwf	??_EEBootUp& (0+255),f,b
  2438  0012E2  0E00               	movlw	0
  2439  0012E4  136C               	iorwf	(??_EEBootUp+1)& (0+255),f,b
  2440  0012E6  0100               	movlb	0	; () banked
  2441  0012E8  056B               	decf	??_EEBootUp& (0+255),w,b
  2442  0012EA  0100               	movlb	0	; () banked
  2443  0012EC  116C               	iorwf	(??_EEBootUp+1)& (0+255),w,b
  2444  0012EE  A4D8               	btfss	status,2,c
  2445  0012F0  D004               	goto	l340
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;EEPROM.c: 37: {
  2449                           ;EEPROM.c: 38: PIDEnableFlag = 0x03;
  2450  0012F2  0E03               	movlw	3
  2451  0012F4  0100               	movlb	0	; () banked
  2452  0012F6  6FCE               	movwf	_PIDEnableFlag& (0+255),b
  2453                           
  2454                           ; BSR set to: 0
  2455  0012F8  D000               	goto	l340
  2456  0012FA                     l340:
  2457  0012FA  0012               	return		;funcret
  2458  0012FC                     __end_of_EEBootUp:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           intcon2	equ	0xFF1
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           indf2	equ	0xFDF
  2471                           fsr2h	equ	0xFDA
  2472                           fsr2l	equ	0xFD9
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _EEReadDouble *****************
  2476 ;; Defined at:
  2477 ;;		line 100 in file "EEPROM.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  location        1    wreg     unsigned char 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  location        1    9[BANK0 ] unsigned char 
  2482 ;;  x               1   10[BANK0 ] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  3    6[BANK0 ] unsigned char 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2492 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;Total ram usage:        5 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    7
  2499 ;; This function calls:
  2500 ;;		_Busy_eep
  2501 ;;		_EEReassembleDouble
  2502 ;;		_Read_b_eep
  2503 ;; This function is called by:
  2504 ;;		_EEBootUp
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text13
  2509  00136E                     __ptext13:
  2510                           	opt stack 0
  2511  00136E                     _EEReadDouble:
  2512                           	opt stack 20
  2513                           
  2514                           ;incstack = 0
  2515                           ;EEReadDouble@location stored from wreg
  2516  00136E  0100               	movlb	0	; () banked
  2517  001370  6F69               	movwf	EEReadDouble@location& (0+255),b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;EEPROM.c: 102: unsigned char x;
  2521                           ;EEPROM.c: 104: INTCON = INTCON & 0x3F;
  2522  001372  50F2               	movf	intcon,w,c	;volatile
  2523  001374  0B3F               	andlw	63
  2524  001376  6EF2               	movwf	intcon,c	;volatile
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;EEPROM.c: 106: for (x = 0; x < 3; x++)
  2528  001378  0E00               	movlw	0
  2529  00137A  0100               	movlb	0	; () banked
  2530  00137C  6F6A               	movwf	EEReadDouble@x& (0+255),b
  2531  00137E                     l3180:
  2532                           
  2533                           ; BSR set to: 0
  2534  00137E  0E02               	movlw	2
  2535  001380  0100               	movlb	0	; () banked
  2536  001382  656A               	cpfsgt	EEReadDouble@x& (0+255),b
  2537  001384  D001               	goto	l3184
  2538                           
  2539                           ; BSR set to: 0
  2540  001386  D01B               	goto	l3192
  2541  001388                     l3184:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;EEPROM.c: 107: {
  2545                           ;EEPROM.c: 108: DDouble[x] = Read_b_eep(location + x);
  2546  001388  0100               	movlb	0	; () banked
  2547  00138A  516A               	movf	EEReadDouble@x& (0+255),w,b
  2548  00138C  0D01               	mullw	1
  2549  00138E  0E2F               	movlw	low _DDouble
  2550  001390  24F3               	addwf	prodl,w,c
  2551  001392  6ED9               	movwf	fsr2l,c
  2552  001394  0E00               	movlw	high _DDouble
  2553  001396  20F4               	addwfc	prodh,w,c
  2554  001398  6EDA               	movwf	fsr2h,c
  2555  00139A  0100               	movlb	0	; () banked
  2556  00139C  5169               	movf	EEReadDouble@location& (0+255),w,b
  2557  00139E  0100               	movlb	0	; () banked
  2558  0013A0  256A               	addwf	EEReadDouble@x& (0+255),w,b
  2559  0013A2  0100               	movlb	0	; () banked
  2560  0013A4  6F60               	movwf	Read_b_eep@badd& (0+255),b
  2561  0013A6  0100               	movlb	0	; () banked
  2562  0013A8  6B61               	clrf	(Read_b_eep@badd+1)& (0+255),b
  2563  0013AA  0100               	movlb	0	; () banked
  2564  0013AC  3761               	rlcf	(Read_b_eep@badd+1)& (0+255),f,b
  2565  0013AE  EC86  F00C         	call	_Read_b_eep	;wreg free
  2566  0013B2  6EDF               	movwf	indf2,c
  2567                           
  2568                           ;EEPROM.c: 109: Busy_eep();
  2569  0013B4  ECEF  F00C         	call	_Busy_eep	;wreg free
  2570  0013B8  0100               	movlb	0	; () banked
  2571  0013BA  2B6A               	incf	EEReadDouble@x& (0+255),f,b
  2572  0013BC  D7E0               	goto	l3180
  2573  0013BE                     l3192:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;EEPROM.c: 110: }
  2577                           ;EEPROM.c: 112: INTCON = INTCON | 0xC0;
  2578  0013BE  50F2               	movf	intcon,w,c	;volatile
  2579  0013C0  09C0               	iorlw	192
  2580  0013C2  6EF2               	movwf	intcon,c	;volatile
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;EEPROM.c: 114: return EEReassembleDouble();
  2584  0013C4  ECBB  F00A         	call	_EEReassembleDouble	;wreg free
  2585  0013C8  C060  F066         	movff	?_EEReassembleDouble,?_EEReadDouble
  2586  0013CC  C061  F067         	movff	?_EEReassembleDouble+1,?_EEReadDouble+1
  2587  0013D0  C062  F068         	movff	?_EEReassembleDouble+2,?_EEReadDouble+2
  2588  0013D4  D000               	goto	l356
  2589  0013D6                     l356:
  2590  0013D6  0012               	return		;funcret
  2591  0013D8                     __end_of_EEReadDouble:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           intcon	equ	0xFF2
  2600                           intcon2	equ	0xFF1
  2601                           postinc0	equ	0xFEE
  2602                           wreg	equ	0xFE8
  2603                           indf2	equ	0xFDF
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _EEReassembleDouble *****************
  2609 ;; Defined at:
  2610 ;;		line 62 in file "EEPROM.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  dub             3    3[BANK0 ] unsigned char 
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  3    0[BANK0 ] unsigned char 
  2617 ;; Registers used:
  2618 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2624 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;Total ram usage:        6 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    6
  2631 ;; This function calls:
  2632 ;;		Nothing
  2633 ;; This function is called by:
  2634 ;;		_EEReadDouble
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text14
  2639  001576                     __ptext14:
  2640                           	opt stack 0
  2641  001576                     _EEReassembleDouble:
  2642                           	opt stack 20
  2643                           
  2644                           ;EEPROM.c: 64: double dub;
  2645                           ;EEPROM.c: 65: DoublePtr = (unsigned char*) &dub;
  2646                           
  2647                           ;incstack = 0
  2648  001576  0E63               	movlw	low EEReassembleDouble@dub
  2649  001578  6E35               	movwf	_DoublePtr,c
  2650  00157A  0E00               	movlw	high EEReassembleDouble@dub
  2651  00157C  6E36               	movwf	_DoublePtr+1,c
  2652                           
  2653                           ;EEPROM.c: 66: DoublePtr[0] = DDouble[0];
  2654  00157E  C035  FFD9         	movff	_DoublePtr,fsr2l
  2655  001582  C036  FFDA         	movff	_DoublePtr+1,fsr2h
  2656  001586  C02F  FFDF         	movff	_DDouble,indf2
  2657                           
  2658                           ;EEPROM.c: 67: DoublePtr[1] = DDouble[1];
  2659  00158A  EE20 F001          	lfsr	2,1
  2660  00158E  5035               	movf	_DoublePtr,w,c
  2661  001590  26D9               	addwf	fsr2l,f,c
  2662  001592  5036               	movf	_DoublePtr+1,w,c
  2663  001594  22DA               	addwfc	fsr2h,f,c
  2664  001596  C030  FFDF         	movff	_DDouble+1,indf2
  2665                           
  2666                           ;EEPROM.c: 68: DoublePtr[2] = DDouble[2];
  2667  00159A  EE20 F002          	lfsr	2,2
  2668  00159E  5035               	movf	_DoublePtr,w,c
  2669  0015A0  26D9               	addwf	fsr2l,f,c
  2670  0015A2  5036               	movf	_DoublePtr+1,w,c
  2671  0015A4  22DA               	addwfc	fsr2h,f,c
  2672  0015A6  C031  FFDF         	movff	_DDouble+2,indf2
  2673                           
  2674                           ;EEPROM.c: 69: return dub;
  2675  0015AA  C063  F060         	movff	EEReassembleDouble@dub,?_EEReassembleDouble
  2676  0015AE  C064  F061         	movff	EEReassembleDouble@dub+1,?_EEReassembleDouble+1
  2677  0015B2  C065  F062         	movff	EEReassembleDouble@dub+2,?_EEReassembleDouble+2
  2678  0015B6  D000               	goto	l346
  2679  0015B8                     l346:
  2680  0015B8  0012               	return		;funcret
  2681  0015BA                     __end_of_EEReassembleDouble:
  2682                           	opt stack 0
  2683                           tblptru	equ	0xFF8
  2684                           tblptrh	equ	0xFF7
  2685                           tblptrl	equ	0xFF6
  2686                           tablat	equ	0xFF5
  2687                           prodh	equ	0xFF4
  2688                           prodl	equ	0xFF3
  2689                           intcon	equ	0xFF2
  2690                           intcon2	equ	0xFF1
  2691                           postinc0	equ	0xFEE
  2692                           wreg	equ	0xFE8
  2693                           indf2	equ	0xFDF
  2694                           fsr2h	equ	0xFDA
  2695                           fsr2l	equ	0xFD9
  2696                           status	equ	0xFD8
  2697                           
  2698 ;; *************** function _Busy_eep *****************
  2699 ;; Defined at:
  2700 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;		None               void
  2707 ;; Registers used:
  2708 ;;		None
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    6
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_EEReadDouble
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text15
  2729  0019DE                     __ptext15:
  2730                           	opt stack 0
  2731  0019DE                     _Busy_eep:
  2732                           	opt stack 20
  2733                           
  2734                           ;incstack = 0
  2735  0019DE  D000               	goto	l543
  2736  0019E0                     l543:
  2737  0019E0  B2A6               	btfsc	4006,1,c	;volatile
  2738  0019E2  D7FE               	goto	l543
  2739  0019E4  0012               	return		;funcret
  2740  0019E6                     __end_of_Busy_eep:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           tblptrh	equ	0xFF7
  2744                           tblptrl	equ	0xFF6
  2745                           tablat	equ	0xFF5
  2746                           prodh	equ	0xFF4
  2747                           prodl	equ	0xFF3
  2748                           intcon	equ	0xFF2
  2749                           intcon2	equ	0xFF1
  2750                           postinc0	equ	0xFEE
  2751                           wreg	equ	0xFE8
  2752                           indf2	equ	0xFDF
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _EEReadChar *****************
  2758 ;; Defined at:
  2759 ;;		line 136 in file "EEPROM.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  location        1    wreg     unsigned char 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  location        1    2[BANK0 ] unsigned char 
  2764 ;;  ch              1    3[BANK0 ] unsigned char 
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      unsigned char 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;Total ram usage:        2 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    7
  2781 ;; This function calls:
  2782 ;;		_Read_b_eep
  2783 ;; This function is called by:
  2784 ;;		_EEBootUp
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text16
  2789  001814                     __ptext16:
  2790                           	opt stack 0
  2791  001814                     _EEReadChar:
  2792                           	opt stack 20
  2793                           
  2794                           ;incstack = 0
  2795                           ;EEReadChar@location stored from wreg
  2796  001814  0100               	movlb	0	; () banked
  2797  001816  6F62               	movwf	EEReadChar@location& (0+255),b
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;EEPROM.c: 138: unsigned char ch;
  2801                           ;EEPROM.c: 140: INTCON = INTCON & 0x3F;
  2802  001818  50F2               	movf	intcon,w,c	;volatile
  2803  00181A  0B3F               	andlw	63
  2804  00181C  6EF2               	movwf	intcon,c	;volatile
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;EEPROM.c: 142: ch = Read_b_eep(location);
  2808  00181E  C062  F060         	movff	EEReadChar@location,Read_b_eep@badd
  2809  001822  0100               	movlb	0	; () banked
  2810  001824  6B61               	clrf	(Read_b_eep@badd+1)& (0+255),b
  2811  001826  EC86  F00C         	call	_Read_b_eep	;wreg free
  2812  00182A  0100               	movlb	0	; () banked
  2813  00182C  6F63               	movwf	EEReadChar@ch& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;EEPROM.c: 144: INTCON = INTCON | 0xC0;
  2817  00182E  50F2               	movf	intcon,w,c	;volatile
  2818  001830  09C0               	iorlw	192
  2819  001832  6EF2               	movwf	intcon,c	;volatile
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;EEPROM.c: 146: return ch;
  2823  001834  0100               	movlb	0	; () banked
  2824  001836  5163               	movf	EEReadChar@ch& (0+255),w,b
  2825  001838  D000               	goto	l362
  2826  00183A                     l362:
  2827                           
  2828                           ; BSR set to: 0
  2829  00183A  0012               	return		;funcret
  2830  00183C                     __end_of_EEReadChar:
  2831                           	opt stack 0
  2832                           tblptru	equ	0xFF8
  2833                           tblptrh	equ	0xFF7
  2834                           tblptrl	equ	0xFF6
  2835                           tablat	equ	0xFF5
  2836                           prodh	equ	0xFF4
  2837                           prodl	equ	0xFF3
  2838                           intcon	equ	0xFF2
  2839                           intcon2	equ	0xFF1
  2840                           postinc0	equ	0xFEE
  2841                           wreg	equ	0xFE8
  2842                           indf2	equ	0xFDF
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _Read_b_eep *****************
  2848 ;; Defined at:
  2849 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/read_B.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  badd            2    0[BANK0 ] unsigned int 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      unsigned char 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, status,0
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2863 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;Total ram usage:        2 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    6
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_EEReadDouble
  2874 ;;		_EEReadChar
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text17
  2879  00190C                     __ptext17:
  2880                           	opt stack 0
  2881  00190C                     _Read_b_eep:
  2882                           	opt stack 20
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;incstack = 0
  2886  00190C  0100               	movlb	0	; () banked
  2887  00190E  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
  2888  001910  0B03               	andlw	3
  2889  001912  6EAA               	movwf	4010,c	;volatile
  2890                           
  2891                           ; BSR set to: 0
  2892  001914  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  2893                           
  2894                           ; BSR set to: 0
  2895  001918  9CA6               	bcf	4006,6,c	;volatile
  2896                           
  2897                           ; BSR set to: 0
  2898  00191A  9EA6               	bcf	4006,7,c	;volatile
  2899                           
  2900                           ; BSR set to: 0
  2901  00191C  80A6               	bsf	4006,0,c	;volatile
  2902                           
  2903                           ; BSR set to: 0
  2904  00191E  F000               	nop	
  2905  001920  F000               	nop	
  2906  001922  50A8               	movf	4008,w,c	;volatile
  2907  001924  D000               	goto	l559
  2908  001926                     l559:
  2909  001926  0012               	return		;funcret
  2910  001928                     __end_of_Read_b_eep:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           intcon	equ	0xFF2
  2919                           intcon2	equ	0xFF1
  2920                           postinc0	equ	0xFEE
  2921                           wreg	equ	0xFE8
  2922                           indf2	equ	0xFDF
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _calculatePID *****************
  2928 ;; Defined at:
  2929 ;;		line 30 in file "PID.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  angle           3   65[BANK0 ] unsigned char 
  2932 ;;  setpoint        3   68[BANK0 ] unsigned char 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  derErr          3   71[BANK0 ] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;		None               void
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2944 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;Total ram usage:       15 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    9
  2951 ;; This function calls:
  2952 ;;		___ftadd
  2953 ;;		___ftdiv
  2954 ;;		___ftge
  2955 ;;		___ftmul
  2956 ;;		___ftneg
  2957 ;;		___ftsub
  2958 ;;		___fttol
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text18
  2965  000392                     __ptext18:
  2966                           	opt stack 0
  2967  000392                     _calculatePID:
  2968                           	opt stack 21
  2969                           
  2970                           ;PID.c: 32: double derErr;
  2971                           ;PID.c: 33: if (PIDEnableFlag == 3)
  2972                           
  2973                           ;incstack = 0
  2974  000392  0E03               	movlw	3
  2975  000394  0100               	movlb	0	; () banked
  2976  000396  19CE               	xorwf	_PIDEnableFlag& (0+255),w,b
  2977  000398  A4D8               	btfss	status,2,c
  2978  00039A  D01F               	goto	l3670
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;PID.c: 34: {
  2982                           ;PID.c: 35: error = 0;
  2983  00039C  0E00               	movlw	0
  2984  00039E  0100               	movlb	0	; () banked
  2985  0003A0  6FC1               	movwf	_error& (0+255),b
  2986  0003A2  0E00               	movlw	0
  2987  0003A4  0100               	movlb	0	; () banked
  2988  0003A6  6FC2               	movwf	(_error+1)& (0+255),b
  2989  0003A8  0E00               	movlw	0
  2990  0003AA  0100               	movlb	0	; () banked
  2991  0003AC  6FC3               	movwf	(_error+2)& (0+255),b
  2992                           
  2993                           ;PID.c: 36: prevErr = 0;
  2994  0003AE  0E00               	movlw	0
  2995  0003B0  0100               	movlb	0	; () banked
  2996  0003B2  6FC7               	movwf	_prevErr& (0+255),b
  2997  0003B4  0E00               	movlw	0
  2998  0003B6  0100               	movlb	0	; () banked
  2999  0003B8  6FC8               	movwf	(_prevErr+1)& (0+255),b
  3000  0003BA  0E00               	movlw	0
  3001  0003BC  0100               	movlb	0	; () banked
  3002  0003BE  6FC9               	movwf	(_prevErr+2)& (0+255),b
  3003                           
  3004                           ;PID.c: 37: intErr = 0;
  3005  0003C0  0E00               	movlw	0
  3006  0003C2  0100               	movlb	0	; () banked
  3007  0003C4  6FC4               	movwf	_intErr& (0+255),b
  3008  0003C6  0E00               	movlw	0
  3009  0003C8  0100               	movlb	0	; () banked
  3010  0003CA  6FC5               	movwf	(_intErr+1)& (0+255),b
  3011  0003CC  0E00               	movlw	0
  3012  0003CE  0100               	movlb	0	; () banked
  3013  0003D0  6FC6               	movwf	(_intErr+2)& (0+255),b
  3014                           
  3015                           ;PID.c: 38: PIDEnableFlag = 1;
  3016  0003D2  0E01               	movlw	1
  3017  0003D4  0100               	movlb	0	; () banked
  3018  0003D6  6FCE               	movwf	_PIDEnableFlag& (0+255),b
  3019  0003D8  D000               	goto	l3670
  3020  0003DA                     l3670:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;PID.c: 39: }
  3024                           ;PID.c: 41: error = setpoint - angle;
  3025  0003DA  C0A1  F060         	movff	calculatePID@angle,___ftneg@f1
  3026  0003DE  C0A2  F061         	movff	calculatePID@angle+1,___ftneg@f1+1
  3027  0003E2  C0A3  F062         	movff	calculatePID@angle+2,___ftneg@f1+2
  3028  0003E6  ECAF  F00B         	call	___ftneg	;wreg free
  3029  0003EA  C060  F086         	movff	?___ftneg,___ftadd@f1
  3030  0003EE  C061  F087         	movff	?___ftneg+1,___ftadd@f1+1
  3031  0003F2  C062  F088         	movff	?___ftneg+2,___ftadd@f1+2
  3032  0003F6  C0A4  F089         	movff	calculatePID@setpoint,___ftadd@f2
  3033  0003FA  C0A5  F08A         	movff	calculatePID@setpoint+1,___ftadd@f2+1
  3034  0003FE  C0A6  F08B         	movff	calculatePID@setpoint+2,___ftadd@f2+2
  3035  000402  EC30  F003         	call	___ftadd	;wreg free
  3036  000406  C086  F0C1         	movff	?___ftadd,_error
  3037  00040A  C087  F0C2         	movff	?___ftadd+1,_error+1
  3038  00040E  C088  F0C3         	movff	?___ftadd+2,_error+2
  3039                           
  3040                           ;PID.c: 42: if (error > 180)
  3041  000412  0E00               	movlw	0
  3042  000414  0100               	movlb	0	; () banked
  3043  000416  6F60               	movwf	___ftge@ff1& (0+255),b
  3044  000418  0E34               	movlw	52
  3045  00041A  0100               	movlb	0	; () banked
  3046  00041C  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  3047  00041E  0E43               	movlw	67
  3048  000420  0100               	movlb	0	; () banked
  3049  000422  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  3050  000424  C0C1  F063         	movff	_error,___ftge@ff2
  3051  000428  C0C2  F064         	movff	_error+1,___ftge@ff2+1
  3052  00042C  C0C3  F065         	movff	_error+2,___ftge@ff2+2
  3053  000430  EC74  F007         	call	___ftge	;wreg free
  3054  000434  0100               	movlb	0	; () banked
  3055  000436  B0D8               	btfsc	status,0,c
  3056  000438  D018               	goto	l3676
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;PID.c: 43: error -= 360;
  3060  00043A  C0C1  F092         	movff	_error,___ftsub@f1
  3061  00043E  C0C2  F093         	movff	_error+1,___ftsub@f1+1
  3062  000442  C0C3  F094         	movff	_error+2,___ftsub@f1+2
  3063  000446  0E00               	movlw	0
  3064  000448  0100               	movlb	0	; () banked
  3065  00044A  6F95               	movwf	___ftsub@f2& (0+255),b
  3066  00044C  0EB4               	movlw	180
  3067  00044E  0100               	movlb	0	; () banked
  3068  000450  6F96               	movwf	(___ftsub@f2+1)& (0+255),b
  3069  000452  0E43               	movlw	67
  3070  000454  0100               	movlb	0	; () banked
  3071  000456  6F97               	movwf	(___ftsub@f2+2)& (0+255),b
  3072  000458  EC70  F00A         	call	___ftsub	;wreg free
  3073  00045C  C092  F0C1         	movff	?___ftsub,_error
  3074  000460  C093  F0C2         	movff	?___ftsub+1,_error+1
  3075  000464  C094  F0C3         	movff	?___ftsub+2,_error+2
  3076  000468  D02C               	goto	l148
  3077  00046A                     l3676:
  3078                           
  3079                           ;PID.c: 44: else if (error < -180)
  3080  00046A  C0C1  F060         	movff	_error,___ftge@ff1
  3081  00046E  C0C2  F061         	movff	_error+1,___ftge@ff1+1
  3082  000472  C0C3  F062         	movff	_error+2,___ftge@ff1+2
  3083  000476  0E00               	movlw	0
  3084  000478  0100               	movlb	0	; () banked
  3085  00047A  6F63               	movwf	___ftge@ff2& (0+255),b
  3086  00047C  0E34               	movlw	52
  3087  00047E  0100               	movlb	0	; () banked
  3088  000480  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3089  000482  0EC3               	movlw	195
  3090  000484  0100               	movlb	0	; () banked
  3091  000486  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3092  000488  EC74  F007         	call	___ftge	;wreg free
  3093  00048C  0100               	movlb	0	; () banked
  3094  00048E  B0D8               	btfsc	status,0,c
  3095  000490  D018               	goto	l148
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;PID.c: 45: error += 360;
  3099  000492  C0C1  F086         	movff	_error,___ftadd@f1
  3100  000496  C0C2  F087         	movff	_error+1,___ftadd@f1+1
  3101  00049A  C0C3  F088         	movff	_error+2,___ftadd@f1+2
  3102  00049E  0E00               	movlw	0
  3103  0004A0  0100               	movlb	0	; () banked
  3104  0004A2  6F89               	movwf	___ftadd@f2& (0+255),b
  3105  0004A4  0EB4               	movlw	180
  3106  0004A6  0100               	movlb	0	; () banked
  3107  0004A8  6F8A               	movwf	(___ftadd@f2+1)& (0+255),b
  3108  0004AA  0E43               	movlw	67
  3109  0004AC  0100               	movlb	0	; () banked
  3110  0004AE  6F8B               	movwf	(___ftadd@f2+2)& (0+255),b
  3111  0004B0  EC30  F003         	call	___ftadd	;wreg free
  3112  0004B4  C086  F0C1         	movff	?___ftadd,_error
  3113  0004B8  C087  F0C2         	movff	?___ftadd+1,_error+1
  3114  0004BC  C088  F0C3         	movff	?___ftadd+2,_error+2
  3115  0004C0  D000               	goto	l148
  3116  0004C2                     l148:
  3117                           
  3118                           ;PID.c: 47: derErr = error - prevErr;
  3119  0004C2  C0C7  F060         	movff	_prevErr,___ftneg@f1
  3120  0004C6  C0C8  F061         	movff	_prevErr+1,___ftneg@f1+1
  3121  0004CA  C0C9  F062         	movff	_prevErr+2,___ftneg@f1+2
  3122  0004CE  ECAF  F00B         	call	___ftneg	;wreg free
  3123  0004D2  C060  F086         	movff	?___ftneg,___ftadd@f1
  3124  0004D6  C061  F087         	movff	?___ftneg+1,___ftadd@f1+1
  3125  0004DA  C062  F088         	movff	?___ftneg+2,___ftadd@f1+2
  3126  0004DE  C0C1  F089         	movff	_error,___ftadd@f2
  3127  0004E2  C0C2  F08A         	movff	_error+1,___ftadd@f2+1
  3128  0004E6  C0C3  F08B         	movff	_error+2,___ftadd@f2+2
  3129  0004EA  EC30  F003         	call	___ftadd	;wreg free
  3130  0004EE  C086  F0A7         	movff	?___ftadd,calculatePID@derErr
  3131  0004F2  C087  F0A8         	movff	?___ftadd+1,calculatePID@derErr+1
  3132  0004F6  C088  F0A9         	movff	?___ftadd+2,calculatePID@derErr+2
  3133                           
  3134                           ;PID.c: 48: intErr += error;
  3135  0004FA  C0C4  F086         	movff	_intErr,___ftadd@f1
  3136  0004FE  C0C5  F087         	movff	_intErr+1,___ftadd@f1+1
  3137  000502  C0C6  F088         	movff	_intErr+2,___ftadd@f1+2
  3138  000506  C0C1  F089         	movff	_error,___ftadd@f2
  3139  00050A  C0C2  F08A         	movff	_error+1,___ftadd@f2+1
  3140  00050E  C0C3  F08B         	movff	_error+2,___ftadd@f2+2
  3141  000512  EC30  F003         	call	___ftadd	;wreg free
  3142  000516  C086  F0C4         	movff	?___ftadd,_intErr
  3143  00051A  C087  F0C5         	movff	?___ftadd+1,_intErr+1
  3144  00051E  C088  F0C6         	movff	?___ftadd+2,_intErr+2
  3145                           
  3146                           ;PID.c: 49: if (intErr > 2000)
  3147  000522  0E00               	movlw	0
  3148  000524  0100               	movlb	0	; () banked
  3149  000526  6F60               	movwf	___ftge@ff1& (0+255),b
  3150  000528  0EFA               	movlw	250
  3151  00052A  0100               	movlb	0	; () banked
  3152  00052C  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  3153  00052E  0E44               	movlw	68
  3154  000530  0100               	movlb	0	; () banked
  3155  000532  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  3156  000534  C0C4  F063         	movff	_intErr,___ftge@ff2
  3157  000538  C0C5  F064         	movff	_intErr+1,___ftge@ff2+1
  3158  00053C  C0C6  F065         	movff	_intErr+2,___ftge@ff2+2
  3159  000540  EC74  F007         	call	___ftge	;wreg free
  3160  000544  0100               	movlb	0	; () banked
  3161  000546  B0D8               	btfsc	status,0,c
  3162  000548  D00A               	goto	l3682
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;PID.c: 50: intErr = 2000;
  3166  00054A  0E00               	movlw	0
  3167  00054C  0100               	movlb	0	; () banked
  3168  00054E  6FC4               	movwf	_intErr& (0+255),b
  3169  000550  0EFA               	movlw	250
  3170  000552  0100               	movlb	0	; () banked
  3171  000554  6FC5               	movwf	(_intErr+1)& (0+255),b
  3172  000556  0E44               	movlw	68
  3173  000558  0100               	movlb	0	; () banked
  3174  00055A  6FC6               	movwf	(_intErr+2)& (0+255),b
  3175  00055C  D000               	goto	l3682
  3176  00055E                     l3682:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3180  00055E  C0C4  F07A         	movff	_intErr,___ftmul@f2
  3181  000562  C0C5  F07B         	movff	_intErr+1,___ftmul@f2+1
  3182  000566  C0C6  F07C         	movff	_intErr+2,___ftmul@f2+2
  3183  00056A  C0BB  F077         	movff	_Ki,___ftmul@f1
  3184  00056E  C0BC  F078         	movff	_Ki+1,___ftmul@f1+1
  3185  000572  C0BD  F079         	movff	_Ki+2,___ftmul@f1+2
  3186  000576  EC6F  F004         	call	___ftmul	;wreg free
  3187  00057A  C077  F0AA         	movff	?___ftmul,_calculatePID$3512
  3188  00057E  C078  F0AB         	movff	?___ftmul+1,_calculatePID$3512+1
  3189  000582  C079  F0AC         	movff	?___ftmul+2,_calculatePID$3512+2
  3190                           
  3191                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3192  000586  C0D2  F07A         	movff	_loopTime,___ftmul@f2
  3193  00058A  C0D3  F07B         	movff	_loopTime+1,___ftmul@f2+1
  3194  00058E  C0D4  F07C         	movff	_loopTime+2,___ftmul@f2+2
  3195  000592  C0AA  F077         	movff	_calculatePID$3512,___ftmul@f1
  3196  000596  C0AB  F078         	movff	_calculatePID$3512+1,___ftmul@f1+1
  3197  00059A  C0AC  F079         	movff	_calculatePID$3512+2,___ftmul@f1+2
  3198  00059E  EC6F  F004         	call	___ftmul	;wreg free
  3199  0005A2  C077  F089         	movff	?___ftmul,___ftadd@f2
  3200  0005A6  C078  F08A         	movff	?___ftmul+1,___ftadd@f2+1
  3201  0005AA  C079  F08B         	movff	?___ftmul+2,___ftadd@f2+2
  3202  0005AE  C0C1  F07A         	movff	_error,___ftmul@f2
  3203  0005B2  C0C2  F07B         	movff	_error+1,___ftmul@f2+1
  3204  0005B6  C0C3  F07C         	movff	_error+2,___ftmul@f2+2
  3205  0005BA  C0BE  F077         	movff	_Kp,___ftmul@f1
  3206  0005BE  C0BF  F078         	movff	_Kp+1,___ftmul@f1+1
  3207  0005C2  C0C0  F079         	movff	_Kp+2,___ftmul@f1+2
  3208  0005C6  EC6F  F004         	call	___ftmul	;wreg free
  3209  0005CA  C077  F086         	movff	?___ftmul,___ftadd@f1
  3210  0005CE  C078  F087         	movff	?___ftmul+1,___ftadd@f1+1
  3211  0005D2  C079  F088         	movff	?___ftmul+2,___ftadd@f1+2
  3212  0005D6  EC30  F003         	call	___ftadd	;wreg free
  3213  0005DA  C086  F0AD         	movff	?___ftadd,_calculatePID$3513
  3214  0005DE  C087  F0AE         	movff	?___ftadd+1,_calculatePID$3513+1
  3215  0005E2  C088  F0AF         	movff	?___ftadd+2,_calculatePID$3513+2
  3216                           
  3217                           ;PID.c: 52: motorInput = Kp * error + (Ki * intErr * loopTime) + (Kd * (derErr / loopTim
      +                          e));
  3218  0005E6  C0B8  F07A         	movff	_Kd,___ftmul@f2
  3219  0005EA  C0B9  F07B         	movff	_Kd+1,___ftmul@f2+1
  3220  0005EE  C0BA  F07C         	movff	_Kd+2,___ftmul@f2+2
  3221  0005F2  C0D2  F06B         	movff	_loopTime,___ftdiv@f2
  3222  0005F6  C0D3  F06C         	movff	_loopTime+1,___ftdiv@f2+1
  3223  0005FA  C0D4  F06D         	movff	_loopTime+2,___ftdiv@f2+2
  3224  0005FE  C0A7  F068         	movff	calculatePID@derErr,___ftdiv@f1
  3225  000602  C0A8  F069         	movff	calculatePID@derErr+1,___ftdiv@f1+1
  3226  000606  C0A9  F06A         	movff	calculatePID@derErr+2,___ftdiv@f1+2
  3227  00060A  EC1D  F005         	call	___ftdiv	;wreg free
  3228  00060E  C068  F077         	movff	?___ftdiv,___ftmul@f1
  3229  000612  C069  F078         	movff	?___ftdiv+1,___ftmul@f1+1
  3230  000616  C06A  F079         	movff	?___ftdiv+2,___ftmul@f1+2
  3231  00061A  EC6F  F004         	call	___ftmul	;wreg free
  3232  00061E  C077  F089         	movff	?___ftmul,___ftadd@f2
  3233  000622  C078  F08A         	movff	?___ftmul+1,___ftadd@f2+1
  3234  000626  C079  F08B         	movff	?___ftmul+2,___ftadd@f2+2
  3235  00062A  C0AD  F086         	movff	_calculatePID$3513,___ftadd@f1
  3236  00062E  C0AE  F087         	movff	_calculatePID$3513+1,___ftadd@f1+1
  3237  000632  C0AF  F088         	movff	_calculatePID$3513+2,___ftadd@f1+2
  3238  000636  EC30  F003         	call	___ftadd	;wreg free
  3239  00063A  C086  F092         	movff	?___ftadd,___fttol@f1
  3240  00063E  C087  F093         	movff	?___ftadd+1,___fttol@f1+1
  3241  000642  C088  F094         	movff	?___ftadd+2,___fttol@f1+2
  3242  000646  ECBE  F005         	call	___fttol	;wreg free
  3243  00064A  C092  F0CA         	movff	?___fttol,_motorInput
  3244  00064E  C093  F0CB         	movff	?___fttol+1,_motorInput+1
  3245                           
  3246                           ;PID.c: 54: prevErr = error;
  3247  000652  C0C1  F0C7         	movff	_error,_prevErr
  3248  000656  C0C2  F0C8         	movff	_error+1,_prevErr+1
  3249  00065A  C0C3  F0C9         	movff	_error+2,_prevErr+2
  3250  00065E  0012               	return		;funcret
  3251  000660                     __end_of_calculatePID:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           intcon	equ	0xFF2
  3260                           intcon2	equ	0xFF1
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           indf2	equ	0xFDF
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function ___fttol *****************
  3269 ;; Defined at:
  3270 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  f1              3   50[BANK0 ] float 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  lval            4   60[BANK0 ] unsigned long 
  3275 ;;  exp1            1   64[BANK0 ] unsigned char 
  3276 ;;  sign1           1   59[BANK0 ] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  4   50[BANK0 ] long 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3286 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;Total ram usage:       15 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    6
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_calculatePID
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text19
  3301  000B7C                     __ptext19:
  3302                           	opt stack 0
  3303  000B7C                     ___fttol:
  3304                           	opt stack 23
  3305                           
  3306                           ;incstack = 0
  3307  000B7C  C094  F096         	movff	___fttol@f1+2,??___fttol
  3308  000B80  0100               	movlb	0	; () banked
  3309  000B82  6B97               	clrf	(??___fttol+1)& (0+255),b
  3310  000B84  6B98               	clrf	(??___fttol+2)& (0+255),b
  3311  000B86  0100               	movlb	0	; () banked
  3312  000B88  3593               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3313  000B8A  0100               	movlb	0	; () banked
  3314  000B8C  3796               	rlcf	??___fttol& (0+255),f,b
  3315  000B8E  E301               	bnc	u1881
  3316  000B90  8197               	bsf	(??___fttol+1)& (0+255),0,b
  3317  000B92                     u1881:
  3318  000B92  0100               	movlb	0	; () banked
  3319  000B94  5196               	movf	??___fttol& (0+255),w,b
  3320  000B96  0100               	movlb	0	; () banked
  3321  000B98  6FA0               	movwf	___fttol@exp1& (0+255),b
  3322  000B9A  0100               	movlb	0	; () banked
  3323  000B9C  51A0               	movf	___fttol@exp1& (0+255),w,b
  3324  000B9E  A4D8               	btfss	status,2,c
  3325  000BA0  D002               	goto	l2684
  3326  000BA2  D051               	goto	l2708
  3327                           
  3328                           ; BSR set to: 0
  3329                           
  3330                           ; BSR set to: 0
  3331  000BA4  D083               	goto	l1047
  3332  000BA6                     l2684:
  3333                           
  3334                           ; BSR set to: 0
  3335  000BA6  0E17               	movlw	23
  3336  000BA8  0100               	movlb	0	; () banked
  3337  000BAA  6F96               	movwf	??___fttol& (0+255),b
  3338  000BAC  C092  F097         	movff	___fttol@f1,??___fttol+1
  3339  000BB0  C093  F098         	movff	___fttol@f1+1,??___fttol+2
  3340  000BB4  C094  F099         	movff	___fttol@f1+2,??___fttol+3
  3341  000BB8  0100               	movlb	0	; () banked
  3342  000BBA  2996               	incf	??___fttol& (0+255),w,b
  3343  000BBC  0100               	movlb	0	; () banked
  3344  000BBE  6F9A               	movwf	(??___fttol+4)& (0+255),b
  3345  000BC0  D005               	goto	u1900
  3346  000BC2                     u1905:
  3347  000BC2  0100               	movlb	0	; () banked
  3348  000BC4  90D8               	bcf	status,0,c
  3349  000BC6  3399               	rrcf	(??___fttol+3)& (0+255),f,b
  3350  000BC8  3398               	rrcf	(??___fttol+2)& (0+255),f,b
  3351  000BCA  3397               	rrcf	(??___fttol+1)& (0+255),f,b
  3352  000BCC                     u1900:
  3353  000BCC  0100               	movlb	0	; () banked
  3354  000BCE  2F9A               	decfsz	(??___fttol+4)& (0+255),f,b
  3355  000BD0  D7F8               	goto	u1905
  3356  000BD2  0100               	movlb	0	; () banked
  3357  000BD4  5197               	movf	(??___fttol+1)& (0+255),w,b
  3358  000BD6  0100               	movlb	0	; () banked
  3359  000BD8  6F9B               	movwf	___fttol@sign1& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362  000BDA  0100               	movlb	0	; () banked
  3363  000BDC  8F93               	bsf	(___fttol@f1+1)& (0+255),7,b
  3364                           
  3365                           ; BSR set to: 0
  3366  000BDE  0EFF               	movlw	255
  3367  000BE0  0100               	movlb	0	; () banked
  3368  000BE2  1792               	andwf	___fttol@f1& (0+255),f,b
  3369  000BE4  0EFF               	movlw	255
  3370  000BE6  0100               	movlb	0	; () banked
  3371  000BE8  1793               	andwf	(___fttol@f1+1)& (0+255),f,b
  3372  000BEA  0E00               	movlw	0
  3373  000BEC  0100               	movlb	0	; () banked
  3374  000BEE  1794               	andwf	(___fttol@f1+2)& (0+255),f,b
  3375                           
  3376                           ; BSR set to: 0
  3377  000BF0  0100               	movlb	0	; () banked
  3378  000BF2  5192               	movf	___fttol@f1& (0+255),w,b
  3379  000BF4  0100               	movlb	0	; () banked
  3380  000BF6  6F9C               	movwf	___fttol@lval& (0+255),b
  3381  000BF8  0100               	movlb	0	; () banked
  3382  000BFA  5193               	movf	(___fttol@f1+1)& (0+255),w,b
  3383  000BFC  0100               	movlb	0	; () banked
  3384  000BFE  6F9D               	movwf	(___fttol@lval+1)& (0+255),b
  3385  000C00  0100               	movlb	0	; () banked
  3386  000C02  5194               	movf	(___fttol@f1+2)& (0+255),w,b
  3387  000C04  0100               	movlb	0	; () banked
  3388  000C06  6F9E               	movwf	(___fttol@lval+2)& (0+255),b
  3389  000C08  0100               	movlb	0	; () banked
  3390  000C0A  6B9F               	clrf	(___fttol@lval+3)& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393  000C0C  0E8E               	movlw	142
  3394  000C0E  0100               	movlb	0	; () banked
  3395  000C10  5FA0               	subwf	___fttol@exp1& (0+255),f,b
  3396                           
  3397                           ; BSR set to: 0
  3398  000C12  0100               	movlb	0	; () banked
  3399  000C14  AFA0               	btfss	___fttol@exp1& (0+255),7,b
  3400  000C16  D013               	goto	l2706
  3401                           
  3402                           ; BSR set to: 0
  3403  000C18  0100               	movlb	0	; () banked
  3404  000C1A  51A0               	movf	___fttol@exp1& (0+255),w,b
  3405  000C1C  0A80               	xorlw	128
  3406  000C1E  0F8F               	addlw	143
  3407  000C20  B0D8               	btfsc	status,0,c
  3408  000C22  D003               	goto	l2702
  3409  000C24  D010               	goto	l2708
  3410                           
  3411                           ; BSR set to: 0
  3412                           
  3413                           ; BSR set to: 0
  3414  000C26  D042               	goto	l1047
  3415                           
  3416                           ; BSR set to: 0
  3417  000C28  D000               	goto	l2702
  3418  000C2A                     l2702:
  3419                           
  3420                           ; BSR set to: 0
  3421  000C2A  0100               	movlb	0	; () banked
  3422  000C2C  90D8               	bcf	status,0,c
  3423  000C2E  339F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3424  000C30  339E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3425  000C32  339D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3426  000C34  339C               	rrcf	___fttol@lval& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 0
  3429  000C36  0100               	movlb	0	; () banked
  3430  000C38  3FA0               	incfsz	___fttol@exp1& (0+255),f,b
  3431  000C3A  D7F7               	goto	l2702
  3432                           
  3433                           ; BSR set to: 0
  3434  000C3C  D01F               	goto	l2716
  3435  000C3E                     l2706:
  3436                           
  3437                           ; BSR set to: 0
  3438  000C3E  0E17               	movlw	23
  3439  000C40  0100               	movlb	0	; () banked
  3440  000C42  65A0               	cpfsgt	___fttol@exp1& (0+255),b
  3441  000C44  D014               	goto	l2714
  3442  000C46                     l2708:
  3443                           
  3444                           ; BSR set to: 0
  3445  000C46  0E00               	movlw	0
  3446  000C48  0100               	movlb	0	; () banked
  3447  000C4A  6F92               	movwf	?___fttol& (0+255),b
  3448  000C4C  0E00               	movlw	0
  3449  000C4E  6F93               	movwf	(?___fttol+1)& (0+255),b
  3450  000C50  0E00               	movlw	0
  3451  000C52  6F94               	movwf	(?___fttol+2)& (0+255),b
  3452  000C54  0E00               	movlw	0
  3453  000C56  6F95               	movwf	(?___fttol+3)& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456  000C58  D029               	goto	l1047
  3457                           
  3458                           ; BSR set to: 0
  3459  000C5A  D009               	goto	l2714
  3460  000C5C                     l2712:
  3461                           
  3462                           ; BSR set to: 0
  3463  000C5C  0100               	movlb	0	; () banked
  3464  000C5E  90D8               	bcf	status,0,c
  3465  000C60  379C               	rlcf	___fttol@lval& (0+255),f,b
  3466  000C62  379D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3467  000C64  379E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3468  000C66  379F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3469  000C68  0100               	movlb	0	; () banked
  3470  000C6A  07A0               	decf	___fttol@exp1& (0+255),f,b
  3471  000C6C  D000               	goto	l2714
  3472  000C6E                     l2714:
  3473                           
  3474                           ; BSR set to: 0
  3475  000C6E  0100               	movlb	0	; () banked
  3476  000C70  51A0               	movf	___fttol@exp1& (0+255),w,b
  3477  000C72  0100               	movlb	0	; () banked
  3478  000C74  B4D8               	btfsc	status,2,c
  3479  000C76  D002               	goto	l2716
  3480  000C78  D7F1               	goto	l2712
  3481                           
  3482                           ; BSR set to: 0
  3483  000C7A  D000               	goto	l2716
  3484  000C7C                     l2716:
  3485                           
  3486                           ; BSR set to: 0
  3487  000C7C  0100               	movlb	0	; () banked
  3488  000C7E  519B               	movf	___fttol@sign1& (0+255),w,b
  3489  000C80  0100               	movlb	0	; () banked
  3490  000C82  B4D8               	btfsc	status,2,c
  3491  000C84  D00A               	goto	l2720
  3492                           
  3493                           ; BSR set to: 0
  3494  000C86  0100               	movlb	0	; () banked
  3495  000C88  1F9F               	comf	(___fttol@lval+3)& (0+255),f,b
  3496  000C8A  1F9E               	comf	(___fttol@lval+2)& (0+255),f,b
  3497  000C8C  1F9D               	comf	(___fttol@lval+1)& (0+255),f,b
  3498  000C8E  6D9C               	negf	___fttol@lval& (0+255),b
  3499  000C90  0E00               	movlw	0
  3500  000C92  239D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3501  000C94  239E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3502  000C96  239F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3503  000C98  D000               	goto	l2720
  3504  000C9A                     l2720:
  3505                           
  3506                           ; BSR set to: 0
  3507  000C9A  C09C  F092         	movff	___fttol@lval,?___fttol
  3508  000C9E  C09D  F093         	movff	___fttol@lval+1,?___fttol+1
  3509  000CA2  C09E  F094         	movff	___fttol@lval+2,?___fttol+2
  3510  000CA6  C09F  F095         	movff	___fttol@lval+3,?___fttol+3
  3511  000CAA  D000               	goto	l1047
  3512  000CAC                     l1047:
  3513                           
  3514                           ; BSR set to: 0
  3515  000CAC  0012               	return		;funcret
  3516  000CAE                     __end_of___fttol:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           intcon2	equ	0xFF1
  3526                           postinc0	equ	0xFEE
  3527                           wreg	equ	0xFE8
  3528                           indf2	equ	0xFDF
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function ___ftsub *****************
  3534 ;; Defined at:
  3535 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  f1              3   50[BANK0 ] float 
  3538 ;;  f2              3   53[BANK0 ] float 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  3   50[BANK0 ] float 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3550 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;Total ram usage:        6 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    8
  3557 ;; This function calls:
  3558 ;;		___ftadd
  3559 ;; This function is called by:
  3560 ;;		_calculatePID
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text20
  3565  0014E0                     __ptext20:
  3566                           	opt stack 0
  3567  0014E0                     ___ftsub:
  3568                           	opt stack 21
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;incstack = 0
  3572  0014E0  0100               	movlb	0	; () banked
  3573  0014E2  5195               	movf	___ftsub@f2& (0+255),w,b
  3574  0014E4  0100               	movlb	0	; () banked
  3575  0014E6  1196               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  3576  0014E8  0100               	movlb	0	; () banked
  3577  0014EA  1197               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  3578  0014EC  B4D8               	btfsc	status,2,c
  3579  0014EE  D00A               	goto	l3554
  3580                           
  3581                           ; BSR set to: 0
  3582  0014F0  0E00               	movlw	0
  3583  0014F2  0100               	movlb	0	; () banked
  3584  0014F4  1B95               	xorwf	___ftsub@f2& (0+255),f,b
  3585  0014F6  0E00               	movlw	0
  3586  0014F8  0100               	movlb	0	; () banked
  3587  0014FA  1B96               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  3588  0014FC  0E80               	movlw	128
  3589  0014FE  0100               	movlb	0	; () banked
  3590  001500  1B97               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  3591  001502  D000               	goto	l3554
  3592  001504                     l3554:
  3593                           
  3594                           ; BSR set to: 0
  3595  001504  C092  F086         	movff	___ftsub@f1,___ftadd@f1
  3596  001508  C093  F087         	movff	___ftsub@f1+1,___ftadd@f1+1
  3597  00150C  C094  F088         	movff	___ftsub@f1+2,___ftadd@f1+2
  3598  001510  C095  F089         	movff	___ftsub@f2,___ftadd@f2
  3599  001514  C096  F08A         	movff	___ftsub@f2+1,___ftadd@f2+1
  3600  001518  C097  F08B         	movff	___ftsub@f2+2,___ftadd@f2+2
  3601  00151C  EC30  F003         	call	___ftadd	;wreg free
  3602  001520  C086  F092         	movff	?___ftadd,?___ftsub
  3603  001524  C087  F093         	movff	?___ftadd+1,?___ftsub+1
  3604  001528  C088  F094         	movff	?___ftadd+2,?___ftsub+2
  3605  00152C  D000               	goto	l1043
  3606  00152E                     l1043:
  3607  00152E  0012               	return		;funcret
  3608  001530                     __end_of___ftsub:
  3609                           	opt stack 0
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           prodh	equ	0xFF4
  3615                           prodl	equ	0xFF3
  3616                           intcon	equ	0xFF2
  3617                           intcon2	equ	0xFF1
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           indf2	equ	0xFDF
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function ___ftadd *****************
  3626 ;; Defined at:
  3627 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  f1              3   38[BANK0 ] float 
  3630 ;;  f2              3   41[BANK0 ] float 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  exp1            1   49[BANK0 ] unsigned char 
  3633 ;;  exp2            1   48[BANK0 ] unsigned char 
  3634 ;;  sign            1   47[BANK0 ] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  3   38[BANK0 ] float 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3644 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;Total ram usage:       12 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    7
  3651 ;; This function calls:
  3652 ;;		___ftpack
  3653 ;; This function is called by:
  3654 ;;		_calculatePID
  3655 ;;		___ftsub
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text21
  3660  000660                     __ptext21:
  3661                           	opt stack 0
  3662  000660                     ___ftadd:
  3663                           	opt stack 21
  3664                           
  3665                           ;incstack = 0
  3666  000660  C088  F08C         	movff	___ftadd@f1+2,??___ftadd
  3667  000664  0100               	movlb	0	; () banked
  3668  000666  6B8D               	clrf	(??___ftadd+1)& (0+255),b
  3669  000668  6B8E               	clrf	(??___ftadd+2)& (0+255),b
  3670  00066A  0100               	movlb	0	; () banked
  3671  00066C  3587               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3672  00066E  0100               	movlb	0	; () banked
  3673  000670  378C               	rlcf	??___ftadd& (0+255),f,b
  3674  000672  E301               	bnc	u2661
  3675  000674  818D               	bsf	(??___ftadd+1)& (0+255),0,b
  3676  000676                     u2661:
  3677  000676  0100               	movlb	0	; () banked
  3678  000678  518C               	movf	??___ftadd& (0+255),w,b
  3679  00067A  0100               	movlb	0	; () banked
  3680  00067C  6F91               	movwf	___ftadd@exp1& (0+255),b
  3681  00067E  C08B  F08C         	movff	___ftadd@f2+2,??___ftadd
  3682  000682  0100               	movlb	0	; () banked
  3683  000684  6B8D               	clrf	(??___ftadd+1)& (0+255),b
  3684  000686  6B8E               	clrf	(??___ftadd+2)& (0+255),b
  3685  000688  0100               	movlb	0	; () banked
  3686  00068A  358A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3687  00068C  0100               	movlb	0	; () banked
  3688  00068E  378C               	rlcf	??___ftadd& (0+255),f,b
  3689  000690  E301               	bnc	u2671
  3690  000692  818D               	bsf	(??___ftadd+1)& (0+255),0,b
  3691  000694                     u2671:
  3692  000694  0100               	movlb	0	; () banked
  3693  000696  518C               	movf	??___ftadd& (0+255),w,b
  3694  000698  0100               	movlb	0	; () banked
  3695  00069A  6F90               	movwf	___ftadd@exp2& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698  00069C  0100               	movlb	0	; () banked
  3699  00069E  5191               	movf	___ftadd@exp1& (0+255),w,b
  3700  0006A0  0100               	movlb	0	; () banked
  3701  0006A2  B4D8               	btfsc	status,2,c
  3702  0006A4  D011               	goto	l979
  3703                           
  3704                           ; BSR set to: 0
  3705  0006A6  0100               	movlb	0	; () banked
  3706  0006A8  5190               	movf	___ftadd@exp2& (0+255),w,b
  3707  0006AA  0100               	movlb	0	; () banked
  3708  0006AC  5D91               	subwf	___ftadd@exp1& (0+255),w,b
  3709  0006AE  B0D8               	btfsc	status,0,c
  3710  0006B0  D012               	goto	l3288
  3711                           
  3712                           ; BSR set to: 0
  3713  0006B2  0100               	movlb	0	; () banked
  3714  0006B4  5191               	movf	___ftadd@exp1& (0+255),w,b
  3715  0006B6  0800               	sublw	0
  3716  0006B8  0100               	movlb	0	; () banked
  3717  0006BA  2590               	addwf	___ftadd@exp2& (0+255),w,b
  3718  0006BC  0100               	movlb	0	; () banked
  3719  0006BE  6F8C               	movwf	??___ftadd& (0+255),b
  3720  0006C0  0E18               	movlw	24
  3721  0006C2  0100               	movlb	0	; () banked
  3722  0006C4  658C               	cpfsgt	??___ftadd& (0+255),b
  3723  0006C6  D007               	goto	l3288
  3724  0006C8                     l979:
  3725                           
  3726                           ; BSR set to: 0
  3727  0006C8  C089  F086         	movff	___ftadd@f2,?___ftadd
  3728  0006CC  C08A  F087         	movff	___ftadd@f2+1,?___ftadd+1
  3729  0006D0  C08B  F088         	movff	___ftadd@f2+2,?___ftadd+2
  3730  0006D4  D103               	goto	l980
  3731  0006D6                     l3288:
  3732                           
  3733                           ; BSR set to: 0
  3734  0006D6  0100               	movlb	0	; () banked
  3735  0006D8  5190               	movf	___ftadd@exp2& (0+255),w,b
  3736  0006DA  0100               	movlb	0	; () banked
  3737  0006DC  B4D8               	btfsc	status,2,c
  3738  0006DE  D011               	goto	l983
  3739                           
  3740                           ; BSR set to: 0
  3741  0006E0  0100               	movlb	0	; () banked
  3742  0006E2  5191               	movf	___ftadd@exp1& (0+255),w,b
  3743  0006E4  0100               	movlb	0	; () banked
  3744  0006E6  5D90               	subwf	___ftadd@exp2& (0+255),w,b
  3745  0006E8  B0D8               	btfsc	status,0,c
  3746  0006EA  D012               	goto	l3294
  3747                           
  3748                           ; BSR set to: 0
  3749  0006EC  0100               	movlb	0	; () banked
  3750  0006EE  5190               	movf	___ftadd@exp2& (0+255),w,b
  3751  0006F0  0800               	sublw	0
  3752  0006F2  0100               	movlb	0	; () banked
  3753  0006F4  2591               	addwf	___ftadd@exp1& (0+255),w,b
  3754  0006F6  0100               	movlb	0	; () banked
  3755  0006F8  6F8C               	movwf	??___ftadd& (0+255),b
  3756  0006FA  0E18               	movlw	24
  3757  0006FC  0100               	movlb	0	; () banked
  3758  0006FE  658C               	cpfsgt	??___ftadd& (0+255),b
  3759  000700  D007               	goto	l3294
  3760  000702                     l983:
  3761                           
  3762                           ; BSR set to: 0
  3763  000702  C086  F086         	movff	___ftadd@f1,?___ftadd
  3764  000706  C087  F087         	movff	___ftadd@f1+1,?___ftadd+1
  3765  00070A  C088  F088         	movff	___ftadd@f1+2,?___ftadd+2
  3766  00070E  D0E6               	goto	l980
  3767  000710                     l3294:
  3768                           
  3769                           ; BSR set to: 0
  3770  000710  0E06               	movlw	6
  3771  000712  0100               	movlb	0	; () banked
  3772  000714  6F8F               	movwf	___ftadd@sign& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775  000716  0100               	movlb	0	; () banked
  3776  000718  AF88               	btfss	(___ftadd@f1+2)& (0+255),7,b
  3777  00071A  D003               	goto	l3300
  3778                           
  3779                           ; BSR set to: 0
  3780  00071C  0100               	movlb	0	; () banked
  3781  00071E  8F8F               	bsf	___ftadd@sign& (0+255),7,b
  3782  000720  D000               	goto	l3300
  3783  000722                     l3300:
  3784                           
  3785                           ; BSR set to: 0
  3786  000722  0100               	movlb	0	; () banked
  3787  000724  AF8B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3788  000726  D002               	goto	l985
  3789                           
  3790                           ; BSR set to: 0
  3791  000728  0100               	movlb	0	; () banked
  3792  00072A  8D8F               	bsf	___ftadd@sign& (0+255),6,b
  3793  00072C                     l985:
  3794                           
  3795                           ; BSR set to: 0
  3796  00072C  0100               	movlb	0	; () banked
  3797  00072E  8F87               	bsf	(___ftadd@f1+1)& (0+255),7,b
  3798                           
  3799                           ; BSR set to: 0
  3800  000730  0EFF               	movlw	255
  3801  000732  0100               	movlb	0	; () banked
  3802  000734  1786               	andwf	___ftadd@f1& (0+255),f,b
  3803  000736  0EFF               	movlw	255
  3804  000738  0100               	movlb	0	; () banked
  3805  00073A  1787               	andwf	(___ftadd@f1+1)& (0+255),f,b
  3806  00073C  0E00               	movlw	0
  3807  00073E  0100               	movlb	0	; () banked
  3808  000740  1788               	andwf	(___ftadd@f1+2)& (0+255),f,b
  3809  000742  0100               	movlb	0	; () banked
  3810  000744  8F8A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  3811                           
  3812                           ; BSR set to: 0
  3813  000746  0EFF               	movlw	255
  3814  000748  0100               	movlb	0	; () banked
  3815  00074A  1789               	andwf	___ftadd@f2& (0+255),f,b
  3816  00074C  0EFF               	movlw	255
  3817  00074E  0100               	movlb	0	; () banked
  3818  000750  178A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  3819  000752  0E00               	movlw	0
  3820  000754  0100               	movlb	0	; () banked
  3821  000756  178B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  3822                           
  3823                           ; BSR set to: 0
  3824  000758  0100               	movlb	0	; () banked
  3825  00075A  5190               	movf	___ftadd@exp2& (0+255),w,b
  3826  00075C  0100               	movlb	0	; () banked
  3827  00075E  5D91               	subwf	___ftadd@exp1& (0+255),w,b
  3828  000760  B0D8               	btfsc	status,0,c
  3829  000762  D028               	goto	l3320
  3830  000764                     l3310:
  3831                           
  3832                           ; BSR set to: 0
  3833  000764  0100               	movlb	0	; () banked
  3834  000766  90D8               	bcf	status,0,c
  3835  000768  3789               	rlcf	___ftadd@f2& (0+255),f,b
  3836  00076A  378A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  3837  00076C  378B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  3838  00076E  0100               	movlb	0	; () banked
  3839  000770  0790               	decf	___ftadd@exp2& (0+255),f,b
  3840                           
  3841                           ; BSR set to: 0
  3842  000772  0100               	movlb	0	; () banked
  3843  000774  5191               	movf	___ftadd@exp1& (0+255),w,b
  3844  000776  0100               	movlb	0	; () banked
  3845  000778  1990               	xorwf	___ftadd@exp2& (0+255),w,b
  3846  00077A  B4D8               	btfsc	status,2,c
  3847  00077C  D013               	goto	l3318
  3848                           
  3849                           ; BSR set to: 0
  3850  00077E  0100               	movlb	0	; () banked
  3851  000780  078F               	decf	___ftadd@sign& (0+255),f,b
  3852  000782  C08F  F08C         	movff	___ftadd@sign,??___ftadd
  3853  000786  0E07               	movlw	7
  3854  000788  0100               	movlb	0	; () banked
  3855  00078A  178C               	andwf	??___ftadd& (0+255),f,b
  3856  00078C  B4D8               	btfsc	status,2,c
  3857  00078E  D00A               	goto	l3318
  3858  000790  D7E9               	goto	l3310
  3859                           
  3860                           ; BSR set to: 0
  3861                           
  3862                           ; BSR set to: 0
  3863  000792  D008               	goto	l3318
  3864  000794                     l3316:
  3865                           
  3866                           ; BSR set to: 0
  3867  000794  0100               	movlb	0	; () banked
  3868  000796  90D8               	bcf	status,0,c
  3869  000798  3388               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  3870  00079A  3387               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  3871  00079C  3386               	rrcf	___ftadd@f1& (0+255),f,b
  3872  00079E  0100               	movlb	0	; () banked
  3873  0007A0  2B91               	incf	___ftadd@exp1& (0+255),f,b
  3874  0007A2  D000               	goto	l3318
  3875  0007A4                     l3318:
  3876                           
  3877                           ; BSR set to: 0
  3878  0007A4  0100               	movlb	0	; () banked
  3879  0007A6  5190               	movf	___ftadd@exp2& (0+255),w,b
  3880  0007A8  0100               	movlb	0	; () banked
  3881  0007AA  1991               	xorwf	___ftadd@exp1& (0+255),w,b
  3882  0007AC  B4D8               	btfsc	status,2,c
  3883  0007AE  D030               	goto	l994
  3884  0007B0  D7F1               	goto	l3316
  3885                           
  3886                           ; BSR set to: 0
  3887  0007B2  D02E               	goto	l994
  3888  0007B4                     l3320:
  3889                           
  3890                           ; BSR set to: 0
  3891  0007B4  0100               	movlb	0	; () banked
  3892  0007B6  5191               	movf	___ftadd@exp1& (0+255),w,b
  3893  0007B8  0100               	movlb	0	; () banked
  3894  0007BA  5D90               	subwf	___ftadd@exp2& (0+255),w,b
  3895  0007BC  B0D8               	btfsc	status,0,c
  3896  0007BE  D028               	goto	l994
  3897  0007C0                     l3322:
  3898                           
  3899                           ; BSR set to: 0
  3900  0007C0  0100               	movlb	0	; () banked
  3901  0007C2  90D8               	bcf	status,0,c
  3902  0007C4  3786               	rlcf	___ftadd@f1& (0+255),f,b
  3903  0007C6  3787               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  3904  0007C8  3788               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  3905  0007CA  0100               	movlb	0	; () banked
  3906  0007CC  0791               	decf	___ftadd@exp1& (0+255),f,b
  3907                           
  3908                           ; BSR set to: 0
  3909  0007CE  0100               	movlb	0	; () banked
  3910  0007D0  5191               	movf	___ftadd@exp1& (0+255),w,b
  3911  0007D2  0100               	movlb	0	; () banked
  3912  0007D4  1990               	xorwf	___ftadd@exp2& (0+255),w,b
  3913  0007D6  B4D8               	btfsc	status,2,c
  3914  0007D8  D013               	goto	l3330
  3915                           
  3916                           ; BSR set to: 0
  3917  0007DA  0100               	movlb	0	; () banked
  3918  0007DC  078F               	decf	___ftadd@sign& (0+255),f,b
  3919  0007DE  C08F  F08C         	movff	___ftadd@sign,??___ftadd
  3920  0007E2  0E07               	movlw	7
  3921  0007E4  0100               	movlb	0	; () banked
  3922  0007E6  178C               	andwf	??___ftadd& (0+255),f,b
  3923  0007E8  B4D8               	btfsc	status,2,c
  3924  0007EA  D00A               	goto	l3330
  3925  0007EC  D7E9               	goto	l3322
  3926                           
  3927                           ; BSR set to: 0
  3928                           
  3929                           ; BSR set to: 0
  3930  0007EE  D008               	goto	l3330
  3931  0007F0                     l3328:
  3932                           
  3933                           ; BSR set to: 0
  3934  0007F0  0100               	movlb	0	; () banked
  3935  0007F2  90D8               	bcf	status,0,c
  3936  0007F4  338B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  3937  0007F6  338A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  3938  0007F8  3389               	rrcf	___ftadd@f2& (0+255),f,b
  3939  0007FA  0100               	movlb	0	; () banked
  3940  0007FC  2B90               	incf	___ftadd@exp2& (0+255),f,b
  3941  0007FE  D000               	goto	l3330
  3942  000800                     l3330:
  3943                           
  3944                           ; BSR set to: 0
  3945  000800  0100               	movlb	0	; () banked
  3946  000802  5190               	movf	___ftadd@exp2& (0+255),w,b
  3947  000804  0100               	movlb	0	; () banked
  3948  000806  1991               	xorwf	___ftadd@exp1& (0+255),w,b
  3949  000808  B4D8               	btfsc	status,2,c
  3950  00080A  D002               	goto	l994
  3951  00080C  D7F1               	goto	l3328
  3952                           
  3953                           ; BSR set to: 0
  3954  00080E  D000               	goto	l994
  3955  000810                     l994:
  3956                           
  3957                           ; BSR set to: 0
  3958  000810  0100               	movlb	0	; () banked
  3959  000812  AF8F               	btfss	___ftadd@sign& (0+255),7,b
  3960  000814  D012               	goto	l1003
  3961                           
  3962                           ; BSR set to: 0
  3963  000816  0EFF               	movlw	255
  3964  000818  0100               	movlb	0	; () banked
  3965  00081A  1B86               	xorwf	___ftadd@f1& (0+255),f,b
  3966  00081C  0EFF               	movlw	255
  3967  00081E  0100               	movlb	0	; () banked
  3968  000820  1B87               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  3969  000822  0EFF               	movlw	255
  3970  000824  0100               	movlb	0	; () banked
  3971  000826  1B88               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  3972  000828  0E01               	movlw	1
  3973  00082A  0100               	movlb	0	; () banked
  3974  00082C  2786               	addwf	___ftadd@f1& (0+255),f,b
  3975  00082E  0E00               	movlw	0
  3976  000830  0100               	movlb	0	; () banked
  3977  000832  2387               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  3978  000834  0E00               	movlw	0
  3979  000836  0100               	movlb	0	; () banked
  3980  000838  2388               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  3981  00083A                     l1003:
  3982                           
  3983                           ; BSR set to: 0
  3984  00083A  0100               	movlb	0	; () banked
  3985  00083C  AD8F               	btfss	___ftadd@sign& (0+255),6,b
  3986  00083E  D013               	goto	l3336
  3987                           
  3988                           ; BSR set to: 0
  3989  000840  0EFF               	movlw	255
  3990  000842  0100               	movlb	0	; () banked
  3991  000844  1B89               	xorwf	___ftadd@f2& (0+255),f,b
  3992  000846  0EFF               	movlw	255
  3993  000848  0100               	movlb	0	; () banked
  3994  00084A  1B8A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3995  00084C  0EFF               	movlw	255
  3996  00084E  0100               	movlb	0	; () banked
  3997  000850  1B8B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3998  000852  0E01               	movlw	1
  3999  000854  0100               	movlb	0	; () banked
  4000  000856  2789               	addwf	___ftadd@f2& (0+255),f,b
  4001  000858  0E00               	movlw	0
  4002  00085A  0100               	movlb	0	; () banked
  4003  00085C  238A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4004  00085E  0E00               	movlw	0
  4005  000860  0100               	movlb	0	; () banked
  4006  000862  238B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4007  000864  D000               	goto	l3336
  4008  000866                     l3336:
  4009                           
  4010                           ; BSR set to: 0
  4011  000866  0E00               	movlw	0
  4012  000868  0100               	movlb	0	; () banked
  4013  00086A  6F8F               	movwf	___ftadd@sign& (0+255),b
  4014                           
  4015                           ; BSR set to: 0
  4016  00086C  0100               	movlb	0	; () banked
  4017  00086E  5186               	movf	___ftadd@f1& (0+255),w,b
  4018  000870  0100               	movlb	0	; () banked
  4019  000872  2789               	addwf	___ftadd@f2& (0+255),f,b
  4020  000874  0100               	movlb	0	; () banked
  4021  000876  5187               	movf	(___ftadd@f1+1)& (0+255),w,b
  4022  000878  0100               	movlb	0	; () banked
  4023  00087A  238A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4024  00087C  0100               	movlb	0	; () banked
  4025  00087E  5188               	movf	(___ftadd@f1+2)& (0+255),w,b
  4026  000880  0100               	movlb	0	; () banked
  4027  000882  238B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4028                           
  4029                           ; BSR set to: 0
  4030  000884  0100               	movlb	0	; () banked
  4031  000886  AF8B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4032  000888  D016               	goto	l3346
  4033                           
  4034                           ; BSR set to: 0
  4035  00088A  0EFF               	movlw	255
  4036  00088C  0100               	movlb	0	; () banked
  4037  00088E  1B89               	xorwf	___ftadd@f2& (0+255),f,b
  4038  000890  0EFF               	movlw	255
  4039  000892  0100               	movlb	0	; () banked
  4040  000894  1B8A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4041  000896  0EFF               	movlw	255
  4042  000898  0100               	movlb	0	; () banked
  4043  00089A  1B8B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4044  00089C  0E01               	movlw	1
  4045  00089E  0100               	movlb	0	; () banked
  4046  0008A0  2789               	addwf	___ftadd@f2& (0+255),f,b
  4047  0008A2  0E00               	movlw	0
  4048  0008A4  0100               	movlb	0	; () banked
  4049  0008A6  238A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4050  0008A8  0E00               	movlw	0
  4051  0008AA  0100               	movlb	0	; () banked
  4052  0008AC  238B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4053                           
  4054                           ; BSR set to: 0
  4055  0008AE  0E01               	movlw	1
  4056  0008B0  0100               	movlb	0	; () banked
  4057  0008B2  6F8F               	movwf	___ftadd@sign& (0+255),b
  4058  0008B4  D000               	goto	l3346
  4059  0008B6                     l3346:
  4060                           
  4061                           ; BSR set to: 0
  4062  0008B6  C089  F060         	movff	___ftadd@f2,___ftpack@arg
  4063  0008BA  C08A  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  4064  0008BE  C08B  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  4065  0008C2  C091  F063         	movff	___ftadd@exp1,___ftpack@exp
  4066  0008C6  C08F  F064         	movff	___ftadd@sign,___ftpack@sign
  4067  0008CA  EC57  F006         	call	___ftpack	;wreg free
  4068  0008CE  C060  F086         	movff	?___ftpack,?___ftadd
  4069  0008D2  C061  F087         	movff	?___ftpack+1,?___ftadd+1
  4070  0008D6  C062  F088         	movff	?___ftpack+2,?___ftadd+2
  4071  0008DA  D000               	goto	l980
  4072  0008DC                     l980:
  4073  0008DC  0012               	return		;funcret
  4074  0008DE                     __end_of___ftadd:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           intcon2	equ	0xFF1
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf2	equ	0xFDF
  4087                           fsr2h	equ	0xFDA
  4088                           fsr2l	equ	0xFD9
  4089                           status	equ	0xFD8
  4090                           
  4091 ;; *************** function ___ftneg *****************
  4092 ;; Defined at:
  4093 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  f1              3    0[BANK0 ] float 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  3    0[BANK0 ] float 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4107 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;Total ram usage:        3 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    6
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_calculatePID
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text22
  4122  00175E                     __ptext22:
  4123                           	opt stack 0
  4124  00175E                     ___ftneg:
  4125                           	opt stack 23
  4126                           
  4127                           ;incstack = 0
  4128  00175E  0100               	movlb	0	; () banked
  4129  001760  5160               	movf	___ftneg@f1& (0+255),w,b
  4130  001762  0100               	movlb	0	; () banked
  4131  001764  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  4132  001766  0100               	movlb	0	; () banked
  4133  001768  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  4134  00176A  B4D8               	btfsc	status,2,c
  4135  00176C  D009               	goto	l1036
  4136                           
  4137                           ; BSR set to: 0
  4138  00176E  0E00               	movlw	0
  4139  001770  0100               	movlb	0	; () banked
  4140  001772  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  4141  001774  0E00               	movlw	0
  4142  001776  0100               	movlb	0	; () banked
  4143  001778  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  4144  00177A  0E80               	movlw	128
  4145  00177C  0100               	movlb	0	; () banked
  4146  00177E  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  4147  001780                     l1036:
  4148                           
  4149                           ; BSR set to: 0
  4150  001780  C060  F060         	movff	___ftneg@f1,?___ftneg
  4151  001784  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  4152  001788  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  4153                           
  4154                           ; BSR set to: 0
  4155  00178C  0012               	return		;funcret
  4156  00178E                     __end_of___ftneg:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           intcon2	equ	0xFF1
  4166                           postinc0	equ	0xFEE
  4167                           wreg	equ	0xFE8
  4168                           indf2	equ	0xFDF
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173 ;; *************** function ___ftge *****************
  4174 ;; Defined at:
  4175 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  ff1             3    0[BANK0 ] float 
  4178 ;;  ff2             3    3[BANK0 ] float 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;		None               void
  4183 ;; Registers used:
  4184 ;;		wreg, status,2, status,0
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4190 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;Total ram usage:        9 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    6
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_calculatePID
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text23
  4205  000EE8                     __ptext23:
  4206                           	opt stack 0
  4207  000EE8                     ___ftge:
  4208                           	opt stack 23
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;incstack = 0
  4212  000EE8  0100               	movlb	0	; () banked
  4213  000EEA  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4214  000EEC  D01E               	goto	l3562
  4215                           
  4216                           ; BSR set to: 0
  4217  000EEE  C060  F066         	movff	___ftge@ff1,??___ftge
  4218  000EF2  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  4219  000EF6  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  4220  000EFA  0100               	movlb	0	; () banked
  4221  000EFC  1F66               	comf	??___ftge& (0+255),f,b
  4222  000EFE  1F67               	comf	(??___ftge+1)& (0+255),f,b
  4223  000F00  1F68               	comf	(??___ftge+2)& (0+255),f,b
  4224  000F02  2B66               	incf	??___ftge& (0+255),f,b
  4225  000F04  0E00               	movlw	0
  4226  000F06  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  4227  000F08  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  4228  000F0A  0E00               	movlw	0
  4229  000F0C  0100               	movlb	0	; () banked
  4230  000F0E  2566               	addwf	??___ftge& (0+255),w,b
  4231  000F10  0100               	movlb	0	; () banked
  4232  000F12  6F60               	movwf	___ftge@ff1& (0+255),b
  4233  000F14  0E00               	movlw	0
  4234  000F16  0100               	movlb	0	; () banked
  4235  000F18  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  4236  000F1A  0100               	movlb	0	; () banked
  4237  000F1C  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  4238  000F1E  0E80               	movlw	128
  4239  000F20  0100               	movlb	0	; () banked
  4240  000F22  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  4241  000F24  0100               	movlb	0	; () banked
  4242  000F26  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  4243  000F28  D000               	goto	l3562
  4244  000F2A                     l3562:
  4245                           
  4246                           ; BSR set to: 0
  4247  000F2A  0100               	movlb	0	; () banked
  4248  000F2C  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4249  000F2E  D01E               	goto	l3566
  4250                           
  4251                           ; BSR set to: 0
  4252  000F30  C063  F066         	movff	___ftge@ff2,??___ftge
  4253  000F34  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  4254  000F38  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  4255  000F3C  0100               	movlb	0	; () banked
  4256  000F3E  1F66               	comf	??___ftge& (0+255),f,b
  4257  000F40  1F67               	comf	(??___ftge+1)& (0+255),f,b
  4258  000F42  1F68               	comf	(??___ftge+2)& (0+255),f,b
  4259  000F44  2B66               	incf	??___ftge& (0+255),f,b
  4260  000F46  0E00               	movlw	0
  4261  000F48  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  4262  000F4A  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  4263  000F4C  0E00               	movlw	0
  4264  000F4E  0100               	movlb	0	; () banked
  4265  000F50  2566               	addwf	??___ftge& (0+255),w,b
  4266  000F52  0100               	movlb	0	; () banked
  4267  000F54  6F63               	movwf	___ftge@ff2& (0+255),b
  4268  000F56  0E00               	movlw	0
  4269  000F58  0100               	movlb	0	; () banked
  4270  000F5A  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  4271  000F5C  0100               	movlb	0	; () banked
  4272  000F5E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  4273  000F60  0E80               	movlw	128
  4274  000F62  0100               	movlb	0	; () banked
  4275  000F64  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  4276  000F66  0100               	movlb	0	; () banked
  4277  000F68  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  4278  000F6A  D000               	goto	l3566
  4279  000F6C                     l3566:
  4280                           
  4281                           ; BSR set to: 0
  4282  000F6C  0E00               	movlw	0
  4283  000F6E  0100               	movlb	0	; () banked
  4284  000F70  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  4285  000F72  0E00               	movlw	0
  4286  000F74  0100               	movlb	0	; () banked
  4287  000F76  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4288  000F78  0E80               	movlw	128
  4289  000F7A  0100               	movlb	0	; () banked
  4290  000F7C  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4291                           
  4292                           ; BSR set to: 0
  4293  000F7E  0E00               	movlw	0
  4294  000F80  0100               	movlb	0	; () banked
  4295  000F82  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  4296  000F84  0E00               	movlw	0
  4297  000F86  0100               	movlb	0	; () banked
  4298  000F88  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4299  000F8A  0E80               	movlw	128
  4300  000F8C  0100               	movlb	0	; () banked
  4301  000F8E  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4302  000F90  0100               	movlb	0	; () banked
  4303  000F92  5163               	movf	___ftge@ff2& (0+255),w,b
  4304  000F94  0100               	movlb	0	; () banked
  4305  000F96  5D60               	subwf	___ftge@ff1& (0+255),w,b
  4306  000F98  0100               	movlb	0	; () banked
  4307  000F9A  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  4308  000F9C  0100               	movlb	0	; () banked
  4309  000F9E  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4310  000FA0  0100               	movlb	0	; () banked
  4311  000FA2  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  4312  000FA4  0100               	movlb	0	; () banked
  4313  000FA6  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4314  000FA8  B0D8               	btfsc	status,0,c
  4315  000FAA  D002               	goto	l3572
  4316                           
  4317                           ; BSR set to: 0
  4318  000FAC  90D8               	bcf	status,0,c
  4319  000FAE  D002               	goto	l1020
  4320  000FB0                     l3572:
  4321                           
  4322                           ; BSR set to: 0
  4323  000FB0  80D8               	bsf	status,0,c
  4324                           
  4325                           ; BSR set to: 0
  4326  000FB2  D000               	goto	l1020
  4327  000FB4                     l1020:
  4328                           
  4329                           ; BSR set to: 0
  4330  000FB4  0012               	return		;funcret
  4331  000FB6                     __end_of___ftge:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           intcon	equ	0xFF2
  4340                           intcon2	equ	0xFF1
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           indf2	equ	0xFDF
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function ___ftdiv *****************
  4349 ;; Defined at:
  4350 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  f1              3    8[BANK0 ] float 
  4353 ;;  f2              3   11[BANK0 ] float 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  f3              3   18[BANK0 ] float 
  4356 ;;  sign            1   22[BANK0 ] unsigned char 
  4357 ;;  exp             1   21[BANK0 ] unsigned char 
  4358 ;;  cntr            1   17[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  3    8[BANK0 ] float 
  4361 ;; Registers used:
  4362 ;;		wreg, status,2, status,0, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4368 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;Total ram usage:       15 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    7
  4375 ;; This function calls:
  4376 ;;		___ftpack
  4377 ;; This function is called by:
  4378 ;;		_calculatePID
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text24
  4383  000A3A                     __ptext24:
  4384                           	opt stack 0
  4385  000A3A                     ___ftdiv:
  4386                           	opt stack 22
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;incstack = 0
  4390  000A3A  C06A  F06E         	movff	___ftdiv@f1+2,??___ftdiv
  4391  000A3E  0100               	movlb	0	; () banked
  4392  000A40  6B6F               	clrf	(??___ftdiv+1)& (0+255),b
  4393  000A42  6B70               	clrf	(??___ftdiv+2)& (0+255),b
  4394  000A44  0100               	movlb	0	; () banked
  4395  000A46  3569               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  4396  000A48  0100               	movlb	0	; () banked
  4397  000A4A  376E               	rlcf	??___ftdiv& (0+255),f,b
  4398  000A4C  E301               	bnc	u2941
  4399  000A4E  816F               	bsf	(??___ftdiv+1)& (0+255),0,b
  4400  000A50                     u2941:
  4401  000A50  0100               	movlb	0	; () banked
  4402  000A52  516E               	movf	??___ftdiv& (0+255),w,b
  4403  000A54  0100               	movlb	0	; () banked
  4404  000A56  6F75               	movwf	___ftdiv@exp& (0+255),b
  4405  000A58  0100               	movlb	0	; () banked
  4406  000A5A  5175               	movf	___ftdiv@exp& (0+255),w,b
  4407  000A5C  A4D8               	btfss	status,2,c
  4408  000A5E  D002               	goto	l3462
  4409  000A60  D014               	goto	l3464
  4410                           
  4411                           ; BSR set to: 0
  4412                           
  4413                           ; BSR set to: 0
  4414  000A62  D08B               	goto	l1011
  4415  000A64                     l3462:
  4416                           
  4417                           ; BSR set to: 0
  4418  000A64  C06D  F06E         	movff	___ftdiv@f2+2,??___ftdiv
  4419  000A68  0100               	movlb	0	; () banked
  4420  000A6A  6B6F               	clrf	(??___ftdiv+1)& (0+255),b
  4421  000A6C  6B70               	clrf	(??___ftdiv+2)& (0+255),b
  4422  000A6E  0100               	movlb	0	; () banked
  4423  000A70  356C               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  4424  000A72  0100               	movlb	0	; () banked
  4425  000A74  376E               	rlcf	??___ftdiv& (0+255),f,b
  4426  000A76  E301               	bnc	u2961
  4427  000A78  816F               	bsf	(??___ftdiv+1)& (0+255),0,b
  4428  000A7A                     u2961:
  4429  000A7A  0100               	movlb	0	; () banked
  4430  000A7C  516E               	movf	??___ftdiv& (0+255),w,b
  4431  000A7E  0100               	movlb	0	; () banked
  4432  000A80  6F76               	movwf	___ftdiv@sign& (0+255),b
  4433  000A82  0100               	movlb	0	; () banked
  4434  000A84  5176               	movf	___ftdiv@sign& (0+255),w,b
  4435  000A86  A4D8               	btfss	status,2,c
  4436  000A88  D00A               	goto	l3468
  4437  000A8A                     l3464:
  4438                           
  4439                           ; BSR set to: 0
  4440  000A8A  0E00               	movlw	0
  4441  000A8C  0100               	movlb	0	; () banked
  4442  000A8E  6F68               	movwf	?___ftdiv& (0+255),b
  4443  000A90  0E00               	movlw	0
  4444  000A92  0100               	movlb	0	; () banked
  4445  000A94  6F69               	movwf	(?___ftdiv+1)& (0+255),b
  4446  000A96  0E00               	movlw	0
  4447  000A98  0100               	movlb	0	; () banked
  4448  000A9A  6F6A               	movwf	(?___ftdiv+2)& (0+255),b
  4449                           
  4450                           ; BSR set to: 0
  4451  000A9C  D06E               	goto	l1011
  4452  000A9E                     l3468:
  4453                           
  4454                           ; BSR set to: 0
  4455  000A9E  0E00               	movlw	0
  4456  000AA0  0100               	movlb	0	; () banked
  4457  000AA2  6F72               	movwf	___ftdiv@f3& (0+255),b
  4458  000AA4  0E00               	movlw	0
  4459  000AA6  0100               	movlb	0	; () banked
  4460  000AA8  6F73               	movwf	(___ftdiv@f3+1)& (0+255),b
  4461  000AAA  0E00               	movlw	0
  4462  000AAC  0100               	movlb	0	; () banked
  4463  000AAE  6F74               	movwf	(___ftdiv@f3+2)& (0+255),b
  4464                           
  4465                           ; BSR set to: 0
  4466  000AB0  0100               	movlb	0	; () banked
  4467  000AB2  5176               	movf	___ftdiv@sign& (0+255),w,b
  4468  000AB4  0F89               	addlw	137
  4469  000AB6  0100               	movlb	0	; () banked
  4470  000AB8  5F75               	subwf	___ftdiv@exp& (0+255),f,b
  4471                           
  4472                           ; BSR set to: 0
  4473  000ABA  C06A  F076         	movff	___ftdiv@f1+2,___ftdiv@sign
  4474                           
  4475                           ; BSR set to: 0
  4476  000ABE  0100               	movlb	0	; () banked
  4477  000AC0  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4478  000AC2  0100               	movlb	0	; () banked
  4479  000AC4  1B76               	xorwf	___ftdiv@sign& (0+255),f,b
  4480                           
  4481                           ; BSR set to: 0
  4482  000AC6  0E80               	movlw	128
  4483  000AC8  0100               	movlb	0	; () banked
  4484  000ACA  1776               	andwf	___ftdiv@sign& (0+255),f,b
  4485                           
  4486                           ; BSR set to: 0
  4487  000ACC  0100               	movlb	0	; () banked
  4488  000ACE  8F69               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  4489                           
  4490                           ; BSR set to: 0
  4491  000AD0  0EFF               	movlw	255
  4492  000AD2  0100               	movlb	0	; () banked
  4493  000AD4  1768               	andwf	___ftdiv@f1& (0+255),f,b
  4494  000AD6  0EFF               	movlw	255
  4495  000AD8  0100               	movlb	0	; () banked
  4496  000ADA  1769               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  4497  000ADC  0E00               	movlw	0
  4498  000ADE  0100               	movlb	0	; () banked
  4499  000AE0  176A               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  4500                           
  4501                           ; BSR set to: 0
  4502  000AE2  0100               	movlb	0	; () banked
  4503  000AE4  8F6C               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  4504                           
  4505                           ; BSR set to: 0
  4506  000AE6  0EFF               	movlw	255
  4507  000AE8  0100               	movlb	0	; () banked
  4508  000AEA  176B               	andwf	___ftdiv@f2& (0+255),f,b
  4509  000AEC  0EFF               	movlw	255
  4510  000AEE  0100               	movlb	0	; () banked
  4511  000AF0  176C               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  4512  000AF2  0E00               	movlw	0
  4513  000AF4  0100               	movlb	0	; () banked
  4514  000AF6  176D               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  4515                           
  4516                           ; BSR set to: 0
  4517  000AF8  0E18               	movlw	24
  4518  000AFA  0100               	movlb	0	; () banked
  4519  000AFC  6F71               	movwf	___ftdiv@cntr& (0+255),b
  4520  000AFE  D000               	goto	l3488
  4521  000B00                     l3488:
  4522                           
  4523                           ; BSR set to: 0
  4524  000B00  0100               	movlb	0	; () banked
  4525  000B02  90D8               	bcf	status,0,c
  4526  000B04  3772               	rlcf	___ftdiv@f3& (0+255),f,b
  4527  000B06  3773               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  4528  000B08  3774               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  4529                           
  4530                           ; BSR set to: 0
  4531  000B0A  0100               	movlb	0	; () banked
  4532  000B0C  516B               	movf	___ftdiv@f2& (0+255),w,b
  4533  000B0E  0100               	movlb	0	; () banked
  4534  000B10  5D68               	subwf	___ftdiv@f1& (0+255),w,b
  4535  000B12  0100               	movlb	0	; () banked
  4536  000B14  516C               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4537  000B16  0100               	movlb	0	; () banked
  4538  000B18  5969               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  4539  000B1A  0100               	movlb	0	; () banked
  4540  000B1C  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4541  000B1E  0100               	movlb	0	; () banked
  4542  000B20  596A               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  4543  000B22  A0D8               	btfss	status,0,c
  4544  000B24  D00E               	goto	l1014
  4545                           
  4546                           ; BSR set to: 0
  4547  000B26  0100               	movlb	0	; () banked
  4548  000B28  516B               	movf	___ftdiv@f2& (0+255),w,b
  4549  000B2A  0100               	movlb	0	; () banked
  4550  000B2C  5F68               	subwf	___ftdiv@f1& (0+255),f,b
  4551  000B2E  0100               	movlb	0	; () banked
  4552  000B30  516C               	movf	(___ftdiv@f2+1)& (0+255),w,b
  4553  000B32  0100               	movlb	0	; () banked
  4554  000B34  5B69               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  4555  000B36  0100               	movlb	0	; () banked
  4556  000B38  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
  4557  000B3A  0100               	movlb	0	; () banked
  4558  000B3C  5B6A               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  4559                           
  4560                           ; BSR set to: 0
  4561  000B3E  0100               	movlb	0	; () banked
  4562  000B40  8172               	bsf	___ftdiv@f3& (0+255),0,b
  4563  000B42                     l1014:
  4564                           
  4565                           ; BSR set to: 0
  4566  000B42  0100               	movlb	0	; () banked
  4567  000B44  90D8               	bcf	status,0,c
  4568  000B46  3768               	rlcf	___ftdiv@f1& (0+255),f,b
  4569  000B48  3769               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  4570  000B4A  376A               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  4571                           
  4572                           ; BSR set to: 0
  4573  000B4C  0100               	movlb	0	; () banked
  4574  000B4E  2F71               	decfsz	___ftdiv@cntr& (0+255),f,b
  4575  000B50  D7D7               	goto	l3488
  4576  000B52  D000               	goto	l3498
  4577  000B54                     l3498:
  4578                           
  4579                           ; BSR set to: 0
  4580  000B54  C072  F060         	movff	___ftdiv@f3,___ftpack@arg
  4581  000B58  C073  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4582  000B5C  C074  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4583  000B60  C075  F063         	movff	___ftdiv@exp,___ftpack@exp
  4584  000B64  C076  F064         	movff	___ftdiv@sign,___ftpack@sign
  4585  000B68  EC57  F006         	call	___ftpack	;wreg free
  4586  000B6C  C060  F068         	movff	?___ftpack,?___ftdiv
  4587  000B70  C061  F069         	movff	?___ftpack+1,?___ftdiv+1
  4588  000B74  C062  F06A         	movff	?___ftpack+2,?___ftdiv+2
  4589  000B78  D000               	goto	l1011
  4590  000B7A                     l1011:
  4591  000B7A  0012               	return		;funcret
  4592  000B7C                     __end_of___ftdiv:
  4593                           	opt stack 0
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           intcon2	equ	0xFF1
  4602                           postinc0	equ	0xFEE
  4603                           wreg	equ	0xFE8
  4604                           indf2	equ	0xFDF
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _SendSPI1 *****************
  4610 ;; Defined at:
  4611 ;;		line 36 in file "SPISlave.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  data            1    wreg     unsigned char 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  data            1    1[BANK0 ] unsigned char 
  4616 ;;  temp            1    0[BANK0 ] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;		None               void
  4619 ;; Registers used:
  4620 ;;		wreg
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        2 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    6
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text25
  4641  001928                     __ptext25:
  4642                           	opt stack 0
  4643  001928                     _SendSPI1:
  4644                           	opt stack 24
  4645                           
  4646                           ;incstack = 0
  4647                           ;SendSPI1@data stored from wreg
  4648  001928  0100               	movlb	0	; () banked
  4649  00192A  6F61               	movwf	SendSPI1@data& (0+255),b
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;SPISlave.c: 38: SSP1BUF = data;
  4653  00192C  C061  FFC9         	movff	SendSPI1@data,4041	;volatile
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;SPISlave.c: 39: unsigned char temp;
  4657                           ;SPISlave.c: 40: PIR1bits.SSP1IF = 0;
  4658  001930  969E               	bcf	3998,3,c	;volatile
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;SPISlave.c: 41: temp = SSP2BUF;
  4662  001932  CF66 F060          	movff	3942,SendSPI1@temp	;volatile
  4663                           
  4664                           ;SPISlave.c: 42: while (!PIR1bits.SSP1IF);
  4665  001936  D000               	goto	l254
  4666  001938                     l254:
  4667  001938  A69E               	btfss	3998,3,c	;volatile
  4668  00193A  D7FE               	goto	l254
  4669                           
  4670                           ;SPISlave.c: 43: SSP2CON1bits.SSPOV2 = 0;
  4671  00193C  9C63               	bcf	3939,6,c	;volatile
  4672                           
  4673                           ;SPISlave.c: 44: PIR1bits.SSP1IF = 0;
  4674  00193E  969E               	bcf	3998,3,c	;volatile
  4675  001940  0012               	return		;funcret
  4676  001942                     __end_of_SendSPI1:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           intcon	equ	0xFF2
  4685                           intcon2	equ	0xFF1
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           indf2	equ	0xFDF
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function _SPIReassembleDouble *****************
  4694 ;; Defined at:
  4695 ;;		line 71 in file "SPISlave.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  dub             3    3[BANK0 ] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  3    0[BANK0 ] unsigned char 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4709 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;Total ram usage:        6 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    6
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text26
  4724  0015BA                     __ptext26:
  4725                           	opt stack 0
  4726  0015BA                     _SPIReassembleDouble:
  4727                           	opt stack 24
  4728                           
  4729                           ;SPISlave.c: 73: double dub;
  4730                           ;SPISlave.c: 74: DoublePtr = (unsigned char*) &dub;
  4731                           
  4732                           ;incstack = 0
  4733  0015BA  0E63               	movlw	low SPIReassembleDouble@dub
  4734  0015BC  6E35               	movwf	_DoublePtr,c
  4735  0015BE  0E00               	movlw	high SPIReassembleDouble@dub
  4736  0015C0  6E36               	movwf	_DoublePtr+1,c
  4737                           
  4738                           ;SPISlave.c: 75: DoublePtr[0] = DoubleSPIS[0];
  4739  0015C2  C035  FFD9         	movff	_DoublePtr,fsr2l
  4740  0015C6  C036  FFDA         	movff	_DoublePtr+1,fsr2h
  4741  0015CA  C02B  FFDF         	movff	_DoubleSPIS,indf2
  4742                           
  4743                           ;SPISlave.c: 76: DoublePtr[1] = DoubleSPIS[1];
  4744  0015CE  EE20 F001          	lfsr	2,1
  4745  0015D2  5035               	movf	_DoublePtr,w,c
  4746  0015D4  26D9               	addwf	fsr2l,f,c
  4747  0015D6  5036               	movf	_DoublePtr+1,w,c
  4748  0015D8  22DA               	addwfc	fsr2h,f,c
  4749  0015DA  C02C  FFDF         	movff	_DoubleSPIS+1,indf2
  4750                           
  4751                           ;SPISlave.c: 77: DoublePtr[2] = DoubleSPIS[2];
  4752  0015DE  EE20 F002          	lfsr	2,2
  4753  0015E2  5035               	movf	_DoublePtr,w,c
  4754  0015E4  26D9               	addwf	fsr2l,f,c
  4755  0015E6  5036               	movf	_DoublePtr+1,w,c
  4756  0015E8  22DA               	addwfc	fsr2h,f,c
  4757  0015EA  C02D  FFDF         	movff	_DoubleSPIS+2,indf2
  4758                           
  4759                           ;SPISlave.c: 79: return dub;
  4760  0015EE  C063  F060         	movff	SPIReassembleDouble@dub,?_SPIReassembleDouble
  4761  0015F2  C064  F061         	movff	SPIReassembleDouble@dub+1,?_SPIReassembleDouble+1
  4762  0015F6  C065  F062         	movff	SPIReassembleDouble@dub+2,?_SPIReassembleDouble+2
  4763  0015FA  D000               	goto	l274
  4764  0015FC                     l274:
  4765  0015FC  0012               	return		;funcret
  4766  0015FE                     __end_of_SPIReassembleDouble:
  4767                           	opt stack 0
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           intcon2	equ	0xFF1
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           indf2	equ	0xFDF
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function _SPIDisassembleDouble *****************
  4784 ;; Defined at:
  4785 ;;		line 54 in file "SPISlave.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  dub             3    2[BANK0 ] unsigned char 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;		None               void
  4792 ;; Registers used:
  4793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:        3 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    7
  4806 ;; This function calls:
  4807 ;;		_GenerateChecksum
  4808 ;; This function is called by:
  4809 ;;		_main
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text27
  4814  0016BC                     __ptext27:
  4815                           	opt stack 0
  4816  0016BC                     _SPIDisassembleDouble:
  4817                           	opt stack 23
  4818                           
  4819                           ;SPISlave.c: 56: DoublePtr = (unsigned char*) &dub;
  4820                           
  4821                           ;incstack = 0
  4822  0016BC  0E62               	movlw	low SPIDisassembleDouble@dub
  4823  0016BE  6E35               	movwf	_DoublePtr,c
  4824  0016C0  0E00               	movlw	high SPIDisassembleDouble@dub
  4825  0016C2  6E36               	movwf	_DoublePtr+1,c
  4826                           
  4827                           ;SPISlave.c: 57: DoubleSPIS[0] = DoublePtr[0];
  4828  0016C4  C035  FFD9         	movff	_DoublePtr,fsr2l
  4829  0016C8  C036  FFDA         	movff	_DoublePtr+1,fsr2h
  4830  0016CC  50DF               	movf	indf2,w,c
  4831  0016CE  6E2B               	movwf	_DoubleSPIS,c
  4832                           
  4833                           ;SPISlave.c: 58: DoubleSPIS[1] = DoublePtr[1];
  4834  0016D0  EE20 F001          	lfsr	2,1
  4835  0016D4  5035               	movf	_DoublePtr,w,c
  4836  0016D6  26D9               	addwf	fsr2l,f,c
  4837  0016D8  5036               	movf	_DoublePtr+1,w,c
  4838  0016DA  22DA               	addwfc	fsr2h,f,c
  4839  0016DC  50DF               	movf	indf2,w,c
  4840  0016DE  6E2C               	movwf	_DoubleSPIS+1,c
  4841                           
  4842                           ;SPISlave.c: 59: DoubleSPIS[2] = DoublePtr[2];
  4843  0016E0  EE20 F002          	lfsr	2,2
  4844  0016E4  5035               	movf	_DoublePtr,w,c
  4845  0016E6  26D9               	addwf	fsr2l,f,c
  4846  0016E8  5036               	movf	_DoublePtr+1,w,c
  4847  0016EA  22DA               	addwfc	fsr2h,f,c
  4848  0016EC  50DF               	movf	indf2,w,c
  4849  0016EE  6E2D               	movwf	_DoubleSPIS+2,c
  4850                           
  4851                           ;SPISlave.c: 60: DoubleSPIS[3] = GenerateChecksum();
  4852  0016F0  ECFF  F00A         	call	_GenerateChecksum	;wreg free
  4853  0016F4  6E2E               	movwf	_DoubleSPIS+3,c
  4854  0016F6  0012               	return		;funcret
  4855  0016F8                     __end_of_SPIDisassembleDouble:
  4856                           	opt stack 0
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           intcon	equ	0xFF2
  4864                           intcon2	equ	0xFF1
  4865                           postinc0	equ	0xFEE
  4866                           wreg	equ	0xFE8
  4867                           indf2	equ	0xFDF
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function _GenerateChecksum *****************
  4873 ;; Defined at:
  4874 ;;		line 63 in file "SPISlave.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  y               1    1[BANK0 ] unsigned char 
  4879 ;;  sum             1    0[BANK0 ] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      unsigned char 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;Total ram usage:        2 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    6
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_SPIDisassembleDouble
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text28
  4904  0015FE                     __ptext28:
  4905                           	opt stack 0
  4906  0015FE                     _GenerateChecksum:
  4907                           	opt stack 23
  4908                           
  4909                           ;SPISlave.c: 65: unsigned char y, sum = 0;
  4910                           
  4911                           ;incstack = 0
  4912  0015FE  0E00               	movlw	0
  4913  001600  0100               	movlb	0	; () banked
  4914  001602  6F60               	movwf	GenerateChecksum@sum& (0+255),b
  4915                           
  4916                           ;SPISlave.c: 66: for (y = 0; y != 3; y++)
  4917  001604  0E00               	movlw	0
  4918  001606  0100               	movlb	0	; () banked
  4919  001608  6F61               	movwf	GenerateChecksum@y& (0+255),b
  4920  00160A                     l3408:
  4921                           
  4922                           ; BSR set to: 0
  4923  00160A  0E03               	movlw	3
  4924  00160C  0100               	movlb	0	; () banked
  4925  00160E  1961               	xorwf	GenerateChecksum@y& (0+255),w,b
  4926  001610  B4D8               	btfsc	status,2,c
  4927  001612  D011               	goto	l3418
  4928  001614  D001               	goto	l3412
  4929                           
  4930                           ; BSR set to: 0
  4931  001616  D00F               	goto	l3418
  4932  001618                     l3412:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;SPISlave.c: 67: sum += DoubleSPIS[y];
  4936  001618  0100               	movlb	0	; () banked
  4937  00161A  5161               	movf	GenerateChecksum@y& (0+255),w,b
  4938  00161C  0D01               	mullw	1
  4939  00161E  0E2B               	movlw	low _DoubleSPIS
  4940  001620  24F3               	addwf	prodl,w,c
  4941  001622  6ED9               	movwf	fsr2l,c
  4942  001624  0E00               	movlw	high _DoubleSPIS
  4943  001626  20F4               	addwfc	prodh,w,c
  4944  001628  6EDA               	movwf	fsr2h,c
  4945  00162A  50DF               	movf	indf2,w,c
  4946  00162C  0100               	movlb	0	; () banked
  4947  00162E  2760               	addwf	GenerateChecksum@sum& (0+255),f,b
  4948                           
  4949                           ; BSR set to: 0
  4950  001630  0100               	movlb	0	; () banked
  4951  001632  2B61               	incf	GenerateChecksum@y& (0+255),f,b
  4952  001634  D7EA               	goto	l3408
  4953  001636                     l3418:
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;SPISlave.c: 68: return sum;
  4957  001636  0100               	movlb	0	; () banked
  4958  001638  5160               	movf	GenerateChecksum@sum& (0+255),w,b
  4959  00163A  D000               	goto	l271
  4960  00163C                     l271:
  4961                           
  4962                           ; BSR set to: 0
  4963  00163C  0012               	return		;funcret
  4964  00163E                     __end_of_GenerateChecksum:
  4965                           	opt stack 0
  4966                           tblptru	equ	0xFF8
  4967                           tblptrh	equ	0xFF7
  4968                           tblptrl	equ	0xFF6
  4969                           tablat	equ	0xFF5
  4970                           prodh	equ	0xFF4
  4971                           prodl	equ	0xFF3
  4972                           intcon	equ	0xFF2
  4973                           intcon2	equ	0xFF1
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           indf2	equ	0xFDF
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function _ReceiveSPI1 *****************
  4982 ;; Defined at:
  4983 ;;		line 47 in file "SPISlave.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      unsigned char 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;Total ram usage:        0 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    6
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_main
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text29
  5012  0019B8                     __ptext29:
  5013                           	opt stack 0
  5014  0019B8                     _ReceiveSPI1:
  5015                           	opt stack 24
  5016                           
  5017                           ;SPISlave.c: 49: SSP1BUF = 0x00;
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;incstack = 0
  5021  0019B8  0E00               	movlw	0
  5022  0019BA  6EC9               	movwf	4041,c	;volatile
  5023                           
  5024                           ;SPISlave.c: 50: while (SSP1STATbits.BF == 0);
  5025  0019BC  D000               	goto	l260
  5026  0019BE                     l260:
  5027  0019BE  A0C7               	btfss	4039,0,c	;volatile
  5028  0019C0  D7FE               	goto	l260
  5029                           
  5030                           ;SPISlave.c: 51: return SSP1BUF;
  5031  0019C2  50C9               	movf	4041,w,c	;volatile
  5032  0019C4  D000               	goto	l263
  5033  0019C6                     l263:
  5034  0019C6  0012               	return		;funcret
  5035  0019C8                     __end_of_ReceiveSPI1:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           intcon	equ	0xFF2
  5044                           intcon2	equ	0xFF1
  5045                           postinc0	equ	0xFEE
  5046                           wreg	equ	0xFE8
  5047                           indf2	equ	0xFDF
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _ReadRTDpos *****************
  5053 ;; Defined at:
  5054 ;;		line 39 in file "ResolverToDigital.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  FullPosition    2    8[BANK0 ] unsigned int 
  5059 ;;  helloworld      2    0        unsigned int 
  5060 ;;  x               1   10[BANK0 ] unsigned char 
  5061 ;;  LowPosition     1    7[BANK0 ] unsigned char 
  5062 ;;  HighPosition    1    6[BANK0 ] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  2    1[BANK0 ] unsigned int 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5072 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;Total ram usage:       10 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    7
  5079 ;; This function calls:
  5080 ;;		_Delay10TCYx
  5081 ;; This function is called by:
  5082 ;;		_main
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text30
  5087  0012FC                     __ptext30:
  5088                           	opt stack 0
  5089  0012FC                     _ReadRTDpos:
  5090                           	opt stack 23
  5091                           
  5092                           ;ResolverToDigital.c: 41: unsigned char x;
  5093                           ;ResolverToDigital.c: 42: unsigned int FullPosition, helloworld;
  5094                           ;ResolverToDigital.c: 43: unsigned char HighPosition, LowPosition;
  5095                           ;ResolverToDigital.c: 48: {
  5096                           ;ResolverToDigital.c: 49: PORTEbits.RE1 = 1;
  5097                           
  5098                           ;incstack = 0
  5099  0012FC  8284               	bsf	3972,1,c	;volatile
  5100                           
  5101                           ;ResolverToDigital.c: 50: PORTEbits.RE0 = 0;
  5102  0012FE  9084               	bcf	3972,0,c	;volatile
  5103                           
  5104                           ;ResolverToDigital.c: 51: for (x = 0; x < 8; x++)
  5105  001300  0E00               	movlw	0
  5106  001302  0100               	movlb	0	; () banked
  5107  001304  6F6A               	movwf	ReadRTDpos@x& (0+255),b
  5108  001306  D004               	goto	l3700
  5109                           
  5110                           ; BSR set to: 0
  5111                           
  5112                           ; BSR set to: 0
  5113  001308  D007               	goto	l185
  5114  00130A                     l184:
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;ResolverToDigital.c: 52: __nop();
  5118  00130A  F000               	nop	
  5119  00130C  0100               	movlb	0	; () banked
  5120  00130E  2B6A               	incf	ReadRTDpos@x& (0+255),f,b
  5121  001310                     l3700:
  5122                           
  5123                           ; BSR set to: 0
  5124  001310  0E07               	movlw	7
  5125  001312  0100               	movlb	0	; () banked
  5126  001314  656A               	cpfsgt	ReadRTDpos@x& (0+255),b
  5127  001316  D7F9               	goto	l184
  5128  001318                     l185:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;ResolverToDigital.c: 53: PORTEbits.RE2 = 1;
  5132  001318  8484               	bsf	3972,2,c	;volatile
  5133                           
  5134                           ;ResolverToDigital.c: 54: PORTEbits.RE2 = 0;
  5135  00131A  9484               	bcf	3972,2,c	;volatile
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;ResolverToDigital.c: 55: Delay10TCYx(1);
  5139  00131C  0E01               	movlw	1
  5140  00131E  ECAC  F00C         	call	_Delay10TCYx
  5141                           
  5142                           ;ResolverToDigital.c: 56: HighPosition = PORTH;
  5143  001322  CF87 F066          	movff	3975,ReadRTDpos@HighPosition	;volatile
  5144                           
  5145                           ;ResolverToDigital.c: 57: LowPosition = PORTD;
  5146  001326  CF83 F067          	movff	3971,ReadRTDpos@LowPosition	;volatile
  5147                           
  5148                           ;ResolverToDigital.c: 58: PORTEbits.RE2 = 1;
  5149  00132A  8484               	bsf	3972,2,c	;volatile
  5150                           
  5151                           ;ResolverToDigital.c: 59: PORTEbits.RE0 = 1;
  5152  00132C  8084               	bsf	3972,0,c	;volatile
  5153                           
  5154                           ;ResolverToDigital.c: 60: FullPosition = LowPosition;
  5155  00132E  C067  F068         	movff	ReadRTDpos@LowPosition,ReadRTDpos@FullPosition
  5156  001332  0100               	movlb	0	; () banked
  5157  001334  6B69               	clrf	(ReadRTDpos@FullPosition+1)& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;ResolverToDigital.c: 61: FullPosition = FullPosition | ((HighPosition & 0x0F) << 8);
  5161  001336  C066  F063         	movff	ReadRTDpos@HighPosition,??_ReadRTDpos
  5162  00133A  0E0F               	movlw	15
  5163  00133C  0100               	movlb	0	; () banked
  5164  00133E  1763               	andwf	??_ReadRTDpos& (0+255),f,b
  5165  001340  0100               	movlb	0	; () banked
  5166  001342  5163               	movf	??_ReadRTDpos& (0+255),w,b
  5167  001344  0100               	movlb	0	; () banked
  5168  001346  6F65               	movwf	(??_ReadRTDpos+2)& (0+255),b
  5169  001348  6B64               	clrf	(??_ReadRTDpos+1)& (0+255),b
  5170  00134A  0100               	movlb	0	; () banked
  5171  00134C  5168               	movf	ReadRTDpos@FullPosition& (0+255),w,b
  5172  00134E  0100               	movlb	0	; () banked
  5173  001350  1164               	iorwf	(??_ReadRTDpos+1)& (0+255),w,b
  5174  001352  0100               	movlb	0	; () banked
  5175  001354  6F68               	movwf	ReadRTDpos@FullPosition& (0+255),b
  5176  001356  0100               	movlb	0	; () banked
  5177  001358  5169               	movf	(ReadRTDpos@FullPosition+1)& (0+255),w,b
  5178  00135A  0100               	movlb	0	; () banked
  5179  00135C  1165               	iorwf	(??_ReadRTDpos+2)& (0+255),w,b
  5180  00135E  0100               	movlb	0	; () banked
  5181  001360  6F69               	movwf	(ReadRTDpos@FullPosition+1)& (0+255),b
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;ResolverToDigital.c: 62: return FullPosition;
  5185  001362  C068  F061         	movff	ReadRTDpos@FullPosition,?_ReadRTDpos
  5186  001366  C069  F062         	movff	ReadRTDpos@FullPosition+1,?_ReadRTDpos+1
  5187  00136A  D000               	goto	l186
  5188  00136C                     l186:
  5189                           
  5190                           ; BSR set to: 0
  5191  00136C  0012               	return		;funcret
  5192  00136E                     __end_of_ReadRTDpos:
  5193                           	opt stack 0
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodh	equ	0xFF4
  5199                           prodl	equ	0xFF3
  5200                           intcon	equ	0xFF2
  5201                           intcon2	equ	0xFF1
  5202                           postinc0	equ	0xFEE
  5203                           wreg	equ	0xFE8
  5204                           indf2	equ	0xFDF
  5205                           fsr2h	equ	0xFDA
  5206                           fsr2l	equ	0xFD9
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function _Delay10TCYx *****************
  5210 ;; Defined at:
  5211 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/pic18/d10tcyx.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  unit            1    wreg     unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  unit            1    0[BANK0 ] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		wreg
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;Total ram usage:        1 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    6
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_RTDInit
  5236 ;;		_ReadRTDpos
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text31
  5241  001958                     __ptext31:
  5242                           	opt stack 0
  5243  001958                     _Delay10TCYx:
  5244                           	opt stack 22
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;incstack = 0
  5248                           ;Delay10TCYx@unit stored from wreg
  5249  001958  0100               	movlb	0	; () banked
  5250  00195A  6F60               	movwf	Delay10TCYx@unit& (0+255),b
  5251  00195C                     
  5252                           ; BSR set to: 0
  5253  00195C  0E03               	movlw	3
  5254  00195E                     u3667:
  5255  00195E  2EE8               	decfsz	wreg,f,c
  5256  001960  D7FE               	goto	u3667
  5257  001962  F000               	nop	
  5258  001964  0100               	movlb	0	; () banked
  5259  001966  2F60               	decfsz	Delay10TCYx@unit& (0+255),f,b
  5260  001968  D7F9               	goto	l3234
  5261  00196A  D000               	goto	l835
  5262  00196C                     l835:
  5263                           
  5264                           ; BSR set to: 0
  5265  00196C  0012               	return		;funcret
  5266  00196E                     __end_of_Delay10TCYx:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           indf2	equ	0xFDF
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _RTD2Angle *****************
  5284 ;; Defined at:
  5285 ;;		line 97 in file "ResolverToDigital.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  RTDAngle        2   38[BANK0 ] unsigned int 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  3   38[BANK0 ] unsigned int 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5299 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;Total ram usage:        3 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    8
  5306 ;; This function calls:
  5307 ;;		___ftmul
  5308 ;;		___lwtoft
  5309 ;; This function is called by:
  5310 ;;		_main
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text32
  5315  00167E                     __ptext32:
  5316                           	opt stack 0
  5317  00167E                     _RTD2Angle:
  5318                           	opt stack 22
  5319                           
  5320                           ;ResolverToDigital.c: 99: return 0.087890625 * RTDAngle;
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;incstack = 0
  5324  00167E  C086  F068         	movff	RTD2Angle@RTDAngle,___lwtoft@c
  5325  001682  C087  F069         	movff	RTD2Angle@RTDAngle+1,___lwtoft@c+1
  5326  001686  ECDE  F00B         	call	___lwtoft	;wreg free
  5327  00168A  C068  F077         	movff	?___lwtoft,___ftmul@f1
  5328  00168E  C069  F078         	movff	?___lwtoft+1,___ftmul@f1+1
  5329  001692  C06A  F079         	movff	?___lwtoft+2,___ftmul@f1+2
  5330  001696  0E00               	movlw	0
  5331  001698  0100               	movlb	0	; () banked
  5332  00169A  6F7A               	movwf	___ftmul@f2& (0+255),b
  5333  00169C  0EB4               	movlw	180
  5334  00169E  0100               	movlb	0	; () banked
  5335  0016A0  6F7B               	movwf	(___ftmul@f2+1)& (0+255),b
  5336  0016A2  0E3D               	movlw	61
  5337  0016A4  0100               	movlb	0	; () banked
  5338  0016A6  6F7C               	movwf	(___ftmul@f2+2)& (0+255),b
  5339  0016A8  EC6F  F004         	call	___ftmul	;wreg free
  5340  0016AC  C077  F086         	movff	?___ftmul,?_RTD2Angle
  5341  0016B0  C078  F087         	movff	?___ftmul+1,?_RTD2Angle+1
  5342  0016B4  C079  F088         	movff	?___ftmul+2,?_RTD2Angle+2
  5343  0016B8  D000               	goto	l194
  5344  0016BA                     l194:
  5345  0016BA  0012               	return		;funcret
  5346  0016BC                     __end_of_RTD2Angle:
  5347                           	opt stack 0
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           prodh	equ	0xFF4
  5353                           prodl	equ	0xFF3
  5354                           intcon	equ	0xFF2
  5355                           intcon2	equ	0xFF1
  5356                           postinc0	equ	0xFEE
  5357                           wreg	equ	0xFE8
  5358                           indf2	equ	0xFDF
  5359                           fsr2h	equ	0xFDA
  5360                           fsr2l	equ	0xFD9
  5361                           status	equ	0xFD8
  5362                           
  5363 ;; *************** function ___lwtoft *****************
  5364 ;; Defined at:
  5365 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;  c               2    8[BANK0 ] unsigned int 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;		None
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  3    8[BANK0 ] float 
  5372 ;; Registers used:
  5373 ;;		wreg, status,2, status,0, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5379 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;Total ram usage:        3 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    7
  5386 ;; This function calls:
  5387 ;;		___ftpack
  5388 ;; This function is called by:
  5389 ;;		_RTD2Angle
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text33
  5394  0017BC                     __ptext33:
  5395                           	opt stack 0
  5396  0017BC                     ___lwtoft:
  5397                           	opt stack 22
  5398                           
  5399                           ;incstack = 0
  5400  0017BC  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  5401  0017C0  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  5402  0017C4  0100               	movlb	0	; () banked
  5403  0017C6  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  5404  0017C8  0E8E               	movlw	142
  5405  0017CA  0100               	movlb	0	; () banked
  5406  0017CC  6F63               	movwf	___ftpack@exp& (0+255),b
  5407  0017CE  0E00               	movlw	0
  5408  0017D0  0100               	movlb	0	; () banked
  5409  0017D2  6F64               	movwf	___ftpack@sign& (0+255),b
  5410  0017D4  EC57  F006         	call	___ftpack	;wreg free
  5411  0017D8  C060  F068         	movff	?___ftpack,?___lwtoft
  5412  0017DC  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  5413  0017E0  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  5414  0017E4  D000               	goto	l1176
  5415  0017E6                     l1176:
  5416  0017E6  0012               	return		;funcret
  5417  0017E8                     __end_of___lwtoft:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           intcon2	equ	0xFF1
  5427                           postinc0	equ	0xFEE
  5428                           wreg	equ	0xFE8
  5429                           indf2	equ	0xFDF
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function ___ftmul *****************
  5435 ;; Defined at:
  5436 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  f1              3   23[BANK0 ] float 
  5439 ;;  f2              3   26[BANK0 ] float 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  5442 ;;  sign            1   37[BANK0 ] unsigned char 
  5443 ;;  cntr            1   36[BANK0 ] unsigned char 
  5444 ;;  exp             1   32[BANK0 ] unsigned char 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  3   23[BANK0 ] float 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5454 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;Total ram usage:       15 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    7
  5461 ;; This function calls:
  5462 ;;		___ftpack
  5463 ;; This function is called by:
  5464 ;;		_calculatePID
  5465 ;;		_RTD2Angle
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           	psect	text34
  5470  0008DE                     __ptext34:
  5471                           	opt stack 0
  5472  0008DE                     ___ftmul:
  5473                           	opt stack 22
  5474                           
  5475                           ;incstack = 0
  5476  0008DE  C079  F07D         	movff	___ftmul@f1+2,??___ftmul
  5477  0008E2  0100               	movlb	0	; () banked
  5478  0008E4  6B7E               	clrf	(??___ftmul+1)& (0+255),b
  5479  0008E6  6B7F               	clrf	(??___ftmul+2)& (0+255),b
  5480  0008E8  0100               	movlb	0	; () banked
  5481  0008EA  3578               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5482  0008EC  0100               	movlb	0	; () banked
  5483  0008EE  377D               	rlcf	??___ftmul& (0+255),f,b
  5484  0008F0  E301               	bnc	u2991
  5485  0008F2  817E               	bsf	(??___ftmul+1)& (0+255),0,b
  5486  0008F4                     u2991:
  5487  0008F4  0100               	movlb	0	; () banked
  5488  0008F6  517D               	movf	??___ftmul& (0+255),w,b
  5489  0008F8  0100               	movlb	0	; () banked
  5490  0008FA  6F80               	movwf	___ftmul@exp& (0+255),b
  5491  0008FC  0100               	movlb	0	; () banked
  5492  0008FE  5180               	movf	___ftmul@exp& (0+255),w,b
  5493  000900  A4D8               	btfss	status,2,c
  5494  000902  D002               	goto	l3508
  5495  000904  D014               	goto	l3510
  5496                           
  5497                           ; BSR set to: 0
  5498                           
  5499                           ; BSR set to: 0
  5500  000906  D098               	goto	l1026
  5501  000908                     l3508:
  5502                           
  5503                           ; BSR set to: 0
  5504  000908  C07C  F07D         	movff	___ftmul@f2+2,??___ftmul
  5505  00090C  0100               	movlb	0	; () banked
  5506  00090E  6B7E               	clrf	(??___ftmul+1)& (0+255),b
  5507  000910  6B7F               	clrf	(??___ftmul+2)& (0+255),b
  5508  000912  0100               	movlb	0	; () banked
  5509  000914  357B               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5510  000916  0100               	movlb	0	; () banked
  5511  000918  377D               	rlcf	??___ftmul& (0+255),f,b
  5512  00091A  E301               	bnc	u3011
  5513  00091C  817E               	bsf	(??___ftmul+1)& (0+255),0,b
  5514  00091E                     u3011:
  5515  00091E  0100               	movlb	0	; () banked
  5516  000920  517D               	movf	??___ftmul& (0+255),w,b
  5517  000922  0100               	movlb	0	; () banked
  5518  000924  6F85               	movwf	___ftmul@sign& (0+255),b
  5519  000926  0100               	movlb	0	; () banked
  5520  000928  5185               	movf	___ftmul@sign& (0+255),w,b
  5521  00092A  A4D8               	btfss	status,2,c
  5522  00092C  D00A               	goto	l3514
  5523  00092E                     l3510:
  5524                           
  5525                           ; BSR set to: 0
  5526  00092E  0E00               	movlw	0
  5527  000930  0100               	movlb	0	; () banked
  5528  000932  6F77               	movwf	?___ftmul& (0+255),b
  5529  000934  0E00               	movlw	0
  5530  000936  0100               	movlb	0	; () banked
  5531  000938  6F78               	movwf	(?___ftmul+1)& (0+255),b
  5532  00093A  0E00               	movlw	0
  5533  00093C  0100               	movlb	0	; () banked
  5534  00093E  6F79               	movwf	(?___ftmul+2)& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537  000940  D07B               	goto	l1026
  5538  000942                     l3514:
  5539                           
  5540                           ; BSR set to: 0
  5541  000942  0100               	movlb	0	; () banked
  5542  000944  5185               	movf	___ftmul@sign& (0+255),w,b
  5543  000946  0F7B               	addlw	123
  5544  000948  0100               	movlb	0	; () banked
  5545  00094A  2780               	addwf	___ftmul@exp& (0+255),f,b
  5546                           
  5547                           ; BSR set to: 0
  5548  00094C  C079  F085         	movff	___ftmul@f1+2,___ftmul@sign
  5549  000950  0100               	movlb	0	; () banked
  5550  000952  517C               	movf	(___ftmul@f2+2)& (0+255),w,b
  5551  000954  0100               	movlb	0	; () banked
  5552  000956  1B85               	xorwf	___ftmul@sign& (0+255),f,b
  5553  000958  0E80               	movlw	128
  5554  00095A  0100               	movlb	0	; () banked
  5555  00095C  1785               	andwf	___ftmul@sign& (0+255),f,b
  5556                           
  5557                           ; BSR set to: 0
  5558  00095E  0100               	movlb	0	; () banked
  5559  000960  8F78               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5560                           
  5561                           ; BSR set to: 0
  5562  000962  0100               	movlb	0	; () banked
  5563  000964  8F7B               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5564                           
  5565                           ; BSR set to: 0
  5566  000966  0EFF               	movlw	255
  5567  000968  0100               	movlb	0	; () banked
  5568  00096A  177A               	andwf	___ftmul@f2& (0+255),f,b
  5569  00096C  0EFF               	movlw	255
  5570  00096E  0100               	movlb	0	; () banked
  5571  000970  177B               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5572  000972  0E00               	movlw	0
  5573  000974  0100               	movlb	0	; () banked
  5574  000976  177C               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5575                           
  5576                           ; BSR set to: 0
  5577  000978  0E00               	movlw	0
  5578  00097A  0100               	movlb	0	; () banked
  5579  00097C  6F81               	movwf	___ftmul@f3_as_product& (0+255),b
  5580  00097E  0E00               	movlw	0
  5581  000980  0100               	movlb	0	; () banked
  5582  000982  6F82               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5583  000984  0E00               	movlw	0
  5584  000986  0100               	movlb	0	; () banked
  5585  000988  6F83               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588  00098A  0E07               	movlw	7
  5589  00098C  0100               	movlb	0	; () banked
  5590  00098E  6F84               	movwf	___ftmul@cntr& (0+255),b
  5591  000990  D000               	goto	l3528
  5592  000992                     l3528:
  5593                           
  5594                           ; BSR set to: 0
  5595  000992  0100               	movlb	0	; () banked
  5596  000994  A177               	btfss	___ftmul@f1& (0+255),0,b
  5597  000996  D00D               	goto	l3532
  5598                           
  5599                           ; BSR set to: 0
  5600  000998  0100               	movlb	0	; () banked
  5601  00099A  517A               	movf	___ftmul@f2& (0+255),w,b
  5602  00099C  0100               	movlb	0	; () banked
  5603  00099E  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5604  0009A0  0100               	movlb	0	; () banked
  5605  0009A2  517B               	movf	(___ftmul@f2+1)& (0+255),w,b
  5606  0009A4  0100               	movlb	0	; () banked
  5607  0009A6  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5608  0009A8  0100               	movlb	0	; () banked
  5609  0009AA  517C               	movf	(___ftmul@f2+2)& (0+255),w,b
  5610  0009AC  0100               	movlb	0	; () banked
  5611  0009AE  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5612  0009B0  D000               	goto	l3532
  5613  0009B2                     l3532:
  5614                           
  5615                           ; BSR set to: 0
  5616  0009B2  0100               	movlb	0	; () banked
  5617  0009B4  90D8               	bcf	status,0,c
  5618  0009B6  3379               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5619  0009B8  3378               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5620  0009BA  3377               	rrcf	___ftmul@f1& (0+255),f,b
  5621  0009BC  0100               	movlb	0	; () banked
  5622  0009BE  90D8               	bcf	status,0,c
  5623  0009C0  377A               	rlcf	___ftmul@f2& (0+255),f,b
  5624  0009C2  377B               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5625  0009C4  377C               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5626                           
  5627                           ; BSR set to: 0
  5628  0009C6  0100               	movlb	0	; () banked
  5629  0009C8  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  5630  0009CA  D7E3               	goto	l3528
  5631  0009CC  D000               	goto	l3536
  5632  0009CE                     l3536:
  5633                           
  5634                           ; BSR set to: 0
  5635  0009CE  0E09               	movlw	9
  5636  0009D0  0100               	movlb	0	; () banked
  5637  0009D2  6F84               	movwf	___ftmul@cntr& (0+255),b
  5638  0009D4  D000               	goto	l3538
  5639  0009D6                     l3538:
  5640                           
  5641                           ; BSR set to: 0
  5642  0009D6  0100               	movlb	0	; () banked
  5643  0009D8  A177               	btfss	___ftmul@f1& (0+255),0,b
  5644  0009DA  D00D               	goto	l3542
  5645                           
  5646                           ; BSR set to: 0
  5647  0009DC  0100               	movlb	0	; () banked
  5648  0009DE  517A               	movf	___ftmul@f2& (0+255),w,b
  5649  0009E0  0100               	movlb	0	; () banked
  5650  0009E2  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5651  0009E4  0100               	movlb	0	; () banked
  5652  0009E6  517B               	movf	(___ftmul@f2+1)& (0+255),w,b
  5653  0009E8  0100               	movlb	0	; () banked
  5654  0009EA  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5655  0009EC  0100               	movlb	0	; () banked
  5656  0009EE  517C               	movf	(___ftmul@f2+2)& (0+255),w,b
  5657  0009F0  0100               	movlb	0	; () banked
  5658  0009F2  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5659  0009F4  D000               	goto	l3542
  5660  0009F6                     l3542:
  5661                           
  5662                           ; BSR set to: 0
  5663  0009F6  0100               	movlb	0	; () banked
  5664  0009F8  90D8               	bcf	status,0,c
  5665  0009FA  3379               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5666  0009FC  3378               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5667  0009FE  3377               	rrcf	___ftmul@f1& (0+255),f,b
  5668  000A00  0100               	movlb	0	; () banked
  5669  000A02  90D8               	bcf	status,0,c
  5670  000A04  3383               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5671  000A06  3382               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5672  000A08  3381               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5673                           
  5674                           ; BSR set to: 0
  5675  000A0A  0100               	movlb	0	; () banked
  5676  000A0C  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  5677  000A0E  D7E3               	goto	l3538
  5678  000A10  D000               	goto	l3546
  5679  000A12                     l3546:
  5680                           
  5681                           ; BSR set to: 0
  5682  000A12  C081  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  5683  000A16  C082  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5684  000A1A  C083  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5685  000A1E  C080  F063         	movff	___ftmul@exp,___ftpack@exp
  5686  000A22  C085  F064         	movff	___ftmul@sign,___ftpack@sign
  5687  000A26  EC57  F006         	call	___ftpack	;wreg free
  5688  000A2A  C060  F077         	movff	?___ftpack,?___ftmul
  5689  000A2E  C061  F078         	movff	?___ftpack+1,?___ftmul+1
  5690  000A32  C062  F079         	movff	?___ftpack+2,?___ftmul+2
  5691  000A36  D000               	goto	l1026
  5692  000A38                     l1026:
  5693  000A38  0012               	return		;funcret
  5694  000A3A                     __end_of___ftmul:
  5695                           	opt stack 0
  5696                           tblptru	equ	0xFF8
  5697                           tblptrh	equ	0xFF7
  5698                           tblptrl	equ	0xFF6
  5699                           tablat	equ	0xFF5
  5700                           prodh	equ	0xFF4
  5701                           prodl	equ	0xFF3
  5702                           intcon	equ	0xFF2
  5703                           intcon2	equ	0xFF1
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           indf2	equ	0xFDF
  5707                           fsr2h	equ	0xFDA
  5708                           fsr2l	equ	0xFD9
  5709                           status	equ	0xFD8
  5710                           
  5711 ;; *************** function ___ftpack *****************
  5712 ;; Defined at:
  5713 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  arg             3    0[BANK0 ] unsigned um
  5716 ;;  exp             1    3[BANK0 ] unsigned char 
  5717 ;;  sign            1    4[BANK0 ] unsigned char 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  3    0[BANK0 ] float 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5729 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;Total ram usage:        8 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    6
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		___ftadd
  5740 ;;		___ftdiv
  5741 ;;		___ftmul
  5742 ;;		___lwtoft
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text35
  5747  000CAE                     __ptext35:
  5748                           	opt stack 0
  5749  000CAE                     ___ftpack:
  5750                           	opt stack 21
  5751                           
  5752                           ;incstack = 0
  5753  000CAE  0100               	movlb	0	; () banked
  5754  000CB0  5163               	movf	___ftpack@exp& (0+255),w,b
  5755  000CB2  0100               	movlb	0	; () banked
  5756  000CB4  B4D8               	btfsc	status,2,c
  5757  000CB6  D008               	goto	l3202
  5758                           
  5759                           ; BSR set to: 0
  5760  000CB8  0100               	movlb	0	; () banked
  5761  000CBA  5160               	movf	___ftpack@arg& (0+255),w,b
  5762  000CBC  0100               	movlb	0	; () banked
  5763  000CBE  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5764  000CC0  0100               	movlb	0	; () banked
  5765  000CC2  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5766  000CC4  A4D8               	btfss	status,2,c
  5767  000CC6  D013               	goto	l3208
  5768  000CC8                     l3202:
  5769                           
  5770                           ; BSR set to: 0
  5771  000CC8  0E00               	movlw	0
  5772  000CCA  0100               	movlb	0	; () banked
  5773  000CCC  6F60               	movwf	?___ftpack& (0+255),b
  5774  000CCE  0E00               	movlw	0
  5775  000CD0  0100               	movlb	0	; () banked
  5776  000CD2  6F61               	movwf	(?___ftpack+1)& (0+255),b
  5777  000CD4  0E00               	movlw	0
  5778  000CD6  0100               	movlb	0	; () banked
  5779  000CD8  6F62               	movwf	(?___ftpack+2)& (0+255),b
  5780                           
  5781                           ; BSR set to: 0
  5782  000CDA  D078               	goto	l939
  5783                           
  5784                           ; BSR set to: 0
  5785  000CDC  D008               	goto	l3208
  5786  000CDE                     l3206:
  5787                           
  5788                           ; BSR set to: 0
  5789  000CDE  0100               	movlb	0	; () banked
  5790  000CE0  2B63               	incf	___ftpack@exp& (0+255),f,b
  5791  000CE2  0100               	movlb	0	; () banked
  5792  000CE4  90D8               	bcf	status,0,c
  5793  000CE6  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5794  000CE8  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5795  000CEA  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5796  000CEC  D000               	goto	l3208
  5797  000CEE                     l3208:
  5798                           
  5799                           ; BSR set to: 0
  5800  000CEE  0E00               	movlw	0
  5801  000CF0  0100               	movlb	0	; () banked
  5802  000CF2  1560               	andwf	___ftpack@arg& (0+255),w,b
  5803  000CF4  0100               	movlb	0	; () banked
  5804  000CF6  6F65               	movwf	??___ftpack& (0+255),b
  5805  000CF8  0E00               	movlw	0
  5806  000CFA  0100               	movlb	0	; () banked
  5807  000CFC  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5808  000CFE  0100               	movlb	0	; () banked
  5809  000D00  6F66               	movwf	(??___ftpack+1)& (0+255),b
  5810  000D02  0EFE               	movlw	254
  5811  000D04  0100               	movlb	0	; () banked
  5812  000D06  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5813  000D08  0100               	movlb	0	; () banked
  5814  000D0A  6F67               	movwf	(??___ftpack+2)& (0+255),b
  5815  000D0C  0100               	movlb	0	; () banked
  5816  000D0E  5165               	movf	??___ftpack& (0+255),w,b
  5817  000D10  0100               	movlb	0	; () banked
  5818  000D12  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  5819  000D14  0100               	movlb	0	; () banked
  5820  000D16  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  5821  000D18  B4D8               	btfsc	status,2,c
  5822  000D1A  D013               	goto	l3214
  5823  000D1C  D7E0               	goto	l3206
  5824                           
  5825                           ; BSR set to: 0
  5826  000D1E  D011               	goto	l3214
  5827  000D20                     l3210:
  5828                           
  5829                           ; BSR set to: 0
  5830  000D20  0100               	movlb	0	; () banked
  5831  000D22  2B63               	incf	___ftpack@exp& (0+255),f,b
  5832                           
  5833                           ; BSR set to: 0
  5834  000D24  0E01               	movlw	1
  5835  000D26  0100               	movlb	0	; () banked
  5836  000D28  2760               	addwf	___ftpack@arg& (0+255),f,b
  5837  000D2A  0E00               	movlw	0
  5838  000D2C  0100               	movlb	0	; () banked
  5839  000D2E  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  5840  000D30  0E00               	movlw	0
  5841  000D32  0100               	movlb	0	; () banked
  5842  000D34  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  5843  000D36  0100               	movlb	0	; () banked
  5844  000D38  90D8               	bcf	status,0,c
  5845  000D3A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5846  000D3C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5847  000D3E  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5848  000D40  D000               	goto	l3214
  5849  000D42                     l3214:
  5850                           
  5851                           ; BSR set to: 0
  5852  000D42  0E00               	movlw	0
  5853  000D44  0100               	movlb	0	; () banked
  5854  000D46  1560               	andwf	___ftpack@arg& (0+255),w,b
  5855  000D48  0100               	movlb	0	; () banked
  5856  000D4A  6F65               	movwf	??___ftpack& (0+255),b
  5857  000D4C  0E00               	movlw	0
  5858  000D4E  0100               	movlb	0	; () banked
  5859  000D50  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5860  000D52  0100               	movlb	0	; () banked
  5861  000D54  6F66               	movwf	(??___ftpack+1)& (0+255),b
  5862  000D56  0EFF               	movlw	255
  5863  000D58  0100               	movlb	0	; () banked
  5864  000D5A  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5865  000D5C  0100               	movlb	0	; () banked
  5866  000D5E  6F67               	movwf	(??___ftpack+2)& (0+255),b
  5867  000D60  0100               	movlb	0	; () banked
  5868  000D62  5165               	movf	??___ftpack& (0+255),w,b
  5869  000D64  0100               	movlb	0	; () banked
  5870  000D66  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  5871  000D68  0100               	movlb	0	; () banked
  5872  000D6A  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  5873  000D6C  B4D8               	btfsc	status,2,c
  5874  000D6E  D00A               	goto	l3218
  5875  000D70  D7D7               	goto	l3210
  5876                           
  5877                           ; BSR set to: 0
  5878  000D72  D008               	goto	l3218
  5879  000D74                     l3216:
  5880                           
  5881                           ; BSR set to: 0
  5882  000D74  0100               	movlb	0	; () banked
  5883  000D76  0763               	decf	___ftpack@exp& (0+255),f,b
  5884  000D78  0100               	movlb	0	; () banked
  5885  000D7A  90D8               	bcf	status,0,c
  5886  000D7C  3760               	rlcf	___ftpack@arg& (0+255),f,b
  5887  000D7E  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  5888  000D80  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  5889  000D82  D000               	goto	l3218
  5890  000D84                     l3218:
  5891                           
  5892                           ; BSR set to: 0
  5893  000D84  0100               	movlb	0	; () banked
  5894  000D86  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  5895  000D88  D005               	goto	l950
  5896                           
  5897                           ; BSR set to: 0
  5898  000D8A  0E02               	movlw	2
  5899  000D8C  0100               	movlb	0	; () banked
  5900  000D8E  6163               	cpfslt	___ftpack@exp& (0+255),b
  5901  000D90  D7F1               	goto	l3216
  5902  000D92  D000               	goto	l950
  5903  000D94                     l950:
  5904                           
  5905                           ; BSR set to: 0
  5906  000D94  0100               	movlb	0	; () banked
  5907  000D96  B163               	btfsc	___ftpack@exp& (0+255),0,b
  5908  000D98  D003               	goto	l3224
  5909                           
  5910                           ; BSR set to: 0
  5911  000D9A  0100               	movlb	0	; () banked
  5912  000D9C  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  5913  000D9E  D000               	goto	l3224
  5914  000DA0                     l3224:
  5915                           
  5916                           ; BSR set to: 0
  5917  000DA0  0100               	movlb	0	; () banked
  5918  000DA2  90D8               	bcf	status,0,c
  5919  000DA4  3363               	rrcf	___ftpack@exp& (0+255),f,b
  5920  000DA6  0100               	movlb	0	; () banked
  5921  000DA8  5163               	movf	___ftpack@exp& (0+255),w,b
  5922  000DAA  0100               	movlb	0	; () banked
  5923  000DAC  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  5924                           
  5925                           ; BSR set to: 0
  5926  000DAE  0100               	movlb	0	; () banked
  5927  000DB0  5164               	movf	___ftpack@sign& (0+255),w,b
  5928  000DB2  0100               	movlb	0	; () banked
  5929  000DB4  B4D8               	btfsc	status,2,c
  5930  000DB6  D003               	goto	l3230
  5931                           
  5932                           ; BSR set to: 0
  5933  000DB8  0100               	movlb	0	; () banked
  5934  000DBA  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  5935  000DBC  D000               	goto	l3230
  5936  000DBE                     l3230:
  5937                           
  5938                           ; BSR set to: 0
  5939  000DBE  C060  F060         	movff	___ftpack@arg,?___ftpack
  5940  000DC2  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  5941  000DC6  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  5942  000DCA  D000               	goto	l939
  5943  000DCC                     l939:
  5944                           
  5945                           ; BSR set to: 0
  5946  000DCC  0012               	return		;funcret
  5947  000DCE                     __end_of___ftpack:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           intcon2	equ	0xFF1
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           indf2	equ	0xFDF
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _ImplementPIDMotion *****************
  5965 ;; Defined at:
  5966 ;;		line 40 in file "MotorControl.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  PIDValue        2    4[BANK0 ] int 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;		None               void
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5980 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;Total ram usage:        4 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    7
  5987 ;; This function calls:
  5988 ;;		_abs
  5989 ;; This function is called by:
  5990 ;;		_main
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           	psect	text36
  5995  0011CC                     __ptext36:
  5996                           	opt stack 0
  5997  0011CC                     _ImplementPIDMotion:
  5998                           	opt stack 23
  5999                           
  6000                           ;MotorControl.c: 42: if (PIDValue > 255)
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;incstack = 0
  6004  0011CC  0100               	movlb	0	; () banked
  6005  0011CE  BF65               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  6006  0011D0  D009               	goto	l3624
  6007  0011D2  0100               	movlb	0	; () banked
  6008  0011D4  0565               	decf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  6009  0011D6  A0D8               	btfss	status,0,c
  6010  0011D8  D005               	goto	l3624
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;MotorControl.c: 43: PIDValue = 255;
  6014  0011DA  0E00               	movlw	0
  6015  0011DC  0100               	movlb	0	; () banked
  6016  0011DE  6F65               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  6017  0011E0  6964               	setf	ImplementPIDMotion@PIDValue& (0+255),b
  6018  0011E2  D010               	goto	l3628
  6019  0011E4                     l3624:
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;MotorControl.c: 44: else if (PIDValue < -255)
  6023  0011E4  0100               	movlb	0	; () banked
  6024  0011E6  AF65               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  6025  0011E8  D00D               	goto	l3628
  6026  0011EA  0100               	movlb	0	; () banked
  6027  0011EC  0564               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  6028  0011EE  0EFF               	movlw	255
  6029  0011F0  0100               	movlb	0	; () banked
  6030  0011F2  5965               	subwfb	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  6031  0011F4  B0D8               	btfsc	status,0,c
  6032  0011F6  D006               	goto	l3628
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;MotorControl.c: 45: PIDValue = -255;
  6036  0011F8  0EFF               	movlw	255
  6037  0011FA  0100               	movlb	0	; () banked
  6038  0011FC  6F65               	movwf	(ImplementPIDMotion@PIDValue+1)& (0+255),b
  6039  0011FE  0E01               	movlw	1
  6040  001200  6F64               	movwf	ImplementPIDMotion@PIDValue& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043  001202  D000               	goto	l3628
  6044  001204                     l3628:
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;MotorControl.c: 47: if (PIDValue < 0)
  6048  001204  0100               	movlb	0	; () banked
  6049  001206  AF65               	btfss	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  6050  001208  D002               	goto	l3632
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;MotorControl.c: 48: CCP3CONbits.P3M1 = 1;
  6054  00120A  8EB7               	bsf	4023,7,c	;volatile
  6055  00120C  D00C               	goto	l3636
  6056  00120E                     l3632:
  6057                           
  6058                           ; BSR set to: 0
  6059                           ;MotorControl.c: 49: else if (PIDValue > 0)
  6060  00120E  0100               	movlb	0	; () banked
  6061  001210  BF65               	btfsc	(ImplementPIDMotion@PIDValue+1)& (0+255),7,b
  6062  001212  D009               	goto	l3636
  6063  001214  0100               	movlb	0	; () banked
  6064  001216  5165               	movf	(ImplementPIDMotion@PIDValue+1)& (0+255),w,b
  6065  001218  E104               	bnz	u3190
  6066  00121A  0100               	movlb	0	; () banked
  6067  00121C  0564               	decf	ImplementPIDMotion@PIDValue& (0+255),w,b
  6068  00121E  A0D8               	btfss	status,0,c
  6069  001220  D002               	goto	l3636
  6070  001222                     u3190:
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;MotorControl.c: 50: CCP3CONbits.P3M1 = 0;
  6074  001222  9EB7               	bcf	4023,7,c	;volatile
  6075                           
  6076                           ; BSR set to: 0
  6077  001224  D000               	goto	l3636
  6078  001226                     l3636:
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;MotorControl.c: 52: PIDValue = abs(PIDValue);
  6082  001226  C064  F060         	movff	ImplementPIDMotion@PIDValue,abs@a
  6083  00122A  C065  F061         	movff	ImplementPIDMotion@PIDValue+1,abs@a+1
  6084  00122E  ECF4  F00B         	call	_abs	;wreg free
  6085  001232  C060  F064         	movff	?_abs,ImplementPIDMotion@PIDValue
  6086  001236  C061  F065         	movff	?_abs+1,ImplementPIDMotion@PIDValue+1
  6087                           
  6088                           ;MotorControl.c: 53: CCPR3L = (PIDValue >> 2) & 0xFF;
  6089  00123A  C064  F066         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  6090  00123E  C065  F067         	movff	ImplementPIDMotion@PIDValue+1,??_ImplementPIDMotion+1
  6091  001242  0100               	movlb	0	; () banked
  6092  001244  3567               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  6093  001246  3367               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  6094  001248  3366               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  6095  00124A  0100               	movlb	0	; () banked
  6096  00124C  3567               	rlcf	(??_ImplementPIDMotion+1)& (0+255),w,b
  6097  00124E  3367               	rrcf	(??_ImplementPIDMotion+1)& (0+255),f,b
  6098  001250  3366               	rrcf	??_ImplementPIDMotion& (0+255),f,b
  6099  001252  0100               	movlb	0	; () banked
  6100  001254  5166               	movf	??_ImplementPIDMotion& (0+255),w,b
  6101  001256  6EB8               	movwf	4024,c	;volatile
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;MotorControl.c: 54: CCP3CONbits.DC3B = (PIDValue & 0x03);
  6105  001258  C064  F066         	movff	ImplementPIDMotion@PIDValue,??_ImplementPIDMotion
  6106  00125C  0E03               	movlw	3
  6107  00125E  0100               	movlb	0	; () banked
  6108  001260  1766               	andwf	??_ImplementPIDMotion& (0+255),f,b
  6109  001262  0100               	movlb	0	; () banked
  6110  001264  3B66               	swapf	??_ImplementPIDMotion& (0+255),f,b
  6111  001266  50B7               	movf	4023,w,c	;volatile
  6112  001268  0100               	movlb	0	; () banked
  6113  00126A  1966               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  6114  00126C  0BCF               	andlw	-49
  6115  00126E  1966               	xorwf	??_ImplementPIDMotion& (0+255),w,b
  6116  001270  6EB7               	movwf	4023,c	;volatile
  6117                           
  6118                           ; BSR set to: 0
  6119  001272  0012               	return		;funcret
  6120  001274                     __end_of_ImplementPIDMotion:
  6121                           	opt stack 0
  6122                           tblptru	equ	0xFF8
  6123                           tblptrh	equ	0xFF7
  6124                           tblptrl	equ	0xFF6
  6125                           tablat	equ	0xFF5
  6126                           prodh	equ	0xFF4
  6127                           prodl	equ	0xFF3
  6128                           intcon	equ	0xFF2
  6129                           intcon2	equ	0xFF1
  6130                           postinc0	equ	0xFEE
  6131                           wreg	equ	0xFE8
  6132                           indf2	equ	0xFDF
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _ImplementJSMotion *****************
  6138 ;; Defined at:
  6139 ;;		line 58 in file "MotorControl.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  JoystickValu    2    9[BANK0 ] int 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  CCPinput        2   14[BANK0 ] unsigned int 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;		None               void
  6146 ;; Registers used:
  6147 ;;		wreg, status,2, status,0, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6153 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;Total ram usage:        7 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    7
  6160 ;; This function calls:
  6161 ;;		_abs
  6162 ;; This function is called by:
  6163 ;;		_main
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text37
  6168  000DCE                     __ptext37:
  6169                           	opt stack 0
  6170  000DCE                     _ImplementJSMotion:
  6171                           	opt stack 23
  6172                           
  6173                           ;MotorControl.c: 60: unsigned int CCPinput;
  6174                           ;MotorControl.c: 61: PIDEnableFlag = 0;
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;incstack = 0
  6178  000DCE  0E00               	movlw	0
  6179  000DD0  0100               	movlb	0	; () banked
  6180  000DD2  6FCE               	movwf	_PIDEnableFlag& (0+255),b
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;MotorControl.c: 62: if (JoystickValue < DeadbandLow)
  6184  000DD4  5038               	movf	_DeadbandLow,w,c
  6185  000DD6  0100               	movlb	0	; () banked
  6186  000DD8  6F6B               	movwf	??_ImplementJSMotion& (0+255),b
  6187  000DDA  6B6C               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  6188  000DDC  0100               	movlb	0	; () banked
  6189  000DDE  516B               	movf	??_ImplementJSMotion& (0+255),w,b
  6190  000DE0  0100               	movlb	0	; () banked
  6191  000DE2  5D69               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6192  000DE4  0100               	movlb	0	; () banked
  6193  000DE6  516A               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6194  000DE8  0A80               	xorlw	128
  6195  000DEA  0100               	movlb	0	; () banked
  6196  000DEC  6F6D               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  6197  000DEE  0100               	movlb	0	; () banked
  6198  000DF0  516C               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  6199  000DF2  0A80               	xorlw	128
  6200  000DF4  0100               	movlb	0	; () banked
  6201  000DF6  596D               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  6202  000DF8  B0D8               	btfsc	status,0,c
  6203  000DFA  D002               	goto	l3648
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;MotorControl.c: 63: {
  6207                           ;MotorControl.c: 64: CCP3CONbits.P3M1 = 1;
  6208  000DFC  8EB7               	bsf	4023,7,c	;volatile
  6209                           
  6210                           ;MotorControl.c: 65: }
  6211  000DFE  D044               	goto	l3658
  6212  000E00                     l3648:
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;MotorControl.c: 66: else if (JoystickValue > DeadbandHigh)
  6216  000E00  5037               	movf	_DeadbandHigh,w,c
  6217  000E02  0100               	movlb	0	; () banked
  6218  000E04  6F6B               	movwf	??_ImplementJSMotion& (0+255),b
  6219  000E06  6B6C               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  6220  000E08  0100               	movlb	0	; () banked
  6221  000E0A  5169               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6222  000E0C  0100               	movlb	0	; () banked
  6223  000E0E  5D6B               	subwf	??_ImplementJSMotion& (0+255),w,b
  6224  000E10  0100               	movlb	0	; () banked
  6225  000E12  516C               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  6226  000E14  0A80               	xorlw	128
  6227  000E16  0100               	movlb	0	; () banked
  6228  000E18  6F6D               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  6229  000E1A  0100               	movlb	0	; () banked
  6230  000E1C  516A               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6231  000E1E  0A80               	xorlw	128
  6232  000E20  0100               	movlb	0	; () banked
  6233  000E22  596D               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  6234  000E24  B0D8               	btfsc	status,0,c
  6235  000E26  D002               	goto	l3652
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;MotorControl.c: 67: {
  6239                           ;MotorControl.c: 68: CCP3CONbits.P3M1 = 0;
  6240  000E28  9EB7               	bcf	4023,7,c	;volatile
  6241                           
  6242                           ;MotorControl.c: 69: }
  6243  000E2A  D02E               	goto	l3658
  6244  000E2C                     l3652:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;MotorControl.c: 70: else if (JoystickValue <= DeadbandHigh && JoystickValue >= Deadband
      +                          Low)
  6248  000E2C  5037               	movf	_DeadbandHigh,w,c
  6249  000E2E  0100               	movlb	0	; () banked
  6250  000E30  6F6B               	movwf	??_ImplementJSMotion& (0+255),b
  6251  000E32  6B6C               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  6252  000E34  0100               	movlb	0	; () banked
  6253  000E36  5169               	movf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6254  000E38  0100               	movlb	0	; () banked
  6255  000E3A  5D6B               	subwf	??_ImplementJSMotion& (0+255),w,b
  6256  000E3C  0100               	movlb	0	; () banked
  6257  000E3E  516C               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  6258  000E40  0A80               	xorlw	128
  6259  000E42  0100               	movlb	0	; () banked
  6260  000E44  6F6D               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  6261  000E46  0100               	movlb	0	; () banked
  6262  000E48  516A               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6263  000E4A  0A80               	xorlw	128
  6264  000E4C  0100               	movlb	0	; () banked
  6265  000E4E  596D               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  6266  000E50  A0D8               	btfss	status,0,c
  6267  000E52  D01A               	goto	l3658
  6268                           
  6269                           ; BSR set to: 0
  6270  000E54  5038               	movf	_DeadbandLow,w,c
  6271  000E56  0100               	movlb	0	; () banked
  6272  000E58  6F6B               	movwf	??_ImplementJSMotion& (0+255),b
  6273  000E5A  6B6C               	clrf	(??_ImplementJSMotion+1)& (0+255),b
  6274  000E5C  0100               	movlb	0	; () banked
  6275  000E5E  516B               	movf	??_ImplementJSMotion& (0+255),w,b
  6276  000E60  0100               	movlb	0	; () banked
  6277  000E62  5D69               	subwf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6278  000E64  0100               	movlb	0	; () banked
  6279  000E66  516A               	movf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6280  000E68  0A80               	xorlw	128
  6281  000E6A  0100               	movlb	0	; () banked
  6282  000E6C  6F6D               	movwf	(??_ImplementJSMotion+2)& (0+255),b
  6283  000E6E  0100               	movlb	0	; () banked
  6284  000E70  516C               	movf	(??_ImplementJSMotion+1)& (0+255),w,b
  6285  000E72  0A80               	xorlw	128
  6286  000E74  0100               	movlb	0	; () banked
  6287  000E76  596D               	subwfb	(??_ImplementJSMotion+2)& (0+255),w,b
  6288  000E78  A0D8               	btfss	status,0,c
  6289  000E7A  D006               	goto	l3658
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;MotorControl.c: 71: {
  6293                           ;MotorControl.c: 72: JoystickValue = 0;
  6294  000E7C  0E00               	movlw	0
  6295  000E7E  0100               	movlb	0	; () banked
  6296  000E80  6F6A               	movwf	(ImplementJSMotion@JoystickValue+1)& (0+255),b
  6297  000E82  0E00               	movlw	0
  6298  000E84  6F69               	movwf	ImplementJSMotion@JoystickValue& (0+255),b
  6299                           
  6300                           ; BSR set to: 0
  6301                           
  6302                           ; BSR set to: 0
  6303  000E86  D000               	goto	l3658
  6304  000E88                     l3658:
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;MotorControl.c: 73: }
  6308                           ;MotorControl.c: 75: JoystickValue = abs(JoystickValue);
  6309  000E88  C069  F060         	movff	ImplementJSMotion@JoystickValue,abs@a
  6310  000E8C  C06A  F061         	movff	ImplementJSMotion@JoystickValue+1,abs@a+1
  6311  000E90  ECF4  F00B         	call	_abs	;wreg free
  6312  000E94  C060  F069         	movff	?_abs,ImplementJSMotion@JoystickValue
  6313  000E98  C061  F06A         	movff	?_abs+1,ImplementJSMotion@JoystickValue+1
  6314                           
  6315                           ;MotorControl.c: 76: CCPinput = JoystickValue * 2;
  6316  000E9C  90D8               	bcf	status,0,c
  6317  000E9E  0100               	movlb	0	; () banked
  6318  000EA0  3569               	rlcf	ImplementJSMotion@JoystickValue& (0+255),w,b
  6319  000EA2  0100               	movlb	0	; () banked
  6320  000EA4  6F6E               	movwf	ImplementJSMotion@CCPinput& (0+255),b
  6321  000EA6  0100               	movlb	0	; () banked
  6322  000EA8  356A               	rlcf	(ImplementJSMotion@JoystickValue+1)& (0+255),w,b
  6323  000EAA  0100               	movlb	0	; () banked
  6324  000EAC  6F6F               	movwf	(ImplementJSMotion@CCPinput+1)& (0+255),b
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;MotorControl.c: 77: CCPR3L = (CCPinput >> 2) & 0xFF;
  6328  000EAE  C06E  F06B         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6329  000EB2  C06F  F06C         	movff	ImplementJSMotion@CCPinput+1,??_ImplementJSMotion+1
  6330  000EB6  0100               	movlb	0	; () banked
  6331  000EB8  90D8               	bcf	status,0,c
  6332  000EBA  336C               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6333  000EBC  336B               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6334  000EBE  0100               	movlb	0	; () banked
  6335  000EC0  90D8               	bcf	status,0,c
  6336  000EC2  336C               	rrcf	(??_ImplementJSMotion+1)& (0+255),f,b
  6337  000EC4  336B               	rrcf	??_ImplementJSMotion& (0+255),f,b
  6338  000EC6  0100               	movlb	0	; () banked
  6339  000EC8  516B               	movf	??_ImplementJSMotion& (0+255),w,b
  6340  000ECA  6EB8               	movwf	4024,c	;volatile
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;MotorControl.c: 78: CCP3CONbits.DC3B = (CCPinput & 0x03);
  6344  000ECC  C06E  F06B         	movff	ImplementJSMotion@CCPinput,??_ImplementJSMotion
  6345  000ED0  0E03               	movlw	3
  6346  000ED2  0100               	movlb	0	; () banked
  6347  000ED4  176B               	andwf	??_ImplementJSMotion& (0+255),f,b
  6348  000ED6  0100               	movlb	0	; () banked
  6349  000ED8  3B6B               	swapf	??_ImplementJSMotion& (0+255),f,b
  6350  000EDA  50B7               	movf	4023,w,c	;volatile
  6351  000EDC  0100               	movlb	0	; () banked
  6352  000EDE  196B               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6353  000EE0  0BCF               	andlw	-49
  6354  000EE2  196B               	xorwf	??_ImplementJSMotion& (0+255),w,b
  6355  000EE4  6EB7               	movwf	4023,c	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358  000EE6  0012               	return		;funcret
  6359  000EE8                     __end_of_ImplementJSMotion:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           intcon	equ	0xFF2
  6368                           intcon2	equ	0xFF1
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf2	equ	0xFDF
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _abs *****************
  6377 ;; Defined at:
  6378 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/abs.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  a               2    0[BANK0 ] int 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  2    0[BANK0 ] int 
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6392 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;Total ram usage:        4 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    6
  6399 ;; This function calls:
  6400 ;;		Nothing
  6401 ;; This function is called by:
  6402 ;;		_ImplementPIDMotion
  6403 ;;		_ImplementJSMotion
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text38
  6408  0017E8                     __ptext38:
  6409                           	opt stack 0
  6410  0017E8                     _abs:
  6411                           	opt stack 23
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;incstack = 0
  6415  0017E8  0100               	movlb	0	; () banked
  6416  0017EA  AF61               	btfss	(abs@a+1)& (0+255),7,b
  6417  0017EC  D00E               	goto	l653
  6418                           
  6419                           ; BSR set to: 0
  6420  0017EE  C060  F062         	movff	abs@a,??_abs
  6421  0017F2  C061  F063         	movff	abs@a+1,??_abs+1
  6422  0017F6  0100               	movlb	0	; () banked
  6423  0017F8  1F62               	comf	??_abs& (0+255),f,b
  6424  0017FA  1F63               	comf	(??_abs+1)& (0+255),f,b
  6425  0017FC  4B62               	infsnz	??_abs& (0+255),f,b
  6426  0017FE  2B63               	incf	(??_abs+1)& (0+255),f,b
  6427  001800  C062  F060         	movff	??_abs,?_abs
  6428  001804  C063  F061         	movff	??_abs+1,?_abs+1
  6429  001808  D004               	goto	l654
  6430  00180A                     l653:
  6431                           
  6432                           ; BSR set to: 0
  6433  00180A  C060  F060         	movff	abs@a,?_abs
  6434  00180E  C061  F061         	movff	abs@a+1,?_abs+1
  6435  001812                     l654:
  6436                           
  6437                           ; BSR set to: 0
  6438  001812  0012               	return		;funcret
  6439  001814                     __end_of_abs:
  6440                           	opt stack 0
  6441                           tblptru	equ	0xFF8
  6442                           tblptrh	equ	0xFF7
  6443                           tblptrl	equ	0xFF6
  6444                           tablat	equ	0xFF5
  6445                           prodh	equ	0xFF4
  6446                           prodl	equ	0xFF3
  6447                           intcon	equ	0xFF2
  6448                           intcon2	equ	0xFF1
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           indf2	equ	0xFDF
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456 ;; *************** function _DetectMovement *****************
  6457 ;; Defined at:
  6458 ;;		line 42 in file "Joystick.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  ADCresult       2    7[BANK0 ] unsigned int 
  6463 ;;  JoystickResu    2    5[BANK0 ] int 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  2    0[BANK0 ] int 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;Total ram usage:        9 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    6
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_main
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text39
  6488  00111E                     __ptext39:
  6489                           	opt stack 0
  6490  00111E                     _DetectMovement:
  6491                           	opt stack 24
  6492                           
  6493                           ;Joystick.c: 44: unsigned int ADCresult;
  6494                           ;Joystick.c: 45: int JoystickResult;
  6495                           ;Joystick.c: 47: ADCON0bits.GODONE = 1;
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;incstack = 0
  6499  00111E  82C2               	bsf	4034,1,c	;volatile
  6500                           
  6501                           ;Joystick.c: 48: while (ADCON0bits.GO_NOT_DONE == 1);
  6502  001120  D000               	goto	l43
  6503  001122                     l43:
  6504  001122  B2C2               	btfsc	4034,1,c	;volatile
  6505  001124  D7FE               	goto	l43
  6506                           
  6507                           ;Joystick.c: 50: ADCresult = ADRESH;
  6508  001126  CFC4 F067          	movff	4036,DetectMovement@ADCresult	;volatile
  6509  00112A  0100               	movlb	0	; () banked
  6510  00112C  6B68               	clrf	(DetectMovement@ADCresult+1)& (0+255),b
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;Joystick.c: 51: ADCresult = ADCresult << 8;
  6514  00112E  0100               	movlb	0	; () banked
  6515  001130  5167               	movf	DetectMovement@ADCresult& (0+255),w,b
  6516  001132  0100               	movlb	0	; () banked
  6517  001134  6F68               	movwf	(DetectMovement@ADCresult+1)& (0+255),b
  6518  001136  6B67               	clrf	DetectMovement@ADCresult& (0+255),b
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;Joystick.c: 52: ADCresult = ADCresult | ADRESL;
  6522  001138  0100               	movlb	0	; () banked
  6523  00113A  5167               	movf	DetectMovement@ADCresult& (0+255),w,b
  6524  00113C  10C3               	iorwf	4035,w,c	;volatile
  6525  00113E  0100               	movlb	0	; () banked
  6526  001140  6F67               	movwf	DetectMovement@ADCresult& (0+255),b
  6527  001142  0100               	movlb	0	; () banked
  6528  001144  5168               	movf	(DetectMovement@ADCresult+1)& (0+255),w,b
  6529  001146  0100               	movlb	0	; () banked
  6530  001148  6F68               	movwf	(DetectMovement@ADCresult+1)& (0+255),b
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;Joystick.c: 53: JoystickResult = (ADCresult - 512);
  6534  00114A  0E00               	movlw	0
  6535  00114C  0100               	movlb	0	; () banked
  6536  00114E  2567               	addwf	DetectMovement@ADCresult& (0+255),w,b
  6537  001150  0100               	movlb	0	; () banked
  6538  001152  6F65               	movwf	DetectMovement@JoystickResult& (0+255),b
  6539  001154  0EFE               	movlw	254
  6540  001156  0100               	movlb	0	; () banked
  6541  001158  2168               	addwfc	(DetectMovement@ADCresult+1)& (0+255),w,b
  6542  00115A  0100               	movlb	0	; () banked
  6543  00115C  6F66               	movwf	(DetectMovement@JoystickResult+1)& (0+255),b
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;Joystick.c: 55: if ((JoystickResult > DeadbandHigh) || (JoystickResult < DeadbandLow))
  6547  00115E  5037               	movf	_DeadbandHigh,w,c
  6548  001160  0100               	movlb	0	; () banked
  6549  001162  6F62               	movwf	??_DetectMovement& (0+255),b
  6550  001164  6B63               	clrf	(??_DetectMovement+1)& (0+255),b
  6551  001166  0100               	movlb	0	; () banked
  6552  001168  5165               	movf	DetectMovement@JoystickResult& (0+255),w,b
  6553  00116A  0100               	movlb	0	; () banked
  6554  00116C  5D62               	subwf	??_DetectMovement& (0+255),w,b
  6555  00116E  0100               	movlb	0	; () banked
  6556  001170  5163               	movf	(??_DetectMovement+1)& (0+255),w,b
  6557  001172  0A80               	xorlw	128
  6558  001174  0100               	movlb	0	; () banked
  6559  001176  6F64               	movwf	(??_DetectMovement+2)& (0+255),b
  6560  001178  0100               	movlb	0	; () banked
  6561  00117A  5166               	movf	(DetectMovement@JoystickResult+1)& (0+255),w,b
  6562  00117C  0A80               	xorlw	128
  6563  00117E  0100               	movlb	0	; () banked
  6564  001180  5964               	subwfb	(??_DetectMovement+2)& (0+255),w,b
  6565  001182  A0D8               	btfss	status,0,c
  6566  001184  D014               	goto	l3608
  6567                           
  6568                           ; BSR set to: 0
  6569  001186  5038               	movf	_DeadbandLow,w,c
  6570  001188  0100               	movlb	0	; () banked
  6571  00118A  6F62               	movwf	??_DetectMovement& (0+255),b
  6572  00118C  6B63               	clrf	(??_DetectMovement+1)& (0+255),b
  6573  00118E  0100               	movlb	0	; () banked
  6574  001190  5162               	movf	??_DetectMovement& (0+255),w,b
  6575  001192  0100               	movlb	0	; () banked
  6576  001194  5D65               	subwf	DetectMovement@JoystickResult& (0+255),w,b
  6577  001196  0100               	movlb	0	; () banked
  6578  001198  5166               	movf	(DetectMovement@JoystickResult+1)& (0+255),w,b
  6579  00119A  0A80               	xorlw	128
  6580  00119C  0100               	movlb	0	; () banked
  6581  00119E  6F64               	movwf	(??_DetectMovement+2)& (0+255),b
  6582  0011A0  0100               	movlb	0	; () banked
  6583  0011A2  5163               	movf	(??_DetectMovement+1)& (0+255),w,b
  6584  0011A4  0A80               	xorlw	128
  6585  0011A6  0100               	movlb	0	; () banked
  6586  0011A8  5964               	subwfb	(??_DetectMovement+2)& (0+255),w,b
  6587  0011AA  B0D8               	btfsc	status,0,c
  6588  0011AC  D008               	goto	l3616
  6589  0011AE                     l3608:
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;Joystick.c: 56: {
  6593                           ;Joystick.c: 57: PIDEnableFlag = 0;
  6594  0011AE  0E00               	movlw	0
  6595  0011B0  0100               	movlb	0	; () banked
  6596  0011B2  6FCE               	movwf	_PIDEnableFlag& (0+255),b
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;Joystick.c: 58: return JoystickResult;
  6600  0011B4  C065  F060         	movff	DetectMovement@JoystickResult,?_DetectMovement
  6601  0011B8  C066  F061         	movff	DetectMovement@JoystickResult+1,?_DetectMovement+1
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;Joystick.c: 59: }
  6605                           
  6606                           ; BSR set to: 0
  6607  0011BC  D006               	goto	l49
  6608  0011BE                     l3616:
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;Joystick.c: 60: else
  6612                           ;Joystick.c: 61: return 0;
  6613  0011BE  0E00               	movlw	0
  6614  0011C0  0100               	movlb	0	; () banked
  6615  0011C2  6F61               	movwf	(?_DetectMovement+1)& (0+255),b
  6616  0011C4  0E00               	movlw	0
  6617  0011C6  6F60               	movwf	?_DetectMovement& (0+255),b
  6618                           
  6619                           ; BSR set to: 0
  6620  0011C8  D000               	goto	l49
  6621  0011CA                     l49:
  6622                           
  6623                           ; BSR set to: 0
  6624  0011CA  0012               	return		;funcret
  6625  0011CC                     __end_of_DetectMovement:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           intcon2	equ	0xFF1
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           indf2	equ	0xFDF
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _DetectJoystick *****************
  6643 ;; Defined at:
  6644 ;;		line 27 in file "Joystick.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, status,2
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    6
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text40
  6673  0018AA                     __ptext40:
  6674                           	opt stack 0
  6675  0018AA                     _DetectJoystick:
  6676                           	opt stack 24
  6677                           
  6678                           ;Joystick.c: 29: if (PORTBbits.RB1 == 0)
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;incstack = 0
  6682  0018AA  B281               	btfsc	3969,1,c	;volatile
  6683  0018AC  D003               	goto	l37
  6684                           
  6685                           ;Joystick.c: 30: {
  6686                           ;Joystick.c: 31: PORTAbits.RA2 = 0;
  6687  0018AE  9480               	bcf	3968,2,c	;volatile
  6688                           
  6689                           ;Joystick.c: 32: JSEnableFlag = 0;
  6690  0018B0  0E00               	movlw	0
  6691  0018B2  D008               	goto	L2
  6692  0018B4                     l37:
  6693                           
  6694                           ;Joystick.c: 35: else if ((PORTBbits.RB1 == 1) && (JSEnableFlag == 0))
  6695  0018B4  A281               	btfss	3969,1,c	;volatile
  6696  0018B6  D009               	goto	l40
  6697  0018B8  0100               	movlb	0	; () banked
  6698  0018BA  51CD               	movf	_JSEnableFlag& (0+255),w,b
  6699  0018BC  A4D8               	btfss	status,2,c
  6700  0018BE  D005               	goto	l40
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;Joystick.c: 36: {
  6704                           ;Joystick.c: 37: PORTAbits.RA2 = 1;
  6705  0018C0  8480               	bsf	3968,2,c	;volatile
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;Joystick.c: 38: JSEnableFlag = 1;
  6709  0018C2  0E01               	movlw	1
  6710  0018C4                     L2:
  6711  0018C4  0100               	movlb	0	; () banked
  6712  0018C6  6FCD               	movwf	_JSEnableFlag& (0+255),b
  6713                           
  6714                           ; BSR set to: 0
  6715  0018C8  D000               	goto	l40
  6716  0018CA                     l40:
  6717  0018CA  0012               	return		;funcret
  6718  0018CC                     __end_of_DetectJoystick:
  6719                           	opt stack 0
  6720                           tblptru	equ	0xFF8
  6721                           tblptrh	equ	0xFF7
  6722                           tblptrl	equ	0xFF6
  6723                           tablat	equ	0xFF5
  6724                           prodh	equ	0xFF4
  6725                           prodl	equ	0xFF3
  6726                           intcon	equ	0xFF2
  6727                           intcon2	equ	0xFF1
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           indf2	equ	0xFDF
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function _lISR *****************
  6736 ;; Defined at:
  6737 ;;		line 176 in file "RTDuC.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;		None               void
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6754 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6755 ;;Total ram usage:       17 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    5
  6758 ;; This function calls:
  6759 ;;		_SPIInt
  6760 ;; This function is called by:
  6761 ;;		Interrupt level 1
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	intcodelo
  6766  000018                     __pintcodelo:
  6767                           	opt stack 0
  6768  000018                     _lISR:
  6769                           	opt stack 20
  6770                           
  6771                           ;incstack = 0
  6772  000018  CFD8 F001          	movff	status,??_lISR
  6773  00001C  CFE8 F002          	movff	wreg,??_lISR+1
  6774  000020  CFE0 F003          	movff	bsr,??_lISR+2
  6775  000024  CFFA F004          	movff	pclath,??_lISR+3
  6776  000028  CFFB F005          	movff	pclatu,??_lISR+4
  6777  00002C  CFE9 F006          	movff	fsr0l,??_lISR+5
  6778  000030  CFEA F007          	movff	fsr0h,??_lISR+6
  6779  000034  CFE1 F008          	movff	fsr1l,??_lISR+7
  6780  000038  CFE2 F009          	movff	fsr1h,??_lISR+8
  6781  00003C  CFD9 F00A          	movff	fsr2l,??_lISR+9
  6782  000040  CFDA F00B          	movff	fsr2h,??_lISR+10
  6783  000044  CFF3 F00C          	movff	prodl,??_lISR+11
  6784  000048  CFF4 F00D          	movff	prodh,??_lISR+12
  6785  00004C  CFF6 F00E          	movff	tblptrl,??_lISR+13
  6786  000050  CFF7 F00F          	movff	tblptrh,??_lISR+14
  6787  000054  CFF8 F010          	movff	tblptru,??_lISR+15
  6788  000058  CFF5 F011          	movff	tablat,??_lISR+16
  6789                           
  6790                           ;RTDuC.c: 178: if (PIR1bits.SSP1IF == 1)
  6791  00005C  A69E               	btfss	3998,3,c	;volatile
  6792  00005E  D003               	goto	i1l526
  6793                           
  6794                           ;RTDuC.c: 179: {
  6795                           ;RTDuC.c: 180: SPIInt();
  6796  000060  ECC1  F00C         	call	_SPIInt	;wreg free
  6797  000064  D000               	goto	i1l526
  6798  000066                     i1l526:
  6799  000066  C011  FFF5         	movff	??_lISR+16,tablat
  6800  00006A  C010  FFF8         	movff	??_lISR+15,tblptru
  6801  00006E  C00F  FFF7         	movff	??_lISR+14,tblptrh
  6802  000072  C00E  FFF6         	movff	??_lISR+13,tblptrl
  6803  000076  C00D  FFF4         	movff	??_lISR+12,prodh
  6804  00007A  C00C  FFF3         	movff	??_lISR+11,prodl
  6805  00007E  C00B  FFDA         	movff	??_lISR+10,fsr2h
  6806  000082  C00A  FFD9         	movff	??_lISR+9,fsr2l
  6807  000086  C009  FFE2         	movff	??_lISR+8,fsr1h
  6808  00008A  C008  FFE1         	movff	??_lISR+7,fsr1l
  6809  00008E  C007  FFEA         	movff	??_lISR+6,fsr0h
  6810  000092  C006  FFE9         	movff	??_lISR+5,fsr0l
  6811  000096  C005  FFFB         	movff	??_lISR+4,pclatu
  6812  00009A  C004  FFFA         	movff	??_lISR+3,pclath
  6813  00009E  C003  FFE0         	movff	??_lISR+2,bsr
  6814  0000A2  C002  FFE8         	movff	??_lISR+1,wreg
  6815  0000A6  C001  FFD8         	movff	??_lISR,status
  6816  0000AA  0010               	retfie	
  6817  0000AC                     __end_of_lISR:
  6818                           	opt stack 0
  6819                           pclatu	equ	0xFFB
  6820                           pclath	equ	0xFFA
  6821                           tblptru	equ	0xFF8
  6822                           tblptrh	equ	0xFF7
  6823                           tblptrl	equ	0xFF6
  6824                           tablat	equ	0xFF5
  6825                           prodh	equ	0xFF4
  6826                           prodl	equ	0xFF3
  6827                           intcon	equ	0xFF2
  6828                           intcon2	equ	0xFF1
  6829                           postinc0	equ	0xFEE
  6830                           fsr0h	equ	0xFEA
  6831                           fsr0l	equ	0xFE9
  6832                           wreg	equ	0xFE8
  6833                           fsr1h	equ	0xFE2
  6834                           fsr1l	equ	0xFE1
  6835                           bsr	equ	0xFE0
  6836                           indf2	equ	0xFDF
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _SPIInt *****************
  6842 ;; Defined at:
  6843 ;;		line 26 in file "SPISlave.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;		None
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;		None               void
  6850 ;; Registers used:
  6851 ;;		wreg, status,2
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;Total ram usage:        0 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    4
  6864 ;; This function calls:
  6865 ;;		Nothing
  6866 ;; This function is called by:
  6867 ;;		_lISR
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           	psect	text42
  6872  001982                     __ptext42:
  6873                           	opt stack 0
  6874  001982                     _SPIInt:
  6875                           	opt stack 20
  6876                           
  6877                           ;SPISlave.c: 28: Command = SSP2BUF;
  6878                           
  6879                           ;incstack = 0
  6880  001982  CF66 F0CC          	movff	3942,_Command	;volatile
  6881                           
  6882                           ;SPISlave.c: 29: PORTCbits.RC6 = 1;
  6883  001986  8C82               	bsf	3970,6,c	;volatile
  6884                           
  6885                           ;SPISlave.c: 30: PIR1bits.SSP1IF = 0;
  6886  001988  969E               	bcf	3998,3,c	;volatile
  6887                           
  6888                           ;SPISlave.c: 31: PIE1bits.SSP1IE = 0;
  6889  00198A  969D               	bcf	3997,3,c	;volatile
  6890                           
  6891                           ;SPISlave.c: 32: SPIflag = 1;
  6892  00198C  0E01               	movlw	1
  6893  00198E  0100               	movlb	0	; () banked
  6894  001990  6FCF               	movwf	_SPIflag& (0+255),b
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;SPISlave.c: 33: PIR1bits.SSP1IF = 0;
  6898  001992  969E               	bcf	3998,3,c	;volatile
  6899                           
  6900                           ; BSR set to: 0
  6901  001994  0012               	return		;funcret
  6902  001996                     __end_of_SPIInt:
  6903                           	opt stack 0
  6904                           pclatu	equ	0xFFB
  6905                           pclath	equ	0xFFA
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           intcon2	equ	0xFF1
  6914                           postinc0	equ	0xFEE
  6915                           fsr0h	equ	0xFEA
  6916                           fsr0l	equ	0xFE9
  6917                           wreg	equ	0xFE8
  6918                           fsr1h	equ	0xFE2
  6919                           fsr1l	equ	0xFE1
  6920                           bsr	equ	0xFE0
  6921                           indf2	equ	0xFDF
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _hISR *****************
  6927 ;; Defined at:
  6928 ;;		line 135 in file "RTDuC.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;Total ram usage:       16 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    3
  6949 ;; This function calls:
  6950 ;;		_HLVDInt
  6951 ;;		_INT0Int
  6952 ;;		_TMR0Int
  6953 ;; This function is called by:
  6954 ;;		Interrupt level 2
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	intcode
  6959  000008                     __pintcode:
  6960                           	opt stack 0
  6961  000008                     _hISR:
  6962                           	opt stack 20
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;incstack = 0
  6966  000008  CFFA F01D          	movff	pclath,??_hISR+2
  6967  00000C  CFFB F01E          	movff	pclatu,??_hISR+3
  6968  000010  CFE9 F01F          	movff	fsr0l,??_hISR+4
  6969  000014  ED37  F008         	call	int_func,f	;refresh shadow registers
  6970                           pclatu	equ	0xFFB
  6971                           pclath	equ	0xFFA
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           intcon2	equ	0xFF1
  6980                           postinc0	equ	0xFEE
  6981                           fsr0h	equ	0xFEA
  6982                           fsr0l	equ	0xFE9
  6983                           wreg	equ	0xFE8
  6984                           fsr1h	equ	0xFE2
  6985                           fsr1l	equ	0xFE1
  6986                           bsr	equ	0xFE0
  6987                           indf2	equ	0xFDF
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992                           	psect	intcode_body
  6993  00106E                     __pintcode_body:
  6994                           	opt stack 20
  6995  00106E                     int_func:
  6996                           	opt stack 20
  6997  00106E  0006               	pop		; remove dummy address from shadow register refresh
  6998  001070  CFEA F020          	movff	fsr0h,??_hISR+5
  6999  001074  CFE1 F021          	movff	fsr1l,??_hISR+6
  7000  001078  CFE2 F022          	movff	fsr1h,??_hISR+7
  7001  00107C  CFD9 F023          	movff	fsr2l,??_hISR+8
  7002  001080  CFDA F024          	movff	fsr2h,??_hISR+9
  7003  001084  CFF3 F025          	movff	prodl,??_hISR+10
  7004  001088  CFF4 F026          	movff	prodh,??_hISR+11
  7005  00108C  CFF6 F027          	movff	tblptrl,??_hISR+12
  7006  001090  CFF7 F028          	movff	tblptrh,??_hISR+13
  7007  001094  CFF8 F029          	movff	tblptru,??_hISR+14
  7008  001098  CFF5 F02A          	movff	tablat,??_hISR+15
  7009                           
  7010                           ;RTDuC.c: 137: PORTCbits.RC6 = 1;
  7011  00109C  8C82               	bsf	3970,6,c	;volatile
  7012                           
  7013                           ;RTDuC.c: 139: if ((INTCONbits.TMR0IF == 1) && ((PIDEnableFlag | 0x01) == 0x01))
  7014  00109E  A4F2               	btfss	intcon,2,c	;volatile
  7015  0010A0  D010               	goto	i2l3946
  7016  0010A2  0100               	movlb	0	; () banked
  7017  0010A4  51CE               	movf	_PIDEnableFlag& (0+255),w,b
  7018  0010A6  6E1B               	movwf	??_hISR& (0+255),c
  7019  0010A8  6A1C               	clrf	(??_hISR+1)& (0+255),c
  7020  0010AA  0E01               	movlw	1
  7021  0010AC  121B               	iorwf	??_hISR,f,c
  7022  0010AE  0E00               	movlw	0
  7023  0010B0  121C               	iorwf	??_hISR+1,f,c
  7024  0010B2  041B               	decf	??_hISR,w,c
  7025  0010B4  101C               	iorwf	??_hISR+1,w,c
  7026  0010B6  A4D8               	btfss	status,2,c
  7027  0010B8  D004               	goto	i2l3946
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;RTDuC.c: 140: {
  7031                           ;RTDuC.c: 141: TMR0Int();
  7032  0010BA  ECCB  F00C         	call	_TMR0Int	;wreg free
  7033                           
  7034                           ;RTDuC.c: 142: PORTCbits.RC6 = 0;
  7035  0010BE  9C82               	bcf	3970,6,c	;volatile
  7036  0010C0  D000               	goto	i2l3946
  7037  0010C2                     i2l3946:
  7038                           
  7039                           ;RTDuC.c: 143: }
  7040                           ;RTDuC.c: 145: if (INTCONbits.INT0IF == 1)
  7041  0010C2  A2F2               	btfss	intcon,1,c	;volatile
  7042  0010C4  D003               	goto	i2l3950
  7043                           
  7044                           ;RTDuC.c: 146: {
  7045                           ;RTDuC.c: 147: INT0Int();
  7046  0010C6  EC43  F00C         	call	_INT0Int	;wreg free
  7047  0010CA  D000               	goto	i2l3950
  7048  0010CC                     i2l3950:
  7049                           
  7050                           ;RTDuC.c: 148: }
  7051                           ;RTDuC.c: 150: if (PIR2bits.HLVDIF == 1)
  7052  0010CC  A4A1               	btfss	4001,2,c	;volatile
  7053  0010CE  D006               	goto	i2l3956
  7054                           
  7055                           ;RTDuC.c: 151: {
  7056                           ;RTDuC.c: 152: PORTAbits.RA4 = 0;
  7057  0010D0  9880               	bcf	3968,4,c	;volatile
  7058                           
  7059                           ;RTDuC.c: 153: PORTAbits.RA3 = 0;
  7060  0010D2  9680               	bcf	3968,3,c	;volatile
  7061                           
  7062                           ;RTDuC.c: 154: PORTAbits.RA2 = 0;
  7063  0010D4  9480               	bcf	3968,2,c	;volatile
  7064                           
  7065                           ;RTDuC.c: 155: HLVDInt();
  7066  0010D6  ECDB  F007         	call	_HLVDInt	;wreg free
  7067  0010DA  D000               	goto	i2l3956
  7068  0010DC                     i2l3956:
  7069                           
  7070                           ;RTDuC.c: 156: }
  7071                           ;RTDuC.c: 158: if (PIR2bits.OSCFIF == 1)
  7072  0010DC  AEA1               	btfss	4001,7,c	;volatile
  7073  0010DE  D002               	goto	i2l522
  7074  0010E0  00FF               	reset		;# 
  7075  0010E2  D000               	goto	i2l522
  7076  0010E4                     i2l522:
  7077  0010E4  C02A  FFF5         	movff	??_hISR+15,tablat
  7078  0010E8  C029  FFF8         	movff	??_hISR+14,tblptru
  7079  0010EC  C028  FFF7         	movff	??_hISR+13,tblptrh
  7080  0010F0  C027  FFF6         	movff	??_hISR+12,tblptrl
  7081  0010F4  C026  FFF4         	movff	??_hISR+11,prodh
  7082  0010F8  C025  FFF3         	movff	??_hISR+10,prodl
  7083  0010FC  C024  FFDA         	movff	??_hISR+9,fsr2h
  7084  001100  C023  FFD9         	movff	??_hISR+8,fsr2l
  7085  001104  C022  FFE2         	movff	??_hISR+7,fsr1h
  7086  001108  C021  FFE1         	movff	??_hISR+6,fsr1l
  7087  00110C  C020  FFEA         	movff	??_hISR+5,fsr0h
  7088  001110  C01F  FFE9         	movff	??_hISR+4,fsr0l
  7089  001114  C01E  FFFB         	movff	??_hISR+3,pclatu
  7090  001118  C01D  FFFA         	movff	??_hISR+2,pclath
  7091  00111C  0011               	retfie		f
  7092  00111E                     __end_of_hISR:
  7093                           	opt stack 0
  7094                           pclatu	equ	0xFFB
  7095                           pclath	equ	0xFFA
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           intcon2	equ	0xFF1
  7104                           postinc0	equ	0xFEE
  7105                           fsr0h	equ	0xFEA
  7106                           fsr0l	equ	0xFE9
  7107                           wreg	equ	0xFE8
  7108                           fsr1h	equ	0xFE2
  7109                           fsr1l	equ	0xFE1
  7110                           bsr	equ	0xFE0
  7111                           indf2	equ	0xFDF
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function _TMR0Int *****************
  7117 ;; Defined at:
  7118 ;;		line 57 in file "PID.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;		None               void
  7125 ;; Registers used:
  7126 ;;		wreg, status,2
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;Total ram usage:        0 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_hISR
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text44
  7146  001996                     __ptext44:
  7147                           	opt stack 0
  7148  001996                     _TMR0Int:
  7149                           	opt stack 22
  7150                           
  7151                           ;PID.c: 59: TMR0H = 0xDB;
  7152                           
  7153                           ;incstack = 0
  7154  001996  0EDB               	movlw	219
  7155  001998  6ED7               	movwf	4055,c	;volatile
  7156                           
  7157                           ;PID.c: 60: TMR0L = 0x60;
  7158  00199A  0E60               	movlw	96
  7159  00199C  6ED6               	movwf	4054,c	;volatile
  7160                           
  7161                           ;PID.c: 61: TMR0Flag = 1;
  7162  00199E  0E01               	movlw	1
  7163  0019A0  0100               	movlb	0	; () banked
  7164  0019A2  6FD0               	movwf	_TMR0Flag& (0+255),b
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;PID.c: 62: INTCONbits.TMR0IF = 0;
  7168  0019A4  94F2               	bcf	intcon,2,c	;volatile
  7169                           
  7170                           ; BSR set to: 0
  7171  0019A6  0012               	return		;funcret
  7172  0019A8                     __end_of_TMR0Int:
  7173                           	opt stack 0
  7174                           pclatu	equ	0xFFB
  7175                           pclath	equ	0xFFA
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon2	equ	0xFF1
  7184                           postinc0	equ	0xFEE
  7185                           fsr0h	equ	0xFEA
  7186                           fsr0l	equ	0xFE9
  7187                           wreg	equ	0xFE8
  7188                           fsr1h	equ	0xFE2
  7189                           fsr1l	equ	0xFE1
  7190                           bsr	equ	0xFE0
  7191                           indf2	equ	0xFDF
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function _INT0Int *****************
  7197 ;; Defined at:
  7198 ;;		line 184 in file "RTDuC.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;		None
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;		None
  7203 ;; Return value:  Size  Location     Type
  7204 ;;		None               void
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;Total ram usage:        0 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    1
  7219 ;; This function calls:
  7220 ;;		_KillMotors
  7221 ;; This function is called by:
  7222 ;;		_hISR
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text45
  7227  001886                     __ptext45:
  7228                           	opt stack 0
  7229  001886                     _INT0Int:
  7230                           	opt stack 21
  7231                           
  7232                           ;RTDuC.c: 186: KillMotors();
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;incstack = 0
  7236  001886  ECEA  F00C         	call	_KillMotors	;wreg free
  7237                           
  7238                           ;RTDuC.c: 187: PORTAbits.RA3 = 0;
  7239  00188A  9680               	bcf	3968,3,c	;volatile
  7240                           
  7241                           ;RTDuC.c: 188: T0CONbits.TMR0ON = 1;
  7242  00188C  8ED5               	bsf	4053,7,c	;volatile
  7243                           
  7244                           ;RTDuC.c: 189: INTCONbits.GIE = 0;
  7245  00188E  9EF2               	bcf	intcon,7,c	;volatile
  7246                           
  7247                           ;RTDuC.c: 190: PORTAbits.RA4 = 1;
  7248  001890  8880               	bsf	3968,4,c	;volatile
  7249  001892  D000               	goto	i2l2960
  7250  001894                     i2l2960:
  7251                           
  7252                           ;RTDuC.c: 192: {
  7253                           ;RTDuC.c: 193: TMR0H = 0x00;
  7254  001894  0E00               	movlw	0
  7255  001896  6ED7               	movwf	4055,c	;volatile
  7256                           
  7257                           ;RTDuC.c: 194: TMR0L = 0x00;
  7258  001898  0E00               	movlw	0
  7259  00189A  6ED6               	movwf	4054,c	;volatile
  7260                           
  7261                           ;RTDuC.c: 195: while (!INTCONbits.TMR0IF);
  7262  00189C  D000               	goto	i2l530
  7263  00189E                     i2l530:
  7264  00189E  A4F2               	btfss	intcon,2,c	;volatile
  7265  0018A0  D7FE               	goto	i2l530
  7266                           
  7267                           ;RTDuC.c: 196: INTCONbits.TMR0IF = 0;
  7268  0018A2  94F2               	bcf	intcon,2,c	;volatile
  7269                           
  7270                           ;RTDuC.c: 197: ~PORTAbits.RA4;
  7271  0018A4  5080               	movf	3968,w,c	;volatile
  7272  0018A6  D7F6               	goto	i2l2960
  7273  0018A8  0012               	return		;funcret
  7274  0018AA                     __end_of_INT0Int:
  7275                           	opt stack 0
  7276                           pclatu	equ	0xFFB
  7277                           pclath	equ	0xFFA
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           postinc0	equ	0xFEE
  7287                           fsr0h	equ	0xFEA
  7288                           fsr0l	equ	0xFE9
  7289                           wreg	equ	0xFE8
  7290                           fsr1h	equ	0xFE2
  7291                           fsr1l	equ	0xFE1
  7292                           bsr	equ	0xFE0
  7293                           indf2	equ	0xFDF
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function _KillMotors *****************
  7299 ;; Defined at:
  7300 ;;		line 28 in file "MotorControl.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;		None
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;		None
  7305 ;; Return value:  Size  Location     Type
  7306 ;;		None               void
  7307 ;; Registers used:
  7308 ;;		wreg, status,2, status,0
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;Total ram usage:        0 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_INT0Int
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text46
  7328  0019D4                     __ptext46:
  7329                           	opt stack 0
  7330  0019D4                     _KillMotors:
  7331                           	opt stack 21
  7332                           
  7333                           ;MotorControl.c: 30: PORTAbits.RA4 = 1;
  7334                           
  7335                           ;incstack = 0
  7336  0019D4  8880               	bsf	3968,4,c	;volatile
  7337                           
  7338                           ;MotorControl.c: 31: CCP3CON = CCP3CON & 0xF0;
  7339  0019D6  50B7               	movf	4023,w,c	;volatile
  7340  0019D8  0BF0               	andlw	240
  7341  0019DA  6EB7               	movwf	4023,c	;volatile
  7342  0019DC  0012               	return		;funcret
  7343  0019DE                     __end_of_KillMotors:
  7344                           	opt stack 0
  7345                           pclatu	equ	0xFFB
  7346                           pclath	equ	0xFFA
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           intcon2	equ	0xFF1
  7355                           postinc0	equ	0xFEE
  7356                           fsr0h	equ	0xFEA
  7357                           fsr0l	equ	0xFE9
  7358                           wreg	equ	0xFE8
  7359                           fsr1h	equ	0xFE2
  7360                           fsr1l	equ	0xFE1
  7361                           bsr	equ	0xFE0
  7362                           indf2	equ	0xFDF
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function _HLVDInt *****************
  7368 ;; Defined at:
  7369 ;;		line 150 in file "EEPROM.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;		None
  7374 ;; Return value:  Size  Location     Type
  7375 ;;		None               void
  7376 ;; Registers used:
  7377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;Total ram usage:        0 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    2
  7390 ;; This function calls:
  7391 ;;		_EEWriteChar
  7392 ;;		_EEWriteDouble
  7393 ;; This function is called by:
  7394 ;;		_hISR
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text47
  7399  000FB6                     __ptext47:
  7400                           	opt stack 0
  7401  000FB6                     _HLVDInt:
  7402                           	opt stack 20
  7403                           
  7404                           ;EEPROM.c: 152: EEWriteDouble(0x00, SetAngle);
  7405                           
  7406                           ;incstack = 0
  7407  000FB6  C032  F016         	movff	_SetAngle,EEWriteDouble@dub
  7408  000FBA  C033  F017         	movff	_SetAngle+1,EEWriteDouble@dub+1
  7409  000FBE  C034  F018         	movff	_SetAngle+2,EEWriteDouble@dub+2
  7410  000FC2  0E00               	movlw	0
  7411  000FC4  EC46  F00A         	call	_EEWriteDouble
  7412                           
  7413                           ;EEPROM.c: 153: EEWriteDouble(0x03, Kp);
  7414  000FC8  C0BE  F016         	movff	_Kp,EEWriteDouble@dub
  7415  000FCC  C0BF  F017         	movff	_Kp+1,EEWriteDouble@dub+1
  7416  000FD0  C0C0  F018         	movff	_Kp+2,EEWriteDouble@dub+2
  7417  000FD4  0E03               	movlw	3
  7418  000FD6  EC46  F00A         	call	_EEWriteDouble
  7419                           
  7420                           ;EEPROM.c: 154: EEWriteDouble(0x06, Ki);
  7421  000FDA  C0BB  F016         	movff	_Ki,EEWriteDouble@dub
  7422  000FDE  C0BC  F017         	movff	_Ki+1,EEWriteDouble@dub+1
  7423  000FE2  C0BD  F018         	movff	_Ki+2,EEWriteDouble@dub+2
  7424  000FE6  0E06               	movlw	6
  7425  000FE8  EC46  F00A         	call	_EEWriteDouble
  7426                           
  7427                           ;EEPROM.c: 155: EEWriteDouble(0x09, Kd);
  7428  000FEC  C0B8  F016         	movff	_Kd,EEWriteDouble@dub
  7429  000FF0  C0B9  F017         	movff	_Kd+1,EEWriteDouble@dub+1
  7430  000FF4  C0BA  F018         	movff	_Kd+2,EEWriteDouble@dub+2
  7431  000FF8  0E09               	movlw	9
  7432  000FFA  EC46  F00A         	call	_EEWriteDouble
  7433                           
  7434                           ;EEPROM.c: 156: EEWriteChar(0x0C, PORTA);
  7435  000FFE  CF80 F016          	movff	3968,EEWriteChar@ch	;volatile
  7436  001002  0E0C               	movlw	12
  7437  001004  EC66  F00C         	call	_EEWriteChar
  7438                           
  7439                           ;EEPROM.c: 157: EEWriteChar(0x0D, PORTB);
  7440  001008  CF81 F016          	movff	3969,EEWriteChar@ch	;volatile
  7441  00100C  0E0D               	movlw	13
  7442  00100E  EC66  F00C         	call	_EEWriteChar
  7443                           
  7444                           ;EEPROM.c: 158: EEWriteChar(0x0E, PORTC);
  7445  001012  CF82 F016          	movff	3970,EEWriteChar@ch	;volatile
  7446  001016  0E0E               	movlw	14
  7447  001018  EC66  F00C         	call	_EEWriteChar
  7448                           
  7449                           ;EEPROM.c: 159: EEWriteChar(0x0F, PORTD);
  7450  00101C  CF83 F016          	movff	3971,EEWriteChar@ch	;volatile
  7451  001020  0E0F               	movlw	15
  7452  001022  EC66  F00C         	call	_EEWriteChar
  7453                           
  7454                           ;EEPROM.c: 160: EEWriteChar(0x10, PORTE);
  7455  001026  CF84 F016          	movff	3972,EEWriteChar@ch	;volatile
  7456  00102A  0E10               	movlw	16
  7457  00102C  EC66  F00C         	call	_EEWriteChar
  7458                           
  7459                           ;EEPROM.c: 161: EEWriteChar(0x11, PORTF);
  7460  001030  CF85 F016          	movff	3973,EEWriteChar@ch	;volatile
  7461  001034  0E11               	movlw	17
  7462  001036  EC66  F00C         	call	_EEWriteChar
  7463                           
  7464                           ;EEPROM.c: 162: EEWriteChar(0x12, PORTG);
  7465  00103A  CF86 F016          	movff	3974,EEWriteChar@ch	;volatile
  7466  00103E  0E12               	movlw	18
  7467  001040  EC66  F00C         	call	_EEWriteChar
  7468                           
  7469                           ;EEPROM.c: 163: EEWriteChar(0x13, PORTH);
  7470  001044  CF87 F016          	movff	3975,EEWriteChar@ch	;volatile
  7471  001048  0E13               	movlw	19
  7472  00104A  EC66  F00C         	call	_EEWriteChar
  7473                           
  7474                           ;EEPROM.c: 164: EEWriteChar(0x14, PORTJ);
  7475  00104E  CF88 F016          	movff	3976,EEWriteChar@ch	;volatile
  7476  001052  0E14               	movlw	20
  7477  001054  EC66  F00C         	call	_EEWriteChar
  7478                           
  7479                           ;EEPROM.c: 165: EEWriteChar(0x15, PIDEnableFlag);
  7480  001058  C0CE  F016         	movff	_PIDEnableFlag,EEWriteChar@ch
  7481  00105C  0E15               	movlw	21
  7482  00105E  EC66  F00C         	call	_EEWriteChar
  7483                           
  7484                           ;EEPROM.c: 166: EEWriteChar(0x16, 0x01);
  7485  001062  0E01               	movlw	1
  7486  001064  6E16               	movwf	EEWriteChar@ch,c
  7487  001066  0E16               	movlw	22
  7488  001068  EC66  F00C         	call	_EEWriteChar
  7489  00106C  0012               	return		;funcret
  7490  00106E                     __end_of_HLVDInt:
  7491                           	opt stack 0
  7492                           pclatu	equ	0xFFB
  7493                           pclath	equ	0xFFA
  7494                           tblptru	equ	0xFF8
  7495                           tblptrh	equ	0xFF7
  7496                           tblptrl	equ	0xFF6
  7497                           tablat	equ	0xFF5
  7498                           prodh	equ	0xFF4
  7499                           prodl	equ	0xFF3
  7500                           intcon	equ	0xFF2
  7501                           intcon2	equ	0xFF1
  7502                           postinc0	equ	0xFEE
  7503                           fsr0h	equ	0xFEA
  7504                           fsr0l	equ	0xFE9
  7505                           wreg	equ	0xFE8
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           bsr	equ	0xFE0
  7509                           indf2	equ	0xFDF
  7510                           fsr2h	equ	0xFDA
  7511                           fsr2l	equ	0xFD9
  7512                           status	equ	0xFD8
  7513                           
  7514 ;; *************** function _EEWriteDouble *****************
  7515 ;; Defined at:
  7516 ;;		line 77 in file "EEPROM.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  location        1    wreg     unsigned char 
  7519 ;;  dub             3   21[COMRAM] unsigned char 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  location        1   24[COMRAM] unsigned char 
  7522 ;;  x               1   25[COMRAM] unsigned char 
  7523 ;; Return value:  Size  Location     Type
  7524 ;;		None               void
  7525 ;; Registers used:
  7526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7532 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;Total ram usage:        5 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; Hardware stack levels required when called:    1
  7539 ;; This function calls:
  7540 ;;		_EEDisassembleDouble
  7541 ;;		_Write_b_eep
  7542 ;;		i2_Busy_eep
  7543 ;; This function is called by:
  7544 ;;		_HLVDInt
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text48
  7549  00148C                     __ptext48:
  7550                           	opt stack 0
  7551  00148C                     _EEWriteDouble:
  7552                           	opt stack 20
  7553                           
  7554                           ;incstack = 0
  7555                           ;EEWriteDouble@location stored from wreg
  7556  00148C  6E19               	movwf	EEWriteDouble@location,c
  7557                           
  7558                           ;EEPROM.c: 79: unsigned char x;
  7559                           ;EEPROM.c: 81: EEDisassembleDouble(dub);
  7560  00148E  C016  F012         	movff	EEWriteDouble@dub,EEDisassembleDouble@dub
  7561  001492  C017  F013         	movff	EEWriteDouble@dub+1,EEDisassembleDouble@dub+1
  7562  001496  C018  F014         	movff	EEWriteDouble@dub+2,EEDisassembleDouble@dub+2
  7563  00149A  EC7C  F00B         	call	_EEDisassembleDouble	;wreg free
  7564                           
  7565                           ;EEPROM.c: 83: INTCON = INTCON & 0x3F;
  7566  00149E  50F2               	movf	intcon,w,c	;volatile
  7567  0014A0  0B3F               	andlw	63
  7568  0014A2  6EF2               	movwf	intcon,c	;volatile
  7569                           
  7570                           ;EEPROM.c: 85: for (x = 0; x < 3; x++)
  7571  0014A4  0E00               	movlw	0
  7572  0014A6  6E1A               	movwf	EEWriteDouble@x,c
  7573  0014A8                     i2l3438:
  7574  0014A8  0E02               	movlw	2
  7575  0014AA  641A               	cpfsgt	EEWriteDouble@x,c
  7576  0014AC  D001               	goto	i2l3442
  7577  0014AE  D014               	goto	i2l3452
  7578  0014B0                     i2l3442:
  7579                           
  7580                           ;EEPROM.c: 86: {
  7581                           ;EEPROM.c: 87: Write_b_eep(location, DDouble[x]);
  7582  0014B0  C019  F012         	movff	EEWriteDouble@location,Write_b_eep@badd
  7583  0014B4  6A13               	clrf	Write_b_eep@badd+1,c
  7584  0014B6  501A               	movf	EEWriteDouble@x,w,c
  7585  0014B8  0D01               	mullw	1
  7586  0014BA  0E2F               	movlw	low _DDouble
  7587  0014BC  24F3               	addwf	prodl,w,c
  7588  0014BE  6ED9               	movwf	fsr2l,c
  7589  0014C0  0E00               	movlw	high _DDouble
  7590  0014C2  20F4               	addwfc	prodh,w,c
  7591  0014C4  6EDA               	movwf	fsr2h,c
  7592  0014C6  50DF               	movf	indf2,w,c
  7593  0014C8  6E14               	movwf	Write_b_eep@bdat,c
  7594  0014CA  EC1F  F00B         	call	_Write_b_eep	;wreg free
  7595                           
  7596                           ;EEPROM.c: 88: location++;
  7597  0014CE  2A19               	incf	EEWriteDouble@location,f,c
  7598                           
  7599                           ;EEPROM.c: 89: Busy_eep();
  7600  0014D0  ECF3  F00C         	call	i2_Busy_eep	;wreg free
  7601  0014D4  2A1A               	incf	EEWriteDouble@x,f,c
  7602  0014D6  D7E8               	goto	i2l3438
  7603  0014D8                     i2l3452:
  7604                           
  7605                           ;EEPROM.c: 90: }
  7606                           ;EEPROM.c: 92: INTCON = INTCON | 0xC0;
  7607  0014D8  50F2               	movf	intcon,w,c	;volatile
  7608  0014DA  09C0               	iorlw	192
  7609  0014DC  6EF2               	movwf	intcon,c	;volatile
  7610  0014DE  0012               	return		;funcret
  7611  0014E0                     __end_of_EEWriteDouble:
  7612                           	opt stack 0
  7613                           pclatu	equ	0xFFB
  7614                           pclath	equ	0xFFA
  7615                           tblptru	equ	0xFF8
  7616                           tblptrh	equ	0xFF7
  7617                           tblptrl	equ	0xFF6
  7618                           tablat	equ	0xFF5
  7619                           prodh	equ	0xFF4
  7620                           prodl	equ	0xFF3
  7621                           intcon	equ	0xFF2
  7622                           intcon2	equ	0xFF1
  7623                           postinc0	equ	0xFEE
  7624                           fsr0h	equ	0xFEA
  7625                           fsr0l	equ	0xFE9
  7626                           wreg	equ	0xFE8
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           bsr	equ	0xFE0
  7630                           indf2	equ	0xFDF
  7631                           fsr2h	equ	0xFDA
  7632                           fsr2l	equ	0xFD9
  7633                           status	equ	0xFD8
  7634                           
  7635 ;; *************** function _EEDisassembleDouble *****************
  7636 ;; Defined at:
  7637 ;;		line 48 in file "EEPROM.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  dub             3   17[COMRAM] unsigned char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;		None               void
  7644 ;; Registers used:
  7645 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7651 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;Total ram usage:        3 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; This function calls:
  7658 ;;		Nothing
  7659 ;; This function is called by:
  7660 ;;		_EEWriteDouble
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text49
  7665  0016F8                     __ptext49:
  7666                           	opt stack 0
  7667  0016F8                     _EEDisassembleDouble:
  7668                           	opt stack 20
  7669                           
  7670                           ;EEPROM.c: 50: DoublePtr = (unsigned char*) &dub;
  7671                           
  7672                           ;incstack = 0
  7673  0016F8  0E12               	movlw	low EEDisassembleDouble@dub
  7674  0016FA  6E35               	movwf	_DoublePtr,c
  7675  0016FC  0E00               	movlw	high EEDisassembleDouble@dub
  7676  0016FE  6E36               	movwf	_DoublePtr+1,c
  7677                           
  7678                           ;EEPROM.c: 51: DDouble[0] = DoublePtr[0];
  7679  001700  C035  FFD9         	movff	_DoublePtr,fsr2l
  7680  001704  C036  FFDA         	movff	_DoublePtr+1,fsr2h
  7681  001708  50DF               	movf	indf2,w,c
  7682  00170A  6E2F               	movwf	_DDouble,c
  7683                           
  7684                           ;EEPROM.c: 52: DDouble[1] = DoublePtr[1];
  7685  00170C  EE20 F001          	lfsr	2,1
  7686  001710  5035               	movf	_DoublePtr,w,c
  7687  001712  26D9               	addwf	fsr2l,f,c
  7688  001714  5036               	movf	_DoublePtr+1,w,c
  7689  001716  22DA               	addwfc	fsr2h,f,c
  7690  001718  50DF               	movf	indf2,w,c
  7691  00171A  6E30               	movwf	_DDouble+1,c
  7692                           
  7693                           ;EEPROM.c: 53: DDouble[2] = DoublePtr[2];
  7694  00171C  EE20 F002          	lfsr	2,2
  7695  001720  5035               	movf	_DoublePtr,w,c
  7696  001722  26D9               	addwf	fsr2l,f,c
  7697  001724  5036               	movf	_DoublePtr+1,w,c
  7698  001726  22DA               	addwfc	fsr2h,f,c
  7699  001728  50DF               	movf	indf2,w,c
  7700  00172A  6E31               	movwf	_DDouble+2,c
  7701  00172C  0012               	return		;funcret
  7702  00172E                     __end_of_EEDisassembleDouble:
  7703                           	opt stack 0
  7704                           pclatu	equ	0xFFB
  7705                           pclath	equ	0xFFA
  7706                           tblptru	equ	0xFF8
  7707                           tblptrh	equ	0xFF7
  7708                           tblptrl	equ	0xFF6
  7709                           tablat	equ	0xFF5
  7710                           prodh	equ	0xFF4
  7711                           prodl	equ	0xFF3
  7712                           intcon	equ	0xFF2
  7713                           intcon2	equ	0xFF1
  7714                           postinc0	equ	0xFEE
  7715                           fsr0h	equ	0xFEA
  7716                           fsr0l	equ	0xFE9
  7717                           wreg	equ	0xFE8
  7718                           fsr1h	equ	0xFE2
  7719                           fsr1l	equ	0xFE1
  7720                           bsr	equ	0xFE0
  7721                           indf2	equ	0xFDF
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function _EEWriteChar *****************
  7727 ;; Defined at:
  7728 ;;		line 122 in file "EEPROM.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  location        1    wreg     unsigned char 
  7731 ;;  ch              1   21[COMRAM] unsigned char 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  location        1   22[COMRAM] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;		None               void
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7743 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;Total ram usage:        2 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    1
  7750 ;; This function calls:
  7751 ;;		_Write_b_eep
  7752 ;;		i2_Busy_eep
  7753 ;; This function is called by:
  7754 ;;		_HLVDInt
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text50
  7759  0018CC                     __ptext50:
  7760                           	opt stack 0
  7761  0018CC                     _EEWriteChar:
  7762                           	opt stack 20
  7763                           
  7764                           ;incstack = 0
  7765                           ;EEWriteChar@location stored from wreg
  7766  0018CC  6E17               	movwf	EEWriteChar@location,c
  7767                           
  7768                           ;EEPROM.c: 124: INTCON = INTCON & 0x3F;
  7769  0018CE  50F2               	movf	intcon,w,c	;volatile
  7770  0018D0  0B3F               	andlw	63
  7771  0018D2  6EF2               	movwf	intcon,c	;volatile
  7772                           
  7773                           ;EEPROM.c: 126: Write_b_eep(location, ch);
  7774  0018D4  C017  F012         	movff	EEWriteChar@location,Write_b_eep@badd
  7775  0018D8  6A13               	clrf	Write_b_eep@badd+1,c
  7776  0018DA  C016  F014         	movff	EEWriteChar@ch,Write_b_eep@bdat
  7777  0018DE  EC1F  F00B         	call	_Write_b_eep	;wreg free
  7778                           
  7779                           ;EEPROM.c: 127: Busy_eep();
  7780  0018E2  ECF3  F00C         	call	i2_Busy_eep	;wreg free
  7781                           
  7782                           ;EEPROM.c: 129: INTCON = INTCON | 0xC0;
  7783  0018E6  50F2               	movf	intcon,w,c	;volatile
  7784  0018E8  09C0               	iorlw	192
  7785  0018EA  6EF2               	movwf	intcon,c	;volatile
  7786  0018EC  0012               	return		;funcret
  7787  0018EE                     __end_of_EEWriteChar:
  7788                           	opt stack 0
  7789                           pclatu	equ	0xFFB
  7790                           pclath	equ	0xFFA
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           intcon2	equ	0xFF1
  7799                           postinc0	equ	0xFEE
  7800                           fsr0h	equ	0xFEA
  7801                           fsr0l	equ	0xFE9
  7802                           wreg	equ	0xFE8
  7803                           fsr1h	equ	0xFE2
  7804                           fsr1l	equ	0xFE1
  7805                           bsr	equ	0xFE0
  7806                           indf2	equ	0xFDF
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811 ;; *************** function i2_Busy_eep *****************
  7812 ;; Defined at:
  7813 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/busy_eep.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		None
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; This function calls:
  7834 ;;		Nothing
  7835 ;; This function is called by:
  7836 ;;		_EEWriteDouble
  7837 ;;		_EEWriteChar
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text51
  7842  0019E6                     __ptext51:
  7843                           	opt stack 0
  7844  0019E6                     i2_Busy_eep:
  7845                           	opt stack 20
  7846                           
  7847                           ;incstack = 0
  7848  0019E6  D000               	goto	i2l543
  7849  0019E8                     i2l543:
  7850  0019E8  B2A6               	btfsc	4006,1,c	;volatile
  7851  0019EA  D7FE               	goto	i2l543
  7852  0019EC  0012               	return		;funcret
  7853  0019EE                     __end_ofi2_Busy_eep:
  7854                           	opt stack 0
  7855                           pclatu	equ	0xFFB
  7856                           pclath	equ	0xFFA
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon2	equ	0xFF1
  7865                           postinc0	equ	0xFEE
  7866                           fsr0h	equ	0xFEA
  7867                           fsr0l	equ	0xFE9
  7868                           wreg	equ	0xFE8
  7869                           fsr1h	equ	0xFE2
  7870                           fsr1l	equ	0xFE1
  7871                           bsr	equ	0xFE0
  7872                           indf2	equ	0xFDF
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _Write_b_eep *****************
  7878 ;; Defined at:
  7879 ;;		line 49 in file "/opt/microchip/xc8/v1.34/sources/pic18/plib/EEP/write_B.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  badd            2   17[COMRAM] unsigned int 
  7882 ;;  bdat            1   19[COMRAM] unsigned char 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  GIE_BIT_VAL     1   20[COMRAM] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7894 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;Total ram usage:        4 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		_EEWriteDouble
  7904 ;;		_EEWriteChar
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text52
  7909  00163E                     __ptext52:
  7910                           	opt stack 0
  7911  00163E                     _Write_b_eep:
  7912                           	opt stack 20
  7913                           
  7914                           ;incstack = 0
  7915  00163E  0E00               	movlw	0
  7916  001640  6E15               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7917  001642  5013               	movf	Write_b_eep@badd+1,w,c
  7918  001644  0B03               	andlw	3
  7919  001646  6EAA               	movwf	4010,c	;volatile
  7920  001648  C012  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7921  00164C  C014  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7922  001650  9EA6               	bcf	4006,7,c	;volatile
  7923  001652  9CA6               	bcf	4006,6,c	;volatile
  7924  001654  84A6               	bsf	4006,2,c	;volatile
  7925  001656  0E00               	movlw	0
  7926  001658  BEF2               	btfsc	intcon,7,c	;volatile
  7927  00165A  0E01               	movlw	1
  7928  00165C  6E15               	movwf	Write_b_eep@GIE_BIT_VAL,c
  7929  00165E  9EF2               	bcf	intcon,7,c	;volatile
  7930  001660  0E55               	movlw	85
  7931  001662  6EA7               	movwf	4007,c	;volatile
  7932  001664  0EAA               	movlw	170
  7933  001666  6EA7               	movwf	4007,c	;volatile
  7934  001668  82A6               	bsf	4006,1,c	;volatile
  7935  00166A  D000               	goto	i2l574
  7936  00166C                     i2l574:
  7937  00166C  B2A6               	btfsc	4006,1,c	;volatile
  7938  00166E  D7FE               	goto	i2l574
  7939  001670  B015               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  7940  001672  D002               	bra	i2u142_45
  7941  001674  9EF2               	bcf	intcon,7,c	;volatile
  7942  001676  D001               	bra	i2u142_46
  7943  001678                     i2u142_45:
  7944  001678  8EF2               	bsf	intcon,7,c	;volatile
  7945  00167A                     i2u142_46:
  7946  00167A  94A6               	bcf	4006,2,c	;volatile
  7947  00167C  0012               	return		;funcret
  7948  00167E                     __end_of_Write_b_eep:
  7949                           	opt stack 0
  7950  0000                     pclatu	equ	0xFFB
  7951                           pclath	equ	0xFFA
  7952                           tblptru	equ	0xFF8
  7953                           tblptrh	equ	0xFF7
  7954                           tblptrl	equ	0xFF6
  7955                           tablat	equ	0xFF5
  7956                           prodh	equ	0xFF4
  7957                           prodl	equ	0xFF3
  7958                           intcon	equ	0xFF2
  7959                           intcon2	equ	0xFF1
  7960                           postinc0	equ	0xFEE
  7961                           fsr0h	equ	0xFEA
  7962                           fsr0l	equ	0xFE9
  7963                           wreg	equ	0xFE8
  7964                           fsr1h	equ	0xFE2
  7965                           fsr1l	equ	0xFE1
  7966                           bsr	equ	0xFE0
  7967                           indf2	equ	0xFDF
  7968                           fsr2h	equ	0xFDA
  7969                           fsr2l	equ	0xFD9
  7970                           status	equ	0xFD8
  7971                           pclatu	equ	0xFFB
  7972                           pclath	equ	0xFFA
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           intcon	equ	0xFF2
  7980                           intcon2	equ	0xFF1
  7981                           postinc0	equ	0xFEE
  7982                           fsr0h	equ	0xFEA
  7983                           fsr0l	equ	0xFE9
  7984                           wreg	equ	0xFE8
  7985                           fsr1h	equ	0xFE2
  7986                           fsr1l	equ	0xFE1
  7987                           bsr	equ	0xFE0
  7988                           indf2	equ	0xFDF
  7989                           fsr2h	equ	0xFDA
  7990                           fsr2l	equ	0xFD9
  7991                           status	equ	0xFD8
  7992                           
  7993                           	psect	rparam
  7994  0000                     pclatu	equ	0xFFB
  7995                           pclath	equ	0xFFA
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           intcon	equ	0xFF2
  8003                           intcon2	equ	0xFF1
  8004                           postinc0	equ	0xFEE
  8005                           fsr0h	equ	0xFEA
  8006                           fsr0l	equ	0xFE9
  8007                           wreg	equ	0xFE8
  8008                           fsr1h	equ	0xFE2
  8009                           fsr1l	equ	0xFE1
  8010                           bsr	equ	0xFE0
  8011                           indf2	equ	0xFDF
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      56
    BANK0           160     82     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DoublePtr	PTR unsigned char  size(2) Largest target is 3
		 -> NULL(NULL[0]), EEReassembleDouble@dub(BANK0[3]), EEDisassembleDouble@dub(COMRAM[3]), SPIReassembleDouble@dub(BANK0[3]), 
		 -> SPIDisassembleDouble@dub(BANK0[3]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _hISR in COMRAM

    _HLVDInt->_EEWriteDouble
    _EEWriteDouble->_Write_b_eep
    _EEWriteChar->_Write_b_eep

Critical Paths under _lISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_calculatePID
    _SPIInit->_OpenSPI1
    _RTDInit->_Delay10TCYx
    _RTDInit->_Delay1KTCYx
    _RTDInit->_Delay1TCYx
    _EEPROMInit->_EEBootUp
    _EEBootUp->_EEReadDouble
    _EEReadDouble->_EEReassembleDouble
    _EEReadChar->_Read_b_eep
    _calculatePID->___fttol
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    _SPIDisassembleDouble->_GenerateChecksum
    _ReadRTDpos->_Delay10TCYx
    _RTD2Angle->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    _ImplementPIDMotion->_abs
    _ImplementJSMotion->_DetectMovement

Critical Paths under _hISR in BANK0

    None.

Critical Paths under _lISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _hISR in BANK1

    None.

Critical Paths under _lISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _hISR in BANK2

    None.

Critical Paths under _lISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _hISR in BANK3

    None.

Critical Paths under _lISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _hISR in BANK4

    None.

Critical Paths under _lISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _hISR in BANK5

    None.

Critical Paths under _lISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _hISR in BANK6

    None.

Critical Paths under _lISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _hISR in BANK7

    None.

Critical Paths under _lISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _hISR in BANK8

    None.

Critical Paths under _lISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _hISR in BANK9

    None.

Critical Paths under _lISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _hISR in BANK10

    None.

Critical Paths under _lISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _hISR in BANK11

    None.

Critical Paths under _lISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _hISR in BANK12

    None.

Critical Paths under _lISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _hISR in BANK13

    None.

Critical Paths under _lISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _hISR in BANK14

    None.

Critical Paths under _lISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _hISR in BANK15

    None.

Critical Paths under _lISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   29123
                                             80 BANK0      2     2      0
                     _DetectJoystick
                     _DetectMovement
                  _ImplementJSMotion
                 _ImplementPIDMotion
                          _RTD2Angle
                         _ReadRTDpos
                        _ReceiveSPI1
               _SPIDisassembleDouble
                _SPIReassembleDouble
                           _SendSPI1
                       _calculatePID
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    1145
                         _EEPROMInit
               _InitializeInterrupts
                       _JoystickInit
                    _MotorDriverInit
                            _PIDInit
                            _RTDInit
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0     278
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (3) _OpenSPI1                                             3     1      2     278
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _RTDInit                                              0     0      0      93
                        _Delay10TCYx
                        _Delay1KTCYx
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1TCYx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIDInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MotorDriverInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitializeInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EEPROMInit                                           0     0      0     774
                           _EEBootUp
 ---------------------------------------------------------------------------------
 (3) _EEBootUp                                             2     2      0     774
                                             11 BANK0      2     2      0
                         _EEReadChar
                       _EEReadDouble
 ---------------------------------------------------------------------------------
 (4) _EEReadDouble                                         5     2      3     493
                                              6 BANK0      5     2      3
                           _Busy_eep
                 _EEReassembleDouble
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _EEReassembleDouble                                   6     3      3     116
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEReadChar                                           2     2      0     281
                                              2 BANK0      2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (5) _Read_b_eep                                           2     0      2     216
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calculatePID                                        15     9      6   18781
                                             65 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     316
                                             50 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5245
                                             50 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4881
                                             38 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     219
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     660
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3152
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _SendSPI1                                             2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIReassembleDouble                                  6     3      3     116
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIDisassembleDouble                                 3     0      3     606
                                              2 BANK0      3     0      3
                   _GenerateChecksum
 ---------------------------------------------------------------------------------
 (2) _GenerateChecksum                                     2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceiveSPI1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRTDpos                                          12    10      2     235
                                              1 BANK0     10     8      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTD2Angle                                            3     0      3    6593
                                             38 BANK0      3     0      3
                         _ReadRTDpos (ARG)
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2572
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3836
                                             23 BANK0     15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ImplementPIDMotion                                   4     2      2     627
                                              4 BANK0      4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (1) _ImplementJSMotion                                    7     5      2     581
                                              9 BANK0      7     5      2
                     _DetectMovement (ARG)
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     247
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _DetectMovement                                       9     7      2     198
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _DetectJoystick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _lISR                                                17    17      0       0
                                              0 COMRAM    17    17      0
                             _SPIInt
 ---------------------------------------------------------------------------------
 (7) _SPIInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _hISR                                                16    16      0    2074
                                             26 COMRAM    16    16      0
                            _HLVDInt
                            _INT0Int
                            _TMR0Int
 ---------------------------------------------------------------------------------
 (9) _TMR0Int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _INT0Int                                              0     0      0       0
                         _KillMotors
 ---------------------------------------------------------------------------------
 (10) _KillMotors                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _HLVDInt                                              0     0      0    2074
                        _EEWriteChar
                      _EEWriteDouble
 ---------------------------------------------------------------------------------
 (10) _EEWriteDouble                                       5     2      3     980
                                             21 COMRAM     5     2      3
                _EEDisassembleDouble
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (11) _EEDisassembleDouble                                 3     0      3     162
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) _EEWriteChar                                         2     1      1    1094
                                             21 COMRAM     2     1      1
                        _Write_b_eep
                         i2_Busy_eep
 ---------------------------------------------------------------------------------
 (11) i2_Busy_eep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _Write_b_eep                                         4     1      3     346
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DetectJoystick
   _DetectMovement
   _ImplementJSMotion
     _DetectMovement (ARG)
     _abs (ARG)
   _ImplementPIDMotion
     _abs
   _RTD2Angle
     _ReadRTDpos (ARG)
       _Delay10TCYx
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _ReadRTDpos
     _Delay10TCYx
   _ReceiveSPI1
   _SPIDisassembleDouble
     _GenerateChecksum
   _SPIReassembleDouble
   _SendSPI1
   _calculatePID
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _initialize
     _EEPROMInit
       _EEBootUp
         _EEReadChar
           _Read_b_eep
         _EEReadDouble
           _Busy_eep
           _EEReassembleDouble
           _Read_b_eep
     _InitializeInterrupts
     _JoystickInit
     _MotorDriverInit
     _PIDInit
     _RTDInit
       _Delay10TCYx
       _Delay1KTCYx
       _Delay1TCYx
     _SPIInit
       _OpenSPI1

 _lISR (ROOT)
   _SPIInt

 _hISR (ROOT)
   _HLVDInt
     _EEWriteChar
       _Write_b_eep
       i2_Busy_eep
     _EEWriteDouble
       _EEDisassembleDouble
       _Write_b_eep
       i2_Busy_eep
   _INT0Int
     _KillMotors
   _TMR0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      75       5       73.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      38       1       58.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      32        0.0%
DATA                 0      0      AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 28 04:58:40 2015

      __size_of_MotorDriverInit 0024                              l31 179C                              l40 18CA  
                            l43 1122                              l37 18B4                              l49 11CA  
                            _Kd 00B8                              _Ki 00BB                              _Kp 00BE  
                            bsr 000FE0             ?_EEReassembleDouble 0060                    ___ftadd@exp1 0091  
                  ___ftadd@exp2 0090       ImplementJSMotion@CCPinput 006E                    ___ftadd@sign 008F  
                           l260 19BE                             l148 04C2                             l340 12FA  
                           l254 1938                             l263 19C6                             l271 163C  
                           l184 130A                             l600 1430                             l512 183E  
                           l185 1318                             l601 1416                             l194 16BA  
                           l186 136C                             l274 15FC                             l362 183A  
                           l346 15B8                             l602 141A                             l356 13D6  
                           l543 19E0                             l653 180A                             l493 01EE  
                           l654 1812                             l559 1926                             l495 0224  
                           l593 13F2                             l489 01C0                             l842 1956  
                           l835 196C                             l595 13F6                             l596 13F8  
                           l950 0D94                             l847 19AC                             l599 1414  
                           l849 19B6                             l939 0DCC                             l980 08DC  
                           l983 0702                             l985 072C                             l994 0810  
                           l979 06C8                             _PR2 000FCB                             _abs 17E8  
          __size_of_Write_b_eep 0040                             prod 000FF3                             wreg 000FE8  
               __end_of_INT0Int 18AA                    ___ftdiv@cntr 0071                 __end_of_HLVDInt 106E  
                    _Delay1TCYx 19A8                    ___ftdiv@sign 0076                    __CFG_WDT$OFF 000000  
                          l1011 0B7A                            l1003 083A                            l1020 0FB4  
                          l1014 0B42                            l1026 0A38                            l1043 152E  
                          ?_abs 0060                            l1036 1780                            l1047 0CAC  
                          l1176 17E6                            l3210 0D20                            l3202 0CC8  
                          l3300 0722                            l3230 0DBE                            l3214 0D42  
                          l3206 0CDE                            l3310 0764                            l3224 0DA0  
                          l3216 0D74                            l3208 0CEE                            l3320 07B4  
                          l3218 0D84                            l3234 195C                            l3330 0800  
                          l3322 07C0                            l3412 1618                            l3316 0794  
                          l3180 137E                            l3510 092E                            l3318 07A4  
                          l2702 0C2A                            l3238 1946                            l3254 13FC  
                          l3408 160A                            l3336 0866                            l3328 07F0  
                          l2720 0C9A                            l2712 0C5C                            l3192 13BE  
                          l3184 1388                            l3360 17AA                            l3514 0942  
                          l3418 1636                            l3346 08B6                            l2714 0C6E  
                          l2706 0C3E                            l3258 141E                            l3532 09B2  
                          l3508 0908                            l3700 1310                            l2708 0C46  
                          l2716 0C7C                            l3542 09F6                            l3462 0A64  
                          l3294 0710                            l3616 11BE                            l3608 11AE  
                          l3632 120E                            l3624 11E4                            l3536 09CE  
                          l3528 0992                            l3464 0A8A                            l3288 06D6  
                          l3546 0A12                            l3538 09D6                            l3562 0F2A  
                          l3554 1504                            l3652 0E2C                            l3636 1226  
                          l3628 1204                            l3468 0A9E                            l3572 0FB0  
                          l2684 0BA6                            l3804 00C2                            l3566 0F6C  
                          l3670 03DA                            l3830 0156                            l3822 011E  
                          l3648 0E00                            l3488 0B00                            l3904 02C8  
                          l3658 0E88                            l3498 0B54                            l3682 055E  
                          l3834 0172                            l3826 013A                            l3818 0102  
                          l3676 046A                            l3852 01B8                            l3918 032A  
                          l3838 018E                            l3854 01C8                            l3936 038A  
                          l3864 01F8                            l3848 019C                            l3890 0284  
                          l3882 024C                            l3868 0206                            l3886 0268  
                          l3894 02A0                            l3896 02A6                            l3898 02AA  
                          u3011 091E                            u1900 0BCC                            u3190 1222  
                          u1905 0BC2                            u2661 0676                            u2671 0694  
                          u1881 0B92                            u2941 0A50                            u2961 0A7A  
                          u3657 1948                            u3667 195E                            u2991 08F4  
               __end_of_PIDInit 1576  ImplementJSMotion@JoystickValue 0069            ??_EEReassembleDouble 0063  
                          _hISR 0008                            _lISR 0018                    EEReadChar@ch 0063  
               __end_of_TMR0Int 19A8                            abs@a 0060                            _main 00B0  
                  ___ftpack@arg 0060                     _DeadbandLow 0038                    ___ftpack@exp 0063  
               __end_of_RTDInit 175E                 __end_of_SPIInit 190C                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          pclat 000FFA                  ??_EEReadDouble 0069                            prodh 000FF4  
                          prodl 000FF3                            start 00AC             __size_of_EEPROMInit 0014  
                  ?_EEWriteChar 0016                    ___ftmul@cntr 0084                    ___param_bank 000010  
                  ___ftmul@sign 0085   __size_of_InitializeInterrupts 000C                     _Delay10TCYx 1958  
              __end_of_EEBootUp 12FC                    ___fttol@exp1 00A0                           ??_abs 0062  
                  ___fttol@lval 009C                     _Delay1KTCYx 1942                           ?_hISR 0001  
                         ?_lISR 0001                     ReadRTDpos@x 006A               RTD2Angle@RTDAngle 0086  
                         ?_main 0001                           _EEADR 000FA9                 __end_of___ftadd 08DE  
               __end_of___ftdiv 0B7C                 __end_of___ftneg 178E                 __end_of___ftmul 0A3A  
                         _T0CON 000FD5                 __end_of___ftsub 1530                 __end_of___fttol 0CAE  
                         _T2CON 000FCA                           _T3CON 000FB1                           i1l526 0066  
                         i2l530 189E                           i2l522 10E4                           i2l543 19E8  
                         i2l574 166C              __size_of_RTD2Angle 003E                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _PORTE 000F84  
                         _PORTF 000F85                           _PORTG 000F86                           _PORTH 000F87  
                         _PORTJ 000F88          ??_SPIDisassembleDouble 0065                           _TRISD 000F95  
                         _TRISH 000F99                  __CFG_FCMEN$OFF 000000                  Read_b_eep@badd 0060  
           __size_of_EEReadChar 0028          __size_of_EEWriteDouble 0054          Write_b_eep@GIE_BIT_VAL 0015  
                  _DeadbandHigh 0037                           _error 00C1                   ___ftpack@sign 0064  
                    _DoubleSPIS 002B                           main@x 00B1                   ??_ReceiveSPI1 0060  
                         tablat 000FF5                     ?i2_Busy_eep 0001                           status 000FD8  
                 EEReadDouble@x 006A      __size_of_ImplementJSMotion 011A           EEWriteDouble@location 0019  
           GenerateChecksum@sum 0060                      _ReadRTDpos 12FC                      _KillMotors 19D4  
               __initialization 1438                    __end_of_hISR 111E                    __end_of_lISR 00AC  
                  __end_of_main 0392                  _DetectJoystick 18AA                  _DetectMovement 111E  
                    _Read_b_eep 190C                __end_of_Busy_eep 19E6           EEReassembleDouble@dub 0063  
                __CFG_OSC$HSPLL 000000                          ??_hISR 001B                          ??_lISR 0001  
              __end_of_SendSPI1 1942                __end_of_OpenSPI1 1438                          ??_main 00B0  
                 ___fttol@sign1 009B                   __activetblptr 000003               ??_MotorDriverInit 0060  
       DetectMovement@ADCresult 0067                       ??_INT0Int 0012                       ??_HLVDInt 001B  
                     ??_PIDInit 0060                       ??_TMR0Int 0012                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                       ??_RTDInit 0061  
                        _EEDATA 000FA8                     ?_Delay1TCYx 0001                       ??_SPIInit 0063  
                        _CCPR3L 000FB8                          _EECON2 000FA7                __end_of___ftpack 0DCE  
         __size_of_calculatePID 02CE                          i2l3442 14B0                          i2l3452 14D8  
                        i2l3438 14A8                          i2l2960 1894                          i2l3950 10CC  
                        _INTCON 000FF2                          i2l3946 10C2                          i2l3956 10DC  
              __end_of___lwtoft 17E8                          _SPIInt 1982               __end_of_RTD2Angle 16BC  
           __end_of_ReceiveSPI1 19C8          __end_of_DetectJoystick 18CC          __end_of_DetectMovement 11CC  
              OpenSPI1@bus_mode 0060                   _EEWriteDouble 148C                          ___ftge 0EE8  
                     ??___ftadd 008C                       ??___ftdiv 006E                       ??___ftneg 0063  
                     ??___ftmul 007D                       ??___ftsub 0098                       ??___fttol 0096  
                        _intErr 00C4                          clear_0 143E                          clear_1 144A  
           __size_ofi2_Busy_eep 0008           ___ftmul@f3_as_product 0081                   main@temporary 00B0  
                  ??_EEPROMInit 006D     __size_of_ImplementPIDMotion 00A8                    __pdataCOMRAM 0037  
                  _calculatePID 0392            __end_of_EEReadDouble 13D8               _calculatePID$3512 00AA  
             _calculatePID$3513 00AD                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8               ?_GenerateChecksum 0001                       ?_EEBootUp 0001  
                    __accesstop 0060         __end_of__initialization 1486              ??_GenerateChecksum 0060  
                    ___ftadd@f1 0086                      ___ftadd@f2 0089                      ___ftge@ff1 0060  
                    ___ftge@ff2 0063                   ___rparam_used 000001                      ___ftdiv@f1 0068  
                    ___ftdiv@f2 006B                      ___ftdiv@f3 0072              EEReadChar@location 0062  
                    ___ftneg@f1 0060                     ?_ReadRTDpos 0061                     ?_KillMotors 0001  
                  ??_EEReadChar 0062                  ?_EEWriteDouble 0016                      ___ftmul@f1 0077  
                    ___ftmul@f2 007A                 ?_DetectJoystick 0001                 ?_DetectMovement 0060  
            __end_of_EEPROMInit 1982                      ___ftsub@f1 0092                      ___ftsub@f2 0095  
                    ___fttol@f1 0092                  __pcstackCOMRAM 0001     __end_of_EEDisassembleDouble 172E  
                  __pidataBANK0 19EE            __size_of_EEWriteChar 0022                     ?_Read_b_eep 0060  
           __size_of_Delay1TCYx 0010               GenerateChecksum@y 0061                      ___lwtoft@c 0068  
  __size_of_SPIReassembleDouble 0044              __end_of_EEReadChar 183C                      __pbssBANK0 00B2  
                   _ReceiveSPI1 19B8                      ??_EEBootUp 006B                       ?_Busy_eep 0001  
                 ?_JoystickInit 0001                         ?_SPIInt 0001                       ?_SendSPI1 0001  
                     ?_OpenSPI1 0060                         ?___ftge 0060                    ?_Delay10TCYx 0001  
                EEWriteDouble@x 001A                         _CCP3CON 000FB7                    ?_Delay1KTCYx 0001  
                     ?___ftpack 0060                   ??_Write_b_eep 0015                       ?___lwtoft 0068  
                       _HLVDCON 000FD2                         _INT0Int 1886                         _HLVDInt 0FB6  
  __end_of_InitializeInterrupts 19D4                         _PIDInit 1530                         _DDouble 002F  
           __size_of_ReadRTDpos 0072             __size_of_KillMotors 000A                   _PIDEnableFlag 00CE  
                       _SSP1BUF 000FC9                         _SSP2BUF 000F66                         _TMR0Int 1996  
    ImplementPIDMotion@PIDValue 0064                         _RTDInit 172E                         _SPIInit 18EE  
                       _SPIflag 00CF                EEWriteDouble@dub 0016             __size_of_Read_b_eep 001C  
                ??_JoystickInit 0060                    ??i2_Busy_eep 0012     __size_of_EEReassembleDouble 0044  
                    ??_Busy_eep 0060                         _Command 00CC                 __size_of_SPIInt 0014  
                    ??_SendSPI1 0060                 ??_EEWriteDouble 0019                      ??_OpenSPI1 0062  
           EEWriteChar@location 0017                         __Hparam 0000                         __Lparam 0000  
               _MotorDriverInit 1862                 __size_of___ftge 00CE                         ___ftadd 0660  
                       ___ftdiv 0A3A                         ___ftneg 175E                         ___ftmul 08DE  
                       ___ftsub 14E0                         ___fttol 0B7C                      _dummy_byte 00D1  
         __size_of_EEReadDouble 006A                    SendSPI1@data 0061                         __pcinit 1438  
                    ??___ftpack 0065                 Delay10TCYx@unit 0060                         __ramtop 1000  
                    _initialize 183C                    SendSPI1@temp 0060                         __ptext0 00B0  
                       __ptext1 183C                         __ptext2 18EE                         __ptext3 13D8  
                       __ptext4 172E                         __ptext5 19A8                         __ptext6 1942  
                       __ptext7 1530                         __ptext8 1862                         __ptext9 178E  
                    ??___lwtoft 006B                       _T0CONbits 000FD5                    __size_of_abs 002C  
            __end_ofi2_Busy_eep 19EE                         _prevErr 00C7   __size_of_SPIDisassembleDouble 003C  
           __end_of_Write_b_eep 167E                    ??_Delay1TCYx 0060                  __pintcode_body 106E  
          end_of_initialization 1486                         int_func 106E               OpenSPI1@smp_phase 0061  
                  _EEReadDouble 136E           ReadRTDpos@LowPosition 0067                      _motorInput 00CA  
                     _RTD2Angle 167E                         postinc0 000FEE               OpenSPI1@sync_mode 0062  
            __end_of_Delay1TCYx 19B8                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTEbits 000F84                       _PORTJbits 000F88  
                     _TRISAbits 000F92                       _TRISBbits 000F93                       _TRISCbits 000F94  
                     _TRISDbits 000F95                       _TRISEbits 000F96                       _TRISFbits 000F97  
                     _TRISGbits 000F98                       _TRISJbits 000F9A         __end_of_MotorDriverInit 1886  
              ??_DetectJoystick 0060                ??_DetectMovement 0062                     ___ftdiv@exp 0075  
             __size_of_EEBootUp 0088             _SPIReassembleDouble 15BA                     _CCP3CONbits 000FB7  
                __end_of_SPIInt 1996                    ??_ReadRTDpos 0063                    ??_KillMotors 0012  
                   ___ftmul@exp 0080            _InitializeInterrupts 19C8                      ?_RTD2Angle 0086  
     __size_of_GenerateChecksum 0040                    ??_Read_b_eep 0062                  __end_of___ftge 0FB6  
          __size_of_Delay10TCYx 0016                   __pidataCOMRAM 19F1      __end_of_ImplementPIDMotion 1274  
                   ?_initialize 0001                     _Write_b_eep 163E            __end_of_JoystickInit 17BC  
          __size_of_Delay1KTCYx 0016            ?_SPIReassembleDouble 0060                       _DoublePtr 0035  
           start_initialization 1438                 _CurrentVelocity 00B5                    _CurrentAngle 00B2  
                   __end_of_abs 1814              __end_of_ReadRTDpos 136E              __end_of_KillMotors 19DE  
                  ?_ReceiveSPI1 0001              __end_of_Read_b_eep 1928            EEReadDouble@location 0069  
                      ??_SPIInt 0001               __size_of_Busy_eep 0008            calculatePID@setpoint 00A4  
                 ??_EEWriteChar 0017          ReadRTDpos@HighPosition 0066               __size_of_SendSPI1 001A  
             __size_of_OpenSPI1 0060           ?_InitializeInterrupts 0001                        ??___ftge 0066  
                   __pdataBANK0 00D2           ??_SPIReassembleDouble 0063    __size_of_EEDisassembleDouble 0036  
             __size_of___ftpack 0120                        ?_INT0Int 0001                        ?_HLVDInt 0001  
                   __pbssCOMRAM 002B               __size_of___lwtoft 002C                   __pcstackBANK0 0060  
                      ?_PIDInit 0001                        ?_TMR0Int 0001              calculatePID@derErr 00A7  
                      ?_RTDInit 0001                        ?_SPIInit 0001                 Delay1KTCYx@unit 0060  
              ?_MotorDriverInit 0001             __size_of_initialize 0026          SPIReassembleDouble@dub 0063  
                 EEWriteChar@ch 0016                       __pintcode 0008                     ??_RTD2Angle 0089  
                      ?___ftadd 0086                        ?___ftdiv 0068                        ?___ftneg 0060  
                      ?___ftmul 0077                        ?___ftsub 0092                        ?___fttol 0092  
                   __pintcodelo 0018             __end_of_EEWriteChar 18EE      __end_of_EEReassembleDouble 15BA  
                      _EEBootUp 1274                        _IPR1bits 000F9F                        _IPR2bits 000FA2  
                      _PIE1bits 000F9D                        _PIE2bits 000FA0          ??_InitializeInterrupts 0060  
         __end_of_EEWriteDouble 14E0                        i2u142_45 1678                        i2u142_46 167A  
  __end_of_SPIDisassembleDouble 16F8                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
                      _RCONbits 000FD0           __size_of_JoystickInit 002E                        _SSP1CON1 000FC6  
                      _TMR0Flag 00D0                _GenerateChecksum 15FE                        _SSP1STAT 000FC7  
                    _ADCON0bits 000FC2                 Write_b_eep@badd 0012                 Write_b_eep@bdat 0014  
                 ?_calculatePID 00A1                __size_of_INT0Int 0024                __size_of_HLVDInt 00B8  
              __size_of_PIDInit 0046                     _INTCON2bits 000FF1                __size_of_TMR0Int 0012  
              __size_of_RTDInit 0030                __size_of_SPIInit 001E                        _Busy_eep 19DE  
          __size_of_ReceiveSPI1 0010                    _JoystickInit 178E                        _SendSPI1 1928  
                    _EECON1bits 000FA6                        _SetAngle 0032                        _OpenSPI1 13D8  
        ReadRTDpos@FullPosition 0068                        __Hrparam 0000                     _EEWriteChar 18CC  
                      __Lrparam 0000                    _JSEnableFlag 00CD                __size_of___ftadd 027E  
              __size_of___ftdiv 0142                __size_of___ftneg 0030                __size_of___ftmul 015C  
              __size_of___ftsub 0050                __size_of___fttol 0132                    ??_initialize 006D  
                      ___ftpack 0CAE                    ?_Write_b_eep 0012               calculatePID@angle 00A1  
                ??_calculatePID 00A7                        ___lwtoft 17BC                      _EEPROMInit 196E  
                      __ptext10 19C8                        __ptext11 196E                        __ptext20 14E0  
                      __ptext12 1274                        __ptext21 0660                        __ptext13 136E  
                      __ptext30 12FC                        __ptext22 175E                        __ptext14 1576  
                      __ptext31 1958                        __ptext23 0EE8                        __ptext15 19DE  
                      __ptext40 18AA                        __ptext32 167E                        __ptext24 0A3A  
                      __ptext16 1814                        __ptext33 17BC                        __ptext25 1928  
                      __ptext17 190C                        __ptext50 18CC                        __ptext42 1982  
                      __ptext34 08DE                        __ptext26 15BA                        __ptext18 0392  
                      __ptext51 19E6                        __ptext35 0CAE                        __ptext27 16BC  
                      __ptext19 0B7C                        __ptext52 163E                        __ptext44 1996  
                      __ptext36 11CC                        __ptext28 15FE                        __ptext45 1886  
                      __ptext37 0DCE                        __ptext29 19B8                        __ptext46 19D4  
                      __ptext38 17E8                        __ptext47 0FB6                        __ptext39 111E  
                      __ptext48 148C                        __ptext49 16F8                    _SSP1CON1bits 000FC6  
            _ImplementPIDMotion 11CC                    _SSP2CON1bits 000F63                   __size_of_hISR 1116  
                 __size_of_lISR 0094                   __size_of_main 02E2             _EEDisassembleDouble 16F8  
                Delay1TCYx@unit 0060             ?_ImplementPIDMotion 0064              __end_of_initialize 1862  
                      _loopTime 00D2                      _EEReadChar 1814                   ??_Delay10TCYx 0060  
                 ??_Delay1KTCYx 0060                    _SSP1STATbits 000FC7            ?_EEDisassembleDouble 0012  
          ??_ImplementPIDMotion 0066                      _INTCONbits 000FF2            _SPIDisassembleDouble 16BC  
                      intlevel1 0000                        intlevel2 0000                      _OSCCONbits 000FD3  
  DetectMovement@JoystickResult 0065               _ImplementJSMotion 0DCE     __end_of_SPIReassembleDouble 15FE  
            ?_ImplementJSMotion 0069         __size_of_DetectJoystick 0022         __size_of_DetectMovement 00AE  
         ??_EEDisassembleDouble 0015             __end_of_Delay10TCYx 196E             ??_ImplementJSMotion 006B  
        EEDisassembleDouble@dub 0012                     ?_EEPROMInit 0001             __end_of_Delay1KTCYx 1958  
         ?_SPIDisassembleDouble 0062        __end_of_GenerateChecksum 163E                      i2_Busy_eep 19E6  
       SPIDisassembleDouble@dub 0062       __end_of_ImplementJSMotion 0EE8            __end_of_calculatePID 0660  
                 ?_EEReadDouble 0066                     ?_EEReadChar 0001              _EEReassembleDouble 1576  
